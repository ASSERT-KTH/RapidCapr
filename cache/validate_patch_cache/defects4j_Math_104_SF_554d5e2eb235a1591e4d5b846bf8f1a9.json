{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    } else if (x == 0.0) {\n        return 0.0;\n    } else if (x >= a + 1.0) {\n        return 1 - regularizedGammaQ(a, x);\n    } else {\n        final int maxIters = 1000;\n\n        // set initial values\n        double p = 1.0 / a;\n        double gln = logGamma(a);\n        double oldP = p;\n        double sum = p;\n\n        for (int i = 0; i < maxIters; i++) {\n            double an = i + 1.0;\n            double delt = -(x + a) + (a + an) * x / (1.0 + an);\n            p *= delt / an;\n            sum += p;\n            if (Math.abs(p) < Math.abs(oldP) * 10e-15) {\n                return sum * Math.exp(-x + a * Math.log(x) - gln) / a;\n            }\n            oldP = p;\n        }\n        return sum * Math.exp(-x + a * Math.log(x) - gln) / a;\n    }\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    } else if (x == 0.0) {\n        return 1.0;\n    } else if (x < a + 1.0) {\n        return 1 - regularizedGammaP(a, x);\n    } else {\n        final double eps = 10e-15;\n        final int maxIters = 1000;\n\n        // set initial values\n        double b2 = x + 1.0 - a;\n        double b1 = 1.0;\n        double b0 = x;\n        double c2 = 1.0;\n        double c1 = b2;\n        double c0 = b1;\n        double ans = 0.0;\n\n        for (int i = 0; i < maxIters; i++) {\n            double an = -i * (i - a);\n            b0 = (b1 + b2 * x) / an;\n            c0 = (c1 + c2 * x) / an;\n            ans += b0;\n            if (Math.abs(b0) < eps * Math.abs(ans)) {\n                return ans * Math.exp(-x + a * Math.log(x) - logGamma(a));\n            }\n            b2 = b1;\n            b1 = b0;\n            c2 = c1;\n            c1 = c0;\n            if (Math.abs(b0) > 10e-15) {\n                b0 = b1 / b0;\n                c0 = c1 / c0;\n                double delta = b0 * c1 - c0 * b1;\n                if (Math.abs(delta - 1.0) > 10e-15 && Math.abs(delta) > 10e-15) {\n                    return ans * delta * Math.exp(-x + a * Math.log(x) - logGamma(a));\n                }\n            }\n        }\n        throw new IllegalStateException(\"RGQ Failed to Converge\");\n    }\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0)\n            - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n    double result = tmp + Math.log(Math.sqrt(2 * Math.PI) * ser / x);\n    return result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..2089b57e2 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,88 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    } else if (x == 0.0) {\n+        return 0.0;\n+    } else if (x >= a + 1.0) {\n+        return 1 - regularizedGammaQ(a, x);\n+    } else {\n+        final int maxIters = 1000;\n+\n+        // set initial values\n+        double p = 1.0 / a;\n+        double gln = logGamma(a);\n+        double oldP = p;\n+        double sum = p;\n+\n+        for (int i = 0; i < maxIters; i++) {\n+            double an = i + 1.0;\n+            double delt = -(x + a) + (a + an) * x / (1.0 + an);\n+            p *= delt / an;\n+            sum += p;\n+            if (Math.abs(p) < Math.abs(oldP) * 10e-15) {\n+                return sum * Math.exp(-x + a * Math.log(x) - gln) / a;\n+            }\n+            oldP = p;\n+        }\n+        return sum * Math.exp(-x + a * Math.log(x) - gln) / a;\n+    }\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    } else if (x == 0.0) {\n+        return 1.0;\n+    } else if (x < a + 1.0) {\n+        return 1 - regularizedGammaP(a, x);\n+    } else {\n+        final double eps = 10e-15;\n+        final int maxIters = 1000;\n+\n+        // set initial values\n+        double b2 = x + 1.0 - a;\n+        double b1 = 1.0;\n+        double b0 = x;\n+        double c2 = 1.0;\n+        double c1 = b2;\n+        double c0 = b1;\n+        double ans = 0.0;\n+\n+        for (int i = 0; i < maxIters; i++) {\n+            double an = -i * (i - a);\n+            b0 = (b1 + b2 * x) / an;\n+            c0 = (c1 + c2 * x) / an;\n+            ans += b0;\n+            if (Math.abs(b0) < eps * Math.abs(ans)) {\n+                return ans * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+            }\n+            b2 = b1;\n+            b1 = b0;\n+            c2 = c1;\n+            c1 = c0;\n+            if (Math.abs(b0) > 10e-15) {\n+                b0 = b1 / b0;\n+                c0 = c1 / c0;\n+                double delta = b0 * c1 - c0 * b1;\n+                if (Math.abs(delta - 1.0) > 10e-15 && Math.abs(delta) > 10e-15) {\n+                    return ans * delta * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+                }\n+            }\n+        }\n+        throw new IllegalStateException(\"RGQ Failed to Converge\");\n+    }\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0)\n+            - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n+    double result = tmp + Math.log(Math.sqrt(2 * Math.PI) * ser / x);\n+    return result;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}