{
    "patch": "        if (block.isFunction) {\n          int assignedCount = 0;\n          int size = references.size();\n          for (int i = 0; i < size; i++) {\n            Reference ref = references.get(i);\n            if (ref.isAssignmentToName()) {\n              assignedCount++;\n              if (assignedCount > 1) {\n                return false;\n              }\n            }\n          }\n          break;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..1afd23cd 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          int assignedCount = 0;\n+          int size = references.size();\n+          for (int i = 0; i < size; i++) {\n+            Reference ref = references.get(i);\n+            if (ref.isAssignmentToName()) {\n+              assignedCount++;\n+              if (assignedCount > 1) {\n+                return false;\n+              }\n+            }\n+          }\n+          break;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable ref is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}