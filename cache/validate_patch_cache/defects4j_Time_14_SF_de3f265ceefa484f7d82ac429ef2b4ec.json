{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n        // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology)\n                       .set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n\n        // Calculate new year and month\n        Chronology chrono = iChronology.withUTC();\n        int newYear = chrono.year().get(instant);\n        int newMonth = chrono.monthOfYear().get(instant);\n\n        // Calculate maximum valid day for new month in new year\n        int maxDay = chrono.dayOfMonth().getMaximumValue(newYear, newMonth);\n\n        // Check if day is still valid; adjust if necessary\n        int newDay = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n        if (newDay > maxDay) {\n            newDay = maxDay;\n        }\n\n        return chrono.get(partial, chrono.dayOfMonth()\n               .set(chrono.monthOfYear()\n               .set(chrono.year().set(instant, newYear), newMonth), newDay));\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..792f52bf 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,42 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+        // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology)\n+                       .set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        instant = add(instant, valueToAdd);\n+\n+        // Calculate new year and month\n+        Chronology chrono = iChronology.withUTC();\n+        int newYear = chrono.year().get(instant);\n+        int newMonth = chrono.monthOfYear().get(instant);\n+\n+        // Calculate maximum valid day for new month in new year\n+        int maxDay = chrono.dayOfMonth().getMaximumValue(newYear, newMonth);\n+\n+        // Check if day is still valid; adjust if necessary\n+        int newDay = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n+        if (newDay > maxDay) {\n+            newDay = maxDay;\n         }\n+\n+        return chrono.get(partial, chrono.dayOfMonth()\n+               .set(chrono.monthOfYear()\n+               .set(chrono.year().set(instant, newYear), newMonth), newDay));\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}