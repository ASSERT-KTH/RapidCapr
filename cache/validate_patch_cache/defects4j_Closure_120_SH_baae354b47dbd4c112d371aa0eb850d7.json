{
    "patch": "    for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n      if (block.isFunction) {\n        // If there is a function in the reaching block and it is not the source block,\n        // then other code may modify the variable too.\n        return block.equals(ref.getBasicBlock());\n      } else if (block.isLoop) {\n        return false;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c5acc211 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+    for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n+      if (block.isFunction) {\n+        // If there is a function in the reaching block and it is not the source block,\n+        // then other code may modify the variable too.\n+        return block.equals(ref.getBasicBlock());\n+      } else if (block.isLoop) {\n+        return false;\n+      }\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}