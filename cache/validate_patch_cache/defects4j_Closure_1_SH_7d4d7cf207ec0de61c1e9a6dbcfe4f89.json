{
    "patch": "    \n    // The loop goes only to child count.\n    Node arg = argList.getFirstChild();\n    int i = 0;\n    while (arg != null && i < referenced.size()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (referenced.contains(var)) {\n        i++;\n      } else {\n        Node next = arg.getNext();\n        argList.removeChild(arg);\n        compiler.reportCodeChange();\n        arg = next;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..cabf1715 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    // The loop goes only to child count.\n+    Node arg = argList.getFirstChild();\n+    int i = 0;\n+    while (arg != null && i < referenced.size()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (referenced.contains(var)) {\n+        i++;\n+      } else {\n+        Node next = arg.getNext();\n+        argList.removeChild(arg);\n+        compiler.reportCodeChange();\n+        arg = next;\n+      }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}