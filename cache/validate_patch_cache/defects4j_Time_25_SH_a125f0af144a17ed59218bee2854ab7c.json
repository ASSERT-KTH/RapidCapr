{
    "patch": "            if (offsetLocal < offsetAdjusted) {\n                long prevTransition = previousTransition(instantLocal - offsetLocal);\n                if (prevTransition != instantAdjusted) {\n                    int correctOffset = getOffset(prevTransition);\n                    if (correctOffset == offsetLocal) {\n                        return offsetLocal;\n                    }\n                    return correctOffset;\n                }\n            } else {\n                long nextTransition = nextTransition(instantLocal - offsetLocal);\n                if (nextTransition != instantAdjusted) {\n                    int correctOffset = getOffset(nextTransition);\n                    if (correctOffset == offsetLocal) {\n                        return offsetLocal;\n                    }\n                    return correctOffset;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..bd5ed844 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,23 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal < offsetAdjusted) {\n+                long prevTransition = previousTransition(instantLocal - offsetLocal);\n+                if (prevTransition != instantAdjusted) {\n+                    int correctOffset = getOffset(prevTransition);\n+                    if (correctOffset == offsetLocal) {\n+                        return offsetLocal;\n+                    }\n+                    return correctOffset;\n+                }\n+            } else {\n+                long nextTransition = nextTransition(instantLocal - offsetLocal);\n+                if (nextTransition != instantAdjusted) {\n+                    int correctOffset = getOffset(nextTransition);\n+                    if (correctOffset == offsetLocal) {\n+                        return offsetLocal;\n+                    }\n+                    return correctOffset;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}