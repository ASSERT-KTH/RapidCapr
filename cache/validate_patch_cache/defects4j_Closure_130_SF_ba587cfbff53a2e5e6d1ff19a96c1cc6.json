{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n  Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n  \n  while (!workList.isEmpty()) {\n    Name name = workList.removeFirst();\n    \n    if (name.getType() == null) { continue; }\n    \n    // If name is a getter or setter type, do not attempt to inline it.\n    if (name.getType() == Name.Type.GET || name.getType() == Name.Type.SET) {\n      continue;\n    }\n    \n    // If the name is a qualified name and it was created as a result of\n    // inlining, attempt to inline it.\n    if (name.getBaseName() != null && name.getParent() != null) {\n      if (inlineQualifiedNameIfPossible(name)) {\n        // If the inlining was successful, remove the reference to the base name.\n        name.getParent().removeChild(name.getBaseName());\n      }\n      continue;\n    }\n    \n    // Local alias inlining\n    if (name.getLocalSets() == 0 && name.getAliasCount() > 0 && name.getGlobalSets() == 1) {\n      inlineLocalAliasIfPossible(name, namespace);\n    }\n    \n    // Non-local alias inlining\n    if (name.getType() != Name.Type.OBJECTLIT && name.getType() != Name.Type.FUNCTION &&\n        name.getLocalSets() == 0 && name.getAliasCount() > 0 && name.getGlobalSets() == 1 &&\n        name.getProps() == null) {\n      inlineNonLocalAliasIfPossible(name, namespace);\n    }\n    \n    // Add children which are object literals or functions and meet Condition A to the worklist.\n    if ((name.getType() == Name.Type.OBJECTLIT || name.getType() == Name.Type.FUNCTION) && \n          name.getAliasCount() == 0 && name.getProps() != null) {\n      List<Name> props = ImmutableList.copyOf(name.getProps());\n      for (Name prop : props) {\n        if (prop.getParent() == null) { continue; }\n        workList.addLast(prop);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..24597981 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,52 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n-    while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n-      }\n-\n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n-            }\n-          }\n-        }\n+private void inlineAliases(GlobalNamespace namespace) {\n+  Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n+  \n+  while (!workList.isEmpty()) {\n+    Name name = workList.removeFirst();\n+    \n+    if (name.getType() == null) { continue; }\n+    \n+    // If name is a getter or setter type, do not attempt to inline it.\n+    if (name.getType() == Name.Type.GET || name.getType() == Name.Type.SET) {\n+      continue;\n+    }\n+    \n+    // If the name is a qualified name and it was created as a result of\n+    // inlining, attempt to inline it.\n+    if (name.getBaseName() != null && name.getParent() != null) {\n+      if (inlineQualifiedNameIfPossible(name)) {\n+        // If the inlining was successful, remove the reference to the base name.\n+        name.getParent().removeChild(name.getBaseName());\n       }\n-\n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n+      continue;\n+    }\n+    \n+    // Local alias inlining\n+    if (name.getLocalSets() == 0 && name.getAliasCount() > 0 && name.getGlobalSets() == 1) {\n+      inlineLocalAliasIfPossible(name, namespace);\n+    }\n+    \n+    // Non-local alias inlining\n+    if (name.getType() != Name.Type.OBJECTLIT && name.getType() != Name.Type.FUNCTION &&\n+        name.getLocalSets() == 0 && name.getAliasCount() > 0 && name.getGlobalSets() == 1 &&\n+        name.getProps() == null) {\n+      inlineNonLocalAliasIfPossible(name, namespace);\n+    }\n+    \n+    // Add children which are object literals or functions and meet Condition A to the worklist.\n+    if ((name.getType() == Name.Type.OBJECTLIT || name.getType() == Name.Type.FUNCTION) && \n+          name.getAliasCount() == 0 && name.getProps() != null) {\n+      List<Name> props = ImmutableList.copyOf(name.getProps());\n+      for (Name prop : props) {\n+        if (prop.getParent() == null) { continue; }\n+        workList.addLast(prop);\n       }\n     }\n   }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}