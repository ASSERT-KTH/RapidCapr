{
    "patch": "    if (!modifyCallers && argList != null) {\n      Node parameter = argList.getFirstChild();\n      NodeList<Parameter> removedParams = NodeList.newLinked();\n      while (parameter != null) {\n        String paramName = parameter.getString();\n        if (!referenced.contains(fnScope.getVar(paramName))) {\n          Node value = parameter.getFirstChild();\n          if (value != null && value.isDefaultValue()) {\n            // Remove the default value, too.\n            value.detach();\n          }\n          NodeUtil.markFunctionsDeleted(Collections.singletonList(parameter), compiler);\n          removedParams.add(new Parameter(parameter, paramName, true));\n        }\n        parameter = parameter.getNext();\n      }\n      for (Parameter p : removedParams) {\n        getAstChangeMarking().removeName(p.name);\n      }\n      compiler.reportChangeToEnclosingScope(argList);\n    } else if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9a900e43 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,27 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    if (!modifyCallers && argList != null) {\n+      Node parameter = argList.getFirstChild();\n+      NodeList<Parameter> removedParams = NodeList.newLinked();\n+      while (parameter != null) {\n+        String paramName = parameter.getString();\n+        if (!referenced.contains(fnScope.getVar(paramName))) {\n+          Node value = parameter.getFirstChild();\n+          if (value != null && value.isDefaultValue()) {\n+            // Remove the default value, too.\n+            value.detach();\n+          }\n+          NodeUtil.markFunctionsDeleted(Collections.singletonList(parameter), compiler);\n+          removedParams.add(new Parameter(parameter, paramName, true));\n+        }\n+        parameter = parameter.getNext();\n+      }\n+      for (Parameter p : removedParams) {\n+        getAstChangeMarking().removeName(p.name);\n+      }\n+      compiler.reportChangeToEnclosingScope(argList);\n+    } else if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}