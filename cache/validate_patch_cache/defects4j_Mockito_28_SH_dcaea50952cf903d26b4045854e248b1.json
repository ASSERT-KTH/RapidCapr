{
    "patch": "        for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n            boolean isFieldAccessible = field.isAccessible();\n            Object originalFieldValue = null;\n            try {\n                if (!isFieldAccessible) {\n                    field.setAccessible(true);\n                }\n                originalFieldValue = field.get(fieldInstance);\n                Object candidate = mockCandidateFilter.filterCandidate(mocks, field, originalFieldValue).thenInject();\n                if (candidate != null) {\n                    field.set(fieldInstance, candidate);\n                }\n            } catch (IllegalAccessException e) {\n                throw new RuntimeException(e);\n            } finally {\n                if (!isFieldAccessible) {\n                    field.setAccessible(false);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..708eb709a 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,28 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+            boolean isFieldAccessible = field.isAccessible();\n+            Object originalFieldValue = null;\n+            try {\n+                if (!isFieldAccessible) {\n+                    field.setAccessible(true);\n+                }\n+                originalFieldValue = field.get(fieldInstance);\n+                Object candidate = mockCandidateFilter.filterCandidate(mocks, field, originalFieldValue).thenInject();\n+                if (candidate != null) {\n+                    field.set(fieldInstance, candidate);\n+                }\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(e);\n+            } finally {\n+                if (!isFieldAccessible) {\n+                    field.setAccessible(false);\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}