{
    "patch": "MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\nMockitoSession mockito = Mockito.mockitoSession()\n        .initMocks(mock)\n        .spy(mock);\nField field = mock.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\nfield.setAccessible(true);\nCglibCallbackFilter cglibCallbackFilter = (CglibCallbackFilter) proxy.getCallback(0);\ncglibCallbackFilter.setDelegate(newFilter);\ncglibCallbackFilter.setTopHandler(newMockHandler);\ncglibCallbackFilter.setHandlerChain(Collections.singletonList(newFilter));",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..462003d3d 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,20 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockitoSession mockito = Mockito.mockitoSession()\n+        .initMocks(mock)\n+        .spy(mock);\n+Field field = mock.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n+field.setAccessible(true);\n+CglibCallbackFilter cglibCallbackFilter = (CglibCallbackFilter) proxy.getCallback(0);\n+cglibCallbackFilter.setDelegate(newFilter);\n+cglibCallbackFilter.setTopHandler(newMockHandler);\n+cglibCallbackFilter.setHandlerChain(Collections.singletonList(newFilter));\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}