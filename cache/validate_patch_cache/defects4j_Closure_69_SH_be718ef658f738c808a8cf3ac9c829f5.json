{
    "patch": "      boolean hasExplicitThisType = functionType.getTypeOfThis() != null;\n      if (hasExplicitThisType &&\n          (n.getParent().isGetProp() || n.getParent().isGetElem())) {\n        for (Node arg : child.getNext().children()) {\n          JSType argumentType = getJSType(arg);\n          // The value passed for 'this' needs to be a subtype of the declared type.\n          if (!argumentType.isSubtypeOf(functionType.getTypeOfThis())) {\n            report(t, arg, INVALID_THIS_TYPE, argumentType.toString());\n          }\n        }\n      } else if (hasExplicitThisType) {\n        report(t, n, THIS_BEFORE_SUPER, childType.toString());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..2ab87063 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      boolean hasExplicitThisType = functionType.getTypeOfThis() != null;\n+      if (hasExplicitThisType &&\n+          (n.getParent().isGetProp() || n.getParent().isGetElem())) {\n+        for (Node arg : child.getNext().children()) {\n+          JSType argumentType = getJSType(arg);\n+          // The value passed for 'this' needs to be a subtype of the declared type.\n+          if (!argumentType.isSubtypeOf(functionType.getTypeOfThis())) {\n+            report(t, arg, INVALID_THIS_TYPE, argumentType.toString());\n+          }\n+        }\n+      } else if (hasExplicitThisType) {\n+        report(t, n, THIS_BEFORE_SUPER, childType.toString());\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}