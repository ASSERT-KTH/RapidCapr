{
    "patch": "      while (argList.getLastChild() != null) {\n        Node lastArg = argList.getLastChild();\n        // Check if the current param is used\n        boolean isUsed = false;\n        for (VarReferencedInFunction current : referenced) {\n          if (current.varName.equals(lastArg.getString())) {\n            isUsed = true;\n            break;\n          } \n        }\n        if (!isUsed) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..70d56889 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,17 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      while (argList.getLastChild() != null) {\n+        Node lastArg = argList.getLastChild();\n+        // Check if the current param is used\n+        boolean isUsed = false;\n+        for (VarReferencedInFunction current : referenced) {\n+          if (current.varName.equals(lastArg.getString())) {\n+            isUsed = true;\n+            break;\n+          } \n+        }\n+        if (!isUsed) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}