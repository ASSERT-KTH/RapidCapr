{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    final int MIN_ENTITY_LENGTH = 3; // minimum length of an entity (\"&#x0;\")\n    final int HEX_RADIX = 16; // radix used for hexadecimal numbers\n    final char AMPERSAND = '&';\n    final char HASH = '#';\n    final char SEMICOLON = ';';\n    final int NOT_FOUND = -1;\n\n    // Check if input is long enough to contain an entity\n    if (input.length() < index + MIN_ENTITY_LENGTH) {\n        return 0;\n    }\n\n    // Find the entity start and end positions\n    int entityStart = input.indexOf(AMPERSAND, index);\n    if (entityStart == NOT_FOUND) {\n        return 0; // entity not found\n    }\n    int entityEnd = input.indexOf(SEMICOLON, entityStart);\n    if (entityEnd == NOT_FOUND || entityEnd - entityStart < MIN_ENTITY_LENGTH) {\n        return 0; // invalid entity format\n    }\n\n    // Extract the entity value and convert it to a character or a surrogate pair\n    int entityValue;\n    int radix = 10;\n    int valueStart = entityStart + 2; // skip \"&#\" or \"&#x\"\n    if (input.charAt(valueStart) == 'x' || input.charAt(valueStart) == 'X') {\n        radix = HEX_RADIX;\n        valueStart++;\n    }\n    try {\n        entityValue = Integer.parseInt(input.subSequence(valueStart, entityEnd).toString(), radix);\n    } catch (NumberFormatException e) {\n        return 0; // invalid entity format\n    }\n    if (Character.isBmpCodePoint(entityValue)) {\n        out.write(entityValue);\n    } else if (Character.isValidCodePoint(entityValue)) {\n        out.write(Character.highSurrogate(entityValue));\n        out.write(Character.lowSurrogate(entityValue));\n    } else {\n        // Invalid code point\n        return 0;\n    }\n\n    // Return the length of the entity string\n    return entityEnd - entityStart + 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..434103e1 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,37 +32,53 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    final int MIN_ENTITY_LENGTH = 3; // minimum length of an entity (\"&#x0;\")\n+    final int HEX_RADIX = 16; // radix used for hexadecimal numbers\n+    final char AMPERSAND = '&';\n+    final char HASH = '#';\n+    final char SEMICOLON = ';';\n+    final int NOT_FOUND = -1;\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n-\n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n+    // Check if input is long enough to contain an entity\n+    if (input.length() < index + MIN_ENTITY_LENGTH) {\n+        return 0;\n+    }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-                return 0;\n-            }\n+    // Find the entity start and end positions\n+    int entityStart = input.indexOf(AMPERSAND, index);\n+    if (entityStart == NOT_FOUND) {\n+        return 0; // entity not found\n+    }\n+    int entityEnd = input.indexOf(SEMICOLON, entityStart);\n+    if (entityEnd == NOT_FOUND || entityEnd - entityStart < MIN_ENTITY_LENGTH) {\n+        return 0; // invalid entity format\n+    }\n \n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n-        }\n+    // Extract the entity value and convert it to a character or a surrogate pair\n+    int entityValue;\n+    int radix = 10;\n+    int valueStart = entityStart + 2; // skip \"&#\" or \"&#x\"\n+    if (input.charAt(valueStart) == 'x' || input.charAt(valueStart) == 'X') {\n+        radix = HEX_RADIX;\n+        valueStart++;\n+    }\n+    try {\n+        entityValue = Integer.parseInt(input.subSequence(valueStart, entityEnd).toString(), radix);\n+    } catch (NumberFormatException e) {\n+        return 0; // invalid entity format\n+    }\n+    if (Character.isBmpCodePoint(entityValue)) {\n+        out.write(entityValue);\n+    } else if (Character.isValidCodePoint(entityValue)) {\n+        out.write(Character.highSurrogate(entityValue));\n+        out.write(Character.lowSurrogate(entityValue));\n+    } else {\n+        // Invalid code point\n         return 0;\n     }\n+\n+    // Return the length of the entity string\n+    return entityEnd - entityStart + 1;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}