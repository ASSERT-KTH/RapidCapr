{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      // Avoid inlining inlineable aliases during this pass, to avoid infinite\n      // inlinings.\n      boolean inlineAllAliases =\n          name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0;\n      boolean inlineOnlyFunctionAliases = inlineAllAliases &&\n          (name.type == Name.Type.FUNCTION || name.type == Name.Type.CLASS);\n\n      if (!inlineAllAliases) {\n        inlineAliasesInternal(name, namespace);\n      }\n\n      // Check if inlining any of {@code name}'s aliases enabled further inlining.\n      // Avoid inlining local aliases here, since doing so would confuse the worklist.\n      if (inlineAllAliases && name.aliasingGets == 0 && name.aliasingDirectSets > 0 &&\n          name.refs != null && !inlineOnlyFunctionAliases) {\n        // Find all the global aliases of the original name (excluding itself).\n        Map<String, Name> aliasMap = namespace.getNameIndex();\n        List<Name> aliases = new ArrayList<Name>(name.aliasingDirectSets);\n        for (Ref ref : name.refs) {\n          if (ref == name.ref || ref.scope.isLocal()) {\n            continue;\n          }\n          Name alias = aliasMap.get(ref.getNode().getQualifiedName());\n          if (alias != null) {\n            aliases.add(alias);\n          }\n        }\n\n        // Try to inline all of them.\n        for (Name alias : aliases) {\n          if (alias.type == Name.Type.OBJECTLIT ||\n              alias.type == Name.Type.FUNCTION ||\n              alias.type == Name.Type.CLASS) {\n            // Local-alias-inlining is only valid for variables.\n            continue;\n          }\n          if (alias.globalSets <= 1 &&\n              (alias.localSets == 0 || alias.props == null)) {\n            inlineAliasesInternal(alias, namespace);\n            workList.addAll(alias.props);\n          }\n        }\n      }\n\n      if (inlineAllAliases && inlineOnlyFunctionAliases) {\n        // Local-alias-inlining for functions and classes is deferred until this\n        // stage to avoid inlining functions before their types have been inferred\n        // in type inference.\n        for (Ref ref : name.getRefs()) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            inlineAliasesInternalForFunctionAlias(ref, namespace);\n          }\n        }\n      } else if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION ||\n                   name.type == Name.Type.CLASS) && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..009efcd0 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,7 +158,7 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n+private void inlineAliases(GlobalNamespace namespace) {\n     // Invariant: All the names in the worklist meet condition (a).\n     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n     while (!workList.isEmpty()) {\n@@ -169,26 +169,61 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n-            }\n+      // Avoid inlining inlineable aliases during this pass, to avoid infinite\n+      // inlinings.\n+      boolean inlineAllAliases =\n+          name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0;\n+      boolean inlineOnlyFunctionAliases = inlineAllAliases &&\n+          (name.type == Name.Type.FUNCTION || name.type == Name.Type.CLASS);\n+\n+      if (!inlineAllAliases) {\n+        inlineAliasesInternal(name, namespace);\n+      }\n+\n+      // Check if inlining any of {@code name}'s aliases enabled further inlining.\n+      // Avoid inlining local aliases here, since doing so would confuse the worklist.\n+      if (inlineAllAliases && name.aliasingGets == 0 && name.aliasingDirectSets > 0 &&\n+          name.refs != null && !inlineOnlyFunctionAliases) {\n+        // Find all the global aliases of the original name (excluding itself).\n+        Map<String, Name> aliasMap = namespace.getNameIndex();\n+        List<Name> aliases = new ArrayList<Name>(name.aliasingDirectSets);\n+        for (Ref ref : name.refs) {\n+          if (ref == name.ref || ref.scope.isLocal()) {\n+            continue;\n+          }\n+          Name alias = aliasMap.get(ref.getNode().getQualifiedName());\n+          if (alias != null) {\n+            aliases.add(alias);\n+          }\n+        }\n+\n+        // Try to inline all of them.\n+        for (Name alias : aliases) {\n+          if (alias.type == Name.Type.OBJECTLIT ||\n+              alias.type == Name.Type.FUNCTION ||\n+              alias.type == Name.Type.CLASS) {\n+            // Local-alias-inlining is only valid for variables.\n+            continue;\n+          }\n+          if (alias.globalSets <= 1 &&\n+              (alias.localSets == 0 || alias.props == null)) {\n+            inlineAliasesInternal(alias, namespace);\n+            workList.addAll(alias.props);\n           }\n         }\n       }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n+      if (inlineAllAliases && inlineOnlyFunctionAliases) {\n+        // Local-alias-inlining for functions and classes is deferred until this\n+        // stage to avoid inlining functions before their types have been inferred\n+        // in type inference.\n+        for (Ref ref : name.getRefs()) {\n+          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+            inlineAliasesInternalForFunctionAlias(ref, namespace);\n+          }\n+        }\n+      } else if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION ||\n+                   name.type == Name.Type.CLASS) && name.props != null) {\n         // All of {@code name}'s children meet condition (a), so they can be\n         // added to the worklist.\n         workList.addAll(name.props);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}