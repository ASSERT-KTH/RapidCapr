{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expanded.getPoint();\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n\n                // perform a contraction step\n                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted.getPoint();\n                } else {\n\n                    // perform a multiple contraction step\n                    final RealPointValuePair[] contractedSimplex = shrink(original, comparator);\n                    if (comparator.compare(contractedSimplex[0], original[0]) < 0) {\n                        // accept the contracted simplex\n                        simplex = contractedSimplex;\n                    } else {\n                        // accept the shrunken simplex\n                        simplex = contractedSimplex[1].getPoint();\n                    }\n                }\n            }\n\n            // check convergence\n            final double delta = FastMath.abs(best.getValue() - simplex[0].getValue());\n            final double size = getSize();\n            if (delta <= functionValueAccuracy && size <= absoluteAccuracy) {\n                return;\n            }\n            if (delta <= functionValueAccuracy || size <= absoluteAccuracy || delta <= relativeThreshold * (FastMath.abs(best.getValue()) + FastMath.abs(simplex[0].getValue())) * 0.5) {\n                if (++resc < maximalResc) {\n                    final RealPointValuePair[] sorted = simplex.clone();\n                    Arrays.sort(sorted, comparator);\n                    final double[] xSmallest = sorted[0].getPoint();\n                    final double[] p2 = new double[xSmallest.length];\n                    for (int i = 0; i < p2.length; i++) {\n                        p2[i] = xSmallest[i] + rho * (xSmallest[i] - sorted[n].getPoint()[i]);\n                    }\n                    final double[] y2 = computeObjectiveValue(p2);\n                    if (comparator.compare(new RealPointValuePair(p2, y2), sorted[0]) < 0) {\n                        simplex[0] = new RealPointValuePair(p2, y2);\n                    } else {\n                        shrink(best, comparator);\n                    }\n                    continue;\n                }\n                return;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..b85a975e8 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -75,27 +75,62 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expanded.getPoint();\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n-\n+            } else {\n+\n+                // perform a contraction step\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted.getPoint();\n+                } else {\n+\n+                    // perform a multiple contraction step\n+                    final RealPointValuePair[] contractedSimplex = shrink(original, comparator);\n+                    if (comparator.compare(contractedSimplex[0], original[0]) < 0) {\n+                        // accept the contracted simplex\n+                        simplex = contractedSimplex;\n+                    } else {\n+                        // accept the shrunken simplex\n+                        simplex = contractedSimplex[1].getPoint();\n+                    }\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n+            final double delta = FastMath.abs(best.getValue() - simplex[0].getValue());\n+            final double size = getSize();\n+            if (delta <= functionValueAccuracy && size <= absoluteAccuracy) {\n+                return;\n+            }\n+            if (delta <= functionValueAccuracy || size <= absoluteAccuracy || delta <= relativeThreshold * (FastMath.abs(best.getValue()) + FastMath.abs(simplex[0].getValue())) * 0.5) {\n+                if (++resc < maximalResc) {\n+                    final RealPointValuePair[] sorted = simplex.clone();\n+                    Arrays.sort(sorted, comparator);\n+                    final double[] xSmallest = sorted[0].getPoint();\n+                    final double[] p2 = new double[xSmallest.length];\n+                    for (int i = 0; i < p2.length; i++) {\n+                        p2[i] = xSmallest[i] + rho * (xSmallest[i] - sorted[n].getPoint()[i]);\n+                    }\n+                    final double[] y2 = computeObjectiveValue(p2);\n+                    if (comparator.compare(new RealPointValuePair(p2, y2), sorted[0]) < 0) {\n+                        simplex[0] = new RealPointValuePair(p2, y2);\n+                    } else {\n+                        shrink(best, comparator);\n+                    }\n+                    continue;\n+                }\n                 return;\n             }\n-\n         }\n-\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}