{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.EXPR_RESULT && n.getFirstChild().getType() == Token.CALL) {\n      Node call = n.getFirstChild();\n      Node name = call.getFirstChild();\n      if (name.getType() == Token.NAME \n            || (name.getType() == Token.GETPROP && name.getLastChild().getString().equals(\"call\"))) {\n        return true;\n      }\n    }\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild() && !NodeUtil.isControlStructure(n.getFirstChild())) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..52cbf161 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -517,20 +517,17 @@ public class PeepholeSubstituteAlternateSyntax\n    *     an expression.\n    */\n   private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.EXPR_RESULT && n.getFirstChild().getType() == Token.CALL) {\n+      Node call = n.getFirstChild();\n+      Node name = call.getFirstChild();\n+      if (name.getType() == Token.NAME \n+            || (name.getType() == Token.GETPROP && name.getLastChild().getString().equals(\"call\"))) {\n+        return true;\n+      }\n+    }\n     if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+      if (n.hasOneChild() && !NodeUtil.isControlStructure(n.getFirstChild())) {\n+        return true;\n       }\n     }\n ",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}