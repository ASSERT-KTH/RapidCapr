{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN()) {\n            return newInstance(getField(), qnan);\n        }\n\n        if (x == 0) {\n            return newInstance(getField(), getZero());\n        }\n        if (x == 1) {\n            return this;\n        }\n\n        DfpField field = getField();\n        Dfp result = newInstance(field);\n\n        boolean negative;\n        int[] product = new int[2 * t.length];\n        if (x < 0) {\n            negative = !sign;\n            product[0] = -x;\n        } else {\n            negative = sign;\n            product[0] = x;\n        }\n        field.getSplit(product);\n        field.splitMult(t, product, product);\n        result.sign = negative;\n        result.extend(product, exponent + field.getRadixDigits() + 1);\n        result.round(result.digits);\n\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..63f2dc23b 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,36 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN()) {\n+            return newInstance(getField(), qnan);\n+        }\n+\n+        if (x == 0) {\n+            return newInstance(getField(), getZero());\n+        }\n+        if (x == 1) {\n+            return this;\n+        }\n+\n+        DfpField field = getField();\n+        Dfp result = newInstance(field);\n+\n+        boolean negative;\n+        int[] product = new int[2 * t.length];\n+        if (x < 0) {\n+            negative = !sign;\n+            product[0] = -x;\n+        } else {\n+            negative = sign;\n+            product[0] = x;\n+        }\n+        field.getSplit(product);\n+        field.splitMult(t, product, product);\n+        result.sign = negative;\n+        result.extend(product, exponent + field.getRadixDigits() + 1);\n+        result.round(result.digits);\n+\n+        return result;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}