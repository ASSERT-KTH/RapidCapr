{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override or the @typeSummary annotations.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.isInterface() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride() ||\n         jsDoc.isTypeSummary())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them.\n    // e.g., var a = function() { }; // or function a() {} // or a.x =\n    // function() {}; // or var a = {x: function() {}};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK || pType == Token.SCRIPT ||\n          pType == Token.NAME || pType == Token.ASSIGN ||\n\n          // Let, const, class and function are not usable with @this.\n          pType == Token.LET || pType == Token.CONST ||\n          pType == Token.CLASS || pType == Token.FUNCTION ||\n          pType == Token.STRING ||\n          pType == Token.NUMBER)) {\n      return false;\n    }\n\n    // Don't traverse functions that are getting lent to a prototype.\n    if (isFunctionGettingLentToPrototype(parent)) {\n      return false;\n    }\n\n    // Skip functions that use J2CL clinit semantics\n    if (n.isFromExterns() &&\n        n.getNext().isFromExterns() &&\n        n.getNext().getReferenceName().equals(\"$clinit\")) {\n      return false;\n    }\n  }\n\n  // don't traverse bodies of loop statements\n  if (n.isLoopStructure()) {\n    return false;\n  }\n\n  // don't traverse the RHS or LHS of an assign op\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly (e.g., (a = this).property = c;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nprivate boolean isFunctionGettingLentToPrototype(Node node) {\n  while (node != null) {\n    node = node.getParent();\n\n    if (node != null && node.isAssign()) {\n      Node lhs = node.getFirstChild();\n      Node rhs = node.getLastChild();\n      if (rhs.isFunction()) {\n        if (lhs.isGetProp()) {\n          Node getPropFirstChild = lhs.getFirstChild();\n          if (getPropFirstChild.isGetProp()\n              && \"prototype\".equals(getPropFirstChild.getLastChild().getString())) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..f5dff67e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,71 +79,92 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  if (n.getType() == Token.FUNCTION) {\n+    // Don't traverse functions that are constructors or have the @this\n+    // or @override or the @typeSummary annotations.\n+    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+    if (jsDoc != null &&\n+        (jsDoc.isConstructor() ||\n+         jsDoc.isInterface() ||\n+         jsDoc.hasThisType() ||\n+         jsDoc.isOverride() ||\n+         jsDoc.isTypeSummary())) {\n+      return false;\n+    }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n-      }\n+    // Don't traverse functions unless they would normally\n+    // be able to have a @this annotation associated with them.\n+    // e.g., var a = function() { }; // or function a() {} // or a.x =\n+    // function() {}; // or var a = {x: function() {}};\n+    int pType = parent.getType();\n+    if (!(pType == Token.BLOCK || pType == Token.SCRIPT ||\n+          pType == Token.NAME || pType == Token.ASSIGN ||\n+\n+          // Let, const, class and function are not usable with @this.\n+          pType == Token.LET || pType == Token.CONST ||\n+          pType == Token.CLASS || pType == Token.FUNCTION ||\n+          pType == Token.STRING ||\n+          pType == Token.NUMBER)) {\n+      return false;\n+    }\n \n-      // Don't traverse functions that are getting lent to a prototype.\n+    // Don't traverse functions that are getting lent to a prototype.\n+    if (isFunctionGettingLentToPrototype(parent)) {\n+      return false;\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n+    // Skip functions that use J2CL clinit semantics\n+    if (n.isFromExterns() &&\n+        n.getNext().isFromExterns() &&\n+        n.getNext().getReferenceName().equals(\"$clinit\")) {\n+      return false;\n+    }\n+  }\n \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n+  // don't traverse bodies of loop statements\n+  if (n.isLoopStructure()) {\n+    return false;\n+  }\n+\n+  // don't traverse the RHS or LHS of an assign op\n+  if (parent != null && parent.getType() == Token.ASSIGN) {\n+    Node lhs = parent.getFirstChild();\n+    if (n == lhs) {\n+      // Always traverse the left side of the assignment. To handle\n+      // nested assignments properly (e.g., (a = this).property = c;),\n+      // assignLhsChild should not be overridden.\n+      if (assignLhsChild == null) {\n+        assignLhsChild = lhs;\n+      }\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  return true;\n+}\n+\n+private boolean isFunctionGettingLentToPrototype(Node node) {\n+  while (node != null) {\n+    node = node.getParent();\n+\n+    if (node != null && node.isAssign()) {\n+      Node lhs = node.getFirstChild();\n+      Node rhs = node.getLastChild();\n+      if (rhs.isFunction()) {\n+        if (lhs.isGetProp()) {\n+          Node getPropFirstChild = lhs.getFirstChild();\n+          if (getPropFirstChild.isGetProp()\n+              && \"prototype\".equals(getPropFirstChild.getLastChild().getString())) {\n+            return true;\n           }\n         }\n       }\n     }\n-\n-    return true;\n   }\n+  return false;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}