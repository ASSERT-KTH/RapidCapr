{
    "patch": "public double chiSquare(double[] expected, long[] observed) {\n    if (expected.length != observed.length) {\n        throw new IllegalArgumentException(\"Input arrays must have the same length\");\n    }\n\n    double totalObserved = 0.0;\n    double totalExpected = 0.0;\n    for (int i = 0; i < expected.length; i++) {\n        if (expected[i] < 0.0 || observed[i] < 0 || Double.isNaN(expected[i])) {\n            throw new IllegalArgumentException(\"Expected counts must be non-negative and non-NaN values\");\n        }\n\n        totalObserved += observed[i];\n        totalExpected += expected[i];\n    }\n\n    if (totalExpected == 0.0 || totalObserved == 0.0) {\n        throw new IllegalArgumentException(\"Input arrays cannot contain all zeros\");\n    }\n\n    double chiSquare = 0.0;\n    double expectedValue;\n    double observedValue;\n    for (int i = 0; i < expected.length; i++) {\n        expectedValue = expected[i];\n        observedValue = observed[i];\n        if (expectedValue == 0.0 && observedValue != 0.0) {\n            throw new IllegalArgumentException(\"Expected count must be greater than 0 if observed count is greater than 0\");\n        }\n\n        if (Double.isNaN(observedValue) || Double.isInfinite(observedValue) || observedValue > Long.MAX_VALUE) {\n            throw new IllegalArgumentException(\"Observed count must be a finite non-negative value that is less than or equal to \" + Long.MAX_VALUE);\n        }\n\n        double diff = observedValue - expectedValue;\n        chiSquare += (diff * diff) / expectedValue;\n    }\n\n    return chiSquare;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..3a3a9b202 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,25 +61,47 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n+public double chiSquare(double[] expected, long[] observed) {\n+    if (expected.length != observed.length) {\n+        throw new IllegalArgumentException(\"Input arrays must have the same length\");\n+    }\n+\n+    double totalObserved = 0.0;\n+    double totalExpected = 0.0;\n+    for (int i = 0; i < expected.length; i++) {\n+        if (expected[i] < 0.0 || observed[i] < 0 || Double.isNaN(expected[i])) {\n+            throw new IllegalArgumentException(\"Expected counts must be non-negative and non-NaN values\");\n         }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n+\n+        totalObserved += observed[i];\n+        totalExpected += expected[i];\n+    }\n+\n+    if (totalExpected == 0.0 || totalObserved == 0.0) {\n+        throw new IllegalArgumentException(\"Input arrays cannot contain all zeros\");\n+    }\n+\n+    double chiSquare = 0.0;\n+    double expectedValue;\n+    double observedValue;\n+    for (int i = 0; i < expected.length; i++) {\n+        expectedValue = expected[i];\n+        observedValue = observed[i];\n+        if (expectedValue == 0.0 && observedValue != 0.0) {\n+            throw new IllegalArgumentException(\"Expected count must be greater than 0 if observed count is greater than 0\");\n         }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n-        for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n+\n+        if (Double.isNaN(observedValue) || Double.isInfinite(observedValue) || observedValue > Long.MAX_VALUE) {\n+            throw new IllegalArgumentException(\"Observed count must be a finite non-negative value that is less than or equal to \" + Long.MAX_VALUE);\n         }\n-        return sumSq;\n+\n+        double diff = observedValue - expectedValue;\n+        chiSquare += (diff * diff) / expectedValue;\n     }\n \n+    return chiSquare;\n+}\n+\n     /**\n      * {@inheritDoc}\n      * <p><strong>Note: </strong>This implementation rescales the ",
    "result_reason": "junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>",
    "test_result": "FAIL"
}