{
    "patch": "public <T> T resetMock(T mock) {\n    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n    MethodInterceptorFilter oldFilter = getMethodInterceptorFilter(mock);\n    if (oldHandler == null) {\n        return mock;\n    }\n    // reset existing handler and filter\n    ((MockHandler<T>) oldHandler).resetMockState();\n    ((Factory) mock).setCallback(-1, null);\n    // set new handler and filter\n    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n    MethodInterceptorFilter newFilter =\n            new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    ((Factory) mock).setCallback(-1, newFilter);\n    return mock;\n}\n\nprivate <T> MethodInterceptorFilter getMethodInterceptorFilter(T mock) {\n    // iterate over all the mock's callbacks and look for the MethodInterceptorFilter\n    Callback[] callbacks = ((Factory) mock).getCallbacks();\n    for (Callback callback : callbacks) {\n        if (callback instanceof MethodInterceptorFilter) {\n            return (MethodInterceptorFilter) callback;\n        }\n    }\n    return null;\n}\n\nprivate <T> MockHandlerInterface<T> getMockHandler(T mock) {\n    // using internal reflection to extract the mock handler\n    try {\n        Field field = mock.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n        field.setAccessible(true);\n        return (MockHandlerInterface<T>) field.get(mock);\n    } catch (NoSuchFieldException | IllegalAccessException e) {\n        e.printStackTrace();\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..2db46fda0 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,46 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> T resetMock(T mock) {\n+    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n+    MethodInterceptorFilter oldFilter = getMethodInterceptorFilter(mock);\n+    if (oldHandler == null) {\n+        return mock;\n+    }\n+    // reset existing handler and filter\n+    ((MockHandler<T>) oldHandler).resetMockState();\n+    ((Factory) mock).setCallback(-1, null);\n+    // set new handler and filter\n+    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n+    MethodInterceptorFilter newFilter =\n+            new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    ((Factory) mock).setCallback(-1, newFilter);\n+    return mock;\n+}\n+\n+private <T> MethodInterceptorFilter getMethodInterceptorFilter(T mock) {\n+    // iterate over all the mock's callbacks and look for the MethodInterceptorFilter\n+    Callback[] callbacks = ((Factory) mock).getCallbacks();\n+    for (Callback callback : callbacks) {\n+        if (callback instanceof MethodInterceptorFilter) {\n+            return (MethodInterceptorFilter) callback;\n+        }\n+    }\n+    return null;\n+}\n+\n+private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n+    // using internal reflection to extract the mock handler\n+    try {\n+        Field field = mock.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n+        field.setAccessible(true);\n+        return (MockHandlerInterface<T>) field.get(mock);\n+    } catch (NoSuchFieldException | IllegalAccessException e) {\n+        e.printStackTrace();\n+        return null;\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}