{
    "patch": "public ReturnValue execute () {\n    Connection connection = null;\n    PreparedStatement statement = null;\n    ResultSet resultSet = null;\n    try {\n        connection = dataSource.getConnection();\n        statement = connection.prepareStatement(sql);\n        for (int i = 0; i < params.size(); i++) {\n            statement.setObject(i+1, params.get(i));\n        }\n        resultSet = statement.executeQuery();\n        List<Object[]> resultData = new ArrayList<>();\n        ResultSetMetaData metaData = resultSet.getMetaData();\n        int columnCount = metaData.getColumnCount();\n        while (resultSet.next()) {\n            Object[] row = new Object[columnCount];\n            for (int i = 0; i < columnCount; i++) {\n                row[i] = resultSet.getObject(i+1);\n            }\n            resultData.add(row);\n        }\n        return new ReturnValue(resultData);\n    } catch (SQLException e) {\n        return new ReturnValue(e.getMessage());\n    } finally {\n        if (resultSet != null) {\n            try {\n                resultSet.close();\n            } catch (SQLException ignored){}\n        }\n        if (statement != null) {\n            try {\n                statement.close();\n            } catch (SQLException ignored){}\n            }\n        if (connection != null) {\n            try {\n                connection.close();\n            } catch (SQLException ignored){}\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}