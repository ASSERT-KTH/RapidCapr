{
    "patch": "private void inlineNonConstants(\n    Var v, ReferenceCollection referenceInfo, boolean maybeModifiedArguments) {\n  int refCount = referenceInfo.references.size();\n\n  Reference declaration = referenceInfo.references.get(0);\n  Reference init = referenceInfo.getInitializingReference();\n\n  if (refCount == 0) {\n    // No references, nothing to do.\n    return;\n  } else if (refCount == 1) {\n    // If the variable has only one reference, we can inline it.\n    Reference ref = referenceInfo.references.get(0);\n    Node currValue = ref.getNode();\n    if (NodeUtil.isImmutableValue(currValue)) {\n      // If we have an immutable value, we can simply replace the uses.\n      inline(v, declaration, init, ref);\n    } else {\n      // Otherwise, we need to create a new node, as we cannot change the original.\n      Node value = currValue.cloneTree();\n      inlineWellDefinedVariable(v, value, referenceInfo.references);\n    }\n    staleVars.add(v);\n  } else if (refCount == 2 &&\n      !maybeModifiedArguments && referenceInfo.isAssignedOnceInLifetime() &&\n      isValidDeclaration(declaration) && isValidInitialization(init)) {\n    // If the variable is assigned to once, it can be inlined.\n    Reference ref = referenceInfo.references.get(1);\n    inline(v, declaration, init, ref);\n    staleVars.add(v);\n  } else if (refCount > 1 &&\n      !maybeModifiedArguments && referenceInfo.isAssignedOnceInLifetime() &&\n      isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n    // If the variable is well-defined and has at most one write, try more aggressive inlining.\n    Node assignedValue = init != null ? init.getAssignedValue() :\n        NodeUtil.newUndefinedNode(declaration.getNode());\n    // Only inline variables that are never defined before they are referenced.\n    if (NodeUtil.isImmutableValue(assignedValue)) {\n      inlineWellDefinedVariable(v, assignedValue, referenceInfo.references);\n    } else {\n      Node value = assignedValue.cloneTree();\n      inlineWellDefinedVariable(v, value, referenceInfo.references);\n    }\n    staleVars.add(v);\n  } else if (refCount == 2) {\n    Reference ref1 = referenceInfo.references.get(0);\n    Reference ref2 = referenceInfo.references.get(1);\n    if (init != null && ref1 == init) {\n      Reference tmp = ref2;\n      ref2 = ref1;\n      ref1 = tmp;\n    }\n    boolean firstRefIsRead = NodeUtil.isExpressionResultUsed(ref1.getNode());\n\n    if (firstRefIsRead && ref1.getNode().isName()) {\n      // The first reference is a read and is not the declaration of the variable.\n      tryAggressiveInlining(v, declaration, init, ref1, ref2, staleVars);\n    } else if (\n        !maybeModifiedArguments &&\n            (!initRefsByVar.containsKey(v) || initRefsByVar.get(v).size() == 1) &&\n            isInlineableDeclaration(declaration)) {\n      // If there is exactly one initializing reference, and it assigns a value to the\n      // variable that should be inlined, and the variable is not referenced in a modified\n      // argument, we should inline.\n      tryInitializingInlining(v, declaration, init, ref1, staleVars);\n    }\n  } else {\n    // Multiple references. Check whether we can do some more aggressive inlining.\n    Reference firstRef = referenceInfo.references.get(1);\n    boolean firstRefIsRead = NodeUtil.isExpressionResultUsed(firstRef.getNode());\n    if (firstRefIsRead && firstRef.getNode().isName()) {\n      // The first reference is a read and is not the declaration of the variable.\n      tryAggressiveInlining(v, declaration, init, firstRef, staleVars);\n    }\n  }\n\n  if (!maybeModifiedArguments && !staleVars.contains(v) &&\n      referenceInfo.isWellDefined() && referenceInfo.isAssignedOnceInLifetime()) {\n    // Inlining the variable based solely on well-defined and assigned once is *NOT* correct.\n    // We relax the correctness requirement if the variable is declared constant.\n    List<Reference> refs = referenceInfo.references;\n    for (int i = 1; i < refs.size(); i++) {\n      Node nameNode = refs.get(i).getNode();\n      if (aliasCandidates.containsKey(nameNode)) {\n        AliasCandidate candidate = aliasCandidates.get(nameNode);\n        if (!staleVars.contains(candidate.alias) && !isVarInlineForbidden(candidate.alias)) {\n          Reference aliasInit = candidate.refInfo.getInitializingReference();\n          Node value = aliasInit.getAssignedValue();\n          if (NodeUtil.isImmutableValue(value)) {\n            inlineWellDefinedVariable(candidate.alias,\n                value.cloneTree(),\n                candidate.refInfo.references);\n          } else {\n            Node aliasValue = value.cloneTree();\n            inlineWellDefinedVariable(candidate.alias,\n                aliasValue,\n                candidate.refInfo.references);\n          }\n          staleVars.add(candidate.alias);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 376abd40..7c31ac4b 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -251,80 +251,110 @@ class InlineVariables implements CompilerPass {\n           && parent.getFirstChild() == n));\n     }\n \n-    private void inlineNonConstants(\n-        Var v, ReferenceCollection referenceInfo,\n-        boolean maybeModifiedArguments) {\n-      int refCount = referenceInfo.references.size();\n-      Reference declaration = referenceInfo.references.get(0);\n-      Reference init = referenceInfo.getInitializingReference();\n-      int firstRefAfterInit = (declaration == init) ? 2 : 3;\n-\n-      if (refCount > 1 &&\n-          isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n-        // if the variable is referenced more than once, we can only\n-        // inline it if it's immutable and never defined before referenced.\n-        Node value;\n-        if (init != null) {\n-          value = init.getAssignedValue();\n-        } else {\n-          // Create a new node for variable that is never initialized.\n-          Node srcLocation = declaration.getNode();\n-          value = NodeUtil.newUndefinedNode(srcLocation);\n-        }\n-        Preconditions.checkNotNull(value);\n-        inlineWellDefinedVariable(v, value, referenceInfo.references);\n-        staleVars.add(v);\n-      } else if (refCount == firstRefAfterInit) {\n-        // The variable likely only read once, try some more\n-        // complex inlining heuristics.\n-        Reference reference = referenceInfo.references.get(\n-            firstRefAfterInit - 1);\n-        if (canInline(declaration, init, reference)) {\n-          inline(v, declaration, init, reference);\n-          staleVars.add(v);\n-        }\n-      } else if (declaration != init && refCount == 2) {\n-        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n-          // The only reference is the initialization, remove the assignment and\n-          // the variable declaration.\n-          Node value = init.getAssignedValue();\n-          Preconditions.checkNotNull(value);\n-          inlineWellDefinedVariable(v, value, referenceInfo.references);\n-          staleVars.add(v);\n-        }\n-      }\n+private void inlineNonConstants(\n+    Var v, ReferenceCollection referenceInfo, boolean maybeModifiedArguments) {\n+  int refCount = referenceInfo.references.size();\n+\n+  Reference declaration = referenceInfo.references.get(0);\n+  Reference init = referenceInfo.getInitializingReference();\n+\n+  if (refCount == 0) {\n+    // No references, nothing to do.\n+    return;\n+  } else if (refCount == 1) {\n+    // If the variable has only one reference, we can inline it.\n+    Reference ref = referenceInfo.references.get(0);\n+    Node currValue = ref.getNode();\n+    if (NodeUtil.isImmutableValue(currValue)) {\n+      // If we have an immutable value, we can simply replace the uses.\n+      inline(v, declaration, init, ref);\n+    } else {\n+      // Otherwise, we need to create a new node, as we cannot change the original.\n+      Node value = currValue.cloneTree();\n+      inlineWellDefinedVariable(v, value, referenceInfo.references);\n+    }\n+    staleVars.add(v);\n+  } else if (refCount == 2 &&\n+      !maybeModifiedArguments && referenceInfo.isAssignedOnceInLifetime() &&\n+      isValidDeclaration(declaration) && isValidInitialization(init)) {\n+    // If the variable is assigned to once, it can be inlined.\n+    Reference ref = referenceInfo.references.get(1);\n+    inline(v, declaration, init, ref);\n+    staleVars.add(v);\n+  } else if (refCount > 1 &&\n+      !maybeModifiedArguments && referenceInfo.isAssignedOnceInLifetime() &&\n+      isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n+    // If the variable is well-defined and has at most one write, try more aggressive inlining.\n+    Node assignedValue = init != null ? init.getAssignedValue() :\n+        NodeUtil.newUndefinedNode(declaration.getNode());\n+    // Only inline variables that are never defined before they are referenced.\n+    if (NodeUtil.isImmutableValue(assignedValue)) {\n+      inlineWellDefinedVariable(v, assignedValue, referenceInfo.references);\n+    } else {\n+      Node value = assignedValue.cloneTree();\n+      inlineWellDefinedVariable(v, value, referenceInfo.references);\n+    }\n+    staleVars.add(v);\n+  } else if (refCount == 2) {\n+    Reference ref1 = referenceInfo.references.get(0);\n+    Reference ref2 = referenceInfo.references.get(1);\n+    if (init != null && ref1 == init) {\n+      Reference tmp = ref2;\n+      ref2 = ref1;\n+      ref1 = tmp;\n+    }\n+    boolean firstRefIsRead = NodeUtil.isExpressionResultUsed(ref1.getNode());\n+\n+    if (firstRefIsRead && ref1.getNode().isName()) {\n+      // The first reference is a read and is not the declaration of the variable.\n+      tryAggressiveInlining(v, declaration, init, ref1, ref2, staleVars);\n+    } else if (\n+        !maybeModifiedArguments &&\n+            (!initRefsByVar.containsKey(v) || initRefsByVar.get(v).size() == 1) &&\n+            isInlineableDeclaration(declaration)) {\n+      // If there is exactly one initializing reference, and it assigns a value to the\n+      // variable that should be inlined, and the variable is not referenced in a modified\n+      // argument, we should inline.\n+      tryInitializingInlining(v, declaration, init, ref1, staleVars);\n+    }\n+  } else {\n+    // Multiple references. Check whether we can do some more aggressive inlining.\n+    Reference firstRef = referenceInfo.references.get(1);\n+    boolean firstRefIsRead = NodeUtil.isExpressionResultUsed(firstRef.getNode());\n+    if (firstRefIsRead && firstRef.getNode().isName()) {\n+      // The first reference is a read and is not the declaration of the variable.\n+      tryAggressiveInlining(v, declaration, init, firstRef, staleVars);\n+    }\n+  }\n \n-      // If this variable was not inlined normally, check if we can\n-      // inline an alias of it. (If the variable was inlined, then the\n-      // reference data is out of sync. We're better off just waiting for\n-      // the next pass.)\n-      if (!maybeModifiedArguments &&\n-          !staleVars.contains(v) &&\n-          referenceInfo.isWellDefined() &&\n-          referenceInfo.isAssignedOnceInLifetime()) {\n-          // Inlining the variable based solely on well-defined and assigned\n-          // once is *NOT* correct. We relax the correctness requirement if\n-          // the variable is declared constant.\n-        List<Reference> refs = referenceInfo.references;\n-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n-          Node nameNode = refs.get(i).getNode();\n-          if (aliasCandidates.containsKey(nameNode)) {\n-            AliasCandidate candidate = aliasCandidates.get(nameNode);\n-            if (!staleVars.contains(candidate.alias) &&\n-                !isVarInlineForbidden(candidate.alias)) {\n-              Reference aliasInit;\n-              aliasInit = candidate.refInfo.getInitializingReference();\n-              Node value = aliasInit.getAssignedValue();\n-              Preconditions.checkNotNull(value);\n-              inlineWellDefinedVariable(candidate.alias,\n-                  value,\n-                  candidate.refInfo.references);\n-              staleVars.add(candidate.alias);\n-            }\n+  if (!maybeModifiedArguments && !staleVars.contains(v) &&\n+      referenceInfo.isWellDefined() && referenceInfo.isAssignedOnceInLifetime()) {\n+    // Inlining the variable based solely on well-defined and assigned once is *NOT* correct.\n+    // We relax the correctness requirement if the variable is declared constant.\n+    List<Reference> refs = referenceInfo.references;\n+    for (int i = 1; i < refs.size(); i++) {\n+      Node nameNode = refs.get(i).getNode();\n+      if (aliasCandidates.containsKey(nameNode)) {\n+        AliasCandidate candidate = aliasCandidates.get(nameNode);\n+        if (!staleVars.contains(candidate.alias) && !isVarInlineForbidden(candidate.alias)) {\n+          Reference aliasInit = candidate.refInfo.getInitializingReference();\n+          Node value = aliasInit.getAssignedValue();\n+          if (NodeUtil.isImmutableValue(value)) {\n+            inlineWellDefinedVariable(candidate.alias,\n+                value.cloneTree(),\n+                candidate.refInfo.references);\n+          } else {\n+            Node aliasValue = value.cloneTree();\n+            inlineWellDefinedVariable(candidate.alias,\n+                aliasValue,\n+                candidate.refInfo.references);\n           }\n+          staleVars.add(candidate.alias);\n         }\n       }\n     }\n+  }\n+}\n \n     /**\n      * If there are any variable references in the given node tree, blacklist",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}