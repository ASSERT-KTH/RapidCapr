{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandler<?> oldMockHandler = MockUtil.getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>((Class<T>) mock.getClass(), oldMockHandler.getConfig());\n    MethodInterceptorFilter filter = new MethodInterceptorFilter(newMockHandler,\n            (MockSettingsImpl) MockUtil.getInvocationSettings().getDefaultAnswer());\n    MockAccess mockAccess = ((MockAccess) mock);\n    mockAccess.setMockitoInterceptor(filter);\n    mockAccess.setMockitoInterceptor(filter);\n    mockAccess.setMockHandler(newMockHandler);\n    newMockHandler.setMockitoInterceptor(filter);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..e96cd4aa4 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,18 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandler<?> oldMockHandler = MockUtil.getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>((Class<T>) mock.getClass(), oldMockHandler.getConfig());\n+    MethodInterceptorFilter filter = new MethodInterceptorFilter(newMockHandler,\n+            (MockSettingsImpl) MockUtil.getInvocationSettings().getDefaultAnswer());\n+    MockAccess mockAccess = ((MockAccess) mock);\n+    mockAccess.setMockitoInterceptor(filter);\n+    mockAccess.setMockitoInterceptor(filter);\n+    mockAccess.setMockHandler(newMockHandler);\n+    newMockHandler.setMockitoInterceptor(filter);\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: non-static method <T>getMockHandler(T) cannot be referenced from a static context",
    "test_result": "ERROR"
}