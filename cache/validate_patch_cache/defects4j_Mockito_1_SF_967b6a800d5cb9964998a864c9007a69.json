{
    "patch": "    public void captureArgumentsFrom(Invocation invocation) {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                if (isVarArgsParameter(invocation, position) && isVarargMatcher(m)) {\n                    Object array = invocation.getRawArguments()[position];\n                    for (int i = 0; i < Array.getLength(array); i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                    }\n                } else if (hasArgumentAt(invocation, position)) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                } else {\n                    ((CapturesArguments) m).captureFrom(null);\n                }\n            }\n        }\n    }\n    \n    private boolean isVarArgsParameter(Invocation invocation, int position) {\n        return position == invocation.getRawArguments().length - 1 && invocation.getMethod().isVarArgs();\n    }\n    \n    private boolean isVarargMatcher(Matcher matcher) {\n        return matcher instanceof VarargMatcher;\n    }\n    \n    private boolean hasArgumentAt(Invocation invocation, int position) {\n        return position < invocation.getRawArguments().length;\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..f283eedda 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -118,35 +118,33 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     }\n \n     public void captureArgumentsFrom(Invocation invocation) {\n-        if (invocation.getMethod().isVarArgs()) {\n-            int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n-\n-        } else {\n-            for (int position = 0; position < matchers.size(); position++) {\n-                Matcher m = matchers.get(position);\n-                if (m instanceof CapturesArguments) {\n+        for (int position = 0; position < matchers.size(); position++) {\n+            Matcher m = matchers.get(position);\n+            if (m instanceof CapturesArguments) {\n+                if (isVarArgsParameter(invocation, position) && isVarargMatcher(m)) {\n+                    Object array = invocation.getRawArguments()[position];\n+                    for (int i = 0; i < Array.getLength(array); i++) {\n+                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n+                    }\n+                } else if (hasArgumentAt(invocation, position)) {\n                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n+                } else {\n+                    ((CapturesArguments) m).captureFrom(null);\n                 }\n             }\n         }\n-\n-//        for (int position = 0; position < matchers.size(); position++) {\n-//            Matcher m = matchers.get(position);\n-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n-//                //TODO SF - this whole lot can be moved captureFrom implementation\n-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n-//                    Object array = invocation.getRawArguments()[position];\n-//                    for (int i = 0; i < Array.getLength(array); i++) {\n-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n-//                    }\n-//                    //since we've captured all varargs already, it does not make sense to process other matchers.\n-//                    return;\n-//                } else {\n-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n-//                }\n-//            }\n-//        }\n+    }\n+    \n+    private boolean isVarArgsParameter(Invocation invocation, int position) {\n+        return position == invocation.getRawArguments().length - 1 && invocation.getMethod().isVarArgs();\n+    }\n+    \n+    private boolean isVarargMatcher(Matcher matcher) {\n+        return matcher instanceof VarargMatcher;\n+    }\n+    \n+    private boolean hasArgumentAt(Invocation invocation, int position) {\n+        return position < invocation.getRawArguments().length;\n     }\n \n     private boolean isVarargMatcher(Matcher matcher) {",
    "result_reason": "error: method isVarargMatcher(Matcher) is already defined in class InvocationMatcher",
    "test_result": "ERROR"
}