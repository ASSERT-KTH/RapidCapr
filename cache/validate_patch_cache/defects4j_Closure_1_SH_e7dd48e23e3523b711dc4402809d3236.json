{
    "patch": "    if (NodeUtil.isFunctionExpression(function)) {\n      if (function.getParent().isCall()) {\n        // If this is a callee in a Call, we must be careful not to modify\n        // the length parameter during this optimization. If we modify it\n        // then we will have to modify all of inlining/etc code to handle\n        // a parameter list that can grow/shrink during optimizations.\n        return;\n      }\n      if (function.getParent().isGetProp()\n          && function.getGrandparent().isCall()) {\n        // Same goes for this function expression, but a different\n        // location in the AST.\n        return;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..2949e25a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    if (NodeUtil.isFunctionExpression(function)) {\n+      if (function.getParent().isCall()) {\n+        // If this is a callee in a Call, we must be careful not to modify\n+        // the length parameter during this optimization. If we modify it\n+        // then we will have to modify all of inlining/etc code to handle\n+        // a parameter list that can grow/shrink during optimizations.\n+        return;\n+      }\n+      if (function.getParent().isGetProp()\n+          && function.getGrandparent().isCall()) {\n+        // Same goes for this function expression, but a different\n+        // location in the AST.\n+        return;\n+      }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}