{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis() +\n            (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND) +\n            (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE) +\n            (getHours() * DateTimeConstants.MILLIS_PER_HOUR) +\n            (getDays() * DateTimeConstants.MILLIS_PER_DAY);\n\n    int weeks = getWeeks();\n    int days = weeks * 7 + getDays();\n\n    long monthMillis = 0;\n    if (days != 0) {\n        monthMillis = (long) days * DateTimeConstants.MILLIS_PER_DAY;\n        millis = FieldUtils.safeAdd(millis, monthMillis);\n        weeks = 0;\n    } else {\n        millis = FieldUtils.safeAdd(millis, weeks * DateTimeConstants.MILLIS_PER_WEEK);\n    }\n\n    long yearMillis = 0;\n    int months = getMonths();\n    if (months != 0) {\n        yearMillis = (long) months * DateTimeConstants.MILLIS_PER_MONTH;\n        millis = FieldUtils.safeAdd(millis, yearMillis);\n    }\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    int years = getYears();\n    if (years != 0) {\n        result = result.withYears(years);\n    }\n\n    weeks += FieldUtils.safeDivide((int) monthMillis, DateTimeConstants.MILLIS_PER_WEEK);\n    if (weeks != 0) {\n        result = result.withWeeks(weeks);\n    }\n\n    months += FieldUtils.safeDivide((int) yearMillis, DateTimeConstants.MILLIS_PER_MONTH);\n    if (months != 0) {\n        result = result.withMonths(months);\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..bf423b48 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,51 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis() +\n+            (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND) +\n+            (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE) +\n+            (getHours() * DateTimeConstants.MILLIS_PER_HOUR) +\n+            (getDays() * DateTimeConstants.MILLIS_PER_DAY);\n+\n+    int weeks = getWeeks();\n+    int days = weeks * 7 + getDays();\n+\n+    long monthMillis = 0;\n+    if (days != 0) {\n+        monthMillis = (long) days * DateTimeConstants.MILLIS_PER_DAY;\n+        millis = FieldUtils.safeAdd(millis, monthMillis);\n+        weeks = 0;\n+    } else {\n+        millis = FieldUtils.safeAdd(millis, weeks * DateTimeConstants.MILLIS_PER_WEEK);\n     }\n \n+    long yearMillis = 0;\n+    int months = getMonths();\n+    if (months != 0) {\n+        yearMillis = (long) months * DateTimeConstants.MILLIS_PER_MONTH;\n+        millis = FieldUtils.safeAdd(millis, yearMillis);\n+    }\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+\n+    int years = getYears();\n+    if (years != 0) {\n+        result = result.withYears(years);\n+    }\n+\n+    weeks += FieldUtils.safeDivide((int) monthMillis, DateTimeConstants.MILLIS_PER_WEEK);\n+    if (weeks != 0) {\n+        result = result.withWeeks(weeks);\n+    }\n+\n+    months += FieldUtils.safeDivide((int) yearMillis, DateTimeConstants.MILLIS_PER_MONTH);\n+    if (months != 0) {\n+        result = result.withMonths(months);\n+    }\n+\n+    return result;\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}