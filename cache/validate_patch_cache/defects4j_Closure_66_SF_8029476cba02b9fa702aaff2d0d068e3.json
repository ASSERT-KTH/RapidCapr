{
    "patch": "public static double getTypedPercent(JSONObject jsonObject) {\n    int typedCount = 0;\n    int totalCount = 0;\n    for (String key : jsonObject.keySet()) {\n        Object value = jsonObject.get(key);\n        if (value instanceof JSONObject) {\n            typedCount += getTypedPercent((JSONObject) value);\n        } else if (value instanceof JSONArray) {\n            for (int i = 0; i < ((JSONArray) value).length(); i++) {\n                Object arrayValue = ((JSONArray) value).get(i);\n                if (arrayValue instanceof JSONObject) {\n                    typedCount += getTypedPercent((JSONObject) arrayValue);\n                }\n            }\n        } else {\n            totalCount++;\n            if (value != null) {\n                String stringValue = value.toString().trim();\n                if (!stringValue.isEmpty() && !stringValue.equalsIgnoreCase(\"null\")) {\n                    try {\n                        Double.parseDouble(stringValue);\n                        typedCount++;\n                    } catch (NumberFormatException e) {\n                        // Value is not a number\n                    }\n                }\n            }\n        }\n    }\n    return ((double) typedCount / (double) totalCount) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..bd9eaefc 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,37 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject jsonObject) {\n+    int typedCount = 0;\n+    int totalCount = 0;\n+    for (String key : jsonObject.keySet()) {\n+        Object value = jsonObject.get(key);\n+        if (value instanceof JSONObject) {\n+            typedCount += getTypedPercent((JSONObject) value);\n+        } else if (value instanceof JSONArray) {\n+            for (int i = 0; i < ((JSONArray) value).length(); i++) {\n+                Object arrayValue = ((JSONArray) value).get(i);\n+                if (arrayValue instanceof JSONObject) {\n+                    typedCount += getTypedPercent((JSONObject) arrayValue);\n+                }\n+            }\n+        } else {\n+            totalCount++;\n+            if (value != null) {\n+                String stringValue = value.toString().trim();\n+                if (!stringValue.isEmpty() && !stringValue.equalsIgnoreCase(\"null\")) {\n+                    try {\n+                        Double.parseDouble(stringValue);\n+                        typedCount++;\n+                    } catch (NumberFormatException e) {\n+                        // Value is not a number\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return ((double) typedCount / (double) totalCount) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}