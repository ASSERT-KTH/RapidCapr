{
    "patch": "public double getTypedPercent(List<JobStatus> jobs) {\n    double total = jobs.size();\n    int count = 0;\n    for (JobStatus status : jobs) {\n        if (status.getState() == JobStatus.State.SUCCEEDED \n            && status.getCounters() != null \n            && status.getCounters().getCounter(JobCounter.TOTAL_TIME) > 0) {\n            count++;\n        }\n    }\n    return (count / total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..ac75922f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(List<JobStatus> jobs) {\n+    double total = jobs.size();\n+    int count = 0;\n+    for (JobStatus status : jobs) {\n+        if (status.getState() == JobStatus.State.SUCCEEDED \n+            && status.getCounters() != null \n+            && status.getCounters().getCounter(JobCounter.TOTAL_TIME) > 0) {\n+            count++;\n+        }\n+    }\n+    return (count / total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}