{
    "patch": "// Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (NodeUtil.isPrototypeProperty(lhs)) {\n          return false;\n        }\n        if (NodeUtil.isGet(lhs) && lhs.getFirstChild().isName() && \"prototype\".equals(lhs.getLastChild().getString())) {\n          return false;\n        }\n        return !NodeUtil.isFunctionExpression(n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..21729219 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,16 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+// Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        if (NodeUtil.isPrototypeProperty(lhs)) {\n+          return false;\n+        }\n+        if (NodeUtil.isGet(lhs) && lhs.getFirstChild().isName() && \"prototype\".equals(lhs.getLastChild().getString())) {\n+          return false;\n+        }\n+        return !NodeUtil.isFunctionExpression(n);\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}