{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n    Object lastObj = null;\n    for (int i = size - 1; i >= 0; i--) {\n        Object obj = elementPairs.get(i);\n        if (obj instanceof PeriodPrinter) {\n            printer = (PeriodPrinter) obj;\n            lastObj = obj;\n        } else if (obj instanceof PeriodParser) {\n            parser = (PeriodParser) obj;\n            lastObj = obj;\n        } else if (obj instanceof Separator) {\n            Separator sep = (Separator) obj;\n            if (lastObj instanceof PeriodPrinter) {\n                printer = sep.finish((PeriodPrinter) lastObj, null);\n            } else if (lastObj instanceof PeriodParser) {\n                parser = sep.finish(null, (PeriodParser) lastObj);\n            }\n            lastObj = sep;\n        }\n    }\n    if (notPrinter) {\n        return new PeriodFormatter(null, parser);\n    } else if (notParser) {\n        return new PeriodFormatter(printer, null);\n    } else {\n        return new PeriodFormatter(printer, parser);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..cf5f01a2 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,40 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+    Object lastObj = null;\n+    for (int i = size - 1; i >= 0; i--) {\n+        Object obj = elementPairs.get(i);\n+        if (obj instanceof PeriodPrinter) {\n+            printer = (PeriodPrinter) obj;\n+            lastObj = obj;\n+        } else if (obj instanceof PeriodParser) {\n+            parser = (PeriodParser) obj;\n+            lastObj = obj;\n+        } else if (obj instanceof Separator) {\n+            Separator sep = (Separator) obj;\n+            if (lastObj instanceof PeriodPrinter) {\n+                printer = sep.finish((PeriodPrinter) lastObj, null);\n+            } else if (lastObj instanceof PeriodParser) {\n+                parser = sep.finish(null, (PeriodParser) lastObj);\n+            }\n+            lastObj = sep;\n         }\n     }\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, parser);\n+    } else if (notParser) {\n+        return new PeriodFormatter(printer, null);\n+    } else {\n+        return new PeriodFormatter(printer, parser);\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}