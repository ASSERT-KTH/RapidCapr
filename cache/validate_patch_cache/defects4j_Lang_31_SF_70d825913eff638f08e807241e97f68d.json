{
    "patch": "public static boolean containsAny(final CharSequence cs, final char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int csLength = cs.length();\n    final int csLast = csLength - 1;\n    final int searchLength = searchChars.length;\n    final int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        final char ch = cs.charAt(i);\n\n        // Check if the current character matches any of the search characters\n        if (Arrays.binarySearch(searchChars, ch) >= 0) {\n            // Current character is a match, return true\n            return true;\n        }\n\n        // Check if the current character is a high surrogate\n        if (ch >= '\\uD800' && ch <= '\\uDBFF') {\n            if (i == csLast) {\n                // Current character is a high surrogate but there are no matching low surrogates, return false\n                return false;\n            }\n            // Pair of high surrogate and low surrogate\n            final char ch2 = cs.charAt(i + 1);\n            if (ch2 >= '\\uDC00' && ch2 <= '\\uDFFF') {\n                // Convert high and low surrogate to Unicode supplementary character\n                final int codePoint = (ch << 10) + ch2 + Unicode.CODEPOINT_ZERO;\n                if (Arrays.binarySearch(searchChars, (char) codePoint) >= 0) {\n                    // Current character is a match, return true\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..a8ace8a8 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,43 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence cs, final char[] searchChars) {\n+    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int csLength = cs.length();\n+    final int csLast = csLength - 1;\n+    final int searchLength = searchChars.length;\n+    final int searchLast = searchLength - 1;\n+    for (int i = 0; i < csLength; i++) {\n+        final char ch = cs.charAt(i);\n+\n+        // Check if the current character matches any of the search characters\n+        if (Arrays.binarySearch(searchChars, ch) >= 0) {\n+            // Current character is a match, return true\n+            return true;\n+        }\n+\n+        // Check if the current character is a high surrogate\n+        if (ch >= '\\uD800' && ch <= '\\uDBFF') {\n+            if (i == csLast) {\n+                // Current character is a high surrogate but there are no matching low surrogates, return false\n+                return false;\n+            }\n+            // Pair of high surrogate and low surrogate\n+            final char ch2 = cs.charAt(i + 1);\n+            if (ch2 >= '\\uDC00' && ch2 <= '\\uDFFF') {\n+                // Convert high and low surrogate to Unicode supplementary character\n+                final int codePoint = (ch << 10) + ch2 + Unicode.CODEPOINT_ZERO;\n+                if (Arrays.binarySearch(searchChars, (char) codePoint) >= 0) {\n+                    // Current character is a match, return true\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}