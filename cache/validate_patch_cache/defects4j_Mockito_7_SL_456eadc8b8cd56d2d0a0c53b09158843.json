{
    "patch": "        if (typeVariable != null) {\n            for (Type type : typeVariable.getBounds()) {\n                if (type instanceof Class && ((Class<?>) type).isAssignableFrom(Object.class)) {\n                    continue; // skip raw extraction\n                }\n                registerTypeVariablesOn(type);\n            }\n            Type actualType = getActualTypeArgumentFor(typeVariable);\n            if (actualType != null && (!(actualType instanceof Class) || !((Class<?>) actualType).isAssignableFrom(Object.class))) {\n                registerTypeVariablesOn(actualType);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..0f813ca60 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,21 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+        if (typeVariable != null) {\n+            for (Type type : typeVariable.getBounds()) {\n+                if (type instanceof Class && ((Class<?>) type).isAssignableFrom(Object.class)) {\n+                    continue; // skip raw extraction\n+                }\n+                registerTypeVariablesOn(type);\n+            }\n+            Type actualType = getActualTypeArgumentFor(typeVariable);\n+            if (actualType != null && (!(actualType instanceof Class) || !((Class<?>) actualType).isAssignableFrom(Object.class))) {\n+                registerTypeVariablesOn(actualType);\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}