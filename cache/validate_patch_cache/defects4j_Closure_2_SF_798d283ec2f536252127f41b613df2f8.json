{
    "patch": "  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    if (implicitProto != null) {\n      Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n      for (String name : currentPropertyNames) {\n        ObjectType oType = properties.get(name);\n        JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);\n        JSType oTypePropertyType = null;\n        if (oType != null) {\n          oTypePropertyType = oType.getPropertyType(name);\n        }\n        if (interfaceTypePropertyType != null && oTypePropertyType != null &&\n            !interfaceTypePropertyType.isEquivalentTo(oTypePropertyType)) {\n          compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(), interfaceType.toString()));\n        }\n        currentProperties.put(name, interfaceType);\n      }\n      for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n        checkInterfaceConflictProperties(\n            t, n, functionName, properties, currentProperties, iType);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex a0f95db9..ad2da243 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1568,26 +1568,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n       HashMap<String, ObjectType> currentProperties,\n       ObjectType interfaceType) {\n     ObjectType implicitProto = interfaceType.getImplicitPrototype();\n-    Set<String> currentPropertyNames;\n-      // This can be the case if interfaceType is proxy to a non-existent\n-      // object (which is a bad type annotation, but shouldn't crash).\n-      currentPropertyNames = implicitProto.getOwnPropertyNames();\n-    for (String name : currentPropertyNames) {\n-      ObjectType oType = properties.get(name);\n-      if (oType != null) {\n-        if (!interfaceType.getPropertyType(name).isEquivalentTo(\n-            oType.getPropertyType(name))) {\n+    if (implicitProto != null) {\n+      Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n+      for (String name : currentPropertyNames) {\n+        ObjectType oType = properties.get(name);\n+        JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);\n+        JSType oTypePropertyType = null;\n+        if (oType != null) {\n+          oTypePropertyType = oType.getPropertyType(name);\n+        }\n+        if (interfaceTypePropertyType != null && oTypePropertyType != null &&\n+            !interfaceTypePropertyType.isEquivalentTo(oTypePropertyType)) {\n           compiler.report(\n               t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n-                  functionName, name, oType.toString(),\n-                  interfaceType.toString()));\n+                  functionName, name, oType.toString(), interfaceType.toString()));\n         }\n+        currentProperties.put(name, interfaceType);\n+      }\n+      for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n+        checkInterfaceConflictProperties(\n+            t, n, functionName, properties, currentProperties, iType);\n       }\n-      currentProperties.put(name, interfaceType);\n-    }\n-    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n-      checkInterfaceConflictProperties(t, n, functionName, properties,\n-          currentProperties, iType);\n     }\n   }\n ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}