{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isExprAssign(parent)) {\n        Node target = parent.getFirstChild();\n\n        if (NodeUtil.isGet(target)) {\n          Node propNameNode = target.getLastChild();\n\n          if (propNameNode.getString().equals(\"prototype\")) {\n            Node obj = target.getFirstChild();\n\n            if (!obj.matchesQualifiedName(\"Object\") && !obj.matchesQualifiedName(\"Function\")) {\n              return false;\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..566c1961 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,22 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isExprAssign(parent)) {\n+        Node target = parent.getFirstChild();\n+\n+        if (NodeUtil.isGet(target)) {\n+          Node propNameNode = target.getLastChild();\n+\n+          if (propNameNode.getString().equals(\"prototype\")) {\n+            Node obj = target.getFirstChild();\n+\n+            if (!obj.matchesQualifiedName(\"Object\") && !obj.matchesQualifiedName(\"Function\")) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}