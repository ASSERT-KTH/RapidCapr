{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    for (Type bound : typeVariable.getBounds()) {\n        if (bound instanceof TypeVariable) {\n            TypeVariable<?> tv = (TypeVariable<?>) bound;\n            for (Type t : tv.getBounds()) {\n                if (t != null) {\n                    registerTypeVariablesOn(t);\n                }\n            }\n            Type actualType = getActualTypeArgumentFor(tv);\n            if (actualType != null) {\n                if (actualType instanceof TypeVariable) {\n                    readTypeVariables(((TypeVariable<?>) actualType).getBounds());\n                } else {\n                    registerTypeVariablesOn(actualType);\n                }\n            }\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n    Type actualType = getActualTypeArgumentFor(typeVariable);\n    if (actualType != null) {\n        if (actualType instanceof TypeVariable) {\n            readTypeVariables(((TypeVariable<?>) actualType).getBounds());\n        } else {\n            registerTypeVariablesOn(actualType);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..b013b0b8b 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,40 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    for (Type bound : typeVariable.getBounds()) {\n+        if (bound instanceof TypeVariable) {\n+            TypeVariable<?> tv = (TypeVariable<?>) bound;\n+            for (Type t : tv.getBounds()) {\n+                if (t != null) {\n+                    registerTypeVariablesOn(t);\n+                }\n+            }\n+            Type actualType = getActualTypeArgumentFor(tv);\n+            if (actualType != null) {\n+                if (actualType instanceof TypeVariable) {\n+                    readTypeVariables(((TypeVariable<?>) actualType).getBounds());\n+                } else {\n+                    registerTypeVariablesOn(actualType);\n+                }\n+            }\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+    Type actualType = getActualTypeArgumentFor(typeVariable);\n+    if (actualType != null) {\n+        if (actualType instanceof TypeVariable) {\n+            readTypeVariables(((TypeVariable<?>) actualType).getBounds());\n+        } else {\n+            registerTypeVariablesOn(actualType);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}