{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  for (Reference ref : refs) {\n    Node node = ref.getNode();\n    Node parent = ref.getParent();\n    Node grandparent = ref.getGrandparent();\n\n    if (parent.isIn() || node.isIn()) {\n      // Don't inline object literals inside a for-in loop or comparison\n      return false;\n    }\n\n    if (parent.isGetProp() || parent.isGetElem()) {\n      // Ignore indirect references, like x.y (except x.y(), since the function referenced by y might reference 'this').\n      if (parent.getFirstChild() == node) {\n        if (grandparent.isCall() && grandparent.getFirstChild() == parent) {\n          // A call target maybe using the object as a 'this' value.\n          return false;\n        }\n        continue;\n      }\n    }\n\n    if (!isVarOrAssignExprLhs(node)) {\n      // Only rewrite VAR declarations or simple assignment statements\n      return false;\n    }\n\n    Node value = ref.getAssignedValue();\n    if (value == null || !value.isObjectLit()) {\n      // We're looking for object literal assignments only.\n      return false;\n    }\n\n    boolean hasSelfReference = false;\n    for (Node key = value.getFirstChild(); key != null; key = key.getNext()) {\n      if (key.isGetterDef() || key.isSetterDef()) {\n        // ES5 get/set not supported.\n        return false;\n      }\n\n      Node childValue = key.getFirstChild();\n      if (childValue != null) {\n        hasSelfReference = hasSelfReference || hasSelfReference(value, childValue, refs);\n      }\n      if (hasSelfReference) {\n        // Make sure that the value is not self-refential.\n        return false;\n      }\n    }\n\n    // We have found an acceptable object literal assignment.\n    // As long as there are no other assignments that mess things up, we can inline.\n    return true;\n  }\n\n  return false;\n}\n\nprivate boolean hasSelfReference(Node objLit, Node childVal, List<Reference> refs) {\n  for (Reference ref : refs) {\n    Node refNode = ref.getNode();\n    while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {\n      if (refNode == childVal) {\n        // There's a self-referential assignment\n        return true;\n      }\n      if (refNode.isObjectLit() && objLit != refNode) {\n        // Don't look beyond the current object literal to avoid false positives\n        break;\n      }\n      refNode = refNode.getParent();\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..b9a4796c 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,82 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n-\n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n-        }\n+private boolean isInlinableObject(List<Reference> refs) {\n+  for (Reference ref : refs) {\n+    Node node = ref.getNode();\n+    Node parent = ref.getParent();\n+    Node grandparent = ref.getGrandparent();\n+\n+    if (parent.isIn() || node.isIn()) {\n+      // Don't inline object literals inside a for-in loop or comparison\n+      return false;\n+    }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n+    if (parent.isGetProp() || parent.isGetElem()) {\n+      // Ignore indirect references, like x.y (except x.y(), since the function referenced by y might reference 'this').\n+      if (parent.getFirstChild() == node) {\n+        if (grandparent.isCall() && grandparent.getFirstChild() == parent) {\n+          // A call target maybe using the object as a 'this' value.\n+          return false;\n         }\n+        continue;\n+      }\n+    }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n-        }\n+    if (!isVarOrAssignExprLhs(node)) {\n+      // Only rewrite VAR declarations or simple assignment statements\n+      return false;\n+    }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n-        }\n+    Node value = ref.getAssignedValue();\n+    if (value == null || !value.isObjectLit()) {\n+      // We're looking for object literal assignments only.\n+      return false;\n+    }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n+    boolean hasSelfReference = false;\n+    for (Node key = value.getFirstChild(); key != null; key = key.getNext()) {\n+      if (key.isGetterDef() || key.isSetterDef()) {\n+        // ES5 get/set not supported.\n+        return false;\n+      }\n \n+      Node childValue = key.getFirstChild();\n+      if (childValue != null) {\n+        hasSelfReference = hasSelfReference || hasSelfReference(value, childValue, refs);\n+      }\n+      if (hasSelfReference) {\n+        // Make sure that the value is not self-refential.\n+        return false;\n+      }\n+    }\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n-          }\n-        }\n+    // We have found an acceptable object literal assignment.\n+    // As long as there are no other assignments that mess things up, we can inline.\n+    return true;\n+  }\n \n+  return false;\n+}\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+private boolean hasSelfReference(Node objLit, Node childVal, List<Reference> refs) {\n+  for (Reference ref : refs) {\n+    Node refNode = ref.getNode();\n+    while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {\n+      if (refNode == childVal) {\n+        // There's a self-referential assignment\n+        return true;\n       }\n-      return ret;\n+      if (refNode.isObjectLit() && objLit != refNode) {\n+        // Don't look beyond the current object literal to avoid false positives\n+        break;\n+      }\n+      refNode = refNode.getParent();\n     }\n+  }\n+\n+  return false;\n+}\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}