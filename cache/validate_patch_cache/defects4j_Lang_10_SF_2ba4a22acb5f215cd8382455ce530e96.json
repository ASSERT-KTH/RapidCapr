{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    if (value == null) {\n        return regex;\n    }\n\n    boolean wasWhite = false;\n    boolean escaped = false;\n    int length = value.length();\n\n    for (int i = 0; i < length; ++i) {\n        char c = value.charAt(i);\n\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*\");\n            }\n            continue;\n        }\n\n        wasWhite = false;\n\n        switch (c) {\n            case '\\'':\n                if (unquote) {\n                    if (++i == length) {\n                        // Unmatched quote at end of string\n                        return null;\n                    }\n                    c = value.charAt(i);\n                }\n                break;\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '|':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                if (!escaped && regex.length() > 0) {\n                    char previous = regex.charAt(regex.length() - 1);\n                    if (previous != '\\\\' && previous != '[' && previous != '(' && previous != '|') {\n                        regex.append(\"\\\\\");\n                    }\n                }\n                escaped = true;\n                break;\n            case '*':\n                // Check for \\* case\n                if (!escaped && regex.length() > 0 && regex.charAt(regex.length() - 1) == '\\\\') {\n                    regex.deleteCharAt(regex.length() - 1);\n                }\n                escaped = false;\n                break;\n            case '\\\\':\n                if (escaped) {\n                    regex.append(\"\\\\\\\\\");\n                    escaped = false;\n                } else {\n                    // Check for \\s case\n                    if (i + 1 < length && Character.isWhitespace(value.charAt(i + 1))) {\n                        regex.append(\"\\\\\\\\s\");\n                        ++i;\n                    } else {\n                        regex.append(\"\\\\\\\\\");\n                        escaped = true;\n                    }\n                }\n                break;\n            default:\n                escaped = false;\n                break;\n        }\n\n        regex.append(c);\n    }\n\n    if (escaped) {\n        regex.append(\"\\\\\\\\\");\n    }\n\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..15500ee8 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,25 +300,36 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    if (value == null) {\n+        return regex;\n+    }\n+\n+    boolean wasWhite = false;\n+    boolean escaped = false;\n+    int length = value.length();\n+\n+    for (int i = 0; i < length; ++i) {\n+        char c = value.charAt(i);\n+\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n+            continue;\n+        }\n+\n+        wasWhite = false;\n+\n+        switch (c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+                if (unquote) {\n+                    if (++i == length) {\n+                        // Unmatched quote at end of string\n+                        return null;\n                     }\n-                    c= value.charAt(i);\n+                    c = value.charAt(i);\n                 }\n                 break;\n             case '?':\n@@ -328,20 +339,56 @@ public class FastDateParser implements DateParser, Serializable {\n             case ')':\n             case '{':\n             case '}':\n-            case '\\\\':\n             case '|':\n-            case '*':\n             case '+':\n             case '^':\n             case '$':\n             case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                if (!escaped && regex.length() > 0) {\n+                    char previous = regex.charAt(regex.length() - 1);\n+                    if (previous != '\\\\' && previous != '[' && previous != '(' && previous != '|') {\n+                        regex.append(\"\\\\\");\n+                    }\n+                }\n+                escaped = true;\n+                break;\n+            case '*':\n+                // Check for \\* case\n+                if (!escaped && regex.length() > 0 && regex.charAt(regex.length() - 1) == '\\\\') {\n+                    regex.deleteCharAt(regex.length() - 1);\n+                }\n+                escaped = false;\n+                break;\n+            case '\\\\':\n+                if (escaped) {\n+                    regex.append(\"\\\\\\\\\");\n+                    escaped = false;\n+                } else {\n+                    // Check for \\s case\n+                    if (i + 1 < length && Character.isWhitespace(value.charAt(i + 1))) {\n+                        regex.append(\"\\\\\\\\s\");\n+                        ++i;\n+                    } else {\n+                        regex.append(\"\\\\\\\\\");\n+                        escaped = true;\n+                    }\n+                }\n+                break;\n+            default:\n+                escaped = false;\n+                break;\n         }\n-        return regex;\n+\n+        regex.append(c);\n     }\n \n+    if (escaped) {\n+        regex.append(\"\\\\\\\\\");\n+    }\n+\n+    return regex;\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}