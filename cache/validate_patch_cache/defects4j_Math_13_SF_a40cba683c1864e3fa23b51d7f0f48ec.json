{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    if (m.getRowDimension() * m.getColumnDimension() > 100000) {\n        final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n        final RealMatrix u = svd.getU();\n        final RealMatrix s = svd.getS();\n        final RealMatrix v = svd.getV();\n\n        final double[] sqrtS = new double[s.getColumnDimension()];\n        for (int i = 0; i < sqrtS.length; i++) {\n            sqrtS[i] = Math.sqrt(s.getEntry(i, i));\n        }\n        final RealMatrix sqrtSMatrix = MatrixUtils.createRealDiagonalMatrix(sqrtS);\n\n        return u.multiply(sqrtSMatrix).multiply(v.transpose());\n    } else {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f0f0acc66 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    if (m.getRowDimension() * m.getColumnDimension() > 100000) {\n+        final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+        final RealMatrix u = svd.getU();\n+        final RealMatrix s = svd.getS();\n+        final RealMatrix v = svd.getV();\n+\n+        final double[] sqrtS = new double[s.getColumnDimension()];\n+        for (int i = 0; i < sqrtS.length; i++) {\n+            sqrtS[i] = Math.sqrt(s.getEntry(i, i));\n+        }\n+        final RealMatrix sqrtSMatrix = MatrixUtils.createRealDiagonalMatrix(sqrtS);\n+\n+        return u.multiply(sqrtSMatrix).multiply(v.transpose());\n+    } else {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}