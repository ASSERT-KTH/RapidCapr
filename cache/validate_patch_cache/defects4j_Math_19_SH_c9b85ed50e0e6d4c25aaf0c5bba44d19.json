{
    "patch": "                final double[] normalized = getEncoder().normalize(init, boundaries);\n                if (isOverflow(normalized)) {\n                    throw new NumberIsTooLargeException(\n                            LocalizedFormats.OVERFLOW_IN_ENCODING, normalized, getEncoder().getLower(), getEncoder().getUpper());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..9ccdc3b1f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,10 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                final double[] normalized = getEncoder().normalize(init, boundaries);\n+                if (isOverflow(normalized)) {\n+                    throw new NumberIsTooLargeException(\n+                            LocalizedFormats.OVERFLOW_IN_ENCODING, normalized, getEncoder().getLower(), getEncoder().getUpper());\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}