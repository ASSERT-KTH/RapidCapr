{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n        if (n.hasOneChild()) {\n            Node maybeExpr = n.getFirstChild();\n\n            // IO has a bug where event handlers behave differently when\n            // their return value is used vs. when their return value is in\n            // an EXPR_RESULT. It's pretty freaking weird. See:\n            // https://code.google.com/p/closure-compiler/issues/detail?id=291\n            // We try to detect this case and not fold EXPR_RESULTs\n            // into other expressions.\n\n            // We only have to worry about methods with an implicit 'this'\n            // parameter, or this doesn't happen.\n\n            Node parent = n.getParent();\n            if (parent != null && NodeUtil.isFunctionExpression(parent)) {\n                Node fnNameNode = parent.getFirstChild();\n                Node fnParamsNode = fnNameNode.getNext();\n                if (fnParamsNode.hasChildren()) {\n                    Node firstParam = fnParamsNode.getFirstChild();\n                    if (firstParam.getString().equals(\"this\")) {\n                        return false;\n                    }\n                }\n            }\n\n            if (maybeExpr.getType() == Token.EXPR_RESULT) {\n                return NodeUtil.isExpressionNode(maybeExpr.getFirstChild());\n            } else {\n                return NodeUtil.isExpressionNode(maybeExpr);\n            }\n        }\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..ea2c608c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,43 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n+private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n+        if (n.hasOneChild()) {\n+            Node maybeExpr = n.getFirstChild();\n+\n+            // IO has a bug where event handlers behave differently when\n+            // their return value is used vs. when their return value is in\n+            // an EXPR_RESULT. It's pretty freaking weird. See:\n+            // https://code.google.com/p/closure-compiler/issues/detail?id=291\n+            // We try to detect this case and not fold EXPR_RESULTs\n+            // into other expressions.\n \n             // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n+            // parameter, or this doesn't happen.\n+\n+            Node parent = n.getParent();\n+            if (parent != null && NodeUtil.isFunctionExpression(parent)) {\n+                Node fnNameNode = parent.getFirstChild();\n+                Node fnParamsNode = fnNameNode.getNext();\n+                if (fnParamsNode.hasChildren()) {\n+                    Node firstParam = fnParamsNode.getFirstChild();\n+                    if (firstParam.getString().equals(\"this\")) {\n+                        return false;\n+                    }\n+                }\n+            }\n \n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+            if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+                return NodeUtil.isExpressionNode(maybeExpr.getFirstChild());\n+            } else {\n+                return NodeUtil.isExpressionNode(maybeExpr);\n+            }\n+        }\n     }\n \n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}