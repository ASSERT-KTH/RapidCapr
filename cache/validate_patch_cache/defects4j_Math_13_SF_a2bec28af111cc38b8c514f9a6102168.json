{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition eig = new EigenDecomposition(m);\n    final RealMatrix v = eig.getV();\n    final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        double sqrtEigenvalue = Math.sqrt(eig.getRealEigenvalue(i));\n        if (Double.isNaN(sqrtEigenvalue)) {\n            sqrtEigenvalue = 0;\n        }\n        sqrtEigenvalues.setEntry(i, i, sqrtEigenvalue);\n    }\n    final RealMatrix sqrtM = v.multiply(sqrtEigenvalues).multiply(v.transpose());\n    RealMatrix s = sqrtM;\n    RealMatrix sOld = null;\n    int count = 0;\n    while (sOld == null || s.subtract(sOld).getNorm() > 1e-14) {\n        RealMatrix sInv = new LUDecomposition(s).getSolver().getInverse();\n        sOld = s;\n        s = s.add(m.multiply(sInv)).scalarMultiply(0.5);\n        count++;\n        if (count > 100) {\n            throw new RuntimeException(\"Could not converge to matrix square root\");\n        }\n    }\n    return s;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f3721a2b8 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,31 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition eig = new EigenDecomposition(m);\n+    final RealMatrix v = eig.getV();\n+    final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        double sqrtEigenvalue = Math.sqrt(eig.getRealEigenvalue(i));\n+        if (Double.isNaN(sqrtEigenvalue)) {\n+            sqrtEigenvalue = 0;\n+        }\n+        sqrtEigenvalues.setEntry(i, i, sqrtEigenvalue);\n+    }\n+    final RealMatrix sqrtM = v.multiply(sqrtEigenvalues).multiply(v.transpose());\n+    RealMatrix s = sqrtM;\n+    RealMatrix sOld = null;\n+    int count = 0;\n+    while (sOld == null || s.subtract(sOld).getNorm() > 1e-14) {\n+        RealMatrix sInv = new LUDecomposition(s).getSolver().getInverse();\n+        sOld = s;\n+        s = s.add(m.multiply(sInv)).scalarMultiply(0.5);\n+        count++;\n+        if (count > 100) {\n+            throw new RuntimeException(\"Could not converge to matrix square root\");\n+        }\n     }\n+    return s;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}