{
    "patch": "public static String getprop(String property) throws IOException {\n    Process process = Runtime.getRuntime().exec(\"getprop \" + property);\n    InputStream inputStream = process.getInputStream();\n    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n    String line = reader.readLine();\n    reader.close();\n    inputStream.close();\n    return (line != null && line.charAt(0) == '\\'') ? line.substring(1, line.length() - 1) : line;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..51872646 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String property) throws IOException {\n+    Process process = Runtime.getRuntime().exec(\"getprop \" + property);\n+    InputStream inputStream = process.getInputStream();\n+    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n+    String line = reader.readLine();\n+    reader.close();\n+    inputStream.close();\n+    return (line != null && line.charAt(0) == '\\'') ? line.substring(1, line.length() - 1) : line;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}