{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetBefore = getOffset(instantLocal - 1);\n    int offsetAfter = getOffset(instantLocal);\n    // Check if the given instant is in a DST gap.\n    if (offsetBefore != offsetAfter) {\n        // Find the start and end of the current DST gap.\n        int transitionStart = findPreviousTransition(instantLocal, offsetBefore, offsetAfter);\n        int transitionEnd = findNextTransition(instantLocal, offsetBefore, offsetAfter);\n        if ((instantLocal - transitionStart) < (transitionEnd - instantLocal)) {\n            return offsetBefore;\n        } else {\n            return offsetAfter;\n        }\n    } else {\n        return offsetAfter;\n    }\n}\n\nprivate int findPreviousTransition(long instantLocal, int offsetBefore, int offsetAfter) {\n    int transition = (int)previousTransition(instantLocal+1);\n    while (transition > 0 && (getOffset(transition-1) - offsetBefore) == (offsetAfter - offsetBefore)) {\n        transition = (int)previousTransition(transition);\n    }\n    return transition;\n}\n\nprivate int findNextTransition(long instantLocal, int offsetBefore, int offsetAfter) {\n    int transition = (int)nextTransition(instantLocal-1);\n    while (transition > 0 && (getOffset(transition-1) - offsetBefore) == (offsetAfter - offsetBefore)) {\n        transition = (int)nextTransition(transition);\n    }\n    return transition;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..cdedf048 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,38 +877,39 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offsetBefore = getOffset(instantLocal - 1);\n+    int offsetAfter = getOffset(instantLocal);\n+    // Check if the given instant is in a DST gap.\n+    if (offsetBefore != offsetAfter) {\n+        // Find the start and end of the current DST gap.\n+        int transitionStart = findPreviousTransition(instantLocal, offsetBefore, offsetAfter);\n+        int transitionEnd = findNextTransition(instantLocal, offsetBefore, offsetAfter);\n+        if ((instantLocal - transitionStart) < (transitionEnd - instantLocal)) {\n+            return offsetBefore;\n+        } else {\n+            return offsetAfter;\n         }\n-        return offsetAdjusted;\n+    } else {\n+        return offsetAfter;\n+    }\n+}\n+\n+private int findPreviousTransition(long instantLocal, int offsetBefore, int offsetAfter) {\n+    int transition = (int)previousTransition(instantLocal+1);\n+    while (transition > 0 && (getOffset(transition-1) - offsetBefore) == (offsetAfter - offsetBefore)) {\n+        transition = (int)previousTransition(transition);\n     }\n+    return transition;\n+}\n+\n+private int findNextTransition(long instantLocal, int offsetBefore, int offsetAfter) {\n+    int transition = (int)nextTransition(instantLocal-1);\n+    while (transition > 0 && (getOffset(transition-1) - offsetBefore) == (offsetAfter - offsetBefore)) {\n+        transition = (int)nextTransition(transition);\n+    }\n+    return transition;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}