{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (parent.getType() == Token.ASSIGN\n        || parent.getType() == Token.ASSIGN_ADD\n        || parent.getType() == Token.ASSIGN_SUB\n        || parent.getType() == Token.ASSIGN_MUL\n        || parent.getType() == Token.ASSIGN_DIV\n        || parent.getType() == Token.ASSIGN_MOD\n        || parent.getType() == Token.ASSIGN_BITOR\n        || parent.getType() == Token.ASSIGN_BITXOR\n        || parent.getType() == Token.ASSIGN_BITAND\n        || parent.getType() == Token.ASSIGN_SHL\n        || parent.getType() == Token.ASSIGN_SHR\n        || parent.getType() == Token.ASSIGN_BITNOT\n        || parent.getType() == Token.ASSIGN_DEFAULT) {\n      return n;\n    }\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    if (left.getType() == Token.ARRAYLIT) {\n      int intIndex = (int) right.getDouble();\n      if (intIndex < 0 || intIndex >= left.getChildCount()) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n      Node elem = left.getChildAtIndex(intIndex);\n      if (elem.getType() == Token.EMPTY) {\n        elem = NodeUtil.newUndefinedNode(elem);\n      } else {\n        left.removeChild(elem);\n      }\n      n.getParent().replaceChild(n, elem);\n      reportCodeChange();\n      return elem;\n    }\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..339440d2 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,21 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (parent.getType() == Token.ASSIGN\n+        || parent.getType() == Token.ASSIGN_ADD\n+        || parent.getType() == Token.ASSIGN_SUB\n+        || parent.getType() == Token.ASSIGN_MUL\n+        || parent.getType() == Token.ASSIGN_DIV\n+        || parent.getType() == Token.ASSIGN_MOD\n+        || parent.getType() == Token.ASSIGN_BITOR\n+        || parent.getType() == Token.ASSIGN_BITXOR\n+        || parent.getType() == Token.ASSIGN_BITAND\n+        || parent.getType() == Token.ASSIGN_SHL\n+        || parent.getType() == Token.ASSIGN_SHR\n+        || parent.getType() == Token.ASSIGN_BITNOT\n+        || parent.getType() == Token.ASSIGN_DEFAULT) {\n+      return n;\n+    }\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into\n@@ -1287,38 +1302,23 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       return n;\n     }\n \n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    Node elem = left.getFirstChild();\n-    for (int i = 0; elem != null && i < intIndex; i++) {\n-      elem = elem.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+    if (left.getType() == Token.ARRAYLIT) {\n+      int intIndex = (int) right.getDouble();\n+      if (intIndex < 0 || intIndex >= left.getChildCount()) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n+      Node elem = left.getChildAtIndex(intIndex);\n+      if (elem.getType() == Token.EMPTY) {\n+        elem = NodeUtil.newUndefinedNode(elem);\n+      } else {\n+        left.removeChild(elem);\n+      }\n+      n.getParent().replaceChild(n, elem);\n+      reportCodeChange();\n+      return elem;\n     }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n+    return n;\n   }\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}