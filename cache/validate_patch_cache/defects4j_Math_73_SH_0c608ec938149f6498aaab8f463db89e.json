{
    "patch": "        // check if any input value is NaN or infinite\n        if (!Double.isFinite(min) || !Double.isFinite(max) || !Double.isFinite(initial)) {\n            throw new IllegalArgumentException(\"Endpoints or initial guess have infinite or NaN values. Endpoints: [\" + min + \",\" + max + \"], Initial guess value: \" + initial);\n        }\n\n        /",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..609525018 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,12 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // check if any input value is NaN or infinite\n+        if (!Double.isFinite(min) || !Double.isFinite(max) || !Double.isFinite(initial)) {\n+            throw new IllegalArgumentException(\"Endpoints or initial guess have infinite or NaN values. Endpoints: [\" + min + \",\" + max + \"], Initial guess value: \" + initial);\n+        }\n+\n+        /\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}