{
    "patch": "private void handleBlockComment(Comment comment) {\n    String commentValue = comment.getValue().trim();\n\n    if (commentValue.startsWith(\"/*\") && commentValue.endsWith(\"*/\")) {\n        String[] lines = commentValue.split(\"\\\\r?\\\\n\");\n\n        boolean hasSuspiciousTag = false;\n        for (String line : lines) {\n            String trimmedLine = line.trim();          \n            if (trimmedLine.startsWith(\"*\") && trimmedLine.length() > 1) {\n                trimmedLine = trimmedLine.substring(1).trim();\n            }\n\n            int suspiciousTagIndex = trimmedLine.indexOf(\"@ \");\n            if (suspiciousTagIndex == -1) {\n                suspiciousTagIndex = trimmedLine.indexOf(\"@\");\n            }\n\n            if (suspiciousTagIndex > 0) {\n                if (trimmedLine.charAt(suspiciousTagIndex - 1) == '*') {\n                    // The tag is likely part of some Javadoc-style block comment.\n                    continue;\n                }\n\n                hasSuspiciousTag = true;\n                break;\n            }\n        }\n\n        if (hasSuspiciousTag) {\n            errorReporter.warning(SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), \"\", 0);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 709534bf..47456421 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -248,14 +248,40 @@ class IRFactory {\n   /**\n    * Check to see if the given block comment looks like it should be JSDoc.\n    */\n-  private void handleBlockComment(Comment comment) {\n-    if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) {\n-      errorReporter.warning(\n-          SUSPICIOUS_COMMENT_WARNING,\n-          sourceName,\n-          comment.getLineno(), \"\", 0);\n+private void handleBlockComment(Comment comment) {\n+    String commentValue = comment.getValue().trim();\n+\n+    if (commentValue.startsWith(\"/*\") && commentValue.endsWith(\"*/\")) {\n+        String[] lines = commentValue.split(\"\\\\r?\\\\n\");\n+\n+        boolean hasSuspiciousTag = false;\n+        for (String line : lines) {\n+            String trimmedLine = line.trim();          \n+            if (trimmedLine.startsWith(\"*\") && trimmedLine.length() > 1) {\n+                trimmedLine = trimmedLine.substring(1).trim();\n+            }\n+\n+            int suspiciousTagIndex = trimmedLine.indexOf(\"@ \");\n+            if (suspiciousTagIndex == -1) {\n+                suspiciousTagIndex = trimmedLine.indexOf(\"@\");\n+            }\n+\n+            if (suspiciousTagIndex > 0) {\n+                if (trimmedLine.charAt(suspiciousTagIndex - 1) == '*') {\n+                    // The tag is likely part of some Javadoc-style block comment.\n+                    continue;\n+                }\n+\n+                hasSuspiciousTag = true;\n+                break;\n+            }\n+        }\n+\n+        if (hasSuspiciousTag) {\n+            errorReporter.warning(SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), \"\", 0);\n+        }\n     }\n-  }\n+}\n \n   /**\n    * @return true if the jsDocParser represents a fileoverview.",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}