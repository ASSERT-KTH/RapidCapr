{
    "patch": "private void inferPropertiesFromConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.hasProperty(prop) && !propType.isUnknownType()) {\n            JSType typeToInfer =\n                propType.isUnknownType() ? objType.getImplicitPrototype() : propType;\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n      inferPropertiesFromConstraint(narrowed, n.getJSTypeBeforeTypeInference());\n    }\n    return scope;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..99d5faeb 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,11 +1111,11 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n+private void inferPropertiesFromConstraint(\n       JSType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n     }\n-\n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj != null && constraintObj.isRecordType()) {\n@@ -1123,12 +1123,9 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n+          if (!objType.hasProperty(prop) && !propType.isUnknownType()) {\n+            JSType typeToInfer =\n+                propType.isUnknownType() ? objType.getImplicitPrototype() : propType;\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n@@ -1147,6 +1144,9 @@ class TypeInference\n       if (type != narrowed) {\n         scope = narrowScope(scope, n, narrowed);\n       }\n+      inferPropertiesFromConstraint(narrowed, n.getJSTypeBeforeTypeInference());\n+    }\n+    return scope;\n     }\n     return scope;\n   }",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}