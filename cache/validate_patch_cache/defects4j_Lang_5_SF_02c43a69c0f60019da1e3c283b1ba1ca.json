{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.trim().isEmpty()) {\n        return null;\n    }\n    \n    final int len = str.length();\n\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    int firstUnderscoreIndex = str.indexOf('_');\n\n    if (firstUnderscoreIndex == -1 || firstUnderscoreIndex == len - 1\n            || str.indexOf('_', firstUnderscoreIndex + 1) != -1 && firstUnderscoreIndex == str.lastIndexOf('_') - 1) {\n        if (!isValidLocaleString(str)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(str);\n    }\n\n    String language = str.substring(0, firstUnderscoreIndex);\n\n    int secondUnderscoreIndex = str.indexOf('_', firstUnderscoreIndex + 1);\n\n    if (secondUnderscoreIndex == -1 || secondUnderscoreIndex == len - 1) {\n        if (!isValidLocaleString(language) || !isValidLocaleString(str.substring(firstUnderscoreIndex+1))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(language, str.substring(firstUnderscoreIndex+1));\n    }\n\n    String country = str.substring(firstUnderscoreIndex + 1, secondUnderscoreIndex);\n\n    int thirdUnderscoreIndex = str.indexOf('_', secondUnderscoreIndex + 1);\n\n    if (thirdUnderscoreIndex == -1 || thirdUnderscoreIndex == len - 1) {\n        if (!isValidLocaleString(language) || !isValidLocaleString(country) || !isValidLocaleString(str.substring(secondUnderscoreIndex+1))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(language, country, str.substring(secondUnderscoreIndex+1));\n    }\n\n    String variant = str.substring(thirdUnderscoreIndex + 1);\n\n    if (!isValidLocaleString(language) || !isValidLocaleString(country) || !isValidLocaleString(variant)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isValidLocaleString(String s) {\n    if (s.isEmpty()) {\n        return false;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (c == ' ' || c == '_' || !Character.isLetterOrDigit(c)) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..9249dd8e 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,71 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.trim().isEmpty()) {\n+        return null;\n+    }\n+    \n+    final int len = str.length();\n+\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    int firstUnderscoreIndex = str.indexOf('_');\n+\n+    if (firstUnderscoreIndex == -1 || firstUnderscoreIndex == len - 1\n+            || str.indexOf('_', firstUnderscoreIndex + 1) != -1 && firstUnderscoreIndex == str.lastIndexOf('_') - 1) {\n+        if (!isValidLocaleString(str)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n+        return new Locale(str);\n+    }\n+\n+    String language = str.substring(0, firstUnderscoreIndex);\n+\n+    int secondUnderscoreIndex = str.indexOf('_', firstUnderscoreIndex + 1);\n+\n+    if (secondUnderscoreIndex == -1 || secondUnderscoreIndex == len - 1) {\n+        if (!isValidLocaleString(language) || !isValidLocaleString(str.substring(firstUnderscoreIndex+1))) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        return new Locale(language, str.substring(firstUnderscoreIndex+1));\n     }\n \n+    String country = str.substring(firstUnderscoreIndex + 1, secondUnderscoreIndex);\n+\n+    int thirdUnderscoreIndex = str.indexOf('_', secondUnderscoreIndex + 1);\n+\n+    if (thirdUnderscoreIndex == -1 || thirdUnderscoreIndex == len - 1) {\n+        if (!isValidLocaleString(language) || !isValidLocaleString(country) || !isValidLocaleString(str.substring(secondUnderscoreIndex+1))) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        return new Locale(language, country, str.substring(secondUnderscoreIndex+1));\n+    }\n+\n+    String variant = str.substring(thirdUnderscoreIndex + 1);\n+\n+    if (!isValidLocaleString(language) || !isValidLocaleString(country) || !isValidLocaleString(variant)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isValidLocaleString(String s) {\n+    if (s.isEmpty()) {\n+        return false;\n+    }\n+    for (int i = 0; i < s.length(); i++) {\n+        char c = s.charAt(i);\n+        if (c == ' ' || c == '_' || !Character.isLetterOrDigit(c)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: fr__P",
    "test_result": "FAIL"
}