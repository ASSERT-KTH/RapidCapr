{
    "patch": "import org.mockito.cglib.proxy.Factory;\nimport org.mockito.cglib.proxy.MethodInterceptor;\nimport org.mockito.cglib.proxy.MethodProxy;\n\npublic class MockHandler<T> implements MockHandlerInterface<T>, MethodInterceptor {\n\n    private final MockHandlerInterface<T> oldMockHandler;\n\n    public MockHandler(MockHandlerInterface<T> oldMockHandler) {\n        this.oldMockHandler = oldMockHandler;\n    }\n\n    @Override\n    public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args, MethodProxy proxy) throws Throwable {\n        if (\"toString\".equals(method.getName())) {\n            return oldMockHandler.toString();\n        } else if (\"hashCode\".equals(method.getName())) {\n            return oldMockHandler.hashCode();\n        } else if (\"equals\".equals(method.getName())) {\n            return oldMockHandler.equals(args[0]);\n        }\n        return oldMockHandler.handleMethodCall(method, args, proxy);\n    }\n\n    @Override\n    public void handleVoidMethodCall(java.lang.reflect.Method method, Object[] args, MethodProxy proxy) throws Throwable {\n        oldMockHandler.handleVoidMethodCall(method, args, proxy);\n    }\n\n    @Override\n    public T getMock() {\n        return oldMockHandler.getMock();\n    }\n\n    @Override\n    public Object handleMethodCall(java.lang.reflect.Method method, Object[] args, MethodProxy proxy) throws Throwable {\n        return oldMockHandler.handleMethodCall(method, args, proxy);\n    }\n\n    @Override\n    public String toString() {\n        return oldMockHandler.toString();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        return oldMockHandler.equals(obj);\n    }\n\n    @Override\n    public int hashCode() {\n        return oldMockHandler.hashCode();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..f556fd874 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,61 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.cglib.proxy.Factory;\n+import org.mockito.cglib.proxy.MethodInterceptor;\n+import org.mockito.cglib.proxy.MethodProxy;\n+\n+public class MockHandler<T> implements MockHandlerInterface<T>, MethodInterceptor {\n+\n+    private final MockHandlerInterface<T> oldMockHandler;\n+\n+    public MockHandler(MockHandlerInterface<T> oldMockHandler) {\n+        this.oldMockHandler = oldMockHandler;\n+    }\n+\n+    @Override\n+    public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args, MethodProxy proxy) throws Throwable {\n+        if (\"toString\".equals(method.getName())) {\n+            return oldMockHandler.toString();\n+        } else if (\"hashCode\".equals(method.getName())) {\n+            return oldMockHandler.hashCode();\n+        } else if (\"equals\".equals(method.getName())) {\n+            return oldMockHandler.equals(args[0]);\n+        }\n+        return oldMockHandler.handleMethodCall(method, args, proxy);\n+    }\n+\n+    @Override\n+    public void handleVoidMethodCall(java.lang.reflect.Method method, Object[] args, MethodProxy proxy) throws Throwable {\n+        oldMockHandler.handleVoidMethodCall(method, args, proxy);\n+    }\n+\n+    @Override\n+    public T getMock() {\n+        return oldMockHandler.getMock();\n+    }\n+\n+    @Override\n+    public Object handleMethodCall(java.lang.reflect.Method method, Object[] args, MethodProxy proxy) throws Throwable {\n+        return oldMockHandler.handleMethodCall(method, args, proxy);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return oldMockHandler.toString();\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        return oldMockHandler.equals(obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return oldMockHandler.hashCode();\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}