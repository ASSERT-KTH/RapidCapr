{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType narrowedType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (narrowedType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!narrowedType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!narrowedType.hasProperty(prop)) {\n              typeToInfer = getNativeType(VOID_TYPE)\n                  .getLeastSupertype(propType.restrictByNotNullOrUndefined());\n            }\n            narrowedType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..5a2cc660 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1119,21 +1119,22 @@ class TypeInference\n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n+      ObjectType narrowedType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+      if (narrowedType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n+          if (!narrowedType.isPropertyTypeDeclared(prop)) {\n             JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            if (!narrowedType.hasProperty(prop)) {\n+              typeToInfer = getNativeType(VOID_TYPE)\n+                  .getLeastSupertype(propType.restrictByNotNullOrUndefined());\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+            narrowedType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}