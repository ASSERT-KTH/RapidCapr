{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    boolean isFunction = parent.isFunction();\n    if (parent.isVar() && !isFunction) {\n      Node value = n.getFirstChild();\n      if (value != null && value.isQualifiedName()) {\n        String name = value.getQualifiedName();\n        Var aliasVar = scope.getVar(name);\n        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n          aliases.put(name, aliasVar);\n          transformation.addAlias(name, qualifiedName);\n        } else {\n          aliases.put(name, null);\n        }\n      }\n    } else if (isFunction && !NodeUtil.isFunctionExpression(parent)) {\n      Scope scopeFunc = parent.getScope();\n      String funcName = NodeUtil.getNearestFunctionName(parent);\n      for (Var funcV : scopeFunc.getVarIterable()) {\n        Node nFunc = funcV.getNode();\n        Node parentFunc = nFunc.getParent();\n        if (parentFunc.isParamList() || parentFunc.isFunction() && nFunc.isFunction()) {\n          continue;\n        }\n        if (nFunc.getFirstChild().getString().equals(funcName)) {\n          // If the variable declared in the function scope is present\n          // elsewhere with an alias, the other alias takes precedence.\n          String aliasName = findAliasName(nFunc);\n          if (aliasName != null) {\n            if (aliases.containsKey(aliasName)) {\n              aliases.remove(aliasName);\n            }\n          }\n\n          String qualifiedName;\n          Node initialValue = funcV.getInitialValue();\n          if (initialValue != null && initialValue.isQualifiedName()) {\n            qualifiedName = initialValue.getQualifiedName();\n            aliases.put(funcName, funcV);\n            transformation.addAlias(funcName, qualifiedName);\n          } else {\n            aliases.put(funcName, null);\n          }\n          break;\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..76aa9d1d 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,60 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    boolean isFunction = parent.isFunction();\n+    if (parent.isVar() && !isFunction) {\n+      Node value = n.getFirstChild();\n+      if (value != null && value.isQualifiedName()) {\n+        String name = value.getQualifiedName();\n+        Var aliasVar = scope.getVar(name);\n+        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n           aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n         } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+          aliases.put(name, null);\n         }\n+      }\n+    } else if (isFunction && !NodeUtil.isFunctionExpression(parent)) {\n+      Scope scopeFunc = parent.getScope();\n+      String funcName = NodeUtil.getNearestFunctionName(parent);\n+      for (Var funcV : scopeFunc.getVarIterable()) {\n+        Node nFunc = funcV.getNode();\n+        Node parentFunc = nFunc.getParent();\n+        if (parentFunc.isParamList() || parentFunc.isFunction() && nFunc.isFunction()) {\n+          continue;\n+        }\n+        if (nFunc.getFirstChild().getString().equals(funcName)) {\n+          // If the variable declared in the function scope is present\n+          // elsewhere with an alias, the other alias takes precedence.\n+          String aliasName = findAliasName(nFunc);\n+          if (aliasName != null) {\n+            if (aliases.containsKey(aliasName)) {\n+              aliases.remove(aliasName);\n+            }\n+          }\n+\n+          String qualifiedName;\n+          Node initialValue = funcV.getInitialValue();\n+          if (initialValue != null && initialValue.isQualifiedName()) {\n+            qualifiedName = initialValue.getQualifiedName();\n+            aliases.put(funcName, funcV);\n+            transformation.addAlias(funcName, qualifiedName);\n+          } else {\n+            aliases.put(funcName, null);\n+          }\n+          break;\n         }\n       }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}