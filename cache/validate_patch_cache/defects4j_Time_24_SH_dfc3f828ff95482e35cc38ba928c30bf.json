{
    "patch": "SortedSet<DurationField> fields = new TreeSet<>(Collections.reverseOrder());\n        boolean seenFirstField = false;\n        boolean seenYearOrWeekyear = false;\n        for (int i = 0; i < count; i++) {\n            DateTimeField field = savedFields[i].iField;\n            DurationField durationField = field.getDurationField();\n            if (!seenFirstField && !durationField.isSupported()) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                seenYearOrWeekyear = true;\n            } else if (durationField.getType() == DurationFieldType.weekyears()) {\n                if (!durationField.isSupported()) {\n                    saveField(DateTimeFieldType.weekyear(), iDefaultYear);\n                }\n                seenYearOrWeekyear = true;\n            } else if (durationField.getType() == DurationFieldType.weeks()) {\n                DateTimeField yearField = iChrono.weekyear().getField(iChrono);\n                if (!yearField.isLeap(iDefaultYear)) {\n                    continue; // ignore illegal weeks on year boundaries\n                }\n                if (field.getRangeDurationField().getType() == DurationFieldType.months()) {\n                    saveField(DateTimeFieldType.monthOfYear(), 1);\n                }\n            } else {\n                if (durationField.getType() == DurationFieldType.months()) {\n                    DurationField first = durationField;\n                    DateTimeFieldType type = DateTimeFieldType.monthOfYear();\n                    if (!seenYearOrWeekyear) {\n                        saveField(DateTimeFieldType.year(), iDefaultYear);\n                        seenYearOrWeekyear = true;\n                    }\n                    if (compareReverse(first, iChrono.days()) >= 0) {\n                        type = DateTimeFieldType.dayOfMonth();\n                    }\n                    saveField(type, 1);\n                } else if (durationField.getType() == DurationFieldType.days()) {\n                    if (!seenYearOrWeekyear) {\n                        saveField(DateTimeFieldType.year(), iDefaultYear);\n                    }\n                    saveField(DateTimeFieldType.monthOfYear(), 1);\n                }\n            }\n            if (field.getType() == DateTimeFieldType.year()) {\n                if (!seenFirstField) {\n                    seenYearOrWeekyear = true;\n                }\n            }\n            if (field.getRangeDurationField().getType() == DurationFieldType.months() && field.getDurationField().isPrecise()) {\n                fields.add(durationField);\n            } else {\n                seenFirstField = true;\n            }\n        }\n        for (DurationField durationField : fields) {\n            int value = (int) durationField.getField(getChronology()).getUnitMillis() / DateTimeConstants.MILLIS_PER_DAY;\n            if (value > 0) {\n                saveField(DateTimeFieldType.dayOfMonth(), 1);\n                millis = set(millis, DateTimeFieldType.dayOfMonth(), value);\n                millis = set(millis, DateTimeFieldType.monthOfYear(), 1);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..ed926f72 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,64 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+SortedSet<DurationField> fields = new TreeSet<>(Collections.reverseOrder());\n+        boolean seenFirstField = false;\n+        boolean seenYearOrWeekyear = false;\n+        for (int i = 0; i < count; i++) {\n+            DateTimeField field = savedFields[i].iField;\n+            DurationField durationField = field.getDurationField();\n+            if (!seenFirstField && !durationField.isSupported()) {\n+                saveField(DateTimeFieldType.year(), iDefaultYear);\n+                seenYearOrWeekyear = true;\n+            } else if (durationField.getType() == DurationFieldType.weekyears()) {\n+                if (!durationField.isSupported()) {\n+                    saveField(DateTimeFieldType.weekyear(), iDefaultYear);\n+                }\n+                seenYearOrWeekyear = true;\n+            } else if (durationField.getType() == DurationFieldType.weeks()) {\n+                DateTimeField yearField = iChrono.weekyear().getField(iChrono);\n+                if (!yearField.isLeap(iDefaultYear)) {\n+                    continue; // ignore illegal weeks on year boundaries\n+                }\n+                if (field.getRangeDurationField().getType() == DurationFieldType.months()) {\n+                    saveField(DateTimeFieldType.monthOfYear(), 1);\n+                }\n+            } else {\n+                if (durationField.getType() == DurationFieldType.months()) {\n+                    DurationField first = durationField;\n+                    DateTimeFieldType type = DateTimeFieldType.monthOfYear();\n+                    if (!seenYearOrWeekyear) {\n+                        saveField(DateTimeFieldType.year(), iDefaultYear);\n+                        seenYearOrWeekyear = true;\n+                    }\n+                    if (compareReverse(first, iChrono.days()) >= 0) {\n+                        type = DateTimeFieldType.dayOfMonth();\n+                    }\n+                    saveField(type, 1);\n+                } else if (durationField.getType() == DurationFieldType.days()) {\n+                    if (!seenYearOrWeekyear) {\n+                        saveField(DateTimeFieldType.year(), iDefaultYear);\n+                    }\n+                    saveField(DateTimeFieldType.monthOfYear(), 1);\n+                }\n+            }\n+            if (field.getType() == DateTimeFieldType.year()) {\n+                if (!seenFirstField) {\n+                    seenYearOrWeekyear = true;\n+                }\n+            }\n+            if (field.getRangeDurationField().getType() == DurationFieldType.months() && field.getDurationField().isPrecise()) {\n+                fields.add(durationField);\n+            } else {\n+                seenFirstField = true;\n+            }\n+        }\n+        for (DurationField durationField : fields) {\n+            int value = (int) durationField.getField(getChronology()).getUnitMillis() / DateTimeConstants.MILLIS_PER_DAY;\n+            if (value > 0) {\n+                saveField(DateTimeFieldType.dayOfMonth(), 1);\n+                millis = set(millis, DateTimeFieldType.dayOfMonth(), value);\n+                millis = set(millis, DateTimeFieldType.monthOfYear(), 1);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}