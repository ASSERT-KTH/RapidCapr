{
    "patch": "// Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\nJSType typeOfThis = functionType.getTypeOfThis();\nif (typeOfThis != null && !functionType.isConstructor()) {\n    boolean isCallExpression = NodeUtil.isCallOrNew(n.getParent());\n    Node propOrElem = NodeUtil.getNearestNodeOfTypes(n.getParent(), Token.GETPROP, Token.GETELEM);\n    boolean isValidThisType = propOrElem != null && propOrElem.getFirstChild().isQualifiedName() && propOrElem.getFirstChild().getQualifiedName().equals(typeOfThis.toString());\n    if (!isValidThisType && !isCallExpression) {\n        report(t, n, EXPECTED_THIS_TYPE, typeOfThis.toString());\n        return;\n    }\n}\n\nvisitParameterList(t, n, functionType);\nensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..e1061570 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+// Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n+JSType typeOfThis = functionType.getTypeOfThis();\n+if (typeOfThis != null && !functionType.isConstructor()) {\n+    boolean isCallExpression = NodeUtil.isCallOrNew(n.getParent());\n+    Node propOrElem = NodeUtil.getNearestNodeOfTypes(n.getParent(), Token.GETPROP, Token.GETELEM);\n+    boolean isValidThisType = propOrElem != null && propOrElem.getFirstChild().isQualifiedName() && propOrElem.getFirstChild().getQualifiedName().equals(typeOfThis.toString());\n+    if (!isValidThisType && !isCallExpression) {\n+        report(t, n, EXPECTED_THIS_TYPE, typeOfThis.toString());\n+        return;\n+    }\n+}\n+\n+visitParameterList(t, n, functionType);\n+ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}