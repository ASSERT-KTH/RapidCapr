{
    "patch": "```\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    final double nSigma = dev / standardDeviation;\n\n    if (Double.isNaN(nSigma)) {\n        throw new MathException(\"Invalid input value: x = \" + x\n                                 + \", mean = \" + mean\n                                 + \", standardDeviation = \" + standardDeviation);\n    }\n\n    if (Double.isInfinite(nSigma)) {\n        return (nSigma < 0) ? 0.0 : 1.0;\n    }\n\n    if (nSigma > 40.0) {\n        return 1.0;\n    }\n\n    if (nSigma < -40.0) {\n        return 0.0;\n    }\n\n    try {\n        return 0.5 * (1.0 + Erf.erf(nSigma / FastMath.sqrt(2.0)));\n    } catch (MaxIterationsExceededException ex) {\n        if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n            return 0.0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1.0;\n        } else {\n            throw ex;\n        }\n    }\n}\n```\nThis fix first checks if the input value is NaN and throws an exception if so. It then checks if the value of nSigma is infinite and returns 0.0 or 1.0 accordingly. It then checks if nSigma is beyond a threshold of +/- 40.0 and returns 0.0 or 1.0 respectively. Finally, for values of nSigma within bounds, it computes the cumulative probability using the errof function and returns the result. If the max iterations of the errof function are exceeded, it then checks if the value of x is beyond a certain threshold and returns 0.0 or 1.0 accordingly.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..d3cc54109 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -121,21 +121,43 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @return CDF evaluated at {@code x}.\n      * @throws MathException if the algorithm fails to converge\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-        final double dev = x - mean;\n-        try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n-        } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n-            } else {\n-                throw ex;\n-            }\n+```\n+public double cumulativeProbability(double x) throws MathException {\n+    final double dev = x - mean;\n+    final double nSigma = dev / standardDeviation;\n+\n+    if (Double.isNaN(nSigma)) {\n+        throw new MathException(\"Invalid input value: x = \" + x\n+                                 + \", mean = \" + mean\n+                                 + \", standardDeviation = \" + standardDeviation);\n+    }\n+\n+    if (Double.isInfinite(nSigma)) {\n+        return (nSigma < 0) ? 0.0 : 1.0;\n+    }\n+\n+    if (nSigma > 40.0) {\n+        return 1.0;\n+    }\n+\n+    if (nSigma < -40.0) {\n+        return 0.0;\n+    }\n+\n+    try {\n+        return 0.5 * (1.0 + Erf.erf(nSigma / FastMath.sqrt(2.0)));\n+    } catch (MaxIterationsExceededException ex) {\n+        if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n+            return 0.0;\n+        } else if (x > (mean + 20 * standardDeviation)) {\n+            return 1.0;\n+        } else {\n+            throw ex;\n         }\n     }\n+}\n+```\n+This fix first checks if the input value is NaN and throws an exception if so. It then checks if the value of nSigma is infinite and returns 0.0 or 1.0 accordingly. It then checks if nSigma is beyond a threshold of +/- 40.0 and returns 0.0 or 1.0 respectively. Finally, for values of nSigma within bounds, it computes the cumulative probability using the errof function and returns the result. If the max iterations of the errof function are exceeded, it then checks if the value of x is beyond a certain threshold and returns 0.0 or 1.0 accordingly.\n \n     /**\n      * Return the absolute accuracy setting of the solver used to estimate",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}