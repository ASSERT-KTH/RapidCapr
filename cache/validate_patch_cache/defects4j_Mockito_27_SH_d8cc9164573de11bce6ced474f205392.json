{
    "patch": "Leaf invocationListener = TestUtil.Leafs.invocationListener();\n    PostInvocationSpyStrategy spi = Mockito.mock(PostInvocationSpyStrategy.class);\n    invocationListener.addSpyStrategy(spi);\n\n    TestUtil.resetInvocationListeners(mock);\n    TestUtil.reportInvocationListeners(mock);\n    MockHandler<T> oldMockHandler = getMockHandler(mock);\n\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    ((Factory) mock).setCallbacks(new Callback[] {newFilter});\n\n    try {\n        Field field = mock.getClass().getDeclaredField(INITIALIZE_FIELD);\n        field.setAccessible(true);\n        Object fieldObject = field.get(mock);\n        if (fieldObject instanceof MockAccess && !(fieldObject instanceof MockAccessWrapperImpl)) {\n            field.set(mock, new MockAccessWrapperImpl((MockAccess) fieldObject));\n        }\n        TestUtil.mockDelegate(mock, invocationListener);\n\n        TestUtil.reportInvocationListeners(mock, invocationListener);\n        TestUtil.reportInvocation(mock, invocationListener);\n        TestUtil.reportInvocationListeners(mock, invocationListener);\n\n        return (T) mock;\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..e18bb6ac6 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,38 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+Leaf invocationListener = TestUtil.Leafs.invocationListener();\n+    PostInvocationSpyStrategy spi = Mockito.mock(PostInvocationSpyStrategy.class);\n+    invocationListener.addSpyStrategy(spi);\n+\n+    TestUtil.resetInvocationListeners(mock);\n+    TestUtil.reportInvocationListeners(mock);\n+    MockHandler<T> oldMockHandler = getMockHandler(mock);\n+\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    ((Factory) mock).setCallbacks(new Callback[] {newFilter});\n+\n+    try {\n+        Field field = mock.getClass().getDeclaredField(INITIALIZE_FIELD);\n+        field.setAccessible(true);\n+        Object fieldObject = field.get(mock);\n+        if (fieldObject instanceof MockAccess && !(fieldObject instanceof MockAccessWrapperImpl)) {\n+            field.set(mock, new MockAccessWrapperImpl((MockAccess) fieldObject));\n+        }\n+        TestUtil.mockDelegate(mock, invocationListener);\n+\n+        TestUtil.reportInvocationListeners(mock, invocationListener);\n+        TestUtil.reportInvocation(mock, invocationListener);\n+        TestUtil.reportInvocationListeners(mock, invocationListener);\n+\n+        return (T) mock;\n+    } catch (Exception e) {\n+        throw new RuntimeException(e);\n+    }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}