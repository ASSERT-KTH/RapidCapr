{
    "patch": "public boolean canBeCalled() {\n    return isRegexpType();\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n        return getReferenceName();\n    } else if (prettyPrint) {\n        // Don't pretty print recursively.\n        prettyPrint = false;\n\n        // Use a tree map so that the properties are sorted.\n        Map<String, JSType> propertiesMap = Maps.newTreeMap();\n        addProperties(propertiesMap, this);\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n\n        int i = 0;\n        for (Map.Entry<String, JSType> entry : propertiesMap.entrySet()) {\n            if (i > 0) {\n                sb.append(\", \");\n            }\n\n            sb.append(entry.getKey());\n            sb.append(\": \");\n            sb.append(entry.getValue().toStringHelper(forAnnotations));\n\n            ++i;\n            if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n                sb.append(\", ...\");\n                break;\n            }\n        }\n\n        sb.append(\"}\");\n\n        prettyPrint = true;\n        return sb.toString();\n    } else {\n        return \"{...}\";\n    }\n}\n\nprivate static void addProperties(Map<String, JSType> propertiesMap, ObjectType objectType) {\n    for (String propertyName : objectType.getOwnPropertyNames()) {\n        JSType propertyType = objectType.getPropertyType(propertyName);\n        if (propertyType == null) {\n            // If property type is null then it means that this is a dynamic property\n            // and we do not know the type of the property.\n            continue;\n        }\n        propertiesMap.put(propertyName, propertyType);\n    }\n    ObjectType implicitPrototype = objectType.getImplicitPrototype();\n    if (implicitPrototype != null && !implicitPrototype.isNativeObjectType()) {\n        addProperties(propertiesMap, implicitPrototype);\n    }\n    ObjectType[] prototypes = objectType.getPrototypes();\n    if (prototypes != null) {\n        for (ObjectType prototype : prototypes) {\n            if (!prototype.isNativeObjectType() &&\n                    (explicitPrototypes || prototype.getSource() != null)) {\n                addProperties(propertiesMap, prototype);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..fe1f0178 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,75 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n+public boolean canBeCalled() {\n     return isRegexpType();\n-  }\n+}\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n     if (hasReferenceName()) {\n-      return getReferenceName();\n+        return getReferenceName();\n     } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n-\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n-\n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+        // Don't pretty print recursively.\n+        prettyPrint = false;\n+\n+        // Use a tree map so that the properties are sorted.\n+        Map<String, JSType> propertiesMap = Maps.newTreeMap();\n+        addProperties(propertiesMap, this);\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"{\");\n+\n+        int i = 0;\n+        for (Map.Entry<String, JSType> entry : propertiesMap.entrySet()) {\n+            if (i > 0) {\n+                sb.append(\", \");\n+            }\n+\n+            sb.append(entry.getKey());\n+            sb.append(\": \");\n+            sb.append(entry.getValue().toStringHelper(forAnnotations));\n+\n+            ++i;\n+            if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+                sb.append(\", ...\");\n+                break;\n+            }\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n-      }\n+        sb.append(\"}\");\n \n-      sb.append(\"}\");\n-\n-      prettyPrint = true;\n-      return sb.toString();\n+        prettyPrint = true;\n+        return sb.toString();\n     } else {\n-      return \"{...}\";\n+        return \"{...}\";\n     }\n-  }\n+}\n+\n+private static void addProperties(Map<String, JSType> propertiesMap, ObjectType objectType) {\n+    for (String propertyName : objectType.getOwnPropertyNames()) {\n+        JSType propertyType = objectType.getPropertyType(propertyName);\n+        if (propertyType == null) {\n+            // If property type is null then it means that this is a dynamic property\n+            // and we do not know the type of the property.\n+            continue;\n+        }\n+        propertiesMap.put(propertyName, propertyType);\n+    }\n+    ObjectType implicitPrototype = objectType.getImplicitPrototype();\n+    if (implicitPrototype != null && !implicitPrototype.isNativeObjectType()) {\n+        addProperties(propertiesMap, implicitPrototype);\n+    }\n+    ObjectType[] prototypes = objectType.getPrototypes();\n+    if (prototypes != null) {\n+        for (ObjectType prototype : prototypes) {\n+            if (!prototype.isNativeObjectType() &&\n+                    (explicitPrototypes || prototype.getSource() != null)) {\n+                addProperties(propertiesMap, prototype);\n+            }\n+        }\n+    }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}