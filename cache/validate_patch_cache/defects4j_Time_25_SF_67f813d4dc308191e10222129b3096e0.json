{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int offsetLocal = getOffset(instantLocal);\n        final long millisAtOffsetLocal = instantLocal + offsetLocal;\n        final int offsetAdjusted = getOffset(millisAtOffsetLocal);\n        return offsetLocal == offsetAdjusted ? offsetLocal :\n            invalidOffsetHandling(offsetLocal, offsetAdjusted);\n    }\n    \n    private int invalidOffsetHandling(int offsetLocal, int offsetAdjusted) {\n        final boolean dstAtStartOfDay = offsetLocal > offsetAdjusted;\n        long nextLocal = nextTransition(instantLocal + offsetLocal);\n        long nextAdjusted = nextTransition(instantLocal + offsetAdjusted);\n        if (nextLocal == nextAdjusted) {\n            // Duplicated transition.\n            // We need to compare offsets to determine the best course of action.\n            return dstAtStartOfDay ? offsetLocal : offsetAdjusted;\n        } else {\n            // Dst gap or overlap.\n            // We need to determine whether the time lies within the DST interval or outside of it.\n            final long millisAtGapStartLocal = previousTransition(nextAdjusted);\n            final long millisAtGapEndLocal = nextTransition(nextAdjusted);\n            if (dstAtStartOfDay) {\n                // We are in the DST interval.\n                long transitionMillis = nextTransition(millisAtGapEndLocal + offsetLocal);\n                if (instantLocal + offsetLocal < transitionMillis) {\n                    return offsetLocal;\n                } else {\n                    return offsetAdjusted;\n                }\n            } else {\n                // We are outside the DST interval.\n                long transitionMillis = previousTransition(millisAtGapStartLocal + offsetAdjusted);\n                if (instantLocal + offsetAdjusted >= transitionMillis) {\n                    return offsetAdjusted;\n                } else {\n                    return offsetLocal;\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d8f307a9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,27 +877,44 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n+        final long millisAtOffsetLocal = instantLocal + offsetLocal;\n+        final int offsetAdjusted = getOffset(millisAtOffsetLocal);\n+        return offsetLocal == offsetAdjusted ? offsetLocal :\n+            invalidOffsetHandling(offsetLocal, offsetAdjusted);\n+    }\n+    \n+    private int invalidOffsetHandling(int offsetLocal, int offsetAdjusted) {\n+        final boolean dstAtStartOfDay = offsetLocal > offsetAdjusted;\n+        long nextLocal = nextTransition(instantLocal + offsetLocal);\n+        long nextAdjusted = nextTransition(instantLocal + offsetAdjusted);\n+        if (nextLocal == nextAdjusted) {\n+            // Duplicated transition.\n+            // We need to compare offsets to determine the best course of action.\n+            return dstAtStartOfDay ? offsetLocal : offsetAdjusted;\n+        } else {\n+            // Dst gap or overlap.\n+            // We need to determine whether the time lies within the DST interval or outside of it.\n+            final long millisAtGapStartLocal = previousTransition(nextAdjusted);\n+            final long millisAtGapEndLocal = nextTransition(nextAdjusted);\n+            if (dstAtStartOfDay) {\n+                // We are in the DST interval.\n+                long transitionMillis = nextTransition(millisAtGapEndLocal + offsetLocal);\n+                if (instantLocal + offsetLocal < transitionMillis) {\n+                    return offsetLocal;\n+                } else {\n+                    return offsetAdjusted;\n+                }\n+            } else {\n+                // We are outside the DST interval.\n+                long transitionMillis = previousTransition(millisAtGapStartLocal + offsetAdjusted);\n+                if (instantLocal + offsetAdjusted >= transitionMillis) {\n+                    return offsetAdjusted;\n+                } else {\n                     return offsetLocal;\n                 }\n             }\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}