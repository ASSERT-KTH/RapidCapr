{
    "patch": "for (int i = 0; i < count; i++) {\n    try {\n        millis = savedFields[i].set(millis, resetFields);\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n        }\n        throw e;\n    }\n    if (i == 0) {\n        // check if the first field is a month and the value is -1\n        if (savedFields[i].iField.getType() == DateTimeFieldType.monthOfYear() && savedFields[i].iValue == -1) {\n            DateTimeField firstField = savedFields[i].iField;\n            if (firstField instanceof DelegatedDateTimeField) {\n                firstField = ((DelegatedDateTimeField) firstField).getWrappedField();\n            }\n            if (!((BasicMonthOfYearDateTimeField)firstField).getRange().isInRange(savedFields[i].iValue)) {\n                throw new IllegalArgumentException(\"The parsed date is before the supported date range\");\n            }\n        }\n    }\n    if (millis < iMillis) {\n        throw new IllegalArgumentException(\"The parsed date is before the supported date range\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..fb2591fc 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,31 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    try {\n+        millis = savedFields[i].set(millis, resetFields);\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+        }\n+        throw e;\n+    }\n+    if (i == 0) {\n+        // check if the first field is a month and the value is -1\n+        if (savedFields[i].iField.getType() == DateTimeFieldType.monthOfYear() && savedFields[i].iValue == -1) {\n+            DateTimeField firstField = savedFields[i].iField;\n+            if (firstField instanceof DelegatedDateTimeField) {\n+                firstField = ((DelegatedDateTimeField) firstField).getWrappedField();\n+            }\n+            if (!((BasicMonthOfYearDateTimeField)firstField).getRange().isInRange(savedFields[i].iValue)) {\n+                throw new IllegalArgumentException(\"The parsed date is before the supported date range\");\n+            }\n+        }\n+    }\n+    if (millis < iMillis) {\n+        throw new IllegalArgumentException(\"The parsed date is before the supported date range\");\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}