{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n  List<Node> successors = cfg.get(cfgNode);\n  for (Node successor : successors) {\n    List<AbstractInsnNode> instructions = methodNode.instructions.toArray();\n    int instrIndex = instructions.indexOf(successor.getGotoInsnNode());\n    for (int i = instrIndex - 1; i >= 0; i--) {\n      AbstractInsnNode instr = instructions.get(i);\n      if (instr instanceof TryCatchBlockNode) {\n        TryCatchBlockNode tryCatch = (TryCatchBlockNode) instr;\n        int start = instructions.indexOf(tryCatch.start);\n        int end = instructions.indexOf(tryCatch.end);\n        if (instrIndex >= start && instrIndex <= end) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..549f45da 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,25 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+  List<Node> successors = cfg.get(cfgNode);\n+  for (Node successor : successors) {\n+    List<AbstractInsnNode> instructions = methodNode.instructions.toArray();\n+    int instrIndex = instructions.indexOf(successor.getGotoInsnNode());\n+    for (int i = instrIndex - 1; i >= 0; i--) {\n+      AbstractInsnNode instr = instructions.get(i);\n+      if (instr instanceof TryCatchBlockNode) {\n+        TryCatchBlockNode tryCatch = (TryCatchBlockNode) instr;\n+        int start = instructions.indexOf(tryCatch.start);\n+        int end = instructions.indexOf(tryCatch.end);\n+        if (instrIndex >= start && instrIndex <= end) {\n+          return true;\n+        }\n+      }\n+    }\n+  }\n+  return false;\n+}\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}