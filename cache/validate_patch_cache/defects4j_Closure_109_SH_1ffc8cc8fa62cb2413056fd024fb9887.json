{
    "patch": "    switch (token.getType()) {\n      case NAME:\n        return parseTypeName(token);\n      case LBRACE:\n        return parseObjectTypeExpression(token);\n      case LPAREN:\n        return parseFunctionTypeExpression(token);\n      case UNION:\n      case BITOR:\n      case BITOR_ASSIGN:\n        next();\n        Node lhs = parseContextTypeExpression(token);\n        expect(token, JsDocToken.Type.BITOR);\n        Node rhs = parseContextTypeExpression(next());\n        return new Node(Token.BITOR, lhs, rhs);\n      case VARARGS:\n        next();\n        return createVarargsTypeExpression(token.getLineno());\n      default:\n        return null;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..410e220d 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,27 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+    switch (token.getType()) {\n+      case NAME:\n+        return parseTypeName(token);\n+      case LBRACE:\n+        return parseObjectTypeExpression(token);\n+      case LPAREN:\n+        return parseFunctionTypeExpression(token);\n+      case UNION:\n+      case BITOR:\n+      case BITOR_ASSIGN:\n+        next();\n+        Node lhs = parseContextTypeExpression(token);\n+        expect(token, JsDocToken.Type.BITOR);\n+        Node rhs = parseContextTypeExpression(next());\n+        return new Node(Token.BITOR, lhs, rhs);\n+      case VARARGS:\n+        next();\n+        return createVarargsTypeExpression(token.getLineno());\n+      default:\n+        return null;\n+    }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}