{
    "patch": "public static double getTypedPercent(JSONObject jsonObject) {\n    double count = 0.0;\n    double total = 0.0;\n    Iterator<?> keys = jsonObject.keys();\n\n    while (keys.hasNext()) {\n        String key = (String)keys.next();\n        try {\n            if (jsonObject.get(key) instanceof JSONObject) {\n                count += getTypedPercent((JSONObject)jsonObject.get(key));\n            } else if (jsonObject.get(key) instanceof JSONArray) {\n                JSONArray arr = jsonObject.getJSONArray(key);\n\n                for (int i = 0; i < arr.length(); i++) {\n                    count += getTypedPercent(arr.getJSONObject(i));\n                }\n            } else {\n                total += 1.0;\n                if (jsonObject.get(key) != null) {\n                    count += 1.0;\n                }\n            }\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n    }\n\n    return (count / total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..f583b5df 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,35 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject jsonObject) {\n+    double count = 0.0;\n+    double total = 0.0;\n+    Iterator<?> keys = jsonObject.keys();\n+\n+    while (keys.hasNext()) {\n+        String key = (String)keys.next();\n+        try {\n+            if (jsonObject.get(key) instanceof JSONObject) {\n+                count += getTypedPercent((JSONObject)jsonObject.get(key));\n+            } else if (jsonObject.get(key) instanceof JSONArray) {\n+                JSONArray arr = jsonObject.getJSONArray(key);\n+\n+                for (int i = 0; i < arr.length(); i++) {\n+                    count += getTypedPercent(arr.getJSONObject(i));\n+                }\n+            } else {\n+                total += 1.0;\n+                if (jsonObject.get(key) != null) {\n+                    count += 1.0;\n+                }\n+            }\n+        } catch (JSONException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    return (count / total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}