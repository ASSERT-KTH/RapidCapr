{
    "patch": "public class Percent {\n\n    public static double getTypedPercent(JsonObject js) {\n        int total = 0;\n        int typed = 0;\n\n        for (Map.Entry<String, JsonElement> entry : js.entrySet()) {\n            total++;\n            if (entry.getValue().isJsonObject()) {\n                typed++;\n            }\n        }\n        return ((double) typed / total) * 100;\n    }\n\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..090d13b1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public class Percent {\n+\n+    public static double getTypedPercent(JsonObject js) {\n+        int total = 0;\n+        int typed = 0;\n+\n+        for (Map.Entry<String, JsonElement> entry : js.entrySet()) {\n+            total++;\n+            if (entry.getValue().isJsonObject()) {\n+                typed++;\n+            }\n+        }\n+        return ((double) typed / total) * 100;\n+    }\n+\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}