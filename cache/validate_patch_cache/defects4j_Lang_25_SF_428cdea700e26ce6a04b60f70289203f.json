{
    "patch": "public static String escapeHtml(String input) {\n    if (input == null) {\n        return null;\n    }\n    StringBuilder stringBuilder = new StringBuilder();\n    int length = input.length();\n    for (int i = 0; i < length; i++) {\n        char ch = input.charAt(i);\n        switch (ch) {\n            case '&':\n                stringBuilder.append(\"&amp;\");\n                break;\n            case '<':\n                stringBuilder.append(\"&lt;\");\n                break;\n            case '>':\n                stringBuilder.append(\"&gt;\");\n                break;\n            case '\"':\n                stringBuilder.append(\"&quot;\");\n                break;\n            case '\\'':\n                stringBuilder.append(\"&#39;\");\n                break;\n            default:\n                if (ch < 32 || ch > 127) {\n                    stringBuilder.append(\"&#\");\n                    stringBuilder.append(Integer.toString(ch, 10));\n                    stringBuilder.append(';');\n                } else {\n                    stringBuilder.append(ch);\n                }\n        }\n    }\n    return stringBuilder.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..6610571b 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,42 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escapeHtml(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    StringBuilder stringBuilder = new StringBuilder();\n+    int length = input.length();\n+    for (int i = 0; i < length; i++) {\n+        char ch = input.charAt(i);\n+        switch (ch) {\n+            case '&':\n+                stringBuilder.append(\"&amp;\");\n+                break;\n+            case '<':\n+                stringBuilder.append(\"&lt;\");\n+                break;\n+            case '>':\n+                stringBuilder.append(\"&gt;\");\n+                break;\n+            case '\"':\n+                stringBuilder.append(\"&quot;\");\n+                break;\n+            case '\\'':\n+                stringBuilder.append(\"&#39;\");\n+                break;\n+            default:\n+                if (ch < 32 || ch > 127) {\n+                    stringBuilder.append(\"&#\");\n+                    stringBuilder.append(Integer.toString(ch, 10));\n+                    stringBuilder.append(';');\n+                } else {\n+                    stringBuilder.append(ch);\n+                }\n+        }\n+    }\n+    return stringBuilder.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}