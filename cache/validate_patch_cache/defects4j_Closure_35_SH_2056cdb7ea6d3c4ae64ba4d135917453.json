{
    "patch": "if (constraintObj != null && constraintObj.isRecordType()) {\n  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType != null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (objType.hasProperty(prop)) {\n          JSType intersectionType =\n              objType.getPropertyType(prop).getGreatestSubtype(propType);\n          if (!intersectionType.isBottom()) {\n            objType.defineInferredProperty(prop, intersectionType, null);\n          }\n        } else {\n          JSType typeToInfer =\n              getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..66b07716 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,23 +1118,29 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+if (constraintObj != null && constraintObj.isRecordType()) {\n+  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+  if (objType != null) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      if (!objType.isPropertyTypeDeclared(prop)) {\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        if (objType.hasProperty(prop)) {\n+          JSType intersectionType =\n+              objType.getPropertyType(prop).getGreatestSubtype(propType);\n+          if (!intersectionType.isBottom()) {\n+            objType.defineInferredProperty(prop, intersectionType, null);\n           }\n+        } else {\n+          JSType typeToInfer =\n+              getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+          objType.defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }\n   }\n+}\n+    }\n+  }\n \n   /**\n    * If we access a property of a symbol, then that symbol is not",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}