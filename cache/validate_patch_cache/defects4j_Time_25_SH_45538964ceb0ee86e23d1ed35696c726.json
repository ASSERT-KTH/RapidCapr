{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if (instantLocal <= 0 && offsetLocal > offsetAdjusted) {\n        return offsetAdjusted;\n    }\n    if (offsetAdjusted < 0 &&\n            (offsetLocal >= 0 || offsetAdjusted - offsetLocal < -1) &&\n            instantLocal > Long.MIN_VALUE + 86400000) {\n        long prev = previousTransition(instantAdjusted);\n        long prev2 = previousTransition(instantAdjusted - 604800000);\n        if (prev2 < Long.MIN_VALUE + 86400000 || (prev - prev2) <= 1209600000) {\n            return offsetLocal;\n        }\n    } else if (offsetLocal > 0 && offsetAdjusted <= 0 && instantLocal > Long.MIN_VALUE + 86400000) {\n        long next = nextTransition(instantAdjusted);\n        long next2 = nextTransition(instantAdjusted + 604800000);\n        if (next2 >= Long.MAX_VALUE - 86400000 || (next2 - next) <= 1209600000) {\n            return offsetLocal;\n        }\n    } else if (offsetLocal > offsetAdjusted) {\n        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n        long prevLocal = previousTransition(instantAdjusted);\n        if (prevLocal < prevAdjusted) {\n            return offsetLocal;\n        } else if (getOffset(prevLocal) == offsetLocal) {\n            return offsetLocal;\n        } else {\n            return offsetAdjusted;\n        }\n    } else {\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        long nextLocal = nextTransition(instantAdjusted);\n        if (nextLocal > nextAdjusted) {\n            return offsetLocal;\n        } else if (getOffset(nextAdjusted) == offsetAdjusted) {\n            return offsetAdjusted;\n        } else {\n            return offsetLocal;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d90e963c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,46 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if (instantLocal <= 0 && offsetLocal > offsetAdjusted) {\n+        return offsetAdjusted;\n+    }\n+    if (offsetAdjusted < 0 &&\n+            (offsetLocal >= 0 || offsetAdjusted - offsetLocal < -1) &&\n+            instantLocal > Long.MIN_VALUE + 86400000) {\n+        long prev = previousTransition(instantAdjusted);\n+        long prev2 = previousTransition(instantAdjusted - 604800000);\n+        if (prev2 < Long.MIN_VALUE + 86400000 || (prev - prev2) <= 1209600000) {\n+            return offsetLocal;\n+        }\n+    } else if (offsetLocal > 0 && offsetAdjusted <= 0 && instantLocal > Long.MIN_VALUE + 86400000) {\n+        long next = nextTransition(instantAdjusted);\n+        long next2 = nextTransition(instantAdjusted + 604800000);\n+        if (next2 >= Long.MAX_VALUE - 86400000 || (next2 - next) <= 1209600000) {\n+            return offsetLocal;\n+        }\n+    } else if (offsetLocal > offsetAdjusted) {\n+        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+        long prevLocal = previousTransition(instantAdjusted);\n+        if (prevLocal < prevAdjusted) {\n+            return offsetLocal;\n+        } else if (getOffset(prevLocal) == offsetLocal) {\n+            return offsetLocal;\n+        } else {\n+            return offsetAdjusted;\n+        }\n+    } else {\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        long nextLocal = nextTransition(instantAdjusted);\n+        if (nextLocal > nextAdjusted) {\n+            return offsetLocal;\n+        } else if (getOffset(nextAdjusted) == offsetAdjusted) {\n+            return offsetAdjusted;\n+        } else {\n+            return offsetLocal;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}