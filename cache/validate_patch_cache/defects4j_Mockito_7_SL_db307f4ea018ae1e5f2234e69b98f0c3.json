{
    "patch": "private void registerTypeVariablesOn(Type type) {\n    if (type instanceof Class) {\n        return;\n    } else if (type instanceof TypeVariable) {\n        TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n        GenericDeclaration genericDecl = typeVariable.getGenericDeclaration();\n        if (genericDecl instanceof Class) {\n            Class<?> declaringClass = (Class<?>) genericDecl;\n            TypeVariable<?>[] typeParams = declaringClass.getTypeParameters();\n            for (int i = 0; i < typeParams.length; i++) {\n                TypeVariable<?> tv = typeParams[i];\n                if (tv.getName().equals(typeVariable.getName())) {\n                    Type[] bounds = typeVariable.getBounds();\n                    if (bounds.length > 0) {\n                        registerTypeVariablesOn(bounds[0]);\n                    } else {\n                        Type actualTypeArgument = getActualTypeArgument(tv);\n                        if (actualTypeArgument != null) {\n                            registerTypeVariablesOn(actualTypeArgument);\n                        }\n                    }\n                    return;\n                }\n            }\n        }\n    } else if (type instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) type;\n        Class<?> rawType = (Class<?>) parameterizedType.getRawType();\n        Type[] args = parameterizedType.getActualTypeArguments();\n        for (Type arg : args) {\n            registerTypeVariablesOn(arg);\n        }\n        return;\n    } else if (type instanceof WildcardType) {\n        WildcardType wildcardType = (WildcardType) type;\n        for (Type bound : wildcardType.getUpperBounds()) {\n            registerTypeVariablesOn(bound);\n        }\n        return;\n    }\n    // TODO: handle other types such as array types, etc.\n}\n    \nprivate Type getActualTypeArgument(TypeVariable<?> tv) {\n    Type[] superInterfaces = tv.getGenericInterfaces();\n    Type superClass = tv.getGenericSuperclass();\n    if (superClass != null && superClass instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) superClass;\n        Type[] typeArgs = parameterizedType.getActualTypeArguments();\n        TypeVariable<?>[] typeParams = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n        for (int i = 0; i < typeParams.length; i++) {\n            if (typeParams[i].getName().equalsIgnoreCase(tv.getName())) {\n                if (typeArgs[i] instanceof TypeVariable) {\n                    Type actualTypeArg = getActualTypeArgument((TypeVariable<?>) typeArgs[i]);\n                    if (actualTypeArg != null) {\n                        return actualTypeArg;\n                    }\n                } else {\n                    return typeArgs[i];\n                }\n            }\n        }\n    } else {\n        for (Type si : superInterfaces) {\n            if (si instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) si;\n                Type[] typeArgs = parameterizedType.getActualTypeArguments();\n                TypeVariable<?>[] typeParams = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n                for (int i = 0; i < typeParams.length; i++) {\n                    if (typeParams[i].getName().equalsIgnoreCase(tv.getName())) {\n                        if (typeArgs[i] instanceof TypeVariable) {\n                            Type actualTypeArg = getActualTypeArgument((TypeVariable<?>) typeArgs[i]);\n                            if (actualTypeArg != null) {\n                                return actualTypeArg;\n                            }\n                        } else {\n                            return typeArgs[i];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..d81ad0450 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,96 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private void registerTypeVariablesOn(Type type) {\n+    if (type instanceof Class) {\n+        return;\n+    } else if (type instanceof TypeVariable) {\n+        TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n+        GenericDeclaration genericDecl = typeVariable.getGenericDeclaration();\n+        if (genericDecl instanceof Class) {\n+            Class<?> declaringClass = (Class<?>) genericDecl;\n+            TypeVariable<?>[] typeParams = declaringClass.getTypeParameters();\n+            for (int i = 0; i < typeParams.length; i++) {\n+                TypeVariable<?> tv = typeParams[i];\n+                if (tv.getName().equals(typeVariable.getName())) {\n+                    Type[] bounds = typeVariable.getBounds();\n+                    if (bounds.length > 0) {\n+                        registerTypeVariablesOn(bounds[0]);\n+                    } else {\n+                        Type actualTypeArgument = getActualTypeArgument(tv);\n+                        if (actualTypeArgument != null) {\n+                            registerTypeVariablesOn(actualTypeArgument);\n+                        }\n+                    }\n+                    return;\n+                }\n+            }\n+        }\n+    } else if (type instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) type;\n+        Class<?> rawType = (Class<?>) parameterizedType.getRawType();\n+        Type[] args = parameterizedType.getActualTypeArguments();\n+        for (Type arg : args) {\n+            registerTypeVariablesOn(arg);\n+        }\n+        return;\n+    } else if (type instanceof WildcardType) {\n+        WildcardType wildcardType = (WildcardType) type;\n+        for (Type bound : wildcardType.getUpperBounds()) {\n+            registerTypeVariablesOn(bound);\n+        }\n+        return;\n+    }\n+    // TODO: handle other types such as array types, etc.\n+}\n+    \n+private Type getActualTypeArgument(TypeVariable<?> tv) {\n+    Type[] superInterfaces = tv.getGenericInterfaces();\n+    Type superClass = tv.getGenericSuperclass();\n+    if (superClass != null && superClass instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) superClass;\n+        Type[] typeArgs = parameterizedType.getActualTypeArguments();\n+        TypeVariable<?>[] typeParams = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+        for (int i = 0; i < typeParams.length; i++) {\n+            if (typeParams[i].getName().equalsIgnoreCase(tv.getName())) {\n+                if (typeArgs[i] instanceof TypeVariable) {\n+                    Type actualTypeArg = getActualTypeArgument((TypeVariable<?>) typeArgs[i]);\n+                    if (actualTypeArg != null) {\n+                        return actualTypeArg;\n+                    }\n+                } else {\n+                    return typeArgs[i];\n+                }\n+            }\n+        }\n+    } else {\n+        for (Type si : superInterfaces) {\n+            if (si instanceof ParameterizedType) {\n+                ParameterizedType parameterizedType = (ParameterizedType) si;\n+                Type[] typeArgs = parameterizedType.getActualTypeArguments();\n+                TypeVariable<?>[] typeParams = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+                for (int i = 0; i < typeParams.length; i++) {\n+                    if (typeParams[i].getName().equalsIgnoreCase(tv.getName())) {\n+                        if (typeArgs[i] instanceof TypeVariable) {\n+                            Type actualTypeArg = getActualTypeArgument((TypeVariable<?>) typeArgs[i]);\n+                            if (actualTypeArg != null) {\n+                                return actualTypeArg;\n+                            }\n+                        } else {\n+                            return typeArgs[i];\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return null;\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}