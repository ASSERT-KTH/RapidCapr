{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class MyClass {\n  \n  public static double regularizedGamma(double a, double x) {\n    double ret = Gamma.regularizedGammaQ(a, x);\n    if (Double.isInfinite(ret)) {\n      if (ret > 0) {\n        ret = 1;\n      } else {\n        ret = 0;\n      }\n    }\n    return ret;\n  }\n\n  public static double[] regularizedGamma(double[] alpha, double[] x) {\n    if (alpha.length != x.length) {\n      throw new IllegalArgumentException(\"Input arrays must have same length\");\n    }\n    double[] ret = new double[alpha.length];\n    for (int i = 0; i < alpha.length; i++) {\n      ret[i] = regularizedGamma(alpha[i], x[i]);\n    }\n    return ret;\n  }\n\n  public static double poissonProb(int k, double lambda) {\n    if (lambda < 0) {\n      throw new IllegalArgumentException(\"lambda must be non-negative\");\n    }\n    if (k < 0) {\n      return 0;\n    }\n    if (k == 0) {\n      return FastMath.exp(-lambda);\n    }\n    return FastMath.pow(lambda, k) * FastMath.exp(-lambda) / FastMath.exp(Gamma.logGamma(k + 1));\n  }\n\n  public static double[] poissonProb(int[] k, double[] lambda) {\n    if (k.length != lambda.length) {\n      throw new IllegalArgumentException(\"Input arrays must have same length\");\n    }\n    double[] ret = new double[k.length];\n    for (int i = 0; i < k.length; i++) {\n      ret[i] = poissonProb(k[i], lambda[i]);\n    }\n    return ret;\n  }\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..e3e891059 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,59 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class MyClass {\n+  \n+  public static double regularizedGamma(double a, double x) {\n+    double ret = Gamma.regularizedGammaQ(a, x);\n+    if (Double.isInfinite(ret)) {\n+      if (ret > 0) {\n+        ret = 1;\n+      } else {\n+        ret = 0;\n+      }\n+    }\n+    return ret;\n+  }\n+\n+  public static double[] regularizedGamma(double[] alpha, double[] x) {\n+    if (alpha.length != x.length) {\n+      throw new IllegalArgumentException(\"Input arrays must have same length\");\n+    }\n+    double[] ret = new double[alpha.length];\n+    for (int i = 0; i < alpha.length; i++) {\n+      ret[i] = regularizedGamma(alpha[i], x[i]);\n+    }\n+    return ret;\n+  }\n+\n+  public static double poissonProb(int k, double lambda) {\n+    if (lambda < 0) {\n+      throw new IllegalArgumentException(\"lambda must be non-negative\");\n+    }\n+    if (k < 0) {\n+      return 0;\n+    }\n+    if (k == 0) {\n+      return FastMath.exp(-lambda);\n+    }\n+    return FastMath.pow(lambda, k) * FastMath.exp(-lambda) / FastMath.exp(Gamma.logGamma(k + 1));\n+  }\n+\n+  public static double[] poissonProb(int[] k, double[] lambda) {\n+    if (k.length != lambda.length) {\n+      throw new IllegalArgumentException(\"Input arrays must have same length\");\n+    }\n+    double[] ret = new double[k.length];\n+    for (int i = 0; i < k.length; i++) {\n+      ret[i] = poissonProb(k[i], lambda[i]);\n+    }\n+    return ret;\n+  }\n+\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}