{
    "patch": "public boolean canBeCalled() {\n    return !isRegexpType();\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n    Set<ObjectType> visited = new HashSet<>();\n    return toStringHelperHelper(visited, false);\n}\n\nprivate String toStringHelperHelper(Set<ObjectType> visited, boolean inRecursion) {\n    if (hasReferenceName()) {\n        return getReferenceName();\n    } else if (prettyPrint) {\n        // Don't pretty print recursively.\n        prettyPrint = false;\n\n        // Use a tree set so that the properties are sorted.\n        Set<String> propertyNames = Sets.newTreeSet();\n        for (ObjectType current = this;\n             current != null && !current.isNativeObjectType() &&\n                     propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n             current = current.getImplicitPrototype()) {\n            propertyNames.addAll(current.getOwnPropertyNames());\n        }\n\n        StringBuilder sb = new StringBuilder();\n        if (!inRecursion) {\n            // Starting a new object, so add opening bracket\n            sb.append(\"{\");\n        } else {\n            // Already in recursion, so add opening bracket and ellipses\n            sb.append(\"{..., \");\n        }\n\n        int i = 0;\n        for (String property : propertyNames) {\n            if (i > 0) {\n                sb.append(\", \");\n            }\n\n            sb.append(property);\n            sb.append(\": \");\n\n            Object propertyType = getPropertyType(property);\n            if (propertyType instanceof ObjectType) {\n                ObjectType objectType = (ObjectType) propertyType;\n                if (visited.contains(objectType)) {\n                    sb.append(\"{...}\");\n                } else {\n                    visited.add(objectType);\n                    sb.append(objectType.toStringHelperHelper(visited, true));\n                    visited.remove(objectType);\n                }\n            } else {\n                sb.append(propertyType.toString());\n            }\n\n            ++i;\n            if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n                sb.append(\", ...\");\n                break;\n            }\n        }\n\n        sb.append(\"}\");\n\n        prettyPrint = true;\n        return sb.toString();\n    } else {\n        return \"{...}\";\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..55d09b57 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,79 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+public boolean canBeCalled() {\n+    return !isRegexpType();\n+}\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n+    Set<ObjectType> visited = new HashSet<>();\n+    return toStringHelperHelper(visited, false);\n+}\n+\n+private String toStringHelperHelper(Set<ObjectType> visited, boolean inRecursion) {\n     if (hasReferenceName()) {\n-      return getReferenceName();\n+        return getReferenceName();\n     } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n-\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n-\n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+        // Don't pretty print recursively.\n+        prettyPrint = false;\n+\n+        // Use a tree set so that the properties are sorted.\n+        Set<String> propertyNames = Sets.newTreeSet();\n+        for (ObjectType current = this;\n+             current != null && !current.isNativeObjectType() &&\n+                     propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+             current = current.getImplicitPrototype()) {\n+            propertyNames.addAll(current.getOwnPropertyNames());\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        StringBuilder sb = new StringBuilder();\n+        if (!inRecursion) {\n+            // Starting a new object, so add opening bracket\n+            sb.append(\"{\");\n+        } else {\n+            // Already in recursion, so add opening bracket and ellipses\n+            sb.append(\"{..., \");\n+        }\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+        int i = 0;\n+        for (String property : propertyNames) {\n+            if (i > 0) {\n+                sb.append(\", \");\n+            }\n+\n+            sb.append(property);\n+            sb.append(\": \");\n+\n+            Object propertyType = getPropertyType(property);\n+            if (propertyType instanceof ObjectType) {\n+                ObjectType objectType = (ObjectType) propertyType;\n+                if (visited.contains(objectType)) {\n+                    sb.append(\"{...}\");\n+                } else {\n+                    visited.add(objectType);\n+                    sb.append(objectType.toStringHelperHelper(visited, true));\n+                    visited.remove(objectType);\n+                }\n+            } else {\n+                sb.append(propertyType.toString());\n+            }\n+\n+            ++i;\n+            if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+                sb.append(\", ...\");\n+                break;\n+            }\n         }\n-      }\n \n-      sb.append(\"}\");\n+        sb.append(\"}\");\n \n-      prettyPrint = true;\n-      return sb.toString();\n+        prettyPrint = true;\n+        return sb.toString();\n     } else {\n-      return \"{...}\";\n+        return \"{...}\";\n     }\n-  }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}