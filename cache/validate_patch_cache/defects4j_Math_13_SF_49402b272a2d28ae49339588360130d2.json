{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition eig = new EigenDecomposition(m);\n    RealMatrix eigValuesDiagMatrix = MatrixUtils.createRealDiagonalMatrix(eig.getRealEigenvalues());\n    RealMatrix sqrtEigValuesDiagMatrix = sqrtMatrix(eigValuesDiagMatrix);\n    return eig.getV().multiply(sqrtEigValuesDiagMatrix).multiply(eig.getV().transpose());\n}\n\nprivate RealMatrix sqrtMatrix(RealMatrix m) {\n    RealMatrix sqrtM = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n    for (int i = 0; i < m.getRowDimension(); i++) {\n        sqrtM.setEntry(i, i, Math.sqrt(m.getEntry(i, i)));\n    }\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d39c86474 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition eig = new EigenDecomposition(m);\n+    RealMatrix eigValuesDiagMatrix = MatrixUtils.createRealDiagonalMatrix(eig.getRealEigenvalues());\n+    RealMatrix sqrtEigValuesDiagMatrix = sqrtMatrix(eigValuesDiagMatrix);\n+    return eig.getV().multiply(sqrtEigValuesDiagMatrix).multiply(eig.getV().transpose());\n+}\n+\n+private RealMatrix sqrtMatrix(RealMatrix m) {\n+    RealMatrix sqrtM = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+    for (int i = 0; i < m.getRowDimension(); i++) {\n+        sqrtM.setEntry(i, i, Math.sqrt(m.getEntry(i, i)));\n     }\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}