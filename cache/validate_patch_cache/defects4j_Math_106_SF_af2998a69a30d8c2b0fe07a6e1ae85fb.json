{
    "patch": "public Fraction parse(String source, ParsePosition pos) {\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n    int initialIndex = pos.getIndex();\n    int startIndex = initialIndex;\n    boolean hasWhole = false;\n    boolean hasFraction = false;\n    boolean hasNumerator = false;\n    int whole = 0;\n    int numerator = 0;\n    int denominator = 1;\n    int sign = 1;\n\n    // Parse optional sign.\n    if (source.charAt(startIndex) == '-') {\n        startIndex++;\n        sign = -1;\n    } else if (source.charAt(startIndex) == '+') {\n        startIndex++;\n    }\n\n    // Parse the whole part.\n    while (startIndex < source.length() && Character.isDigit(source.charAt(startIndex))) {\n        hasWhole = true;\n        whole = whole * 10 + Character.digit(source.charAt(startIndex), 10);\n        startIndex++;\n    }\n\n    // Check if there is a fraction part.\n    if (startIndex < source.length() && source.charAt(startIndex) == '/') {\n        startIndex++;\n\n        // Parse the numerator part.\n        int prevIndex = startIndex;\n        while (startIndex < source.length() && Character.isDigit(source.charAt(startIndex))) {\n            hasNumerator = true;\n            numerator = numerator * 10 + Character.digit(source.charAt(startIndex), 10);\n            startIndex++;\n        }\n\n        // Check if we actually parsed a numerator part.\n        if (prevIndex != startIndex) {\n            hasFraction = true;\n            denominator = Integer.parseInt(source.substring(prevIndex, startIndex));\n        }\n    }\n\n    // Check that there is actually a fraction part.\n    if (!hasFraction && (hasWhole || hasNumerator)) {\n        return new Fraction(whole * sign, 1);\n    }\n\n    // Check that all parts of the number were parsed.\n    if (initialIndex + (hasWhole ? 1 : 0) + (hasNumerator ? 1 : 0) + (hasFraction ? 1 : 0) != startIndex) {\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n\n    return new Fraction(whole * denominator + numerator * sign, denominator);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\nindex df2713da8..1b6d5efe7 100644\n--- a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n+++ b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n@@ -127,83 +127,68 @@ public class ProperFractionFormat extends FractionFormat {\n      * @param pos input/ouput parsing parameter.\n      * @return the parsed {@link Fraction} object.\n      */\n-    public Fraction parse(String source, ParsePosition pos) {\n-        // try to parse improper fraction\n-        Fraction ret = super.parse(source, pos);\n-        if (ret != null) {\n-            return ret;\n-        }\n-        \n-        int initialIndex = pos.getIndex();\n-\n-        // parse whitespace\n-        parseAndIgnoreWhitespace(source, pos);\n-\n-        // parse whole\n-        Number whole = getWholeFormat().parse(source, pos);\n-        if (whole == null) {\n-            // invalid integer number\n-            // set index back to initial, error index should already be set\n-            // character examined.\n-            pos.setIndex(initialIndex);\n-            return null;\n-        }\n-\n-        // parse whitespace\n-        parseAndIgnoreWhitespace(source, pos);\n-        \n-        // parse numerator\n-        Number num = getNumeratorFormat().parse(source, pos);\n-        if (num == null) {\n-            // invalid integer number\n-            // set index back to initial, error index should already be set\n-            // character examined.\n-            pos.setIndex(initialIndex);\n-            return null;\n-        }\n-        \n-            // minus signs should be leading, invalid expression\n-\n-        // parse '/'\n-        int startIndex = pos.getIndex();\n-        char c = parseNextCharacter(source, pos);\n-        switch (c) {\n-        case 0 :\n-            // no '/'\n-            // return num as a fraction\n-            return new Fraction(num.intValue(), 1);\n-        case '/' :\n-            // found '/', continue parsing denominator\n-            break;\n-        default :\n-            // invalid '/'\n-            // set index back to initial, error index should be the last\n-            // character examined.\n-            pos.setIndex(initialIndex);\n-            pos.setErrorIndex(startIndex);\n-            return null;\n-        }\n-\n-        // parse whitespace\n-        parseAndIgnoreWhitespace(source, pos);\n-\n-        // parse denominator\n-        Number den = getDenominatorFormat().parse(source, pos);\n-        if (den == null) {\n-            // invalid integer number\n-            // set index back to initial, error index should already be set\n-            // character examined.\n-            pos.setIndex(initialIndex);\n-            return null;\n-        }\n-        \n-            // minus signs must be leading, invalid\n-\n-        int w = whole.intValue();\n-        int n = num.intValue();\n-        int d = den.intValue();\n-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n-    }\n+public Fraction parse(String source, ParsePosition pos) {\n+    Fraction ret = super.parse(source, pos);\n+    if (ret != null) {\n+        return ret;\n+    }\n+    int initialIndex = pos.getIndex();\n+    int startIndex = initialIndex;\n+    boolean hasWhole = false;\n+    boolean hasFraction = false;\n+    boolean hasNumerator = false;\n+    int whole = 0;\n+    int numerator = 0;\n+    int denominator = 1;\n+    int sign = 1;\n+\n+    // Parse optional sign.\n+    if (source.charAt(startIndex) == '-') {\n+        startIndex++;\n+        sign = -1;\n+    } else if (source.charAt(startIndex) == '+') {\n+        startIndex++;\n+    }\n+\n+    // Parse the whole part.\n+    while (startIndex < source.length() && Character.isDigit(source.charAt(startIndex))) {\n+        hasWhole = true;\n+        whole = whole * 10 + Character.digit(source.charAt(startIndex), 10);\n+        startIndex++;\n+    }\n+\n+    // Check if there is a fraction part.\n+    if (startIndex < source.length() && source.charAt(startIndex) == '/') {\n+        startIndex++;\n+\n+        // Parse the numerator part.\n+        int prevIndex = startIndex;\n+        while (startIndex < source.length() && Character.isDigit(source.charAt(startIndex))) {\n+            hasNumerator = true;\n+            numerator = numerator * 10 + Character.digit(source.charAt(startIndex), 10);\n+            startIndex++;\n+        }\n+\n+        // Check if we actually parsed a numerator part.\n+        if (prevIndex != startIndex) {\n+            hasFraction = true;\n+            denominator = Integer.parseInt(source.substring(prevIndex, startIndex));\n+        }\n+    }\n+\n+    // Check that there is actually a fraction part.\n+    if (!hasFraction && (hasWhole || hasNumerator)) {\n+        return new Fraction(whole * sign, 1);\n+    }\n+\n+    // Check that all parts of the number were parsed.\n+    if (initialIndex + (hasWhole ? 1 : 0) + (hasNumerator ? 1 : 0) + (hasFraction ? 1 : 0) != startIndex) {\n+        pos.setErrorIndex(startIndex);\n+        return null;\n+    }\n+\n+    return new Fraction(whole * denominator + numerator * sign, denominator);\n+}\n     \n     /**\n      * Modify the whole format.",
    "result_reason": "junit.framework.AssertionFailedError: Unparseable fraction number: \"1 2 / 3\"",
    "test_result": "FAIL"
}