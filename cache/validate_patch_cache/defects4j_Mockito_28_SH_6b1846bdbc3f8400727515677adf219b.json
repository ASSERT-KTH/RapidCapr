{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\nif(candidate != null) {\n    field.setAccessible(true);\n    try {\n        if (field.getType().isAssignableFrom(candidate.getClass())) {\n            field.set(fieldInstance, candidate);\n            return;\n        } else {\n            Object adaptedCandidate = Primitives.wrap(candidate.getClass()).cast(candidate);\n            field.set(fieldInstance, adaptedCandidate);\n            mocks.remove(adaptedCandidate);\n            return;\n        }\n    } catch(IllegalAccessException e) {\n        throw new RuntimeException(\"Unable to inject mock candidate\", e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..b397a95ac 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,26 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+if(candidate != null) {\n+    field.setAccessible(true);\n+    try {\n+        if (field.getType().isAssignableFrom(candidate.getClass())) {\n+            field.set(fieldInstance, candidate);\n+            return;\n+        } else {\n+            Object adaptedCandidate = Primitives.wrap(candidate.getClass()).cast(candidate);\n+            field.set(fieldInstance, adaptedCandidate);\n+            mocks.remove(adaptedCandidate);\n+            return;\n+        }\n+    } catch(IllegalAccessException e) {\n+        throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}