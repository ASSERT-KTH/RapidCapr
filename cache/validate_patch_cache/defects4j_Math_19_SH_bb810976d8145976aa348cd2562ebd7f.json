{
    "patch": "        if (hasInfiniteBounds) {\n            // If there is at least one finite bound, none can be infinite,\n            // because mixed cases are not supported by the current code.\n            throw new MathUnsupportedOperationException();\n        } else {\n            // Convert API to internal handling of boundaries.\n            boundaries = new double[2][];\n            boundaries[0] = lB;\n            boundaries[1] = uB;\n\n            if (Double.isFinite(Boundaries.normalize(boundaries, init))) {\n                // Abort early if the normalization will overflow (cf. \"encode\" method).\n                boundaries = null;\n                throw new NumberIsTooLargeException(Boundaries.normalize(boundaries, init), Double.POSITIVE_INFINITY, false);\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..b20244a53 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,22 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+        if (hasInfiniteBounds) {\n+            // If there is at least one finite bound, none can be infinite,\n+            // because mixed cases are not supported by the current code.\n+            throw new MathUnsupportedOperationException();\n+        } else {\n+            // Convert API to internal handling of boundaries.\n+            boundaries = new double[2][];\n+            boundaries[0] = lB;\n+            boundaries[1] = uB;\n+\n+            if (Double.isFinite(Boundaries.normalize(boundaries, init))) {\n+                // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                boundaries = null;\n+                throw new NumberIsTooLargeException(Boundaries.normalize(boundaries, init), Double.POSITIVE_INFINITY, false);\n+            }\n+        }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}