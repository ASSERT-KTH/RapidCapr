{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    Deque<PeriodFormatter> stack = new ArrayDeque<>();\n    for (Object element : elementPairs) {\n        if (element instanceof Separator) {\n            // Combine last formatter with the current separator\n            PeriodFormatter formatter = stack.pop();\n            Separator separator = (Separator) element;\n            PeriodPrinter printer = formatter.getPrinter();\n            PeriodParser parser = formatter.getParser();\n            stack.push(new PeriodFormatter(separator.finish(printer, parser), separator.finish(printer, parser)));\n        } else if (element instanceof Literal) {\n            // Do nothing, literals don't affect the formatter\n        } else {\n            // Add new formatter to the stack\n            Object[] comp = createComposite(Collections.singletonList(element));\n            stack.push(new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]));\n        }\n    }\n\n    PeriodFormatter result = stack.pop();\n    if (notPrinter) {\n        return new PeriodFormatter(null, result.getParser());\n    } else if (notParser) {\n        return new PeriodFormatter(result.getPrinter(), null);\n    } else {\n        return result;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..61c959e5 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,39 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    Deque<PeriodFormatter> stack = new ArrayDeque<>();\n+    for (Object element : elementPairs) {\n+        if (element instanceof Separator) {\n+            // Combine last formatter with the current separator\n+            PeriodFormatter formatter = stack.pop();\n+            Separator separator = (Separator) element;\n+            PeriodPrinter printer = formatter.getPrinter();\n+            PeriodParser parser = formatter.getParser();\n+            stack.push(new PeriodFormatter(separator.finish(printer, parser), separator.finish(printer, parser)));\n+        } else if (element instanceof Literal) {\n+            // Do nothing, literals don't affect the formatter\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            // Add new formatter to the stack\n+            Object[] comp = createComposite(Collections.singletonList(element));\n+            stack.push(new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]));\n         }\n     }\n \n+    PeriodFormatter result = stack.pop();\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, result.getParser());\n+    } else if (notParser) {\n+        return new PeriodFormatter(result.getPrinter(), null);\n+    } else {\n+        return result;\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}