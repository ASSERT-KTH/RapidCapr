{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (n.getParent().isLet() || n.getParent().isConst()) {\n      continue;\n    }\n    if (n.isName() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n      String name = n.getString();\n      Var aliasVar = scope.getVar(name);\n      String qualifiedName = \"\";\n      if (aliasVar == null) {\n        // The alias var is declared in the scope function.\n        if (v.isLocal()) {\n          Node scopeNode = scope.getRootNode();\n          // Make sure there is only one scope function.\n          if (isGoogScopeFunction(scopeNode)) {\n            Node scopeBody = scopeNode.getLastChild();\n            if (n.getParent().getParent().isParamList()\n                && n.getParent().getNext().isNull()) {\n              // Parameter of the scope function.\n              continue;\n            }\n            // Get the scope function parameter name.\n            Node paramList = scopeNode.getFirstChild().getNext();\n            String scopeFunctionParamName = paramList.getChildAtIndex(0).getString();\n            // Rewrite variable declaration as an assignment on the scope function parameter.\n            Node assign =\n                IR.assign(\n                    n.detach(),\n                    IR.getprop(IR.name(scopeFunctionParamName), IR.string(name)));\n            assign.srcref(n);\n            Node insertionPoint = scopeBody.getFirstChild();\n            if (insertionPoint != null) {\n              insertionPoint.getParent().addChildAfter(assign, insertionPoint);\n            } else {\n              scopeBody.addChildToFront(assign);\n            }\n            qualifiedName = name.isEmpty() ? \"\" : scopeFunctionParamName + \".\" + name;\n            continue;\n          }\n        }\n        // Not an alias var, so report it.      \n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      } else {\n        // The alias var is declared outside of the scope function.\n        aliases.put(name, aliasVar);\n        Node initialValue = aliasVar.getInitialValue();\n        if (initialValue != null) {\n          if (initialValue.isQualifiedName()) {\n            qualifiedName = initialValue.getQualifiedName();\n          } else if (isBleedingFunction(initialValue)) {\n            // Bleeding functions already get a BAD_PARAMETERS error, so just do nothing.\n          } else {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n          }\n        }\n      }\n      transformation.addAlias(name, qualifiedName);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..9637e31c 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,68 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (n.getParent().isLet() || n.getParent().isConst()) {\n+      continue;\n+    }\n+    if (n.isName() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+      String name = n.getString();\n+      Var aliasVar = scope.getVar(name);\n+      String qualifiedName = \"\";\n+      if (aliasVar == null) {\n+        // The alias var is declared in the scope function.\n+        if (v.isLocal()) {\n+          Node scopeNode = scope.getRootNode();\n+          // Make sure there is only one scope function.\n+          if (isGoogScopeFunction(scopeNode)) {\n+            Node scopeBody = scopeNode.getLastChild();\n+            if (n.getParent().getParent().isParamList()\n+                && n.getParent().getNext().isNull()) {\n+              // Parameter of the scope function.\n+              continue;\n+            }\n+            // Get the scope function parameter name.\n+            Node paramList = scopeNode.getFirstChild().getNext();\n+            String scopeFunctionParamName = paramList.getChildAtIndex(0).getString();\n+            // Rewrite variable declaration as an assignment on the scope function parameter.\n+            Node assign =\n+                IR.assign(\n+                    n.detach(),\n+                    IR.getprop(IR.name(scopeFunctionParamName), IR.string(name)));\n+            assign.srcref(n);\n+            Node insertionPoint = scopeBody.getFirstChild();\n+            if (insertionPoint != null) {\n+              insertionPoint.getParent().addChildAfter(assign, insertionPoint);\n+            } else {\n+              scopeBody.addChildToFront(assign);\n+            }\n+            qualifiedName = name.isEmpty() ? \"\" : scopeFunctionParamName + \".\" + name;\n+            continue;\n+          }\n         }\n+        // Not an alias var, so report it.      \n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+      } else {\n+        // The alias var is declared outside of the scope function.\n+        aliases.put(name, aliasVar);\n+        Node initialValue = aliasVar.getInitialValue();\n+        if (initialValue != null) {\n+          if (initialValue.isQualifiedName()) {\n+            qualifiedName = initialValue.getQualifiedName();\n+          } else if (isBleedingFunction(initialValue)) {\n+            // Bleeding functions already get a BAD_PARAMETERS error, so just do nothing.\n+          } else {\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+          }\n         }\n       }\n+      transformation.addAlias(name, qualifiedName);\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}