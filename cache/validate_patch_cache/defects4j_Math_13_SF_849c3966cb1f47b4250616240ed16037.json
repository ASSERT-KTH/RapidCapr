{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int maxMatrixSize = 30000; // maximum size of the matrix\n    final int matrixSize = m.getRowDimension() * m.getColumnDimension();\n\n    if (matrixSize > maxMatrixSize) {\n        System.out.println(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n        return null;\n    } else {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..3aeae8638 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int maxMatrixSize = 30000; // maximum size of the matrix\n+    final int matrixSize = m.getRowDimension() * m.getColumnDimension();\n+\n+    if (matrixSize > maxMatrixSize) {\n+        System.out.println(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n+        return null;\n+    } else {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n }\n+}",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}