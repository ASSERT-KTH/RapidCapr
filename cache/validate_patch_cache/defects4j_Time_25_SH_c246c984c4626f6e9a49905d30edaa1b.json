{
    "patch": "        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        } else {\n            long prevAdjusted = previousTransition(instantAdjusted);\n            if (prevAdjusted >= instantLocal - offsetLocal) {\n                // we went a bit too far, previousTransition is too much\n                prevAdjusted = previousTransition(instantAdjusted - 1);\n            }\n            if (prevAdjusted < instantLocal - offsetLocal - DateTimeConstants.MILLIS_PER_HOUR) {\n                // too far away, give up\n                return offsetLocal;\n            }\n            int newOffset = getOffset(prevAdjusted);\n            if (newOffset < offsetLocal) {\n                return offsetLocal;\n            }\n            return newOffset;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..63331c0d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        if ((offsetLocal - offsetAdjusted) < 0) {\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+            if (nextLocal != nextAdjusted) {\n+                return offsetLocal;\n+            }\n+        } else {\n+            long prevAdjusted = previousTransition(instantAdjusted);\n+            if (prevAdjusted >= instantLocal - offsetLocal) {\n+                // we went a bit too far, previousTransition is too much\n+                prevAdjusted = previousTransition(instantAdjusted - 1);\n+            }\n+            if (prevAdjusted < instantLocal - offsetLocal - DateTimeConstants.MILLIS_PER_HOUR) {\n+                // too far away, give up\n+                return offsetLocal;\n+            }\n+            int newOffset = getOffset(prevAdjusted);\n+            if (newOffset < offsetLocal) {\n+                return offsetLocal;\n+            }\n+            return newOffset;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}