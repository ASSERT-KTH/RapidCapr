{
    "patch": "    final Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    final Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      final List<Node> argsToRemove = Lists.newArrayList();\n      NodeTraversal.traverse(compiler, argList,\n          new AbstractPreOrderCallback() {\n            @Override\n            public boolean shouldTraverse(NodeTraversal t, Node n, Node p) {\n              return n != function;\n            }\n\n            @Override\n            public void visit(NodeTraversal t, Node n, Node p) {\n              String argName = n.getString();\n              if (argName == null || n.isRest()) {\n                return;\n              }\n              Var var = fnScope.getVar(argName);\n              if (var == null || !referenced.contains(var)) {\n                argsToRemove.add(n);\n              } else if (isRemovedParameter(t, var)) {\n                // If one of the params is marked by external inference\n                // to be removed, don't remove any up to that point.\n                argsToRemove.clear();\n              }\n            }\n          });\n\n      for (Node arg : argsToRemove) {\n        argList.removeChild(arg);\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0d194fe0 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,51 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    final Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    final Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      final List<Node> argsToRemove = Lists.newArrayList();\n+      NodeTraversal.traverse(compiler, argList,\n+          new AbstractPreOrderCallback() {\n+            @Override\n+            public boolean shouldTraverse(NodeTraversal t, Node n, Node p) {\n+              return n != function;\n+            }\n+\n+            @Override\n+            public void visit(NodeTraversal t, Node n, Node p) {\n+              String argName = n.getString();\n+              if (argName == null || n.isRest()) {\n+                return;\n+              }\n+              Var var = fnScope.getVar(argName);\n+              if (var == null || !referenced.contains(var)) {\n+                argsToRemove.add(n);\n+              } else if (isRemovedParameter(t, var)) {\n+                // If one of the params is marked by external inference\n+                // to be removed, don't remove any up to that point.\n+                argsToRemove.clear();\n+              }\n+            }\n+          });\n+\n+      for (Node arg : argsToRemove) {\n+        argList.removeChild(arg);\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}