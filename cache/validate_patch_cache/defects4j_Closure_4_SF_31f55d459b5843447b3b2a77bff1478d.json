{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = false;\n    // Resolve via properties first to trigger warnings for unknown names\n    resolveViaProperties(t, enclosing);\n    // Try to resolve via registry\n    resolved = resolveViaRegistry(t, enclosing);\n    // If detected implicit prototype cycle during registry resolution, handle it and return\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n        return this;\n    }\n    // Continue resolution and return the resolved type or this if not resolved\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n    // If not resolved, try resolving via properties again\n    if (!resolved) {\n        resolveViaProperties(t, enclosing);\n    }\n    // Continue resolution and return the resolved type or this if not resolved\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n    return this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..bd6e30c5 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,35 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    boolean resolved = false;\n+    // Resolve via properties first to trigger warnings for unknown names\n+    resolveViaProperties(t, enclosing);\n+    // Try to resolve via registry\n+    resolved = resolveViaRegistry(t, enclosing);\n+    // If detected implicit prototype cycle during registry resolution, handle it and return\n     if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+        handleTypeCycle(t);\n+        return this;\n     }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    // Continue resolution and return the resolved type or this if not resolved\n+    super.resolveInternal(t, enclosing);\n+    if (isResolved()) {\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    // If not resolved, try resolving via properties again\n+    if (!resolved) {\n+        resolveViaProperties(t, enclosing);\n     }\n-\n+    // Continue resolution and return the resolved type or this if not resolved\n     super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n-      finishPropertyContinuations();\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    return this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_TYPE_PARSE_ERROR. Bad type annotation. Unknown type g.Late at testcode line 2 : 10 expected:<0> but was:<1>",
    "test_result": "FAIL"
}