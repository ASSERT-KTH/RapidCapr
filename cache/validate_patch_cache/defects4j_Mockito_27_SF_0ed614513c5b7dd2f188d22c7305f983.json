{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n    if (mock instanceof Factory) {\n        Callback[] existingCallbacks = ((Factory) mock).getCallbacks();\n        if (existingCallbacks != null) {\n            boolean methodInterceptorReplaced = false;\n            for (int i = 0; i < existingCallbacks.length; i++) {\n                if (existingCallbacks[i] instanceof MethodInterceptorFilter) {\n                    existingCallbacks[i] = newFilter;\n                    methodInterceptorReplaced = true;\n                    break;\n                }\n            }\n            if (methodInterceptorReplaced) {\n                ((Factory) mock).setCallbacks(existingCallbacks);\n            } else {\n                Callback[] newCallbacks = new Callback[existingCallbacks.length + 1];\n                System.arraycopy(existingCallbacks, 0, newCallbacks, 0, existingCallbacks.length);\n                newCallbacks[existingCallbacks.length] = newFilter;\n                ((Factory) mock).setCallbacks(newCallbacks);\n            }\n        } else {\n            ((Factory) mock).setCallback(0, newFilter);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..15b86af25 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,36 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n+    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+    if (mock instanceof Factory) {\n+        Callback[] existingCallbacks = ((Factory) mock).getCallbacks();\n+        if (existingCallbacks != null) {\n+            boolean methodInterceptorReplaced = false;\n+            for (int i = 0; i < existingCallbacks.length; i++) {\n+                if (existingCallbacks[i] instanceof MethodInterceptorFilter) {\n+                    existingCallbacks[i] = newFilter;\n+                    methodInterceptorReplaced = true;\n+                    break;\n+                }\n+            }\n+            if (methodInterceptorReplaced) {\n+                ((Factory) mock).setCallbacks(existingCallbacks);\n+            } else {\n+                Callback[] newCallbacks = new Callback[existingCallbacks.length + 1];\n+                System.arraycopy(existingCallbacks, 0, newCallbacks, 0, existingCallbacks.length);\n+                newCallbacks[existingCallbacks.length] = newFilter;\n+                ((Factory) mock).setCallbacks(newCallbacks);\n+            }\n+        } else {\n+            ((Factory) mock).setCallback(0, newFilter);\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}