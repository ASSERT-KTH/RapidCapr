{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    \n    PeriodFormatter formatter;\n    List<PeriodFormatterBuilder> builders = new ArrayList<>();\n    Separator currentSeparator = null;\n    \n    for (Object pair : elementPairs) {\n        if (pair instanceof Separator) {\n            currentSeparator = (Separator) pair;\n        } else {\n            PeriodFormatterBuilder builder = new PeriodFormatterBuilder();\n            \n            if (currentSeparator != null) {\n                builder.appendSeparator(currentSeparator.getText());\n                currentSeparator = null;\n            }\n            \n            builder.append((PeriodPrinter) ((Object[])pair)[0], (PeriodParser) ((Object[])pair)[1]);\n            builders.add(builder);\n        }\n    }\n    \n    PeriodFormatterBuilder compositeBuilder = new PeriodFormatterBuilder();\n    for (PeriodFormatterBuilder builder : builders) {\n        compositeBuilder.append(builder.toFormatter());\n    }\n    \n    if (notPrinter) {\n        formatter = new PeriodFormatter(null,compositeBuilder.toParser());\n    } else if (notParser) {\n        formatter = new PeriodFormatter(compositeBuilder.toPrinter(),null);\n    } else {\n        formatter = compositeBuilder.toFormatter();\n    }\n    \n    return formatter;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..6c60df92 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,46 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    \n+    PeriodFormatter formatter;\n+    List<PeriodFormatterBuilder> builders = new ArrayList<>();\n+    Separator currentSeparator = null;\n+    \n+    for (Object pair : elementPairs) {\n+        if (pair instanceof Separator) {\n+            currentSeparator = (Separator) pair;\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            PeriodFormatterBuilder builder = new PeriodFormatterBuilder();\n+            \n+            if (currentSeparator != null) {\n+                builder.appendSeparator(currentSeparator.getText());\n+                currentSeparator = null;\n+            }\n+            \n+            builder.append((PeriodPrinter) ((Object[])pair)[0], (PeriodParser) ((Object[])pair)[1]);\n+            builders.add(builder);\n         }\n     }\n+    \n+    PeriodFormatterBuilder compositeBuilder = new PeriodFormatterBuilder();\n+    for (PeriodFormatterBuilder builder : builders) {\n+        compositeBuilder.append(builder.toFormatter());\n+    }\n+    \n+    if (notPrinter) {\n+        formatter = new PeriodFormatter(null,compositeBuilder.toParser());\n+    } else if (notParser) {\n+        formatter = new PeriodFormatter(compositeBuilder.toPrinter(),null);\n+    } else {\n+        formatter = compositeBuilder.toFormatter();\n+    }\n+    \n+    return formatter;\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}