{
    "patch": "  private String getRemainingJSDocLine() {\n    String result = null;\n    try {\n        while (stream.peekChar() == '*') {\n            stream.getJsDocToken();\n        }\n        result = stream.getRemainingJSDocLine().trim();\n        if (result.isEmpty()) {\n            result = null;\n        }\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n    return result;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..c2205f0b 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,21 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+  private String getRemainingJSDocLine() {\n+    String result = null;\n+    try {\n+        while (stream.peekChar() == '*') {\n+            stream.getJsDocToken();\n+        }\n+        result = stream.getRemainingJSDocLine().trim();\n+        if (result.isEmpty()) {\n+            result = null;\n+        }\n+    } catch (IOException e) {\n+        throw new RuntimeException(e);\n+    }\n+    return result;\n+  }\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}