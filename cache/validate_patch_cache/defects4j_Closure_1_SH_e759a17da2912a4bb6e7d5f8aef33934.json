{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    // Skip functions with rest parameters as we don't know if they are used\n    // or not. e.g. function f(a, ...rest) { ...rest map ... }\n    boolean hasRestParam = argList.hasChildren()\n        && argList.getLastChild().isRest();\n    if (hasRestParam) {\n      return;\n    }\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    Node lastArg = argList.getLastChild();\n    while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n      // This is currently the only way a function should appear if there\n      // isn't at least one parameter.\n      Preconditions.checkState(lastArg.isName());\n\n      if ((lastArg = lastArg.getPrevious()) != null) {\n        argList.removeChild(lastArg.getNext());\n        compiler.reportCodeChange();\n      } else {\n        // All parameters are unused.\n        Node newBody = IR.block();\n        Node emptyName = Node.newString(Token.NAME, \"\");\n        emptyName.makeNonIndexable();\n        newBody.addChildToFront(emptyName);\n        function.getLastChild().replaceWith(newBody);\n        compiler.reportCodeChange();\n        break;\n      }\n    }\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d6b3f7d4 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,50 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    // Skip functions with rest parameters as we don't know if they are used\n+    // or not. e.g. function f(a, ...rest) { ...rest map ... }\n+    boolean hasRestParam = argList.hasChildren()\n+        && argList.getLastChild().isRest();\n+    if (hasRestParam) {\n+      return;\n+    }\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    Node lastArg = argList.getLastChild();\n+    while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+      // This is currently the only way a function should appear if there\n+      // isn't at least one parameter.\n+      Preconditions.checkState(lastArg.isName());\n+\n+      if ((lastArg = lastArg.getPrevious()) != null) {\n+        argList.removeChild(lastArg.getNext());\n+        compiler.reportCodeChange();\n+      } else {\n+        // All parameters are unused.\n+        Node newBody = IR.block();\n+        Node emptyName = Node.newString(Token.NAME, \"\");\n+        emptyName.makeNonIndexable();\n+        newBody.addChildToFront(emptyName);\n+        function.getLastChild().replaceWith(newBody);\n+        compiler.reportCodeChange();\n+        break;\n+      }\n+    }\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}