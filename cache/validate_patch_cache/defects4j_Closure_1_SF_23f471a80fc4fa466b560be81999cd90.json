{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction(), function);\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      boolean removedParams = false;\n      while ((lastArg = argList.getLastChild()) != null && lastArg.isParamList()) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          removedParams = true;\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n      if (removedParams) {\n        // Add a USELESS parameter to the function so people know the\n        // parameter is intentionally unused.\n        argList.addChildToBack(IR.name(USELESS_NAME).setJSType(lastArg.getJSType()));\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..49706e70 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,7 +366,7 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     // Notice that removing unreferenced function args breaks\n     // Function.prototype.length. In advanced mode, we don't really care\n     // about this: we consider \"length\" the equivalent of reflecting on\n@@ -376,34 +376,35 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n     Node function = fnScope.getRootNode();\n \n-    Preconditions.checkState(function.isFunction());\n+    Preconditions.checkState(function.isFunction(), function);\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n       // The parameters object literal setters can not be removed.\n       return;\n     }\n \n     Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n       // Strip unreferenced args off the end of the function declaration.\n       Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n+      boolean removedParams = false;\n+      while ((lastArg = argList.getLastChild()) != null && lastArg.isParamList()) {\n         Var var = fnScope.getVar(lastArg.getString());\n         if (!referenced.contains(var)) {\n           argList.removeChild(lastArg);\n+          removedParams = true;\n           compiler.reportCodeChange();\n         } else {\n           break;\n         }\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n-    }\n-  }\n+      if (removedParams) {\n+        // Add a USELESS parameter to the function so people know the\n+        // parameter is intentionally unused.\n+        argList.addChildToBack(IR.name(USELESS_NAME).setJSType(lastArg.getJSType()));\n+        compiler.reportCodeChange();\n \n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}