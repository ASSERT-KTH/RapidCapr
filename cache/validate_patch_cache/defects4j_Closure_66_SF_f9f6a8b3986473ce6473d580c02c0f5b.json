{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    double ratio = 0.0;\n    int count = 0;\n\n    try {\n        JSONObject jsonObj = new JSONObject(jsonStr);\n        Iterator<String> keys = jsonObj.keys();\n        while (keys.hasNext()) {\n            String key = keys.next();\n            if (jsonObj.get(key) instanceof Number) {\n                count++;\n                ratio += jsonObj.getDouble(key);\n            }\n        }\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n\n    return count == 0 ? 0.0 : ratio / count * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..92ba02e1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    double ratio = 0.0;\n+    int count = 0;\n+\n+    try {\n+        JSONObject jsonObj = new JSONObject(jsonStr);\n+        Iterator<String> keys = jsonObj.keys();\n+        while (keys.hasNext()) {\n+            String key = keys.next();\n+            if (jsonObj.get(key) instanceof Number) {\n+                count++;\n+                ratio += jsonObj.getDouble(key);\n+            }\n+        }\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+\n+    return count == 0 ? 0.0 : ratio / count * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}