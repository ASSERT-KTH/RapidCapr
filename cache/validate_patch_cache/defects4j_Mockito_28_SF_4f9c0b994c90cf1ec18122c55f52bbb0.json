{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    Field[] fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n    Set<Object> injectedMocks = new HashSet<>();\n    for (Field field : fields) {\n        Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        if (mockCandidate != null) {\n            Class<?> fieldType = field.getType();\n            Object bestMatchingMock = null;\n            int bestMatchingScore = -1;\n            for (Object mock : mocks) {\n                if (!injectedMocks.contains(mock) && fieldType.isAssignableFrom(mock.getClass())) {\n                    int matchingScore = calculateMatchingScore(mock, field);\n                    if (matchingScore > bestMatchingScore) {\n                        bestMatchingScore = matchingScore;\n                        bestMatchingMock = mock;\n                    }\n                }\n            }\n            if (bestMatchingMock != null) {\n                try {\n                    field.setAccessible(true);\n                    field.set(fieldInstance, bestMatchingMock);\n                    injectedMocks.add(bestMatchingMock);\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..4bb6e0b27 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,37 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    Field[] fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n+    Set<Object> injectedMocks = new HashSet<>();\n+    for (Field field : fields) {\n+        Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+        if (mockCandidate != null) {\n+            Class<?> fieldType = field.getType();\n+            Object bestMatchingMock = null;\n+            int bestMatchingScore = -1;\n+            for (Object mock : mocks) {\n+                if (!injectedMocks.contains(mock) && fieldType.isAssignableFrom(mock.getClass())) {\n+                    int matchingScore = calculateMatchingScore(mock, field);\n+                    if (matchingScore > bestMatchingScore) {\n+                        bestMatchingScore = matchingScore;\n+                        bestMatchingMock = mock;\n+                    }\n+                }\n+            }\n+            if (bestMatchingMock != null) {\n+                try {\n+                    field.setAccessible(true);\n+                    field.set(fieldInstance, bestMatchingMock);\n+                    injectedMocks.add(bestMatchingMock);\n+                } catch (IllegalAccessException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        }\n+    }\n+}\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}