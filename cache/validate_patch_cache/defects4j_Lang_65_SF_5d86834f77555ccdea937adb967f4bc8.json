{
    "patch": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    boolean truncateTime = false;\n    switch (field) {\n        case Calendar.MILLISECOND:\n        case Calendar.SECOND:\n        case Calendar.MINUTE:\n            val.set(Calendar.SECOND, 0);\n            //fall through to recompute milliseconds\n        case Calendar.MILLISECOND:\n            val.set(Calendar.MILLISECOND, 0);\n            break;\n\n        case Calendar.HOUR_OF_DAY:\n        case Calendar.HOUR:\n        case Calendar.AM_PM:\n            truncateTime = true;\n            val.set(Calendar.HOUR_OF_DAY, 0);\n            val.set(Calendar.MINUTE, 0);\n            val.set(Calendar.SECOND, 0);\n            val.set(Calendar.MILLISECOND, 0);\n            break;\n\n        case Calendar.DATE:\n        case Calendar.DAY_OF_MONTH:\n            truncateTime = true;\n            val.set(Calendar.DATE, 1); //truncate to first day\n            //fall through to a YEAR truncate, but take care to round milliseconds since \n            //changing fields may cause the time to go backwards\n            val.set(Calendar.HOUR_OF_DAY, 0);\n            val.set(Calendar.MINUTE, 0);\n            val.set(Calendar.SECOND, 0);\n            val.set(Calendar.MILLISECOND, 0);\n        case Calendar.MONTH:\n        case Calendar.DAY_OF_YEAR:\n            truncateTime = true;\n            val.set(Calendar.MONTH, 0); //truncate to January\n            //fall through to a YEAR truncate, but take care to round milliseconds since \n            //changing fields may cause the time to go backwards\n            val.set(Calendar.HOUR_OF_DAY, 0);\n            val.set(Calendar.MINUTE, 0);\n            val.set(Calendar.SECOND, 0);\n            val.set(Calendar.MILLISECOND, 0);\n        case Calendar.YEAR:\n            truncateTime = true;\n            val.set(Calendar.MONTH, 0);\n            val.set(Calendar.DATE, 1);\n            //fall through to round milliseconds\n        case Calendar.ERA:\n            val.set(Calendar.HOUR_OF_DAY, 0);\n            val.set(Calendar.MINUTE, 0);\n            val.set(Calendar.SECOND, 0);\n            val.set(Calendar.MILLISECOND, (round && val.get(Calendar.MILLISECOND) >= 500) ? 0: 0);\n            break;\n    }\n\n    // round-up, if necessary. Can only do this if we are not part-way through\n    // a larger unit (eg truncating hour and above disqualifies us from\n    // truncating minutes for rounding purposes)\n    if (round && !truncateTime) {\n        if (field == Calendar.MILLISECOND ||\n                val.get(Calendar.MILLISECOND) >= 500) {\n            val.set(Calendar.MILLISECOND, 0);\n            val.add(Calendar.SECOND, 1);\n        }\n        if (field == Calendar.SECOND ||\n                val.get(Calendar.SECOND) > 30) { // add 30 seconds, to handle mid-tick rounding\n            val.set(Calendar.SECOND, 0);\n            val.add(Calendar.MINUTE, 1);\n        }\n        if (field == Calendar.MINUTE ||\n                val.get(Calendar.MINUTE) > 30) {\n            val.set(Calendar.MINUTE, 0);\n            val.add(Calendar.HOUR_OF_DAY, 1);\n        }\n        if (field == Calendar.HOUR_OF_DAY ||\n                field == Calendar.HOUR ||\n                val.get(Calendar.HOUR_OF_DAY) > 12) {\n            val.set(Calendar.HOUR_OF_DAY, 0);\n            val.add(Calendar.DATE, 1);\n        }\n        if (field == Calendar.DATE ||\n                val.get(Calendar.DAY_OF_MONTH) > 15) {\n            val.set(Calendar.DATE, 1);\n            val.add(Calendar.MONTH, 1);\n        }\n        if (field == Calendar.MONTH ||\n                val.get(Calendar.MONTH) > Calendar.JUNE) {\n            // don't round-up year if we are only one day into the year\n            if (val.get(Calendar.DATE) > 1 || field != Calendar.MONTH) {\n                val.set(Calendar.MONTH, Calendar.JANUARY);\n                val.add(Calendar.YEAR, 1);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex 531e73fc..0de9c100 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -616,101 +616,105 @@ public class DateUtils {\n      * @param round  true to round, false to truncate\n      * @throws ArithmeticException if the year is over 280 million\n      */\n-    private static void modify(Calendar val, int field, boolean round) {\n-        if (val.get(Calendar.YEAR) > 280000000) {\n-            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n-        }\n-        \n+private static void modify(Calendar val, int field, boolean round) {\n+    if (val.get(Calendar.YEAR) > 280000000) {\n+        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n+    }\n \n-        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n-        // see http://issues.apache.org/jira/browse/LANG-59\n-        //\n-        // Manually truncate milliseconds, seconds and minutes, rather than using\n-        // Calendar methods.\n-\n-\n-        // truncate milliseconds\n-\n-        // truncate seconds\n-\n-        // truncate minutes\n-\n-        // reset time\n-        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n-\n-        boolean roundUp = false;\n-        for (int i = 0; i < fields.length; i++) {\n-            for (int j = 0; j < fields[i].length; j++) {\n-                if (fields[i][j] == field) {\n-                    //This is our field... we stop looping\n-                    if (round && roundUp) {\n-                        if (field == DateUtils.SEMI_MONTH) {\n-                            //This is a special case that's hard to generalize\n-                            //If the date is 1, we round up to 16, otherwise\n-                            //  we subtract 15 days and add 1 month\n-                            if (val.get(Calendar.DATE) == 1) {\n-                                val.add(Calendar.DATE, 15);\n-                            } else {\n-                                val.add(Calendar.DATE, -15);\n-                                val.add(Calendar.MONTH, 1);\n-                            }\n-                        } else {\n-                            //We need at add one to this field since the\n-                            //  last number causes us to round up\n-                            val.add(fields[i][0], 1);\n-                        }\n-                    }\n-                    return;\n-                }\n-            }\n-            //We have various fields that are not easy roundings\n-            int offset = 0;\n-            boolean offsetSet = false;\n-            //These are special types of fields that require different rounding rules\n-            switch (field) {\n-                case DateUtils.SEMI_MONTH:\n-                    if (fields[i][0] == Calendar.DATE) {\n-                        //If we're going to drop the DATE field's value,\n-                        //  we want to do this our own way.\n-                        //We need to subtrace 1 since the date has a minimum of 1\n-                        offset = val.get(Calendar.DATE) - 1;\n-                        //If we're above 15 days adjustment, that means we're in the\n-                        //  bottom half of the month and should stay accordingly.\n-                        if (offset >= 15) {\n-                            offset -= 15;\n-                        }\n-                        //Record whether we're in the top or bottom half of that range\n-                        roundUp = offset > 7;\n-                        offsetSet = true;\n-                    }\n-                    break;\n-                case Calendar.AM_PM:\n-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n-                        //If we're going to drop the HOUR field's value,\n-                        //  we want to do this our own way.\n-                        offset = val.get(Calendar.HOUR_OF_DAY);\n-                        if (offset >= 12) {\n-                            offset -= 12;\n-                        }\n-                        roundUp = offset > 6;\n-                        offsetSet = true;\n-                    }\n-                    break;\n-            }\n-            if (!offsetSet) {\n-                int min = val.getActualMinimum(fields[i][0]);\n-                int max = val.getActualMaximum(fields[i][0]);\n-                //Calculate the offset from the minimum allowed value\n-                offset = val.get(fields[i][0]) - min;\n-                //Set roundUp if this is more than half way between the minimum and maximum\n-                roundUp = offset > ((max - min) / 2);\n+    boolean truncateTime = false;\n+    switch (field) {\n+        case Calendar.MILLISECOND:\n+        case Calendar.SECOND:\n+        case Calendar.MINUTE:\n+            val.set(Calendar.SECOND, 0);\n+            //fall through to recompute milliseconds\n+        case Calendar.MILLISECOND:\n+            val.set(Calendar.MILLISECOND, 0);\n+            break;\n+\n+        case Calendar.HOUR_OF_DAY:\n+        case Calendar.HOUR:\n+        case Calendar.AM_PM:\n+            truncateTime = true;\n+            val.set(Calendar.HOUR_OF_DAY, 0);\n+            val.set(Calendar.MINUTE, 0);\n+            val.set(Calendar.SECOND, 0);\n+            val.set(Calendar.MILLISECOND, 0);\n+            break;\n+\n+        case Calendar.DATE:\n+        case Calendar.DAY_OF_MONTH:\n+            truncateTime = true;\n+            val.set(Calendar.DATE, 1); //truncate to first day\n+            //fall through to a YEAR truncate, but take care to round milliseconds since \n+            //changing fields may cause the time to go backwards\n+            val.set(Calendar.HOUR_OF_DAY, 0);\n+            val.set(Calendar.MINUTE, 0);\n+            val.set(Calendar.SECOND, 0);\n+            val.set(Calendar.MILLISECOND, 0);\n+        case Calendar.MONTH:\n+        case Calendar.DAY_OF_YEAR:\n+            truncateTime = true;\n+            val.set(Calendar.MONTH, 0); //truncate to January\n+            //fall through to a YEAR truncate, but take care to round milliseconds since \n+            //changing fields may cause the time to go backwards\n+            val.set(Calendar.HOUR_OF_DAY, 0);\n+            val.set(Calendar.MINUTE, 0);\n+            val.set(Calendar.SECOND, 0);\n+            val.set(Calendar.MILLISECOND, 0);\n+        case Calendar.YEAR:\n+            truncateTime = true;\n+            val.set(Calendar.MONTH, 0);\n+            val.set(Calendar.DATE, 1);\n+            //fall through to round milliseconds\n+        case Calendar.ERA:\n+            val.set(Calendar.HOUR_OF_DAY, 0);\n+            val.set(Calendar.MINUTE, 0);\n+            val.set(Calendar.SECOND, 0);\n+            val.set(Calendar.MILLISECOND, (round && val.get(Calendar.MILLISECOND) >= 500) ? 0: 0);\n+            break;\n+    }\n+\n+    // round-up, if necessary. Can only do this if we are not part-way through\n+    // a larger unit (eg truncating hour and above disqualifies us from\n+    // truncating minutes for rounding purposes)\n+    if (round && !truncateTime) {\n+        if (field == Calendar.MILLISECOND ||\n+                val.get(Calendar.MILLISECOND) >= 500) {\n+            val.set(Calendar.MILLISECOND, 0);\n+            val.add(Calendar.SECOND, 1);\n+        }\n+        if (field == Calendar.SECOND ||\n+                val.get(Calendar.SECOND) > 30) { // add 30 seconds, to handle mid-tick rounding\n+            val.set(Calendar.SECOND, 0);\n+            val.add(Calendar.MINUTE, 1);\n+        }\n+        if (field == Calendar.MINUTE ||\n+                val.get(Calendar.MINUTE) > 30) {\n+            val.set(Calendar.MINUTE, 0);\n+            val.add(Calendar.HOUR_OF_DAY, 1);\n+        }\n+        if (field == Calendar.HOUR_OF_DAY ||\n+                field == Calendar.HOUR ||\n+                val.get(Calendar.HOUR_OF_DAY) > 12) {\n+            val.set(Calendar.HOUR_OF_DAY, 0);\n+            val.add(Calendar.DATE, 1);\n+        }\n+        if (field == Calendar.DATE ||\n+                val.get(Calendar.DAY_OF_MONTH) > 15) {\n+            val.set(Calendar.DATE, 1);\n+            val.add(Calendar.MONTH, 1);\n+        }\n+        if (field == Calendar.MONTH ||\n+                val.get(Calendar.MONTH) > Calendar.JUNE) {\n+            // don't round-up year if we are only one day into the year\n+            if (val.get(Calendar.DATE) > 1 || field != Calendar.MONTH) {\n+                val.set(Calendar.MONTH, Calendar.JANUARY);\n+                val.add(Calendar.YEAR, 1);\n             }\n-            //We need to remove this field\n-                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n         }\n-        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n-\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}