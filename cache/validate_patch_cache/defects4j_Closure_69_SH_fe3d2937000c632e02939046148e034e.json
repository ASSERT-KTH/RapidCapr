{
    "patch": "      JSType thisType = functionType.getTypeOfThis();\n      if (thisType != null && !thisType.isUnknownType() && !thisType.isNoType() &&\n          (n.getParent().isGetProp() || n.getParent().isGetElem())) {\n        ensureTyped(t, n.getParent(), thisType);\n      } else if (thisType != null && !thisType.isUnknownType() && !thisType.isNoType()) {\n        report(t, n, INVALID_THIS_TYPE, thisType.toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..a26c3850 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,12 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSType thisType = functionType.getTypeOfThis();\n+      if (thisType != null && !thisType.isUnknownType() && !thisType.isNoType() &&\n+          (n.getParent().isGetProp() || n.getParent().isGetElem())) {\n+        ensureTyped(t, n.getParent(), thisType);\n+      } else if (thisType != null && !thisType.isUnknownType() && !thisType.isNoType()) {\n+        report(t, n, INVALID_THIS_TYPE, thisType.toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}