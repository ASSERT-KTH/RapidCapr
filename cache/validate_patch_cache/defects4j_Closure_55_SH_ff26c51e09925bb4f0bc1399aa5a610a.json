{
    "patch": "// Return false if n is not a function expression.\nif (!NodeUtil.isFunctionExpression(n)) {\n  return false;\n}\n\n// Get the parent node.\nNode parent = n.getParent();\nif (parent == null) {\n  return false;\n}\n\n// Determine the parent type and check if it's a valid context for a reduceable function expression.\nint parentType = parent.getType();\nif (parentType == Token.CALL || parentType == Token.NEW || parentType == Token.OBJECTLIT) {\n  return false;\n} else if (parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN ||\n           parentType == Token.VAR || parentType == Token.RETURN ||\n           parentType == Token.TYPEOF || parentType == Token.INSTANCEOF) {\n  return true;\n} else if (NodeUtil.isStatementBlock(parent)) {\n  Node functionParent = parent.getParent();\n  if (functionParent != null && functionParent.getType() == Token.FUNCTION) {\n    return true;\n  }\n} else if (parentType == Token.BLOCK) {\n  Node grandParent = parent.getParent();\n  if (grandParent != null && grandParent.getType() == Token.FUNCTION) {\n    return true;\n  }\n}\n\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..0ab23e09 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,38 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+// Return false if n is not a function expression.\n+if (!NodeUtil.isFunctionExpression(n)) {\n+  return false;\n+}\n+\n+// Get the parent node.\n+Node parent = n.getParent();\n+if (parent == null) {\n+  return false;\n+}\n+\n+// Determine the parent type and check if it's a valid context for a reduceable function expression.\n+int parentType = parent.getType();\n+if (parentType == Token.CALL || parentType == Token.NEW || parentType == Token.OBJECTLIT) {\n+  return false;\n+} else if (parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN ||\n+           parentType == Token.VAR || parentType == Token.RETURN ||\n+           parentType == Token.TYPEOF || parentType == Token.INSTANCEOF) {\n+  return true;\n+} else if (NodeUtil.isStatementBlock(parent)) {\n+  Node functionParent = parent.getParent();\n+  if (functionParent != null && functionParent.getType() == Token.FUNCTION) {\n+    return true;\n+  }\n+} else if (parentType == Token.BLOCK) {\n+  Node grandParent = parent.getParent();\n+  if (grandParent != null && grandParent.getType() == Token.FUNCTION) {\n+    return true;\n+  }\n+}\n+\n+return false;\n   }\n \n   /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}