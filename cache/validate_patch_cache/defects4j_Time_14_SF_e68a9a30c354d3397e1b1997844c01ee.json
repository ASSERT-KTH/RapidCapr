{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            boolean dayOfMonthAdjusted = false;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i == DateTimeFieldType.monthOfYear().getIndexedField()) {\n                    int curMonth = partial.getValue(iChronology.monthOfYear());\n                    int newMonth = ((curMonth - 1 + valueToAdd) % 12) + 1;\n                    int yearOffset = (curMonth - 1 + valueToAdd) / 12;\n                    if (yearOffset != 0) {\n                        int newYear = partial.getValue(iChronology.year()) + yearOffset;\n                        // adjust dayOfMonth to keep same point in the month\n                        int maxDay = iChronology.dayOfMonth().getMaximumValue(newYear, newMonth);\n                        int curDay = partial.getValue(iChronology.dayOfMonth());\n                        if (curDay > maxDay) {\n                            dayOfMonthAdjusted = true;\n                            curDay = maxDay;\n                        }\n                        instant = iChronology.year().set(instant, newYear);\n                        instant = iChronology.monthOfYear().set(instant, newMonth);\n                        instant = iChronology.dayOfMonth().set(instant, curDay);\n                    } else {\n                        instant = partial.getFieldType(i).getField(iChronology).set(instant, newMonth);\n                    }\n                } else {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }\n            }\n            if (dayOfMonthAdjusted) {\n                // need to recompute the instant\n                instant = iChronology.setDayOfMonth(instant, iChronology.dayOfMonth().get(instant));\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..532f9526 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,11 +206,37 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            boolean dayOfMonthAdjusted = false;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                if (i == DateTimeFieldType.monthOfYear().getIndexedField()) {\n+                    int curMonth = partial.getValue(iChronology.monthOfYear());\n+                    int newMonth = ((curMonth - 1 + valueToAdd) % 12) + 1;\n+                    int yearOffset = (curMonth - 1 + valueToAdd) / 12;\n+                    if (yearOffset != 0) {\n+                        int newYear = partial.getValue(iChronology.year()) + yearOffset;\n+                        // adjust dayOfMonth to keep same point in the month\n+                        int maxDay = iChronology.dayOfMonth().getMaximumValue(newYear, newMonth);\n+                        int curDay = partial.getValue(iChronology.dayOfMonth());\n+                        if (curDay > maxDay) {\n+                            dayOfMonthAdjusted = true;\n+                            curDay = maxDay;\n+                        }\n+                        instant = iChronology.year().set(instant, newYear);\n+                        instant = iChronology.monthOfYear().set(instant, newMonth);\n+                        instant = iChronology.dayOfMonth().set(instant, curDay);\n+                    } else {\n+                        instant = partial.getFieldType(i).getField(iChronology).set(instant, newMonth);\n+                    }\n+                } else {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                }\n+            }\n+            if (dayOfMonthAdjusted) {\n+                // need to recompute the instant\n+                instant = iChronology.setDayOfMonth(instant, iChronology.dayOfMonth().get(instant));\n             }\n             instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}