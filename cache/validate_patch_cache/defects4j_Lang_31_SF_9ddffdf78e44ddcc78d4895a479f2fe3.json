{
    "patch": "public class StringUtils {\n\n    public static boolean containsAny(String str, char[] searchChars) {\n        if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {\n            return false;\n        }\n        int strSize = str.length();\n        int searchSize = searchChars.length;\n        int searchIndex = -1;\n        char[] newSearch = searchChars;\n\n        if (searchSize > 1) {\n            for (int i = 0; i < searchSize - 1; i++) {\n                if (Character.isHighSurrogate(searchChars[i]) && Character.isLowSurrogate(searchChars[i + 1])) {\n                    if (newSearch == searchChars) {\n                        newSearch = Arrays.copyOf(searchChars, searchChars.length);\n                    }\n                    newSearch[i + searchIndex + 1] = searchChars[i];\n                    newSearch[i + searchIndex + 2] = searchChars[i + 1];\n                    newSearch[i] = 0;\n                    newSearch[i + 1] = 0;\n                    searchIndex++;\n                }\n            }\n        }\n\n        for (int i = 0; i < strSize; i++) {\n            char ch = str.charAt(i);\n            if (ch >= newSearch.length) {\n                continue;\n            }\n            if (newSearch[ch] == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..e45c72d3 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,44 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+\n+    public static boolean containsAny(String str, char[] searchChars) {\n+        if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {\n+            return false;\n+        }\n+        int strSize = str.length();\n+        int searchSize = searchChars.length;\n+        int searchIndex = -1;\n+        char[] newSearch = searchChars;\n+\n+        if (searchSize > 1) {\n+            for (int i = 0; i < searchSize - 1; i++) {\n+                if (Character.isHighSurrogate(searchChars[i]) && Character.isLowSurrogate(searchChars[i + 1])) {\n+                    if (newSearch == searchChars) {\n+                        newSearch = Arrays.copyOf(searchChars, searchChars.length);\n+                    }\n+                    newSearch[i + searchIndex + 1] = searchChars[i];\n+                    newSearch[i + searchIndex + 2] = searchChars[i + 1];\n+                    newSearch[i] = 0;\n+                    newSearch[i + 1] = 0;\n+                    searchIndex++;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < strSize; i++) {\n+            char ch = str.charAt(i);\n+            if (ch >= newSearch.length) {\n+                continue;\n+            }\n+            if (newSearch[ch] == ch) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}