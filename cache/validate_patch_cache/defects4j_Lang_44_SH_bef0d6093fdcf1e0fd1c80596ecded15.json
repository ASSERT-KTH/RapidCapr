{
    "patch": "if (val == null) {\n    return null;\n}\nif (val.length() == 0) {\n    throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n}\nif (val.startsWith(\"--\")) {\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear \n    // to be in specification of class. OS X Java parses it to \n    // a wrong value.\n    return null;\n}\nif (val.startsWith(\"0b\") || val.startsWith(\"-0b\")) {\n    return createInteger(val);\n}\nif (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n    return createInteger(val);\n}\nchar firstChar = val.charAt(0);\nif (val.length() > 1 && firstChar == '+') {\n    firstChar = val.charAt(1);\n    if (Character.isDigit(firstChar)) {\n        val = val.substring(1);\n    }\n}\nif (!Character.isDigit(firstChar) && firstChar != '.' && firstChar != '-') {\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}\nreturn parseNumber(val);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..f6b7a1b4 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,36 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+if (val == null) {\n+    return null;\n+}\n+if (val.length() == 0) {\n+    throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n+}\n+if (val.startsWith(\"--\")) {\n+    // this is protection for poorness in java.lang.BigDecimal.\n+    // it accepts this as a legal value, but it does not appear \n+    // to be in specification of class. OS X Java parses it to \n+    // a wrong value.\n+    return null;\n+}\n+if (val.startsWith(\"0b\") || val.startsWith(\"-0b\")) {\n+    return createInteger(val);\n+}\n+if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+    return createInteger(val);\n+}\n+char firstChar = val.charAt(0);\n+if (val.length() > 1 && firstChar == '+') {\n+    firstChar = val.charAt(1);\n+    if (Character.isDigit(firstChar)) {\n+        val = val.substring(1);\n+    }\n+}\n+if (!Character.isDigit(firstChar) && firstChar != '.' && firstChar != '-') {\n+    throw new NumberFormatException(val + \" is not a valid number.\");\n+}\n+return parseNumber(val);\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}