{
    "patch": "              // NOTE - there are some circumstances where we can\n              // proceed even if there are side effects...\n              boolean mayProceed = !NodeUtil.mayHaveSideEffects(lhs.getLastChild());\n              mayProceed &= (lhs.getLastChild().isFunction()\n                  || NodeUtil.mayEffectMutableState(lhs.getLastChild()));\n              if (mayProceed) {\n                Node container = IR.container(IR.hook(cond, thenExpr, elseExpr));\n                Node newRetVal = IR.comma(container, lhs.getLastChild());\n                lhs.replaceChild(lhs.getLastChild(), newRetVal);\n                newRetVal.useSourceInfoIfMissingFromForTree(lhs.getLastChild());\n                parent.replaceChild(n, lhs.getLastChild().detachFromParent());\n                reportCodeChange();\n                return lhs.getLastChild().getNext();\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..8b5b09a8 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,20 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              // NOTE - there are some circumstances where we can\n+              // proceed even if there are side effects...\n+              boolean mayProceed = !NodeUtil.mayHaveSideEffects(lhs.getLastChild());\n+              mayProceed &= (lhs.getLastChild().isFunction()\n+                  || NodeUtil.mayEffectMutableState(lhs.getLastChild()));\n+              if (mayProceed) {\n+                Node container = IR.container(IR.hook(cond, thenExpr, elseExpr));\n+                Node newRetVal = IR.comma(container, lhs.getLastChild());\n+                lhs.replaceChild(lhs.getLastChild(), newRetVal);\n+                newRetVal.useSourceInfoIfMissingFromForTree(lhs.getLastChild());\n+                parent.replaceChild(n, lhs.getLastChild().detachFromParent());\n+                reportCodeChange();\n+                return lhs.getLastChild().getNext();\n+              }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}