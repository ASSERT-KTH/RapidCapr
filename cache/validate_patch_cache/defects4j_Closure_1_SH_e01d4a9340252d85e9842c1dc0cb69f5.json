{
    "patch": "    \n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    Node child = argList.getFirstChild();\n    while (child != null) {\n      Node next = child.getNext();\n      Var var = fnScope.getVar(child.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(child);\n        compiler.reportCodeChange();\n      }\n      child = next;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..eed20e33 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    Node child = argList.getFirstChild();\n+    while (child != null) {\n+      Node next = child.getNext();\n+      Var var = fnScope.getVar(child.getString());\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(child);\n+        compiler.reportCodeChange();\n+      }\n+      child = next;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}