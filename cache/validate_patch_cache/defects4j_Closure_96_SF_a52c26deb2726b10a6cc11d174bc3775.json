{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n\n  while (arguments.hasNext() && parameters.hasNext()) {\n    Node argument = arguments.next();\n    Node parameter = parameters.next();\n\n    // If the parameter is an optional one, we can bail out if\n    // there are no more arguments.\n    boolean hasMoreParameters = parameters.hasNext();\n    if (argument == null && !hasMoreParameters) {\n      break;\n    }\n\n    ordinal++;\n    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n      getJSType(parameter), call, ordinal);\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (numArgs < minArgs || numArgs > maxArgs) {\n    String message = createWrongArgumentCountMessage(call, functionType, numArgs, minArgs, maxArgs);\n    report(t, call, WRONG_ARGUMENT_COUNT, message);\n  }\n}\n\nprivate static String createWrongArgumentCountMessage(\n    Node call, FunctionType functionType, int numArgs, int minArgs, int maxArgs) {\n  String methodId = validator.getReadableJSTypeName(call.getFirstChild(), false);\n  StringBuilder errorMessage = new StringBuilder(\"Function \").append(methodId);\n  if (hasArgsError(numArgs, minArgs, maxArgs)) {\n    errorMessage.append(\" called with \").append(numArgs).append(\" argument(s)\");\n    if (minArgs == maxArgs) {\n      errorMessage.append(\" but expected exactly \").append(minArgs).append(\" argument(s).\");\n    } else {\n      errorMessage.append(\", but expected at least \").append(minArgs);\n      if (maxArgs != Integer.MAX_VALUE) {\n        errorMessage.append(\" and no more than \").append(maxArgs).append(\" argument(s)\");\n      }\n      errorMessage.append(\".\");\n    }\n  } else {\n    errorMessage.append(\" does not have enough specified arguments with a minimum of \")\n        .append(minArgs).append(\" argument(s).\");\n  }\n  return errorMessage.toString();\n}\n\nprivate static boolean hasArgsError(int numArgs, int minArgs, int maxArgs) {\n  return numArgs < minArgs || (maxArgs != Integer.MAX_VALUE && numArgs > maxArgs);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..1de79d95 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,63 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+\n+  while (arguments.hasNext() && parameters.hasNext()) {\n+    Node argument = arguments.next();\n+    Node parameter = parameters.next();\n+\n+    // If the parameter is an optional one, we can bail out if\n+    // there are no more arguments.\n+    boolean hasMoreParameters = parameters.hasNext();\n+    if (argument == null && !hasMoreParameters) {\n+      break;\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    ordinal++;\n+    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+      getJSType(parameter), call, ordinal);\n+  }\n+\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  if (numArgs < minArgs || numArgs > maxArgs) {\n+    String message = createWrongArgumentCountMessage(call, functionType, numArgs, minArgs, maxArgs);\n+    report(t, call, WRONG_ARGUMENT_COUNT, message);\n+  }\n+}\n+\n+private static String createWrongArgumentCountMessage(\n+    Node call, FunctionType functionType, int numArgs, int minArgs, int maxArgs) {\n+  String methodId = validator.getReadableJSTypeName(call.getFirstChild(), false);\n+  StringBuilder errorMessage = new StringBuilder(\"Function \").append(methodId);\n+  if (hasArgsError(numArgs, minArgs, maxArgs)) {\n+    errorMessage.append(\" called with \").append(numArgs).append(\" argument(s)\");\n+    if (minArgs == maxArgs) {\n+      errorMessage.append(\" but expected exactly \").append(minArgs).append(\" argument(s).\");\n+    } else {\n+      errorMessage.append(\", but expected at least \").append(minArgs);\n+      if (maxArgs != Integer.MAX_VALUE) {\n+        errorMessage.append(\" and no more than \").append(maxArgs).append(\" argument(s)\");\n+      }\n+      errorMessage.append(\".\");\n     }\n+  } else {\n+    errorMessage.append(\" does not have enough specified arguments with a minimum of \")\n+        .append(minArgs).append(\" argument(s).\");\n   }\n+  return errorMessage.toString();\n+}\n+\n+private static boolean hasArgsError(int numArgs, int minArgs, int maxArgs) {\n+  return numArgs < minArgs || (maxArgs != Integer.MAX_VALUE && numArgs > maxArgs);\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: non-static variable validator cannot be referenced from a static context",
    "test_result": "ERROR"
}