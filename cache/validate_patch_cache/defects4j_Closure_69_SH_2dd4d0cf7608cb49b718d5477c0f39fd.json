{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n      if (functionType.isConstructor() || functionType.hasThisType()) {\n        Node parent = n.getParent();\n        if (!parent.isGetProp() && !parent.isGetElem()) {\n          report(t, n, EXPECTED_THIS_TYPE, childType.toString());\n        }\n      }\n      \n      visitParameterList(t, n, functionType);\n      JSType returnType = functionType.getReturnType();\n      if (returnType == null) {\n        // The return type will be null if the function type is a function\n        // interface. This indicates that the return type could be any type\n        // and the return value must be type checked at each call site.\n        returnType = unknownType;\n      }\n      ensureTyped(t, n, returnType);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..9161c162 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n+      if (functionType.isConstructor() || functionType.hasThisType()) {\n+        Node parent = n.getParent();\n+        if (!parent.isGetProp() && !parent.isGetElem()) {\n+          report(t, n, EXPECTED_THIS_TYPE, childType.toString());\n+        }\n+      }\n+      \n+      visitParameterList(t, n, functionType);\n+      JSType returnType = functionType.getReturnType();\n+      if (returnType == null) {\n+        // The return type will be null if the function type is a function\n+        // interface. This indicates that the return type could be any type\n+        // and the return value must be type checked at each call site.\n+        returnType = unknownType;\n+      }\n+      ensureTyped(t, n, returnType);\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}