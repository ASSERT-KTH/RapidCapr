{
    "patch": "/**\n * @return Whether the variable is only assigned a value once for its lifetime.\n */\nboolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n\n  BasicBlock block = ref.getBasicBlock();\n  // Check whether the current reference is a declaration.\n  if (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0)) {\n    return true;\n  }\n  // Check whether the current reference is a function parameter.\n  if (ref.isParam()) {\n    return true;\n  }\n\n  boolean result = true;\n  for (BasicBlock parentBlock = block.getParent(); parentBlock != null; parentBlock = parentBlock.getParent()) {\n    if (parentBlock.isFunction()) {\n      // Check for a permission declared by a goog.permission or other function.\n      if (parentBlock.getNode().matchesQualifiedName(\"goog.functions_.declarePermission\") || parentBlock.getNode().matchesQualifiedName(\"goog.functions_.assertPermission\")) {\n        return false;\n      }\n      result = isInitializingDeclarationAt(0) && parentBlock == references.get(0).getBasicBlock();\n      break;\n    } else if (parentBlock.isLoop()) {\n      // variable is assigned multiple times in a loop, so return false\n      if (!block.isRemovable()) {\n        return false;\n      }\n    }\n  }\n  return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..7124ffec 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,43 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+/**\n+ * @return Whether the variable is only assigned a value once for its lifetime.\n+ */\n+boolean isAssignedOnceInLifetime() {\n+  Reference ref = getOneAndOnlyAssignment();\n+  if (ref == null) {\n+    return false;\n+  }\n+\n+  BasicBlock block = ref.getBasicBlock();\n+  // Check whether the current reference is a declaration.\n+  if (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0)) {\n+    return true;\n+  }\n+  // Check whether the current reference is a function parameter.\n+  if (ref.isParam()) {\n+    return true;\n+  }\n+\n+  boolean result = true;\n+  for (BasicBlock parentBlock = block.getParent(); parentBlock != null; parentBlock = parentBlock.getParent()) {\n+    if (parentBlock.isFunction()) {\n+      // Check for a permission declared by a goog.permission or other function.\n+      if (parentBlock.getNode().matchesQualifiedName(\"goog.functions_.declarePermission\") || parentBlock.getNode().matchesQualifiedName(\"goog.functions_.assertPermission\")) {\n+        return false;\n+      }\n+      result = isInitializingDeclarationAt(0) && parentBlock == references.get(0).getBasicBlock();\n+      break;\n+    } else if (parentBlock.isLoop()) {\n+      // variable is assigned multiple times in a loop, so return false\n+      if (!block.isRemovable()) {\n+        return false;\n+      }\n+    }\n+  }\n+  return result;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}