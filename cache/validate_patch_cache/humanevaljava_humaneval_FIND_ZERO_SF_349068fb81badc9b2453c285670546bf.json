{
    "patch": "public static double find_zero(List<Double> xs) {\n    double begin = -1.0;\n    double end = 1.0;\n    double tolerance = 1e-10;\n\n    // check if any of the endpoints is a root and return it\n    if (Math.abs(poly(xs, begin)) < tolerance)\n        return begin;\n    if (Math.abs(poly(xs, end)) < tolerance)\n        return end;\n\n    // if both endpoints have same sign, expand the range of endpoints\n    if (poly(xs, begin) * poly(xs, end) > 0) {\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            end *= 2.0;\n        }\n    }\n\n    // apply bisection method to find the root\n    while (Math.abs(end - begin) > tolerance) {\n        double mid = (begin + end) / 2.0;\n\n        if (Math.abs(poly(xs, mid)) < tolerance) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, begin) < 0) {\n            end = mid;\n        } else {\n            begin = mid;\n        }\n    }\n\n    return (begin + end) / 2.0;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/FIND_ZERO.java b/src/main/java/humaneval/buggy/FIND_ZERO.java\nindex 9e2c137..5c39c04 100644\n--- a/src/main/java/humaneval/buggy/FIND_ZERO.java\n+++ b/src/main/java/humaneval/buggy/FIND_ZERO.java\n@@ -11,23 +11,37 @@ public class FIND_ZERO {\n         return sum;\n     }\n \n-    public static double find_zero(List<Double> xs){\n-        double begin = -1.;\n-        double end = 1.;\n+public static double find_zero(List<Double> xs) {\n+    double begin = -1.0;\n+    double end = 1.0;\n+    double tolerance = 1e-10;\n \n+    // check if any of the endpoints is a root and return it\n+    if (Math.abs(poly(xs, begin)) < tolerance)\n+        return begin;\n+    if (Math.abs(poly(xs, end)) < tolerance)\n+        return end;\n+\n+    // if both endpoints have same sign, expand the range of endpoints\n+    if (poly(xs, begin) * poly(xs, end) > 0) {\n         while (poly(xs, begin) * poly(xs, end) > 0) {\n-            begin *= 2.;\n-            end *= 2.;\n+            end *= 2.0;\n         }\n-        while (end - begin > 1e-10) {\n-            double center = (begin + end) / 2.;\n-            \n-            if (poly(xs, begin) * poly(xs, end) < 0) {\n-                begin = center;\n-            } else {\n-                end = center;\n-            }\n+    }\n+\n+    // apply bisection method to find the root\n+    while (Math.abs(end - begin) > tolerance) {\n+        double mid = (begin + end) / 2.0;\n+\n+        if (Math.abs(poly(xs, mid)) < tolerance) {\n+            return mid;\n+        } else if (poly(xs, mid) * poly(xs, begin) < 0) {\n+            end = mid;\n+        } else {\n+            begin = mid;\n         }\n-        return begin;\n     }\n+\n+    return (begin + end) / 2.0;\n+}\n }",
    "result_reason": "   TEST_FIND_ZERO.test_6:66",
    "test_result": "FAIL"
}