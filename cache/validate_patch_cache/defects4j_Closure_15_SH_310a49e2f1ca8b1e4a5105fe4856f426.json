{
    "patch": "if (n.isForIn() || n.isForOf()) {\n  // If the for-in statement is not for an object literal\n  // then it is considered side-effecting.\n  if (!n.getLastChild().isObjectLit()) {\n    return true;\n  }\n  // Otherwise, only consider it side-effecting if computed\n  // properties are used.\n  Node lhs = n.getFirstChild();\n  if (lhs.isVar() || lhs.isLet() || lhs.isConst()) {\n    lhs = lhs.getFirstChild();\n  }\n  return lhs.getLastChild().isComputedProp();\n}\n\nfor (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n  if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n    return true;\n  }\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..e15eec27 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,27 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isForIn() || n.isForOf()) {\n+  // If the for-in statement is not for an object literal\n+  // then it is considered side-effecting.\n+  if (!n.getLastChild().isObjectLit()) {\n+    return true;\n+  }\n+  // Otherwise, only consider it side-effecting if computed\n+  // properties are used.\n+  Node lhs = n.getFirstChild();\n+  if (lhs.isVar() || lhs.isLet() || lhs.isConst()) {\n+    lhs = lhs.getFirstChild();\n+  }\n+  return lhs.getLastChild().isComputedProp();\n+}\n+\n+for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+  if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+    return true;\n+  }\n+}\n+return false;\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}