{
    "patch": "  // Detect and define named function declarations.\n  if (n.isFunction()) {\n    Node name = n.getFirstChild();\n    if (name.isName()) {\n      // named function declaration ( function foo() {...} )\n      if (parent != null && parent.getType() == Token.NAME) {\n        // skip function declarations in a var declaration\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      return;\n    }\n    // anonymous function ( function() {...} )\n    defineDeclaredFunction(n, parent);\n    return;\n  }\n\n  switch (n.getType()) {\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      // Detect and define variable declarations.\n      defineVar(n, parent);\n      break;\n    case Token.EXPR_RESULT:\n      // Detect and define variable declarations as expressions.\n      Node child = n.getFirstChild();\n      if (child != null && child.getType() == Token.ASSIGN) {\n        defineVar(child.getFirstChild(), parent);\n      }\n      break;\n    case Token.LP:\n      // Detect and handle function inputs.\n      if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.ASSIGN) {\n        handleFunctionInputs(n);\n      } else if (parent == scope.getRootNode() && parent.isFunction()) {\n        handleFunctionInputs(parent);\n      }\n      break;\n    default:\n      break;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..6a0d60a9 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,49 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+  // Detect and define named function declarations.\n+  if (n.isFunction()) {\n+    Node name = n.getFirstChild();\n+    if (name.isName()) {\n+      // named function declaration ( function foo() {...} )\n+      if (parent != null && parent.getType() == Token.NAME) {\n+        // skip function declarations in a var declaration\n+        return;\n+      }\n+      defineDeclaredFunction(n, parent);\n+      return;\n+    }\n+    // anonymous function ( function() {...} )\n+    defineDeclaredFunction(n, parent);\n+    return;\n+  }\n+\n+  switch (n.getType()) {\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.VAR:\n+      // Detect and define variable declarations.\n+      defineVar(n, parent);\n+      break;\n+    case Token.EXPR_RESULT:\n+      // Detect and define variable declarations as expressions.\n+      Node child = n.getFirstChild();\n+      if (child != null && child.getType() == Token.ASSIGN) {\n+        defineVar(child.getFirstChild(), parent);\n       }\n+      break;\n+    case Token.LP:\n+      // Detect and handle function inputs.\n+      if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.ASSIGN) {\n+        handleFunctionInputs(n);\n+      } else if (parent == scope.getRootNode() && parent.isFunction()) {\n+        handleFunctionInputs(parent);\n+      }\n+      break;\n+    default:\n+      break;\n+  }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}