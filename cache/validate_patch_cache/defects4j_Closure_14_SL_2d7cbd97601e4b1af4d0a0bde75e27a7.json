{
    "patch": "    if (cfa != null && parent.getType() == Token.TRY) {\n        // Find all finally block successors\n        Set<Node> finallySuccessors = new HashSet<>();\n        for (Node finallyNode : cfa.finallyMap.get(parent)) {\n            finallySuccessors.add(computeFollowNode(node, finallyNode, cfa));\n        }\n        // If there are no finally blocks, fall back to the regular path\n        if (finallySuccessors.isEmpty()) {\n            return computeFollowNode(fromNode, parent, cfa);\n        }\n        // Create edges to all finally blocks and their successors\n        for (Node finallyNode : finallySuccessors) {\n            if (finallyNode != null) {\n                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n        }\n    }\n    return computeFollowNode(fromNode, parent, cfa);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..b6f9f1d4 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,24 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+    if (cfa != null && parent.getType() == Token.TRY) {\n+        // Find all finally block successors\n+        Set<Node> finallySuccessors = new HashSet<>();\n+        for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+            finallySuccessors.add(computeFollowNode(node, finallyNode, cfa));\n+        }\n+        // If there are no finally blocks, fall back to the regular path\n+        if (finallySuccessors.isEmpty()) {\n+            return computeFollowNode(fromNode, parent, cfa);\n+        }\n+        // Create edges to all finally blocks and their successors\n+        for (Node finallyNode : finallySuccessors) {\n+            if (finallyNode != null) {\n+                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+            }\n+        }\n+    }\n+    return computeFollowNode(fromNode, parent, cfa);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}