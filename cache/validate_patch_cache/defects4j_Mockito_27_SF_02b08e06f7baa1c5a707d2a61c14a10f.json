{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    if (mock instanceof Factory) {\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        \n        // Get the current callback and replace it with the new one\n        Object currentCallback = ((Factory) mock).getCallback(0);\n        if (currentCallback instanceof NoOp) {\n            ((Factory) mock).setCallback(0, newFilter);\n        } else if (currentCallback instanceof MethodInterceptorFilter) {\n            ((MethodInterceptorFilter) currentCallback).setHandler(newMockHandler);\n        } else {\n            throw new RuntimeException(\"Mock callback is of unknown type: \" + currentCallback.getClass().getName());\n        }\n    } else {\n        throw new IllegalArgumentException(\"Mock object is not a Factory instance.\");\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..86ef90e83 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,26 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    if (mock instanceof Factory) {\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        \n+        // Get the current callback and replace it with the new one\n+        Object currentCallback = ((Factory) mock).getCallback(0);\n+        if (currentCallback instanceof NoOp) {\n+            ((Factory) mock).setCallback(0, newFilter);\n+        } else if (currentCallback instanceof MethodInterceptorFilter) {\n+            ((MethodInterceptorFilter) currentCallback).setHandler(newMockHandler);\n+        } else {\n+            throw new RuntimeException(\"Mock callback is of unknown type: \" + currentCallback.getClass().getName());\n+        }\n+    } else {\n+        throw new IllegalArgumentException(\"Mock object is not a Factory instance.\");\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}