{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n                // accept the contracted simplex\n                final RealPointValuePair[] contractedSimplex = simplex;\n                simplex = contractedSimplex;\n\n                return;\n            }\n\n            // perform a contraction around the best point\n            RealPointValuePair[] contractedSimplex = contractSimplex(original, best, rho, comparator);\n            if (comparator.compare(contractedSimplex[0], original[0]) >= 0) {\n                // if the contracted simplex is not better than the best point, perform a shrink\n                contractedSimplex = shrinkSimplex(original, sigma, comparator);\n            }\n            simplex = contractedSimplex;\n\n        }\n\n    }\n    \n    private RealPointValuePair[] contractSimplex(RealPointValuePair[] original, RealPointValuePair best,\n            double coeff, final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] contracted = new RealPointValuePair[original.length];\n        for (int i = 0; i < original.length; i++) {\n            final double[] x = original[i].getPointRef();\n            final double[] contractedX = new double[x.length];\n            for (int j = 0; j < x.length; j++) {\n                contractedX[j] = coeff * x[j] + (1 - coeff) * best.getPoint()[j];\n            }\n            final double contractedY = computeObjectiveValue(contractedX);\n            contracted[i] = new RealPointValuePair(contractedX, contractedY, false);\n        }\n        Arrays.sort(contracted, comparator);\n        return contracted;\n    }\n    \n    private RealPointValuePair[] shrinkSimplex(RealPointValuePair[] original, double coeff,\n            final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] shrinked = new RealPointValuePair[original.length];\n        final double[] best = original[0].getPoint();\n        for (int i = 1; i < original.length; i++) {\n            final double[] x = original[i].getPointRef();\n            final double[] shrinkedX = new double[x.length];\n            for (int j = 0; j < x.length; j++) {\n                shrinkedX[j] = coeff * x[j] + (1 - coeff) * best[j];\n            }\n            final double shrinkedY = computeObjectiveValue(shrinkedX);\n            shrinked[i] = new RealPointValuePair(shrinkedX, shrinkedY, false);\n        }\n        Arrays.sort(shrinked, comparator);\n        return shrinked;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..67c82fa6b 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -87,16 +87,58 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n+            if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n                 // accept the contracted simplex\n+                final RealPointValuePair[] contractedSimplex = simplex;\n+                simplex = contractedSimplex;\n \n-            // check convergence\n                 return;\n             }\n \n+            // perform a contraction around the best point\n+            RealPointValuePair[] contractedSimplex = contractSimplex(original, best, rho, comparator);\n+            if (comparator.compare(contractedSimplex[0], original[0]) >= 0) {\n+                // if the contracted simplex is not better than the best point, perform a shrink\n+                contractedSimplex = shrinkSimplex(original, sigma, comparator);\n+            }\n+            simplex = contractedSimplex;\n+\n         }\n \n     }\n+    \n+    private RealPointValuePair[] contractSimplex(RealPointValuePair[] original, RealPointValuePair best,\n+            double coeff, final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] contracted = new RealPointValuePair[original.length];\n+        for (int i = 0; i < original.length; i++) {\n+            final double[] x = original[i].getPointRef();\n+            final double[] contractedX = new double[x.length];\n+            for (int j = 0; j < x.length; j++) {\n+                contractedX[j] = coeff * x[j] + (1 - coeff) * best.getPoint()[j];\n+            }\n+            final double contractedY = computeObjectiveValue(contractedX);\n+            contracted[i] = new RealPointValuePair(contractedX, contractedY, false);\n+        }\n+        Arrays.sort(contracted, comparator);\n+        return contracted;\n+    }\n+    \n+    private RealPointValuePair[] shrinkSimplex(RealPointValuePair[] original, double coeff,\n+            final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] shrinked = new RealPointValuePair[original.length];\n+        final double[] best = original[0].getPoint();\n+        for (int i = 1; i < original.length; i++) {\n+            final double[] x = original[i].getPointRef();\n+            final double[] shrinkedX = new double[x.length];\n+            for (int j = 0; j < x.length; j++) {\n+                shrinkedX[j] = coeff * x[j] + (1 - coeff) * best[j];\n+            }\n+            final double shrinkedY = computeObjectiveValue(shrinkedX);\n+            shrinked[i] = new RealPointValuePair(shrinkedX, shrinkedY, false);\n+        }\n+        Arrays.sort(shrinked, comparator);\n+        return shrinked;\n+    }\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}