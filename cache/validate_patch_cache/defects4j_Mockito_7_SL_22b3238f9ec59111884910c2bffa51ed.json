{
    "patch": "TypeVariable<? extends GenericDeclaration> typeDeclaration = typeVariable;\nwhile (typeDeclaration.getGenericDeclaration() instanceof TypeVariable) {\n    Type type = getActualTypeArgumentFor((TypeVariable<?>) typeDeclaration.getGenericDeclaration());\n    if (type instanceof TypeVariable<?>) {\n        typeDeclaration = (TypeVariable<? extends GenericDeclaration>) type;\n    } else {\n        break;\n    }\n}\nif (typeDeclaration.getBounds().length == 0) {\n    registerTypeVariablesOn(Object.class);\n} else {\n    for (Type type : typeDeclaration.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    Type actualType = getActualTypeArgumentFor(typeDeclaration);\n    if (actualType != null) {\n        registerTypeVariablesOn(actualType);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..873af0daa 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,31 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+TypeVariable<? extends GenericDeclaration> typeDeclaration = typeVariable;\n+while (typeDeclaration.getGenericDeclaration() instanceof TypeVariable) {\n+    Type type = getActualTypeArgumentFor((TypeVariable<?>) typeDeclaration.getGenericDeclaration());\n+    if (type instanceof TypeVariable<?>) {\n+        typeDeclaration = (TypeVariable<? extends GenericDeclaration>) type;\n+    } else {\n+        break;\n+    }\n+}\n+if (typeDeclaration.getBounds().length == 0) {\n+    registerTypeVariablesOn(Object.class);\n+} else {\n+    for (Type type : typeDeclaration.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    Type actualType = getActualTypeArgumentFor(typeDeclaration);\n+    if (actualType != null) {\n+        registerTypeVariablesOn(actualType);\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}