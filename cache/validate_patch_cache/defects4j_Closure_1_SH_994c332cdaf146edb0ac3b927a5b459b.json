{
    "patch": "    List<Node> removed = new ArrayList<>();\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      for (Node arg : argList.children()) {\n        if (!arg.isName()) {\n          compiler.report(JSError.make(MISSING_NAME_WARNING, arg));\n          continue;\n        }\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          removed.add(arg);\n          compiler.reportCodeChange();\n        } else if (!removed.isEmpty()) {\n          // Parameters that come after a parameter that is being removed\n          // will also be removed\n          compiler.report(JSError.make(MISSING_NAME_WARNING, arg));\n        }\n      }\n\n      for (Node arg : removed) {\n        argList.removeChild(arg);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ed96ed90 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<Node> removed = new ArrayList<>();\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      for (Node arg : argList.children()) {\n+        if (!arg.isName()) {\n+          compiler.report(JSError.make(MISSING_NAME_WARNING, arg));\n+          continue;\n+        }\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          removed.add(arg);\n+          compiler.reportCodeChange();\n+        } else if (!removed.isEmpty()) {\n+          // Parameters that come after a parameter that is being removed\n+          // will also be removed\n+          compiler.report(JSError.make(MISSING_NAME_WARNING, arg));\n+        }\n+      }\n+\n+      for (Node arg : removed) {\n+        argList.removeChild(arg);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}