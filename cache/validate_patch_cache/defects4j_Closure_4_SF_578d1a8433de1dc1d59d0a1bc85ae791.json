{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // We try to resolve the type via registry first\n    if (resolveViaRegistry(t, enclosing)) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return getReferencedType();\n    }\n  \n    // If that fails, resolve via properties\n    resolveViaProperties(t, enclosing);\n\n    // Check for implicit cycle before trying to resolve again\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      resolveViaProperties(t, enclosing);\n    }\n\n    // Perform additional resolution and finish property continuations\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    \n    // Return the resolved type, or this if it couldn't be resolved",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..da418fbe 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,28 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    // We try to resolve the type via registry first\n+    if (resolveViaRegistry(t, enclosing)) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      return getReferencedType();\n     }\n-\n+  \n+    // If that fails, resolve via properties\n     resolveViaProperties(t, enclosing);\n+\n+    // Check for implicit cycle before trying to resolve again\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n+      resolveViaProperties(t, enclosing);\n     }\n \n+    // Perform additional resolution and finish property continuations\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    finishPropertyContinuations();\n+    \n+    // Return the resolved type, or this if it couldn't be resolved\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}