{
    "patch": "public static double regularizedGammaP(double a, double x) {\n   if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n       return Double.NaN;\n   }\n\n   if (x == 0.0) {\n       return 0.0;\n   }\n\n   if (x >= a + 1.0) {\n       final double d = continuedFraction(a, x);\n       return 1.0 - Probability.normal((Math.log(x) - a * Math.log(0.5 * x) - Constants.LN_SQRT_TWO_PI) + Math.log(d));\n   } else {\n       final double d = powerSeries(a, x);\n       return d;\n   }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c7b3c9c46 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,23 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+   if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+       return Double.NaN;\n+   }\n+\n+   if (x == 0.0) {\n+       return 0.0;\n+   }\n+\n+   if (x >= a + 1.0) {\n+       final double d = continuedFraction(a, x);\n+       return 1.0 - Probability.normal((Math.log(x) - a * Math.log(0.5 * x) - Constants.LN_SQRT_TWO_PI) + Math.log(d));\n+   } else {\n+       final double d = powerSeries(a, x);\n+       return d;\n+   }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}