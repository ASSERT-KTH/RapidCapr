{
    "patch": "if (offsetLocal > offsetAdjusted) {\n    long prev = previousTransition(instantAdjusted);\n    if ((instantAdjusted - prev) < (nextTransition(instantAdjusted) - instantAdjusted)) {\n        return offsetAdjusted;\n    } else {\n        return offsetLocal;\n    }\n} else if (offsetLocal < offsetAdjusted) {\n    long next = nextTransition(instantAdjusted);\n    if ((next - instantAdjusted) <= (instantAdjusted - previousTransition(instantAdjusted))) {\n        return offsetAdjusted;\n    } else {\n        return offsetLocal;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..80dfa03a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal > offsetAdjusted) {\n+    long prev = previousTransition(instantAdjusted);\n+    if ((instantAdjusted - prev) < (nextTransition(instantAdjusted) - instantAdjusted)) {\n+        return offsetAdjusted;\n+    } else {\n+        return offsetLocal;\n+    }\n+} else if (offsetLocal < offsetAdjusted) {\n+    long next = nextTransition(instantAdjusted);\n+    if ((next - instantAdjusted) <= (instantAdjusted - previousTransition(instantAdjusted))) {\n+        return offsetAdjusted;\n+    } else {\n+        return offsetLocal;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}