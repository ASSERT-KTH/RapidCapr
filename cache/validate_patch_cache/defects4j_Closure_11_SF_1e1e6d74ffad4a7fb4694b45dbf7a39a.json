{
    "patch": "public String getprop(String propertyName) {\n    String value = \"\";\n    Properties props = new Properties();\n    InputStream is = null;\n\n    try {\n        is = getClass().getResourceAsStream(\"config.properties\");\n        if (is != null) {\n            props.load(is);\n        } else {\n            throw new FileNotFoundException(\"Property file cannot be found.\");\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    if (props.containsKey(propertyName)) {\n        value = props.getProperty(propertyName);\n    } else {\n        System.out.println(\"Property \" + propertyName + \" was not found.\");\n    }\n\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..3d89501b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,30 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String propertyName) {\n+    String value = \"\";\n+    Properties props = new Properties();\n+    InputStream is = null;\n+\n+    try {\n+        is = getClass().getResourceAsStream(\"config.properties\");\n+        if (is != null) {\n+            props.load(is);\n+        } else {\n+            throw new FileNotFoundException(\"Property file cannot be found.\");\n+        }\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+\n+    if (props.containsKey(propertyName)) {\n+        value = props.getProperty(propertyName);\n+    } else {\n+        System.out.println(\"Property \" + propertyName + \" was not found.\");\n+    }\n+\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}