{
    "patch": "    if (n.getType() == Token.FUNCTION && NodeUtil.getFunctionName(n) != null) {\n      Node parent = n.getParent();\n      if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.ASSIGN ||\n          parent.getType() == Token.VAR ||\n          (parent.getType() == Token.BLOCK && parent.getParent().getType() == Token.FUNCTION)) {\n        return true;\n      }\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..877dc7ca 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,15 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (n.getType() == Token.FUNCTION && NodeUtil.getFunctionName(n) != null) {\n+      Node parent = n.getParent();\n+      if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.ASSIGN ||\n+          parent.getType() == Token.VAR ||\n+          (parent.getType() == Token.BLOCK && parent.getParent().getType() == Token.FUNCTION)) {\n+        return true;\n+      }\n+    }\n+    return false;\n   }\n \n   /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}