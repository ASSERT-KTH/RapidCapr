{
    "patch": "public double chiSquare(double[] expected, long[] observed) {\n    if (expected.length != observed.length) {\n        throw new IllegalArgumentException(\"Input arrays must have the same length\");\n    }\n\n    double chiSquare = 0.0;\n    int degreesOfFreedom = 0;\n    for (int i = 0; i < expected.length; i++) {\n        if (expected[i] < 0){\n            throw new IllegalArgumentException(\"Expected counts must be non-negative\");\n        }\n        if (observed[i] < 0){\n            throw new IllegalArgumentException(\"Observed counts must be non-negative\");\n        }\n        if (expected[i] == 0 && observed[i] > 0 || expected[i] > 0 && observed[i] == 0) {\n            throw new IllegalArgumentException(\"Invalid input arrays\");\n        }\n        double dev = observed[i] - expected[i];\n        chiSquare += dev * dev / expected[i];\n        degreesOfFreedom++;\n    }\n    degreesOfFreedom--;\n\n    return Gamma.regularizedGammaQ(degreesOfFreedom/2.0, chiSquare/2.0);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..3a6440e7f 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,24 +61,31 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n+public double chiSquare(double[] expected, long[] observed) {\n+    if (expected.length != observed.length) {\n+        throw new IllegalArgumentException(\"Input arrays must have the same length\");\n+    }\n+\n+    double chiSquare = 0.0;\n+    int degreesOfFreedom = 0;\n+    for (int i = 0; i < expected.length; i++) {\n+        if (expected[i] < 0){\n+            throw new IllegalArgumentException(\"Expected counts must be non-negative\");\n         }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n+        if (observed[i] < 0){\n+            throw new IllegalArgumentException(\"Observed counts must be non-negative\");\n         }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n-        for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n+        if (expected[i] == 0 && observed[i] > 0 || expected[i] > 0 && observed[i] == 0) {\n+            throw new IllegalArgumentException(\"Invalid input arrays\");\n         }\n-        return sumSq;\n+        double dev = observed[i] - expected[i];\n+        chiSquare += dev * dev / expected[i];\n+        degreesOfFreedom++;\n     }\n+    degreesOfFreedom--;\n+\n+    return Gamma.regularizedGammaQ(degreesOfFreedom/2.0, chiSquare/2.0);\n+}\n \n     /**\n      * {@inheritDoc}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}