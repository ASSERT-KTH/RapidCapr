{
    "patch": "boolean foundRef = false;\nfor (int i = index + 1; i < references.size(); i++) {\n    Reference maybeRef = references.get(i);\n    if (maybeRef.getSymbol().equals(sym) && maybeRef.isAssignment()) {\n        return false;\n    } else if (maybeRef.getSymbol().equals(sym) && !maybeRef.isAssignment()) {\n        foundRef = true;\n        break;\n    }\n}\nif (foundRef) {\n    return true;\n} else {\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..43a8df05 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,21 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+boolean foundRef = false;\n+for (int i = index + 1; i < references.size(); i++) {\n+    Reference maybeRef = references.get(i);\n+    if (maybeRef.getSymbol().equals(sym) && maybeRef.isAssignment()) {\n+        return false;\n+    } else if (maybeRef.getSymbol().equals(sym) && !maybeRef.isAssignment()) {\n+        foundRef = true;\n+        break;\n+    }\n+}\n+if (foundRef) {\n+    return true;\n+} else {\n+    return false;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}