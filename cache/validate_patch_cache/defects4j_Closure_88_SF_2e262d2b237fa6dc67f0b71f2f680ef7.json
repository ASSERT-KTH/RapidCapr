{
    "patch": "  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n    \n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        state = VariableLiveness.KILL;\n      } else {\n        state = VariableLiveness.READ;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n        if (childState == VariableLiveness.KILL) {\n          state = VariableLiveness.KILL;\n          break;\n        }\n        if (childState == VariableLiveness.READ) {\n          state = VariableLiveness.READ;\n        }\n      }\n    }\n    \n    return state;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..d8c4352a 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -322,14 +322,13 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    */\n   private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n+    VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n+    \n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n+        state = VariableLiveness.KILL;\n       } else {\n-        return VariableLiveness.READ;\n+        state = VariableLiveness.READ;\n       }\n     }\n \n@@ -337,12 +336,17 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n     for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n+        VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n+        if (childState == VariableLiveness.KILL) {\n+          state = VariableLiveness.KILL;\n+          break;\n+        }\n+        if (childState == VariableLiveness.READ) {\n+          state = VariableLiveness.READ;\n         }\n       }\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n+    \n+    return state;\n   }\n }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}