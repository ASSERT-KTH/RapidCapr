{
    "patch": "public Fraction reduce() {\n    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n    if (gcd == denominator) {\n        numerator /= denominator;\n        denominator = 1;\n    } else if (gcd != 1 && denominator != 0) {\n        numerator /= gcd;\n        denominator /= gcd;\n    } else if (denominator == 0) {\n        throw new ArithmeticException(\"Cannot divide by zero\");\n    }\n    return this;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..339a97ff 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,19 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+public Fraction reduce() {\n+    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n+    if (gcd == denominator) {\n+        numerator /= denominator;\n+        denominator = 1;\n+    } else if (gcd != 1 && denominator != 0) {\n+        numerator /= gcd;\n+        denominator /= gcd;\n+    } else if (denominator == 0) {\n+        throw new ArithmeticException(\"Cannot divide by zero\");\n+    }\n+    return this;\n+}\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}