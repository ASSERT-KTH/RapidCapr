{
    "patch": "public String fixCode(String code) {\n    String toReplace = \"for(XXX;YYY;ZZZ)\";\n    Pattern pattern = Pattern.compile(toReplace);\n    Matcher matcher = pattern.matcher(code);\n    StringBuffer sb = new StringBuffer();\n    while (matcher.find()) {\n        String match = matcher.group();\n        //replace the \"in\" operator with \"isIn\"\n        match = match.replaceAll(\"[\\\\s](in)[\\\\s]\", \" isIn \");\n        //replace the first occurrence of \";\" with \",\"\n        match = match.replaceFirst(\";\", \",\");\n        //add \"\" around the first expression\n        int firstCommaIndex = match.indexOf(\",\");\n        match = match.substring(0, firstCommaIndex+1) + \"\\\"\" + match.substring(firstCommaIndex+1);\n        //add \"\" around the second expression\n        int secondCommaIndex = match.indexOf(\",\", firstCommaIndex+1);\n        match = match.substring(0, secondCommaIndex+1) + \"\\\"\" + match.substring(secondCommaIndex+1);\n        matcher.appendReplacement(sb, match);\n    }\n    matcher.appendTail(sb);\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..ae5a9f7a 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,28 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    String toReplace = \"for(XXX;YYY;ZZZ)\";\n+    Pattern pattern = Pattern.compile(toReplace);\n+    Matcher matcher = pattern.matcher(code);\n+    StringBuffer sb = new StringBuffer();\n+    while (matcher.find()) {\n+        String match = matcher.group();\n+        //replace the \"in\" operator with \"isIn\"\n+        match = match.replaceAll(\"[\\\\s](in)[\\\\s]\", \" isIn \");\n+        //replace the first occurrence of \";\" with \",\"\n+        match = match.replaceFirst(\";\", \",\");\n+        //add \"\" around the first expression\n+        int firstCommaIndex = match.indexOf(\",\");\n+        match = match.substring(0, firstCommaIndex+1) + \"\\\"\" + match.substring(firstCommaIndex+1);\n+        //add \"\" around the second expression\n+        int secondCommaIndex = match.indexOf(\",\", firstCommaIndex+1);\n+        match = match.substring(0, secondCommaIndex+1) + \"\\\"\" + match.substring(secondCommaIndex+1);\n+        matcher.appendReplacement(sb, match);\n+    }\n+    matcher.appendTail(sb);\n+    return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}