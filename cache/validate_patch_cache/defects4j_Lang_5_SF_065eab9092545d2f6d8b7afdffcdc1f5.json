{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.trim().isEmpty()) {\n        return null;\n    }\n\n    String[] parts = str.split(\"_\", -1);\n    int len = parts.length;\n\n    if (len > 3) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    String language = \"\";\n    String country = \"\";\n    String variant = \"\";\n\n    if (len > 0) {\n        language = parts[0];\n    }\n    if (len > 1) {\n        country = parts[1];\n    }\n    if (len > 2) {\n        variant = parts[2];\n    }\n\n    if (!isValidCode(language, 2) || (len > 1 && !isValidCode(country, 2)) || \n            (len > 2 && (variant.isEmpty() || !isValidCode(variant)))) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isValidCode(String s, int len) {\n    if (s.isEmpty() || s.length() > len) {\n        return false;\n    }\n\n    if (!Character.isLowerCase(s.charAt(0))) {\n        return false;\n    }\n\n    for (int i = 1; i < s.length(); i++) {\n        if (!Character.isLowerCase(s.charAt(i))) {\n            return false;\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..395d50d3 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,58 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.trim().isEmpty()) {\n+        return null;\n+    }\n+\n+    String[] parts = str.split(\"_\", -1);\n+    int len = parts.length;\n+\n+    if (len > 3) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    String language = \"\";\n+    String country = \"\";\n+    String variant = \"\";\n+\n+    if (len > 0) {\n+        language = parts[0];\n+    }\n+    if (len > 1) {\n+        country = parts[1];\n+    }\n+    if (len > 2) {\n+        variant = parts[2];\n+    }\n+\n+    if (!isValidCode(language, 2) || (len > 1 && !isValidCode(country, 2)) || \n+            (len > 2 && (variant.isEmpty() || !isValidCode(variant)))) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isValidCode(String s, int len) {\n+    if (s.isEmpty() || s.length() > len) {\n+        return false;\n+    }\n+\n+    if (!Character.isLowerCase(s.charAt(0))) {\n+        return false;\n+    }\n+\n+    for (int i = 1; i < s.length(); i++) {\n+        if (!Character.isLowerCase(s.charAt(i))) {\n+            return false;\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n \n+    return true;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "error: method isValidCode in class LocaleUtils cannot be applied to given types;",
    "test_result": "ERROR"
}