{
    "patch": "        // Handling nodes with types other than STRING, GET, SET.\n        switch (child.getType()) {\n            case Token.STRING:\n            case Token.GET:\n            case Token.SET:\n                break;\n            default:\n                String nodeName = Token.name(child.getType());\n                String message = \"Unhandled node type '\" + nodeName +\n                        \"' found while processing object literal keys.\";\n                t.getInput().addError(new JSError(message, n));\n                break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..56f6c295 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,18 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        // Handling nodes with types other than STRING, GET, SET.\n+        switch (child.getType()) {\n+            case Token.STRING:\n+            case Token.GET:\n+            case Token.SET:\n+                break;\n+            default:\n+                String nodeName = Token.name(child.getType());\n+                String message = \"Unhandled node type '\" + nodeName +\n+                        \"' found while processing object literal keys.\";\n+                t.getInput().addError(new JSError(message, n));\n+                break;\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}