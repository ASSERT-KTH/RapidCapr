{
    "patch": "        DateTimeFormatter dtf = requireFormatter();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        Chronology chrono = dtf.getChronology();\n        Locale locale = dtf.getLocale();\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantLocal, chrono, locale, iPivotYear, dtf.getZone());",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..5f3d3a68 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,15 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        DateTimeFormatter dtf = requireFormatter();\n+        if (instant == null) {\n+            throw new IllegalArgumentException(\"Instant must not be null\");\n+        }\n+\n+        Chronology chrono = dtf.getChronology();\n+        Locale locale = dtf.getLocale();\n+        DateTimeParserBucket bucket = new DateTimeParserBucket(\n+                instantLocal, chrono, locale, iPivotYear, dtf.getZone());\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}