{
    "patch": "        } catch (IllegalFieldValueException e) {\n            if (e.getIllegalFieldValues() != null) {\n                int[] invalidValues = e.getIllegalFieldValues();\n                for (int i = 0; i < invalidValues.length; i++) {\n                    SavedField field = savedFields[i];\n                    if (field.iValue == invalidValues[i]) {\n                        // Value of field caused exception and it hasn't\n                        // been saved.\n                        // Set value to next highest valid value.\n                        Chronology chrono = iChrono;\n                        DateTimeField dtField = field.iField;\n                        int nextValue = dtField.getMaximumValue();\n                        int max = dtField.getMaximumValue(millis);\n                        int min = dtField.getMinimumValue(millis);\n                        if (max < nextValue && nextValue < min) {\n                            nextValue = max;\n                        } else if (min > nextValue && nextValue > max) {\n                            nextValue = min;\n                        }\n                        savedFields[i] = field = new SavedField(dtField, nextValue);\n                        if (iSavedFieldsShared) {\n                            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n                            iSavedFieldsShared = false;\n                        }\n                        sort(savedFields, count);\n                        i = -1;\n                        break;\n                    }\n                }\n            }\n            if (i >= 0) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..01565678 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,43 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            if (e.getIllegalFieldValues() != null) {\n+                int[] invalidValues = e.getIllegalFieldValues();\n+                for (int i = 0; i < invalidValues.length; i++) {\n+                    SavedField field = savedFields[i];\n+                    if (field.iValue == invalidValues[i]) {\n+                        // Value of field caused exception and it hasn't\n+                        // been saved.\n+                        // Set value to next highest valid value.\n+                        Chronology chrono = iChrono;\n+                        DateTimeField dtField = field.iField;\n+                        int nextValue = dtField.getMaximumValue();\n+                        int max = dtField.getMaximumValue(millis);\n+                        int min = dtField.getMinimumValue(millis);\n+                        if (max < nextValue && nextValue < min) {\n+                            nextValue = max;\n+                        } else if (min > nextValue && nextValue > max) {\n+                            nextValue = min;\n+                        }\n+                        savedFields[i] = field = new SavedField(dtField, nextValue);\n+                        if (iSavedFieldsShared) {\n+                            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+                            iSavedFieldsShared = false;\n+                        }\n+                        sort(savedFields, count);\n+                        i = -1;\n+                        break;\n+                    }\n+                }\n+            }\n+            if (i >= 0) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}