{
    "patch": "        for (int i = 0; i < count; i++) {\n            long newMillis = savedFields[i].set(millis, resetFields);\n            if (newMillis == millis) {\n                continue;\n            }\n            if (newMillis < millis && i > 0) {\n                SavedField tmp = savedFields[i - 1];\n                savedFields[i - 1] = savedFields[i];\n                savedFields[i] = tmp;\n                i -= 2;\n            } else {\n                millis = newMillis;\n            }\n            for (int j = 0; j < count; j++) {\n                if (j == i) {\n                    continue;\n                }\n                long latest = savedFields[j].getMillis();\n                if (latest > millis) {\n                    break;\n                }\n                millis += savedFields[j].set(millis, resetFields);\n                i = -1;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..171d04a0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,31 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            long newMillis = savedFields[i].set(millis, resetFields);\n+            if (newMillis == millis) {\n+                continue;\n+            }\n+            if (newMillis < millis && i > 0) {\n+                SavedField tmp = savedFields[i - 1];\n+                savedFields[i - 1] = savedFields[i];\n+                savedFields[i] = tmp;\n+                i -= 2;\n+            } else {\n+                millis = newMillis;\n+            }\n+            for (int j = 0; j < count; j++) {\n+                if (j == i) {\n+                    continue;\n+                }\n+                long latest = savedFields[j].getMillis();\n+                if (latest > millis) {\n+                    break;\n+                }\n+                millis += savedFields[j].set(millis, resetFields);\n+                i = -1;\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}