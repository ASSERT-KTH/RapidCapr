{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int initialOffset = getOffset(instantLocal);\n        final int offsetLocal = initialOffset; // rename offsetLocal to initialOffset\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - initialOffset;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n\n            // Handling the case when local time matches a transition\n            if (offsetLocal == offsetAdjusted) { \n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                int diff = nextLocal < nextAdjusted ? initialOffset : getOffset(nextLocal);\n                return diff;\n            }\n            else {\n\n                // Handling the case when we are on the standard time side\n                if (offsetLocal < offsetAdjusted) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal == nextAdjusted) {\n                        return offsetAdjusted;\n                    }\n                    else {\n                        int diff = nextLocal > instantAdjusted ? initialOffset : getOffset(nextLocal);\n                        return diff;\n                    }\n                }\n                // Handling the case when we are on the daylight saving time side\n                else {\n                    long prevLocal = previousTransition(instantAdjusted);\n                    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n                    if (prevLocal == prevAdjusted) {\n                        return offsetLocal; \n                    } \n                    else {\n                        int diff = prevLocal > prevAdjusted ? getOffset(prevAdjusted) : initialOffset;\n                        return diff;                        \n                    }\n                }\n\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..a64a26bd 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,54 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+    public int getOffsetFromLocal(long instantLocal) {\n+        // get the offset at instantLocal (first estimate)\n+        final int initialOffset = getOffset(instantLocal);\n+        final int offsetLocal = initialOffset; // rename offsetLocal to initialOffset\n+        // adjust instantLocal using the estimate and recalc the offset\n+        final long instantAdjusted = instantLocal - initialOffset;\n+        final int offsetAdjusted = getOffset(instantAdjusted);\n+        // if the offsets differ, we must be near a DST boundary\n+        if (offsetLocal != offsetAdjusted) {\n+\n+            // Handling the case when local time matches a transition\n+            if (offsetLocal == offsetAdjusted) { \n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                int diff = nextLocal < nextAdjusted ? initialOffset : getOffset(nextLocal);\n+                return diff;\n+            }\n+            else {\n+\n+                // Handling the case when we are on the standard time side\n+                if (offsetLocal < offsetAdjusted) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal == nextAdjusted) {\n+                        return offsetAdjusted;\n+                    }\n+                    else {\n+                        int diff = nextLocal > instantAdjusted ? initialOffset : getOffset(nextLocal);\n+                        return diff;\n+                    }\n+                }\n+                // Handling the case when we are on the daylight saving time side\n+                else {\n+                    long prevLocal = previousTransition(instantAdjusted);\n+                    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+                    if (prevLocal == prevAdjusted) {\n+                        return offsetLocal; \n+                    } \n+                    else {\n+                        int diff = prevLocal > prevAdjusted ? getOffset(prevAdjusted) : initialOffset;\n+                        return diff;                        \n+                    }\n+                }\n+\n+            }\n+        }\n+        return offsetAdjusted;\n+    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}