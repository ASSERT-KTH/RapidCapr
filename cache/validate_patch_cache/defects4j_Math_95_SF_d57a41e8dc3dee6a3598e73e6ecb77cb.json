{
    "patch": "protected double getInitialDomain(double p) {\n    double ret;\n    double d = getDenominatorDegreesOfFreedom();\n    // use mean\n    double mean = d / (d - 2.0);\n    double variance = 2 * d * d * (d + 1) / ((d - 2) * (d - 2) * (d - 4));\n    double stdDev = FastMath.sqrt(variance);\n    ret = mean - 4 * stdDev;\n    if (Double.isNaN(ret)) {\n        // In case no valid initial domain value can be found, simply return Double.NEGATIVE_INFINITY\n        return Double.NEGATIVE_INFINITY;\n    }\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97aef..887148b5b 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -140,13 +140,20 @@ public class FDistributionImpl\n      * @param p the desired probability for the critical value\n      * @return initial domain value\n      */\n-    protected double getInitialDomain(double p) {\n-        double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+protected double getInitialDomain(double p) {\n+    double ret;\n+    double d = getDenominatorDegreesOfFreedom();\n+    // use mean\n+    double mean = d / (d - 2.0);\n+    double variance = 2 * d * d * (d + 1) / ((d - 2) * (d - 2) * (d - 4));\n+    double stdDev = FastMath.sqrt(variance);\n+    ret = mean - 4 * stdDev;\n+    if (Double.isNaN(ret)) {\n+        // In case no valid initial domain value can be found, simply return Double.NEGATIVE_INFINITY\n+        return Double.NEGATIVE_INFINITY;\n     }\n+    return ret;\n+}\n     \n     /**\n      * Modify the numerator degrees of freedom.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}