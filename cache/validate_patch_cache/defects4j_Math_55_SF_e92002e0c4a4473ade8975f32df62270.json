{
    "patch": "      final double max01 = FastMath.max(FastMath.abs(v1.getX()), FastMath.abs(v2.getX()));\n      final double max02 = FastMath.max(FastMath.abs(v1.getY()), FastMath.abs(v2.getY()));\n      final double max12 = FastMath.max(FastMath.abs(v1.getZ()), FastMath.abs(v2.getZ()));\n      final double norm1 = FastMath.sqrt(FastMath.max(0.0, max01 * max01 + max02 * max02) + max12 * max12);\n      final double norm2 = FastMath.sqrt(FastMath.max(0.0, v1.getNormSq()) + v2.getNormSq());\n      double scale = norm1 * norm2;\n      \n      // handle zero and NaN separately, since infinities multiplied by zero give NaN\n      if (Double.isNaN(scale)) {\n          return new Vector3D(Double.NaN, Double.NaN, Double.NaN);\n      } else if (scale == 0) {\n          return Vector3D.ZERO;\n      }\n      \n      Vector3D w1 = new Vector3D(scale, v1);\n      final double factor = (v1.dotProduct(v2)) / (scale * scale);\n      Vector3D w2 = new Vector3D(factor, v2);\n      return w1.crossProduct(w2);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..b28709687 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,24 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+      final double max01 = FastMath.max(FastMath.abs(v1.getX()), FastMath.abs(v2.getX()));\n+      final double max02 = FastMath.max(FastMath.abs(v1.getY()), FastMath.abs(v2.getY()));\n+      final double max12 = FastMath.max(FastMath.abs(v1.getZ()), FastMath.abs(v2.getZ()));\n+      final double norm1 = FastMath.sqrt(FastMath.max(0.0, max01 * max01 + max02 * max02) + max12 * max12);\n+      final double norm2 = FastMath.sqrt(FastMath.max(0.0, v1.getNormSq()) + v2.getNormSq());\n+      double scale = norm1 * norm2;\n+      \n+      // handle zero and NaN separately, since infinities multiplied by zero give NaN\n+      if (Double.isNaN(scale)) {\n+          return new Vector3D(Double.NaN, Double.NaN, Double.NaN);\n+      } else if (scale == 0) {\n+          return Vector3D.ZERO;\n+      }\n+      \n+      Vector3D w1 = new Vector3D(scale, v1);\n+      final double factor = (v1.dotProduct(v2)) / (scale * scale);\n+      Vector3D w2 = new Vector3D(factor, v2);\n+      return w1.crossProduct(w2);\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}