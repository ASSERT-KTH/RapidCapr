{
    "patch": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n            String str = text.substring(position);\n            int index = -1;\n            for (String id : ALL_IDS) {\n                // compare the length of the candidate timezone ID with the remaining characters\n                if (str.startsWith(id) && (index == -1 || id.length() > ALL_IDS[index].length())) {\n                    index = Arrays.asList(ALL_IDS).indexOf(id);\n                }\n            }\n            if (index >= 0) {\n                bucket.setZone(DateTimeZone.forID(ALL_IDS[index]));\n                return position + ALL_IDS[index].length();\n            } else {\n                return ~position;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..1b6fc270 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2539,13 +2539,19 @@ public class DateTimeFormatterBuilder {\n \n         public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n             String str = text.substring(position);\n+            int index = -1;\n             for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n+                // compare the length of the candidate timezone ID with the remaining characters\n+                if (str.startsWith(id) && (index == -1 || id.length() > ALL_IDS[index].length())) {\n+                    index = Arrays.asList(ALL_IDS).indexOf(id);\n                 }\n             }\n-            return ~position;\n+            if (index >= 0) {\n+                bucket.setZone(DateTimeZone.forID(ALL_IDS[index]));\n+                return position + ALL_IDS[index].length();\n+            } else {\n+                return ~position;\n+            }\n         }\n     }\n ",
    "result_reason": "error: array required, but Set<String> found",
    "test_result": "ERROR"
}