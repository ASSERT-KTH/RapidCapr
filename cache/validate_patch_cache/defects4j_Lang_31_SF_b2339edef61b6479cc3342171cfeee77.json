{
    "patch": "public static boolean containsAny(char[] arr1, char[] arr2) {\n    if (arr1 == null || arr2 == null) {\n        return false;\n    }\n\n    boolean containsSupplementaryChars = containsSupplementaryChars(arr1) || containsSupplementaryChars(arr2);\n    if (!containsSupplementaryChars) {\n        return StringUtils.containsAny(new String(arr1), new String(arr2));\n    }\n    String str2 = new String(arr2);\n\n    for (int i = 0; i < arr1.length; i++) {\n        if (Character.isHighSurrogate(arr1[i])) {\n            int codePoint = Character.toCodePoint(arr1[i], arr1[i + 1]);\n            if (str2.indexOf(codePoint) >= 0) {\n                return true;\n            }\n            i++; // Skip next char to avoid checking it separately\n        } else if (str2.indexOf(arr1[i]) >= 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nprivate static boolean containsSupplementaryChars(char[] arr) {\n    for (int i = 0; i < arr.length; i++) {\n        if (Character.isHighSurrogate(arr[i])) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..e44b030d 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,40 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(char[] arr1, char[] arr2) {\n+    if (arr1 == null || arr2 == null) {\n+        return false;\n+    }\n+\n+    boolean containsSupplementaryChars = containsSupplementaryChars(arr1) || containsSupplementaryChars(arr2);\n+    if (!containsSupplementaryChars) {\n+        return StringUtils.containsAny(new String(arr1), new String(arr2));\n+    }\n+    String str2 = new String(arr2);\n+\n+    for (int i = 0; i < arr1.length; i++) {\n+        if (Character.isHighSurrogate(arr1[i])) {\n+            int codePoint = Character.toCodePoint(arr1[i], arr1[i + 1]);\n+            if (str2.indexOf(codePoint) >= 0) {\n+                return true;\n+            }\n+            i++; // Skip next char to avoid checking it separately\n+        } else if (str2.indexOf(arr1[i]) >= 0) {\n+            return true;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+private static boolean containsSupplementaryChars(char[] arr) {\n+    for (int i = 0; i < arr.length; i++) {\n+        if (Character.isHighSurrogate(arr[i])) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}