{
    "patch": "if (!constraintObj.hasReferenceName() && constraintObj.isRecordType()) {\n  for (String prop : constraintObj.getOwnPropertyNames()) {\n    if (!hasProperty(prop)) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n          .getLeastSupertype(propType);\n      defineInferredProperty(prop, typeToInfer, null);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..4961c978 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,16 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (!constraintObj.hasReferenceName() && constraintObj.isRecordType()) {\n+  for (String prop : constraintObj.getOwnPropertyNames()) {\n+    if (!hasProperty(prop)) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+          .getLeastSupertype(propType);\n+      defineInferredProperty(prop, typeToInfer, null);\n+    }\n+  }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warnings(s):",
    "test_result": "FAIL"
}