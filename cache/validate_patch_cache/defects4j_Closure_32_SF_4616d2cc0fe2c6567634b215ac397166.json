{
    "patch": "I apologize for the mistake. Here is the corrected code:\n\n```\nimport com.google.javascript.jscomp.SourceFile;\nimport com.google.javascript.rhino.SourcePosition;\nimport com.google.javascript.rhino.Token;\n\nimport java.util.*;\n\nenum WhitespaceOption {\n  /** Ignore leading and trailing whitespace. */\n  IGNORE,\n  /** Preserve all whitespace. */\n  PRESERVE,\n  /** Collapse multiple spaces into one, but do not remove leading/trailing whitespace. */\n  SINGLE_LINE,\n}\n\nenum State {\n  SEARCHING_ANNOTATION,\n  SEARCHING_VALUE,\n}\n\nclass ExtractionInfo {\n  String text;\n  Token token;\n\n  ExtractionInfo(String text, Token token) {\n    this.text = text;\n    this.token = token;\n  }\n}\n\nclass JsDocStream {\n  private ListIterator<String> lines;\n  private String prevLine;\n  private String line = \"\";\n  private int lineno = 0;\n  private int charno = -1;\n\n  JsDocStream(Iterable<String> lines) {\n    this.lines = Iterators.peekingIterator(lines.iterator());\n    nextLine();\n  }\n\n  private void nextLine() {\n    this.lineno++;\n    this.charno = -1;\n    if (this.lines.hasNext()) {\n      this.prevLine = this.line;\n      this.line = this.lines.next();\n    } else {\n      this.prevLine = this.line;\n      this.line = null;\n    }\n  }\n\n  boolean hasNext() {\n    return this.line != null;\n  }\n\n  private boolean atLastLine() {\n    return !this.lines.hasNext() && this.line.isEmpty();\n  }\n\n  Token getFirstTokenOfLine() {\n    Token token;\n    charno++;\n    int length = this.line.length();\n    while (charno < length && Character.isWhitespace(this.line.charAt(charno))) {\n      charno++;\n    }\n    if (charno >= length) {\n      // no tokens on this line\n      stopTokenizing();\n      return Token.EOF;\n    }\n\n    if (this.line.charAt(charno) == '*') {\n      charno++;\n      if (charno >= length || !Character.isWhitespace(this.line.charAt(charno))) {\n        stopTokenizing();\n        return Token.STAR;\n      }\n    }\n\n    int startCharno = charno;\n    charno = this.line.indexOf('*', charno);\n    if (charno < 0) {\n      if (atLastLine()) {\n        charno = length;\n      } else {\n        charno = length - 1;\n        token = Token.EOL;\n        nextLine();\n        this.charno = -1;\n        return token;\n      }\n    }\n\n    // This will handle /* at the end of the line.\n    if (charno == startCharno && charno == length - 1) {\n      stopTokenizing();\n      return Token.STAR;\n    }\n\n    String word = this.line.substring(startCharno, charno);\n    token = Token.stringToKeyword(word);\n    if (!Token.STRING_LITERALS.contains(token)) {\n      return Token.UNKNOWN;\n    }\n\n    return token;\n  }\n\n  String getRemainingJSDocLine() {\n    return this.line.substring(this.charno).trim();\n  }\n\n  int getLineno() {\n    return this.lineno;\n  }\n\n  int getCharno() {\n    return this.charno;\n  }\n\n  void stopTokenizing() {\n    this.line = null;\n  }\n\n  void update() {\n    int length = this.line.length();\n    this.charno++;\n    while (charno < length && Character.isWhitespace(this.line.charAt(charno))) {\n      charno++;\n    }\n    if (charno >= length) {\n      nextLine();\n    }\n  }\n}\n\nclass JsDocBuilder {\n  private List<String> lines;\n  private Set<SourceRange> ranges = new HashSet<>();\n\n  JsDocBuilder() {\n    this.lines = new ArrayList<>();\n  }\n\n  void markText(String text, int startLineno, int startCharno, int endLineno, int endCharno) {\n    lines.add(text);\n    ranges.add(new SourceRange(\n        new SourcePosition(startLineno, startCharno),\n        new SourcePosition(endLineno, endCharno)));\n  }\n\n  String getDocComment(SourceFile file) {\n    Collections.sort(lines);\n    StringBuilder builder = new StringBuilder(\"/**\\n\");\n    int lastLineno = -1;\n    int lastEndCharno = -1;\n    for (SourceRange range : ranges) {\n      int startLineno = range.getStart().getLine();\n      int startCharno = range.getStart().getCharno();\n      int endLineno = range.getEnd().getLine();\n      int endCharno = range.getEnd().getCharno();\n\n      if (startLineno > lastLineno) {\n        for (int i = lastLineno + 1; i < startLineno; i++) {\n          builder.append(\" * \\n\");\n       ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..48675d32 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,108 +1326,180 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n+I apologize for the mistake. Here is the corrected code:\n \n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n-    }\n+```\n+import com.google.javascript.jscomp.SourceFile;\n+import com.google.javascript.rhino.SourcePosition;\n+import com.google.javascript.rhino.Token;\n \n-    stream.update();\n-    int startLineno = stream.getLineno();\n-    int startCharno = stream.getCharno() + 1;\n+import java.util.*;\n \n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n-    if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n-    }\n+enum WhitespaceOption {\n+  /** Ignore leading and trailing whitespace. */\n+  IGNORE,\n+  /** Preserve all whitespace. */\n+  PRESERVE,\n+  /** Collapse multiple spaces into one, but do not remove leading/trailing whitespace. */\n+  SINGLE_LINE,\n+}\n \n-    StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n+enum State {\n+  SEARCHING_ANNOTATION,\n+  SEARCHING_VALUE,\n+}\n \n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n+class ExtractionInfo {\n+  String text;\n+  Token token;\n \n-    boolean ignoreStar = false;\n+  ExtractionInfo(String text, Token token) {\n+    this.text = text;\n+    this.token = token;\n+  }\n+}\n \n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n+class JsDocStream {\n+  private ListIterator<String> lines;\n+  private String prevLine;\n+  private String line = \"\";\n+  private int lineno = 0;\n+  private int charno = -1;\n \n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n+  JsDocStream(Iterable<String> lines) {\n+    this.lines = Iterators.peekingIterator(lines.iterator());\n+    nextLine();\n+  }\n \n-            builder.append('*');\n-          }\n+  private void nextLine() {\n+    this.lineno++;\n+    this.charno = -1;\n+    if (this.lines.hasNext()) {\n+      this.prevLine = this.line;\n+      this.line = this.lines.next();\n+    } else {\n+      this.prevLine = this.line;\n+      this.line = null;\n+    }\n+  }\n \n-          token = next();\n-          continue;\n+  boolean hasNext() {\n+    return this.line != null;\n+  }\n \n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n+  private boolean atLastLine() {\n+    return !this.lines.hasNext() && this.line.isEmpty();\n+  }\n \n-          ignoreStar = true;\n-          token = next();\n-          continue;\n+  Token getFirstTokenOfLine() {\n+    Token token;\n+    charno++;\n+    int length = this.line.length();\n+    while (charno < length && Character.isWhitespace(this.line.charAt(charno))) {\n+      charno++;\n+    }\n+    if (charno >= length) {\n+      // no tokens on this line\n+      stopTokenizing();\n+      return Token.EOF;\n+    }\n \n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n+    if (this.line.charAt(charno) == '*') {\n+      charno++;\n+      if (charno >= length || !Character.isWhitespace(this.line.charAt(charno))) {\n+        stopTokenizing();\n+        return Token.STAR;\n+      }\n+    }\n \n-              // All tokens must be separated by a space.\n+    int startCharno = charno;\n+    charno = this.line.indexOf('*', charno);\n+    if (charno < 0) {\n+      if (atLastLine()) {\n+        charno = length;\n+      } else {\n+        charno = length - 1;\n+        token = Token.EOL;\n+        nextLine();\n+        this.charno = -1;\n+        return token;\n+      }\n+    }\n \n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n+    // This will handle /* at the end of the line.\n+    if (charno == startCharno && charno == length - 1) {\n+      stopTokenizing();\n+      return Token.STAR;\n+    }\n \n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n+    String word = this.line.substring(startCharno, charno);\n+    token = Token.stringToKeyword(word);\n+    if (!Token.STRING_LITERALS.contains(token)) {\n+      return Token.UNKNOWN;\n+    }\n \n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+    return token;\n+  }\n \n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n+  String getRemainingJSDocLine() {\n+    return this.line.substring(this.charno).trim();\n+  }\n \n-            return new ExtractionInfo(multilineText, token);\n-          }\n+  int getLineno() {\n+    return this.lineno;\n+  }\n \n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n+  int getCharno() {\n+    return this.charno;\n+  }\n \n-          line = stream.getRemainingJSDocLine();\n+  void stopTokenizing() {\n+    this.line = null;\n+  }\n \n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n+  void update() {\n+    int length = this.line.length();\n+    this.charno++;\n+    while (charno < length && Character.isWhitespace(this.line.charAt(charno))) {\n+      charno++;\n+    }\n+    if (charno >= length) {\n+      nextLine();\n+    }\n+  }\n+}\n \n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n+class JsDocBuilder {\n+  private List<String> lines;\n+  private Set<SourceRange> ranges = new HashSet<>();\n+\n+  JsDocBuilder() {\n+    this.lines = new ArrayList<>();\n   }\n \n+  void markText(String text, int startLineno, int startCharno, int endLineno, int endCharno) {\n+    lines.add(text);\n+    ranges.add(new SourceRange(\n+        new SourcePosition(startLineno, startCharno),\n+        new SourcePosition(endLineno, endCharno)));\n+  }\n+\n+  String getDocComment(SourceFile file) {\n+    Collections.sort(lines);\n+    StringBuilder builder = new StringBuilder(\"/**\\n\");\n+    int lastLineno = -1;\n+    int lastEndCharno = -1;\n+    for (SourceRange range : ranges) {\n+      int startLineno = range.getStart().getLine();\n+      int startCharno = range.getStart().getCharno();\n+      int endLineno = range.getEnd().getLine();\n+      int endCharno = range.getEnd().getCharno();\n+\n+      if (startLineno > lastLineno) {\n+        for (int i = lastLineno + 1; i < startLineno; i++) {\n+          builder.append(\" * \\n\");\n+       \n+\n \n   /**\n    * Extracts the top-level block comment from the JsDoc comment, if any.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}