{
    "patch": "        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            if (!resetFields) {\n              throw e;\n            }\n            for (int i = 0; i < count; i++) {\n                SavedField savedField = savedFields[i];\n                if (savedField.valueSmallerThanMin(millis)) {\n                    i = savedField.setSavedFieldValue(millis, iSavedFields, i);\n                    millis = savedFields[i].set(millis, true);\n                } else if (savedField.valueGreaterThanMax(millis)) {\n                    i = savedField.setSavedFieldValue(millis, iSavedFields, i);\n                    millis = savedFields[i].set(millis, true);\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..0406eee8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,28 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            if (!resetFields) {\n+              throw e;\n+            }\n+            for (int i = 0; i < count; i++) {\n+                SavedField savedField = savedFields[i];\n+                if (savedField.valueSmallerThanMin(millis)) {\n+                    i = savedField.setSavedFieldValue(millis, iSavedFields, i);\n+                    millis = savedFields[i].set(millis, true);\n+                } else if (savedField.valueGreaterThanMax(millis)) {\n+                    i = savedField.setSavedFieldValue(millis, iSavedFields, i);\n+                    millis = savedFields[i].set(millis, true);\n+                }\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}