{
    "patch": "attachLiteralTypes(n);\nif (n.getType() == Token.FUNCTION) {\n  if (parent.isName() && parent.getParent().getType() == Token.CATCH) {\n    return;  // Function is the exception handler parameter name.\n  } else if (NodeUtil.isFunctionExpression(n) ||\n      NodeUtil.isFunctionDeclaration(n) && parent.getType() == Token.SCRIPT ||\n      parent.getType() == Token.BLOCK && (parent.getParent().isFor() ||\n                                           parent.getParent().isForIn() ||\n                                           parent.getParent().isForOf())) {\n    defineDeclaredFunction(n, parent);\n  }\n} else if (n.getType() == Token.CATCH) {\n  defineCatch(n, parent);\n} else if (n.getType() == Token.VAR) {\n  defineVar(n, parent);\n} else if (n.getType() == Token.LP &&\n    parent.getParent() == scope.getRootNode()) {\n  handleFunctionInputs(parent.getParent());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..aa024dd4 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,25 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+attachLiteralTypes(n);\n+if (n.getType() == Token.FUNCTION) {\n+  if (parent.isName() && parent.getParent().getType() == Token.CATCH) {\n+    return;  // Function is the exception handler parameter name.\n+  } else if (NodeUtil.isFunctionExpression(n) ||\n+      NodeUtil.isFunctionDeclaration(n) && parent.getType() == Token.SCRIPT ||\n+      parent.getType() == Token.BLOCK && (parent.getParent().isFor() ||\n+                                           parent.getParent().isForIn() ||\n+                                           parent.getParent().isForOf())) {\n+    defineDeclaredFunction(n, parent);\n+  }\n+} else if (n.getType() == Token.CATCH) {\n+  defineCatch(n, parent);\n+} else if (n.getType() == Token.VAR) {\n+  defineVar(n, parent);\n+} else if (n.getType() == Token.LP &&\n+    parent.getParent() == scope.getRootNode()) {\n+  handleFunctionInputs(parent.getParent());\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}