{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    double percent = 0.0;\n    try {\n        // Parse the JSON string into a JsonNode object using Jackson\n        ObjectMapper objectMapper = new ObjectMapper();\n        JsonNode rootNode = objectMapper.readValue(jsonStr, JsonNode.class);\n\n        // Retrieve the \"stats\" node and extract the values of \"typed\" and \"total\"\n        JsonNode statsNode = rootNode.get(\"stats\");\n        int typedCount = statsNode.get(\"typed\").asInt();\n        int totalCount = statsNode.get(\"total\").asInt();\n\n        // Calculate the percentage of typed characters\n        percent = ((double) typedCount / (double) totalCount) * 100.0;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return percent;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..a9c53ddd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    double percent = 0.0;\n+    try {\n+        // Parse the JSON string into a JsonNode object using Jackson\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        JsonNode rootNode = objectMapper.readValue(jsonStr, JsonNode.class);\n+\n+        // Retrieve the \"stats\" node and extract the values of \"typed\" and \"total\"\n+        JsonNode statsNode = rootNode.get(\"stats\");\n+        int typedCount = statsNode.get(\"typed\").asInt();\n+        int totalCount = statsNode.get(\"total\").asInt();\n+\n+        // Calculate the percentage of typed characters\n+        percent = ((double) typedCount / (double) totalCount) * 100.0;\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+    }\n+    return percent;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}