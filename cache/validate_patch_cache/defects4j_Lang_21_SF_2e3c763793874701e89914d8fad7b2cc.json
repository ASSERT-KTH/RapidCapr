{
    "patch": "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The calendar must not be null\");\n    }\n    \n    if (cal1.getTimeZone().inDaylightTime(cal1.getTime()) != cal2.getTimeZone().inDaylightTime(cal2.getTime())) {\n        // If one calendar is in DST while the other is not, adjust the DST offset of the DST calendar\n        Calendar dstCalendar = cal1.getTimeZone().inDaylightTime(cal1.getTime()) ? cal1 : cal2;\n        Calendar nonDstCalendar = dstCalendar == cal1 ? cal2 : cal1;\n        int dstOffset = dstCalendar.get(Calendar.DST_OFFSET);\n        int totalOffset = nonDstCalendar.get(Calendar.ZONE_OFFSET) + nonDstCalendar.get(Calendar.DST_OFFSET);\n        dstCalendar.setTimeInMillis(dstCalendar.getTimeInMillis() + totalOffset - dstOffset);\n    }\n\n    // Compare the fields\n    int[] fields = {Calendar.MILLISECOND, Calendar.SECOND, Calendar.MINUTE, Calendar.HOUR_OF_DAY, Calendar.DAY_OF_YEAR, Calendar.YEAR, Calendar.ERA};\n    for (int field : fields) {\n        if (cal1.get(field) != cal2.get(field)) {\n            return false;\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/DateUtils.java b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\nindex 9a24c00f..93a4621f 100644\n--- a/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n@@ -255,20 +255,31 @@ public class DateUtils {\n      * @throws IllegalArgumentException if either date is <code>null</code>\n      * @since 2.1\n      */\n-    public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n-        if (cal1 == null || cal2 == null) {\n-            throw new IllegalArgumentException(\"The date must not be null\");\n+public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n+    if (cal1 == null || cal2 == null) {\n+        throw new IllegalArgumentException(\"The calendar must not be null\");\n+    }\n+    \n+    if (cal1.getTimeZone().inDaylightTime(cal1.getTime()) != cal2.getTimeZone().inDaylightTime(cal2.getTime())) {\n+        // If one calendar is in DST while the other is not, adjust the DST offset of the DST calendar\n+        Calendar dstCalendar = cal1.getTimeZone().inDaylightTime(cal1.getTime()) ? cal1 : cal2;\n+        Calendar nonDstCalendar = dstCalendar == cal1 ? cal2 : cal1;\n+        int dstOffset = dstCalendar.get(Calendar.DST_OFFSET);\n+        int totalOffset = nonDstCalendar.get(Calendar.ZONE_OFFSET) + nonDstCalendar.get(Calendar.DST_OFFSET);\n+        dstCalendar.setTimeInMillis(dstCalendar.getTimeInMillis() + totalOffset - dstOffset);\n+    }\n+\n+    // Compare the fields\n+    int[] fields = {Calendar.MILLISECOND, Calendar.SECOND, Calendar.MINUTE, Calendar.HOUR_OF_DAY, Calendar.DAY_OF_YEAR, Calendar.YEAR, Calendar.ERA};\n+    for (int field : fields) {\n+        if (cal1.get(field) != cal2.get(field)) {\n+            return false;\n         }\n-        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n-                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n-                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n-                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n-                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n-                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n-                cal1.getClass() == cal2.getClass());\n     }\n \n+    return true;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Parses a string representing a date by trying a variety of different parsers.</p>",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}