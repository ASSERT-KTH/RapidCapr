{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix q = dec.getV();\n    final RealMatrix d = dec.getD();\n\n    // Initialize X and Y matrix.\n    final RealMatrix x = MatrixUtils.createRealMatrix(n, n);\n    final RealMatrix y = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        x.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n        y.setEntry(i, i, 1.0 / Math.sqrt(d.getEntry(i, i)));\n    }\n\n    // Iterate until convergence.\n    RealMatrix qT = q.transpose();\n    RealMatrix prevSqrt = x.multiply(qT);\n    while (true) {\n        // Update X and Y.\n        final RealMatrix invSqrt = prevSqrt.inverse();\n        final RealMatrix newX = x.add(y.multiply(invSqrt)).scalarMultiply(0.5);\n        final RealMatrix newY = y.add(newX.multiply(invSqrt).subtract(x.multiply(newY))).scalarMultiply(0.5);\n\n        // Compute new square root candidate.\n        RealMatrix newSqrt = newX.multiply(qT);\n\n        // Check for convergence.\n        final double delta = newSqrt.subtract(prevSqrt).getNorm();\n        if (delta < 1e-6) {\n            return newSqrt;\n        }\n\n        // Update previous square root.\n        prevSqrt = newSqrt;\n        x.copySubMatrix(newX.getData(), 0, 0);\n        y.copySubMatrix(newY.getData(), 0, 0);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..acf3e6048 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,42 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix q = dec.getV();\n+    final RealMatrix d = dec.getD();\n+\n+    // Initialize X and Y matrix.\n+    final RealMatrix x = MatrixUtils.createRealMatrix(n, n);\n+    final RealMatrix y = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        x.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n+        y.setEntry(i, i, 1.0 / Math.sqrt(d.getEntry(i, i)));\n     }\n+\n+    // Iterate until convergence.\n+    RealMatrix qT = q.transpose();\n+    RealMatrix prevSqrt = x.multiply(qT);\n+    while (true) {\n+        // Update X and Y.\n+        final RealMatrix invSqrt = prevSqrt.inverse();\n+        final RealMatrix newX = x.add(y.multiply(invSqrt)).scalarMultiply(0.5);\n+        final RealMatrix newY = y.add(newX.multiply(invSqrt).subtract(x.multiply(newY))).scalarMultiply(0.5);\n+\n+        // Compute new square root candidate.\n+        RealMatrix newSqrt = newX.multiply(qT);\n+\n+        // Check for convergence.\n+        final double delta = newSqrt.subtract(prevSqrt).getNorm();\n+        if (delta < 1e-6) {\n+            return newSqrt;\n+        }\n+\n+        // Update previous square root.\n+        prevSqrt = newSqrt;\n+        x.copySubMatrix(newX.getData(), 0, 0);\n+        y.copySubMatrix(newY.getData(), 0, 0);\n+    }\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}