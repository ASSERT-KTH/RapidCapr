{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        boolean handled = false;\n        if (Character.isHighSurrogate(input.charAt(pos))) {\n            if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {\n                // we have a valid surrogate pair, so write it out and skip ahead\n                int codepoint = Character.toCodePoint(input.charAt(pos), input.charAt(pos + 1));\n                if (codepoint > 0xFFFF) {\n                    // Supplementary character must be represented using a single escape\n                    out.write(String.format(\"&#%d;\", codepoint));\n                } else {\n                    out.write(input.charAt(pos));\n                    out.write(input.charAt(pos + 1));\n                }\n                pos += 2;\n                handled = true;\n            }\n        }\n        if (!handled) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                int codepoint = Character.codePointAt(input, pos);\n                if (codepoint > 0xFFFF) {\n                    // Supplementary character must be represented using a single escape\n                    out.write(String.format(\"&#%d;\", codepoint));\n                } else {\n                    out.write(codepoint);\n                }\n                pos += Character.charCount(codepoint);\n            } else {\n                pos += consumed;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..5d239e1e 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,49 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        boolean handled = false;\n+        if (Character.isHighSurrogate(input.charAt(pos))) {\n+            if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {\n+                // we have a valid surrogate pair, so write it out and skip ahead\n+                int codepoint = Character.toCodePoint(input.charAt(pos), input.charAt(pos + 1));\n+                if (codepoint > 0xFFFF) {\n+                    // Supplementary character must be represented using a single escape\n+                    out.write(String.format(\"&#%d;\", codepoint));\n+                } else {\n+                    out.write(input.charAt(pos));\n+                    out.write(input.charAt(pos + 1));\n+                }\n+                pos += 2;\n+                handled = true;\n+            }\n         }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n+        if (!handled) {\n             int consumed = translate(input, pos, out);\n             if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                int codepoint = Character.codePointAt(input, pos);\n+                if (codepoint > 0xFFFF) {\n+                    // Supplementary character must be represented using a single escape\n+                    out.write(String.format(\"&#%d;\", codepoint));\n+                } else {\n+                    out.write(codepoint);\n+                }\n+                pos += Character.charCount(codepoint);\n+            } else {\n+                pos += consumed;\n             }\n         }\n     }\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<[\ud842\udfb7]A> but was:<[&#134071;]A>",
    "test_result": "FAIL"
}