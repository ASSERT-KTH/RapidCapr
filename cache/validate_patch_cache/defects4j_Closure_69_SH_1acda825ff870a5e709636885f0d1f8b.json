{
    "patch": "      if (functionType.hasInstanceType()) {\n        Node parent = n.getParent();\n        if (parent != null &&\n            parent.isGetProp() &&\n            parent.getLastChild() == n) {\n          JSType parentType = getJSType(parent.getFirstChild()).restrictByNotNullOrUndefined();\n          if (parentType != null &&\n              parentType.isSubtypeOf(\n                  registry.createObjectTypeWithProperty(\n                      JSTypeRegistry.QMARK_FUNCTION_PROTOTYPE, functionType.getInstanceType()))) {\n            return;\n          }\n        }\n        report(t, n, TYPE_THIS_EXPR_MISMATCH);\n        return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..30338330 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.hasInstanceType()) {\n+        Node parent = n.getParent();\n+        if (parent != null &&\n+            parent.isGetProp() &&\n+            parent.getLastChild() == n) {\n+          JSType parentType = getJSType(parent.getFirstChild()).restrictByNotNullOrUndefined();\n+          if (parentType != null &&\n+              parentType.isSubtypeOf(\n+                  registry.createObjectTypeWithProperty(\n+                      JSTypeRegistry.QMARK_FUNCTION_PROTOTYPE, functionType.getInstanceType()))) {\n+            return;\n+          }\n+        }\n+        report(t, n, TYPE_THIS_EXPR_MISMATCH);\n+        return;\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}