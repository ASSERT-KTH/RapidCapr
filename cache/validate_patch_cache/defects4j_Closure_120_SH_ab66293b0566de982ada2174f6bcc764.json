{
    "patch": "if (block.isFunction) {\n    Reference initRef = getInitializingReferenceForConstants();\n    if (initRef == null) {\n        initRef = getInitializingReference();\n    }\n    if (initRef == null || initRef.getParent() == ref.getParent()) {\n        // Check that there is no other initializing reference or\n        // assignment within the function block.\n        for (BasicBlock b = block; b != null; b = b.getParent()) {\n            int idx = b.getFirstStatementIndex();\n            while (idx < b.getStatements().size() && b.getStatement(idx) != ref) {\n                if (isInitializingDeclarationAt(idx)\n                        || (b instanceof Function &&\n                            ((Function) b).getOneAndOnlyAssignment(variable) == b.getStatement(idx))) {\n                    return false;\n                }\n                ++idx;\n            }\n        }\n        return true;\n    }\n} else if (block.isLoop && block != ref.getBasicBlock()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..6698758e 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,28 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (block.isFunction) {\n+    Reference initRef = getInitializingReferenceForConstants();\n+    if (initRef == null) {\n+        initRef = getInitializingReference();\n+    }\n+    if (initRef == null || initRef.getParent() == ref.getParent()) {\n+        // Check that there is no other initializing reference or\n+        // assignment within the function block.\n+        for (BasicBlock b = block; b != null; b = b.getParent()) {\n+            int idx = b.getFirstStatementIndex();\n+            while (idx < b.getStatements().size() && b.getStatement(idx) != ref) {\n+                if (isInitializingDeclarationAt(idx)\n+                        || (b instanceof Function &&\n+                            ((Function) b).getOneAndOnlyAssignment(variable) == b.getStatement(idx))) {\n+                    return false;\n+                }\n+                ++idx;\n+            }\n+        }\n+        return true;\n+    }\n+} else if (block.isLoop && block != ref.getBasicBlock()) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}