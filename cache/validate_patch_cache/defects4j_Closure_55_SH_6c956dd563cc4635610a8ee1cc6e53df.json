{
    "patch": "if (NodeUtil.isFunctionExpression(n)) {\n    Node parent = n.getParent();\n    if (parent == null) {\n        return false;\n    }\n    int parentType = parent.getType();\n    if (parentType == Token.CALL || parentType == Token.NEW ||\n        NodeUtil.isExpressionNode(parent)) {\n        return false;\n    }\n    if (parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN ||\n        parentType == Token.VAR || parentType == Token.RETURN ||\n        (parentType == Token.BLOCK && parent.getParent() != null && parent.getParent().getType() == Token.FUNCTION)) {\n        return true;\n    }\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..d81b2fd9 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,23 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (NodeUtil.isFunctionExpression(n)) {\n+    Node parent = n.getParent();\n+    if (parent == null) {\n+        return false;\n+    }\n+    int parentType = parent.getType();\n+    if (parentType == Token.CALL || parentType == Token.NEW ||\n+        NodeUtil.isExpressionNode(parent)) {\n+        return false;\n+    }\n+    if (parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN ||\n+        parentType == Token.VAR || parentType == Token.RETURN ||\n+        (parentType == Token.BLOCK && parent.getParent() != null && parent.getParent().getType() == Token.FUNCTION)) {\n+        return true;\n+    }\n+}\n+return false;\n   }\n \n   /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}