{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = NodeUtil.getFunctionBody(fnNode);\n\n    boolean hasSideEffects = false;\n    if (block.hasChildren() && block.getLastChild().isReturn()) {\n      Node stmt = block.getLastChild();\n      hasSideEffects = stmt.getFirstChild() != null\n          && NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n    }\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node paramList = NodeUtil.getFunctionParameters(fnNode);\n    Node fnParam = paramList.getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg != null) {\n          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n            return CanInlineResult.NO;\n          }\n          // Check for arguments that are evaluated more than once.\n          // Note: Unlike block inlining, there it is not possible that a\n          // parameter reference will be in a loop.\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        } else if (NodeUtil.mayReceiveContextArguments(fnNode)) {\n          switch (ParamElisionPolicy.valueOf(paramList.getString())) {\n            case DISALLOW:\n              return CanInlineResult.NO;\n            case ALLOW:\n              break;\n            default:\n              throw new IllegalStateException(\"Unknown ParamElisionPolicy: \" + paramList.getString());\n          }\n          return CanInlineResult.NO;\n        }\n\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..d05be9a6 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -692,16 +692,15 @@ class FunctionInjector {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n+    Node block = NodeUtil.getFunctionBody(fnNode);\n \n     boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n+    if (block.hasChildren() && block.getLastChild().isReturn()) {\n+      Node stmt = block.getLastChild();\n+      hasSideEffects = stmt.getFirstChild() != null\n+          && NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n     }\n+\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n@@ -722,7 +721,8 @@ class FunctionInjector {\n     }\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+    Node paramList = NodeUtil.getFunctionParameters(fnNode);\n+    Node fnParam = paramList.getFirstChild();\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n@@ -734,10 +734,19 @@ class FunctionInjector {\n           // Note: Unlike block inlining, there it is not possible that a\n           // parameter reference will be in a loop.\n           if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+              && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n             return CanInlineResult.NO;\n           }\n+        } else if (NodeUtil.mayReceiveContextArguments(fnNode)) {\n+          switch (ParamElisionPolicy.valueOf(paramList.getString())) {\n+            case DISALLOW:\n+              return CanInlineResult.NO;\n+            case ALLOW:\n+              break;\n+            default:\n+              throw new IllegalStateException(\"Unknown ParamElisionPolicy: \" + paramList.getString());\n+          }\n+          return CanInlineResult.NO;\n         }\n \n         // Move to the next name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}