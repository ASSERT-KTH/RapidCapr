{
    "patch": "public static double getTypedPercent(String js) {\n    Pattern pattern = Pattern.compile(\"/\\\\*(.|[\\\\r\\\\n])*?\\\\*/|//(.*?)((?=\\\\n)|$)\", Pattern.DOTALL);\n    String textWithoutComments = pattern.matcher(js).replaceAll(\"\");\n    int totalLines = textWithoutComments.split(\"\\n\").length;\n    int typedLines = 0;\n    Pattern typedPattern = Pattern.compile(\"^(\\\\s*)((const|let|var)\\\\s+[a-zA-Z]\\\\w*:|function\\\\s+[a-zA-Z]\\\\w*\\\\s*\\\\()\");\n    Matcher matcher = typedPattern.matcher(textWithoutComments);\n    while (matcher.find()) {\n        typedLines++;\n    }\n    return (double) typedLines / totalLines * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..d1eb157b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    Pattern pattern = Pattern.compile(\"/\\\\*(.|[\\\\r\\\\n])*?\\\\*/|//(.*?)((?=\\\\n)|$)\", Pattern.DOTALL);\n+    String textWithoutComments = pattern.matcher(js).replaceAll(\"\");\n+    int totalLines = textWithoutComments.split(\"\\n\").length;\n+    int typedLines = 0;\n+    Pattern typedPattern = Pattern.compile(\"^(\\\\s*)((const|let|var)\\\\s+[a-zA-Z]\\\\w*:|function\\\\s+[a-zA-Z]\\\\w*\\\\s*\\\\()\");\n+    Matcher matcher = typedPattern.matcher(textWithoutComments);\n+    while (matcher.find()) {\n+        typedLines++;\n+    }\n+    return (double) typedLines / totalLines * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}