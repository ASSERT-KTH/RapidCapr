{
    "patch": "public Fraction reduce() {\n    int n = numerator;\n    int d = denominator;\n    int gcd = 1;\n\n    if (n == 0) {\n        return this;\n    }\n\n    if (n < 0) {\n        n = -n;\n    }\n\n    // Find gcd of absolute value of n and d\n    for (int i = Math.min(n, d); i > 1; i--) {\n        if (n % i == 0 && d % i == 0) {\n            gcd = i;\n            break;\n        }\n    }\n\n    // Create the reduced fraction\n    if (gcd > 1) {\n        n /= gcd;\n        d /= gcd;\n    }\n\n    if (numerator < 0 && denominator < 0) {\n        n = -n;\n        d = -d;\n    }\n\n    return Fraction.getFraction(n, d);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..4ea1689d 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,14 +462,41 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n+public Fraction reduce() {\n+    int n = numerator;\n+    int d = denominator;\n+    int gcd = 1;\n+\n+    if (n == 0) {\n+        return this;\n+    }\n+\n+    if (n < 0) {\n+        n = -n;\n+    }\n+\n+    // Find gcd of absolute value of n and d\n+    for (int i = Math.min(n, d); i > 1; i--) {\n+        if (n % i == 0 && d % i == 0) {\n+            gcd = i;\n+            break;\n         }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n     }\n \n+    // Create the reduced fraction\n+    if (gcd > 1) {\n+        n /= gcd;\n+        d /= gcd;\n+    }\n+\n+    if (numerator < 0 && denominator < 0) {\n+        n = -n;\n+        d = -d;\n+    }\n+\n+    return Fraction.getFraction(n, d);\n+}\n+\n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>\n      * ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<-2> but was:<2>",
    "test_result": "FAIL"
}