{
    "patch": "public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (Double.isNaN(mean)) {\n            mean += value;\n        } else {\n            mean = MathUtils.reducePrecision(mean + ((value - mean) / (n + 1)));\n        }\n        if (Double.isNaN(variance)) {\n            variance = 0.0;\n            deviation = 0.0;\n            skewness = 0.0;\n            kurtosis = -3.0;\n        } else {\n            double oldM = m;\n            double oldS = s;\n            n++;\n            m = oldM + (value - oldM) / n;\n            s = oldS + (value - oldM) * (value - m);\n            if (n > 1) {\n                skewness = skewnessImpl.evaluate(n, m, Math.sqrt(s / (n - 1)));\n                kurtosis = kurtosisImpl.evaluate(n, m, s);\n                deviation = Math.sqrt(variance);\n            } else {\n                deviation = 0.0;\n                skewness = 0.0;\n                kurtosis = Double.NaN;\n            }\n            variance = s / (n - 1);\n        }\n        if (Double.isNaN(geoMean)) {\n            geoMean = value;\n        } else {\n            geoMean *= value;\n            MathUtils.checkFinite(geoMean);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..90189dcb2 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,25 +146,49 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n+public void addValue(double value) {\n         sumImpl.increment(value);\n         sumsqImpl.increment(value);\n         minImpl.increment(value);\n         maxImpl.increment(value);\n         sumLogImpl.increment(value);\n         secondMoment.increment(value);\n+\n         // If mean, variance or geomean have been overridden,\n         // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n+        if (Double.isNaN(mean)) {\n+            mean += value;\n+        } else {\n+            mean = MathUtils.reducePrecision(mean + ((value - mean) / (n + 1)));\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+        if (Double.isNaN(variance)) {\n+            variance = 0.0;\n+            deviation = 0.0;\n+            skewness = 0.0;\n+            kurtosis = -3.0;\n+        } else {\n+            double oldM = m;\n+            double oldS = s;\n+            n++;\n+            m = oldM + (value - oldM) / n;\n+            s = oldS + (value - oldM) * (value - m);\n+            if (n > 1) {\n+                skewness = skewnessImpl.evaluate(n, m, Math.sqrt(s / (n - 1)));\n+                kurtosis = kurtosisImpl.evaluate(n, m, s);\n+                deviation = Math.sqrt(variance);\n+            } else {\n+                deviation = 0.0;\n+                skewness = 0.0;\n+                kurtosis = Double.NaN;\n+            }\n+            variance = s / (n - 1);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+        if (Double.isNaN(geoMean)) {\n+            geoMean = value;\n+        } else {\n+            geoMean *= value;\n+            MathUtils.checkFinite(geoMean);\n         }\n-        n++;\n     }\n \n     /**",
    "result_reason": "error: no suitable method found for isNaN(Mean)",
    "test_result": "ERROR"
}