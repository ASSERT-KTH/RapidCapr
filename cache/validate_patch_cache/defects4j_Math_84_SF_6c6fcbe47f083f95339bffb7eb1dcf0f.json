{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    final double delta = 0.5;\n    final double contraction = 0.5;\n    final double expansion = 2;\n    final double shrink = 0.5;\n\n    int iter = 0;\n    RealPointValuePair best = simplex[0];\n\n    while (iter < maxIterations) {\n\n        // evaluate simplex vertices\n        evaluateSimplex(comparator);\n\n        // keep track of the best point\n        if (comparator.compare(simplex[0], best) < 0) {\n            best = simplex[0];\n        }\n\n        // compute the centroid of the simplex (excluding the worst point)\n        double[] centroid = new double[dim];\n        for (int i = 0; i < dim; i++) {\n            for (int j = 0; j < n; j++) {\n                if (j != dim) {\n                    centroid[i] += simplex[j].getPoint()[i];\n                }\n            }\n            centroid[i] /= dim;\n        }\n\n        // perform a reflection step\n        final double[] xR = new double[dim];\n        for (int i = 0; i < dim; i++) {\n            xR[i] = centroid[i] + delta * (centroid[i] - simplex[dim].getPoint()[i]);\n        }\n        final RealPointValuePair reflected = new RealPointValuePair(xR, computeObjectiveValue(xR));\n\n        if (comparator.compare(simplex[0], reflected) > 0 && comparator.compare(reflected, simplex[n - 1]) <= 0) {\n            // accept the reflected point\n            simplex[dim] = reflected;\n\n        } else if (comparator.compare(reflected, simplex[0]) < 0) {\n\n            // compute the expanded point\n            final double[] xE = new double[dim];\n            for (int i = 0; i < dim; i++) {\n                xE[i] = centroid[i] + expansion * (xR[i] - centroid[i]);\n            }\n            final RealPointValuePair expanded = new RealPointValuePair(xE, computeObjectiveValue(xE));\n\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded point\n                simplex[dim] = expanded;\n            } else {\n                // accept the reflected point\n                simplex[dim] = reflected;\n            }\n\n        } else {\n\n            // compute the contracted point\n            final double[] xC = new double[dim];\n            for (int i = 0; i < dim; i++) {\n                xC[i] = centroid[i] + contraction * (simplex[dim].getPoint()[i] - centroid[i]);\n            }\n            final RealPointValuePair contracted = new RealPointValuePair(xC, computeObjectiveValue(xC));\n\n            if (comparator.compare(contracted, simplex[n - 1]) < 0) {\n                // accept the contracted point\n                simplex[dim] = contracted;\n            } else {\n                // shrink the simplex\n                for (int i = 1; i < n; i++) {\n                    final double[] x = simplex[i].getPoint();\n                    for (int j = 0; j < dim; j++) {\n                        x[j] = best.getPoint()[j] + shrink * (x[j] - best.getPoint()[j]);\n                    }\n                    simplex[i] = new RealPointValuePair(x, computeObjectiveValue(x));\n                }\n            }\n\n        }\n\n        // check convergence\n        double size = 0;\n        for (int i = 0; i < dim; i++) {\n            size += Math.pow(simplex[0].getPoint()[i] - simplex[n - 1].getPoint()[i], 2);\n        }\n        size = Math.sqrt(size);\n        if (size < convergenceThreshold) {\n            return;\n        }\n\n        // increment the iteration counter\n        iter++;\n\n    }\n\n    // maximum number of iterations reached\n    return;\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..38ab4e3f4 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,111 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    final double delta = 0.5;\n+    final double contraction = 0.5;\n+    final double expansion = 2;\n+    final double shrink = 0.5;\n \n-            incrementIterationsCounter();\n+    int iter = 0;\n+    RealPointValuePair best = simplex[0];\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+    while (iter < maxIterations) {\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // evaluate simplex vertices\n+        evaluateSimplex(comparator);\n+\n+        // keep track of the best point\n+        if (comparator.compare(simplex[0], best) < 0) {\n+            best = simplex[0];\n+        }\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+        // compute the centroid of the simplex (excluding the worst point)\n+        double[] centroid = new double[dim];\n+        for (int i = 0; i < dim; i++) {\n+            for (int j = 0; j < n; j++) {\n+                if (j != dim) {\n+                    centroid[i] += simplex[j].getPoint()[i];\n                 }\n+            }\n+            centroid[i] /= dim;\n+        }\n \n-                return;\n+        // perform a reflection step\n+        final double[] xR = new double[dim];\n+        for (int i = 0; i < dim; i++) {\n+            xR[i] = centroid[i] + delta * (centroid[i] - simplex[dim].getPoint()[i]);\n+        }\n+        final RealPointValuePair reflected = new RealPointValuePair(xR, computeObjectiveValue(xR));\n+\n+        if (comparator.compare(simplex[0], reflected) > 0 && comparator.compare(reflected, simplex[n - 1]) <= 0) {\n+            // accept the reflected point\n+            simplex[dim] = reflected;\n \n+        } else if (comparator.compare(reflected, simplex[0]) < 0) {\n+\n+            // compute the expanded point\n+            final double[] xE = new double[dim];\n+            for (int i = 0; i < dim; i++) {\n+                xE[i] = centroid[i] + expansion * (xR[i] - centroid[i]);\n+            }\n+            final RealPointValuePair expanded = new RealPointValuePair(xE, computeObjectiveValue(xE));\n+\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // accept the expanded point\n+                simplex[dim] = expanded;\n+            } else {\n+                // accept the reflected point\n+                simplex[dim] = reflected;\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        } else {\n \n-            // check convergence\n-                return;\n+            // compute the contracted point\n+            final double[] xC = new double[dim];\n+            for (int i = 0; i < dim; i++) {\n+                xC[i] = centroid[i] + contraction * (simplex[dim].getPoint()[i] - centroid[i]);\n+            }\n+            final RealPointValuePair contracted = new RealPointValuePair(xC, computeObjectiveValue(xC));\n+\n+            if (comparator.compare(contracted, simplex[n - 1]) < 0) {\n+                // accept the contracted point\n+                simplex[dim] = contracted;\n+            } else {\n+                // shrink the simplex\n+                for (int i = 1; i < n; i++) {\n+                    final double[] x = simplex[i].getPoint();\n+                    for (int j = 0; j < dim; j++) {\n+                        x[j] = best.getPoint()[j] + shrink * (x[j] - best.getPoint()[j]);\n+                    }\n+                    simplex[i] = new RealPointValuePair(x, computeObjectiveValue(x));\n+                }\n             }\n \n         }\n \n+        // check convergence\n+        double size = 0;\n+        for (int i = 0; i < dim; i++) {\n+            size += Math.pow(simplex[0].getPoint()[i] - simplex[n - 1].getPoint()[i], 2);\n+        }\n+        size = Math.sqrt(size);\n+        if (size < convergenceThreshold) {\n+            return;\n+        }\n+\n+        // increment the iteration counter\n+        iter++;\n+\n     }\n \n+    // maximum number of iterations reached\n+    return;\n+\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: maxIterations has private access in DirectSearchOptimizer",
    "test_result": "ERROR"
}