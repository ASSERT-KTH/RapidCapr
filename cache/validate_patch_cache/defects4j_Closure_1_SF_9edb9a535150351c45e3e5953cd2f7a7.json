{
    "patch": "    Node fnNode = fnScope.getRootNode();\n\n    Preconditions.checkState(fnNode.isFunction());\n    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n      // The arguments object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = fnNode.getSecondChild();\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(fnNode);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        String argName = lastArg.getString();\n        Var var = fnScope.getVar(argName);\n        Node toRemove = lastArg;\n        lastArg = lastArg.getPrevious();\n        if (!referenced.contains(var)) {\n          argList.removeChild(toRemove);\n          compiler.reportCodeChange();\n        } else {\n          // Arguments are positioned right after any other variable\n          // declarations, the first one is $jscomp$arguments, so stop when\n          // we get to that one.\n          if (argName.equals(ARGUMENTS)) {\n            break;\n          }\n        }\n      }\n\n      // If a function expression has parameters but they have all been\n      // removed, force it to AST node form.\n      if (fnNode.isFunctionExpression() && argList.hasChildren()) {\n        fnNode.setToName();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..45fe19a7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,42 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n+    Node fnNode = fnScope.getRootNode();\n+\n+    Preconditions.checkState(fnNode.isFunction());\n+    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n+      // The arguments object literal setters can not be removed.\n       return;\n     }\n \n-    Node argList = getFunctionArgList(function);\n+    Node argList = fnNode.getSecondChild();\n     boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n+        && callSiteOptimizer.canModifyCallers(fnNode);\n     if (!modifyCallers) {\n       // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        String argName = lastArg.getString();\n+        Var var = fnScope.getVar(argName);\n+        Node toRemove = lastArg;\n+        lastArg = lastArg.getPrevious();\n         if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n+          argList.removeChild(toRemove);\n           compiler.reportCodeChange();\n         } else {\n-          break;\n+          // Arguments are positioned right after any other variable\n+          // declarations, the first one is $jscomp$arguments, so stop when\n+          // we get to that one.\n+          if (argName.equals(ARGUMENTS)) {\n+            break;\n+          }\n         }\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n-    }\n-  }\n+\n+      // If a function expression has parameters but they have all been\n+      // removed, force it to AST node form.\n+      if (fnNode.isFunctionExpression() && argList.hasChildren()) {\n+        fnNode.setToName();\n \n \n   /**",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}