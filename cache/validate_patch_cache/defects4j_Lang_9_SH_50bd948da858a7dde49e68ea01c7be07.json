{
    "patch": "boolean atLeastOneStrategyAdded = false;\n\nwhile (patternMatcher.find()) {\n    String formatField = patternMatcher.group();\n    Strategy strategy = getStrategy(formatField);\n\n    if (currentStrategy != null) {\n        if (currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n            atLeastOneStrategyAdded = true;\n        }\n    } else {\n        throw new IllegalArgumentException(\"Invalid pattern.\");\n    }\n\n    currentStrategy = strategy;\n}\n\nif (currentStrategy != null) {\n    if (currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n        atLeastOneStrategyAdded = true;\n    }\n}\n\nif (!atLeastOneStrategyAdded) {\n    throw new IllegalArgumentException(\"No Strategies Found.\");\n}\n\ncurrentFormatField = null;\nstrategies = collector.toArray(new Strategy[0]);\nparsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..9892e6cd 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,38 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+boolean atLeastOneStrategyAdded = false;\n+\n+while (patternMatcher.find()) {\n+    String formatField = patternMatcher.group();\n+    Strategy strategy = getStrategy(formatField);\n+\n+    if (currentStrategy != null) {\n+        if (currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+            atLeastOneStrategyAdded = true;\n+        }\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid pattern.\");\n+    }\n+\n+    currentStrategy = strategy;\n+}\n+\n+if (currentStrategy != null) {\n+    if (currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+        atLeastOneStrategyAdded = true;\n+    }\n+}\n+\n+if (!atLeastOneStrategyAdded) {\n+    throw new IllegalArgumentException(\"No Strategies Found.\");\n+}\n+\n+currentFormatField = null;\n+strategies = collector.toArray(new Strategy[0]);\n+parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}