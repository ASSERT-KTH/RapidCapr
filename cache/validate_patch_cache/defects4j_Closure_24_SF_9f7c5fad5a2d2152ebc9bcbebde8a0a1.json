{
    "patch": "        if (parent.isName()) {\n          String name = parent.getString();\n          Var aliasVar = scope.getVar(name);\n          aliases.put(name, aliasVar);\n\n          String qualifiedName = null;\n          if (aliasVar.getInitialValue() != null) {\n            qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n          }\n          if (qualifiedName != null) {\n            transformation.addAlias(name, qualifiedName);\n          } else if (v.getNameNode().getParent().getBooleanProp(Node.IS_NAMESPACE)) {\n            // Parameter of a function.\n          } else if (v.isBleedingFunction()) {\n            // Bleeding functions already get a BAD_PARAMETERS error, so just\n            // do nothing.\n          } else {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..3afe4171 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,25 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n+        if (parent.isName()) {\n+          String name = parent.getString();\n           Var aliasVar = scope.getVar(name);\n           aliases.put(name, aliasVar);\n \n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n-      }\n-    }\n+          String qualifiedName = null;\n+          if (aliasVar.getInitialValue() != null) {\n+            qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+          }\n+          if (qualifiedName != null) {\n+            transformation.addAlias(name, qualifiedName);\n+          } else if (v.getNameNode().getParent().getBooleanProp(Node.IS_NAMESPACE)) {\n+            // Parameter of a function.\n+          } else if (v.isBleedingFunction()) {\n+            // Bleeding functions already get a BAD_PARAMETERS error, so just\n+            // do nothing.\n+          } else {\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+          }\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}