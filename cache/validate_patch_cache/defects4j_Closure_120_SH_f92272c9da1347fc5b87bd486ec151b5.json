{
    "patch": "          // Find the last assignment to this variable before leaving the function.\n          Reference lastAssignment = null;\n          for (ListIterator<Reference> it = references.listIterator(size);\n               it.hasPrevious(); ) {\n            Reference ref = it.previous();\n            if (ref.getNode() instanceof NodeUtil.FunctionExpression ||\n                ref.getNode() instanceof NodeUtil.FunctionDeclaration ||\n                ref.isVarDeclaration()) {\n              // We have left the scope of the variable without finding any\n              // additional assignments.\n              break;\n            } else if (ref.isLvalue() && !ref.isVarDeclaration() &&\n                       !ref.isCatchDeclaration()) {\n              lastAssignment = ref;\n              break;\n            }\n          }\n          if (lastAssignment == null) {\n            return true;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..27058549 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,26 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Find the last assignment to this variable before leaving the function.\n+          Reference lastAssignment = null;\n+          for (ListIterator<Reference> it = references.listIterator(size);\n+               it.hasPrevious(); ) {\n+            Reference ref = it.previous();\n+            if (ref.getNode() instanceof NodeUtil.FunctionExpression ||\n+                ref.getNode() instanceof NodeUtil.FunctionDeclaration ||\n+                ref.isVarDeclaration()) {\n+              // We have left the scope of the variable without finding any\n+              // additional assignments.\n+              break;\n+            } else if (ref.isLvalue() && !ref.isVarDeclaration() &&\n+                       !ref.isCatchDeclaration()) {\n+              lastAssignment = ref;\n+              break;\n+            }\n+          }\n+          if (lastAssignment == null) {\n+            return true;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}