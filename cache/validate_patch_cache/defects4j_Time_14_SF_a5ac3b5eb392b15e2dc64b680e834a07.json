{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    int[] newValues = Arrays.copyOf(values, values.length);\n    DateTimeFieldType fieldType = partial.getFieldType(fieldIndex);\n    Chronology chronology = partial.getChronology();\n    if (fieldType == DateTimeFieldType.monthOfYear() && values[DateTimeFieldType.dayOfMonth().getFieldIndex()] == 29 \n            && values[DateTimeFieldType.monthOfYear().getFieldIndex()] == 2) {\n        int year = values[DateTimeFieldType.year().getFieldIndex()];\n        if (chronology.isLeapYear(year)) {\n            newValues[fieldIndex] += valueToAdd;\n        } else {\n            newValues[fieldIndex] = 3;\n            newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = chronology.getDayOfMonthMax(3, year);\n        }\n    } else {\n        newValues[fieldIndex] += valueToAdd;\n    }\n    return newValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..a6c661ad 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,28 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    int[] newValues = Arrays.copyOf(values, values.length);\n+    DateTimeFieldType fieldType = partial.getFieldType(fieldIndex);\n+    Chronology chronology = partial.getChronology();\n+    if (fieldType == DateTimeFieldType.monthOfYear() && values[DateTimeFieldType.dayOfMonth().getFieldIndex()] == 29 \n+            && values[DateTimeFieldType.monthOfYear().getFieldIndex()] == 2) {\n+        int year = values[DateTimeFieldType.year().getFieldIndex()];\n+        if (chronology.isLeapYear(year)) {\n+            newValues[fieldIndex] += valueToAdd;\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            newValues[fieldIndex] = 3;\n+            newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = chronology.getDayOfMonthMax(3, year);\n         }\n+    } else {\n+        newValues[fieldIndex] += valueToAdd;\n     }\n+    return newValues;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}