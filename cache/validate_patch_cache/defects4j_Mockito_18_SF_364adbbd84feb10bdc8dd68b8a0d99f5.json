{
    "patch": "public class MyClass {\n    \n    private String value;\n    \n    public MyClass(String value) {\n        this.value = value;\n    }\n    \n    public String getValue() {\n        return value;\n    }\n    \n    public Iterable<Character> getChars() {\n        List<Character> chars = new ArrayList<Character>();\n        for (int i = 0; i < value.length(); i++) {\n            chars.add(value.charAt(i));\n        }\n        return chars;\n    }\n    \n    public static void main(String[] args) {\n        MyClass myClass = new MyClass(\"Hello, World!\");\n        for (char c : myClass.getChars()) {\n            System.out.print(c + \" \");\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..b047f454e 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,33 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyClass {\n+    \n+    private String value;\n+    \n+    public MyClass(String value) {\n+        this.value = value;\n+    }\n+    \n+    public String getValue() {\n+        return value;\n+    }\n+    \n+    public Iterable<Character> getChars() {\n+        List<Character> chars = new ArrayList<Character>();\n+        for (int i = 0; i < value.length(); i++) {\n+            chars.add(value.charAt(i));\n+        }\n+        return chars;\n+    }\n+    \n+    public static void main(String[] args) {\n+        MyClass myClass = new MyClass(\"Hello, World!\");\n+        for (char c : myClass.getChars()) {\n+            System.out.print(c + \" \");\n+        }\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}