{
    "patch": "    Scope functionScope = Scope.createScopeNode(\n        function,\n        fnScope,\n        compiler.getCodingConvention(),\n        compiler);\n    Node argList = getFunctionArgList(function);\n    Scope declaredScope = functionScope.getDeclaredScope();\n    boolean isSetter = NodeUtil.isObjectLiteralKey(\n        function.getParent()) && function.getParent().getParent().isSetterDef();\n    boolean allArgsUsedInFunction = NodeUtil.allArgsUnescaped(argList, function);\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n\n      if (allArgsUsedInFunction) {\n        continue;\n      }\n\n      // Removing setter args breaks the 'arguments' object.\n      if (isSetter && arg.getNext() == null) {\n        continue;\n      }\n\n      String argName = arg.getString();\n      boolean argIsReferenced =\n          functionScope.getDeclaredVariables().containsKey(argName)\n          ? true : !referencedParamNames.add(argName);\n      if (!argIsReferenced) {\n        compiler.reportChangeToEnclosingScope(arg);\n        declaredScope.undeclare(varNameInScope(declaredScope, arg));\n        arg.detach();\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e5cd2680 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,37 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Scope functionScope = Scope.createScopeNode(\n+        function,\n+        fnScope,\n+        compiler.getCodingConvention(),\n+        compiler);\n+    Node argList = getFunctionArgList(function);\n+    Scope declaredScope = functionScope.getDeclaredScope();\n+    boolean isSetter = NodeUtil.isObjectLiteralKey(\n+        function.getParent()) && function.getParent().getParent().isSetterDef();\n+    boolean allArgsUsedInFunction = NodeUtil.allArgsUnescaped(argList, function);\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+\n+      if (allArgsUsedInFunction) {\n+        continue;\n+      }\n+\n+      // Removing setter args breaks the 'arguments' object.\n+      if (isSetter && arg.getNext() == null) {\n+        continue;\n+      }\n+\n+      String argName = arg.getString();\n+      boolean argIsReferenced =\n+          functionScope.getDeclaredVariables().containsKey(argName)\n+          ? true : !referencedParamNames.add(argName);\n+      if (!argIsReferenced) {\n+        compiler.reportChangeToEnclosingScope(arg);\n+        declaredScope.undeclare(varNameInScope(declaredScope, arg));\n+        arg.detach();\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}