{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n\n    // ** originally given code ** //\n\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        int monthFieldIndex = -1;\n        int maxDay = -1;\n\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n                monthFieldIndex = i;\n            }\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n\n        if (monthFieldIndex != -1) {\n            int curMonth = iChronology.monthOfYear().get(instant);\n            int curYear = iChronology.year().get(instant);\n\n            int newMonth = (curMonth - 1 + valueToAdd) % 12 + 1;\n            int yearChange = (curMonth - 1 + valueToAdd) / 12;\n            curYear += yearChange;\n\n            maxDay = iChronology.dayOfMonth().getMaximumValue(\n                        iChronology.monthOfYear().set(\n                            iChronology.year().set(instant, curYear),\n                            newMonth\n                        )\n                     );\n\n            int curDay = Math.min(maxDay, iChronology.dayOfMonth().get(instant));\n            instant = iChronology.dayOfMonth().set(instant, curDay);\n\n            int[] result = iChronology.get(partial, instant);\n\n            if (result[monthFieldIndex] != newMonth) {\n                throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.monthOfYear(), String.valueOf(result[monthFieldIndex]));\n            }\n            return result;\n\n        } else {\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..62756ba3 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,56 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+\n+    // ** originally given code ** //\n+\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        int monthFieldIndex = -1;\n+        int maxDay = -1;\n+\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n+                monthFieldIndex = i;\n+            }\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+\n+        if (monthFieldIndex != -1) {\n+            int curMonth = iChronology.monthOfYear().get(instant);\n+            int curYear = iChronology.year().get(instant);\n+\n+            int newMonth = (curMonth - 1 + valueToAdd) % 12 + 1;\n+            int yearChange = (curMonth - 1 + valueToAdd) / 12;\n+            curYear += yearChange;\n+\n+            maxDay = iChronology.dayOfMonth().getMaximumValue(\n+                        iChronology.monthOfYear().set(\n+                            iChronology.year().set(instant, curYear),\n+                            newMonth\n+                        )\n+                     );\n+\n+            int curDay = Math.min(maxDay, iChronology.dayOfMonth().get(instant));\n+            instant = iChronology.dayOfMonth().set(instant, curDay);\n+\n+            int[] result = iChronology.get(partial, instant);\n+\n+            if (result[monthFieldIndex] != newMonth) {\n+                throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.monthOfYear(), String.valueOf(result[monthFieldIndex]));\n             }\n+            return result;\n+\n+        } else {\n             instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]",
    "test_result": "FAIL"
}