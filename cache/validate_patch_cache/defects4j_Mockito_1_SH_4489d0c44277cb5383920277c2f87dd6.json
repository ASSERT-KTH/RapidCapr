{
    "patch": "    private boolean toStringEquals(Matcher m, Object arg) {\n        return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());\n    }\n\n    public void captureArgumentsFrom(Invocation invocation) {\n        if (invocation.getMethod().isVarArgs()) {\n            int indexOfVararg = invocation.getRawArguments().length - 1;\n            List<Matcher> varargMatchers = new ArrayList<>();\n            for (int i = indexOfVararg; i < matchers.size(); i++) {\n                varargMatchers.add(matchers.get(i));\n            }\n            Object[] varArgsArray = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg, invocation.getRawArguments().length);\n            int position = indexOfVararg;\n            for (Object vararg : varArgsArray) {\n                for (int i = 0; i < varargMatchers.size(); i++) {\n                    Matcher m = varargMatchers.get(i);\n                    if (m instanceof CapturesArguments) {\n                        ((CapturesArguments) m).captureFrom(Array.get(vararg, i));\n                    }\n                    position++;\n                }\n            }\n        } else {\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..780567265 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,36 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    private boolean toStringEquals(Matcher m, Object arg) {\n+        return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());\n+    }\n+\n+    public void captureArgumentsFrom(Invocation invocation) {\n+        if (invocation.getMethod().isVarArgs()) {\n+            int indexOfVararg = invocation.getRawArguments().length - 1;\n+            List<Matcher> varargMatchers = new ArrayList<>();\n+            for (int i = indexOfVararg; i < matchers.size(); i++) {\n+                varargMatchers.add(matchers.get(i));\n+            }\n+            Object[] varArgsArray = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg, invocation.getRawArguments().length);\n+            int position = indexOfVararg;\n+            for (Object vararg : varArgsArray) {\n+                for (int i = 0; i < varargMatchers.size(); i++) {\n+                    Matcher m = varargMatchers.get(i);\n+                    if (m instanceof CapturesArguments) {\n+                        ((CapturesArguments) m).captureFrom(Array.get(vararg, i));\n+                    }\n+                    position++;\n+                }\n+            }\n+        } else {\n+            for (int position = 0; position < matchers.size(); position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n+                }\n+            }\n+        }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}