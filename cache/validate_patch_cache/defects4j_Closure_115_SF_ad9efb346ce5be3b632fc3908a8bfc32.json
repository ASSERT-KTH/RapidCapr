{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    Preconditions.checkState(callNode.isCall(), callNode);\n    Preconditions.checkState(fnNode.isFunction(), fnNode);\n\n    Node funcReturn = NodeUtil.getFunctionBody(fnNode);\n    if (!NodeUtil.isStatementBlock(funcReturn)) {\n      return CanInlineResult.NO;\n    }\n\n    Node callName = callNode.getFirstChild();\n    Node fnName = fnNode.getFirstChild();\n    if (!callName.matchesQualifiedName(fnName)) {\n      return CanInlineResult.NO;\n    }\n\n    // Check if the caller and callee share the same Scope.\n    Scope callScope = SyntacticScopeCreator.makeUntypedScope(fnNode, null);\n    Scope callerScope = SyntacticScopeCreator.makeUntypedScope(callNode, callScope);\n    if (callScope != callerScope) {\n      return CanInlineResult.NO;\n    }\n\n    boolean hasSideEffects = false;\n    Node block = funcReturn.getLastChild();\n    Node child = block.getFirstChild();\n    if (child != null) {\n      if (!child.isReturn()) {\n        hasSideEffects = true;\n      } else {\n        // A function with more than one return statement inside won't get inlined.\n        child = child.getFirstChild();\n        if (child != null) {\n          hasSideEffects = NodeUtil.mayHaveSideEffects(child, compiler);\n        }\n      }\n    }\n\n    // Verify that argument types match, and count number of args\n    Node arg = callName.getNext();\n    Node formalParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (formalParam != null && arg != null) {\n      boolean skipParameter = false;\n      if (formalParam.isDefaultValue()) {\n        // For the case where a formal parameter of a callee function has a default value,\n        // its position is bound to an actual parameter starting from the first one that does not\n        // have a default value and to the right.\n        // For instance, for callee function foo(a, b=10, c, d=20), the actual parameters can be:\n        // - foo(1, 2, 3, 4) => a=1, b=2, c=3, d=4\n        // - foo(1, 2) => a=1, b=2, c=undefined, d=20\n        // - foo(1, 2, 3) => a=1, b=2, c=3, d=20\n        // - foo(1, 2, undefined, 4) => a=1, b=2, c=undefined, d=4\n        Node value = formalParam.getFirstChild();\n        if (value == null) {\n          // No default value provided.\n          skipParameter = true;\n        } else if (arg == null) {\n          // No matching arg provided\n          arg = value;\n        }\n      }\n\n      if (!skipParameter && !arg.getType().equals(formalParam.getType())) {\n        return CanInlineResult.NO;\n      }\n      formalParam = formalParam.getNext();\n      arg = arg.getNext();\n    }\n\n    if (arg != null) {\n      return CanInlineResult.NO;\n    }\n\n    // If the function has side-effects and return value isn't used, don't inline.\n    if (hasSideEffects && !NodeUtil.mayHaveSideEffects(callNode.getParent())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..c79ee2ed 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,76 +686,80 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+    Preconditions.checkState(callNode.isCall(), callNode);\n+    Preconditions.checkState(fnNode.isFunction(), fnNode);\n+\n+    Node funcReturn = NodeUtil.getFunctionBody(fnNode);\n+    if (!NodeUtil.isStatementBlock(funcReturn)) {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n+    Node callName = callNode.getFirstChild();\n+    Node fnName = fnNode.getFirstChild();\n+    if (!callName.matchesQualifiedName(fnName)) {\n+      return CanInlineResult.NO;\n+    }\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n+    // Check if the caller and callee share the same Scope.\n+    Scope callScope = SyntacticScopeCreator.makeUntypedScope(fnNode, null);\n+    Scope callerScope = SyntacticScopeCreator.makeUntypedScope(callNode, callScope);\n+    if (callScope != callerScope) {\n+      return CanInlineResult.NO;\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+    boolean hasSideEffects = false;\n+    Node block = funcReturn.getLastChild();\n+    Node child = block.getFirstChild();\n+    if (child != null) {\n+      if (!child.isReturn()) {\n+        hasSideEffects = true;\n       } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        // A function with more than one return statement inside won't get inlined.\n+        child = child.getFirstChild();\n+        if (child != null) {\n+          hasSideEffects = NodeUtil.mayHaveSideEffects(child, compiler);\n+        }\n       }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n+    // Verify that argument types match, and count number of args\n+    Node arg = callName.getNext();\n+    Node formalParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+    while (formalParam != null && arg != null) {\n+      boolean skipParameter = false;\n+      if (formalParam.isDefaultValue()) {\n+        // For the case where a formal parameter of a callee function has a default value,\n+        // its position is bound to an actual parameter starting from the first one that does not\n+        // have a default value and to the right.\n+        // For instance, for callee function foo(a, b=10, c, d=20), the actual parameters can be:\n+        // - foo(1, 2, 3, 4) => a=1, b=2, c=3, d=4\n+        // - foo(1, 2) => a=1, b=2, c=undefined, d=20\n+        // - foo(1, 2, 3) => a=1, b=2, c=3, d=20\n+        // - foo(1, 2, undefined, 4) => a=1, b=2, c=undefined, d=4\n+        Node value = formalParam.getFirstChild();\n+        if (value == null) {\n+          // No default value provided.\n+          skipParameter = true;\n+        } else if (arg == null) {\n+          // No matching arg provided\n+          arg = value;\n         }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+      if (!skipParameter && !arg.getType().equals(formalParam.getType())) {\n+        return CanInlineResult.NO;\n       }\n+      formalParam = formalParam.getNext();\n+      arg = arg.getNext();\n     }\n \n-    return CanInlineResult.YES;\n-  }\n+    if (arg != null) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    // If the function has side-effects and return value isn't used, don't inline.\n+    if (hasSideEffects && !NodeUtil.mayHaveSideEffects(callNode.getParent())) {\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}