{
    "patch": "public double getPct(Object v) {\n    double pct = 0.0;\n    if (v instanceof Number) {\n        double val = ((Number) v).doubleValue();\n        double min = minValue().doubleValue();\n        double max = maxValue().doubleValue();\n        if (val < min) {\n            pct = 0.0;\n        } else if (val > max) {\n            pct = 1.0;\n        } else {\n            pct = (val - min) / (max - min);\n        }\n    }\n    return pct * 100;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..983ee47db 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -300,7 +300,22 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+public double getPct(Object v) {\n+    double pct = 0.0;\n+    if (v instanceof Number) {\n+        double val = ((Number) v).doubleValue();\n+        double min = minValue().doubleValue();\n+        double max = maxValue().doubleValue();\n+        if (val < min) {\n+            pct = 0.0;\n+        } else if (val > max) {\n+            pct = 1.0;\n+        } else {\n+            pct = (val - min) / (max - min);\n+        }\n+    }\n+    return pct * 100;\n+}\n     }\n \n     /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}