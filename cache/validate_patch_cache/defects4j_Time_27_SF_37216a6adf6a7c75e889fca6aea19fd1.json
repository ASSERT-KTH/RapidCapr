{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n\n    // Handle multiple separators in a row\n    while (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep1 = (Separator) elementPairs.get(0);\n        List<Object> subList = elementPairs.subList(1, size);\n        size = subList.size();\n\n        if (size >= 2 && subList.get(0) instanceof Separator) {\n            // Two adjacent separators, combine them\n            Separator sep2 = (Separator) subList.get(0);\n            PeriodFormatter f = toFormatter(subList.subList(1, size), notPrinter, notParser);\n            sep1 = sep1.finish(f.getPrinter(), f.getParser()).finish(sep2.getPrinter(), sep2.getParser());\n            elementPairs = Collections.singletonList(sep1);\n        } else {\n            // Only one separator\n            PeriodFormatter f = toFormatter(subList, notPrinter, notParser);\n            sep1 = sep1.finish(f.getPrinter(), f.getParser());\n            return new PeriodFormatter(sep1, sep1);\n        }\n    }\n\n    // Only one element or no elements left\n    if (elementPairs.isEmpty()) {\n        return new PeriodFormatter(null, null);\n    } else {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..eb6ac1a6 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,36 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+\n+    // Handle multiple separators in a row\n+    while (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep1 = (Separator) elementPairs.get(0);\n+        List<Object> subList = elementPairs.subList(1, size);\n+        size = subList.size();\n+\n+        if (size >= 2 && subList.get(0) instanceof Separator) {\n+            // Two adjacent separators, combine them\n+            Separator sep2 = (Separator) subList.get(0);\n+            PeriodFormatter f = toFormatter(subList.subList(1, size), notPrinter, notParser);\n+            sep1 = sep1.finish(f.getPrinter(), f.getParser()).finish(sep2.getPrinter(), sep2.getParser());\n+            elementPairs = Collections.singletonList(sep1);\n+        } else {\n+            // Only one separator\n+            PeriodFormatter f = toFormatter(subList, notPrinter, notParser);\n+            sep1 = sep1.finish(f.getPrinter(), f.getParser());\n+            return new PeriodFormatter(sep1, sep1);\n         }\n+    }\n+\n+    // Only one element or no elements left\n+    if (elementPairs.isEmpty()) {\n+        return new PeriodFormatter(null, null);\n+    } else {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -811,6 +830,7 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}