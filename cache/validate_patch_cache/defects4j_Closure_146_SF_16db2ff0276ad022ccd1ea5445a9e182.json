{
    "patch": "// unions types\nif (that instanceof UnionType) {\n  TypePair p = that.getTypesUnderInequality(this);\n  return new TypePair(p.typeB, p.typeA);\n}\n\n// other types\nswitch (this.testForEquality(that)) {\n  case TRUE:\n    return new TypePair(this.restrictByNotNullOrUndefined(), that);\n\n  case FALSE:\n    return new TypePair(this, that.restrictByNotNullOrUndefined());\n\n  case UNKNOWN:\n    return new TypePair(this, that);\n\n  // switch case is exhaustive\n  throw new IllegalStateException();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..365c2d99 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -693,26 +693,26 @@ public abstract class JSType implements Serializable {\n    *         element. The returned pair is never {@code null} even though its\n    *         components may be {@code null}\n    */\n-  public TypePair getTypesUnderInequality(JSType that) {\n-    // unions types\n-    if (that instanceof UnionType) {\n-      TypePair p = that.getTypesUnderInequality(this);\n-      return new TypePair(p.typeB, p.typeA);\n-    }\n+// unions types\n+if (that instanceof UnionType) {\n+  TypePair p = that.getTypesUnderInequality(this);\n+  return new TypePair(p.typeB, p.typeA);\n+}\n \n-    // other types\n-    switch (this.testForEquality(that)) {\n-      case TRUE:\n-        return new TypePair(null, null);\n+// other types\n+switch (this.testForEquality(that)) {\n+  case TRUE:\n+    return new TypePair(this.restrictByNotNullOrUndefined(), that);\n \n-      case FALSE:\n-      case UNKNOWN:\n-        return new TypePair(this, that);\n-    }\n+  case FALSE:\n+    return new TypePair(this, that.restrictByNotNullOrUndefined());\n \n-    // switch case is exhaustive\n-    throw new IllegalStateException();\n-  }\n+  case UNKNOWN:\n+    return new TypePair(this, that);\n+\n+  // switch case is exhaustive\n+  throw new IllegalStateException();\n+}\n \n   /**\n    * Computes the subset of {@code this} and {@code that} types under shallow",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}