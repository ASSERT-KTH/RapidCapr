{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if (offsetLocal >= 0) {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    } else {\n        long prev = previousTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (prev < instantAdjusted && nextTransition(prev) != nextAdjusted) {\n            return getOffset(prev);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..6df1811e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,29 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+if (offsetLocal != offsetAdjusted) {\n+    if (offsetLocal >= 0) {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+        long prev = previousTransition(instantAdjusted);\n+        if (prev < instantAdjusted) {\n+            int offsetPrev = getOffset(prev);\n+            int diff = offsetPrev - offsetLocal;\n+            if (instantAdjusted - prev <= diff) {\n+                return offsetPrev;\n+            }\n+        }\n+    } else {\n+        long prev = previousTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (prev < instantAdjusted && nextTransition(prev) != nextAdjusted) {\n+            return getOffset(prev);\n+        }\n+    }\n+}\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}