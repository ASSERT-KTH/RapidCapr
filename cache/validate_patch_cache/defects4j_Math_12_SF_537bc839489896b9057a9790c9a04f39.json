{
    "patch": "public class Distribution {\n    private final Random random;\n\n    private final int[] counts;\n\n    private int sum;\n\n    public Distribution(int size) {\n        this.random = new Random();\n        this.counts = new int[size];\n    }\n\n    public int size() {\n        return counts.length;\n    }\n\n    public synchronized void add(int i, int c) {\n        counts[i] += c;\n        sum += c;\n    }\n\n    public synchronized int get(int i) {\n        return counts[i];\n    }\n\n    public synchronized double[] getProbabilities() {\n        double[] probs = new double[counts.length];\n        for (int i = 0; i < counts.length; i++) {\n            probs[i] = counts[i] / (double) sum;\n        }\n        return probs;\n    }\n\n    public synchronized int nextIndex() {\n        double[] probs = getProbabilities();\n        double value = random.nextDouble();\n        double sum = 0.0;\n        for (int i = 0; i < probs.length; i++) {\n            sum += probs[i];\n            if (value <= sum) {\n                return i;\n            }\n        }\n        // this block was missing earlier\n        return probs.length - 1;\n    }\n\n    public synchronized Distribution clone() {\n        Distribution copy = new Distribution(counts.length);\n        for (int i = 0; i < counts.length; i++) {\n            copy.counts[i] = counts[i];\n            copy.sum += counts[i];\n        }\n        return copy;\n    }\n\n    public static void main(String[] args) {\n        Distribution d = new Distribution(5);\n        d.add(0, 1000000);\n        d.add(1, 1000000);\n        d.add(2, 1000000);\n        d.add(3, 1000000);\n        d.add(4, 1000000);\n\n        Distribution clone = d.clone();\n\n        //This assertion compares the values of the elements in the two arrays with a tolerance of 0.0001\n        Assert.assertArrayEquals(d.getProbabilities(), clone.getProbabilities(), 0.0001);\n    }\n\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}