{
    "patch": "Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (mockCandidate != null) {\n    Class<?> fieldType = field.getType();\n    Class<?> candidateType = mockCandidate.getClass();\n    if (fieldType.isAssignableFrom(candidateType) || fieldType.isPrimitive()) {\n        field.setAccessible(true);\n        try {\n            Object oldValue = field.get(fieldInstance);\n            if (oldValue != null) {\n                for (Field innerField : oldValue.getClass().getDeclaredFields()) {\n                    innerField.setAccessible(true);\n                    if (innerField.get(oldValue) == fieldInstance) {\n                        innerField.set(oldValue, null);\n                    }\n                }\n            }\n            field.set(fieldInstance, mockCandidate);\n            if (oldValue != null && candidateType.isAssignableFrom(oldValue.getClass())) {\n                for (Field innerField : candidateType.getDeclaredFields()) {\n                    innerField.setAccessible(true);\n                    if (innerField.get(mockCandidate) == oldValue) {\n                        Object innerCandidate = mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate);\n                        if (innerCandidate != null) {\n                            innerField.set(mockCandidate, innerCandidate);\n                        }\n                    }\n                }\n            }\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    } else {\n        throw new IllegalArgumentException(String.format(\"Cannot inject a mock instance of type '%s' into field '%s' of type '%s'\",\n                candidateType.getName(), field.getName(), fieldType.getName()));\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..035e0397e 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,45 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (mockCandidate != null) {\n+    Class<?> fieldType = field.getType();\n+    Class<?> candidateType = mockCandidate.getClass();\n+    if (fieldType.isAssignableFrom(candidateType) || fieldType.isPrimitive()) {\n+        field.setAccessible(true);\n+        try {\n+            Object oldValue = field.get(fieldInstance);\n+            if (oldValue != null) {\n+                for (Field innerField : oldValue.getClass().getDeclaredFields()) {\n+                    innerField.setAccessible(true);\n+                    if (innerField.get(oldValue) == fieldInstance) {\n+                        innerField.set(oldValue, null);\n+                    }\n+                }\n+            }\n+            field.set(fieldInstance, mockCandidate);\n+            if (oldValue != null && candidateType.isAssignableFrom(oldValue.getClass())) {\n+                for (Field innerField : candidateType.getDeclaredFields()) {\n+                    innerField.setAccessible(true);\n+                    if (innerField.get(mockCandidate) == oldValue) {\n+                        Object innerCandidate = mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate);\n+                        if (innerCandidate != null) {\n+                            innerField.set(mockCandidate, innerCandidate);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    } else {\n+        throw new IllegalArgumentException(String.format(\"Cannot inject a mock instance of type '%s' into field '%s' of type '%s'\",\n+                candidateType.getName(), field.getName(), fieldType.getName()));\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "java.lang.IllegalArgumentException: Cannot inject a mock instance of type 'org.mockito.internal.configuration.injection.FinalMockCandidateFilter$1' into field 'dependency' of type 'org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest$Dependency'",
    "test_result": "FAIL"
}