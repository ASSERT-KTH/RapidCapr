{
    "patch": "public static String intersection(int[] interval1, int[] interval2) {\n    int l1 = interval1[0];\n    int r1 = interval1[1];\n    int l2 = interval2[0];\n    int r2 = interval2[1];\n\n    int L = Math.max(l1, l2);\n    int R = Math.min(r1, r2);\n\n    if (L >= R || R - L < 2) {\n        return \"NO\";\n    }\n\n    int length = R - L;\n    boolean isPrime = true;\n    for (int i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n\n    return isPrime ? \"YES\" : \"NO\";\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/INTERSECTION.java b/src/main/java/humaneval/buggy/INTERSECTION.java\nindex 2955ca2..e29f338 100644\n--- a/src/main/java/humaneval/buggy/INTERSECTION.java\n+++ b/src/main/java/humaneval/buggy/INTERSECTION.java\n@@ -30,11 +30,28 @@ public class INTERSECTION {\n         }\n         return true;\n     }\n-    public static String intersection(int[] interval1, int[] interval2) {\n-        int l = Math.min(interval1[0], interval2[0]);\n-        int r = Math.max(interval1[1], interval2[1]);\n-        int length = r - l;\n-        if(length > 0 && is_prime(length)) return \"YES\";\n+public static String intersection(int[] interval1, int[] interval2) {\n+    int l1 = interval1[0];\n+    int r1 = interval1[1];\n+    int l2 = interval2[0];\n+    int r2 = interval2[1];\n+\n+    int L = Math.max(l1, l2);\n+    int R = Math.min(r1, r2);\n+\n+    if (L >= R || R - L < 2) {\n         return \"NO\";\n     }\n+\n+    int length = R - L;\n+    boolean isPrime = true;\n+    for (int i = 2; i * i <= length; i++) {\n+        if (length % i == 0) {\n+            isPrime = false;\n+            break;\n+        }\n+    }\n+\n+    return isPrime ? \"YES\" : \"NO\";\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}