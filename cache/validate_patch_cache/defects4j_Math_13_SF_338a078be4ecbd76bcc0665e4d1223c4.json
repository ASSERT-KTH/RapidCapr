{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(\n                            // take square root of the diagonal eigenvalues\n                            Arrays.stream(dec.getRealEigenvalues())\n                                  .map(FastMath::sqrt)\n                                  .toArray()\n                        );\n    return dec.getV().multiply(sqrtD).multiply(dec.getV().transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5cb1fa7f0 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(\n+                            // take square root of the diagonal eigenvalues\n+                            Arrays.stream(dec.getRealEigenvalues())\n+                                  .map(FastMath::sqrt)\n+                                  .toArray()\n+                        );\n+    return dec.getV().multiply(sqrtD).multiply(dec.getV().transpose());\n+}\n }",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}