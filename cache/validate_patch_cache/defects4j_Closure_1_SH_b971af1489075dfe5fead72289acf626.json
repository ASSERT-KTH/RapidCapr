{
    "patch": "    // If the function expression only has one argument and it is unreferenced,\n    // then we need to make sure to keep the argument.\n    if (argList.hasOneChild()) {\n      Node paramNode = argList.getFirstChild();\n      Var var = fnScope.getVar(paramNode.getString());\n      if (!referenced.contains(var)) {\n        return;\n      }\n    }\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        if (lastArg.getBooleanProp(Node.IS_DEFAULT_PARAM)) {\n          // If this is a default parameter, it has side-effect even if the\n          // parameter is not referenced. So we just stop removing parameters.\n          return;\n        }\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9d40cd87 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,30 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // If the function expression only has one argument and it is unreferenced,\n+    // then we need to make sure to keep the argument.\n+    if (argList.hasOneChild()) {\n+      Node paramNode = argList.getFirstChild();\n+      Var var = fnScope.getVar(paramNode.getString());\n+      if (!referenced.contains(var)) {\n+        return;\n+      }\n+    }\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      Var var = fnScope.getVar(lastArg.getString());\n+      if (!referenced.contains(var)) {\n+        if (lastArg.getBooleanProp(Node.IS_DEFAULT_PARAM)) {\n+          // If this is a default parameter, it has side-effect even if the\n+          // parameter is not referenced. So we just stop removing parameters.\n+          return;\n+        }\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}