{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // Skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  int numArgsProcessed = 0;\n  boolean hasVarArgs = functionType.hasRestFormals();\n\n  while (arguments.hasNext() && parameters.hasNext()) {\n    ordinal++;\n    Node parameterNode = parameters.next();\n    Node argumentNode = arguments.next();\n\n    if (hasVarArgs && isRestPlaceholder(parameterNode)) {\n      hasVarArgs = false;\n\n      // Consume all remaining arguments and validate them against the last formal parameter.\n      String typeName = getJSType(parameterNode).toString();\n      while (arguments.hasNext()) {\n        Node restArg = arguments.next();\n        numArgsProcessed++;\n        validator.expectArgumentMatchesParameter(t, restArg, getJSType(restArg), typeName, call, ordinal);\n      }\n      break;\n    }\n\n    // Validate the parameter with its corresponding argument.\n    numArgsProcessed++;\n    validator.expectArgumentMatchesParameter(t, argumentNode, getJSType(argumentNode), getJSType(parameterNode),\n                                             call, ordinal);\n  }\n\n  if (arguments.hasNext() && !parameters.hasNext()) {\n    // Too many arguments were passed.\n    while (arguments.hasNext()) {\n      arguments.next();\n      numArgsProcessed++;\n    }\n    String message = getMessageForNumArgs(ordinal, functionType.getMinArguments(), functionType.getMaxArguments());\n    report(t, call, WRONG_ARGUMENT_COUNT, getJSType(call.getFirstChild()), String.valueOf(numArgsProcessed),\n           message);\n  } else if (numArgsProcessed < functionType.getMinArguments()) {\n    // Not enough arguments were passed.\n    String message = getMessageForNumArgs(ordinal, functionType.getMinArguments(), functionType.getMaxArguments());\n    report(t, call, WRONG_ARGUMENT_COUNT, getJSType(call.getFirstChild()), String.valueOf(numArgsProcessed),\n           message);\n  } else if (hasVarArgs || arguments.hasNext()) {\n    // There are additional arguments (not enough formal parameters).\n    while (arguments.hasNext()) {\n      arguments.next();\n      numArgsProcessed++;\n    }\n    String message = getMessageForNumArgs(ordinal, functionType.getMinArguments(), functionType.getMaxArguments());\n    report(t, call, WRONG_ARGUMENT_COUNT, getJSType(call.getFirstChild()), String.valueOf(numArgsProcessed),\n           message);\n  }\n}\n\nprivate static boolean isRestPlaceholder(Node node) {\n  // We check the raw string value because some transpiled code generates $jscomp$restParams.\n  return node.isName() && \"$jscomp$restArguments\".equals(node.getString());\n}\n\nprivate static String getMessageForNumArgs(int numArgs, int minArgs, int maxArgs) {\n  String message;\n  if (numArgs < minArgs) {\n    message = \"requires at least \" + minArgs + \" argument(s)\";\n  } else {\n    message = \"requires no more than \" + maxArgs + \" argument(s)\";\n  }\n  return message;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..06d1012e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,79 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // Skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  int numArgsProcessed = 0;\n+  boolean hasVarArgs = functionType.hasRestFormals();\n+\n+  while (arguments.hasNext() && parameters.hasNext()) {\n+    ordinal++;\n+    Node parameterNode = parameters.next();\n+    Node argumentNode = arguments.next();\n+\n+    if (hasVarArgs && isRestPlaceholder(parameterNode)) {\n+      hasVarArgs = false;\n+\n+      // Consume all remaining arguments and validate them against the last formal parameter.\n+      String typeName = getJSType(parameterNode).toString();\n+      while (arguments.hasNext()) {\n+        Node restArg = arguments.next();\n+        numArgsProcessed++;\n+        validator.expectArgumentMatchesParameter(t, restArg, getJSType(restArg), typeName, call, ordinal);\n+      }\n+      break;\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    // Validate the parameter with its corresponding argument.\n+    numArgsProcessed++;\n+    validator.expectArgumentMatchesParameter(t, argumentNode, getJSType(argumentNode), getJSType(parameterNode),\n+                                             call, ordinal);\n+  }\n+\n+  if (arguments.hasNext() && !parameters.hasNext()) {\n+    // Too many arguments were passed.\n+    while (arguments.hasNext()) {\n+      arguments.next();\n+      numArgsProcessed++;\n     }\n+    String message = getMessageForNumArgs(ordinal, functionType.getMinArguments(), functionType.getMaxArguments());\n+    report(t, call, WRONG_ARGUMENT_COUNT, getJSType(call.getFirstChild()), String.valueOf(numArgsProcessed),\n+           message);\n+  } else if (numArgsProcessed < functionType.getMinArguments()) {\n+    // Not enough arguments were passed.\n+    String message = getMessageForNumArgs(ordinal, functionType.getMinArguments(), functionType.getMaxArguments());\n+    report(t, call, WRONG_ARGUMENT_COUNT, getJSType(call.getFirstChild()), String.valueOf(numArgsProcessed),\n+           message);\n+  } else if (hasVarArgs || arguments.hasNext()) {\n+    // There are additional arguments (not enough formal parameters).\n+    while (arguments.hasNext()) {\n+      arguments.next();\n+      numArgsProcessed++;\n+    }\n+    String message = getMessageForNumArgs(ordinal, functionType.getMinArguments(), functionType.getMaxArguments());\n+    report(t, call, WRONG_ARGUMENT_COUNT, getJSType(call.getFirstChild()), String.valueOf(numArgsProcessed),\n+           message);\n+  }\n+}\n+\n+private static boolean isRestPlaceholder(Node node) {\n+  // We check the raw string value because some transpiled code generates $jscomp$restParams.\n+  return node.isName() && \"$jscomp$restArguments\".equals(node.getString());\n+}\n+\n+private static String getMessageForNumArgs(int numArgs, int minArgs, int maxArgs) {\n+  String message;\n+  if (numArgs < minArgs) {\n+    message = \"requires at least \" + minArgs + \" argument(s)\";\n+  } else {\n+    message = \"requires no more than \" + maxArgs + \" argument(s)\";\n   }\n+  return message;\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}