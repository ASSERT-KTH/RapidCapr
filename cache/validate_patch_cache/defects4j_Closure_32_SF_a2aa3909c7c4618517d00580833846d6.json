{
    "patch": "  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    boolean ignoreStar = false;\n    boolean endingStar = false;\n    boolean ignoreWhitespace = false;\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    while (true) {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            if (endingStar) {\n              // We've just consumed multiple stars; ignore this one.\n              endingStar = false;\n            } else {\n              endingStar = true;\n              ignoreWhitespace = true;\n            }\n          } else {\n            ignoreStar = true;\n            endingStar = true;\n          }\n          break;\n\n        case EOL:\n          if (option == WhitespaceOption.PRESERVE && !ignoreStar && !endingStar) {\n            builder.append('\\n');\n          }\n\n          ignoreStar = false;\n          endingStar = false;\n          ignoreWhitespace = false;\n\n          token = next();\n          continue;\n\n        default:\n          if (ignoreStar) {\n            ignoreStar = false;\n            endingStar = false;\n          } else if (ignoreWhitespace) {\n            builder.append(' ');\n            ignoreWhitespace = false;\n          }\n          if (token == JsDocToken.EOC || token == JsDocToken.EOF ||\n              (token == JsDocToken.ANNOTATION &&\n               option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString();\n\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = multilineText.trim();\n            }\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n            jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                endLineno, endCharno);\n\n            return new ExtractionInfo(multilineText, token);\n          }\n          builder.append(toString(token));\n          ignoreStar = false;\n          endingStar = false;\n          ignoreWhitespace = false;\n\n          token = next();\n\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..e75444ea 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1347,51 +1347,51 @@ public final class JsDocInfoParser {\n     StringBuilder builder = new StringBuilder();\n     builder.append(line);\n \n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n-\n     boolean ignoreStar = false;\n+    boolean endingStar = false;\n+    boolean ignoreWhitespace = false;\n \n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n+    state = State.SEARCHING_ANNOTATION;\n+    token = next();\n \n-    do {\n+    while (true) {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n+            if (endingStar) {\n+              // We've just consumed multiple stars; ignore this one.\n+              endingStar = false;\n+            } else {\n+              endingStar = true;\n+              ignoreWhitespace = true;\n             }\n-\n-            builder.append('*');\n+          } else {\n+            ignoreStar = true;\n+            endingStar = true;\n           }\n-\n-          token = next();\n-          continue;\n+          break;\n \n         case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n+          if (option == WhitespaceOption.PRESERVE && !ignoreStar && !endingStar) {\n+            builder.append('\\n');\n           }\n \n-          ignoreStar = true;\n+          ignoreStar = false;\n+          endingStar = false;\n+          ignoreWhitespace = false;\n+\n           token = next();\n           continue;\n \n         default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n-\n-              // All tokens must be separated by a space.\n-\n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n+          if (ignoreStar) {\n+            ignoreStar = false;\n+            endingStar = false;\n+          } else if (ignoreWhitespace) {\n+            builder.append(' ');\n+            ignoreWhitespace = false;\n+          }\n+          if (token == JsDocToken.EOC || token == JsDocToken.EOF ||\n               (token == JsDocToken.ANNOTATION &&\n                option != WhitespaceOption.PRESERVE)) {\n             String multilineText = builder.toString();\n@@ -1402,30 +1402,20 @@ public final class JsDocInfoParser {\n \n             int endLineno = stream.getLineno();\n             int endCharno = stream.getCharno();\n-\n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n+            jsdocBuilder.markText(multilineText, startLineno, startCharno,\n+                endLineno, endCharno);\n \n             return new ExtractionInfo(multilineText, token);\n           }\n-\n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n           builder.append(toString(token));\n+          ignoreStar = false;\n+          endingStar = false;\n+          ignoreWhitespace = false;\n \n-          line = stream.getRemainingJSDocLine();\n-\n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n-\n-          builder.append(line);\n           token = next();\n+\n       }\n-    } while (true);\n+    }\n   }\n \n ",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}