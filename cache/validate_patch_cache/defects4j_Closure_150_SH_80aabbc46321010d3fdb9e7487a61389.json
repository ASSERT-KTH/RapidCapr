{
    "patch": "```\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n      if (n.getFirstChild() != null) {\n        Node firstChild = n.getFirstChild();\n        traverse(t, firstChild, n);\n      }\n```",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e7738744 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,6 +1448,7 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n+```\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n@@ -1463,6 +1464,11 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n+      if (n.getFirstChild() != null) {\n+        Node firstChild = n.getFirstChild();\n+        traverse(t, firstChild, n);\n+      }\n+```\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}