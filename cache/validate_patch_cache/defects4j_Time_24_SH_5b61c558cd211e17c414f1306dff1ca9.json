{
    "patch": "        long oldMillis = millis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n\n        if (count > 0 && resetFields) {\n            DurationFieldType type = savedFields[0].iField.getType();\n            if (type == DateTimeFieldType.weekyear() ||\n                type == DateTimeFieldType.weekOfWeekyear()) {\n                DurationField weekyears = DurationFieldType.weekyears().getField(iChrono);\n                DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n                long w1 = getFieldValue(DateTimeFieldType.weekyear(), oldMillis);\n                long w2 = getFieldValue(DateTimeFieldType.weekyear(), millis);\n                if (w2 < w1) {\n                    long weeksSubtracted = 0;\n                    for (int i = 0; i < count; i++) {\n                        DurationField field = savedFields[i].iField.getDurationField();\n                        if (field == weeks || field == weekyears) {\n                            int value = savedFields[i].iField.set(millis, savedFields[i].iValue) - savedFields[i].iValue;\n                            if (field == weekyears) {\n                                value *= 52;\n                            }\n                            weeksSubtracted += value;\n                        }\n                    }\n                    millis = millisMinus(millis, weeksSubtracted);\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..9163ac0d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,42 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        long oldMillis = millis;\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n+\n+        if (count > 0 && resetFields) {\n+            DurationFieldType type = savedFields[0].iField.getType();\n+            if (type == DateTimeFieldType.weekyear() ||\n+                type == DateTimeFieldType.weekOfWeekyear()) {\n+                DurationField weekyears = DurationFieldType.weekyears().getField(iChrono);\n+                DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n+                long w1 = getFieldValue(DateTimeFieldType.weekyear(), oldMillis);\n+                long w2 = getFieldValue(DateTimeFieldType.weekyear(), millis);\n+                if (w2 < w1) {\n+                    long weeksSubtracted = 0;\n+                    for (int i = 0; i < count; i++) {\n+                        DurationField field = savedFields[i].iField.getDurationField();\n+                        if (field == weeks || field == weekyears) {\n+                            int value = savedFields[i].iField.set(millis, savedFields[i].iValue) - savedFields[i].iValue;\n+                            if (field == weekyears) {\n+                                value *= 52;\n+                            }\n+                            weeksSubtracted += value;\n+                        }\n+                    }\n+                    millis = millisMinus(millis, weeksSubtracted);\n+                }\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}