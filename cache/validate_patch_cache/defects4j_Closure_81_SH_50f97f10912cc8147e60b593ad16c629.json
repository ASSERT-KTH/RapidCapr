{
    "patch": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Name name = functionNode.getFunctionName();\n    if (name == null) {\n        int lineno = functionNode.getLineno();\n        name = new Name(lineno, 0, \"\");\n    }\n    Node node = newNode(Token.FUNCTION);\n    Node newName = transform(name);\n    node.addChildToBack(newName);\n    Node lp = newNode(Token.LP);\n    int lparenCharno = functionNode.getBody().getAbsolutePosition() + 1;\n    lp.setLineno(newName.getLineno());\n    lp.setCharno(position2charno(lparenCharno));\n    for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n\n    Node bodyNode = transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n    return node;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..6a9c3cb2 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,30 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+@Override\n+Node processFunctionNode(FunctionNode functionNode) {\n+    Name name = functionNode.getFunctionName();\n+    if (name == null) {\n+        int lineno = functionNode.getLineno();\n+        name = new Name(lineno, 0, \"\");\n+    }\n+    Node node = newNode(Token.FUNCTION);\n+    Node newName = transform(name);\n+    node.addChildToBack(newName);\n+    Node lp = newNode(Token.LP);\n+    int lparenCharno = functionNode.getBody().getAbsolutePosition() + 1;\n+    lp.setLineno(newName.getLineno());\n+    lp.setCharno(position2charno(lparenCharno));\n+    for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+    }\n+    node.addChildToBack(lp);\n+\n+    Node bodyNode = transform(functionNode.getBody());\n+    parseDirectives(bodyNode);\n+    node.addChildToBack(bodyNode);\n+    return node;\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}