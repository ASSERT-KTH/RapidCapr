{
    "patch": "        private void readTypeVariables() {\n            for (Type type : typeVariable.getBounds()) {\n                registerTypeVariablesOn(type);\n            }\n            Type actualTypeArgument = null;\n            if (typeVariable != null) {\n                for (Method m : typeVariable.getGenericDeclaration().getClass().getDeclaredMethods()) {\n                    if (m.getName().equals(typeVariable.getName())) {\n                        actualTypeArgument = ((TypeVariable<?>) m.getGenericReturnType()).getBounds()[0];\n                        break;\n                    }\n                }\n            }\n            registerTypeVariablesOn(actualTypeArgument != null ? actualTypeArgument : Object.class);\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..edc688049 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,26 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+        private void readTypeVariables() {\n+            for (Type type : typeVariable.getBounds()) {\n+                registerTypeVariablesOn(type);\n+            }\n+            Type actualTypeArgument = null;\n+            if (typeVariable != null) {\n+                for (Method m : typeVariable.getGenericDeclaration().getClass().getDeclaredMethods()) {\n+                    if (m.getName().equals(typeVariable.getName())) {\n+                        actualTypeArgument = ((TypeVariable<?>) m.getGenericReturnType()).getBounds()[0];\n+                        break;\n+                    }\n+                }\n+            }\n+            registerTypeVariablesOn(actualTypeArgument != null ? actualTypeArgument : Object.class);\n+        }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}