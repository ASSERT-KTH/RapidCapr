{
    "patch": "  /**\n   * Convenience method that checks if the metadata has a specific key\n   * and returns its value.\n   */\n  public String getMetadata(String metaKey) {\n    if (metadata == null) {\n      return null;\n    }\n>>> [ INFILL ] <<<\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..093dd151 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+  /**\n+   * Convenience method that checks if the metadata has a specific key\n+   * and returns its value.\n+   */\n+  public String getMetadata(String metaKey) {\n+    if (metadata == null) {\n+      return null;\n+    }\n+>>> [ INFILL ] <<<\n+  }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}