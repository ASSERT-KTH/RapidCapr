{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int offsetLocal = getOffset(instantLocal);\n        long nextLocal = nextTransition(instantLocal - offsetLocal);\n        if (nextLocal == instantLocal - offsetLocal) {\n            // no transition at current instant\n            return offsetLocal;\n        }\n        int offsetAdjusted = getOffset(nextLocal);\n        if (offsetLocal > offsetAdjusted) {\n            // gap is present if advancing forward\n            long nextAdjusted = nextTransition(nextLocal);\n            if (nextAdjusted == nextLocal) {\n                return offsetLocal;\n            } else {\n                long prev = previousTransition(instantLocal - offsetLocal);\n                if (prev < nextAdjusted) {\n                    // current moment falls in the gap, choose the earlier instant\n                    return offsetLocal;\n                }\n            }\n        } else if (offsetLocal < offsetAdjusted) {\n            // overlap is present if advancing backward\n            long nextOverlap = nextTransition(nextLocal - 1);\n            if (nextOverlap > instantLocal - offsetLocal) {\n                return offsetAdjusted;\n            } else {\n                return offsetLocal;\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..089f0037 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,25 +877,33 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n+        long nextLocal = nextTransition(instantLocal - offsetLocal);\n+        if (nextLocal == instantLocal - offsetLocal) {\n+            // no transition at current instant\n+            return offsetLocal;\n+        }\n+        int offsetAdjusted = getOffset(nextLocal);\n+        if (offsetLocal > offsetAdjusted) {\n+            // gap is present if advancing forward\n+            long nextAdjusted = nextTransition(nextLocal);\n+            if (nextAdjusted == nextLocal) {\n+                return offsetLocal;\n+            } else {\n+                long prev = previousTransition(instantLocal - offsetLocal);\n+                if (prev < nextAdjusted) {\n+                    // current moment falls in the gap, choose the earlier instant\n                     return offsetLocal;\n                 }\n             }\n+        } else if (offsetLocal < offsetAdjusted) {\n+            // overlap is present if advancing backward\n+            long nextOverlap = nextTransition(nextLocal - 1);\n+            if (nextOverlap > instantLocal - offsetLocal) {\n+                return offsetAdjusted;\n+            } else {\n+                return offsetLocal;\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2002-06-03T00:00:00.000-00:01:15> but was:<2002-06-02T00:00:00.000-00:01:15>",
    "test_result": "FAIL"
}