{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    Period result;\n    if (getWeeks() != 0) {\n        int weeks = getWeeks();\n        long weekMillis = weeks * ((long) DateTimeConstants.MILLIS_PER_WEEK);\n        result = new Period(getYears(), getMonths(), 0, weeks, getDays(), 0, 0, 0, 0, type);\n        if (millis < 0 && weekMillis > 0) {\n            result = result.withMillis(-weekMillis + millis);\n        } else {\n            result = result.withMillis(millis - weekMillis);\n        }\n    } else {\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..af386f28 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,15 +1613,25 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    Period result;\n+    if (getWeeks() != 0) {\n+        int weeks = getWeeks();\n+        long weekMillis = weeks * ((long) DateTimeConstants.MILLIS_PER_WEEK);\n+        result = new Period(getYears(), getMonths(), 0, weeks, getDays(), 0, 0, 0, 0, type);\n+        if (millis < 0 && weekMillis > 0) {\n+            result = result.withMillis(-weekMillis + millis);\n+        } else {\n+            result = result.withMillis(millis - weekMillis);\n+        }\n+    } else {\n         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+        result = new Period(millis, type, ISOChronology.getInstanceUTC());\n         int years = getYears();\n         int months = getMonths();\n         if (years != 0 || months != 0) {\n@@ -1634,7 +1644,8 @@ public final class Period\n                 result = result.withMonths(months);\n             }\n         }\n-        return result;\n     }\n+    return result;\n+}\n \n }",
    "result_reason": "error: no suitable constructor found for Period(int,int,int,int,int,int,int,int,int,PeriodType)",
    "test_result": "ERROR"
}