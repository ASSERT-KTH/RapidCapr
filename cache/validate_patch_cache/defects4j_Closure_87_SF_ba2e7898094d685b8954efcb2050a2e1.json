{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n          \n        // If it's an EXPR_RESULT node, check if it has a direct child that\n        // is not an expression (like a function declaration). We don't\n        // want to fold those expressions.\n        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n          Node exprChild = maybeExpr.getFirstChild();\n          while (exprChild != null) {\n            if (!NodeUtil.isExpressionNode(exprChild)) {\n              return false;\n            }\n            exprChild = exprChild.getNext();\n          }\n          return true;\n        }\n          \n        // It's a regular expression we can fold.\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..4d10024d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -520,20 +520,25 @@ public class PeepholeSubstituteAlternateSyntax\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+          \n+        // If it's an EXPR_RESULT node, check if it has a direct child that\n+        // is not an expression (like a function declaration). We don't\n+        // want to fold those expressions.\n+        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+          Node exprChild = maybeExpr.getFirstChild();\n+          while (exprChild != null) {\n+            if (!NodeUtil.isExpressionNode(exprChild)) {\n+              return false;\n+            }\n+            exprChild = exprChild.getNext();\n+          }\n+          return true;\n+        }\n+          \n+        // It's a regular expression we can fold.\n+        return NodeUtil.isExpressionNode(maybeExpr);\n       }\n     }\n-\n     return false;\n   }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}