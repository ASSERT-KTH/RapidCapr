{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) {\n    return;\n  }\n\n  // Handle function inputs.\n  // Handle cases where parent is a call or new expression.\n  if (n.getType() == Token.LP && (parent.getType() == Token.CALL || parent.getType() == Token.NEW)) {\n    handleFunctionInputs(n);\n    return;\n  }\n\n  // Handle cases where parent is a function.\n  if (parent.getType() == Token.FUNCTION) {\n    if (n.getType() == Token.LP) {\n      handleFunctionInputs(parent);\n      return;\n    } else if (n.getType() == Token.FUNCTION && parent.getParent().getType() == Token.SCRIPT) {\n      defineDeclaredFunction(n, parent);\n      return;\n    }\n  }\n\n  // Handle cases where parent is not a function.\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() != Token.NAME) {\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    default:\n      attachLiteralTypes(n);\n      break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..fded9709 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,48 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode()) {\n+    return;\n+  }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+  // Handle function inputs.\n+  // Handle cases where parent is a call or new expression.\n+  if (n.getType() == Token.LP && (parent.getType() == Token.CALL || parent.getType() == Token.NEW)) {\n+    handleFunctionInputs(n);\n+    return;\n+  }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+  // Handle cases where parent is a function.\n+  if (parent.getType() == Token.FUNCTION) {\n+    if (n.getType() == Token.LP) {\n+      handleFunctionInputs(parent);\n+      return;\n+    } else if (n.getType() == Token.FUNCTION && parent.getParent().getType() == Token.SCRIPT) {\n+      defineDeclaredFunction(n, parent);\n+      return;\n     }\n+  }\n+\n+  // Handle cases where parent is not a function.\n+  switch (n.getType()) {\n+    case Token.FUNCTION:\n+      if (parent.getType() != Token.NAME) {\n+        defineDeclaredFunction(n, parent);\n+      }\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.VAR:\n+      defineVar(n, parent);\n+      break;\n+    default:\n+      attachLiteralTypes(n);\n+      break;\n+  }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}