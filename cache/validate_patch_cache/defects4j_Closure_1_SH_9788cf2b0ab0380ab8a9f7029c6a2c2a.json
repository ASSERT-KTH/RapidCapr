{
    "patch": "    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n    // Group the function arguments in referenced or unreferenced ones and remove the latter ones\n    List<Node> referencedArgs = new ArrayList<>();\n    List<Node> unreferencedArgs = new ArrayList<>();\n    for (Node arg : argList.children()) {\n      String argName = arg.getString();\n      Var var = fnScope.getVar(argName);        \n      if (referenced.contains(var)) {         \n        referencedArgs.add(arg);\n      } else {\n        unreferencedArgs.add(arg);\n      }\n    }\n\n    if (!unreferencedArgs.isEmpty()) {\n      for (Node toRemove : unreferencedArgs) {\n        argList.removeChild(toRemove);\n        compiler.reportCodeChange();\n      }\n    }\n\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..04a8b82e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Group the function arguments in referenced or unreferenced ones and remove the latter ones\n+    List<Node> referencedArgs = new ArrayList<>();\n+    List<Node> unreferencedArgs = new ArrayList<>();\n+    for (Node arg : argList.children()) {\n+      String argName = arg.getString();\n+      Var var = fnScope.getVar(argName);        \n+      if (referenced.contains(var)) {         \n+        referencedArgs.add(arg);\n+      } else {\n+        unreferencedArgs.add(arg);\n+      }\n+    }\n+\n+    if (!unreferencedArgs.isEmpty()) {\n+      for (Node toRemove : unreferencedArgs) {\n+        argList.removeChild(toRemove);\n+        compiler.reportCodeChange();\n+      }\n+    }\n+\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}