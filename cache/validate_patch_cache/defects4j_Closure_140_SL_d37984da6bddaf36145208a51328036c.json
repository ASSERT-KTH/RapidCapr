{
    "patch": "if (module == null) {\n  if (inputs.length == 0) {\n    throw new IllegalStateException(\"No inputs\");\n  }\n\n  return inputs[0].getAstRoot(this);\n}\n\nList<CompilerInput> moduleInputs = module.getInputs();\nif (moduleInputs.size() > 0) {\n  return moduleInputs.get(0).getAstRoot(this);\n}\n\n// If the module has no inputs, try to get the root node from its transitive dependencies\nJSModuleGraph moduleGraph = getModuleGraph();\nfor (JSModule m : moduleGraph.getTransitiveDepsDeepestFirst(module)) {\n  List<CompilerInput> inputs = m.getInputs();\n  if (!inputs.isEmpty()) {\n    return inputs.get(0).getAstRoot(this);\n  }\n}\n\nthrow new IllegalStateException(\"Module has no inputs\"); ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d2524b4f..8d7f1e22 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -256,43 +256,60 @@ public class Compiler extends AbstractCompiler {\n   /**\n    * Initializes the instance state needed for a compile job.\n    */\n-  public void init(JSSourceFile[] externs, JSModule[] modules,\n-      CompilerOptions options) {\n-    initOptions(options);\n+  public Region getSourceRegion(String sourceName, int lineNumber) {\n+    if (lineNumber < 1) {\n+      return null;\n+    }\n+    SourceFile input = getSourceFileByName(sourceName);\n+    if (input != null) {\n+      return input.getRegion(lineNumber);\n+    }\n+    return null;\n+  }\n \n-    checkFirstModule(modules);\n+  //------------------------------------------------------------------------\n+  // Package-private helpers\n+  //------------------------------------------------------------------------\n \n-    this.externs = makeCompilerInput(externs, true);\n-    this.modules = modules;\n-    // Generate the module graph, and report any errors in the module\n-    // specification as errors.\n-    try {\n-      this.moduleGraph = new JSModuleGraph(modules);\n-    } catch (JSModuleGraph.ModuleDependenceException e) {\n-      // problems with the module format.  Report as an error.  The\n-      // message gives all details.\n-      report(JSError.make(MODULE_DEPENDENCY_ERROR,\n-          e.getModule().getName(), e.getDependentModule().getName()));\n-      return;\n+  @Override\n+  Node getNodeForCodeInsertion(JSModule module) {\n+    if (module == null) {\n+      if (inputs.length == 0) {\n+        throw new IllegalStateException(\"No inputs\");\n+      }\n+\n+      return inputs[0].getAstRoot(this);\n     }\n-    this.inputs = getAllInputsFromModules();\n-    initBasedOnOptions();\n \n-    initInputsByNameMap();\n+    List<CompilerInput> inputs = module.getInputs();\n+    if (inputs.size() > 0) {\n+      return inputs.get(0).getAstRoot(this);\n+    }\n+if (module == null) {\n+  if (inputs.length == 0) {\n+    throw new IllegalStateException(\"No inputs\");\n   }\n \n-  /**\n-   * Do any initialization that is dependent on the compiler options.\n-   */\n-  private void initBasedOnOptions() {\n-    // Create the source map if necessary.\n-    if (options.sourceMapOutputPath != null) {\n-      sourceMap = new SourceMap();\n-    }\n+  return inputs[0].getAstRoot(this);\n+}\n+\n+List<CompilerInput> moduleInputs = module.getInputs();\n+if (moduleInputs.size() > 0) {\n+  return moduleInputs.get(0).getAstRoot(this);\n+}\n+\n+// If the module has no inputs, try to get the root node from its transitive dependencies\n+JSModuleGraph moduleGraph = getModuleGraph();\n+for (JSModule m : moduleGraph.getTransitiveDepsDeepestFirst(module)) {\n+  List<CompilerInput> inputs = m.getInputs();\n+  if (!inputs.isEmpty()) {\n+    return inputs.get(0).getAstRoot(this);\n   }\n+}\n \n-  private CompilerInput[] makeCompilerInput(\n-      JSSourceFile[] files, boolean isExtern) {\n+throw new IllegalStateException(\"Module has no inputs\"); \n+    throw new IllegalStateException(\"Root module has no inputs\");\n+  }\n     CompilerInput [] inputs = new CompilerInput[files.length];\n     for (int i = 0; i < files.length; ++i) {\n       inputs[i] = new CompilerInput(files[i], isExtern);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}