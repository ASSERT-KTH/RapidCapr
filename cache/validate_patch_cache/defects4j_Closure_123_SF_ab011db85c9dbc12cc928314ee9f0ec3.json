{
    "patch": "public static String fixCode(String code) {\n    // Replace 'in' operator inside the array with method contains() of class Arrays\n    code = code.replaceAll(\"\\\\[(\\\\s)*([^\\\\]]+)(\\\\s)+(in)(\\\\s)+([^\\\\]]+)\\\\]\",\n            \"Arrays.asList($2).contains($6)\");\n\n    // Replace 'in' operator inside the for-each loop with method contains() of class Iterable\n    code = code.replaceAll(\"for\\\\s*\\\\(\\\\s*([^\\\\s]+)\\\\s(\\\\s)*:(\\\\s)*([^\\\\s\\\\)]+)(\\\\s)+(in)(\\\\s)+([^\\\\)]+)\\\\)\",\n            \"for($1:$4)if($4 instanceof Object[]?Arrays.asList((Object[])$4).contains($1):$4 instanceof Iterable?((Iterable)$4).contains($1):$4 instanceof Map?((Map)$4).entrySet().stream().filter(e->Objects.equals(e.getKey(),$1)||Objects.equals(e.getValue(),$1)).findFirst().isPresent():false)\");\n\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..39688de0 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,17 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    // Replace 'in' operator inside the array with method contains() of class Arrays\n+    code = code.replaceAll(\"\\\\[(\\\\s)*([^\\\\]]+)(\\\\s)+(in)(\\\\s)+([^\\\\]]+)\\\\]\",\n+            \"Arrays.asList($2).contains($6)\");\n+\n+    // Replace 'in' operator inside the for-each loop with method contains() of class Iterable\n+    code = code.replaceAll(\"for\\\\s*\\\\(\\\\s*([^\\\\s]+)\\\\s(\\\\s)*:(\\\\s)*([^\\\\s\\\\)]+)(\\\\s)+(in)(\\\\s)+([^\\\\)]+)\\\\)\",\n+            \"for($1:$4)if($4 instanceof Object[]?Arrays.asList((Object[])$4).contains($1):$4 instanceof Iterable?((Iterable)$4).contains($1):$4 instanceof Map?((Map)$4).entrySet().stream().filter(e->Objects.equals(e.getKey(),$1)||Objects.equals(e.getValue(),$1)).findFirst().isPresent():false)\");\n+\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}