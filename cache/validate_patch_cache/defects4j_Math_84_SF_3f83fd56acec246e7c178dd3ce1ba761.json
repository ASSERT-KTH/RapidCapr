{
    "patch": "                } else {\n                    simplex = shrink(original, comparator);\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n\n            // check convergence\n                return;\n            }\n\n            simplex = shrink(original, comparator);\n\n        }\n\n    }\n    \n    private RealPointValuePair[] shrink(RealPointValuePair[] original,\n                                         final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair best = original[0];\n        final int n = original.length;\n        final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[n];\n        for (int i = 0; i < n; ++i) {\n            final double[] res = new double[original[i].getPoint().length];\n            for (int j = 0; j < res.length; ++j) {\n                res[j] = best.getPoint()[j] + sigma * (original[i].getPoint()[j] - best.getPoint()[j]);\n            }\n            shrinkedSimplex[i] = new RealPointValuePair(res, Double.NaN, false);\n        }\n        evaluate(shrinkedSimplex, comparator);\n        return shrinkedSimplex;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..aabc85135 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,27 +58,8 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                } else {\n+                    simplex = shrink(original, comparator);\n                 }\n \n                 return;\n@@ -94,9 +75,26 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 return;\n             }\n \n+            simplex = shrink(original, comparator);\n+\n         }\n \n     }\n+    \n+    private RealPointValuePair[] shrink(RealPointValuePair[] original,\n+                                         final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair best = original[0];\n+        final int n = original.length;\n+        final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[n];\n+        for (int i = 0; i < n; ++i) {\n+            final double[] res = new double[original[i].getPoint().length];\n+            for (int j = 0; j < res.length; ++j) {\n+                res[j] = best.getPoint()[j] + sigma * (original[i].getPoint()[j] - best.getPoint()[j]);\n+            }\n+            shrinkedSimplex[i] = new RealPointValuePair(res, Double.NaN, false);\n+        }\n+        evaluate(shrinkedSimplex, comparator);\n+        return shrinkedSimplex;\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}