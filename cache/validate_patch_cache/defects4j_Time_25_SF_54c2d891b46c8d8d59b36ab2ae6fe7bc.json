{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int initialOffset = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    long instantAdjusted = instantLocal - initialOffset;\n    int offsetAdjusted = getOffset(instantAdjusted);\n    // if the initial estimate and adjusted estimate match, return.\n    if (initialOffset == offsetAdjusted) {\n        return initialOffset;\n    }\n    // if the adjusted instant is before the first transition, return the earliest offset\n    long nextTransition = nextTransition(instantAdjusted);\n    if (nextTransition == Long.MAX_VALUE) {\n        return offsetAdjusted;\n    }\n    // set the previous and current offsets. Initially they are equal to the adjusted offset.\n    int previousOffset = offsetAdjusted;\n    int currentOffset = offsetAdjusted;\n    // while the instant is within the transition interval, update the offsets\n    while (instantAdjusted < nextTransition) {\n        // update previous offset to current offset\n        previousOffset = currentOffset;\n        // update the instant to use the next second (using offset for current second)\n        instantAdjusted += DateTimeConstants.MILLIS_PER_SECOND;\n        // calculate current offset\n        currentOffset = getOffset(instantAdjusted);\n        // if previous and current offset differ, and the instant is on or after the next transition,\n        // determine which of the two offsets the instant should have\n        if (previousOffset != currentOffset && instantLocal >= nextTransition - previousOffset) {\n            // returns previousOffset if it's greater than the current offset. Otherwise, returns the current offset\n            return previousOffset > currentOffset ? previousOffset : currentOffset;\n        }\n    }\n    // return the current offset when instant is outside the transition interval\n    return currentOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..2bbaca16 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,42 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int initialOffset = getOffset(instantLocal);\n+    // adjust instantLocal using the estimate and recalc the offset\n+    long instantAdjusted = instantLocal - initialOffset;\n+    int offsetAdjusted = getOffset(instantAdjusted);\n+    // if the initial estimate and adjusted estimate match, return.\n+    if (initialOffset == offsetAdjusted) {\n+        return initialOffset;\n+    }\n+    // if the adjusted instant is before the first transition, return the earliest offset\n+    long nextTransition = nextTransition(instantAdjusted);\n+    if (nextTransition == Long.MAX_VALUE) {\n         return offsetAdjusted;\n     }\n+    // set the previous and current offsets. Initially they are equal to the adjusted offset.\n+    int previousOffset = offsetAdjusted;\n+    int currentOffset = offsetAdjusted;\n+    // while the instant is within the transition interval, update the offsets\n+    while (instantAdjusted < nextTransition) {\n+        // update previous offset to current offset\n+        previousOffset = currentOffset;\n+        // update the instant to use the next second (using offset for current second)\n+        instantAdjusted += DateTimeConstants.MILLIS_PER_SECOND;\n+        // calculate current offset\n+        currentOffset = getOffset(instantAdjusted);\n+        // if previous and current offset differ, and the instant is on or after the next transition,\n+        // determine which of the two offsets the instant should have\n+        if (previousOffset != currentOffset && instantLocal >= nextTransition - previousOffset) {\n+            // returns previousOffset if it's greater than the current offset. Otherwise, returns the current offset\n+            return previousOffset > currentOffset ? previousOffset : currentOffset;\n+        }\n+    }\n+    // return the current offset when instant is outside the transition interval\n+    return currentOffset;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}