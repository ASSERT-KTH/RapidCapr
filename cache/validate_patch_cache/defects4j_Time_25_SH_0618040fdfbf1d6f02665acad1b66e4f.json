{
    "patch": "if (offsetLocal == offsetAdjusted) {\n    return offsetAdjusted;\n}\nlong nextLocal = nextTransition(instantAdjusted);\nlong nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\nif (nextLocal == nextAdjusted) {\n    int offsetBeforeNext = getOffset(nextLocal - 1);\n    if (offsetLocal > offsetAdjusted && offsetBeforeNext > offsetAdjusted) {\n        return offsetAdjusted;\n    } else if (offsetLocal < offsetAdjusted && offsetBeforeNext < offsetAdjusted) {\n        return offsetAdjusted;\n    }\n} else {\n    return offsetLocal;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..bfc8875c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal == offsetAdjusted) {\n+    return offsetAdjusted;\n+}\n+long nextLocal = nextTransition(instantAdjusted);\n+long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n+if (nextLocal == nextAdjusted) {\n+    int offsetBeforeNext = getOffset(nextLocal - 1);\n+    if (offsetLocal > offsetAdjusted && offsetBeforeNext > offsetAdjusted) {\n+        return offsetAdjusted;\n+    } else if (offsetLocal < offsetAdjusted && offsetBeforeNext < offsetAdjusted) {\n+        return offsetAdjusted;\n+    }\n+} else {\n+    return offsetLocal;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}