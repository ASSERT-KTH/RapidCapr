{
    "patch": "private void init() {\n    thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n    nameValues = new ConcurrentHashMap<Integer, KeyValue[]>();\n    StringBuilder regex = new StringBuilder();\n    List<Strategy> collector = new ArrayList<Strategy>();\n    Matcher patternMatcher = formatPattern.matcher(pattern);\n    int start = 0;\n    while (start < pattern.length()) {\n        if (!patternMatcher.find(start) || patternMatcher.start() != start) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n        String currentFormatField = patternMatcher.group();\n        Strategy currentStrategy = getStrategy(currentFormatField);\n        start = patternMatcher.end();\n        if (start < pattern.length()) {\n            String nextFormatField = pattern.substring(start, start + 2);\n            nextStrategy = getStrategy(nextFormatField);\n            if (currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            currentFormatField = nextFormatField;\n            currentStrategy = nextStrategy;\n        }\n        if (currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n    }\n    currentFormatField = null;\n    strategies = collector.toArray(new Strategy[collector.size()]);\n    parsePattern = Pattern.compile(regex.toString());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..54340d02 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -112,42 +112,37 @@ public class FastDateParser implements DateParser, Serializable {\n      * Initialize derived fields from defining fields.\n      * This is called from constructor and from readObject (de-serialization)\n      */\n-    private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n-\n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n-\n-        StringBuilder regex= new StringBuilder();\n-        List<Strategy> collector = new ArrayList<Strategy>();\n-\n-        Matcher patternMatcher= formatPattern.matcher(pattern);\n-        if(!patternMatcher.lookingAt()) {\n+private void init() {\n+    thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+    nameValues = new ConcurrentHashMap<Integer, KeyValue[]>();\n+    StringBuilder regex = new StringBuilder();\n+    List<Strategy> collector = new ArrayList<Strategy>();\n+    Matcher patternMatcher = formatPattern.matcher(pattern);\n+    int start = 0;\n+    while (start < pattern.length()) {\n+        if (!patternMatcher.find(start) || patternMatcher.start() != start) {\n             throw new IllegalArgumentException(\"Invalid pattern\");\n         }\n-\n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n-            }\n-            String nextFormatField= patternMatcher.group();\n+        String currentFormatField = patternMatcher.group();\n+        Strategy currentStrategy = getStrategy(currentFormatField);\n+        start = patternMatcher.end();\n+        if (start < pattern.length()) {\n+            String nextFormatField = pattern.substring(start, start + 2);\n             nextStrategy = getStrategy(nextFormatField);\n-            if(currentStrategy.addRegex(this, regex)) {\n+            if (currentStrategy.addRegex(this, regex)) {\n                 collector.add(currentStrategy);\n             }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n+            currentFormatField = nextFormatField;\n+            currentStrategy = nextStrategy;\n         }\n-        if(currentStrategy.addRegex(this, regex)) {\n+        if (currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n     }\n+    currentFormatField = null;\n+    strategies = collector.toArray(new Strategy[collector.size()]);\n+    parsePattern = Pattern.compile(regex.toString());\n+}\n \n     // Accessors\n     //-----------------------------------------------------------------------",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}