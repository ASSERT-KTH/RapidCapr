{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetLocal = getOffset(instantLocal);\n\n    // Find the transition times just before and after the local time\n    List<Long> transitions = new ArrayList<>();\n    long t = previousTransition(instantLocal + 1);\n    while (t >= Long.MIN_VALUE) { // get all the transition times before instantLocal\n        transitions.add(0, t);\n        t = previousTransition(t + 1);\n    }\n    t = nextTransition(instantLocal);\n    while (t <= Long.MAX_VALUE) { // get all the transition times after instantLocal\n        transitions.add(t);\n        t = nextTransition(t + 1);\n    }\n\n    // Iterate over the transitions and pick the one that matches the direction of the offset change\n    for (Long transition : transitions) {\n        int offset = getOffset(transition - 1);\n        if (offsetLocal > offset) {\n            if (getOffset(transition) != offsetLocal) {\n                return offset;\n            }\n            long diff = instantLocal - transition;\n            if (diff < 0) {\n                return offset;\n            } else if (diff > 0) {\n                return offsetLocal;\n            }\n        }\n    }\n\n    return offsetLocal; // if no valid transition found, return local time's offset\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..abd3c85b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,41 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offsetLocal = getOffset(instantLocal);\n+\n+    // Find the transition times just before and after the local time\n+    List<Long> transitions = new ArrayList<>();\n+    long t = previousTransition(instantLocal + 1);\n+    while (t >= Long.MIN_VALUE) { // get all the transition times before instantLocal\n+        transitions.add(0, t);\n+        t = previousTransition(t + 1);\n+    }\n+    t = nextTransition(instantLocal);\n+    while (t <= Long.MAX_VALUE) { // get all the transition times after instantLocal\n+        transitions.add(t);\n+        t = nextTransition(t + 1);\n+    }\n+\n+    // Iterate over the transitions and pick the one that matches the direction of the offset change\n+    for (Long transition : transitions) {\n+        int offset = getOffset(transition - 1);\n+        if (offsetLocal > offset) {\n+            if (getOffset(transition) != offsetLocal) {\n+                return offset;\n+            }\n+            long diff = instantLocal - transition;\n+            if (diff < 0) {\n+                return offset;\n+            } else if (diff > 0) {\n+                return offsetLocal;\n             }\n         }\n-        return offsetAdjusted;\n     }\n \n+    return offsetLocal; // if no valid transition found, return local time's offset\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}