{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n    final RealMatrix u = dec.getU();\n    final RealMatrix s = dec.getS();\n    final RealMatrix sqrtS = s.scalarMatrix(s.getRowDimension());\n    for (int i = 0; i < sqrtS.getRowDimension(); i++) {\n        for (int j = 0; j < sqrtS.getColumnDimension(); j++) {\n            double val = sqrtS.getEntry(i, j);\n            if (val >= 0) {\n                val = FastMath.sqrt(val);\n            } else {\n                val = 0;\n            }\n            sqrtS.setEntry(i, j, val);\n        }\n    }\n    final RealMatrix us = u.multiply(sqrtS);\n    return us.multiply(u.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..012de0cab 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n+    final RealMatrix u = dec.getU();\n+    final RealMatrix s = dec.getS();\n+    final RealMatrix sqrtS = s.scalarMatrix(s.getRowDimension());\n+    for (int i = 0; i < sqrtS.getRowDimension(); i++) {\n+        for (int j = 0; j < sqrtS.getColumnDimension(); j++) {\n+            double val = sqrtS.getEntry(i, j);\n+            if (val >= 0) {\n+                val = FastMath.sqrt(val);\n+            } else {\n+                val = 0;\n+            }\n+            sqrtS.setEntry(i, j, val);\n+        }\n     }\n+    final RealMatrix us = u.multiply(sqrtS);\n+    return us.multiply(u.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}