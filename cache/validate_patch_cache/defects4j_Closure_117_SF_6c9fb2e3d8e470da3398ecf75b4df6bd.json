{
    "patch": "String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else if (objectType.getConstructor() != null &&\n            (objectType.getConstructor().isAbstractInterface() ||\n            objectType.getConstructor().isInterface())) {\n            // interfaces\n            while (objectType != null && !objectType.hasOwnProperty(propName)) {\n              objectType = objectType.getImplicitPrototype();\n            }\n        } else if (objectType.getReferenceName() != null) {\n          String qualifiedName =\n              objectType.getReferenceName().getQName();\n          objectType = getTypeRegistry().getType(qualifiedName);\n          if (objectType != null) {\n            while (objectType != null && !objectType.hasOwnProperty(propName)) {\n              objectType = objectType.getImplicitPrototype();\n            }\n          }\n        }\n\n        // Don't show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (objectType != null && objectType.isFunctionPrototypeType()) {\n          if (objectType.getReferenceName() != null) {\n            return objectType.getReferenceName().getShortName() + \".\" + propName;\n          } else {\n            return objectType.toString() + \".\" + propName;\n          }\n        }\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType()) {\n      return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      // Don't show complex function names.\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..e365dc86 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -721,7 +721,7 @@ class TypeValidator {\n    * @param dereference If true, the type of the node will be dereferenced\n    *     to an Object type, if possible.\n    */\n-  String getReadableJSTypeName(Node n, boolean dereference) {\n+String getReadableJSTypeName(Node n, boolean dereference) {\n \n     // The best type name is the actual type name.\n \n@@ -736,19 +736,32 @@ class TypeValidator {\n             objectType.getConstructor().isInterface()) {\n           objectType = FunctionType.getTopDefiningInterface(\n               objectType, propName);\n-        } else {\n-          // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n+        } else if (objectType.getConstructor() != null &&\n+            (objectType.getConstructor().isAbstractInterface() ||\n+            objectType.getConstructor().isInterface())) {\n+            // interfaces\n+            while (objectType != null && !objectType.hasOwnProperty(propName)) {\n+              objectType = objectType.getImplicitPrototype();\n+            }\n+        } else if (objectType.getReferenceName() != null) {\n+          String qualifiedName =\n+              objectType.getReferenceName().getQName();\n+          objectType = getTypeRegistry().getType(qualifiedName);\n+          if (objectType != null) {\n+            while (objectType != null && !objectType.hasOwnProperty(propName)) {\n+              objectType = objectType.getImplicitPrototype();\n+            }\n           }\n         }\n \n         // Don't show complex function names or anonymous types.\n         // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n+        if (objectType != null && objectType.isFunctionPrototypeType()) {\n+          if (objectType.getReferenceName() != null) {\n+            return objectType.getReferenceName().getShortName() + \".\" + propName;\n+          } else {\n+            return objectType.toString() + \".\" + propName;\n+          }\n         }\n       }\n     }\n@@ -760,9 +773,7 @@ class TypeValidator {\n         type = dereferenced;\n       }\n     }\n-    if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n+    if (type.isFunctionPrototypeType()) {\n       return type.toString();\n     }\n     String qualifiedName = n.getQualifiedName();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}