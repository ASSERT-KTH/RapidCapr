{
    "patch": "List<Node> nestedRecordTypes = new ArrayList<>();\nif (constraintObj.isRecordType()) {\n  nestedRecordTypes.add(constraintObj.restrictByNotNullOrUndefined());\n  if (JSType.cast(constraintObj.getProp(CHECK_INITIALIZERS_ARG)) != null) {\n    this.rescope(namedTypes.get(NOMINAL_INITIALIZE_TYPE), \"arguments[0]\", \"param\");\n  }\n}\nwhile (!nestedRecordTypes.isEmpty()) {\n  ObjectType objType = (ObjectType) nestedRecordTypes.remove(0);\n  for (String prop : objType.getOwnPropertyNames()) {\n    JSType propType = objType.getPropertyType(prop);\n    if (!isPropertyTypeDeclared(prop)) {\n      JSType typeToInfer = propType;\n      if (!hasProperty(prop)) {\n        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n            .getLeastSupertype(propType);\n      }\n      defineInferredProperty(prop, typeToInfer, null);\n    }\n    if (propType.isRecordType()) {\n      nestedRecordTypes.add((ObjectType) propType.restrictByNotNullOrUndefined());\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..e4d0a544 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,30 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+List<Node> nestedRecordTypes = new ArrayList<>();\n+if (constraintObj.isRecordType()) {\n+  nestedRecordTypes.add(constraintObj.restrictByNotNullOrUndefined());\n+  if (JSType.cast(constraintObj.getProp(CHECK_INITIALIZERS_ARG)) != null) {\n+    this.rescope(namedTypes.get(NOMINAL_INITIALIZE_TYPE), \"arguments[0]\", \"param\");\n+  }\n+}\n+while (!nestedRecordTypes.isEmpty()) {\n+  ObjectType objType = (ObjectType) nestedRecordTypes.remove(0);\n+  for (String prop : objType.getOwnPropertyNames()) {\n+    JSType propType = objType.getPropertyType(prop);\n+    if (!isPropertyTypeDeclared(prop)) {\n+      JSType typeToInfer = propType;\n+      if (!hasProperty(prop)) {\n+        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+            .getLeastSupertype(propType);\n+      }\n+      defineInferredProperty(prop, typeToInfer, null);\n+    }\n+    if (propType.isRecordType()) {\n+      nestedRecordTypes.add((ObjectType) propType.restrictByNotNullOrUndefined());\n+    }\n+  }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}