{
    "patch": "Name functionNameNode = functionNode.getFunctionName();\nNode newName = null;\nif (functionNameNode != null) {\n  newName = transform(functionNameNode);\n  // Check if newName is a string node, otherwise create a new NAME node with its value set to newName's identifier.\n  if (newName.getType() != Token.NAME) {\n    Node nameNode = newNode(Token.NAME, newName.getString());\n    nameNode.setLineno(newName.getLineno());\n    nameNode.setCharno(newName.getCharno());\n    newName = nameNode;\n  }\n} else {\n  // We create an empty name node.\n  newName = newNode(Token.NAME);\n  newName.setString(\"\");\n  newName.setLineno(functionNode.getLineno());\n  newName.setCharno(position2charno(functionNode.getAbsolutePosition()));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..a8b6a972 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,24 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+Name functionNameNode = functionNode.getFunctionName();\n+Node newName = null;\n+if (functionNameNode != null) {\n+  newName = transform(functionNameNode);\n+  // Check if newName is a string node, otherwise create a new NAME node with its value set to newName's identifier.\n+  if (newName.getType() != Token.NAME) {\n+    Node nameNode = newNode(Token.NAME, newName.getString());\n+    nameNode.setLineno(newName.getLineno());\n+    nameNode.setCharno(newName.getCharno());\n+    newName = nameNode;\n+  }\n+} else {\n+  // We create an empty name node.\n+  newName = newNode(Token.NAME);\n+  newName.setString(\"\");\n+  newName.setLineno(functionNode.getLineno());\n+  newName.setCharno(position2charno(functionNode.getAbsolutePosition()));\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: no suitable method found for newNode(int,String)",
    "test_result": "ERROR"
}