{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    DurationFieldType[] orderedTypes = new DurationFieldType[] {\n            DurationFieldType.years(), DurationFieldType.months(), DurationFieldType.weeks(), DurationFieldType.days(),\n            DurationFieldType.hours(), DurationFieldType.minutes(), DurationFieldType.seconds(), DurationFieldType.millis()};\n\n    long durationMillis = getMillis();\n    for (DurationFieldType fieldType : orderedTypes) {\n        if (type.isSupported(fieldType)) {\n            int value = 0;\n            if (fieldType == DurationFieldType.years()) {\n                value = getYears();\n                durationMillis += ((long) value) * ((long) DateTimeConstants.MILLIS_PER_YEAR);\n            } else if (fieldType == DurationFieldType.months()) {\n                value = getMonths();\n                durationMillis += ((long) value) * ((long) DateTimeConstants.MILLIS_PER_MONTH);\n            } else if (fieldType == DurationFieldType.weeks()) {\n                value = getWeeks();\n                durationMillis += ((long) value) * ((long) DateTimeConstants.MILLIS_PER_WEEK);\n            } else if (fieldType == DurationFieldType.days()) {\n                value = getDays();\n                durationMillis += ((long) value) * ((long) DateTimeConstants.MILLIS_PER_DAY);\n            } else if (fieldType == DurationFieldType.hours()) {\n                value = getHours();\n                durationMillis += ((long) value) * ((long) DateTimeConstants.MILLIS_PER_HOUR);\n            } else if (fieldType == DurationFieldType.minutes()) {\n                value = getMinutes();\n                durationMillis += ((long) value) * ((long) DateTimeConstants.MILLIS_PER_MINUTE);\n            } else if (fieldType == DurationFieldType.seconds()) {\n                value = getSeconds();\n                durationMillis += ((long) value) * ((long) DateTimeConstants.MILLIS_PER_SECOND);\n            } else if (fieldType == DurationFieldType.millis()) {\n                value = getMillis();\n                durationMillis += value;\n            }\n            if (fieldType == DurationFieldType.years() || fieldType == DurationFieldType.months()) {\n                int[] normalizedValues = normalizeDurationField(durationMillis,\n                        DateTimeUtils.getPeriodType(new PeriodType(fieldType)));\n                if (fieldType == DurationFieldType.years()) {\n                    durationMillis = setYear(durationMillis, normalizedValues[0]);\n                } else if (fieldType == DurationFieldType.months()) {\n                    durationMillis = setMonth(durationMillis, normalizedValues[0]);\n                }\n            }\n        }\n    }\n\n    Period result = new Period(durationMillis, type, ISOChronology.getInstanceUTC());\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..6d2436fc 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,55 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    DurationFieldType[] orderedTypes = new DurationFieldType[] {\n+            DurationFieldType.years(), DurationFieldType.months(), DurationFieldType.weeks(), DurationFieldType.days(),\n+            DurationFieldType.hours(), DurationFieldType.minutes(), DurationFieldType.seconds(), DurationFieldType.millis()};\n+\n+    long durationMillis = getMillis();\n+    for (DurationFieldType fieldType : orderedTypes) {\n+        if (type.isSupported(fieldType)) {\n+            int value = 0;\n+            if (fieldType == DurationFieldType.years()) {\n+                value = getYears();\n+                durationMillis += ((long) value) * ((long) DateTimeConstants.MILLIS_PER_YEAR);\n+            } else if (fieldType == DurationFieldType.months()) {\n+                value = getMonths();\n+                durationMillis += ((long) value) * ((long) DateTimeConstants.MILLIS_PER_MONTH);\n+            } else if (fieldType == DurationFieldType.weeks()) {\n+                value = getWeeks();\n+                durationMillis += ((long) value) * ((long) DateTimeConstants.MILLIS_PER_WEEK);\n+            } else if (fieldType == DurationFieldType.days()) {\n+                value = getDays();\n+                durationMillis += ((long) value) * ((long) DateTimeConstants.MILLIS_PER_DAY);\n+            } else if (fieldType == DurationFieldType.hours()) {\n+                value = getHours();\n+                durationMillis += ((long) value) * ((long) DateTimeConstants.MILLIS_PER_HOUR);\n+            } else if (fieldType == DurationFieldType.minutes()) {\n+                value = getMinutes();\n+                durationMillis += ((long) value) * ((long) DateTimeConstants.MILLIS_PER_MINUTE);\n+            } else if (fieldType == DurationFieldType.seconds()) {\n+                value = getSeconds();\n+                durationMillis += ((long) value) * ((long) DateTimeConstants.MILLIS_PER_SECOND);\n+            } else if (fieldType == DurationFieldType.millis()) {\n+                value = getMillis();\n+                durationMillis += value;\n             }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+            if (fieldType == DurationFieldType.years() || fieldType == DurationFieldType.months()) {\n+                int[] normalizedValues = normalizeDurationField(durationMillis,\n+                        DateTimeUtils.getPeriodType(new PeriodType(fieldType)));\n+                if (fieldType == DurationFieldType.years()) {\n+                    durationMillis = setYear(durationMillis, normalizedValues[0]);\n+                } else if (fieldType == DurationFieldType.months()) {\n+                    durationMillis = setMonth(durationMillis, normalizedValues[0]);\n+                }\n             }\n         }\n-        return result;\n     }\n \n+    Period result = new Period(durationMillis, type, ISOChronology.getInstanceUTC());\n+    return result;\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}