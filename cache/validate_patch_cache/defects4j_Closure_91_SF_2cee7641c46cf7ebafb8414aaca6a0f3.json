{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      // Check if the function should be skipped.\n      JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n      if (info != null && (info.isConstructor() || info.hasEnumParameterType()\n          || info.hasThisType() || info.isInterface()\n          || info.isOverride())) {\n        return false;\n      }\n\n      if (parent == null) {\n        return true;\n      }\n\n      if (parent.isFunction()) {\n        if (parent.getFirstChild() != n) {\n          return false;\n        }\n\n        // Parent is a function node whose first child is this node. Check for\n        // invalid parent function type.\n        if (parent.getJSDocInfo() != null &&\n            parent.getJSDocInfo().containsTypeAnnotations()) {\n          boolean invalidAncestor = !NodeUtil.isValidFunctionDeclarationParent(parent);\n          invalidAncestor = invalidAncestor && !NodeUtil.isValidFunctionDeclaration(parent);\n          if (invalidAncestor) {\n            return false;\n          }\n        }\n      } else {\n        // Parent is not a function node. Check for invalid parent type.\n        int parentType = parent.getType();\n        if (parentType != Token.BLOCK &&\n            parentType != Token.SCRIPT &&\n            parentType != Token.NAME &&\n            parentType != Token.ASSIGN &&\n            parentType != Token.CALL &&\n            parentType != Token.NEW &&\n            !NodeUtil.isObjectLitKey(parent)) {\n          return false;\n        }\n      }\n    } else if (n.getType() == Token.THIS) {\n      if (t.getScope().getVar(\"this\") == null) {\n        t.report(n, CheckLevel.ERROR, THIS_BEFORE_SUPER);\n        return false;\n      }\n    } else if (parent != null && parent.isCall() && n == parent.getFirstChild()) {\n      // The call node must be the first child of its parent.\n      return false;\n    }\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..3eb2e380 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,69 +79,57 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+      // Check if the function should be skipped.\n+      JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n+      if (info != null && (info.isConstructor() || info.hasEnumParameterType()\n+          || info.hasThisType() || info.isInterface()\n+          || info.isOverride())) {\n         return false;\n       }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n+      if (parent == null) {\n+        return true;\n       }\n \n-      // Don't traverse functions that are getting lent to a prototype.\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+      if (parent.isFunction()) {\n+        if (parent.getFirstChild() != n) {\n+          return false;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n+\n+        // Parent is a function node whose first child is this node. Check for\n+        // invalid parent function type.\n+        if (parent.getJSDocInfo() != null &&\n+            parent.getJSDocInfo().containsTypeAnnotations()) {\n+          boolean invalidAncestor = !NodeUtil.isValidFunctionDeclarationParent(parent);\n+          invalidAncestor = invalidAncestor && !NodeUtil.isValidFunctionDeclaration(parent);\n+          if (invalidAncestor) {\n             return false;\n           }\n         }\n+      } else {\n+        // Parent is not a function node. Check for invalid parent type.\n+        int parentType = parent.getType();\n+        if (parentType != Token.BLOCK &&\n+            parentType != Token.SCRIPT &&\n+            parentType != Token.NAME &&\n+            parentType != Token.ASSIGN &&\n+            parentType != Token.CALL &&\n+            parentType != Token.NEW &&\n+            !NodeUtil.isObjectLitKey(parent)) {\n+          return false;\n+        }\n       }\n+    } else if (n.getType() == Token.THIS) {\n+      if (t.getScope().getVar(\"this\") == null) {\n+        t.report(n, CheckLevel.ERROR, THIS_BEFORE_SUPER);\n+        return false;\n+      }\n+    } else if (parent != null && parent.isCall() && n == parent.getFirstChild()) {\n+      // The call node must be the first child of its parent.\n+      return false;\n     }\n-\n     return true;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}