{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        // if adding to month, adjust day of month to first of month to handle leap years\n        if (partial.getFieldType(fieldIndex).getFieldName(iChronology).equals(\"monthOfYear\")) {\n            int dayOfMonth = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n            int monthOfYear = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n            try {\n                instant = iChronology.yearMonth().set(instant, monthOfYear).plusMonths(valueToAdd).getYearMonthMillis();\n                int maxDayOfMonth = iChronology.monthOfYear().set(iChronology.millisOfDay().set(0L, instant), 1).getDaysInMonth();\n                if (dayOfMonth > maxDayOfMonth) {\n                    dayOfMonth = maxDayOfMonth;\n                }\n            } catch (RuntimeException e) {\n                // handle february 29th leap year exception\n                if(e instanceof IllegalArgumentException && e.getMessage() != null && e.getMessage().contains(\"Invalid date\")) {\n                    int maxDayOfMonth = iChronology.monthOfYear().set(iChronology.millisOfDay().set(0L, instant), 1).getDaysInMonth();\n                    if (dayOfMonth > maxDayOfMonth) {\n                        dayOfMonth = maxDayOfMonth;\n                    }\n                } else {\n                    throw e;\n                }\n            }\n            instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n        } else {\n            instant = partial.getFieldType(fieldIndex).getField(iChronology).add(instant, valueToAdd);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..bdc5ef3a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,48 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        // if adding to month, adjust day of month to first of month to handle leap years\n+        if (partial.getFieldType(fieldIndex).getFieldName(iChronology).equals(\"monthOfYear\")) {\n+            int dayOfMonth = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n+            int monthOfYear = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+            try {\n+                instant = iChronology.yearMonth().set(instant, monthOfYear).plusMonths(valueToAdd).getYearMonthMillis();\n+                int maxDayOfMonth = iChronology.monthOfYear().set(iChronology.millisOfDay().set(0L, instant), 1).getDaysInMonth();\n+                if (dayOfMonth > maxDayOfMonth) {\n+                    dayOfMonth = maxDayOfMonth;\n+                }\n+            } catch (RuntimeException e) {\n+                // handle february 29th leap year exception\n+                if(e instanceof IllegalArgumentException && e.getMessage() != null && e.getMessage().contains(\"Invalid date\")) {\n+                    int maxDayOfMonth = iChronology.monthOfYear().set(iChronology.millisOfDay().set(0L, instant), 1).getDaysInMonth();\n+                    if (dayOfMonth > maxDayOfMonth) {\n+                        dayOfMonth = maxDayOfMonth;\n+                    }\n+                } else {\n+                    throw e;\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            instant = partial.getFieldType(fieldIndex).getField(iChronology).add(instant, valueToAdd);\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}