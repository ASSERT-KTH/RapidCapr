{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  Set<JSType> resolvingTypes = new HashSet<>();\n  JSType resolvedType = this;\n\n  while (resolvedType.isUnresolved() && resolvingTypes.add(resolvedType)) {\n    boolean resolvedViaRegistry = resolvedType.resolveViaRegistry(t, enclosing);\n    boolean cycleDetected = resolvedType.detectImplicitPrototypeCycle();\n\n    if (!resolvedViaRegistry && cycleDetected) {\n      resolvedType.handleTypeCycle(t);\n    } else if (!resolvedViaRegistry) {\n      resolvedType.resolveViaProperties(t, enclosing);\n    }\n\n    if (resolvedType.detectImplicitPrototypeCycle()) {\n      resolvedType.handleTypeCycle(t);\n      cycleDetected = true; // Treat error handling as unresolved\n    }\n\n    if (cycleDetected || !resolvedType.isResolved()) {\n      resolvedType = this;\n    } else {\n      resolvedType.super.resolveInternal(t, enclosing);\n      resolvedType.finishPropertyContinuations();\n    }\n  }\n\n  return registry.isLastGeneration() ? resolvedType.getReferencedType() : resolvedType;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..98ec5995 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,36 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  Set<JSType> resolvingTypes = new HashSet<>();\n+  JSType resolvedType = this;\n+\n+  while (resolvedType.isUnresolved() && resolvingTypes.add(resolvedType)) {\n+    boolean resolvedViaRegistry = resolvedType.resolveViaRegistry(t, enclosing);\n+    boolean cycleDetected = resolvedType.detectImplicitPrototypeCycle();\n+\n+    if (!resolvedViaRegistry && cycleDetected) {\n+      resolvedType.handleTypeCycle(t);\n+    } else if (!resolvedViaRegistry) {\n+      resolvedType.resolveViaProperties(t, enclosing);\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    if (resolvedType.detectImplicitPrototypeCycle()) {\n+      resolvedType.handleTypeCycle(t);\n+      cycleDetected = true; // Treat error handling as unresolved\n     }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+    if (cycleDetected || !resolvedType.isResolved()) {\n+      resolvedType = this;\n+    } else {\n+      resolvedType.super.resolveInternal(t, enclosing);\n+      resolvedType.finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n \n+  return registry.isLastGeneration() ? resolvedType.getReferencedType() : resolvedType;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}