{
    "patch": "  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match constraints on anonymous types.\n    if (constraintObj.isNominalType() || constraintObj.isFunctionType()) {\n      return;\n    }\n    // Handle the case where the constraint object is a record type.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          // If the property is not declared, we need to define it.\n          if (!hasProperty(prop)) {\n            defineInferredProperty(prop, propType, null);\n          } else {\n            // If the property is already declared, we need to update its type to match the\n            // constraint type.\n            JSType existingType = getLocalPropertyType(prop);\n            JSType leastSupertype = existingType.getLeastSupertype(propType);\n            defineDeclaredProperty(prop, leastSupertype, null);\n          }\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..d959920e 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -553,27 +553,25 @@ class PrototypeObjectType extends ObjectType {\n \n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n+    // We only want to match constraints on anonymous types.\n+    if (constraintObj.isNominalType() || constraintObj.isFunctionType()) {\n+      return;\n+    }\n     // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n         if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n+          // If the property is not declared, we need to define it.\n           if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n+            defineInferredProperty(prop, propType, null);\n+          } else {\n+            // If the property is already declared, we need to update its type to match the\n+            // constraint type.\n+            JSType existingType = getLocalPropertyType(prop);\n+            JSType leastSupertype = existingType.getLeastSupertype(propType);\n+            defineDeclaredProperty(prop, leastSupertype, null);\n           }\n-          defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}