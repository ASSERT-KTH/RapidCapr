{
    "patch": "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    \n    TimeSeries copy = (TimeSeries) super.clone();\n    \n    copy.data = new java.util.ArrayList();\n    \n    int size = this.data.size();\n    int actualStart = Math.min(start, size - 1);\n    int actualEnd = Math.min(end, size - 1);\n    \n    if (actualStart <= actualEnd) {\n        for (int i = actualStart; i <= actualEnd; i++) {\n            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(i);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();\n                return null;\n            }\n        }\n    }\n    \n    return copy;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..bce4057 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1045,31 +1045,39 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *\n      * @throws CloneNotSupportedException if there is a cloning problem.\n      */\n-    public TimeSeries createCopy(int start, int end)\n-            throws CloneNotSupportedException {\n-        if (start < 0) {\n-            throw new IllegalArgumentException(\"Requires start >= 0.\");\n-        }\n-        if (end < start) {\n-            throw new IllegalArgumentException(\"Requires start <= end.\");\n-        }\n-        TimeSeries copy = (TimeSeries) super.clone();\n-        copy.data = new java.util.ArrayList();\n-        if (this.data.size() > 0) {\n-            for (int index = start; index <= end; index++) {\n-                TimeSeriesDataItem item\n-                        = (TimeSeriesDataItem) this.data.get(index);\n-                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n-                try {\n-                    copy.add(clone);\n-                }\n-                catch (SeriesException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }\n-        return copy;\n-    }\n+public TimeSeries createCopy(int start, int end)\n+        throws CloneNotSupportedException {\n+    if (start < 0) {\n+        throw new IllegalArgumentException(\"Requires start >= 0.\");\n+    }\n+    if (end < start) {\n+        throw new IllegalArgumentException(\"Requires start <= end.\");\n+    }\n+    \n+    TimeSeries copy = (TimeSeries) super.clone();\n+    \n+    copy.data = new java.util.ArrayList();\n+    \n+    int size = this.data.size();\n+    int actualStart = Math.min(start, size - 1);\n+    int actualEnd = Math.min(end, size - 1);\n+    \n+    if (actualStart <= actualEnd) {\n+        for (int i = actualStart; i <= actualEnd; i++) {\n+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(i);\n+            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+            try {\n+                copy.add(clone);\n+            }\n+            catch (SeriesException e) {\n+                e.printStackTrace();\n+                return null;\n+            }\n+        }\n+    }\n+    \n+    return copy;\n+}\n \n     /**\n      * Creates a new timeseries by copying a subset of the data in this time",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: -1",
    "test_result": "FAIL"
}