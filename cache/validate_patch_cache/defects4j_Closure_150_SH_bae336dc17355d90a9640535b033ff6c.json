{
    "patch": "attachLiteralTypes(n);\nif (n.getType() == Token.LP && parent.getType() == Token.CALL) {\n  handleFunctionInputs(parent);\n  return;\n}\nif (n.getType() == Token.FUNCTION && NodeUtil.isFunctionExpression(n)) {\n  handleFunctionInputs(n);\n  return;\n}\nswitch (parent.getType()) {\n  case Token.FUNCTION:\n    if (n.getType() != Token.LP) {\n      defineVar(n, parent);\n    }\n    break;\n  case Token.VAR:\n  case Token.NAME:\n      defineVar(n, parent);\n      break;\n  case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n  case Token.FUNCTION:\n    if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n    }\n    if (n.getType() == Token.FUNCTION && !NodeUtil.isFunctionExpression(n)) {\n        defineDeclaredFunction(n, parent);\n    }\n    break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..1f953b13 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,38 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+attachLiteralTypes(n);\n+if (n.getType() == Token.LP && parent.getType() == Token.CALL) {\n+  handleFunctionInputs(parent);\n+  return;\n+}\n+if (n.getType() == Token.FUNCTION && NodeUtil.isFunctionExpression(n)) {\n+  handleFunctionInputs(n);\n+  return;\n+}\n+switch (parent.getType()) {\n+  case Token.FUNCTION:\n+    if (n.getType() != Token.LP) {\n+      defineVar(n, parent);\n+    }\n+    break;\n+  case Token.VAR:\n+  case Token.NAME:\n+      defineVar(n, parent);\n+      break;\n+  case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+  case Token.FUNCTION:\n+    if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+        handleFunctionInputs(parent);\n+        return;\n+    }\n+    if (n.getType() == Token.FUNCTION && !NodeUtil.isFunctionExpression(n)) {\n+        defineDeclaredFunction(n, parent);\n+    }\n+    break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}