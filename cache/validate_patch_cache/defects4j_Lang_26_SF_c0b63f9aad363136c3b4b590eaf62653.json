{
    "patch": "public String format(Date date) {\n    Calendar c = new GregorianCalendar(mTimeZone);\n    c.setMinimalDaysInFirstWeek(4); // Setting the minimal days in first week to be 4\n    c.setFirstDayOfWeek(Calendar.MONDAY); // Setting Monday as the first day of the week\n    c.setTime(date);\n\n    int year = c.get(Calendar.YEAR);\n    int week = c.get(Calendar.WEEK_OF_YEAR);\n\n    // Handle edge case where last week of the year may belong to next year\n    if (week == 53 && c.get(Calendar.MONTH) == Calendar.JANUARY) {\n        year--;\n    }\n\n    c.clear();\n    c.set(Calendar.YEAR, year);\n    c.set(Calendar.WEEK_OF_YEAR, week);\n\n    return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex e30da2a5..abab943e 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -816,12 +816,27 @@ public class FastDateFormat extends Format {\n      * @param date  the date to format\n      * @return the formatted string\n      */\n-    public String format(Date date) {\n-        Calendar c = new GregorianCalendar(mTimeZone);\n-        c.setTime(date);\n-        return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n+public String format(Date date) {\n+    Calendar c = new GregorianCalendar(mTimeZone);\n+    c.setMinimalDaysInFirstWeek(4); // Setting the minimal days in first week to be 4\n+    c.setFirstDayOfWeek(Calendar.MONDAY); // Setting Monday as the first day of the week\n+    c.setTime(date);\n+\n+    int year = c.get(Calendar.YEAR);\n+    int week = c.get(Calendar.WEEK_OF_YEAR);\n+\n+    // Handle edge case where last week of the year may belong to next year\n+    if (week == 53 && c.get(Calendar.MONTH) == Calendar.JANUARY) {\n+        year--;\n     }\n \n+    c.clear();\n+    c.set(Calendar.YEAR, year);\n+    c.set(Calendar.WEEK_OF_YEAR, week);\n+\n+    return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n+}\n+\n     /**\n      * <p>Formats a <code>Calendar</code> object.</p>\n      * ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<200[5-01-01T12]:00:00> but was:<200[4-12-27T00]:00:00>",
    "test_result": "FAIL"
}