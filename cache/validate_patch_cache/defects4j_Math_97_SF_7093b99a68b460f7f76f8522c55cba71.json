{
    "patch": "public double solve(double min, double max) throws\n        MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifyInterval(min, max);\n\n    double ret = Double.NaN;\n    final double yMin = f.value(min);\n    final double yMax = f.value(max);\n\n    // Verify bracketing\n    final double sign = yMin * yMax;\n\n    if (sign > 0) {\n        throw new IllegalArgumentException(\"Function values at endpoints\" +\n                \" do not have different signs.\" +\n                \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n                \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    }\n\n    // Initial guess\n    if (FastMath.abs(yMin) <= 0) {\n        ret = min;\n        setResult(ret, yMin, 0);\n        return ret;\n    } else if (FastMath.abs(yMax) <= 0) {\n        ret = max;\n        setResult(ret, yMax, 0);\n        return ret;\n    } else if (yMin < 0) {\n        double tmp = min;\n        min = max;\n        max = tmp;\n    }\n\n    // Brent's algorithm initialization\n    final double xMin = min;\n    final double xMax = max;\n    double x2 = xMin;\n    double f2 = yMin;\n    double x3 = xMax;\n    double f3 = yMax;\n    double x1 = Double.NaN;\n    double f1 = Double.NaN;\n    double delta = Double.NaN;\n    double m = Double.NaN;\n\n    final int maximalIterationCount = getMaximalIterationCount();\n    int i = 0;\n    while (true) {\n        if (FastMath.abs(f2) < FastMath.abs(f3)) {\n\n            if (FastMath.abs(f2) <= absoluteAccuracy ||\n                FastMath.abs(x2 - x3) <= relativeAccuracy) {\n                ret = x2;\n                setResult(ret, f2, i);\n                return ret;\n            }\n\n            if (Double.isNaN(x1) ||\n                FastMath.abs(f1) < FastMath.abs(f3)) {\n                delta = 0.5 * (x3 - x2);\n                m = (f2 - f3) / delta;\n\n                if (Double.isNaN(m) || Double.isInfinite(m)) {\n                    m = Double.POSITIVE_INFINITY;\n                }\n\n                if (Double.isNaN(delta) || Double.isInfinite(delta)) {\n                    delta = Double.POSITIVE_INFINITY;\n                }\n\n                if (i == 0) {\n                    x1 = x2 - (f2 / m);\n                } else {\n                    double z = (f2 / f1) / (f3 / f1);\n                    double p = z * ( ( (x2 - x3) * (f2 - f3) ) / ( (f1 - f3) * (f2 - f3) ) );\n                    double q = ( (x2 - x1) * (f2 - f3) ) / ( (f1 - f3) * (f2 - f1) );\n                    double r = p - q;\n                    if (r <= 0.0) {\n                        x1 = x2 - (p * (x2 - x3));\n                    } else {\n                        x1 = x2 + (q * (x2 - x1));\n                    }\n                }\n\n                if (((x1 < ((3 * x2 + x3) / 4)) && (x1 > x2)) ||\n                   ((i > 1) && (FastMath.abs(x1 - x2) >= (FastMath.abs(x2 - x3) / 2)))) {\n                    x1 = (x2 + x3) / 2.0;\n                }\n            } else {\n                delta = 0.5 * (x2 - x1);\n                m = (f1 - f2) / delta;\n\n                if (Double.isNaN(m) || Double.isInfinite(m)) {\n                    m = Double.POSITIVE_INFINITY;\n                }\n\n                if (Double.isNaN(delta) || Double.isInfinite(delta)) {\n                    delta = Double.POSITIVE_INFINITY;\n                }\n\n                double z = (f2 / f1) / (f3 / f1);\n                double p = z * ( ( (x2 - x3) * (f2 - f3) ) / ( (f1 - f3) * (f2 - f3) ) );\n                double q = ( (x2 - x1) * (f1 - f3) ) / ( (f1 - f2) * (f2 - f3) );\n                double r = p - q;\n                if (r <= 0.0) {\n                    x1 = x2 - (p * (x2 - x3));\n                } else {\n                    x1 = x2 + (q * (x2 - x1));\n                }\n\n                if (((x1 < ((3 * x2 + x3) / 4)) && (x1 > x2)) ||\n                    ((i > 1) && (FastMath.abs(x1 - x2) >= (FastMath.abs(x2 - x3) / 2)))) {\n                    x1 = (x2 + x3) / 2.0;\n                }\n            }\n\n            final double fX;\n            try {\n                fX = f.value(x1);\n            } catch (FunctionEvaluationException e) {\n                throw new RuntimeFunctionException(e);\n            }\n\n            if (FastMath.abs(fX) <= absoluteAccuracy) {\n                ret = x1;\n                setResult(ret, fX, i);\n                return ret;\n            }\n\n            i++;\n            if (i >= maximalIterationCount) {\n                throw new MaxIterationsExceededException(maximalIterationCount);\n            }\n\n            if (signum(fX) != signum(f2)) {\n                x3 = x2;\n                f3 = f2;\n                x2 = x1;\n                f2 = fX;\n            } else {\n                delta = 0.5 * (x3 - x1);\n                m = (f1 - f3) / delta;\n\n                if (Double.isNaN(m) || Double.isInfinite(m)) {\n                    m = Double.POSITIVE_INFINITY;\n                }\n\n                if (Double.isNaN(delta) || Double.isInfinite(delta)) {\n                    delta = Double.POSITIVE_INFINITY;\n                }\n\n                if (((x1 < ((3 * x2 + x3) / 4)) && (x1 > x2)) ||\n                        ((i > 1) && (FastMath.abs(x1 - x2) >= (FastMath.abs(x2 - x3) / 2)))) {\n                    x1 = (x2 + x3) / 2.0;\n                    f1 = Double.NaN;\n                }\n\n                x2 = x1;\n                f2 = fX;\n            }\n        } else {\n            // Manage brackets\n            delta = 0.5 * (x3 - x2);\n            m = (f2 - f3) / delta;\n\n            if (Double.isNaN(m) || Double.isInfinite(m)) {\n                m = Double.POSITIVE_INFINITY;\n            }\n\n            if (Double.isNaN(delta) || Double.isInfinite(delta)) {\n                delta = Double.POSITIVE_INFINITY;\n            }\n\n            final double toleranceAbs = FastMath.max(relativeAccuracy * FastMath.abs(x2),\n                absoluteAccuracy);\n\n            if ((FastMath.abs(delta) <= toleranceAbs) ||\n                (FastMath.abs(f2) <= functionValueAccuracy)) {\n                ret = x2;\n                setResult(ret, f2, i);\n                return ret;\n            }\n\n            if (FastMath.abs(f1) < FastMath.abs(f3)) {\n                x3 = x2;\n                f3 = f2;\n                x2 = x1;\n                f2 = f1;\n                x1 = x3 - delta;\n                f1 = Double.NaN;\n            } else {\n                x1 = x2;\n                f1 = f2;\n                x2 = x3;\n                f2 = f3;\n                x3 = x1 + delta;\n                f3 = Double.NaN;\n            }\n\n            if (++i >= maximalIterationCount) {\n                throw new MaxIterationsExceededException(maximalIterationCount);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..fca14e3fe 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,212 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-        } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n-        }\n+public double solve(double min, double max) throws\n+        MaxIterationsExceededException, FunctionEvaluationException {\n+    clearResult();\n+    verifyInterval(min, max);\n+\n+    double ret = Double.NaN;\n+    final double yMin = f.value(min);\n+    final double yMax = f.value(max);\n \n+    // Verify bracketing\n+    final double sign = yMin * yMax;\n+\n+    if (sign > 0) {\n+        throw new IllegalArgumentException(\"Function values at endpoints\" +\n+                \" do not have different signs.\" +\n+                \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n+                \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+    }\n+\n+    // Initial guess\n+    if (FastMath.abs(yMin) <= 0) {\n+        ret = min;\n+        setResult(ret, yMin, 0);\n         return ret;\n+    } else if (FastMath.abs(yMax) <= 0) {\n+        ret = max;\n+        setResult(ret, yMax, 0);\n+        return ret;\n+    } else if (yMin < 0) {\n+        double tmp = min;\n+        min = max;\n+        max = tmp;\n+    }\n+\n+    // Brent's algorithm initialization\n+    final double xMin = min;\n+    final double xMax = max;\n+    double x2 = xMin;\n+    double f2 = yMin;\n+    double x3 = xMax;\n+    double f3 = yMax;\n+    double x1 = Double.NaN;\n+    double f1 = Double.NaN;\n+    double delta = Double.NaN;\n+    double m = Double.NaN;\n+\n+    final int maximalIterationCount = getMaximalIterationCount();\n+    int i = 0;\n+    while (true) {\n+        if (FastMath.abs(f2) < FastMath.abs(f3)) {\n+\n+            if (FastMath.abs(f2) <= absoluteAccuracy ||\n+                FastMath.abs(x2 - x3) <= relativeAccuracy) {\n+                ret = x2;\n+                setResult(ret, f2, i);\n+                return ret;\n+            }\n+\n+            if (Double.isNaN(x1) ||\n+                FastMath.abs(f1) < FastMath.abs(f3)) {\n+                delta = 0.5 * (x3 - x2);\n+                m = (f2 - f3) / delta;\n+\n+                if (Double.isNaN(m) || Double.isInfinite(m)) {\n+                    m = Double.POSITIVE_INFINITY;\n+                }\n+\n+                if (Double.isNaN(delta) || Double.isInfinite(delta)) {\n+                    delta = Double.POSITIVE_INFINITY;\n+                }\n+\n+                if (i == 0) {\n+                    x1 = x2 - (f2 / m);\n+                } else {\n+                    double z = (f2 / f1) / (f3 / f1);\n+                    double p = z * ( ( (x2 - x3) * (f2 - f3) ) / ( (f1 - f3) * (f2 - f3) ) );\n+                    double q = ( (x2 - x1) * (f2 - f3) ) / ( (f1 - f3) * (f2 - f1) );\n+                    double r = p - q;\n+                    if (r <= 0.0) {\n+                        x1 = x2 - (p * (x2 - x3));\n+                    } else {\n+                        x1 = x2 + (q * (x2 - x1));\n+                    }\n+                }\n+\n+                if (((x1 < ((3 * x2 + x3) / 4)) && (x1 > x2)) ||\n+                   ((i > 1) && (FastMath.abs(x1 - x2) >= (FastMath.abs(x2 - x3) / 2)))) {\n+                    x1 = (x2 + x3) / 2.0;\n+                }\n+            } else {\n+                delta = 0.5 * (x2 - x1);\n+                m = (f1 - f2) / delta;\n+\n+                if (Double.isNaN(m) || Double.isInfinite(m)) {\n+                    m = Double.POSITIVE_INFINITY;\n+                }\n+\n+                if (Double.isNaN(delta) || Double.isInfinite(delta)) {\n+                    delta = Double.POSITIVE_INFINITY;\n+                }\n+\n+                double z = (f2 / f1) / (f3 / f1);\n+                double p = z * ( ( (x2 - x3) * (f2 - f3) ) / ( (f1 - f3) * (f2 - f3) ) );\n+                double q = ( (x2 - x1) * (f1 - f3) ) / ( (f1 - f2) * (f2 - f3) );\n+                double r = p - q;\n+                if (r <= 0.0) {\n+                    x1 = x2 - (p * (x2 - x3));\n+                } else {\n+                    x1 = x2 + (q * (x2 - x1));\n+                }\n+\n+                if (((x1 < ((3 * x2 + x3) / 4)) && (x1 > x2)) ||\n+                    ((i > 1) && (FastMath.abs(x1 - x2) >= (FastMath.abs(x2 - x3) / 2)))) {\n+                    x1 = (x2 + x3) / 2.0;\n+                }\n+            }\n+\n+            final double fX;\n+            try {\n+                fX = f.value(x1);\n+            } catch (FunctionEvaluationException e) {\n+                throw new RuntimeFunctionException(e);\n+            }\n+\n+            if (FastMath.abs(fX) <= absoluteAccuracy) {\n+                ret = x1;\n+                setResult(ret, fX, i);\n+                return ret;\n+            }\n+\n+            i++;\n+            if (i >= maximalIterationCount) {\n+                throw new MaxIterationsExceededException(maximalIterationCount);\n+            }\n+\n+            if (signum(fX) != signum(f2)) {\n+                x3 = x2;\n+                f3 = f2;\n+                x2 = x1;\n+                f2 = fX;\n+            } else {\n+                delta = 0.5 * (x3 - x1);\n+                m = (f1 - f3) / delta;\n+\n+                if (Double.isNaN(m) || Double.isInfinite(m)) {\n+                    m = Double.POSITIVE_INFINITY;\n+                }\n+\n+                if (Double.isNaN(delta) || Double.isInfinite(delta)) {\n+                    delta = Double.POSITIVE_INFINITY;\n+                }\n+\n+                if (((x1 < ((3 * x2 + x3) / 4)) && (x1 > x2)) ||\n+                        ((i > 1) && (FastMath.abs(x1 - x2) >= (FastMath.abs(x2 - x3) / 2)))) {\n+                    x1 = (x2 + x3) / 2.0;\n+                    f1 = Double.NaN;\n+                }\n+\n+                x2 = x1;\n+                f2 = fX;\n+            }\n+        } else {\n+            // Manage brackets\n+            delta = 0.5 * (x3 - x2);\n+            m = (f2 - f3) / delta;\n+\n+            if (Double.isNaN(m) || Double.isInfinite(m)) {\n+                m = Double.POSITIVE_INFINITY;\n+            }\n+\n+            if (Double.isNaN(delta) || Double.isInfinite(delta)) {\n+                delta = Double.POSITIVE_INFINITY;\n+            }\n+\n+            final double toleranceAbs = FastMath.max(relativeAccuracy * FastMath.abs(x2),\n+                absoluteAccuracy);\n+\n+            if ((FastMath.abs(delta) <= toleranceAbs) ||\n+                (FastMath.abs(f2) <= functionValueAccuracy)) {\n+                ret = x2;\n+                setResult(ret, f2, i);\n+                return ret;\n+            }\n+\n+            if (FastMath.abs(f1) < FastMath.abs(f3)) {\n+                x3 = x2;\n+                f3 = f2;\n+                x2 = x1;\n+                f2 = f1;\n+                x1 = x3 - delta;\n+                f1 = Double.NaN;\n+            } else {\n+                x1 = x2;\n+                f1 = f2;\n+                x2 = x3;\n+                f2 = f3;\n+                x3 = x1 + delta;\n+                f3 = Double.NaN;\n+            }\n+\n+            if (++i >= maximalIterationCount) {\n+                throw new MaxIterationsExceededException(maximalIterationCount);\n+            }\n+        }\n     }\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}