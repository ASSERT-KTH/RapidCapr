{
    "patch": "    List<DiGraphEdge<Node, ExecutionControl.Branch>> branchEdges = controlFlowGraph.getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, ExecutionControl.Branch> edge : branchEdges) {\n      if (edge.getValue() == ExecutionControl.Branch.ON_EX) {\n        return true;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..78818f0e 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,12 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    List<DiGraphEdge<Node, ExecutionControl.Branch>> branchEdges = controlFlowGraph.getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, ExecutionControl.Branch> edge : branchEdges) {\n+      if (edge.getValue() == ExecutionControl.Branch.ON_EX) {\n+        return true;\n+      }\n+    }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}