{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic class GammaFunction {\n\n    public static double regularizedGamma(double a, double x) {\n        double epsilon = 1e-9; // Default epsilon\n        double sum = 0;\n        double term = 1 / a;\n        int n = 0;\n        while (Math.abs(term) > epsilon) {\n            sum += term;\n            n++;\n            term *= x / (a + n);\n        }\n        return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..a3dd51757 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,23 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class GammaFunction {\n+\n+    public static double regularizedGamma(double a, double x) {\n+        double epsilon = 1e-9; // Default epsilon\n+        double sum = 0;\n+        double term = 1 / a;\n+        int n = 0;\n+        while (Math.abs(term) > epsilon) {\n+            sum += term;\n+            n++;\n+            term *= x / (a + n);\n+        }\n+        return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}