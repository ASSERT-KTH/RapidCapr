{
    "patch": "import java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\n\npublic class EncodingUtils {\n    \n    public static String encodeToBase64(String text) {\n        byte[] byteData = text.getBytes(StandardCharsets.UTF_8);\n        return Base64.getEncoder().encodeToString(byteData);\n    }\n    \n    public static String decodeFromBase64(String encodedText) {\n        byte[] byteData = Base64.getDecoder().decode(encodedText);\n        return new String(byteData, StandardCharsets.UTF_8);\n    }\n\n    public static String escapeNonAscii(String s, Charset charset) {\n        StringBuilder sb = new StringBuilder();\n        byte[] bytes = s.getBytes(charset);\n        for (byte b : bytes) {\n            if (b < 0x7F) {\n                sb.append((char) b);\n            } else {\n                sb.append(String.format(\"\\\\u%04x\", b & 0xffff));\n            }\n        }\n        return sb.toString();\n    }\n\n    public static String unescapeNonAscii(String s, Charset charset) {\n        StringBuilder sb = new StringBuilder();\n        String[] chars = s.split(\"\\\\\\\\u\");\n        byte[] bytes = new byte[chars.length];\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i].isEmpty()) {\n                continue;\n            }\n            int value = Integer.parseInt(chars[i], 16);\n            if (value < 0x80) {\n                bytes[i] = (byte) value;\n            } else {\n                bytes[i] = (byte) (value - 0x100);\n            }\n        }\n        return new String(bytes, charset);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..60f5cf65 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,53 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+\n+public class EncodingUtils {\n+    \n+    public static String encodeToBase64(String text) {\n+        byte[] byteData = text.getBytes(StandardCharsets.UTF_8);\n+        return Base64.getEncoder().encodeToString(byteData);\n+    }\n+    \n+    public static String decodeFromBase64(String encodedText) {\n+        byte[] byteData = Base64.getDecoder().decode(encodedText);\n+        return new String(byteData, StandardCharsets.UTF_8);\n+    }\n+\n+    public static String escapeNonAscii(String s, Charset charset) {\n+        StringBuilder sb = new StringBuilder();\n+        byte[] bytes = s.getBytes(charset);\n+        for (byte b : bytes) {\n+            if (b < 0x7F) {\n+                sb.append((char) b);\n+            } else {\n+                sb.append(String.format(\"\\\\u%04x\", b & 0xffff));\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String unescapeNonAscii(String s, Charset charset) {\n+        StringBuilder sb = new StringBuilder();\n+        String[] chars = s.split(\"\\\\\\\\u\");\n+        byte[] bytes = new byte[chars.length];\n+        for (int i = 0; i < chars.length; i++) {\n+            if (chars[i].isEmpty()) {\n+                continue;\n+            }\n+            int value = Integer.parseInt(chars[i], 16);\n+            if (value < 0x80) {\n+                bytes[i] = (byte) value;\n+            } else {\n+                bytes[i] = (byte) (value - 0x100);\n+            }\n+        }\n+        return new String(bytes, charset);\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}