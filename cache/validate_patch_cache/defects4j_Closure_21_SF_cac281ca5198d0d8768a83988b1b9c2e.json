{
    "patch": "import com.google.javascript.jscomp.*;\nimport java.util.*;\n\npublic class AutomatedProgramRepairTool implements NodeTraversal.Callback {\n  private static final String USELESS_CODE_ERROR = \"JSC_USELESS_CODE\";\n\n  private CheckLevel level;\n  private Set<Node> problemNodes;\n  \n  public AutomatedProgramRepairTool() {\n    this.level = CheckLevel.WARNING;\n  }\n\n  public boolean hasProblem() {\n    return problemNodes != null && !problemNodes.isEmpty();\n  }\n\n  public Set<Node> getProblemNodes() {\n    return problemNodes;\n  }\n\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() || n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    boolean hasSideEffect = NodeUtil.mayHaveSideEffects(n, t.getCompiler()) || (n.isFunction() && !n.isArrowFunction());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed || !hasSideEffect) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n        return;\n      }\n    }\n    if (isSimpleOp || !hasSideEffect) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase()\n            + \"' operator is not being used.\";\n      }\n    \n      JSError error = JSError.make(\n          n,\n          level,\n          USELESS_CODE_ERROR,\n          msg\n      );\n      t.getCompiler().report(error);\n\n      // protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n) || !hasSideEffect) {\n        if (problemNodes == null) {\n          problemNodes = new HashSet<Node>();\n        }\n        problemNodes.add(n);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..9f484348 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,13 +81,33 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n+import com.google.javascript.jscomp.*;\n+import java.util.*;\n+\n+public class AutomatedProgramRepairTool implements NodeTraversal.Callback {\n+  private static final String USELESS_CODE_ERROR = \"JSC_USELESS_CODE\";\n+\n+  private CheckLevel level;\n+  private Set<Node> problemNodes;\n+  \n+  public AutomatedProgramRepairTool() {\n+    this.level = CheckLevel.WARNING;\n+  }\n+\n+  public boolean hasProblem() {\n+    return problemNodes != null && !problemNodes.isEmpty();\n+  }\n+\n+  public Set<Node> getProblemNodes() {\n+    return problemNodes;\n+  }\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     // VOID nodes appear when there are extra semicolons at the BLOCK level.\n     // I've been unable to think of any cases where this indicates a bug,\n     // and apparently some people like keeping these semicolons around,\n     // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n+    if (n.isEmpty() || n.isComma()) {\n       return;\n     }\n \n@@ -110,8 +130,9 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n+    boolean hasSideEffect = NodeUtil.mayHaveSideEffects(n, t.getCompiler()) || (n.isFunction() && !n.isArrowFunction());\n     if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n+      if (isResultUsed || !hasSideEffect) {\n         return;\n       }\n       if (n == parent.getLastChild()) {\n@@ -123,29 +144,37 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n         }\n       }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+      if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n         return;\n       }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+    if (isSimpleOp || !hasSideEffect) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n         msg = \"Is there a missing '+' on the previous line?\";\n       } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n+        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase()\n+            + \"' operator is not being used.\";\n       }\n-\n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n+    \n+      JSError error = JSError.make(\n+          n,\n+          level,\n+          USELESS_CODE_ERROR,\n+          msg\n+      );\n+      t.getCompiler().report(error);\n+\n+      // protect side-effect free statements as well.\n+      if (!NodeUtil.isStatement(n) || !hasSideEffect) {\n+        if (problemNodes == null) {\n+          problemNodes = new HashSet<Node>();\n+        }\n         problemNodes.add(n);\n       }\n     }\n   }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}