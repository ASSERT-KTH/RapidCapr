{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    List<Node> argumentNodes = call.removeChildren();\n    Node functionNode = argumentNodes.get(0);\n\n    List<Node> parameterNodes = functionType.getParameters();\n    Node lastParameterNode = parameterNodes.isEmpty() ? null : parameterNodes.get(parameterNodes.size() - 1);\n\n    List<Node> varArgsNodes = lastParameterNode == null ? Collections.emptyList()\n        : lastParameterNode.isVarArgs() ? Collections.singletonList(lastParameterNode)\n            : Collections.emptyList();\n\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n\n    for (int i = 0; i < parameterNodes.size(); i++) {\n        Node parameterNode = parameterNodes.get(i);\n        Node argumentNode = argumentNodes.size() > i + 1 ? argumentNodes.get(i + 1) : null;\n\n        validator.expectArgumentMatchesParameter(t, argumentNode, getJSType(argumentNode), getJSType(parameterNode),\n            call, i + 1);\n\n        if (parameterNode.isVarArgs() || varArgsNodes.isEmpty()) {\n            continue;\n        }\n\n        if (argumentNode == null) {\n            report(t, call, WRONG_ARGUMENT_COUNT, getMessageNode(functionNode),\n                \"not enough arguments: expected at least \" + (minArgs - varArgsNodes.size()), null);\n            return;\n        }\n    }\n\n    int numArgs = argumentNodes.size() - 1;\n    if (numArgs < minArgs - varArgsNodes.size() || numArgs > maxArgs) {\n        String message = \"wrong number of arguments: \" + numArgs + \" instead of \";\n        if (maxArgs == -1) {\n            report(t, call, WRONG_ARGUMENT_COUNT, getMessageNode(functionNode),\n                message + \"at least \" + (minArgs - varArgsNodes.size()), null);\n        } else {\n            report(t, call, WRONG_ARGUMENT_COUNT, getMessageNode(functionNode),\n                message + \"between \" + (minArgs - varArgsNodes.size()) + \" and \" + maxArgs, null);\n        }\n        return;\n    }\n\n    for (int i = parameterNodes.size(); i <= numArgs + 1; i++) {\n        Node argumentNode = argumentNodes.get(i);\n        Node varArgsNode = varArgsNodes.isEmpty() ? null : varArgsNodes.get(0);\n\n        validator.expectArgumentMatchesParameter(t, argumentNode, getJSType(argumentNode), getJSType(varArgsNode),\n            call, i);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..1f8e7876 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,59 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+    List<Node> argumentNodes = call.removeChildren();\n+    Node functionNode = argumentNodes.get(0);\n+\n+    List<Node> parameterNodes = functionType.getParameters();\n+    Node lastParameterNode = parameterNodes.isEmpty() ? null : parameterNodes.get(parameterNodes.size() - 1);\n+\n+    List<Node> varArgsNodes = lastParameterNode == null ? Collections.emptyList()\n+        : lastParameterNode.isVarArgs() ? Collections.singletonList(lastParameterNode)\n+            : Collections.emptyList();\n \n-    int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+\n+    for (int i = 0; i < parameterNodes.size(); i++) {\n+        Node parameterNode = parameterNodes.get(i);\n+        Node argumentNode = argumentNodes.size() > i + 1 ? argumentNodes.get(i + 1) : null;\n+\n+        validator.expectArgumentMatchesParameter(t, argumentNode, getJSType(argumentNode), getJSType(parameterNode),\n+            call, i + 1);\n+\n+        if (parameterNode.isVarArgs() || varArgsNodes.isEmpty()) {\n+            continue;\n+        }\n+\n+        if (argumentNode == null) {\n+            report(t, call, WRONG_ARGUMENT_COUNT, getMessageNode(functionNode),\n+                \"not enough arguments: expected at least \" + (minArgs - varArgsNodes.size()), null);\n+            return;\n+        }\n     }\n-  }\n+\n+    int numArgs = argumentNodes.size() - 1;\n+    if (numArgs < minArgs - varArgsNodes.size() || numArgs > maxArgs) {\n+        String message = \"wrong number of arguments: \" + numArgs + \" instead of \";\n+        if (maxArgs == -1) {\n+            report(t, call, WRONG_ARGUMENT_COUNT, getMessageNode(functionNode),\n+                message + \"at least \" + (minArgs - varArgsNodes.size()), null);\n+        } else {\n+            report(t, call, WRONG_ARGUMENT_COUNT, getMessageNode(functionNode),\n+                message + \"between \" + (minArgs - varArgsNodes.size()) + \" and \" + maxArgs, null);\n+        }\n+        return;\n+    }\n+\n+    for (int i = parameterNodes.size(); i <= numArgs + 1; i++) {\n+        Node argumentNode = argumentNodes.get(i);\n+        Node varArgsNode = varArgsNodes.isEmpty() ? null : varArgsNodes.get(0);\n+\n+        validator.expectArgumentMatchesParameter(t, argumentNode, getJSType(argumentNode), getJSType(varArgsNode),\n+            call, i);\n+    }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}