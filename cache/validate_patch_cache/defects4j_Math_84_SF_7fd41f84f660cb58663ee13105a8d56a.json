{
    "patch": "                } else {\n                    simplex = contract(original, comparator, best);\n                }\n\n                return;\n\n            } else {\n\n                // compute the contracted simplex\n                simplex = contract(original, comparator, best);\n                if (comparator.compare(simplex[0], best) >= 0) {\n                    // check convergence\n                    return;\n                }\n\n            }\n\n        }\n    }\n\n    private RealPointValuePair[] contract(RealPointValuePair[] original,\n                                           Comparator<RealPointValuePair> comparator,\n                                           RealPointValuePair best)\n        throws FunctionEvaluationException {\n        final int dim = original[0].getPoint().length;\n        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[dim + 1];\n        contractedSimplex[0] = best;\n        for (int i = 1; i <= dim; i++) {\n            final double[] contracted = new double[dim];\n            for (int j = 0; j < dim; j++) {\n                contracted[j] = psi * best.getPoint()[j] + (1 - psi) * original[i].getPoint()[j];\n            }\n            final double value = computeObjectiveValue(contracted);\n            contractedSimplex[i] = new RealPointValuePair(contracted, value);\n        }\n        Arrays.sort(contractedSimplex, comparator);\n        return contractedSimplex;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..686dc72d5 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,44 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                } else {\n+                    simplex = contract(original, comparator, best);\n                 }\n \n                 return;\n \n-            }\n+            } else {\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                // compute the contracted simplex\n+                simplex = contract(original, comparator, best);\n+                if (comparator.compare(simplex[0], best) >= 0) {\n+                    // check convergence\n+                    return;\n+                }\n \n-            // check convergence\n-                return;\n             }\n \n         }\n-\n     }\n \n+    private RealPointValuePair[] contract(RealPointValuePair[] original,\n+                                           Comparator<RealPointValuePair> comparator,\n+                                           RealPointValuePair best)\n+        throws FunctionEvaluationException {\n+        final int dim = original[0].getPoint().length;\n+        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[dim + 1];\n+        contractedSimplex[0] = best;\n+        for (int i = 1; i <= dim; i++) {\n+            final double[] contracted = new double[dim];\n+            for (int j = 0; j < dim; j++) {\n+                contracted[j] = psi * best.getPoint()[j] + (1 - psi) * original[i].getPoint()[j];\n+            }\n+            final double value = computeObjectiveValue(contracted);\n+            contractedSimplex[i] = new RealPointValuePair(contracted, value);\n+        }\n+        Arrays.sort(contractedSimplex, comparator);\n+        return contractedSimplex;\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}