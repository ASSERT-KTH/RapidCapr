{
    "patch": "    private static boolean areArraysEqual(Object o1, Object o2) {\n        if (o1 instanceof Object[] && o2 instanceof Object[]) {\n            return Arrays.deepEquals((Object[]) o1, (Object[]) o2);\n        } else if (o1 instanceof boolean[] && o2 instanceof boolean[]) {\n            return Arrays.equals((boolean[]) o1, (boolean[]) o2);\n        } else if (o1 instanceof byte[] && o2 instanceof byte[]) {\n            return Arrays.equals((byte[]) o1, (byte[]) o2);\n        } else if (o1 instanceof char[] && o2 instanceof char[]) {\n            return Arrays.equals((char[]) o1, (char[]) o2);\n        } else if (o1 instanceof double[] && o2 instanceof double[]) {\n            return Arrays.equals((double[]) o1, (double[]) o2);\n        } else if (o1 instanceof float[] && o2 instanceof float[]) {\n            return Arrays.equals((float[]) o1, (float[]) o2);\n        } else if (o1 instanceof int[] && o2 instanceof int[]) {\n            return Arrays.equals((int[]) o1, (int[]) o2);\n        } else if (o1 instanceof long[] && o2 instanceof long[]) {\n            return Arrays.equals((long[]) o1, (long[]) o2);\n        } else if (o1 instanceof short[] && o2 instanceof short[]) {\n            return Arrays.equals((short[]) o1, (short[]) o2);\n        } else {\n            throw new IllegalArgumentException(\"not an array\");",
    "patch_diff": "diff --git a/src/org/mockito/internal/matchers/Equality.java b/src/org/mockito/internal/matchers/Equality.java\nindex 43e11fca9..b7102c74f 100644\n--- a/src/org/mockito/internal/matchers/Equality.java\n+++ b/src/org/mockito/internal/matchers/Equality.java\n@@ -9,8 +9,29 @@ import java.lang.reflect.Array;\n //stolen from hamcrest because I didn't want to have more dependency than Matcher class \n public class Equality {\n \n+\n     public static boolean areEqual(Object o1, Object o2) {\n-        if (o1 == null || o2 == null) {\n+    private static boolean areArraysEqual(Object o1, Object o2) {\n+        if (o1 instanceof Object[] && o2 instanceof Object[]) {\n+            return Arrays.deepEquals((Object[]) o1, (Object[]) o2);\n+        } else if (o1 instanceof boolean[] && o2 instanceof boolean[]) {\n+            return Arrays.equals((boolean[]) o1, (boolean[]) o2);\n+        } else if (o1 instanceof byte[] && o2 instanceof byte[]) {\n+            return Arrays.equals((byte[]) o1, (byte[]) o2);\n+        } else if (o1 instanceof char[] && o2 instanceof char[]) {\n+            return Arrays.equals((char[]) o1, (char[]) o2);\n+        } else if (o1 instanceof double[] && o2 instanceof double[]) {\n+            return Arrays.equals((double[]) o1, (double[]) o2);\n+        } else if (o1 instanceof float[] && o2 instanceof float[]) {\n+            return Arrays.equals((float[]) o1, (float[]) o2);\n+        } else if (o1 instanceof int[] && o2 instanceof int[]) {\n+            return Arrays.equals((int[]) o1, (int[]) o2);\n+        } else if (o1 instanceof long[] && o2 instanceof long[]) {\n+            return Arrays.equals((long[]) o1, (long[]) o2);\n+        } else if (o1 instanceof short[] && o2 instanceof short[]) {\n+            return Arrays.equals((short[]) o1, (short[]) o2);\n+        } else {\n+            throw new IllegalArgumentException(\"not an array\");\n             return o1 == null && o2 == null;\n         } else if (isArray(o1)) {\n             return isArray(o2) && areArraysEqual(o1, o2);\n@@ -38,4 +59,4 @@ public class Equality {\n     static boolean isArray(Object o) {\n         return o.getClass().isArray();\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}