{
    "patch": "private class TransformDispatcher implements TypeSafeDispatcher<Node> {\n    @Override\n    public Node defaultValue(Node n) {\n        throw new RuntimeException(\"Unexpected node type: \" + n);\n    }\n\n    @Override\n    public Node processBlock(Block blockNode) {\n        return processGeneric(blockNode);\n    }\n\n    @Override\n    public Node processBreakStatement(BreakStatement statementNode) {\n        Node node = newNode(Token.BREAK);\n        if (statementNode.getBreakLabel() != null) {\n            Node labelName = transform(statementNode.getBreakLabel());\n            // Change the NAME to LABEL_NAME\n            labelName.setType(Token.LABEL_NAME);\n            node.addChildToBack(labelName);\n        }\n        return node;\n    }\n\n    @Override\n    public Node processCatchClause(CatchClause clauseNode) {\n        AstNode catchVar = clauseNode.getVarName();\n        Node node = newNode(Token.CATCH, transform(catchVar));\n        if (clauseNode.getCatchCondition() != null) {\n            errorReporter.error(\n                    \"Catch clauses are not supported\",\n                    sourceName,\n                    clauseNode.getCatchCondition().getLineno(), \"\", 0);\n        }\n        node.addChildToBack(transformBlock(clauseNode.getBody()));\n        return node;\n    }\n\n    @Override\n    public Node processConditionalExpression(ConditionalExpression exprNode) {\n        return newNode(\n                Token.HOOK,\n                transform(exprNode.getTestExpression()),\n                transform(exprNode.getTrueExpression()),\n                transform(exprNode.getFalseExpression()));\n    }\n\n    @Override\n    public Node processContinueStatement(ContinueStatement statementNode) {\n        Node node = newNode(Token.CONTINUE);\n        if (statementNode.getLabel() != null) {\n            Node labelName = transform(statementNode.getLabel());\n            // Change the NAME to LABEL_NAME\n            labelName.setType(Token.LABEL_NAME);\n            node.addChildToBack(labelName);\n        }\n        return node;\n    }\n\n    @Override\n    public Node processDoLoop(DoLoop loopNode) {\n        return newNode(\n                Token.DO,\n                transformBlock(loopNode.getBody()),\n                transform(loopNode.getCondition()));\n    }\n\n    @Override\n    public Node processElementGet(ElementGet getNode) {\n        return newNode(\n                Token.GETELEM,\n                transform(getNode.getTarget()),\n                transform(getNode.getElement()));\n    }\n\n    @Override\n    public Node processEmptyExpression(EmptyExpression exprNode) {\n        Node node = newNode(Token.EMPTY);\n        return node;\n    }\n\n    @Override\n    public Node processExpressionStatement(ExpressionStatement statementNode) {\n        Node node = newNode(transformTokenType(statementNode.getType()));\n        node.addChildToBack(transform(statementNode.getExpression()));\n        return node;\n    }\n\n    @Override\n    public Node processForInLoop(ForInLoop loopNode) {\n        return newNode(\n                Token.FOR,\n                transform(loopNode.getIterator()),\n                transform(loopNode.getIteratedObject()),\n                transformBlock(loopNode.getBody()));\n    }\n\n    @Override\n    public Node processForLoop(ForLoop loopNode) {\n        Node node = newNode(\n                Token.FOR,\n                transform(loopNode.getInitializer()),\n                transform(loopNode.getCondition()),\n                transform(loopNode.getIncrement()));\n        node.addChildToBack(transformBlock(loopNode.getBody()));\n        return node;\n    }\n\n    @Override\n    public Node processFunctionCall(FunctionCall callNode) {\n        Node node = newNode(transformTokenType(callNode.getType()),\n                transform(callNode.getTarget()));\n        for (AstNode child : callNode.getArguments()) {\n            node.addChildToBack(transform(child));\n        }\n\n        int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n        node.setLineno(callNode.getLineno());\n        node.setCharno(position2charno(leftParamPos));\n        return node;\n    }\n\n    @Override\n    public Node processFunctionNode(FunctionNode functionNode) {\n        Name name = functionNode.getFunctionName();\n        boolean isUnnamedFunction = false;\n        if (name == null) {\n            name = new Name();\n            name.setIdentifier(\"\");\n            isUnnamedFunction = true;\n            name.setLineno(functionNode.getLineno());\n            name.setCharno(position2charno(functionNode.getPosition()));\n        }\n        Node node = newNode(Token.FUNCTION);\n        Node newName = transform(name);\n        if (isUnnamedFunction) {\n            newName.setLineno(functionNode.getLineno());\n            int lpColumn = functionNode.getPosition() + \"function\".length();\n            newName.setCharno(position2charno(lpColumn));\n        }\n\n        node.addChildToBack(newName);\n        Node lp = newNode(Token.LP);\n        lp.setLineno(functionNode.getLineno());\n        int lparenCharno = functionNode.getPosition() + \"function\".length();\n        lp.setCharno(position2charno(lparenCharno));\n        for (AstNode param : functionNode.getParams()) {\n            lp.addChildToBack(transform(param));\n        }\n        node.addChildToBack(lp);\n\n        Node bodyNode = transform(functionNode.getBody());\n        parseDirectives(bodyNode);\n        node.addChildToBack(bodyNode);\n        return node;\n    }\n\n    @Override\n    public Node processIfStatement(IfStatement statementNode) {\n        Node node = newNode(Token.IF);\n        node.addChildToBack(\n                transform(statementNode.getCondition()));\n        node.addChildToBack(\n                transformBlockOrStatement(statementNode.getThenPart()));\n        AstNode elsePart = statementNode.getElsePart();\n        if (elsePart != null) {\n            node.addChildToBack(transformBlockOrStatement(elsePart));\n        }\n        return node;\n    }\n\n    @Override\n    public Node processInfixExpression(InfixExpression infixNode) {\n        return newNode(\n                transformTokenType(infixNode.getType()),\n                transform(infixNode.getLeft()),\n                transform(infixNode.getRight()));\n    }\n\n    @Override\n    public Node processLabeledStatement(LabeledStatement statementNode) {\n        Node node = newNode(Token.LABEL,\n                transform(statementNode.getLabelName()));\n        node.addChildToBack(transform(statementNode.getStatement()));\n        return node;\n    }\n\n    @Override\n    public Node processLetNode(LetNode letNode) {\n        Node node = newNode(Token.LET);\n        for (Object variable : letNode.getVariables()) {\n            node.addChildToBack(transform(variable));\n        }\n        node.addChildToBack(transform(letNode.getBody()));\n        return node;\n    }\n\n    @Override\n    public Node processName(Name nameNode) {\n        // Look for references to special functions.\n        String name = nameNode.getIdentifier();\n        if (name.equals(\"undefined\")) {\n            return newNode(Token.VOID);\n        } else {\n            return new Node(Token.NAME, nameNode.getString());\n        }\n    }\n\n    @Override\n    public Node processNewExpression(NewExpression newNode) {\n        Node node = newNode(\n                Token.NEW,\n                transform(newNode.getTarget()));\n        if (newNode.getArguments() != null) {\n            for (AstNode child : newNode.getArguments()) {\n                node.addChildToBack(transform(child));\n            }\n        }\n        return node;\n    }\n\n    @Override\n    public Node processNumber(NumberLiteral numberNode) {\n        return newNode(Token.NUMBER, numberNode.getValue());\n    }\n\n    @Override\n    public Node processObjectLiteral(ObjectLiteral objNode) {\n        Node node = newNode(Token.OBJECTLIT);\n        for (ObjectProperty prop : objNode.getElements()) {\n            node.addChildToBack(transform(prop));\n        }\n        return node;\n    }\n\n    @Override\n    public Node processObjectProperty(ObjectProperty propNode) {\n        Node node = newNode(Token.OBJECTPROP, transform(propNode.getLeft()));\n        node.addChildToBack(transform(propNode.getRight()));\n        return node;\n    }\n\n    @Override\n    public Node processParenthesizedExpression(\n            ParenthesizedExpression parenNode) {\n        Node node;\n        AstNode expr = parenNode.getExpression();\n        if (expr instanceof FunctionNode) {\n            // Turn \"function() {}\" into \"(function() {})\"\n            node = newNode(Token.LP);\n            node.addChildToBack(transform(expr));\n        } else {\n            node = transform(expr);\n        }\n        return node;\n    }\n\n    @Override\n    public Node processPropertyGet(PropertyGet propNode) {\n        return newNode(Token.GETPROP,\n                transform(propNode.getTarget()),\n                new Node(Token.STRING, propNode.getProperty()));\n    }\n\n    @Override\n    public Node processRegExpLiteral(RegExpLiteral regexpNode) {\n        String regexpString = regexpNode.getValue();\n        // Rhino throws an error if there are regex flags it doesn't\n        // understand.  Be less strict here.\n        int lastSlash = regexpString.lastIndexOf('/');\n        String content = regexpString.substring(1, lastSlash);\n        String flags = regexpString.substring(lastSlash + 1);\n        Node node = newNode(Token.REGEXP);\n        node.addChildToBack(new Node(Token.STRING, content));\n        node.addChildToBack(new Node(Token.STRING, flags));\n        return node;\n    }\n\n    @Override\n    public Node processReturnStatement(ReturnStatement statementNode) {\n        Node node = newNode(Token.RETURN);\n        if (statementNode.getReturnValue() != null) {\n            node.addChildToBack(\n                    transform(statementNode.getReturnValue()));\n        }\n        return node;\n    }\n\n    @Override\n    public Node processString(StringLiteral stringNode) {\n        return newNode(Token.STRING, stringNode.getValue());\n    }\n\n    @Override\n    public Node processSwitchCase(SwitchCase caseNode) {\n        Node node;\n        if (caseNode.getExpression() != null) {\n            node = newNode(Token.CASE,\n                    transform(caseNode.getExpression()));\n        } else {\n            node = newNode(Token.DEFAULT);\n        }\n        for (AstNode statement : caseNode.getStatements()) {\n            node.addChildToBack(transform(statement));\n        }\n        return node;\n    }\n\n    @Override\n    public Node processSwitchStatement(SwitchStatement statementNode) {\n        Node node = newNode(Token.SWITCH,\n                transform(statementNode.getExpression()));\n        for (SwitchCase caseNode : statementNode.getCases()) {\n            node.addChildToBack(transform(caseNode));\n        }\n        return node;\n    }\n\n    @Override\n    public Node processThrowStatement(ThrowStatement statementNode) {\n        return newNode(Token.THROW,\n                transform(statementNode.getExpression()));\n    }\n\n    @Override\n    public Node processTryStatement(TryStatement statementNode) {\n        Node node = newNode(Token.TRY);\n        node.addChildToBack(transformBlock(statementNode.getTryBlock()));\n        AstNode catchBlock = statementNode.getCatchBlock();\n        if (catchBlock != null) {\n            node.addChildToBack(transform(catchBlock));\n        }\n        Block finallyBlock = statementNode.getFinallyBlock();\n        if (finallyBlock != null) {\n            node.addChildToBack(\n                    newNode(Token.BLOCK",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..4f0c9363 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,182 +385,342 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+private class TransformDispatcher implements TypeSafeDispatcher<Node> {\n+    @Override\n+    public Node defaultValue(Node n) {\n+        throw new RuntimeException(\"Unexpected node type: \" + n);\n     }\n \n     @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+    public Node processBlock(Block blockNode) {\n+        return processGeneric(blockNode);\n     }\n \n     @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    public Node processBreakStatement(BreakStatement statementNode) {\n+        Node node = newNode(Token.BREAK);\n+        if (statementNode.getBreakLabel() != null) {\n+            Node labelName = transform(statementNode.getBreakLabel());\n+            // Change the NAME to LABEL_NAME\n+            labelName.setType(Token.LABEL_NAME);\n+            node.addChildToBack(labelName);\n+        }\n+        return node;\n     }\n \n     @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+    public Node processCatchClause(CatchClause clauseNode) {\n+        AstNode catchVar = clauseNode.getVarName();\n+        Node node = newNode(Token.CATCH, transform(catchVar));\n+        if (clauseNode.getCatchCondition() != null) {\n+            errorReporter.error(\n+                    \"Catch clauses are not supported\",\n+                    sourceName,\n+                    clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+        }\n+        node.addChildToBack(transformBlock(clauseNode.getBody()));\n+        return node;\n     }\n \n     @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+    public Node processConditionalExpression(ConditionalExpression exprNode) {\n+        return newNode(\n+                Token.HOOK,\n+                transform(exprNode.getTestExpression()),\n+                transform(exprNode.getTrueExpression()),\n+                transform(exprNode.getFalseExpression()));\n     }\n \n     @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    public Node processContinueStatement(ContinueStatement statementNode) {\n+        Node node = newNode(Token.CONTINUE);\n+        if (statementNode.getLabel() != null) {\n+            Node labelName = transform(statementNode.getLabel());\n+            // Change the NAME to LABEL_NAME\n+            labelName.setType(Token.LABEL_NAME);\n+            node.addChildToBack(labelName);\n+        }\n+        return node;\n     }\n \n     @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+    public Node processDoLoop(DoLoop loopNode) {\n+        return newNode(\n+                Token.DO,\n+                transformBlock(loopNode.getBody()),\n+                transform(loopNode.getCondition()));\n     }\n \n     @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+    public Node processElementGet(ElementGet getNode) {\n+        return newNode(\n+                Token.GETELEM,\n+                transform(getNode.getTarget()),\n+                transform(getNode.getElement()));\n     }\n \n     @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+    public Node processEmptyExpression(EmptyExpression exprNode) {\n+        Node node = newNode(Token.EMPTY);\n+        return node;\n     }\n \n     @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+    public Node processExpressionStatement(ExpressionStatement statementNode) {\n+        Node node = newNode(transformTokenType(statementNode.getType()));\n+        node.addChildToBack(transform(statementNode.getExpression()));\n+        return node;\n     }\n \n     @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+    public Node processForInLoop(ForInLoop loopNode) {\n+        return newNode(\n+                Token.FOR,\n+                transform(loopNode.getIterator()),\n+                transform(loopNode.getIteratedObject()),\n+                transformBlock(loopNode.getBody()));\n     }\n \n     @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n+    public Node processForLoop(ForLoop loopNode) {\n+        Node node = newNode(\n+                Token.FOR,\n+                transform(loopNode.getInitializer()),\n+                transform(loopNode.getCondition()),\n+                transform(loopNode.getIncrement()));\n+        node.addChildToBack(transformBlock(loopNode.getBody()));\n+        return node;\n     }\n \n     @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n+    public Node processFunctionCall(FunctionCall callNode) {\n+        Node node = newNode(transformTokenType(callNode.getType()),\n+                transform(callNode.getTarget()));\n+        for (AstNode child : callNode.getArguments()) {\n+            node.addChildToBack(transform(child));\n+        }\n \n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n+        int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n+        node.setLineno(callNode.getLineno());\n+        node.setCharno(position2charno(leftParamPos));\n+        return node;\n     }\n \n     @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n+    public Node processFunctionNode(FunctionNode functionNode) {\n+        Name name = functionNode.getFunctionName();\n+        boolean isUnnamedFunction = false;\n+        if (name == null) {\n+            name = new Name();\n+            name.setIdentifier(\"\");\n+            isUnnamedFunction = true;\n+            name.setLineno(functionNode.getLineno());\n+            name.setCharno(position2charno(functionNode.getPosition()));\n+        }\n+        Node node = newNode(Token.FUNCTION);\n+        Node newName = transform(name);\n+        if (isUnnamedFunction) {\n+            newName.setLineno(functionNode.getLineno());\n+            int lpColumn = functionNode.getPosition() + \"function\".length();\n+            newName.setCharno(position2charno(lpColumn));\n+        }\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n+        node.addChildToBack(newName);\n+        Node lp = newNode(Token.LP);\n         lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+        int lparenCharno = functionNode.getPosition() + \"function\".length();\n+        lp.setCharno(position2charno(lparenCharno));\n+        for (AstNode param : functionNode.getParams()) {\n+            lp.addChildToBack(transform(param));\n+        }\n+        node.addChildToBack(lp);\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+        Node bodyNode = transform(functionNode.getBody());\n+        parseDirectives(bodyNode);\n+        node.addChildToBack(bodyNode);\n+        return node;\n+    }\n+\n+    @Override\n+    public Node processIfStatement(IfStatement statementNode) {\n+        Node node = newNode(Token.IF);\n+        node.addChildToBack(\n+                transform(statementNode.getCondition()));\n+        node.addChildToBack(\n+                transformBlockOrStatement(statementNode.getThenPart()));\n+        AstNode elsePart = statementNode.getElsePart();\n+        if (elsePart != null) {\n+            node.addChildToBack(transformBlockOrStatement(elsePart));\n+        }\n+        return node;\n+    }\n+\n+    @Override\n+    public Node processInfixExpression(InfixExpression infixNode) {\n+        return newNode(\n+                transformTokenType(infixNode.getType()),\n+                transform(infixNode.getLeft()),\n+                transform(infixNode.getRight()));\n+    }\n+\n+    @Override\n+    public Node processLabeledStatement(LabeledStatement statementNode) {\n+        Node node = newNode(Token.LABEL,\n+                transform(statementNode.getLabelName()));\n+        node.addChildToBack(transform(statementNode.getStatement()));\n+        return node;\n+    }\n+\n+    @Override\n+    public Node processLetNode(LetNode letNode) {\n+        Node node = newNode(Token.LET);\n+        for (Object variable : letNode.getVariables()) {\n+            node.addChildToBack(transform(variable));\n+        }\n+        node.addChildToBack(transform(letNode.getBody()));\n+        return node;\n+    }\n+\n+    @Override\n+    public Node processName(Name nameNode) {\n+        // Look for references to special functions.\n+        String name = nameNode.getIdentifier();\n+        if (name.equals(\"undefined\")) {\n+            return newNode(Token.VOID);\n+        } else {\n+            return new Node(Token.NAME, nameNode.getString());\n+        }\n+    }\n+\n+    @Override\n+    public Node processNewExpression(NewExpression newNode) {\n+        Node node = newNode(\n+                Token.NEW,\n+                transform(newNode.getTarget()));\n+        if (newNode.getArguments() != null) {\n+            for (AstNode child : newNode.getArguments()) {\n+                node.addChildToBack(transform(child));\n+            }\n+        }\n+        return node;\n+    }\n+\n+    @Override\n+    public Node processNumber(NumberLiteral numberNode) {\n+        return newNode(Token.NUMBER, numberNode.getValue());\n+    }\n+\n+    @Override\n+    public Node processObjectLiteral(ObjectLiteral objNode) {\n+        Node node = newNode(Token.OBJECTLIT);\n+        for (ObjectProperty prop : objNode.getElements()) {\n+            node.addChildToBack(transform(prop));\n+        }\n+        return node;\n+    }\n+\n+    @Override\n+    public Node processObjectProperty(ObjectProperty propNode) {\n+        Node node = newNode(Token.OBJECTPROP, transform(propNode.getLeft()));\n+        node.addChildToBack(transform(propNode.getRight()));\n+        return node;\n+    }\n+\n+    @Override\n+    public Node processParenthesizedExpression(\n+            ParenthesizedExpression parenNode) {\n+        Node node;\n+        AstNode expr = parenNode.getExpression();\n+        if (expr instanceof FunctionNode) {\n+            // Turn \"function() {}\" into \"(function() {})\"\n+            node = newNode(Token.LP);\n+            node.addChildToBack(transform(expr));\n+        } else {\n+            node = transform(expr);\n+        }\n+        return node;\n+    }\n+\n+    @Override\n+    public Node processPropertyGet(PropertyGet propNode) {\n+        return newNode(Token.GETPROP,\n+                transform(propNode.getTarget()),\n+                new Node(Token.STRING, propNode.getProperty()));\n+    }\n+\n+    @Override\n+    public Node processRegExpLiteral(RegExpLiteral regexpNode) {\n+        String regexpString = regexpNode.getValue();\n+        // Rhino throws an error if there are regex flags it doesn't\n+        // understand.  Be less strict here.\n+        int lastSlash = regexpString.lastIndexOf('/');\n+        String content = regexpString.substring(1, lastSlash);\n+        String flags = regexpString.substring(lastSlash + 1);\n+        Node node = newNode(Token.REGEXP);\n+        node.addChildToBack(new Node(Token.STRING, content));\n+        node.addChildToBack(new Node(Token.STRING, flags));\n+        return node;\n+    }\n+\n+    @Override\n+    public Node processReturnStatement(ReturnStatement statementNode) {\n+        Node node = newNode(Token.RETURN);\n+        if (statementNode.getReturnValue() != null) {\n+            node.addChildToBack(\n+                    transform(statementNode.getReturnValue()));\n+        }\n+        return node;\n+    }\n+\n+    @Override\n+    public Node processString(StringLiteral stringNode) {\n+        return newNode(Token.STRING, stringNode.getValue());\n+    }\n+\n+    @Override\n+    public Node processSwitchCase(SwitchCase caseNode) {\n+        Node node;\n+        if (caseNode.getExpression() != null) {\n+            node = newNode(Token.CASE,\n+                    transform(caseNode.getExpression()));\n+        } else {\n+            node = newNode(Token.DEFAULT);\n+        }\n+        for (AstNode statement : caseNode.getStatements()) {\n+            node.addChildToBack(transform(statement));\n+        }\n+        return node;\n+    }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+    @Override\n+    public Node processSwitchStatement(SwitchStatement statementNode) {\n+        Node node = newNode(Token.SWITCH,\n+                transform(statementNode.getExpression()));\n+        for (SwitchCase caseNode : statementNode.getCases()) {\n+            node.addChildToBack(transform(caseNode));\n+        }\n+        return node;\n+    }\n+\n+    @Override\n+    public Node processThrowStatement(ThrowStatement statementNode) {\n+        return newNode(Token.THROW,\n+                transform(statementNode.getExpression()));\n     }\n \n+    @Override\n+    public Node processTryStatement(TryStatement statementNode) {\n+        Node node = newNode(Token.TRY);\n+        node.addChildToBack(transformBlock(statementNode.getTryBlock()));\n+        AstNode catchBlock = statementNode.getCatchBlock();\n+        if (catchBlock != null) {\n+            node.addChildToBack(transform(catchBlock));\n+        }\n+        Block finallyBlock = statementNode.getFinallyBlock();\n+        if (finallyBlock != null) {\n+            node.addChildToBack(\n+                    newNode(Token.BLOCK\n+\n     @Override\n     Node processIfStatement(IfStatement statementNode) {\n       Node node = newNode(Token.IF);",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}