{
    "patch": "    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        int stringLength = str.length();\n\n        // if the lower value is greater than or equal to the length of the string, return appropriate values\n        if (lower >= stringLength) {\n            if (appendToEnd == null) {\n                return str;\n            } else {\n                return appendToEnd;\n            }\n        }\n\n        // if the upper value is -1 (i.e. no limit) or is greater than the length of the string,\n        // set to the length of the string\n        if (upper == -1 || upper > stringLength) {\n            upper = stringLength;\n        }\n\n        // if upper is less than lower, set them both to lower\n        if (upper < lower) {\n            upper = lower;\n        }\n\n        int spaceIndex = StringUtils.indexOf(str, ' ', lower);\n\n        // if no space was found after lower, return everything up to upper\n        if (spaceIndex == -1 || spaceIndex > upper) {\n            return str.substring(0, upper) + StringUtils.defaultString(appendToEnd);\n        }\n\n        // if a space was found, return everything up to that space plus the appendToEnd value\n        return str.substring(0, spaceIndex) + StringUtils.defaultString(appendToEnd);\n\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..bc468219 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -613,6 +613,48 @@ public class WordUtils {\n \n         // if the lower value is greater than the length of the string,\n         // set to the length of the string\n+    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n+        // initial parameter checks\n+        if (str == null) {\n+            return null;\n+        }\n+        if (str.length() == 0) {\n+            return StringUtils.EMPTY;\n+        }\n+\n+        int stringLength = str.length();\n+\n+        // if the lower value is greater than or equal to the length of the string, return appropriate values\n+        if (lower >= stringLength) {\n+            if (appendToEnd == null) {\n+                return str;\n+            } else {\n+                return appendToEnd;\n+            }\n+        }\n+\n+        // if the upper value is -1 (i.e. no limit) or is greater than the length of the string,\n+        // set to the length of the string\n+        if (upper == -1 || upper > stringLength) {\n+            upper = stringLength;\n+        }\n+\n+        // if upper is less than lower, set them both to lower\n+        if (upper < lower) {\n+            upper = lower;\n+        }\n+\n+        int spaceIndex = StringUtils.indexOf(str, ' ', lower);\n+\n+        // if no space was found after lower, return everything up to upper\n+        if (spaceIndex == -1 || spaceIndex > upper) {\n+            return str.substring(0, upper) + StringUtils.defaultString(appendToEnd);\n+        }\n+\n+        // if a space was found, return everything up to that space plus the appendToEnd value\n+        return str.substring(0, spaceIndex) + StringUtils.defaultString(appendToEnd);\n+\n+    }\n         // if the upper value is -1 (i.e. no limit) or is greater\n         // than the length of the string, set to the length of the string\n         if (upper == -1 || upper > str.length()) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}