{
    "patch": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Program {\n    public static void main(String[] args){\n        List<Integer> list1 = new ArrayList<>();\n        List<Integer> list2 = new ArrayList<>();\n        List<Integer> list3 = new ArrayList<>();\n\n        list1.add(1);\n        list1.add(2);\n        list1.add(3);\n\n        list2.add(4);\n        list2.add(5);\n        list2.add(6);\n\n        list3.add(7);\n        list3.add(8);\n        list3.add(9);\n\n        Iterable returnValue = getValues(list1, list2, list3);\n        for (Object value : returnValue) {\n            System.out.println(value);\n        }\n    }\n\n    public static Iterable<Integer> getValues(List<Integer>... lists) {\n        List<Integer> values = new ArrayList<>();\n        for (List<Integer> list : lists) {\n            if (list == null) {\n                continue;\n            }\n            for (Integer value : list) {\n                values.add(value);\n            }\n        }\n        return values;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..44e5f254e 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,46 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Program {\n+    public static void main(String[] args){\n+        List<Integer> list1 = new ArrayList<>();\n+        List<Integer> list2 = new ArrayList<>();\n+        List<Integer> list3 = new ArrayList<>();\n+\n+        list1.add(1);\n+        list1.add(2);\n+        list1.add(3);\n+\n+        list2.add(4);\n+        list2.add(5);\n+        list2.add(6);\n+\n+        list3.add(7);\n+        list3.add(8);\n+        list3.add(9);\n+\n+        Iterable returnValue = getValues(list1, list2, list3);\n+        for (Object value : returnValue) {\n+            System.out.println(value);\n+        }\n+    }\n+\n+    public static Iterable<Integer> getValues(List<Integer>... lists) {\n+        List<Integer> values = new ArrayList<>();\n+        for (List<Integer> list : lists) {\n+            if (list == null) {\n+                continue;\n+            }\n+            for (Integer value : list) {\n+                values.add(value);\n+            }\n+        }\n+        return values;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}