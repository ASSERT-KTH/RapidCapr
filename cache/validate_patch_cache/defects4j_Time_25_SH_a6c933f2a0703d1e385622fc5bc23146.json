{
    "patch": "                long nextAdjusted = nextTransition(instantAdjusted - offsetAdjusted);\n                int nextAdjustedOffset = getOffset(nextAdjusted);\n                if (nextAdjusted < instantAdjusted && nextAdjustedOffset != offsetLocal) {\n                    return offsetLocal;\n                } else {\n                    return nextAdjustedOffset;\n                }\n            } else {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantAdjusted - offsetLocal);\n                int prevAdjustedOffset = getOffset(prevAdjusted);\n                if (prevAdjusted >= instantAdjusted || prevAdjustedOffset == offsetLocal) {\n                    return offsetAdjusted;\n                } else {\n                    // if we just return prevAdjustedOffset then the time is pushed\n                    // forward before the transition, whereas it should be\n                    // on or after the transition\n                    long prevPrevLocal = previousTransition(prevAdjusted);\n                    long prevPrevAdjusted = previousTransition(instantAdjusted - prevAdjustedOffset);\n                    int prevPrevAdjustedOffset = getOffset(prevPrevAdjusted);\n                    if (prevPrevAdjustedOffset < offsetLocal) {\n                        return prevPrevAdjustedOffset;\n                    } else if (prevPrevAdjusted >= instantAdjusted || prevPrevAdjustedOffset == prevAdjustedOffset) {\n                        return prevAdjustedOffset;\n                    } else {\n                        return getOffset(previousTransition(prevAdjusted));\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3babf4b8 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,33 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                long nextAdjusted = nextTransition(instantAdjusted - offsetAdjusted);\n+                int nextAdjustedOffset = getOffset(nextAdjusted);\n+                if (nextAdjusted < instantAdjusted && nextAdjustedOffset != offsetLocal) {\n+                    return offsetLocal;\n+                } else {\n+                    return nextAdjustedOffset;\n+                }\n+            } else {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantAdjusted - offsetLocal);\n+                int prevAdjustedOffset = getOffset(prevAdjusted);\n+                if (prevAdjusted >= instantAdjusted || prevAdjustedOffset == offsetLocal) {\n+                    return offsetAdjusted;\n+                } else {\n+                    // if we just return prevAdjustedOffset then the time is pushed\n+                    // forward before the transition, whereas it should be\n+                    // on or after the transition\n+                    long prevPrevLocal = previousTransition(prevAdjusted);\n+                    long prevPrevAdjusted = previousTransition(instantAdjusted - prevAdjustedOffset);\n+                    int prevPrevAdjustedOffset = getOffset(prevPrevAdjusted);\n+                    if (prevPrevAdjustedOffset < offsetLocal) {\n+                        return prevPrevAdjustedOffset;\n+                    } else if (prevPrevAdjusted >= instantAdjusted || prevPrevAdjustedOffset == prevAdjustedOffset) {\n+                        return prevAdjustedOffset;\n+                    } else {\n+                        return getOffset(previousTransition(prevAdjusted));\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}