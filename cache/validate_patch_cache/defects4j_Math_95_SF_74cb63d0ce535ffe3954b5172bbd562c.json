{
    "patch": "    /**\n     * {@inheritDoc}\n     * @deprecated As of 3.1 (to be removed in 4.0).\n     */\n    @Override\n    @Deprecated\n    protected double getInitialDomain(double p) {\n        double ret = Double.NaN;\n        double d = getDenominatorDegreesOfFreedom();\n        if (Double.isNaN(d) || d <= 2.0) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_DEGREES_OF_FREEDOM, d);\n        }\n        // use mean\n        ret = d / (d - 2.0);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97aef..3a4174450 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -140,13 +140,20 @@ public class FDistributionImpl\n      * @param p the desired probability for the critical value\n      * @return initial domain value\n      */\n+    /**\n+     * {@inheritDoc}\n+     * @deprecated As of 3.1 (to be removed in 4.0).\n+     */\n+    @Override\n+    @Deprecated\n     protected double getInitialDomain(double p) {\n-        double ret;\n+        double ret = Double.NaN;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n-    }\n+        if (Double.isNaN(d) || d <= 2.0) {\n+            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_DEGREES_OF_FREEDOM, d);\n+        }\n+        // use mean\n+        ret = d / (d - 2.0);\n     \n     /**\n      * Modify the numerator degrees of freedom.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}