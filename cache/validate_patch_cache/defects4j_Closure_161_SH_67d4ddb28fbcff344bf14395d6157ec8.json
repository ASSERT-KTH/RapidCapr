{
    "patch": "    if(left.getType() == Token.ARRAYLIT && left.getFirstChild() == null) {\n      return (parent.getType() == Token.ASSIGN) ? n : NodeUtil.newUndefinedNode(n);\n    }\n\n    if (right.getType() != Token.NUMBER || right.getIntProp(Node.IS_NUMBER_NON_NEGATIVE_INTEGER)) {\n      return n;\n    }\n\n    int index = (int) right.getDouble();\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < index; i++) {\n      elem = elem.getNext();\n    }\n\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    n.replaceWith(elem);\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..a4c05251 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,36 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if(left.getType() == Token.ARRAYLIT && left.getFirstChild() == null) {\n+      return (parent.getType() == Token.ASSIGN) ? n : NodeUtil.newUndefinedNode(n);\n+    }\n+\n+    if (right.getType() != Token.NUMBER || right.getIntProp(Node.IS_NUMBER_NON_NEGATIVE_INTEGER)) {\n+      return n;\n+    }\n+\n+    int index = (int) right.getDouble();\n+\n+    Node elem = left.getFirstChild();\n+    for (int i = 0; elem != null && i < index; i++) {\n+      elem = elem.getNext();\n+    }\n+\n+    if (elem == null) {\n+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+      return n;\n+    }\n+\n+    if (elem.getType() == Token.EMPTY) {\n+      elem = NodeUtil.newUndefinedNode(elem);\n+    } else {\n+      left.removeChild(elem);\n+    }\n+\n+    n.replaceWith(elem);\n+    reportCodeChange();\n+    return elem;\n+  }\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}