{
    "patch": "    Node child = n.getFirstChild();\n    Node objectKey = child.getFirstChild();\n    T firstType = typeSystem.getType(getScope(), objectKey);\n\n    String propName = objectKey.getString();\n    Property prop = getProperty(propName);\n\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, firstType, null))) {\n      // TODO(user): It doesn't look like the user can do much in this\n      // case right now.\n      if (propertiesToErrorFor.containsKey(propName)){\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(propName),\n            Warnings.INVALIDATION, propName,\n            firstType == null ? \"null\" : firstType.toString(),\n            n.toString(), \"\"));\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..7062bfe0 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,24 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+    Node child = n.getFirstChild();\n+    Node objectKey = child.getFirstChild();\n+    T firstType = typeSystem.getType(getScope(), objectKey);\n+\n+    String propName = objectKey.getString();\n+    Property prop = getProperty(propName);\n+\n+    if (!prop.scheduleRenaming(child, processProperty(t, prop, firstType, null))) {\n+      // TODO(user): It doesn't look like the user can do much in this\n+      // case right now.\n+      if (propertiesToErrorFor.containsKey(propName)){\n+        compiler.report(JSError.make(\n+            t.getSourceName(), child, propertiesToErrorFor.get(propName),\n+            Warnings.INVALIDATION, propName,\n+            firstType == null ? \"null\" : firstType.toString(),\n+            n.toString(), \"\"));\n+      }\n+    }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: variable child is already defined in method handleObjectLit(NodeTraversal,Node)",
    "test_result": "ERROR"
}