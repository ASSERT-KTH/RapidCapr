{
    "patch": "      String name = n.getFirstChild().getString();\n      if (parent != null && parent.getType() == Token.ASSIGN &&\n          NodeUtil.isGet(parent.getFirstChild()) &&\n          \"prototype\".equals(parent.getFirstChild().getLastChild().getString())) {\n        // Do not traverse functions lent to prototypes.\n        return false;\n      }\n\n      if (name.startsWith(\"test\") && !name.contains(\"_\") &&\n          n.getSecondChild().getType() == Token.FUNCTION) {\n        // Don't traverse functions that are test methods and not nested inside\n        // another test method.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..46e104fa 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,18 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      String name = n.getFirstChild().getString();\n+      if (parent != null && parent.getType() == Token.ASSIGN &&\n+          NodeUtil.isGet(parent.getFirstChild()) &&\n+          \"prototype\".equals(parent.getFirstChild().getLastChild().getString())) {\n+        // Do not traverse functions lent to prototypes.\n+        return false;\n+      }\n+\n+      if (name.startsWith(\"test\") && !name.contains(\"_\") &&\n+          n.getSecondChild().getType() == Token.FUNCTION) {\n+        // Don't traverse functions that are test methods and not nested inside\n+        // another test method.\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}