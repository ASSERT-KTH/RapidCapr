{
    "patch": "  Node function = fnScope.getRootNode();\n\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  Iterator<Node> argNodes = argList.children().iterator();\n  boolean modifyCallers = modifyCallSites\n      && callSiteOptimizer.canModifyCallers(function);\n  while (argNodes.hasNext()) {\n    Node arg = argNodes.next();\n    Var var = fnScope.getVar(arg.getString());\n\n    if (!referenced.contains(var)) {\n      argNodes.remove();\n      compiler.reportCodeChange();\n    }\n  }\n\n  if (modifyCallers) {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..fac78db5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,31 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  Node function = fnScope.getRootNode();\n+\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  Iterator<Node> argNodes = argList.children().iterator();\n+  boolean modifyCallers = modifyCallSites\n+      && callSiteOptimizer.canModifyCallers(function);\n+  while (argNodes.hasNext()) {\n+    Node arg = argNodes.next();\n+    Var var = fnScope.getVar(arg.getString());\n+\n+    if (!referenced.contains(var)) {\n+      argNodes.remove();\n+      compiler.reportCodeChange();\n+    }\n+  }\n+\n+  if (modifyCallers) {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable function is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}