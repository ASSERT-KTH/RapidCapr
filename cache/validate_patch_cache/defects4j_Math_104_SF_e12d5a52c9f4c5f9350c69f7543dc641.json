{
    "patch": "public static double regularizedGamma(double a, double x, double accuracy){\n    if (Double.isNaN(a) || Double.isNaN(x) || accuracy <= 0) {\n        return Double.NaN;\n    }\n    if (x < 0 || a <= 0) {\n        return 0;\n    }\n    if (x == 0) {\n        return 0;\n    }\n    if (x >= a + 1) {\n        double igf = incompleteGammaFraction(a, x, accuracy);\n        return 1 - igf;\n    } else {\n        double series = regularizedGammaSeries(a, x, accuracy);\n        return series / GammaFunction.gamma(a);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..94ca79845 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,24 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x, double accuracy){\n+    if (Double.isNaN(a) || Double.isNaN(x) || accuracy <= 0) {\n+        return Double.NaN;\n+    }\n+    if (x < 0 || a <= 0) {\n+        return 0;\n+    }\n+    if (x == 0) {\n+        return 0;\n+    }\n+    if (x >= a + 1) {\n+        double igf = incompleteGammaFraction(a, x, accuracy);\n+        return 1 - igf;\n+    } else {\n+        double series = regularizedGammaSeries(a, x, accuracy);\n+        return series / GammaFunction.gamma(a);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}