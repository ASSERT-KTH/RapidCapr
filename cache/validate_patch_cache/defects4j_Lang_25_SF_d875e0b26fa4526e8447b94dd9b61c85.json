{
    "patch": "public static String analyzeString(String arg) {\n    String result = arg;\n    int length = arg.length();\n    for (int i = 0; i < length; i++) {\n        if (result.charAt(i) == ' ') {\n            result = result.substring(0, i) + \"_\" + result.substring(i + 1);\n            length++;\n            i++;\n        } else if (result.charAt(i) == '%') {\n            if (i + 2 < length) {\n                String hex = arg.substring(i + 1, i + 3);\n                try {\n                    int code = Integer.parseInt(hex, 16);\n                    result = result.substring(0, i) + (char) code + result.substring(i + 3);\n                    length -= 2;\n                } catch (NumberFormatException e) {\n                    // invalid hex code, ignore and continue\n                }\n            }\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..a5d8b97f 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,29 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String analyzeString(String arg) {\n+    String result = arg;\n+    int length = arg.length();\n+    for (int i = 0; i < length; i++) {\n+        if (result.charAt(i) == ' ') {\n+            result = result.substring(0, i) + \"_\" + result.substring(i + 1);\n+            length++;\n+            i++;\n+        } else if (result.charAt(i) == '%') {\n+            if (i + 2 < length) {\n+                String hex = arg.substring(i + 1, i + 3);\n+                try {\n+                    int code = Integer.parseInt(hex, 16);\n+                    result = result.substring(0, i) + (char) code + result.substring(i + 3);\n+                    length -= 2;\n+                } catch (NumberFormatException e) {\n+                    // invalid hex code, ignore and continue\n+                }\n+            }\n+        }\n+    }\n+    return result;\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}