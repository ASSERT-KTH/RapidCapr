{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    // Check if GETPROP/GETELEM is used as an lvalue\n    if (NodeUtil.isAssignmentTarget(n)) {\n        return n;\n    }\n\n    // Check if the index is a constant number\n    if (!right.isNumber()) {\n        return n;\n    }\n\n    int index = (int) right.getDouble();\n    double decimalPart = right.getDouble() - index;\n\n    // Check if the index is an integer\n    if (decimalPart != 0) {\n        return n;\n    }\n\n    // Check if the index is non-negative\n    if (index < 0) {\n        return n;\n    }\n\n    // Find the element at the given index\n    Node current = left.getFirstChild();\n    Node elem = null;\n\n    for (int i = 0; i <= index; i++) {\n        if (current == null) {\n            // index out of bounds\n            return n;\n        }\n\n        if (i == index) {\n            elem = current;\n        }\n\n        current = current.getNext();\n    }\n\n    if (elem == null || elem.isNull() || elem.isVoid()) {\n        // Replace with undefined\n        elem = NodeUtil.newUndefinedNode(n);\n    } else {\n        left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..b55d2666 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,59 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+    // Check if GETPROP/GETELEM is used as an lvalue\n+    if (NodeUtil.isAssignmentTarget(n)) {\n+        return n;\n     }\n \n+    // Check if the index is a constant number\n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+        return n;\n     }\n \n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n+    int index = (int) right.getDouble();\n+    double decimalPart = right.getDouble() - index;\n+\n+    // Check if the index is an integer\n+    if (decimalPart != 0) {\n+        return n;\n     }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    // Check if the index is non-negative\n+    if (index < 0) {\n+        return n;\n     }\n \n+    // Find the element at the given index\n     Node current = left.getFirstChild();\n     Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n \n-      current = current.getNext();\n-    }\n+    for (int i = 0; i <= index; i++) {\n+        if (current == null) {\n+            // index out of bounds\n+            return n;\n+        }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+        if (i == index) {\n+            elem = current;\n+        }\n+\n+        current = current.getNext();\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+    if (elem == null || elem.isNull() || elem.isVoid()) {\n+        // Replace with undefined\n+        elem = NodeUtil.newUndefinedNode(n);\n     } else {\n-      left.removeChild(elem);\n+        left.removeChild(elem);\n     }\n \n     // Replace the entire GETELEM with the value\n     n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n-  }\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}