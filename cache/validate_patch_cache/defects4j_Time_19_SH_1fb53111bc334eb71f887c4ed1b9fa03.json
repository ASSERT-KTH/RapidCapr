{
    "patch": "        if (offsetLocal >= 0 && offsetAdjusted >= 0 || (offsetLocal < 0 && offsetAdjusted < 0 && Math.abs(offsetLocal) - Math.abs(offsetAdjusted) > 0)) {\n            // no transition, we are always after the DST gap\n            return offsetAdjusted;\n        } else { // handle transition states\n            long prev = previousTransition(instantAdjusted);\n            long next = nextTransition(instantAdjusted);\n            if (offsetLocal < 0 && offsetAdjusted >= 0) { // gap\n                if (next - instantAdjusted < 7 * DateTimeConstants.MILLIS_PER_DAY) {\n                    // the new offset is greater than the old\n                    return getOffset(next);\n                }\n            } else if (offsetLocal >= 0 && offsetAdjusted < 0) { // overlap\n                if (instantAdjusted - prev < 7 * DateTimeConstants.MILLIS_PER_DAY) {\n                    // the new offset is smaller than the old\n                    return getOffset(prev);\n                }\n            } else if (offsetLocal != offsetAdjusted) { // general case\n                if (next - instantAdjusted < instantAdjusted - prev) {\n                    return getOffset(next);\n                } else {\n                    return getOffset(prev);\n                }\n            }\n            return offsetLocal; // no transition, we are always before the DST gap\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..e0d9f38e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,31 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        if (offsetLocal >= 0 && offsetAdjusted >= 0 || (offsetLocal < 0 && offsetAdjusted < 0 && Math.abs(offsetLocal) - Math.abs(offsetAdjusted) > 0)) {\n+            // no transition, we are always after the DST gap\n+            return offsetAdjusted;\n+        } else { // handle transition states\n+            long prev = previousTransition(instantAdjusted);\n+            long next = nextTransition(instantAdjusted);\n+            if (offsetLocal < 0 && offsetAdjusted >= 0) { // gap\n+                if (next - instantAdjusted < 7 * DateTimeConstants.MILLIS_PER_DAY) {\n+                    // the new offset is greater than the old\n+                    return getOffset(next);\n+                }\n+            } else if (offsetLocal >= 0 && offsetAdjusted < 0) { // overlap\n+                if (instantAdjusted - prev < 7 * DateTimeConstants.MILLIS_PER_DAY) {\n+                    // the new offset is smaller than the old\n+                    return getOffset(prev);\n+                }\n+            } else if (offsetLocal != offsetAdjusted) { // general case\n+                if (next - instantAdjusted < instantAdjusted - prev) {\n+                    return getOffset(next);\n+                } else {\n+                    return getOffset(prev);\n+                }\n+            }\n+            return offsetLocal; // no transition, we are always before the DST gap\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}