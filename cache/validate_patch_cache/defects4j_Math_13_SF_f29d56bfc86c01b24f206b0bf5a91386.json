{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n\n    if (n > 100) {\n        // Compute the square root recursively using a block matrix decomposition\n        final int blockSize = 50;\n        final int numBlocks = (n + blockSize - 1) / blockSize;\n        final RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n\n        for (int i = 0; i < numBlocks; i++) {\n            final int startRow = i * blockSize;\n            final int endRow = Math.min(startRow + blockSize, n);\n            final int blockRows = endRow - startRow;\n            final RealMatrix b = m.getSubMatrix(startRow, endRow - 1, startRow, endRow - 1);\n            final RealMatrix sB = squareRoot(b);\n            s.setSubMatrix(sB.getData(), startRow, startRow);\n\n            for (int j = i + 1; j < numBlocks; j++) {\n                final int startCol = j * blockSize;\n                final int endCol = Math.min(startCol + blockSize, n);\n                final int blockCols = endCol - startCol;\n                final RealMatrix c = m.getSubMatrix(startRow, endRow - 1, startCol, endCol - 1);\n                final RealMatrix sC = c.multiply(sB).scalarMultiply(1.0 / blockRows);\n                s.setSubMatrix(sC.getData(), startRow, startCol);\n            }\n        }\n\n        final EigenDecomposition dec = new EigenDecomposition(s);\n        final RealMatrix eigenvalues = dec.getD();\n        final RealMatrix eigenvectors = dec.getV();\n        final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n        for (int i = 0; i < n; i++) {\n            final double v = eigenvalues.getEntry(i, i);\n            if (v < 0) {\n                throw new IllegalArgumentException(\"Matrix is not positive definite\");\n            } else if (v == 0) {\n                sqrtEigenvalues.setEntry(i, i, 0);\n            } else {\n                sqrtEigenvalues.setEntry(i, i, Math.sqrt(v));\n            }\n        }\n\n        final RealMatrix sqrt = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n        return sqrt;\n    } else {\n        // Compute the square root directly using the EigenDecomposition class\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final RealMatrix squareRoot = dec.getSquareRoot();\n        if (squareRoot == null) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        return squareRoot;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c5f8742e3 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,58 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+\n+    if (n > 100) {\n+        // Compute the square root recursively using a block matrix decomposition\n+        final int blockSize = 50;\n+        final int numBlocks = (n + blockSize - 1) / blockSize;\n+        final RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n+\n+        for (int i = 0; i < numBlocks; i++) {\n+            final int startRow = i * blockSize;\n+            final int endRow = Math.min(startRow + blockSize, n);\n+            final int blockRows = endRow - startRow;\n+            final RealMatrix b = m.getSubMatrix(startRow, endRow - 1, startRow, endRow - 1);\n+            final RealMatrix sB = squareRoot(b);\n+            s.setSubMatrix(sB.getData(), startRow, startRow);\n+\n+            for (int j = i + 1; j < numBlocks; j++) {\n+                final int startCol = j * blockSize;\n+                final int endCol = Math.min(startCol + blockSize, n);\n+                final int blockCols = endCol - startCol;\n+                final RealMatrix c = m.getSubMatrix(startRow, endRow - 1, startCol, endCol - 1);\n+                final RealMatrix sC = c.multiply(sB).scalarMultiply(1.0 / blockRows);\n+                s.setSubMatrix(sC.getData(), startRow, startCol);\n+            }\n+        }\n+\n+        final EigenDecomposition dec = new EigenDecomposition(s);\n+        final RealMatrix eigenvalues = dec.getD();\n+        final RealMatrix eigenvectors = dec.getV();\n+        final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n+        for (int i = 0; i < n; i++) {\n+            final double v = eigenvalues.getEntry(i, i);\n+            if (v < 0) {\n+                throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+            } else if (v == 0) {\n+                sqrtEigenvalues.setEntry(i, i, 0);\n+            } else {\n+                sqrtEigenvalues.setEntry(i, i, Math.sqrt(v));\n+            }\n+        }\n+\n+        final RealMatrix sqrt = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n+        return sqrt;\n+    } else {\n+        // Compute the square root directly using the EigenDecomposition class\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final RealMatrix squareRoot = dec.getSquareRoot();\n+        if (squareRoot == null) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        return squareRoot;\n     }\n }\n+}",
    "result_reason": "org.apache.commons.math3.exception.MathUnsupportedOperationException: unsupported operation",
    "test_result": "FAIL"
}