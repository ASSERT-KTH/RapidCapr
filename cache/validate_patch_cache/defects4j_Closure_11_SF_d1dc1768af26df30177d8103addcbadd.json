{
    "patch": "public boolean getprop(String propName){\n    boolean result = false;\n    try {\n        String command = \"getprop \" + propName;\n        Process process = Runtime.getRuntime().exec(command);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        String line = reader.readLine();\n        if (line != null) {\n            result = Boolean.parseBoolean(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error while trying to get property \" + propName + \": \" + e.getMessage());\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..9e8f3bff 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public boolean getprop(String propName){\n+    boolean result = false;\n+    try {\n+        String command = \"getprop \" + propName;\n+        Process process = Runtime.getRuntime().exec(command);\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+        String line = reader.readLine();\n+        if (line != null) {\n+            result = Boolean.parseBoolean(line);\n+        }\n+    } catch (IOException e) {\n+        System.err.println(\"Error while trying to get property \" + propName + \": \" + e.getMessage());\n+    }\n+    return result;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}