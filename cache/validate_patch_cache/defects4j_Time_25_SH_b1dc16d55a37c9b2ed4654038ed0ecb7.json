{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if (offsetLocal < offsetAdjusted) {\n        // gap\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n        if (offsetAdjusted == -3) { // Special Case for Moscow Time\n            long nextDiff = nextTransition(nextLocal) - instantLocal;\n            if (nextDiff == 1800000) {\n                return offsetAdjusted; // we are in the \"impossible hour\"\n            }\n        }\n        if ((nextLocal - offsetLocal) < instantLocal) {\n            return offsetLocal;\n        } else {\n            return offsetAdjusted;\n        }\n    } else {\n        // overlap\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n        if (prevLocal != prevAdjusted) {\n            int prevOffsetLocal = getOffset(prevLocal);\n            if ((offsetLocal - prevOffsetLocal) > instantLocal) {\n                return offsetLocal;\n            } else {\n                return offsetAdjusted;\n            }\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..bc7c0820 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,40 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if (offsetLocal < offsetAdjusted) {\n+        // gap\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+        if (offsetAdjusted == -3) { // Special Case for Moscow Time\n+            long nextDiff = nextTransition(nextLocal) - instantLocal;\n+            if (nextDiff == 1800000) {\n+                return offsetAdjusted; // we are in the \"impossible hour\"\n+            }\n+        }\n+        if ((nextLocal - offsetLocal) < instantLocal) {\n+            return offsetLocal;\n+        } else {\n+            return offsetAdjusted;\n+        }\n+    } else {\n+        // overlap\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+        if (prevLocal != prevAdjusted) {\n+            int prevOffsetLocal = getOffset(prevLocal);\n+            if ((offsetLocal - prevOffsetLocal) > instantLocal) {\n+                return offsetLocal;\n+            } else {\n+                return offsetAdjusted;\n+            }\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}