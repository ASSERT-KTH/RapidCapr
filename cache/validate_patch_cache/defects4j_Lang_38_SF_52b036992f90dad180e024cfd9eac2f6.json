{
    "patch": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        if (mTimeZoneForced) {\n            calendar = (Calendar) calendar.clone();\n            calendar.setTimeZone(mTimeZone);\n        }\n        // Clear the milliseconds of the calendar to avoid inconsistency with Calendar.getTimeInMillis()\n        long originalTimeInMillis = calendar.getTimeInMillis();\n        calendar.clear(Calendar.MILLISECOND);\n        long newTimeInMillis = calendar.getTimeInMillis();\n        if (originalTimeInMillis != newTimeInMillis) {\n            // originalTimeInMillis and newTimeInMillis differ only by milliseconds, which are ignored\n            calendar.setTimeInMillis(originalTimeInMillis);\n        }\n        return applyRules(calendar, buf);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..fc7ffbbc 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -872,6 +872,14 @@ public class FastDateFormat extends Format {\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }\n+        // Clear the milliseconds of the calendar to avoid inconsistency with Calendar.getTimeInMillis()\n+        long originalTimeInMillis = calendar.getTimeInMillis();\n+        calendar.clear(Calendar.MILLISECOND);\n+        long newTimeInMillis = calendar.getTimeInMillis();\n+        if (originalTimeInMillis != newTimeInMillis) {\n+            // originalTimeInMillis and newTimeInMillis differ only by milliseconds, which are ignored\n+            calendar.setTimeInMillis(originalTimeInMillis);\n+        }\n         return applyRules(calendar, buf);\n     }\n ",
    "result_reason": "junit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>",
    "test_result": "FAIL"
}