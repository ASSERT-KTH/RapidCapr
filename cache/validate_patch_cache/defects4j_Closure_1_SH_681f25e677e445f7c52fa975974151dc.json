{
    "patch": "      for (Node argNode : argList.children()) {\n        String argName = argNode.getString();\n        Var var = fnScope.getVar(argName);\n        if (!referenced.contains(var)) {\n          if (compiler.getCodingConvention().isVarArgsName(argName)) {\n            return; // skip removing the last element of an arguments array\n          }\n          argList.removeChild(argNode);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..eabd5579 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,14 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      for (Node argNode : argList.children()) {\n+        String argName = argNode.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (!referenced.contains(var)) {\n+          if (compiler.getCodingConvention().isVarArgsName(argName)) {\n+            return; // skip removing the last element of an arguments array\n+          }\n+          argList.removeChild(argNode);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}