{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    double s1 = v1.getNorm();\n    double s2 = v2.getNorm();\n    if (s1 == 0 || s2 == 0) {\n        throw new ZeroException();\n    }\n    Vector3D v1u = v1.scalarMultiply(1 / s1);\n    Vector3D v2u = v2.scalarMultiply(1 / s2);\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    double alpha = v1u.dotProduct(v2u);\n    double beta = v2u.dotProduct(v2u);\n    double w = alpha / beta;\n\n    // compute v3 and its norm\n    Vector3D v3 = v1u.subtract(w * v2u);\n    double s3 = v3.getNorm();\n    if (s3 == 0) {\n        throw new ZeroException();\n    }\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    Vector3D cp = new Vector3D(v3.getY() * v2u.getZ() - v3.getZ() * v2u.getY(),\n                               v3.getZ() * v2u.getX() - v3.getX() * v2u.getZ(),\n                               v3.getX() * v2u.getY() - v3.getY() * v2u.getX());\n\n    // compensate for lost scaling during dot product computations\n    cp = cp.scalarMultiply(s2 * s1 / (s3 * s3));\n\n    return cp;\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..d24f54c4d 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,47 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    double s1 = v1.getNorm();\n+    double s2 = v2.getNorm();\n+    if (s1 == 0 || s2 == 0) {\n+        throw new ZeroException();\n+    }\n+    Vector3D v1u = v1.scalarMultiply(1 / s1);\n+    Vector3D v2u = v2.scalarMultiply(1 / s2);\n+\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    double alpha = v1u.dotProduct(v2u);\n+    double beta = v2u.dotProduct(v2u);\n+    double w = alpha / beta;\n+\n+    // compute v3 and its norm\n+    Vector3D v3 = v1u.subtract(w * v2u);\n+    double s3 = v3.getNorm();\n+    if (s3 == 0) {\n+        throw new ZeroException();\n+    }\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    Vector3D cp = new Vector3D(v3.getY() * v2u.getZ() - v3.getZ() * v2u.getY(),\n+                               v3.getZ() * v2u.getX() - v3.getX() * v2u.getZ(),\n+                               v3.getX() * v2u.getY() - v3.getY() * v2u.getX());\n \n+    // compensate for lost scaling during dot product computations\n+    cp = cp.scalarMultiply(s2 * s1 / (s3 * s3));\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    return cp;\n \n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}