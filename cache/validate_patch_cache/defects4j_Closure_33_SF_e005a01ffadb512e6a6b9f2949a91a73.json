{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match constraints on anonymous types.\n    if (constraintObj.isNominalConstructor() || constraintObj.isInterface() \n        || constraintObj.getDisplayName() != null) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by taking\n    // any each property on the record and trying to match properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n    // Handle the case where the constraint object is a function type.\n    //\n    // param constraintObj {function(...[*]):*}\n    // function f(constraintObj) {}\n    //\n    // We want to create a synthetic function for any unannotated parameters.\n    //\n    // f(function(x, y) {}); // should infer function(string, string): undefined\n    if (constraintObj.isFunctionType()) {\n      ObjectType functionType = constraintObj.toObjectType();\n      JSType paramTypes =\n          functionType.getFormalType(0).getParameterType(0);\n      // If the function has no parameter types, don't bother.\n      if (paramTypes.isUnknownType()) {\n        return;\n      }\n      int paramCount = paramTypes.getArity();\n      for (int i = 0; i < paramCount; i++) {\n        if (paramTypes.getParameterType(i).isUnknownType()) {\n          FunctionTypeBuilder builder = new FunctionTypeBuilder(getRegistry());\n          for (int j = 0; j < paramCount; j++) {\n            builder.addParameter(getNativeType(JSTypeNative.STRING_TYPE));\n          }\n          builder.addReturnType(getNativeType(JSTypeNative.VOID_TYPE));\n          defineInferredProperty(Integer.toString(i+1), builder.buildFunction(), null);\n        }\n      }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..215a08e8 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,8 +552,12 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n+public void matchConstraint(ObjectType constraintObj) {\n+    // We only want to match constraints on anonymous types.\n+    if (constraintObj.isNominalConstructor() || constraintObj.isInterface() \n+        || constraintObj.getDisplayName() != null) {\n+      return;\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //\n@@ -561,9 +565,8 @@ class PrototypeObjectType extends ObjectType {\n     // function f(constraintObj) {}\n     // f({});\n     //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n+    // We want to modify the object literal to match the constraint, by taking\n+    // any each property on the record and trying to match properties on this object.\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n@@ -577,5 +580,33 @@ class PrototypeObjectType extends ObjectType {\n         }\n       }\n     }\n-  }\n+    // Handle the case where the constraint object is a function type.\n+    //\n+    // param constraintObj {function(...[*]):*}\n+    // function f(constraintObj) {}\n+    //\n+    // We want to create a synthetic function for any unannotated parameters.\n+    //\n+    // f(function(x, y) {}); // should infer function(string, string): undefined\n+    if (constraintObj.isFunctionType()) {\n+      ObjectType functionType = constraintObj.toObjectType();\n+      JSType paramTypes =\n+          functionType.getFormalType(0).getParameterType(0);\n+      // If the function has no parameter types, don't bother.\n+      if (paramTypes.isUnknownType()) {\n+        return;\n+      }\n+      int paramCount = paramTypes.getArity();\n+      for (int i = 0; i < paramCount; i++) {\n+        if (paramTypes.getParameterType(i).isUnknownType()) {\n+          FunctionTypeBuilder builder = new FunctionTypeBuilder(getRegistry());\n+          for (int j = 0; j < paramCount; j++) {\n+            builder.addParameter(getNativeType(JSTypeNative.STRING_TYPE));\n+          }\n+          builder.addReturnType(getNativeType(JSTypeNative.VOID_TYPE));\n+          defineInferredProperty(Integer.toString(i+1), builder.buildFunction(), null);\n+        }\n+      }\n+    }\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}