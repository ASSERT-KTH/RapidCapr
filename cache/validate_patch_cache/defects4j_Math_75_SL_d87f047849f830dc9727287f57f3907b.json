{
    "patch": "if (v instanceof Comparable) {\n    return getCumPct((Comparable<?>) v);\n} else if (v instanceof Integer || v instanceof Double || v instanceof Float ||\n           v instanceof Long || v instanceof Short || v instanceof Byte) {\n    return getCumPct((Comparable<?>) Number.class.cast(v));\n} else if (v instanceof String) {\n    try {\n        return getCumPct((Comparable<?>) Integer.parseInt((String) v));\n    } catch (NumberFormatException e) {\n        return getCumPct((Comparable<?>) v.toString());\n    }\n}\nreturn 0.0;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..a37cbb5f8 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -300,7 +300,19 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+if (v instanceof Comparable) {\n+    return getCumPct((Comparable<?>) v);\n+} else if (v instanceof Integer || v instanceof Double || v instanceof Float ||\n+           v instanceof Long || v instanceof Short || v instanceof Byte) {\n+    return getCumPct((Comparable<?>) Number.class.cast(v));\n+} else if (v instanceof String) {\n+    try {\n+        return getCumPct((Comparable<?>) Integer.parseInt((String) v));\n+    } catch (NumberFormatException e) {\n+        return getCumPct((Comparable<?>) v.toString());\n+    }\n+}\n+return 0.0;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: three (Object) pct expected:<0.5> but was:<1.0>",
    "test_result": "FAIL"
}