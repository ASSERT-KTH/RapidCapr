{
    "patch": "        if (expPos > -1 && expPos < val.length() - 1) {\n            exp = val.substring(expPos + 1, val.length());\n        } else {\n            exp = null;\n        }\n        if (dec == null && exp == null) {\n            //Must be an int,long,bigint\n            try {\n                return createInteger(val);\n            } catch (NumberFormatException nfe) {\n                // empty catch\n            }\n            try {\n                return createLong(val);\n            } catch (NumberFormatException nfe) {\n                // empty catch\n            }\n            return createBigInteger(val);\n\n        } else {\n            //Must be a float,double,BigDec\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            try {\n                Float f = Float.parseFloat(val);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n                // empty catch\n            }\n            try {\n                Double d = Double.parseDouble(val);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // empty catch\n            }\n\n            return createBigDecimal(val);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..c7c22160 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,46 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (expPos > -1 && expPos < val.length() - 1) {\n+            exp = val.substring(expPos + 1, val.length());\n+        } else {\n+            exp = null;\n+        }\n+        if (dec == null && exp == null) {\n+            //Must be an int,long,bigint\n+            try {\n+                return createInteger(val);\n+            } catch (NumberFormatException nfe) {\n+                // empty catch\n+            }\n+            try {\n+                return createLong(val);\n+            } catch (NumberFormatException nfe) {\n+                // empty catch\n+            }\n+            return createBigInteger(val);\n+\n+        } else {\n+            //Must be a float,double,BigDec\n+            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+            try {\n+                Float f = Float.parseFloat(val);\n+                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                    return f;\n+                }\n+            } catch (NumberFormatException nfe) {\n+                // empty catch\n+            }\n+            try {\n+                Double d = Double.parseDouble(val);\n+                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                    return d;\n+                }\n+            } catch (NumberFormatException nfe) {\n+                // empty catch\n+            }\n+\n+            return createBigDecimal(val);\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}