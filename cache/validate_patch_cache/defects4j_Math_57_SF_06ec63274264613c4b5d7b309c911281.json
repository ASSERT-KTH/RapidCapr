{
    "patch": "public List<Cluster<T>> cluster(final Collection<T> points,\n                                final int k, final int maxIterations) {\n    List<Cluster<T>> clusters = new ArrayList<Cluster<T>>();\n    if (points.size() < k) {\n        for (T p : points) {\n            clusters.add(new Cluster<T>(p, new ArrayList<T>()));\n        }\n        return clusters;\n    }\n\n    List<T> pointList = new ArrayList<T>(points);\n\n    // Choose one center uniformly at random from among the data points.\n    Random random = new Random();\n    T p = pointList.remove(random.nextInt(pointList.size()));\n    clusters.add(new Cluster<T>(p, new ArrayList<T>()));\n\n    while (clusters.size() < k) {\n        double maxDist = Double.MIN_VALUE;\n        T maxDistPoint = null;\n        for (T point : pointList) {\n            double minClusterDist = Double.MAX_VALUE;\n            for (Cluster<T> cluster : clusters) {\n                double dist = cluster.getCenter().distanceFrom(point);\n                if (dist < minClusterDist) {\n                    minClusterDist = dist;\n                }\n            }\n            if (minClusterDist > maxDist) {\n                maxDist = minClusterDist;\n                maxDistPoint = point;\n            }\n        }\n        clusters.add(new Cluster<T>(maxDistPoint, new ArrayList<T>()));\n        pointList.remove(maxDistPoint);\n    }\n\n    // Run k-means algorithm\n    for (int i = 0; i < maxIterations; i++) {\n        assignPointsToClusters(clusters, pointList);\n        List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n        boolean isOptimal = true;\n        for (Cluster<T> cluster : clusters) {\n            if (cluster.getPoints().isEmpty()) {\n                newClusters.add(cluster);\n                isOptimal = false;\n            } else {\n                T newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n                if (!newCenter.equals(cluster.getCenter())) {\n                    isOptimal = false;\n                }\n                newClusters.add(new Cluster<T>(newCenter, cluster.getPoints()));\n            }\n        }\n        clusters = newClusters;\n        if (isOptimal) {\n            break;\n        }\n    }\n\n    return clusters;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\nindex b73ac9d3e..2060b273a 100644\n--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n@@ -89,114 +89,69 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n      *     for.  If negative, no maximum will be used\n      * @return a list of clusters containing the points\n      */\n-    public List<Cluster<T>> cluster(final Collection<T> points,\n-                                    final int k, final int maxIterations) {\n-        // create the initial clusters\n-        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n-        assignPointsToClusters(clusters, points);\n-\n-        // iterate through updating the centers until we're done\n-        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        for (int count = 0; count < max; count++) {\n-            boolean clusteringChanged = false;\n-            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n-            for (final Cluster<T> cluster : clusters) {\n-                final T newCenter;\n-                if (cluster.getPoints().isEmpty()) {\n-                    switch (emptyStrategy) {\n-                        case LARGEST_VARIANCE :\n-                            newCenter = getPointFromLargestVarianceCluster(clusters);\n-                            break;\n-                        case LARGEST_POINTS_NUMBER :\n-                            newCenter = getPointFromLargestNumberCluster(clusters);\n-                            break;\n-                        case FARTHEST_POINT :\n-                            newCenter = getFarthestPoint(clusters);\n-                            break;\n-                        default :\n-                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n-                    }\n-                    clusteringChanged = true;\n-                } else {\n-                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n-                    if (!newCenter.equals(cluster.getCenter())) {\n-                        clusteringChanged = true;\n-                    }\n-                }\n-                newClusters.add(new Cluster<T>(newCenter));\n-            }\n-            if (!clusteringChanged) {\n-                return clusters;\n-            }\n-            assignPointsToClusters(newClusters, points);\n-            clusters = newClusters;\n+public List<Cluster<T>> cluster(final Collection<T> points,\n+                                final int k, final int maxIterations) {\n+    List<Cluster<T>> clusters = new ArrayList<Cluster<T>>();\n+    if (points.size() < k) {\n+        for (T p : points) {\n+            clusters.add(new Cluster<T>(p, new ArrayList<T>()));\n         }\n         return clusters;\n     }\n \n-    /**\n-     * Adds the given points to the closest {@link Cluster}.\n-     *\n-     * @param <T> type of the points to cluster\n-     * @param clusters the {@link Cluster}s to add the points to\n-     * @param points the points to add to the given {@link Cluster}s\n-     */\n-    private static <T extends Clusterable<T>> void\n-        assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {\n-        for (final T p : points) {\n-            Cluster<T> cluster = getNearestCluster(clusters, p);\n-            cluster.addPoint(p);\n+    List<T> pointList = new ArrayList<T>(points);\n+\n+    // Choose one center uniformly at random from among the data points.\n+    Random random = new Random();\n+    T p = pointList.remove(random.nextInt(pointList.size()));\n+    clusters.add(new Cluster<T>(p, new ArrayList<T>()));\n+\n+    while (clusters.size() < k) {\n+        double maxDist = Double.MIN_VALUE;\n+        T maxDistPoint = null;\n+        for (T point : pointList) {\n+            double minClusterDist = Double.MAX_VALUE;\n+            for (Cluster<T> cluster : clusters) {\n+                double dist = cluster.getCenter().distanceFrom(point);\n+                if (dist < minClusterDist) {\n+                    minClusterDist = dist;\n+                }\n+            }\n+            if (minClusterDist > maxDist) {\n+                maxDist = minClusterDist;\n+                maxDistPoint = point;\n+            }\n         }\n+        clusters.add(new Cluster<T>(maxDistPoint, new ArrayList<T>()));\n+        pointList.remove(maxDistPoint);\n     }\n \n-    /**\n-     * Use K-means++ to choose the initial centers.\n-     *\n-     * @param <T> type of the points to cluster\n-     * @param points the points to choose the initial centers from\n-     * @param k the number of centers to choose\n-     * @param random random generator to use\n-     * @return the initial centers\n-     */\n-    private static <T extends Clusterable<T>> List<Cluster<T>>\n-        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n-\n-        final List<T> pointSet = new ArrayList<T>(points);\n-        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n-\n-        // Choose one center uniformly at random from among the data points.\n-        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n-        resultSet.add(new Cluster<T>(firstPoint));\n-\n-        final double[] dx2 = new double[pointSet.size()];\n-        while (resultSet.size() < k) {\n-            // For each data point x, compute D(x), the distance between x and\n-            // the nearest center that has already been chosen.\n-            int sum = 0;\n-            for (int i = 0; i < pointSet.size(); i++) {\n-                final T p = pointSet.get(i);\n-                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n-                final double d = p.distanceFrom(nearest.getCenter());\n-                sum += d * d;\n-                dx2[i] = sum;\n-            }\n-\n-            // Add one new data point as a center. Each point x is chosen with\n-            // probability proportional to D(x)2\n-            final double r = random.nextDouble() * sum;\n-            for (int i = 0 ; i < dx2.length; i++) {\n-                if (dx2[i] >= r) {\n-                    final T p = pointSet.remove(i);\n-                    resultSet.add(new Cluster<T>(p));\n-                    break;\n+    // Run k-means algorithm\n+    for (int i = 0; i < maxIterations; i++) {\n+        assignPointsToClusters(clusters, pointList);\n+        List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n+        boolean isOptimal = true;\n+        for (Cluster<T> cluster : clusters) {\n+            if (cluster.getPoints().isEmpty()) {\n+                newClusters.add(cluster);\n+                isOptimal = false;\n+            } else {\n+                T newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n+                if (!newCenter.equals(cluster.getCenter())) {\n+                    isOptimal = false;\n                 }\n+                newClusters.add(new Cluster<T>(newCenter, cluster.getPoints()));\n             }\n         }\n-\n-        return resultSet;\n-\n+        clusters = newClusters;\n+        if (isOptimal) {\n+            break;\n+        }\n     }\n \n+    return clusters;\n+}\n+\n     /**\n      * Get a random point from the {@link Cluster} with the largest distance variance.\n      *",
    "result_reason": "error: constructor Cluster in class Cluster<T#2> cannot be applied to given types;",
    "test_result": "ERROR"
}