{
    "patch": "            int lastFieldIndex = -1;\n            for (int i = 0; i < count; i++) {\n                SavedField save = savedFields[i];\n                DateTimeField field = save.iField;\n                if (save.iValue != Integer.MIN_VALUE && field.isSupported()) {\n                    int value = save.iValue;\n                    try {\n                        millis = field.setExtended(millis, value);\n                    } catch (IllegalArgumentException e) {\n                        IllegalFieldValueException illegalFieldValueException = new IllegalFieldValueException(\n                                field.getType(), value, null, null);\n                        illegalFieldValueException.initCause(e);\n                        throw illegalFieldValueException;\n                    }\n                    lastFieldIndex = i;\n                }\n            }\n            if (lastFieldIndex >= 0 && savedFields[lastFieldIndex].iField.getType().equals(DateTimeFieldType.monthOfYear())) {\n                lastFieldIndex++;\n                while (lastFieldIndex < count) {\n                    SavedField save = savedFields[lastFieldIndex];\n                    if (save.iValue == Integer.MIN_VALUE || !save.iField.isSupported()) {\n                        lastFieldIndex++;\n                    } else {\n                        throw new IllegalFieldValueException(save.iField.getType(), null, null, null);\n                    }\n                }\n                String message = \"MonthOfYear\";\n                throw new IllegalArgumentException(message);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5cf90585 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,36 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            int lastFieldIndex = -1;\n+            for (int i = 0; i < count; i++) {\n+                SavedField save = savedFields[i];\n+                DateTimeField field = save.iField;\n+                if (save.iValue != Integer.MIN_VALUE && field.isSupported()) {\n+                    int value = save.iValue;\n+                    try {\n+                        millis = field.setExtended(millis, value);\n+                    } catch (IllegalArgumentException e) {\n+                        IllegalFieldValueException illegalFieldValueException = new IllegalFieldValueException(\n+                                field.getType(), value, null, null);\n+                        illegalFieldValueException.initCause(e);\n+                        throw illegalFieldValueException;\n+                    }\n+                    lastFieldIndex = i;\n+                }\n+            }\n+            if (lastFieldIndex >= 0 && savedFields[lastFieldIndex].iField.getType().equals(DateTimeFieldType.monthOfYear())) {\n+                lastFieldIndex++;\n+                while (lastFieldIndex < count) {\n+                    SavedField save = savedFields[lastFieldIndex];\n+                    if (save.iValue == Integer.MIN_VALUE || !save.iField.isSupported()) {\n+                        lastFieldIndex++;\n+                    } else {\n+                        throw new IllegalFieldValueException(save.iField.getType(), null, null, null);\n+                    }\n+                }\n+                String message = \"MonthOfYear\";\n+                throw new IllegalArgumentException(message);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}