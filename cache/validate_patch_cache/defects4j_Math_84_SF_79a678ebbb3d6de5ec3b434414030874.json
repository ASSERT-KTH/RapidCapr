{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = new RealPointValuePair[reflectedSimplex.length];\n                    simplex[0] = reflected;\n                    System.arraycopy(reflectedSimplex, 1, simplex, 1, simplex.length - 1);\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // perform an inside contraction\n                final RealPointValuePair contractedIn = evaluateNewSimplex(original, psi, comparator);\n                if (comparator.compare(contractedIn, contracted) < 0) {\n                    // accept the contracted inside simplex\n                    simplex = new RealPointValuePair[contractedIn.length];\n                    simplex[0] = best;\n                    System.arraycopy(contractedIn, 0, simplex, 1, simplex.length - 1);\n                } else {\n                    // accept the contracted simplex\n                    final RealPointValuePair[] contractedSimplex = simplex;\n                    simplex = contractedSimplex;\n                }\n\n                return;\n\n            }\n\n            // perform an outside contraction\n            final RealPointValuePair contractedOut = evaluateNewSimplex(original, rho, comparator);\n            if (comparator.compare(contractedOut, best) < 0) {\n                // accept the contracted outside simplex\n                simplex = new RealPointValuePair[contractedOut.length];\n                simplex[0] = best;\n                System.arraycopy(contractedOut, 0, simplex, 1, simplex.length - 1);\n            } else {\n                // perform a shrink step\n                final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[simplex.length];\n                shrinkedSimplex[0] = best;\n                final RealPointValuePair second = simplex[1];\n                for (int i = 1; i < simplex.length; ++i) {\n                    final RealPointValuePair sv = simplex[i];\n                    final double[] svp = sv.getPoint();\n                    final double[] rp = best.getPoint();\n                    final double[] np = new double[dim];\n                    for (int j = 0; j < dim; ++j) {\n                        np[j] = rp[j] + delta * (svp[j] - rp[j]);\n                    }\n                    shrinkedSimplex[i] = new RealPointValuePair(np, Double.NaN, false);\n                }\n                simplex = shrinkedSimplex;\n            }\n\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..52bafa6a3 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,7 +59,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -76,9 +76,14 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    // accept the reflected simplex\n+                    simplex = new RealPointValuePair[reflectedSimplex.length];\n+                    simplex[0] = reflected;\n+                    System.arraycopy(reflectedSimplex, 1, simplex, 1, simplex.length - 1);\n                 }\n \n                 return;\n@@ -88,10 +93,46 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                // perform an inside contraction\n+                final RealPointValuePair contractedIn = evaluateNewSimplex(original, psi, comparator);\n+                if (comparator.compare(contractedIn, contracted) < 0) {\n+                    // accept the contracted inside simplex\n+                    simplex = new RealPointValuePair[contractedIn.length];\n+                    simplex[0] = best;\n+                    System.arraycopy(contractedIn, 0, simplex, 1, simplex.length - 1);\n+                } else {\n+                    // accept the contracted simplex\n+                    final RealPointValuePair[] contractedSimplex = simplex;\n+                    simplex = contractedSimplex;\n+                }\n \n-            // check convergence\n                 return;\n+\n+            }\n+\n+            // perform an outside contraction\n+            final RealPointValuePair contractedOut = evaluateNewSimplex(original, rho, comparator);\n+            if (comparator.compare(contractedOut, best) < 0) {\n+                // accept the contracted outside simplex\n+                simplex = new RealPointValuePair[contractedOut.length];\n+                simplex[0] = best;\n+                System.arraycopy(contractedOut, 0, simplex, 1, simplex.length - 1);\n+            } else {\n+                // perform a shrink step\n+                final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[simplex.length];\n+                shrinkedSimplex[0] = best;\n+                final RealPointValuePair second = simplex[1];\n+                for (int i = 1; i < simplex.length; ++i) {\n+                    final RealPointValuePair sv = simplex[i];\n+                    final double[] svp = sv.getPoint();\n+                    final double[] rp = best.getPoint();\n+                    final double[] np = new double[dim];\n+                    for (int j = 0; j < dim; ++j) {\n+                        np[j] = rp[j] + delta * (svp[j] - rp[j]);\n+                    }\n+                    shrinkedSimplex[i] = new RealPointValuePair(np, Double.NaN, false);\n+                }\n+                simplex = shrinkedSimplex;\n             }\n \n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}