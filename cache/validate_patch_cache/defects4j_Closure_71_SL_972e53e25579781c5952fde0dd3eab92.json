{
    "patch": "      boolean isOverride = false; // <- add this line\n      if (t.inGlobalScope()) {\n          isOverride = parent != null &&\n              parent.getType() == Token.ASSIGN &&\n              parent.getFirstChild() == getprop;\n      } else {\n          isOverride = parent.getType() == Token.ASSIGN &&\n              parent.getFirstChild() == getprop &&\n              parent.getParent().getType() == Token.EXPR_RESULT &&\n              !parent.getParent().getParent().isFunction();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..243a5ae8 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,16 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = false; // <- add this line\n+      if (t.inGlobalScope()) {\n+          isOverride = parent != null &&\n+              parent.getType() == Token.ASSIGN &&\n+              parent.getFirstChild() == getprop;\n+      } else {\n+          isOverride = parent.getType() == Token.ASSIGN &&\n+              parent.getFirstChild() == getprop &&\n+              parent.getParent().getType() == Token.EXPR_RESULT &&\n+              !parent.getParent().getParent().isFunction();\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}