{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n    final RealMatrix u = svd.getU();\n    final RealMatrix v = svd.getV();\n    final RealMatrix s = svd.getS();\n    final int n = s.getColumnDimension();\n\n    // Construct the diagonal matrix D with sqrt of the eigenvalues\n    final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(\n            IntStream.range(0, n)\n                     .mapToDouble(i -> FastMath.sqrt(s.getEntry(i, i)))\n                     .toArray());\n\n    // Compute the square root using the formula: sqrt(m) = U * D * V'\n    return u.multiply(d).multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..bfd2b233d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+    final RealMatrix u = svd.getU();\n+    final RealMatrix v = svd.getV();\n+    final RealMatrix s = svd.getS();\n+    final int n = s.getColumnDimension();\n+\n+    // Construct the diagonal matrix D with sqrt of the eigenvalues\n+    final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(\n+            IntStream.range(0, n)\n+                     .mapToDouble(i -> FastMath.sqrt(s.getEntry(i, i)))\n+                     .toArray());\n+\n+    // Compute the square root using the formula: sqrt(m) = U * D * V'\n+    return u.multiply(d).multiply(v.transpose());\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}