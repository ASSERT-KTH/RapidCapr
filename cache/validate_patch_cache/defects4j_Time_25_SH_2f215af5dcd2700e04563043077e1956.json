{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // check if we are near a DST boundary\n    // if yes, return the correct offset\n    long prevTransition = previousTransition(instantAdjusted);\n    long nextTransition = nextTransition(instantAdjusted);\n    if (prevTransition == nextTransition) {\n        return offsetLocal;\n    }\n    int prevOffset = getOffset(prevTransition);\n    int nextOffset = getOffset(nextTransition);\n    if (prevOffset < nextOffset) {\n        return offsetLocal;\n    } else if (prevOffset > nextOffset) {\n        return nextOffset;\n    }\n    // if not, we must be in a DST gap or overlap\n    // adjust the time using the next offset and recompute\n    long nextAdjustedLocal = nextTransition + nextOffset;\n    if (instantAdjusted < nextAdjustedLocal) {\n        return offsetLocal;\n    }\n    // if we're in a gap, get the next offset\n    long nextNextTransition = nextTransition(nextAdjustedLocal);\n    int nextNextOffset = getOffset(nextNextTransition);\n    if (nextOffset == nextNextOffset) {\n        // if the next offset is the same, return the current one\n        return offsetAdjusted;\n    } else {\n        // otherwise, return the next one\n        return nextOffset;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..45cb9bc3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,39 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // check if we are near a DST boundary\n+    // if yes, return the correct offset\n+    long prevTransition = previousTransition(instantAdjusted);\n+    long nextTransition = nextTransition(instantAdjusted);\n+    if (prevTransition == nextTransition) {\n+        return offsetLocal;\n+    }\n+    int prevOffset = getOffset(prevTransition);\n+    int nextOffset = getOffset(nextTransition);\n+    if (prevOffset < nextOffset) {\n+        return offsetLocal;\n+    } else if (prevOffset > nextOffset) {\n+        return nextOffset;\n+    }\n+    // if not, we must be in a DST gap or overlap\n+    // adjust the time using the next offset and recompute\n+    long nextAdjustedLocal = nextTransition + nextOffset;\n+    if (instantAdjusted < nextAdjustedLocal) {\n+        return offsetLocal;\n+    }\n+    // if we're in a gap, get the next offset\n+    long nextNextTransition = nextTransition(nextAdjustedLocal);\n+    int nextNextOffset = getOffset(nextNextTransition);\n+    if (nextOffset == nextNextOffset) {\n+        // if the next offset is the same, return the current one\n+        return offsetAdjusted;\n+    } else {\n+        // otherwise, return the next one\n+        return nextOffset;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}