{
    "patch": "public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n    double[] result = new double[N + 1];\n    double[][] dp = new double[D + 1][M];\n    double[][] dp2 = new double[D + 1][M];\n\n    for (double[] d : dp) {\n        Arrays.fill(d, 1);\n    }\n\n    for (int i = 0; i < M; i++) {\n        result[populationCount(i)] += genotypeProbabilities[i];\n    }\n\n    for (int i = 0; i < D; i++) {\n        double[][] temp = dp2;\n        dp2 = dp;\n        dp = temp;\n\n        for (double[] d : dp2) {\n            Arrays.fill(d, 0);\n        }\n\n        for (int j = 0; j < M; j++) {\n            for (int k = 0; k < M; k++) {\n                int p = getDominant(j, k, M);\n                double v = genotypeProbabilities[p] * dp[i][j];\n                dp2[i + 1][j] += v / 4;\n                dp2[i + 1][k] += v / 4;\n                dp2[i][p] += v / 2;\n            }\n        }\n\n        for (int j = 0; j < M; j++) {\n            result[populationCount(j)] += dp2[i + 1][j];\n        }\n    }\n\n    for (int i = 0; i < N + 1; i++) {\n        result[i] /= Math.pow(M, D);\n    }\n\n    return result;\n}\n\nprivate int getDominant(int i, int j, int M) {\n    if (i > j) {\n        int t = i;\n        i = j;\n        j = t;\n    }\n\n    return (M * (M - 1) / 2) - (M - i) * (M - i - 1) / 2 + j - i - 1;\n}\n\nprivate int populationCount(int i) {\n    int result = 0;\n\n    while (i > 0) {\n        result += i % 2;\n        i /= 2;\n    }\n\n    return result;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}