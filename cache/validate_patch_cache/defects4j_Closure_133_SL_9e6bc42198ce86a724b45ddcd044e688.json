{
    "patch": "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n  if (result == null) {\n    return \"\";\n  }\n\n  result = result.trim();\n\n  if (result.isEmpty()) {\n    return \"\";\n  }\n  \n  // adding a null check before calling parse()\n  if (jsdocParser != null) {\n    jsdocParser.parse();\n  }\n\n  return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..d21d6def 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,25 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+  String result = stream.getRemainingJSDocLine();\n+  if (result == null) {\n+    return \"\";\n+  }\n+\n+  result = result.trim();\n+\n+  if (result.isEmpty()) {\n+    return \"\";\n+  }\n+  \n+  // adding a null check before calling parse()\n+  if (jsdocParser != null) {\n+    jsdocParser.parse();\n+  }\n+\n+  return result;\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}