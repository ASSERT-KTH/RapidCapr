{
    "patch": "public boolean hasSameMethod(Invocation candidate) {\n    if (invocation == null || candidate == null) {\n        return false;\n    }\n    Method m1 = invocation.getMethod();\n    Method m2 = candidate.getMethod();\n    return m1.getName().equals(m2.getName()) &&\n            m1.getParameterCount() == m2.getParameterCount() &&\n            Arrays.stream(m1.getParameterTypes())\n                    .allMatch(type1 -> Arrays.stream(m2.getParameterTypes())\n                            .anyMatch(type2 -> Objects.equals(type1, type2)));\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 203413fc9..221946e84 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -89,15 +89,18 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n         return !overloadedButSameArgs;\n     }\n \n-    public boolean hasSameMethod(Invocation candidate) {        \n-        //not using method.equals() for 1 good reason:\n-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n-        Method m1 = invocation.getMethod();\n-        Method m2 = candidate.getMethod();\n-        \n-        \t/* Avoid unnecessary cloning */\n-        return m1.equals(m2);\n+public boolean hasSameMethod(Invocation candidate) {\n+    if (invocation == null || candidate == null) {\n+        return false;\n     }\n+    Method m1 = invocation.getMethod();\n+    Method m2 = candidate.getMethod();\n+    return m1.getName().equals(m2.getName()) &&\n+            m1.getParameterCount() == m2.getParameterCount() &&\n+            Arrays.stream(m1.getParameterTypes())\n+                    .allMatch(type1 -> Arrays.stream(m2.getParameterTypes())\n+                            .anyMatch(type2 -> Objects.equals(type1, type2)));\n+}\n     \n     public Location getLocation() {\n         return invocation.getLocation();\n@@ -126,4 +129,4 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n \n         return out;\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}