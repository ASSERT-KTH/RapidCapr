{
    "patch": "import java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class StringUtils {\n\n    public static boolean containsAny(String str, char[] searchChars) {\n        if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {\n            return false;\n        }\n        \n        Set<Character> searchSet = new HashSet<>(searchChars.length);\n        for (char c : searchChars) {\n            searchSet.add(Character.valueOf(c));\n        }\n        \n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (searchSet.contains(Character.valueOf(ch))) {\n                return true;\n            }\n            if (Character.isHighSurrogate(ch)) {\n                int codePoint = Character.codePointAt(str, i);\n                i++; // skip low surrogate\n                if (Character.isValidCodePoint(codePoint)) {\n                    if (containsAny(codePoint, searchSet)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    \n    private static boolean containsAny(int codePoint, Set<Character> searchSet) {\n        for (char c : Character.toChars(codePoint)) {\n            if (searchSet.contains(Character.valueOf(c))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..3e825619 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,50 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class StringUtils {\n+\n+    public static boolean containsAny(String str, char[] searchChars) {\n+        if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {\n+            return false;\n+        }\n+        \n+        Set<Character> searchSet = new HashSet<>(searchChars.length);\n+        for (char c : searchChars) {\n+            searchSet.add(Character.valueOf(c));\n+        }\n+        \n+        int strLen = str.length();\n+        for (int i = 0; i < strLen; i++) {\n+            char ch = str.charAt(i);\n+            if (searchSet.contains(Character.valueOf(ch))) {\n+                return true;\n+            }\n+            if (Character.isHighSurrogate(ch)) {\n+                int codePoint = Character.codePointAt(str, i);\n+                i++; // skip low surrogate\n+                if (Character.isValidCodePoint(codePoint)) {\n+                    if (containsAny(codePoint, searchSet)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    private static boolean containsAny(int codePoint, Set<Character> searchSet) {\n+        for (char c : Character.toChars(codePoint)) {\n+            if (searchSet.contains(Character.valueOf(c))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}