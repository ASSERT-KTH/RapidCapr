{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n == parent) {\n    return true;\n  }\n  if (n.getType() == Token.OBJECTLIT ||\n      n.getType() == Token.ARRAYLIT ||\n      n.getType() == Token.DYNAMIC_IMPORT ||\n      n.getType() == Token.REGEXP ||\n      n.getType() == Token.TEMPLATELIT_STRING) {\n    return false;\n  }\n  if (n.getType() == Token.FUNCTION) {\n    Node grandparent = parent != null ? parent.getParent() : null;\n    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n    boolean constructor = jsDoc != null && jsDoc.isConstructor();\n    boolean interfaceMethod = jsDoc != null && jsDoc.isInterface();\n    boolean hasOverride = jsDoc != null && jsDoc.isOverride();\n    boolean thisProp = jsDoc != null && jsDoc.hasThisType();\n    boolean isFunctionExpression =\n        (parent.getType() == Token.ASSIGN ||\n         parent.getType() == Token.VAR ||\n         parent.getType() == Token.LET ||\n         parent.getType() == Token.CONST ||\n         parent.getType() == Token.RETURN ||\n         parent.getType() == Token.HOOK ||\n         (parent.getType() == Token.NAME && grandparent != null &&\n          (grandparent.getType() == Token.LET ||\n           grandparent.getType() == Token.CONST)) ||\n         parent.getType() == Token.PARAM_LIST ||\n         (parent.getType() == Token.NEW && parent.getFirstChild() == n) ||\n         (parent.getType() == Token.CALL && parent.getFirstChild() == n));\n\n    if (constructor || interfaceMethod || hasOverride || thisProp) {\n      return false;\n    } else if (!isFunctionExpression &&\n               (parent.getType() != Token.EXPORT ||\n                !parent.getBooleanProp(Node.EXPORT_DEFAULT))) {\n      // We don't care about anonymous function expressions that are root\n      // expressions of exports, because they won't be assigned to variables\n      // that can be referenced elsewhere.\n      String fnName = NodeUtil.getNearestFunctionName(n);\n      if (fnName == null &&\n          NodeUtil.isExpressionNode(parent)) {\n        return false;\n      } else if (fnName != null) {\n        // Always traverse named functions that can be referenced by other code.\n        return true;\n      }\n    }\n    // Don't traverse functions unless they would normally be able to have a\n    // @this annotation associated with them.\n    // e.g.,\n    // var a = function() { };\n    // function a() {}\n    // a.x = function() {};\n    // var a = {x: function() {}};\n    Node firstNonFnParent = NodeUtil.getNonBlockTopParent(n.getParent());\n    if (firstNonFnParent != null &&\n        !mayHaveThis(firstNonFnParent)) {\n      return false;\n    }\n\n    // Don't traverse functions that are getting lent to a prototype.\n    // i.e. \"Foo.prototype.bar = function() {}/Foo.prototype['bar'] = function() {}\".\n    if (parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild().getType() == Token.GETPROP) {\n      Node lhs = parent.getFirstChild();\n      if (lhs.getLastChild().getString().equals(\"prototype\")) {\n        if (NodeUtil.isGet(lhs) ||\n            (lhs.getType() == Token.STRING_KEY &&\n             lhs.getParent().getType() == Token.OBJECT_PATTERN &&\n             parent.getParent().getType() == Token.FOR_OF)) {\n          return false;\n        }\n      }\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly (e.g., (a = this).property = c;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty.\n      if (lhs.isGetProp()) {\n        Node obj = lhs.getFirstChild();\n        if (obj.isGetProp()) {\n          obj = obj.getLastChild();\n        }\n        if (obj.getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\nprivate static boolean mayHaveThis(Node n) {\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      boolean constructor = jsDoc != null && jsDoc.isConstructor();\n      boolean interfaceMethod = jsDoc != null && jsDoc.isInterface();\n      boolean hasOverride = jsDoc != null && jsDoc.isOverride();\n      boolean thisProp = jsDoc != null && jsDoc.hasThisType();\n      return !constructor && !interfaceMethod && !hasOverride && !thisProp;\n    case Token.MEMBER_DEF:\n    case Token.COMPUTED_PROP:\n      return mayHaveThis(n.getParent());\n    case Token.NAME:\n    case Token.GETPROP:\n    case Token.OBJECTLIT:\n      return true;\n    default:\n      return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..77e262e2 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,71 +79,133 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  if (n == parent) {\n+    return true;\n+  }\n+  if (n.getType() == Token.OBJECTLIT ||\n+      n.getType() == Token.ARRAYLIT ||\n+      n.getType() == Token.DYNAMIC_IMPORT ||\n+      n.getType() == Token.REGEXP ||\n+      n.getType() == Token.TEMPLATELIT_STRING) {\n+    return false;\n+  }\n+  if (n.getType() == Token.FUNCTION) {\n+    Node grandparent = parent != null ? parent.getParent() : null;\n+    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+    boolean constructor = jsDoc != null && jsDoc.isConstructor();\n+    boolean interfaceMethod = jsDoc != null && jsDoc.isInterface();\n+    boolean hasOverride = jsDoc != null && jsDoc.isOverride();\n+    boolean thisProp = jsDoc != null && jsDoc.hasThisType();\n+    boolean isFunctionExpression =\n+        (parent.getType() == Token.ASSIGN ||\n+         parent.getType() == Token.VAR ||\n+         parent.getType() == Token.LET ||\n+         parent.getType() == Token.CONST ||\n+         parent.getType() == Token.RETURN ||\n+         parent.getType() == Token.HOOK ||\n+         (parent.getType() == Token.NAME && grandparent != null &&\n+          (grandparent.getType() == Token.LET ||\n+           grandparent.getType() == Token.CONST)) ||\n+         parent.getType() == Token.PARAM_LIST ||\n+         (parent.getType() == Token.NEW && parent.getFirstChild() == n) ||\n+         (parent.getType() == Token.CALL && parent.getFirstChild() == n));\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+    if (constructor || interfaceMethod || hasOverride || thisProp) {\n+      return false;\n+    } else if (!isFunctionExpression &&\n+               (parent.getType() != Token.EXPORT ||\n+                !parent.getBooleanProp(Node.EXPORT_DEFAULT))) {\n+      // We don't care about anonymous function expressions that are root\n+      // expressions of exports, because they won't be assigned to variables\n+      // that can be referenced elsewhere.\n+      String fnName = NodeUtil.getNearestFunctionName(n);\n+      if (fnName == null &&\n+          NodeUtil.isExpressionNode(parent)) {\n         return false;\n+      } else if (fnName != null) {\n+        // Always traverse named functions that can be referenced by other code.\n+        return true;\n       }\n-\n-      // Don't traverse functions that are getting lent to a prototype.\n+    }\n+    // Don't traverse functions unless they would normally be able to have a\n+    // @this annotation associated with them.\n+    // e.g.,\n+    // var a = function() { };\n+    // function a() {}\n+    // a.x = function() {};\n+    // var a = {x: function() {}};\n+    Node firstNonFnParent = NodeUtil.getNonBlockTopParent(n.getParent());\n+    if (firstNonFnParent != null &&\n+        !mayHaveThis(firstNonFnParent)) {\n+      return false;\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n+    // Don't traverse functions that are getting lent to a prototype.\n+    // i.e. \"Foo.prototype.bar = function() {}/Foo.prototype['bar'] = function() {}\".\n+    if (parent.getType() == Token.ASSIGN &&\n+        parent.getFirstChild().getType() == Token.GETPROP) {\n       Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+      if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+        if (NodeUtil.isGet(lhs) ||\n+            (lhs.getType() == Token.STRING_KEY &&\n+             lhs.getParent().getType() == Token.OBJECT_PATTERN &&\n+             parent.getParent().getType() == Token.FOR_OF)) {\n+          return false;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n+      }\n+    }\n+  }\n+\n+  if (parent != null && parent.getType() == Token.ASSIGN) {\n+    Node lhs = parent.getFirstChild();\n+    Node rhs = lhs.getNext();\n+\n+    if (n == lhs) {\n+      // Always traverse the left side of the assignment. To handle\n+      // nested assignments properly (e.g., (a = this).property = c;),\n+      // assignLhsChild should not be overridden.\n+      if (assignLhsChild == null) {\n+        assignLhsChild = lhs;\n+      }\n+    } else {\n+      // Only traverse the right side if it's not an assignment to a prototype\n+      // property or subproperty.\n+      if (lhs.isGetProp()) {\n+        Node obj = lhs.getFirstChild();\n+        if (obj.isGetProp()) {\n+          obj = obj.getLastChild();\n+        }\n+        if (obj.getString().equals(\"prototype\")) {\n+          return false;\n         }\n       }\n     }\n+  }\n \n-    return true;\n+  return true;\n+}\n+\n+private static boolean mayHaveThis(Node n) {\n+  switch (n.getType()) {\n+    case Token.FUNCTION:\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+      boolean constructor = jsDoc != null && jsDoc.isConstructor();\n+      boolean interfaceMethod = jsDoc != null && jsDoc.isInterface();\n+      boolean hasOverride = jsDoc != null && jsDoc.isOverride();\n+      boolean thisProp = jsDoc != null && jsDoc.hasThisType();\n+      return !constructor && !interfaceMethod && !hasOverride && !thisProp;\n+    case Token.MEMBER_DEF:\n+    case Token.COMPUTED_PROP:\n+      return mayHaveThis(n.getParent());\n+    case Token.NAME:\n+    case Token.GETPROP:\n+    case Token.OBJECTLIT:\n+      return true;\n+    default:\n+      return false;\n   }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}