{
    "patch": "          Node parent = declaration.getParent().getParent();\n          if (NodeUtil.isPrototypeProperty(parent)) {\n            return false;\n          }\n\n          // Avoid inlining if the function may have nested functions\n          if (NodeUtil.isFunctionDeclaration(value)) {\n            return false;\n          }\n\n          // Verify that all references to the function inside the inlining\n          // scope would be properly substituted with the initialization value.\n          if (new FindIjsMatchingReferences(\n                  compiler, value, initialization.getNode(), reference.getNode())\n              .find() != null) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..7d57ccd9 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,21 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+          Node parent = declaration.getParent().getParent();\n+          if (NodeUtil.isPrototypeProperty(parent)) {\n+            return false;\n+          }\n+\n+          // Avoid inlining if the function may have nested functions\n+          if (NodeUtil.isFunctionDeclaration(value)) {\n+            return false;\n+          }\n+\n+          // Verify that all references to the function inside the inlining\n+          // scope would be properly substituted with the initialization value.\n+          if (new FindIjsMatchingReferences(\n+                  compiler, value, initialization.getNode(), reference.getNode())\n+              .find() != null) {\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}