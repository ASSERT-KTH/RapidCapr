{
    "patch": "            try {\n                for (int i = 0; i < count; i++) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n            if (count > 0) {\n                if (resetFields) {\n                    // Only re-sort if we have modified the state of the parsing.\n                    // Otherwise we might encounter repeats, see testParseWacky().\n                    sort(savedFields, count);\n                }\n                computeMillisOfYearForFields(millis, resetFields);\n                int year = iFields.year().get(millis);\n                computeMillisOfTwoDigitYear(year);\n                computeMillisOfDayForFields(millis);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..3c5b27d9 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,26 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            try {\n+                for (int i = 0; i < count; i++) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n+            if (count > 0) {\n+                if (resetFields) {\n+                    // Only re-sort if we have modified the state of the parsing.\n+                    // Otherwise we might encounter repeats, see testParseWacky().\n+                    sort(savedFields, count);\n+                }\n+                computeMillisOfYearForFields(millis, resetFields);\n+                int year = iFields.year().get(millis);\n+                computeMillisOfTwoDigitYear(year);\n+                computeMillisOfDayForFields(millis);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}