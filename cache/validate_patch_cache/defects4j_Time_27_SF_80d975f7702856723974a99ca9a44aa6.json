{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n    for (int i = 0; i < size; i++) {\n        Object element = elementPairs.get(i);\n        if (element instanceof Separator) {\n            Separator sep = (Separator) element;\n            PeriodFormatter f = toFormatter(elementPairs.subList(i + 1, size), notPrinter, notParser);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            if (printer != null || parser != null) {\n                throw new IllegalStateException(\"Multiple separators added to builder\");\n            }\n            printer = sep;\n            parser = sep;\n            break;\n        } else {\n            Object[] comp = (Object[]) element;\n            PeriodPrinter newPrinter = (PeriodPrinter) comp[0];\n            PeriodParser newParser = (PeriodParser) comp[1];\n            if (notPrinter) {\n                if (parser != null) {\n                    throw new IllegalStateException(\"Printer added to builder after parser\");\n                }\n                parser = newParser;\n            } else if (notParser) {\n                if (printer != null) {\n                    throw new IllegalStateException(\"Parser added to builder after printer\");\n                }\n                printer = newPrinter;\n            } else {\n                printer = printer == null ? newPrinter : printer.withPrinter(newPrinter);\n                parser = parser == null ? newParser : parser.withParser(newParser);\n            }\n        }\n    }\n    if (printer == null && parser == null) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..a33e3eb0 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,50 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+    for (int i = 0; i < size; i++) {\n+        Object element = elementPairs.get(i);\n+        if (element instanceof Separator) {\n+            Separator sep = (Separator) element;\n+            PeriodFormatter f = toFormatter(elementPairs.subList(i + 1, size), notPrinter, notParser);\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+            if (printer != null || parser != null) {\n+                throw new IllegalStateException(\"Multiple separators added to builder\");\n+            }\n+            printer = sep;\n+            parser = sep;\n+            break;\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            Object[] comp = (Object[]) element;\n+            PeriodPrinter newPrinter = (PeriodPrinter) comp[0];\n+            PeriodParser newParser = (PeriodParser) comp[1];\n+            if (notPrinter) {\n+                if (parser != null) {\n+                    throw new IllegalStateException(\"Printer added to builder after parser\");\n+                }\n+                parser = newParser;\n+            } else if (notParser) {\n+                if (printer != null) {\n+                    throw new IllegalStateException(\"Parser added to builder after printer\");\n+                }\n+                printer = newPrinter;\n+            } else {\n+                printer = printer == null ? newPrinter : printer.withPrinter(newPrinter);\n+                parser = parser == null ? newParser : parser.withParser(newParser);\n+            }\n         }\n     }\n+    if (printer == null && parser == null) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    return new PeriodFormatter(printer, parser);\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}