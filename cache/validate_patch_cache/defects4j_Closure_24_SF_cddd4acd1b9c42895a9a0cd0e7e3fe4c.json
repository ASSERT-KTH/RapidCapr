{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope globalScope = t.getScope();\n  for (Var v : t.getScope().getVarIterable()) {\n    Node n = v.getNode();\n    if (n == null) {\n      continue;\n    }\n    Node parent = n.getParent();\n    if (!parent.isVar()) {\n      // Private variable that should not be aliased.\n      if (parent.isFunction() && NodeUtil.isFunctionDeclaration(parent)) {\n        // Function declarations already get a BAD_PARAMETERS error, so just do\n        // nothing.\n      } else {\n        report(t, parent.getFirstChild(), GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      }\n      continue;\n    }\n    Node initializer = n.getFirstChild();\n    if (initializer != null && initializer.isCall()\n        && initializer.getFirstChild().matchesQualifiedName(\"goog.bind\")\n        && initializer.getChildCount() == 3\n        && initializer.getFirstChild().getNext().isQualifiedName()) {\n      // Skip goog.bind aliases (i.e. the goog.bind result variable itself)\n      continue;\n    }\n    if (!initializer.isQualifiedName()) {\n      // Non-alias.\n      continue;\n    }\n    String qualifiedName = initializer.getQualifiedName();\n    Var aliasVar = globalScope.getVar(qualifiedName);\n    if (aliasVar == null) {\n      continue;\n    }\n    aliases.put(n.getString(), aliasVar);\n    transformation.addAlias(n.getString(), qualifiedName);\n\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..6c413799 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,46 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope globalScope = t.getScope();\n+  for (Var v : t.getScope().getVarIterable()) {\n+    Node n = v.getNode();\n+    if (n == null) {\n+      continue;\n+    }\n+    Node parent = n.getParent();\n+    if (!parent.isVar()) {\n+      // Private variable that should not be aliased.\n+      if (parent.isFunction() && NodeUtil.isFunctionDeclaration(parent)) {\n+        // Function declarations already get a BAD_PARAMETERS error, so just do\n+        // nothing.\n+      } else {\n+        report(t, parent.getFirstChild(), GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n       }\n+      continue;\n+    }\n+    Node initializer = n.getFirstChild();\n+    if (initializer != null && initializer.isCall()\n+        && initializer.getFirstChild().matchesQualifiedName(\"goog.bind\")\n+        && initializer.getChildCount() == 3\n+        && initializer.getFirstChild().getNext().isQualifiedName()) {\n+      // Skip goog.bind aliases (i.e. the goog.bind result variable itself)\n+      continue;\n     }\n+    if (!initializer.isQualifiedName()) {\n+      // Non-alias.\n+      continue;\n+    }\n+    String qualifiedName = initializer.getQualifiedName();\n+    Var aliasVar = globalScope.getVar(qualifiedName);\n+    if (aliasVar == null) {\n+      continue;\n+    }\n+    aliases.put(n.getString(), aliasVar);\n+    transformation.addAlias(n.getString(), qualifiedName);\n+\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}