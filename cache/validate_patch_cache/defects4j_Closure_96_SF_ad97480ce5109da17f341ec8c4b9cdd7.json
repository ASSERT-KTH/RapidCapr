{
    "patch": "    boolean varArgs = false;  // added varArgs flag\n\n    while (parameters.hasNext()) {\n      parameter = parameters.next();\n      if (!arguments.hasNext()) {\n        if (parameter.isVarArgs()) { // If the last parameter is varArgs, skip the rest\n          varArgs = true;\n          break;\n        }\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n            functionType.getMaxArguments() != Integer.MAX_VALUE ?\n            \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n        return;\n      }\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    // If there are more arguments than parameters, and the last parameter is not varArgs, report the error\n    if (!varArgs && arguments.hasNext()) { \n      int numArgs = call.getChildCount() - 1;\n      int minArgs = functionType.getMinArguments();\n      int maxArgs = functionType.getMaxArguments();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..eae7ecd1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,20 +1396,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+    boolean varArgs = false;  // added varArgs flag\n+\n+    while (parameters.hasNext()) {\n+      parameter = parameters.next();\n+      if (!arguments.hasNext()) {\n+        if (parameter.isVarArgs()) { // If the last parameter is varArgs, skip the rest\n+          varArgs = true;\n+          break;\n+        }\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n+            functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+            \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n+        return;\n+      }\n       argument = arguments.next();\n       ordinal++;\n \n@@ -1417,17 +1419,11 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n           getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n-  }\n+    // If there are more arguments than parameters, and the last parameter is not varArgs, report the error\n+    if (!varArgs && arguments.hasNext()) { \n+      int numArgs = call.getChildCount() - 1;\n+      int minArgs = functionType.getMinArguments();\n+      int maxArgs = functionType.getMaxArguments();\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}