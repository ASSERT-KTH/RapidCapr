{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n\n    int oldWeeks = getWeeks();\n    int oldMonths = getMonths();\n    int oldYears = getYears();\n    \n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    int newWeeks = result.getWeeks();\n    if (newWeeks != oldWeeks) {\n        Period weekPeriod = new Period().withWeeks(newWeeks - oldWeeks);\n        result = result.minus(weekPeriod).plus(weekPeriod.normalizedStandard(type));\n    }\n\n    int newMonths = result.getMonths();\n    if (newMonths != oldMonths) {\n        Period monthPeriod = new Period().withMonths(newMonths - oldMonths);\n        result = result.minus(monthPeriod).plus(monthPeriod.normalizedStandard(type));\n    }\n\n    int newYears = result.getYears();\n    if (newYears != oldYears) {\n        Period yearPeriod = new Period().withYears(newYears - oldYears);\n        result = result.minus(yearPeriod).plus(yearPeriod.normalizedStandard(type));\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..dc625617 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,39 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+\n+    int oldWeeks = getWeeks();\n+    int oldMonths = getMonths();\n+    int oldYears = getYears();\n+    \n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+\n+    int newWeeks = result.getWeeks();\n+    if (newWeeks != oldWeeks) {\n+        Period weekPeriod = new Period().withWeeks(newWeeks - oldWeeks);\n+        result = result.minus(weekPeriod).plus(weekPeriod.normalizedStandard(type));\n+    }\n+\n+    int newMonths = result.getMonths();\n+    if (newMonths != oldMonths) {\n+        Period monthPeriod = new Period().withMonths(newMonths - oldMonths);\n+        result = result.minus(monthPeriod).plus(monthPeriod.normalizedStandard(type));\n     }\n \n+    int newYears = result.getYears();\n+    if (newYears != oldYears) {\n+        Period yearPeriod = new Period().withYears(newYears - oldYears);\n+        result = result.minus(yearPeriod).plus(yearPeriod.normalizedStandard(type));\n+    }\n+\n+    return result;\n+}\n+\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P2W5D> but was:<P1W5D>",
    "test_result": "FAIL"
}