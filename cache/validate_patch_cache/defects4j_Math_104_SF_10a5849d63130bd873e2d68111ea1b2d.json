{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double gamser, gammcf, gln;\n\n    if (x < 0.0 || a <= 0.0) {\n        return Double.NaN;\n    }\n\n    if (x < a + 1.0) {\n        // Series representation.\n        gln = Gamma.logGamma(a);\n        gamser = Gamma.gamSer(a, x);\n        return gamser * Math.exp(gln) / a;\n    } else {\n        // Continued fraction representation.\n        gln = Gamma.logGamma(a);\n        gammcf = Gamma.gamCf(a, x);\n        return 1.0 - gammcf * Math.exp(gln) / a;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..287051b41 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,25 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double gamser, gammcf, gln;\n+\n+    if (x < 0.0 || a <= 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x < a + 1.0) {\n+        // Series representation.\n+        gln = Gamma.logGamma(a);\n+        gamser = Gamma.gamSer(a, x);\n+        return gamser * Math.exp(gln) / a;\n+    } else {\n+        // Continued fraction representation.\n+        gln = Gamma.logGamma(a);\n+        gammcf = Gamma.gamCf(a, x);\n+        return 1.0 - gammcf * Math.exp(gln) / a;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}