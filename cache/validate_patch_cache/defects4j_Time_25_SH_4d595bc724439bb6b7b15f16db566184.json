{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n                // shift the instant to be at least at nextTransition,\n                // or at 1ms before DST ends in case next is zero\n                try {\n                    int offsetNext = getOffset(nextLocal);\n                    if (offsetAdjusted < offsetNext) {\n                        nextLocal = convertByMillis(nextLocal, offsetAdjusted, offsetNext);\n                    }\n                    return getOffset(nextLocal);\n                } catch (ArithmeticException ex) {\n                    return offsetLocal;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..cf329950 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                // shift the instant to be at least at nextTransition,\n+                // or at 1ms before DST ends in case next is zero\n+                try {\n+                    int offsetNext = getOffset(nextLocal);\n+                    if (offsetAdjusted < offsetNext) {\n+                        nextLocal = convertByMillis(nextLocal, offsetAdjusted, offsetNext);\n+                    }\n+                    return getOffset(nextLocal);\n+                } catch (ArithmeticException ex) {\n+                    return offsetLocal;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}