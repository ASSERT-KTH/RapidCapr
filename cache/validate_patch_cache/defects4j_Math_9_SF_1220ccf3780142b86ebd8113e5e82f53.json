{
    "patch": "import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\n\npublic class Line {\n    private Vector3D zero;\n    private Vector3D direction;\n    \n    public Line(Vector3D zero, Vector3D direction) {\n        this.zero = zero;\n        this.direction = direction;\n    }\n\n    public Line revert() {\n        final Line reverted = new Line(zero, zero.subtract(direction.normalize()));\n        return reverted;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..41192ab0d 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,22 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n+import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\n+\n+public class Line {\n+    private Vector3D zero;\n+    private Vector3D direction;\n+    \n+    public Line(Vector3D zero, Vector3D direction) {\n+        this.zero = zero;\n+        this.direction = direction;\n+    }\n+\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n+        final Line reverted = new Line(zero, zero.subtract(direction.normalize()));\n         return reverted;\n     }\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}