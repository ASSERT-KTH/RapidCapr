{
    "patch": "                // additional check for DST overlap\n                long nextLocalWall = nextTransition(nextLocal + DateTimeConstants.MILLIS_PER_HOUR);\n                if (nextLocalWall == nextLocal) {\n                    // fall back to standard time\n                    return offsetLocal;\n                }\n                long nextAdjustedWall = nextTransition(nextAdjusted + DateTimeConstants.MILLIS_PER_HOUR);\n                if (nextAdjustedWall == nextAdjusted) {\n                    // fall forward to DST time\n                    return offsetLocal + 1;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5a83e7d1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,16 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // additional check for DST overlap\n+                long nextLocalWall = nextTransition(nextLocal + DateTimeConstants.MILLIS_PER_HOUR);\n+                if (nextLocalWall == nextLocal) {\n+                    // fall back to standard time\n+                    return offsetLocal;\n+                }\n+                long nextAdjustedWall = nextTransition(nextAdjusted + DateTimeConstants.MILLIS_PER_HOUR);\n+                if (nextAdjustedWall == nextAdjusted) {\n+                    // fall forward to DST time\n+                    return offsetLocal + 1;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}