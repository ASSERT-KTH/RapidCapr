{
    "patch": "    if (options.checkGlobalThisLevel != CheckLevel.OFF) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    } else {\n      // Ensure that when \"global this\" checking is off,\n      // it doesn't disable warnings that are enabled globally.\n      CheckLevel globalLevel = options.getWarningLevel(DiagnosticGroups.GLOBAL_THIS);\n      if (globalLevel.isOn()) {\n        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..4e7768e5 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,17 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+    if (options.checkGlobalThisLevel != CheckLevel.OFF) {\n+      options.setWarningLevel(\n+          DiagnosticGroups.GLOBAL_THIS,\n+          options.checkGlobalThisLevel);\n+    } else {\n+      // Ensure that when \"global this\" checking is off,\n+      // it doesn't disable warnings that are enabled globally.\n+      CheckLevel globalLevel = options.getWarningLevel(DiagnosticGroups.GLOBAL_THIS);\n+      if (globalLevel.isOn()) {\n+        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);\n+      }\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}