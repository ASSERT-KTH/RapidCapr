{
    "patch": "    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(rhs);\n        double newReal, newImaginary;\n        try {\n            newReal = Math.addExact(real, rhs.getReal());\n            newImaginary = Math.addExact(imaginary, rhs.getImaginary());\n        } catch (ArithmeticException ae) {\n            return createComplex(Double.NaN, Double.NaN);\n        }\n        return createComplex(newReal, newImaginary);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..830ac901f 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -150,8 +150,14 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n+        double newReal, newImaginary;\n+        try {\n+            newReal = Math.addExact(real, rhs.getReal());\n+            newImaginary = Math.addExact(imaginary, rhs.getImaginary());\n+        } catch (ArithmeticException ae) {\n+            return createComplex(Double.NaN, Double.NaN);\n+        }\n+        return createComplex(newReal, newImaginary);\n     }\n \n     /**",
    "result_reason": "error: no suitable method found for addExact(double,double)",
    "test_result": "ERROR"
}