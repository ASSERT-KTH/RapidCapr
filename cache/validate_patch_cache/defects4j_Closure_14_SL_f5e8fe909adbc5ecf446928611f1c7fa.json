{
    "patch": "if (cfa != null) {\n  // createEdge for all possible edges\n  for (Node finallyChild = finallyNode.getFirstChild(); finallyChild != null; finallyChild = finallyChild.getNext()) {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(finallyNode, finallyChild, cfa));\n  }\n  Node parent = finallyNode.getParent();\n  if (parent != null && parent.getType() == Token.TRY && parent.getLastChild() == finallyNode) {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, parent, cfa));\n  }\n}\nreturn computeFollowNode(fromNode, finallyNode, cfa);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..7040bffc 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,17 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  // createEdge for all possible edges\n+  for (Node finallyChild = finallyNode.getFirstChild(); finallyChild != null; finallyChild = finallyChild.getNext()) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(finallyNode, finallyChild, cfa));\n+  }\n+  Node parent = finallyNode.getParent();\n+  if (parent != null && parent.getType() == Token.TRY && parent.getLastChild() == finallyNode) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, parent, cfa));\n+  }\n+}\n+return computeFollowNode(fromNode, finallyNode, cfa);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: variable parent is already defined in method computeFollowNode(Node,Node,ControlFlowAnalysis)",
    "test_result": "ERROR"
}