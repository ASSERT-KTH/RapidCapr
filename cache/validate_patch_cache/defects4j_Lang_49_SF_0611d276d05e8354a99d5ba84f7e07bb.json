{
    "patch": "    public Fraction reduce() {\n        int gcd = gcd(numerator, denominator);\n        if (gcd == 0) {\n            return Fraction.ZERO;\n        }\n        return new Fraction(numerator / gcd, denominator / gcd);\n    }\n\n    private int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return gcd(b, a % b);\n        }\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..a49cd187 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,11 +463,19 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n+        int gcd = gcd(numerator, denominator);\n+        if (gcd == 0) {\n+            return Fraction.ZERO;\n+        }\n+        return new Fraction(numerator / gcd, denominator / gcd);\n+    }\n+\n+    private int gcd(int a, int b) {\n+        if (b == 0) {\n+            return a;\n+        } else {\n+            return gcd(b, a % b);\n         }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<-2/3> was not:<-2/3>",
    "test_result": "FAIL"
}