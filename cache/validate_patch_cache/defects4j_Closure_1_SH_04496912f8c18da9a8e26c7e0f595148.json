{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    int argCount = argList.getChildCount();\n    while (argCount > 0) {\n      Node lastArg = argList.getLastChild();\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        // Only remove unused arguments if there are two or more\n        // arguments. At least one argument must be passed to the function\n        // or the syntax will be off. Closure Compiler will parse the\n        // function incorrectly if it's declared with no arguments.\n        // See Github issue #2596.\n        if (argCount > 1) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n          argCount--; // Decrease argument count in the loop counter as well\n          continue; // Continue with the next iteration of the while loop\n        }\n        // We can only remove the argument if there are no call sites that\n        // pass something in for the argument. Otherwise, the call site would\n        // need to change to include the argument being removed.\n        if (modifyCallers && callSiteArgRemover.canRemoveArg(\n            var.getName(), function)) {\n          callSiteArgRemover.removeArg(var.getName(), function);\n        }\n      }\n      break; // No more unused elements\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8574000f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,43 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    int argCount = argList.getChildCount();\n+    while (argCount > 0) {\n+      Node lastArg = argList.getLastChild();\n+      Var var = fnScope.getVar(lastArg.getString());\n+      if (!referenced.contains(var)) {\n+        // Only remove unused arguments if there are two or more\n+        // arguments. At least one argument must be passed to the function\n+        // or the syntax will be off. Closure Compiler will parse the\n+        // function incorrectly if it's declared with no arguments.\n+        // See Github issue #2596.\n+        if (argCount > 1) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+          argCount--; // Decrease argument count in the loop counter as well\n+          continue; // Continue with the next iteration of the while loop\n+        }\n+        // We can only remove the argument if there are no call sites that\n+        // pass something in for the argument. Otherwise, the call site would\n+        // need to change to include the argument being removed.\n+        if (modifyCallers && callSiteArgRemover.canRemoveArg(\n+            var.getName(), function)) {\n+          callSiteArgRemover.removeArg(var.getName(), function);\n+        }\n+      }\n+      break; // No more unused elements\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}