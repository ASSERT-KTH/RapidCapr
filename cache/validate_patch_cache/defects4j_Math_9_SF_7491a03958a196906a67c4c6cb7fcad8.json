{
    "patch": "public Line revert() {\n    final Line reverted;\n    if (direction.getNormSq() > 0) {\n        final Vector revertedDirection = direction.negate();\n        reverted = new Line(zero.add(revertedDirection), zero.add(revertedDirection.subtract(direction)));\n    } else {\n        reverted = new Line(zero, direction);\n    }\n    return reverted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..f92d3a05a 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,16 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+    final Line reverted;\n+    if (direction.getNormSq() > 0) {\n+        final Vector revertedDirection = direction.negate();\n+        reverted = new Line(zero.add(revertedDirection), zero.add(revertedDirection.subtract(direction)));\n+    } else {\n+        reverted = new Line(zero, direction);\n+    }\n+    return reverted;\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "junit.framework.AssertionFailedError: arrays first differed at element [0]; expected:<0.028581782127907646> but was:<0.02858178201065304>",
    "test_result": "FAIL"
}