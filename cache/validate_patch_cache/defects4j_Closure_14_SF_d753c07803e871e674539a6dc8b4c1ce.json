{
    "patch": " private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowGraph<Node> cfg) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() ||\n        (cfg != null && node == cfg.getImplicitReturn())) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getToken()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case IF:\n        return computeFollowNode(fromNode, parent, cfg);\n      case CASE:\n      case DEFAULT_CASE:\n        // After the body of a CASE, the control goes to the body of the next\n        // case, without having to go to the case condition.\n        if (parent.getNext() != null) {\n          if (parent.getNext().isCase()) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().isDefaultCase()) {\n            return parent.getNext().getFirstChild();\n          } else {\n            throw new IllegalStateException(\"Not reachable\");\n          }\n        } else {\n          return computeFollowNode(fromNode, parent, cfg);\n        }\n      case FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent.getNext().getFirstChild();\n        } else {\n          return parent.getLastChild();\n        }\n      case WHILE:\n      case DO:\n        return parent.getFirstChild();\n      case TRY:\n        // If we are coming out of the TRY block...\n        if (parent.getFirstChild() == node) {\n          if (NodeUtil.hasFinallyBlock(parent)) { // and have FINALLY block.\n            Node f = NodeUtil.getFinallyBlock(parent);\n            return computeFollowNode(f.getFirstChild(), f, cfg);\n          } else { // and have no FINALLY.\n            return computeFollowNode(fromNode, parent, cfg);\n          }\n        // CATCH block.\n        } else if (NodeUtil.getCatchBlock(parent) == node){\n          if (NodeUtil.hasFinallyBlock(parent)) { // and have FINALLY block.\n            Node f = NodeUtil.getFinallyBlock(parent);\n            return computeFollowNode(f.getFirstChild(), f, cfg);\n          } else {\n            return computeFollowNode(fromNode, parent, cfg);\n          }\n        // If we are coming out of the FINALLY block...\n        } else if (parent.getLastChild() == node){\n          if (cfg != null) {\n            for (ImplicitReturnEdge returnEdge : cfg.getImplicitReturnEdges(\n                node)) {\n              cfg.connect(fromNode, returnEdge);\n            }\n          }\n          return computeFollowNode(fromNode, parent, cfg);\n        }\n    }\n\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't get pass into it.\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      return nextSibling;\n    } else {\n      // If there are no more siblings, control is transferred up the AST.\n      return computeFollowNode(fromNode, parent, cfg);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..ef2fa357 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -689,8 +689,8 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n    *        during recursion.\n    * @param node The node that follow() should compute.\n    */\n-  private static Node computeFollowNode(\n-      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n+ private static Node computeFollowNode(\n+      Node fromNode, Node node, ControlFlowGraph<Node> cfg) {\n     /*\n      * This is the case where:\n      *\n@@ -711,17 +711,17 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n      */\n     Node parent = node.getParent();\n     if (parent == null || parent.isFunction() ||\n-        (cfa != null && node == cfa.root)) {\n+        (cfg != null && node == cfg.getImplicitReturn())) {\n       return null;\n     }\n \n     // If we are just before a IF/WHILE/DO/FOR:\n-    switch (parent.getType()) {\n+    switch (parent.getToken()) {\n       // The follow() of any of the path from IF would be what follows IF.\n-      case Token.IF:\n-        return computeFollowNode(fromNode, parent, cfa);\n-      case Token.CASE:\n-      case Token.DEFAULT_CASE:\n+      case IF:\n+        return computeFollowNode(fromNode, parent, cfg);\n+      case CASE:\n+      case DEFAULT_CASE:\n         // After the body of a CASE, the control goes to the body of the next\n         // case, without having to go to the case condition.\n         if (parent.getNext() != null) {\n@@ -730,44 +730,46 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n           } else if (parent.getNext().isDefaultCase()) {\n             return parent.getNext().getFirstChild();\n           } else {\n-            Preconditions.checkState(false, \"Not reachable\");\n+            throw new IllegalStateException(\"Not reachable\");\n           }\n         } else {\n-          return computeFollowNode(fromNode, parent, cfa);\n+          return computeFollowNode(fromNode, parent, cfg);\n         }\n-        break;\n-      case Token.FOR:\n+      case FOR:\n         if (NodeUtil.isForIn(parent)) {\n-          return parent;\n+          return parent.getNext().getFirstChild();\n         } else {\n-          return parent.getFirstChild().getNext().getNext();\n+          return parent.getLastChild();\n         }\n-      case Token.WHILE:\n-      case Token.DO:\n-        return parent;\n-      case Token.TRY:\n+      case WHILE:\n+      case DO:\n+        return parent.getFirstChild();\n+      case TRY:\n         // If we are coming out of the TRY block...\n         if (parent.getFirstChild() == node) {\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(parent.getLastChild());\n+          if (NodeUtil.hasFinallyBlock(parent)) { // and have FINALLY block.\n+            Node f = NodeUtil.getFinallyBlock(parent);\n+            return computeFollowNode(f.getFirstChild(), f, cfg);\n           } else { // and have no FINALLY.\n-            return computeFollowNode(fromNode, parent, cfa);\n+            return computeFollowNode(fromNode, parent, cfg);\n           }\n         // CATCH block.\n         } else if (NodeUtil.getCatchBlock(parent) == node){\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(node.getNext());\n+          if (NodeUtil.hasFinallyBlock(parent)) { // and have FINALLY block.\n+            Node f = NodeUtil.getFinallyBlock(parent);\n+            return computeFollowNode(f.getFirstChild(), f, cfg);\n           } else {\n-            return computeFollowNode(fromNode, parent, cfa);\n+            return computeFollowNode(fromNode, parent, cfg);\n           }\n         // If we are coming out of the FINALLY block...\n         } else if (parent.getLastChild() == node){\n-          if (cfa != null) {\n-            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+          if (cfg != null) {\n+            for (ImplicitReturnEdge returnEdge : cfg.getImplicitReturnEdges(\n+                node)) {\n+              cfg.connect(fromNode, returnEdge);\n             }\n           }\n-          return computeFollowNode(fromNode, parent, cfa);\n+          return computeFollowNode(fromNode, parent, cfg);\n         }\n     }\n \n@@ -781,12 +783,10 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n     }\n \n     if (nextSibling != null) {\n-      return computeFallThrough(nextSibling);\n+      return nextSibling;\n     } else {\n       // If there are no more siblings, control is transferred up the AST.\n-      return computeFollowNode(fromNode, parent, cfa);\n-    }\n-  }\n+      return computeFollowNode(fromNode, parent, cfg);\n \n   /**\n    * Computes the destination node of n when we want to fallthrough into the",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}