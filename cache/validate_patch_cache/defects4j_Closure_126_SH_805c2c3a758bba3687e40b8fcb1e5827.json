{
    "patch": "  /**\n   * Get the next node of n\n   *\n   * @param n The node to get the next node of.\n   */\n  private Node getNextNode(Node n) {\n    Node parent = n.getParent();\n    if (parent == null) {\n      return null;\n    }\n    Node nextNode = n.getNext();\n    if (nextNode == null) {\n      return getNextNode(parent);\n    }\n    return nextNode;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..48b9eed0 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,22 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n+  /**\n+   * Get the next node of n\n+   *\n+   * @param n The node to get the next node of.\n+   */\n+  private Node getNextNode(Node n) {\n+    Node parent = n.getParent();\n+    if (parent == null) {\n+      return null;\n+    }\n+    Node nextNode = n.getNext();\n+    if (nextNode == null) {\n+      return getNextNode(parent);\n+    }\n+    return nextNode;\n+  }\n     }\n \n     // Just a 'label'.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}