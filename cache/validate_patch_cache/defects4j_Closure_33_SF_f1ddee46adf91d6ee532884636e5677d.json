{
    "patch": "if (!constraintObj.isNamedType()) {\n  // We only want to match contraints on anonymous types provided they are not\n  // function types or constructors.\n  if (!constraintObj.isFunctionType() && !constraintObj.isConstructor()) {\n    ObjectType objType = ObjectType.cast(constraintObj);\n    if (objType != null && objType.getReferenceName() == null && objType.getOwnPropertyNames() != null\n        && objType.isRecordType()) {\n      // Handle the case where the constraint object is a record type.\n      //\n      // param constraintObj {{prop: (number|undefined)}}\n      // function f(constraintObj) {}\n      // f({});\n      //\n      // We want to modify the object literal to match the constraint, by\n      // taking any each property on the record and trying to match\n      // properties on this object.\n      for (String prop : objType.getOwnPropertyNames()) {\n        JSType propType = objType.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..1c2723c9 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,21 +552,24 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n+if (!constraintObj.isNamedType()) {\n+  // We only want to match contraints on anonymous types provided they are not\n+  // function types or constructors.\n+  if (!constraintObj.isFunctionType() && !constraintObj.isConstructor()) {\n+    ObjectType objType = ObjectType.cast(constraintObj);\n+    if (objType != null && objType.getReferenceName() == null && objType.getOwnPropertyNames() != null\n+        && objType.isRecordType()) {\n+      // Handle the case where the constraint object is a record type.\n+      //\n+      // param constraintObj {{prop: (number|undefined)}}\n+      // function f(constraintObj) {}\n+      // f({});\n+      //\n+      // We want to modify the object literal to match the constraint, by\n+      // taking any each property on the record and trying to match\n+      // properties on this object.\n+      for (String prop : objType.getOwnPropertyNames()) {\n+        JSType propType = objType.getPropertyType(prop);\n         if (!isPropertyTypeDeclared(prop)) {\n           JSType typeToInfer = propType;\n           if (!hasProperty(prop)) {\n@@ -579,3 +582,4 @@ class PrototypeObjectType extends ObjectType {\n     }\n   }\n }\n+}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}