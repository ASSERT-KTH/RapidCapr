{
    "patch": "\n        int year = bucket.getTwoDigitYear(defaultYear);\n        year = bucket.getYear() < 0 ? -year : year;\n        int month = bucket.getMonthOfYear();\n        int day = bucket.getDayOfMonth();\n        boolean isLeapYear = chrono.year().isLeap(year);\n        if (day > 28 || (day > 29 && month == 2) || (day > 30 && ((month == 4) || (month == 6) || (month == 9) || (month == 11))) || (day > 31 && ((month == 1) || (month == 3) || (month == 5) || (month == 7) || (month == 8) || (month == 10) || (month == 12))) || (day == 29 && month == 2 && !isLeapYear)) {\n            throw new IllegalArgumentException(\"Invalid date ' \" + text + \"'\");",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..3dc4be62 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,14 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n-    }\n+\n+        int year = bucket.getTwoDigitYear(defaultYear);\n+        year = bucket.getYear() < 0 ? -year : year;\n+        int month = bucket.getMonthOfYear();\n+        int day = bucket.getDayOfMonth();\n+        boolean isLeapYear = chrono.year().isLeap(year);\n+        if (day > 28 || (day > 29 && month == 2) || (day > 30 && ((month == 4) || (month == 6) || (month == 9) || (month == 11))) || (day > 31 && ((month == 1) || (month == 3) || (month == 5) || (month == 7) || (month == 8) || (month == 10) || (month == 12))) || (day == 29 && month == 2 && !isLeapYear)) {\n+            throw new IllegalArgumentException(\"Invalid date ' \" + text + \"'\");\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}