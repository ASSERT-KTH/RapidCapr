{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    final int MAX_ITER = 100;\n    final double EPSILON = 10e-15;\n\n    if (a <= 0.0) {\n        throw new IllegalArgumentException(\"a must be > 0 but was \" + a);\n    }\n\n    if (x < 0.0) {\n        throw new IllegalArgumentException(\"x must be >= 0 but was \" + x);\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    double d = 1 / (a + Math.exp(1.0) - 1.0);\n    double sum = d;\n    for (int i = 1; i <= MAX_ITER; i++) {\n        d *= x / (a + i);\n        sum += d;\n        if (Math.abs(d) < Math.abs(sum) * EPSILON) {\n            return sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n        }\n    }\n    throw new RuntimeException(\"Maximum number of iterations exceeded.\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..d5829cd8a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,33 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    final int MAX_ITER = 100;\n+    final double EPSILON = 10e-15;\n+\n+    if (a <= 0.0) {\n+        throw new IllegalArgumentException(\"a must be > 0 but was \" + a);\n+    }\n+\n+    if (x < 0.0) {\n+        throw new IllegalArgumentException(\"x must be >= 0 but was \" + x);\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    double d = 1 / (a + Math.exp(1.0) - 1.0);\n+    double sum = d;\n+    for (int i = 1; i <= MAX_ITER; i++) {\n+        d *= x / (a + i);\n+        sum += d;\n+        if (Math.abs(d) < Math.abs(sum) * EPSILON) {\n+            return sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n+        }\n+    }\n+    throw new RuntimeException(\"Maximum number of iterations exceeded.\");\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}