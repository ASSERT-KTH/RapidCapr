{
    "patch": "      JSType thisType = functionType.getTypeOfThis();\n      if (thisType != null) {\n        Node parent = n.getParent();\n        if (parent != null && parent.isGetProp()) {\n          return;\n        }\n        parent = new Node(Token.GETPROP, parent, n);\n        parent.putProp(Node.SYNTHETIC_PROPERTY, \"added to replace non-getprop call\");\n        report(t, parent, FUNCTION_CALL_NON_GETPROP, childType.toString());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..a5730dd2 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSType thisType = functionType.getTypeOfThis();\n+      if (thisType != null) {\n+        Node parent = n.getParent();\n+        if (parent != null && parent.isGetProp()) {\n+          return;\n+        }\n+        parent = new Node(Token.GETPROP, parent, n);\n+        parent.putProp(Node.SYNTHETIC_PROPERTY, \"added to replace non-getprop call\");\n+        report(t, parent, FUNCTION_CALL_NON_GETPROP, childType.toString());\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}