{
    "patch": "public double chiSquare(double[] expected, long[] observed) {\n    if (expected.length != observed.length) {\n        throw new IllegalArgumentException(\"Expected and Observed arrays must have the same length\");\n    }\n    \n    double chiSquared = 0.0;\n    double df = 0.0;\n    \n    for (int i=0; i<expected.length; i++) {\n        if(expected[i]<0) {\n            throw new IllegalArgumentException(\"Expected counts must be non-negative\");\n        }\n        if(observed[i]<0) {\n            throw new IllegalArgumentException(\"Observed counts must be non-negative\");\n        }\n        double numerator = Math.abs(expected[i]-observed[i])-0.5;\n        double denominator = Math.sqrt(expected[i]);\n        chiSquared = chiSquared + numerator*numerator/denominator;\n        df++;\n    }\n    \n    if(df < 2) {\n        throw new IllegalArgumentException(\"Length of arrays must be greater than or equal to 2\");\n    }\n    \n    return Math.round(chiSquared * 100000.0) / 100000.0;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..44712e8aa 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,24 +61,33 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n-        }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n+public double chiSquare(double[] expected, long[] observed) {\n+    if (expected.length != observed.length) {\n+        throw new IllegalArgumentException(\"Expected and Observed arrays must have the same length\");\n+    }\n+    \n+    double chiSquared = 0.0;\n+    double df = 0.0;\n+    \n+    for (int i=0; i<expected.length; i++) {\n+        if(expected[i]<0) {\n+            throw new IllegalArgumentException(\"Expected counts must be non-negative\");\n         }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n-        for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n+        if(observed[i]<0) {\n+            throw new IllegalArgumentException(\"Observed counts must be non-negative\");\n         }\n-        return sumSq;\n+        double numerator = Math.abs(expected[i]-observed[i])-0.5;\n+        double denominator = Math.sqrt(expected[i]);\n+        chiSquared = chiSquared + numerator*numerator/denominator;\n+        df++;\n     }\n+    \n+    if(df < 2) {\n+        throw new IllegalArgumentException(\"Length of arrays must be greater than or equal to 2\");\n+    }\n+    \n+    return Math.round(chiSquared * 100000.0) / 100000.0;\n+}\n \n     /**\n      * {@inheritDoc}",
    "result_reason": "junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<1.548309291969764E10>",
    "test_result": "FAIL"
}