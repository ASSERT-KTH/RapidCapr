{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    StringBuilder builder = new StringBuilder();\n    boolean isFirstLine = true;\n\n    do {\n      String line = stream.getRemainingJSDocLine();\n      \n      if (line == null) {\n          break;\n      } \n      \n      int lineCharno = stream.getCharno();\n      int lineLength = line.length();\n\n      if (!isFirstLine) {\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n        }\n      isFirstLine = false;\n\n      boolean ignoreStar = false;\n      boolean lastTokenWasWhiteSpace = true;\n\n      for (int i = 0; i < lineLength; i++) {\n\n        char c = line.charAt(i);\n        boolean endOfLine = i == lineLength - 1;\n\n        switch (c) {\n          case ' ':\n          case '\\t':\n            if (!lastTokenWasWhiteSpace) {\n                builder.append(' ');\n                lastTokenWasWhiteSpace = true;\n            }\n            break;\n            \n          case '*':\n            if (!ignoreStar) {\n              ignoreStar = true;\n              break;\n            }\n\n          default:\n            if (lastTokenWasWhiteSpace) {\n                builder.append(c);\n                lastTokenWasWhiteSpace = false;\n            } else {\n                builder.append(c);\n            }\n\n        }\n        if (lastTokenWasWhiteSpace && !endOfLine) {\n            if (option != WhitespaceOption.SINGLE_LINE) {\n              builder.append(\"\\n\");\n            }\n        }\n        \n        if (endOfLine) {\n            ignoreStar = false;\n        }\n      }\n\n      boolean lastTokenWhiteSpace = true;\n      for (int i = line.length() - 1; i >= 0; i--) {\n          \n        char c = line.charAt(i);\n        boolean beginningOfLine = i == 0;\n\n        if (!Character.isWhitespace(c)) {\n            if (lastTokenWhiteSpace && !beginningOfLine) {\n              if (option != WhitespaceOption.SINGLE_LINE) {\n                builder.insert(0, '\\n');\n              }\n            }\n            break;\n        }\n        lastTokenWhiteSpace = Character.isWhitespace(c);\n      }\n      \n      token = next();\n\n      if (token == JsDocToken.EOC ||\n              token == JsDocToken.EOF ||\n              // When we're capturing a license block, annotations\n              // in the block are ok.\n              (token == JsDocToken.ANNOTATION &&\n               option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString().trim();\n\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = multilineText.trim();\n            }\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno() + (lineLength) + (isFirstLine ? 0 : 1);\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n      }\n    } while (true);\n    \n    return new ExtractionInfo(\"\", JsDocToken.EOF);\n  }\n",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..b08e12c0 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,7 +1326,7 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                       WhitespaceOption option) {\n \n     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n@@ -1338,70 +1338,102 @@ public final class JsDocInfoParser {\n     int startLineno = stream.getLineno();\n     int startCharno = stream.getCharno() + 1;\n \n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n-    if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n-    }\n-\n     StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n+    boolean isFirstLine = true;\n \n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n+    do {\n+      String line = stream.getRemainingJSDocLine();\n+      \n+      if (line == null) {\n+          break;\n+      } \n+      \n+      int lineCharno = stream.getCharno();\n+      int lineLength = line.length();\n \n-    boolean ignoreStar = false;\n+      if (!isFirstLine) {\n+          if (option != WhitespaceOption.SINGLE_LINE) {\n+            builder.append(\"\\n\");\n+          }\n+        }\n+      isFirstLine = false;\n \n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n+      boolean ignoreStar = false;\n+      boolean lastTokenWasWhiteSpace = true;\n \n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n+      for (int i = 0; i < lineLength; i++) {\n \n-            builder.append('*');\n-          }\n+        char c = line.charAt(i);\n+        boolean endOfLine = i == lineLength - 1;\n \n-          token = next();\n-          continue;\n+        switch (c) {\n+          case ' ':\n+          case '\\t':\n+            if (!lastTokenWasWhiteSpace) {\n+                builder.append(' ');\n+                lastTokenWasWhiteSpace = true;\n+            }\n+            break;\n+            \n+          case '*':\n+            if (!ignoreStar) {\n+              ignoreStar = true;\n+              break;\n+            }\n \n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n+          default:\n+            if (lastTokenWasWhiteSpace) {\n+                builder.append(c);\n+                lastTokenWasWhiteSpace = false;\n+            } else {\n+                builder.append(c);\n+            }\n \n-          ignoreStar = true;\n-          token = next();\n-          continue;\n+        }\n+        if (lastTokenWasWhiteSpace && !endOfLine) {\n+            if (option != WhitespaceOption.SINGLE_LINE) {\n+              builder.append(\"\\n\");\n+            }\n+        }\n+        \n+        if (endOfLine) {\n+            ignoreStar = false;\n+        }\n+      }\n \n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n+      boolean lastTokenWhiteSpace = true;\n+      for (int i = line.length() - 1; i >= 0; i--) {\n+          \n+        char c = line.charAt(i);\n+        boolean beginningOfLine = i == 0;\n \n-              // All tokens must be separated by a space.\n+        if (!Character.isWhitespace(c)) {\n+            if (lastTokenWhiteSpace && !beginningOfLine) {\n+              if (option != WhitespaceOption.SINGLE_LINE) {\n+                builder.insert(0, '\\n');\n+              }\n+            }\n+            break;\n+        }\n+        lastTokenWhiteSpace = Character.isWhitespace(c);\n+      }\n+      \n+      token = next();\n \n-          if (token == JsDocToken.EOC ||\n+      if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n               // When we're capturing a license block, annotations\n               // in the block are ok.\n               (token == JsDocToken.ANNOTATION &&\n                option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n+            String multilineText = builder.toString().trim();\n \n             if (option != WhitespaceOption.PRESERVE) {\n               multilineText = multilineText.trim();\n             }\n \n             int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+            int endCharno = stream.getCharno() + (lineLength) + (isFirstLine ? 0 : 1);\n \n             if (multilineText.length() > 0) {\n               jsdocBuilder.markText(multilineText, startLineno, startCharno,\n@@ -1409,26 +1441,14 @@ public final class JsDocInfoParser {\n             }\n \n             return new ExtractionInfo(multilineText, token);\n-          }\n-\n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n-\n-          line = stream.getRemainingJSDocLine();\n-\n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n-\n-          builder.append(line);\n-          token = next();\n       }\n     } while (true);\n+    \n+    return new ExtractionInfo(\"\", JsDocToken.EOF);\n   }\n \n \n+\n   /**\n    * Extracts the top-level block comment from the JsDoc comment, if any.\n    * This method differs from the extractMultilineTextualBlock in that it",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...testcode\", \"count\": [6 }",
    "test_result": "FAIL"
}