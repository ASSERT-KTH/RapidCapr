{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n\n    if (!dec.getEigenvector(0).isNaN()) {\n        final double[] realEigenvalues = dec.getRealEigenvalues();\n        boolean isPositiveDefinite = true;\n        for (double eigenvalue : realEigenvalues) {\n            if (eigenvalue <= 0.0) {\n                isPositiveDefinite = false;\n                break;\n            }\n        }\n        if (!isPositiveDefinite) {\n            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n        }\n\n        final double[][] sqrtArray = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int i = 0; i < m.getRowDimension(); i++) {\n            for (int j = 0; j < m.getColumnDimension(); j++) {\n                double sqrtVal = 0.0;\n                for (int k = 0; k < m.getRowDimension(); k++) {\n                    sqrtVal += dec.getV().getEntry(i, k) * Math.sqrt(dec.getD().getEntry(k, k)) * dec.getV().getEntry(j, k);\n                }\n                sqrtArray[i][j] = sqrtVal;\n            }\n        }\n        return MatrixUtils.createRealMatrix(sqrtArray);\n    } else {\n        throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2bce58a67 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,35 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+\n+    if (!dec.getEigenvector(0).isNaN()) {\n+        final double[] realEigenvalues = dec.getRealEigenvalues();\n+        boolean isPositiveDefinite = true;\n+        for (double eigenvalue : realEigenvalues) {\n+            if (eigenvalue <= 0.0) {\n+                isPositiveDefinite = false;\n+                break;\n+            }\n+        }\n+        if (!isPositiveDefinite) {\n+            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n+        }\n+\n+        final double[][] sqrtArray = new double[m.getRowDimension()][m.getColumnDimension()];\n+        for (int i = 0; i < m.getRowDimension(); i++) {\n+            for (int j = 0; j < m.getColumnDimension(); j++) {\n+                double sqrtVal = 0.0;\n+                for (int k = 0; k < m.getRowDimension(); k++) {\n+                    sqrtVal += dec.getV().getEntry(i, k) * Math.sqrt(dec.getD().getEntry(k, k)) * dec.getV().getEntry(j, k);\n+                }\n+                sqrtArray[i][j] = sqrtVal;\n+            }\n+        }\n+        return MatrixUtils.createRealMatrix(sqrtArray);\n+    } else {\n+        throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n     }\n }\n+}",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}