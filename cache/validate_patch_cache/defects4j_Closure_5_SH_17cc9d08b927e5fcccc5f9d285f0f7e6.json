{
    "patch": "            if (child.isStringKey()) {\n              validProperties.add(child.getString());\n            } else {\n              Preconditions.checkState(child.isComputedProp());\n              // We cannot analyze computed property names.\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..8d31959a 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,13 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+            if (child.isStringKey()) {\n+              validProperties.add(child.getString());\n+            } else {\n+              Preconditions.checkState(child.isComputedProp());\n+              // We cannot analyze computed property names.\n+              return false;\n+            }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}