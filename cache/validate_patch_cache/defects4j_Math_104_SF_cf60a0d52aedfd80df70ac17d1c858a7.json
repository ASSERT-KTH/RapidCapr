{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    final double big = Double.MAX_VALUE * 0.5;\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (a >= big || x >= big) {\n        final double y = a * Math.log(x) - x - logGamma(a);\n        return (y < -Double.MAX_VALUE) ? 0.0 : 1.0;\n    }\n\n    final RegularizedGammaQ.Series series = new RegularizedGammaQ.Series(a, epsilon, maxIterations);\n    return 1.0 - series.value(x);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..775acc3f1 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,22 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    final double big = Double.MAX_VALUE * 0.5;\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (a >= big || x >= big) {\n+        final double y = a * Math.log(x) - x - logGamma(a);\n+        return (y < -Double.MAX_VALUE) ? 0.0 : 1.0;\n+    }\n+\n+    final RegularizedGammaQ.Series series = new RegularizedGammaQ.Series(a, epsilon, maxIterations);\n+    return 1.0 - series.value(x);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}