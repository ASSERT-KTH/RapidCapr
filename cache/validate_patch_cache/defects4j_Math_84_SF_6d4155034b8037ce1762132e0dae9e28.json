{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, worst) < 0) {\n            // perform an expansion step\n            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = replaceWorst(expanded, original, comparator);\n            } else {\n                simplex = replaceWorst(reflected, original, comparator);\n            }\n        } else {\n            // compute the contracted simplex\n            final RealPointValuePair contracted = comparator.compare(reflected, worst) >= 0 ?\n                    evaluateNewSimplex(original, sigma, comparator) :\n                    evaluateNewSimplex(original, rho, comparator);\n\n            if (comparator.compare(contracted, worst) < 0) {\n                simplex = replaceWorst(contracted, original, comparator);\n            } else {\n                final RealPointValuePair[] contractedSimplex = contractInside(original, comparator);\n                if (comparator.compare(contractedSimplex[constrainedIndex], worst) < 0) {\n                    simplex = contractedSimplex;\n                } else {\n                    simplex = shrink(original, comparator);\n                }\n            }\n        }\n\n        // Check convergence\n        final RealPointValuePair newWorst = simplex[simplex.length - 1];\n        final double[] p2 = newWorst.getPoint();\n        final double[] p1 = worst.getPoint();\n        double dist = 0;\n        for (int i = 0; i < p1.length; i++) {\n            final double d = p2[i] - p1[i];\n            dist += d * d;\n        }\n        worst = newWorst;\n        if (dist <= getAbsoluteThreshold() || convergenceChecker.converged(getIterations(), original, simplex)) {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..799a4d4ef 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,57 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+    while (true) {\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, worst) < 0) {\n+            // perform an expansion step\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = replaceWorst(expanded, original, comparator);\n+            } else {\n+                simplex = replaceWorst(reflected, original, comparator);\n             }\n-\n+        } else {\n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+            final RealPointValuePair contracted = comparator.compare(reflected, worst) >= 0 ?\n+                    evaluateNewSimplex(original, sigma, comparator) :\n+                    evaluateNewSimplex(original, rho, comparator);\n+\n+            if (comparator.compare(contracted, worst) < 0) {\n+                simplex = replaceWorst(contracted, original, comparator);\n+            } else {\n+                final RealPointValuePair[] contractedSimplex = contractInside(original, comparator);\n+                if (comparator.compare(contractedSimplex[constrainedIndex], worst) < 0) {\n+                    simplex = contractedSimplex;\n+                } else {\n+                    simplex = shrink(original, comparator);\n+                }\n             }\n-\n         }\n \n+        // Check convergence\n+        final RealPointValuePair newWorst = simplex[simplex.length - 1];\n+        final double[] p2 = newWorst.getPoint();\n+        final double[] p1 = worst.getPoint();\n+        double dist = 0;\n+        for (int i = 0; i < p1.length; i++) {\n+            final double d = p2[i] - p1[i];\n+            dist += d * d;\n+        }\n+        worst = newWorst;\n+        if (dist <= getAbsoluteThreshold() || convergenceChecker.converged(getIterations(), original, simplex)) {\n+            return;\n+        }\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}