{
    "patch": "public static Iterable<String> removeEmptyStrings(List<String> inputList) {\n    if (inputList == null) {\n        return new ArrayList<>();\n    }\n    List<String> nonEmptyList = new ArrayList<>();\n    for (String str : inputList) {\n        if (str != null && !str.isEmpty()) {\n            nonEmptyList.add(str);\n        }\n    }\n    return nonEmptyList;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..c12d5a2a2 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,18 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Iterable<String> removeEmptyStrings(List<String> inputList) {\n+    if (inputList == null) {\n+        return new ArrayList<>();\n+    }\n+    List<String> nonEmptyList = new ArrayList<>();\n+    for (String str : inputList) {\n+        if (str != null && !str.isEmpty()) {\n+            nonEmptyList.add(str);\n+        }\n+    }\n+    return nonEmptyList;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}