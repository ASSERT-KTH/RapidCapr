{
    "patch": "public <T> void resetMock(T mock) {\n    if (mock == null || !Factory.class.isAssignableFrom(mock.getClass())) {\n        return;\n    }\n\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    if (oldMockHandler == null) {\n        return;\n    }\n\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MockSettingsImpl settings = new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS).spiedInstance(mock);\n    if (mock.getClass().getInterfaces() != null && mock.getClass().getInterfaces().length > 0) {\n        settings.extraInterfaces(mock.getClass().getInterfaces());\n    }\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n\n    try {\n        ((Factory) mock).setCallback(0, newFilter);\n    } catch (IllegalArgumentException ex) {\n        if (ex.getMessage().contains(\"is frozen\")) {\n            Object[] callbacks = ((Factory) mock).getCallbacks();\n            if (callbacks.length > 1 && callbacks[1] instanceof SerializableNoOp) {\n                callbacks[1] = newFilter;\n            } else {\n                throw ex;\n            }\n        } else {\n            throw ex;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..41a5ca3cc 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,39 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (mock == null || !Factory.class.isAssignableFrom(mock.getClass())) {\n+        return;\n+    }\n+\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    if (oldMockHandler == null) {\n+        return;\n+    }\n+\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MockSettingsImpl settings = new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS).spiedInstance(mock);\n+    if (mock.getClass().getInterfaces() != null && mock.getClass().getInterfaces().length > 0) {\n+        settings.extraInterfaces(mock.getClass().getInterfaces());\n+    }\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n+\n+    try {\n+        ((Factory) mock).setCallback(0, newFilter);\n+    } catch (IllegalArgumentException ex) {\n+        if (ex.getMessage().contains(\"is frozen\")) {\n+            Object[] callbacks = ((Factory) mock).getCallbacks();\n+            if (callbacks.length > 1 && callbacks[1] instanceof SerializableNoOp) {\n+                callbacks[1] = newFilter;\n+            } else {\n+                throw ex;\n+            }\n+        } else {\n+            throw ex;\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}