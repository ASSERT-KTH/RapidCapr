{
    "patch": "      NodeUtil.visitPreOrder(n, new NodeUtil.Visitor() {\n        @Override public void visit(Node node) {\n          switch (node.getToken()) {\n            case CAST:\n>>> [ INFILL ] <<<\n              break;\n            default:\n              break;\n          }\n        }\n      });",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..df0aad6c 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,17 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      NodeUtil.visitPreOrder(n, new NodeUtil.Visitor() {\n+        @Override public void visit(Node node) {\n+          switch (node.getToken()) {\n+            case CAST:\n+>>> [ INFILL ] <<<\n+              break;\n+            default:\n+              break;\n+          }\n+        }\n+      });\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}