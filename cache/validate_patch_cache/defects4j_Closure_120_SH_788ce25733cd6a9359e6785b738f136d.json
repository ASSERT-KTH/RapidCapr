{
    "patch": "        } else if (block.isLoop) {\n          return false;\n        }\n      }\n\n      // If the variable is assigned in a branch, it may be assigned more than once.\n      boolean isAssignedInBranch = false;\n      for (DiGraphEdge<BasicBlock, Branch> edge : ref.getOutgoing()) {\n        if (edge.getValue() == Branch.ON_TRUE || edge.getValue() == Branch.ON_FALSE) {\n          isAssignedInBranch = true;\n          break;\n        }\n      }\n\n      return !isAssignedInBranch;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..d3e927b2 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,21 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+      }\n+\n+      // If the variable is assigned in a branch, it may be assigned more than once.\n+      boolean isAssignedInBranch = false;\n+      for (DiGraphEdge<BasicBlock, Branch> edge : ref.getOutgoing()) {\n+        if (edge.getValue() == Branch.ON_TRUE || edge.getValue() == Branch.ON_FALSE) {\n+          isAssignedInBranch = true;\n+          break;\n+        }\n+      }\n+\n+      return !isAssignedInBranch;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}