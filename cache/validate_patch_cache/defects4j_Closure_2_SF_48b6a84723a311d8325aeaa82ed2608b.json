{
    "patch": "private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    Set<String> currentPropertyNames = new HashSet<>();\n    if (implicitProto != null) {\n      try {\n        currentPropertyNames.addAll(implicitProto.getOwnPropertyNames());\n      } catch (RuntimeException e) {\n        // This can be the case if interfaceType is proxy to a non-existent\n        // object (which is a bad type annotation, but shouldn't crash).\n      }\n    }\n    for (String name : currentPropertyNames) {\n      ObjectType oType = properties.get(name);\n      if (oType != null) {\n        JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);\n        if (interfaceTypePropertyType != null && \n            !interfaceTypePropertyType.isEquivalentTo(oType.getPropertyType(name))) {\n          compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));\n        }\n      }\n      currentProperties.put(name, interfaceType);\n    }\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n      checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex a0f95db9..5f9ded7e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1563,20 +1563,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * that have been visited\n    * @param interfaceType The super interface that is being visited\n    */\n-  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n+private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n       String functionName, HashMap<String, ObjectType> properties,\n       HashMap<String, ObjectType> currentProperties,\n       ObjectType interfaceType) {\n     ObjectType implicitProto = interfaceType.getImplicitPrototype();\n-    Set<String> currentPropertyNames;\n-      // This can be the case if interfaceType is proxy to a non-existent\n-      // object (which is a bad type annotation, but shouldn't crash).\n-      currentPropertyNames = implicitProto.getOwnPropertyNames();\n+    Set<String> currentPropertyNames = new HashSet<>();\n+    if (implicitProto != null) {\n+      try {\n+        currentPropertyNames.addAll(implicitProto.getOwnPropertyNames());\n+      } catch (RuntimeException e) {\n+        // This can be the case if interfaceType is proxy to a non-existent\n+        // object (which is a bad type annotation, but shouldn't crash).\n+      }\n+    }\n     for (String name : currentPropertyNames) {\n       ObjectType oType = properties.get(name);\n       if (oType != null) {\n-        if (!interfaceType.getPropertyType(name).isEquivalentTo(\n-            oType.getPropertyType(name))) {\n+        JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);\n+        if (interfaceTypePropertyType != null && \n+            !interfaceTypePropertyType.isEquivalentTo(oType.getPropertyType(name))) {\n           compiler.report(\n               t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                   functionName, name, oType.toString(),\n@@ -1589,7 +1595,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n       checkInterfaceConflictProperties(t, n, functionName, properties,\n           currentProperties, iType);\n     }\n-  }\n+}\n \n   /**\n    * Visits a {@link Token#FUNCTION} node.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}