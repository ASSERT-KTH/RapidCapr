{
    "patch": "    } catch (IllegalFieldValueException e) {\n        if (resetFields) {\n            for (int i = 0; i < count; i++) {\n                try {\n                    millis = savedFields[i].set(millis, false);\n                } catch (Exception ex) { }\n            }\n            if (compareReverse(savedFields[0].iField.getDurationField(), DurationFieldType.months().getField(iChrono)) >= 0 \n                && compareReverse(savedFields[0].iField.getDurationField(), DurationFieldType.days().getField(iChrono)) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                millis = computeMillis(false, text);\n            }\n        }\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..464b3b46 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,24 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+    } catch (IllegalFieldValueException e) {\n+        if (resetFields) {\n+            for (int i = 0; i < count; i++) {\n+                try {\n+                    millis = savedFields[i].set(millis, false);\n+                } catch (Exception ex) { }\n+            }\n+            if (compareReverse(savedFields[0].iField.getDurationField(), DurationFieldType.months().getField(iChrono)) >= 0 \n+                && compareReverse(savedFields[0].iField.getDurationField(), DurationFieldType.days().getField(iChrono)) <= 0) {\n+                saveField(DateTimeFieldType.year(), iDefaultYear);\n+                millis = computeMillis(false, text);\n+            }\n+        }\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}