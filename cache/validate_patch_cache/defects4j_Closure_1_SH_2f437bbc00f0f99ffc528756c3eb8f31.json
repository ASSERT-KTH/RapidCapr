{
    "patch": "      Node lastArg = argList.getLastChild();\n-     if(lastArg==null){return;}\n+     while(lastArg!=null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+       argList.removeChild(lastArg);\n+       lastArg = argList.getLastChild();\n+       compiler.reportCodeChange();\n+     }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c7fb32b2 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,15 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = argList.getLastChild();\n+-     if(lastArg==null){return;}\n++     while(lastArg!=null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n++       argList.removeChild(lastArg);\n++       lastArg = argList.getLastChild();\n++       compiler.reportCodeChange();\n++     }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}