{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n    try {\n        field.setAccessible(true);\n        final Object oldValue = field.get(fieldInstance);\n        field.set(fieldInstance, candidate);\n        if (oldValue != null) {\n            for (Field f : candidate.getClass().getDeclaredFields()) {\n                f.setAccessible(true);\n                Object o = f.get(candidate);\n                if (o == oldValue) {\n                    f.set(candidate, fieldValue(mockCandidateFilter.filterCandidate(mocks, f, candidate).thenInject()));\n                }\n            }\n        }\n    } catch (IllegalAccessException e) {\n        throw new RuntimeException(e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..d3b8691ff 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,28 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n+    try {\n+        field.setAccessible(true);\n+        final Object oldValue = field.get(fieldInstance);\n+        field.set(fieldInstance, candidate);\n+        if (oldValue != null) {\n+            for (Field f : candidate.getClass().getDeclaredFields()) {\n+                f.setAccessible(true);\n+                Object o = f.get(candidate);\n+                if (o == oldValue) {\n+                    f.set(candidate, fieldValue(mockCandidateFilter.filterCandidate(mocks, f, candidate).thenInject()));\n+                }\n+            }\n+        }\n+    } catch (IllegalAccessException e) {\n+        throw new RuntimeException(e);\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}