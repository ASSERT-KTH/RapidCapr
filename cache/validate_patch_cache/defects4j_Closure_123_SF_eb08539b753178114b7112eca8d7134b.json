{
    "patch": "public static String fixCode(String code) {\n    String[] lines = code.split(\"\\n\");\n    StringBuilder sb = new StringBuilder();\n    int lineNumber = 0;\n    boolean fixed = false;\n    for (String line : lines) {\n        lineNumber++;\n        if (line.contains(\"for\")) {\n            String[] words = line.split(\" \");\n            int inPos = -1;\n            int i = 0;\n            for (String word : words) {\n                if (word.equals(\"in\")) {\n                    inPos = i;\n                    break;\n                }\n                i++;\n            }\n            if (inPos != -1) {\n                String beforeIn = line.substring(0, inPos);\n                String afterIn = line.substring(inPos + 1);\n                String[] beforeInWords = beforeIn.split(\" \");\n                String variable = beforeInWords[beforeInWords.length - 1];\n                if (!afterIn.contains(\"[\") || !afterIn.contains(\"]\")) {\n                    sb.append(line);\n                    sb.append(\"\\n\");\n                    continue;\n                }\n                String afterOpenBracket = afterIn.split(\"\\\\[\")[1];\n                String[] arrayAndIndex = afterOpenBracket.split(\"]\");\n                String arrayVariable = arrayAndIndex[0];\n                String index = arrayAndIndex[1];\n                StringBuilder fixedLine = new StringBuilder();\n                for (String word : beforeInWords) {\n                    fixedLine.append(word);\n                    fixedLine.append(\" \");\n                }\n                fixedLine.append(arrayVariable);\n                fixedLine.append(\".contains(\");\n                fixedLine.append(index.substring(1));\n                fixedLine.append(\")\");\n                for (int j = i + 1; j < words.length; j++) {\n                    fixedLine.append(\" \");\n                    fixedLine.append(words[j]);\n                }\n                sb.append(fixedLine);\n                sb.append(\"\\n\");\n                fixed = true;\n            } else {\n                sb.append(line);\n                sb.append(\"\\n\");\n            }\n        } else {\n            sb.append(line);\n            sb.append(\"\\n\");\n        }\n    }\n    if (!fixed) {\n        throw new RuntimeException(\"Could not fix code\");\n    }\n    return sb.toString().trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..56da4991 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,68 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String[] lines = code.split(\"\\n\");\n+    StringBuilder sb = new StringBuilder();\n+    int lineNumber = 0;\n+    boolean fixed = false;\n+    for (String line : lines) {\n+        lineNumber++;\n+        if (line.contains(\"for\")) {\n+            String[] words = line.split(\" \");\n+            int inPos = -1;\n+            int i = 0;\n+            for (String word : words) {\n+                if (word.equals(\"in\")) {\n+                    inPos = i;\n+                    break;\n+                }\n+                i++;\n+            }\n+            if (inPos != -1) {\n+                String beforeIn = line.substring(0, inPos);\n+                String afterIn = line.substring(inPos + 1);\n+                String[] beforeInWords = beforeIn.split(\" \");\n+                String variable = beforeInWords[beforeInWords.length - 1];\n+                if (!afterIn.contains(\"[\") || !afterIn.contains(\"]\")) {\n+                    sb.append(line);\n+                    sb.append(\"\\n\");\n+                    continue;\n+                }\n+                String afterOpenBracket = afterIn.split(\"\\\\[\")[1];\n+                String[] arrayAndIndex = afterOpenBracket.split(\"]\");\n+                String arrayVariable = arrayAndIndex[0];\n+                String index = arrayAndIndex[1];\n+                StringBuilder fixedLine = new StringBuilder();\n+                for (String word : beforeInWords) {\n+                    fixedLine.append(word);\n+                    fixedLine.append(\" \");\n+                }\n+                fixedLine.append(arrayVariable);\n+                fixedLine.append(\".contains(\");\n+                fixedLine.append(index.substring(1));\n+                fixedLine.append(\")\");\n+                for (int j = i + 1; j < words.length; j++) {\n+                    fixedLine.append(\" \");\n+                    fixedLine.append(words[j]);\n+                }\n+                sb.append(fixedLine);\n+                sb.append(\"\\n\");\n+                fixed = true;\n+            } else {\n+                sb.append(line);\n+                sb.append(\"\\n\");\n+            }\n+        } else {\n+            sb.append(line);\n+            sb.append(\"\\n\");\n+        }\n+    }\n+    if (!fixed) {\n+        throw new RuntimeException(\"Could not fix code\");\n+    }\n+    return sb.toString().trim();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}