{
    "patch": "public class MyClass {\n    private int[] values;\n\n    public MyClass(int[] values) {\n        this.values = values;\n    }\n\n    public Iterable<Integer> getValues() {\n        if (values == null || values.length == 0) {\n            return Collections.emptyList();\n        }\n        List<Integer> intList = new ArrayList<Integer>(values.length);\n        for (int i = 0; i < values.length; i++) {\n            intList.add(values[i]);\n        }\n        return intList;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..71ad3c208 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,24 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyClass {\n+    private int[] values;\n+\n+    public MyClass(int[] values) {\n+        this.values = values;\n+    }\n+\n+    public Iterable<Integer> getValues() {\n+        if (values == null || values.length == 0) {\n+            return Collections.emptyList();\n+        }\n+        List<Integer> intList = new ArrayList<Integer>(values.length);\n+        for (int i = 0; i < values.length; i++) {\n+            intList.add(values[i]);\n+        }\n+        return intList;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}