{
    "patch": "else if (nameNode.getType() == Token.GETPROP) {\n      if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString())) {\n        return false;\n      }\n\n      if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n      // Functions in the \"Math\" namespace have no side effects.\n      if (\"Math\".equals(nameNode.getFirstChild().getQualifiedName())) {\n        return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..21f45641 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -955,6 +955,21 @@ public final class NodeUtil {\n       }\n \n       // Functions in the \"Math\" namespace have no side effects.\n+else if (nameNode.getType() == Token.GETPROP) {\n+      if (callNode.hasOneChild()\n+          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n+                nameNode.getLastChild().getString())) {\n+        return false;\n+      }\n+\n+      if (callNode.isOnlyModifiesThisCall()\n+          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n+        return false;\n+      }\n+\n+      // Functions in the \"Math\" namespace have no side effects.\n+      if (\"Math\".equals(nameNode.getFirstChild().getQualifiedName())) {\n+        return true;\n \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n         if (nameNode.getFirstChild().getType() == Token.REGEXP",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}