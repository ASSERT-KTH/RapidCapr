{
    "patch": "protected BasePeriod(long duration) {\n    int weeks = (int) (duration / (7 * 24 * 60 * 60 * 1000)); // calculate number of weeks\n    int remainingMs = (int) (duration - weeks * 7 * 24 * 60 * 60 * 1000); // calculate remaining milliseconds\n    this(new Period()\n            .withWeeks(weeks)\n            .withMillis(remainingMs), PeriodType.standard(), ISOChronology.getInstanceUTC());\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..97bf1ace 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,13 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+protected BasePeriod(long duration) {\n+    int weeks = (int) (duration / (7 * 24 * 60 * 60 * 1000)); // calculate number of weeks\n+    int remainingMs = (int) (duration - weeks * 7 * 24 * 60 * 60 * 1000); // calculate remaining milliseconds\n+    this(new Period()\n+            .withWeeks(weeks)\n+            .withMillis(remainingMs), PeriodType.standard(), ISOChronology.getInstanceUTC());\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: call to this must be first statement in constructor",
    "test_result": "ERROR"
}