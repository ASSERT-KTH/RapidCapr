{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] actualTypeArguments = typeVariable.getActualTypeArguments();\n    if (actualTypeArguments.length == 0) {\n        Type[] bounds = typeVariable.getBounds();\n        if (bounds.length == 0) {\n            return null;\n        } else {\n            Type firstBound = bounds[0];\n            if (firstBound instanceof Class) {\n                return getActualTypeArgumentFor(((Class<?>) firstBound).getTypeParameters()[0]);\n            } else {\n                // This is the modification to handle type variables with bounds\n                return firstBound;\n            }\n        }\n    } else {\n        return actualTypeArguments[0];\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..cd06b28aa 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,26 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] actualTypeArguments = typeVariable.getActualTypeArguments();\n+    if (actualTypeArguments.length == 0) {\n+        Type[] bounds = typeVariable.getBounds();\n+        if (bounds.length == 0) {\n+            return null;\n+        } else {\n+            Type firstBound = bounds[0];\n+            if (firstBound instanceof Class) {\n+                return getActualTypeArgumentFor(((Class<?>) firstBound).getTypeParameters()[0]);\n+            } else {\n+                // This is the modification to handle type variables with bounds\n+                return firstBound;\n+            }\n+        }\n+    } else {\n+        return actualTypeArguments[0];\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}