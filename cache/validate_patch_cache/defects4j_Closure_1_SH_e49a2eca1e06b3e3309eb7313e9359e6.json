{
    "patch": "      int numArgs = argList.getChildCount();\n      for (int i = 0; i < numArgs; i++) {\n        Node arg = argList.getChildAtIndex(i);\n        var argName = arg.getString();\n        if (!referenced.contains(fnScope.getVar(argName))) {\n          argList.removeChild(arg);\n          i--;\n          compiler.reportCodeChange();\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0fb5a0ad 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      int numArgs = argList.getChildCount();\n+      for (int i = 0; i < numArgs; i++) {\n+        Node arg = argList.getChildAtIndex(i);\n+        var argName = arg.getString();\n+        if (!referenced.contains(fnScope.getVar(argName))) {\n+          argList.removeChild(arg);\n+          i--;\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}