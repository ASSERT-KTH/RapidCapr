{
    "patch": "      if ((name.globalSets == 1 && name.localSets == 0 &&\n           name.aliasingGets > 0) ||\n          name.type == Name.Type.EXPORT) {\n        // {@code name} meets condition (b).\n        // Find all of its local aliases and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type != Type.ALIASING_GET || !ref.scope.isLocal()) {\n            continue;\n          }\n          // {@code name} meets condition (c).\n          // Try to inline it.\n          if (inlineAliasIfPossible(ref, namespace)) {\n            name.removeRef(ref);\n          }\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..fd5b6bfd 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,35 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+      if ((name.globalSets == 1 && name.localSets == 0 &&\n+           name.aliasingGets > 0) ||\n+          name.type == Name.Type.EXPORT) {\n+        // {@code name} meets condition (b).\n+        // Find all of its local aliases and try to inline them.\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : refs) {\n+          if (ref.type != Type.ALIASING_GET || !ref.scope.isLocal()) {\n+            continue;\n+          }\n+          // {@code name} meets condition (c).\n+          // Try to inline it.\n+          if (inlineAliasIfPossible(ref, namespace)) {\n+            name.removeRef(ref);\n+          }\n+        }\n+      }\n+\n+      // Check if {@code name} has any aliases left after the\n+      // local-alias-inlining above.\n+      if ((name.type == Name.Type.OBJECTLIT ||\n+           name.type == Name.Type.FUNCTION) &&\n+          name.aliasingGets == 0 && name.props != null) {\n+        // All of {@code name}'s children meet condition (a), so they can be\n+        // added to the worklist.\n+        workList.addAll(name.props);\n+      }\n+    }\n+  }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}