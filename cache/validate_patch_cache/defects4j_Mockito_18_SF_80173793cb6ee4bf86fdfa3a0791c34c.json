{
    "patch": "public static Map<Character, Integer> countChars(String inputString) {\n    Map<Character, Integer> charCounts = new HashMap<>();\n    if (inputString != null) {\n        for (char c : inputString.toCharArray()) {\n            if (charCounts.containsKey(c)) {\n                charCounts.put(c, charCounts.get(c) + 1);\n            } else {\n                charCounts.put(c, 1);\n            }\n        }\n    }\n    return charCounts;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..22d301d64 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<Character, Integer> countChars(String inputString) {\n+    Map<Character, Integer> charCounts = new HashMap<>();\n+    if (inputString != null) {\n+        for (char c : inputString.toCharArray()) {\n+            if (charCounts.containsKey(c)) {\n+                charCounts.put(c, charCounts.get(c) + 1);\n+            } else {\n+                charCounts.put(c, 1);\n+            }\n+        }\n+    }\n+    return charCounts;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}