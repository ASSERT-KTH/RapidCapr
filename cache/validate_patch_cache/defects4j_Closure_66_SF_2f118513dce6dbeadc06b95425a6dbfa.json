{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<List<Map<String, String>>>() {}.getType();\n    List<Map<String, String>> list = gson.fromJson(jsonStr, type);\n    int typedCount = 0;\n    int totalCount = 0;\n    for (Map<String, String> map : list) {\n        if (map.containsKey(\"typed\")) {\n            totalCount++;\n            if (map.get(\"typed\").equalsIgnoreCase(\"true\")) {\n                typedCount++;\n            }\n        }\n    }\n    if (totalCount == 0) {\n        return 0.0;\n    } else {\n        return ((double) typedCount / totalCount) * 100.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..b7424f0f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<List<Map<String, String>>>() {}.getType();\n+    List<Map<String, String>> list = gson.fromJson(jsonStr, type);\n+    int typedCount = 0;\n+    int totalCount = 0;\n+    for (Map<String, String> map : list) {\n+        if (map.containsKey(\"typed\")) {\n+            totalCount++;\n+            if (map.get(\"typed\").equalsIgnoreCase(\"true\")) {\n+                typedCount++;\n+            }\n+        }\n+    }\n+    if (totalCount == 0) {\n+        return 0.0;\n+    } else {\n+        return ((double) typedCount / totalCount) * 100.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}