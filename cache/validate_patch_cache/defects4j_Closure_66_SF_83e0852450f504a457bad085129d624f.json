{
    "patch": "public double getTypedPercent(Map<String, Object> js) {\n    double totalCount = 0.0;\n    double typedCount = 0.0;\n    for (Map.Entry<String,Object> entry : js.entrySet()) {\n        if (entry.getValue() instanceof String) {\n            String s = (String)entry.getValue();\n            if (s.length() > 0) {\n                totalCount++;\n                if (s.matches(\"[a-zA-Z]+\")) {\n                    typedCount++;\n                }\n            }\n        }\n    }\n    if (totalCount == 0) {\n        return 0.0;\n    } else {\n        return (typedCount / totalCount) * 100.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..3aa160f0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(Map<String, Object> js) {\n+    double totalCount = 0.0;\n+    double typedCount = 0.0;\n+    for (Map.Entry<String,Object> entry : js.entrySet()) {\n+        if (entry.getValue() instanceof String) {\n+            String s = (String)entry.getValue();\n+            if (s.length() > 0) {\n+                totalCount++;\n+                if (s.matches(\"[a-zA-Z]+\")) {\n+                    typedCount++;\n+                }\n+            }\n+        }\n+    }\n+    if (totalCount == 0) {\n+        return 0.0;\n+    } else {\n+        return (typedCount / totalCount) * 100.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}