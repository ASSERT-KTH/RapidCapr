{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_SMART_NULLS));\n        if (mock.getClass().getName().contains(\"EnhancerByMockitoWithCGLIB\")) {\n            ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n        } else {\n            Enhancer enhancer = new Enhancer();\n            enhancer.setSuperclass(mock.getClass());\n            enhancer.setCallback(newFilter);\n            T spiedObject = (T) enhancer.create();\n            resetMock(spiedObject);\n            Field[] fields = mock.getClass().getDeclaredFields();\n            for (Field field : fields) {\n                if (field.getAnnotation(Spy.class) != null) {\n                    field.setAccessible(true);\n                    try {\n                        Object fieldObject = field.get(mock);\n                        if (fieldObject != null) {\n                            T fieldSpy = (T) spy(fieldObject);\n                            resetMock(fieldSpy);\n                            field.set(mock, fieldSpy);\n                        }\n                    } catch (IllegalAccessException e) {\n                        throw new RuntimeException(\"Can not access field.\", e);\n                    }\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..959270ae5 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,36 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_SMART_NULLS));\n+        if (mock.getClass().getName().contains(\"EnhancerByMockitoWithCGLIB\")) {\n+            ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n+        } else {\n+            Enhancer enhancer = new Enhancer();\n+            enhancer.setSuperclass(mock.getClass());\n+            enhancer.setCallback(newFilter);\n+            T spiedObject = (T) enhancer.create();\n+            resetMock(spiedObject);\n+            Field[] fields = mock.getClass().getDeclaredFields();\n+            for (Field field : fields) {\n+                if (field.getAnnotation(Spy.class) != null) {\n+                    field.setAccessible(true);\n+                    try {\n+                        Object fieldObject = field.get(mock);\n+                        if (fieldObject != null) {\n+                            T fieldSpy = (T) spy(fieldObject);\n+                            resetMock(fieldSpy);\n+                            field.set(mock, fieldSpy);\n+                        }\n+                    } catch (IllegalAccessException e) {\n+                        throw new RuntimeException(\"Can not access field.\", e);\n+                    }\n+                }\n+            }\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}