{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node child = n.getFirstChild();\n        if (NodeUtil.isExpressionNode(child) && !NodeUtil.isFunctionExpression(child)) {\n            Node parent = n.getParent();\n            if (parent != null) {\n                if (parent.getType() == Token.EXPR_RESULT) {\n                    Node grandparent = parent.getParent();\n                    int grandparentType = grandparent.getType();\n                    if (grandparentType == Token.IF) {\n                        Node elseBlock = grandparent.getLastChild();\n                        if (elseBlock != null && elseBlock.getType() == Token.BLOCK && elseBlock.hasOneChild()) {\n                            Node elseChild = elseBlock.getFirstChild();\n                            if (elseChild.getType() == Token.RETURN) {\n                                Node grandchild = elseChild.getFirstChild();\n                                if (grandchild.getType() == Token.FALSE) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                    else if (grandparentType == Token.FOR) {\n                        Node next = grandparent.getNext();\n                        if (next != null && next.getType() == Token.IF) {\n                            Node elseBlock = next.getLastChild();\n                            if (elseBlock != null && elseBlock.getType() == Token.BLOCK && elseBlock.hasOneChild()) {\n                                Node elseChild = elseBlock.getFirstChild();\n                                if (elseChild.getType() == Token.RETURN) {\n                                    Node grandchild = elseChild.getFirstChild();\n                                    if (grandchild.getType() == Token.FALSE) {\n                                        return true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else if (grandparentType == Token.WHILE) {\n                        Node next = grandparent.getNext();\n                        if (next != null && next.getType() == Token.IF) {\n                            Node elseBlock = next.getLastChild();\n                            if (elseBlock != null && elseBlock.getType() == Token.BLOCK && elseBlock.hasOneChild()) {\n                                Node elseChild = elseBlock.getFirstChild();\n                                if (elseChild.getType() == Token.RETURN) {\n                                    Node grandchild = elseChild.getFirstChild();\n                                    if (grandchild.getType() == Token.FALSE) {\n                                        return true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        return true; // parent is a var, a for loop or an expression statement\n                    }\n                }\n                else if (parent.getType() == Token.VAR) {\n                    return true;\n                }\n                else {\n                    return true; // parent is an expression statement\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..50393305 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,72 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+        Node child = n.getFirstChild();\n+        if (NodeUtil.isExpressionNode(child) && !NodeUtil.isFunctionExpression(child)) {\n+            Node parent = n.getParent();\n+            if (parent != null) {\n+                if (parent.getType() == Token.EXPR_RESULT) {\n+                    Node grandparent = parent.getParent();\n+                    int grandparentType = grandparent.getType();\n+                    if (grandparentType == Token.IF) {\n+                        Node elseBlock = grandparent.getLastChild();\n+                        if (elseBlock != null && elseBlock.getType() == Token.BLOCK && elseBlock.hasOneChild()) {\n+                            Node elseChild = elseBlock.getFirstChild();\n+                            if (elseChild.getType() == Token.RETURN) {\n+                                Node grandchild = elseChild.getFirstChild();\n+                                if (grandchild.getType() == Token.FALSE) {\n+                                    return true;\n+                                }\n+                            }\n+                        }\n+                    }\n+                    else if (grandparentType == Token.FOR) {\n+                        Node next = grandparent.getNext();\n+                        if (next != null && next.getType() == Token.IF) {\n+                            Node elseBlock = next.getLastChild();\n+                            if (elseBlock != null && elseBlock.getType() == Token.BLOCK && elseBlock.hasOneChild()) {\n+                                Node elseChild = elseBlock.getFirstChild();\n+                                if (elseChild.getType() == Token.RETURN) {\n+                                    Node grandchild = elseChild.getFirstChild();\n+                                    if (grandchild.getType() == Token.FALSE) {\n+                                        return true;\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    else if (grandparentType == Token.WHILE) {\n+                        Node next = grandparent.getNext();\n+                        if (next != null && next.getType() == Token.IF) {\n+                            Node elseBlock = next.getLastChild();\n+                            if (elseBlock != null && elseBlock.getType() == Token.BLOCK && elseBlock.hasOneChild()) {\n+                                Node elseChild = elseBlock.getFirstChild();\n+                                if (elseChild.getType() == Token.RETURN) {\n+                                    Node grandchild = elseChild.getFirstChild();\n+                                    if (grandchild.getType() == Token.FALSE) {\n+                                        return true;\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    else {\n+                        return true; // parent is a var, a for loop or an expression statement\n+                    }\n+                }\n+                else if (parent.getType() == Token.VAR) {\n+                    return true;\n+                }\n+                else {\n+                    return true; // parent is an expression statement\n+                }\n+            }\n+        }\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}