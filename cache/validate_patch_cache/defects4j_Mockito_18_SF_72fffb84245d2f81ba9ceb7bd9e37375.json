{
    "patch": "public static Map<Character, Integer> countCharacters(String inputString) {\n    Map<Character, Integer> charCountMap = new HashMap<>();\n    for (int i = 0; i < inputString.length(); i++) {\n        char c = inputString.charAt(i);\n        if (charCountMap.containsKey(c)) {\n            int count = charCountMap.get(c);\n            charCountMap.put(c, count + 1);\n        } else {\n            charCountMap.put(c, 1);\n        }\n    }\n    return charCountMap;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..df2e8975d 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<Character, Integer> countCharacters(String inputString) {\n+    Map<Character, Integer> charCountMap = new HashMap<>();\n+    for (int i = 0; i < inputString.length(); i++) {\n+        char c = inputString.charAt(i);\n+        if (charCountMap.containsKey(c)) {\n+            int count = charCountMap.get(c);\n+            charCountMap.put(c, count + 1);\n+        } else {\n+            charCountMap.put(c, 1);\n+        }\n+    }\n+    return charCountMap;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}