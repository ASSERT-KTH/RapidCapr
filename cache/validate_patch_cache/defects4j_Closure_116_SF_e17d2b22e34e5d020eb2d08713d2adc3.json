{
    "patch": "    while (cArg != null && fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      // and for every parameter check for mutable arguments that are evaluated more than once.\n      if (NodeUtil.mayEffectMutableState(cArg, compiler)\n          && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n\n      // Move to the next argument or parameter.\n      cArg = cArg.getNext();\n      fnParam = fnParam.getNext();\n    }\n\n    // Check for extra arguments or parameters.\n    if (cArg != null || fnParam != null) {\n      return CanInlineResult.NO;\n    }\n\n    // Check for side-effects.\n    return NodeUtil.mayHaveSideEffects(block, compiler) ? CanInlineResult.NO : CanInlineResult.YES;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..5bf476bf 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,26 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n-\n-    Node block = fnNode.getLastChild();\n-\n-\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n+    while (cArg != null && fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+      // and for every parameter check for mutable arguments that are evaluated more than once.\n+      if (NodeUtil.mayEffectMutableState(cArg, compiler)\n+          && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n+        return CanInlineResult.NO;\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+      // Move to the next argument or parameter.\n+      cArg = cArg.getNext();\n+      fnParam = fnParam.getNext();\n     }\n \n-    return CanInlineResult.YES;\n-  }\n+    // Check for extra arguments or parameters.\n+    if (cArg != null || fnParam != null) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    // Check for side-effects.\n+    return NodeUtil.mayHaveSideEffects(block, compiler) ? CanInlineResult.NO : CanInlineResult.YES;\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}