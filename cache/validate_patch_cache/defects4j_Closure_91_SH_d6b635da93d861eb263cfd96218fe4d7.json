{
    "patch": "      if (parent != null && parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild().getType() == Token.GETPROP &&\n          parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n        // Don't traverse functions that are being assigned as a prototype\n        // method of an object.\n        return false;\n      }\n\n      if (NodeUtil.isFnBind(parent)) {\n        // Don't traverse functions that are being bound to an object using\n        // the .bind() method.\n        return false;\n      }\n\n      if (t.getScopeRoot() == n && NodeUtil.isClassConstructor(n)) {\n        // Don't traverse class constructors, as they are bound to the class.\n        return false;\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..1d70aa12 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,26 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN &&\n+          parent.getFirstChild().getType() == Token.GETPROP &&\n+          parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+        // Don't traverse functions that are being assigned as a prototype\n+        // method of an object.\n+        return false;\n+      }\n+\n+      if (NodeUtil.isFnBind(parent)) {\n+        // Don't traverse functions that are being bound to an object using\n+        // the .bind() method.\n+        return false;\n+      }\n+\n+      if (t.getScopeRoot() == n && NodeUtil.isClassConstructor(n)) {\n+        // Don't traverse class constructors, as they are bound to the class.\n+        return false;\n+      }\n+\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}