{
    "patch": "public static boolean containsAny(String str, char[] chars) {\n    if (str == null || chars == null) {\n        return false;\n    }\n    int strLen = str.length();\n    int charsLen = chars.length;\n    int[] charsMap = new int[Character.MAX_VALUE + 1];\n\n    for (int i = 0; i < charsLen; i++) {\n        char c = chars[i];\n        if (Character.isHighSurrogate(c)) {\n            if (i < charsLen - 1) {\n                char c2 = chars[i + 1];\n                if (Character.isLowSurrogate(c2)) {\n                    i++;\n                    charsMap[Character.toCodePoint(c, c2)] = i + 1;\n                }\n            }\n        } else {\n            charsMap[c] = i + 1;\n        }\n    }\n\n    for (int i = 0; i < strLen; ) {\n        int codePoint = str.codePointAt(i);\n        if (charsMap[codePoint] > 0) {\n            return true;\n        }\n        i += Character.charCount(codePoint);\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..4b0487cb 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,38 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] chars) {\n+    if (str == null || chars == null) {\n+        return false;\n+    }\n+    int strLen = str.length();\n+    int charsLen = chars.length;\n+    int[] charsMap = new int[Character.MAX_VALUE + 1];\n+\n+    for (int i = 0; i < charsLen; i++) {\n+        char c = chars[i];\n+        if (Character.isHighSurrogate(c)) {\n+            if (i < charsLen - 1) {\n+                char c2 = chars[i + 1];\n+                if (Character.isLowSurrogate(c2)) {\n+                    i++;\n+                    charsMap[Character.toCodePoint(c, c2)] = i + 1;\n+                }\n+            }\n+        } else {\n+            charsMap[c] = i + 1;\n+        }\n+    }\n+\n+    for (int i = 0; i < strLen; ) {\n+        int codePoint = str.codePointAt(i);\n+        if (charsMap[codePoint] > 0) {\n+            return true;\n+        }\n+        i += Character.charCount(codePoint);\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}