{
    "patch": "      int countAssignedTo = 0;\n      Reference foundAssignment = null;\n      for (int i = 0; i < references.size(); i++) {\n        Reference ref = references.get(i);\n        if (ref.isAssignmentToName()) {\n          if (countAssignedTo == 0) {\n            foundAssignment = ref;\n          }\n          countAssignedTo++;\n        }\n      }\n\n      if (countAssignedTo > 1) {\n        return false;\n      }\n      if (foundAssignment == null) {\n        return false;\n      }\n      \n      // Make sure this assignment is not in a loop.\n      for (BasicBlock block = foundAssignment.getBasicBlock();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..4f668e26 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,27 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      int countAssignedTo = 0;\n+      Reference foundAssignment = null;\n+      for (int i = 0; i < references.size(); i++) {\n+        Reference ref = references.get(i);\n+        if (ref.isAssignmentToName()) {\n+          if (countAssignedTo == 0) {\n+            foundAssignment = ref;\n+          }\n+          countAssignedTo++;\n+        }\n+      }\n+\n+      if (countAssignedTo > 1) {\n+        return false;\n+      }\n+      if (foundAssignment == null) {\n+        return false;\n+      }\n+      \n+      // Make sure this assignment is not in a loop.\n+      for (BasicBlock block = foundAssignment.getBasicBlock();\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}