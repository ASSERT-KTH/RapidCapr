{
    "patch": "// Infilled hunk  \nif (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.hasProperty(prop)) {\n            objType.defineInferredProperty(prop, propType, null);\n          }\n          JSType t1 = objType.getPropertyType(prop);\n          JSType t2 = getNativeType(UNKNOWN_TYPE);\n          if (t1.isUnknownType() || t1.isAny() && !t2.isUnknownType()) {\n            warnings.add(JSError.make(\n                n,\n                TypeValidator.TYPE_MISMATCH_WARNING,\n                prop,\n                t1.toString(),\n                t2.toString()));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..25573611 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,22 +1118,29 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n+// Infilled hunk  \n+if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          if (!objType.hasProperty(prop)) {\n+            objType.defineInferredProperty(prop, propType, null);\n+          }\n+          JSType t1 = objType.getPropertyType(prop);\n+          JSType t2 = getNativeType(UNKNOWN_TYPE);\n+          if (t1.isUnknownType() || t1.isAny() && !t2.isUnknownType()) {\n+            warnings.add(JSError.make(\n+                n,\n+                TypeValidator.TYPE_MISMATCH_WARNING,\n+                prop,\n+                t1.toString(),\n+                t2.toString()));\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}