{
    "patch": "          case Token.CATCH:\n            List<Node> nameNodes = NodeUtil.findNodeUsages(n.getFirstChild(), \"name\", true, scope);\n            for (Node nameNode : nameNodes) {\n              String name = nameNode.getString();\n              if (isGlobalNameReference(name, scope)) {\n                handleGet(module, scope, nameNode, n, name);\n              }\n            }\n            break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..d9f9feef 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,15 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+          case Token.CATCH:\n+            List<Node> nameNodes = NodeUtil.findNodeUsages(n.getFirstChild(), \"name\", true, scope);\n+            for (Node nameNode : nameNodes) {\n+              String name = nameNode.getString();\n+              if (isGlobalNameReference(name, scope)) {\n+                handleGet(module, scope, nameNode, n, name);\n+              }\n+            }\n+            break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}