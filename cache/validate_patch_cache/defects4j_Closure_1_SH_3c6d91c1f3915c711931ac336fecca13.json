{
    "patch": "Node fnNode = fnScope.getRootNode();\n\nPreconditions.checkState(fnNode.isFunction());\nif (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n}\n\nNode argList = NodeUtil.getFunctionParameters(fnNode);\nNode param = argList.getFirstChild();\nwhile (param != null) {\n    Node nextParam = param.getNext();\n    if (!referenced.contains(fnScope.getVar(param.getString()))) {\n        argList.removeChild(param);\n        compiler.reportCodeChange();\n    }\n    param = nextParam;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e0103a89 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,24 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node fnNode = fnScope.getRootNode();\n+\n+Preconditions.checkState(fnNode.isFunction());\n+if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+}\n+\n+Node argList = NodeUtil.getFunctionParameters(fnNode);\n+Node param = argList.getFirstChild();\n+while (param != null) {\n+    Node nextParam = param.getNext();\n+    if (!referenced.contains(fnScope.getVar(param.getString()))) {\n+        argList.removeChild(param);\n+        compiler.reportCodeChange();\n+    }\n+    param = nextParam;\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable argList is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}