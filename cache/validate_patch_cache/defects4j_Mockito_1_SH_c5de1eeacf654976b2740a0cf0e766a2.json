{
    "patch": "    Object[] rawArguments = invocation.getRawArguments();\n    int argCount = rawArguments.length;\n    int matcherCount = matchers.size();\n    int count = Math.min(argCount, matcherCount);\n    for (int i = 0; i < count; i++) {\n        Matcher m = matchers.get(i);\n        Object arg = rawArguments[i];\n        if (isVariableArgument(invocation, i) && isVarargMatcher(m)) {\n            if (arg != null && arg.getClass().isArray()) {\n                int varArgLength = Array.getLength(arg);\n                for (int j = 0; j < varArgLength; j++) {\n                    ((CapturesArguments) m).captureFrom(Array.get(arg, j));\n                }\n            } else if (arg != null) {\n                ((CapturesArguments) m).captureFrom(new Object[] {arg});\n            } else {\n                ((CapturesArguments) m).captureFrom((Object) null);\n            }\n        } else {\n            ((CapturesArguments) m).captureFrom(arg);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..5910339e5 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,28 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    Object[] rawArguments = invocation.getRawArguments();\n+    int argCount = rawArguments.length;\n+    int matcherCount = matchers.size();\n+    int count = Math.min(argCount, matcherCount);\n+    for (int i = 0; i < count; i++) {\n+        Matcher m = matchers.get(i);\n+        Object arg = rawArguments[i];\n+        if (isVariableArgument(invocation, i) && isVarargMatcher(m)) {\n+            if (arg != null && arg.getClass().isArray()) {\n+                int varArgLength = Array.getLength(arg);\n+                for (int j = 0; j < varArgLength; j++) {\n+                    ((CapturesArguments) m).captureFrom(Array.get(arg, j));\n+                }\n+            } else if (arg != null) {\n+                ((CapturesArguments) m).captureFrom(new Object[] {arg});\n+            } else {\n+                ((CapturesArguments) m).captureFrom((Object) null);\n+            }\n+        } else {\n+            ((CapturesArguments) m).captureFrom(arg);\n+        }\n+    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.ClassCastException: org.mockito.internal.matchers.Equals cannot be cast to org.mockito.internal.matchers.CapturesArguments",
    "test_result": "FAIL"
}