{
    "patch": "public static double getTypedPercent(List<JSONObject> data) {\n    double total = 0.0;\n    double typed = 0.0;\n\n    for (JSONObject obj : data) {\n        if (obj != null && obj.has(\"typed\") && obj.has(\"total\")) {\n            try {\n                total += obj.getDouble(\"total\");\n                typed += obj.getDouble(\"typed\");\n            } catch (JSONException e) {\n                // ignore and continue to next object\n            }\n        }\n    }\n\n    return (total > 0.0) ? 100.0 * typed / total : 0.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..070e149d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(List<JSONObject> data) {\n+    double total = 0.0;\n+    double typed = 0.0;\n+\n+    for (JSONObject obj : data) {\n+        if (obj != null && obj.has(\"typed\") && obj.has(\"total\")) {\n+            try {\n+                total += obj.getDouble(\"total\");\n+                typed += obj.getDouble(\"typed\");\n+            } catch (JSONException e) {\n+                // ignore and continue to next object\n+            }\n+        }\n+    }\n+\n+    return (total > 0.0) ? 100.0 * typed / total : 0.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}