{
    "patch": "I apologize for the mistake in my previous response. Here's a corrected version of the `containsAny` function:\n\n```\npublic static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int sequenceLength = sequence.length();\n    final int searchLength = searchChars.length;\n    final int searchLengthMinusOne = searchLength - 1;\n    for (int i = 0; i < sequenceLength; i++) {\n        final char ch = sequence.charAt(i);\n        if (ch <= Character.MAX_VALUE) {\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n        } else if (ch >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final int cp = Character.codePointAt(sequence, i);\n            i += Character.charCount(cp) - 1; // increments i if char is a surrogate\n            for (int j = 0; j < searchLength; j++) {\n                final char[] chr = Character.toChars(cp);\n                if (Arrays.equals(searchChars, j, Math.min(j + chr.length, searchLength),\n                                  chr, 0, Math.min(chr.length, searchLength - j))) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```\nThis fix handles the case where the input character sequence contains supplementary characters, such as U+20000. Here, the `charAt(i)` method only returns one half of the supplementary character, so it needs to be combined with the following half in order to get the full character. This is done using the `codePointAt` method and then converting the resulting code point back into an array of char.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..a000342a 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,40 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+I apologize for the mistake in my previous response. Here's a corrected version of the `containsAny` function:\n+\n+```\n+public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int sequenceLength = sequence.length();\n+    final int searchLength = searchChars.length;\n+    final int searchLengthMinusOne = searchLength - 1;\n+    for (int i = 0; i < sequenceLength; i++) {\n+        final char ch = sequence.charAt(i);\n+        if (ch <= Character.MAX_VALUE) {\n+            for (int j = 0; j < searchLength; j++) {\n+                if (searchChars[j] == ch) {\n+                    return true;\n+                }\n+            }\n+        } else if (ch >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n+            final int cp = Character.codePointAt(sequence, i);\n+            i += Character.charCount(cp) - 1; // increments i if char is a surrogate\n+            for (int j = 0; j < searchLength; j++) {\n+                final char[] chr = Character.toChars(cp);\n+                if (Arrays.equals(searchChars, j, Math.min(j + chr.length, searchLength),\n+                                  chr, 0, Math.min(chr.length, searchLength - j))) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n+```\n+This fix handles the case where the input character sequence contains supplementary characters, such as U+20000. Here, the `charAt(i)` method only returns one half of the supplementary character, so it needs to be combined with the following half in order to get the full character. This is done using the `codePointAt` method and then converting the resulting code point back into an array of char.\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}