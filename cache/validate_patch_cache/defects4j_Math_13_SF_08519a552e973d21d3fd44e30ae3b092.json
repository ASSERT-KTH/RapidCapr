{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int blockSize = 30;\n    final int rows = m.getRowDimension();\n    final int cols = m.getColumnDimension();\n    final RealMatrix root = MatrixUtils.createRealMatrix(rows, cols);\n\n    for (int i = 0; i < rows; i += blockSize) {\n        int endRow = Math.min(rows, i + blockSize);\n        int numRows = endRow - i;\n\n        for (int j = 0; j < cols; j += blockSize) {\n            int endCol = Math.min(cols, j + blockSize);\n            int numCols = endCol - j;\n\n            RealMatrix block = m.getSubMatrix(i, endRow - 1, j, endCol - 1);\n\n            EigenDecomposition dec = new EigenDecomposition(block);\n\n            RealMatrix sqrtD = dec.getD().scalarMap(FastMath::sqrt);\n\n            RealMatrix sqrtM = dec.getV().multiply(sqrtD).multiply(dec.getV().transpose());\n\n            root.setSubMatrix(sqrtM.getData(), i, j);\n        }\n    }\n\n    return root;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..bf851e221 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,32 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int blockSize = 30;\n+    final int rows = m.getRowDimension();\n+    final int cols = m.getColumnDimension();\n+    final RealMatrix root = MatrixUtils.createRealMatrix(rows, cols);\n+\n+    for (int i = 0; i < rows; i += blockSize) {\n+        int endRow = Math.min(rows, i + blockSize);\n+        int numRows = endRow - i;\n+\n+        for (int j = 0; j < cols; j += blockSize) {\n+            int endCol = Math.min(cols, j + blockSize);\n+            int numCols = endCol - j;\n+\n+            RealMatrix block = m.getSubMatrix(i, endRow - 1, j, endCol - 1);\n+\n+            EigenDecomposition dec = new EigenDecomposition(block);\n+\n+            RealMatrix sqrtD = dec.getD().scalarMap(FastMath::sqrt);\n+\n+            RealMatrix sqrtM = dec.getV().multiply(sqrtD).multiply(dec.getV().transpose());\n+\n+            root.setSubMatrix(sqrtM.getData(), i, j);\n+        }\n     }\n+\n+    return root;\n+}\n }",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}