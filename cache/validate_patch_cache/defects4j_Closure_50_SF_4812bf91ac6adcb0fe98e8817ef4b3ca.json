{
    "patch": "private Node tryFoldArrayJoin(Node n) {    \n  Node callTarget = n.getFirstChild();\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n\n  Node right = callTarget.getNext();\n  if (right != null && !NodeUtil.isImmutableValue(right)) {\n    return n;\n  }\n\n  Node arrayNode = callTarget.getFirstChild();\n  if (arrayNode == null || arrayNode.getType() != Token.ARRAYLIT) {\n    return n;\n  }\n\n  Node functionName = arrayNode.getNext();\n  if (!functionName.getString().equals(\"join\")) {\n    return n;\n  }\n\n  String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = new ArrayList<>();\n  StringBuilder sb = null;\n  int foldedSize = 0;\n\n  for (Node elem : arrayNode.children()) {\n    if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n      String strValue = NodeUtil.getArrayElementStringValue(elem);\n      if (sb == null) {\n        sb = new StringBuilder();\n        sb.append(strValue);\n      } else {\n        if (joinString.equals(\"\")) {\n          return n;\n        }\n        sb.append(joinString).append(strValue);\n      }\n    } else {\n      if (sb != null) {\n        arrayFoldedChildren.add(Node.newString(sb.toString())\n            .copyInformationFrom((Node) arrayFoldedChildren.get(arrayFoldedChildren.size() - 1)));\n        foldedSize += sb.length();\n        sb = null;\n      }\n      int cost = InlineCostEstimator.getCost(elem);\n      if (cost == -1) {\n        return n;\n      }\n      foldedSize += cost;\n      arrayFoldedChildren.add(elem);\n    }\n  }\n  if (sb != null) {\n    arrayFoldedChildren.add(Node.newString(sb.toString())\n        .copyInformationFrom((Node) arrayFoldedChildren.get(arrayFoldedChildren.size() - 1)));\n    foldedSize += sb.length();\n  }\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  if (arrayNode.hasChildren() && arrayFoldedChildren.isEmpty()) {\n    // The array is empty, return an empty string.\n    Node emptyStringNode = Node.newString(\"\").copyInformationFrom(n);\n    n.getParent().replaceChild(n, emptyStringNode);\n    reportCodeChange();\n    return emptyStringNode;\n  } else if (arrayFoldedChildren.size() == 1) {\n    Node foldedStringNode = arrayFoldedChildren.get(0);\n    if (foldedSize > originalSize) {\n      return n;\n    }\n    arrayNode.detachChildren();\n    if (foldedStringNode.getType() != Token.STRING) {\n      Node replacement = new Node(Token.ADD,\n          Node.newString(\"\").copyInformationFrom(n),\n          foldedStringNode);\n      foldedStringNode = replacement;\n    }\n    n.getParent().replaceChild(n, foldedStringNode);\n    reportCodeChange();\n    return foldedStringNode;\n  } else {\n    // No folding could actually be performed.\n    int kJoinOverhead = \"[].join()\".length();\n    foldedSize += kJoinOverhead;\n    foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n    if (foldedSize > originalSize) {\n      return n;\n    }\n    arrayNode.detachChildren();\n    for (Node node : arrayFoldedChildren) {\n      arrayNode.addChildToBack(node);\n    }\n    reportCodeChange();\n  }\n\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..b04a88b7 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,117 +364,105 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n-    Node callTarget = n.getFirstChild();\n-\n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n-    }\n+private Node tryFoldArrayJoin(Node n) {    \n+  Node callTarget = n.getFirstChild();\n+  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n+    return n;\n+  }\n \n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n-    }\n+  Node right = callTarget.getNext();\n+  if (right != null && !NodeUtil.isImmutableValue(right)) {\n+    return n;\n+  }\n \n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = callTarget.getFirstChild();\n+  if (arrayNode == null || arrayNode.getType() != Token.ARRAYLIT) {\n+    return n;\n+  }\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n-    }\n+  Node functionName = arrayNode.getNext();\n+  if (!functionName.getString().equals(\"join\")) {\n+    return n;\n+  }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n+  String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n+  List<Node> arrayFoldedChildren = new ArrayList<>();\n+  StringBuilder sb = null;\n+  int foldedSize = 0;\n+\n+  for (Node elem : arrayNode.children()) {\n+    if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n+      String strValue = NodeUtil.getArrayElementStringValue(elem);\n+      if (sb == null) {\n+        sb = new StringBuilder();\n+        sb.append(strValue);\n       } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+        if (joinString.equals(\"\")) {\n+          return n;\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+        sb.append(joinString).append(strValue);\n+      }\n+    } else {\n+      if (sb != null) {\n+        arrayFoldedChildren.add(Node.newString(sb.toString())\n+            .copyInformationFrom((Node) arrayFoldedChildren.get(arrayFoldedChildren.size() - 1)));\n+        foldedSize += sb.length();\n+        sb = null;\n+      }\n+      int cost = InlineCostEstimator.getCost(elem);\n+      if (cost == -1) {\n+        return n;\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n+      foldedSize += cost;\n+      arrayFoldedChildren.add(elem);\n     }\n+  }\n+  if (sb != null) {\n+    arrayFoldedChildren.add(Node.newString(sb.toString())\n+        .copyInformationFrom((Node) arrayFoldedChildren.get(arrayFoldedChildren.size() - 1)));\n+    foldedSize += sb.length();\n+  }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+  int originalSize = InlineCostEstimator.getCost(n);\n+  if (arrayNode.hasChildren() && arrayFoldedChildren.isEmpty()) {\n+    // The array is empty, return an empty string.\n+    Node emptyStringNode = Node.newString(\"\").copyInformationFrom(n);\n+    n.getParent().replaceChild(n, emptyStringNode);\n+    reportCodeChange();\n+    return emptyStringNode;\n+  } else if (arrayFoldedChildren.size() == 1) {\n+    Node foldedStringNode = arrayFoldedChildren.get(0);\n+    if (foldedSize > originalSize) {\n+      return n;\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+    arrayNode.detachChildren();\n+    if (foldedStringNode.getType() != Token.STRING) {\n+      Node replacement = new Node(Token.ADD,\n+          Node.newString(\"\").copyInformationFrom(n),\n+          foldedStringNode);\n+      foldedStringNode = replacement;\n     }\n-\n-    return n;\n+    n.getParent().replaceChild(n, foldedStringNode);\n+    reportCodeChange();\n+    return foldedStringNode;\n+  } else {\n+    // No folding could actually be performed.\n+    int kJoinOverhead = \"[].join()\".length();\n+    foldedSize += kJoinOverhead;\n+    foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n+    if (foldedSize > originalSize) {\n+      return n;\n+    }\n+    arrayNode.detachChildren();\n+    for (Node node : arrayFoldedChildren) {\n+      arrayNode.addChildToBack(node);\n+    }\n+    reportCodeChange();\n   }\n \n+  return n;\n+}\n+\n   /**\n    * Try to fold .substr() calls on strings\n    */\n@@ -642,4 +630,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}