{
    "patch": "if (!constraintObj.isRecordType()) {\n    return;\n}\nfor (String propName : constraintObj.getOwnPropertyNames()) {\n    JSType propType = constraintObj.getPropertyType(propName);\n    if (!isPropertyTypeDeclared(propName)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(propName)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n        }\n        defineInferredProperty(propName, typeToInfer, null);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..ec948f63 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,19 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (!constraintObj.isRecordType()) {\n+    return;\n+}\n+for (String propName : constraintObj.getOwnPropertyNames()) {\n+    JSType propType = constraintObj.getPropertyType(propName);\n+    if (!isPropertyTypeDeclared(propName)) {\n+        JSType typeToInfer = propType;\n+        if (!hasProperty(propName)) {\n+            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n+        }\n+        defineInferredProperty(propName, typeToInfer, null);\n+    }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warnings(s):",
    "test_result": "FAIL"
}