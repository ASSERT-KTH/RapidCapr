{
    "patch": "public class MyClass {\n    private boolean flag = false;\n    private List<String> values = new ArrayList<>();\n\n    public void setFlag(boolean flag) {\n        this.flag = flag;\n    }\n\n    public boolean getFlag() {\n        return flag;\n    }\n\n    public List<String> getValues() {\n        return values;\n    }\n\n    public void addValue(String value) {\n        values.add(value);\n    }\n\n    public Object returnValueFor(Class<?> clazz) {\n        if (clazz == boolean.class || clazz == Boolean.class) {\n            return flag;\n        } else if (clazz == List.class) {\n            return values;\n        } else if (clazz == Iterable.class) {\n            return values;\n        } else {\n            return null;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}