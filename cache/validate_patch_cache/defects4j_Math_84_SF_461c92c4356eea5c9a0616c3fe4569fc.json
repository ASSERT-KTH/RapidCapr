{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                final RealPointValuePair[] contractedSimplex = simplex;\n                simplex = contractedSimplex;\n\n            } else {\n\n                // check convergence\n                boolean converged = true;\n                for (int i = 1; i < simplex.length; i++) {\n                    if (Math.abs(simplex[i].getValue() - simplex[0].getValue()) > this.getRelativeThreshold()\n                            * (Math.abs(simplex[0].getValue()) + getRelativeThreshold())) {\n                        converged = false;\n                        break; // exit loop\n                    }\n                }\n\n                if (converged) {\n                    return;\n                }\n\n                // perform a shrink\n                shrink();\n\n            }\n\n        }\n\n    }\n\n    private void shrink() {\n        final RealPointValuePair best = simplex[0];\n        for (int i = 1; i < simplex.length; i++) {\n            final double[] res = new double[n];\n            for (int j = 0; j < n; j++) {\n                res[j] = alpha * simplex[i].getPoint()[j] + (1 - alpha) * best.getPoint()[j];\n            }\n            simplex[i] = new RealPointValuePair(res, Double.NaN);\n        }\n        Arrays.sort(simplex, comparator);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..3578cedd1 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -89,15 +89,46 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                final RealPointValuePair[] contractedSimplex = simplex;\n+                simplex = contractedSimplex;\n+\n+            } else {\n+\n+                // check convergence\n+                boolean converged = true;\n+                for (int i = 1; i < simplex.length; i++) {\n+                    if (Math.abs(simplex[i].getValue() - simplex[0].getValue()) > this.getRelativeThreshold()\n+                            * (Math.abs(simplex[0].getValue()) + getRelativeThreshold())) {\n+                        converged = false;\n+                        break; // exit loop\n+                    }\n+                }\n+\n+                if (converged) {\n+                    return;\n+                }\n+\n+                // perform a shrink\n+                shrink();\n \n-            // check convergence\n-                return;\n             }\n \n         }\n \n     }\n \n+    private void shrink() {\n+        final RealPointValuePair best = simplex[0];\n+        for (int i = 1; i < simplex.length; i++) {\n+            final double[] res = new double[n];\n+            for (int j = 0; j < n; j++) {\n+                res[j] = alpha * simplex[i].getPoint()[j] + (1 - alpha) * best.getPoint()[j];\n+            }\n+            simplex[i] = new RealPointValuePair(res, Double.NaN);\n+        }\n+        Arrays.sort(simplex, comparator);\n+    }\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}