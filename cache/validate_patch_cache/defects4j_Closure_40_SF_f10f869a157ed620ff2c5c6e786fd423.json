{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n\n  // Record global variable and function declarations\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null) {\n        JsName nameInfo = getName(ns.name, true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns != null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n\n  // Record assignments and call sites\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, n.getLastChild()); //<- Use last child of assignment as value\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null && ns.onlyAffectsClassDef) {\n      JsName name = getName(ns.name, false);\n      if (name != null) {\n      refNodes.add(new ClassDefiningFunctionNode(\n          name, n, parent, parent.getParent()));\n      }\n    }\n  }\n}\n\nprivate NameInformation createNameInformation(NodeTraversal t, Node nameNode, Node valueNode) {\n  if (nameNode == null || nameNode.getType() != Token.NAME) {\n    return null;\n  }\n\n  String name = nameNode.getString();\n  Scope.Var var = t.getScope().getVar(name);\n\n  if (var == null) {\n    return null;\n  }\n\n  boolean isPrototype = false;\n  String prototypeClass = null;\n  String prototypeProperty = null;\n  boolean onlyAffectsClassDef = false;\n  VarInfo varInfo = var.getNameNode().getJSDocInfo().getVarInfo();\n  if (varInfo != null) {\n    isPrototype = varInfo.isPrototypeProperty();\n    prototypeClass = varInfo.getNominalExpression().getQualifiedName();\n    prototypeProperty = varInfo.getPropName();\n\n    // Check if the only reference to this variable is in a ClassDefiningFunctionNode\n    onlyAffectsClassDef = varInfo.isDefineOnClassScope() &&\n        isOnlyReferenceInClassDefiningFunction(valueNode, var.getNameNode());\n  }\n\n  return new NameInformation(name, isPrototype, prototypeClass, prototypeProperty, onlyAffectsClassDef);\n}\n\nprivate boolean isOnlyReferenceInClassDefiningFunction(Node valueNode, Node nameNode) {\n  Node parent = valueNode.getParent();\n  while (parent != null) {\n    if (parent.isFunction() && parent.isClass()) {\n      VarReferencesInScope refs = new VarReferencesInScope();\n      refs.scan(parent.getLastChild(), parent, nameNode.getString(), false);\n      return refs.getNumRefs() == 1;\n    }\n    parent = parent.getParent();\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..5eb968f4 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,95 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+\n+  // Record global variable and function declarations\n+  if (t.inGlobalScope()) {\n+    if (NodeUtil.isVarDeclaration(n)) {\n+      NameInformation ns = createNameInformation(t, n, parent);\n+      Preconditions.checkNotNull(ns);\n+      recordSet(ns.name, n);\n+    } else if (NodeUtil.isFunctionDeclaration(n)) {\n+      Node nameNode = n.getFirstChild();\n+      NameInformation ns = createNameInformation(t, nameNode, n);\n+      if (ns != null) {\n+        JsName nameInfo = getName(ns.name, true);\n+        recordSet(nameInfo.name, nameNode);\n+      }\n+    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n+      NameInformation ns = createNameInformation(t, n, parent);\n+      if (ns != null) {\n+        recordSet(ns.name, n);\n+      }\n+    }\n+  }\n \n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n-        }\n+  // Record assignments and call sites\n+  if (n.isAssign()) {\n+    Node nameNode = n.getFirstChild();\n+    NameInformation ns = createNameInformation(t, nameNode, n);\n+    if (ns != null) {\n+      if (ns.isPrototype) {\n+        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n+      } else {\n+        recordSet(ns.name, n.getLastChild()); //<- Use last child of assignment as value\n       }\n+    }\n+  } else if (n.isCall()) {\n+    Node nameNode = n.getFirstChild();\n+    NameInformation ns = createNameInformation(t, nameNode, n);\n+    if (ns != null && ns.onlyAffectsClassDef) {\n+      JsName name = getName(ns.name, false);\n+      if (name != null) {\n+      refNodes.add(new ClassDefiningFunctionNode(\n+          name, n, parent, parent.getParent()));\n+      }\n+    }\n+  }\n+}\n \n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n+private NameInformation createNameInformation(NodeTraversal t, Node nameNode, Node valueNode) {\n+  if (nameNode == null || nameNode.getType() != Token.NAME) {\n+    return null;\n+  }\n \n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n-        }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n-          }\n-        }\n-      }\n+  String name = nameNode.getString();\n+  Scope.Var var = t.getScope().getVar(name);\n+\n+  if (var == null) {\n+    return null;\n+  }\n+\n+  boolean isPrototype = false;\n+  String prototypeClass = null;\n+  String prototypeProperty = null;\n+  boolean onlyAffectsClassDef = false;\n+  VarInfo varInfo = var.getNameNode().getJSDocInfo().getVarInfo();\n+  if (varInfo != null) {\n+    isPrototype = varInfo.isPrototypeProperty();\n+    prototypeClass = varInfo.getNominalExpression().getQualifiedName();\n+    prototypeProperty = varInfo.getPropName();\n+\n+    // Check if the only reference to this variable is in a ClassDefiningFunctionNode\n+    onlyAffectsClassDef = varInfo.isDefineOnClassScope() &&\n+        isOnlyReferenceInClassDefiningFunction(valueNode, var.getNameNode());\n+  }\n+\n+  return new NameInformation(name, isPrototype, prototypeClass, prototypeProperty, onlyAffectsClassDef);\n+}\n+\n+private boolean isOnlyReferenceInClassDefiningFunction(Node valueNode, Node nameNode) {\n+  Node parent = valueNode.getParent();\n+  while (parent != null) {\n+    if (parent.isFunction() && parent.isClass()) {\n+      VarReferencesInScope refs = new VarReferencesInScope();\n+      refs.scan(parent.getLastChild(), parent, nameNode.getString(), false);\n+      return refs.getNumRefs() == 1;\n     }\n+    parent = parent.getParent();\n+  }\n+  return false;\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}