{
    "patch": "      if (t.inGlobalScope() && n.isName()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          Preconditions.checkNotNull(ns);\n          recordSet(ns.name, n);\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          Node nameNode = n.getFirstChild();\n          if (nameNode.isName()) {\n            NameInformation ns = createNameInformation(t, nameNode, n);\n            if (ns != null) {\n              JsName nameInfo = getName(nameNode.getString(), true);\n              recordSet(nameInfo.name, nameNode);\n            }\n          }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n          NameInformation ns = createNameInformation(t, n, parent.getParent());\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments and call sites\n      if (n.isAssign() && n.getFirstChild().isName()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n      } else if (n.isCall() && n.getFirstChild().isName()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null && ns.onlyAffectsClassDef) {\n          JsName name = getName(ns.name, false);\n          if (name != null) {\n            refNodes.add(new ClassDefiningFunctionNode(\n                name, n, parent, parent.getParent()));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..6ba95571 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,23 +593,22 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n+      if (t.inGlobalScope() && n.isName()) {\n         if (NodeUtil.isVarDeclaration(n)) {\n           NameInformation ns = createNameInformation(t, n, parent);\n           Preconditions.checkNotNull(ns);\n           recordSet(ns.name, n);\n         } else if (NodeUtil.isFunctionDeclaration(n)) {\n           Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n+          if (nameNode.isName()) {\n+            NameInformation ns = createNameInformation(t, nameNode, n);\n+            if (ns != null) {\n+              JsName nameInfo = getName(nameNode.getString(), true);\n+              recordSet(nameInfo.name, nameNode);\n+            }\n           }\n         } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n+          NameInformation ns = createNameInformation(t, n, parent.getParent());\n           if (ns != null) {\n             recordSet(ns.name, n);\n           }\n@@ -617,9 +616,8 @@ final class NameAnalyzer implements CompilerPass {\n       }\n \n       // Record assignments and call sites\n-      if (n.isAssign()) {\n+      if (n.isAssign() && n.getFirstChild().isName()) {\n         Node nameNode = n.getFirstChild();\n-\n         NameInformation ns = createNameInformation(t, nameNode, n);\n         if (ns != null) {\n           if (ns.isPrototype) {\n@@ -628,18 +626,14 @@ final class NameAnalyzer implements CompilerPass {\n             recordSet(ns.name, nameNode);\n           }\n         }\n-      } else if (n.isCall()) {\n+      } else if (n.isCall() && n.getFirstChild().isName()) {\n         Node nameNode = n.getFirstChild();\n         NameInformation ns = createNameInformation(t, nameNode, n);\n         if (ns != null && ns.onlyAffectsClassDef) {\n           JsName name = getName(ns.name, false);\n           if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n-          }\n-        }\n-      }\n-    }\n+            refNodes.add(new ClassDefiningFunctionNode(\n+                name, n, parent, parent.getParent()));\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}