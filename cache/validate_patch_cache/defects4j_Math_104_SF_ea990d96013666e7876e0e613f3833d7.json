{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class MyClass {\n\n    private static final double DEFAULT_EPSILON = 1e-15;\n\n    public static double myFunction(double a, double x) {\n        double p = Gamma.regularizedGammaP(a, x);\n        double q = Gamma.regularizedGammaQ(a, x);\n\n        if (p < q) {\n            if (p < DEFAULT_EPSILON) {\n                return 0.0;\n            } else {\n                return -FastMath.log(p);\n            }\n        } else {\n            if (q < DEFAULT_EPSILON) {\n                return Double.POSITIVE_INFINITY;\n            } else {\n                return -FastMath.log(q);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..d970df119 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,32 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class MyClass {\n+\n+    private static final double DEFAULT_EPSILON = 1e-15;\n+\n+    public static double myFunction(double a, double x) {\n+        double p = Gamma.regularizedGammaP(a, x);\n+        double q = Gamma.regularizedGammaQ(a, x);\n+\n+        if (p < q) {\n+            if (p < DEFAULT_EPSILON) {\n+                return 0.0;\n+            } else {\n+                return -FastMath.log(p);\n+            }\n+        } else {\n+            if (q < DEFAULT_EPSILON) {\n+                return Double.POSITIVE_INFINITY;\n+            } else {\n+                return -FastMath.log(q);\n+            }\n+        }\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}