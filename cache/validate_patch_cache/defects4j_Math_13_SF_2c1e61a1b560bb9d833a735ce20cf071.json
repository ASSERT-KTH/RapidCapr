{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix eigenvectors = dec.getV();\n    final RealMatrix eigenvalues = dec.getD();\n\n    final int n = m.getRowDimension();\n    final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n\n    // Compute the square root of the eigenvalues\n    for (int i = 0; i < n; i++) {\n        double eigenvalue = eigenvalues.getEntry(i, i);\n        if (eigenvalue < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        double sqrtEigenvalue = Math.sqrt(eigenvalue);\n        for (int j = 0; j < n; j++) {\n            sqrtEigenvalues.setEntry(i, j, eigenvectors.getEntry(i, j) * sqrtEigenvalue);\n        }\n    }\n\n    // Compute the square root of the matrix by multiplying the eigenvectors by the square root of the eigenvalues\n    return sqrtEigenvalues.multiply(eigenvectors.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..85dbb7d0f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix eigenvectors = dec.getV();\n+    final RealMatrix eigenvalues = dec.getD();\n+\n+    final int n = m.getRowDimension();\n+    final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n+\n+    // Compute the square root of the eigenvalues\n+    for (int i = 0; i < n; i++) {\n+        double eigenvalue = eigenvalues.getEntry(i, i);\n+        if (eigenvalue < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        double sqrtEigenvalue = Math.sqrt(eigenvalue);\n+        for (int j = 0; j < n; j++) {\n+            sqrtEigenvalues.setEntry(i, j, eigenvectors.getEntry(i, j) * sqrtEigenvalue);\n+        }\n     }\n+\n+    // Compute the square root of the matrix by multiplying the eigenvectors by the square root of the eigenvalues\n+    return sqrtEigenvalues.multiply(eigenvectors.transpose());\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}