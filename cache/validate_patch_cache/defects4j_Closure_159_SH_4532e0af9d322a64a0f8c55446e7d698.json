{
    "patch": "  private void findCalledFunctions(Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        String functionName = child.getString();\n        if (!changed.contains(functionName)) {\n          changed.add(functionName);\n          Node functionNode = NodeUtil.getEnclosingFunction(child.getParent());\n          if (functionNode != null) {\n            addNewFunctionReference(functionNode, functionName);\n          }\n        }\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }\n  \n  private void addNewFunctionReference(Node functionNode, String functionName) {\n    NodeTraversal.traverseEs6(\n        getCompiler(),\n        functionNode,\n        new AbstractPostOrderCallback() {\n          @Override\n          public void visit(NodeTraversal t, Node n, Node parent) {\n            if (n.getType() == Token.CALL) {\n              Node child = n.getFirstChild();\n              if (child.getType() == Token.NAME && child.getString().equals(functionName)) {\n                NodeUtil.addNewExpression(parent, n);\n              }\n            }\n          }\n        });\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..38819bc7 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,44 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n+  private void findCalledFunctions(Node node, Set<String> changed) {\n+    Preconditions.checkArgument(changed != null);\n+    // For each referenced function, add a new reference\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+        String functionName = child.getString();\n+        if (!changed.contains(functionName)) {\n+          changed.add(functionName);\n+          Node functionNode = NodeUtil.getEnclosingFunction(child.getParent());\n+          if (functionNode != null) {\n+            addNewFunctionReference(functionNode, functionName);\n+          }\n+        }\n+      }\n+    }\n+\n+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+      findCalledFunctions(c, changed);\n+    }\n+  }\n+  \n+  private void addNewFunctionReference(Node functionNode, String functionName) {\n+    NodeTraversal.traverseEs6(\n+        getCompiler(),\n+        functionNode,\n+        new AbstractPostOrderCallback() {\n+          @Override\n+          public void visit(NodeTraversal t, Node n, Node parent) {\n+            if (n.getType() == Token.CALL) {\n+              Node child = n.getFirstChild();\n+              if (child.getType() == Token.NAME && child.getString().equals(functionName)) {\n+                NodeUtil.addNewExpression(parent, n);\n+              }\n+            }\n+          }\n+        });\n+  }\n       }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}