{
    "patch": "    if (token.getType() == JsDocToken.Type.NAME) {\n      return parseTypeName(token);\n    } else if (token.getType() == JsDocToken.Type.LC) {\n      skipSpace();\n      Node m = parseRecordTypeExpression(token);\n      skipSpace();\n      return m;\n    } else if (token.getType() == JsDocToken.Type.LP) {\n      skipSpace();\n      Node m = parseFunctionTypeExpression(token);\n      skipSpace();\n      return m;\n    }\n    throw new JSDocSyntaxException(\"invalid context type expression: \" + token.toString()\n        + \", expect a type name or a type expression with () or {}\");",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..8831b243 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,21 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+    if (token.getType() == JsDocToken.Type.NAME) {\n+      return parseTypeName(token);\n+    } else if (token.getType() == JsDocToken.Type.LC) {\n+      skipSpace();\n+      Node m = parseRecordTypeExpression(token);\n+      skipSpace();\n+      return m;\n+    } else if (token.getType() == JsDocToken.Type.LP) {\n+      skipSpace();\n+      Node m = parseFunctionTypeExpression(token);\n+      skipSpace();\n+      return m;\n+    }\n+    throw new JSDocSyntaxException(\"invalid context type expression: \" + token.toString()\n+        + \", expect a type name or a type expression with () or {}\");\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}