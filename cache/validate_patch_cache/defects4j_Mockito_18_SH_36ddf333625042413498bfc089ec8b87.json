{
    "patch": "public ReturnValue execute(Operation operation, Object[] args) throws Exception {\n    switch (operation.getName()) {\n      case \"add\":\n        add(args[0], args[1]);\n        return VoidValue.VOID;\n      case \"addAll\":\n        addAll((Map<? extends K, ? extends V>) args[0]);\n        return VoidValue.VOID;\n      case \"clear\":\n        clear();\n        return VoidValue.VOID;\n      case \"containsKey\":\n        return BooleanValue.get(containsKey(args[0]));\n      case \"containsValue\":\n        return BooleanValue.get(containsValue(args[0]));\n      case \"entrySet\":\n        return new ReturnValueImpl<>(entrySet(), Set.class);\n      case \"get\":\n        return get(args[0]);\n      case \"isEmpty\":\n        return BooleanValue.get(isEmpty());\n      case \"keySet\":\n        return new ReturnValueImpl<>(keySet(), Set.class);\n      case \"put\":\n        put(args[0], args[1]);\n        return VoidValue.VOID;\n      case \"putAll\":\n        putAll((Map<? extends K, ? extends V>) args[0]);\n        return VoidValue.VOID;\n      case \"remove\":\n        if (args.length == 1) {\n          remove(args[0]);\n        } else {\n          remove(args[0], args[1]);\n        }\n        return VoidValue.VOID;\n      case \"size\":\n        return IntegerValue.get(size());\n      case \"values\":\n        // If the Map is empty, return an empty Iterable\n        if (isEmpty()) {\n            return new ReturnValueImpl<>(Collections.emptyList(), Iterable.class);\n        }\n        return new ReturnValueImpl<>(values(), Iterable.class);\n      default:\n        throw new NoSuchMethodException(operation.getName());\n    }\n  }",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}