{
    "patch": "    protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea,\n            Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n\n        // check null arguments\n        if (state == null) {\n            throw new IllegalArgumentException(\"Null 'state' argument.\");\n        }\n\n        if ((label == null) || (label.equals(\"\"))) {\n            return state;\n        }\n\n        Font font = getLabelFont();\n        g2.setFont(font);\n        g2.setPaint(getLabelPaint());\n        double angle = getLabelAngle();\n        double rotationAngle = 0;\n        if (edge == RectangleEdge.TOP) {\n            rotationAngle = angle;\n        } else if (edge == RectangleEdge.BOTTOM) {\n            rotationAngle = -angle;\n        } else if (edge == RectangleEdge.LEFT) {\n            rotationAngle = angle - Math.PI / 2.0;\n        } else if (edge == RectangleEdge.RIGHT) {\n            rotationAngle = -(angle - Math.PI / 2.0);\n        }\n\n        // precalculate some label dimensions/positions\n        RectangleInsets insets = getLabelInsets();\n        FontMetrics fm = g2.getFontMetrics();\n        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n        double ascent = fm.getAscent();\n        double descent = fm.getDescent();\n        double labelx = 0;\n        double labely = 0;\n\n        // get anchor point\n        double anchorX = dataArea.getCenterX();\n        double anchorY = dataArea.getCenterY();\n        if (edge == RectangleEdge.TOP) {\n            anchorY = dataArea.getMinY();\n        } else if (edge == RectangleEdge.BOTTOM) {\n            anchorY = dataArea.getMaxY();\n        } else if (edge == RectangleEdge.LEFT) {\n            anchorX = dataArea.getMinX();\n        } else if (edge == RectangleEdge.RIGHT) {\n            anchorX = dataArea.getMaxX();\n        }\n\n        // calculate label position based on edge\n        if (edge == RectangleEdge.TOP) {\n            labely = state.getCursor() - insets.getBottom() - descent;\n        } else if (edge == RectangleEdge.BOTTOM) {\n            labely = state.getCursor() + insets.getTop() + ascent;\n        } else if (edge == RectangleEdge.LEFT) {\n            labelx = state.getCursor() - insets.getRight();\n            labely = anchorY ",
    "patch_diff": "diff --git a/source/org/jfree/chart/axis/Axis.java b/source/org/jfree/chart/axis/Axis.java\nindex 78a6c66..acc9532 100644\n--- a/source/org/jfree/chart/axis/Axis.java\n+++ b/source/org/jfree/chart/axis/Axis.java\n@@ -1089,115 +1089,63 @@ public abstract class Axis implements Cloneable, Serializable {\n      *\n      * @return Information about the axis.\n      */\n-    protected AxisState drawLabel(String label, Graphics2D g2, \n-            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n-            AxisState state, PlotRenderingInfo plotState) {\n-\n-        // it is unlikely that 'state' will be null, but check anyway...\n-        if (state == null) {\n-            throw new IllegalArgumentException(\"Null 'state' argument.\");\n-        }\n-        \n-        if ((label == null) || (label.equals(\"\"))) {\n-            return state;\n-        }\n-\n-        Font font = getLabelFont();\n-        RectangleInsets insets = getLabelInsets();\n-        g2.setFont(font);\n-        g2.setPaint(getLabelPaint());\n-        FontMetrics fm = g2.getFontMetrics();\n-        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n-        Shape hotspot = null;\n-        \n-        if (edge == RectangleEdge.TOP) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle(), labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) dataArea.getCenterX();\n-            float labely = (float) (state.getCursor() - insets.getBottom() \n-                    - h / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorUp(insets.getTop() + labelBounds.getHeight() \n-                    + insets.getBottom());\n-        }\n-        else if (edge == RectangleEdge.BOTTOM) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle(), labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) dataArea.getCenterX();\n-            float labely = (float) (state.getCursor() + insets.getTop() \n-                    + h / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorDown(insets.getTop() + labelBounds.getHeight() \n-                    + insets.getBottom());\n-        }\n-        else if (edge == RectangleEdge.LEFT) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) (state.getCursor() - insets.getRight() \n-                    - w / 2.0);\n-            float labely = (float) dataArea.getCenterY();\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n-                    TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n-                    + insets.getRight());\n-        }\n-        else if (edge == RectangleEdge.RIGHT) {\n-\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle() + Math.PI / 2.0, \n-                    labelBounds.getCenterX(), labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) (state.getCursor() \n-                            + insets.getLeft() + w / 2.0);\n-            float labely = (float) (dataArea.getY() + dataArea.getHeight() \n-                    / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n-                    TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n-                    + insets.getRight());\n-\n-        }\n-        if (plotState != null && hotspot != null) {\n-            ChartRenderingInfo owner = plotState.getOwner();\n-                EntityCollection entities = owner.getEntityCollection();\n-                if (entities != null) {\n-                    entities.add(new AxisLabelEntity(this, hotspot, \n-                            this.labelToolTip, this.labelURL));\n-                }\n-        }\n-        return state;\n-\n-    }\n+    protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea,\n+            Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n+\n+        // check null arguments\n+        if (state == null) {\n+            throw new IllegalArgumentException(\"Null 'state' argument.\");\n+        }\n+\n+        if ((label == null) || (label.equals(\"\"))) {\n+            return state;\n+        }\n+\n+        Font font = getLabelFont();\n+        g2.setFont(font);\n+        g2.setPaint(getLabelPaint());\n+        double angle = getLabelAngle();\n+        double rotationAngle = 0;\n+        if (edge == RectangleEdge.TOP) {\n+            rotationAngle = angle;\n+        } else if (edge == RectangleEdge.BOTTOM) {\n+            rotationAngle = -angle;\n+        } else if (edge == RectangleEdge.LEFT) {\n+            rotationAngle = angle - Math.PI / 2.0;\n+        } else if (edge == RectangleEdge.RIGHT) {\n+            rotationAngle = -(angle - Math.PI / 2.0);\n+        }\n+\n+        // precalculate some label dimensions/positions\n+        RectangleInsets insets = getLabelInsets();\n+        FontMetrics fm = g2.getFontMetrics();\n+        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n+        double ascent = fm.getAscent();\n+        double descent = fm.getDescent();\n+        double labelx = 0;\n+        double labely = 0;\n+\n+        // get anchor point\n+        double anchorX = dataArea.getCenterX();\n+        double anchorY = dataArea.getCenterY();\n+        if (edge == RectangleEdge.TOP) {\n+            anchorY = dataArea.getMinY();\n+        } else if (edge == RectangleEdge.BOTTOM) {\n+            anchorY = dataArea.getMaxY();\n+        } else if (edge == RectangleEdge.LEFT) {\n+            anchorX = dataArea.getMinX();\n+        } else if (edge == RectangleEdge.RIGHT) {\n+            anchorX = dataArea.getMaxX();\n+        }\n+\n+        // calculate label position based on edge\n+        if (edge == RectangleEdge.TOP) {\n+            labely = state.getCursor() - insets.getBottom() - descent;\n+        } else if (edge == RectangleEdge.BOTTOM) {\n+            labely = state.getCursor() + insets.getTop() + ascent;\n+        } else if (edge == RectangleEdge.LEFT) {\n+            labelx = state.getCursor() - insets.getRight();\n+            labely = anchorY \n \n     /**\n      * Draws an axis line at the current cursor position and edge.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}