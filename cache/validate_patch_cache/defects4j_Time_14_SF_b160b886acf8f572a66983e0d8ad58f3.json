{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        int maxValue = partial.getFieldType(fieldIndex).getField(iChronology).getMaximumValue(iChronology.getDateTimeMillis(partial));\n        int minValue = partial.getFieldType(fieldIndex).getField(iChronology).getMinimumValue(iChronology.getDateTimeMillis(partial));\n        \n        int curValue = values[fieldIndex];\n        int newValue = curValue + valueToAdd;\n        \n        if (newValue < minValue || newValue > maxValue) {\n            Instant instant = partial.toDateTime(defaultDt).toInstant();\n            LocalDateTime date = LocalDateTime.from(instant);\n            date = date.withYear(partial.get(DateTimeFieldType.year()));\n            date = date.withMonthOfYear(partial.get(DateTimeFieldType.monthOfYear()));\n            date = date.withDayOfMonth(1);\n            date = date.plusMonths(valueToAdd);\n            date = date.withDayOfMonth(Math.min(date.dayOfMonth().getMaximumValue(), curValue));\n            return iChronology.get(DateTimeUtils.toInstant(date, iChronology));\n        } else {\n            values[fieldIndex] = newValue;\n            return values;\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..76e24881 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,37 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int maxValue = partial.getFieldType(fieldIndex).getField(iChronology).getMaximumValue(iChronology.getDateTimeMillis(partial));\n+        int minValue = partial.getFieldType(fieldIndex).getField(iChronology).getMinimumValue(iChronology.getDateTimeMillis(partial));\n+        \n+        int curValue = values[fieldIndex];\n+        int newValue = curValue + valueToAdd;\n+        \n+        if (newValue < minValue || newValue > maxValue) {\n+            Instant instant = partial.toDateTime(defaultDt).toInstant();\n+            LocalDateTime date = LocalDateTime.from(instant);\n+            date = date.withYear(partial.get(DateTimeFieldType.year()));\n+            date = date.withMonthOfYear(partial.get(DateTimeFieldType.monthOfYear()));\n+            date = date.withDayOfMonth(1);\n+            date = date.plusMonths(valueToAdd);\n+            date = date.withDayOfMonth(Math.min(date.dayOfMonth().getMaximumValue(), curValue));\n+            return iChronology.get(DateTimeUtils.toInstant(date, iChronology));\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            values[fieldIndex] = newValue;\n+            return values;\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: no suitable method found for getDateTimeMillis(ReadablePartial)",
    "test_result": "ERROR"
}