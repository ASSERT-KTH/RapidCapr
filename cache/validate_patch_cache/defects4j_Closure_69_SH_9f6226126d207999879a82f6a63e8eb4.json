{
    "patch": "      // Functions with an explicit 'this' type must be called either in a GETPROP, \n      // GETELEM or passed as a call parameter.\n      JSType typeOfThis = functionType.getTypeOfThis();\n      if (typeOfThis != null) {\n        Node parent = n.getParent();\n        if (!NodeUtil.isGetOrSetKey(parent) && !NodeUtil.isFunctionExpression(parent)) {\n          Node callParent = parent.getParent();\n          if (!NodeUtil.isCallOrNew(callParent) || callParent.getFirstChild() != parent) {\n            report(t, n, EXPECTED_THIS_TYPE, typeOfThis.toString());\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..fdbc5b8d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with an explicit 'this' type must be called either in a GETPROP, \n+      // GETELEM or passed as a call parameter.\n+      JSType typeOfThis = functionType.getTypeOfThis();\n+      if (typeOfThis != null) {\n+        Node parent = n.getParent();\n+        if (!NodeUtil.isGetOrSetKey(parent) && !NodeUtil.isFunctionExpression(parent)) {\n+          Node callParent = parent.getParent();\n+          if (!NodeUtil.isCallOrNew(callParent) || callParent.getFirstChild() != parent) {\n+            report(t, n, EXPECTED_THIS_TYPE, typeOfThis.toString());\n+          }\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}