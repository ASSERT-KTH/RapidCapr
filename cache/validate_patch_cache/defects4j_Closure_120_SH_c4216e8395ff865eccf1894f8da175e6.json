{
    "patch": "if (ref == null || !ref.isSimpleAssignmentToName() || !ref.isDeclaration()) {\n    return false;\n}\n\nBasicBlock assignmentBlock = ref.getBasicBlock();\nfor (BasicBlock block = assignmentBlock; block != null; block = block.getParent()) {\n    if (block.isLoop) {\n        return false;\n    }\n    if (block.isFunction) {\n        return assignmentBlock.equals(block);\n    }\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..81e6e287 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (ref == null || !ref.isSimpleAssignmentToName() || !ref.isDeclaration()) {\n+    return false;\n+}\n+\n+BasicBlock assignmentBlock = ref.getBasicBlock();\n+for (BasicBlock block = assignmentBlock; block != null; block = block.getParent()) {\n+    if (block.isLoop) {\n+        return false;\n+    }\n+    if (block.isFunction) {\n+        return assignmentBlock.equals(block);\n+    }\n+}\n+return false;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}