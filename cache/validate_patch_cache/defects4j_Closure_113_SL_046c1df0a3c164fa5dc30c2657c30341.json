{
    "patch": "parent.detachFromParent();\ncompiler.reportCodeChange();\n\nif (provided == null || !provided.isExplicitlyProvided()) {\n  unrecognizedRequires.add(\n      new UnrecognizedRequire(n, ns, t.getSourceName()));\n}\nelse {\n  JSModule providedModule = provided.explicitModule;\n\n  Preconditions.checkNotNull(providedModule);\n\n  JSModule module = t.getModule();\n  if (moduleGraph != null &&\n      module != providedModule &&\n      !moduleGraph.dependsOn(module, providedModule)) {\n    compiler.report(\n        t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n            providedModule.getName(),\n            module.getName()));\n  }\n}\n\nmaybeAddToSymbolTable(left);\nmaybeAddStringNodeToSymbolTable(arg);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..337066e0 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,31 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+parent.detachFromParent();\n+compiler.reportCodeChange();\n+\n+if (provided == null || !provided.isExplicitlyProvided()) {\n+  unrecognizedRequires.add(\n+      new UnrecognizedRequire(n, ns, t.getSourceName()));\n+}\n+else {\n+  JSModule providedModule = provided.explicitModule;\n+\n+  Preconditions.checkNotNull(providedModule);\n+\n+  JSModule module = t.getModule();\n+  if (moduleGraph != null &&\n+      module != providedModule &&\n+      !moduleGraph.dependsOn(module, providedModule)) {\n+    compiler.report(\n+        t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+            providedModule.getName(),\n+            module.getName()));\n+  }\n+}\n+\n+maybeAddToSymbolTable(left);\n+maybeAddStringNodeToSymbolTable(arg);\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}