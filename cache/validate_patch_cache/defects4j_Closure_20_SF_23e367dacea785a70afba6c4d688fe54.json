{
    "patch": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\")) {\n      // Fold String(a) to '' + (a) on immutable literals,\n      // which allows further optimizations\n      //\n      // We can't do this in the general case, because String(a) has\n      // slightly different semantics than '' + (a). See\n      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n      Node value = callTarget.getNext();\n      if (value != null) {\n        if (value.getNext() == null && NodeUtil.isImmutableValue(value)) {\n          Node addition = IR.add(\n              IR.string(\"\").srcref(callTarget),\n              value.detachFromParent());\n          n.getParent().replaceChild(n, addition);\n          reportCodeChange();\n          return addition;\n        } else if (NodeUtil.isImmutableValue(value) && NodeUtil.isImmutableValue(value.getNext())) {\n          // Do the string concatenation here to avoid creating a temporary '+' node\n          String stringConcat = value.getString() + value.getNext().getString();\n          Node strNode = IR.string(stringConcat).srcref(n);\n          n.getParent().replaceChild(n, strNode);\n          reportCodeChange();\n          return strNode;\n        }\n      }\n    }\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..9fe8331d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -218,12 +218,21 @@ class PeepholeSubstituteAlternateSyntax\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n       if (value != null) {\n-        Node addition = IR.add(\n-            IR.string(\"\").srcref(callTarget),\n-            value.detachFromParent());\n-        n.getParent().replaceChild(n, addition);\n-        reportCodeChange();\n-        return addition;\n+        if (value.getNext() == null && NodeUtil.isImmutableValue(value)) {\n+          Node addition = IR.add(\n+              IR.string(\"\").srcref(callTarget),\n+              value.detachFromParent());\n+          n.getParent().replaceChild(n, addition);\n+          reportCodeChange();\n+          return addition;\n+        } else if (NodeUtil.isImmutableValue(value) && NodeUtil.isImmutableValue(value.getNext())) {\n+          // Do the string concatenation here to avoid creating a temporary '+' node\n+          String stringConcat = value.getString() + value.getNext().getString();\n+          Node strNode = IR.string(stringConcat).srcref(n);\n+          n.getParent().replaceChild(n, strNode);\n+          reportCodeChange();\n+          return strNode;\n+        }\n       }\n     }\n     return n;",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}