{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n\n        // if we don't know anything, call the constructor with unknown arguments\n        type = getNativeType(UNKNOWN_TYPE);\n\n        // if constructor type is a function, use its prototype as the type of the new object\n        FunctionType ft = constructorType.toMaybeFunctionType();\n        if (ft != null && ft.isConstructor()) {\n            type = ft.getPrototype();\n            // Propagate the type to arguments\n            for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n                // If constructor parameter is of type \"undefined\" then mark the arg node as having \"unknown\" type\n                if (arg.getJSType() != null && arg.getJSType().isVoidType()) {\n                    arg.setJSType(getNativeType(UNKNOWN_TYPE));\n                } else {\n                    arg.setJSType(getNativeType(UNKNOWN_TYPE).getLeastSupertype(type));\n                }\n                scope = traverse(arg, scope);\n            }\n        }\n    }\n    n.setJSType(type);\n\n    // Update scope with the inferred type.\n    JSType actualType = type == null ? getNativeType(OBJECT_TYPE) : type;\n    if (!JSType.NULL_TYPE.isSubtype(actualType) && !JSType.UNDEFINED_TYPE.isSubtype(actualType)) {\n        // If the type is neither null nor undefined, add a warning for inconsistent return type.\n        warnings.add(JSError.make(n, JSC_TYPE_MISMATCH, \"inconsistent return type\"));\n    }\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..c394e253 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,44 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n+\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n     if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n+        constructorType = constructorType.restrictByNotNullOrUndefined();\n+\n+        // if we don't know anything, call the constructor with unknown arguments\n         type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+\n+        // if constructor type is a function, use its prototype as the type of the new object\n+        FunctionType ft = constructorType.toMaybeFunctionType();\n+        if (ft != null && ft.isConstructor()) {\n+            type = ft.getPrototype();\n+            // Propagate the type to arguments\n+            for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+                // If constructor parameter is of type \"undefined\" then mark the arg node as having \"unknown\" type\n+                if (arg.getJSType() != null && arg.getJSType().isVoidType()) {\n+                    arg.setJSType(getNativeType(UNKNOWN_TYPE));\n+                } else {\n+                    arg.setJSType(getNativeType(UNKNOWN_TYPE).getLeastSupertype(type));\n+                }\n+                scope = traverse(arg, scope);\n+            }\n         }\n-      }\n     }\n     n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+\n+    // Update scope with the inferred type.\n+    JSType actualType = type == null ? getNativeType(OBJECT_TYPE) : type;\n+    if (!JSType.NULL_TYPE.isSubtype(actualType) && !JSType.UNDEFINED_TYPE.isSubtype(actualType)) {\n+        // If the type is neither null nor undefined, add a warning for inconsistent return type.\n+        warnings.add(JSError.make(n, JSC_TYPE_MISMATCH, \"inconsistent return type\"));\n     }\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}