{
    "patch": "public boolean getProp(String property, String expectedValue) {\n    String propValue = System.getProperty(property);\n    if (propValue != null && propValue.equals(expectedValue)) {\n        return true;\n    } else {\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..95b309b7 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,14 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public boolean getProp(String property, String expectedValue) {\n+    String propValue = System.getProperty(property);\n+    if (propValue != null && propValue.equals(expectedValue)) {\n+        return true;\n+    } else {\n+        return false;\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}