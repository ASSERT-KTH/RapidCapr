{
    "patch": "public String[] getprop(String key) {\n    ArrayList<String> values = new ArrayList<String>();\n    File file = new File(\"/system/build.prop\");\n\n    if (file.exists()) {\n        try {\n            FileReader f_reader = new FileReader(file);\n            BufferedReader b_reader = new BufferedReader(f_reader);\n            String line;\n\n            while ((line = b_reader.readLine()) != null) {\n                if (line.contains(key)) {\n                    int index = line.indexOf(\"=\");\n                    String value = line.substring(index + 1);\n                    values.add(value);\n                }\n            }\n\n            b_reader.close();\n            f_reader.close();\n\n            if (values.size() == 0) {\n                return null;\n            } else {\n                return values.toArray(new String[values.size()]);\n            }\n        } catch (Exception e) {\n            System.err.println(\"Error: \" + e.getMessage());\n            return null;\n        }\n    } else {\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..83dd6c3a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,40 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String[] getprop(String key) {\n+    ArrayList<String> values = new ArrayList<String>();\n+    File file = new File(\"/system/build.prop\");\n+\n+    if (file.exists()) {\n+        try {\n+            FileReader f_reader = new FileReader(file);\n+            BufferedReader b_reader = new BufferedReader(f_reader);\n+            String line;\n+\n+            while ((line = b_reader.readLine()) != null) {\n+                if (line.contains(key)) {\n+                    int index = line.indexOf(\"=\");\n+                    String value = line.substring(index + 1);\n+                    values.add(value);\n+                }\n+            }\n+\n+            b_reader.close();\n+            f_reader.close();\n+\n+            if (values.size() == 0) {\n+                return null;\n+            } else {\n+                return values.toArray(new String[values.size()]);\n+            }\n+        } catch (Exception e) {\n+            System.err.println(\"Error: \" + e.getMessage());\n+            return null;\n+        }\n+    } else {\n+        return null;\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}