{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                final RealPointValuePair[] contractedSimplex = contract(original, best, comparator);\n                if (comparator.compare(contractedSimplex[0], original[0]) < 0) {\n                    simplex = contractedSimplex;\n                } else {\n                    simplex = shrink(original, comparator);\n                }\n            }\n\n        } else {\n            final RealPointValuePair[] contractedSimplex = contract(original, best, comparator);\n            if (comparator.compare(contractedSimplex[0], original[0]) < 0) {\n                simplex = contractedSimplex;\n            } else {\n                simplex = shrink(original, comparator);\n            }\n        }\n\n        // check convergence\n        if (isConverged(simplex[0], simplex[simplex.length - 1])) {\n            return;\n        }\n\n    }\n\n}\n\nprivate RealPointValuePair[] contract(final RealPointValuePair[] original,\n                                       final RealPointValuePair best,\n                                       final Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n    for (int i = 1; i < original.length; i++) {\n        final double[] contracted = new double[original[i].getPoint().length];\n        for (int j = 0; j < contracted.length; j++) {\n            contracted[j] = contractionFactor * best.getPoint()[j] +\n                    (1 - contractionFactor) * original[i].getPoint()[j];\n        }\n        final double value = computeObjectiveValue(contracted);\n        contractedSimplex[i - 1] = new RealPointValuePair(contracted, value);\n    }\n    contractedSimplex[original.length - 1] = original[0];\n    Arrays.sort(contractedSimplex, comparator);\n    return contractedSimplex;\n}\n\nprivate RealPointValuePair[] shrink(final RealPointValuePair[] original,\n                                     final Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n    final RealPointValuePair best = original[0];\n    for (int i = 1; i < original.length; i++) {\n        final double[] shrinked = new double[original[i].getPoint().length];\n        for (int j = 0; j < shrinked.length; j++) {\n            shrinked[j] = contractionFactor * best.getPoint()[j] +\n                    (1 - contractionFactor) * original[i].getPoint()[j];\n        }\n        final double value = computeObjectiveValue(shrinked);\n        shrinkedSimplex[i] = new RealPointValuePair(shrinked, value);\n    }\n    shrinkedSimplex[0] = best;\n    Arrays.sort(shrinkedSimplex, comparator);\n    return shrinkedSimplex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..d82e64295 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,89 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+    while (true) {\n+\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                final RealPointValuePair[] contractedSimplex = contract(original, best, comparator);\n+                if (comparator.compare(contractedSimplex[0], original[0]) < 0) {\n+                    simplex = contractedSimplex;\n+                } else {\n+                    simplex = shrink(original, comparator);\n                 }\n+            }\n \n-                return;\n-\n+        } else {\n+            final RealPointValuePair[] contractedSimplex = contract(original, best, comparator);\n+            if (comparator.compare(contractedSimplex[0], original[0]) < 0) {\n+                simplex = contractedSimplex;\n+            } else {\n+                simplex = shrink(original, comparator);\n             }\n+        }\n+\n+        // check convergence\n+        if (isConverged(simplex[0], simplex[simplex.length - 1])) {\n+            return;\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+    }\n \n-            // check convergence\n-                return;\n-            }\n+}\n \n+private RealPointValuePair[] contract(final RealPointValuePair[] original,\n+                                       final RealPointValuePair best,\n+                                       final Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+    for (int i = 1; i < original.length; i++) {\n+        final double[] contracted = new double[original[i].getPoint().length];\n+        for (int j = 0; j < contracted.length; j++) {\n+            contracted[j] = contractionFactor * best.getPoint()[j] +\n+                    (1 - contractionFactor) * original[i].getPoint()[j];\n         }\n+        final double value = computeObjectiveValue(contracted);\n+        contractedSimplex[i - 1] = new RealPointValuePair(contracted, value);\n+    }\n+    contractedSimplex[original.length - 1] = original[0];\n+    Arrays.sort(contractedSimplex, comparator);\n+    return contractedSimplex;\n+}\n \n+private RealPointValuePair[] shrink(final RealPointValuePair[] original,\n+                                     final Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n+    final RealPointValuePair best = original[0];\n+    for (int i = 1; i < original.length; i++) {\n+        final double[] shrinked = new double[original[i].getPoint().length];\n+        for (int j = 0; j < shrinked.length; j++) {\n+            shrinked[j] = contractionFactor * best.getPoint()[j] +\n+                    (1 - contractionFactor) * original[i].getPoint()[j];\n+        }\n+        final double value = computeObjectiveValue(shrinked);\n+        shrinkedSimplex[i] = new RealPointValuePair(shrinked, value);\n     }\n+    shrinkedSimplex[0] = best;\n+    Arrays.sort(shrinkedSimplex, comparator);\n+    return shrinkedSimplex;\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}