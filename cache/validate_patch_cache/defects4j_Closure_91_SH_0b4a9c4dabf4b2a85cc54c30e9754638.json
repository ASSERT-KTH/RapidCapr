{
    "patch": "      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n\n        if (NodeUtil.isGet(lhs)) {\n          Node objectLit = NodeUtil.getEnclosingObjectLit(lhs);\n\n          if (objectLit == null) {\n            Node functionNode = lhs.getLastChild();\n            boolean isPrototypeAssignment =\n                lhs.getType() == Token.GETPROP &&\n                lhs.getLastChild().getString().equals(\"prototype\");\n\n            if (!isPrototypeAssignment &&\n                NodeUtil.isFunctionExpression(functionNode) &&\n                !NodeUtil.isGet(lhs)) {\n              // Don't traverse function expressions that are not assigned to an object\n              return false;\n            }\n\n            if (isPrototypeAssignment) {\n              Node name = lhs.getFirstChild();\n\n              if (NodeUtil.isGet(name) && name.getLastChild().getString().equals(\"constructor\")) {\n                // Ignore function in constructor method assignments\n                // e.g. Foo.Bar = Foo.Baz.constructor;\n                return false;\n              }\n\n              return !isLendToNonPrototype(objectLit, functionNode);\n            }\n          }\n        }\n      }\n      \n      ...\n      \n  }\n\n  /**\n   * Returns true if the functionNode is lent to an object other than prototype.\n   *\n   * <p>Example: `a.prototype.method = function() { ... };</p>\n   */\n  private static boolean isLendToNonPrototype(Node objectLit, Node functionNode) {\n    Preconditions.checkState(objectLit.getType() == Token.OBJECTLIT);\n\n    for (Node child : objectLit.children()) {\n      Preconditions.checkState(NodeUtil.isObjectLitKey(child));\n\n      Node grandparent = child.getParent().getParent();\n\n      // if grandparent is not an object literal, then it must be a script.\n      if (grandparent.getType() == Token.SCRIPT) {\n        return true;\n      }\n\n      if (grandparent.getParent().isAssign()) {\n        Node parent = grandparent.getParent().getFirstChild();\n\n        if (parent != objectLit && !parent.isName()) {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    }\n\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..b720f309 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,74 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+\n+        if (NodeUtil.isGet(lhs)) {\n+          Node objectLit = NodeUtil.getEnclosingObjectLit(lhs);\n+\n+          if (objectLit == null) {\n+            Node functionNode = lhs.getLastChild();\n+            boolean isPrototypeAssignment =\n+                lhs.getType() == Token.GETPROP &&\n+                lhs.getLastChild().getString().equals(\"prototype\");\n+\n+            if (!isPrototypeAssignment &&\n+                NodeUtil.isFunctionExpression(functionNode) &&\n+                !NodeUtil.isGet(lhs)) {\n+              // Don't traverse function expressions that are not assigned to an object\n+              return false;\n+            }\n+\n+            if (isPrototypeAssignment) {\n+              Node name = lhs.getFirstChild();\n+\n+              if (NodeUtil.isGet(name) && name.getLastChild().getString().equals(\"constructor\")) {\n+                // Ignore function in constructor method assignments\n+                // e.g. Foo.Bar = Foo.Baz.constructor;\n+                return false;\n+              }\n+\n+              return !isLendToNonPrototype(objectLit, functionNode);\n+            }\n+          }\n+        }\n+      }\n+      \n+      ...\n+      \n+  }\n+\n+  /**\n+   * Returns true if the functionNode is lent to an object other than prototype.\n+   *\n+   * <p>Example: `a.prototype.method = function() { ... };</p>\n+   */\n+  private static boolean isLendToNonPrototype(Node objectLit, Node functionNode) {\n+    Preconditions.checkState(objectLit.getType() == Token.OBJECTLIT);\n+\n+    for (Node child : objectLit.children()) {\n+      Preconditions.checkState(NodeUtil.isObjectLitKey(child));\n+\n+      Node grandparent = child.getParent().getParent();\n+\n+      // if grandparent is not an object literal, then it must be a script.\n+      if (grandparent.getType() == Token.SCRIPT) {\n+        return true;\n+      }\n+\n+      if (grandparent.getParent().isAssign()) {\n+        Node parent = grandparent.getParent().getFirstChild();\n+\n+        if (parent != objectLit && !parent.isName()) {\n+          return true;\n+        }\n+      } else {\n+        return true;\n+      }\n+    }\n+\n+    return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}