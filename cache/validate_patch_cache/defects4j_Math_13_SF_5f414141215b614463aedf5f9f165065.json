{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final RealMatrixIdentity iden = new RealMatrixIdentity(m.getRowDimension());\n    RealMatrix x = m;\n    RealMatrix y = iden;\n    final double eps = Double.MIN_VALUE;\n\n    while (true) {\n        final RealMatrix nextX = x.add(y).scalarMultiply(0.5);\n        if (nextX.equals(x)) {\n            return nextX;\n        }\n        final RealMatrix nextY = m.multiply(\n                new LUDecomposition(nextX).getSolver().getInverse());\n        if (nextY.equals(y)) {\n            return nextX;\n        }\n        x = nextX;\n        y = nextY;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..83c190f53 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final RealMatrixIdentity iden = new RealMatrixIdentity(m.getRowDimension());\n+    RealMatrix x = m;\n+    RealMatrix y = iden;\n+    final double eps = Double.MIN_VALUE;\n+\n+    while (true) {\n+        final RealMatrix nextX = x.add(y).scalarMultiply(0.5);\n+        if (nextX.equals(x)) {\n+            return nextX;\n+        }\n+        final RealMatrix nextY = m.multiply(\n+                new LUDecomposition(nextX).getSolver().getInverse());\n+        if (nextY.equals(y)) {\n+            return nextX;\n+        }\n+        x = nextX;\n+        y = nextY;\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}