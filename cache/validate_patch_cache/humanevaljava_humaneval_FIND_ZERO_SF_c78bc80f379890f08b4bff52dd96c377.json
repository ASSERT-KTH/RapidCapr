{
    "patch": "public static double find_zero(List<Double> xs) {\n    double negative_limit = -1000;\n    double positive_limit = 1000;\n    double tolerance = 1e-10;\n    double mid, f_mid;\n\n    while (poly(xs, negative_limit) * poly(xs, positive_limit) > 0) {\n        negative_limit *= 2;\n        positive_limit *= 2;\n    }\n\n    while (true) {\n        mid = (positive_limit + negative_limit) / 2;\n        f_mid = poly(xs, mid);\n\n        if (Math.abs(f_mid) < tolerance) {\n            break;\n        }\n\n        if (poly(xs, negative_limit) * f_mid < 0) {\n            positive_limit = mid;\n        } else {\n            negative_limit = mid;\n        }\n    }\n\n    return mid;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/FIND_ZERO.java b/src/main/java/humaneval/buggy/FIND_ZERO.java\nindex 9e2c137..e6571a2 100644\n--- a/src/main/java/humaneval/buggy/FIND_ZERO.java\n+++ b/src/main/java/humaneval/buggy/FIND_ZERO.java\n@@ -11,23 +11,32 @@ public class FIND_ZERO {\n         return sum;\n     }\n \n-    public static double find_zero(List<Double> xs){\n-        double begin = -1.;\n-        double end = 1.;\n+public static double find_zero(List<Double> xs) {\n+    double negative_limit = -1000;\n+    double positive_limit = 1000;\n+    double tolerance = 1e-10;\n+    double mid, f_mid;\n \n-        while (poly(xs, begin) * poly(xs, end) > 0) {\n-            begin *= 2.;\n-            end *= 2.;\n+    while (poly(xs, negative_limit) * poly(xs, positive_limit) > 0) {\n+        negative_limit *= 2;\n+        positive_limit *= 2;\n+    }\n+\n+    while (true) {\n+        mid = (positive_limit + negative_limit) / 2;\n+        f_mid = poly(xs, mid);\n+\n+        if (Math.abs(f_mid) < tolerance) {\n+            break;\n         }\n-        while (end - begin > 1e-10) {\n-            double center = (begin + end) / 2.;\n-            \n-            if (poly(xs, begin) * poly(xs, end) < 0) {\n-                begin = center;\n-            } else {\n-                end = center;\n-            }\n+\n+        if (poly(xs, negative_limit) * f_mid < 0) {\n+            positive_limit = mid;\n+        } else {\n+            negative_limit = mid;\n         }\n-        return begin;\n     }\n+\n+    return mid;\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}