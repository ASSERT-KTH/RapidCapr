{
    "patch": "      while ((lastArg = argList.getLastChild()) != null &&\n              lastArg.isName() &&\n              !isVarargs(function)) {\n        String name = lastArg.getString();\n        Var var = fnScope.getVar(name);\n        boolean inlineable = compiler.isInliningEnabled()\n            && !fnScope.hasOwnSlot(name);\n        if (!referenced.contains(var) && !inlineable) {\n          argList.removeChild(lastArg);\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n    compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..09c166ee 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      while ((lastArg = argList.getLastChild()) != null &&\n+              lastArg.isName() &&\n+              !isVarargs(function)) {\n+        String name = lastArg.getString();\n+        Var var = fnScope.getVar(name);\n+        boolean inlineable = compiler.isInliningEnabled()\n+            && !fnScope.hasOwnSlot(name);\n+        if (!referenced.contains(var) && !inlineable) {\n+          argList.removeChild(lastArg);\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+    compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}