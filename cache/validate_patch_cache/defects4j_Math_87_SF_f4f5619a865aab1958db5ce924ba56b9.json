{
    "patch": "private Integer getBasicRow(final int col) {\n    Integer row = null;\n    \n    // Count the number of non-zero entries\n    int numNonZeroEntries = 0;\n    \n    // Iterate over the rows to find the basic row\n    for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n        final double entry = getEntry(i, col);\n        \n        // Check if the entry is non-zero\n        if (!MathUtils.equals(entry, 0.0, epsilon)) {\n            \n            // Check if the entry is equal to 1\n            if (MathUtils.equals(entry, 1.0, epsilon)) {\n                \n                // Check that we haven't already found a basic row for this column\n                if (row != null) {\n                    return null;\n                }\n                \n                // Store the index of the basic row\n                row = i;\n                \n            } else {\n                // If the entry is not equal to 1, the row is not basic\n                return null;\n            }\n            \n            // Increment the number of non-zero entries\n            numNonZeroEntries++;\n        }\n    }\n    \n    // Check that there is exactly one non-zero entry\n    if (numNonZeroEntries != 1) {\n        return null;\n    }\n    \n    // Return the index of the basic row\n    return row;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 0ab790cd6..e700f706c 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -269,19 +269,48 @@ class SimplexTableau implements Serializable {\n      * @param col index of the column to check\n      * @return the row that the variable is basic in.  null if the column is not basic\n      */\n-    private Integer getBasicRow(final int col) {\n-        Integer row = null;\n-        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n-                if (row == null) {\n+private Integer getBasicRow(final int col) {\n+    Integer row = null;\n+    \n+    // Count the number of non-zero entries\n+    int numNonZeroEntries = 0;\n+    \n+    // Iterate over the rows to find the basic row\n+    for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n+        final double entry = getEntry(i, col);\n+        \n+        // Check if the entry is non-zero\n+        if (!MathUtils.equals(entry, 0.0, epsilon)) {\n+            \n+            // Check if the entry is equal to 1\n+            if (MathUtils.equals(entry, 1.0, epsilon)) {\n+                \n+                // Check that we haven't already found a basic row for this column\n+                if (row != null) {\n+                    return null;\n+                }\n+                \n+                // Store the index of the basic row\n                 row = i;\n-                } else {\n+                \n+            } else {\n+                // If the entry is not equal to 1, the row is not basic\n                 return null;\n-                }\n             }\n+            \n+            // Increment the number of non-zero entries\n+            numNonZeroEntries++;\n         }\n-        return row;\n     }\n+    \n+    // Check that there is exactly one non-zero entry\n+    if (numNonZeroEntries != 1) {\n+        return null;\n+    }\n+    \n+    // Return the index of the basic row\n+    return row;\n+}\n \n     /**\n      * Removes the phase 1 objective function and artificial variables from this tableau.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}