{
    "patch": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        boolean isFunctionAssignmentToPrototype = n.getType() == Token.FUNCTION &&\n            NodeUtil.isGet(lhs) &&\n            lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\");\n\n        if (isFunctionAssignmentToPrototype) {\n          return false;\n        } else if (NodeUtil.isFunctionExpression(n) && !NodeUtil.isGet(lhs)) {\n          // Don't traverse function expressions that are not assigned to an object\n          return false;\n        } else if (NodeUtil.isGet(lhs)) {\n          // Only traverse assignments to a prototype property or an object literal\n          Node ancestor = n;\n          boolean isPrototypeAssignment = false;\n          boolean isObjectLiteralAssignment = false;\n\n          while (ancestor.getParent() != null) {\n            ancestor = ancestor.getParent();\n\n            if (ancestor == lhs) {\n              isPrototypeAssignment = true;\n              break;\n            } else if (ancestor.getType() == Token.OBJECTLIT) {\n              isObjectLiteralAssignment = true;\n              break;\n            }\n          }\n\n          if (isObjectLiteralAssignment) {\n            return true;\n          } else if (isPrototypeAssignment) {\n            return rhs.getType() == Token.FUNCTION ||\n                (rhs.getType() == Token.NAME && rhs.getString().equals(\"undefined\"));\n          } else {\n            return false;\n          }\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..7d19024a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -80,7 +80,6 @@ final class CheckGlobalThis implements Callback {\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n     if (n.getType() == Token.FUNCTION) {\n       // Don't traverse functions that are constructors or have the @this\n       // or @override annotation.\n@@ -112,6 +111,48 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        boolean isFunctionAssignmentToPrototype = n.getType() == Token.FUNCTION &&\n+            NodeUtil.isGet(lhs) &&\n+            lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\");\n+\n+        if (isFunctionAssignmentToPrototype) {\n+          return false;\n+        } else if (NodeUtil.isFunctionExpression(n) && !NodeUtil.isGet(lhs)) {\n+          // Don't traverse function expressions that are not assigned to an object\n+          return false;\n+        } else if (NodeUtil.isGet(lhs)) {\n+          // Only traverse assignments to a prototype property or an object literal\n+          Node ancestor = n;\n+          boolean isPrototypeAssignment = false;\n+          boolean isObjectLiteralAssignment = false;\n+\n+          while (ancestor.getParent() != null) {\n+            ancestor = ancestor.getParent();\n+\n+            if (ancestor == lhs) {\n+              isPrototypeAssignment = true;\n+              break;\n+            } else if (ancestor.getType() == Token.OBJECTLIT) {\n+              isObjectLiteralAssignment = true;\n+              break;\n+            }\n+          }\n+\n+          if (isObjectLiteralAssignment) {\n+            return true;\n+          } else if (isPrototypeAssignment) {\n+            return rhs.getType() == Token.FUNCTION ||\n+                (rhs.getType() == Token.NAME && rhs.getString().equals(\"undefined\"));\n+          } else {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n@@ -144,6 +185,7 @@ final class CheckGlobalThis implements Callback {\n \n     return true;\n   }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}