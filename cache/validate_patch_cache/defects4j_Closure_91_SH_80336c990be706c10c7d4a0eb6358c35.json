{
    "patch": "      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (isLendingToPrototype(parent)) {\n        return false;\n      }\n    }\n\n    // Always traverse the left side of assignments nested deeper than a property get for prototype.\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      if (n == lhs) {\n        assignLhsChild = lhs;\n      } else if (isLendingToPrototype(lhs)) {\n        return false;\n      }\n    }\n\n    // Don't traverse functions in object literals unless the parent is the\n    // object literal\n    if (parent != null && parent.getType() == Token.OBJECTLIT) {\n      return n == parent;\n    }\n\n    int pType = parent.getType();\n    return pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN ||\n        pType == Token.COMMA || pType == Token.HOOK || pType == Token.CALL || pType == Token.NEW ||\n        pType == Token.CLASS || pType == Token.MODULEBODY || pType == Token.ARRAYLIT ||\n        pType == Token.CATCH || pType == Token.IF || pType == Token.DO || pType == Token.WHILE ||\n        pType == Token.FOR || pType == Token.SWITCH || pType == Token.CASE || pType == Token.DEFAULT ||\n        n.getParent() instanceof FunctionExpression;\n  }\n\n  private boolean isLendingToPrototype(Node parent) {\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      if (NodeUtil.isGet(lhs)) {\n        String propName = NodeUtil.getBestLValueName(lhs);\n        if (propName != null && propName.equals(\"prototype\")) {\n          return true;\n        }\n      }\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..97f1b1f4 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,53 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (isLendingToPrototype(parent)) {\n+        return false;\n+      }\n+    }\n+\n+    // Always traverse the left side of assignments nested deeper than a property get for prototype.\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+      if (n == lhs) {\n+        assignLhsChild = lhs;\n+      } else if (isLendingToPrototype(lhs)) {\n+        return false;\n+      }\n+    }\n+\n+    // Don't traverse functions in object literals unless the parent is the\n+    // object literal\n+    if (parent != null && parent.getType() == Token.OBJECTLIT) {\n+      return n == parent;\n+    }\n+\n+    int pType = parent.getType();\n+    return pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN ||\n+        pType == Token.COMMA || pType == Token.HOOK || pType == Token.CALL || pType == Token.NEW ||\n+        pType == Token.CLASS || pType == Token.MODULEBODY || pType == Token.ARRAYLIT ||\n+        pType == Token.CATCH || pType == Token.IF || pType == Token.DO || pType == Token.WHILE ||\n+        pType == Token.FOR || pType == Token.SWITCH || pType == Token.CASE || pType == Token.DEFAULT ||\n+        n.getParent() instanceof FunctionExpression;\n+  }\n+\n+  private boolean isLendingToPrototype(Node parent) {\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      if (NodeUtil.isGet(lhs)) {\n+        String propName = NodeUtil.getBestLValueName(lhs);\n+        if (propName != null && propName.equals(\"prototype\")) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}