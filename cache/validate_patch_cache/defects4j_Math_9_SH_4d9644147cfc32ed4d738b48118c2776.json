{
    "patch": "final double eps = 1e-10;\nfinal Vector3D revertedDirection = direction.negate();\nfinal double norm = revertedDirection.getNorm();\nfinal Vector3D newOrigin = zero.subtract(revertedDirection).normalize().scalarMultiply(norm + eps);\n\nif (newOrigin.equals(Vector3D.ZERO)) {\n    newOrigin = revertedDirection.normalize().scalarMultiply(eps);\n}\n\nreturn new Line(newOrigin, revertedDirection.normalize());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..3a7340c93 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,7 +84,16 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n+final double eps = 1e-10;\n+final Vector3D revertedDirection = direction.negate();\n+final double norm = revertedDirection.getNorm();\n+final Vector3D newOrigin = zero.subtract(revertedDirection).normalize().scalarMultiply(norm + eps);\n+\n+if (newOrigin.equals(Vector3D.ZERO)) {\n+    newOrigin = revertedDirection.normalize().scalarMultiply(eps);\n+}\n+\n+return new Line(newOrigin, revertedDirection.normalize());\n         return reverted;\n     }\n ",
    "result_reason": "error: cannot assign a value to final variable newOrigin",
    "test_result": "ERROR"
}