{
    "patch": "                try {\n                    millis = savedFields[i].set(millis, resetFields);\n                } catch (IllegalFieldValueException e) {                    \n                    if(savedFields[i].iField.getType() != DateTimeFieldType.year()) {\n                        if (text != null) {\n                            e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                        }\n                        throw e;\n                    }\n                    else {\n                        long instant = savedFields[i].iField.set(0L, iDefaultYear);\n                        millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..21b5ed22 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,20 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                try {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } catch (IllegalFieldValueException e) {                    \n+                    if(savedFields[i].iField.getType() != DateTimeFieldType.year()) {\n+                        if (text != null) {\n+                            e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                        }\n+                        throw e;\n+                    }\n+                    else {\n+                        long instant = savedFields[i].iField.set(0L, iDefaultYear);\n+                        millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n+                    }\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}