{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final RealMatrix x = new Array2DRowRealMatrix(n, n);\n    final RealMatrix y = new Array2DRowRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        y.setEntry(i, i, Math.sqrt(m.getEntry(i, i)));\n        for (int j = 0; j < i; j++) {\n            y.setEntry(i, j, 0.0);\n            x.setEntry(i, j, m.getEntry(i, j) / y.getEntry(j, j));\n        }\n        for (int j = i + 1; j < n; j++) {\n            x.setEntry(i, j, 0.0);\n            y.setEntry(j, i, m.getEntry(j, i) / y.getEntry(i, i));\n        }\n    }\n    for (int k = 0; k < 10; k++) {\n        RealMatrix temp = y.multiply(y);\n        RealMatrix delta = m.subtract(temp);\n        RealMatrix yinv = new LUDecomposition(y).getSolver().getInverse();\n        y = y.add(yinv.multiply(delta).multiply(yinv));\n    }\n    return y;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..adfa6a80a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final RealMatrix x = new Array2DRowRealMatrix(n, n);\n+    final RealMatrix y = new Array2DRowRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        y.setEntry(i, i, Math.sqrt(m.getEntry(i, i)));\n+        for (int j = 0; j < i; j++) {\n+            y.setEntry(i, j, 0.0);\n+            x.setEntry(i, j, m.getEntry(i, j) / y.getEntry(j, j));\n+        }\n+        for (int j = i + 1; j < n; j++) {\n+            x.setEntry(i, j, 0.0);\n+            y.setEntry(j, i, m.getEntry(j, i) / y.getEntry(i, i));\n+        }\n     }\n+    for (int k = 0; k < 10; k++) {\n+        RealMatrix temp = y.multiply(y);\n+        RealMatrix delta = m.subtract(temp);\n+        RealMatrix yinv = new LUDecomposition(y).getSolver().getInverse();\n+        y = y.add(yinv.multiply(delta).multiply(yinv));\n+    }\n+    return y;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}