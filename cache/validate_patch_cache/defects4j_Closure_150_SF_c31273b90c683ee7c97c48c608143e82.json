{
    "patch": "      switch (n.getToken()) {\n        case BLOCK:\n          if (parent.getToken() == Token.FUNCTION) {\n            return;\n          }\n          break;\n        case FUNCTION:\n          defineFunction(n, parent);\n          return;\n        case CATCH:\n          defineCatch(n, parent);\n          return;\n        case VAR:\n        case LET:\n        case CONST:\n          defineVar(n, parent);\n          return;\n        default:\n          attachLiteralTypes(n);\n          return;\n      }\n    }\n\n    private void defineFunction(Node n, Node parent) {\n      if (n.getParent().isCall()) {\n        // Skip IIFEs\n        return;\n      }\n      if (parent != null && parent.isVar()) {\n        // Skip variable declarations\n        return;\n      }\n      if (parent != null && parent.isExprResult()) {\n        Node fnName = findFunctionName(n);\n        if (fnName != null) {\n          // export named function to global namespace\n          String name = getName(fnName);\n          if (name != null) {\n            exportSymbol(name, fnName, true, true);\n          }\n        }\n      }\n      defineDeclaredFunction(n, parent);\n    }\n\n    private Node findFunctionName(Node fn) {\n      Node name = NodeUtil.getFunctionNameNode(fn);\n      if (name != null) {\n        return name;\n      }\n      name = fn.getFirstChild();\n      if (name.getToken() == Token.NAME) {\n        return name;\n      }\n      return null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..ada7a16e 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,62 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+      switch (n.getToken()) {\n+        case BLOCK:\n+          if (parent.getToken() == Token.FUNCTION) {\n             return;\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n-        case Token.CATCH:\n+        case FUNCTION:\n+          defineFunction(n, parent);\n+          return;\n+        case CATCH:\n           defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n+          return;\n+        case VAR:\n+        case LET:\n+        case CONST:\n           defineVar(n, parent);\n-          break;\n+          return;\n+        default:\n+          attachLiteralTypes(n);\n+          return;\n+      }\n+    }\n+\n+    private void defineFunction(Node n, Node parent) {\n+      if (n.getParent().isCall()) {\n+        // Skip IIFEs\n+        return;\n+      }\n+      if (parent != null && parent.isVar()) {\n+        // Skip variable declarations\n+        return;\n       }\n+      if (parent != null && parent.isExprResult()) {\n+        Node fnName = findFunctionName(n);\n+        if (fnName != null) {\n+          // export named function to global namespace\n+          String name = getName(fnName);\n+          if (name != null) {\n+            exportSymbol(name, fnName, true, true);\n+          }\n+        }\n+      }\n+      defineDeclaredFunction(n, parent);\n     }\n \n+    private Node findFunctionName(Node fn) {\n+      Node name = NodeUtil.getFunctionNameNode(fn);\n+      if (name != null) {\n+        return name;\n+      }\n+      name = fn.getFirstChild();\n+      if (name.getToken() == Token.NAME) {\n+        return name;\n+      }\n+      return null;\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}