{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        long millis = getMillis();\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = result.getYears();\n        int months = result.getMonths();\n        int days = result.getDays();\n\n        // Normalize the period by repeatedly converting to and from standard form until no further changes occur\n        boolean normalized = false;\n        while (!normalized) {\n            normalized = true;\n            int newYears = years + (months / 12);\n            int newMonths = months % 12;\n            if (newYears != years || newMonths != months) {\n                years = newYears;\n                months = newMonths;\n                normalized = false;\n            }\n\n            int newDays = days + (months * 30) + (years * 365);\n            if (newDays != days) {\n                days = newDays;\n                normalized = false;\n            }\n        }\n\n        // Create a new period with the normalized values\n        result = new Period(0, 0, 0, days, 0, 0, years, months, 0, type);\n\n        return result.normalizedStandard(type);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..d151e830 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1614,27 +1614,40 @@ public final class Period\n      * @since 1.5\n      */\n     public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+        long millis = getMillis();\n         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n+        int years = result.getYears();\n+        int months = result.getMonths();\n+        int days = result.getDays();\n+\n+        // Normalize the period by repeatedly converting to and from standard form until no further changes occur\n+        boolean normalized = false;\n+        while (!normalized) {\n+            normalized = true;\n+            int newYears = years + (months / 12);\n+            int newMonths = months % 12;\n+            if (newYears != years || newMonths != months) {\n+                years = newYears;\n+                months = newMonths;\n+                normalized = false;\n             }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+\n+            int newDays = days + (months * 30) + (years * 365);\n+            if (newDays != days) {\n+                days = newDays;\n+                normalized = false;\n             }\n         }\n-        return result;\n+\n+        // Create a new period with the normalized values\n+        result = new Period(0, 0, 0, days, 0, 0, years, months, 0, type);\n+\n+        return result.normalizedStandard(type);\n     }\n \n }",
    "result_reason": "error: no suitable constructor found for Period(int,int,int,int,int,int,int,int,int,PeriodType)",
    "test_result": "ERROR"
}