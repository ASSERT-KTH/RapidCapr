{
    "patch": "          // Function declarations have their own var scope.\n          return false;\n        } else if (block.isLoop) {\n          // We can't tell whether the loop will execute or not.\n          return false;\n        } else if (!block.equals(ref.getBasicBlock())) {\n          // If the block is not the one containing the assignment, the variable may be modified elsewhere.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..48b33035 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Function declarations have their own var scope.\n+          return false;\n+        } else if (block.isLoop) {\n+          // We can't tell whether the loop will execute or not.\n+          return false;\n+        } else if (!block.equals(ref.getBasicBlock())) {\n+          // If the block is not the one containing the assignment, the variable may be modified elsewhere.\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}