{
    "patch": "public class Values {\n\n    private Object[] values;\n\n    public Values(Object... values) {\n        this.values = values;\n    }\n\n    public <T> T returnValueFor(Class<T> clazz) {\n        for (Object value : values) {\n            if (clazz.isInstance(value)) {\n                return clazz.cast(value);\n            }\n        }\n        return null;\n    }\n\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..2d129d851 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,24 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class Values {\n+\n+    private Object[] values;\n+\n+    public Values(Object... values) {\n+        this.values = values;\n+    }\n+\n+    public <T> T returnValueFor(Class<T> clazz) {\n+        for (Object value : values) {\n+            if (clazz.isInstance(value)) {\n+                return clazz.cast(value);\n+            }\n+        }\n+        return null;\n+    }\n+\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}