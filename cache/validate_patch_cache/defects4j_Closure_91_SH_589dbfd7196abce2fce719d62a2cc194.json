{
    "patch": "if (parent == null) {\n    return true;\n}\nif (parent.getType() == Token.CALL &&\n    parent.getFirstChild() == n &&\n    parent.getFirstChild().isQualifiedName()) {\n  // Don't traverse calls to functions that may change the value of 'this'.\n  if (getFunctionJsDocInfo(n) == null ||\n      !getFunctionJsDocInfo(n).hasThisType()) {\n    return false;\n  }\n}\n\nif (n.getType() == Token.FUNCTION) {\n  // Don't traverse functions that are constructors or have the @this\n  // or @override annotation.\n  JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n  if (jsDoc != null &&\n      (jsDoc.isConstructor() ||\n       jsDoc.isInterface() ||\n       jsDoc.hasThisType() ||\n       jsDoc.isOverride())) {\n    return false;\n  }\n  \n  // Don't traverse function expressions or arrow functions unless they are\n  // inside a call expression, an object literal key or a variable\n  // declaration/initialization.\n  if (NodeUtil.isGet(parent) ||\n      parent.getType() == Token.NAME ||\n      parent.getType() == Token.ASSIGN ||\n      parent.getType() == Token.OBJECTLIT ||\n      parent.getType() == Token.CALL ||\n      parent.getType() == Token.COMMA) {\n    return true;\n  }\n  return false;\n}\n\nif (NodeUtil.isFunctionExpression(n) && NodeUtil.isGet(parent)) {\n  Node getTarget = parent.getFirstChild();\n  if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n    return false;\n  }\n}\n\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..6473f2c0 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,53 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+if (parent == null) {\n+    return true;\n+}\n+if (parent.getType() == Token.CALL &&\n+    parent.getFirstChild() == n &&\n+    parent.getFirstChild().isQualifiedName()) {\n+  // Don't traverse calls to functions that may change the value of 'this'.\n+  if (getFunctionJsDocInfo(n) == null ||\n+      !getFunctionJsDocInfo(n).hasThisType()) {\n+    return false;\n+  }\n+}\n+\n+if (n.getType() == Token.FUNCTION) {\n+  // Don't traverse functions that are constructors or have the @this\n+  // or @override annotation.\n+  JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+  if (jsDoc != null &&\n+      (jsDoc.isConstructor() ||\n+       jsDoc.isInterface() ||\n+       jsDoc.hasThisType() ||\n+       jsDoc.isOverride())) {\n+    return false;\n+  }\n+  \n+  // Don't traverse function expressions or arrow functions unless they are\n+  // inside a call expression, an object literal key or a variable\n+  // declaration/initialization.\n+  if (NodeUtil.isGet(parent) ||\n+      parent.getType() == Token.NAME ||\n+      parent.getType() == Token.ASSIGN ||\n+      parent.getType() == Token.OBJECTLIT ||\n+      parent.getType() == Token.CALL ||\n+      parent.getType() == Token.COMMA) {\n+    return true;\n+  }\n+  return false;\n+}\n+\n+if (NodeUtil.isFunctionExpression(n) && NodeUtil.isGet(parent)) {\n+  Node getTarget = parent.getFirstChild();\n+  if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n+    return false;\n+  }\n+}\n+\n+return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: variable jsDoc is already defined in method shouldTraverse(NodeTraversal,Node,Node)",
    "test_result": "ERROR"
}