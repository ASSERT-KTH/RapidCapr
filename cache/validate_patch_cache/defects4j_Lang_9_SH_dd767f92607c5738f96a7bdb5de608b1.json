{
    "patch": "if (currentStrategy != null) {\n    boolean strategyAdded = currentStrategy.addRegex(this, regex);\n    if (strategyAdded) {\n        collector.add(currentStrategy);\n    }\n    while (nextStrategy != null) {\n        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n        if (!patternMatcher.lookingAt()) {\n            break;\n        }\n        String nextFormatField = patternMatcher.group();\n        nextStrategy = getStrategy(nextFormatField);\n        if (nextStrategy == null) {\n            break;\n        }\n        strategyAdded = nextStrategy.addRegex(this, regex);\n        if (strategyAdded) {\n            collector.add(nextStrategy);\n            currentStrategy = nextStrategy;\n        }\n    }\n}\nif (collector.isEmpty() || currentStrategy == null) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\ncurrentFormatField = null;\nstrategies = collector.toArray(new Strategy[0]);\nparsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..7e7a461d 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,34 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+if (currentStrategy != null) {\n+    boolean strategyAdded = currentStrategy.addRegex(this, regex);\n+    if (strategyAdded) {\n+        collector.add(currentStrategy);\n+    }\n+    while (nextStrategy != null) {\n+        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+        if (!patternMatcher.lookingAt()) {\n+            break;\n+        }\n+        String nextFormatField = patternMatcher.group();\n+        nextStrategy = getStrategy(nextFormatField);\n+        if (nextStrategy == null) {\n+            break;\n+        }\n+        strategyAdded = nextStrategy.addRegex(this, regex);\n+        if (strategyAdded) {\n+            collector.add(nextStrategy);\n+            currentStrategy = nextStrategy;\n+        }\n+    }\n+}\n+if (collector.isEmpty() || currentStrategy == null) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+currentFormatField = null;\n+strategies = collector.toArray(new Strategy[0]);\n+parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}