{
    "patch": "      if (NodeUtil.isFunctionExpression(n)) {\n        // Don't traverse unassigned function expressions.\n        Node parentParent = parent.getParent();\n        if (parentParent == null ||\n            (parentParent.getType() != Token.VAR &&\n             parentParent.getType() != Token.ASSIGN)) {\n          return false;\n        }\n\n        // Don't traverse function expressions that are getting assigned directly\n        // to an object prototype property or subproperty.\n        Node lValue = null;\n        if (parentParent.getType() == Token.ASSIGN) {\n          lValue = parent.getParent().getFirstChild();\n        } else { // parentParent.getType() == Token.VAR\n          lValue = parent.getFirstChild();\n        }\n        if (isPrototypePropertyDefinition(lValue)) {\n          return false;\n        }\n\n        // Don't traverse function expressions that are getting assigned to a variable\n        // that a caller might try to new.\n        if (parent.getGrandparent().getType() == Token.NEW) {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..7cfe436e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,33 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isFunctionExpression(n)) {\n+        // Don't traverse unassigned function expressions.\n+        Node parentParent = parent.getParent();\n+        if (parentParent == null ||\n+            (parentParent.getType() != Token.VAR &&\n+             parentParent.getType() != Token.ASSIGN)) {\n+          return false;\n+        }\n+\n+        // Don't traverse function expressions that are getting assigned directly\n+        // to an object prototype property or subproperty.\n+        Node lValue = null;\n+        if (parentParent.getType() == Token.ASSIGN) {\n+          lValue = parent.getParent().getFirstChild();\n+        } else { // parentParent.getType() == Token.VAR\n+          lValue = parent.getFirstChild();\n+        }\n+        if (isPrototypePropertyDefinition(lValue)) {\n+          return false;\n+        }\n+\n+        // Don't traverse function expressions that are getting assigned to a variable\n+        // that a caller might try to new.\n+        if (parent.getGrandparent().getType() == Token.NEW) {\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}