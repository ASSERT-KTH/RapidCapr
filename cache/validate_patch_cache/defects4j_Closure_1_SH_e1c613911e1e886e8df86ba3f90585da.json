{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n\n    Node block = NodeUtil.getFunctionBody(function);\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    int argCount = 0;\n    int uncalledArgCount = 0;\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n        uncalledArgCount++;\n        continue;\n      }\n      argCount++;\n    }\n\n    if (uncalledArgCount == argCount || modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n      return;\n    }\n\n    // Strip unreferenced args off the end of the function declaration.\n    while (uncalledArgCount-- > 0) {\n      Node arg = argList.getLastChild();\n      if (arg == null) {\n        break; // Should never happen.\n      }\n      while (uncalledArgCount > 0 && !referenced.contains(fnScope.getVar(arg.getString()))) {\n        uncalledArgCount--;\n        argList.removeChild(arg);\n        arg = argList.getLastChild();\n      }\n      if (uncalledArgCount == 0 || arg == null) {\n        break; // Don't remove args called by a sparse call site.\n      }\n      if (!NodeUtil.mayHaveSideEffects(arg.getNext())) {\n        argList.removeChild(arg);\n        compiler.reportCodeChange();\n      }\n      uncalledArgCount--;\n    }\n\n    Node firstDanglingArg = argList.getFirstChild();\n    if (firstDanglingArg != null && !NodeUtil.mayHaveSideEffects(firstDanglingArg)) {\n      Preconditions.checkState(NodeUtil.isImmutableValue(firstDanglingArg));\n      block.addChildToFront(IR.exprResult(NodeUtil.newUndefinedNode(firstDanglingArg)));\n      compiler.reportCodeChange();\n      if (argList.getFirstChild() == null) {\n        NodeUtil.markFunctionsDeleted(function, compiler);\n      }\n    }\n\n    if (function.getParent().isScript()) {\n      NodeUtil.markFunctionsDeleted(function, compiler);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..763aba59 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,64 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+\n+    Node block = NodeUtil.getFunctionBody(function);\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    int argCount = 0;\n+    int uncalledArgCount = 0;\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+        uncalledArgCount++;\n+        continue;\n+      }\n+      argCount++;\n+    }\n+\n+    if (uncalledArgCount == argCount || modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+      return;\n+    }\n+\n+    // Strip unreferenced args off the end of the function declaration.\n+    while (uncalledArgCount-- > 0) {\n+      Node arg = argList.getLastChild();\n+      if (arg == null) {\n+        break; // Should never happen.\n+      }\n+      while (uncalledArgCount > 0 && !referenced.contains(fnScope.getVar(arg.getString()))) {\n+        uncalledArgCount--;\n+        argList.removeChild(arg);\n+        arg = argList.getLastChild();\n+      }\n+      if (uncalledArgCount == 0 || arg == null) {\n+        break; // Don't remove args called by a sparse call site.\n+      }\n+      if (!NodeUtil.mayHaveSideEffects(arg.getNext())) {\n+        argList.removeChild(arg);\n+        compiler.reportCodeChange();\n+      }\n+      uncalledArgCount--;\n+    }\n+\n+    Node firstDanglingArg = argList.getFirstChild();\n+    if (firstDanglingArg != null && !NodeUtil.mayHaveSideEffects(firstDanglingArg)) {\n+      Preconditions.checkState(NodeUtil.isImmutableValue(firstDanglingArg));\n+      block.addChildToFront(IR.exprResult(NodeUtil.newUndefinedNode(firstDanglingArg)));\n+      compiler.reportCodeChange();\n+      if (argList.getFirstChild() == null) {\n+        NodeUtil.markFunctionsDeleted(function, compiler);\n+      }\n+    }\n+\n+    if (function.getParent().isScript()) {\n+      NodeUtil.markFunctionsDeleted(function, compiler);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}