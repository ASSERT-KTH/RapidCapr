{
    "patch": "public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n    if (expected.length < 2 || expected.length != observed.length) {\n        throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n    }\n    if (!isPositive(expected) || !isNonNegative(observed)) {\n        throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be positive\");\n    }\n    double sumExpected = 0.0;\n    for (double exp : expected) {\n        sumExpected += exp;\n    }\n    double[] normalizedExpected = new double[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n        normalizedExpected[i] = expected[i] * sum(observed) / sumExpected;\n    }\n    double chiSquare = 0.0;\n    for (int i = 0; i < observed.length; i++) {\n        double diff = observed[i] - normalizedExpected[i];\n        chiSquare += (diff * diff) / normalizedExpected[i];\n    }\n    return chiSquare;\n}\n\nprivate double sum(long[] values) {\n    double result = 0.0;\n    for (long value : values) {\n        result += value;\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..a2ee1e36b 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,24 +61,37 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n-        }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n-        }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n-        for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n-        }\n-        return sumSq;\n+public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n+    if (expected.length < 2 || expected.length != observed.length) {\n+        throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n     }\n+    if (!isPositive(expected) || !isNonNegative(observed)) {\n+        throw new IllegalArgumentException(\n+                \"observed counts must be non-negative and expected counts must be positive\");\n+    }\n+    double sumExpected = 0.0;\n+    for (double exp : expected) {\n+        sumExpected += exp;\n+    }\n+    double[] normalizedExpected = new double[expected.length];\n+    for (int i = 0; i < expected.length; i++) {\n+        normalizedExpected[i] = expected[i] * sum(observed) / sumExpected;\n+    }\n+    double chiSquare = 0.0;\n+    for (int i = 0; i < observed.length; i++) {\n+        double diff = observed[i] - normalizedExpected[i];\n+        chiSquare += (diff * diff) / normalizedExpected[i];\n+    }\n+    return chiSquare;\n+}\n+\n+private double sum(long[] values) {\n+    double result = 0.0;\n+    for (long value : values) {\n+        result += value;\n+    }\n+    return result;\n+}\n \n     /**\n      * {@inheritDoc}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}