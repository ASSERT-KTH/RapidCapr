{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n    Node child = n.getFirstChild();\n    Node parent = n.getParent();\n\n    // Traverse up the parent tree and check if the expression is inside a conditional, loop, or hook\n    while (parent != null) {\n      int type = parent.getType();\n      if (type == Token.HOOK || type == Token.AND || type == Token.OR) {\n        return false;\n      }\n      if (NodeUtil.isLoopStructure(parent)) {\n        Node condition = NodeUtil.getConditionExpression(parent);\n        if (condition != null && NodeUtil.isExpressionNode(condition)) {\n          return false;\n        }\n        break;\n      }\n      if (type == Token.IF) {\n        Node condition = NodeUtil.getConditionExpression(parent);\n        if (condition != null && NodeUtil.isExpressionNode(condition)) {\n          return false;\n        }\n      }\n      parent = parent.getParent();\n    }\n\n    if (child.getType() == Token.EXPR_RESULT) {\n      if (NodeUtil.isExpressionNode(child.getFirstChild())) {\n        return NodeUtil.mayHaveSideEffects(child.getFirstChild());\n      }\n      return true;\n    }\n\n    return NodeUtil.isExpressionNode(child);\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..05ce3abc 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,44 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n+    Node child = n.getFirstChild();\n+    Node parent = n.getParent();\n+\n+    // Traverse up the parent tree and check if the expression is inside a conditional, loop, or hook\n+    while (parent != null) {\n+      int type = parent.getType();\n+      if (type == Token.HOOK || type == Token.AND || type == Token.OR) {\n+        return false;\n+      }\n+      if (NodeUtil.isLoopStructure(parent)) {\n+        Node condition = NodeUtil.getConditionExpression(parent);\n+        if (condition != null && NodeUtil.isExpressionNode(condition)) {\n+          return false;\n+        }\n+        break;\n       }\n+      if (type == Token.IF) {\n+        Node condition = NodeUtil.getConditionExpression(parent);\n+        if (condition != null && NodeUtil.isExpressionNode(condition)) {\n+          return false;\n+        }\n+      }\n+      parent = parent.getParent();\n     }\n \n-    return false;\n+    if (child.getType() == Token.EXPR_RESULT) {\n+      if (NodeUtil.isExpressionNode(child.getFirstChild())) {\n+        return NodeUtil.mayHaveSideEffects(child.getFirstChild());\n+      }\n+      return true;\n+    }\n+\n+    return NodeUtil.isExpressionNode(child);\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}