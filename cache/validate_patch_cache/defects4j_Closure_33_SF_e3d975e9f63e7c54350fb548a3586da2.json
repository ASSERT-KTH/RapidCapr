{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  // We only want to match constraints on anonymous types.\n  if (constraintObj.isNominalConstructor() || !constraintObj.getDisplayName().isEmpty()) {\n    return;\n  }\n\n  // Handle the case where the constraint object is a record type.\n  //\n  // param constraintObj {{prop: (number|undefined)}}\n  // function f(constraintObj) {}\n  // f({});\n  //\n  // We want to modify the object literal to match the constraint, by\n  // taking each property on the record and trying to match properties on this object.\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n          if (propType.isUnknownType()) {\n            // If the property has an unknown type, we infer it as a generic type\n            // to allow for any possible type to be used.\n            typeToInfer = registry.createTemplateType(registry.getType(\"?\", null));\n          } else if (propType.isUnionType()) {\n            // If the property has a union type, we infer it as a union of a\n            // generic type along with the original types.\n            JSType possibleTypes = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n            // Create a generic type to represent the unknown type.\n            JSType unknownType = registry.createTemplateType(\n                registry.getType(\"?\", null));\n            typeToInfer = JSType.join(possibleTypes, unknownType);\n          }\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..6359ff11 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,45 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+public void matchConstraint(ObjectType constraintObj) {\n+  // We only want to match constraints on anonymous types.\n+  if (constraintObj.isNominalConstructor() || !constraintObj.getDisplayName().isEmpty()) {\n+    return;\n+  }\n+\n+  // Handle the case where the constraint object is a record type.\n+  //\n+  // param constraintObj {{prop: (number|undefined)}}\n+  // function f(constraintObj) {}\n+  // f({});\n+  //\n+  // We want to modify the object literal to match the constraint, by\n+  // taking each property on the record and trying to match properties on this object.\n+  if (constraintObj.isRecordType()) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer = propType;\n+        if (!hasProperty(prop)) {\n+          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);\n+          if (propType.isUnknownType()) {\n+            // If the property has an unknown type, we infer it as a generic type\n+            // to allow for any possible type to be used.\n+            typeToInfer = registry.createTemplateType(registry.getType(\"?\", null));\n+          } else if (propType.isUnionType()) {\n+            // If the property has a union type, we infer it as a union of a\n+            // generic type along with the original types.\n+            JSType possibleTypes = getNativeType(JSTypeNative.VOID_TYPE)\n                 .getLeastSupertype(propType);\n+            // Create a generic type to represent the unknown type.\n+            JSType unknownType = registry.createTemplateType(\n+                registry.getType(\"?\", null));\n+            typeToInfer = JSType.join(possibleTypes, unknownType);\n           }\n-          defineInferredProperty(prop, typeToInfer, null);\n         }\n+        defineInferredProperty(prop, typeToInfer, null);\n       }\n     }\n   }\n }\n+}",
    "result_reason": "error: no suitable method found for getType(String,<null>)",
    "test_result": "ERROR"
}