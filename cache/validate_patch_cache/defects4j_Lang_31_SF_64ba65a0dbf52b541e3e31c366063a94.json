{
    "patch": "public static boolean containsAny(char[] str, char[] searchChars) {\n    for (int i = 0; i < str.length; i++) {\n        char ch = str[i];\n        if (Character.isHighSurrogate(ch) && i < str.length - 1) {\n            char ch2 = str[i + 1];\n            if (Character.isLowSurrogate(ch2)) {\n                ch = Character.toCodePoint(ch, ch2);\n                i++;\n            }\n        }\n        for (int j = 0; j < searchChars.length; j++) {\n            char searchChar = searchChars[j];\n            if (Character.isHighSurrogate(searchChar) && j < searchChars.length - 1) {\n                char searchChar2 = searchChars[j + 1];\n                if (Character.isLowSurrogate(searchChar2)) {\n                    searchChar = Character.toCodePoint(searchChar, searchChar2);\n                    j++;\n                }\n            }\n            if (ch == searchChar) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..87cf2dd8 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,32 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(char[] str, char[] searchChars) {\n+    for (int i = 0; i < str.length; i++) {\n+        char ch = str[i];\n+        if (Character.isHighSurrogate(ch) && i < str.length - 1) {\n+            char ch2 = str[i + 1];\n+            if (Character.isLowSurrogate(ch2)) {\n+                ch = Character.toCodePoint(ch, ch2);\n+                i++;\n+            }\n+        }\n+        for (int j = 0; j < searchChars.length; j++) {\n+            char searchChar = searchChars[j];\n+            if (Character.isHighSurrogate(searchChar) && j < searchChars.length - 1) {\n+                char searchChar2 = searchChars[j + 1];\n+                if (Character.isLowSurrogate(searchChar2)) {\n+                    searchChar = Character.toCodePoint(searchChar, searchChar2);\n+                    j++;\n+                }\n+            }\n+            if (ch == searchChar) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}