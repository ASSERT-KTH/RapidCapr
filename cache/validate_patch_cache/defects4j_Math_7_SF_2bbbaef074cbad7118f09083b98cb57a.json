{
    "patch": "public int compare(EventState es0, EventState es1) {\n    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n}\n\npublic void addEventState(EventState ev) {\n    try {\n        queue.add(ev);\n    } catch (IllegalStateException e) {\n        final PriorityQueue<EventState> tmp = queue;\n        queue = new PriorityQueue<>(tmp.size() + 1, comparator);\n        queue.addAll(tmp);\n        queue.add(ev);\n    }\n}\n\npublic void clearEventsStates() {\n    queue.clear();\n}\n\npublic boolean eventsStatesEmpty() {\n    return queue.isEmpty();\n}\n\npublic Iterator<EventState> getEventsStatesIterator() {\n    return queue.iterator();\n}\n\npublic boolean removeEventState(EventState ev) {\n    return queue.remove(ev);\n}\n\npublic void resetEventsStates(final Collection<EventState> events) {\n    clearEventsStates();\n    for (final EventState state : events) {\n        try {\n            addEventState(state);\n        } catch (OverflowException e) {\n            throw new IllegalArgumentException(e);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..432ea02f3 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,47 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n-\n-            });\n-\n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n+public int compare(EventState es0, EventState es1) {\n+    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n+}\n \n-            while (!occuringEvents.isEmpty()) {\n+public void addEventState(EventState ev) {\n+    try {\n+        queue.add(ev);\n+    } catch (IllegalStateException e) {\n+        final PriorityQueue<EventState> tmp = queue;\n+        queue = new PriorityQueue<>(tmp.size() + 1, comparator);\n+        queue.addAll(tmp);\n+        queue.add(ev);\n+    }\n+}\n \n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n+public void clearEventsStates() {\n+    queue.clear();\n+}\n \n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n+public boolean eventsStatesEmpty() {\n+    return queue.isEmpty();\n+}\n \n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n+public Iterator<EventState> getEventsStatesIterator() {\n+    return queue.iterator();\n+}\n \n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+public boolean removeEventState(EventState ev) {\n+    return queue.remove(ev);\n+}\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+public void resetEventsStates(final Collection<EventState> events) {\n+    clearEventsStates();\n+    for (final EventState state : events) {\n+        try {\n+            addEventState(state);\n+        } catch (OverflowException e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}