{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    if (! NodeUtil.isFunctionExpression(n)) {\n        return false;\n    }\n    String functionName = NodeUtil.getFunctionName(n);\n    Node functionBody = NodeUtil.getFunctionBody(n);\n    return functionName != null && functionBody != null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..8955ac3d 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,14 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    if (! NodeUtil.isFunctionExpression(n)) {\n+        return false;\n+    }\n+    String functionName = NodeUtil.getFunctionName(n);\n+    Node functionBody = NodeUtil.getFunctionBody(n);\n+    return functionName != null && functionBody != null;\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}