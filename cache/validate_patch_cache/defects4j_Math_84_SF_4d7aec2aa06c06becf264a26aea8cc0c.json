{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            // else if reflected is better than the second-worst point,\n            // replace the worst point with the reflected point\n            else if (comparator.compare(reflected, original[1]) < 0) {\n                simplex[0] = reflected;\n            }\n\n        } else {\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n\n            // if contracted is better than the best point,\n            // compute the expanded simplex\n            if (comparator.compare(contracted, best) < 0) {\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, best) < 0) {\n                    // accept the expanded simplex\n                    simplex = reflectedSimplex;\n                }\n            }\n            // if contracted is still worse than the worst point,\n            // contract the whole simplex around the best point\n            else if (comparator.compare(contracted, original[original.length-1]) >= 0) {\n                for (int i = 1; i < original.length; i++) {\n                    simplex[i] = new RealPointValuePair(\n                        0.5*(original[i].getPoint()[i-1] + best.getPoint()[i-1]), // compute midpoint\n                        Double.NaN, // re-evaluate this point later\n                        false // limit the number of evaluations\n                    );\n                }\n                evaluateSimplex(comparator);\n            }\n            // otherwise, accept the contracted simplex\n            else {\n                simplex = evaluateNewSimplex(original, gamma, comparator);\n            }\n\n        }\n\n        // check convergence\n        if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                original[0], simplex[0])) {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..3a292775f 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,74 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            }\n+            // else if reflected is better than the second-worst point,\n+            // replace the worst point with the reflected point\n+            else if (comparator.compare(reflected, original[1]) < 0) {\n+                simplex[0] = reflected;\n             }\n \n+        } else {\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n \n-            // check convergence\n-                return;\n+            // if contracted is better than the best point,\n+            // compute the expanded simplex\n+            if (comparator.compare(contracted, best) < 0) {\n+                final RealPointValuePair[] reflectedSimplex = simplex;\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+                if (comparator.compare(expanded, best) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = reflectedSimplex;\n+                }\n+            }\n+            // if contracted is still worse than the worst point,\n+            // contract the whole simplex around the best point\n+            else if (comparator.compare(contracted, original[original.length-1]) >= 0) {\n+                for (int i = 1; i < original.length; i++) {\n+                    simplex[i] = new RealPointValuePair(\n+                        0.5*(original[i].getPoint()[i-1] + best.getPoint()[i-1]), // compute midpoint\n+                        Double.NaN, // re-evaluate this point later\n+                        false // limit the number of evaluations\n+                    );\n+                }\n+                evaluateSimplex(comparator);\n+            }\n+            // otherwise, accept the contracted simplex\n+            else {\n+                simplex = evaluateNewSimplex(original, gamma, comparator);\n             }\n \n         }\n \n+        // check convergence\n+        if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                original[0], simplex[0])) {\n+            return;\n+        }\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: no suitable constructor found for RealPointValuePair(double,double,boolean)",
    "test_result": "ERROR"
}