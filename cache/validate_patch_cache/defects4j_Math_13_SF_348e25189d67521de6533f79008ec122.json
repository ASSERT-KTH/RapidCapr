{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final RealMatrix sqrt = m.copy();\n    final double[] tmp = new double[n];\n    for (int i = 0; i < n; i++) {\n        Arrays.fill(tmp, 0.0);\n        tmp[i] = m.getEntry(i, i);\n        for (int j = i + 1; j < n; j++) {\n            tmp[j] = m.getEntry(i, j) / FastMath.sqrt(tmp[i] * tmp[j]);\n        }\n        for (int j = i; j < n; j++) {\n            double sum = 0.0;\n            for (int k = i; k < n; k++) {\n                sum += tmp[k] * m.getEntry(j, k);\n            }\n            sqrt.setEntry(j, i, sum / FastMath.sqrt(tmp[i] * tmp[j]));\n        }\n    }\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b14d8c34f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final RealMatrix sqrt = m.copy();\n+    final double[] tmp = new double[n];\n+    for (int i = 0; i < n; i++) {\n+        Arrays.fill(tmp, 0.0);\n+        tmp[i] = m.getEntry(i, i);\n+        for (int j = i + 1; j < n; j++) {\n+            tmp[j] = m.getEntry(i, j) / FastMath.sqrt(tmp[i] * tmp[j]);\n+        }\n+        for (int j = i; j < n; j++) {\n+            double sum = 0.0;\n+            for (int k = i; k < n; k++) {\n+                sum += tmp[k] * m.getEntry(j, k);\n+            }\n+            sqrt.setEntry(j, i, sum / FastMath.sqrt(tmp[i] * tmp[j]));\n+        }\n     }\n+    return sqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}