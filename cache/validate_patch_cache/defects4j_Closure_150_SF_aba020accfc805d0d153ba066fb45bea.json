{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n  \n  if (n.getType() == Token.LP && parent != null && parent.getType() == Token.EXPR_RESULT) {\n      handleFunctionInputs(parent);\n      defineDeclaredFunction(n.getFirstChild(), n);\n  }\n  else {\n      attachLiteralTypes(n);\n\n      switch (n.getType()) {\n          case Token.FUNCTION:\n              if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.ASSIGN) {\n                  defineDeclaredFunction(n, parent);\n              } else if (n.getFirstChild().getType() == Token.NAME) {\n                  defineDeclaredFunction(n.getFirstChild(), n);\n              }\n              break;\n          case Token.CATCH:\n              defineCatch(n, parent);\n              break;\n          case Token.VAR:\n              defineVar(n, parent);\n              break;\n          default:\n              break;\n      }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..9491ccf1 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,36 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode()) return;\n+  \n+  if (n.getType() == Token.LP && parent != null && parent.getType() == Token.EXPR_RESULT) {\n+      handleFunctionInputs(parent);\n+      defineDeclaredFunction(n.getFirstChild(), n);\n+  }\n+  else {\n       attachLiteralTypes(n);\n+\n       switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+          case Token.FUNCTION:\n+              if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.ASSIGN) {\n+                  defineDeclaredFunction(n, parent);\n+              } else if (n.getFirstChild().getType() == Token.NAME) {\n+                  defineDeclaredFunction(n.getFirstChild(), n);\n+              }\n+              break;\n+          case Token.CATCH:\n+              defineCatch(n, parent);\n+              break;\n+          case Token.VAR:\n+              defineVar(n, parent);\n+              break;\n+          default:\n+              break;\n       }\n-    }\n+  }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}