{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expandedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n\n                // Compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // Accept the contracted simplex\n                    simplex = contractedSimplex;\n\n                } else {\n                    // Perform a shrink\n                    final RealPointValuePair[] shrinkedSimplex =\n                            evaluateNewSimplex(original, gamma, comparator);\n                    for (int i = 0; i < shrinkedSimplex.length; i++) {\n                        if (i != 0) {\n                            final RealPointValuePair[] originalSimplex =\n                                    simplex;\n                            shrinkedSimplex[i] = new RealPointValuePair(getPoint(originalSimplex[i]),\n                                                                         originalSimplex[i].getValue());\n                        }\n                    }\n                    simplex = shrinkedSimplex;\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..1a4484db6 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -75,27 +75,39 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expandedSimplex;\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+            } else {\n+\n+                // Compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // Accept the contracted simplex\n+                    simplex = contractedSimplex;\n+\n+                } else {\n+                    // Perform a shrink\n+                    final RealPointValuePair[] shrinkedSimplex =\n+                            evaluateNewSimplex(original, gamma, comparator);\n+                    for (int i = 0; i < shrinkedSimplex.length; i++) {\n+                        if (i != 0) {\n+                            final RealPointValuePair[] originalSimplex =\n+                                    simplex;\n+                            shrinkedSimplex[i] = new RealPointValuePair(getPoint(originalSimplex[i]),\n+                                                                         originalSimplex[i].getValue());\n+                        }\n+                    }\n+                    simplex = shrinkedSimplex;\n+                }\n             }\n-\n         }\n-\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}