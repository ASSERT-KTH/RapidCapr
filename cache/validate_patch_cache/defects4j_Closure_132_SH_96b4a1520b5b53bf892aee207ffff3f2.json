{
    "patch": "              !mayEffectMutableState(lhs)) {\n            n.removeChild(cond);\n            Node assignName = thenOp.getFirstChild();\n            Node thenExpr = thenOp.getLastChild().detachFromParent();\n            Node elseExpr = elseOp.getLastChild().detachFromParent();\n\n            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n            Node assign = new Node(Token.ASSIGN, assignName, hookNode).srcref(thenOp);\n            Node expr = NodeUtil.newExpr(assign);\n            parent.replaceChild(n, expr);\n            reportCodeChange();\n\n            return expr;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..dcdbe3c2 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -780,6 +780,19 @@ class PeepholeSubstituteAlternateSyntax\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n               !mayEffectMutableState(lhs)) {\n+            n.removeChild(cond);\n+            Node assignName = thenOp.getFirstChild();\n+            Node thenExpr = thenOp.getLastChild().detachFromParent();\n+            Node elseExpr = elseOp.getLastChild().detachFromParent();\n+\n+            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+            Node assign = new Node(Token.ASSIGN, assignName, hookNode).srcref(thenOp);\n+            Node expr = NodeUtil.newExpr(assign);\n+            parent.replaceChild(n, expr);\n+            reportCodeChange();\n+\n+            return expr;\n+          }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}