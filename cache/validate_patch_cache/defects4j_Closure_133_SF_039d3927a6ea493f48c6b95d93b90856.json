{
    "patch": "private String getRemainingJSDocLine() {\n  String result = null;\n  try {\n    result = stream.getRemainingJSDocLine();\n  } catch (IllegalStateException e) {\n    // Ignore exception since it's likely caused by reaching the end of the stream\n  }\n  if (result == null || result.trim().isEmpty() || result.trim().startsWith(\"*\")) {\n    return null;\n  }\n  return result.trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..7efb57e9 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,18 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n-    String result = stream.getRemainingJSDocLine();\n-    return result;\n+private String getRemainingJSDocLine() {\n+  String result = null;\n+  try {\n+    result = stream.getRemainingJSDocLine();\n+  } catch (IllegalStateException e) {\n+    // Ignore exception since it's likely caused by reaching the end of the stream\n+  }\n+  if (result == null || result.trim().isEmpty() || result.trim().startsWith(\"*\")) {\n+    return null;\n   }\n+  return result.trim();\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}