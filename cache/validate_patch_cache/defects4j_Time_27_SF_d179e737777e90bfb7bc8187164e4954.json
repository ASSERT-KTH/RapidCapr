{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    if (elementPairs == null || elementPairs.isEmpty()) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        if (comp[1] == null) {\n            throw new IllegalStateException(\"Can't build a printer with no formatter\");\n        }\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        if (comp[0] == null) {\n            throw new IllegalStateException(\"Can't build a parser with no formatter\");\n        }\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    }\n    List<Object> newElementPairs = new ArrayList<>();\n    Separator sep = null;\n    int sepIndex = -1;\n    for (int i = 0; i < elementPairs.size(); i++) {\n        if (elementPairs.get(i) instanceof Separator) {\n            sepIndex = i;\n            sep = (Separator) elementPairs.get(i);\n        }\n        if (i == elementPairs.size() - 1) {\n            newElementPairs.add(elementPairs.get(i));\n            if (sep != null) {\n                PeriodFormatter formatter = toFormatter(newElementPairs.subList(0, sepIndex), false, true);\n                PeriodFormatter subFormatter = toFormatter(newElementPairs.subList(sepIndex + 1, newElementPairs.size()), true, notParser);\n                sep = sep.finish(formatter.getPrinter(), subFormatter.getParser());\n                return new PeriodFormatter(sep, sep);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) null, (PeriodParser) comp[1]);\n            }\n        } else {\n            if (sep != null && i > sepIndex) {\n                PeriodFormatter formatter = toFormatter(newElementPairs.subList(0, sepIndex), false, true);\n                PeriodFormatter subFormatter = toFormatter(newElementPairs.subList(sepIndex + 1, newElementPairs.size()), true, notParser);\n                sep = sep.finish(formatter.getPrinter(), subFormatter.getParser());\n                newElementPairs.clear();\n                newElementPairs.add(sep);\n                sep = null;\n                sepIndex = -1;\n            }\n            newElementPairs.add(elementPairs.get(i));\n        }\n    }\n    throw new IllegalStateException(\"Error during parsing\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..d4fa7f20 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,58 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    if (elementPairs == null || elementPairs.isEmpty()) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        if (comp[1] == null) {\n+            throw new IllegalStateException(\"Can't build a printer with no formatter\");\n         }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        if (comp[0] == null) {\n+            throw new IllegalStateException(\"Can't build a parser with no formatter\");\n+        }\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    }\n+    List<Object> newElementPairs = new ArrayList<>();\n+    Separator sep = null;\n+    int sepIndex = -1;\n+    for (int i = 0; i < elementPairs.size(); i++) {\n+        if (elementPairs.get(i) instanceof Separator) {\n+            sepIndex = i;\n+            sep = (Separator) elementPairs.get(i);\n+        }\n+        if (i == elementPairs.size() - 1) {\n+            newElementPairs.add(elementPairs.get(i));\n+            if (sep != null) {\n+                PeriodFormatter formatter = toFormatter(newElementPairs.subList(0, sepIndex), false, true);\n+                PeriodFormatter subFormatter = toFormatter(newElementPairs.subList(sepIndex + 1, newElementPairs.size()), true, notParser);\n+                sep = sep.finish(formatter.getPrinter(), subFormatter.getParser());\n+                return new PeriodFormatter(sep, sep);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) null, (PeriodParser) comp[1]);\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            if (sep != null && i > sepIndex) {\n+                PeriodFormatter formatter = toFormatter(newElementPairs.subList(0, sepIndex), false, true);\n+                PeriodFormatter subFormatter = toFormatter(newElementPairs.subList(sepIndex + 1, newElementPairs.size()), true, notParser);\n+                sep = sep.finish(formatter.getPrinter(), subFormatter.getParser());\n+                newElementPairs.clear();\n+                newElementPairs.add(sep);\n+                sep = null;\n+                sepIndex = -1;\n+            }\n+            newElementPairs.add(elementPairs.get(i));\n         }\n     }\n+    throw new IllegalStateException(\"Error during parsing\");\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}