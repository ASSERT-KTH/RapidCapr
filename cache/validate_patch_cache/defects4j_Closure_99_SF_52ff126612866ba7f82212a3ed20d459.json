{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Check if the function is a constructor or has an override/@this annotation\n    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Only traverse functions if they can have an associated @this\n    // annotation, i.e., are part of a statement or an expression whose\n    // result will be assigned as an object property.\n    if (!NodeUtil.isExpressionNode(parent) &&\n        !(parent.getType() == Token.BLOCK ||\n          parent.getType() == Token.SCRIPT ||\n          parent.getType() == Token.NAME ||\n          parent.getType() == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  // Traverse the left-hand side of an assignment\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle nested\n      // assignments properly (e.g., `(a = this).property = c;`),\n      // `assignLhsChild` should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right-hand side if it is not\n      // (1) an assignment to a prototype property, or\n      // (2) a function expression, or\n      // (3) a property access of `this` that is a function.\n      if (lhs.getType() == Token.GETPROP) {\n        Node objectNode = lhs.getFirstChild();\n        Node propertyNode = objectNode.getNext();\n\n        if (propertyNode.getString().equals(\"prototype\") ||\n            propertyNode.getString().contains(\".prototype.\")) {\n          return false;\n        }\n\n        if (n.getType() == Token.FUNCTION) {\n          return false;\n        }\n\n        if (objectNode.getType() == Token.THIS &&\n            NodeUtil.isFunctionExpression(n)) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..3e57cf25 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,60 +81,70 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  if (n.getType() == Token.FUNCTION) {\n+    // Check if the function is a constructor or has an override/@this annotation\n+    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+    if (jsDoc != null &&\n+        (jsDoc.isConstructor() ||\n+         jsDoc.hasThisType() ||\n+         jsDoc.isOverride())) {\n+      return false;\n+    }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+    // Only traverse functions if they can have an associated @this\n+    // annotation, i.e., are part of a statement or an expression whose\n+    // result will be assigned as an object property.\n+    if (!NodeUtil.isExpressionNode(parent) &&\n+        !(parent.getType() == Token.BLOCK ||\n+          parent.getType() == Token.SCRIPT ||\n+          parent.getType() == Token.NAME ||\n+          parent.getType() == Token.ASSIGN)) {\n+      return false;\n     }\n+  }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+  // Traverse the left-hand side of an assignment\n+  if (parent != null && parent.getType() == Token.ASSIGN) {\n+    Node lhs = parent.getFirstChild();\n+    Node rhs = lhs.getNext();\n+\n+    if (n == lhs) {\n+      // Always traverse the left side of the assignment. To handle nested\n+      // assignments properly (e.g., `(a = this).property = c;`),\n+      // `assignLhsChild` should not be overridden.\n+      if (assignLhsChild == null) {\n+        assignLhsChild = lhs;\n+      }\n+    } else {\n+      // Only traverse the right-hand side if it is not\n+      // (1) an assignment to a prototype property, or\n+      // (2) a function expression, or\n+      // (3) a property access of `this` that is a function.\n+      if (lhs.getType() == Token.GETPROP) {\n+        Node objectNode = lhs.getFirstChild();\n+        Node propertyNode = objectNode.getNext();\n+\n+        if (propertyNode.getString().equals(\"prototype\") ||\n+            propertyNode.getString().contains(\".prototype.\")) {\n+          return false;\n+        }\n+\n+        if (n.getType() == Token.FUNCTION) {\n+          return false;\n+        }\n+\n+        if (objectNode.getType() == Token.THIS &&\n+            NodeUtil.isFunctionExpression(n)) {\n+          return false;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n       }\n     }\n-\n-    return true;\n   }\n \n+  return true;\n+}\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}