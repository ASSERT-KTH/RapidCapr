{
    "patch": "if (n.getType() == Token.URSH) {\n    // Unsigned shift with negative double operand is problematic\n    if (lval < 0) {\n        lval += Math.pow(2,32);\n        lvalInt = (int)lval;\n    }\n    // Only use the least significant 5 bits of rval\n    rvalInt &= 0x1f;\n    long lvalLong = Integer.toUnsignedLong(lvalInt);\n    result = lvalLong >>> rvalInt;\n} else {\n    // Only use the least significant 5 bits of rval\n    rvalInt &= 0x1f;\n    result = lvalInt >> rvalInt;\n    if (n.getType() == Token.LSH) {\n        result = lvalInt << rvalInt;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..2d07df0e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,24 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+if (n.getType() == Token.URSH) {\n+    // Unsigned shift with negative double operand is problematic\n+    if (lval < 0) {\n+        lval += Math.pow(2,32);\n+        lvalInt = (int)lval;\n+    }\n+    // Only use the least significant 5 bits of rval\n+    rvalInt &= 0x1f;\n+    long lvalLong = Integer.toUnsignedLong(lvalInt);\n+    result = lvalLong >>> rvalInt;\n+} else {\n+    // Only use the least significant 5 bits of rval\n+    rvalInt &= 0x1f;\n+    result = lvalInt >> rvalInt;\n+    if (n.getType() == Token.LSH) {\n+        result = lvalInt << rvalInt;\n+    }\n+}\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}