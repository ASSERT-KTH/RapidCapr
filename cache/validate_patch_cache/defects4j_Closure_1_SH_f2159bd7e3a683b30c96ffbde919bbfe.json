{
    "patch": "    // Check whether any argument is used via the arguments object\n    boolean argumentsUsed = NodeUtil.isArgumentsUsed(fnScope);\n    for (Node arg : argList.children()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var) && !argumentsUsed) {\n        arg.detach();\n        compiler.reportCodeChange();\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8c45829b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,14 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Check whether any argument is used via the arguments object\n+    boolean argumentsUsed = NodeUtil.isArgumentsUsed(fnScope);\n+    for (Node arg : argList.children()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var) && !argumentsUsed) {\n+        arg.detach();\n+        compiler.reportCodeChange();\n+      }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}