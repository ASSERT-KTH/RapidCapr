{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      final double m1 = v1.getNorm();\n      final double m2 = v2.getNorm();\n      final double n1x = v1.getX() / m1;\n      final double n1y = v1.getY() / m1;\n      final double n1z = v1.getZ() / m1;\n      final double n2x = v2.getX() / m2;\n      final double n2y = v2.getY() / m2;\n      final double n2z = v2.getZ() / m2;\n      final double cx = n1y * n2z - n1z * n2y;\n      final double cy = n1z * n2x - n1x * n2z;\n      final double cz = n1x * n2y - n1y * n2x;\n      final double m3 = Math.sqrt(cx * cx + cy * cy + cz * cz);\n      if (m3 == 0.0) {\n          return Vector3D.ZERO;\n      }\n      return new Vector3D(cx * m3, cy * m3, cz * m3);\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..167785550 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,21 +456,22 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      final double m1 = v1.getNorm();\n+      final double m2 = v2.getNorm();\n+      final double n1x = v1.getX() / m1;\n+      final double n1y = v1.getY() / m1;\n+      final double n1z = v1.getZ() / m1;\n+      final double n2x = v2.getX() / m2;\n+      final double n2y = v2.getY() / m2;\n+      final double n2z = v2.getZ() / m2;\n+      final double cx = n1y * n2z - n1z * n2y;\n+      final double cy = n1z * n2x - n1x * n2z;\n+      final double cz = n1x * n2y - n1y * n2x;\n+      final double m3 = Math.sqrt(cx * cx + cy * cy + cz * cz);\n+      if (m3 == 0.0) {\n+          return Vector3D.ZERO;\n+      }\n+      return new Vector3D(cx * m3, cy * m3, cz * m3);\n \n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.1362089413207989>",
    "test_result": "FAIL"
}