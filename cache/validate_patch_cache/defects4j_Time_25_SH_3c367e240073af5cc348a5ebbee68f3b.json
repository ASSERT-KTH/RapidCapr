{
    "patch": "// get the offset at instantLocal (first estimate)\nfinal int offsetLocal = getOffset(instantLocal);\n\n// adjust instantLocal using the estimate and recalc the offset\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\n\nif (offsetLocal < offsetAdjusted && offsetLocal < 0 && offsetAdjusted >= 0) {\n    // transition was recent, get previous transition\n    long prevAdjusted = previousTransition(instantAdjusted);\n    long prevLocal = previousTransition(instantLocal - offsetLocal);\n    if (prevAdjusted < prevLocal && instantLocal == prevLocal - offsetLocal) {\n        // we are currently at a DST gap\n        return offsetAdjusted;\n    } else if (prevAdjusted != prevLocal) {\n        // get the offset at previous transition\n        int offsetPrev = getOffset(prevAdjusted);\n        if (offsetLocal < offsetPrev && offsetPrev <= offsetAdjusted) {\n            // we are currently in a DST overlap, return the earlier offset\n            return offsetLocal;\n        }\n        // no overlap, return the current offset\n        return offsetAdjusted;\n    }\n} else if (offsetLocal > offsetAdjusted && offsetLocal >= 0 && offsetAdjusted < 0) {\n    // transition was recent, get next transition\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted) {\n        // we are currently at a DST gap\n        return offsetLocal;\n    }\n}\n\n// If the offsets differ, we must be near a DST boundary\nif (offsetLocal != offsetAdjusted) {\n    // Find the nearest transition\n    long start;\n    final boolean dstGap;\n    if (offsetLocal < offsetAdjusted) {\n        start = instantAdjusted;\n        dstGap = offsetLocal < 0 && offsetAdjusted >= 0;\n    } else {\n        start = instantLocal - offsetAdjusted;\n        dstGap = offsetLocal >= 0 && offsetAdjusted < 0;\n    }\n\n    long transition = nextTransition(start);\n\n    if (dstGap && transition == (start + ONE_HOUR)) {\n        // If we start in a DST gap, then we move to the first non-gap instant\n        transition = nextTransition(transition);\n    }\n\n    int diff = getOffset(transition) - offsetAdjusted;\n\n    if (diff < 0) {\n        // If use the previous offset\n        transition = previousTransition(start);\n        if (dstGap && transition == (start - ONE_HOUR)) {\n            transition = previousTransition(transition);\n        }\n        int prevOffset = getOffset(transition);\n        if (prevOffset < offsetAdjusted) {\n            return offsetAdjusted;\n        } else {\n            return prevOffset;\n        }\n    } else if (diff > 0) {\n        // Use the new offset\n        return offsetAdjusted;\n    }\n}\n\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..69d816c6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,81 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+// get the offset at instantLocal (first estimate)\n+final int offsetLocal = getOffset(instantLocal);\n+\n+// adjust instantLocal using the estimate and recalc the offset\n+final long instantAdjusted = instantLocal - offsetLocal;\n+final int offsetAdjusted = getOffset(instantAdjusted);\n+\n+if (offsetLocal < offsetAdjusted && offsetLocal < 0 && offsetAdjusted >= 0) {\n+    // transition was recent, get previous transition\n+    long prevAdjusted = previousTransition(instantAdjusted);\n+    long prevLocal = previousTransition(instantLocal - offsetLocal);\n+    if (prevAdjusted < prevLocal && instantLocal == prevLocal - offsetLocal) {\n+        // we are currently at a DST gap\n+        return offsetAdjusted;\n+    } else if (prevAdjusted != prevLocal) {\n+        // get the offset at previous transition\n+        int offsetPrev = getOffset(prevAdjusted);\n+        if (offsetLocal < offsetPrev && offsetPrev <= offsetAdjusted) {\n+            // we are currently in a DST overlap, return the earlier offset\n+            return offsetLocal;\n+        }\n+        // no overlap, return the current offset\n+        return offsetAdjusted;\n+    }\n+} else if (offsetLocal > offsetAdjusted && offsetLocal >= 0 && offsetAdjusted < 0) {\n+    // transition was recent, get next transition\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted) {\n+        // we are currently at a DST gap\n+        return offsetLocal;\n+    }\n+}\n+\n+// If the offsets differ, we must be near a DST boundary\n+if (offsetLocal != offsetAdjusted) {\n+    // Find the nearest transition\n+    long start;\n+    final boolean dstGap;\n+    if (offsetLocal < offsetAdjusted) {\n+        start = instantAdjusted;\n+        dstGap = offsetLocal < 0 && offsetAdjusted >= 0;\n+    } else {\n+        start = instantLocal - offsetAdjusted;\n+        dstGap = offsetLocal >= 0 && offsetAdjusted < 0;\n+    }\n+\n+    long transition = nextTransition(start);\n+\n+    if (dstGap && transition == (start + ONE_HOUR)) {\n+        // If we start in a DST gap, then we move to the first non-gap instant\n+        transition = nextTransition(transition);\n+    }\n+\n+    int diff = getOffset(transition) - offsetAdjusted;\n+\n+    if (diff < 0) {\n+        // If use the previous offset\n+        transition = previousTransition(start);\n+        if (dstGap && transition == (start - ONE_HOUR)) {\n+            transition = previousTransition(transition);\n+        }\n+        int prevOffset = getOffset(transition);\n+        if (prevOffset < offsetAdjusted) {\n+            return offsetAdjusted;\n+        } else {\n+            return prevOffset;\n+        }\n+    } else if (diff > 0) {\n+        // Use the new offset\n+        return offsetAdjusted;\n+    }\n+}\n+\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: variable offsetLocal is already defined in method getOffsetFromLocal(long)",
    "test_result": "ERROR"
}