{
    "patch": "public static double getTypedPercent(JSONObject obj) {\n    double count = 0;\n    double typeCount = 0;\n    JSONArray prop = (JSONArray) obj.get(\"properties\");\n    for (int i = 0; i < prop.size(); i++) {\n        JSONObject jsonObj = (JSONObject) prop.get(i);\n        if (jsonObj.get(\"type\") instanceof String) {\n            String type = (String) jsonObj.get(\"type\");\n            if (type.equals(\"string\") || type.equals(\"number\") || type.equals(\"boolean\")) {\n                typeCount++;\n            }\n        }\n        count++;\n    }\n    if (count == 0) {\n        return 0;\n    }\n    return typeCount * 100 / count;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..d369c7b5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject obj) {\n+    double count = 0;\n+    double typeCount = 0;\n+    JSONArray prop = (JSONArray) obj.get(\"properties\");\n+    for (int i = 0; i < prop.size(); i++) {\n+        JSONObject jsonObj = (JSONObject) prop.get(i);\n+        if (jsonObj.get(\"type\") instanceof String) {\n+            String type = (String) jsonObj.get(\"type\");\n+            if (type.equals(\"string\") || type.equals(\"number\") || type.equals(\"boolean\")) {\n+                typeCount++;\n+            }\n+        }\n+        count++;\n+    }\n+    if (count == 0) {\n+        return 0;\n+    }\n+    return typeCount * 100 / count;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}