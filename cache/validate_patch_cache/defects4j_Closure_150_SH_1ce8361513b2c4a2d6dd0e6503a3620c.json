{
    "patch": "attachLiteralTypes(n);\nif (parent.getType() == Token.LP && parent.getParent() == null && n.getType() == Token.FUNCTION) {\n    handleFunctionInputs(parent);\n} else {\n    switch (n.getType()) {\n        case Token.FUNCTION:\n            // Define a declared function if its name is a direct child of n\n            Node child = n.getFirstChild();\n            if (child != null) {\n                int childType = child.getType();\n                String name = null;\n                if (childType == Token.NAME) {\n                    name = child.getString();\n                } else if (childType == Token.PARAM_LIST) {\n                    defineAnonymousFunction(n, parent);\n                    attachLiteralTypes(child);\n                }\n                defineFunction(n, parent, name);\n            }\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            if (n.hasChildren()) {\n                Node childVar = n.getFirstChild();\n                if (childVar.getType() == Token.NAME) {\n                    defineVar(childVar, parent);\n                    attachLiteralTypes(childVar);\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..d36c1287 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,42 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+attachLiteralTypes(n);\n+if (parent.getType() == Token.LP && parent.getParent() == null && n.getType() == Token.FUNCTION) {\n+    handleFunctionInputs(parent);\n+} else {\n+    switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            // Define a declared function if its name is a direct child of n\n+            Node child = n.getFirstChild();\n+            if (child != null) {\n+                int childType = child.getType();\n+                String name = null;\n+                if (childType == Token.NAME) {\n+                    name = child.getString();\n+                } else if (childType == Token.PARAM_LIST) {\n+                    defineAnonymousFunction(n, parent);\n+                    attachLiteralTypes(child);\n+                }\n+                defineFunction(n, parent, name);\n+            }\n+            break;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            defineCatch(n, parent);\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            if (n.hasChildren()) {\n+                Node childVar = n.getFirstChild();\n+                if (childVar.getType() == Token.NAME) {\n+                    defineVar(childVar, parent);\n+                    attachLiteralTypes(childVar);\n+                }\n+            }\n+            break;\n+        default:\n+            break;\n+    }\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}