{
    "patch": "public static ReturnValuesWithException returnValueFor(Class<?> returnType) throws Exception {\n    ReturnValuesWithException values = new ReturnValuesWithException();\n    if (returnType.equals(Integer.class)) {\n        values.returnValue = 42;\n    } else if (returnType.equals(String.class)) {\n        values.returnValue = \"Hello, world!\";\n    } else if (returnType.equals(List.class)) {\n        values.returnValue = new ArrayList<String>();\n    } else if (returnType.equals(Iterable.class)) {\n        values.returnValue = Collections.emptyList();\n    } else {\n        throw new Exception(\"Type not supported\");\n    }\n    return values;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..e94500052 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,21 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static ReturnValuesWithException returnValueFor(Class<?> returnType) throws Exception {\n+    ReturnValuesWithException values = new ReturnValuesWithException();\n+    if (returnType.equals(Integer.class)) {\n+        values.returnValue = 42;\n+    } else if (returnType.equals(String.class)) {\n+        values.returnValue = \"Hello, world!\";\n+    } else if (returnType.equals(List.class)) {\n+        values.returnValue = new ArrayList<String>();\n+    } else if (returnType.equals(Iterable.class)) {\n+        values.returnValue = Collections.emptyList();\n+    } else {\n+        throw new Exception(\"Type not supported\");\n+    }\n+    return values;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}