{
    "patch": "public <T extends EventDetector> void doEvents(final SpacecraftState s0,\n        final Collection<T> detectors) throws OrekitException {\n    final EventHandler<T> handler = new EventHandler<T>(detectors);\n    handler.init(s0, s0.getDate().durationFrom(s0.shiftedBy(60.0)));\n    final double tEnd = handler.getEventTime();\n    StepNormalizer stepNormalizer = new StepNormalizer(tEnd, new FixedStepHandler() {\n        public void init(SpacecraftState s0, double t) throws OrekitException {\n            handler.setInterpolated(s0);\n        }\n\n        public void handleStep(SpacecraftState currentState, boolean isLast) throws OrekitException {\n            if (handler.evaluateStep(currentState)) {\n                handler.eventOccurred(currentState, isLast);\n            }\n        }\n    }, s0.getFrame(), 0.1, s0.getMass());\n    final double maxCheckInterval = handler.getMaxCheckInterval();\n    if (maxCheckInterval < tEnd - s0.getDate().durationFrom(s0)) {\n        final double epsilon = 1.0e-10 * (tEnd - s0.getDate().durationFrom(s0));\n        StepNormalizer truncatedStepNormalizer = new StepNormalizer(tEnd, new FixedStepHandler() {\n            private SpacecraftState lastState;\n\n            public void init(SpacecraftState s0, double t) throws OrekitException {\n                handler.setInterpolated(s0);\n                lastState = s0;\n            }\n\n            public void handleStep(SpacecraftState currentState, boolean isLast) throws OrekitException {\n                if (handler.evaluateStep(currentState)) {\n                    final double previousT = lastState.getDate().durationFrom(s0);\n                    final double currentT = currentState.getDate().durationFrom(s0);\n                    final double shift = (tEnd - epsilon - previousT) / (currentT - previousT);\n                    final double newPreviousT = previousT + shift * (currentT - previousT);\n                    final SpacecraftState previousState = lastState.shiftedBy(newPreviousT - previousT);\n                    handler.eventOccurred(previousState, false);\n                    isLastStepHandler.handleStep(previousState, false); \n                    final double newCurrentT = previousT + shift * (currentT - previousT);\n                    final SpacecraftState truncatedCurrentState = currentState.shiftedBy(newCurrentT - currentT);\n                    if (handler.evaluateStep(truncatedCurrentState)) {\n                        handler.eventOccurred(truncatedCurrentState, isLast);\n                    }\n                } else {\n                    isLastStepHandler.handleStep(currentState, false);\n                }\n                lastState = currentState;\n            }\n        }, s0.getFrame(), maxCheckInterval, s0.getMass());\n        s0.propagate(s0.getDate().shiftedBy(tEnd - epsilon), truncatedStepNormalizer);\n    } else {\n        s0.propagate(s0.getDate().shiftedBy(tEnd), stepNormalizer);\n    }\n    handler.clearProcessedEvents();\n    for (final T detector : detectors) {\n        if (detector.g(new SpacecraftState[] { s0 }).length > 0 ||\n            detector.cross(tEnd - epsilon, new SpacecraftState[] { s0 }) == 0) {\n            handler.addEvent(detector);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..13980b659 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,65 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n-\n-            });\n+public <T extends EventDetector> void doEvents(final SpacecraftState s0,\n+        final Collection<T> detectors) throws OrekitException {\n+    final EventHandler<T> handler = new EventHandler<T>(detectors);\n+    handler.init(s0, s0.getDate().durationFrom(s0.shiftedBy(60.0)));\n+    final double tEnd = handler.getEventTime();\n+    StepNormalizer stepNormalizer = new StepNormalizer(tEnd, new FixedStepHandler() {\n+        public void init(SpacecraftState s0, double t) throws OrekitException {\n+            handler.setInterpolated(s0);\n+        }\n \n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n+        public void handleStep(SpacecraftState currentState, boolean isLast) throws OrekitException {\n+            if (handler.evaluateStep(currentState)) {\n+                handler.eventOccurred(currentState, isLast);\n+            }\n+        }\n+    }, s0.getFrame(), 0.1, s0.getMass());\n+    final double maxCheckInterval = handler.getMaxCheckInterval();\n+    if (maxCheckInterval < tEnd - s0.getDate().durationFrom(s0)) {\n+        final double epsilon = 1.0e-10 * (tEnd - s0.getDate().durationFrom(s0));\n+        StepNormalizer truncatedStepNormalizer = new StepNormalizer(tEnd, new FixedStepHandler() {\n+            private SpacecraftState lastState;\n+\n+            public void init(SpacecraftState s0, double t) throws OrekitException {\n+                handler.setInterpolated(s0);\n+                lastState = s0;\n             }\n \n-            while (!occuringEvents.isEmpty()) {\n-\n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n-\n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n-\n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n-\n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n-\n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n+            public void handleStep(SpacecraftState currentState, boolean isLast) throws OrekitException {\n+                if (handler.evaluateStep(currentState)) {\n+                    final double previousT = lastState.getDate().durationFrom(s0);\n+                    final double currentT = currentState.getDate().durationFrom(s0);\n+                    final double shift = (tEnd - epsilon - previousT) / (currentT - previousT);\n+                    final double newPreviousT = previousT + shift * (currentT - previousT);\n+                    final SpacecraftState previousState = lastState.shiftedBy(newPreviousT - previousT);\n+                    handler.eventOccurred(previousState, false);\n+                    isLastStepHandler.handleStep(previousState, false); \n+                    final double newCurrentT = previousT + shift * (currentT - previousT);\n+                    final SpacecraftState truncatedCurrentState = currentState.shiftedBy(newCurrentT - currentT);\n+                    if (handler.evaluateStep(truncatedCurrentState)) {\n+                        handler.eventOccurred(truncatedCurrentState, isLast);\n+                    }\n+                } else {\n+                    isLastStepHandler.handleStep(currentState, false);\n                 }\n+                lastState = currentState;\n+            }\n+        }, s0.getFrame(), maxCheckInterval, s0.getMass());\n+        s0.propagate(s0.getDate().shiftedBy(tEnd - epsilon), truncatedStepNormalizer);\n+    } else {\n+        s0.propagate(s0.getDate().shiftedBy(tEnd), stepNormalizer);\n+    }\n+    handler.clearProcessedEvents();\n+    for (final T detector : detectors) {\n+        if (detector.g(new SpacecraftState[] { s0 }).length > 0 ||\n+            detector.cross(tEnd - epsilon, new SpacecraftState[] { s0 }) == 0) {\n+            handler.addEvent(detector);\n+        }\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}