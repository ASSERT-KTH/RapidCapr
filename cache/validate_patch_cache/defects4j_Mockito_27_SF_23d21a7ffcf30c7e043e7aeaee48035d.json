{
    "patch": "import org.mockito.Callback;\nimport org.mockito.Mockito;\nimport org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator;\nimport org.mockito.invocation.MockHandler;\nimport org.mockito.mock.MockCreationSettings;\nimport org.mockito.plugins.MockMaker;\nimport org.mockito.stubbing.Answer;\n\npublic class MyClass {\n    private MockMaker mockMaker;\n    private InvocationListener invocationListener;\n\n    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n  \n        MockCreationSettings<T> settings = org.mockito.Mockito.withSettings()\n            .defaultAnswer(RETURNS_DEFAULTS)\n            .extraInterfaces(Factory.class)\n            .spiedInstance(mock);\n\n        MockBytecodeGenerator<T> bytecodeGenerator = new MockBytecodeGenerator<T>();\n        Class<? extends T> mockType = bytecodeGenerator.generateMockClass(settings);\n\n        final MockHandler<T> handler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter filter = new MethodInterceptorFilter(handler, settings.getDefaultAnswer());\n\n        if (mock instanceof Factory) {\n            ((Factory) mock).setCallbacks(new Callback[]{filter});\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..024d6630f 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,38 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.Callback;\n+import org.mockito.Mockito;\n+import org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator;\n+import org.mockito.invocation.MockHandler;\n+import org.mockito.mock.MockCreationSettings;\n+import org.mockito.plugins.MockMaker;\n+import org.mockito.stubbing.Answer;\n+\n+public class MyClass {\n+    private MockMaker mockMaker;\n+    private InvocationListener invocationListener;\n+\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+  \n+        MockCreationSettings<T> settings = org.mockito.Mockito.withSettings()\n+            .defaultAnswer(RETURNS_DEFAULTS)\n+            .extraInterfaces(Factory.class)\n+            .spiedInstance(mock);\n+\n+        MockBytecodeGenerator<T> bytecodeGenerator = new MockBytecodeGenerator<T>();\n+        Class<? extends T> mockType = bytecodeGenerator.generateMockClass(settings);\n+\n+        final MockHandler<T> handler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter filter = new MethodInterceptorFilter(handler, settings.getDefaultAnswer());\n+\n+        if (mock instanceof Factory) {\n+            ((Factory) mock).setCallbacks(new Callback[]{filter});\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}