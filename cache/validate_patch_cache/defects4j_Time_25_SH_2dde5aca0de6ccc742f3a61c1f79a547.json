{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    int previousOffset = getOffset(nextAdjusted - 1);\n                    // Offset changed without a transition, so we are near\n                    // the border of a transition. Choose the greater of the\n                    // two offsets\n                    return Math.max(offsetLocal, previousOffset);\n                }\n                // if nextLocal == nextAdjusted then we were already at a\n                // transition, but we need to choose the correct side.\n                return offsetLocal;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..367b2efd 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,20 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    int previousOffset = getOffset(nextAdjusted - 1);\n+                    // Offset changed without a transition, so we are near\n+                    // the border of a transition. Choose the greater of the\n+                    // two offsets\n+                    return Math.max(offsetLocal, previousOffset);\n+                }\n+                // if nextLocal == nextAdjusted then we were already at a\n+                // transition, but we need to choose the correct side.\n+                return offsetLocal;\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}