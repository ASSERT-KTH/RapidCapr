{
    "patch": "    Node function = fnScope.getRootNode();    \n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = null;\n      boolean isNoTypeLeading = Types.get().getIsNoTypeLeading();\n      String argName = \"JSCompiler_unreferenced_parameter\";\n      int argNum = 0;\n      for (Node arg : argList.children()) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          if (lastArg == null) {\n            lastArg = new Node(Token.PARAM_LIST)\n                .copyTypeFrom(argList)\n                .useSourceInfoIfMissingFromForTree(argList);\n            lastArg.putBooleanProp(Node.FREE_CALL, argList.isUsingFreeCall());\n          }\n          Node newName = IR.name(argName + (isNoTypeLeading ? \"\" : String.valueOf(argNum++)));\n          newName.setOriginalName(arg.getOriginalName());\n          lastArg.addChildToBack(newName.useSourceInfoIfMissingFromForTree(arg));\n          unreferencedArgsModified = true;\n        } else {\n          lastArg = null;\n        }\n      }\n      if (unreferencedArgsModified) {\n        function.replaceChild(argList, lastArg);\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..7b86e543 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,46 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();    \n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = null;\n+      boolean isNoTypeLeading = Types.get().getIsNoTypeLeading();\n+      String argName = \"JSCompiler_unreferenced_parameter\";\n+      int argNum = 0;\n+      for (Node arg : argList.children()) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          if (lastArg == null) {\n+            lastArg = new Node(Token.PARAM_LIST)\n+                .copyTypeFrom(argList)\n+                .useSourceInfoIfMissingFromForTree(argList);\n+            lastArg.putBooleanProp(Node.FREE_CALL, argList.isUsingFreeCall());\n+          }\n+          Node newName = IR.name(argName + (isNoTypeLeading ? \"\" : String.valueOf(argNum++)));\n+          newName.setOriginalName(arg.getOriginalName());\n+          lastArg.addChildToBack(newName.useSourceInfoIfMissingFromForTree(arg));\n+          unreferencedArgsModified = true;\n+        } else {\n+          lastArg = null;\n+        }\n+      }\n+      if (unreferencedArgsModified) {\n+        function.replaceChild(argList, lastArg);\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}