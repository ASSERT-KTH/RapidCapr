{
    "patch": "                // If we've passed a leap day, we need to handle leap years.\n                if (millis > 0 && millis >= GregorianChronology.MILLIS_PER_DAY && !leapYears.contains(Integer.valueOf(year))) {\n                    // Compute date of Feb 28th in order to compare it to Feb 29th.\n                    // If year is leap, we know that Feb 29th exists.\n                    MutableDateTime feb28 = new MutableDateTime(year, DateTimeConstants.FEBRUARY, 28, 0, 0, 0, 0, chrono);\n                    int days = (int) (millis / GregorianChronology.MILLIS_PER_DAY);\n                    feb28.addDays(days);\n                    if (feb28.getDayOfMonth() == 29 && !chrono.isLeapYear(feb28.getYear())) {\n                        feb28.setDateTime(year, DateTimeConstants.MARCH, 1, 0, 0, 0, 0);                        \n                    }\n                    year = feb28.getYear();                                                            \n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..d3bb1633 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,18 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                // If we've passed a leap day, we need to handle leap years.\n+                if (millis > 0 && millis >= GregorianChronology.MILLIS_PER_DAY && !leapYears.contains(Integer.valueOf(year))) {\n+                    // Compute date of Feb 28th in order to compare it to Feb 29th.\n+                    // If year is leap, we know that Feb 29th exists.\n+                    MutableDateTime feb28 = new MutableDateTime(year, DateTimeConstants.FEBRUARY, 28, 0, 0, 0, 0, chrono);\n+                    int days = (int) (millis / GregorianChronology.MILLIS_PER_DAY);\n+                    feb28.addDays(days);\n+                    if (feb28.getDayOfMonth() == 29 && !chrono.isLeapYear(feb28.getYear())) {\n+                        feb28.setDateTime(year, DateTimeConstants.MARCH, 1, 0, 0, 0, 0);                        \n+                    }\n+                    year = feb28.getYear();                                                            \n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}