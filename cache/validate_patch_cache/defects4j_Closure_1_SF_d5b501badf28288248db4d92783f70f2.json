{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node function = fnScope.getRootNode();\n\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites\n      && callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers) {\n    // Strip unreferenced args from the end of the function declaration.\n    Node lastArg;\n    boolean anyRemoved = false;\n    while ((lastArg = argList.getLastChild()) != null) {\n      String argName = lastArg.getString();\n      if (!referenced.contains(fnScope.getVar(argName))) {\n        // Remove the unused parameter from the scope and the argument list.\n        fnScope.undeclare(varName);\n        argList.removeChild(lastArg);\n        anyRemoved = true;\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n\n    if (anyRemoved) {\n      // Update the 'arguments' object to reflect the new argument list length.\n      if (!function.isArrowFunction()) {\n        Node fnName = NodeUtil.getNameNode(function);\n        if (fnName != null) {\n          fnScope.getVar(fnName.getString()).setInitialValue(\n              irFactory.createNumber(argList.getChildCount()));\n        }\n      }\n      if (!function.isGeneratorFunction()) {\n        // Update the FREE_CALL flag to decide if the function needs the 'arguments' object.\n        boolean freeCall = function.getBooleanProp(Node.FREE_CALL);\n        if (argList.hasChildren()) {\n          Node lastArgNameNode = argList.getLastChild().getFirstChild();\n          String lastArgName = lastArgNameNode.getString();\n          if (lastArgName == null || !lastArgName.equals(\"arguments\")) {\n            freeCall = true;\n          }\n        } else {\n          freeCall = true;\n        }\n        function.putBooleanProp(Node.FREE_CALL, freeCall);\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c682167b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,63 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  Node function = fnScope.getRootNode();\n+\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers = modifyCallSites\n+      && callSiteOptimizer.canModifyCallers(function);\n+  if (!modifyCallers) {\n+    // Strip unreferenced args from the end of the function declaration.\n+    Node lastArg;\n+    boolean anyRemoved = false;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      String argName = lastArg.getString();\n+      if (!referenced.contains(fnScope.getVar(argName))) {\n+        // Remove the unused parameter from the scope and the argument list.\n+        fnScope.undeclare(varName);\n+        argList.removeChild(lastArg);\n+        anyRemoved = true;\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+    }\n+\n+    if (anyRemoved) {\n+      // Update the 'arguments' object to reflect the new argument list length.\n+      if (!function.isArrowFunction()) {\n+        Node fnName = NodeUtil.getNameNode(function);\n+        if (fnName != null) {\n+          fnScope.getVar(fnName.getString()).setInitialValue(\n+              irFactory.createNumber(argList.getChildCount()));\n+        }\n+      }\n+      if (!function.isGeneratorFunction()) {\n+        // Update the FREE_CALL flag to decide if the function needs the 'arguments' object.\n+        boolean freeCall = function.getBooleanProp(Node.FREE_CALL);\n+        if (argList.hasChildren()) {\n+          Node lastArgNameNode = argList.getLastChild().getFirstChild();\n+          String lastArgName = lastArgNameNode.getString();\n+          if (lastArgName == null || !lastArgName.equals(\"arguments\")) {\n+            freeCall = true;\n+          }\n         } else {\n-          break;\n+          freeCall = true;\n         }\n+        function.putBooleanProp(Node.FREE_CALL, freeCall);\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n   }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}