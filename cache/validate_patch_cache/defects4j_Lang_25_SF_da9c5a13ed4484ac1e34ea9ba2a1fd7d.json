{
    "patch": "public static String unescape(String input) {\n    if (input == null || input.isEmpty()) {\n        return input;\n    }\n    StringBuilder result = new StringBuilder(input.length());\n    for (int i = 0; i < input.length(); i++) {\n        char ch = input.charAt(i);\n        if (ch == '\\\\' && i + 2 < input.length()) {\n            char nextChar = input.charAt(i + 1);\n            if (nextChar == 'n') {\n                result.append('\\n');\n                i += 1;\n            } else if (nextChar == '\"') {\n                result.append('\"');\n                i += 1;\n            } else if (nextChar == '\\\\') {\n                result.append('\\\\');\n                i += 1;\n            } else {\n                String hex = input.substring(i + 1, i + 3);\n                try {\n                    int code = Integer.parseInt(hex, 16);\n                    result.append((char) code);\n                } catch (NumberFormatException e) {\n                    result.append('\\\\');\n                }\n                i += 2;\n            }\n        } else {\n            result.append(ch);\n        }\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..110ed4f2 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,40 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String input) {\n+    if (input == null || input.isEmpty()) {\n+        return input;\n+    }\n+    StringBuilder result = new StringBuilder(input.length());\n+    for (int i = 0; i < input.length(); i++) {\n+        char ch = input.charAt(i);\n+        if (ch == '\\\\' && i + 2 < input.length()) {\n+            char nextChar = input.charAt(i + 1);\n+            if (nextChar == 'n') {\n+                result.append('\\n');\n+                i += 1;\n+            } else if (nextChar == '\"') {\n+                result.append('\"');\n+                i += 1;\n+            } else if (nextChar == '\\\\') {\n+                result.append('\\\\');\n+                i += 1;\n+            } else {\n+                String hex = input.substring(i + 1, i + 3);\n+                try {\n+                    int code = Integer.parseInt(hex, 16);\n+                    result.append((char) code);\n+                } catch (NumberFormatException e) {\n+                    result.append('\\\\');\n+                }\n+                i += 2;\n+            }\n+        } else {\n+            result.append(ch);\n+        }\n+    }\n+    return result.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}