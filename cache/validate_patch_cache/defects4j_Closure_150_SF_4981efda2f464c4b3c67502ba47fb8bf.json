{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) return;\n    int type = n.getType();\n    switch (type) {\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n        case Token.FUNCTION:\n            if (parent != null && parent.getType() == Token.EXPR_RESULT) return;\n            defineDeclaredFunction(n, parent);\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.ASSIGN:\n            if (parent.getType() == Token.VAR || parent.getType() == Token.EXPR_RESULT) {\n                attachLiteralTypes(n.getLastChild());\n            }\n            break;\n        case Token.NAME:\n            Node grandparent = parent.getParent();\n            if (grandparent == null) {\n                attachLiteralTypes(n);\n            } else {\n                int grandparentType = grandparent.getType();\n                if (grandparentType == Token.CATCH || grandparentType == Token.VAR ||\n                        grandparentType == Token.ASSIGN || grandparentType == Token.EXPR_RESULT) {\n                    attachLiteralTypes(n);\n                }\n            }\n            break;\n        case Token.LP:\n            if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.ASSIGN) {\n                handleFunctionInputs(n);\n            } else if (parent.getType() == Token.CALL || parent.getType() == Token.NEW) {\n                handleFunctionInputs(parent);\n            } else if (parent.getType() == Token.FUNCTION) {\n                Node firstChild = parent.getFirstChild();\n                if (firstChild.getType() == Token.LP && firstChild.getNext() == n) {\n                    handleFunctionInputs(parent);\n                }\n            }\n            break;\n        default:\n            attachLiteralTypes(n);\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..1ebcff64 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,55 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) return;\n+    int type = n.getType();\n+    switch (type) {\n+        case Token.VAR:\n+            defineVar(n, parent);\n+            break;\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            if (parent != null && parent.getType() == Token.EXPR_RESULT) return;\n+            defineDeclaredFunction(n, parent);\n+            break;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineCatch(n, parent);\n+            break;\n+        case Token.ASSIGN:\n+            if (parent.getType() == Token.VAR || parent.getType() == Token.EXPR_RESULT) {\n+                attachLiteralTypes(n.getLastChild());\n+            }\n+            break;\n+        case Token.NAME:\n+            Node grandparent = parent.getParent();\n+            if (grandparent == null) {\n+                attachLiteralTypes(n);\n+            } else {\n+                int grandparentType = grandparent.getType();\n+                if (grandparentType == Token.CATCH || grandparentType == Token.VAR ||\n+                        grandparentType == Token.ASSIGN || grandparentType == Token.EXPR_RESULT) {\n+                    attachLiteralTypes(n);\n+                }\n+            }\n+            break;\n+        case Token.LP:\n+            if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.ASSIGN) {\n+                handleFunctionInputs(n);\n+            } else if (parent.getType() == Token.CALL || parent.getType() == Token.NEW) {\n+                handleFunctionInputs(parent);\n+            } else if (parent.getType() == Token.FUNCTION) {\n+                Node firstChild = parent.getFirstChild();\n+                if (firstChild.getType() == Token.LP && firstChild.getNext() == n) {\n+                    handleFunctionInputs(parent);\n+                }\n+            }\n+            break;\n+        default:\n+            attachLiteralTypes(n);\n+            break;\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}