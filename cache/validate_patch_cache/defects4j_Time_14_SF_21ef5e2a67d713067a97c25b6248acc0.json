{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n            // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n\n            // Adjust the month and year fields as needed.\n            long instantYearMonth = iChronology.yearMonth().get(instant);\n            int year = iChronology.year().get(instantYearMonth);\n            int month = iChronology.monthOfYear().get(instantYearMonth);\n            int day = iChronology.dayOfMonth().get(instant);\n\n            // Calculate the new year and month values.\n            int newMonth = ((13 + month + valueToAdd) % 12) + 1;\n            int newYear = year + ((13 + month + valueToAdd) / 12);\n\n            // Calculate the maximum day for the new year and month values.\n            int daysInMonth = iChronology.dayOfMonth().getMaximumValue(newYear, newMonth);\n            if (day > daysInMonth) {\n                day = daysInMonth;\n            }\n\n            // Set the new year, month and day fields and return the updated values.\n            instant = iChronology.yearMonthDay().getDateTimeMillis(newYear, newMonth, day, 0);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..a8a18fd4 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -212,7 +212,25 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n+\n+            // Adjust the month and year fields as needed.\n+            long instantYearMonth = iChronology.yearMonth().get(instant);\n+            int year = iChronology.year().get(instantYearMonth);\n+            int month = iChronology.monthOfYear().get(instantYearMonth);\n+            int day = iChronology.dayOfMonth().get(instant);\n+\n+            // Calculate the new year and month values.\n+            int newMonth = ((13 + month + valueToAdd) % 12) + 1;\n+            int newYear = year + ((13 + month + valueToAdd) / 12);\n+\n+            // Calculate the maximum day for the new year and month values.\n+            int daysInMonth = iChronology.dayOfMonth().getMaximumValue(newYear, newMonth);\n+            if (day > daysInMonth) {\n+                day = daysInMonth;\n+            }\n+\n+            // Set the new year, month and day fields and return the updated values.\n+            instant = iChronology.yearMonthDay().getDateTimeMillis(newYear, newMonth, day, 0);\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}