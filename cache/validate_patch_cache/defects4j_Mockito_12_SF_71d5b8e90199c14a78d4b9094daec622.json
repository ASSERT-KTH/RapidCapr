{
    "patch": "public Class<?> getGenericType(Field field) {\n    Type generic = field.getGenericType();\n    if (generic instanceof ParameterizedType) {\n        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n        if (actual instanceof Class) {\n            return (Class<?>) actual;\n        } else if (actual instanceof ParameterizedType) {\n            return getRawType((ParameterizedType) actual);\n        }\n    }\n    return Object.class;\n}\n\nprivate Class<?> getRawType(ParameterizedType parameterizedType) {\n    Type rawType = parameterizedType.getRawType();\n    if (rawType instanceof Class) {\n        return (Class<?>) rawType;\n    } else if (rawType instanceof ParameterizedType) {\n        return getRawType((ParameterizedType) rawType);\n    }\n    throw new IllegalStateException(\"Unexpected non-class raw type: \" + rawType);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..d8f9c888a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,26 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+public Class<?> getGenericType(Field field) {\n+    Type generic = field.getGenericType();\n+    if (generic instanceof ParameterizedType) {\n+        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n+        if (actual instanceof Class) {\n+            return (Class<?>) actual;\n+        } else if (actual instanceof ParameterizedType) {\n+            return getRawType((ParameterizedType) actual);\n+        }\n+    }\n+    return Object.class;\n+}\n+\n+private Class<?> getRawType(ParameterizedType parameterizedType) {\n+    Type rawType = parameterizedType.getRawType();\n+    if (rawType instanceof Class) {\n+        return (Class<?>) rawType;\n+    } else if (rawType instanceof ParameterizedType) {\n+        return getRawType((ParameterizedType) rawType);\n+    }\n+    throw new IllegalStateException(\"Unexpected non-class raw type: \" + rawType);\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}