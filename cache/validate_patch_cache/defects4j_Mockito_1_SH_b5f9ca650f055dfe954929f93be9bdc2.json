{
    "patch": "        Object[] rawArguments = invocation.getRawArguments();\n        int argumentCount = rawArguments.length;\n        int matcherCount = matchers.size();\n        \n        for (int i = 0; i < matcherCount; i++) {\n            \n            if (i < argumentCount) {\n                \n                Matcher m = matchers.get(i);\n                Object arg ",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..9cd6fa11b 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,16 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+        Object[] rawArguments = invocation.getRawArguments();\n+        int argumentCount = rawArguments.length;\n+        int matcherCount = matchers.size();\n+        \n+        for (int i = 0; i < matcherCount; i++) {\n+            \n+            if (i < argumentCount) {\n+                \n+                Matcher m = matchers.get(i);\n+                Object arg \n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}