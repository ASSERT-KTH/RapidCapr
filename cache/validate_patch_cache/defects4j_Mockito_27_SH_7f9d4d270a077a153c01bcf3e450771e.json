{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        \n        if (mock instanceof Factory) {\n            ((Factory) mock).setCallbacks(new Callback[] {newFilter});\n        } else {\n            Mockito.reset(mock);\n            T spy = Mockito.spy(mock);\n            Mockito.when(spy.toString()).thenReturn(mock.toString());\n            Mockito.when(spy.hashCode()).thenReturn(mock.hashCode());\n            Mockito.when(spy.equals(any())).thenReturn(mock.equals(any()));\n            ((MockUtil) mockUtil).getMockHandler(spy).setInterceptors(((MockUtil) mockUtil).getMockHandler(mock).getInterceptors());\n            initializedSpy = spy;\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..4096ad651 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,23 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        \n+        if (mock instanceof Factory) {\n+            ((Factory) mock).setCallbacks(new Callback[] {newFilter});\n+        } else {\n+            Mockito.reset(mock);\n+            T spy = Mockito.spy(mock);\n+            Mockito.when(spy.toString()).thenReturn(mock.toString());\n+            Mockito.when(spy.hashCode()).thenReturn(mock.hashCode());\n+            Mockito.when(spy.equals(any())).thenReturn(mock.equals(any()));\n+            ((MockUtil) mockUtil).getMockHandler(spy).setInterceptors(((MockUtil) mockUtil).getMockHandler(mock).getInterceptors());\n+            initializedSpy = spy;\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}