{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  Stack<Function<Object, JSType>> propertyResolversStack = new Stack<>();\n  boolean resolved = false;\n  boolean implicitCycleDetected = detectImplicitPrototypeCycle();\n\n  while (!resolved) {\n    if (implicitCycleDetected) {\n      handleTypeCycle(t);\n    }\n\n    propertyResolversStack.push(resolver);\n\n    super.resolveInternal(t, enclosing);\n\n    implicitCycleDetected = detectImplicitPrototypeCycle();\n\n    if (implicitCycleDetected) {\n      handleTypeCycle(t);\n    }\n\n    resolved = isResolved();\n\n    if (!resolved) {\n      resolver = propertyResolversStack.pop();\n    }\n  }\n\n  finishPropertyContinuations();\n\n  return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..56943d28 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,38 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  Stack<Function<Object, JSType>> propertyResolversStack = new Stack<>();\n+  boolean resolved = false;\n+  boolean implicitCycleDetected = detectImplicitPrototypeCycle();\n+\n+  while (!resolved) {\n+    if (implicitCycleDetected) {\n       handleTypeCycle(t);\n     }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+    propertyResolversStack.push(resolver);\n+\n+    super.resolveInternal(t, enclosing);\n+\n+    implicitCycleDetected = detectImplicitPrototypeCycle();\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+    if (implicitCycleDetected) {\n       handleTypeCycle(t);\n     }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+    resolved = isResolved();\n+\n+    if (!resolved) {\n+      resolver = propertyResolversStack.pop();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n \n+  finishPropertyContinuations();\n+\n+  return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}