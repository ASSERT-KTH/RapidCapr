{
    "patch": "\n    private RealMatrix squareRoot(RealMatrix m) {\n        final int n = m.getRowDimension();\n        final EigenDecomposition eig = new EigenDecomposition(m);\n        final RealMatrix v = eig.getV();\n        final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n        for (int i = 0; i < n; i++) {\n            double sqrtEigenvalue = Math.max(eig.getRealEigenvalue(i), 0);\n            sqrtEigenvalue = sqrtEigenvalue == 0 ? 0 : Math.sqrt(sqrtEigenvalue);\n            sqrtEigenvalues.setEntry(i, i, sqrtEigenvalue);\n        }\n        final RealMatrix sqrtM = v.multiply(sqrtEigenvalues).multiply(v.transpose());\n        return sqrtM;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..6f68cf1c2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n+\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final int n = m.getRowDimension();\n+        final EigenDecomposition eig = new EigenDecomposition(m);\n+        final RealMatrix v = eig.getV();\n+        final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n+        for (int i = 0; i < n; i++) {\n+            double sqrtEigenvalue = Math.max(eig.getRealEigenvalue(i), 0);\n+            sqrtEigenvalue = sqrtEigenvalue == 0 ? 0 : Math.sqrt(sqrtEigenvalue);\n+            sqrtEigenvalues.setEntry(i, i, sqrtEigenvalue);\n+        }\n+        final RealMatrix sqrtM = v.multiply(sqrtEigenvalues).multiply(v.transpose());\n+        return sqrtM;\n     }\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}