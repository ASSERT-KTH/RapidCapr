{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    long millis = getMillis() + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR);\n\n    int totalDays = getDays() + (getWeeks() * 7);\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n\n    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n\n        int totalMonths = (years * 12) + months;\n        int normalizedYears = totalMonths / 12;\n        int normalizedMonths = totalMonths % 12;\n\n        if (type.isSupported(DurationFieldType.months())) {\n            months = normalizedMonths;\n        } else {\n            days += normalizedMonths * 30;\n            if (days >= 365) { // years containing leap years\n                days = days - 365 - (new DateTime(0, 1, 1, 0, 0, 0, 0, ISOChronology.getInstanceUTC())\n                        .plusYears(normalizedYears).dayOfYear().getMaximumValue() - 1);\n                normalizedYears += 1;\n            } else if (days < 0) { // years containing leap years\n                days = days + 365 + (new DateTime(0, 1, 1, 0, 0, 0, 0, ISOChronology.getInstanceUTC())\n                        .plusYears(normalizedYears - 1).dayOfYear().getMaximumValue() - 1);\n                normalizedYears -= 1;\n            }\n            years += normalizedYears;\n        }\n    }\n\n    if (type.isSupported(DurationFieldType.weeks()) || type.isSupported(DurationFieldType.days())) {\n\n        int totalDaysFromWeeks = weeks * 7;\n        totalDays += totalDaysFromWeeks;\n\n        int normalizedWeeks = totalDays / 7;\n        int normalizedDays = totalDays % 7;\n\n        if (type.isSupported(DurationFieldType.weeks())) {\n            weeks = normalizedWeeks;\n        } else {\n            days += normalizedWeeks * 7;\n        }\n\n        if (type.isSupported(DurationFieldType.days())) {\n            days += normalizedDays;\n        }\n\n        if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n            int totalMonths = (years * 12) + months;\n            years = totalMonths / 12;\n            months = totalMonths % 12;\n        }\n    }\n\n    if (type.isSupported(DurationFieldType.years())) {\n        if (years == 0) {\n            millis += totalDays * DateTimeConstants.MILLIS_PER_DAY;\n            Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n            if (days != 0) {\n                result = result.withDays(days);\n            }\n            if (weeks != 0) {\n                result = result.withWeeks(weeks);\n            }\n            return result.normalizedStandard(type);\n        } else {\n            DateTime startTime = new DateTime(0, 1, 1, 0, 0, 0, 0, ISOChronology.getInstanceUTC());\n            DateTime endTime = startTime.plusYears(years).plusMonths(months).plusWeeks(weeks).plusDays(days);\n            millis += new Duration(startTime, endTime).getMillis();\n            Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n            if (weeks != 0) {\n                result = result.withWeeks(weeks);\n            }\n            if (days != 0) {\n                result = result.withDays(days);\n            }\n            return result.normalizedStandard(type);\n        }\n    } else { // years not supported\n        millis += days * DateTimeConstants.MILLIS_PER_DAY;\n        millis += weeks * DateTimeConstants.MILLIS_PER_WEEK;\n\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        if (days != 0 && type.isSupported(DurationFieldType.days())) {\n            result = result.withDays(days);\n        }\n        if (weeks != 0 && type.isSupported(DurationFieldType.weeks())) {\n            result = result.withWeeks(weeks);\n        }\n        return result.normalizedStandard(type);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..0aab56ee 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,110 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    long millis = getMillis() + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n+            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n+            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR);\n+\n+    int totalDays = getDays() + (getWeeks() * 7);\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+\n+    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n+\n+        int totalMonths = (years * 12) + months;\n+        int normalizedYears = totalMonths / 12;\n+        int normalizedMonths = totalMonths % 12;\n+\n+        if (type.isSupported(DurationFieldType.months())) {\n+            months = normalizedMonths;\n+        } else {\n+            days += normalizedMonths * 30;\n+            if (days >= 365) { // years containing leap years\n+                days = days - 365 - (new DateTime(0, 1, 1, 0, 0, 0, 0, ISOChronology.getInstanceUTC())\n+                        .plusYears(normalizedYears).dayOfYear().getMaximumValue() - 1);\n+                normalizedYears += 1;\n+            } else if (days < 0) { // years containing leap years\n+                days = days + 365 + (new DateTime(0, 1, 1, 0, 0, 0, 0, ISOChronology.getInstanceUTC())\n+                        .plusYears(normalizedYears - 1).dayOfYear().getMaximumValue() - 1);\n+                normalizedYears -= 1;\n+            }\n+            years += normalizedYears;\n+        }\n+    }\n+\n+    if (type.isSupported(DurationFieldType.weeks()) || type.isSupported(DurationFieldType.days())) {\n+\n+        int totalDaysFromWeeks = weeks * 7;\n+        totalDays += totalDaysFromWeeks;\n+\n+        int normalizedWeeks = totalDays / 7;\n+        int normalizedDays = totalDays % 7;\n+\n+        if (type.isSupported(DurationFieldType.weeks())) {\n+            weeks = normalizedWeeks;\n+        } else {\n+            days += normalizedWeeks * 7;\n+        }\n+\n+        if (type.isSupported(DurationFieldType.days())) {\n+            days += normalizedDays;\n+        }\n+\n+        if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n+            int totalMonths = (years * 12) + months;\n+            years = totalMonths / 12;\n+            months = totalMonths % 12;\n+        }\n+    }\n+\n+    if (type.isSupported(DurationFieldType.years())) {\n+        if (years == 0) {\n+            millis += totalDays * DateTimeConstants.MILLIS_PER_DAY;\n+            Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+            if (days != 0) {\n+                result = result.withDays(days);\n+            }\n+            if (weeks != 0) {\n+                result = result.withWeeks(weeks);\n+            }\n+            return result.normalizedStandard(type);\n+        } else {\n+            DateTime startTime = new DateTime(0, 1, 1, 0, 0, 0, 0, ISOChronology.getInstanceUTC());\n+            DateTime endTime = startTime.plusYears(years).plusMonths(months).plusWeeks(weeks).plusDays(days);\n+            millis += new Duration(startTime, endTime).getMillis();\n+            Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n             if (years != 0) {\n                 result = result.withYears(years);\n             }\n             if (months != 0) {\n                 result = result.withMonths(months);\n             }\n+            if (weeks != 0) {\n+                result = result.withWeeks(weeks);\n+            }\n+            if (days != 0) {\n+                result = result.withDays(days);\n+            }\n+            return result.normalizedStandard(type);\n+        }\n+    } else { // years not supported\n+        millis += days * DateTimeConstants.MILLIS_PER_DAY;\n+        millis += weeks * DateTimeConstants.MILLIS_PER_WEEK;\n+\n+        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+        if (days != 0 && type.isSupported(DurationFieldType.days())) {\n+            result = result.withDays(days);\n         }\n-        return result;\n+        if (weeks != 0 && type.isSupported(DurationFieldType.weeks())) {\n+            result = result.withWeeks(weeks);\n+        }\n+        return result.normalizedStandard(type);\n     }\n+}\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}