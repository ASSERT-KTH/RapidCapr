{
    "patch": "            } catch (IllegalFieldValueException e) {\n                if (resetFields) {\n                    for (int i = 0; i < count; i++) {\n                        savedFields[i].restore();\n                    }\n                }\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            } catch (ArithmeticException e) {\n                if (resetFields) {\n                    for (int i = 0; i < count; i++) {\n                        savedFields[i].restore();\n                    }\n                }\n                if (text != null) {\n                    e = new ArithmeticException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage());\n                }\n                throw e;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..d8ea53f1 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,27 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } catch (IllegalFieldValueException e) {\n+                if (resetFields) {\n+                    for (int i = 0; i < count; i++) {\n+                        savedFields[i].restore();\n+                    }\n+                }\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            } catch (ArithmeticException e) {\n+                if (resetFields) {\n+                    for (int i = 0; i < count; i++) {\n+                        savedFields[i].restore();\n+                    }\n+                }\n+                if (text != null) {\n+                    e = new ArithmeticException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage());\n+                }\n+                throw e;\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}