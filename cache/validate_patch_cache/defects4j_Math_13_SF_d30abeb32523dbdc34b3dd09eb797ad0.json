{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final LUDecomposition lu = new LUDecomposition(m);\n    final RealMatrix sqrt = lu.getSolver().getInverse();\n    final double tol = 1e-12;\n\n    for (int i = 0; i < m.getRowDimension(); i++) {\n        for (int j = 0; j < m.getColumnDimension(); j++) {\n            if (Math.abs(sqrt.getEntry(i,j)) < tol) {\n                sqrt.setEntry(i,j, 0);\n            } else {\n                sqrt.setEntry(i,j, Math.sqrt(sqrt.getEntry(i,j)));\n            }\n        }\n    }\n\n    return sqrt.multiply(lu.getU().transpose()).multiply(lu.getU());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..9f6eca549 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final LUDecomposition lu = new LUDecomposition(m);\n+    final RealMatrix sqrt = lu.getSolver().getInverse();\n+    final double tol = 1e-12;\n+\n+    for (int i = 0; i < m.getRowDimension(); i++) {\n+        for (int j = 0; j < m.getColumnDimension(); j++) {\n+            if (Math.abs(sqrt.getEntry(i,j)) < tol) {\n+                sqrt.setEntry(i,j, 0);\n+            } else {\n+                sqrt.setEntry(i,j, Math.sqrt(sqrt.getEntry(i,j)));\n+            }\n+        }\n     }\n+\n+    return sqrt.multiply(lu.getU().transpose()).multiply(lu.getU());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}