{
    "patch": "public Complex add(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    if (Double.isNaN(real) || Double.isNaN(imaginary) || Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n        return createComplex(Double.NaN, Double.NaN);\n    }\n    double newReal = real + rhs.getReal();\n    double newImaginary = imaginary + rhs.getImaginary();\n    if (Double.isInfinite(newReal) || Double.isInfinite(newImaginary)) {\n        if (Double.isInfinite(real) || Double.isInfinite(rhs.getReal())) {\n            double sign = (Math.signum(real) + Math.signum(rhs.getReal())) == 0 ? 1 : Math.signum(real) + Math.signum(rhs.getReal());\n            newImaginary = Double.isInfinite(newImaginary) ? Math.copySign(Double.POSITIVE_INFINITY, newImaginary) : newImaginary;\n            return createComplex(sign * Double.POSITIVE_INFINITY, newImaginary);\n        } else if (Double.isInfinite(imaginary) || Double.isInfinite(rhs.getImaginary())) {\n            double sign = (Math.signum(imaginary) + Math.signum(rhs.getImaginary())) == 0 ? 1 : Math.signum(imaginary) + Math.signum(rhs.getImaginary());\n            newReal = Double.isInfinite(newReal) ? Math.copySign(Double.POSITIVE_INFINITY, newReal) : newReal;\n            return createComplex(newReal, sign * Double.POSITIVE_INFINITY);\n        } else {\n            return createComplex(Double.NaN, Double.NaN);\n        }\n    } else {\n        return createComplex(newReal, newImaginary);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..8a7d17cbe 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -147,12 +147,29 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n      * @return the complex number sum\n      * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs)\n-        throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n+public Complex add(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n+    if (Double.isNaN(real) || Double.isNaN(imaginary) || Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n+        return createComplex(Double.NaN, Double.NaN);\n+    }\n+    double newReal = real + rhs.getReal();\n+    double newImaginary = imaginary + rhs.getImaginary();\n+    if (Double.isInfinite(newReal) || Double.isInfinite(newImaginary)) {\n+        if (Double.isInfinite(real) || Double.isInfinite(rhs.getReal())) {\n+            double sign = (Math.signum(real) + Math.signum(rhs.getReal())) == 0 ? 1 : Math.signum(real) + Math.signum(rhs.getReal());\n+            newImaginary = Double.isInfinite(newImaginary) ? Math.copySign(Double.POSITIVE_INFINITY, newImaginary) : newImaginary;\n+            return createComplex(sign * Double.POSITIVE_INFINITY, newImaginary);\n+        } else if (Double.isInfinite(imaginary) || Double.isInfinite(rhs.getImaginary())) {\n+            double sign = (Math.signum(imaginary) + Math.signum(rhs.getImaginary())) == 0 ? 1 : Math.signum(imaginary) + Math.signum(rhs.getImaginary());\n+            newReal = Double.isInfinite(newReal) ? Math.copySign(Double.POSITIVE_INFINITY, newReal) : newReal;\n+            return createComplex(newReal, sign * Double.POSITIVE_INFINITY);\n+        } else {\n+            return createComplex(Double.NaN, Double.NaN);\n+        }\n+    } else {\n+        return createComplex(newReal, newImaginary);\n     }\n+}\n \n     /**\n      * Return the conjugate of this complex number. The conjugate of",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}