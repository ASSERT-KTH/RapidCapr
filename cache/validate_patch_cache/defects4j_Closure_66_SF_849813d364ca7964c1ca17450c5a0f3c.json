{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    Gson gson = new Gson();\n    TypeToken<ArrayList<Map<String, Integer>>> token = new TypeToken<ArrayList<Map<String, Integer>>>() {};\n    ArrayList<Map<String, Integer>> list = gson.fromJson(jsonStr, token.getType());\n    int sum = list.stream().flatMapToInt(m -> m.values().stream().mapToInt(Integer::intValue)).sum();\n    int total = list.stream().flatMapToInt(m -> m.keySet().stream().mapToInt(k -> m.get(k))).sum();\n    return (double) sum / total * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..83f428ce 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,14 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    Gson gson = new Gson();\n+    TypeToken<ArrayList<Map<String, Integer>>> token = new TypeToken<ArrayList<Map<String, Integer>>>() {};\n+    ArrayList<Map<String, Integer>> list = gson.fromJson(jsonStr, token.getType());\n+    int sum = list.stream().flatMapToInt(m -> m.values().stream().mapToInt(Integer::intValue)).sum();\n+    int total = list.stream().flatMapToInt(m -> m.keySet().stream().mapToInt(k -> m.get(k))).sum();\n+    return (double) sum / total * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}