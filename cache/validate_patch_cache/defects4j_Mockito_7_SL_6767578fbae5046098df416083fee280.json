{
    "patch": "Type[] typeVariableBounds = typeVariable.getBounds(); \nType actualTypeArgument = null;\nif (typeVariableBounds.length > 0) {\n    for (Type type : typeVariableBounds) {\n        registerTypeVariablesOn(type);\n        if (actualTypeArgument == null && type instanceof Class){\n            actualTypeArgument = ((Class<?>) type).getGenericSuperclass();\n        }\n    }\n} else if (typeVariable.getGenericDeclaration() instanceof Class) {\n    actualTypeArgument = ((Class<?>) typeVariable.getGenericDeclaration()).getGenericSuperclass();\n} \nif (actualTypeArgument != null) {\n    registerTypeVariablesOn(actualTypeArgument);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..354ed9b47 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,26 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] typeVariableBounds = typeVariable.getBounds(); \n+Type actualTypeArgument = null;\n+if (typeVariableBounds.length > 0) {\n+    for (Type type : typeVariableBounds) {\n+        registerTypeVariablesOn(type);\n+        if (actualTypeArgument == null && type instanceof Class){\n+            actualTypeArgument = ((Class<?>) type).getGenericSuperclass();\n+        }\n+    }\n+} else if (typeVariable.getGenericDeclaration() instanceof Class) {\n+    actualTypeArgument = ((Class<?>) typeVariable.getGenericDeclaration()).getGenericSuperclass();\n+} \n+if (actualTypeArgument != null) {\n+    registerTypeVariablesOn(actualTypeArgument);\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}