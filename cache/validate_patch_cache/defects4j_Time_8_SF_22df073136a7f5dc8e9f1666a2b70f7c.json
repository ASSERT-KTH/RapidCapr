{
    "patch": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    } else if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    } else if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n\n    // Calculate the total offset in minutes\n    int totalMinutesOffset = hoursOffset * 60 + minutesOffset;\n\n    // Calculate the hour and minute components for the offset ID\n    int absHoursOffset = Math.abs(hoursOffset);\n    int absMinutesOffset = Math.abs(minutesOffset);\n\n    // Build the offset ID string based on the sign of the total offset\n    String offsetStr = String.format(\"%c%02d:%02d\",\n            totalMinutesOffset < 0 ? '-' : '+', absHoursOffset, absMinutesOffset);\n    \n    // Return a new DateTimeZone instance\n    return forID(offsetStr);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 7d1719bc..c554aee2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -269,31 +269,30 @@ public abstract class DateTimeZone implements Serializable {\n      * @throws IllegalArgumentException if any value is out of range, the minutes are negative\n      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000\n      */\n-    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n-        if (hoursOffset == 0 && minutesOffset == 0) {\n-            return DateTimeZone.UTC;\n-        }\n-        if (hoursOffset < -23 || hoursOffset > 23) {\n-            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n-        }\n-        if (minutesOffset < 0 || minutesOffset > 59) {\n-            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n-        }\n-        int offset = 0;\n-        try {\n-            int hoursInMinutes = hoursOffset * 60;\n-            if (hoursInMinutes < 0) {\n-                minutesOffset = hoursInMinutes - minutesOffset;\n-            } else {\n-                minutesOffset = hoursInMinutes + minutesOffset;\n-            }\n-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n-        } catch (ArithmeticException ex) {\n-            throw new IllegalArgumentException(\"Offset is too large\");\n-        }\n-        return forOffsetMillis(offset);\n+public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n+    if (hoursOffset == 0 && minutesOffset == 0) {\n+        return DateTimeZone.UTC;\n+    } else if (hoursOffset < -23 || hoursOffset > 23) {\n+        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n+    } else if (minutesOffset < -59 || minutesOffset > 59) {\n+        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n     }\n \n+    // Calculate the total offset in minutes\n+    int totalMinutesOffset = hoursOffset * 60 + minutesOffset;\n+\n+    // Calculate the hour and minute components for the offset ID\n+    int absHoursOffset = Math.abs(hoursOffset);\n+    int absMinutesOffset = Math.abs(minutesOffset);\n+\n+    // Build the offset ID string based on the sign of the total offset\n+    String offsetStr = String.format(\"%c%02d:%02d\",\n+            totalMinutesOffset < 0 ? '-' : '+', absHoursOffset, absMinutesOffset);\n+    \n+    // Return a new DateTimeZone instance\n+    return forID(offsetStr);\n+}\n+\n     /**\n      * Gets a time zone instance for the specified offset to UTC in milliseconds.\n      *",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}