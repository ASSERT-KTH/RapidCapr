{
    "patch": "  private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    if (result == null) {\n        return null;\n    }\n    if (result.trim().startsWith(\"@type \")) {\n        result = result.trim().substring(6).trim();\n    }\n    try {\n        // Parse and record the position information\n        switch (jsdocToken) {\n            case DOCUMENTATION:\n                break;\n            case PARAMETER_DOCUMENTATION:\n                if (paramName != null) {\n                    sourceNameStack.add(paramName);\n                }\n                break;\n        }\n        advance();\n    } catch(Exception e) {}\n    return result;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..11092171 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,29 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+  private String getRemainingJSDocLine() {\n+    String result = stream.getRemainingJSDocLine();\n+    if (result == null) {\n+        return null;\n+    }\n+    if (result.trim().startsWith(\"@type \")) {\n+        result = result.trim().substring(6).trim();\n+    }\n+    try {\n+        // Parse and record the position information\n+        switch (jsdocToken) {\n+            case DOCUMENTATION:\n+                break;\n+            case PARAMETER_DOCUMENTATION:\n+                if (paramName != null) {\n+                    sourceNameStack.add(paramName);\n+                }\n+                break;\n+        }\n+        advance();\n+    } catch(Exception e) {}\n+    return result;\n+  }\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}