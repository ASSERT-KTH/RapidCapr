{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // TODO(user): Investigate whether it is really necessary to keep two\n    // different mechanisms for resolving named types, and if so, which order\n    // makes more sense. Now, resolution via registry is first in order to\n    // avoid triggering the warnings built into the resolution via properties.\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    boolean resolvedViaProperties = false;\n    if (!resolved) {\n      resolvedViaProperties = resolveViaProperties(t, enclosing);\n    }\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    if (resolved || resolvedViaProperties) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n              getReferencedType() : this;\n    }\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n            getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..e5450f48 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -187,28 +187,26 @@ class NamedType extends ProxyObjectType {\n     // makes more sense. Now, resolution via registry is first in order to\n     // avoid triggering the warnings built into the resolution via properties.\n     boolean resolved = resolveViaRegistry(t, enclosing);\n+    boolean resolvedViaProperties = false;\n+    if (!resolved) {\n+      resolvedViaProperties = resolveViaProperties(t, enclosing);\n+    }\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n-    if (resolved) {\n+    if (resolved || resolvedViaProperties) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n       return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+              getReferencedType() : this;\n     }\n-\n     super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n     return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+            getReferencedType() : this;\n   }\n \n   /**",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}