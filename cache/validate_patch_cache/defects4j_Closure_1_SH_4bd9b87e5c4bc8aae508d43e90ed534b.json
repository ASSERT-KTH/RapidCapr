{
    "patch": "      // Strip unreferenced default parameters.\n      Node param = argList.getFirstChild();\n      Node statementBlockParent = null;\n      for (int i = 0; param != null;) {\n        if (!param.isDefaultValue() || referenced.contains(fnScope.getVar(param.getFirstChild().getString()))) {\n          statementBlockParent = param.getParent();\n          param = param.getNext();\n          i++;\n        } else {\n          NodeUtil.deleteNode(param);\n          param = argList.getFirstChild();\n          for (int j = 0; j < i - 1; j++) {\n            param = param.getNext();\n          }\n        }\n      }\n      if (statementBlockParent != null) {\n        compiler.reportCodeChange();\n        statementBlockParent.putBooleanProp(Node.FUNCTION_HAS_DEFAULT_PARAMS, true);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b36d893c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // Strip unreferenced default parameters.\n+      Node param = argList.getFirstChild();\n+      Node statementBlockParent = null;\n+      for (int i = 0; param != null;) {\n+        if (!param.isDefaultValue() || referenced.contains(fnScope.getVar(param.getFirstChild().getString()))) {\n+          statementBlockParent = param.getParent();\n+          param = param.getNext();\n+          i++;\n+        } else {\n+          NodeUtil.deleteNode(param);\n+          param = argList.getFirstChild();\n+          for (int j = 0; j < i - 1; j++) {\n+            param = param.getNext();\n+          }\n+        }\n+      }\n+      if (statementBlockParent != null) {\n+        compiler.reportCodeChange();\n+        statementBlockParent.putBooleanProp(Node.FUNCTION_HAS_DEFAULT_PARAMS, true);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}