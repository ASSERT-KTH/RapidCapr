{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type actualTypeArgument = typeVariable.getActualTypeArguments()[0];\n    if (actualTypeArgument instanceof TypeVariable<?>) {\n        actualTypeArgument = getActualTypeArgumentFor((TypeVariable<?>) actualTypeArgument);\n    }\n    return actualTypeArgument != null ? actualTypeArgument : Object.class;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..36352778a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,18 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type actualTypeArgument = typeVariable.getActualTypeArguments()[0];\n+    if (actualTypeArgument instanceof TypeVariable<?>) {\n+        actualTypeArgument = getActualTypeArgumentFor((TypeVariable<?>) actualTypeArgument);\n+    }\n+    return actualTypeArgument != null ? actualTypeArgument : Object.class;\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}