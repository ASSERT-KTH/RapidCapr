{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    boolean resolvedViaProps = false;\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    if (!resolved) {\n      resolvedViaProps = resolveViaProperties(t, enclosing);\n    }\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    if (resolved || resolvedViaProps) {\n      JSType returnType;\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      if (isResolved()) {\n        returnType = registry.isLastGeneration() ?\n            getReferencedType() : this;\n      } else {\n        returnType = JSType.UNKNOWN;\n      }\n      return returnType;\n    }\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n    return JSType.UNKNOWN;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..a2800ae6 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,33 +182,36 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n     boolean resolved = resolveViaRegistry(t, enclosing);\n+    boolean resolvedViaProps = false;\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    if (!resolved) {\n+      resolvedViaProps = resolveViaProperties(t, enclosing);\n     }\n-\n-    resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n+    if (resolved || resolvedViaProps) {\n+      JSType returnType;\n+      super.resolveInternal(t, enclosing);\n+      finishPropertyContinuations();\n+      if (isResolved()) {\n+        returnType = registry.isLastGeneration() ?\n+            getReferencedType() : this;\n+      } else {\n+        returnType = JSType.UNKNOWN;\n+      }\n+      return returnType;\n+    }\n     super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n+      return registry.isLastGeneration() ?\n+          getReferencedType() : this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    return JSType.UNKNOWN;\n   }\n \n   /**",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}