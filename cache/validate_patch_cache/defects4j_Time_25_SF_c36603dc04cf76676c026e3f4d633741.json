{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int localOffset = getOffset(instantLocal);\n    long nextTransition = nextTransition(instantLocal);\n    int nextOffset = getOffset(nextTransition);\n\n    if (localOffset == nextOffset) {\n        // we are not near a transition, return the local offset\n        return localOffset;\n    } else if (localOffset > nextOffset) {\n        // we are in a gap (autumn DST transition)\n        long previousTransition = previousTransition(instantLocal);\n        int previousOffset = getOffset(previousTransition);\n\n        // if the previousOffset is less than the nextOffset, we have jumped over the gap\n        if (previousOffset < nextOffset) {\n            return previousOffset;\n        } else {\n            // otherwise, we are inside the gap\n            return localOffset;\n        }\n    } else {\n        // we are in a overlap (spring DST transition)\n        long previousTransition = previousTransition(instantLocal);\n        int previousOffset = getOffset(previousTransition);\n\n        // if the localOffset is equal to the previousOffset, we have jumped over the overlap\n        if (localOffset == previousOffset) {\n            return nextOffset;\n        } else {\n            // otherwise, we are inside the overlap\n            return localOffset;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1ef1bddd 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,40 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int localOffset = getOffset(instantLocal);\n+    long nextTransition = nextTransition(instantLocal);\n+    int nextOffset = getOffset(nextTransition);\n+\n+    if (localOffset == nextOffset) {\n+        // we are not near a transition, return the local offset\n+        return localOffset;\n+    } else if (localOffset > nextOffset) {\n+        // we are in a gap (autumn DST transition)\n+        long previousTransition = previousTransition(instantLocal);\n+        int previousOffset = getOffset(previousTransition);\n+\n+        // if the previousOffset is less than the nextOffset, we have jumped over the gap\n+        if (previousOffset < nextOffset) {\n+            return previousOffset;\n+        } else {\n+            // otherwise, we are inside the gap\n+            return localOffset;\n+        }\n+    } else {\n+        // we are in a overlap (spring DST transition)\n+        long previousTransition = previousTransition(instantLocal);\n+        int previousOffset = getOffset(previousTransition);\n+\n+        // if the localOffset is equal to the previousOffset, we have jumped over the overlap\n+        if (localOffset == previousOffset) {\n+            return nextOffset;\n+        } else {\n+            // otherwise, we are inside the overlap\n+            return localOffset;\n         }\n-        return offsetAdjusted;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2002-06-03T00:00:00.000-00:01:15> but was:<2002-06-02T00:00:00.000-00:01:15>",
    "test_result": "FAIL"
}