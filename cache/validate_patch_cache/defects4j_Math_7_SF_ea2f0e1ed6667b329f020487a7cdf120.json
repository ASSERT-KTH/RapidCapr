{
    "patch": "public void doEvents(OdeStepInterpolator interpolator, List<EventState> eventsStates, List<StepHandler> stepHandlers) {\n    double previousT = interpolator.getPreviousTime();\n    double currentT = interpolator.getCurrentTime();\n\n    while (true) {\n        double tMin = Double.POSITIVE_INFINITY;\n\n        for (final EventState state : eventsStates) {\n            double tEvent = state.getEventTime();\n\n            if (tEvent > currentT) {\n                tMin = Math.min(tMin, tEvent);\n            }\n            else if (state.evaluateStep(interpolator)) {\n                // an event occurs during the current step\n                state.stepAccepted(interpolator);\n                for (final StepHandler handler : stepHandlers) {\n                    handler.handleStep(interpolator, state.getStopTime());\n                }\n            }\n        }\n\n        if (tMin <= currentT) {\n            throw new MathIllegalArgumentException(LocalizedODEFormats.EVENT_HAS_NOT_BEEN_PROPAGATED_BEFORE);\n\n        } else if (tMin == Double.POSITIVE_INFINITY) {\n            // all events in the future\n            break;\n\n        } else {\n            // at least one event during the remaining part of the step\n            interpolator.setSoftCurrentTime(tMin);\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(interpolator);\n            }\n            currentT = tMin;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..f8377f524 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,45 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n+public void doEvents(OdeStepInterpolator interpolator, List<EventState> eventsStates, List<StepHandler> stepHandlers) {\n+    double previousT = interpolator.getPreviousTime();\n+    double currentT = interpolator.getCurrentTime();\n \n-            });\n+    while (true) {\n+        double tMin = Double.POSITIVE_INFINITY;\n \n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n+        for (final EventState state : eventsStates) {\n+            double tEvent = state.getEventTime();\n+\n+            if (tEvent > currentT) {\n+                tMin = Math.min(tMin, tEvent);\n+            }\n+            else if (state.evaluateStep(interpolator)) {\n+                // an event occurs during the current step\n+                state.stepAccepted(interpolator);\n+                for (final StepHandler handler : stepHandlers) {\n+                    handler.handleStep(interpolator, state.getStopTime());\n                 }\n             }\n+        }\n \n-            while (!occuringEvents.isEmpty()) {\n-\n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n-\n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n-\n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n+        if (tMin <= currentT) {\n+            throw new MathIllegalArgumentException(LocalizedODEFormats.EVENT_HAS_NOT_BEEN_PROPAGATED_BEFORE);\n \n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+        } else if (tMin == Double.POSITIVE_INFINITY) {\n+            // all events in the future\n+            break;\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+        } else {\n+            // at least one event during the remaining part of the step\n+            interpolator.setSoftCurrentTime(tMin);\n+            for (final EventState state : eventsStates) {\n+                state.stepAccepted(interpolator);\n+            }\n+            currentT = tMin;\n+        }\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}