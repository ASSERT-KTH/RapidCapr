{
    "patch": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MyClass {\n    \n    public static List<String> addToList(String element) {\n        List<String> list = new ArrayList<>();\n        list.add(element);\n        return list;\n    }\n    \n    public static void main(String[] args) {\n        List<String> list = addToList(\"Hello\");\n        if (list != null && !list.isEmpty()) {\n            System.out.println(\"List is not empty\");\n        } else {\n            System.out.println(\"List is empty\");\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..bc7d45481 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,26 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class MyClass {\n+    \n+    public static List<String> addToList(String element) {\n+        List<String> list = new ArrayList<>();\n+        list.add(element);\n+        return list;\n+    }\n+    \n+    public static void main(String[] args) {\n+        List<String> list = addToList(\"Hello\");\n+        if (list != null && !list.isEmpty()) {\n+            System.out.println(\"List is not empty\");\n+        } else {\n+            System.out.println(\"List is empty\");\n+        }\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}