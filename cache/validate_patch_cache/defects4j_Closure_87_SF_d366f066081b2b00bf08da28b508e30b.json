{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node expressionNode = n.getFirstChild();\n      if (expressionNode.getType() == Token.EXPR_RESULT) {\n        expressionNode = expressionNode.getFirstChild();\n        // Check if the expression calls an event handler function\n        if (expressionNode.getType() == Token.CALL) {\n          Node fnNameNode = expressionNode.getFirstChild();\n          if (fnNameNode.getType() == Token.GETPROP && isEventHandler(fnNameNode)) {\n            return false;\n          }\n        }\n        // Check if the expression is a conditional\n        if (expressionNode.getType() == Token.HOOK) {\n          Node trueExpression = expressionNode.getSecondChild();\n          Node falseExpression = expressionNode.getLastChild();\n          return isFoldableExpression(trueExpression) && isFoldableExpression(falseExpression);\n        }\n        // Check if the expression is a binary operator\n        if (TokenUtil.isBinaryOperator(expressionNode.getType())) {\n          Node left = expressionNode.getFirstChild();\n          Node right = left.getNext();\n          return isFoldableExpression(left) && isFoldableExpression(right);\n        }\n        // Check if the expression is a unary operator\n        if (TokenUtil.isUnaryOperator(expressionNode.getType())) {\n          return isFoldableExpression(expressionNode.getFirstChild());\n        }\n        // Check if the expression is a name or a getprop\n        return expressionNode.getType() == Token.NAME || expressionNode.getType() == Token.GETPROP;\n      }\n    }\n  }\n  return false;\n}\n\nprivate boolean isEventHandler(Node node) {\n  if (node.getChildCount() == 2 &&\n      node.getFirstChild().getString().equals(\"handler\")) {\n        Node grandChild = node.getLastChild();\n        return grandChild.getType() == Token.NAME && grandChild.getString().startsWith(\"on\");\n    }\n  return false;\n}\n\nprivate boolean isFoldableExpression(Node node) {\n  int type = node.getType();\n  switch (type) {\n    case Token.NUMBER:\n    case Token.STRING:\n    case Token.NAME:\n    case Token.THIS:\n    case Token.CALL:\n    case Token.GETPROP:\n      return true;\n    case Token.COMMA:\n      return isFoldableExpression(node.getLastChild());\n    case Token.ASSIGN:\n      return isFoldableExpression(node.getLastChild());\n    case Token.HOOK:\n      return isFoldableExpression(node.getSecondChild())\n          && isFoldableExpression(node.getLastChild());\n    case Token.INC:\n    case Token.DEC:\n    case Token.NOT:\n    case Token.BITNOT:\n      return isFoldableExpression(node.getFirstChild());\n    default:\n      if (TokenUtil.isBinaryOperator(type)) {\n        Node left = node.getFirstChild();\n        Node right = left.getNext();\n        return isFoldableExpression(left) && isFoldableExpression(right);\n      }\n      return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..e60660b4 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,83 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node expressionNode = n.getFirstChild();\n+      if (expressionNode.getType() == Token.EXPR_RESULT) {\n+        expressionNode = expressionNode.getFirstChild();\n+        // Check if the expression calls an event handler function\n+        if (expressionNode.getType() == Token.CALL) {\n+          Node fnNameNode = expressionNode.getFirstChild();\n+          if (fnNameNode.getType() == Token.GETPROP && isEventHandler(fnNameNode)) {\n+            return false;\n+          }\n+        }\n+        // Check if the expression is a conditional\n+        if (expressionNode.getType() == Token.HOOK) {\n+          Node trueExpression = expressionNode.getSecondChild();\n+          Node falseExpression = expressionNode.getLastChild();\n+          return isFoldableExpression(trueExpression) && isFoldableExpression(falseExpression);\n+        }\n+        // Check if the expression is a binary operator\n+        if (TokenUtil.isBinaryOperator(expressionNode.getType())) {\n+          Node left = expressionNode.getFirstChild();\n+          Node right = left.getNext();\n+          return isFoldableExpression(left) && isFoldableExpression(right);\n+        }\n+        // Check if the expression is a unary operator\n+        if (TokenUtil.isUnaryOperator(expressionNode.getType())) {\n+          return isFoldableExpression(expressionNode.getFirstChild());\n+        }\n+        // Check if the expression is a name or a getprop\n+        return expressionNode.getType() == Token.NAME || expressionNode.getType() == Token.GETPROP;\n       }\n     }\n+  }\n+  return false;\n+}\n \n-    return false;\n+private boolean isEventHandler(Node node) {\n+  if (node.getChildCount() == 2 &&\n+      node.getFirstChild().getString().equals(\"handler\")) {\n+        Node grandChild = node.getLastChild();\n+        return grandChild.getType() == Token.NAME && grandChild.getString().startsWith(\"on\");\n+    }\n+  return false;\n+}\n+\n+private boolean isFoldableExpression(Node node) {\n+  int type = node.getType();\n+  switch (type) {\n+    case Token.NUMBER:\n+    case Token.STRING:\n+    case Token.NAME:\n+    case Token.THIS:\n+    case Token.CALL:\n+    case Token.GETPROP:\n+      return true;\n+    case Token.COMMA:\n+      return isFoldableExpression(node.getLastChild());\n+    case Token.ASSIGN:\n+      return isFoldableExpression(node.getLastChild());\n+    case Token.HOOK:\n+      return isFoldableExpression(node.getSecondChild())\n+          && isFoldableExpression(node.getLastChild());\n+    case Token.INC:\n+    case Token.DEC:\n+    case Token.NOT:\n+    case Token.BITNOT:\n+      return isFoldableExpression(node.getFirstChild());\n+    default:\n+      if (TokenUtil.isBinaryOperator(type)) {\n+        Node left = node.getFirstChild();\n+        Node right = left.getNext();\n+        return isFoldableExpression(left) && isFoldableExpression(right);\n+      }\n+      return false;\n   }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}