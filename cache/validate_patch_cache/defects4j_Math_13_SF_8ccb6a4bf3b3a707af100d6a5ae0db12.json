{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final int n = m.getRowDimension();\n    double[] sqrtEigenvalues = new double[n];\n    boolean isPositiveSemiDefinite = true;\n\n    for (int i = 0; i < n; i++) {\n        double eigenvalue = d.getEntry(i, i);\n        if (eigenvalue < 0.0) {\n            isPositiveSemiDefinite = false;\n            break;\n        }\n        sqrtEigenvalues[i] = Math.sqrt(eigenvalue);\n    }\n\n    if (!isPositiveSemiDefinite) {\n        return MatrixUtils.createRealMatrix(n, n).scalarMultiply(Double.NaN);\n    }\n\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenvalues);\n    final RealMatrix transposeV = v.transpose();\n    return v.multiply(sqrtD).multiply(transposeV);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..6e84d62ba 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final int n = m.getRowDimension();\n+    double[] sqrtEigenvalues = new double[n];\n+    boolean isPositiveSemiDefinite = true;\n+\n+    for (int i = 0; i < n; i++) {\n+        double eigenvalue = d.getEntry(i, i);\n+        if (eigenvalue < 0.0) {\n+            isPositiveSemiDefinite = false;\n+            break;\n+        }\n+        sqrtEigenvalues[i] = Math.sqrt(eigenvalue);\n+    }\n+\n+    if (!isPositiveSemiDefinite) {\n+        return MatrixUtils.createRealMatrix(n, n).scalarMultiply(Double.NaN);\n     }\n+\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenvalues);\n+    final RealMatrix transposeV = v.transpose();\n+    return v.multiply(sqrtD).multiply(transposeV);\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}