{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long initialInstantMillis = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                initialInstantMillis, chrono, iLocale, iPivotYear, 2000);\n        int newPos = parser.parseInto(bucket, text, position);\n        long instantLocal = bucket.computeMillis(false, text);\n        if (newPos >= 0 && (bucket.getOffsetInteger() == null || !iOffsetParsed)) {\n            // The parsing was successful and there was no offset in the input text.\n            // We need to adjust the parsed instant local to the expected year,\n            // based on the parsed day of year and leap year status.\n            int year = bucket.getDateTime().getYear();\n            if (year <= 0) {\n                year = 1 - year;\n            }\n            boolean leapYear = chrono.year().isLeap(year);\n            int dayOfYear = bucket.get(DateTimeFieldType.dayOfYear());\n            if (dayOfYear == 60 && leapYear) {\n                // Special case for February 29\n                dayOfYear = 59;\n            } else if (dayOfYear > 59 && leapYear) {\n                dayOfYear--;\n            }\n            instantLocal = chrono.year().set(initialInstantMillis, year);\n            instantLocal = chrono.dayOfYear().set(instantLocal, dayOfYear);\n            instantLocal = bucket.computeMillis(false, text, instantLocal);\n        }\n\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setMillis(instantLocal);\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..b595f2e0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,22 +697,42 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n         DateTimeParser parser = requireParser();\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n+\n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+        long initialInstantMillis = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                initialInstantMillis, chrono, iLocale, iPivotYear, 2000);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n+        long instantLocal = bucket.computeMillis(false, text);\n+        if (newPos >= 0 && (bucket.getOffsetInteger() == null || !iOffsetParsed)) {\n+            // The parsing was successful and there was no offset in the input text.\n+            // We need to adjust the parsed instant local to the expected year,\n+            // based on the parsed day of year and leap year status.\n+            int year = bucket.getDateTime().getYear();\n+            if (year <= 0) {\n+                year = 1 - year;\n+            }\n+            boolean leapYear = chrono.year().isLeap(year);\n+            int dayOfYear = bucket.get(DateTimeFieldType.dayOfYear());\n+            if (dayOfYear == 60 && leapYear) {\n+                // Special case for February 29\n+                dayOfYear = 59;\n+            } else if (dayOfYear > 59 && leapYear) {\n+                dayOfYear--;\n+            }\n+            instantLocal = chrono.year().set(initialInstantMillis, year);\n+            instantLocal = chrono.dayOfYear().set(instantLocal, dayOfYear);\n+            instantLocal = bucket.computeMillis(false, text, instantLocal);\n+        }\n+\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n@@ -720,6 +740,7 @@ public class DateTimeFormatter {\n         } else if (bucket.getZone() != null) {\n             chrono = chrono.withZone(bucket.getZone());\n         }\n+        instant.setMillis(instantLocal);\n         instant.setChronology(chrono);\n         if (iZone != null) {\n             instant.setZone(iZone);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}