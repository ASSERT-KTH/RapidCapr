{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    // Convert weeks to days\n    days = FieldUtils.safeAdd(days, weeks * 7);\n    weeks = 0;\n\n    // Convert years and months to months\n    months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));\n    years = 0;\n\n    // Normalize months and convert excess months to years\n    years = FieldUtils.safeDivide(months, 12);\n    months = FieldUtils.safeMod(months, 12);\n\n    // Normalize days and convert excess days to hours\n    hours = FieldUtils.safeAdd(hours, days / 24);\n    days = days % 24;\n\n    // Normalize hours and convert excess hours to minutes\n    minutes = FieldUtils.safeAdd(minutes, hours / 60);\n    hours = hours % 60;\n\n    // Normalize minutes and convert excess minutes to seconds\n    seconds = FieldUtils.safeAdd(seconds, minutes / 60);\n    minutes = minutes % 60;\n\n    // Normalize seconds and convert excess seconds to milliseconds\n    millis = FieldUtils.safeAdd(millis, seconds / 1000);\n    seconds = seconds % 1000;\n\n    // Construct and return the normalized period\n    Period normalized = new Period(0, type, ISOChronology.getInstanceUTC())\n            .withYears(years)\n            .withMonths(months)\n            .withWeeks(weeks)\n            .withDays(days)\n            .withHours(hours)\n            .withMinutes(minutes)\n            .withSeconds(seconds)\n            .withMillis(millis);\n    return normalized;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..da509680 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,55 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+    int hours = getHours();\n+    int minutes = getMinutes();\n+    int seconds = getSeconds();\n+    int millis = getMillis();\n+\n+    // Convert weeks to days\n+    days = FieldUtils.safeAdd(days, weeks * 7);\n+    weeks = 0;\n+\n+    // Convert years and months to months\n+    months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));\n+    years = 0;\n+\n+    // Normalize months and convert excess months to years\n+    years = FieldUtils.safeDivide(months, 12);\n+    months = FieldUtils.safeMod(months, 12);\n+\n+    // Normalize days and convert excess days to hours\n+    hours = FieldUtils.safeAdd(hours, days / 24);\n+    days = days % 24;\n+\n+    // Normalize hours and convert excess hours to minutes\n+    minutes = FieldUtils.safeAdd(minutes, hours / 60);\n+    hours = hours % 60;\n+\n+    // Normalize minutes and convert excess minutes to seconds\n+    seconds = FieldUtils.safeAdd(seconds, minutes / 60);\n+    minutes = minutes % 60;\n+\n+    // Normalize seconds and convert excess seconds to milliseconds\n+    millis = FieldUtils.safeAdd(millis, seconds / 1000);\n+    seconds = seconds % 1000;\n+\n+    // Construct and return the normalized period\n+    Period normalized = new Period(0, type, ISOChronology.getInstanceUTC())\n+            .withYears(years)\n+            .withMonths(months)\n+            .withWeeks(weeks)\n+            .withDays(days)\n+            .withHours(hours)\n+            .withMinutes(minutes)\n+            .withSeconds(seconds)\n+            .withMillis(millis);\n+    return normalized;\n+}\n \n }",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}