{
    "patch": "        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            try {\n                millis = savedField.set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                if (DateTimeFieldType.year().equals(savedFields[i].iField.getType())) {\n                    // Year is occasionally interpreted wrong due to Gregorian Reform\n                    iDefaultYear = -iDefaultYear;\n                    long instant = savedFields[i].iField.set(0L, iDefaultYear);\n                    millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n                } else if (DateTimeFieldType.monthOfYear().equals(savedFields[i].iField.getType())) {\n                    // Parse error occurred on the month field; try to compensate by setting the month field to 1\n                    savedFields[i].iField.set(millis, 1);\n                    millis = savedField.set(millis, resetFields);\n                } else if (DateTimeFieldType.weekyear().equals(savedFields[i].iField.getType())) {\n                    // Parse error occurred on the weekyear field; try to compensate by setting the weekyear field to the default year\n                    long instant = savedFields[i].iField.set(0L, iDefaultYear);\n                    millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n                    \n                    // Check if the next field is a week field\n                    if (i + 1 < count && DurationFieldType.weeks().equals(savedFields[i + 1].iField.getDurationField().getType())) {\n                        // Parse error occurred on the week field; try to compensate by setting the week field to 1\n                        savedFields[i + 1].iField.set(millis, 1);\n                        millis = savedField.set(millis, resetFields);\n                    } else {\n                        // Throw the original exception with modified error message\n                        if (text != null) {\n                            e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                        }\n                        throw e;\n                    }\n                } else {\n                    // Throw the original exception with modified error message\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                    }\n                    throw e;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..17cf72d2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,46 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            try {\n+                millis = savedField.set(millis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                if (DateTimeFieldType.year().equals(savedFields[i].iField.getType())) {\n+                    // Year is occasionally interpreted wrong due to Gregorian Reform\n+                    iDefaultYear = -iDefaultYear;\n+                    long instant = savedFields[i].iField.set(0L, iDefaultYear);\n+                    millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n+                } else if (DateTimeFieldType.monthOfYear().equals(savedFields[i].iField.getType())) {\n+                    // Parse error occurred on the month field; try to compensate by setting the month field to 1\n+                    savedFields[i].iField.set(millis, 1);\n+                    millis = savedField.set(millis, resetFields);\n+                } else if (DateTimeFieldType.weekyear().equals(savedFields[i].iField.getType())) {\n+                    // Parse error occurred on the weekyear field; try to compensate by setting the weekyear field to the default year\n+                    long instant = savedFields[i].iField.set(0L, iDefaultYear);\n+                    millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n+                    \n+                    // Check if the next field is a week field\n+                    if (i + 1 < count && DurationFieldType.weeks().equals(savedFields[i + 1].iField.getDurationField().getType())) {\n+                        // Parse error occurred on the week field; try to compensate by setting the week field to 1\n+                        savedFields[i + 1].iField.set(millis, 1);\n+                        millis = savedField.set(millis, resetFields);\n+                    } else {\n+                        // Throw the original exception with modified error message\n+                        if (text != null) {\n+                            e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                        }\n+                        throw e;\n+                    }\n+                } else {\n+                    // Throw the original exception with modified error message\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                    }\n+                    throw e;\n+                }\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}