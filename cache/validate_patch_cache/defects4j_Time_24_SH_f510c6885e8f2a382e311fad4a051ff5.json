{
    "patch": "                if (i >= 1) { //check if savedFields[i-1] is null i.e. if the previous value is missing\n                    DurationFieldType previous = savedFields[i - 1].iField.getDurationFieldType();\n                    if (previous.equals(DurationFieldType.weekyears()) || previous.equals(DurationFieldType.months())) {\n                        if (savedFields[i - 1].iValue < 1 || savedFields[i - 1].iValue > savedFields[i - 1].iField.getMaximumValue()) {\n                            throw new IllegalFieldValueException(\n                                    savedFields[i - 1].iField.getType(),\n                                    Integer.valueOf(savedFields[i - 1].iValue),\n                                    null,\n                                    null);\n                        }\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5b768408 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,17 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                if (i >= 1) { //check if savedFields[i-1] is null i.e. if the previous value is missing\n+                    DurationFieldType previous = savedFields[i - 1].iField.getDurationFieldType();\n+                    if (previous.equals(DurationFieldType.weekyears()) || previous.equals(DurationFieldType.months())) {\n+                        if (savedFields[i - 1].iValue < 1 || savedFields[i - 1].iValue > savedFields[i - 1].iField.getMaximumValue()) {\n+                            throw new IllegalFieldValueException(\n+                                    savedFields[i - 1].iField.getType(),\n+                                    Integer.valueOf(savedFields[i - 1].iValue),\n+                                    null,\n+                                    null);\n+                        }\n+                    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}