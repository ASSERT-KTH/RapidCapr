{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        Callback mockedCallback = null;\n        Callback[] callbacks = ((Factory) mock).getCallbacks();\n        for (Callback callback : callbacks) {\n            if (callback.getClass().getName().contains(\"MockitoMock$MockHandler\")) {\n                mockedCallback = callback;\n                break;\n            }\n        }\n\n        if (mockedCallback != null) {\n            int mockedCallbackIndex = CallbackHelper.getCallbackIndex(callbacks, mockedCallback);\n            callbacks[mockedCallbackIndex] = newFilter;\n            ((Factory) mock).setCallbacks(callbacks);\n        } else {\n            throw new IllegalArgumentException(\"Mockito callback was not found for: \" + mock.getClass().getName());\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..399bd9470 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,27 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        Callback mockedCallback = null;\n+        Callback[] callbacks = ((Factory) mock).getCallbacks();\n+        for (Callback callback : callbacks) {\n+            if (callback.getClass().getName().contains(\"MockitoMock$MockHandler\")) {\n+                mockedCallback = callback;\n+                break;\n+            }\n+        }\n+\n+        if (mockedCallback != null) {\n+            int mockedCallbackIndex = CallbackHelper.getCallbackIndex(callbacks, mockedCallback);\n+            callbacks[mockedCallbackIndex] = newFilter;\n+            ((Factory) mock).setCallbacks(callbacks);\n+        } else {\n+            throw new IllegalArgumentException(\"Mockito callback was not found for: \" + mock.getClass().getName());\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}