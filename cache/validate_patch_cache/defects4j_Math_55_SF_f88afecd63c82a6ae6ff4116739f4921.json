{
    "patch": "public static Vector3D crossProduct(Vector3D v1, Vector3D v2) {\n    double x = v1.getY() * v2.getZ() - v2.getY() * v1.getZ();\n    double y = v1.getZ() * v2.getX() - v2.getZ() * v1.getX();\n    double z = v1.getX() * v2.getY() - v2.getX() * v1.getX();\n    Vector3D result = new Vector3D(x, y, z);\n    double eps = 1e-12;\n    double norm = result.getNorm();\n    if (norm < eps) {\n        double dot = v1.dot(v2);\n        if (dot > 0) {\n            v1 = v1.orthogonal();\n            x = v1.getY() * v2.getZ() - v2.getY() * v1.getZ();\n            y = v1.getZ() * v2.getX() - v2.getZ() * v1.getX();\n            z = v1.getX() * v2.getY() - v2.getX() * v1.getY();\n            result = new Vector3D(x, y, z);\n            norm = result.getNorm();\n        } else {\n            Vector3D unitX = Vector3D.PLUS_I;\n            double angle = v1.angle(unitX);\n            if (angle < eps || angle > Math.PI - eps) {\n                unitX = Vector3D.PLUS_J;\n            }\n            v1 = Vector3D.crossProduct(v1, unitX);\n            x = v1.getY() * v2.getZ() - v2.getY() * v1.getZ();\n            y = v1.getZ() * v2.getX() - v2.getZ() * v1.getX();\n            z = v1.getX() * v2.getY() - v2.getX() * v1.getY();\n            result = new Vector3D(x, y, z);\n            norm = result.getNorm();\n        }\n    }\n    return result.scalarMultiply(1.0 / norm);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..1e3e3330f 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,38 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(Vector3D v1, Vector3D v2) {\n+    double x = v1.getY() * v2.getZ() - v2.getY() * v1.getZ();\n+    double y = v1.getZ() * v2.getX() - v2.getZ() * v1.getX();\n+    double z = v1.getX() * v2.getY() - v2.getX() * v1.getX();\n+    Vector3D result = new Vector3D(x, y, z);\n+    double eps = 1e-12;\n+    double norm = result.getNorm();\n+    if (norm < eps) {\n+        double dot = v1.dot(v2);\n+        if (dot > 0) {\n+            v1 = v1.orthogonal();\n+            x = v1.getY() * v2.getZ() - v2.getY() * v1.getZ();\n+            y = v1.getZ() * v2.getX() - v2.getZ() * v1.getX();\n+            z = v1.getX() * v2.getY() - v2.getX() * v1.getY();\n+            result = new Vector3D(x, y, z);\n+            norm = result.getNorm();\n+        } else {\n+            Vector3D unitX = Vector3D.PLUS_I;\n+            double angle = v1.angle(unitX);\n+            if (angle < eps || angle > Math.PI - eps) {\n+                unitX = Vector3D.PLUS_J;\n+            }\n+            v1 = Vector3D.crossProduct(v1, unitX);\n+            x = v1.getY() * v2.getZ() - v2.getY() * v1.getZ();\n+            y = v1.getZ() * v2.getX() - v2.getZ() * v1.getX();\n+            z = v1.getX() * v2.getY() - v2.getX() * v1.getY();\n+            result = new Vector3D(x, y, z);\n+            norm = result.getNorm();\n+        }\n+    }\n+    return result.scalarMultiply(1.0 / norm);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}