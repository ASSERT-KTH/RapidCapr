{
    "patch": "        boolean allPositive = true;\n        for (double value : guess) {\n            if (value <= 0) {\n                allPositive = false;\n                break;\n            }\n        }\n        if (allPositive) {\n            return fit(new Gaussian.Parametric(), guess);\n        } else {\n            // If any value is not positive, return an array of NaNs\n            return new double[guess.length];\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..709e8e4a4 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,19 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        boolean allPositive = true;\n+        for (double value : guess) {\n+            if (value <= 0) {\n+                allPositive = false;\n+                break;\n+            }\n+        }\n+        if (allPositive) {\n+            return fit(new Gaussian.Parametric(), guess);\n+        } else {\n+            // If any value is not positive, return an array of NaNs\n+            return new double[guess.length];\n+        }\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<233003.2967252038> but was:<0.0>",
    "test_result": "FAIL"
}