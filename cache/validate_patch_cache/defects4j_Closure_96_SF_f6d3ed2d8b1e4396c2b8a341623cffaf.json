{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n\n  // Special case for 0-argument functions\n  if (minArgs == 0 && maxArgs == 0 && numArgs == 0) {\n    return;\n  }\n\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  for (int ordinal = 0; ordinal < minArgs; ++ordinal) {\n    if (!arguments.hasNext()) {\n      reportMissingArguments(t, call, functionType, numArgs, ordinal);\n      return;\n    }\n    Node argument = arguments.next();\n    Node parameter = functionType.getParameterAt(ordinal);\n    validator.expectArgumentMatchesParameter(\n        t, argument, getJSType(argument), getJSType(parameter), call, ordinal + 1);\n  }\n\n  // Handle varargs\n  List<Node> varargs = new ArrayList<>();\n  for (int ordinal = minArgs; arguments.hasNext() &&\n      (maxArgs == -1 || ordinal < maxArgs); ++ordinal) {\n    varargs.add(arguments.next());\n  }\n\n  if (arguments.hasNext()) {\n    // Too many arguments\n    reportWrongArgumentCount(t, call, functionType, numArgs, minArgs, maxArgs);\n    return;\n  }\n\n  if (varargs.isEmpty() && maxArgs != -1 && numArgs < maxArgs) {\n    // Too few arguments\n    reportWrongArgumentCount(t, call, functionType, numArgs, minArgs, maxArgs);\n    return;\n  }\n\n  // Validate any varargs arguments\n  for (int i = 0; i < varargs.size(); i++) {\n    Node vararg = varargs.get(i);\n    int ordinal = i + minArgs;\n    Node parameter = functionType.getParameterAt(ordinal);\n    validator.expectArgumentMatchesParameter(\n        t, vararg, getJSType(vararg), getJSType(parameter), call, ordinal + 1);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..bdab3800 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,39 +1396,59 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+\n+  // Special case for 0-argument functions\n+  if (minArgs == 0 && maxArgs == 0 && numArgs == 0) {\n+    return;\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  for (int ordinal = 0; ordinal < minArgs; ++ordinal) {\n+    if (!arguments.hasNext()) {\n+      reportMissingArguments(t, call, functionType, numArgs, ordinal);\n+      return;\n     }\n+    Node argument = arguments.next();\n+    Node parameter = functionType.getParameterAt(ordinal);\n+    validator.expectArgumentMatchesParameter(\n+        t, argument, getJSType(argument), getJSType(parameter), call, ordinal + 1);\n   }\n \n+  // Handle varargs\n+  List<Node> varargs = new ArrayList<>();\n+  for (int ordinal = minArgs; arguments.hasNext() &&\n+      (maxArgs == -1 || ordinal < maxArgs); ++ordinal) {\n+    varargs.add(arguments.next());\n+  }\n+\n+  if (arguments.hasNext()) {\n+    // Too many arguments\n+    reportWrongArgumentCount(t, call, functionType, numArgs, minArgs, maxArgs);\n+    return;\n+  }\n+\n+  if (varargs.isEmpty() && maxArgs != -1 && numArgs < maxArgs) {\n+    // Too few arguments\n+    reportWrongArgumentCount(t, call, functionType, numArgs, minArgs, maxArgs);\n+    return;\n+  }\n+\n+  // Validate any varargs arguments\n+  for (int i = 0; i < varargs.size(); i++) {\n+    Node vararg = varargs.get(i);\n+    int ordinal = i + minArgs;\n+    Node parameter = functionType.getParameterAt(ordinal);\n+    validator.expectArgumentMatchesParameter(\n+        t, vararg, getJSType(vararg), getJSType(parameter), call, ordinal + 1);\n+  }\n+}\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}