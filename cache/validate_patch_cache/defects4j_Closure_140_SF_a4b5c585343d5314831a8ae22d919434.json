{
    "patch": "@Override\nNode getNodeForCodeInsertion(JSModule module) {\n  if (module == null) {\n    if (inputs.length == 0) {\n      throw new IllegalStateException(\"No inputs\");\n    }\n\n    for (CompilerInput input : inputs) {\n      if (input.isExtern()) {\n        continue;\n      }\n      Node ast = input.getAstRoot(this);\n      if (ast.getLastChild() == null) {\n        return ast;\n      }\n      for (Node last : ast.getLastChild().children()) {\n        if (last.getSourceFileName() != null) {\n          return ast;\n        }\n      }\n    }\n    throw new IllegalStateException(\"Empty root module with no valid inputs\");\n  }\n\n  List<CompilerInput> moduleInputs = module.getInputs();\n  if (!moduleInputs.isEmpty()) {\n    for (CompilerInput input : moduleInputs) {\n      if (input.isExtern()) {\n        continue;\n      }\n      Node ast = input.getAstRoot(this);\n      if (ast.getLastChild() == null) {\n        return ast;\n      }\n      for (Node last : ast.getLastChild().children()) {\n        if (last.getSourceFileName() != null) {\n          return ast;\n        }\n      }\n    }\n  } else if (module.isEntryPoint()) {\n    return getNodeForCodeInsertion(null);\n  }\n\n  for (JSModule m : getModuleGraph().getTransitiveDepsDeepestFirst(module)) {\n    List<CompilerInput> inputs = m.getInputs();\n    if (!inputs.isEmpty()) {\n      for (CompilerInput input : inputs) {\n        if (input.isExtern()) {\n          continue;\n        }\n        Node ast = input.getAstRoot(this);\n        if (ast.getLastChild() == null) {\n          return ast;\n        }\n        for (Node last : ast.getLastChild().children()) {\n          if (last.getSourceFileName() != null) {\n            return ast;\n          }\n        }\n      }\n    }\n  }\n\n  throw new IllegalStateException(\"Module has no valid inputs: \" + module.getName());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d2524b4f..ffb63056 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -256,43 +256,72 @@ public class Compiler extends AbstractCompiler {\n   /**\n    * Initializes the instance state needed for a compile job.\n    */\n-  public void init(JSSourceFile[] externs, JSModule[] modules,\n-      CompilerOptions options) {\n-    initOptions(options);\n-\n-    checkFirstModule(modules);\n+@Override\n+Node getNodeForCodeInsertion(JSModule module) {\n+  if (module == null) {\n+    if (inputs.length == 0) {\n+      throw new IllegalStateException(\"No inputs\");\n+    }\n \n-    this.externs = makeCompilerInput(externs, true);\n-    this.modules = modules;\n-    // Generate the module graph, and report any errors in the module\n-    // specification as errors.\n-    try {\n-      this.moduleGraph = new JSModuleGraph(modules);\n-    } catch (JSModuleGraph.ModuleDependenceException e) {\n-      // problems with the module format.  Report as an error.  The\n-      // message gives all details.\n-      report(JSError.make(MODULE_DEPENDENCY_ERROR,\n-          e.getModule().getName(), e.getDependentModule().getName()));\n-      return;\n+    for (CompilerInput input : inputs) {\n+      if (input.isExtern()) {\n+        continue;\n+      }\n+      Node ast = input.getAstRoot(this);\n+      if (ast.getLastChild() == null) {\n+        return ast;\n+      }\n+      for (Node last : ast.getLastChild().children()) {\n+        if (last.getSourceFileName() != null) {\n+          return ast;\n+        }\n+      }\n     }\n-    this.inputs = getAllInputsFromModules();\n-    initBasedOnOptions();\n+    throw new IllegalStateException(\"Empty root module with no valid inputs\");\n+  }\n \n-    initInputsByNameMap();\n+  List<CompilerInput> moduleInputs = module.getInputs();\n+  if (!moduleInputs.isEmpty()) {\n+    for (CompilerInput input : moduleInputs) {\n+      if (input.isExtern()) {\n+        continue;\n+      }\n+      Node ast = input.getAstRoot(this);\n+      if (ast.getLastChild() == null) {\n+        return ast;\n+      }\n+      for (Node last : ast.getLastChild().children()) {\n+        if (last.getSourceFileName() != null) {\n+          return ast;\n+        }\n+      }\n+    }\n+  } else if (module.isEntryPoint()) {\n+    return getNodeForCodeInsertion(null);\n   }\n \n-  /**\n-   * Do any initialization that is dependent on the compiler options.\n-   */\n-  private void initBasedOnOptions() {\n-    // Create the source map if necessary.\n-    if (options.sourceMapOutputPath != null) {\n-      sourceMap = new SourceMap();\n+  for (JSModule m : getModuleGraph().getTransitiveDepsDeepestFirst(module)) {\n+    List<CompilerInput> inputs = m.getInputs();\n+    if (!inputs.isEmpty()) {\n+      for (CompilerInput input : inputs) {\n+        if (input.isExtern()) {\n+          continue;\n+        }\n+        Node ast = input.getAstRoot(this);\n+        if (ast.getLastChild() == null) {\n+          return ast;\n+        }\n+        for (Node last : ast.getLastChild().children()) {\n+          if (last.getSourceFileName() != null) {\n+            return ast;\n+          }\n+        }\n+      }\n     }\n   }\n \n-  private CompilerInput[] makeCompilerInput(\n-      JSSourceFile[] files, boolean isExtern) {\n+  throw new IllegalStateException(\"Module has no valid inputs: \" + module.getName());\n+}\n     CompilerInput [] inputs = new CompilerInput[files.length];\n     for (int i = 0; i < files.length; ++i) {\n       inputs[i] = new CompilerInput(files[i], isExtern);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}