{
    "patch": "public boolean canBeCalled() {\n  return isRegexpType();\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else if (prettyPrint) {\n    // Don't pretty print recursively.\n    prettyPrint = false;\n\n    // Use a tree set so that the properties are sorted.\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType() &&\n             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n\n    int i = 0;\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n\n      sb.append(property);\n      sb.append(\": \");\n\n      JSType propertyType = getPropertyType(property);\n      if (propertyType instanceof ObjectType || propertyType instanceof FunctionType) {\n        ObjectType objectType = (propertyType instanceof ObjectType) ? (ObjectType) propertyType : ((FunctionType) propertyType).getTypeOfThis();\n        // Add a check for null, in case objectType is null for some reason.\n        if (objectType != null && objectType.hasReferenceName()) {\n          // Added check to detect cycles. If we encounter a self-reference, we print \"{...}\" to avoid infinite loops.\n          if (objectType.getReferenceName().equals(getReferenceName())) {\n            sb.append(\"{...}\");\n          } else {\n            sb.append(objectType.toStringHelper(forAnnotations));\n          }\n        } else {\n          sb.append(propertyType.toString());\n        }\n      } else {\n        sb.append(propertyType.toString());\n      }\n\n      ++i;\n      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        sb.append(\", ...\");\n        break;\n      }\n    }\n\n    sb.append(\"}\");\n\n    prettyPrint = true;\n    return sb.toString();\n  } else {\n    return \"{...}\";\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..bce6ca3b 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,72 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+public boolean canBeCalled() {\n+  return isRegexpType();\n+}\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n+  if (hasReferenceName()) {\n+    return getReferenceName();\n+  } else if (prettyPrint) {\n+    // Don't pretty print recursively.\n+    prettyPrint = false;\n+\n+    // Use a tree set so that the properties are sorted.\n+    Set<String> propertyNames = Sets.newTreeSet();\n+    for (ObjectType current = this;\n+         current != null && !current.isNativeObjectType() &&\n+             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+         current = current.getImplicitPrototype()) {\n+      propertyNames.addAll(current.getOwnPropertyNames());\n+    }\n+\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"{\");\n+\n+    int i = 0;\n+    for (String property : propertyNames) {\n+      if (i > 0) {\n+        sb.append(\", \");\n       }\n \n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n-\n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+      sb.append(property);\n+      sb.append(\": \");\n+\n+      JSType propertyType = getPropertyType(property);\n+      if (propertyType instanceof ObjectType || propertyType instanceof FunctionType) {\n+        ObjectType objectType = (propertyType instanceof ObjectType) ? (ObjectType) propertyType : ((FunctionType) propertyType).getTypeOfThis();\n+        // Add a check for null, in case objectType is null for some reason.\n+        if (objectType != null && objectType.hasReferenceName()) {\n+          // Added check to detect cycles. If we encounter a self-reference, we print \"{...}\" to avoid infinite loops.\n+          if (objectType.getReferenceName().equals(getReferenceName())) {\n+            sb.append(\"{...}\");\n+          } else {\n+            sb.append(objectType.toStringHelper(forAnnotations));\n+          }\n+        } else {\n+          sb.append(propertyType.toString());\n         }\n+      } else {\n+        sb.append(propertyType.toString());\n+      }\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n+      ++i;\n+      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+        sb.append(\", ...\");\n+        break;\n       }\n+    }\n \n-      sb.append(\"}\");\n+    sb.append(\"}\");\n \n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n-    }\n+    prettyPrint = true;\n+    return sb.toString();\n+  } else {\n+    return \"{...}\";\n   }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}