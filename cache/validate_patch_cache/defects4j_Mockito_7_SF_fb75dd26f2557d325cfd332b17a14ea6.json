{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}\n\nprivate Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    if (typeVariable == null) {\n        return null;\n    }\n    Type[] actualTypeArguments = ((ParameterizedType) typeVariable.getGenericDeclaration()).getActualTypeArguments();\n    if (actualTypeArguments.length == 0) {\n        return null;\n    }\n    return actualTypeArguments[0];\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..6c7f6a469 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,30 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n+\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    if (typeVariable == null) {\n+        return null;\n+    }\n+    Type[] actualTypeArguments = ((ParameterizedType) typeVariable.getGenericDeclaration()).getActualTypeArguments();\n+    if (actualTypeArguments.length == 0) {\n+        return null;\n+    }\n+    return actualTypeArguments[0];\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: name clash: getActualTypeArgumentFor(TypeVariable<?>) in TypeVariableReturnType and getActualTypeArgumentFor(TypeVariable) in GenericMetadataSupport have the same erasure, yet neither overrides the other",
    "test_result": "ERROR"
}