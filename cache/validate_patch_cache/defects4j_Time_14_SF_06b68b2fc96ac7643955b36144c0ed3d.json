{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    } else if (DateTimeUtils.isContiguous(partial)) {\n        int[] newValues = Arrays.copyOf(values, values.length);\n        int monthsToAdd = fieldIndex == DateTimeFieldType.monthOfYear().getDurationType().getFieldIndex() ? valueToAdd : 0;\n        long instant = 0L;\n        \n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i != fieldIndex) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            } else {\n                // Calculate new year and month values\n                int oldMonthOfYear = partial.getFieldType(i).getField(iChronology).get(instant);\n                int oldYear = partial.getFieldType(iChronology.year()).getField(iChronology).get(instant);\n                int oldMonthIndex = oldMonthOfYear - 1;\n                int newMonthIndex = (oldMonthIndex + monthsToAdd) % 12;\n                int newMonthOfYear = newMonthIndex + 1;\n                int yearDiff = (oldMonthIndex + monthsToAdd) / 12;\n                int newYear = oldYear + yearDiff;\n\n                // Check if new date is valid\n                Instant newInstant = null;\n                try {\n                    newInstant = iChronology.year().setCopy(instant, newYear);\n                    newInstant = iChronology.monthOfYear().setCopy(newInstant, newMonthOfYear);\n                } catch (IllegalArgumentException e) {\n                    // New date is not valid, go to last day of valid month\n                    newInstant = iChronology.monthOfYear().setCopy(instant, newMonthOfYear);\n                    newInstant = iChronology.year().setCopy(newInstant, newYear);\n                    newInstant = iChronology.dayOfMonth().setCopy(newInstant, 1);\n                    newInstant = iChronology.dayOfMonth().addWrapFieldToCopy(newInstant, -1);\n                }\n\n                // Update instant with new value\n                instant = newInstant.getMillis();\n                newValues[fieldIndex] = iChronology.getField(fieldIndex).get(instant);\n            }\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..b2056072 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,50 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    } else if (DateTimeUtils.isContiguous(partial)) {\n+        int[] newValues = Arrays.copyOf(values, values.length);\n+        int monthsToAdd = fieldIndex == DateTimeFieldType.monthOfYear().getDurationType().getFieldIndex() ? valueToAdd : 0;\n+        long instant = 0L;\n+        \n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i != fieldIndex) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            } else {\n+                // Calculate new year and month values\n+                int oldMonthOfYear = partial.getFieldType(i).getField(iChronology).get(instant);\n+                int oldYear = partial.getFieldType(iChronology.year()).getField(iChronology).get(instant);\n+                int oldMonthIndex = oldMonthOfYear - 1;\n+                int newMonthIndex = (oldMonthIndex + monthsToAdd) % 12;\n+                int newMonthOfYear = newMonthIndex + 1;\n+                int yearDiff = (oldMonthIndex + monthsToAdd) / 12;\n+                int newYear = oldYear + yearDiff;\n+\n+                // Check if new date is valid\n+                Instant newInstant = null;\n+                try {\n+                    newInstant = iChronology.year().setCopy(instant, newYear);\n+                    newInstant = iChronology.monthOfYear().setCopy(newInstant, newMonthOfYear);\n+                } catch (IllegalArgumentException e) {\n+                    // New date is not valid, go to last day of valid month\n+                    newInstant = iChronology.monthOfYear().setCopy(instant, newMonthOfYear);\n+                    newInstant = iChronology.year().setCopy(newInstant, newYear);\n+                    newInstant = iChronology.dayOfMonth().setCopy(newInstant, 1);\n+                    newInstant = iChronology.dayOfMonth().addWrapFieldToCopy(newInstant, -1);\n+                }\n+\n+                // Update instant with new value\n+                instant = newInstant.getMillis();\n+                newValues[fieldIndex] = iChronology.getField(fieldIndex).get(instant);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}