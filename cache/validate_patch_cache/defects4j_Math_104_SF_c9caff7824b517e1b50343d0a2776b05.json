{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x)) {\n        return Double.NaN;\n    }\n\n    if ((a <= 0.0) || (x < 0.0)) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n\n    double r = a;\n    double c = 1.0;\n    double ans = 1.0;\n\n    while (ans * Math.pow(2, -53) > 0) {\n        double g = c * x / r;\n        ans *= 1.0 + g;\n        r += 1.0;\n        c = g / (r - a);\n    }\n\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * ans / a;\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x)) {\n        return Double.NaN;\n    }\n\n    if ((a <= 0.0) || (x < 0.0)) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 1.0;\n    }\n\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n\n    double b0 = 0.0;\n    double b1 = 1.0;\n    double p0 = 1.0;\n    double p1 = x;\n    double q0 = 0.0;\n    double q1 = 1.0;\n    double ans = Double.POSITIVE_INFINITY;\n\n    while (Math.abs(ans / Math.pow(2, -53) - q1) > 0) {\n        double c = p0 / b0;\n        double h = c * ans;\n        p0 = p1 + h * p0;\n        q0 = q1 + h * q0;\n        p1 = b1 * p0 + x * q0;\n        q1 = b1 * q0 + p0;\n        if (p1 != 0.0) {\n            ans = q1 / p1;\n        }\n        b0 = b1;\n        b1 = p1;\n    }\n\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * ans;\n}\n\npublic static double logGamma(double x) {\n    double[] tmp = new double[]{76.18009172947146, -86.50532032941677, 24.01409824083091,\n            -1.231739572450155, 0.1208650973866179E-2, -0.5395239384953E-5};\n    double ser = 1.000000000190015;\n    double sum = 0.999999999999997;\n    int j = 0;\n    for (int i = 6; i >= 1; --i) {\n        sum += tmp[j] / (x + i);\n        j++;\n    }\n    return (x - 0.5) * Math.log(x + 4.5) - (x + 4.5) + Math.log(2.5066282746310005 * ser / x) + Math.log(sum);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..31340a760 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,91 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+\n+    if ((a <= 0.0) || (x < 0.0)) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+\n+    double r = a;\n+    double c = 1.0;\n+    double ans = 1.0;\n+\n+    while (ans * Math.pow(2, -53) > 0) {\n+        double g = c * x / r;\n+        ans *= 1.0 + g;\n+        r += 1.0;\n+        c = g / (r - a);\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * ans / a;\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+\n+    if ((a <= 0.0) || (x < 0.0)) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+\n+    double b0 = 0.0;\n+    double b1 = 1.0;\n+    double p0 = 1.0;\n+    double p1 = x;\n+    double q0 = 0.0;\n+    double q1 = 1.0;\n+    double ans = Double.POSITIVE_INFINITY;\n+\n+    while (Math.abs(ans / Math.pow(2, -53) - q1) > 0) {\n+        double c = p0 / b0;\n+        double h = c * ans;\n+        p0 = p1 + h * p0;\n+        q0 = q1 + h * q0;\n+        p1 = b1 * p0 + x * q0;\n+        q1 = b1 * q0 + p0;\n+        if (p1 != 0.0) {\n+            ans = q1 / p1;\n+        }\n+        b0 = b1;\n+        b1 = p1;\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * ans;\n+}\n+\n+public static double logGamma(double x) {\n+    double[] tmp = new double[]{76.18009172947146, -86.50532032941677, 24.01409824083091,\n+            -1.231739572450155, 0.1208650973866179E-2, -0.5395239384953E-5};\n+    double ser = 1.000000000190015;\n+    double sum = 0.999999999999997;\n+    int j = 0;\n+    for (int i = 6; i >= 1; --i) {\n+        sum += tmp[j] / (x + i);\n+        j++;\n+    }\n+    return (x - 0.5) * Math.log(x + 4.5) - (x + 4.5) + Math.log(2.5066282746310005 * ser / x) + Math.log(sum);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}