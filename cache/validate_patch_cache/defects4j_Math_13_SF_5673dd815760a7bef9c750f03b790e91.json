{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix s = dec.getSquareRoot();\n    if (s == null) {\n        // if matrix is not positive definite, use polar decomposition instead\n        PolarDecomposition polarDec = new PolarDecomposition(m);\n        RealMatrix u = polarDec.getU();\n        RealMatrix p = polarDec.getP();\n        return u.multiply(squareRoot(p)).multiply(u.transpose());\n    }\n    return s;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..116d9a032 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix s = dec.getSquareRoot();\n+    if (s == null) {\n+        // if matrix is not positive definite, use polar decomposition instead\n+        PolarDecomposition polarDec = new PolarDecomposition(m);\n+        RealMatrix u = polarDec.getU();\n+        RealMatrix p = polarDec.getP();\n+        return u.multiply(squareRoot(p)).multiply(u.transpose());\n     }\n+    return s;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}