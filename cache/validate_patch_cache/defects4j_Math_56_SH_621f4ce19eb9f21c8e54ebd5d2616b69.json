{
    "patch": "int idx = 1;\nwhile (count <= index) {\n    count += idx;\n    ++idx;\n}\n--idx;\nindices[last - 1] = idx;\ncount -= (idx * (idx -1)) / 2;\nfor (int i = last - 2; i >= 0; i--) {\n    final int offset = uniCounterOffset[i];\n    while (count + offset <= index) {\n        count += offset;\n        ++indices[i];\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..55531ebd4 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,21 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n-        }\n-        --idx;\n-        indices[last] = idx;\n+int idx = 1;\n+while (count <= index) {\n+    count += idx;\n+    ++idx;\n+}\n+--idx;\n+indices[last - 1] = idx;\n+count -= (idx * (idx -1)) / 2;\n+for (int i = last - 2; i >= 0; i--) {\n+    final int offset = uniCounterOffset[i];\n+    while (count + offset <= index) {\n+        count += offset;\n+        ++indices[i];\n+    }\n+}\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [0][1] expected:<0> but was:<1>",
    "test_result": "FAIL"
}