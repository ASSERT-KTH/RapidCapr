{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    boolean supportsMonths = (type.getIndexedField(ChronologyFieldType.monthOfYear()) != null);\n    boolean supportsYears = (type.getIndexedField(ChronologyFieldType.year()) != null);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    if (supportsMonths || supportsYears) {\n        // calculate millis for the duration of the months\n        DateTime start = getStart().withTimeAtStartOfDay();\n        DateTime end = getEnd().withTimeAtStartOfDay();\n        int months = Months.monthsBetween(start, end).getMonths();\n        if (supportsYears) {\n            int years = Math.floorDiv(months, 12);\n            months = Math.floorMod(months, 12);\n            millis += (((long) years) * ((long) DateTimeConstants.MILLIS_PER_YEAR));\n        }\n        millis += (((long) months) * ((long) DateTimeConstants.MILLIS_PER_MONTH));\n    } else {\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    }\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..64ce7559 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,31 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    boolean supportsMonths = (type.getIndexedField(ChronologyFieldType.monthOfYear()) != null);\n+    boolean supportsYears = (type.getIndexedField(ChronologyFieldType.year()) != null);\n+    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    if (supportsMonths || supportsYears) {\n+        // calculate millis for the duration of the months\n+        DateTime start = getStart().withTimeAtStartOfDay();\n+        DateTime end = getEnd().withTimeAtStartOfDay();\n+        int months = Months.monthsBetween(start, end).getMonths();\n+        if (supportsYears) {\n+            int years = Math.floorDiv(months, 12);\n+            months = Math.floorMod(months, 12);\n+            millis += (((long) years) * ((long) DateTimeConstants.MILLIS_PER_YEAR));\n         }\n-        return result;\n+        millis += (((long) months) * ((long) DateTimeConstants.MILLIS_PER_MONTH));\n+    } else {\n+        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n     }\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    return result;\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}