{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic class GammaFunction {\n\n    public static double regularizedGamma(double a, double x) {\n        final double epsilon = 10e-15;\n        double sum = 0.0;\n        double term = 1.0 / a;\n        int n = 1;\n        \n        while (Math.abs(term) > epsilon) {\n            term *= x / (a + n);\n            sum += term;\n            n += 1;\n        }\n        \n        double gammaValue = Gamma.gamma(a);\n        double regularizedGammaValue = Math.exp(-x) * Math.pow(x, a) * sum / gammaValue;\n        \n        return regularizedGammaValue;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..89b084876 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,28 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class GammaFunction {\n+\n+    public static double regularizedGamma(double a, double x) {\n+        final double epsilon = 10e-15;\n+        double sum = 0.0;\n+        double term = 1.0 / a;\n+        int n = 1;\n+        \n+        while (Math.abs(term) > epsilon) {\n+            term *= x / (a + n);\n+            sum += term;\n+            n += 1;\n+        }\n+        \n+        double gammaValue = Gamma.gamma(a);\n+        double regularizedGammaValue = Math.exp(-x) * Math.pow(x, a) * sum / gammaValue;\n+        \n+        return regularizedGammaValue;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}