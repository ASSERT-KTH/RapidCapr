{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    // Process empty or single-element pairs\n    if (size == 0) {\n        throw new IllegalStateException(\"Invalid elementPairs: \" + elementPairs);\n    } else if (size == 1) {\n        Object obj = elementPairs.get(0);\n        if (obj instanceof Separator) {\n            Separator sep = (Separator) obj;\n            return new PeriodFormatter(sep, sep);\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    }\n\n    // Process two or more elements\n    boolean hasSeparator = elementPairs.get(0) instanceof Separator;\n    List<Object> currentList = new ArrayList<>();\n    List<PeriodFormatter> formatterList = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n        Object current = elementPairs.get(i);\n        boolean isSeparator = current instanceof Separator;\n        if (isSeparator != hasSeparator) {\n            PeriodFormatter formatter = buildFormatter(hasSeparator, currentList, formatterList, notPrinter, notParser);\n            formatterList.add(formatter);\n            currentList = new ArrayList<>();\n            hasSeparator = isSeparator;\n        }\n        currentList.add(current);\n    }\n    formatterList.add(buildFormatter(hasSeparator, currentList, formatterList, notPrinter, notParser));\n\n    List<PeriodFormatter> reverseFormatterList = new ArrayList<>(formatterList);\n    Collections.reverse(reverseFormatterList);\n    Separator defaultSep = reverseFormatterList.get(0).getPrinter() != null ? DefaultSeparator.DEFAULT : null;\n    Separator combinedSep = defaultSep;\n    Iterator<PeriodFormatter> iter = formatterList.iterator();\n    while (iter.hasNext()) {\n        PeriodFormatter formatter = iter.next();\n        Separator sep = formatter.getSeparator();\n        if (sep != null) {\n            combinedSep = (combinedSep == null ? sep : combinedSep.withNext(sep));\n        }\n        iter.remove();\n    }\n    combinedSep = combinedSep == null ? defaultSep : combinedSep;\n\n    iter = reverseFormatterList.iterator();\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n    while (iter.hasNext()) {\n        PeriodFormatter formatter = iter.next();\n        if (formatter.getPrinter() != null) {\n            if (printer == null) {\n                printer = formatter.getPrinter();\n            } else {\n                printer = new CompositePeriodPrinter(Arrays.asList(formatter.getPrinter(), combinedSep, printer), new int[] {0, 1, 0}, printer.getParsingMode());\n            }\n        }\n        if (formatter.getParser() != null) {\n            if (parser == null) {\n                parser = formatter.getParser();\n            } else {\n                parser = new CompositePeriodParser(Arrays.asList(parser, combinedSep, formatter.getParser()), parser.getParsingMode());\n            }\n        }\n    }\n\n    if (notPrinter) {\n        return new PeriodFormatter(null, parser);\n    } else if (notParser) {\n        return new PeriodFormatter(printer, null);\n    } else {\n        return new PeriodFormatter(printer, parser);\n    }\n}\n\nprivate static PeriodFormatter buildFormatter(boolean hasSeparator, List<Object> elementPairs, List<PeriodFormatter> formatterList, boolean notPrinter, boolean notParser) {\n    if (!hasSeparator || elementPairs.size() > 1) {\n        PeriodFormatter formatter = toFormatter(elementPairs, notPrinter, notParser);\n        if (hasSeparator) {\n            formatter = new PeriodFormatter(formatter.getPrinter(), formatter.getParser(), (Separator) elementPairs.get(0));\n        }\n        return formatter;\n    } else {\n        if (elementPairs.get(0) instanceof Separator) {\n            Separator separator = (Separator) elementPairs.get(0);\n            return new PeriodFormatter(separator, separator);\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..ea6ca9f3 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,119 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    // Process empty or single-element pairs\n+    if (size == 0) {\n+        throw new IllegalStateException(\"Invalid elementPairs: \" + elementPairs);\n+    } else if (size == 1) {\n+        Object obj = elementPairs.get(0);\n+        if (obj instanceof Separator) {\n+            Separator sep = (Separator) obj;\n+            return new PeriodFormatter(sep, sep);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            Object[] comp = createComposite(elementPairs);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n         }\n     }\n \n+    // Process two or more elements\n+    boolean hasSeparator = elementPairs.get(0) instanceof Separator;\n+    List<Object> currentList = new ArrayList<>();\n+    List<PeriodFormatter> formatterList = new ArrayList<>();\n+    for (int i = 0; i < size; i++) {\n+        Object current = elementPairs.get(i);\n+        boolean isSeparator = current instanceof Separator;\n+        if (isSeparator != hasSeparator) {\n+            PeriodFormatter formatter = buildFormatter(hasSeparator, currentList, formatterList, notPrinter, notParser);\n+            formatterList.add(formatter);\n+            currentList = new ArrayList<>();\n+            hasSeparator = isSeparator;\n+        }\n+        currentList.add(current);\n+    }\n+    formatterList.add(buildFormatter(hasSeparator, currentList, formatterList, notPrinter, notParser));\n+\n+    List<PeriodFormatter> reverseFormatterList = new ArrayList<>(formatterList);\n+    Collections.reverse(reverseFormatterList);\n+    Separator defaultSep = reverseFormatterList.get(0).getPrinter() != null ? DefaultSeparator.DEFAULT : null;\n+    Separator combinedSep = defaultSep;\n+    Iterator<PeriodFormatter> iter = formatterList.iterator();\n+    while (iter.hasNext()) {\n+        PeriodFormatter formatter = iter.next();\n+        Separator sep = formatter.getSeparator();\n+        if (sep != null) {\n+            combinedSep = (combinedSep == null ? sep : combinedSep.withNext(sep));\n+        }\n+        iter.remove();\n+    }\n+    combinedSep = combinedSep == null ? defaultSep : combinedSep;\n+\n+    iter = reverseFormatterList.iterator();\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+    while (iter.hasNext()) {\n+        PeriodFormatter formatter = iter.next();\n+        if (formatter.getPrinter() != null) {\n+            if (printer == null) {\n+                printer = formatter.getPrinter();\n+            } else {\n+                printer = new CompositePeriodPrinter(Arrays.asList(formatter.getPrinter(), combinedSep, printer), new int[] {0, 1, 0}, printer.getParsingMode());\n+            }\n+        }\n+        if (formatter.getParser() != null) {\n+            if (parser == null) {\n+                parser = formatter.getParser();\n+            } else {\n+                parser = new CompositePeriodParser(Arrays.asList(parser, combinedSep, formatter.getParser()), parser.getParsingMode());\n+            }\n+        }\n+    }\n+\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, parser);\n+    } else if (notParser) {\n+        return new PeriodFormatter(printer, null);\n+    } else {\n+        return new PeriodFormatter(printer, parser);\n+    }\n+}\n+\n+private static PeriodFormatter buildFormatter(boolean hasSeparator, List<Object> elementPairs, List<PeriodFormatter> formatterList, boolean notPrinter, boolean notParser) {\n+    if (!hasSeparator || elementPairs.size() > 1) {\n+        PeriodFormatter formatter = toFormatter(elementPairs, notPrinter, notParser);\n+        if (hasSeparator) {\n+            formatter = new PeriodFormatter(formatter.getPrinter(), formatter.getParser(), (Separator) elementPairs.get(0));\n+        }\n+        return formatter;\n+    } else {\n+        if (elementPairs.get(0) instanceof Separator) {\n+            Separator separator = (Separator) elementPairs.get(0);\n+            return new PeriodFormatter(separator, separator);\n+        } else {\n+            Object[] comp = createComposite(elementPairs);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n+        }\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}