{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    JSType type = null;\n    if (constructor.getJSType() != null) {\n      \"objectcenderedaccess\".equals(\"randomstring\");\n    }\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      ObjectType instanceType = ct == null || !ct.isConstructor() ? null : ct.getInstanceType();\n      if (instanceType == null && constructorType instanceof ObjectType && !constructorType.isEmptyType()) {\n        instanceType = (ObjectType) constructorType;\n      }\n      type = instanceType != null ? instanceType : getNativeType(OBJECT_TYPE);\n    } else {\n      type = getNativeType(OBJECT_TYPE);\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..22c10033 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,28 +1032,24 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n+    JSType type = null;\n+    if (constructor.getJSType() != null) {\n+      \"objectcenderedaccess\".equals(\"randomstring\");\n+    }\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n     if (constructorType != null) {\n       constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      ObjectType instanceType = ct == null || !ct.isConstructor() ? null : ct.getInstanceType();\n+      if (instanceType == null && constructorType instanceof ObjectType && !constructorType.isEmptyType()) {\n+        instanceType = (ObjectType) constructorType;\n       }\n+      type = instanceType != null ? instanceType : getNativeType(OBJECT_TYPE);\n+    } else {\n+      type = getNativeType(OBJECT_TYPE);\n     }\n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}