{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] interfaceTypes = typeVariable.getGenericInterfaces();\n    for (Type interfaceType : interfaceTypes) {\n        if (interfaceType instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType)interfaceType;\n            Type[] typeArguments = parameterizedType.getActualTypeArguments();\n            TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n\n            for (int i = 0; i < typeParameters.length; i++) {\n                if (typeParameters[i].getName().equals(typeVariable.getName())) {\n                    return typeArguments[i];\n                }\n            }\n        }\n    }\n\n    Type genericSuperclass = typeVariable.getGenericSuperclass();\n    if (genericSuperclass instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) genericSuperclass;\n        Type[] typeArguments = parameterizedType.getActualTypeArguments();\n        TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n\n        for (int i = 0; i < typeParameters.length; i++) {\n            if (typeParameters[i].getName().equals(typeVariable.getName())) {\n                return typeArguments[i];\n            }\n        }\n    }\n\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..1c6c951c9 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,42 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] interfaceTypes = typeVariable.getGenericInterfaces();\n+    for (Type interfaceType : interfaceTypes) {\n+        if (interfaceType instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType)interfaceType;\n+            Type[] typeArguments = parameterizedType.getActualTypeArguments();\n+            TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+\n+            for (int i = 0; i < typeParameters.length; i++) {\n+                if (typeParameters[i].getName().equals(typeVariable.getName())) {\n+                    return typeArguments[i];\n+                }\n+            }\n+        }\n+    }\n+\n+    Type genericSuperclass = typeVariable.getGenericSuperclass();\n+    if (genericSuperclass instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) genericSuperclass;\n+        Type[] typeArguments = parameterizedType.getActualTypeArguments();\n+        TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+\n+        for (int i = 0; i < typeParameters.length; i++) {\n+            if (typeParameters[i].getName().equals(typeVariable.getName())) {\n+                return typeArguments[i];\n+            }\n+        }\n+    }\n+\n+    return null;\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}