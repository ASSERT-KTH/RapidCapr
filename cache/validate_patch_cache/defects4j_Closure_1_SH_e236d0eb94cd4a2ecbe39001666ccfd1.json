{
    "patch": "    \n    Node body = function.getLastChild();\n    Node firstParam = getFunctionArgList(function).getFirstChild();\n    while (firstParam != null && !referenced.contains(fnScope.getVar(firstParam.getString()))) {\n      body.removeChild(body.getSecondChild()); // remove formal parameter declaration\n      firstParam.detach(); // remove formal parameter name\n      compiler.reportCodeChange();\n      firstParam = firstParam.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4cc3ec6f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,14 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    Node body = function.getLastChild();\n+    Node firstParam = getFunctionArgList(function).getFirstChild();\n+    while (firstParam != null && !referenced.contains(fnScope.getVar(firstParam.getString()))) {\n+      body.removeChild(body.getSecondChild()); // remove formal parameter declaration\n+      firstParam.detach(); // remove formal parameter name\n+      compiler.reportCodeChange();\n+      firstParam = firstParam.getNext();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}