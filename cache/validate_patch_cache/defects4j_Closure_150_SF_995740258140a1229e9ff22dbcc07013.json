{
    "patch": "    @Override \n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) {\n        return;\n      }\n\n      switch (n.getType()) {\n\n        case Token.LP: // If this is a function invocation, handle inputs\n          if (parent != null && (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT)) {\n            handleFunctionInputs(n);\n          } else if (parent != null && parent.getType() == Token.FUNCTION) {\n            handleFunctionInputs(parent);\n          }\n          break;\n\n        case Token.FUNCTION:\n          if (parent != null && parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n          \n        default:\n          attachLiteralTypes(n);\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..37bee435 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,40 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+    @Override \n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n == scope.getRootNode()) {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n       switch (n.getType()) {\n+\n+        case Token.LP: // If this is a function invocation, handle inputs\n+          if (parent != null && (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT)) {\n+            handleFunctionInputs(n);\n+          } else if (parent != null && parent.getType() == Token.FUNCTION) {\n+            handleFunctionInputs(parent);\n+          }\n+          break;\n+\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+          if (parent != null && parent.getType() == Token.NAME) {\n             return;\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n+\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n+\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n-      }\n-    }\n+          \n+        default:\n+          attachLiteralTypes(n);\n+          break;\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}