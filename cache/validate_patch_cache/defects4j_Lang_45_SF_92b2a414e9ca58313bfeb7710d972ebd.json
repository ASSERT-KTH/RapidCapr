{
    "patch": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    if (str == null) {\n        return null;\n    }\n    if (str.length() == 0) {\n        return StringUtils.EMPTY;\n    }\n    if(lower > upper || lower >= str.length()){\n        return StringUtils.EMPTY;\n    }\n\n    upper = Math.min(upper, str.length());\n    lower = Math.min(lower, str.length());\n\n    int abbreviateIndex = -1;\n    int currentIndex = lower;\n    while (currentIndex < upper && abbreviateIndex == -1) {\n        if (str.charAt(currentIndex) == ' ') {\n            abbreviateIndex = currentIndex;\n        }\n        currentIndex++;\n    }\n\n    if (abbreviateIndex == -1) {\n        abbreviateIndex = upper;\n    }\n\n    StringBuilder result = new StringBuilder(str.substring(0, abbreviateIndex));\n    result.append(StringUtils.defaultString(appendToEnd));\n\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..73b5899c 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -602,43 +602,37 @@ public class WordUtils {\n      * @return the abbreviated String.\n      * @since 2.4\n      */\n-    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n-        // initial parameter checks\n-        if (str == null) {\n-            return null;\n-        }\n-        if (str.length() == 0) {\n-            return StringUtils.EMPTY;\n-        }\n+public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (str.length() == 0) {\n+        return StringUtils.EMPTY;\n+    }\n+    if(lower > upper || lower >= str.length()){\n+        return StringUtils.EMPTY;\n+    }\n \n-        // if the lower value is greater than the length of the string,\n-        // set to the length of the string\n-        // if the upper value is -1 (i.e. no limit) or is greater\n-        // than the length of the string, set to the length of the string\n-        if (upper == -1 || upper > str.length()) {\n-            upper = str.length();\n-        }\n-        // if upper is less than lower, raise it to lower\n-        if (upper < lower) {\n-            upper = lower;\n-        }\n+    upper = Math.min(upper, str.length());\n+    lower = Math.min(lower, str.length());\n \n-        StringBuffer result = new StringBuffer();\n-        int index = StringUtils.indexOf(str, \" \", lower);\n-        if (index == -1) {\n-            result.append(str.substring(0, upper));\n-            // only if abbreviation has occured do we append the appendToEnd value\n-            if (upper != str.length()) {\n-                result.append(StringUtils.defaultString(appendToEnd));\n-            }\n-        } else if (index > upper) {\n-            result.append(str.substring(0, upper));\n-            result.append(StringUtils.defaultString(appendToEnd));\n-        } else {\n-            result.append(str.substring(0, index));\n-            result.append(StringUtils.defaultString(appendToEnd));\n+    int abbreviateIndex = -1;\n+    int currentIndex = lower;\n+    while (currentIndex < upper && abbreviateIndex == -1) {\n+        if (str.charAt(currentIndex) == ' ') {\n+            abbreviateIndex = currentIndex;\n         }\n-        return result.toString();\n+        currentIndex++;\n+    }\n+\n+    if (abbreviateIndex == -1) {\n+        abbreviateIndex = upper;\n     }\n \n+    StringBuilder result = new StringBuilder(str.substring(0, abbreviateIndex));\n+    result.append(StringUtils.defaultString(appendToEnd));\n+\n+    return result.toString();\n+}\n+\n }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[01234]> but was:<[]>",
    "test_result": "FAIL"
}