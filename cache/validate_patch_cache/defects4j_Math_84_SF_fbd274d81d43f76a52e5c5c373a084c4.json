{
    "patch": "protected RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\n                                                 final double coeff,\n                                                 final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    final double[] xSmallest = original[0].getPoint();\n    final int dim = xSmallest.length;\n    final RealPointValuePair[] temp = new RealPointValuePair[dim + 1];\n    for (int i = 0; i < dim + 1; i++) {\n        final double[] xOriginal = original[i].getPoint();\n        final double[] xTransformed = new double[dim];\n        for (int j = 0; j < dim; j++) {\n            xTransformed[j] = xSmallest[j] + coeff * (xOriginal[j] - xSmallest[j]);\n        }\n        final double value = evaluateObjective(xTransformed);\n        temp[i] = new RealPointValuePair(xTransformed, value, false);\n    }\n    Arrays.sort(temp, comparator);\n    return temp[0];\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..7e33755f9 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,26 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\n+                                                 final double coeff,\n+                                                 final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n-\n+    final double[] xSmallest = original[0].getPoint();\n+    final int dim = xSmallest.length;\n+    final RealPointValuePair[] temp = new RealPointValuePair[dim + 1];\n+    for (int i = 0; i < dim + 1; i++) {\n+        final double[] xOriginal = original[i].getPoint();\n+        final double[] xTransformed = new double[dim];\n+        for (int j = 0; j < dim; j++) {\n+            xTransformed[j] = xSmallest[j] + coeff * (xOriginal[j] - xSmallest[j]);\n         }\n-\n+        final double value = evaluateObjective(xTransformed);\n+        temp[i] = new RealPointValuePair(xTransformed, value, false);\n     }\n+    Arrays.sort(temp, comparator);\n+    return temp[0];\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: method evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>) is already defined in class MultiDirectional",
    "test_result": "ERROR"
}