{
    "patch": "Type[] bounds = typeVariable.getBounds();\nif (bounds.length == 0) {\n    return;\n}\n\nType actualTypeArg = getActualTypeArgumentFor(typeVariable);\nif (actualTypeArg instanceof WildcardType) {\n    WildcardType wt = (WildcardType) actualTypeArg;\n    for (Type type : wt.getUpperBounds()) {\n        registerTypeVariablesOn(type);\n    }\n} else if (actualTypeArg instanceof TypeVariable) {\n    TypeVariable<?> typeVar = (TypeVariable<?>) actualTypeArg;\n    readTypeVariable(typeVar);\n} else if (actualTypeArg instanceof ParameterizedType) {\n    ParameterizedType pt = (ParameterizedType) actualTypeArg;\n    for (Type type : pt.getActualTypeArguments()) {\n        registerTypeVariablesOn(type);\n    }\n} else if (actualTypeArg instanceof Class) {\n    registerTypeVariablesOn(actualTypeArg);\n} else {\n    for (Type bound : bounds) {\n        if (bound instanceof TypeVariable) {\n            TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n            readTypeVariable(typeVar);\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..006f2d464 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,42 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] bounds = typeVariable.getBounds();\n+if (bounds.length == 0) {\n+    return;\n+}\n+\n+Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n+if (actualTypeArg instanceof WildcardType) {\n+    WildcardType wt = (WildcardType) actualTypeArg;\n+    for (Type type : wt.getUpperBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+} else if (actualTypeArg instanceof TypeVariable) {\n+    TypeVariable<?> typeVar = (TypeVariable<?>) actualTypeArg;\n+    readTypeVariable(typeVar);\n+} else if (actualTypeArg instanceof ParameterizedType) {\n+    ParameterizedType pt = (ParameterizedType) actualTypeArg;\n+    for (Type type : pt.getActualTypeArguments()) {\n+        registerTypeVariablesOn(type);\n+    }\n+} else if (actualTypeArg instanceof Class) {\n+    registerTypeVariablesOn(actualTypeArg);\n+} else {\n+    for (Type bound : bounds) {\n+        if (bound instanceof TypeVariable) {\n+            TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n+            readTypeVariable(typeVar);\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}