{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  boolean resolvedViaRegistry = false;\n  boolean resolvedViaProperties = false;\n  boolean cycleDetected = false;\n\n  // Attempt to resolve the type using the registry first\n  resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n\n  // Check for implicit prototype cycle if resolved via registry\n  if (resolvedViaRegistry) {\n    cycleDetected = detectImplicitPrototypeCycle();\n  }\n\n  // If the type couldn't be resolved via registry or a cycle is detected,\n  // try to resolve via properties and check for implicit prototype cycle\n  if (!resolvedViaRegistry || cycleDetected) {\n    resolveViaProperties(t, enclosing);\n    resolvedViaProperties = isResolved();\n    if (resolvedViaProperties) {\n      cycleDetected = detectImplicitPrototypeCycle();\n    }\n  }\n\n  // If the type is resolved and no cycle is detected, finish resolution\n  if (isResolved() && !cycleDetected) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..966f0ba1 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,39 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  boolean resolvedViaRegistry = false;\n+  boolean resolvedViaProperties = false;\n+  boolean cycleDetected = false;\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+  // Attempt to resolve the type using the registry first\n+  resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+\n+  // Check for implicit prototype cycle if resolved via registry\n+  if (resolvedViaRegistry) {\n+    cycleDetected = detectImplicitPrototypeCycle();\n+  }\n \n+  // If the type couldn't be resolved via registry or a cycle is detected,\n+  // try to resolve via properties and check for implicit prototype cycle\n+  if (!resolvedViaRegistry || cycleDetected) {\n     resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    resolvedViaProperties = isResolved();\n+    if (resolvedViaProperties) {\n+      cycleDetected = detectImplicitPrototypeCycle();\n     }\n+  }\n \n+  // If the type is resolved and no cycle is detected, finish resolution\n+  if (isResolved() && !cycleDetected) {\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n   }\n \n+  return null;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}