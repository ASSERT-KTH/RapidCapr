{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    double gcfa = Gamma.gamma(a); // use regular gamma function rather than logGamma\n    double gcf = incompleteGammaFract(a, x, gcfa);\n    return Math.exp(-x + a * Math.log(x) - gcfa) * gcf;\n}\n\nprivate static double incompleteGammaFract(final double a, final double x, double gln) {\n    double g = 0.0;\n    double gold = 0.0;\n    double a0 = 1.0;\n    double a1 = x;\n    double b0 = 0.0;\n    double b1 = 1.0;\n    final double factor = Math.exp(-a + x * Math.log(a));\n    \n    final int maxIterations = 10000;\n    final double eps = 10e-15;\n    for (int n = 1; n <= maxIterations; n++) {\n        final double an = n;\n        final double ana = an - a;\n        a0 = (a1 + a0 * ana) * factor / an;\n        b0 = (b1 + b0 * ana) * factor / an;\n        final double anf = a0 + factor * b0;\n        g = anf / a1;\n        if (Math.abs(g - gold) < eps * Math.max(Math.abs(g), Math.abs(gold))) {\n            return g;\n        }\n        gold = g;\n        a1 = anf;\n        b1 = b0 + factor * a1;\n    }\n    throw new RuntimeException(\"Max iteration reached\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..e47f2743a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,45 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    double gcfa = Gamma.gamma(a); // use regular gamma function rather than logGamma\n+    double gcf = incompleteGammaFract(a, x, gcfa);\n+    return Math.exp(-x + a * Math.log(x) - gcfa) * gcf;\n+}\n+\n+private static double incompleteGammaFract(final double a, final double x, double gln) {\n+    double g = 0.0;\n+    double gold = 0.0;\n+    double a0 = 1.0;\n+    double a1 = x;\n+    double b0 = 0.0;\n+    double b1 = 1.0;\n+    final double factor = Math.exp(-a + x * Math.log(a));\n+    \n+    final int maxIterations = 10000;\n+    final double eps = 10e-15;\n+    for (int n = 1; n <= maxIterations; n++) {\n+        final double an = n;\n+        final double ana = an - a;\n+        a0 = (a1 + a0 * ana) * factor / an;\n+        b0 = (b1 + b0 * ana) * factor / an;\n+        final double anf = a0 + factor * b0;\n+        g = anf / a1;\n+        if (Math.abs(g - gold) < eps * Math.max(Math.abs(g), Math.abs(gold))) {\n+            return g;\n+        }\n+        gold = g;\n+        a1 = anf;\n+        b1 = b0 + factor * a1;\n+    }\n+    throw new RuntimeException(\"Max iteration reached\");\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}