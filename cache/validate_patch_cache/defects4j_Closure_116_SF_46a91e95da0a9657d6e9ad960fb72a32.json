{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n  Node argNode = callNode.getFirstChild().getNext();\n  Node paramNode = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n  while (argNode != null || paramNode != null) {\n    if (paramNode != null) {\n      String paramName = paramNode.getString();\n\n      boolean isAssignment = NodeUtil.isAssignmentOp(argNode);\n\n      // Check whether the parameter is assigned inside the function.\n      boolean isAssignedInsideFn = NodeUtil.getReferencesToName(block, paramName)\n          .stream()\n          .map(NodeUtil::getEnclosingStatement)\n          .anyMatch(stmt -> NodeUtil.findParentOfType(stmt, Token.ASSIGN) != null);\n\n      // If there is a mutable reference to an argument, then it cannot be inlined.\n      if (NodeUtil.mayEffectMutableState(argNode, compiler)\n          || (isAssignment && isAssignedInsideFn)) {\n        return CanInlineResult.NO;\n      }\n\n      // Check whether the parameter is referred to by more than one name.\n      int nameRefCount = NodeUtil.getNameReferenceCount(block, paramName);\n      if (nameRefCount > 1) {\n        // If there is a mutable reference to an argument, then it cannot be inlined.\n        if (NodeUtil.mayEffectMutableState(argNode, compiler)\n            || (isAssignment && isAssignedInsideFn)) {\n          return CanInlineResult.NO;\n        }\n      }\n\n      paramNode = paramNode.getNext();\n    }\n\n    if (argNode != null && NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n      return CanInlineResult.NO;\n    }\n\n    argNode = argNode.getNext();\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..415194ff 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,56 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n-\n-    Node block = fnNode.getLastChild();\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n+  Node block = fnNode.getLastChild();\n+  Node argNode = callNode.getFirstChild().getNext();\n+  Node paramNode = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  while (argNode != null || paramNode != null) {\n+    if (paramNode != null) {\n+      String paramName = paramNode.getString();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n+      boolean isAssignment = NodeUtil.isAssignmentOp(argNode);\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+      // Check whether the parameter is assigned inside the function.\n+      boolean isAssignedInsideFn = NodeUtil.getReferencesToName(block, paramName)\n+          .stream()\n+          .map(NodeUtil::getEnclosingStatement)\n+          .anyMatch(stmt -> NodeUtil.findParentOfType(stmt, Token.ASSIGN) != null);\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+      // If there is a mutable reference to an argument, then it cannot be inlined.\n+      if (NodeUtil.mayEffectMutableState(argNode, compiler)\n+          || (isAssignment && isAssignedInsideFn)) {\n+        return CanInlineResult.NO;\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+      // Check whether the parameter is referred to by more than one name.\n+      int nameRefCount = NodeUtil.getNameReferenceCount(block, paramName);\n+      if (nameRefCount > 1) {\n+        // If there is a mutable reference to an argument, then it cannot be inlined.\n+        if (NodeUtil.mayEffectMutableState(argNode, compiler)\n+            || (isAssignment && isAssignedInsideFn)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n       }\n+\n+      paramNode = paramNode.getNext();\n     }\n \n-    return CanInlineResult.YES;\n+    if (argNode != null && NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    argNode = argNode.getNext();\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}