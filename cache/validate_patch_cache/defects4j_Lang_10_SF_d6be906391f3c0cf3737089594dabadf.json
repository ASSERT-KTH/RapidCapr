{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    boolean isGMT= false;\n    boolean isBC= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n        if(c=='G') {\n            isBC= value.regionMatches(i, \"GGGG\", 0, 4) && !value.regionMatches(i, \"GGGGG\", 0, 5);\n        } else if(c=='y' && ++i<value.length() && value.charAt(i)=='y') {\n            regex.append(\"\\\\d{2}\");\n            isGMT= true;\n            wasWhite= false;\n            continue;\n        } else if(c=='M' && ++i<value.length() && value.charAt(i)=='M') {\n            regex.append(\"\\\\p{Lu}{3,}\");\n            isGMT= true;\n            wasWhite= false;\n            continue;\n        } else if(c=='d' && ++i<value.length() && value.charAt(i)=='d') {\n            regex.append(\"\\\\p{Lu}{3}\");\n            isGMT= true;\n            wasWhite= false;\n            continue;\n        } else if(c=='h' && ++i<value.length() && value.charAt(i)=='h') {\n            regex.append(\"\\\\d{2}\");\n            isGMT= true;\n            wasWhite= false;\n            continue;\n        } else if(c=='a' && ++i<value.length() && value.charAt(i)=='a') {\n            regex.append(\"\\\\p{Lu}{2}\");\n            isGMT= true;\n            wasWhite= false;\n            continue;\n        } else if(c=='E' && ++i<value.length() && value.charAt(i)=='E') {\n            regex.append(\"\\\\p{Lu}+\");\n            isGMT= true;\n            wasWhite= false;\n            continue;\n        } else if(c=='Z' && ++i<value.length() && value.charAt(i)=='Z') {\n            regex.append(\" GMT\");\n            isGMT= true;\n            wasWhite= false;\n            continue;\n        } else if(Character.isWhitespace(c)) {\n            if(!wasWhite) {\n                wasWhite= true;\n                regex.append(\"\\\\s*+\");\n            }\n            isGMT= false;\n            continue;\n        }\n        wasWhite= false;\n        switch(c) {\n            case '\\'':\n                if(unquote) {\n                    if(++i==value.length()) {\n                        return regex;\n                    }\n                    c= value.charAt(i);\n                }\n                break;\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n            case ':':\n            case '#':\n            case '@':\n                regex.append('\\\\');\n        }\n        regex.append(c);\n    }\n    if(isGMT || isBC) {\n        regex.append(\"\\\\s*[+-]\\\\d{4}\");\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..87898f90 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,19 +300,59 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite= false;\n+    boolean isGMT= false;\n+    boolean isBC= false;\n+    for(int i= 0; i<value.length(); ++i) {\n+        char c= value.charAt(i);\n+        if(c=='G') {\n+            isBC= value.regionMatches(i, \"GGGG\", 0, 4) && !value.regionMatches(i, \"GGGGG\", 0, 5);\n+        } else if(c=='y' && ++i<value.length() && value.charAt(i)=='y') {\n+            regex.append(\"\\\\d{2}\");\n+            isGMT= true;\n+            wasWhite= false;\n+            continue;\n+        } else if(c=='M' && ++i<value.length() && value.charAt(i)=='M') {\n+            regex.append(\"\\\\p{Lu}{3,}\");\n+            isGMT= true;\n+            wasWhite= false;\n+            continue;\n+        } else if(c=='d' && ++i<value.length() && value.charAt(i)=='d') {\n+            regex.append(\"\\\\p{Lu}{3}\");\n+            isGMT= true;\n+            wasWhite= false;\n+            continue;\n+        } else if(c=='h' && ++i<value.length() && value.charAt(i)=='h') {\n+            regex.append(\"\\\\d{2}\");\n+            isGMT= true;\n+            wasWhite= false;\n+            continue;\n+        } else if(c=='a' && ++i<value.length() && value.charAt(i)=='a') {\n+            regex.append(\"\\\\p{Lu}{2}\");\n+            isGMT= true;\n+            wasWhite= false;\n+            continue;\n+        } else if(c=='E' && ++i<value.length() && value.charAt(i)=='E') {\n+            regex.append(\"\\\\p{Lu}+\");\n+            isGMT= true;\n             wasWhite= false;\n-            switch(c) {\n+            continue;\n+        } else if(c=='Z' && ++i<value.length() && value.charAt(i)=='Z') {\n+            regex.append(\" GMT\");\n+            isGMT= true;\n+            wasWhite= false;\n+            continue;\n+        } else if(Character.isWhitespace(c)) {\n+            if(!wasWhite) {\n+                wasWhite= true;\n+                regex.append(\"\\\\s*+\");\n+            }\n+            isGMT= false;\n+            continue;\n+        }\n+        wasWhite= false;\n+        switch(c) {\n             case '\\'':\n                 if(unquote) {\n                     if(++i==value.length()) {\n@@ -335,12 +375,18 @@ public class FastDateParser implements DateParser, Serializable {\n             case '^':\n             case '$':\n             case '.':\n+            case ':':\n+            case '#':\n+            case '@':\n                 regex.append('\\\\');\n-            }\n-            regex.append(c);\n         }\n-        return regex;\n+        regex.append(c);\n+    }\n+    if(isGMT || isBC) {\n+        regex.append(\"\\\\s*[+-]\\\\d{4}\");\n     }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: Locale failed with GGGG/yyyy/MMMM/dddd/hhhh/aaaa/EEEE/ZZZZ era BC",
    "test_result": "FAIL"
}