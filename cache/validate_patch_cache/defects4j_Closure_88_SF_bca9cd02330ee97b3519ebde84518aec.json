{
    "patch": "private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      Node parent = n.getParent();\n      if (NodeUtil.isLhs(n, parent)) {\n        if (parent.getToken().equals(Token.ASSIGN)) {\n          // The expression to which the assignment is made is evaluated before\n          // the RHS is evaluated (normal left to right evaluation) but the KILL\n          // occurs after the RHS is evaluated.\n          return VariableLiveness.KILL;\n        } else if (NodeUtil.isIncDecOp(parent)) {\n          // For increment and decrement operators the read occurs before the write.\n          return VariableLiveness.READ;\n        } else {\n          Node grandParent = parent.getParent();\n          if (parent.getToken() == Token.OBJECTLIT) {\n            grandParent = grandParent.getParent();\n          }\n          if (grandParent != null && NodeUtil.isAssignmentOp(grandParent)) {\n            // If the RHS is an expression other than an identifier OR we are in\n            // an OBJECTLIT then the read occurs before the write.\n            Node assignRhs = grandParent.getLastChild();\n            if (assignRhs == null || !NodeUtil.isName(assignRhs)) {\n              return VariableLiveness.READ;\n            }\n          }\n        }\n      } else if (NodeUtil.isIncDecOp(n.getParent())) {\n          // For increment and decrement operators the read occurs before the write.\n          return VariableLiveness.READ;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..34010bfd 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,22 +320,42 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n+      Node parent = n.getParent();\n+      if (NodeUtil.isLhs(n, parent)) {\n+        if (parent.getToken().equals(Token.ASSIGN)) {\n+          // The expression to which the assignment is made is evaluated before\n+          // the RHS is evaluated (normal left to right evaluation) but the KILL\n+          // occurs after the RHS is evaluated.\n+          return VariableLiveness.KILL;\n+        } else if (NodeUtil.isIncDecOp(parent)) {\n+          // For increment and decrement operators the read occurs before the write.\n+          return VariableLiveness.READ;\n+        } else {\n+          Node grandParent = parent.getParent();\n+          if (parent.getToken() == Token.OBJECTLIT) {\n+            grandParent = grandParent.getParent();\n+          }\n+          if (grandParent != null && NodeUtil.isAssignmentOp(grandParent)) {\n+            // If the RHS is an expression other than an identifier OR we are in\n+            // an OBJECTLIT then the read occurs before the write.\n+            Node assignRhs = grandParent.getLastChild();\n+            if (assignRhs == null || !NodeUtil.isName(assignRhs)) {\n+              return VariableLiveness.READ;\n+            }\n+          }\n+        }\n+      } else if (NodeUtil.isIncDecOp(n.getParent())) {\n+          // For increment and decrement operators the read occurs before the write.\n+          return VariableLiveness.READ;\n       } else {\n         return VariableLiveness.READ;\n       }\n     }\n \n     // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n         VariableLiveness state = isVariableReadBeforeKill(child, variable);\n         if (state != VariableLiveness.MAYBE_LIVE) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}