{
    "patch": "      if (NodeUtil.isFunctionExpression(n)) {\n        Node parentNode = parent.getParent();\n        if (parentNode == null || !NodeUtil.isAssignmentOp(parentNode)) {\n          return false;\n        }\n        Node lhs = parentNode.getFirstChild();\n        if (lhs == null || !NodeUtil.isGet(lhs)) {\n          return false;\n        }\n        Node llhs = lhs.getFirstChild();\n        if (llhs == null || !llhs.matchesQualifiedName(\"window\") &&\n                !llhs.matchesQualifiedName(\"globalThis\") &&\n                !llhs.matchesQualifiedName(\"this\")) {\n          return false;\n        }\n        return !llhs.getNext().matchesQualifiedName(\"Object\") &&\n                !llhs.getNext().matchesQualifiedName(\"Object.prototype\");\n\n      } else {\n        if (n.isArrowFunction()) return false;\n        if (!isLendToPrototype(parent)) return true;\n        Node maybeId = n.isName() ? parent.getFirstChild() : n;\n        if (maybeId == null) {\n          return true;\n        }\n        Var maybeVar = t.getScope().getVar(maybeId.getString());\n        if (maybeVar == null) {\n          return true;\n        }\n        Node maybeValue = maybeVar.getInitialValue();\n        if (maybeValue != null && maybeValue.isFunction()) {\n          for (Node fnParent : maybeValue.getParents()) {\n            if (fnParent.isObjectLit() ||\n                    fnParent.isCall() && fnParent.getFirstChild() == maybeValue) {\n              return false;\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..0d88daaf 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,45 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isFunctionExpression(n)) {\n+        Node parentNode = parent.getParent();\n+        if (parentNode == null || !NodeUtil.isAssignmentOp(parentNode)) {\n+          return false;\n+        }\n+        Node lhs = parentNode.getFirstChild();\n+        if (lhs == null || !NodeUtil.isGet(lhs)) {\n+          return false;\n+        }\n+        Node llhs = lhs.getFirstChild();\n+        if (llhs == null || !llhs.matchesQualifiedName(\"window\") &&\n+                !llhs.matchesQualifiedName(\"globalThis\") &&\n+                !llhs.matchesQualifiedName(\"this\")) {\n+          return false;\n+        }\n+        return !llhs.getNext().matchesQualifiedName(\"Object\") &&\n+                !llhs.getNext().matchesQualifiedName(\"Object.prototype\");\n+\n+      } else {\n+        if (n.isArrowFunction()) return false;\n+        if (!isLendToPrototype(parent)) return true;\n+        Node maybeId = n.isName() ? parent.getFirstChild() : n;\n+        if (maybeId == null) {\n+          return true;\n+        }\n+        Var maybeVar = t.getScope().getVar(maybeId.getString());\n+        if (maybeVar == null) {\n+          return true;\n+        }\n+        Node maybeValue = maybeVar.getInitialValue();\n+        if (maybeValue != null && maybeValue.isFunction()) {\n+          for (Node fnParent : maybeValue.getParents()) {\n+            if (fnParent.isObjectLit() ||\n+                    fnParent.isCall() && fnParent.getFirstChild() == maybeValue) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}