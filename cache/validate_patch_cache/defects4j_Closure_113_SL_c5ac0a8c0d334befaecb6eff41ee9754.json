{
    "patch": "      if (provided == null || (!provided.isExplicitlyProvided() && provided.explicitModule == null)) {\n        // The required namespace is not provided, report an error.\n        unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else {\n        JSModule providedModule = provided.explicitModule;\n\n        // This must be non-null, because there was an explicit provide.\n        Preconditions.checkNotNull(providedModule);\n\n        JSModule module = t.getModule();\n\n        if (moduleGraph != null &&\n          module != providedModule &&\n          !moduleGraph.dependsOn(module, providedModule)) {\n          // The consumed module is not dependent on the provided module.\n          compiler.report(t.makeError(n,\n              XMODULE_REQUIRE_ERROR, ns, providedModule.getName(),\n              module.getName()));\n        }\n      }\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Requires should be removed before further processing.\n      // Some clients run closure pass multiple times, first with\n      // the checks for broken requires turned off. In these cases, we\n      // allow broken requires to be preserved by the first run to\n      // let them be caught in the subsequent run.\n>>> [ INFILL ] <<<\n      parent.detach();\n      compiler.reportChangeToEnclosingScope(parent);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..3e4629ca 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,39 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+      if (provided == null || (!provided.isExplicitlyProvided() && provided.explicitModule == null)) {\n+        // The required namespace is not provided, report an error.\n+        unrecognizedRequires.add(\n+          new UnrecognizedRequire(n, ns, t.getSourceName()));\n+      } else {\n+        JSModule providedModule = provided.explicitModule;\n+\n+        // This must be non-null, because there was an explicit provide.\n+        Preconditions.checkNotNull(providedModule);\n+\n+        JSModule module = t.getModule();\n+\n+        if (moduleGraph != null &&\n+          module != providedModule &&\n+          !moduleGraph.dependsOn(module, providedModule)) {\n+          // The consumed module is not dependent on the provided module.\n+          compiler.report(t.makeError(n,\n+              XMODULE_REQUIRE_ERROR, ns, providedModule.getName(),\n+              module.getName()));\n+        }\n+      }\n+\n+      maybeAddToSymbolTable(left);\n+      maybeAddStringNodeToSymbolTable(arg);\n+\n+      // Requires should be removed before further processing.\n+      // Some clients run closure pass multiple times, first with\n+      // the checks for broken requires turned off. In these cases, we\n+      // allow broken requires to be preserved by the first run to\n+      // let them be caught in the subsequent run.\n+>>> [ INFILL ] <<<\n+      parent.detach();\n+      compiler.reportChangeToEnclosingScope(parent);\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}