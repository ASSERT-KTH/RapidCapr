{
    "patch": ">>> [ INFILL ] <<<\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    // Preserve the original number of parameters for Function.prototype.length.\n    int originalParamCount = getParamCount(function);\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n        // Strip unreferenced parameters off the end of the param list.\n        int i = 0;\n        for (Node child : argList.children()) {\n            if (i >= originalParamCount) {\n                argList.removeChild(child);\n                compiler.reportCodeChange();\n                continue;\n            }\n            Var var = fnScope.getVar(child.getString());\n            if (!referenced.contains(var)) {\n                argList.removeChild(child);\n                compiler.reportCodeChange();\n            }\n            i++;\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d5524217 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,40 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+>>> [ INFILL ] <<<\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    // Preserve the original number of parameters for Function.prototype.length.\n+    int originalParamCount = getParamCount(function);\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+        // Strip unreferenced parameters off the end of the param list.\n+        int i = 0;\n+        for (Node child : argList.children()) {\n+            if (i >= originalParamCount) {\n+                argList.removeChild(child);\n+                compiler.reportCodeChange();\n+                continue;\n+            }\n+            Var var = fnScope.getVar(child.getString());\n+            if (!referenced.contains(var)) {\n+                argList.removeChild(child);\n+                compiler.reportCodeChange();\n+            }\n+            i++;\n+        }\n+    } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}