{
    "patch": "                // Detect early that algorithm is stuck, instead of waiting\n                // for the maximum number of iterations to be exceeded.\n                if (FastMath.abs(x1 - x0) <= FastMath.max(rtol * FastMath.max(FastMath.abs(x1), FastMath.abs(x0)), atol)) {\n                     if (FastMath.abs(f1) <= ftol) {\n                        switch (allowed) {\n                            case ANY_SIDE:\n                                return x1;\n                            case LEFT_SIDE:\n                                return inverted ? x1 : x0;\n                            case RIGHT_SIDE:\n                                return inverted ? x0 : x1;\n                            case BELOW_SIDE:\n                                return (f1 <= 0) ? x1 : x0;\n                            case ABOVE_SIDE:\n                                return (f1 >= 0) ? x1 : x0;\n                            default:\n                                throw new MathInternalError();\n                        }\n                    } else {\n                         throw new ConvergenceException();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..b8c3bf654 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,26 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                // Detect early that algorithm is stuck, instead of waiting\n+                // for the maximum number of iterations to be exceeded.\n+                if (FastMath.abs(x1 - x0) <= FastMath.max(rtol * FastMath.max(FastMath.abs(x1), FastMath.abs(x0)), atol)) {\n+                     if (FastMath.abs(f1) <= ftol) {\n+                        switch (allowed) {\n+                            case ANY_SIDE:\n+                                return x1;\n+                            case LEFT_SIDE:\n+                                return inverted ? x1 : x0;\n+                            case RIGHT_SIDE:\n+                                return inverted ? x0 : x1;\n+                            case BELOW_SIDE:\n+                                return (f1 <= 0) ? x1 : x0;\n+                            case ABOVE_SIDE:\n+                                return (f1 >= 0) ? x1 : x0;\n+                            default:\n+                                throw new MathInternalError();\n+                        }\n+                    } else {\n+                         throw new ConvergenceException();\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: orphaned default",
    "test_result": "ERROR"
}