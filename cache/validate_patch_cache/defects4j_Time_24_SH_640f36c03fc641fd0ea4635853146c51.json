{
    "patch": "    try {\n        int i;\n        for (i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            long savedMillis = millis;\n            try {\n                millis = savedField.set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                if (text != null) { \n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n            if (millis < savedMillis) {\n                // If we are at the lenient end of things, ensure the previous\n                // fields haven't invalidated this one.\n                for (int j = 0; j < i; j++) {\n                    SavedField sf = savedFields[j];\n                    if (sf.isSaved()) {\n                        try {\n                            sf.set(savedMillis, resetFields);\n                        } catch (IllegalFieldValueException e) {\n                            // continue, there may be other fields that invalidate\n                        }\n                    }\n                }\n                // This field is invalid as a lenient parsed value, drop it.\n                restoreState(savedFields, i);\n                i--;\n                count--;\n                continue;\n            }\n        }\n        // for the field after the last we set, we must ensure it isn't lenient \n        if (i < count) {\n            // now we are strict again, all remaining fields must be strict.\n            DurationField durationField;\n            do {\n                SavedField savedField = savedFields[i];\n                durationField = savedField.iField.getDurationField();\n                if (durationField == null) {\n                    durationField = savedField.iField.getRangeDurationField();\n                }\n                long savedMillis = millis;\n                try {\n                    millis = savedField.set(millis, resetFields);\n                } catch (IllegalFieldValueException e) {\n                    if (text != null) { \n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                    }\n                    throw e;\n                }\n                if (millis < savedMillis) {\n                    // Field is not strict after-all, drop it/ignore it\n                    restoreState(savedFields, i);\n                    i--;\n                    count--;\n                    break; // Leave loop\n                }\n            } while (++i < count && durationField != DurationFieldType.seconds().getField(iChrono));\n        }\n    } catch (IllegalArgumentException ex) {\n        if (text != null && text.length() != 0) {\n            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + ex.getMessage());\n        }\n        throw ex;\n    } catch (RuntimeException ex) {\n        if (text != null && text.length() != 0) {\n            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + ex.getMessage(), ex);\n        }\n        throw ex;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..cbb99939 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,78 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+    try {\n+        int i;\n+        for (i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            long savedMillis = millis;\n+            try {\n+                millis = savedField.set(millis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) { \n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n+            if (millis < savedMillis) {\n+                // If we are at the lenient end of things, ensure the previous\n+                // fields haven't invalidated this one.\n+                for (int j = 0; j < i; j++) {\n+                    SavedField sf = savedFields[j];\n+                    if (sf.isSaved()) {\n+                        try {\n+                            sf.set(savedMillis, resetFields);\n+                        } catch (IllegalFieldValueException e) {\n+                            // continue, there may be other fields that invalidate\n+                        }\n+                    }\n+                }\n+                // This field is invalid as a lenient parsed value, drop it.\n+                restoreState(savedFields, i);\n+                i--;\n+                count--;\n+                continue;\n+            }\n+        }\n+        // for the field after the last we set, we must ensure it isn't lenient \n+        if (i < count) {\n+            // now we are strict again, all remaining fields must be strict.\n+            DurationField durationField;\n+            do {\n+                SavedField savedField = savedFields[i];\n+                durationField = savedField.iField.getDurationField();\n+                if (durationField == null) {\n+                    durationField = savedField.iField.getRangeDurationField();\n+                }\n+                long savedMillis = millis;\n+                try {\n+                    millis = savedField.set(millis, resetFields);\n+                } catch (IllegalFieldValueException e) {\n+                    if (text != null) { \n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                    }\n+                    throw e;\n+                }\n+                if (millis < savedMillis) {\n+                    // Field is not strict after-all, drop it/ignore it\n+                    restoreState(savedFields, i);\n+                    i--;\n+                    count--;\n+                    break; // Leave loop\n+                }\n+            } while (++i < count && durationField != DurationFieldType.seconds().getField(iChrono));\n+        }\n+    } catch (IllegalArgumentException ex) {\n+        if (text != null && text.length() != 0) {\n+            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + ex.getMessage());\n+        }\n+        throw ex;\n+    } catch (RuntimeException ex) {\n+        if (text != null && text.length() != 0) {\n+            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + ex.getMessage(), ex);\n+        }\n+        throw ex;\n+    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}