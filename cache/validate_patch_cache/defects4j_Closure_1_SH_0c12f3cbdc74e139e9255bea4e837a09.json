{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (!NodeUtil.isFunctionExpression(function)) {\n      Node functionParent = function.getParent();\n\n      // Functions used as object literals have special rules: they are in\n      // expressions, so they can be used anywhere expressions can be used. We\n      // allow all params in such functions, regardless of references.\n      if (!NodeUtil.isObjectLitKey(functionParent) &&\n          !NodeUtil.isFunctionDeclaration(functionParent)) {\n        // The function will be removed if we remove all its arguments,\n        // so bail out early in such cases.\n        if (functionParent.isCall() &&\n            callSiteOptimizer.getNumberOfParamsToRemove(function) ==\n                NodeUtil.getFunctionParameters(function).getChildCount()) {\n          return;\n        }\n\n        Node argList = getFunctionArgList(function);\n        Node name = function.getFirstChild();\n        ReferenceMap references =\n            ReferenceMap.buildVariableMap(fnScope, name.getString());\n\n        Node lastArg = argList.getLastChild();\n        while (lastArg != null) {\n          if (lastArg.isDefaultValue()) {\n            lastArg = lastArg.getFirstChild();\n          }\n          Var var = fnScope.getVar(lastArg.getString());\n          lastArg = lastArg.getPrevious();\n\n          if (referenced.contains(var)) {\n            break;\n          }\n\n          argList.removeChild(lastArg.getNext());\n\n          if (name.getString().equals(\"async\")) {\n            // Keep the parameter if it's called before being referenced.\n            Node current = function.getParent();\n            while (current != null) {\n              if (NodeUtil.isFunction(current)) {\n                break;\n              }\n\n              if (NodeUtil.isCall(current)) {\n                if (current.getFirstChild().getString().equals(\"async\")) {\n                  continue;\n                }\n\n                boolean ignore =\n                    NodeUtil.mayHaveSideEffects(current.getFirstChild(), compiler);\n                if (!ignore && callSiteOptimizer.canModifyCall(current)) {\n                  ignore = true;\n                }\n\n                if (!ignore) {\n                  Node args = current.getLastChild();\n                  for (Node arg = args.getFirstChild();\n                       arg != null;\n                       arg = arg.getNext()) {\n                    if (arg.isName() && arg.getString().equals(lastArg.getString())) {\n                      // The parameter has side effects.\n                      argList.addChildToBack(lastArg.getNext());\n                      break;\n                    }\n                  }\n                }\n              }\n\n              current = current.getParent();\n            }\n          }\n\n          compiler.reportChangeToEnclosingScope(argList);\n        }\n        if (functionParent.isCall()) {\n          callSiteOptimizer.optimize(fnScope, references, name, argList);\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e4827673 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,89 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+\n+    if (!NodeUtil.isFunctionExpression(function)) {\n+      Node functionParent = function.getParent();\n+\n+      // Functions used as object literals have special rules: they are in\n+      // expressions, so they can be used anywhere expressions can be used. We\n+      // allow all params in such functions, regardless of references.\n+      if (!NodeUtil.isObjectLitKey(functionParent) &&\n+          !NodeUtil.isFunctionDeclaration(functionParent)) {\n+        // The function will be removed if we remove all its arguments,\n+        // so bail out early in such cases.\n+        if (functionParent.isCall() &&\n+            callSiteOptimizer.getNumberOfParamsToRemove(function) ==\n+                NodeUtil.getFunctionParameters(function).getChildCount()) {\n+          return;\n+        }\n+\n+        Node argList = getFunctionArgList(function);\n+        Node name = function.getFirstChild();\n+        ReferenceMap references =\n+            ReferenceMap.buildVariableMap(fnScope, name.getString());\n+\n+        Node lastArg = argList.getLastChild();\n+        while (lastArg != null) {\n+          if (lastArg.isDefaultValue()) {\n+            lastArg = lastArg.getFirstChild();\n+          }\n+          Var var = fnScope.getVar(lastArg.getString());\n+          lastArg = lastArg.getPrevious();\n+\n+          if (referenced.contains(var)) {\n+            break;\n+          }\n+\n+          argList.removeChild(lastArg.getNext());\n+\n+          if (name.getString().equals(\"async\")) {\n+            // Keep the parameter if it's called before being referenced.\n+            Node current = function.getParent();\n+            while (current != null) {\n+              if (NodeUtil.isFunction(current)) {\n+                break;\n+              }\n+\n+              if (NodeUtil.isCall(current)) {\n+                if (current.getFirstChild().getString().equals(\"async\")) {\n+                  continue;\n+                }\n+\n+                boolean ignore =\n+                    NodeUtil.mayHaveSideEffects(current.getFirstChild(), compiler);\n+                if (!ignore && callSiteOptimizer.canModifyCall(current)) {\n+                  ignore = true;\n+                }\n+\n+                if (!ignore) {\n+                  Node args = current.getLastChild();\n+                  for (Node arg = args.getFirstChild();\n+                       arg != null;\n+                       arg = arg.getNext()) {\n+                    if (arg.isName() && arg.getString().equals(lastArg.getString())) {\n+                      // The parameter has side effects.\n+                      argList.addChildToBack(lastArg.getNext());\n+                      break;\n+                    }\n+                  }\n+                }\n+              }\n+\n+              current = current.getParent();\n+            }\n+          }\n+\n+          compiler.reportChangeToEnclosingScope(argList);\n+        }\n+        if (functionParent.isCall()) {\n+          callSiteOptimizer.optimize(fnScope, references, name, argList);\n+        }\n+      }\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}