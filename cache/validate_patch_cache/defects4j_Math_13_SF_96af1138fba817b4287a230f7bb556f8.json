{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    try {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final double[] realEigenvalues = dec.getRealEigenvalues();\n        boolean isPositiveDefinite = true;\n        for (double eigenvalue : realEigenvalues) {\n            if (eigenvalue <= 0.0) {\n                isPositiveDefinite = false;\n                break;\n            }\n        }\n        if (isPositiveDefinite) {\n            final int n = m.getColumnDimension();\n            final RealMatrix v = dec.getV();\n            final RealMatrix d = MatrixUtils.createRealMatrix(n, n);\n            for (int i = 0; i < n; i++) {\n                double dEntry = dec.getD().getEntry(i, i);\n                if (dEntry <= 0.0) {\n                    d.setEntry(i, i, 0.0);\n                } else {\n                    d.setEntry(i, i, Math.sqrt(dEntry));\n                }\n            }\n            final RealMatrix dV = d.multiply(v);\n            final RealMatrix dVT = dV.transpose();\n            final RealMatrix product = v.multiply(dVT);\n            return product.scalarMultiply(1.1); // Add buffer to prevent OutOfMemoryError\n        } else {\n            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n        }\n    } catch (OutOfMemoryError e) {\n        final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n        throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..38e8bbc91 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,39 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    try {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final double[] realEigenvalues = dec.getRealEigenvalues();\n+        boolean isPositiveDefinite = true;\n+        for (double eigenvalue : realEigenvalues) {\n+            if (eigenvalue <= 0.0) {\n+                isPositiveDefinite = false;\n+                break;\n+            }\n+        }\n+        if (isPositiveDefinite) {\n+            final int n = m.getColumnDimension();\n+            final RealMatrix v = dec.getV();\n+            final RealMatrix d = MatrixUtils.createRealMatrix(n, n);\n+            for (int i = 0; i < n; i++) {\n+                double dEntry = dec.getD().getEntry(i, i);\n+                if (dEntry <= 0.0) {\n+                    d.setEntry(i, i, 0.0);\n+                } else {\n+                    d.setEntry(i, i, Math.sqrt(dEntry));\n+                }\n+            }\n+            final RealMatrix dV = d.multiply(v);\n+            final RealMatrix dVT = dV.transpose();\n+            final RealMatrix product = v.multiply(dVT);\n+            return product.scalarMultiply(1.1); // Add buffer to prevent OutOfMemoryError\n+        } else {\n+            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n+        }\n+    } catch (OutOfMemoryError e) {\n+        final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n+        throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n     }\n }\n+}",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.5> but was:<1.49999997031052>",
    "test_result": "FAIL"
}