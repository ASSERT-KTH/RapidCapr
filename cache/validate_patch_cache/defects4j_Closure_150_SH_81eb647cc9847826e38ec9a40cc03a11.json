{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          // A function expression cannot be a Name's first child, so this case should be enough\n          if (NodeUtil.isNameDeclaration(parent) && parent.hasOneChild()) {\n            defineDeclaredFunction(parent.getFirstChild(), parent);\n          } else if (parent.getType() == Token.EXPR_RESULT) {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..ce139dcf 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1451,10 +1451,12 @@ final class TypedScopeCreator implements ScopeCreator {\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          // A function expression cannot be a Name's first child, so this case should be enough\n+          if (NodeUtil.isNameDeclaration(parent) && parent.hasOneChild()) {\n+            defineDeclaredFunction(parent.getFirstChild(), parent);\n+          } else if (parent.getType() == Token.EXPR_RESULT) {\n+            defineDeclaredFunction(n, parent);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n@@ -1463,6 +1465,9 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n+      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+        handleFunctionInputs(parent);\n+      }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}