{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    JSTypeRegistry registry = constructorType.getRegistry();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else if (constructorType.isFunctionType()) {\n      // Use JSType.getObjectType instead of registry.getNativeObjectType to make sure the type\n      // we are using is unique. Avoiding a shared type is important because we may modify\n      // the properties of this object in the current traversal already.\n      ObjectType objectType = constructorType.toMaybeFunctionType().getInstanceType();\n      type = JSType.fromObjectType(objectType, registry);\n    } else if (constructorType instanceof NoObjectType) {\n      // Special case where NoObjectType can construct objects.\n      type = JSType.fromObjectType(registry.getEmptyObjectType(), registry);\n    } else {\n      type = constructorType;\n    }\n  }\n\n  n.setJSType(type);\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..823b27cc 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,36 +1032,39 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n-      }\n-    }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+\n+  if (constructorType != null) {\n+    constructorType = constructorType.restrictByNotNullOrUndefined();\n+    JSTypeRegistry registry = constructorType.getRegistry();\n+    if (constructorType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else if (constructorType.isFunctionType()) {\n+      // Use JSType.getObjectType instead of registry.getNativeObjectType to make sure the type\n+      // we are using is unique. Avoiding a shared type is important because we may modify\n+      // the properties of this object in the current traversal already.\n+      ObjectType objectType = constructorType.toMaybeFunctionType().getInstanceType();\n+      type = JSType.fromObjectType(objectType, registry);\n+    } else if (constructorType instanceof NoObjectType) {\n+      // Special case where NoObjectType can construct objects.\n+      type = JSType.fromObjectType(registry.getEmptyObjectType(), registry);\n+    } else {\n+      type = constructorType;\n     }\n-    return scope;\n   }\n \n+  n.setJSType(type);\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n+  }\n+\n+  return scope;\n+}\n+\n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}