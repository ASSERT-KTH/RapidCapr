{
    "patch": "              case Token.INC:\n              case Token.DEC:\n                if (parent.getParent() == null || NodeUtil.isExpressionResultUsed(parent)) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.CATCH:\n          Node catchBlock = n.getLastChild().getFirstChild();\n          Node exception = catchBlock.getFirstChild();\n          isSet = true;\n          type = Name.Type.OTHER;\n          name = exception.getString();\n          break;\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.INC:\n              case Token.DEC:\n                if (parent.getParent() == null || NodeUtil.isExpressionResultUsed(parent)) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getQualifiedName();\n          if (name == null) {\n            return;\n          }\n          break;\n        default:\n          return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..9aeb3b55 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -364,6 +364,65 @@ class GlobalNamespace\n                 type = Name.Type.FUNCTION;\n                 break;\n               case Token.INC:\n+              case Token.DEC:\n+                if (parent.getParent() == null || NodeUtil.isExpressionResultUsed(parent)) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                }\n+                break;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                }\n+            }\n+          }\n+          name = n.getString();\n+          break;\n+        case Token.CATCH:\n+          Node catchBlock = n.getLastChild().getFirstChild();\n+          Node exception = catchBlock.getFirstChild();\n+          isSet = true;\n+          type = Name.Type.OTHER;\n+          name = exception.getString();\n+          break;\n+        case Token.GETPROP:\n+          // This may be a namespaced name get or set.\n+          if (parent != null) {\n+            switch (parent.getType()) {\n+              case Token.ASSIGN:\n+                if (parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = getValueType(n.getNext());\n+                  isPropAssign = true;\n+                }\n+                break;\n+              case Token.INC:\n+              case Token.DEC:\n+                if (parent.getParent() == null || NodeUtil.isExpressionResultUsed(parent)) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                }\n+                break;\n+              case Token.GETPROP:\n+                return;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                }\n+            }\n+          }\n+          name = n.getQualifiedName();\n+          if (name == null) {\n+            return;\n+          }\n+          break;\n+        default:\n+          return;\n+              case Token.INC:\n               case Token.DEC:\n                 isSet = true;\n                 type = Name.Type.OTHER;",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}