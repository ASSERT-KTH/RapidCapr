{
    "patch": "public static <K, V> ReturnValues<K, V> countValues(Map<K, V> map, V value) {\n    ReturnValues<K, V> result = new ReturnValues<>();\n    int count = 0;\n\n    for (Map.Entry<K, V> entry : map.entrySet()) {\n        if (Objects.equals(entry.getValue(), value)) {\n            count++;\n            result.addReturnValue(entry.getKey(), entry.getValue());\n        }\n    }\n\n    result.addReturnValue(count);\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..b11e8e7b8 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,21 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <K, V> ReturnValues<K, V> countValues(Map<K, V> map, V value) {\n+    ReturnValues<K, V> result = new ReturnValues<>();\n+    int count = 0;\n+\n+    for (Map.Entry<K, V> entry : map.entrySet()) {\n+        if (Objects.equals(entry.getValue(), value)) {\n+            count++;\n+            result.addReturnValue(entry.getKey(), entry.getValue());\n+        }\n+    }\n+\n+    result.addReturnValue(count);\n+\n+    return result;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}