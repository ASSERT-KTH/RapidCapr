{
    "patch": "attachLiteralTypes(n);\nif (parent == null) {\n  return;\n}\nswitch (parent.getType()) {\n  case Token.SCRIPT:\n  case Token.BLOCK:\n    if (n.getType() == Token.FUNCTION) {\n      if (parent.getType() == Token.NAME || parent.getType() == Token.ASSIGN) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n    } else if (n.getType() == Token.CATCH) {\n      defineCatch(n, parent);\n    } else if (n.getType() == Token.VAR) {\n      defineVar(n, parent);\n    }\n    break;\n  case Token.TRY:\n    if (n.getType() == Token.CATCH) {\n      defineCatch(n, parent);\n    }\n    break;\n  case Token.LP:\n    if (NodeUtil.isFunctionExpression(parent)) {\n      defineDeclaredFunction(parent, parent.getParent());\n    } else if (parent == scope.getRootNode() && n.getType() == Token.LP) {\n      handleFunctionInputs(n);\n    }\n    break;\n  default:\n    break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..70a6ee3c 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,39 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+attachLiteralTypes(n);\n+if (parent == null) {\n+  return;\n+}\n+switch (parent.getType()) {\n+  case Token.SCRIPT:\n+  case Token.BLOCK:\n+    if (n.getType() == Token.FUNCTION) {\n+      if (parent.getType() == Token.NAME || parent.getType() == Token.ASSIGN) {\n+        return;\n       }\n+      defineDeclaredFunction(n, parent);\n+    } else if (n.getType() == Token.CATCH) {\n+      defineCatch(n, parent);\n+    } else if (n.getType() == Token.VAR) {\n+      defineVar(n, parent);\n+    }\n+    break;\n+  case Token.TRY:\n+    if (n.getType() == Token.CATCH) {\n+      defineCatch(n, parent);\n+    }\n+    break;\n+  case Token.LP:\n+    if (NodeUtil.isFunctionExpression(parent)) {\n+      defineDeclaredFunction(parent, parent.getParent());\n+    } else if (parent == scope.getRootNode() && n.getType() == Token.LP) {\n+      handleFunctionInputs(n);\n+    }\n+    break;\n+  default:\n+    break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}