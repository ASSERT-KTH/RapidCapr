{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n\n    // Initialize the base year to the default year\n    int baseYear = iDefaultYear;\n\n    // Determine the minimum field type in the saved fields\n    DateTimeFieldType minType = null;\n    for (int i = 0; i < count; i++) {\n        DateTimeFieldType fieldType = savedFields[i].iField.getType();\n        if (minType == null || fieldType.compareTo(minType) < 0) {\n            minType = fieldType;\n        }\n    }\n\n    // Alter the base year if the minimum field type is a month or day of month\n    if (minType == DateTimeFieldType.monthOfYear() || minType == DateTimeFieldType.dayOfMonth()) {\n        // Use the default year's century to calculate whether the year is a leap year\n        int defaultYearCentury = (iDefaultYear / 100) * 100;\n        boolean isBaseYearLeap = (new GregorianCalendar(defaultYearCentury, Calendar.JANUARY, 1)).isLeapYear(baseYear);\n        DateTimeField yearField = DateTimeFieldType.year().getField(iChrono);\n\n        // If we're parsing February 29 in a non-leap year, change the base year to the preceding leap year\n        if (isBaseYearLeap && minType == DateTimeFieldType.dayOfMonth()) {\n            for (int i = 0; i < count; i++) {\n                DateTimeField fieldType = savedFields[i].iField.getType();\n                if (fieldType == DateTimeFieldType.monthOfYear()) {\n                    int month = savedFields[i].get();\n                    if (month == 2) {\n                        int dayOfMonth = savedFields[i+1].get();\n                        if (dayOfMonth == 29) {\n                            if (!yearField.isLeap(baseYear)) {\n                                baseYear--;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        saveField(DateTimeFieldType.year(), baseYear);\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..f47919a5 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,85 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+\n+    // Initialize the base year to the default year\n+    int baseYear = iDefaultYear;\n+\n+    // Determine the minimum field type in the saved fields\n+    DateTimeFieldType minType = null;\n+    for (int i = 0; i < count; i++) {\n+        DateTimeFieldType fieldType = savedFields[i].iField.getType();\n+        if (minType == null || fieldType.compareTo(minType) < 0) {\n+            minType = fieldType;\n         }\n+    }\n+\n+    // Alter the base year if the minimum field type is a month or day of month\n+    if (minType == DateTimeFieldType.monthOfYear() || minType == DateTimeFieldType.dayOfMonth()) {\n+        // Use the default year's century to calculate whether the year is a leap year\n+        int defaultYearCentury = (iDefaultYear / 100) * 100;\n+        boolean isBaseYearLeap = (new GregorianCalendar(defaultYearCentury, Calendar.JANUARY, 1)).isLeapYear(baseYear);\n+        DateTimeField yearField = DateTimeFieldType.year().getField(iChrono);\n \n-        long millis = iMillis;\n-        try {\n+        // If we're parsing February 29 in a non-leap year, change the base year to the preceding leap year\n+        if (isBaseYearLeap && minType == DateTimeFieldType.dayOfMonth()) {\n             for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                DateTimeField fieldType = savedFields[i].iField.getType();\n+                if (fieldType == DateTimeFieldType.monthOfYear()) {\n+                    int month = savedFields[i].get();\n+                    if (month == 2) {\n+                        int dayOfMonth = savedFields[i+1].get();\n+                        if (dayOfMonth == 29) {\n+                            if (!yearField.isLeap(baseYear)) {\n+                                baseYear--;\n+                            }\n+                            break;\n+                        }\n+                    }\n+                }\n             }\n-            throw e;\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n+\n+        saveField(DateTimeFieldType.year(), baseYear);\n+    }\n+\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n                     \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}