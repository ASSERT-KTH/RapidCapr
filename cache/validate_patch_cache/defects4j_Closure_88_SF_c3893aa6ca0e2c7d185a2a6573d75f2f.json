{
    "patch": "private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // A variable is both read and written in the current expression.\n        // Therefore, the kill occurs after the read, and the variable is always live.\n        return VariableLiveness.READ;\n      } else {\n        // The variable was read but not written.\n        // All subsequent operations on the variable kill it.\n        return VariableLiveness.KILL;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    VariableLiveness firstRead = VariableLiveness.MAYBE_LIVE;\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state == VariableLiveness.KILL) {\n          // If any child subtree killed the variable, we should return that state.\n          return VariableLiveness.KILL;\n        }\n        if (state == VariableLiveness.READ && firstRead == VariableLiveness.MAYBE_LIVE) {\n          // If any child subtree read the variable, mark it and continue on.\n          firstRead = VariableLiveness.READ;\n        }\n      }\n    }\n    // If any child subtree read the variable, the variable is not dead. Return the first read.\n    if (firstRead != VariableLiveness.MAYBE_LIVE) {\n      return firstRead;\n    }\n    // The variable was not read in any child subtree, but may still have been written.\n    // All subsequent operations on the variable kill it.\n    return VariableLiveness.KILL;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..a9aceb90 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,42 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n+private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n-      } else {\n+        // A variable is both read and written in the current expression.\n+        // Therefore, the kill occurs after the read, and the variable is always live.\n         return VariableLiveness.READ;\n+      } else {\n+        // The variable was read but not written.\n+        // All subsequent operations on the variable kill it.\n+        return VariableLiveness.KILL;\n       }\n     }\n \n     // Expressions are evaluated left-right, depth first.\n+    VariableLiveness firstRead = VariableLiveness.MAYBE_LIVE;\n     for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n         VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n+        if (state == VariableLiveness.KILL) {\n+          // If any child subtree killed the variable, we should return that state.\n+          return VariableLiveness.KILL;\n+        }\n+        if (state == VariableLiveness.READ && firstRead == VariableLiveness.MAYBE_LIVE) {\n+          // If any child subtree read the variable, mark it and continue on.\n+          firstRead = VariableLiveness.READ;\n         }\n       }\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n+    // If any child subtree read the variable, the variable is not dead. Return the first read.\n+    if (firstRead != VariableLiveness.MAYBE_LIVE) {\n+      return firstRead;\n+    }\n+    // The variable was not read in any child subtree, but may still have been written.\n+    // All subsequent operations on the variable kill it.\n+    return VariableLiveness.KILL;\n   }\n }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}