{
    "patch": "private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) {\n        Node value = callTarget.getNext();\n        if (value != null) {\n            if (value.getNext() == null && NodeUtil.isImmutableValue(value)) {\n                // String(a) => '' + (a)\n                Node addition = IR.add(IR.string(\"\").srcref(callTarget), value.detachFromParent());\n                n.getParent().replaceChild(n, addition);\n                reportCodeChange();\n                return addition;\n            } else if (areAllParamsStrings(n)) {\n                // String(\"a\", \"b\", \"c\", ...) => \"abc...\"\n                Node paramNode = callTarget.getNext();\n                StringBuilder stringBuilder = new StringBuilder();\n                while (paramNode != null && NodeUtil.isImmutableValue(paramNode) && paramNode.isString()) {\n                    stringBuilder.append(paramNode.getString());\n                    paramNode = paramNode.getNext();\n                }\n                if (paramNode == null) {\n                    Node newString = IR.string(stringBuilder.toString()).srcref(n);\n                    n.getParent().replaceChild(n, newString);\n                    reportCodeChange();\n                    return newString;\n                }\n            }\n        }\n    }\n    return n;\n}\n\nprivate static boolean areAllParamsStrings(Node n) {\n    Node paramNode = n.getFirstChild().getNext();\n    while (paramNode != null) {\n        if (!NodeUtil.isImmutableValue(paramNode) || !paramNode.isString()) {\n            return false;\n        }\n        paramNode = paramNode.getNext();\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..9ba8c20f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -205,29 +205,48 @@ class PeepholeSubstituteAlternateSyntax\n     }\n   }\n \n-  private Node tryFoldSimpleFunctionCall(Node n) {\n+private Node tryFoldSimpleFunctionCall(Node n) {\n     Preconditions.checkState(n.isCall());\n     Node callTarget = n.getFirstChild();\n-    if (callTarget != null && callTarget.isName() &&\n-          callTarget.getString().equals(\"String\")) {\n-      // Fold String(a) to '' + (a) on immutable literals,\n-      // which allows further optimizations\n-      //\n-      // We can't do this in the general case, because String(a) has\n-      // slightly different semantics than '' + (a). See\n-      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n-      Node value = callTarget.getNext();\n-      if (value != null) {\n-        Node addition = IR.add(\n-            IR.string(\"\").srcref(callTarget),\n-            value.detachFromParent());\n-        n.getParent().replaceChild(n, addition);\n-        reportCodeChange();\n-        return addition;\n-      }\n+    if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) {\n+        Node value = callTarget.getNext();\n+        if (value != null) {\n+            if (value.getNext() == null && NodeUtil.isImmutableValue(value)) {\n+                // String(a) => '' + (a)\n+                Node addition = IR.add(IR.string(\"\").srcref(callTarget), value.detachFromParent());\n+                n.getParent().replaceChild(n, addition);\n+                reportCodeChange();\n+                return addition;\n+            } else if (areAllParamsStrings(n)) {\n+                // String(\"a\", \"b\", \"c\", ...) => \"abc...\"\n+                Node paramNode = callTarget.getNext();\n+                StringBuilder stringBuilder = new StringBuilder();\n+                while (paramNode != null && NodeUtil.isImmutableValue(paramNode) && paramNode.isString()) {\n+                    stringBuilder.append(paramNode.getString());\n+                    paramNode = paramNode.getNext();\n+                }\n+                if (paramNode == null) {\n+                    Node newString = IR.string(stringBuilder.toString()).srcref(n);\n+                    n.getParent().replaceChild(n, newString);\n+                    reportCodeChange();\n+                    return newString;\n+                }\n+            }\n+        }\n     }\n     return n;\n-  }\n+}\n+\n+private static boolean areAllParamsStrings(Node n) {\n+    Node paramNode = n.getFirstChild().getNext();\n+    while (paramNode != null) {\n+        if (!NodeUtil.isImmutableValue(paramNode) || !paramNode.isString()) {\n+            return false;\n+        }\n+        paramNode = paramNode.getNext();\n+    }\n+    return true;\n+}\n \n   private Node tryFoldImmediateCallToBoundFunction(Node n) {\n     // Rewriting \"(fn.bind(a,b))()\" to \"fn.call(a,b)\" makes it inlinable",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}