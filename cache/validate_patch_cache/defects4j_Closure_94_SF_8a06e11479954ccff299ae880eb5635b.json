{
    "patch": "        return isValidDefineValue(val.getFirstChild(), defines) \n               && isValidDefineValue(val.getLastChild(), defines);\n\n      // Arithmetic operators are only valid if both children are valid and are numbers.\n      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n        return isValidDefineValue(val.getFirstChild(), defines) && \n               isValidDefineValue(val.getLastChild(), defines) && \n               isNumericConstant(val.getFirstChild()) && \n               isNumericConstant(val.getLastChild());\n\n      // Comparison operators are only valid if both children are valid and have equal types.\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        return isValidDefineValue(val.getFirstChild(), defines) && \n               isValidDefineValue(val.getLastChild(), defines) && \n               val.getFirstChild().getType() == val.getLastChild().getType();\n\n      // Equality operators are only valid if both children are valid.\n      case Token.EQ:\n      case Token.NE:\n        return isValidDefineValue(val.getFirstChild(), defines) && \n               isValidDefineValue(val.getLastChild(), defines);\n\n      // Unary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }\n    return false;\n  }\n  \n  static boolean isNumericConstant(Node node) {\n    switch (node.getType()) {\n      case Token.NUMBER:\n        return true;\n      case Token.NEG:\n        return isNumericConstant(node.getFirstChild());\n      default:\n        return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex a31b17a2..c1503aeb 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -317,21 +317,36 @@ public final class NodeUtil {\n    * @param val The value being assigned.\n    * @param defines The list of names of existing defines.\n    */\n-  static boolean isValidDefineValue(Node val, Set<String> defines) {\n-    switch (val.getType()) {\n-      case Token.STRING:\n-      case Token.NUMBER:\n-      case Token.TRUE:\n-      case Token.FALSE:\n-        return true;\n+        return isValidDefineValue(val.getFirstChild(), defines) \n+               && isValidDefineValue(val.getLastChild(), defines);\n \n-      // Binary operators are only valid if both children are valid.\n-      case Token.BITAND:\n-      case Token.BITNOT:\n-      case Token.BITOR:\n-      case Token.BITXOR:\n+      // Arithmetic operators are only valid if both children are valid and are numbers.\n+      case Token.ADD:\n+      case Token.SUB:\n+      case Token.MUL:\n+      case Token.DIV:\n+      case Token.MOD:\n+        return isValidDefineValue(val.getFirstChild(), defines) && \n+               isValidDefineValue(val.getLastChild(), defines) && \n+               isNumericConstant(val.getFirstChild()) && \n+               isNumericConstant(val.getLastChild());\n \n-      // Uniary operators are valid if the child is valid.\n+      // Comparison operators are only valid if both children are valid and have equal types.\n+      case Token.LT:\n+      case Token.LE:\n+      case Token.GT:\n+      case Token.GE:\n+        return isValidDefineValue(val.getFirstChild(), defines) && \n+               isValidDefineValue(val.getLastChild(), defines) && \n+               val.getFirstChild().getType() == val.getLastChild().getType();\n+\n+      // Equality operators are only valid if both children are valid.\n+      case Token.EQ:\n+      case Token.NE:\n+        return isValidDefineValue(val.getFirstChild(), defines) && \n+               isValidDefineValue(val.getLastChild(), defines);\n+\n+      // Unary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n         return isValidDefineValue(val.getFirstChild(), defines);\n@@ -345,6 +360,15 @@ public final class NodeUtil {\n     }\n     return false;\n   }\n+  \n+  static boolean isNumericConstant(Node node) {\n+    switch (node.getType()) {\n+      case Token.NUMBER:\n+        return true;\n+      case Token.NEG:\n+        return isNumericConstant(node.getFirstChild());\n+      default:\n+        return false;\n \n   /**\n    * Returns whether this a BLOCK node with no children.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}