{
    "patch": "if(val1 == Long.MIN_VALUE){\n    if(val2 == -1) {\n        return -val1;\n    } else if(val2 != 0 && Math.abs(val2) != 1 && Math.abs(val1) > Long.MAX_VALUE / Math.abs(val2)){\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n} else if(val2 == -1 && val1 == Long.MIN_VALUE / val2){\n    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java\nindex a0fe7e2d..91d85ddb 100644\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n@@ -135,6 +135,15 @@ public class FieldUtils {\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n+if(val1 == Long.MIN_VALUE){\n+    if(val2 == -1) {\n+        return -val1;\n+    } else if(val2 != 0 && Math.abs(val2) != 1 && Math.abs(val1) > Long.MAX_VALUE / Math.abs(val2)){\n+        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+    }\n+} else if(val2 == -1 && val1 == Long.MIN_VALUE / val2){\n+    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+}\n                 return -val1;\n             case 0:\n                 return 0L;",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}