{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  String objName = null;\n  Node parent = n.getParent();\n  while(parent != null) {\n    if(parent.isAssign() || parent.isName()) {\n      objName = NodeUtil.getObjectLitKeyName(n);\n      break;\n    }\n    parent = parent.getParent();\n  }\n\n  if(objName == null) {\n    return;\n  }\n\n  T objectType = typeSystem.getType(getScope(), n, objName);\n\n  for (Node child = n.getFirstChild();\n       child != null;\n       child = child.getNext()) {\n    // Maybe STRING_KEY, STRING, NUMBER, GETPROP, GETELEM, SET\n    if (child.isNumber() || !NodeUtil.isGetOrSetKey(child)) {\n      String name = null;\n      if (child.isStringKey() || child.isString()) {\n        name = child.getString();\n      } else if (child.isGetProp()) {\n        Node firstChild = child.getFirstChild();\n        Node secondChild = firstChild.getNext();\n        // Handle GETPROP case\n        if (firstChild.isString() && secondChild.isString()) {\n          name = firstChild.getString() + \".\" + secondChild.getString();\n        }\n      } else if (child.isGetElem()) {\n        Node firstChild = child.getFirstChild();\n        Node secondChild = firstChild.getNext();\n        // Handle GETELEM case\n        if (firstChild != null && secondChild != null &&\n            firstChild.isString() && secondChild.isString()) {\n          name = firstChild.getString() + \"[\" + secondChild.getString() + \"]\";\n        }\n      }\n      if (name == null) {\n        continue;\n      }\n      \n      // We should never see a mix of numbers and strings.\n      if(child.isNumber()){\n        if(n.isArrayLit()){\n          name = \"[\" + child.getString() + \"]\";\n        }else continue;\n      } \n\n      // Create a new type based on the current type and the property.\n      T propertyType = objectType;\n      for (String propertyName : name.split(\"\\\\.\")) {\n        if (propertyName.startsWith(\"[\") && propertyName.endsWith(\"]\")) {\n          propertyName = propertyName.substring(1, propertyName.length() - 1);\n          if (!propertyName.isEmpty()) {\n            if (TypeCheck.isNumericString(propertyName)) {\n              propertyType = typeSystem.getElementType(propertyType);\n            } else {\n              propertyType = null;\n              break;\n            }\n          } else {\n            propertyType = null;\n            break;\n          }\n        } else {\n          propertyType = typeSystem.getPropertyType(propertyType, propertyName);\n        }\n      }\n\n      Property prop = getProperty(name);\n      if (!prop.scheduleRenaming(child, processProperty(t, prop, propertyType, null))) {\n        if (propertiesToErrorFor.containsKey(name)) {\n          compiler.report(JSError.make(\n              t.getSourceName(), child, propertiesToErrorFor.get(name),\n              Warnings.INVALIDATION, name,\n              (propertyType == null || !propertyType.isResolved() ? \"null\" : propertyType.toString()), \n              n.toString(), \"\"));\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..858d72c6 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,30 +487,92 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  String objName = null;\n+  Node parent = n.getParent();\n+  while(parent != null) {\n+    if(parent.isAssign() || parent.isName()) {\n+      objName = NodeUtil.getObjectLitKeyName(n);\n+      break;\n+    }\n+    parent = parent.getParent();\n+  }\n+\n+  if(objName == null) {\n+    return;\n+  }\n+\n+  T objectType = typeSystem.getType(getScope(), n, objName);\n+\n+  for (Node child = n.getFirstChild();\n+       child != null;\n+       child = child.getNext()) {\n+    // Maybe STRING_KEY, STRING, NUMBER, GETPROP, GETELEM, SET\n+    if (child.isNumber() || !NodeUtil.isGetOrSetKey(child)) {\n+      String name = null;\n+      if (child.isStringKey() || child.isString()) {\n+        name = child.getString();\n+      } else if (child.isGetProp()) {\n+        Node firstChild = child.getFirstChild();\n+        Node secondChild = firstChild.getNext();\n+        // Handle GETPROP case\n+        if (firstChild.isString() && secondChild.isString()) {\n+          name = firstChild.getString() + \".\" + secondChild.getString();\n+        }\n+      } else if (child.isGetElem()) {\n+        Node firstChild = child.getFirstChild();\n+        Node secondChild = firstChild.getNext();\n+        // Handle GETELEM case\n+        if (firstChild != null && secondChild != null &&\n+            firstChild.isString() && secondChild.isString()) {\n+          name = firstChild.getString() + \"[\" + secondChild.getString() + \"]\";\n+        }\n+      }\n+      if (name == null) {\n+        continue;\n+      }\n+      \n+      // We should never see a mix of numbers and strings.\n+      if(child.isNumber()){\n+        if(n.isArrayLit()){\n+          name = \"[\" + child.getString() + \"]\";\n+        }else continue;\n+      } \n+\n+      // Create a new type based on the current type and the property.\n+      T propertyType = objectType;\n+      for (String propertyName : name.split(\"\\\\.\")) {\n+        if (propertyName.startsWith(\"[\") && propertyName.endsWith(\"]\")) {\n+          propertyName = propertyName.substring(1, propertyName.length() - 1);\n+          if (!propertyName.isEmpty()) {\n+            if (TypeCheck.isNumericString(propertyName)) {\n+              propertyType = typeSystem.getElementType(propertyType);\n+            } else {\n+              propertyType = null;\n+              break;\n+            }\n+          } else {\n+            propertyType = null;\n+            break;\n           }\n+        } else {\n+          propertyType = typeSystem.getPropertyType(propertyType, propertyName);\n+        }\n+      }\n+\n+      Property prop = getProperty(name);\n+      if (!prop.scheduleRenaming(child, processProperty(t, prop, propertyType, null))) {\n+        if (propertiesToErrorFor.containsKey(name)) {\n+          compiler.report(JSError.make(\n+              t.getSourceName(), child, propertiesToErrorFor.get(name),\n+              Warnings.INVALIDATION, name,\n+              (propertyType == null || !propertyType.isResolved() ? \"null\" : propertyType.toString()), \n+              n.toString(), \"\"));\n         }\n       }\n     }\n+  }\n+}\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}