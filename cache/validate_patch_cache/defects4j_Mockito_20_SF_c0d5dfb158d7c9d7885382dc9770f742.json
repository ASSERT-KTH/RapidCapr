{
    "patch": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n\n    T mockInstance = null;\n    try {\n        mockInstance = classInstantiator.instantiate(mockedProxyType);\n        ((MockMethodInterceptor.MockAccess) mockInstance).setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n    } catch (RuntimeException e) {\n        Throwable cause = e.getCause();\n        if (cause instanceof IllegalStateException && cause.getMessage().contains(\"Cannot define class using reflection\")) {\n            throw new MockitoException(join(\n                    \"Failed to create mock instance of type : \" + mockedProxyType.getName(),\n                    \"Mockito cannot mock this class: \",\n                    \"  - private or final class: \" + mockedProxyType.getName(),\n                    \"  - mockito package restrictions\",\n                    \"You can overcome those limitations by typing the following code in one of your tests:\",\n                    \"  new org.mockito.internal.util.MockUtil().mockIt(ClassToMock.class);\",\n                    e.getMessage()\n            ), e.getCause());\n        } else {\n            throw e;\n        }\n    }\n\n    return mockedProxyType.cast(mockInstance);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..94069c8f5 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,37 +21,40 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n-        }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n+        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+    }\n \n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n+    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n+            settings.getTypeToMock(),\n+            settings.getExtraInterfaces()\n+    );\n+\n+    T mockInstance = null;\n+    try {\n+        mockInstance = classInstantiator.instantiate(mockedProxyType);\n+        ((MockMethodInterceptor.MockAccess) mockInstance).setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+    } catch (RuntimeException e) {\n+        Throwable cause = e.getCause();\n+        if (cause instanceof IllegalStateException && cause.getMessage().contains(\"Cannot define class using reflection\")) {\n             throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+                    \"Failed to create mock instance of type : \" + mockedProxyType.getName(),\n+                    \"Mockito cannot mock this class: \",\n+                    \"  - private or final class: \" + mockedProxyType.getName(),\n+                    \"  - mockito package restrictions\",\n+                    \"You can overcome those limitations by typing the following code in one of your tests:\",\n+                    \"  new org.mockito.internal.util.MockUtil().mockIt(ClassToMock.class);\",\n+                    e.getMessage()\n+            ), e.getCause());\n+        } else {\n+            throw e;\n         }\n     }\n \n+    return mockedProxyType.cast(mockInstance);\n+}\n+\n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of\n         // relying on the JVM to implicitly cast on the client call site.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[inner] strength> but was:<[null] strength>",
    "test_result": "FAIL"
}