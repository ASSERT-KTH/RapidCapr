{
    "patch": "      if (functionType.getTypeOfThis() != null) {\n        Node parent = n.getParent();\n        if (parent == null || parent.isGetElem() || parent.isGetProp()) {\n          JSType typeOfThis = functionType.getTypeOfThis();\n          JSType expectedType = getJSType(parent.getFirstChild()).removeType(\n              JSType.NULL).removeType(JSType.UNDEFINED);\n          if (!typeOfThis.isSubtype(expectedType)) {\n            report(t, n, TYPE_MISMATCH, expectedType.toString(), typeOfThis.toString());\n          }\n        } else {\n          report(t, n, UNSAFE_THIS, childType.toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..eff0709e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis() != null) {\n+        Node parent = n.getParent();\n+        if (parent == null || parent.isGetElem() || parent.isGetProp()) {\n+          JSType typeOfThis = functionType.getTypeOfThis();\n+          JSType expectedType = getJSType(parent.getFirstChild()).removeType(\n+              JSType.NULL).removeType(JSType.UNDEFINED);\n+          if (!typeOfThis.isSubtype(expectedType)) {\n+            report(t, n, TYPE_MISMATCH, expectedType.toString(), typeOfThis.toString());\n+          }\n+        } else {\n+          report(t, n, UNSAFE_THIS, childType.toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}