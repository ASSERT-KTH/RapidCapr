{
    "patch": "public static double getTypedPercent(JSONObject json) {\n    int untyped = 0;\n    int total = 0;\n\n    Iterator<String> keys = json.keys();\n    while (keys.hasNext()) {\n        String key = keys.next();\n        total++;\n        if (json.get(key) instanceof JSONObject) {\n            JSONObject value = (JSONObject) json.get(key);\n            if (!value.keySet().contains(\"_type\")) {\n                untyped++;\n            }\n        } else {\n            untyped++;\n        }\n    }\n\n    return ((total - untyped) * 100.0) / total;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..19979496 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject json) {\n+    int untyped = 0;\n+    int total = 0;\n+\n+    Iterator<String> keys = json.keys();\n+    while (keys.hasNext()) {\n+        String key = keys.next();\n+        total++;\n+        if (json.get(key) instanceof JSONObject) {\n+            JSONObject value = (JSONObject) json.get(key);\n+            if (!value.keySet().contains(\"_type\")) {\n+                untyped++;\n+            }\n+        } else {\n+            untyped++;\n+        }\n+    }\n+\n+    return ((total - untyped) * 100.0) / total;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}