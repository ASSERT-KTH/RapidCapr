{
    "patch": "    public RealMatrix getCorrelationPValues() throws MathException {\n        TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n        int nVars = correlationMatrix.getColumnDimension();\n        double[][] out = new double[nVars][nVars];\n        for (int i = 0; i < nVars; i++) {\n            for (int j = i+1; j < nVars; j++) {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n                out[j][i] = out[i][j]; // since correlation is symmetrical\n            }\n        }\n        for (int i = 0; i < nVars; i++) {\n            out[i][i] = 0d; // diagonal values are always 0\n        }\n        return new BlockRealMatrix(out);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\nindex 83b4c4130..8880c95bd 100644\n--- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n@@ -162,16 +162,16 @@ public class PearsonsCorrelation {\n         int nVars = correlationMatrix.getColumnDimension();\n         double[][] out = new double[nVars][nVars];\n         for (int i = 0; i < nVars; i++) {\n-            for (int j = 0; j < nVars; j++) {\n-                if (i == j) {\n-                    out[i][j] = 0d;\n-                } else {\n-                    double r = correlationMatrix.getEntry(i, j);\n-                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n-                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n-                }\n+            for (int j = i+1; j < nVars; j++) {\n+                double r = correlationMatrix.getEntry(i, j);\n+                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n+                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n+                out[j][i] = out[i][j]; // since correlation is symmetrical\n             }\n         }\n+        for (int i = 0; i < nVars; i++) {\n+            out[i][i] = 0d; // diagonal values are always 0\n+        }\n         return new BlockRealMatrix(out);\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}