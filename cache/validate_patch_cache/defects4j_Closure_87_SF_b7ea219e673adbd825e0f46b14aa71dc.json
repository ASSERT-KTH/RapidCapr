{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n\n  if (n == null || n.getToken() == null || n.getType() != Token.BLOCK) {\n    return false;\n  }\n\n  Node child = n.getFirstChild();\n\n  if (child == null) {\n    return false;\n  }\n\n  boolean hasTwoChildrenOrMore = false;\n\n  int expressionCount = 0;\n\n  while (child != null) {\n\n    if (child.getType() == Token.EMPTY) {\n      child = child.getNext();\n      continue;\n    }\n\n    if (child.getType() == Token.EXPR_RESULT) {\n\n      Node expr = child.getFirstChild();\n\n      // More than one child, or a non-expression, invalidates the block.\n      if (expr == null || expr.getNext() != null || !NodeUtil.isExpressionNode(expr)) {\n        return false;\n      }\n\n      if (++expressionCount > 1) {\n        return false;\n      }\n\n    } else if (child.getType() == Token.VAR) {\n\n      // Child is a var declaration, so we permit it.\n      if (NodeUtil.hasExactOneChild(child)) {\n        Node varChild = child.getFirstChild();\n        if (varChild.getType() != Token.NAME) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n\n    } else {\n      return false;\n    }\n\n    child = child.getNext();\n\n    if (child != null && child.getType() != Token.EMPTY) {\n      hasTwoChildrenOrMore = true;\n    }\n  }\n\n  return expressionCount == 1 && !hasTwoChildrenOrMore;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..afe165be 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,68 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+\n+  if (n == null || n.getToken() == null || n.getType() != Token.BLOCK) {\n+    return false;\n+  }\n+\n+  Node child = n.getFirstChild();\n+\n+  if (child == null) {\n+    return false;\n+  }\n+\n+  boolean hasTwoChildrenOrMore = false;\n+\n+  int expressionCount = 0;\n+\n+  while (child != null) {\n+\n+    if (child.getType() == Token.EMPTY) {\n+      child = child.getNext();\n+      continue;\n+    }\n+\n+    if (child.getType() == Token.EXPR_RESULT) {\n+\n+      Node expr = child.getFirstChild();\n+\n+      // More than one child, or a non-expression, invalidates the block.\n+      if (expr == null || expr.getNext() != null || !NodeUtil.isExpressionNode(expr)) {\n+        return false;\n+      }\n+\n+      if (++expressionCount > 1) {\n+        return false;\n+      }\n+\n+    } else if (child.getType() == Token.VAR) {\n+\n+      // Child is a var declaration, so we permit it.\n+      if (NodeUtil.hasExactOneChild(child)) {\n+        Node varChild = child.getFirstChild();\n+        if (varChild.getType() != Token.NAME) {\n+          return false;\n+        }\n+      } else {\n+        return false;\n       }\n+\n+    } else {\n+      return false;\n     }\n \n-    return false;\n+    child = child.getNext();\n+\n+    if (child != null && child.getType() != Token.EMPTY) {\n+      hasTwoChildrenOrMore = true;\n+    }\n   }\n \n+  return expressionCount == 1 && !hasTwoChildrenOrMore;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}