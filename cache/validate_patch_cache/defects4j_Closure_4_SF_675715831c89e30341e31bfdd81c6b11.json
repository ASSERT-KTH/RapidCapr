{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Resolve named types via registry first to avoid triggering warnings\n    // that are built into the resolution via properties.\n    boolean viaRegistry = resolveViaRegistry(t, enclosing);\n    boolean viaProperties = false;\n    if (!viaRegistry) {\n      viaProperties = resolveViaProperties(t, enclosing);\n    }\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    if (isResolved()) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    } else if (viaRegistry || viaProperties) {\n      // continuing to return `this` for inaccurate constructs allows us to check subtyping\n      return this;\n    } else {\n      // Resolution may fail for:\n      // 1. A 'missingProperties' type declaration (e.g., 'var x : MissingPropsType')\n      // 2. An erroneously spelled type. In this case we assume that this is a record\n      //    literal type, and generate a warning elsewhere.\n      // 3. A forward declaration (e.g. 'goog.forwardDeclare(\"path.to.Type\")')\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return this;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..520d74b5 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,33 +182,33 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    // Resolve named types via registry first to avoid triggering warnings\n+    // that are built into the resolution via properties.\n+    boolean viaRegistry = resolveViaRegistry(t, enclosing);\n+    boolean viaProperties = false;\n+    if (!viaRegistry) {\n+      viaProperties = resolveViaProperties(t, enclosing);\n     }\n-\n-    resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n-    super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n+      super.resolveInternal(t, enclosing);\n+      finishPropertyContinuations();\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n+    } else if (viaRegistry || viaProperties) {\n+      // continuing to return `this` for inaccurate constructs allows us to check subtyping\n+      return this;\n+    } else {\n+      // Resolution may fail for:\n+      // 1. A 'missingProperties' type declaration (e.g., 'var x : MissingPropsType')\n+      // 2. An erroneously spelled type. In this case we assume that this is a record\n+      //    literal type, and generate a warning elsewhere.\n+      // 3. A forward declaration (e.g. 'goog.forwardDeclare(\"path.to.Type\")')\n+      super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n+      return this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n \n   /**",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}