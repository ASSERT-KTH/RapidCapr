{
    "patch": "    public Dfp multiply(final int x) {\n        Dfp result = newInstance(this);\n        result.setIEEEFlags(0);\n        boolean qnan = false;\n\n        if (isNaN()) {\n            result = newInstance(this);\n            result = result.add(result);\n            return result;\n        }\n\n        if (x == 0) {\n            result = newInstance(getField(), 0);\n            return result;\n        }\n\n        if (x == 1) {\n            result = newInstance(this);\n            return result;\n        }\n\n        if (x == -1) {\n            result = newInstance(this);\n            return result.negate();\n        }\n\n        for (int i = 0; i < mant.length; i++) {\n            result.mant[i] = mant[i] * x;\n        }\n\n        for (int i = 0; i < mant.length - 1; i++) {\n            result.mant[i + 1] += result.mant[i] / radix;\n            result.mant[i] %= radix;\n        }\n\n        if (result.mant[mant.length - 1] >= radix) {\n            qnan = true;\n        }\n\n        if (qnan) {\n            result = newInstance(getField().getNaN());\n        } else {\n            result.exp = exp;\n            result.field = field;\n            result.normalize();\n            result.round(result.getField().getRoundingMode());\n        }\n\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..d7fa9231a 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,54 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        Dfp result = newInstance(this);\n+        result.setIEEEFlags(0);\n+        boolean qnan = false;\n+\n+        if (isNaN()) {\n+            result = newInstance(this);\n+            result = result.add(result);\n+            return result;\n+        }\n+\n+        if (x == 0) {\n+            result = newInstance(getField(), 0);\n+            return result;\n+        }\n+\n+        if (x == 1) {\n+            result = newInstance(this);\n+            return result;\n+        }\n+\n+        if (x == -1) {\n+            result = newInstance(this);\n+            return result.negate();\n+        }\n+\n+        for (int i = 0; i < mant.length; i++) {\n+            result.mant[i] = mant[i] * x;\n+        }\n+\n+        for (int i = 0; i < mant.length - 1; i++) {\n+            result.mant[i + 1] += result.mant[i] / radix;\n+            result.mant[i] %= radix;\n+        }\n+\n+        if (result.mant[mant.length - 1] >= radix) {\n+            qnan = true;\n+        }\n+\n+        if (qnan) {\n+            result = newInstance(getField().getNaN());\n+        } else {\n+            result.exp = exp;\n+            result.field = field;\n+            result.normalize();\n+            result.round(result.getField().getRoundingMode());\n+        }\n+\n+        return result;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}