{
    "patch": "if (len == 2) {\n    return new Locale(str.toLowerCase());\n} else if (len == 5) {\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    return new Locale(str.substring(0, 2).toLowerCase(), str.substring(3, 5).toUpperCase());\n} else if (len >= 7) {\n    if ((str.charAt(2) != '_' && (!Character.isLetter(str.charAt(2)) || !Character.isLowerCase(str.charAt(2)))) ||\n        (!Character.isLetter(str.charAt(3)) || !Character.isLowerCase(str.charAt(3))) ||\n        (str.charAt(4) != '_' && (!Character.isLetter(str.charAt(4)) || !Character.isUpperCase(str.charAt(4)))) ||\n        (str.length() > 7 &&\n         ((str.charAt(5) != '_' && (!Character.isLetter(str.charAt(5)) || !Character.isUpperCase(str.charAt(5)))) ||\n          ((str.charAt(6) != '_' && (!Character.isLetter(str.charAt(6)) || !Character.isUpperCase(str.charAt(6))))))) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String language = str.substring(0, 2).toLowerCase();\n    String country = str.substring(3, 5).toUpperCase();\n    if (len == 7) {\n        return new Locale(language, country);\n    } else {\n        int variantStart = 6;\n        while (variantStart < len && str.charAt(variantStart) != '_') {\n            variantStart++;\n        }\n        if (variantStart == len || variantStart == len - 1) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        String variant = str.substring(6, variantStart);\n        if (!Character.isLetterOrDigit(variant.charAt(0)) || !Character.isLetterOrDigit(variant.charAt(variant.length() - 1))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        variant = variant.replaceAll(\"_\", \"-\");\n        String extensions = str.substring(variantStart + 1).replaceAll(\"_\", \"-\");\n        return new Locale.Builder().setLanguage(language).setRegion(country).setVariant(variant)\n                                    .setExtension(LocaleUtils.toExtensionMap(extensions)).build();\n    }\n} else {\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..21184c30 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -111,6 +111,46 @@ public class LocaleUtils {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             char ch3 = str.charAt(3);\n+if (len == 2) {\n+    return new Locale(str.toLowerCase());\n+} else if (len == 5) {\n+    if (str.charAt(2) != '_') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    return new Locale(str.substring(0, 2).toLowerCase(), str.substring(3, 5).toUpperCase());\n+} else if (len >= 7) {\n+    if ((str.charAt(2) != '_' && (!Character.isLetter(str.charAt(2)) || !Character.isLowerCase(str.charAt(2)))) ||\n+        (!Character.isLetter(str.charAt(3)) || !Character.isLowerCase(str.charAt(3))) ||\n+        (str.charAt(4) != '_' && (!Character.isLetter(str.charAt(4)) || !Character.isUpperCase(str.charAt(4)))) ||\n+        (str.length() > 7 &&\n+         ((str.charAt(5) != '_' && (!Character.isLetter(str.charAt(5)) || !Character.isUpperCase(str.charAt(5)))) ||\n+          ((str.charAt(6) != '_' && (!Character.isLetter(str.charAt(6)) || !Character.isUpperCase(str.charAt(6))))))) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    String language = str.substring(0, 2).toLowerCase();\n+    String country = str.substring(3, 5).toUpperCase();\n+    if (len == 7) {\n+        return new Locale(language, country);\n+    } else {\n+        int variantStart = 6;\n+        while (variantStart < len && str.charAt(variantStart) != '_') {\n+            variantStart++;\n+        }\n+        if (variantStart == len || variantStart == len - 1) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        String variant = str.substring(6, variantStart);\n+        if (!Character.isLetterOrDigit(variant.charAt(0)) || !Character.isLetterOrDigit(variant.charAt(variant.length() - 1))) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        variant = variant.replaceAll(\"_\", \"-\");\n+        String extensions = str.substring(variantStart + 1).replaceAll(\"_\", \"-\");\n+        return new Locale.Builder().setLanguage(language).setRegion(country).setVariant(variant)\n+                                    .setExtension(LocaleUtils.toExtensionMap(extensions)).build();\n+    }\n+} else {\n+    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+}\n             char ch4 = str.charAt(4);\n             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}