{
    "patch": "public static double getTypedPercent(String js) {\n    int typedChars = 0;\n    int totalChars = 0;\n\n    for(char c : js.toCharArray()) {\n        if(c == '\\'' || c == '\\\"') {\n            while(js.charAt(++totalChars) != c);\n        }\n        else if(c != ' ' && c != '\\n' && c != '\\t' && c != '\\r') {\n            typedChars++;\n            totalChars++;\n        }\n        else {\n            totalChars++;\n        }\n    }\n    return (double) typedChars / (double) totalChars * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..f6dc90a8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    int typedChars = 0;\n+    int totalChars = 0;\n+\n+    for(char c : js.toCharArray()) {\n+        if(c == '\\'' || c == '\\\"') {\n+            while(js.charAt(++totalChars) != c);\n+        }\n+        else if(c != ' ' && c != '\\n' && c != '\\t' && c != '\\r') {\n+            typedChars++;\n+            totalChars++;\n+        }\n+        else {\n+            totalChars++;\n+        }\n+    }\n+    return (double) typedChars / (double) totalChars * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}