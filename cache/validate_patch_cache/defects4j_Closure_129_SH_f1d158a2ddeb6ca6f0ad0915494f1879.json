{
    "patch": "      if (NodeUtil.isNormalGet(first)) {\n        Node name = first.getFirstChild();\n        if (name.isName()) {\n          Scope.Var var = getScope().getVar(name.getString());\n          if (var != null) {\n            var.setAssigned(true);\n          }\n        }\n      } else if (!NodeUtil.isGet(first)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..62631af5 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,15 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      if (NodeUtil.isNormalGet(first)) {\n+        Node name = first.getFirstChild();\n+        if (name.isName()) {\n+          Scope.Var var = getScope().getVar(name.getString());\n+          if (var != null) {\n+            var.setAssigned(true);\n+          }\n+        }\n+      } else if (!NodeUtil.isGet(first)) {\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}