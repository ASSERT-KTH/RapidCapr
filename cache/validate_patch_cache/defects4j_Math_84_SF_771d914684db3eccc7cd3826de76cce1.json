{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expanded.getPoint() == reflected.getPoint() ?\n                            reflectedSimplex :\n                            updateSimplex(original, expanded.getPoint(), comparator);\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n\n                // perform a contraction step\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted.getPoint() == original[0].getPoint() ?\n                            contractInside(original, comparator) :\n                            updateSimplex(original, contracted.getPoint(), comparator);\n                } else {\n\n                    // perform a shrink step\n                    simplex = shrink(original, comparator);\n                }\n            }\n\n            // check convergence\n            final double delta = FastMath.abs(best.getValue() - simplex[0].getValue());\n            final double bd = FastMath.max(FastMath.abs(best.getValue()), FastMath.abs(simplex[0].getValue()));\n            if (bd * getRelativeThreshold() + getAbsoluteThreshold() <= delta) {\n                return;\n            }\n\n            if (getIterations() > MAX_ITERATIONS) {\n                throw new OptimizationException(LocalizedFormats.OPTIMIZATION_ITERATIONS_EXHAUSTED);\n            }\n\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..566a0f507 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -75,25 +75,44 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expanded.getPoint() == reflected.getPoint() ?\n+                            reflectedSimplex :\n+                            updateSimplex(original, expanded.getPoint(), comparator);\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n+            } else {\n \n-            }\n+                // perform a contraction step\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted.getPoint() == original[0].getPoint() ?\n+                            contractInside(original, comparator) :\n+                            updateSimplex(original, contracted.getPoint(), comparator);\n+                } else {\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                    // perform a shrink step\n+                    simplex = shrink(original, comparator);\n+                }\n+            }\n \n             // check convergence\n+            final double delta = FastMath.abs(best.getValue() - simplex[0].getValue());\n+            final double bd = FastMath.max(FastMath.abs(best.getValue()), FastMath.abs(simplex[0].getValue()));\n+            if (bd * getRelativeThreshold() + getAbsoluteThreshold() <= delta) {\n                 return;\n             }\n \n+            if (getIterations() > MAX_ITERATIONS) {\n+                throw new OptimizationException(LocalizedFormats.OPTIMIZATION_ITERATIONS_EXHAUSTED);\n+            }\n+\n         }\n \n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}