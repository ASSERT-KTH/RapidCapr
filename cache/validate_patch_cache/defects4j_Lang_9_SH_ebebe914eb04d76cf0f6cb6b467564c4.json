{
    "patch": "private String getNextFormatField(Matcher patternMatcher) {\n    int start = patternMatcher.end();\n    int end = patternMatcher.regionEnd();\n    if (start >= end) {\n        return null;\n    }\n    return patternMatcher.region(start, end).lookingAt() ? patternMatcher.group() : null;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..c71bf544 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,14 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+private String getNextFormatField(Matcher patternMatcher) {\n+    int start = patternMatcher.end();\n+    int end = patternMatcher.regionEnd();\n+    if (start >= end) {\n+        return null;\n+    }\n+    return patternMatcher.region(start, end).lookingAt() ? patternMatcher.group() : null;\n+}\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}