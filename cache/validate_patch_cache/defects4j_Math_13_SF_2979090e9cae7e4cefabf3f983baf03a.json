{
    "patch": "        final int maxIter = 100; // Maximum number of iterations\n        final double tol = 1e-6; // Tolerance for convergence\n        final int n = m.getRowDimension();\n        final int p = m.getColumnDimension();\n\n        // Use truncated SVD to calculate square root of m\n        final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n        final RealMatrix U = svd.getU();\n        final RealMatrix S = svd.getS();\n        final RealMatrix V = svd.getV();\n\n        // Truncate S for efficiency\n        final int k = Math.min(n, p);\n        for (int i = 0; i < k; i++) {\n            final double d = S.getEntry(i, i);\n            if (d < tol) {\n                S.setEntry(i, i, 0);\n            } else {\n                S.setEntry(i, i, Math.sqrt(d));\n            }\n        }\n\n        // Reconstruct sqrt(m) from truncated SVD\n        RealMatrix sqrtM = U.multiply(S).multiply(V.transpose());\n\n        // Use iterative method to improve accuracy\n        RealMatrix y = sqrtM;\n        RealMatrix prevY = sqrtM;\n        for (int iter = 1; iter <= maxIter; iter++) {\n            prevY = y;\n            y = (m.multiply(y)).scalarMultiply(0.5).add(y.multiply(y.scalarMultiply(0.5)).multiply(y.inverse()));\n            // Check for convergence\n            if (y.subtract(prevY).getFrobeniusNorm() / prevY.getFrobeniusNorm() < tol) {\n                break;\n            }\n        }\n\n        return y;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f5dea05c9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,42 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        final int maxIter = 100; // Maximum number of iterations\n+        final double tol = 1e-6; // Tolerance for convergence\n+        final int n = m.getRowDimension();\n+        final int p = m.getColumnDimension();\n+\n+        // Use truncated SVD to calculate square root of m\n+        final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+        final RealMatrix U = svd.getU();\n+        final RealMatrix S = svd.getS();\n+        final RealMatrix V = svd.getV();\n+\n+        // Truncate S for efficiency\n+        final int k = Math.min(n, p);\n+        for (int i = 0; i < k; i++) {\n+            final double d = S.getEntry(i, i);\n+            if (d < tol) {\n+                S.setEntry(i, i, 0);\n+            } else {\n+                S.setEntry(i, i, Math.sqrt(d));\n+            }\n+        }\n+\n+        // Reconstruct sqrt(m) from truncated SVD\n+        RealMatrix sqrtM = U.multiply(S).multiply(V.transpose());\n+\n+        // Use iterative method to improve accuracy\n+        RealMatrix y = sqrtM;\n+        RealMatrix prevY = sqrtM;\n+        for (int iter = 1; iter <= maxIter; iter++) {\n+            prevY = y;\n+            y = (m.multiply(y)).scalarMultiply(0.5).add(y.multiply(y.scalarMultiply(0.5)).multiply(y.inverse()));\n+            // Check for convergence\n+            if (y.subtract(prevY).getFrobeniusNorm() / prevY.getFrobeniusNorm() < tol) {\n+                break;\n+            }\n+        }\n+\n+        return y;\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}