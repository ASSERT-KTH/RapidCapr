{
    "patch": "public class GammaRegularized {\n    \n    private static final double[] COEFFICIENTS = { 0.9999999999998099, 676.5203681218851, -1259.1392167224028,\n            771.3234287776531, -176.6150291621406, 12.507343278686905, -0.13857109526572012, 9.984369578019571E-6,\n            1.5056327351493116E-7 };\n    private static final int NUM_OF_COEFFICIENTS = 9;\n    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2 * Math.PI);\n    private static final double TOLERANCE = 1E-15;\n\n    public static void main(String[] args) {\n        double result = gammaRegularized(1.0, 1.0);\n        System.out.println(\"Result: \" + result);\n    }\n\n    public static double gammaRegularized(double a, double x) {\n        double result;\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) return Double.NaN;\n        if (x == 0.0) return 0.0;\n        if (x >= a + 1) {\n            result = 1 - regularizedGammaSeries(a, x);\n        } else {\n            double factor = Math.exp(a * Math.log(x) - x - LogGamma(a));\n            result = factor * regularizedGammaContinuedFraction(a, x);\n        }\n        return result;\n    }\n\n    private static double regularizedGammaSeries(double a, double x) {\n        double ap = a;\n        double sum = 1.0 / a;\n        double delta = sum;\n        while (Math.abs(delta) > Math.abs(sum) * TOLERANCE) {\n            ap++;\n            delta = x * delta / ap;\n            sum += delta;\n        }\n        double result = sum * Math.exp(-x + a * Math.log(x) - LogGamma(a));\n        return result;\n    }\n\n    private static double regularizedGammaContinuedFraction(double a, double x) {\n        double lambda = 1.0;\n        double c = COEFFICIENTS[0];\n        double fraction = c / lambda;\n        int i = 1;\n        double eps = 1E-15;\n        while (Math.abs(fraction) > eps * Math.abs(c)) {\n            lambda = a + i;\n            c = COEFFICIENTS[i % NUM_OF_COEFFICIENTS] + x * c;\n            fraction = c / lambda * fraction;\n            i++;\n        }\n        double result = 1.0 / (1.0 + fraction) * Math.exp(-x + a * Math.log(x) - LogGamma(a));\n        return result;\n    }\n\n    private static double LogGamma(double x) {\n        if (x <= 0) throw new IllegalArgumentException(\"Invalid input argument x\");\n        double sum = 0.9999999999998099;\n        for (int i = 1; i < 9; i++) {\n            sum += COEFFICIENTS[i] / (x + i);\n        }\n        double result = HALF_LOG_2_PI + Math.log(sum) - (x + 0.5) * Math.log(x + 5.5) + x + 5.5;\n        return result;\n    }\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..0fc1869b3 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,73 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public class GammaRegularized {\n+    \n+    private static final double[] COEFFICIENTS = { 0.9999999999998099, 676.5203681218851, -1259.1392167224028,\n+            771.3234287776531, -176.6150291621406, 12.507343278686905, -0.13857109526572012, 9.984369578019571E-6,\n+            1.5056327351493116E-7 };\n+    private static final int NUM_OF_COEFFICIENTS = 9;\n+    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2 * Math.PI);\n+    private static final double TOLERANCE = 1E-15;\n+\n+    public static void main(String[] args) {\n+        double result = gammaRegularized(1.0, 1.0);\n+        System.out.println(\"Result: \" + result);\n+    }\n+\n+    public static double gammaRegularized(double a, double x) {\n+        double result;\n+        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) return Double.NaN;\n+        if (x == 0.0) return 0.0;\n+        if (x >= a + 1) {\n+            result = 1 - regularizedGammaSeries(a, x);\n+        } else {\n+            double factor = Math.exp(a * Math.log(x) - x - LogGamma(a));\n+            result = factor * regularizedGammaContinuedFraction(a, x);\n+        }\n+        return result;\n+    }\n+\n+    private static double regularizedGammaSeries(double a, double x) {\n+        double ap = a;\n+        double sum = 1.0 / a;\n+        double delta = sum;\n+        while (Math.abs(delta) > Math.abs(sum) * TOLERANCE) {\n+            ap++;\n+            delta = x * delta / ap;\n+            sum += delta;\n+        }\n+        double result = sum * Math.exp(-x + a * Math.log(x) - LogGamma(a));\n+        return result;\n+    }\n+\n+    private static double regularizedGammaContinuedFraction(double a, double x) {\n+        double lambda = 1.0;\n+        double c = COEFFICIENTS[0];\n+        double fraction = c / lambda;\n+        int i = 1;\n+        double eps = 1E-15;\n+        while (Math.abs(fraction) > eps * Math.abs(c)) {\n+            lambda = a + i;\n+            c = COEFFICIENTS[i % NUM_OF_COEFFICIENTS] + x * c;\n+            fraction = c / lambda * fraction;\n+            i++;\n+        }\n+        double result = 1.0 / (1.0 + fraction) * Math.exp(-x + a * Math.log(x) - LogGamma(a));\n+        return result;\n+    }\n+\n+    private static double LogGamma(double x) {\n+        if (x <= 0) throw new IllegalArgumentException(\"Invalid input argument x\");\n+        double sum = 0.9999999999998099;\n+        for (int i = 1; i < 9; i++) {\n+            sum += COEFFICIENTS[i] / (x + i);\n+        }\n+        double result = HALF_LOG_2_PI + Math.log(sum) - (x + 0.5) * Math.log(x + 5.5) + x + 5.5;\n+        return result;\n+    }\n+\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}