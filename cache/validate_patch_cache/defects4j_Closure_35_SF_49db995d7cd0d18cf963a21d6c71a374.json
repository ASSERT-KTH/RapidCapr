{
    "patch": "private void inferPropertiesFromGenericObject(ObjectType objectType, ObjectType constraintType) {\n   for (String propName : constraintType.getOwnPropertyNames()) {\n      JSType propType = constraintType.getPropertyType(propName);\n      if (!objectType.hasOwnProperty(propName)) {\n         JSType typeToInfer = getNativeType(VOID_TYPE);\n         if (propType.isFunctionType() && !propType.isConstructor()) {\n            FunctionType functionType = propType.toMaybeFunctionType();\n            typeToInfer = functionType.getReturnType();\n            if (typeToInfer == null) {\n               typeToInfer = getNativeType(VOID_TYPE);\n            }\n         } else if (propType.isConstructor()) {\n            FunctionType constructorFn = propType.toMaybeFunctionType();\n            typeToInfer = getNativeType(OBJECT_TYPE).getOwnPropertyType(\"prototype\")\n                  .getGreatestSubtype(constructorFn.getInstanceType());\n         } else {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n         }\n         objectType.defineInferredProperty(propName, typeToInfer, null);\n      }\n   }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..8c7f2cfe 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,42 +1111,28 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n-    if (type == null || constraint == null) {\n-      return;\n-    }\n-\n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+private void inferPropertiesFromGenericObject(ObjectType objectType, ObjectType constraintType) {\n+   for (String propName : constraintType.getOwnPropertyNames()) {\n+      JSType propType = constraintType.getPropertyType(propName);\n+      if (!objectType.hasOwnProperty(propName)) {\n+         JSType typeToInfer = getNativeType(VOID_TYPE);\n+         if (propType.isFunctionType() && !propType.isConstructor()) {\n+            FunctionType functionType = propType.toMaybeFunctionType();\n+            typeToInfer = functionType.getReturnType();\n+            if (typeToInfer == null) {\n+               typeToInfer = getNativeType(VOID_TYPE);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n-        }\n-      }\n-    }\n-  }\n-\n-  /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n-   */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n+         } else if (propType.isConstructor()) {\n+            FunctionType constructorFn = propType.toMaybeFunctionType();\n+            typeToInfer = getNativeType(OBJECT_TYPE).getOwnPropertyType(\"prototype\")\n+                  .getGreatestSubtype(constructorFn.getInstanceType());\n+         } else {\n+            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+         }\n+         objectType.defineInferredProperty(propName, typeToInfer, null);\n       }\n+   }\n+}\n     }\n     return scope;\n   }",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}