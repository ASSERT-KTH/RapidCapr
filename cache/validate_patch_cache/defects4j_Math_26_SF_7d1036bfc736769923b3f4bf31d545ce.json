{
    "patch": "I apologize for the mistake. The following code should fix the issue:\n\n```\n    private Fraction(final double value, final double epsilon,\n                     final int maxDenominator, final int maxIterations)\n        throws FractionConversionException {\n\n        if (maxIterations <= 0) {\n            throw new FractionConversionException(value);\n        }\n\n        final double[] fractions = new double[maxIterations + 2];\n        final long[] longFractions = new long[maxIterations + 2];\n\n        fractions[0] = value;\n        longFractions[0] = (long) Math.floor(fractions[0]);\n\n        double delta = Double.MAX_VALUE;\n        final double small = epsilon * 100;\n        int i = 0;\n        for (; delta > epsilon && i < maxIterations; ++i) {\n            fractions[i + 1] = 1.0 / (fractions[i] - longFractions[i]);\n            if (Math.abs(fractions[i + 1]) > 1e9) {\n                throw new FractionConversionException(value, i + 1, fractions);\n            }\n            longFractions[i + 1] = (long) Math.floor(fractions[i + 1]);\n            delta = Math.abs(fractions[i + 1] - (double) longFractions[i + 1]);\n            if (delta < small && delta > epsilon) {\n                double r = 1.0 / (fractions[i + 1] - (double) longFractions[i + 1]);\n                if (r * (double)longFractions[i + 1] == 1.0) {\n                    longFractions[i + 1] = longFractions[i + 1] + 1;\n                }\n            }\n        }\n\n        if (i == maxIterations && delta > epsilon) {\n            throw new FractionConversionException(value, i, fractions);\n        }\n\n        long p0 = 0;\n        long q0 = 1;\n        long p1 = 1;\n        long q1 = 0;\n        long p2 = longFractions[0];\n        long q2 = 1;\n        int j = 1;\n\n        long overflow = 1L << 62;\n        boolean stop = false;\n        while (!stop) {\n            final double n2 = (double) p2 / (double) q2;\n            final double a = fractions[j];\n            p1 = p0 + p2 * longFractions[j];\n            q1 = q0 + q2 * longFractions[j];\n            if (p1 > overflow || q1 > overflow) {\n                throw new FractionConversionException(n2, a, maxIterations);\n            }\n\n            if (j == i) {\n                break;\n            }\n            ++j;\n            p0 = p2;\n            q0 = q2;\n            p2 = p1;\n            q2 = q1;\n        }\n\n        if (q1 <= maxDenominator) {\n            this.numerator = (int) (p1);\n            this.denominator = (int) (q1);\n        } else {\n            final long a = (maxDenominator * p1) / q1;\n            this.numerator = (int) a;\n            this.denominator = maxDenominator;\n            if ((2 * Math.abs(a - (double) p1 / (double) q1)) <= 1) {\n                if (a > 0) {\n                    ++this.numerator;\n                } else {\n                    --this.numerator;\n                }\n            }\n        }\n\n    }\n```",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..e51238093 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -172,70 +172,92 @@ public class Fraction\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge.\n      */\n-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n-        throws FractionConversionException\n-    {\n-        long overflow = Integer.MAX_VALUE;\n-        double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n-            throw new FractionConversionException(value, a0, 1l);\n+I apologize for the mistake. The following code should fix the issue:\n+\n+```\n+    private Fraction(final double value, final double epsilon,\n+                     final int maxDenominator, final int maxIterations)\n+        throws FractionConversionException {\n+\n+        if (maxIterations <= 0) {\n+            throw new FractionConversionException(value);\n         }\n \n-        // check for (almost) integer arguments, which should not go\n-        // to iterations.\n-        if (FastMath.abs(a0 - value) < epsilon) {\n-            this.numerator = (int) a0;\n-            this.denominator = 1;\n-            return;\n+        final double[] fractions = new double[maxIterations + 2];\n+        final long[] longFractions = new long[maxIterations + 2];\n+\n+        fractions[0] = value;\n+        longFractions[0] = (long) Math.floor(fractions[0]);\n+\n+        double delta = Double.MAX_VALUE;\n+        final double small = epsilon * 100;\n+        int i = 0;\n+        for (; delta > epsilon && i < maxIterations; ++i) {\n+            fractions[i + 1] = 1.0 / (fractions[i] - longFractions[i]);\n+            if (Math.abs(fractions[i + 1]) > 1e9) {\n+                throw new FractionConversionException(value, i + 1, fractions);\n+            }\n+            longFractions[i + 1] = (long) Math.floor(fractions[i + 1]);\n+            delta = Math.abs(fractions[i + 1] - (double) longFractions[i + 1]);\n+            if (delta < small && delta > epsilon) {\n+                double r = 1.0 / (fractions[i + 1] - (double) longFractions[i + 1]);\n+                if (r * (double)longFractions[i + 1] == 1.0) {\n+                    longFractions[i + 1] = longFractions[i + 1] + 1;\n+                }\n+            }\n         }\n \n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n+        if (i == maxIterations && delta > epsilon) {\n+            throw new FractionConversionException(value, i, fractions);\n+        }\n \n-        long p2 = 0;\n+        long p0 = 0;\n+        long q0 = 1;\n+        long p1 = 1;\n+        long q1 = 0;\n+        long p2 = longFractions[0];\n         long q2 = 1;\n+        int j = 1;\n \n-        int n = 0;\n+        long overflow = 1L << 62;\n         boolean stop = false;\n-        do {\n-            ++n;\n-            double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n+        while (!stop) {\n+            final double n2 = (double) p2 / (double) q2;\n+            final double a = fractions[j];\n+            p1 = p0 + p2 * longFractions[j];\n+            q1 = q0 + q2 * longFractions[j];\n+            if (p1 > overflow || q1 > overflow) {\n+                throw new FractionConversionException(n2, a, maxIterations);\n             }\n \n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n-                p0 = p1;\n-                p1 = p2;\n-                q0 = q1;\n-                q1 = q2;\n-                a0 = a1;\n-                r0 = r1;\n-            } else {\n-                stop = true;\n+            if (j == i) {\n+                break;\n             }\n-        } while (!stop);\n-\n-        if (n >= maxIterations) {\n-            throw new FractionConversionException(value, maxIterations);\n+            ++j;\n+            p0 = p2;\n+            q0 = q2;\n+            p2 = p1;\n+            q2 = q1;\n         }\n \n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n+        if (q1 <= maxDenominator) {\n+            this.numerator = (int) (p1);\n+            this.denominator = (int) (q1);\n         } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n+            final long a = (maxDenominator * p1) / q1;\n+            this.numerator = (int) a;\n+            this.denominator = maxDenominator;\n+            if ((2 * Math.abs(a - (double) p1 / (double) q1)) <= 1) {\n+                if (a > 0) {\n+                    ++this.numerator;\n+                } else {\n+                    --this.numerator;\n+                }\n+            }\n         }\n \n     }\n+```\n \n     /**\n      * Create a fraction from an int.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}