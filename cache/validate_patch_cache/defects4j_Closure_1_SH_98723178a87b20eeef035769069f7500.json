{
    "patch": "      Map<String, Var> nameToVar = fnScope.getVarNameToVarMap();\n      boolean shouldReportCodeChange = false;\n      int paramCount = 0;\n      for (Node arg : argList.children()) {\n        String argName = arg.getString();\n        Var argVar = nameToVar.get(argName);\n        paramCount++;\n        if (argVar == null) {\n          // It could have been removed already.\n          continue;\n        }\n        if (!referenced.contains(argVar)) {\n          arg.detach();\n          fnScope.undeclare(argName);\n          shouldReportCodeChange = true;\n        } else if (shouldReportCodeChange) {\n          // If we've already removed params, the function signature will\n          // be different than it was before, and this is a violation of IE\n          // semantics, which rely on Function.length.\n          compiler.report(\n              JSError.make(\n                  ARGUMENT_AFTER_ARGUMENTS_ERROR,\n                  function));\n          break;\n        }\n      }\n      if (shouldReportCodeChange) {\n        function.putProp(Node.ORIGINAL_FUNCTION_LENGTH, paramCount);\n        function.putProp(Node.CHANGED_ARGUMENT_LENGTH, true);\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9bccf5d5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,36 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Map<String, Var> nameToVar = fnScope.getVarNameToVarMap();\n+      boolean shouldReportCodeChange = false;\n+      int paramCount = 0;\n+      for (Node arg : argList.children()) {\n+        String argName = arg.getString();\n+        Var argVar = nameToVar.get(argName);\n+        paramCount++;\n+        if (argVar == null) {\n+          // It could have been removed already.\n+          continue;\n+        }\n+        if (!referenced.contains(argVar)) {\n+          arg.detach();\n+          fnScope.undeclare(argName);\n+          shouldReportCodeChange = true;\n+        } else if (shouldReportCodeChange) {\n+          // If we've already removed params, the function signature will\n+          // be different than it was before, and this is a violation of IE\n+          // semantics, which rely on Function.length.\n+          compiler.report(\n+              JSError.make(\n+                  ARGUMENT_AFTER_ARGUMENTS_ERROR,\n+                  function));\n+          break;\n+        }\n+      }\n+      if (shouldReportCodeChange) {\n+        function.putProp(Node.ORIGINAL_FUNCTION_LENGTH, paramCount);\n+        function.putProp(Node.CHANGED_ARGUMENT_LENGTH, true);\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}