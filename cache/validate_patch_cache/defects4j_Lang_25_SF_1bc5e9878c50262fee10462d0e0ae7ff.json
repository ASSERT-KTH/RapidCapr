{
    "patch": "public static String decode(String source) {\n    try {\n        StringBuffer res = new StringBuffer();\n        for (int i = 0; i < source.length(); i++) {\n            char c = source.charAt(i);\n            if (c == '+') {\n                res.append(' ');\n            } else if (c == '%') {\n                int j = i + 1;\n                int val = 0;\n                while (j < source.length() && source.charAt(j) == 'u') {\n                    val = Integer.parseInt(source.substring(j + 1, j + 5), 16);\n                    j = j + 5;\n                }\n                if (j < source.length()) {\n                    val = Integer.parseInt(source.substring(j, j + 2), 16);\n                    i = j;\n                }\n                res.append((char) val);\n            } else {\n                res.append(c);\n            }\n        }\n        return res.toString();\n    } catch (Exception e) {\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..89c61ca5 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,34 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String decode(String source) {\n+    try {\n+        StringBuffer res = new StringBuffer();\n+        for (int i = 0; i < source.length(); i++) {\n+            char c = source.charAt(i);\n+            if (c == '+') {\n+                res.append(' ');\n+            } else if (c == '%') {\n+                int j = i + 1;\n+                int val = 0;\n+                while (j < source.length() && source.charAt(j) == 'u') {\n+                    val = Integer.parseInt(source.substring(j + 1, j + 5), 16);\n+                    j = j + 5;\n+                }\n+                if (j < source.length()) {\n+                    val = Integer.parseInt(source.substring(j, j + 2), 16);\n+                    i = j;\n+                }\n+                res.append((char) val);\n+            } else {\n+                res.append(c);\n+            }\n+        }\n+        return res.toString();\n+    } catch (Exception e) {\n+        return null;\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}