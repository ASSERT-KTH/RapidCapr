{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    resolveViaProperties(t, enclosing);\n    // By default, assume that the type cannot be resolved.\n    boolean resolved = false;\n    // Attempt to resolve the type via registry.\n    resolved = resolved || resolveViaRegistry(t, enclosing);\n    if (!resolved) {\n      // If the type still cannot be resolved, only then try to resolve via\n      // properties. Invoking resolveViaProperties may re-set properties and\n      // resolve more types than just the current one so we try to avoid calling\n      // it if possible.\n      resolveViaProperties(t, enclosing);\n    }\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    // If the type was resolved, add properties of the referred type.\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n    // If the type is resolved via properties, add properties and methods to it.\n    if (isResolved()) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return this;\n    }\n    // Unresolved type.\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..f917840d 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,34 +181,36 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    resolveViaProperties(t, enclosing);\n+    // By default, assume that the type cannot be resolved.\n+    boolean resolved = false;\n+    // Attempt to resolve the type via registry.\n+    resolved = resolved || resolveViaRegistry(t, enclosing);\n+    if (!resolved) {\n+      // If the type still cannot be resolved, only then try to resolve via\n+      // properties. Invoking resolveViaProperties may re-set properties and\n+      // resolve more types than just the current one so we try to avoid calling\n+      // it if possible.\n+      resolveViaProperties(t, enclosing);\n+    }\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n+    // If the type was resolved, add properties of the referred type.\n     if (resolved) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-\n-    super.resolveInternal(t, enclosing);\n+    // If the type is resolved via properties, add properties and methods to it.\n     if (isResolved()) {\n+      super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n+      return this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    // Unresolved type.\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n   }\n \n   /**",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_TYPE_PARSE_ERROR. Bad type annotation. Unknown type g.Late at testcode line 2 : 10 expected:<0> but was:<1>",
    "test_result": "FAIL"
}