{
    "patch": "if (n.getType() == Token.URSH) {\n    if (lval < 0) {\n        result = ((2L * Integer.MAX_VALUE + lval) & 0xFFFFFFFFL) >>> rvalInt;\n    } else {\n        result = lvalInt >>> rvalInt;\n    }\n} else {\n    result = lvalInt >> rvalInt;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..6ba4ab31 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,15 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+if (n.getType() == Token.URSH) {\n+    if (lval < 0) {\n+        result = ((2L * Integer.MAX_VALUE + lval) & 0xFFFFFFFFL) >>> rvalInt;\n+    } else {\n+        result = lvalInt >>> rvalInt;\n+    }\n+} else {\n+    result = lvalInt >> rvalInt;\n+}\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "error: bad operand types for binary operator '&'",
    "test_result": "ERROR"
}