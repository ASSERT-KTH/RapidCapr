{
    "patch": "                    int[] daySav = new int[2];\n                    long prev = prevTransition(nextAdjusted - 1);\n                    if (prev == instantAdjusted - 1) {\n                        daySav[0] = getOffset(prev);\n                        daySav[1] = offsetAdjusted;\n                    } else {\n                        daySav[0] = offsetAdjusted;\n                        daySav[1] = getOffset(nextAdjusted - 1);\n                    }\n                    int[] offset = new int[2];\n                    offset[0] = offsetLocal;\n                    offset[1] = offsetAdjusted;\n                    long millis = nextLocal + offsetLocal;\n                    while (millis < nextAdjusted + offsetAdjusted) {\n                        millis = nextTransition(millis);\n                        if (millis == nextLocal) {\n                            offset[0] = offsetLocal;\n                            offset[1] = daySav[0];\n                            millis += (long) daySav[0] * DateTimeConstants.MILLIS_PER_HOUR;\n                        } else if (millis == nextAdjusted) {\n                            offset[0] = daySav[1];\n                            offset[1] = offsetAdjusted;\n                            millis += (long) daySav[1] * DateTimeConstants.MILLIS_PER_HOUR;\n                        } else {\n                            int newOffset = getOffset(millis);\n                            offset[0] = offset[1];\n                            offset[1] = newOffset;\n                            millis += (long) (newOffset - offset[1]) * DateTimeConstants.MILLIS_PER_HOUR;\n                        }\n                    }\n                    return offset[0];",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ba164e2e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,37 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                    int[] daySav = new int[2];\n+                    long prev = prevTransition(nextAdjusted - 1);\n+                    if (prev == instantAdjusted - 1) {\n+                        daySav[0] = getOffset(prev);\n+                        daySav[1] = offsetAdjusted;\n+                    } else {\n+                        daySav[0] = offsetAdjusted;\n+                        daySav[1] = getOffset(nextAdjusted - 1);\n+                    }\n+                    int[] offset = new int[2];\n+                    offset[0] = offsetLocal;\n+                    offset[1] = offsetAdjusted;\n+                    long millis = nextLocal + offsetLocal;\n+                    while (millis < nextAdjusted + offsetAdjusted) {\n+                        millis = nextTransition(millis);\n+                        if (millis == nextLocal) {\n+                            offset[0] = offsetLocal;\n+                            offset[1] = daySav[0];\n+                            millis += (long) daySav[0] * DateTimeConstants.MILLIS_PER_HOUR;\n+                        } else if (millis == nextAdjusted) {\n+                            offset[0] = daySav[1];\n+                            offset[1] = offsetAdjusted;\n+                            millis += (long) daySav[1] * DateTimeConstants.MILLIS_PER_HOUR;\n+                        } else {\n+                            int newOffset = getOffset(millis);\n+                            offset[0] = offset[1];\n+                            offset[1] = newOffset;\n+                            millis += (long) (newOffset - offset[1]) * DateTimeConstants.MILLIS_PER_HOUR;\n+                        }\n+                    }\n+                    return offset[0];\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}