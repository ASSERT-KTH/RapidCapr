{
    "patch": "// Fix starts here\npublic Object returnValueFor(Class clazz) {\n    for (ReturnValue<?> returnValue : returnValues) {\n        if (returnValue.getClazz().equals(clazz)) {\n            return returnValue.getValue(); // return the value if the class is found\n        }\n    }\n\n    // return the default value if the class is not found\n    return clazz.isPrimitive() ? getPrimitiveDefaultValue(clazz) : null;\n}\n\nprivate Object getPrimitiveDefaultValue(Class<?> clazz) {\n    if (clazz.equals(boolean.class)) {\n        return false;\n    } else if (clazz.equals(char.class)) {\n        return '\\0';\n    } else {\n        return 0;\n    }\n}\n// Fix ends here",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}