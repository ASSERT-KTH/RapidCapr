{
    "patch": "// Detect early that algorithm is stuck, instead of waiting for\n// the maximum number of iterations to be exceeded.\nif (FastMath.abs(f1) <= ftol && FastMath.abs(x1 - x0) < rtol * FastMath.max(FastMath.abs(x1), FastMath.abs(x0))) {\n    return x1;\n} else if (FastMath.abs(f1) <= ftol || FastMath.abs(x1 - x0) < atol) {\n    return x1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..754135493 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,13 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+// Detect early that algorithm is stuck, instead of waiting for\n+// the maximum number of iterations to be exceeded.\n+if (FastMath.abs(f1) <= ftol && FastMath.abs(x1 - x0) < rtol * FastMath.max(FastMath.abs(x1), FastMath.abs(x0))) {\n+    return x1;\n+} else if (FastMath.abs(f1) <= ftol || FastMath.abs(x1 - x0) < atol) {\n+    return x1;\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "java.lang.Exception: Unexpected exception, expected<org.apache.commons.math.exception.ConvergenceException> but was<org.apache.commons.math.exception.TooManyEvaluationsException>",
    "test_result": "FAIL"
}