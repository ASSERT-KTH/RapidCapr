{
    "patch": "MockCandidate mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (mockCandidate != null) {\n    try {\n        field.set(fieldInstance, mockCandidate.get());\n        return;\n    } catch (IllegalAccessException e) {\n        throw new AssertionError(String.format(\"Could not set field [%s] annotated with @InjectMocks for class [%s]\", field.getName(), fieldInstance.getClass().getName()), e);\n    } catch (MockitoException e) {\n        throw new AssertionError(String.format(\"Could not create mock of [%s] for field [%s] annotated with @InjectMocks for class [%s]\", field.getType().getName(), field.getName(), fieldInstance.getClass().getName()), e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..4968dd331 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,20 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+MockCandidate mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (mockCandidate != null) {\n+    try {\n+        field.set(fieldInstance, mockCandidate.get());\n+        return;\n+    } catch (IllegalAccessException e) {\n+        throw new AssertionError(String.format(\"Could not set field [%s] annotated with @InjectMocks for class [%s]\", field.getName(), fieldInstance.getClass().getName()), e);\n+    } catch (MockitoException e) {\n+        throw new AssertionError(String.format(\"Could not create mock of [%s] for field [%s] annotated with @InjectMocks for class [%s]\", field.getType().getName(), field.getName(), fieldInstance.getClass().getName()), e);\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}