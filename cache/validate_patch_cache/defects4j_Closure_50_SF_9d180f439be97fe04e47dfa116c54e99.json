{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n\n  Node right = callTarget.getNext();\n  if (right != null) {\n    if (!NodeUtil.isImmutableValue(right)) {\n      return n;\n    }\n  }\n\n  Node arrayNode = callTarget.getFirstChild();\n\n  if (arrayNode.getType() != Token.ARRAYLIT) {\n    return n;\n  }\n\n  Node functionName = arrayNode.getNext();\n  if (functionName == null || !functionName.getString().equals(\"join\")) {\n    return n;\n  }\n\n  // \",\" is the default, it doesn't need to be explicit\n  String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n\n  List<Node> nodes = new ArrayList<>();\n  for (Node element : arrayNode.children()) {\n    if (element.getType() == Token.STRING) {\n      String value = NodeUtil.getStaticSourceString(element);\n      if (value != null) {\n        nodes.add(Node.newString(value));\n        continue;\n      }\n    }\n\n    if (nodes.size() > 0 && joinString.equals(\"\")) {\n      // when join is called with an empty string as the separator, join output is undefined\n      // if any element is null or undefined, it converts it to an empty string but the rest of the join sequence is not affected.\n      // we handle that by adding an empty string to the sequence in place of the null or undefined value.\n      nodes.add(Node.newString(\"\"));\n    }\n\n    nodes.add(element);\n  }\n\n  Node result;\n  if (nodes.size() == 0) {\n    result = Node.newString(\"\");\n  } else if (nodes.size() == 1) {\n    result = nodes.get(0);\n  } else {\n    Node firstElement = nodes.get(0);\n    Node resultString = firstElement.cloneNode();\n    Node restElements = new Node(Token.ARRAYLIT);\n    for (int i = 1; i < nodes.size(); i++) {\n      Node joiner = Node.newString(joinString);\n      Node node = nodes.get(i).cloneNode();\n\n      if (joiner.getString().isEmpty()) {\n        Node guard = new Node(Token.HOOK, \n                              new Node(Token.SHEQ, node, Node.newString(\"\")), // is the value empty?\n                              Node.newString(\"\"), // return empty string when true\n                              node.cloneNode()); // return original value when false\n        node = guard;\n      }\n\n      resultString = new Node(Token.ADD, resultString, joiner, node);\n    }\n    result = resultString;\n  }\n\n  n.getParent().replaceChild(n, result);\n  reportCodeChange();\n\n  return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..33b8afa2 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,117 +364,86 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n-    Node callTarget = n.getFirstChild();\n+private Node tryFoldArrayJoin(Node n) {\n+  Node callTarget = n.getFirstChild();\n \n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n+  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n+    return n;\n+  }\n+\n+  Node right = callTarget.getNext();\n+  if (right != null) {\n+    if (!NodeUtil.isImmutableValue(right)) {\n       return n;\n     }\n+  }\n \n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n-    }\n+  Node arrayNode = callTarget.getFirstChild();\n \n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  if (arrayNode.getType() != Token.ARRAYLIT) {\n+    return n;\n+  }\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n-    }\n+  Node functionName = arrayNode.getNext();\n+  if (functionName == null || !functionName.getString().equals(\"join\")) {\n+    return n;\n+  }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+  // \",\" is the default, it doesn't need to be explicit\n+  String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n+\n+  List<Node> nodes = new ArrayList<>();\n+  for (Node element : arrayNode.children()) {\n+    if (element.getType() == Token.STRING) {\n+      String value = NodeUtil.getStaticSourceString(element);\n+      if (value != null) {\n+        nodes.add(Node.newString(value));\n+        continue;\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n     }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+    if (nodes.size() > 0 && joinString.equals(\"\")) {\n+      // when join is called with an empty string as the separator, join output is undefined\n+      // if any element is null or undefined, it converts it to an empty string but the rest of the join sequence is not affected.\n+      // we handle that by adding an empty string to the sequence in place of the null or undefined value.\n+      nodes.add(Node.newString(\"\"));\n     }\n \n-    return n;\n+    nodes.add(element);\n   }\n \n+  Node result;\n+  if (nodes.size() == 0) {\n+    result = Node.newString(\"\");\n+  } else if (nodes.size() == 1) {\n+    result = nodes.get(0);\n+  } else {\n+    Node firstElement = nodes.get(0);\n+    Node resultString = firstElement.cloneNode();\n+    Node restElements = new Node(Token.ARRAYLIT);\n+    for (int i = 1; i < nodes.size(); i++) {\n+      Node joiner = Node.newString(joinString);\n+      Node node = nodes.get(i).cloneNode();\n+\n+      if (joiner.getString().isEmpty()) {\n+        Node guard = new Node(Token.HOOK, \n+                              new Node(Token.SHEQ, node, Node.newString(\"\")), // is the value empty?\n+                              Node.newString(\"\"), // return empty string when true\n+                              node.cloneNode()); // return original value when false\n+        node = guard;\n+      }\n+\n+      resultString = new Node(Token.ADD, resultString, joiner, node);\n+    }\n+    result = resultString;\n+  }\n+\n+  n.getParent().replaceChild(n, result);\n+  reportCodeChange();\n+\n+  return result;\n+}\n+\n   /**\n    * Try to fold .substr() calls on strings\n    */\n@@ -642,4 +611,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}