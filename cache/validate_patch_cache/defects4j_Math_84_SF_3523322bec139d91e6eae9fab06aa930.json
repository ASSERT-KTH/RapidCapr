{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n\n            if (comparator.compare(reflected, original[original.length - 1]) < 0) {\n                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    simplex = replaceWorst(original, expanded, comparator);\n                } else {\n                    simplex = replaceWorst(original, reflected, comparator);\n                }\n            } else {\n                if (comparator.compare(reflected, original[0]) < 0) {\n                    simplex = replaceWorst(original, reflected, comparator);\n                }\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n                    simplex = replaceWorst(original, contracted, comparator);\n                } else {\n                    if (comparator.compare(reflected, original[original.length - 1]) >= 0) {\n                        final RealPointValuePair contractedOut = evaluateNewSimplex(original, sigma, comparator);\n                        simplex = replaceWorst(original, contractedOut, comparator);\n                    }\n                }\n            }\n\n            // check convergence\n            final RealPointValuePair current = simplex[0];\n            boolean converged = true;\n            for (int i = 1; i < simplex.length; ++i) {\n                converged &= FastMath.abs(comparator.compare(simplex[i], current)) <= getRelativeThreshold() &&\n                        FastMath.abs(comparator.compare(simplex[i], best)) <= getAbsoluteThreshold();\n            }\n\n            if (converged) {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..21143f26a 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,11 +58,10 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n-\n             incrementIterationsCounter();\n \n             // save the original vertex\n@@ -71,32 +70,38 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n \n+            if (comparator.compare(reflected, original[original.length - 1]) < 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    simplex = replaceWorst(original, expanded, comparator);\n+                } else {\n+                    simplex = replaceWorst(original, reflected, comparator);\n+                }\n+            } else {\n+                if (comparator.compare(reflected, original[0]) < 0) {\n+                    simplex = replaceWorst(original, reflected, comparator);\n+                }\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n+                    simplex = replaceWorst(original, contracted, comparator);\n+                } else {\n+                    if (comparator.compare(reflected, original[original.length - 1]) >= 0) {\n+                        final RealPointValuePair contractedOut = evaluateNewSimplex(original, sigma, comparator);\n+                        simplex = replaceWorst(original, contractedOut, comparator);\n+                    }\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n-                return;\n+            final RealPointValuePair current = simplex[0];\n+            boolean converged = true;\n+            for (int i = 1; i < simplex.length; ++i) {\n+                converged &= FastMath.abs(comparator.compare(simplex[i], current)) <= getRelativeThreshold() &&\n+                        FastMath.abs(comparator.compare(simplex[i], best)) <= getAbsoluteThreshold();\n             }\n \n-        }\n-\n-    }\n+            if (converged) {\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}