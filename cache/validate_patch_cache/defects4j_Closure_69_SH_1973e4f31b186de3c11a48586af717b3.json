{
    "patch": "if (childType.isFunctionType()) {\n  FunctionType functionType = childType.toMaybeFunctionType();\n\n  boolean isExtern = false;\n  JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n  if(functionJSDocInfo != null) {\n    String sourceName = functionJSDocInfo.getSourceFileName();\n    CompilerInput functionSource = compiler.getInput(sourceName);\n    isExtern = functionSource.isExtern();\n  }\n\n  // A couple of types can be called as if they were functions.\n  // Non-native constructors should not be called directly\n  // unless they specify a return type and are defined\n  // in an extern.\n  if (functionType.isConstructor() &&\n      !functionType.isNativeObjectType() &&\n      (functionType.getReturnType().isUnknownType() ||\n          functionType.getReturnType().isVoidType() ||\n          !isExtern)) {\n    report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n  } else {\n    // Make sure that functions with explicit 'this' types are called in a GETPROP\n    // or GETELEM.\n    if (functionType.getTypeOfThis() != null\n        && !NodeUtil.isGet(functionType.getTypeOfThis().getReferenceName(), n.getParent())) {\n      report(t, n, EXPLICIT_THIS_PARAMETER_NOT_ALLOWED);\n      ensureTyped(t, n);\n      return;\n    }\n\n    visitParameterList(t, n, functionType);\n    ensureTyped(t, n, functionType.getReturnType());\n    return;\n  }\n} else {\n  ensureTyped(t, n);\n  return;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..0c5b146c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,45 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (childType.isFunctionType()) {\n+  FunctionType functionType = childType.toMaybeFunctionType();\n+\n+  boolean isExtern = false;\n+  JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+  if(functionJSDocInfo != null) {\n+    String sourceName = functionJSDocInfo.getSourceFileName();\n+    CompilerInput functionSource = compiler.getInput(sourceName);\n+    isExtern = functionSource.isExtern();\n+  }\n+\n+  // A couple of types can be called as if they were functions.\n+  // Non-native constructors should not be called directly\n+  // unless they specify a return type and are defined\n+  // in an extern.\n+  if (functionType.isConstructor() &&\n+      !functionType.isNativeObjectType() &&\n+      (functionType.getReturnType().isUnknownType() ||\n+          functionType.getReturnType().isVoidType() ||\n+          !isExtern)) {\n+    report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+  } else {\n+    // Make sure that functions with explicit 'this' types are called in a GETPROP\n+    // or GETELEM.\n+    if (functionType.getTypeOfThis() != null\n+        && !NodeUtil.isGet(functionType.getTypeOfThis().getReferenceName(), n.getParent())) {\n+      report(t, n, EXPLICIT_THIS_PARAMETER_NOT_ALLOWED);\n+      ensureTyped(t, n);\n+      return;\n+    }\n+\n+    visitParameterList(t, n, functionType);\n+    ensureTyped(t, n, functionType.getReturnType());\n+    return;\n+  }\n+} else {\n+  ensureTyped(t, n);\n+  return;\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: variable functionType is already defined in method visitCall(NodeTraversal,Node)",
    "test_result": "ERROR"
}