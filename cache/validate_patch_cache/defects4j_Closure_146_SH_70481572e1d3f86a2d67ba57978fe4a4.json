{
    "patch": "        JSType typeA = this.removeTypeOfThisIfPresent().getTypeWithoutTypeVar();\n        JSType typeB = that.removeTypeOfThisIfPresent().getTypeWithoutTypeVar();\n        // Both types are function types so we need to look only at their return types.\n        if (typeA.isFunctionType() && typeB.isFunctionType()) {\n          typeA = typeA.toMaybeFunctionType().getReturnType();\n          typeB = typeB.toMaybeFunctionType().getReturnType();\n        }\n        return new TypePair(typeA, typeB);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..ec5b1782 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,14 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+        JSType typeA = this.removeTypeOfThisIfPresent().getTypeWithoutTypeVar();\n+        JSType typeB = that.removeTypeOfThisIfPresent().getTypeWithoutTypeVar();\n+        // Both types are function types so we need to look only at their return types.\n+        if (typeA.isFunctionType() && typeB.isFunctionType()) {\n+          typeA = typeA.toMaybeFunctionType().getReturnType();\n+          typeB = typeB.toMaybeFunctionType().getReturnType();\n+        }\n+        return new TypePair(typeA, typeB);\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}