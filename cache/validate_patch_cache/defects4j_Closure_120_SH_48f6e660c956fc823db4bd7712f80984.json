{
    "patch": "        } else if (block == ref.getBasicBlock() &&\n                   ref.getNext() != null &&\n                   ref.getNext().isTerminal()) {\n          // If it's the end of the block, we haven't seen a loop, and there's no\n          // control flow after this assignment, then it's assigned once.\n          return true;\n        }\n      }\n\n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..f89dc485 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (block == ref.getBasicBlock() &&\n+                   ref.getNext() != null &&\n+                   ref.getNext().isTerminal()) {\n+          // If it's the end of the block, we haven't seen a loop, and there's no\n+          // control flow after this assignment, then it's assigned once.\n+          return true;\n+        }\n+      }\n+\n+      return false;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}