{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length == 0) {\n        return;\n    }\n    for (Type type : bounds) {\n        if (type instanceof TypeVariable \n                && !((TypeVariable<?>) type).getName().equals(typeVariable.getName())) {\n            readTypeVariablesOnTypeVariable((TypeVariable<?>) type);\n        } else if (type instanceof ParameterizedType) {\n            Type rawType = ((ParameterizedType) type).getRawType();\n            if (rawType instanceof Class) {\n                readTypeVariablesOnClass((Class<?>) rawType);\n            } else if (rawType instanceof TypeVariable) {\n                readTypeVariablesOnTypeVariable((TypeVariable<?>) rawType);\n            }\n        } else if (type instanceof Class) {\n            readTypeVariablesOnClass((Class<?>) type);\n        }\n        // ignore WildcardType types\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null \n            && !actualTypeArgument.equals(typeVariable)\n            && actualTypeArgument instanceof Class) {\n        readTypeVariablesOnClass((Class<?>) actualTypeArgument);\n    }\n}\n\nprivate void readTypeVariablesOnClass(Class<?> cls) {\n    if (cls.getTypeParameters().length > 0) {\n        for (TypeVariable<?> var : cls.getTypeParameters()) {\n            readTypeVariablesOnTypeVariable(var);\n        }\n    }\n}\n\nprivate void readTypeVariablesOnTypeVariable(TypeVariable<?> typeVariable) {\n    if (typeVariable.getBounds().length > 0) {\n        for (Type bound : typeVariable.getBounds()) {\n            if (bound instanceof TypeVariable \n                    && !((TypeVariable<?>) bound).getName().equals(typeVariable.getName())) {\n                readTypeVariablesOnTypeVariable((TypeVariable<?>) bound);\n            } else if (bound instanceof ParameterizedType) {\n                Type rawType = ((ParameterizedType) bound).getRawType();\n                if (rawType instanceof Class) {\n                    readTypeVariablesOnClass((Class<?>) rawType);\n                } else if (rawType instanceof TypeVariable) {\n                    readTypeVariablesOnTypeVariable((TypeVariable<?>) rawType);\n                }\n            } else if (bound instanceof Class) {\n                readTypeVariablesOnClass((Class<?>) bound);\n            }\n            // ignore WildcardType types\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..7a92c216a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,67 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length == 0) {\n+        return;\n+    }\n+    for (Type type : bounds) {\n+        if (type instanceof TypeVariable \n+                && !((TypeVariable<?>) type).getName().equals(typeVariable.getName())) {\n+            readTypeVariablesOnTypeVariable((TypeVariable<?>) type);\n+        } else if (type instanceof ParameterizedType) {\n+            Type rawType = ((ParameterizedType) type).getRawType();\n+            if (rawType instanceof Class) {\n+                readTypeVariablesOnClass((Class<?>) rawType);\n+            } else if (rawType instanceof TypeVariable) {\n+                readTypeVariablesOnTypeVariable((TypeVariable<?>) rawType);\n+            }\n+        } else if (type instanceof Class) {\n+            readTypeVariablesOnClass((Class<?>) type);\n+        }\n+        // ignore WildcardType types\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null \n+            && !actualTypeArgument.equals(typeVariable)\n+            && actualTypeArgument instanceof Class) {\n+        readTypeVariablesOnClass((Class<?>) actualTypeArgument);\n+    }\n+}\n+\n+private void readTypeVariablesOnClass(Class<?> cls) {\n+    if (cls.getTypeParameters().length > 0) {\n+        for (TypeVariable<?> var : cls.getTypeParameters()) {\n+            readTypeVariablesOnTypeVariable(var);\n+        }\n+    }\n+}\n+\n+private void readTypeVariablesOnTypeVariable(TypeVariable<?> typeVariable) {\n+    if (typeVariable.getBounds().length > 0) {\n+        for (Type bound : typeVariable.getBounds()) {\n+            if (bound instanceof TypeVariable \n+                    && !((TypeVariable<?>) bound).getName().equals(typeVariable.getName())) {\n+                readTypeVariablesOnTypeVariable((TypeVariable<?>) bound);\n+            } else if (bound instanceof ParameterizedType) {\n+                Type rawType = ((ParameterizedType) bound).getRawType();\n+                if (rawType instanceof Class) {\n+                    readTypeVariablesOnClass((Class<?>) rawType);\n+                } else if (rawType instanceof TypeVariable) {\n+                    readTypeVariablesOnTypeVariable((TypeVariable<?>) rawType);\n+                }\n+            } else if (bound instanceof Class) {\n+                readTypeVariablesOnClass((Class<?>) bound);\n+            }\n+            // ignore WildcardType types\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}