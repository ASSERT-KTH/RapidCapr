{
    "patch": "private String getRemainingJSDocLine() {\n    String line = stream.getRemainingJSDocLine();\n    if (line == null) {\n        throw new IllegalStateException();\n    }\n    line = line.trim();\n    if (line.isEmpty()) {\n        return \"\";\n    }\n    int endIndex = line.length() - 1;\n    while (endIndex >= 0 && Character.isWhitespace(line.charAt(endIndex))) {\n        endIndex--;\n    }\n    return line.substring(0, endIndex + 1);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..b98db6a8 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,21 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n-    String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+private String getRemainingJSDocLine() {\n+    String line = stream.getRemainingJSDocLine();\n+    if (line == null) {\n+        throw new IllegalStateException();\n+    }\n+    line = line.trim();\n+    if (line.isEmpty()) {\n+        return \"\";\n+    }\n+    int endIndex = line.length() - 1;\n+    while (endIndex >= 0 && Character.isWhitespace(line.charAt(endIndex))) {\n+        endIndex--;\n+    }\n+    return line.substring(0, endIndex + 1);\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "junit.framework.ComparisonFailure: expected:<Another[ ]function.> but was:<Another[]function.>",
    "test_result": "FAIL"
}