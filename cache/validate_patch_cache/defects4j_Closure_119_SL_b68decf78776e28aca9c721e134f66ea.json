{
    "patch": "    if (type != Name.Type.FUNCTION) {\n      Var var = scope.getVar(name);\n      if (var == null) {\n        warnings.add(JSError.make(n, JSC_UNDEFINED_NAME, name));\n        return;\n      }\n    } else {\n      if(isGlobalNameReference(name, scope)) {\n        handleGet(module, scope, n, parent, name);\n        return;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..1524b9e1 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,18 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+    if (type != Name.Type.FUNCTION) {\n+      Var var = scope.getVar(name);\n+      if (var == null) {\n+        warnings.add(JSError.make(n, JSC_UNDEFINED_NAME, name));\n+        return;\n+      }\n+    } else {\n+      if(isGlobalNameReference(name, scope)) {\n+        handleGet(module, scope, n, parent, name);\n+        return;\n+      }\n+    }\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}