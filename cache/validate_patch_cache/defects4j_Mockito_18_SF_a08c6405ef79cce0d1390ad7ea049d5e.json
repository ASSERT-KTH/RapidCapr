{
    "patch": "public static Iterable<String> fixBug(Values values) {\n    List<String> output = new ArrayList<String>();\n    Object returnValue = values.returnValueFor(Iterable.class);\n    if (returnValue instanceof Iterable) {\n        for (Object obj : (Iterable<?>) returnValue) {\n            if (obj instanceof String) {\n                String str = (String) obj;\n                if (!str.isEmpty() && !output.contains(str)) {\n                    output.add(str);\n                }\n            }\n        }\n    }\n    return output;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..f7fdc9c63 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,21 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Iterable<String> fixBug(Values values) {\n+    List<String> output = new ArrayList<String>();\n+    Object returnValue = values.returnValueFor(Iterable.class);\n+    if (returnValue instanceof Iterable) {\n+        for (Object obj : (Iterable<?>) returnValue) {\n+            if (obj instanceof String) {\n+                String str = (String) obj;\n+                if (!str.isEmpty() && !output.contains(str)) {\n+                    output.add(str);\n+                }\n+            }\n+        }\n+    }\n+    return output;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}