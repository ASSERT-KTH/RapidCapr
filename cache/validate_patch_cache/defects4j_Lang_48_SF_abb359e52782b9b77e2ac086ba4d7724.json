{
    "patch": "public class EqualsBuilder {\n\n    private boolean isEquals;\n\n    public EqualsBuilder() {\n        this.isEquals = true;\n    }\n\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n                // The simple case, not an array, just test the element\n            isEquals = lhs.equals(rhs);\n        } else if (lhs.getClass() != rhs.getClass()) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n            this.setEquals(false);\n        }\n        // 'Switch' on type of array, to dispatch to the correct handler\n        // This handles multi dimensional arrays of the same depth\n        else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Not an array of primitives\n            append((Object[]) lhs, (Object[]) rhs);\n        }\n        return this;\n    }\n\n    private void append(long[] lhs, long[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n    }\n\n    private void append(int[] lhs, int[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n    }\n\n    private void append(short[] lhs, short[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n    }\n\n    private void append(char[] lhs, char[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n    }\n\n    private void append(byte[] lhs, byte[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n    }\n\n    private void append(double[] lhs, double[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n    }\n\n    private void append(float[] lhs, float[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n    }\n\n    private void append(boolean[] lhs, boolean[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n    }\n\n    private void append(Object[] lhs, Object[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = Arrays.deepEquals(lhs, rhs);\n    }\n\n    public boolean isEquals() {\n        return isEquals;\n    }\n\n    public void setEquals(boolean isEquals) {\n        this.isEquals = isEquals;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..845e14b1 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,6 +364,14 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+public class EqualsBuilder {\n+\n+    private boolean isEquals;\n+\n+    public EqualsBuilder() {\n+        this.isEquals = true;\n+    }\n+\n     public EqualsBuilder append(Object lhs, Object rhs) {\n         if (isEquals == false) {\n             return this;\n@@ -378,7 +386,7 @@ public class EqualsBuilder {\n         Class lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n                 // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n+            isEquals = lhs.equals(rhs);\n         } else if (lhs.getClass() != rhs.getClass()) {\n             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n             this.setEquals(false);\n@@ -408,6 +416,78 @@ public class EqualsBuilder {\n         return this;\n     }\n \n+    private void append(long[] lhs, long[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+    }\n+\n+    private void append(int[] lhs, int[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+    }\n+\n+    private void append(short[] lhs, short[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+    }\n+\n+    private void append(char[] lhs, char[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+    }\n+\n+    private void append(byte[] lhs, byte[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+    }\n+\n+    private void append(double[] lhs, double[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+    }\n+\n+    private void append(float[] lhs, float[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+    }\n+\n+    private void append(boolean[] lhs, boolean[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+    }\n+\n+    private void append(Object[] lhs, Object[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = Arrays.deepEquals(lhs, rhs);\n+    }\n+\n+    public boolean isEquals() {\n+        return isEquals;\n+    }\n+\n+    public void setEquals(boolean isEquals) {\n+        this.isEquals = isEquals;\n+    }\n+}\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: class EqualsBuilder is already defined in package org.apache.commons.lang.builder",
    "test_result": "ERROR"
}