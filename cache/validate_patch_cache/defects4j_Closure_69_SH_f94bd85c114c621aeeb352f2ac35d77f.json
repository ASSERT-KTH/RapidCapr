{
    "patch": "      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      JSType thisType = functionType.getTypeOfThis();\n      if (thisType.isNoResolvedType()) {\n        // Do nothing for non-existent or ambiguous 'this' types.\n      } else if (thisType.isUnionType()) {\n        // Check that all possible 'this' types are either subtypes of Object or are\n        // callable if called through a GETPROP or GETELEM.\n        for (JSType altType : thisType.toMaybeUnionType().getAlternates()) {\n          checkThisType(t, n, altType);\n        }\n      } else {\n        checkThisType(t, n, thisType);\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..5ff7c9ee 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,44 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      FunctionType functionType = (FunctionType) childType;\n+\n+      boolean isExtern = false;\n+      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+      if(functionJSDocInfo != null) {\n+        String sourceName = functionJSDocInfo.getSourceName();\n+        CompilerInput functionSource = compiler.getInput(sourceName);\n+        isExtern = functionSource.isExtern();\n+      }\n+\n+      // Non-native constructors should not be called directly\n+      // unless they specify a return type and are defined\n+      // in an extern.\n+      if (functionType.isConstructor() &&\n+          !functionType.isNativeObjectType() &&\n+          (functionType.getReturnType().isUnknownType() ||\n+           functionType.getReturnType().isVoidType() ||\n+           !isExtern)) {\n+        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+      }\n+\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      JSType thisType = functionType.getTypeOfThis();\n+      if (thisType.isNoResolvedType()) {\n+        // Do nothing for non-existent or ambiguous 'this' types.\n+      } else if (thisType.isUnionType()) {\n+        // Check that all possible 'this' types are either subtypes of Object or are\n+        // callable if called through a GETPROP or GETELEM.\n+        for (JSType altType : thisType.toMaybeUnionType().getAlternates()) {\n+          checkThisType(t, n, altType);\n+        }\n+      } else {\n+        checkThisType(t, n, thisType);\n+      }\n+\n+      visitParameterList(t, n, functionType);\n+      ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: variable functionType is already defined in method visitCall(NodeTraversal,Node)",
    "test_result": "ERROR"
}