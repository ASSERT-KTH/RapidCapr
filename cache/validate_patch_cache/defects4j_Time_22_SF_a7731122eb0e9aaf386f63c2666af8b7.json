{
    "patch": "private void setPeriodInternal(long duration) {\n    setYears(FieldUtils.safeDivide(duration, DateTimeConstants.MILLIS_PER_YEAR));\n    duration = FieldUtils.safeMod(duration, DateTimeConstants.MILLIS_PER_YEAR);\n\n    setMonths(FieldUtils.safeDivide(duration, DateTimeConstants.MILLIS_PER_MONTH));\n    duration = FieldUtils.safeMod(duration, DateTimeConstants.MILLIS_PER_MONTH);\n\n    setWeeks(FieldUtils.safeDivide(duration, DateTimeConstants.MILLIS_PER_WEEK));\n    duration = FieldUtils.safeMod(duration, DateTimeConstants.MILLIS_PER_WEEK);\n\n    setDays(FieldUtils.safeDivide(duration, DateTimeConstants.MILLIS_PER_DAY));\n    duration = FieldUtils.safeMod(duration, DateTimeConstants.MILLIS_PER_DAY);\n\n    setHours(FieldUtils.safeDivide(duration, DateTimeConstants.MILLIS_PER_HOUR));\n    duration = FieldUtils.safeMod(duration, DateTimeConstants.MILLIS_PER_HOUR);\n\n    setMinutes(FieldUtils.safeDivide(duration, DateTimeConstants.MILLIS_PER_MINUTE));\n    duration = FieldUtils.safeMod(duration, DateTimeConstants.MILLIS_PER_MINUTE);\n\n    setSeconds(FieldUtils.safeDivide(duration, DateTimeConstants.MILLIS_PER_SECOND));\n    setMillis(FieldUtils.safeMod(duration, DateTimeConstants.MILLIS_PER_SECOND));\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..5c23afe1 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,28 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+private void setPeriodInternal(long duration) {\n+    setYears(FieldUtils.safeDivide(duration, DateTimeConstants.MILLIS_PER_YEAR));\n+    duration = FieldUtils.safeMod(duration, DateTimeConstants.MILLIS_PER_YEAR);\n+\n+    setMonths(FieldUtils.safeDivide(duration, DateTimeConstants.MILLIS_PER_MONTH));\n+    duration = FieldUtils.safeMod(duration, DateTimeConstants.MILLIS_PER_MONTH);\n+\n+    setWeeks(FieldUtils.safeDivide(duration, DateTimeConstants.MILLIS_PER_WEEK));\n+    duration = FieldUtils.safeMod(duration, DateTimeConstants.MILLIS_PER_WEEK);\n+\n+    setDays(FieldUtils.safeDivide(duration, DateTimeConstants.MILLIS_PER_DAY));\n+    duration = FieldUtils.safeMod(duration, DateTimeConstants.MILLIS_PER_DAY);\n+\n+    setHours(FieldUtils.safeDivide(duration, DateTimeConstants.MILLIS_PER_HOUR));\n+    duration = FieldUtils.safeMod(duration, DateTimeConstants.MILLIS_PER_HOUR);\n+\n+    setMinutes(FieldUtils.safeDivide(duration, DateTimeConstants.MILLIS_PER_MINUTE));\n+    duration = FieldUtils.safeMod(duration, DateTimeConstants.MILLIS_PER_MINUTE);\n+\n+    setSeconds(FieldUtils.safeDivide(duration, DateTimeConstants.MILLIS_PER_SECOND));\n+    setMillis(FieldUtils.safeMod(duration, DateTimeConstants.MILLIS_PER_SECOND));\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}