{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    int[] newValues = Arrays.copyOf(values, values.length);\n    newValues[fieldIndex] += valueToAdd;\n    \n    // check if addition causes overflow to the next field\n    DateTimeField field = partial.getField(fieldIndex);\n    if (newValues[fieldIndex] < field.getMinimumValue() || newValues[fieldIndex] > field.getMaximumValue()) {\n        // determine the amount to overflow\n        int overflow = (newValues[fieldIndex] - field.getMinimumValue()) % (field.getMaximumValue() - field.getMinimumValue() + 1);\n        overflow += field.getMaximumValue() - field.getMinimumValue() + 1; // ensure positive\n        newValues = add(partial, fieldIndex + 1, newValues, overflow);\n    }\n    \n    // check for month/year overflow and adjust day if necessary\n    if (partial instanceof LocalDate) {\n        LocalDate date = (LocalDate) partial;\n        try {\n            return new int[] { date.withYear(newValues[0]).withMonthOfYear(newValues[1]).withDayOfMonth(date.getDayOfMonth()).getYear(),\n                               date.withYear(newValues[0]).withMonthOfYear(newValues[1]).withDayOfMonth(date.getDayOfMonth()).getMonthOfYear(),\n                               date.withYear(newValues[0]).withMonthOfYear(newValues[1]).withDayOfMonth(date.getDayOfMonth()).getDayOfMonth() };\n        } catch (IllegalArgumentException e) {\n            if (e.getMessage().startsWith(\"Invalid date\")) {\n                DateTimeFormatter fmt = DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n                throw new IllegalArgumentException(\"Invalid date after adding \" + valueToAdd + \" to field \" + field + \" of date \" + fmt.print(date));\n            }\n            throw e;\n        }\n    } else {\n        return newValues;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..e7429926 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,41 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    \n+    int[] newValues = Arrays.copyOf(values, values.length);\n+    newValues[fieldIndex] += valueToAdd;\n+    \n+    // check if addition causes overflow to the next field\n+    DateTimeField field = partial.getField(fieldIndex);\n+    if (newValues[fieldIndex] < field.getMinimumValue() || newValues[fieldIndex] > field.getMaximumValue()) {\n+        // determine the amount to overflow\n+        int overflow = (newValues[fieldIndex] - field.getMinimumValue()) % (field.getMaximumValue() - field.getMinimumValue() + 1);\n+        overflow += field.getMaximumValue() - field.getMinimumValue() + 1; // ensure positive\n+        newValues = add(partial, fieldIndex + 1, newValues, overflow);\n+    }\n+    \n+    // check for month/year overflow and adjust day if necessary\n+    if (partial instanceof LocalDate) {\n+        LocalDate date = (LocalDate) partial;\n+        try {\n+            return new int[] { date.withYear(newValues[0]).withMonthOfYear(newValues[1]).withDayOfMonth(date.getDayOfMonth()).getYear(),\n+                               date.withYear(newValues[0]).withMonthOfYear(newValues[1]).withDayOfMonth(date.getDayOfMonth()).getMonthOfYear(),\n+                               date.withYear(newValues[0]).withMonthOfYear(newValues[1]).withDayOfMonth(date.getDayOfMonth()).getDayOfMonth() };\n+        } catch (IllegalArgumentException e) {\n+            if (e.getMessage().startsWith(\"Invalid date\")) {\n+                DateTimeFormatter fmt = DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n+                throw new IllegalArgumentException(\"Invalid date after adding \" + valueToAdd + \" to field \" + field + \" of date \" + fmt.print(date));\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            throw e;\n         }\n+    } else {\n+        return newValues;\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}