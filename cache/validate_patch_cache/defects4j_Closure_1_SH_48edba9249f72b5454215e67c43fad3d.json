{
    "patch": "    List<Node> allArgs = new ArrayList<>();\n    for (Node current = argList.getFirstChild(); current != null; current = current.getNext()) {\n      allArgs.add(current);\n    }\n    Collections.reverse(allArgs);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      boolean modifyFunction = false;\n      for (Node arg : allArgs) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(arg);\n          modifyFunction = true;\n        } else if (modifyFunction) {\n          // Once we've started modifying we can strip all unused args.\n          argList.removeChild(arg);\n        }\n      }\n      if (modifyFunction) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6a42d87f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,27 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<Node> allArgs = new ArrayList<>();\n+    for (Node current = argList.getFirstChild(); current != null; current = current.getNext()) {\n+      allArgs.add(current);\n+    }\n+    Collections.reverse(allArgs);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      boolean modifyFunction = false;\n+      for (Node arg : allArgs) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(arg);\n+          modifyFunction = true;\n+        } else if (modifyFunction) {\n+          // Once we've started modifying we can strip all unused args.\n+          argList.removeChild(arg);\n+        }\n+      }\n+      if (modifyFunction) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}