{
    "patch": "          if (outputCharsetEncoder != null) {\n            CharBuffer inputBuffer = CharBuffer.allocate(1);\n            ByteBuffer outputBuffer = ByteBuffer.allocate(2);\n            inputBuffer.put(c);\n            inputBuffer.rewind();\n            outputCharsetEncoder.reset();\n            CoderResult result = outputCharsetEncoder.encode(inputBuffer, outputBuffer, true);\n            if (result.isUnderflow() && outputBuffer.position() == 1) {\n              outputBuffer.rewind();\n              sb.append(\"\\\\u\");\n              for (int j = 0; j < 2 - outputBuffer.limit(); j++) {\n                sb.append('0');\n              }\n              while (outputBuffer.hasRemaining()) {\n                sb.append(String.format(\"%02x\", outputBuffer.get()));\n              }\n            } else {\n              sb.append(c);\n            }\n          } else {\n            if (c > 0x1f && c <= 0x7f) {\n              sb.append(c);\n            } else {\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 558e74fe..9be24f2d 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,8 +1042,33 @@ class CodeGenerator {\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n+          if (outputCharsetEncoder != null) {\n+            CharBuffer inputBuffer = CharBuffer.allocate(1);\n+            ByteBuffer outputBuffer = ByteBuffer.allocate(2);\n+            inputBuffer.put(c);\n+            inputBuffer.rewind();\n+            outputCharsetEncoder.reset();\n+            CoderResult result = outputCharsetEncoder.encode(inputBuffer, outputBuffer, true);\n+            if (result.isUnderflow() && outputBuffer.position() == 1) {\n+              outputBuffer.rewind();\n+              sb.append(\"\\\\u\");\n+              for (int j = 0; j < 2 - outputBuffer.limit(); j++) {\n+                sb.append('0');\n+              }\n+              while (outputBuffer.hasRemaining()) {\n+                sb.append(String.format(\"%02x\", outputBuffer.get()));\n+              }\n+            } else {\n+              sb.append(c);\n+            }\n+          } else {\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n+            } else {\n+              appendHexJavaScriptRepresentation(sb, c);\n+            }\n+          }\n+              sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,\n               // or perhaps mangled by proxies along the way,",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}