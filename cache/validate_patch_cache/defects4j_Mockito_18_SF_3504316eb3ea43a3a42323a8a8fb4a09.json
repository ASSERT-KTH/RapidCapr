{
    "patch": "public <T> ReturnValue<T> returnValueFor(Class<T> clazz) {\n    ReturnValue<T> returnValue = null;\n    for (ReturnValue<?> value : this.values) {\n        if (clazz.isAssignableFrom(value.getValue().getClass())) {\n            returnValue = (ReturnValue<T>) value;\n            break;\n        }\n    }\n    return returnValue;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..81e5bc4b9 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,16 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public <T> ReturnValue<T> returnValueFor(Class<T> clazz) {\n+    ReturnValue<T> returnValue = null;\n+    for (ReturnValue<?> value : this.values) {\n+        if (clazz.isAssignableFrom(value.getValue().getClass())) {\n+            returnValue = (ReturnValue<T>) value;\n+            break;\n+        }\n+    }\n+    return returnValue;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}