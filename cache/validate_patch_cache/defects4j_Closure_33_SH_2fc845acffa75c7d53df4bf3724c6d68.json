{
    "patch": "if (!constraintObj.isNamedType() && !constraintObj.isConstructor()) {\n  // We only want to match contraints on anonymous types provided they are not\n  // function types or constructors.\n  if (!constraintObj.isFunctionType()) {\n    ObjectType objType = ObjectType.cast(constraintObj);\n    if (objType != null && objType.getReferenceName() == null && objType.isRecordType()) {\n      // Handle the case where the constraint object is a record type.\n      //\n      // param constraintObj {{prop: (number|undefined)}}\n      // function f(constraintObj) {}\n      // f({});\n      //\n      // We want to modify the object literal to match the constraint, by\n      // taking each property on the record and trying to match\n      // properties on this object.\n      for (String prop : objType.getOwnPropertyNames()) {\n        if (!hasProperty(prop)) {\n          JSType propType = objType.getPropertyType(prop);\n          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..8544696f 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,32 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (!constraintObj.isNamedType() && !constraintObj.isConstructor()) {\n+  // We only want to match contraints on anonymous types provided they are not\n+  // function types or constructors.\n+  if (!constraintObj.isFunctionType()) {\n+    ObjectType objType = ObjectType.cast(constraintObj);\n+    if (objType != null && objType.getReferenceName() == null && objType.isRecordType()) {\n+      // Handle the case where the constraint object is a record type.\n+      //\n+      // param constraintObj {{prop: (number|undefined)}}\n+      // function f(constraintObj) {}\n+      // f({});\n+      //\n+      // We want to modify the object literal to match the constraint, by\n+      // taking each property on the record and trying to match\n+      // properties on this object.\n+      for (String prop : objType.getOwnPropertyNames()) {\n+        if (!hasProperty(prop)) {\n+          JSType propType = objType.getPropertyType(prop);\n+          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+              .getLeastSupertype(propType);\n+          defineInferredProperty(prop, typeToInfer, null);\n+        }\n+      }\n+    }\n+  }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warnings(s):",
    "test_result": "FAIL"
}