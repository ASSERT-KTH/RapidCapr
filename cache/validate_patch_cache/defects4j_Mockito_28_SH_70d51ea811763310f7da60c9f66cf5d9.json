{
    "patch": "Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (mockCandidate == null) {\n    return;\n}\nif (!field.getType().isAssignableFrom(mockCandidate.getClass())) {\n    throw new IllegalArgumentException(String.format(\"Cannot inject mock instance of type '%s' into field '%s' of type '%s'\",\n        mockCandidate.getClass(), field.getName(), field.getType()));\n}\nfield.setAccessible(true);\ntry {\n    Object oldValue = field.get(fieldInstance);\n    if (oldValue != null) {\n        for (Field innerField : oldValue.getClass().getDeclaredFields()) {\n            innerField.setAccessible(true);\n            if (innerField.get(oldValue) == fieldInstance) {\n                innerField.set(oldValue, null);\n            }\n        }\n    }\n    field.set(fieldInstance, mockCandidate);\n    for (Field innerField : field.getType().getDeclaredFields()) {\n        innerField.setAccessible(true);\n        if (innerField.get(mockCandidate) == null) {\n            Object innerCandidate = mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate);\n            if (innerCandidate != null) {\n                injectMockCandidate(field.getType(), mocks, mockCandidate);\n            }\n        }\n    }\n} catch (IllegalAccessException e) {\n    throw new RuntimeException(e);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..1e57944b1 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,41 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (mockCandidate == null) {\n+    return;\n+}\n+if (!field.getType().isAssignableFrom(mockCandidate.getClass())) {\n+    throw new IllegalArgumentException(String.format(\"Cannot inject mock instance of type '%s' into field '%s' of type '%s'\",\n+        mockCandidate.getClass(), field.getName(), field.getType()));\n+}\n+field.setAccessible(true);\n+try {\n+    Object oldValue = field.get(fieldInstance);\n+    if (oldValue != null) {\n+        for (Field innerField : oldValue.getClass().getDeclaredFields()) {\n+            innerField.setAccessible(true);\n+            if (innerField.get(oldValue) == fieldInstance) {\n+                innerField.set(oldValue, null);\n+            }\n+        }\n+    }\n+    field.set(fieldInstance, mockCandidate);\n+    for (Field innerField : field.getType().getDeclaredFields()) {\n+        innerField.setAccessible(true);\n+        if (innerField.get(mockCandidate) == null) {\n+            Object innerCandidate = mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate);\n+            if (innerCandidate != null) {\n+                injectMockCandidate(field.getType(), mocks, mockCandidate);\n+            }\n+        }\n+    }\n+} catch (IllegalAccessException e) {\n+    throw new RuntimeException(e);\n+}\n         }\n     }\n ",
    "result_reason": "java.lang.IllegalArgumentException: Cannot inject mock instance of type 'class org.mockito.internal.configuration.injection.FinalMockCandidateFilter$1' into field 'dependency' of type 'class org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest$Dependency'",
    "test_result": "FAIL"
}