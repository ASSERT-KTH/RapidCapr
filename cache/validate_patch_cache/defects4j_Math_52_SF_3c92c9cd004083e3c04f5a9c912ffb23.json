{
    "patch": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n  // norms computation\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n  double u1u2 = u1.dotProduct(u2);\n  double v1v2 = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n\n  // preliminary computation\n  Vector3D uRef = u1;\n  Vector3D vRef = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k = v1Su1.crossProduct(v2Su2);\n  Vector3D u3 = u1.crossProduct(u2);\n  double c = k.dotProduct(u3);\n  if (c == 0) {\n    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n    // we try other vectors\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n\n    if (c == 0) {\n      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n      k = v2Su2.crossProduct(v3Su3);\n      c = k.dotProduct(u2.crossProduct(u3));\n\n      if (c == 0) {\n        // the (q1, q2, q3) vector is aligned with everything\n        // this is really the identity rotation\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n\n      // we will have to use u2 and v2 to compute the scalar part\n      uRef = u2;\n      vRef = v2;\n\n    }\n\n  } else if (c < 0) {\n    // the rotation sense is reversed; we need to invert v1\n    v1 = new Vector3D(-1, v1);\n    k = v1Su1.crossProduct(v2Su2);\n  }\n\n  // computation of the scalar part\n  double coef = FastMath.sqrt(u3.getNormSq() / (k.getNormSq() * u1u1));\n  double vx = -k.getX() * coef;\n  double vy = -k.getY() * coef;\n  double vz = -k.getZ() * coef;\n  double scalar = FastMath.sqrt(1 / (1 + coef * coef));\n  q0 = scalar;\n  q1 = vx;\n  q2 = vy;\n  q3 = vz;\n\n  // computation of remaining terms\n  double coeff1 = (uRef.dotProduct(vRef)) / u1u1;\n  Vector3D w1 = new Vector3D(coeff1, uRef, -1.0, vRef);\n  Transform t1 = new Transform(u1, v1, uRef, w1);\n  Vector3D u2Prime = t1.transform(u2);\n  Vector3D v2Prime = t1.transform(v2);\n  double coeff2 = (u2Prime.dotProduct(v2Prime)) / u2Prime.getNormSq();\n  Vector3D w2 = new Vector3D(coeff2, u2Prime, -1.0, v2Prime);\n  Transform t2 = new Transform(u2Prime, new Vector3D(0, 0, 1), w2, new Vector3D(0, 0, 0));\n  double qwPlusQz = t1.transform(t2).getQ0();\n  double s1 = -v1.getX() * uRef.getX() - v1.getY() * uRef.getY() - v1.getZ() * uRef.getZ();\n  double s2 = v2.getX() * uRef.getX() + v2.getY() * uRef.getY() + v2.getZ() * uRef.getZ();\n  double s3 = 2 * (s2 * s2 * u1u1 + coeff1 * coeff1 * u2u2 - 2 * coeff1 * s1 * u1u2) / u1u1;\n  double qz = (qwPlusQz - q0 * scalar) / vz;\n  double qn = FastMath.sqrt(qz * qz + 1);\n  double qw = -qz / qn;\n  q3 = qz;\n  q0 = qw;\n  q2 -= s3 * q1 / qn;\n  q1 += s3 * q2 / qn;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b3486..d632307fd 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -310,7 +310,7 @@ public class Rotation implements Serializable {\n    * @param v2 desired image of u2 by the rotation\n    * @exception IllegalArgumentException if the norm of one of the vectors is zero\n    */\n-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n+public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n \n   // norms computation\n   double u1u1 = u1.getNormSq();\n@@ -325,22 +325,22 @@ public class Rotation implements Serializable {\n   v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n \n   // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n-  double u1u2   = u1.dotProduct(u2);\n-  double v1v2   = v1.dotProduct(v2);\n+  double u1u2 = u1.dotProduct(u2);\n+  double v1v2 = v1.dotProduct(v2);\n   double coeffU = u1u2 / u1u1;\n   double coeffV = v1v2 / u1u1;\n-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n-  double alpha  = coeffU - beta * coeffV;\n+  double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n+  double alpha = coeffU - beta * coeffV;\n   v2 = new Vector3D(alpha, v1, beta, v2);\n \n   // preliminary computation\n-  Vector3D uRef  = u1;\n-  Vector3D vRef  = v1;\n+  Vector3D uRef = u1;\n+  Vector3D vRef = v1;\n   Vector3D v1Su1 = v1.subtract(u1);\n   Vector3D v2Su2 = v2.subtract(u2);\n-  Vector3D k     = v1Su1.crossProduct(v2Su2);\n-  Vector3D u3    = u1.crossProduct(u2);\n-  double c       = k.dotProduct(u3);\n+  Vector3D k = v1Su1.crossProduct(v2Su2);\n+  Vector3D u3 = u1.crossProduct(u2);\n+  double c = k.dotProduct(u3);\n   if (c == 0) {\n     // the (q1, q2, q3) vector is close to the (u1, u2) plane\n     // we try other vectors\n@@ -353,8 +353,8 @@ public class Rotation implements Serializable {\n     if (c == 0) {\n       // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n       // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n-      k = v2Su2.crossProduct(v3Su3);;\n-      c = k.dotProduct(u2.crossProduct(u3));;\n+      k = v2Su2.crossProduct(v3Su3);\n+      c = k.dotProduct(u2.crossProduct(u3));\n \n       if (c == 0) {\n         // the (q1, q2, q3) vector is aligned with everything\n@@ -372,8 +372,45 @@ public class Rotation implements Serializable {\n \n     }\n \n+  } else if (c < 0) {\n+    // the rotation sense is reversed; we need to invert v1\n+    v1 = new Vector3D(-1, v1);\n+    k = v1Su1.crossProduct(v2Su2);\n   }\n \n+  // computation of the scalar part\n+  double coef = FastMath.sqrt(u3.getNormSq() / (k.getNormSq() * u1u1));\n+  double vx = -k.getX() * coef;\n+  double vy = -k.getY() * coef;\n+  double vz = -k.getZ() * coef;\n+  double scalar = FastMath.sqrt(1 / (1 + coef * coef));\n+  q0 = scalar;\n+  q1 = vx;\n+  q2 = vy;\n+  q3 = vz;\n+\n+  // computation of remaining terms\n+  double coeff1 = (uRef.dotProduct(vRef)) / u1u1;\n+  Vector3D w1 = new Vector3D(coeff1, uRef, -1.0, vRef);\n+  Transform t1 = new Transform(u1, v1, uRef, w1);\n+  Vector3D u2Prime = t1.transform(u2);\n+  Vector3D v2Prime = t1.transform(v2);\n+  double coeff2 = (u2Prime.dotProduct(v2Prime)) / u2Prime.getNormSq();\n+  Vector3D w2 = new Vector3D(coeff2, u2Prime, -1.0, v2Prime);\n+  Transform t2 = new Transform(u2Prime, new Vector3D(0, 0, 1), w2, new Vector3D(0, 0, 0));\n+  double qwPlusQz = t1.transform(t2).getQ0();\n+  double s1 = -v1.getX() * uRef.getX() - v1.getY() * uRef.getY() - v1.getZ() * uRef.getZ();\n+  double s2 = v2.getX() * uRef.getX() + v2.getY() * uRef.getY() + v2.getZ() * uRef.getZ();\n+  double s3 = 2 * (s2 * s2 * u1u1 + coeff1 * coeff1 * u2u2 - 2 * coeff1 * s1 * u1u2) / u1u1;\n+  double qz = (qwPlusQz - q0 * scalar) / vz;\n+  double qn = FastMath.sqrt(qz * qz + 1);\n+  double qw = -qz / qn;\n+  q3 = qz;\n+  q0 = qw;\n+  q2 -= s3 * q1 / qn;\n+  q1 += s3 * q2 / qn;\n+}\n+\n   // compute the vectorial part\n   c = FastMath.sqrt(c);\n   double inv = 1.0 / (c + c);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}