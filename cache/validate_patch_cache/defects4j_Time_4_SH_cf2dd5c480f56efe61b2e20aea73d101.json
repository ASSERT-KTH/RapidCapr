{
    "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues);\nValidationError validationError = iChronology.validate(newPartial);\nif (validationError != null) {\n    newPartial = new Partial(iChronology, newTypes, iValues);\n    validationError = iChronology.validate(newPartial);\n    if (validationError != null) {\n        throw new IllegalArgumentException(String.format(\"Invalid value for field (type %s): %d\", fieldType.getName(), value), validationError.getCause());\n    }\n    throw new IllegalArgumentException(String.format(\"Invalid value for field (type %s): %d\", fieldType.getName(), value), validationError.getCause());\n}\nreturn newPartial;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..ccb247c5 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,17 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+ValidationError validationError = iChronology.validate(newPartial);\n+if (validationError != null) {\n+    newPartial = new Partial(iChronology, newTypes, iValues);\n+    validationError = iChronology.validate(newPartial);\n+    if (validationError != null) {\n+        throw new IllegalArgumentException(String.format(\"Invalid value for field (type %s): %d\", fieldType.getName(), value), validationError.getCause());\n+    }\n+    throw new IllegalArgumentException(String.format(\"Invalid value for field (type %s): %d\", fieldType.getName(), value), validationError.getCause());\n+}\n+return newPartial;\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}