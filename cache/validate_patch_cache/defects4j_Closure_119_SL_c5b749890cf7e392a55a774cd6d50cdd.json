{
    "patch": "case Token.EXPR_RESULT:\n  // Check for typeof unknown variable\n  if (n.getFirstChild().isTypeOf()) {\n    Node typeOfNode = n.getFirstFirstChild();\n    String unknownName = typeOfNode.getString();\n    if (!isDefined(unknownName, scope)) {\n      warnings.add(JSError.make(null, null, VarCheck.UNDEFINED_NAME_WARNING, unknownName, \"typeof\"));\n    }\n  }\n  break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..25201937 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,16 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+case Token.EXPR_RESULT:\n+  // Check for typeof unknown variable\n+  if (n.getFirstChild().isTypeOf()) {\n+    Node typeOfNode = n.getFirstFirstChild();\n+    String unknownName = typeOfNode.getString();\n+    if (!isDefined(unknownName, scope)) {\n+      warnings.add(JSError.make(null, null, VarCheck.UNDEFINED_NAME_WARNING, unknownName, \"typeof\"));\n+    }\n+  }\n+  break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}