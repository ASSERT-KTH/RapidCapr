{
    "patch": "      if (NodeUtil.isGet(parent) && parent.getParent().getType() == Token.EXPR_RESULT) {\n        Node callee = parent.getFirstChild();\n        // b.c = function() { ... };\n        if (callee.getType() == Token.GETPROP && callee.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        // b.c.d = function() { ... };\n        if (callee.getType() == Token.GETPROP) {\n          Node llhs = callee.getFirstChild();\n          if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..ad194287 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,18 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent) && parent.getParent().getType() == Token.EXPR_RESULT) {\n+        Node callee = parent.getFirstChild();\n+        // b.c = function() { ... };\n+        if (callee.getType() == Token.GETPROP && callee.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        // b.c.d = function() { ... };\n+        if (callee.getType() == Token.GETPROP) {\n+          Node llhs = callee.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}