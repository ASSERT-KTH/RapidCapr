{
    "patch": "            // reset fields in case of parse error\n            if (resetFields) {\n                reset();\n            }\n            if (text != null) {\n                e = new IllegalFieldValueException(\n                    \"Cannot parse \\\"\" + text + '\"', e);\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffset(millis);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..a50cb6ec 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,33 +328,13 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n-        }\n-\n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n+            // reset fields in case of parse error\n+            if (resetFields) {\n+                reset();\n             }\n-        } catch (IllegalFieldValueException e) {\n             if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                e = new IllegalFieldValueException(\n+                    \"Cannot parse \\\"\" + text + '\"', e);\n             }\n             throw e;\n         }\n@@ -362,20 +342,7 @@ public class DateTimeParserBucket {\n         if (iZone == null) {\n             millis -= iOffset;\n         } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n-            }\n-        }\n-        \n-        return millis;\n-    }\n+            int offset = iZone.getOffset(millis);\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}