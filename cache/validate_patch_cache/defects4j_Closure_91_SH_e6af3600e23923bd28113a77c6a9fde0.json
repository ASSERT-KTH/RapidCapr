{
    "patch": "      if (n.getParent() != null && n.getParent().getFirstChild() == n) {\n        // Don't traverse exported functions getting assigned to obj.prototype.method.\n        Node parentNode = parent.getParent();\n        if (NodeUtil.isGet(parentNode) &&\n            parentNode.getFirstChild().getQualifiedName().equals(\"prototype\")) {\n          if (NodeUtil.isGet(parentNode.getParent())) {\n            return false;\n          }\n        }\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node lhsParent = lhs.getParent();\n        if (NodeUtil.isPrototypeProperty(lhsParent)) {\n          return false;\n        }\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n\n      if (parent.getType() == Token.OBJECTLIT &&\n          parent.getParent().getType() == Token.ASSIGN &&\n          parent.isFirstChildOf(parent.getParent())) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isObjectLitKey(parent, n)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (n.getFirstChild() != null &&\n          n.getFirstChild().getType() == Token.GETPROP &&\n          n.getFirstChild().getLastChild().getString().equals(\"prototype\") &&\n          n.getParent().getType() == Token.ASSIGN) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (n.getParent() != null &&\n          NodeUtil.isPrototypeProperty(n.getParent())) {\n        return false;\n      }\n\n      Node gramps = parent.getParent();\n      if (n.getFirstChild() != null &&\n         n.getFirstChild().getType() == Token.GETPROP &&\n         n.getFirstChild().getLastChild().getString().equals(\"prototype\") &&\n         gramps.getType() == Token.ASSIGN &&\n         gramps.getFirstChild().getType() == Token.GETPROP &&\n         gramps.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (gramps != null &&\n          gramps.getType() == Token.ASSIGN &&\n          NodeUtil.isPrototypeProperty(gramps.getFirstChild())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..3fa02836 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,77 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getParent() != null && n.getParent().getFirstChild() == n) {\n+        // Don't traverse exported functions getting assigned to obj.prototype.method.\n+        Node parentNode = parent.getParent();\n+        if (NodeUtil.isGet(parentNode) &&\n+            parentNode.getFirstChild().getQualifiedName().equals(\"prototype\")) {\n+          if (NodeUtil.isGet(parentNode.getParent())) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node lhsParent = lhs.getParent();\n+        if (NodeUtil.isPrototypeProperty(lhsParent)) {\n+          return false;\n+        }\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      if (parent.getType() == Token.OBJECTLIT &&\n+          parent.getParent().getType() == Token.ASSIGN &&\n+          parent.isFirstChildOf(parent.getParent())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isObjectLitKey(parent, n)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getFirstChild() != null &&\n+          n.getFirstChild().getType() == Token.GETPROP &&\n+          n.getFirstChild().getLastChild().getString().equals(\"prototype\") &&\n+          n.getParent().getType() == Token.ASSIGN) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getParent() != null &&\n+          NodeUtil.isPrototypeProperty(n.getParent())) {\n+        return false;\n+      }\n+\n+      Node gramps = parent.getParent();\n+      if (n.getFirstChild() != null &&\n+         n.getFirstChild().getType() == Token.GETPROP &&\n+         n.getFirstChild().getLastChild().getString().equals(\"prototype\") &&\n+         gramps.getType() == Token.ASSIGN &&\n+         gramps.getFirstChild().getType() == Token.GETPROP &&\n+         gramps.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (gramps != null &&\n+          gramps.getType() == Token.ASSIGN &&\n+          NodeUtil.isPrototypeProperty(gramps.getFirstChild())) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}