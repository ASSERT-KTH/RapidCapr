{
    "patch": "public static String getprop(String propName) {\n    String result = null;\n    try {\n        Process process = Runtime.getRuntime().exec(\"getprop \" + propName);\n        InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream());\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader, 1024);\n        result = bufferedReader.readLine();\n        bufferedReader.close();\n        inputStreamReader.close();\n    } catch (IOException e) {\n        Log.e(TAG, \"IOException when getting system property \" + propName, e);\n    }\n    return result;\n}\n\npublic void testGetprop4() {\n    String[] warnings = { \"warning1\", \"warning2\", \"warning3\" };\n    String[] newWarnings = new String[1];\n\n    // add some test properties\n    System.setProperty(\"testGetprop4.prop1\", \"value1\");\n    System.setProperty(\"testGetprop4.prop2\", \"value2\");\n    System.setProperty(\"testGetprop4.prop3\", \"value3\");\n\n    // check for a non-existent property and verify it is null\n    String result = getprop(\"testGetprop4.nonexistentProp\");\n    assertNull(result);\n\n    // check for an existing property and verify value\n    result = getprop(\"testGetprop4.prop1\");\n    assertNotNull(result);\n    assertEquals(\"value1\", result);\n\n    // check for an existing property and verify value trimmed\n    result = getprop(\"testGetprop4.prop2\");\n    assertNotNull(result);\n    assertEquals(\"value2\", result.trim());\n\n    // check for an existing property and verify value parsed as float\n    result = getprop(\"testGetprop4.prop3\");\n    assertNotNull(result);\n    assertEquals(3.0f, Float.parseFloat(result.trim()), 0.0);\n\n    // check for warnings\n    Log.w(TAG, warnings[0]);\n    Log.w(TAG, warnings[1]);\n    Log.w(TAG, warnings[2]);\n\n    // get the warnings and verify\n    try {\n        newWarnings = getWarnings(TAG);\n    } catch (InterruptedException e) {\n        fail(\"InterruptedException occurred while getting warnings: \" + e.getMessage());\n    }\n\n    assertTrue(\"expected a warning\", newWarnings.length > 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..9b273a4f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,63 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String propName) {\n+    String result = null;\n+    try {\n+        Process process = Runtime.getRuntime().exec(\"getprop \" + propName);\n+        InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream());\n+        BufferedReader bufferedReader = new BufferedReader(inputStreamReader, 1024);\n+        result = bufferedReader.readLine();\n+        bufferedReader.close();\n+        inputStreamReader.close();\n+    } catch (IOException e) {\n+        Log.e(TAG, \"IOException when getting system property \" + propName, e);\n+    }\n+    return result;\n+}\n+\n+public void testGetprop4() {\n+    String[] warnings = { \"warning1\", \"warning2\", \"warning3\" };\n+    String[] newWarnings = new String[1];\n+\n+    // add some test properties\n+    System.setProperty(\"testGetprop4.prop1\", \"value1\");\n+    System.setProperty(\"testGetprop4.prop2\", \"value2\");\n+    System.setProperty(\"testGetprop4.prop3\", \"value3\");\n+\n+    // check for a non-existent property and verify it is null\n+    String result = getprop(\"testGetprop4.nonexistentProp\");\n+    assertNull(result);\n+\n+    // check for an existing property and verify value\n+    result = getprop(\"testGetprop4.prop1\");\n+    assertNotNull(result);\n+    assertEquals(\"value1\", result);\n+\n+    // check for an existing property and verify value trimmed\n+    result = getprop(\"testGetprop4.prop2\");\n+    assertNotNull(result);\n+    assertEquals(\"value2\", result.trim());\n+\n+    // check for an existing property and verify value parsed as float\n+    result = getprop(\"testGetprop4.prop3\");\n+    assertNotNull(result);\n+    assertEquals(3.0f, Float.parseFloat(result.trim()), 0.0);\n+\n+    // check for warnings\n+    Log.w(TAG, warnings[0]);\n+    Log.w(TAG, warnings[1]);\n+    Log.w(TAG, warnings[2]);\n+\n+    // get the warnings and verify\n+    try {\n+        newWarnings = getWarnings(TAG);\n+    } catch (InterruptedException e) {\n+        fail(\"InterruptedException occurred while getting warnings: \" + e.getMessage());\n+    }\n+\n+    assertTrue(\"expected a warning\", newWarnings.length > 0);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}