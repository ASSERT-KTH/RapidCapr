{
    "patch": "        if (block.isFunction) {\n          for (int i = ref.getIndex() + 1; i < references.size(); i++) {\n            Reference ref2 = references.get(i);\n            if (ref2.isAssignmentToName() && ref2.getReferencedName().equals(ref.getReferencedName())) {\n              return false;\n            }\n          }\n          break;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..923a75d7 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          for (int i = ref.getIndex() + 1; i < references.size(); i++) {\n+            Reference ref2 = references.get(i);\n+            if (ref2.isAssignmentToName() && ref2.getReferencedName().equals(ref.getReferencedName())) {\n+              return false;\n+            }\n+          }\n+          break;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}