{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = resolveViaRegistry(t, enclosing);\n\n    if (resolved) {\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n      }\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n\n      // if we resolved successfully via registry, we're done\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // try to resolve via properties\n    resolveViaProperties(t, enclosing);\n\n    if (!isResolved() && detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    // call the super method regardless of whether we resolved\n    super.resolveInternal(t, enclosing);\n\n    // finish property continuations if resolution was successful\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n\n    return registry.isLastGeneration() ? getReferencedType() : this;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..9927ce3c 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,36 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n     boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n \n     if (resolved) {\n+      if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+      }\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+\n+      // if we resolved successfully via registry, we're done\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n \n+    // try to resolve via properties\n     resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+\n+    if (!isResolved() && detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n+    // call the super method regardless of whether we resolved\n     super.resolveInternal(t, enclosing);\n+\n+    // finish property continuations if resolution was successful\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}