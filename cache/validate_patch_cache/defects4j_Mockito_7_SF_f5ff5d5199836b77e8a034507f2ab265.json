{
    "patch": "private void readTypeVariables() {\n    for (Type bound : typeVariable.getBounds()) {\n        registerTypeVariablesOn(bound);\n    }\n\n    TypeVariable<?>[] typeParameters = getTypeParametersFor(typeVariable.getGenericDeclaration());\n    if (typeParameters != null) {\n        int index = Arrays.asList(typeParameters).indexOf(typeVariable);\n        if (index != -1) {\n            Type actualTypeArgument = getActualTypeArgumentFor(getClass().getGenericSuperclass(), index);\n            if (actualTypeArgument == null) {\n                actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n                if (actualTypeArgument != null && actualTypeArgument instanceof TypeVariable) {\n                    readTypeVariables((TypeVariable<?>) actualTypeArgument);\n                } else {\n                    registerTypeVariablesOn(actualTypeArgument);\n                }\n            } else if (actualTypeArgument instanceof TypeVariable) {\n                readTypeVariables((TypeVariable<?>) actualTypeArgument);\n            } else {\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        }\n    }\n}\n\nprivate TypeVariable<?>[] getTypeParametersFor(Type genericDeclaration) {\n    if (genericDeclaration instanceof Class) {\n        return ((Class<?>) genericDeclaration).getTypeParameters();\n    } else if (genericDeclaration instanceof ParameterizedType) {\n        return ((Class<?>) ((ParameterizedType) genericDeclaration).getRawType()).getTypeParameters();\n    }\n    return null;\n}\n\nprivate Type getActualTypeArgumentFor(Type genericSuperclass, int index) {\n    if (genericSuperclass instanceof ParameterizedType) {\n        Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass).getActualTypeArguments();\n        if (actualTypeArguments != null && index < actualTypeArguments.length) {\n            Type actualTypeArgument = actualTypeArguments[index];\n            if (actualTypeArgument instanceof TypeVariable) {\n                TypeVariable<?> typeVar = (TypeVariable<?>) actualTypeArgument;\n                Type[] bounds = typeVar.getBounds();\n                if (bounds != null && bounds.length > 0) {\n                    return bounds[0];\n                }\n            }\n            return actualTypeArgument;\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..69fb40129 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,59 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type bound : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(bound);\n+    }\n+\n+    TypeVariable<?>[] typeParameters = getTypeParametersFor(typeVariable.getGenericDeclaration());\n+    if (typeParameters != null) {\n+        int index = Arrays.asList(typeParameters).indexOf(typeVariable);\n+        if (index != -1) {\n+            Type actualTypeArgument = getActualTypeArgumentFor(getClass().getGenericSuperclass(), index);\n+            if (actualTypeArgument == null) {\n+                actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+                if (actualTypeArgument != null && actualTypeArgument instanceof TypeVariable) {\n+                    readTypeVariables((TypeVariable<?>) actualTypeArgument);\n+                } else {\n+                    registerTypeVariablesOn(actualTypeArgument);\n+                }\n+            } else if (actualTypeArgument instanceof TypeVariable) {\n+                readTypeVariables((TypeVariable<?>) actualTypeArgument);\n+            } else {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            }\n+        }\n+    }\n+}\n+\n+private TypeVariable<?>[] getTypeParametersFor(Type genericDeclaration) {\n+    if (genericDeclaration instanceof Class) {\n+        return ((Class<?>) genericDeclaration).getTypeParameters();\n+    } else if (genericDeclaration instanceof ParameterizedType) {\n+        return ((Class<?>) ((ParameterizedType) genericDeclaration).getRawType()).getTypeParameters();\n+    }\n+    return null;\n+}\n+\n+private Type getActualTypeArgumentFor(Type genericSuperclass, int index) {\n+    if (genericSuperclass instanceof ParameterizedType) {\n+        Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass).getActualTypeArguments();\n+        if (actualTypeArguments != null && index < actualTypeArguments.length) {\n+            Type actualTypeArgument = actualTypeArguments[index];\n+            if (actualTypeArgument instanceof TypeVariable) {\n+                TypeVariable<?> typeVar = (TypeVariable<?>) actualTypeArgument;\n+                Type[] bounds = typeVar.getBounds();\n+                if (bounds != null && bounds.length > 0) {\n+                    return bounds[0];\n+                }\n+            }\n+            return actualTypeArgument;\n+        }\n+    }\n+    return null;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: incompatible types: GenericDeclaration cannot be converted to Type",
    "test_result": "ERROR"
}