{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    RealMatrix sqrtM = null;\n    try {\n        final DecompositionSolver solver = new LUDecomposition(m).getSolver();\n        MatrixFactorization matrixFactorization = new CholeskyDecomposition(m);\n        sqrtM = matrixFactorization.getSolver().getInverse().multiply(m);\n        sqrtM = solver.solve(sqrtM);\n        matrixFactorization = new CholeskyDecomposition(sqrtM);\n        sqrtM = matrixFactorization.getSolver().getInverse().multiply(sqrtM);\n    } catch (Exception e) {\n        // handle exception\n    }\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a449fdde3 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    RealMatrix sqrtM = null;\n+    try {\n+        final DecompositionSolver solver = new LUDecomposition(m).getSolver();\n+        MatrixFactorization matrixFactorization = new CholeskyDecomposition(m);\n+        sqrtM = matrixFactorization.getSolver().getInverse().multiply(m);\n+        sqrtM = solver.solve(sqrtM);\n+        matrixFactorization = new CholeskyDecomposition(sqrtM);\n+        sqrtM = matrixFactorization.getSolver().getInverse().multiply(sqrtM);\n+    } catch (Exception e) {\n+        // handle exception\n     }\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}