{
    "patch": "                // offsetLocal must be the old (first estimate)\n                // and offsetAdjusted must be the new (second estimate)\n                if (offsetLocal < offsetAdjusted) {\n                    // we want the instant to be after the discontinuity\n                    // add one millisecond as we are dealing with instants\n                    return offsetLocal;\n                } else if (offsetLocal > offsetAdjusted) {\n                    // we want the instant to be before the discontinuity\n                    // subtract one millisecond as we are dealing with instants\n                    return offsetAdjusted;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0507ff06 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,17 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // offsetLocal must be the old (first estimate)\n+                // and offsetAdjusted must be the new (second estimate)\n+                if (offsetLocal < offsetAdjusted) {\n+                    // we want the instant to be after the discontinuity\n+                    // add one millisecond as we are dealing with instants\n+                    return offsetLocal;\n+                } else if (offsetLocal > offsetAdjusted) {\n+                    // we want the instant to be before the discontinuity\n+                    // subtract one millisecond as we are dealing with instants\n+                    return offsetAdjusted;\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}