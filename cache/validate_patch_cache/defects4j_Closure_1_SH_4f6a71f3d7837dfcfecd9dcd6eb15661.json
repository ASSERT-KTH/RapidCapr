{
    "patch": "My apologies for the mistake. The correct hunk for the infill location should be:\n\n``` java\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction(), function);\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function, fnScope);\n\n    if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node lastArg = argList.getLastChild();\n\n        while (lastArg != null && !NodeUtil.isVarArgsNode(lastArg)) {\n          Var var = fnScope.getVar(lastArg.getString());\n\n          if (!referenced.contains(var)) {\n            Node prev = lastArg.getPrevious();\n            argList.removeChild(lastArg);\n\n            // In some cases, fixing the arglist can cause a parameter to be removed from\n            // a function definition, which can cause confusion later on, what with the length\n            // property possibly changing (depending, of course, on how you check for length).\n            // Consider this trivial example:\n            // var g=function(a,b,c) { if (a) { b=42; }; alert(arguments.length); }\n            // alert(g.length);\n            // If we simply remove arg 'c' in the usual way (if unreferenced), we'll see \"2,3\"\n            // printed out, instead of the expected \"3,3\". Emscripten has issues seen with it's\n            // woutput if we report code change on each removal (issue 962). Instead, we report\n            // only for removal of unreferenced function parameters and leave the argcount\n            // calculation to the final pass over in CodeGenerator.\n            if (compiler.getLifeCycleStage().isNormalized()) {\n              compiler.reportCodeChange();\n            }\n\n            lastArg = prev;\n          } else {\n            break;\n          }\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n```",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..21891f52 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,58 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+My apologies for the mistake. The correct hunk for the infill location should be:\n+\n+``` java\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction(), function);\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+        // The parameters object literal setters can not be removed.\n+        return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function, fnScope);\n+\n+    if (!modifyCallers) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        Node lastArg = argList.getLastChild();\n+\n+        while (lastArg != null && !NodeUtil.isVarArgsNode(lastArg)) {\n+          Var var = fnScope.getVar(lastArg.getString());\n+\n+          if (!referenced.contains(var)) {\n+            Node prev = lastArg.getPrevious();\n+            argList.removeChild(lastArg);\n+\n+            // In some cases, fixing the arglist can cause a parameter to be removed from\n+            // a function definition, which can cause confusion later on, what with the length\n+            // property possibly changing (depending, of course, on how you check for length).\n+            // Consider this trivial example:\n+            // var g=function(a,b,c) { if (a) { b=42; }; alert(arguments.length); }\n+            // alert(g.length);\n+            // If we simply remove arg 'c' in the usual way (if unreferenced), we'll see \"2,3\"\n+            // printed out, instead of the expected \"3,3\". Emscripten has issues seen with it's\n+            // woutput if we report code change on each removal (issue 962). Instead, we report\n+            // only for removal of unreferenced function parameters and leave the argcount\n+            // calculation to the final pass over in CodeGenerator.\n+            if (compiler.getLifeCycleStage().isNormalized()) {\n+              compiler.reportCodeChange();\n+            }\n+\n+            lastArg = prev;\n+          } else {\n+            break;\n+          }\n+        }\n+    } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+```\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}