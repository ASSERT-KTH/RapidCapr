{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      boolean isPrototypeAssignment = false;\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node grandparent = parent.getParent();\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\") &&\n            grandparent != null) {\n          switch (grandparent.getType()) {\n            case Token.CALL:\n              isPrototypeAssignment =\n                  grandparent.getFirstChild().getType() == Token.GETPROP &&\n                  grandparent.getLastChild().getType() == Token.NAME &&\n                  grandparent.getLastChild().getString().equals(\"apply\");\n              break;\n            case Token.NAME:\n              isPrototypeAssignment =\n                  grandparent.getString().equals(\"Object.defineProperties\");\n              break;\n            case Token.OBJECTLIT:\n              isPrototypeAssignment = !parent.hasChildren();\n              break;\n            default:\n              break;\n          }\n        }\n      }\n      if (isPrototypeAssignment) {\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..8ba76644 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,36 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      boolean isPrototypeAssignment = false;\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node grandparent = parent.getParent();\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\") &&\n+            grandparent != null) {\n+          switch (grandparent.getType()) {\n+            case Token.CALL:\n+              isPrototypeAssignment =\n+                  grandparent.getFirstChild().getType() == Token.GETPROP &&\n+                  grandparent.getLastChild().getType() == Token.NAME &&\n+                  grandparent.getLastChild().getString().equals(\"apply\");\n+              break;\n+            case Token.NAME:\n+              isPrototypeAssignment =\n+                  grandparent.getString().equals(\"Object.defineProperties\");\n+              break;\n+            case Token.OBJECTLIT:\n+              isPrototypeAssignment = !parent.hasChildren();\n+              break;\n+            default:\n+              break;\n+          }\n+        }\n+      }\n+      if (isPrototypeAssignment) {\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 110 expected:<0> but was:<1>",
    "test_result": "FAIL"
}