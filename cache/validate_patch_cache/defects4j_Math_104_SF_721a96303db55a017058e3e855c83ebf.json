{
    "patch": "public static double regularizedGamma(double a, double x){\n    double eps = 10e-15;\n    double gln = gammaLn(a);\n    double ap = a;\n    double del = 1.0/a;\n    double sum = del;\n    double lnSum = Math.log(sum);\n    for(int n=1; n<=1000; n++){\n        ++ap;\n        del *= x / ap;\n        sum += del;\n        double newLnSum = Math.log(sum);\n        if(Math.abs(newLnSum - lnSum) < eps* Math.abs(newLnSum)){\n            return Math.exp(-x + a*Math.log(x) - gln) * sum;\n        }\n        lnSum = newLnSum;\n    }\n    throw new RuntimeException(\"regularized gamma failed to converge\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..13c9292d8 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,25 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x){\n+    double eps = 10e-15;\n+    double gln = gammaLn(a);\n+    double ap = a;\n+    double del = 1.0/a;\n+    double sum = del;\n+    double lnSum = Math.log(sum);\n+    for(int n=1; n<=1000; n++){\n+        ++ap;\n+        del *= x / ap;\n+        sum += del;\n+        double newLnSum = Math.log(sum);\n+        if(Math.abs(newLnSum - lnSum) < eps* Math.abs(newLnSum)){\n+            return Math.exp(-x + a*Math.log(x) - gln) * sum;\n+        }\n+        lnSum = newLnSum;\n+    }\n+    throw new RuntimeException(\"regularized gamma failed to converge\");\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}