{
    "patch": "Set<String> referenced = fnScope.getReferencedNames();\nSet<String> declared = fnScope.getDeclaredNames();\n// use LinkedHashSet to maintain order of arguments\nLinkedHashSet<Node> unremovedArgs = NodeUtil.getAllFunctionArgs(getFunctionStatement(fnScope)).stream()\n    .filter(node -> declared.contains(node.getString()) || referenced.contains(node.getString()))\n    .collect(Collectors.toCollection(LinkedHashSet::new));\n\nNode firstUnusedArg = null;\nfor (Node arg : unremovedArgs) {\n  if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n    Node paramNode = arg.isDefaultValue() ? arg.getFirstChild() : arg;\n    if (firstUnusedArg == null) {\n      // Save the first unused argument so that we can update Function.prototype.length.\n      firstUnusedArg = paramNode;\n    } else {\n      // There is more than one unused argument, so we should keep updating Function.prototype.length.\n      firstUnusedArg = null;\n    }\n    paramNode.getParent().removeChild(paramNode);\n    compiler.reportCodeChange();\n  }\n}\n\n// If there are unused parameters, then update Function.prototype.length to exclude them.\nif (firstUnusedArg != null) {\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n  Node lengthProp = IR.getprop(IR.name(\"Function\"), IR.string(\"length\"));\n  Node getLength = IR.getprop(function.cloneTree(), IR.string(\"length\"));\n  Node callGetLength = new Node(Token.CALL, getLength);\n  function.getParent().replaceChild(function, IR.call(lengthProp, callGetLength, IR.number(unremovedArgs.size())));\n  compiler.reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8392aa5c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Set<String> referenced = fnScope.getReferencedNames();\n+Set<String> declared = fnScope.getDeclaredNames();\n+// use LinkedHashSet to maintain order of arguments\n+LinkedHashSet<Node> unremovedArgs = NodeUtil.getAllFunctionArgs(getFunctionStatement(fnScope)).stream()\n+    .filter(node -> declared.contains(node.getString()) || referenced.contains(node.getString()))\n+    .collect(Collectors.toCollection(LinkedHashSet::new));\n+\n+Node firstUnusedArg = null;\n+for (Node arg : unremovedArgs) {\n+  if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+    Node paramNode = arg.isDefaultValue() ? arg.getFirstChild() : arg;\n+    if (firstUnusedArg == null) {\n+      // Save the first unused argument so that we can update Function.prototype.length.\n+      firstUnusedArg = paramNode;\n+    } else {\n+      // There is more than one unused argument, so we should keep updating Function.prototype.length.\n+      firstUnusedArg = null;\n+    }\n+    paramNode.getParent().removeChild(paramNode);\n+    compiler.reportCodeChange();\n+  }\n+}\n+\n+// If there are unused parameters, then update Function.prototype.length to exclude them.\n+if (firstUnusedArg != null) {\n+  Node function = fnScope.getRootNode();\n+  Preconditions.checkState(function.isFunction());\n+  Node lengthProp = IR.getprop(IR.name(\"Function\"), IR.string(\"length\"));\n+  Node getLength = IR.getprop(function.cloneTree(), IR.string(\"length\"));\n+  Node callGetLength = new Node(Token.CALL, getLength);\n+  function.getParent().replaceChild(function, IR.call(lengthProp, callGetLength, IR.number(unremovedArgs.size())));\n+  compiler.reportCodeChange();\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}