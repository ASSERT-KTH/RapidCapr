{
    "patch": "public static String escapeISO8859_1(String s) {\n   if (s == null) {\n      return null;\n   }\n\n   StringBuilder sb = new StringBuilder();\n   for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      switch (c) {\n         case '\\n':\n            sb.append(\"\\\\n\");\n            break;\n         case '\\r':\n            sb.append(\"\\\\r\");\n            break;\n         case '\\t':\n            sb.append(\"\\\\t\");\n            break;\n         case '\\f':\n            sb.append(\"\\\\f\");\n            break;\n         case '\\\\':\n            sb.append(\"\\\\\\\\\");\n            break;\n         case '\\\"':\n            sb.append(\"\\\\\\\"\");\n            break;\n         case '\\'':\n            sb.append(\"\\\\\\'\");\n            break;\n         default:\n            if (c < 32 || c > 126) {\n               sb.append(\"\\\\u\");\n               String hex = Integer.toHexString(c);\n               int zeros = 4 - hex.length();\n               for (int j = 0; j < zeros; j++) {\n                  sb.append('0');\n               }\n               sb.append(hex);\n            } else {\n               sb.append(c);\n            }\n            break;\n      }\n   }\n\n   String escaped = sb.toString();\n   boolean success = escaped.equals(s);\n   assertTrue(\"Input String: \"+s+\" escaped String: \"+escaped,success);\n   return escaped;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..de1eabe2 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,57 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escapeISO8859_1(String s) {\n+   if (s == null) {\n+      return null;\n+   }\n+\n+   StringBuilder sb = new StringBuilder();\n+   for (int i = 0; i < s.length(); i++) {\n+      char c = s.charAt(i);\n+      switch (c) {\n+         case '\\n':\n+            sb.append(\"\\\\n\");\n+            break;\n+         case '\\r':\n+            sb.append(\"\\\\r\");\n+            break;\n+         case '\\t':\n+            sb.append(\"\\\\t\");\n+            break;\n+         case '\\f':\n+            sb.append(\"\\\\f\");\n+            break;\n+         case '\\\\':\n+            sb.append(\"\\\\\\\\\");\n+            break;\n+         case '\\\"':\n+            sb.append(\"\\\\\\\"\");\n+            break;\n+         case '\\'':\n+            sb.append(\"\\\\\\'\");\n+            break;\n+         default:\n+            if (c < 32 || c > 126) {\n+               sb.append(\"\\\\u\");\n+               String hex = Integer.toHexString(c);\n+               int zeros = 4 - hex.length();\n+               for (int j = 0; j < zeros; j++) {\n+                  sb.append('0');\n+               }\n+               sb.append(hex);\n+            } else {\n+               sb.append(c);\n+            }\n+            break;\n+      }\n+   }\n+\n+   String escaped = sb.toString();\n+   boolean success = escaped.equals(s);\n+   assertTrue(\"Input String: \"+s+\" escaped String: \"+escaped,success);\n+   return escaped;\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}