{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    switch (n.getType()) {\n        case Token.FUNCTION:\n        case Token.DO:\n            return true;\n        case Token.BLOCK:\n            int numChildren = 0;\n            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n                if (!isOneExactlyFunctionOrDo(child)) {\n                    return false;\n                }\n                numChildren++;\n            }\n            return numChildren == 1;\n        case Token.LABEL:\n            Node labeledStatement = n.getFirstChild().getNext();\n            if (labeledStatement.getType() == Token.EMPTY) {\n                labeledStatement = labeledStatement.getNext();\n            }\n            return isOneExactlyFunctionOrDo(labeledStatement);\n        default:\n            return false;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..27c949d9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,30 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    switch (n.getType()) {\n+        case Token.FUNCTION:\n+        case Token.DO:\n+            return true;\n+        case Token.BLOCK:\n+            int numChildren = 0;\n+            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+                if (!isOneExactlyFunctionOrDo(child)) {\n+                    return false;\n+                }\n+                numChildren++;\n+            }\n+            return numChildren == 1;\n+        case Token.LABEL:\n+            Node labeledStatement = n.getFirstChild().getNext();\n+            if (labeledStatement.getType() == Token.EMPTY) {\n+                labeledStatement = labeledStatement.getNext();\n+            }\n+            return isOneExactlyFunctionOrDo(labeledStatement);\n+        default:\n+            return false;\n+    }\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}