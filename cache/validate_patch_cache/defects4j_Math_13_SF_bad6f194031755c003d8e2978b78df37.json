{
    "patch": "            final RealMatrix eigenVectors = dec.getV();\n            final RealVector eigenValues = dec.getRealEigenvalues();\n            final int n = eigenValues.getDimension();\n            final RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n            for (int i = 0; i < n; i++) {\n                RealVector evI = eigenVectors.getColumnVector(i);\n                RealMatrix outerI = evI.outerProduct(evI);\n                double ev = eigenValues.getEntry(i);\n                RealMatrix sqrtI = outerI.scalarMultiply(FastMath.sqrt(ev));\n                sqrt.add(sqrtI);\n            }\n            return sqrt;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ed83d5a97 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+            final RealMatrix eigenVectors = dec.getV();\n+            final RealVector eigenValues = dec.getRealEigenvalues();\n+            final int n = eigenValues.getDimension();\n+            final RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n+            for (int i = 0; i < n; i++) {\n+                RealVector evI = eigenVectors.getColumnVector(i);\n+                RealMatrix outerI = evI.outerProduct(evI);\n+                double ev = eigenValues.getEntry(i);\n+                RealMatrix sqrtI = outerI.scalarMultiply(FastMath.sqrt(ev));\n+                sqrt.add(sqrtI);\n+            }\n+            return sqrt;\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}