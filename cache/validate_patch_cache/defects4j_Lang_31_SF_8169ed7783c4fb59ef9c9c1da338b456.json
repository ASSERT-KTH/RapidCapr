{
    "patch": "public static boolean containsAny(CharSequence sequence, char[] searchChars) {\n    if (sequence == null || searchChars == null) {\n        return false;\n    }\n    int sequenceLength = sequence.length();\n    int searchLength = searchChars.length;\n    int firstSupplementaryCharCount = Character.isSupplementaryCodePoint(searchChars[0]) ? 2 : 1;\n    for (int i = 0; i < sequenceLength; i++) {\n        int codepoint = Character.codePointAt(sequence, i);\n        if (Character.isSupplementaryCodePoint(codepoint)) {\n            i++;\n        }\n        for (int j = 0; j < searchLength; j += firstSupplementaryCharCount) {\n            int searchCodepoint = Character.codePointAt(searchChars, j);\n            if (Character.isSupplementaryCodePoint(searchCodepoint)) {\n                if (i + 1 < sequenceLength && Character.codePointAt(sequence, i + 1) == searchCodepoint) {\n                    return true;\n                }\n            } else {\n                if (codepoint == searchCodepoint) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..dbc1135d 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,33 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence sequence, char[] searchChars) {\n+    if (sequence == null || searchChars == null) {\n+        return false;\n+    }\n+    int sequenceLength = sequence.length();\n+    int searchLength = searchChars.length;\n+    int firstSupplementaryCharCount = Character.isSupplementaryCodePoint(searchChars[0]) ? 2 : 1;\n+    for (int i = 0; i < sequenceLength; i++) {\n+        int codepoint = Character.codePointAt(sequence, i);\n+        if (Character.isSupplementaryCodePoint(codepoint)) {\n+            i++;\n+        }\n+        for (int j = 0; j < searchLength; j += firstSupplementaryCharCount) {\n+            int searchCodepoint = Character.codePointAt(searchChars, j);\n+            if (Character.isSupplementaryCodePoint(searchCodepoint)) {\n+                if (i + 1 < sequenceLength && Character.codePointAt(sequence, i + 1) == searchCodepoint) {\n+                    return true;\n+                }\n+            } else {\n+                if (codepoint == searchCodepoint) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}