{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              List<JSType> typesToUnion = new ArrayList<>();\n              typesToUnion.add(propType);\n              typesToUnion.add(getNativeType(VOID_TYPE));\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(getRegistry(), typesToUnion);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..3f1887d9 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1126,13 +1126,15 @@ class TypeInference\n           if (!objType.isPropertyTypeDeclared(prop)) {\n             JSType typeToInfer = propType;\n             if (!objType.hasProperty(prop)) {\n+              List<JSType> typesToUnion = new ArrayList<>();\n+              typesToUnion.add(propType);\n+              typesToUnion.add(getNativeType(VOID_TYPE));\n               typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+                  getNativeType(VOID_TYPE).getLeastSupertype(getRegistry(), typesToUnion);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}