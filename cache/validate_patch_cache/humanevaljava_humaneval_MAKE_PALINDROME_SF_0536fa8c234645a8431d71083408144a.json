{
    "patch": "public static String make_palindrome(String str) {\n    if (str.length() == 0)\n        return \"\";\n\n    int start = 0;\n    while (start < str.length() && !is_palindrome(str.substring(start))) {\n        start++;\n    }\n\n    StringBuilder sb = new StringBuilder(str);\n    if (start == str.length()) {\n        sb.reverse().delete(0, start);\n    } else {\n        sb.append(new StringBuilder(str.substring(0, start)).reverse().toString());\n    }\n\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/MAKE_PALINDROME.java b/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\nindex 05f44d8..35117ea 100644\n--- a/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\n+++ b/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\n@@ -9,17 +9,22 @@ public class MAKE_PALINDROME {\n         return true;\n     }\n \n-    public static String make_palindrome(String str){\n-        if (str.length() == 0)\n-            return \"\";\n+public static String make_palindrome(String str) {\n+    if (str.length() == 0)\n+        return \"\";\n \n-        int beginning_of_suffix = 0;\n-        while (! is_palindrome(str.substring(beginning_of_suffix))){\n-            beginning_of_suffix += 1;\n-        }\n-        \n-        String result = str;\n-        result += str.substring(0, beginning_of_suffix);\n-        return result;\n+    int start = 0;\n+    while (start < str.length() && !is_palindrome(str.substring(start))) {\n+        start++;\n+    }\n+\n+    StringBuilder sb = new StringBuilder(str);\n+    if (start == str.length()) {\n+        sb.reverse().delete(0, start);\n+    } else {\n+        sb.append(new StringBuilder(str.substring(0, start)).reverse().toString());\n     }\n+\n+    return sb.toString();\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}