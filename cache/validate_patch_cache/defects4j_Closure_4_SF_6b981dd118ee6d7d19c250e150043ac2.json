{
    "patch": "JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosing) {\n  JSType resolvedType;\n  boolean resolved = false;\n  boolean cycleDetected = false;\n  \n  do {\n    // If a cycle was detected, handle the cycle and try again.\n    if (cycleDetected) {\n      handleTypeCycle(errorReporter);\n    }\n    \n    // Try to resolve via the registry.\n    resolved = resolveViaRegistry(errorReporter, enclosing);\n    if (resolved) {\n      super.resolveInternal(errorReporter, enclosing);\n      finishPropertyContinuations();\n      resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n      break;\n    }\n    \n    // Try to resolve via properties.\n    resolveViaProperties(errorReporter, enclosing);\n    resolved = isResolved();\n    \n    // Check if an implicit prototype cycle was detected.\n    cycleDetected = detectImplicitPrototypeCycle();\n  } while (cycleDetected || !resolved);\n  \n  // If we fell out of the loop without resolving the type, report an error.\n  if (!resolved) {\n    errorReporter.error(\"Could not resolve type.\");\n    return this;\n  }\n  \n  super.resolveInternal(errorReporter, enclosing);\n  finishPropertyContinuations();\n  \n  resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n  return resolvedType;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..cf650584 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,46 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosing) {\n+  JSType resolvedType;\n+  boolean resolved = false;\n+  boolean cycleDetected = false;\n+  \n+  do {\n+    // If a cycle was detected, handle the cycle and try again.\n+    if (cycleDetected) {\n+      handleTypeCycle(errorReporter);\n     }\n-\n+    \n+    // Try to resolve via the registry.\n+    resolved = resolveViaRegistry(errorReporter, enclosing);\n     if (resolved) {\n-      super.resolveInternal(t, enclosing);\n+      super.resolveInternal(errorReporter, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+      resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n+      break;\n     }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    \n+    // Try to resolve via properties.\n+    resolveViaProperties(errorReporter, enclosing);\n+    resolved = isResolved();\n+    \n+    // Check if an implicit prototype cycle was detected.\n+    cycleDetected = detectImplicitPrototypeCycle();\n+  } while (cycleDetected || !resolved);\n+  \n+  // If we fell out of the loop without resolving the type, report an error.\n+  if (!resolved) {\n+    errorReporter.error(\"Could not resolve type.\");\n+    return this;\n   }\n+  \n+  super.resolveInternal(errorReporter, enclosing);\n+  finishPropertyContinuations();\n+  \n+  resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n+  return resolvedType;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: method error in interface ErrorReporter cannot be applied to given types;",
    "test_result": "ERROR"
}