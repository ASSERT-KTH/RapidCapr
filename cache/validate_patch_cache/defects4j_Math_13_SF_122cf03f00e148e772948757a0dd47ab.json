{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition eigen = new EigenDecomposition(m);\n\n    if (!eigen.getEigenvalues().isDiagonal()) {\n        throw new IllegalArgumentException(\"Matrix must be diagonalizable\");\n    }\n\n    RealMatrix eigenvalues = eigen.getD();\n    int size = m.getRowDimension();\n    RealMatrix sqrtEigenvalues = MatrixUtils.createRealIdentityMatrix(size);\n\n    for (int i = 0; i < size; i++) {\n        double eigenvalue = eigenvalues.getEntry(i, i);\n        if (eigenvalue < 0) {\n            throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n        } else if (eigenvalue > 0) {\n            sqrtEigenvalues.setEntry(i, i, Math.sqrt(eigenvalue));\n        }\n    }\n\n    RealMatrix eigenVectors = eigen.getV();\n    RealMatrix eigenVectorsInv = new LUDecomposition(eigenVectors).getSolver().getInverse();\n\n    return eigenVectors.multiply(sqrtEigenvalues).multiply(eigenVectorsInv);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..60caabfcf 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition eigen = new EigenDecomposition(m);\n+\n+    if (!eigen.getEigenvalues().isDiagonal()) {\n+        throw new IllegalArgumentException(\"Matrix must be diagonalizable\");\n+    }\n+\n+    RealMatrix eigenvalues = eigen.getD();\n+    int size = m.getRowDimension();\n+    RealMatrix sqrtEigenvalues = MatrixUtils.createRealIdentityMatrix(size);\n+\n+    for (int i = 0; i < size; i++) {\n+        double eigenvalue = eigenvalues.getEntry(i, i);\n+        if (eigenvalue < 0) {\n+            throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n+        } else if (eigenvalue > 0) {\n+            sqrtEigenvalues.setEntry(i, i, Math.sqrt(eigenvalue));\n+        }\n     }\n+\n+    RealMatrix eigenVectors = eigen.getV();\n+    RealMatrix eigenVectorsInv = new LUDecomposition(eigenVectors).getSolver().getInverse();\n+\n+    return eigenVectors.multiply(sqrtEigenvalues).multiply(eigenVectorsInv);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}