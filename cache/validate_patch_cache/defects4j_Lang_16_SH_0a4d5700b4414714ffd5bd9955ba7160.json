{
    "patch": "        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            try {\n                return createInteger(Integer.parseInt(str.substring(2), 16));\n            } catch (NumberFormatException e) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else if (StringUtils.isNumeric(str)) {\n            char lastChar = str.charAt(str.length() - 1);\n            try {\n                if (lastChar == 'l' || lastChar == 'L') {\n                    return createLong(str);\n                } else if (lastChar == 'f' || lastChar == 'F') {\n                    return createFloat(str);\n                } else if (lastChar == 'd' || lastChar == 'D') {\n                    return createDouble(str);\n                } else {\n                    return createInteger(str);\n                }\n            } catch (NumberFormatException e) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else {\n            if (StringUtils.isBlank(str)) {\n                throw new NumberFormatException(\"A blank string is not a valid number\");\n            }\n            if (str.startsWith(\"--\")) {\n                return null;\n            }\n            char lastChar = str.charAt(str.length() - 1);\n            String mant;\n            String dec;\n            String exp;\n            int decPos = str.indexOf('.');\n            int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n\n            if (decPos > -1) {\n\n                if (expPos > -1) {\n                    if (expPos < decPos || expPos > str.length()) {\n                        throw new NumberFormatException(str + \" is not a valid number.\");\n                    }\n                    dec = str.substring(decPos + 1, expPos);\n                } else {\n                    dec = str.substring(decPos + 1);\n                }\n                mant = str.substring(0, decPos);\n            } else {\n                if (expPos > -1) {\n                    if (expPos > str.length()) {\n                        throw new NumberFormatException(str + \" is not a valid number.\");\n                    }\n                    mant = str.substring(0, expPos);\n                } else {\n                    mant = str;\n                }\n                dec = null;\n            }\n            if (!Character.isDigit(lastChar) && lastChar != '.') {\n                if (expPos > -1 && expPos < str.length() - 1) {\n                    exp = str.substring(expPos + 1, str.length() - 1);\n                } else {\n                    exp = null;\n                }\n\n                String numeric = str.substring(0, str.length() - 1);\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                switch (lastChar) {\n                    case 'l':\n                    case 'L':\n                        if (dec == null && exp == null &&\n                                (numeric.charAt(0) == '-' &&\n                                        isDigits(numeric.substring(1)) ||\n                                        isDigits(numeric))) {\n                            try {\n                                return createLong(numeric);\n                            } catch (NumberFormatException nfe) { // NOPMD\n                                // Too big for a long\n                            }\n                            return createBigInteger(numeric);\n\n                        }\n                        throw new NumberFormatException(str + \" is not a valid number.\");\n                    case 'f':\n                    case 'F':\n                        try {\n                            Float f = NumberUtils.createFloat(numeric);\n                            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                                return f;\n                            }\n\n                        } catch (NumberFormatException nfe) { // NOPMD\n                            // ignore the bad number\n                        }\n                        //$FALL-THROUGH$\n                    case 'd':\n                    case 'D':\n                        try {\n                            Double d = NumberUtils.createDouble(numeric);\n                            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                                return d;\n                            }\n                        } catch (NumberFormatException nfe) { // NOPMD\n                            // ignore the bad number\n                        }\n                        try {\n                            return createBigDecimal(numeric);\n                        } catch (NumberFormatException e) { // NOPMD\n                            // ignore the bad number\n                        }\n                        //$FALL-THROUGH$\n                    default:\n                        throw new NumberFormatException(str + \" is not a valid number.\");\n\n                }\n            } else {\n\n                if (expPos > -1 && expPos < str.length() - 1) {\n                    exp = str.substring(expPos + 1, str.length());\n                } else {\n                    exp = null;\n                }\n                if (dec == null && exp == null) {\n                    try {\n                        return createInteger(str);\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        return createLong(str);\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    return createBigInteger(str);\n\n                } else {\n                    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                    try {\n                        Float f = createFloat(str);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        Double d = createDouble(str);\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n\n                    return createBigDecimal(str);\n\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 882358f2..195ea75d 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -456,6 +456,163 @@ public class NumberUtils {\n             return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+            try {\n+                return createInteger(Integer.parseInt(str.substring(2), 16));\n+            } catch (NumberFormatException e) {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+            }\n+        } else if (StringUtils.isNumeric(str)) {\n+            char lastChar = str.charAt(str.length() - 1);\n+            try {\n+                if (lastChar == 'l' || lastChar == 'L') {\n+                    return createLong(str);\n+                } else if (lastChar == 'f' || lastChar == 'F') {\n+                    return createFloat(str);\n+                } else if (lastChar == 'd' || lastChar == 'D') {\n+                    return createDouble(str);\n+                } else {\n+                    return createInteger(str);\n+                }\n+            } catch (NumberFormatException e) {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+            }\n+        } else {\n+            if (StringUtils.isBlank(str)) {\n+                throw new NumberFormatException(\"A blank string is not a valid number\");\n+            }\n+            if (str.startsWith(\"--\")) {\n+                return null;\n+            }\n+            char lastChar = str.charAt(str.length() - 1);\n+            String mant;\n+            String dec;\n+            String exp;\n+            int decPos = str.indexOf('.');\n+            int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n+\n+            if (decPos > -1) {\n+\n+                if (expPos > -1) {\n+                    if (expPos < decPos || expPos > str.length()) {\n+                        throw new NumberFormatException(str + \" is not a valid number.\");\n+                    }\n+                    dec = str.substring(decPos + 1, expPos);\n+                } else {\n+                    dec = str.substring(decPos + 1);\n+                }\n+                mant = str.substring(0, decPos);\n+            } else {\n+                if (expPos > -1) {\n+                    if (expPos > str.length()) {\n+                        throw new NumberFormatException(str + \" is not a valid number.\");\n+                    }\n+                    mant = str.substring(0, expPos);\n+                } else {\n+                    mant = str;\n+                }\n+                dec = null;\n+            }\n+            if (!Character.isDigit(lastChar) && lastChar != '.') {\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+                    exp = str.substring(expPos + 1, str.length() - 1);\n+                } else {\n+                    exp = null;\n+                }\n+\n+                String numeric = str.substring(0, str.length() - 1);\n+                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+                switch (lastChar) {\n+                    case 'l':\n+                    case 'L':\n+                        if (dec == null && exp == null &&\n+                                (numeric.charAt(0) == '-' &&\n+                                        isDigits(numeric.substring(1)) ||\n+                                        isDigits(numeric))) {\n+                            try {\n+                                return createLong(numeric);\n+                            } catch (NumberFormatException nfe) { // NOPMD\n+                                // Too big for a long\n+                            }\n+                            return createBigInteger(numeric);\n+\n+                        }\n+                        throw new NumberFormatException(str + \" is not a valid number.\");\n+                    case 'f':\n+                    case 'F':\n+                        try {\n+                            Float f = NumberUtils.createFloat(numeric);\n+                            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                                return f;\n+                            }\n+\n+                        } catch (NumberFormatException nfe) { // NOPMD\n+                            // ignore the bad number\n+                        }\n+                        //$FALL-THROUGH$\n+                    case 'd':\n+                    case 'D':\n+                        try {\n+                            Double d = NumberUtils.createDouble(numeric);\n+                            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                                return d;\n+                            }\n+                        } catch (NumberFormatException nfe) { // NOPMD\n+                            // ignore the bad number\n+                        }\n+                        try {\n+                            return createBigDecimal(numeric);\n+                        } catch (NumberFormatException e) { // NOPMD\n+                            // ignore the bad number\n+                        }\n+                        //$FALL-THROUGH$\n+                    default:\n+                        throw new NumberFormatException(str + \" is not a valid number.\");\n+\n+                }\n+            } else {\n+\n+                if (expPos > -1 && expPos < str.length() - 1) {\n+                    exp = str.substring(expPos + 1, str.length());\n+                } else {\n+                    exp = null;\n+                }\n+                if (dec == null && exp == null) {\n+                    try {\n+                        return createInteger(str);\n+                    } catch (NumberFormatException nfe) { // NOPMD\n+                        // ignore the bad number\n+                    }\n+                    try {\n+                        return createLong(str);\n+                    } catch (NumberFormatException nfe) { // NOPMD\n+                        // ignore the bad number\n+                    }\n+                    return createBigInteger(str);\n+\n+                } else {\n+                    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+                    try {\n+                        Float f = createFloat(str);\n+                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                            return f;\n+                        }\n+                    } catch (NumberFormatException nfe) { // NOPMD\n+                        // ignore the bad number\n+                    }\n+                    try {\n+                        Double d = createDouble(str);\n+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                            return d;\n+                        }\n+                    } catch (NumberFormatException nfe) { // NOPMD\n+                        // ignore the bad number\n+                    }\n+\n+                    return createBigDecimal(str);\n+\n+                }\n+            }\n+        }\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}