{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (n.getParent().isGetProp() &&\n          n.getParent().getFirstChild().getType() == Token.NAME) {\n        String pname = n.getParent().getFirstChild().getString();\n        JSDocInfo docInfo = NodeUtil.getBestJSDocInfo(n);\n        if (docInfo != null && docInfo.isConstructor()) {\n          String qName = NodeUtil.getBestLValueName(n);\n          if (qName != null && qName.endsWith(pname)) {\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..8d483ddb 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,18 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getParent().isGetProp() &&\n+          n.getParent().getFirstChild().getType() == Token.NAME) {\n+        String pname = n.getParent().getFirstChild().getString();\n+        JSDocInfo docInfo = NodeUtil.getBestJSDocInfo(n);\n+        if (docInfo != null && docInfo.isConstructor()) {\n+          String qName = NodeUtil.getBestLValueName(n);\n+          if (qName != null && qName.endsWith(pname)) {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}