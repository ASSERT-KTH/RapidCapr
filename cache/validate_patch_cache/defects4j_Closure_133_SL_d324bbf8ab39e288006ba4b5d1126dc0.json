{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    // Capture position before trimming.\n    int originalEndPos = stream.getAdvancedCount();\n    // Trim the result.\n    result = result.trim();\n    // Validate the result and position.\n    if (result == null || (result.isEmpty() && stream.getCurrentChar() != '*')) {\n        // Throw an exception if position and result are bad.\n        throw new IllegalStateException(\"Recorded bad position information\");\n    }\n    // Update the position.\n    stream.advance(originalEndPos - stream.getAdvancedCount());\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..1f30e72e 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,21 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    String result = stream.getRemainingJSDocLine();\n+    // Capture position before trimming.\n+    int originalEndPos = stream.getAdvancedCount();\n+    // Trim the result.\n+    result = result.trim();\n+    // Validate the result and position.\n+    if (result == null || (result.isEmpty() && stream.getCurrentChar() != '*')) {\n+        // Throw an exception if position and result are bad.\n+        throw new IllegalStateException(\"Recorded bad position information\");\n+    }\n+    // Update the position.\n+    stream.advance(originalEndPos - stream.getAdvancedCount());\n+    return result;\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}