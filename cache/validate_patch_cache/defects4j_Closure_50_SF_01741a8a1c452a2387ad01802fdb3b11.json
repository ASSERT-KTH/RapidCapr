{
    "patch": "private static Node tryFoldArrayJoin(Node callNode, Node joinFnNameNode) {\n  // Only try to optimize `.join()` calls on literals.\n  if (callNode.getChildCount() != 2 || \n      !callNode.getFirstChild().isQualifiedName() ||\n      !joinFnNameNode.getString().equals(\"join\")) {\n    return callNode;\n  }\n\n  Node arrayNode = callNode.getFirstChild();\n  boolean isStringJoin = arrayNode.getType() == Token.STRING;\n  if (!isStringJoin && arrayNode.getChildCount() == 0) {\n    // Special case for `[].join()` and equivalent.\n    Node replacementNode = IR.string(\"\");\n    callNode.replaceWith(replacementNode);\n    return replacementNode;\n  }\n\n  // Get the separator to use between elements.\n  Node separatorNode = callNode.getLastChild();\n  String separator = null;\n  if (separatorNode == null) {\n    separator = \",\";\n  } else {\n    separator = separatorNode.getString();\n  }\n  if (separator == null || separator.isEmpty()) {\n    return callNode;\n  }\n\n  // Construct the new string value.\n  StringBuilder sb = new StringBuilder();\n  if (isStringJoin) {\n    // Handle the case of `'a'.join([x, y, z])`.\n    String stringValue = arrayNode.getString();\n    int sepLen = separator.length();\n\n    for (int i = 0, ii = stringValue.length(); i < ii; i++) {\n      if (i != 0) {\n        sb.append(separator);\n      }\n      sb.append(stringValue.charAt(i));\n    }\n  } else {\n    // Handle the more general case of `['a', 'b', 'c'].join()`.\n    Node firstChild = arrayNode.getFirstChild();\n\n    while (firstChild != null) {\n      String elementAsString = NodeUtil.getArrayElementStringValue(firstChild);\n      if (elementAsString == null) {\n        // If the element is not a string, then don't fold anything.\n        return callNode;\n      }\n\n      if (sb.length() > 0) {\n        sb.append(separator);\n      }\n      sb.append(elementAsString);\n      firstChild = firstChild.getNext();\n    }\n  }\n\n  // Replace the original call with the new string.\n  Node replacementNode = IR.string(sb.toString())\n      .srcref(callNode);\n  callNode.replaceWith(replacementNode);\n  return replacementNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..aaed4185 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,117 +364,74 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n-    Node callTarget = n.getFirstChild();\n+private static Node tryFoldArrayJoin(Node callNode, Node joinFnNameNode) {\n+  // Only try to optimize `.join()` calls on literals.\n+  if (callNode.getChildCount() != 2 || \n+      !callNode.getFirstChild().isQualifiedName() ||\n+      !joinFnNameNode.getString().equals(\"join\")) {\n+    return callNode;\n+  }\n \n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n-    }\n+  Node arrayNode = callNode.getFirstChild();\n+  boolean isStringJoin = arrayNode.getType() == Token.STRING;\n+  if (!isStringJoin && arrayNode.getChildCount() == 0) {\n+    // Special case for `[].join()` and equivalent.\n+    Node replacementNode = IR.string(\"\");\n+    callNode.replaceWith(replacementNode);\n+    return replacementNode;\n+  }\n \n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n-    }\n+  // Get the separator to use between elements.\n+  Node separatorNode = callNode.getLastChild();\n+  String separator = null;\n+  if (separatorNode == null) {\n+    separator = \",\";\n+  } else {\n+    separator = separatorNode.getString();\n+  }\n+  if (separator == null || separator.isEmpty()) {\n+    return callNode;\n+  }\n \n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  // Construct the new string value.\n+  StringBuilder sb = new StringBuilder();\n+  if (isStringJoin) {\n+    // Handle the case of `'a'.join([x, y, z])`.\n+    String stringValue = arrayNode.getString();\n+    int sepLen = separator.length();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n+    for (int i = 0, ii = stringValue.length(); i < ii; i++) {\n+      if (i != 0) {\n+        sb.append(separator);\n+      }\n+      sb.append(stringValue.charAt(i));\n     }\n+  } else {\n+    // Handle the more general case of `['a', 'b', 'c'].join()`.\n+    Node firstChild = arrayNode.getFirstChild();\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+    while (firstChild != null) {\n+      String elementAsString = NodeUtil.getArrayElementStringValue(firstChild);\n+      if (elementAsString == null) {\n+        // If the element is not a string, then don't fold anything.\n+        return callNode;\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n-    }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+      if (sb.length() > 0) {\n+        sb.append(separator);\n+      }\n+      sb.append(elementAsString);\n+      firstChild = firstChild.getNext();\n     }\n-\n-    return n;\n   }\n \n+  // Replace the original call with the new string.\n+  Node replacementNode = IR.string(sb.toString())\n+      .srcref(callNode);\n+  callNode.replaceWith(replacementNode);\n+  return replacementNode;\n+}\n+\n   /**\n    * Try to fold .substr() calls on strings\n    */\n@@ -642,4 +599,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: method tryFoldArrayJoin in class PeepholeReplaceKnownMethods cannot be applied to given types;",
    "test_result": "ERROR"
}