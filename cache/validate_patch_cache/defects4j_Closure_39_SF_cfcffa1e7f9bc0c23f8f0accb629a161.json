{
    "patch": "    return !(this instanceof VoidType) && !(this instanceof UndefinedType) &&\n        !(this instanceof NullType);\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      SortedSet<String> propertyNames = new TreeSet<>(Objects.requireNonNull(compareTo));\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n\n        if (forAnnotations) {\n          sb.append(getPropertyType(property).toString());\n        } else {\n          sb.append(getPropertyType(property).toStringHelper(true));\n        }\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..ac36fed5 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,8 +345,8 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n+    return !(this instanceof VoidType) && !(this instanceof UndefinedType) &&\n+        !(this instanceof NullType);\n   }\n \n   @Override\n@@ -358,7 +358,7 @@ class PrototypeObjectType extends ObjectType {\n       prettyPrint = false;\n \n       // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n+      SortedSet<String> propertyNames = new TreeSet<>(Objects.requireNonNull(compareTo));\n       for (ObjectType current = this;\n            current != null && !current.isNativeObjectType() &&\n                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n@@ -377,23 +377,15 @@ class PrototypeObjectType extends ObjectType {\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+        if (forAnnotations) {\n+          sb.append(getPropertyType(property).toString());\n+        } else {\n+          sb.append(getPropertyType(property).toStringHelper(true));\n         }\n-      }\n \n-      sb.append(\"}\");\n-\n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n-    }\n-  }\n+        ++i;\n+        if (i == MAX_PRETTY_PRINTED_PROPERTIES && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}