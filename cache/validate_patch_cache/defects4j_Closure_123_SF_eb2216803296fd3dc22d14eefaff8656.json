{
    "patch": "public static String fixCode(String code) {\n    if (code.contains(\"for\") && code.contains(\"in\")) {\n        String[] lines = code.split(\"\\\\r?\\\\n\");\n        for (int i = 0; i < lines.length; i++) {\n            String line = lines[i].trim();\n            if (line.startsWith(\"for\")) {\n                int inIndex = line.indexOf(\"in\");\n                if (inIndex != -1) {\n                    String beforeIn = line.substring(0, inIndex);\n                    String afterIn = line.substring(inIndex + 2);\n                    if (afterIn.contains(\".\")) {\n                        String fixedAfterIn = afterIn.substring(0, afterIn.indexOf(\".\"));\n                        lines[i] = beforeIn + \" in \" + fixedAfterIn + afterIn.substring(afterIn.indexOf(\".\"));\n                    }\n                }\n            }\n        }\n        return String.join(\"\\n\", lines);\n    }\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..50dac0a5 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,27 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    if (code.contains(\"for\") && code.contains(\"in\")) {\n+        String[] lines = code.split(\"\\\\r?\\\\n\");\n+        for (int i = 0; i < lines.length; i++) {\n+            String line = lines[i].trim();\n+            if (line.startsWith(\"for\")) {\n+                int inIndex = line.indexOf(\"in\");\n+                if (inIndex != -1) {\n+                    String beforeIn = line.substring(0, inIndex);\n+                    String afterIn = line.substring(inIndex + 2);\n+                    if (afterIn.contains(\".\")) {\n+                        String fixedAfterIn = afterIn.substring(0, afterIn.indexOf(\".\"));\n+                        lines[i] = beforeIn + \" in \" + fixedAfterIn + afterIn.substring(afterIn.indexOf(\".\"));\n+                    }\n+                }\n+            }\n+        }\n+        return String.join(\"\\n\", lines);\n+    }\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}