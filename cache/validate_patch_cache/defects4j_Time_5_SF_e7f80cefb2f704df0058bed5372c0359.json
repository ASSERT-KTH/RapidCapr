{
    "patch": "public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        int weeksAsDays = Math.multiplyExact(getWeeks(), 7);\n        long millis = DateTimeUtils.safeAdd(\n                DateTimeUtils.safeAdd(DateTimeUtils.safeAdd(DateTimeUtils.safeAdd(\n                DateTimeUtils.safeAdd(DateTimeUtils.safeAdd(\n                        getMillis(), DateTimeUtils.safeMultiply(getSeconds(), DateTimeConstants.MILLIS_PER_SECOND)),\n                        DateTimeUtils.safeMultiply(getMinutes(), DateTimeConstants.MILLIS_PER_MINUTE)),\n                        DateTimeUtils.safeMultiply(getHours(), DateTimeConstants.MILLIS_PER_HOUR)),\n                        DateTimeUtils.safeMultiply(getDays() + weeksAsDays, DateTimeConstants.MILLIS_PER_DAY)),\n                        (long) getShifts() * DateTimeConstants.MILLIS_PER_SHIFT);\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            int totalMonths = years * 12 + months;\n            if (totalMonths != 0) {\n                int normalizedYears = totalMonths / 12;\n                int normalizedMonths = totalMonths % 12;\n                result = result.withYears(normalizedYears).withMonths(normalizedMonths);\n            }\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..1cbd6eb4 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,25 +1613,27 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n+public Period normalizedStandard(PeriodType type) {\n         type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+        int weeksAsDays = Math.multiplyExact(getWeeks(), 7);\n+        long millis = DateTimeUtils.safeAdd(\n+                DateTimeUtils.safeAdd(DateTimeUtils.safeAdd(DateTimeUtils.safeAdd(\n+                DateTimeUtils.safeAdd(DateTimeUtils.safeAdd(\n+                        getMillis(), DateTimeUtils.safeMultiply(getSeconds(), DateTimeConstants.MILLIS_PER_SECOND)),\n+                        DateTimeUtils.safeMultiply(getMinutes(), DateTimeConstants.MILLIS_PER_MINUTE)),\n+                        DateTimeUtils.safeMultiply(getHours(), DateTimeConstants.MILLIS_PER_HOUR)),\n+                        DateTimeUtils.safeMultiply(getDays() + weeksAsDays, DateTimeConstants.MILLIS_PER_DAY)),\n+                        (long) getShifts() * DateTimeConstants.MILLIS_PER_SHIFT);\n         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+\n         int years = getYears();\n         int months = getMonths();\n         if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+            int totalMonths = years * 12 + months;\n+            if (totalMonths != 0) {\n+                int normalizedYears = totalMonths / 12;\n+                int normalizedMonths = totalMonths % 12;\n+                result = result.withYears(normalizedYears).withMonths(normalizedMonths);\n             }\n         }\n         return result;",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}