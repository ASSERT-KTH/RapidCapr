{
    "patch": "private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\"use strict\");\n\n    private static class TransformDispatcher extends IRFactory.TypeSafeDispatcher<Node> {\n\n      private String sourceName;\n      private ErrorReporter errorReporter;\n\n      public TransformDispatcher(String sourceName, ErrorReporter errorReporter) {\n        this.sourceName = sourceName;\n        this.errorReporter = errorReporter;\n      }\n\n      private boolean isDirective(Node n) {\n        if (n == null) return false;\n        int nType = n.getType();\n        return nType == Token.EXPR_RESULT &&\n            n.getFirstChild().isString() &&\n            ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n      }\n\n      @Override\n      public Node visit(AstNode node) {\n        throw new UnsupportedOperationException(\n            \"visit(\" + node.getClass().getName() + \")\");\n      }\n\n      @Override\n      public Node visitArrayComprehension(ArrayComprehension node) {\n        // Array comprehensions are not supported.\n        return null;\n      }\n\n      @Override\n      public Node visitArrayLiteral(ArrayLiteral node) {\n        Node newNode = newNode(Token.ARRAYLIT);\n        for (AstNode child : node.getElements()) {\n          if (child instanceof EmptyExpression) {\n            // Transform EmptyExpression to a hole (null).\n            newNode.addChildToBack(newNode(Token.NULL));\n          } else {\n            newNode.addChildToBack(transform(child));\n          }\n        }\n        return newNode;\n      }\n\n      @Override\n      public Node visitAssignment(Assignment node) {\n        Node target = transform(node.getLeft());\n        Node value = transform(node.getRight());\n        return newNode(node.getType(), target, value);\n      }\n\n      @Override\n      public Node visitAstRoot(AstRoot node) {\n        return transform(node.getFirstChild());\n      }\n\n      @Override\n      public Node visitBlock(Block node) {\n        Node result = newNode(Token.BLOCK);\n        for (Node child : node) {\n          result.addChildToBack(transform(child));\n        }\n        return result;\n      }\n\n      @Override\n      public Node visitBreakStatement(BreakStatement node) {\n        Node result = newNode(Token.BREAK);\n        if (node.getBreakLabel() != null) {\n          Node labelName = transform(node.getBreakLabel());\n          labelName.setType(Token.LABEL_NAME);\n          result.addChildToBack(labelName);\n        }\n        return result;\n      }\n\n      @Override\n      public Node visitConditionalExpression(ConditionalExpression node) {\n        return newNode(\n            Token.HOOK,\n            transform(node.getTestExpression()),\n            transform(node.getTrueExpression()),\n            transform(node.getFalseExpression()));\n      }\n\n      @Override\n      public Node visitContinueStatement(ContinueStatement node) {\n        Node result = newNode(Token.CONTINUE);\n        if (node.getLabel() != null) {\n          Node labelName = transform(node.getLabel());\n          labelName.setType(Token.LABEL_NAME);\n          result.addChildToBack(labelName);\n        }\n        return result;\n      }\n\n      @Override\n      public Node visitDoLoop(DoLoop node) {\n        return newNode(Token.DO, transform(node.getBody()), transform(node.getCondition()));\n      }\n\n      @Override\n      public Node visitElementGet(ElementGet node) {\n        return newNode(Token.GETELEM, transform(node.getTarget()), transform(node.getElement()));\n      }\n\n      @Override\n      public Node visitEmptyExpression(EmptyExpression node) {\n        return newNode(Token.EMPTY);\n      }\n\n      @Override\n      public Node visitExpressionStatement(ExpressionStatement node) {\n        Node result = newNode(Token.EXPR_RESULT);\n        result.addChildToBack(transform(node.getExpression()));\n        return result;\n      }\n\n      @Override\n      public Node visitForInLoop(ForInLoop node) {\n        Node lhsNode = transform(node.getIterator());\n        Node rhsNode = transform(node.getIteratedObject());\n        Node bodyNode = transform(node.getBody());\n        Node result = newNode(Token.FOR_IN, lhsNode, rhsNode, bodyNode);\n        result.putProp(Node.FOR_IN_DEF_PROP, Boolean.TRUE);\n        return result;\n      }\n\n      @Override\n      public Node visitForLoop(ForLoop node) {\n        Node initialChild = (node.getInitializer() != null)\n            ? transform(node.getInitializer())\n            : newNode(Token.EMPTY);\n        Node conditionChild = (node.getCondition() != null)\n            ? transform(node.getCondition())\n            : newNode(Token.TRUE);\n        Node incrementChild = (node.getIncrement() != null)\n            ? transform(node.getIncrement())\n            : newNode(Token.EMPTY);\n        Node bodyChild = transform(node.getBody());\n        return newNode(Token.FOR, initialChild, conditionChild, incrementChild, bodyChild);\n      }\n\n      @Override\n      public Node visitFunctionCall(FunctionCall node) {\n        Node calleeNode = transform(node.getTarget());\n        Node newNode = newNode(Token.CALL, calleeNode);\n        for (AstNode child : node.getArguments()) {\n          newNode.addChildToBack(transform(child));\n        }\n        return newNode;\n      }\n\n      @Override\n      public Node visitFunctionNode(FunctionNode node) {\n        int functionType = Token.FUNCTION;\n        if (node.getFunctionType() == FunctionNode.FUNCTION_EXPRESSION) {\n          functionType = Token.FUNCTION_EXPR;\n        } else if (node.getFunctionType() == FunctionNode.GETTER_FUNCTION) {\n          functionType = Token.GETTER_DEF;\n        } else if (node.getFunctionType() == FunctionNode.SETTER_FUNCTION) {\n          functionType = Token.SETTER_DEF;\n        } else if (node.isArrowFunction()) {\n          functionType = Token.LAMBDA;\n        }\n        Node result = newNode(\n            functionType,\n            node.getFunctionName() != null ? transform(node.getFunctionName()) : null,\n            transform(functionParametersToNameList(node)),\n            transform(node.getBody()));\n        result.setIsAsyncFunction(node.isAsync());\n        result.setIsGeneratorFunction(node.isGenerator());\n        result.setIsGetterDef(node.getFunctionType() == FunctionNode.GETTER_FUNCTION);\n        result.setIsSetterDef(node.getFunctionType() == FunctionNode.SETTER_FUNCTION);\n        return result;\n      }\n\n      @Override\n      public Node visitIfStatement(IfStatement node) {\n        return newNode(\n            Token.IF,\n            transform(node.getCondition()),\n            transform(node.getThenPart()),\n            node.getElsePart() != null ? transform(node.getElsePart()) : null);\n      }\n\n      @Override\n      public Node visitInfixExpression(InfixExpression node) {\n        Node left = transform(node.getLeft());\n        Node right = transform(node.getRight());\n        return newNode(node.getType(), left, right);\n      }\n\n      @Override\n      public Node visitKeywordLiteral(KeywordLiteral node) {\n        int type = node.getType();\n        switch (type) {\n          case Token.TOKEN_TRUE:\n          case Token.TOKEN_FALSE:\n          case Token.TOKEN_NULL:\n          case Token.TOKEN_UNDEFINED:\n            return newNode(type);\n          default:\n            throw new IllegalStateException(\"Unexpected keyword literal: \" + node.toSource());\n        }\n      }\n\n      @Override\n      public Node visitLabeledStatement(LabeledStatement node) {\n        Node result = newNode(Token.LABEL, transform(node.getStatement()));\n        result.addChildToBack(transform(node.getLabels()));\n        return result;\n      }\n\n      @Override\n      public Node visitName(Name node) {\n        if (isDirective(node.getParent())) {\n          return transform(node.getString());\n        }\n        return newNode(Token.NAME, node.getString());\n      }\n\n      @Override\n      public Node visitNewExpression(NewExpression node) {\n        Node result = newNode(Token.NEW, transform(node.getTarget()));\n        for (AstNode child : node.getArguments()) {\n          result.addChildToBack(transform(child));\n        }\n        return result;\n      }\n\n      private Node transformNumber(NumberLiteral num) {\n        if (num.getNumber() == Double.POSITIVE_INFINITY) {\n          return newNode(Token.POSITIVE_INFINITY);\n        }\n        if (num.getNumber() == Double.NEGATIVE_INFINITY) {\n          return newNode(Token.NEGATIVE_INFINITY);\n        }\n        if (Double.isNaN(num.getNumber())) {\n          return newNode(Token.NAN);\n        }\n\n        BigDecimal val = BigDecimal.valueOf(num.getNumber());\n        if (val.signum() == -1) {\n          // -0.0 and 0.0 are distinct values in JavaScript.\n          if (val.compareTo(BigDecimal.ZERO) == 0) {\n            return newNode(Token.NEG_ZERO);\n          }\n        }\n        String numStr = val.toPlainString();\n        return newNode(Token.NUMBER, numStr);\n      }\n\n      @Override\n      public Node visitNumber(NumberLiteral node) {\n        return transformNumber(node);\n      }\n\n      @Override\n      public Node visitObjectLiteral(ObjectLiteral node) {\n        Node newNode = newNode(Token.OBJECTLIT);\n        for (ObjectProperty property : node.getElements()) {\n          Node keyNode;\n          if (property.isGetter()) {\n            keyNode = newNode(Token.GETTER_DEF, transform(property.getLeft()));\n          } else if (property.isSetter()) {\n            keyNode = newNode(Token.SETTER_DEF, transform(property.getLeft()));\n          } else {\n            if (property.getRight() == null) {\n              // Transform ShorthandProperty to a string key.\n              keyNode =\n                  newStringNode(Token.STRING_KEY, property.getLeft().toSource(), property.getLeft());\n            } else {\n              keyNode = transform(property.getLeft());\n            }\n          }\n          Node valueNode = transform(property.getRight());\n          keyNode.addChildToBack(valueNode);\n          newNode.addChildToBack(keyNode);\n        }\n        return newNode;\n      }\n\n      @Override\n      public Node visitParenthesizedExpression(ParenthesizedExpression node) {\n        return transform(node.getExpression());\n      }\n\n      @Override\n      public Node visitPropertyGet(PropertyGet node) {\n        return newNode(Token.GETPROP, transform(node.getTarget()), newStringNode(Token.STRING, node.getProperty().toSource()));\n      }\n\n      @Override\n      public Node visitRegExpLiteral(RegExpLiteral node) {\n        Node newNode = newNode(Token.REGEXP, node.getValue());\n        // Add flag information.\n        String flags = node.getFlags();\n        newNode.putProp(Node.REGEXP_FLAGS, flags);\n        int extraChildren = 0;\n        if (flags.indexOf('i') != -1) {\n          ++extraChildren;\n        }\n        if (flags.indexOf('m') != -1) {\n          ++extraChildren;\n        }\n        if (extraChildren != 0) {\n          Node emptyChild = newNode(Token.EMPTY);\n          for (int i = 0; i < extraChildren; i++) {\n            newNode.addChildToBack(emptyChild);\n          }\n        }\n        return newNode;\n      }\n\n      @Override\n      public Node visitReturnStatement(ReturnStatement node) {\n        Node returnValue = transform(node.getReturnValue());\n        if (returnValue == null) {\n          return newNode(Token.RETURN);\n        } else {\n          return newNode(Token.RETURN, returnValue);\n        }\n      }\n\n      @Override\n      public Node visitString(StringLiteral node) {\n        return newStringNode(Token.STRING, node.getValue());\n      }\n\n      @Override\n      public Node visitSwitchCase(SwitchCase node) {\n        Node result;\n        if (node.getExpression() == null) {\n          result = newNode(Token.DEFAULT);\n        } else {\n          result = newNode(Token.CASE, transform(node.getExpression()));\n        }\n        for (AstNode statement : node.getStatements()) {\n          result.addChildToBack(transform(statement));\n        }\n        return result;\n      }\n\n      @Override\n      public Node visitSwitchStatement(SwitchStatement node) {\n        Node result =\n            newNode(Token.SWITCH, transform(node.getExpression()), transform(node.getCases()));\n        return result;\n      }\n\n      @Override\n      public Node visitThrowStatement(ThrowStatement node) {\n        return newNode(Token.THROW, transform(node.getExpression()));\n      }\n\n      @Override\n      public Node visitTryStatement(TryStatement node) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..076780f3 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,367 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n+      ImmutableSet.of(\"use strict\");\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+    private static class TransformDispatcher extends IRFactory.TypeSafeDispatcher<Node> {\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+      private String sourceName;\n+      private ErrorReporter errorReporter;\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+      public TransformDispatcher(String sourceName, ErrorReporter errorReporter) {\n+        this.sourceName = sourceName;\n+        this.errorReporter = errorReporter;\n       }\n-      return node;\n-    }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+      private boolean isDirective(Node n) {\n+        if (n == null) return false;\n+        int nType = n.getType();\n+        return nType == Token.EXPR_RESULT &&\n+            n.getFirstChild().isString() &&\n+            ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n       }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n+      @Override\n+      public Node visit(AstNode node) {\n+        throw new UnsupportedOperationException(\n+            \"visit(\" + node.getClass().getName() + \")\");\n+      }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+      @Override\n+      public Node visitArrayComprehension(ArrayComprehension node) {\n+        // Array comprehensions are not supported.\n+        return null;\n       }\n-      return node;\n-    }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n+      @Override\n+      public Node visitArrayLiteral(ArrayLiteral node) {\n+        Node newNode = newNode(Token.ARRAYLIT);\n+        for (AstNode child : node.getElements()) {\n+          if (child instanceof EmptyExpression) {\n+            // Transform EmptyExpression to a hole (null).\n+            newNode.addChildToBack(newNode(Token.NULL));\n+          } else {\n+            newNode.addChildToBack(transform(child));\n+          }\n+        }\n+        return newNode;\n+      }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+      @Override\n+      public Node visitAssignment(Assignment node) {\n+        Node target = transform(node.getLeft());\n+        Node value = transform(node.getRight());\n+        return newNode(node.getType(), target, value);\n+      }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+      @Override\n+      public Node visitAstRoot(AstRoot node) {\n+        return transform(node.getFirstChild());\n+      }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+      @Override\n+      public Node visitBlock(Block node) {\n+        Node result = newNode(Token.BLOCK);\n+        for (Node child : node) {\n+          result.addChildToBack(transform(child));\n+        }\n+        return result;\n+      }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+      @Override\n+      public Node visitBreakStatement(BreakStatement node) {\n+        Node result = newNode(Token.BREAK);\n+        if (node.getBreakLabel() != null) {\n+          Node labelName = transform(node.getBreakLabel());\n+          labelName.setType(Token.LABEL_NAME);\n+          result.addChildToBack(labelName);\n+        }\n+        return result;\n+      }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+      @Override\n+      public Node visitConditionalExpression(ConditionalExpression node) {\n+        return newNode(\n+            Token.HOOK,\n+            transform(node.getTestExpression()),\n+            transform(node.getTrueExpression()),\n+            transform(node.getFalseExpression()));\n+      }\n+\n+      @Override\n+      public Node visitContinueStatement(ContinueStatement node) {\n+        Node result = newNode(Token.CONTINUE);\n+        if (node.getLabel() != null) {\n+          Node labelName = transform(node.getLabel());\n+          labelName.setType(Token.LABEL_NAME);\n+          result.addChildToBack(labelName);\n+        }\n+        return result;\n+      }\n+\n+      @Override\n+      public Node visitDoLoop(DoLoop node) {\n+        return newNode(Token.DO, transform(node.getBody()), transform(node.getCondition()));\n+      }\n+\n+      @Override\n+      public Node visitElementGet(ElementGet node) {\n+        return newNode(Token.GETELEM, transform(node.getTarget()), transform(node.getElement()));\n+      }\n+\n+      @Override\n+      public Node visitEmptyExpression(EmptyExpression node) {\n+        return newNode(Token.EMPTY);\n+      }\n+\n+      @Override\n+      public Node visitExpressionStatement(ExpressionStatement node) {\n+        Node result = newNode(Token.EXPR_RESULT);\n+        result.addChildToBack(transform(node.getExpression()));\n+        return result;\n+      }\n+\n+      @Override\n+      public Node visitForInLoop(ForInLoop node) {\n+        Node lhsNode = transform(node.getIterator());\n+        Node rhsNode = transform(node.getIteratedObject());\n+        Node bodyNode = transform(node.getBody());\n+        Node result = newNode(Token.FOR_IN, lhsNode, rhsNode, bodyNode);\n+        result.putProp(Node.FOR_IN_DEF_PROP, Boolean.TRUE);\n+        return result;\n+      }\n+\n+      @Override\n+      public Node visitForLoop(ForLoop node) {\n+        Node initialChild = (node.getInitializer() != null)\n+            ? transform(node.getInitializer())\n+            : newNode(Token.EMPTY);\n+        Node conditionChild = (node.getCondition() != null)\n+            ? transform(node.getCondition())\n+            : newNode(Token.TRUE);\n+        Node incrementChild = (node.getIncrement() != null)\n+            ? transform(node.getIncrement())\n+            : newNode(Token.EMPTY);\n+        Node bodyChild = transform(node.getBody());\n+        return newNode(Token.FOR, initialChild, conditionChild, incrementChild, bodyChild);\n+      }\n+\n+      @Override\n+      public Node visitFunctionCall(FunctionCall node) {\n+        Node calleeNode = transform(node.getTarget());\n+        Node newNode = newNode(Token.CALL, calleeNode);\n+        for (AstNode child : node.getArguments()) {\n+          newNode.addChildToBack(transform(child));\n+        }\n+        return newNode;\n+      }\n+\n+      @Override\n+      public Node visitFunctionNode(FunctionNode node) {\n+        int functionType = Token.FUNCTION;\n+        if (node.getFunctionType() == FunctionNode.FUNCTION_EXPRESSION) {\n+          functionType = Token.FUNCTION_EXPR;\n+        } else if (node.getFunctionType() == FunctionNode.GETTER_FUNCTION) {\n+          functionType = Token.GETTER_DEF;\n+        } else if (node.getFunctionType() == FunctionNode.SETTER_FUNCTION) {\n+          functionType = Token.SETTER_DEF;\n+        } else if (node.isArrowFunction()) {\n+          functionType = Token.LAMBDA;\n+        }\n+        Node result = newNode(\n+            functionType,\n+            node.getFunctionName() != null ? transform(node.getFunctionName()) : null,\n+            transform(functionParametersToNameList(node)),\n+            transform(node.getBody()));\n+        result.setIsAsyncFunction(node.isAsync());\n+        result.setIsGeneratorFunction(node.isGenerator());\n+        result.setIsGetterDef(node.getFunctionType() == FunctionNode.GETTER_FUNCTION);\n+        result.setIsSetterDef(node.getFunctionType() == FunctionNode.SETTER_FUNCTION);\n+        return result;\n+      }\n+\n+      @Override\n+      public Node visitIfStatement(IfStatement node) {\n+        return newNode(\n+            Token.IF,\n+            transform(node.getCondition()),\n+            transform(node.getThenPart()),\n+            node.getElsePart() != null ? transform(node.getElsePart()) : null);\n+      }\n+\n+      @Override\n+      public Node visitInfixExpression(InfixExpression node) {\n+        Node left = transform(node.getLeft());\n+        Node right = transform(node.getRight());\n+        return newNode(node.getType(), left, right);\n+      }\n+\n+      @Override\n+      public Node visitKeywordLiteral(KeywordLiteral node) {\n+        int type = node.getType();\n+        switch (type) {\n+          case Token.TOKEN_TRUE:\n+          case Token.TOKEN_FALSE:\n+          case Token.TOKEN_NULL:\n+          case Token.TOKEN_UNDEFINED:\n+            return newNode(type);\n+          default:\n+            throw new IllegalStateException(\"Unexpected keyword literal: \" + node.toSource());\n+        }\n+      }\n+\n+      @Override\n+      public Node visitLabeledStatement(LabeledStatement node) {\n+        Node result = newNode(Token.LABEL, transform(node.getStatement()));\n+        result.addChildToBack(transform(node.getLabels()));\n+        return result;\n+      }\n+\n+      @Override\n+      public Node visitName(Name node) {\n+        if (isDirective(node.getParent())) {\n+          return transform(node.getString());\n+        }\n+        return newNode(Token.NAME, node.getString());\n+      }\n+\n+      @Override\n+      public Node visitNewExpression(NewExpression node) {\n+        Node result = newNode(Token.NEW, transform(node.getTarget()));\n+        for (AstNode child : node.getArguments()) {\n+          result.addChildToBack(transform(child));\n+        }\n+        return result;\n+      }\n+\n+      private Node transformNumber(NumberLiteral num) {\n+        if (num.getNumber() == Double.POSITIVE_INFINITY) {\n+          return newNode(Token.POSITIVE_INFINITY);\n+        }\n+        if (num.getNumber() == Double.NEGATIVE_INFINITY) {\n+          return newNode(Token.NEGATIVE_INFINITY);\n+        }\n+        if (Double.isNaN(num.getNumber())) {\n+          return newNode(Token.NAN);\n+        }\n+\n+        BigDecimal val = BigDecimal.valueOf(num.getNumber());\n+        if (val.signum() == -1) {\n+          // -0.0 and 0.0 are distinct values in JavaScript.\n+          if (val.compareTo(BigDecimal.ZERO) == 0) {\n+            return newNode(Token.NEG_ZERO);\n+          }\n+        }\n+        String numStr = val.toPlainString();\n+        return newNode(Token.NUMBER, numStr);\n+      }\n+\n+      @Override\n+      public Node visitNumber(NumberLiteral node) {\n+        return transformNumber(node);\n+      }\n+\n+      @Override\n+      public Node visitObjectLiteral(ObjectLiteral node) {\n+        Node newNode = newNode(Token.OBJECTLIT);\n+        for (ObjectProperty property : node.getElements()) {\n+          Node keyNode;\n+          if (property.isGetter()) {\n+            keyNode = newNode(Token.GETTER_DEF, transform(property.getLeft()));\n+          } else if (property.isSetter()) {\n+            keyNode = newNode(Token.SETTER_DEF, transform(property.getLeft()));\n+          } else {\n+            if (property.getRight() == null) {\n+              // Transform ShorthandProperty to a string key.\n+              keyNode =\n+                  newStringNode(Token.STRING_KEY, property.getLeft().toSource(), property.getLeft());\n+            } else {\n+              keyNode = transform(property.getLeft());\n+            }\n+          }\n+          Node valueNode = transform(property.getRight());\n+          keyNode.addChildToBack(valueNode);\n+          newNode.addChildToBack(keyNode);\n+        }\n+        return newNode;\n+      }\n+\n+      @Override\n+      public Node visitParenthesizedExpression(ParenthesizedExpression node) {\n+        return transform(node.getExpression());\n+      }\n+\n+      @Override\n+      public Node visitPropertyGet(PropertyGet node) {\n+        return newNode(Token.GETPROP, transform(node.getTarget()), newStringNode(Token.STRING, node.getProperty().toSource()));\n+      }\n+\n+      @Override\n+      public Node visitRegExpLiteral(RegExpLiteral node) {\n+        Node newNode = newNode(Token.REGEXP, node.getValue());\n+        // Add flag information.\n+        String flags = node.getFlags();\n+        newNode.putProp(Node.REGEXP_FLAGS, flags);\n+        int extraChildren = 0;\n+        if (flags.indexOf('i') != -1) {\n+          ++extraChildren;\n+        }\n+        if (flags.indexOf('m') != -1) {\n+          ++extraChildren;\n+        }\n+        if (extraChildren != 0) {\n+          Node emptyChild = newNode(Token.EMPTY);\n+          for (int i = 0; i < extraChildren; i++) {\n+            newNode.addChildToBack(emptyChild);\n+          }\n+        }\n+        return newNode;\n+      }\n+\n+      @Override\n+      public Node visitReturnStatement(ReturnStatement node) {\n+        Node returnValue = transform(node.getReturnValue());\n+        if (returnValue == null) {\n+          return newNode(Token.RETURN);\n+        } else {\n+          return newNode(Token.RETURN, returnValue);\n+        }\n+      }\n+\n+      @Override\n+      public Node visitString(StringLiteral node) {\n+        return newStringNode(Token.STRING, node.getValue());\n+      }\n+\n+      @Override\n+      public Node visitSwitchCase(SwitchCase node) {\n+        Node result;\n+        if (node.getExpression() == null) {\n+          result = newNode(Token.DEFAULT);\n+        } else {\n+          result = newNode(Token.CASE, transform(node.getExpression()));\n+        }\n+        for (AstNode statement : node.getStatements()) {\n+          result.addChildToBack(transform(statement));\n+        }\n+        return result;\n+      }\n+\n+      @Override\n+      public Node visitSwitchStatement(SwitchStatement node) {\n+        Node result =\n+            newNode(Token.SWITCH, transform(node.getExpression()), transform(node.getCases()));\n+        return result;\n+      }\n+\n+      @Override\n+      public Node visitThrowStatement(ThrowStatement node) {\n+        return newNode(Token.THROW, transform(node.getExpression()));\n+      }\n+\n+      @Override\n+      public Node visitTryStatement(TryStatement node) {\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}