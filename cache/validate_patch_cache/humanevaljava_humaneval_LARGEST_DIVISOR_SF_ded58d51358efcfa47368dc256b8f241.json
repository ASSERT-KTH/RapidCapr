{
    "patch": "public static int largest_divisor(int n) {\n    if (n <= 0) {\n        throw new IllegalArgumentException(\"Input must be positive\");\n    }\n    int largest_divisor = 1;\n    for (int i = 1; i * i <= n; i++) {\n        if (n % i == 0) {\n            largest_divisor = i > largest_divisor ? i : largest_divisor;\n            if (n / ",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java b/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\nindex e93b282..4cebc7c 100644\n--- a/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\n+++ b/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\n@@ -1,11 +1,13 @@\n package humaneval.buggy;\n \n public class LARGEST_DIVISOR {\n-    public static int largest_divisor(int n) {\n-        for (int i = n; i >= 0; i -= 1){\n-            if (n % i == 0)\n-                return i;\n-        }\n-        return 1;\n+public static int largest_divisor(int n) {\n+    if (n <= 0) {\n+        throw new IllegalArgumentException(\"Input must be positive\");\n     }\n+    int largest_divisor = 1;\n+    for (int i = 1; i * i <= n; i++) {\n+        if (n % i == 0) {\n+            largest_divisor = i > largest_divisor ? i : largest_divisor;\n+            if (n / \n }",
    "result_reason": " /tmp/humaneval-LARGEST_DIVISOR/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java:[13,1] illegal start of expression",
    "test_result": "ERROR"
}