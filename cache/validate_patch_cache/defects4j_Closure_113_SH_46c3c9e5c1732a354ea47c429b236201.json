{
    "patch": "      ProvidedName provided = providedNames.get(ns);\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else {\n>>> [ INFILL ] <<<\n        JSModule providedModule = provided.explicitModule;\n   \n        // This must be non-null, because there was an explicit provide.\n        Preconditions.checkNotNull(providedModule);\n   \n        JSModule module = t.getModule();\n        if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n        }\n   \n        maybeAddToSymbolTable(left);\n        maybeAddStringNodeToSymbolTable(arg);\n   \n        // Requires should be removed before further processing.\n        // Some clients run closure pass multiple times, first with\n        // the checks for broken requires turned off. In these cases, we\n        // allow broken requires to be preserved by the first run to\n        // let them be caught in the subsequent run.\n        parent.detachFromParent();\n        compiler.reportCodeChange();\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..32953e56 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,38 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+      ProvidedName provided = providedNames.get(ns);\n+      if (provided == null || !provided.isExplicitlyProvided()) {\n+        unrecognizedRequires.add(\n+            new UnrecognizedRequire(n, ns, t.getSourceName()));\n+      } else {\n+>>> [ INFILL ] <<<\n+        JSModule providedModule = provided.explicitModule;\n+   \n+        // This must be non-null, because there was an explicit provide.\n+        Preconditions.checkNotNull(providedModule);\n+   \n+        JSModule module = t.getModule();\n+        if (moduleGraph != null &&\n+            module != providedModule &&\n+            !moduleGraph.dependsOn(module, providedModule)) {\n+          compiler.report(\n+              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                  providedModule.getName(),\n+                  module.getName()));\n+        }\n+   \n+        maybeAddToSymbolTable(left);\n+        maybeAddStringNodeToSymbolTable(arg);\n+   \n+        // Requires should be removed before further processing.\n+        // Some clients run closure pass multiple times, first with\n+        // the checks for broken requires turned off. In these cases, we\n+        // allow broken requires to be preserved by the first run to\n+        // let them be caught in the subsequent run.\n+        parent.detachFromParent();\n+        compiler.reportCodeChange();\n+      }\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}