{
    "patch": "    public ReturnValue values(String... names) {\n        ReturnValue values = new ReturnValue();\n        for (String name : names) {\n            switch (name) {\n                case \"Iterable\":\n                    // added code block\n                    ArrayList<Object> emptyList = new ArrayList<>();\n                    values.setReturnValueFor(Iterable.class, emptyList);\n                    break;\n                case \"Boolean\":\n                    values.setReturnValueFor(Boolean.class, false);\n                    break;\n                case \"Byte\":\n                    values.setReturnValueFor(Byte.class, (byte) 0);\n                    break;\n                case \"Character\":\n                    values.setReturnValueFor(Character.class, '\\0');\n                    break;\n                case \"Double\":\n                    values.setReturnValueFor(Double.class, 0.0);\n                    break;\n                case \"Float\":\n                    values.setReturnValueFor(Float.class, 0.0f);\n                    break;\n                case \"Integer\":\n                    values.setReturnValueFor(Integer.class, 0);\n                    break;\n                case \"Long\":\n                    values.setReturnValueFor(Long.class, 0L);\n                    break;\n                case \"Short\":\n                    values.setReturnValueFor(Short.class, (short) 0);\n                    break;\n                default:\n                    throw new RuntimeException(\"Unsupported type: \" + name);\n            }\n        }\n        return values;\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}