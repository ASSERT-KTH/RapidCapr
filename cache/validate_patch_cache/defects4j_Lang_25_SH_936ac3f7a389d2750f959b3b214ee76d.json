{
    "patch": "public static String unescape(String s) {\n    StringBuffer sbuf = new StringBuffer ();\n    int i = 0;\n    int len = s.length ();\n    while (i < len) {\n        char ch = s.charAt (i);\n        if (ch == '\\\\') {\n            if (i + 1 < len) {\n                char nextChar = s.charAt (i + 1);\n                switch (nextChar) {\n                    case 'n':\n                        ch = '\\n';\n                        break;\n                    case 't':\n                        ch = '\\t';\n                        break;\n                    case 'r':\n                        ch = '\\r';\n                        break;\n                    case 'f':\n                        ch = '\\f';\n                        break;\n                    case '\\\\':\n                        ch = '\\\\';\n                        break;\n                    case '\\\"':\n                        ch = '\\\"';\n                        break;\n                    case '\\'':\n                        ch = '\\'';\n                        break;\n                    case 'u':\n                        if (i + 5 < len) {\n                            char hi = s.charAt (i + 2);\n                            char lo = s.charAt (i + 3);\n                            char hihi = s.charAt (i + 4);\n                            char lolo = s.charAt (i + 5);\n                            if (isHexDigit (hi) &&\n                                isHexDigit (lo) &&\n                                isHexDigit (hihi) &&\n                                isHexDigit (lolo)) {\n                                int val = Integer.parseInt (\"\" + hi + lo + hihi + lolo, 16);\n                                sbuf.append ((char) val);\n                                i += 5;\n                                break;\n                           }\n                        }\n                        // If we fall through to here, fail silently.\n                        break;\n                }\n                i++;\n            }\n            else {\n                sbuf.append (ch);\n            }\n        }\n        else {\n            sbuf.append (ch);\n        }\n        i++;\n    }\n    return sbuf.toString ();\n} \n \nprivate static boolean isHexDigit (char ch)\n{\n    return ((ch >= '0' && ch <= '9') ||\n            (ch >= 'A' && ch <= 'F') ||\n            (ch >= 'a' && ch <= 'f'));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}