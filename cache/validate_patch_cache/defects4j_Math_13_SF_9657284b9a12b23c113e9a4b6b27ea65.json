{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        // increase heap space\n        long maxMemory = Runtime.getRuntime().maxMemory();\n        long allocationSize = (long) (0.8 * maxMemory);\n        byte[] array = new byte[(int) allocationSize];\n        \n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d89869adb 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,12 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        // increase heap space\n+        long maxMemory = Runtime.getRuntime().maxMemory();\n+        long allocationSize = (long) (0.8 * maxMemory);\n+        byte[] array = new byte[(int) allocationSize];\n+        \n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n }",
    "result_reason": "java.lang.NegativeArraySizeException",
    "test_result": "FAIL"
}