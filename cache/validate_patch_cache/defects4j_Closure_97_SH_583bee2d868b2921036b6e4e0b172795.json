{
    "patch": "if (n.getType() == Token.URSH) {\n    // Perform the unsigned shift operation\n    long lval = Double.doubleToRawLongBits(lvalInt);\n    lval = (lval >>> 32) | (lval << 32);\n    result = Double.longBitsToDouble(lval >>> rvalInt);\n} else {\n    // Perform the signed shift operations\n    result = lvalInt >> rvalInt;\n    if (n.getType() == Token.LSH) {\n        result = lvalInt << rvalInt;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..83c197c4 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,18 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+if (n.getType() == Token.URSH) {\n+    // Perform the unsigned shift operation\n+    long lval = Double.doubleToRawLongBits(lvalInt);\n+    lval = (lval >>> 32) | (lval << 32);\n+    result = Double.longBitsToDouble(lval >>> rvalInt);\n+} else {\n+    // Perform the signed shift operations\n+    result = lvalInt >> rvalInt;\n+    if (n.getType() == Token.LSH) {\n+        result = lvalInt << rvalInt;\n+    }\n+}\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "error: variable lval is already defined in method tryFoldShift(Node,Node,Node)",
    "test_result": "ERROR"
}