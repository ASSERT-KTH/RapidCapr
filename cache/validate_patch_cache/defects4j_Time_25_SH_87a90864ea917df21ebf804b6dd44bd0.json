{
    "patch": "                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    int offsetBefore = getOffset(nextLocal - 1);\n                    int offsetAfter = getOffset(nextLocal);\n                    if (offsetBefore == offsetAfter) {\n                        // we have a simple gap, so use the offsetBefore\n                        return offsetBefore;\n                    }\n                    // the transition is a overlap, return the original offset\n                    return offsetLocal;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5c2e9da4 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,18 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    int offsetBefore = getOffset(nextLocal - 1);\n+                    int offsetAfter = getOffset(nextLocal);\n+                    if (offsetBefore == offsetAfter) {\n+                        // we have a simple gap, so use the offsetBefore\n+                        return offsetBefore;\n+                    }\n+                    // the transition is a overlap, return the original offset\n+                    return offsetLocal;\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}