{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            if (typeToInfer.isNominalType()) {\n              String typeName = typeToInfer.toString();\n              FunctionType nomFn = getRegistry().getTypeByName(typeName).getConstructor();\n              if (nomFn != null && !nomFn.isGenericConstructor()) {\n                nomFn.getScope().getAllLocals().putAll(scope);\n              }\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..6a1c65f6 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1129,11 +1129,19 @@ class TypeInference\n               typeToInfer =\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n+            if (typeToInfer.isNominalType()) {\n+              String typeName = typeToInfer.toString();\n+              FunctionType nomFn = getRegistry().getTypeByName(typeName).getConstructor();\n+              if (nomFn != null && !nomFn.isGenericConstructor()) {\n+                nomFn.getScope().getAllLocals().putAll(scope);\n+              }\n+            }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}