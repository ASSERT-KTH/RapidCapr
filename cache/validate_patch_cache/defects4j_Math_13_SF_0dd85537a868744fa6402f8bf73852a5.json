{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int maxIter = 100;\n    final double tol = 1e-6;\n    final int n = m.getRowDimension();\n\n    // Compute the singular value decomposition of the input matrix\n    SingularValueDecomposition svd = new SingularValueDecomposition(m);\n    RealMatrix U = svd.getU();\n    RealMatrix V = svd.getV();\n    RealMatrix S = svd.getS();\n\n    // Set small singular values to zero to ensure a positive-definite square root\n    for (int i = 0; i < n; i++) {\n        double s = S.getEntry(i, i);\n        if (s < tol) {\n            S.setEntry(i, i, 0.0);\n        } else {\n            S.setEntry(i, i, Math.sqrt(s));\n        }\n    }\n\n    // Iterate to compute the matrix square root\n    RealMatrix A = U.multiply(S);\n    RealMatrix B = A.multiply(V.transpose());\n    RealMatrix X = B;\n    for (int i = 0; i < maxIter; i++) {\n        RealMatrix Y = 0.5 * (X.inverse().add(B));\n        if (X.subtract(Y).getNorm() < tol) {\n            return Y;\n        } else {\n            X = Y;\n        }\n    }\n\n    throw new RuntimeException(\"Square root computation did not converge within \" + maxIter + \" iterations.\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..488faf905 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,40 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int maxIter = 100;\n+    final double tol = 1e-6;\n+    final int n = m.getRowDimension();\n+\n+    // Compute the singular value decomposition of the input matrix\n+    SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+    RealMatrix U = svd.getU();\n+    RealMatrix V = svd.getV();\n+    RealMatrix S = svd.getS();\n+\n+    // Set small singular values to zero to ensure a positive-definite square root\n+    for (int i = 0; i < n; i++) {\n+        double s = S.getEntry(i, i);\n+        if (s < tol) {\n+            S.setEntry(i, i, 0.0);\n+        } else {\n+            S.setEntry(i, i, Math.sqrt(s));\n+        }\n+    }\n+\n+    // Iterate to compute the matrix square root\n+    RealMatrix A = U.multiply(S);\n+    RealMatrix B = A.multiply(V.transpose());\n+    RealMatrix X = B;\n+    for (int i = 0; i < maxIter; i++) {\n+        RealMatrix Y = 0.5 * (X.inverse().add(B));\n+        if (X.subtract(Y).getNorm() < tol) {\n+            return Y;\n+        } else {\n+            X = Y;\n+        }\n     }\n+\n+    throw new RuntimeException(\"Square root computation did not converge within \" + maxIter + \" iterations.\");\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}