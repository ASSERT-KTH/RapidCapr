{
    "patch": "private double calculateAsymptoticPValue(final double Umin, final int n1, final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n     \n    double n1n2prod = n1 * n2;\n    double c1 = n1*n2prod*(n1+n2+1)/6.0;\n    double c2 = c1/n1n2prod;\n    double c3 = 1+((c1-c2)*(1+((c1-2*c2)*(1+((c1-3*c2)*(1+((c1-4*c2)*(1+((c1-5*c2)/c2))))))));\n    double diff=n1n2prod-Umin;\n    double signdiff=diff>0?1:-1;\n    double Zsig=2*signdiff*Math.pow(Math.abs(diff)+1/2.0,1/2.0)/Math.pow(n1n2prod*c3,1/6.0);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    \n    return 2 * standardNormal.cumulativeProbability(-Math.abs(Zsig));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\nindex ce694ce8f..bc0225429 100644\n--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n@@ -165,23 +165,20 @@ public class MannWhitneyUTest {\n      * @throws MaxCountExceededException if the maximum number of\n      * iterations is exceeded\n      */\n-    private double calculateAsymptoticPValue(final double Umin,\n-                                             final int n1,\n-                                             final int n2)\n+private double calculateAsymptoticPValue(final double Umin, final int n1, final int n2)\n         throws ConvergenceException, MaxCountExceededException {\n-\n-        final int n1n2prod = n1 * n2;\n-\n-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n-        final double EU = n1n2prod / 2.0;\n-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n-\n-        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n-\n-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n-\n-        return 2 * standardNormal.cumulativeProbability(z);\n-    }\n+     \n+    double n1n2prod = n1 * n2;\n+    double c1 = n1*n2prod*(n1+n2+1)/6.0;\n+    double c2 = c1/n1n2prod;\n+    double c3 = 1+((c1-c2)*(1+((c1-2*c2)*(1+((c1-3*c2)*(1+((c1-4*c2)*(1+((c1-5*c2)/c2))))))));\n+    double diff=n1n2prod-Umin;\n+    double signdiff=diff>0?1:-1;\n+    double Zsig=2*signdiff*Math.pow(Math.abs(diff)+1/2.0,1/2.0)/Math.pow(n1n2prod*c3,1/6.0);\n+    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n+    \n+    return 2 * standardNormal.cumulativeProbability(-Math.abs(Zsig));\n+}\n \n     /**\n      * Returns the asymptotic <i>observed significance level</i>, or <a href=",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}