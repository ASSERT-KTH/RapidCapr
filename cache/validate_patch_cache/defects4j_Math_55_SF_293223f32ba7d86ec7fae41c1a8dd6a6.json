{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double s1 = v1.getNorm();\n    final double s2 = v2.getNorm();\n    if (s1 == 0 || s2 == 0) {\n        // at least one vector is null or close to null, we can't compute the cross product\n        throw new MathIllegalArgumentException(\n                LocalizedFormats.ZERO_NORM_FOR_CROSS_PRODUCT, s1, s2);\n    }\n    final Vector3D u1 = v1.scalarMultiply(1 / s1);\n    final Vector3D u2 = v2.scalarMultiply(1 / s2);\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    final double rho;\n    if (FastMath.abs(u1.getY()) > FastMath.abs(u1.getX())) {\n        rho = -u1.getZ() / u1.getY();\n    } else {\n        rho = u1.getX() / u1.getY();\n    }\n\n    // compute v3 = v1 - rho v2\n    final Vector3D v3 = new Vector3D(u1.getX() + rho * u1.getY(),\n                                     u1.getY() - rho * u1.getX(),\n                                     u1.getZ());\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v3.getY() * u2.getZ() - v3.getZ() * u2.getY(),\n                        v3.getZ() * u2.getX() - v3.getX() * u2.getZ(),\n                        v3.getX() * u2.getY() - v3.getY() * u2.getX());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..318354ac7 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,43 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double s1 = v1.getNorm();\n+    final double s2 = v2.getNorm();\n+    if (s1 == 0 || s2 == 0) {\n+        // at least one vector is null or close to null, we can't compute the cross product\n+        throw new MathIllegalArgumentException(\n+                LocalizedFormats.ZERO_NORM_FOR_CROSS_PRODUCT, s1, s2);\n+    }\n+    final Vector3D u1 = v1.scalarMultiply(1 / s1);\n+    final Vector3D u2 = v2.scalarMultiply(1 / s2);\n+\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    final double rho;\n+    if (FastMath.abs(u1.getY()) > FastMath.abs(u1.getX())) {\n+        rho = -u1.getZ() / u1.getY();\n+    } else {\n+        rho = u1.getX() / u1.getY();\n+    }\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    // compute v3 = v1 - rho v2\n+    final Vector3D v3 = new Vector3D(u1.getX() + rho * u1.getY(),\n+                                     u1.getY() - rho * u1.getX(),\n+                                     u1.getZ());\n \n-  }\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    return new Vector3D(v3.getY() * u2.getZ() - v3.getZ() * u2.getY(),\n+                        v3.getZ() * u2.getX() - v3.getX() * u2.getZ(),\n+                        v3.getX() * u2.getY() - v3.getY() * u2.getX());\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}