{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        String functionName = child.getString();\n        if (!changed.contains(functionName)) {\n          changed.add(functionName);\n          Node scope = node.getEnclosingScope();\n          Node functionNode = scope.getFirstChild();\n          while (functionNode != null) {\n            if (functionNode.getType() == Token.FUNCTION &&\n                functionNode.getFirstChild().getString().equals(functionName)) {\n              findCalledFunctions(functionNode.getLastChild(), changed);\n              break;\n            }\n            functionNode = functionNode.getNext();\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..9b64f899 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -777,7 +777,20 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+        String functionName = child.getString();\n+        if (!changed.contains(functionName)) {\n+          changed.add(functionName);\n+          Node scope = node.getEnclosingScope();\n+          Node functionNode = scope.getFirstChild();\n+          while (functionNode != null) {\n+            if (functionNode.getType() == Token.FUNCTION &&\n+                functionNode.getFirstChild().getString().equals(functionName)) {\n+              findCalledFunctions(functionNode.getLastChild(), changed);\n+              break;\n+            }\n+            functionNode = functionNode.getNext();\n+          }\n+        }\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}