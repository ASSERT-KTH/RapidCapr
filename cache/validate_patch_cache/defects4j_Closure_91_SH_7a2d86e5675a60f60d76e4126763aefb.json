{
    "patch": "      if (NodeUtil.isGet(lhs)) {\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        Node llhs = lhs.getFirstChild();\n        if (llhs.getType() == Token.GETPROP &&\n            llhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        Node parentOfLhs = lhs.getParent();\n        int parentOfLhsType = parentOfLhs == null ? Token.EMPTY : parentOfLhs.getType();\n        if (parentOfLhsType == Token.OBJECTLIT &&\n            parentOfLhs.getParent().getType() == Token.EXPR_RESULT &&\n            parentOfLhs.getNext() == null &&\n            NodeUtil.getEnclosingType(n) == null) {\n          // Bails out if the function is used for assigning to a object field\n          // that is being created in the same scope.\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..189923d5 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,27 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(lhs)) {\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        Node llhs = lhs.getFirstChild();\n+        if (llhs.getType() == Token.GETPROP &&\n+            llhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        Node parentOfLhs = lhs.getParent();\n+        int parentOfLhsType = parentOfLhs == null ? Token.EMPTY : parentOfLhs.getType();\n+        if (parentOfLhsType == Token.OBJECTLIT &&\n+            parentOfLhs.getParent().getType() == Token.EXPR_RESULT &&\n+            parentOfLhs.getNext() == null &&\n+            NodeUtil.getEnclosingType(n) == null) {\n+          // Bails out if the function is used for assigning to a object field\n+          // that is being created in the same scope.\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}