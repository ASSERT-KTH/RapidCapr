{
    "patch": "if (cfa != null) {\n  if (node.getNext() != null) {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(node.getNext()));\n  } else {\n    Node parent = node.getParent();\n    while (parent != null && !NodeUtil.isStatementBlock(parent.getType())) {\n      parent = parent.getParent();\n    }\n    if (parent != null) {\n      cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(node, parent, cfa));\n    }\n  }\n} else {\n  Node parent = node.getParent();\n  while (parent != null && !NodeUtil.isStatementBlock(parent.getType())) {\n    parent = parent.getParent();\n  }\n  if (parent != null) {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(node, parent, null));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..05f4baeb 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,27 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  if (node.getNext() != null) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(node.getNext()));\n+  } else {\n+    Node parent = node.getParent();\n+    while (parent != null && !NodeUtil.isStatementBlock(parent.getType())) {\n+      parent = parent.getParent();\n+    }\n+    if (parent != null) {\n+      cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(node, parent, cfa));\n+    }\n+  }\n+} else {\n+  Node parent = node.getParent();\n+  while (parent != null && !NodeUtil.isStatementBlock(parent.getType())) {\n+    parent = parent.getParent();\n+  }\n+  if (parent != null) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(node, parent, null));\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: variable parent is already defined in method computeFollowNode(Node,Node,ControlFlowAnalysis)",
    "test_result": "ERROR"
}