{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    // Check if parent should be traversed\n    if (parent != null && NODE_KINDS_NOT_TO_TRAVERSE.contains(parent.getToken())) {\n        return false;\n    }\n    \n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n            (jsDoc.isConstructor() ||\n              jsDoc.hasThisType() ||\n              jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them. e.g.,\n        // var a = function() { }; // or\n        // function a() {} // or\n        // a.x = function() {};\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK ||\n              pType == Token.SCRIPT ||\n              pType == Token.NAME ||\n              pType == Token.ASSIGN)) {\n            return false;\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle\n            // nested assignments properly (e.g., (a = this).property = c;),\n            // assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            // Only traverse the right side if it's not an assignment to a prototype\n            // property or subproperty.\n            if (lhs.getType() == Token.GETPROP &&\n                  lhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n            }\n            if (lhs.getQualifiedName() != null && (lhs.getQualifiedName().contains(\".prototype.\"))) {\n                return false;\n            }\n        }\n    }\n\n   return true;\n}\n\nprivate static final ImmutableSet<Token> NODE_KINDS_NOT_TO_TRAVERSE =\n        ImmutableSet.of(\n                Token.VAR,\n                Token.FUNCTION,\n                Token.BLOCK,\n                Token.DOWHILE,\n                Token.WHILE,\n                Token.FOR,\n                Token.FOR_OF,\n                Token.FOR_IN,\n                Token.IF,\n                Token.LET,\n                Token.CONST,\n                Token.CATCH,\n                Token.SWITCH,\n                Token.CASE,\n                Token.TRY,\n                Token.DEFAULT_CASE,\n                Token.SCRIPT,\n                Token.ARRAYLIT,\n                Token.OBJECTLIT,\n                Token.NEW,\n                Token.EXPR_RESULT,\n                Token.RETURN,\n                Token.CONTINUE,\n                Token.HOOK,\n                Token.THROW);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..f9cf3383 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,92 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n \n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+    // Check if parent should be traversed\n+    if (parent != null && NODE_KINDS_NOT_TO_TRAVERSE.contains(parent.getToken())) {\n         return false;\n-      }\n+    }\n+    \n+    if (n.getType() == Token.FUNCTION) {\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null &&\n+            (jsDoc.isConstructor() ||\n+              jsDoc.hasThisType() ||\n+              jsDoc.isOverride())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+        // Don't traverse functions unless they would normally\n+        // be able to have a @this annotation associated with them. e.g.,\n+        // var a = function() { }; // or\n+        // function a() {} // or\n+        // a.x = function() {};\n+        int pType = parent.getType();\n+        if (!(pType == Token.BLOCK ||\n+              pType == Token.SCRIPT ||\n+              pType == Token.NAME ||\n+              pType == Token.ASSIGN)) {\n+            return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment. To handle\n+            // nested assignments properly (e.g., (a = this).property = c;),\n+            // assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+        } else {\n+            // Only traverse the right side if it's not an assignment to a prototype\n+            // property or subproperty.\n+            if (lhs.getType() == Token.GETPROP &&\n+                  lhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+            }\n+            if (lhs.getQualifiedName() != null && (lhs.getQualifiedName().contains(\".prototype.\"))) {\n+                return false;\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n     }\n \n-    return true;\n-  }\n+   return true;\n+}\n+\n+private static final ImmutableSet<Token> NODE_KINDS_NOT_TO_TRAVERSE =\n+        ImmutableSet.of(\n+                Token.VAR,\n+                Token.FUNCTION,\n+                Token.BLOCK,\n+                Token.DOWHILE,\n+                Token.WHILE,\n+                Token.FOR,\n+                Token.FOR_OF,\n+                Token.FOR_IN,\n+                Token.IF,\n+                Token.LET,\n+                Token.CONST,\n+                Token.CATCH,\n+                Token.SWITCH,\n+                Token.CASE,\n+                Token.TRY,\n+                Token.DEFAULT_CASE,\n+                Token.SCRIPT,\n+                Token.ARRAYLIT,\n+                Token.OBJECTLIT,\n+                Token.NEW,\n+                Token.EXPR_RESULT,\n+                Token.RETURN,\n+                Token.CONTINUE,\n+                Token.HOOK,\n+                Token.THROW);\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}