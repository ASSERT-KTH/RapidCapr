{
    "patch": "  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 10;\n\n  public boolean canBeCalled() {\n    return isRegexpType();\n  }\n\n  private String toStringHelperImpl(boolean forAnnotations, Set<ObjectType> visited) {\n    if (visited.contains(this)) {\n      return \"{...}\";\n    }\n    visited.add(this);\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        ObjectType propertyType = getPropertyType(property);\n        sb.append(propertyType.toStringHelperImpl(forAnnotations, new HashSet<>(visited)));\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return toStringHelperImpl(forAnnotations, new HashSet<>());\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..a40ca049 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,12 +345,17 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n+  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 10;\n+\n   public boolean canBeCalled() {\n     return isRegexpType();\n   }\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+  private String toStringHelperImpl(boolean forAnnotations, Set<ObjectType> visited) {\n+    if (visited.contains(this)) {\n+      return \"{...}\";\n+    }\n+    visited.add(this);\n     if (hasReferenceName()) {\n       return getReferenceName();\n     } else if (prettyPrint) {\n@@ -377,7 +382,8 @@ class PrototypeObjectType extends ObjectType {\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        ObjectType propertyType = getPropertyType(property);\n+        sb.append(propertyType.toStringHelperImpl(forAnnotations, new HashSet<>(visited)));\n \n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n@@ -395,6 +401,11 @@ class PrototypeObjectType extends ObjectType {\n     }\n   }\n \n+  @Override\n+  String toStringHelper(boolean forAnnotations) {\n+    return toStringHelperImpl(forAnnotations, new HashSet<>());\n+  }\n+\n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;\n   }",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}