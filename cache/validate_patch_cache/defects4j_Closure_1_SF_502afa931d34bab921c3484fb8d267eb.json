{
    "patch": "import com.google.common.base.Preconditions;\nimport com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.StaticRef;\n\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = NodeUtil.getFunctionParameters(function);\n    boolean modifyCallers =\n            modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers && argList != null) {\n        int numArgs = argList.getChildCount();\n        if (numArgs > 0) {\n            Node lastArg = null;\n            for (int i = numArgs - 1; i >= 0; i--) {\n                lastArg = argList.getChildAtIndex(i);\n                Var var = fnScope.getVar(lastArg.getString());\n                if (!referenced.contains(var)) {\n                    argList.removeChild(lastArg);\n                    compiler.reportCodeChange();\n                } else {\n                    break;\n                }\n            }\n            if (lastArg != null) {\n                lastArg.putBooleanProp(Node.IS_LAST_ARG, true);\n            }\n        }\n    } else if (modifyCallers) {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n\n    // If the function refers to any local variables or function arguments, we must\n    // add an @this tag to the JSDoc. As it stands, the JSDoc is incorrect.\n    if (!referenced.isEmpty() && !function.getBooleanProp(Node.ANALYZED_DURING_GTI)) {\n        Set<StaticRef> thisVars = getThisVars(function);\n        if (!thisVars.isEmpty()) {\n            JSDocInfo functionJSDoc = NodeUtil.getBestJSDocInfo(function);\n            if (functionJSDoc == null) {\n                functionJSDoc = makeUntypedFunctionJSDoc();\n                function.setJSDocInfo(functionJSDoc);\n            }\n            // Add parameters as JSDoc nodes.\n            for (StaticRef ref : thisVars) {\n                if (!ref.getNode().isFunction()) {\n                    functionJSDoc.recordThisType(\n                            new JSTypeExpression(new Node(Token.BANG, NodeUtil.getName(ref.getNode())),\n                                    ref.getNode().getLineno()));\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..7b96df0d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,7 +366,12 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+import com.google.common.base.Preconditions;\n+import com.google.javascript.jscomp.NodeUtil;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.StaticRef;\n+\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     // Notice that removing unreferenced function args breaks\n     // Function.prototype.length. In advanced mode, we don't really care\n     // about this: we consider \"length\" the equivalent of reflecting on\n@@ -381,29 +386,56 @@ class RemoveUnusedVars\n \n     Preconditions.checkState(function.isFunction());\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+        // The parameters object literal setters can not be removed.\n+        return;\n+    }\n+\n+    Node argList = NodeUtil.getFunctionParameters(function);\n+    boolean modifyCallers =\n+            modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers && argList != null) {\n+        int numArgs = argList.getChildCount();\n+        if (numArgs > 0) {\n+            Node lastArg = null;\n+            for (int i = numArgs - 1; i >= 0; i--) {\n+                lastArg = argList.getChildAtIndex(i);\n+                Var var = fnScope.getVar(lastArg.getString());\n+                if (!referenced.contains(var)) {\n+                    argList.removeChild(lastArg);\n+                    compiler.reportCodeChange();\n+                } else {\n+                    break;\n+                }\n+            }\n+            if (lastArg != null) {\n+                lastArg.putBooleanProp(Node.IS_LAST_ARG, true);\n+            }\n         }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+    } else if (modifyCallers) {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+\n+    // If the function refers to any local variables or function arguments, we must\n+    // add an @this tag to the JSDoc. As it stands, the JSDoc is incorrect.\n+    if (!referenced.isEmpty() && !function.getBooleanProp(Node.ANALYZED_DURING_GTI)) {\n+        Set<StaticRef> thisVars = getThisVars(function);\n+        if (!thisVars.isEmpty()) {\n+            JSDocInfo functionJSDoc = NodeUtil.getBestJSDocInfo(function);\n+            if (functionJSDoc == null) {\n+                functionJSDoc = makeUntypedFunctionJSDoc();\n+                function.setJSDocInfo(functionJSDoc);\n+            }\n+            // Add parameters as JSDoc nodes.\n+            for (StaticRef ref : thisVars) {\n+                if (!ref.getNode().isFunction()) {\n+                    functionJSDoc.recordThisType(\n+                            new JSTypeExpression(new Node(Token.BANG, NodeUtil.getName(ref.getNode())),\n+                                    ref.getNode().getLineno()));\n+                }\n+            }\n+        }\n+    }\n+}\n \n \n   /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}