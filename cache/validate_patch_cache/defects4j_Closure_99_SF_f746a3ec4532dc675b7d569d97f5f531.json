{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() {}; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (pType == Token.FUNCTION ||\n          pType == Token.COMMA ||\n          pType == Token.EMPTY ||\n          pType == Token.EXPR_RESULT ||\n          pType == Token.LP ||\n          pType == Token.IF ||\n          pType == Token.FOR ||\n          pType == Token.WHILE ||\n          pType == Token.DO ||\n          pType == Token.SWITCH ||\n          pType == Token.TRY ||\n          pType == Token.CATCH ||\n          pType == Token.NEW ||\n          pType == Token.RETURN ||\n          pType == Token.THROW ||\n          pType == Token.CONTINUE ||\n          pType == Token.BREAK ||\n          pType == Token.NAME ||\n          pType == Token.BLOCK) {\n        // Traverse function properties, expressions involving commas,\n        // empty statements, and expression results.\n        return true;\n      } else if (pType == Token.ASSIGN || pType == Token.VAR) {\n        // Traverse right-hand side of an assignment or variable declaration\n        // only if it's not an assignment to a prototype property or subproperty.\n        Node lhs = parent.getFirstChild();\n        if (n != lhs &&\n            (lhs.getType() == Token.GETPROP &&\n             lhs.getLastChild().getString().equals(\"prototype\")) ||\n            (lhs.getQualifiedName() != null &&\n             lhs.getQualifiedName().contains(\".prototype.\"))) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        // Do not traverse any other node types.\n        return false;\n      }\n    } else {\n      // Traverse non-function nodes.\n      return true;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..b2a34648 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,8 +81,7 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n       // Don't traverse functions that are constructors or have the @this\n       // or @override annotation.\n@@ -96,43 +95,53 @@ final class CheckGlobalThis implements Callback {\n \n       // Don't traverse functions unless they would normally\n       // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n+      // var a = function() {}; // or\n       // function a() {} // or\n       // a.x = function() {};\n       int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+      if (pType == Token.FUNCTION ||\n+          pType == Token.COMMA ||\n+          pType == Token.EMPTY ||\n+          pType == Token.EXPR_RESULT ||\n+          pType == Token.LP ||\n+          pType == Token.IF ||\n+          pType == Token.FOR ||\n+          pType == Token.WHILE ||\n+          pType == Token.DO ||\n+          pType == Token.SWITCH ||\n+          pType == Token.TRY ||\n+          pType == Token.CATCH ||\n+          pType == Token.NEW ||\n+          pType == Token.RETURN ||\n+          pType == Token.THROW ||\n+          pType == Token.CONTINUE ||\n+          pType == Token.BREAK ||\n+          pType == Token.NAME ||\n+          pType == Token.BLOCK) {\n+        // Traverse function properties, expressions involving commas,\n+        // empty statements, and expression results.\n+        return true;\n+      } else if (pType == Token.ASSIGN || pType == Token.VAR) {\n+        // Traverse right-hand side of an assignment or variable declaration\n+        // only if it's not an assignment to a prototype property or subproperty.\n+        Node lhs = parent.getFirstChild();\n+        if (n != lhs &&\n+            (lhs.getType() == Token.GETPROP &&\n+             lhs.getLastChild().getString().equals(\"prototype\")) ||\n+            (lhs.getQualifiedName() != null &&\n+             lhs.getQualifiedName().contains(\".prototype.\"))) {\n+          return false;\n+        } else {\n+          return true;\n         }\n       } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n+        // Do not traverse any other node types.\n+        return false;\n       }\n+    } else {\n+      // Traverse non-function nodes.\n+      return true;\n     }\n-\n-    return true;\n   }\n \n   public void visit(NodeTraversal t, Node n, Node parent) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}