{
    "patch": "public double getTypedPercent(String input, String expectedOutput) {\n    String[] inputWords = input.split(\" \");\n    String[] expectedWords = expectedOutput.split(\" \");\n    int numCorrect = 0;\n    for (int i = 0; i < inputWords.length; i++) {\n        if (expectedWords.length <= i) {\n            break;\n        }\n        if (inputWords[i].equals(expectedWords[i])) {\n            numCorrect++;\n        }\n    }\n    double percentCorrect = ((double)numCorrect / (double)inputWords.length) * 100.0;\n    return percentCorrect;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..818e3c60 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String input, String expectedOutput) {\n+    String[] inputWords = input.split(\" \");\n+    String[] expectedWords = expectedOutput.split(\" \");\n+    int numCorrect = 0;\n+    for (int i = 0; i < inputWords.length; i++) {\n+        if (expectedWords.length <= i) {\n+            break;\n+        }\n+        if (inputWords[i].equals(expectedWords[i])) {\n+            numCorrect++;\n+        }\n+    }\n+    double percentCorrect = ((double)numCorrect / (double)inputWords.length) * 100.0;\n+    return percentCorrect;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}