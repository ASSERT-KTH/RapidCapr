{
    "patch": "\nString[] getProp(String[] data) {\n    String[] result = new String[data.length];\n    for(int i = 0; i < data.length; i++) {\n        String[] line = data[i].split(\";\");\n        if(line.length >= 2) {\n            result[i] = line[1];\n        }\n        else {\n            result[i] = \"\";\n        }\n    }\n    return result;\n}\n",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..9e1bd56f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n+String[] getProp(String[] data) {\n+    String[] result = new String[data.length];\n+    for(int i = 0; i < data.length; i++) {\n+        String[] line = data[i].split(\";\");\n+        if(line.length >= 2) {\n+            result[i] = line[1];\n+        }\n+        else {\n+            result[i] = \"\";\n+        }\n+    }\n+    return result;\n+}\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}