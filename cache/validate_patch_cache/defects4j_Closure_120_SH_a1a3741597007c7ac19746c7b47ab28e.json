{
    "patch": "boolean isAssignedOnceInLifetime() {\n    Reference ref = getOneAndOnlyAssignment();\n    if (ref == null) {\n       return false;\n    }\n\n    // Make sure this assignment is not in a loop.\n    for (BasicBlock block = ref.getBasicBlock();\n         block != null; block = block.getParent()) {\n       if (block.isFunction) {\n          // Don't assume assignments in inner function scopes won't\n          // be executed multiple times.\n          if (block != ref.getBasicBlock() && !block.isGlobal()) {\n             return false;\n          }\n          break;\n       } else if (block.isLoop) {\n          return false;\n       }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..46c2d32d 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,29 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+boolean isAssignedOnceInLifetime() {\n+    Reference ref = getOneAndOnlyAssignment();\n+    if (ref == null) {\n+       return false;\n+    }\n+\n+    // Make sure this assignment is not in a loop.\n+    for (BasicBlock block = ref.getBasicBlock();\n+         block != null; block = block.getParent()) {\n+       if (block.isFunction) {\n+          // Don't assume assignments in inner function scopes won't\n+          // be executed multiple times.\n+          if (block != ref.getBasicBlock() && !block.isGlobal()) {\n+             return false;\n+          }\n+          break;\n+       } else if (block.isLoop) {\n+          return false;\n+       }\n+    }\n+\n+    return true;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}