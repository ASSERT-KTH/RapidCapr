{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get the initial offset at the given local time\n    int initialOffset = getOffset(instantLocal);\n\n    // Find the next and previous transition times\n    long nextTransition = nextTransition(instantLocal);\n    long prevTransition = previousTransition(instantLocal);\n\n    // Check if we have a direct match\n    if (initialOffset == getOffset(nextTransition)) {\n        return initialOffset;\n    }\n\n    // Calculate the previous and next offsets\n    int offsetPrev = getOffset(prevTransition);\n    int offsetNext = getOffset(nextTransition);\n\n    // Check if we are within the gap (when we move to a later time)\n    if (offsetPrev < initialOffset && initialOffset < offsetNext) {\n        long gapEnd = nextTransition - offsetNext;\n        if (instantLocal == gapEnd) {\n            return offsetNext;\n        }\n        long gapStart = prevTransition - offsetPrev;\n        if (instantLocal == gapStart) {\n            return offsetPrev;\n        }\n    }\n\n    // Choose the transition based on whether we're in a gap or overlap\n    long transition = (initialOffset < offsetPrev) ? prevTransition : nextTransition;\n\n    // Calculate the adjusted offset\n    int afterOffset = getOffset(transition);\n\n    // Correctly handle cases where the local time is equal to the transition time\n    if (afterOffset == initialOffset) {\n        if (transition == nextTransition && instantLocal == nextTransition) {\n            return afterOffset;\n        } else if (transition == prevTransition && instantLocal == instantLocal == prevTransition) {\n            return afterOffset;\n        }\n    }\n    \n    // Return the adjusted offset\n    return afterOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..96a3a9df 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,54 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get the initial offset at the given local time\n+    int initialOffset = getOffset(instantLocal);\n+\n+    // Find the next and previous transition times\n+    long nextTransition = nextTransition(instantLocal);\n+    long prevTransition = previousTransition(instantLocal);\n+\n+    // Check if we have a direct match\n+    if (initialOffset == getOffset(nextTransition)) {\n+        return initialOffset;\n+    }\n+\n+    // Calculate the previous and next offsets\n+    int offsetPrev = getOffset(prevTransition);\n+    int offsetNext = getOffset(nextTransition);\n+\n+    // Check if we are within the gap (when we move to a later time)\n+    if (offsetPrev < initialOffset && initialOffset < offsetNext) {\n+        long gapEnd = nextTransition - offsetNext;\n+        if (instantLocal == gapEnd) {\n+            return offsetNext;\n+        }\n+        long gapStart = prevTransition - offsetPrev;\n+        if (instantLocal == gapStart) {\n+            return offsetPrev;\n         }\n-        return offsetAdjusted;\n     }\n \n+    // Choose the transition based on whether we're in a gap or overlap\n+    long transition = (initialOffset < offsetPrev) ? prevTransition : nextTransition;\n+\n+    // Calculate the adjusted offset\n+    int afterOffset = getOffset(transition);\n+\n+    // Correctly handle cases where the local time is equal to the transition time\n+    if (afterOffset == initialOffset) {\n+        if (transition == nextTransition && instantLocal == nextTransition) {\n+            return afterOffset;\n+        } else if (transition == prevTransition && instantLocal == instantLocal == prevTransition) {\n+            return afterOffset;\n+        }\n+    }\n+    \n+    // Return the adjusted offset\n+    return afterOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "error: incomparable types: boolean and long",
    "test_result": "ERROR"
}