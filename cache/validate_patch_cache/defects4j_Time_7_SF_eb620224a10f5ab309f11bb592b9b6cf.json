{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono;\n    DateTimeZone zone;\n    long instantLocal;\n\n    if (instant.isSupported(DateTimeFieldType.year())) {\n        chrono = instant.getChronology();\n        zone = chrono.getZone();\n        instantLocal = instant.getMillis();\n    } else {\n        chrono = selectChronology(null);\n        zone = null;\n        instantLocal = 0L;\n    }\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));\n\n    int newPos = parser.parseInto(bucket, text, position);\n\n    if (newPos >= 0) {\n        if (iOffsetParsed) {\n            int parsedOffset = bucket.getOffsetInteger().intValue();\n            zone = DateTimeZone.forOffsetMillis(parsedOffset);\n        } else if (bucket.getZone() != null) {\n            zone = bucket.getZone();\n        }\n\n        if (instant.isSupported(DateTimeFieldType.year()) && bucket.getPivotYear() != null) {\n            chrono = selectChronology(bucket.getChronology());\n        } else {\n            chrono = selectChronology(chrono);\n        }\n\n        instantLocal = bucket.computeMillis(true, text);\n        if (iOffsetParsed && bucket.getOffsetInteger().intValue() != zone.getOffset(instantLocal)) {\n            zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger().intValue());\n            InstantZoneDateTimeField field = new InstantZoneDateTimeField(zone);\n            instantLocal = field.set(instantLocal, bucket.getOffsetInteger().intValue());\n        } else if (zone != null) {\n            InstantZoneDateTimeField field = new InstantZoneDateTimeField(zone);\n            instantLocal = field.set(instantLocal, zone.getOffset(instantLocal));\n        } else {\n            instantLocal = chrono.getZone().getMillisKeepLocal(zone, instantLocal);\n        }\n\n        instant.setMillis(instantLocal);\n        instant.setChronology(chrono);\n\n        if (zone != null) {\n            instant.setZone(zone);\n        } else {\n            instant.setZone(null);\n        }\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..f93ce074 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,70 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono;\n+    DateTimeZone zone;\n+    long instantLocal;\n+\n+    if (instant.isSupported(DateTimeFieldType.year())) {\n+        chrono = instant.getChronology();\n+        zone = chrono.getZone();\n+        instantLocal = instant.getMillis();\n+    } else {\n+        chrono = selectChronology(null);\n+        zone = null;\n+        instantLocal = 0L;\n+    }\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));\n+\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    if (newPos >= 0) {\n+        if (iOffsetParsed) {\n+            int parsedOffset = bucket.getOffsetInteger().intValue();\n+            zone = DateTimeZone.forOffsetMillis(parsedOffset);\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+            zone = bucket.getZone();\n         }\n+\n+        if (instant.isSupported(DateTimeFieldType.year()) && bucket.getPivotYear() != null) {\n+            chrono = selectChronology(bucket.getChronology());\n+        } else {\n+            chrono = selectChronology(chrono);\n+        }\n+\n+        instantLocal = bucket.computeMillis(true, text);\n+        if (iOffsetParsed && bucket.getOffsetInteger().intValue() != zone.getOffset(instantLocal)) {\n+            zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger().intValue());\n+            InstantZoneDateTimeField field = new InstantZoneDateTimeField(zone);\n+            instantLocal = field.set(instantLocal, bucket.getOffsetInteger().intValue());\n+        } else if (zone != null) {\n+            InstantZoneDateTimeField field = new InstantZoneDateTimeField(zone);\n+            instantLocal = field.set(instantLocal, zone.getOffset(instantLocal));\n+        } else {\n+            instantLocal = chrono.getZone().getMillisKeepLocal(zone, instantLocal);\n+        }\n+\n+        instant.setMillis(instantLocal);\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+\n+        if (zone != null) {\n+            instant.setZone(zone);\n+        } else {\n+            instant.setZone(null);\n         }\n-        return newPos;\n     }\n \n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}