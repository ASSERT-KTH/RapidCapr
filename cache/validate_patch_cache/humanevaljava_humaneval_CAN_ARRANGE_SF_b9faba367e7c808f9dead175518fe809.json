{
    "patch": "public static int can_arrange(int[] arr) {\n    int n = arr.length;\n    int first = -1, last = -1;\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] > arr[i + 1]) {\n            if(first == -1) {\n                first = i;\n            }\n            last = i + 1;\n        }\n    }\n    if(first == -1 || (first == 0 && last == n - 1)) {\n        return -1;\n    }\n    if(first == 0) {\n        return last;\n    }\n    if(last == n - 1) {\n        return first;\n    }\n    if(arr[last] > arr[first - 1] && arr[first] < arr[last + 1]) {\n        return -1;                            \n    }\n    if(arr[last] <= arr[first - 1]) {\n        return last;\n    }\n    if(arr[first] >= arr[last + 1]) {\n        return first;\n    }\n    return -1;  // Default case (should never be reached)\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/CAN_ARRANGE.java b/src/main/java/humaneval/buggy/CAN_ARRANGE.java\nindex 8bb1b11..82c473f 100644\n--- a/src/main/java/humaneval/buggy/CAN_ARRANGE.java\n+++ b/src/main/java/humaneval/buggy/CAN_ARRANGE.java\n@@ -13,11 +13,35 @@ package humaneval.buggy;\n  */\n \n public class CAN_ARRANGE {\n-    public static int can_arrange(int[] arr) {\n-        int ind = 1;\n-        for(int i = 0; i < arr.length - 1; i++) {\n-            if(arr[i] < arr[i + 1]) ind = i + 1;\n+public static int can_arrange(int[] arr) {\n+    int n = arr.length;\n+    int first = -1, last = -1;\n+    for(int i = 0; i < n - 1; i++) {\n+        if(arr[i] > arr[i + 1]) {\n+            if(first == -1) {\n+                first = i;\n+            }\n+            last = i + 1;\n         }\n-        return ind;\n     }\n+    if(first == -1 || (first == 0 && last == n - 1)) {\n+        return -1;\n+    }\n+    if(first == 0) {\n+        return last;\n+    }\n+    if(last == n - 1) {\n+        return first;\n+    }\n+    if(arr[last] > arr[first - 1] && arr[first] < arr[last + 1]) {\n+        return -1;                            \n+    }\n+    if(arr[last] <= arr[first - 1]) {\n+        return last;\n+    }\n+    if(arr[first] >= arr[last + 1]) {\n+        return first;\n+    }\n+    return -1;  // Default case (should never be reached)\n+}\n }",
    "result_reason": "   TEST_CAN_ARRANGE.test_0:7 expected:<3> but was:<-1>",
    "test_result": "FAIL"
}