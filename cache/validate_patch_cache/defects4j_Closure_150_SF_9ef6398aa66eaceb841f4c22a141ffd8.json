{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n      \n      attachLiteralTypes(n);\n\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.EXPR_RESULT) {\n            defineDeclaredFunction(n, parent);\n          } else if (NodeUtil.getEnclosingType(n) == Scope.Type.GLOBAL\n                   && !NodeUtil.isFunctionDeclaration(n)) {\n            defineVar(n.getFirstChild(), n);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break;\n      }\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..cc2b8834 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1442,19 +1442,17 @@ final class TypedScopeCreator implements ScopeCreator {\n      */\n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n       if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n+      \n       attachLiteralTypes(n);\n+\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          if (parent.getType() == Token.EXPR_RESULT) {\n+            defineDeclaredFunction(n, parent);\n+          } else if (NodeUtil.getEnclosingType(n) == Scope.Type.GLOBAL\n+                   && !NodeUtil.isFunctionDeclaration(n)) {\n+            defineVar(n.getFirstChild(), n);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n@@ -1462,6 +1460,12 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        default:\n+          break;\n+      }\n+\n+      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+        handleFunctionInputs(parent);\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}