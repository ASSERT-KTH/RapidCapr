{
    "patch": "                SavedField savedField = savedFields[i];\n                MillisProvider provider = savedField.iField.getType().getMillisProvider();\n                if (provider != null) {\n                    // optimized path for arithmetic duration fields\n                    millis = provider.getDurationMillis(savedField.iGetter(), savedField.iValue, millis);\n                } else {\n                    millis = savedField.set(millis, resetFields);\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..4bddf812 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,14 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                SavedField savedField = savedFields[i];\n+                MillisProvider provider = savedField.iField.getType().getMillisProvider();\n+                if (provider != null) {\n+                    // optimized path for arithmetic duration fields\n+                    millis = provider.getDurationMillis(savedField.iGetter(), savedField.iValue, millis);\n+                } else {\n+                    millis = savedField.set(millis, resetFields);\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}