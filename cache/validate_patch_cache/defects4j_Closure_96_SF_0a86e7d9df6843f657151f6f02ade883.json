{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    List<Node> arguments = call.children().skip(1).toList();\n    List<Node> parameters = functionType.getParameters().toList();\n    int numArgs = arguments.size();\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n\n    // Check that each argument matches the corresponding parameter.\n    for (int i = 0; i < Math.min(numArgs, parameters.size()); i++) {\n        Node argument = arguments.get(i);\n        Node parameter = parameters.get(i);\n        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, i + 1);\n    }\n\n    // Check that the number of arguments is within the valid range.\n    if (minArgs <= numArgs && (maxArgs == -1 || numArgs <= maxArgs)) {\n        return;\n    }\n\n    String functionName = validator.getReadableJSTypeName(call.getFirstChild(), false);\n    String numArgsString = String.valueOf(numArgs);\n    String minArgsString = String.valueOf(minArgs);\n    String maxArgsString = maxArgs == -1 ? \"\\u221E\" : String.valueOf(maxArgs);\n\n    if (minArgs == maxArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT, functionName, numArgsString, minArgsString);\n    } else {\n        report(t, call, WRONG_ARGUMENT_COUNT, functionName, numArgsString, minArgsString + \" to \" + maxArgsString);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..0255cb55 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,36 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n-\n-    int numArgs = call.getChildCount() - 1;\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+    List<Node> arguments = call.children().skip(1).toList();\n+    List<Node> parameters = functionType.getParameters().toList();\n+    int numArgs = arguments.size();\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+\n+    // Check that each argument matches the corresponding parameter.\n+    for (int i = 0; i < Math.min(numArgs, parameters.size()); i++) {\n+        Node argument = arguments.get(i);\n+        Node parameter = parameters.get(i);\n+        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, i + 1);\n     }\n-  }\n+\n+    // Check that the number of arguments is within the valid range.\n+    if (minArgs <= numArgs && (maxArgs == -1 || numArgs <= maxArgs)) {\n+        return;\n+    }\n+\n+    String functionName = validator.getReadableJSTypeName(call.getFirstChild(), false);\n+    String numArgsString = String.valueOf(numArgs);\n+    String minArgsString = String.valueOf(minArgs);\n+    String maxArgsString = maxArgs == -1 ? \"\\u221E\" : String.valueOf(maxArgs);\n+\n+    if (minArgs == maxArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT, functionName, numArgsString, minArgsString);\n+    } else {\n+        report(t, call, WRONG_ARGUMENT_COUNT, functionName, numArgsString, minArgsString + \" to \" + maxArgsString);\n+    }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}