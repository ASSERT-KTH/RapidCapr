{
    "patch": "      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // We only care about calls to functions or expressions that potentially modify dependent variables\n        if (NodeUtil.mayEffectMutableState(n)) {\n          return true;\n        }\n\n        // Handle the 'delete' operation\n        if (n.isDelProp() || (n.isExprResult() && n.getFirstChild().isGetElem() && !n.getFirstChild().getLastChild().isString())) {\n          return true;\n        }\n\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..5c6d894a 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -88,18 +88,16 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return false;\n         }\n \n-        // TODO(user): We only care about calls to functions that\n-        // passes one of the dependent variable to a non-side-effect free\n-        // function.\n-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n+        // We only care about calls to functions or expressions that potentially modify dependent variables\n+        if (NodeUtil.mayEffectMutableState(n)) {\n           return true;\n         }\n \n-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+        // Handle the 'delete' operation\n+        if (n.isDelProp() || (n.isExprResult() && n.getFirstChild().isGetElem() && !n.getFirstChild().getLastChild().isString())) {\n           return true;\n         }\n \n-\n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n             return true;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}