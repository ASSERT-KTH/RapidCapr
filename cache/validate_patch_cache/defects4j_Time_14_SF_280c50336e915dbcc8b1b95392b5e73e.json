{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n\n    if (valueToAdd == 0) { // avoid unnecessary computation\n        return values;\n    }\n\n    long instant = 0L;\n\n    int maxDayOfMonth = -1;\n    int dayOfMonthIndex = -1;\n\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        DateTimeFieldType fieldType = partial.getFieldType(i);\n\n        if (fieldType == DateTimeFieldType.monthOfYear()) {\n            // calculate new month and year values\n            int year = iChronology.year().get(instant);\n            int monthOfYear = values[i];\n            int totalMonths = year * 12 + monthOfYear - 1; // number of months since 0 AD\n\n            totalMonths += valueToAdd;\n\n            year = totalMonths / 12;\n            monthOfYear = totalMonths % 12 + 1;\n\n            if (year < iChronology.year().getMinimumValue() ||\n                year > iChronology.year().getMaximumValue()) {\n                throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.year(), String.valueOf(year));\n            }\n\n            if (monthOfYear < iChronology.monthOfYear().getMinimumValue() ||\n                monthOfYear > iChronology.monthOfYear().getMaximumValue()) {\n                throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.monthOfYear(), String.valueOf(monthOfYear));\n            }\n\n            // set the updated year and month values in the instant\n            instant = iChronology.year().set(instant, year);\n            instant = iChronology.monthOfYear().set(instant, monthOfYear);\n\n            // store the day of month value and index\n            maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n            dayOfMonthIndex = i;\n        } else if (fieldType == DateTimeFieldType.dayOfMonth()) {\n            // avoid setting an invalid day of month\n            int dayOfMonth = values[i];\n            dayOfMonth = Math.min(dayOfMonth, maxDayOfMonth);\n\n            instant = fieldType.getField(iChronology).set(instant, dayOfMonth);\n        } else {\n            // set all other fields to their original values\n            instant = fieldType.getField(iChronology).set(instant, values[i]);\n        }\n    }\n\n    return iChronology.get(partial, instant);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..95cf3b2a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,63 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+\n+    if (valueToAdd == 0) { // avoid unnecessary computation\n+        return values;\n+    }\n+\n+    long instant = 0L;\n+\n+    int maxDayOfMonth = -1;\n+    int dayOfMonthIndex = -1;\n+\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        DateTimeFieldType fieldType = partial.getFieldType(i);\n+\n+        if (fieldType == DateTimeFieldType.monthOfYear()) {\n+            // calculate new month and year values\n+            int year = iChronology.year().get(instant);\n+            int monthOfYear = values[i];\n+            int totalMonths = year * 12 + monthOfYear - 1; // number of months since 0 AD\n+\n+            totalMonths += valueToAdd;\n+\n+            year = totalMonths / 12;\n+            monthOfYear = totalMonths % 12 + 1;\n+\n+            if (year < iChronology.year().getMinimumValue() ||\n+                year > iChronology.year().getMaximumValue()) {\n+                throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.year(), String.valueOf(year));\n+            }\n+\n+            if (monthOfYear < iChronology.monthOfYear().getMinimumValue() ||\n+                monthOfYear > iChronology.monthOfYear().getMaximumValue()) {\n+                throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.monthOfYear(), String.valueOf(monthOfYear));\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+\n+            // set the updated year and month values in the instant\n+            instant = iChronology.year().set(instant, year);\n+            instant = iChronology.monthOfYear().set(instant, monthOfYear);\n+\n+            // store the day of month value and index\n+            maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+            dayOfMonthIndex = i;\n+        } else if (fieldType == DateTimeFieldType.dayOfMonth()) {\n+            // avoid setting an invalid day of month\n+            int dayOfMonth = values[i];\n+            dayOfMonth = Math.min(dayOfMonth, maxDayOfMonth);\n+\n+            instant = fieldType.getField(iChronology).set(instant, dayOfMonth);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            // set all other fields to their original values\n+            instant = fieldType.getField(iChronology).set(instant, values[i]);\n         }\n     }\n \n+    return iChronology.get(partial, instant);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "junit.framework.AssertionFailedError: expected:<--02-29> but was:<--02-28>",
    "test_result": "FAIL"
}