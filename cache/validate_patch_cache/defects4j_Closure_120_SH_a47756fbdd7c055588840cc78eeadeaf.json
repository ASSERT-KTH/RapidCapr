{
    "patch": "        Node firstRead = null;\n        int size = references.size();\n        for (int i = 0; i < size; i++) {\n          Reference reference = references.get(i);\n          if (reference.isRead() && reference != getTarget()) {\n            firstRead = reference.getNode();\n            break;\n          }\n        }\n        return firstRead;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..92bbe1aa 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        Node firstRead = null;\n+        int size = references.size();\n+        for (int i = 0; i < size; i++) {\n+          Reference reference = references.get(i);\n+          if (reference.isRead() && reference != getTarget()) {\n+            firstRead = reference.getNode();\n+            break;\n+          }\n+        }\n+        return firstRead;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}