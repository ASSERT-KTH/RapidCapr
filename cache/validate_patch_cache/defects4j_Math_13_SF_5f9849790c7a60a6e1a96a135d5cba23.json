{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    double maxNorm = m.getNorm();\n    if (maxNorm > 1.0) {\n        m = m.scalarMultiply(1.0 / maxNorm);\n    }\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix sqrt = dec.getSquareRoot();\n    if (sqrt == null) {\n        throw new IllegalArgumentException(\"Matrix is not positive definite\");\n    }\n    return sqrt.scalarMultiply(maxNorm);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..fbac747f4 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    double maxNorm = m.getNorm();\n+    if (maxNorm > 1.0) {\n+        m = m.scalarMultiply(1.0 / maxNorm);\n     }\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix sqrt = dec.getSquareRoot();\n+    if (sqrt == null) {\n+        throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+    }\n+    return sqrt.scalarMultiply(maxNorm);\n+}\n }",
    "result_reason": "org.apache.commons.math3.exception.MathUnsupportedOperationException: unsupported operation",
    "test_result": "FAIL"
}