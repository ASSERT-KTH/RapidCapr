{
    "patch": "for (JSType otherAlternate : ((UnionType) that).alternates) {\n    if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n    }\n}\nif (that.isSubtype(this)) {\n    builder.addAlternate(that);\n}\nJSType result = builder.build();\nif (!result.isBottom() && this.isObject() && that.isObject()) {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n}\nreturn !result.isBottom() ? result : getNativeType(JSTypeNative.NO_TYPE);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..b3785bd4 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,7 +288,19 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (result != null) {\n+for (JSType otherAlternate : ((UnionType) that).alternates) {\n+    if (otherAlternate.isSubtype(this)) {\n+        builder.addAlternate(otherAlternate);\n+    }\n+}\n+if (that.isSubtype(this)) {\n+    builder.addAlternate(that);\n+}\n+JSType result = builder.build();\n+if (!result.isBottom() && this.isObject() && that.isObject()) {\n+    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+}\n+return !result.isBottom() ? result : getNativeType(JSTypeNative.NO_TYPE);\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}