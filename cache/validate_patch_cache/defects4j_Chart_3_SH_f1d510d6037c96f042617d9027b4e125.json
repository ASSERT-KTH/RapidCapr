{
    "patch": "public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n\n    TimeSeries copy = (TimeSeries) super.clone();\n    copy.clear();\n    \n    if (this.data.size() > 0) {\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        int lastIndex = Math.min(end, this.data.size() - 1);\n        for (int index = start; index <= lastIndex; index++) {\n            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n                double y = clone.getValue().doubleValue();\n                if (y > max) {\n                    max = y;\n                }\n                if (y < min) {\n                    min = y;\n                }\n            } catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n        if (lastIndex >= 0) {\n            copy.maxY = max;\n            copy.minY = min;\n        } else {\n            copy.maxY = Double.NaN;\n            copy.minY = Double.NaN;\n        }\n    } else {\n        copy.maxY = Double.NaN;\n        copy.minY = Double.NaN;\n    }\n    \n    return copy;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..7c588f4 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,51 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {\n+    if (start < 0) {\n+        throw new IllegalArgumentException(\"Requires start >= 0.\");\n+    }\n+    if (end < start) {\n+        throw new IllegalArgumentException(\"Requires start <= end.\");\n+    }\n+\n+    TimeSeries copy = (TimeSeries) super.clone();\n+    copy.clear();\n+    \n+    if (this.data.size() > 0) {\n+        double min = Double.MAX_VALUE;\n+        double max = Double.MIN_VALUE;\n+        int lastIndex = Math.min(end, this.data.size() - 1);\n+        for (int index = start; index <= lastIndex; index++) {\n+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n+            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+            try {\n+                copy.add(clone);\n+                double y = clone.getValue().doubleValue();\n+                if (y > max) {\n+                    max = y;\n+                }\n+                if (y < min) {\n+                    min = y;\n+                }\n+            } catch (SeriesException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        if (lastIndex >= 0) {\n+            copy.maxY = max;\n+            copy.minY = min;\n+        } else {\n+            copy.maxY = Double.NaN;\n+            copy.minY = Double.NaN;\n+        }\n+    } else {\n+        copy.maxY = Double.NaN;\n+        copy.minY = Double.NaN;\n+    }\n+    \n+    return copy;\n+}\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}