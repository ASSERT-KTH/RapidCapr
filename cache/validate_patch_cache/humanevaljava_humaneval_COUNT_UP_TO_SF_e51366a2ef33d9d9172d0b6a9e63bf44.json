{
    "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n\n    if (n < 2) {\n        return primes;\n    }\n\n    // add 2 to primes list\n    primes.add(2);\n\n    // check odd numbers starting from 3 up to n\n    for (int i = 3; i <= n; i += 2) {\n\n        // flag to store if number is prime\n        boolean isPrime = true;\n\n        // check if i is divisible by any prime number less than or equal to sqrt(i)\n        for (int j = 0; j < primes.size() && primes.get(j) <= Math.sqrt(i); j++) {\n\n            // if i is divisible by any prime number then it's not prime\n            if (i % primes.get(j) == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.add(i);\n        }\n    }\n    return primes;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/COUNT_UP_TO.java b/src/main/java/humaneval/buggy/COUNT_UP_TO.java\nindex 2952188..0d19b62 100644\n--- a/src/main/java/humaneval/buggy/COUNT_UP_TO.java\n+++ b/src/main/java/humaneval/buggy/COUNT_UP_TO.java\n@@ -14,18 +14,35 @@ import java.util.List;\n // count_up_to(18) => [2,3,5,7,11,13,17]\n \n public class COUNT_UP_TO {\n-    public static List<Integer> count_up_to(int n) {\n-        List<Integer> primes = new ArrayList<Integer>();\n-\n-        for (int i = 2; i < n; i += 1){\n-            boolean is_prime = false;\n-            for (int j = 2; j < i; j += 1){\n-                if (i % j == 0) {\n-                    is_prime = false;\n-                }\n+public static List<Integer> count_up_to(int n) {\n+    List<Integer> primes = new ArrayList<Integer>();\n+\n+    if (n < 2) {\n+        return primes;\n+    }\n+\n+    // add 2 to primes list\n+    primes.add(2);\n+\n+    // check odd numbers starting from 3 up to n\n+    for (int i = 3; i <= n; i += 2) {\n+\n+        // flag to store if number is prime\n+        boolean isPrime = true;\n+\n+        // check if i is divisible by any prime number less than or equal to sqrt(i)\n+        for (int j = 0; j < primes.size() && primes.get(j) <= Math.sqrt(i); j++) {\n+\n+            // if i is divisible by any prime number then it's not prime\n+            if (i % primes.get(j) == 0) {\n+                isPrime = false;\n+                break;\n             }\n-            if (is_prime) primes.add(i);\n         }\n-        return primes;\n+        if (isPrime) {\n+            primes.add(i);\n+        }\n     }\n+    return primes;\n+}\n }",
    "result_reason": "   TEST_COUNT_UP_TO.test_0:11 expected:<[2, 3, 5]> but was:<[2, 3]>",
    "test_result": "FAIL"
}