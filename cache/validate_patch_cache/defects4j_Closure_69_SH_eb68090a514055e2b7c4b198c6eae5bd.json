{
    "patch": "if (functionType.getTypeOfThis() != null &&\n    !NodeUtil.isGetOrSetKey(n.getParent())) {\n  if (!NodeUtil.isCallOrNew(n.getParent())) {\n    report(t, n, EXPECTED_THIS_TYPE, childType.toString());\n  } else if (!functionType.getTypeOfThis().equals(getJSType(n.getNext()))) {\n    report(t, n.getNext(), INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..a40e5c72 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,14 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.getTypeOfThis() != null &&\n+    !NodeUtil.isGetOrSetKey(n.getParent())) {\n+  if (!NodeUtil.isCallOrNew(n.getParent())) {\n+    report(t, n, EXPECTED_THIS_TYPE, childType.toString());\n+  } else if (!functionType.getTypeOfThis().equals(getJSType(n.getNext()))) {\n+    report(t, n.getNext(), INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n+  }\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}