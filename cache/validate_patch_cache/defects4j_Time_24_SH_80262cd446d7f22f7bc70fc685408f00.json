{
    "patch": "It can be fixed by the following hunk:\n``` java\n        } catch (IllegalFieldValueException e) {\n            // Try to recover from a leap year problem.\n            if (savedFields != null && savedFields.length > 0 &&\n                    savedFields[0].iField.getType() == DateTimeFieldType.monthOfYear() &&\n                    savedFields[0].value == 2 && savedFields[0].isLeapYear() &&\n                    savedFields[0].getDurationFieldType().getUnitMillis() == DateTimeConstants.MILLIS_PER_DAY) {\n                // This is the leap day, and there are no remaining fields to\n                // make a determination of the year. Use a \"best guess\"\n                // approach by assuming the current year, and trying to\n                // adjust the day if necessary.\n                int year = savedFields[0].iInstant.year().get();\n                year = iChrono.year().set(year, iDefaultYear);\n                savedFields[0].iField.set(millis, year);\n                for (int i = 1; i < savedFields.length; i++) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n                if (iChrono.year().get(millis) != year) {\n                    savedFields[0].iField.set(millis, year + 1);\n                    for (int i = 1; i < savedFields.length; i++) {\n                        millis = savedFields[i].set(millis, resetFields);\n                    }\n                }\n            } else {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n        }\n```\n",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..37d9e8d8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,39 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+It can be fixed by the following hunk:\n+``` java\n+        } catch (IllegalFieldValueException e) {\n+            // Try to recover from a leap year problem.\n+            if (savedFields != null && savedFields.length > 0 &&\n+                    savedFields[0].iField.getType() == DateTimeFieldType.monthOfYear() &&\n+                    savedFields[0].value == 2 && savedFields[0].isLeapYear() &&\n+                    savedFields[0].getDurationFieldType().getUnitMillis() == DateTimeConstants.MILLIS_PER_DAY) {\n+                // This is the leap day, and there are no remaining fields to\n+                // make a determination of the year. Use a \"best guess\"\n+                // approach by assuming the current year, and trying to\n+                // adjust the day if necessary.\n+                int year = savedFields[0].iInstant.year().get();\n+                year = iChrono.year().set(year, iDefaultYear);\n+                savedFields[0].iField.set(millis, year);\n+                for (int i = 1; i < savedFields.length; i++) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+                if (iChrono.year().get(millis) != year) {\n+                    savedFields[0].iField.set(millis, year + 1);\n+                    for (int i = 1; i < savedFields.length; i++) {\n+                        millis = savedFields[i].set(millis, resetFields);\n+                    }\n+                }\n+            } else {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n+        }\n+```\n+\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}