{
    "patch": "public static String decode(String stg, String code) \n{\n    StringBuffer buf = new StringBuffer();\n    String[] blocks = stg.split(\"%\");\n    buf.append(blocks[0]);\n\n    for (int i = 1; i < blocks.length; i++) \n    {\n        int firstSpace = blocks[i].indexOf(\" \");\n        if (firstSpace != -1) \n        {    \n            blocks[i] = blocks[i].substring(0, firstSpace);\n        }\n        try {\n            buf.append((char)Integer.parseInt(blocks[i], 16));\n        } catch(NumberFormatException e) {\n            buf.append(\"%\").append(blocks[i]);\n        }\n    }\n\n    // Add Encoding detection here.\n    if (\"ISO-8859-1\".equals(code)) {\n        return buf.toString();\n    } else {\n        try {\n            return new String(buf.toString().getBytes(\"ISO-8859-1\"), code);\n        } catch (UnsupportedEncodingException e) {\n            return buf.toString();\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..d5a75c52 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,37 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String decode(String stg, String code) \n+{\n+    StringBuffer buf = new StringBuffer();\n+    String[] blocks = stg.split(\"%\");\n+    buf.append(blocks[0]);\n+\n+    for (int i = 1; i < blocks.length; i++) \n+    {\n+        int firstSpace = blocks[i].indexOf(\" \");\n+        if (firstSpace != -1) \n+        {    \n+            blocks[i] = blocks[i].substring(0, firstSpace);\n+        }\n+        try {\n+            buf.append((char)Integer.parseInt(blocks[i], 16));\n+        } catch(NumberFormatException e) {\n+            buf.append(\"%\").append(blocks[i]);\n+        }\n+    }\n+\n+    // Add Encoding detection here.\n+    if (\"ISO-8859-1\".equals(code)) {\n+        return buf.toString();\n+    } else {\n+        try {\n+            return new String(buf.toString().getBytes(\"ISO-8859-1\"), code);\n+        } catch (UnsupportedEncodingException e) {\n+            return buf.toString();\n+        }\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}