{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final double TOLERANCE = 1e-12;\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix v = dec.getV();\n    RealMatrix d = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n\n    // Check each diagonal element of d and truncate eigenvalues that are\n    // negative but larger than -TOLERANCE to zero. \n    for (int i = 0; i < d.getRowDimension(); i++) {\n        if (d.getEntry(i, i) < -TOLERANCE && d.getEntry(i, i) > -1.0 * TOLERANCE) {\n            d.setEntry(i, i, 0.0);\n        } else if (d.getEntry(i, i) < -1.0 * TOLERANCE) {\n            throw new ArithmeticException(\"Matrix has complex square root\");\n        } else {\n            // sqrt is a function from Apache Commons Math's FastMath library\n            d.setEntry(i, i, FastMath.sqrt(d.getEntry(i, i)));\n        }\n    }\n\n    RealMatrix sqrtM = v.multiply(d).multiply(v.inverse());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ab469d7f8 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,26 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final double TOLERANCE = 1e-12;\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix v = dec.getV();\n+    RealMatrix d = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n+\n+    // Check each diagonal element of d and truncate eigenvalues that are\n+    // negative but larger than -TOLERANCE to zero. \n+    for (int i = 0; i < d.getRowDimension(); i++) {\n+        if (d.getEntry(i, i) < -TOLERANCE && d.getEntry(i, i) > -1.0 * TOLERANCE) {\n+            d.setEntry(i, i, 0.0);\n+        } else if (d.getEntry(i, i) < -1.0 * TOLERANCE) {\n+            throw new ArithmeticException(\"Matrix has complex square root\");\n+        } else {\n+            // sqrt is a function from Apache Commons Math's FastMath library\n+            d.setEntry(i, i, FastMath.sqrt(d.getEntry(i, i)));\n+        }\n     }\n+\n+    RealMatrix sqrtM = v.multiply(d).multiply(v.inverse());\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}