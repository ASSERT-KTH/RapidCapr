{
    "patch": "            } else if (actualTypeArgument instanceof Class) {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            } else if (actualTypeArgument instanceof ParameterizedType) {\n                TypeVariable<?>[] typeVariables = ((Class<?>) ((ParameterizedType) actualTypeArgument).getRawType()).getTypeParameters();\n                \n                ParameterizedType newParametrizedType = (ParameterizedType) actualTypeArgument;\n                Type[] actualTypeArgumentsForNewParameterizedType = newParametrizedType.getActualTypeArguments();\n                \n                Map<TypeVariable<?>, Type> newContextualActualTypeParameters = new HashMap<>();\n                \n                for (int j = 0; j < actualTypeArgumentsForNewParameterizedType.length; j++) {\n                    newContextualActualTypeParameters.put(typeVariables[j], actualTypeArgumentsForNewParameterizedType[j]);\n                }\n                \n                contextualActualTypeParameters.put(typeParameter, newContextualActualTypeParameters);\n            } else if (actualTypeArgument instanceof TypeVariable) {\n                contextualActualTypeParameters.put(typeParameter, contextualActualTypeParameters.get(((TypeVariable<?>) actualTypeArgument).getName()));\n            } else {\n                throw new IllegalStateException(\"Unknown type argument: \" + actualTypeArgument);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..3fd62b02a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,26 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+            } else if (actualTypeArgument instanceof Class) {\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            } else if (actualTypeArgument instanceof ParameterizedType) {\n+                TypeVariable<?>[] typeVariables = ((Class<?>) ((ParameterizedType) actualTypeArgument).getRawType()).getTypeParameters();\n+                \n+                ParameterizedType newParametrizedType = (ParameterizedType) actualTypeArgument;\n+                Type[] actualTypeArgumentsForNewParameterizedType = newParametrizedType.getActualTypeArguments();\n+                \n+                Map<TypeVariable<?>, Type> newContextualActualTypeParameters = new HashMap<>();\n+                \n+                for (int j = 0; j < actualTypeArgumentsForNewParameterizedType.length; j++) {\n+                    newContextualActualTypeParameters.put(typeVariables[j], actualTypeArgumentsForNewParameterizedType[j]);\n+                }\n+                \n+                contextualActualTypeParameters.put(typeParameter, newContextualActualTypeParameters);\n+            } else if (actualTypeArgument instanceof TypeVariable) {\n+                contextualActualTypeParameters.put(typeParameter, contextualActualTypeParameters.get(((TypeVariable<?>) actualTypeArgument).getName()));\n+            } else {\n+                throw new IllegalStateException(\"Unknown type argument: \" + actualTypeArgument);\n+            }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}