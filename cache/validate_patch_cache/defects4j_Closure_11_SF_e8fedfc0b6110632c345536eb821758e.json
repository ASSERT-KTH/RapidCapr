{
    "patch": "public static String getprop(String property) {\n    StringBuilder result = new StringBuilder();\n    try {\n        Process process = Runtime.getRuntime().exec(\"getprop \" + property);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            result.append(line);\n        }\n        reader.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..04188506 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String property) {\n+    StringBuilder result = new StringBuilder();\n+    try {\n+        Process process = Runtime.getRuntime().exec(\"getprop \" + property);\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+        String line;\n+        while ((line = reader.readLine()) != null) {\n+            result.append(line);\n+        }\n+        reader.close();\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+    return result.toString();\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}