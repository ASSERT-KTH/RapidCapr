{
    "patch": "    // Set the warning level for `GLOBAL_THIS` based on `checkGlobalThisLevel`.\n    if (options.checkGlobalThisLevel != null) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    // Turn off `GLOBAL_THIS` warning if `checkGlobalThisLevel` is not enabled.\n    if (options.checkGlobalThisLevel == null || !options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          CheckLevel.OFF);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..c337fb2b 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,19 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+    // Set the warning level for `GLOBAL_THIS` based on `checkGlobalThisLevel`.\n+    if (options.checkGlobalThisLevel != null) {\n+      options.setWarningLevel(\n+          DiagnosticGroups.GLOBAL_THIS,\n+          options.checkGlobalThisLevel);\n+    }\n+\n+    // Turn off `GLOBAL_THIS` warning if `checkGlobalThisLevel` is not enabled.\n+    if (options.checkGlobalThisLevel == null || !options.checkGlobalThisLevel.isOn()) {\n+      options.setWarningLevel(\n+          DiagnosticGroups.GLOBAL_THIS,\n+          CheckLevel.OFF);\n+    }\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}