{
    "patch": "else {\n    // negative offsets that pass the transition point are pushed forwards\n    if (offsetLocal - offsetAdjusted > 0) {\n        long nextLocal = nextTransition(instantLocal - offsetAdjusted);\n        long nextAdjusted = nextTransition(instantAdjusted);\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        } else {\n            return offsetAdjusted;\n        }\n    } else {\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n        if (prevLocal != prevAdjusted) {\n            return offsetAdjusted;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..569b5a18 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+else {\n+    // negative offsets that pass the transition point are pushed forwards\n+    if (offsetLocal - offsetAdjusted > 0) {\n+        long nextLocal = nextTransition(instantLocal - offsetAdjusted);\n+        long nextAdjusted = nextTransition(instantAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        } else {\n+            return offsetAdjusted;\n+        }\n+    } else {\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+        if (prevLocal != prevAdjusted) {\n+            return offsetAdjusted;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}