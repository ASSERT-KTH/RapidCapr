{
    "patch": "public class Rational {\n    private int numerator;\n    private int denominator;\n\n    public Rational(int numerator, int denominator) {\n        if (denominator == 0) {\n            throw new IllegalArgumentException(\"Denominator cannot be zero\");\n        }\n\n        int gcd = gcd(numerator, denominator);\n        this.numerator = numerator / gcd;\n        this.denominator = denominator / gcd;\n    }\n\n    private static int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n\n    public int getNumerator() {\n        return numerator;\n    }\n\n    public int getDenominator() {\n        return denominator;\n    }\n\n    public Rational add(Rational other) {\n        int resultNumerator = numerator * other.denominator + other.numerator * denominator;\n        int resultDenominator = denominator * other.denominator;\n\n        return new Rational(resultNumerator, resultDenominator);\n    }\n\n    public Rational subtract(Rational other) {\n        int resultNumerator = numerator * other.denominator - other.numerator * denominator;\n        int resultDenominator = denominator * other.denominator;\n\n        return new Rational(resultNumerator, resultDenominator);\n    }\n\n    public Rational multiply(Rational other) {\n        int resultNumerator = numerator * other.numerator;\n        int resultDenominator = denominator * other.denominator;\n\n        return new Rational(resultNumerator, resultDenominator);\n    }\n\n    public Rational divide(Rational other) {\n        if (other.numerator == 0) {\n            throw new IllegalArgumentException(\"Cannot divide by zero\");\n        }\n\n        int resultNumerator = numerator * other.denominator;\n        int resultDenominator = denominator * other.numerator;\n\n        return new Rational(resultNumerator, resultDenominator);\n    }\n\n    public boolean equals(Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other == null || getClass() != other.getClass()) {\n            return false;\n        }\n        Rational rational = (Rational) other;\n        if (denominator != rational.denominator) {\n            return false;\n        }\n        return numerator == rational.numerator;\n    }\n\n    public String toString() {\n        return numerator + \"/\" + denominator;\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java b/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java\nindex bbd5ddb..0aa5585 100644\n--- a/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java\n@@ -327,7 +327,85 @@ public class MinMaxCategoryRenderer extends AbstractCategoryItemRenderer {\n      * @param column  the column index (zero-based).\n      * @param pass  the pass index.\n      */\n-    public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n+public class Rational {\n+    private int numerator;\n+    private int denominator;\n+\n+    public Rational(int numerator, int denominator) {\n+        if (denominator == 0) {\n+            throw new IllegalArgumentException(\"Denominator cannot be zero\");\n+        }\n+\n+        int gcd = gcd(numerator, denominator);\n+        this.numerator = numerator / gcd;\n+        this.denominator = denominator / gcd;\n+    }\n+\n+    private static int gcd(int a, int b) {\n+        if (b == 0) {\n+            return a;\n+        }\n+        return gcd(b, a % b);\n+    }\n+\n+    public int getNumerator() {\n+        return numerator;\n+    }\n+\n+    public int getDenominator() {\n+        return denominator;\n+    }\n+\n+    public Rational add(Rational other) {\n+        int resultNumerator = numerator * other.denominator + other.numerator * denominator;\n+        int resultDenominator = denominator * other.denominator;\n+\n+        return new Rational(resultNumerator, resultDenominator);\n+    }\n+\n+    public Rational subtract(Rational other) {\n+        int resultNumerator = numerator * other.denominator - other.numerator * denominator;\n+        int resultDenominator = denominator * other.denominator;\n+\n+        return new Rational(resultNumerator, resultDenominator);\n+    }\n+\n+    public Rational multiply(Rational other) {\n+        int resultNumerator = numerator * other.numerator;\n+        int resultDenominator = denominator * other.denominator;\n+\n+        return new Rational(resultNumerator, resultDenominator);\n+    }\n+\n+    public Rational divide(Rational other) {\n+        if (other.numerator == 0) {\n+            throw new IllegalArgumentException(\"Cannot divide by zero\");\n+        }\n+\n+        int resultNumerator = numerator * other.denominator;\n+        int resultDenominator = denominator * other.numerator;\n+\n+        return new Rational(resultNumerator, resultDenominator);\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (this == other) {\n+            return true;\n+        }\n+        if (other == null || getClass() != other.getClass()) {\n+            return false;\n+        }\n+        Rational rational = (Rational) other;\n+        if (denominator != rational.denominator) {\n+            return false;\n+        }\n+        return numerator == rational.numerator;\n+    }\n+\n+    public String toString() {\n+        return numerator + \"/\" + denominator;\n+    }\n+}\n             Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n             ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n             int pass) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}