{
    "patch": "    if (this.isUnknownType() || that.isUnknownType()) {\n        return new TypePair(null, null);\n    }\n\n    // restrict nullable types\n    JSType thisRestricted = this.restrictByNotNullOrUndefined();\n    JSType thatRestricted = that.restrictByNotNullOrUndefined();\n\n    // check for equivalent types\n    if (thisRestricted.isEquivalentTo(thatRestricted)) {\n        return new TypePair(thisRestricted, thisRestricted);\n    }\n\n    return new TypePair(thisRestricted, thatRestricted);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..c8b1a783 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,20 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n+    if (this.isUnknownType() || that.isUnknownType()) {\n         return new TypePair(null, null);\n+    }\n+\n+    // restrict nullable types\n+    JSType thisRestricted = this.restrictByNotNullOrUndefined();\n+    JSType thatRestricted = that.restrictByNotNullOrUndefined();\n+\n+    // check for equivalent types\n+    if (thisRestricted.isEquivalentTo(thatRestricted)) {\n+        return new TypePair(thisRestricted, thisRestricted);\n+    }\n+\n+    return new TypePair(thisRestricted, thatRestricted);\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}