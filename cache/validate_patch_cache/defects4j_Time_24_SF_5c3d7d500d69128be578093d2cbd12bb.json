{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = this.iSavedFields;\n    int count = this.iSavedFieldsCount;\n    if (this.iSavedFieldsShared) {\n        this.iSavedFields = savedFields = (SavedField[])this.iSavedFields.clone();\n        this.iSavedFieldsShared = false;\n    }\n\n    this.sort(savedFields, count);\n    if (count > 0) {\n        DurationField var5 = DurationFieldType.months().getField(this.iChrono);\n        DurationField var6 = DurationFieldType.days().getField(this.iChrono);\n        DurationField var7 = savedFields[0].iField.getDurationField();\n        if (this.compareReverse(var7, var5) >= 0 && this.compareReverse(var7, var6) <= 0) {\n            this.saveField(DateTimeFieldType.year(), this.iDefaultYear);\n            return this.computeMillis(resetFields, text);\n        }\n    }\n\n    long var8 = this.iMillis;\n\n    try {\n        for(int var10 = 0; var10 < count; ++var10) {\n            var8 = savedFields[var10].set(var8, resetFields);\n        }\n    } catch (IllegalArgumentException var13) {\n        if (text != null) {\n            var13 = new IllegalFieldValueException(\"Cannot parse \\\"\" + text + '\\\"', var13);\n        }\n\n        if (resetFields) {\n            this.reset();\n        }\n\n        throw var13;\n    }\n\n    if (this.iZone == null) {\n        var8 -= (long)this.iOffset;\n    } else {\n        int var11 = this.iZone.getOffsetFromLocal(var8);\n        var8 -= (long)var11;\n        if (var11 != this.iZone.getOffset(var8)) {\n            String var12 = \"Illegal instant due to time zone offset transition (\" + this.iZone + ')';\n            if (text != null) {\n                var12 = \"Cannot parse \\\"\" + text + \"\\\": \" + var12;\n            }\n\n            throw new IllegalArgumentException(var12);\n        }\n    }\n\n    return var8;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..44d52a76 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,60 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = this.iSavedFields;\n+    int count = this.iSavedFieldsCount;\n+    if (this.iSavedFieldsShared) {\n+        this.iSavedFields = savedFields = (SavedField[])this.iSavedFields.clone();\n+        this.iSavedFieldsShared = false;\n+    }\n+\n+    this.sort(savedFields, count);\n+    if (count > 0) {\n+        DurationField var5 = DurationFieldType.months().getField(this.iChrono);\n+        DurationField var6 = DurationFieldType.days().getField(this.iChrono);\n+        DurationField var7 = savedFields[0].iField.getDurationField();\n+        if (this.compareReverse(var7, var5) >= 0 && this.compareReverse(var7, var6) <= 0) {\n+            this.saveField(DateTimeFieldType.year(), this.iDefaultYear);\n+            return this.computeMillis(resetFields, text);\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n+    }\n+\n+    long var8 = this.iMillis;\n+\n+    try {\n+        for(int var10 = 0; var10 < count; ++var10) {\n+            var8 = savedFields[var10].set(var8, resetFields);\n+        }\n+    } catch (IllegalArgumentException var13) {\n+        if (text != null) {\n+            var13 = new IllegalFieldValueException(\"Cannot parse \\\"\" + text + '\\\"', var13);\n         }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n+        if (resetFields) {\n+            this.reset();\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+\n+        throw var13;\n+    }\n+\n+    if (this.iZone == null) {\n+        var8 -= (long)this.iOffset;\n+    } else {\n+        int var11 = this.iZone.getOffsetFromLocal(var8);\n+        var8 -= (long)var11;\n+        if (var11 != this.iZone.getOffset(var8)) {\n+            String var12 = \"Illegal instant due to time zone offset transition (\" + this.iZone + ')';\n+            if (text != null) {\n+                var12 = \"Cannot parse \\\"\" + text + \"\\\": \" + var12;\n             }\n+\n+            throw new IllegalArgumentException(var12);\n         }\n-        \n-        return millis;\n     }\n+\n+    return var8;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: no suitable constructor found for IllegalFieldValueException(String,IllegalArgumentException)",
    "test_result": "ERROR"
}