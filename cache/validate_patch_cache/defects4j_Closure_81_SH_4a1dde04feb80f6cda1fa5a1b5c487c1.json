{
    "patch": "Name name = functionNode.getFunctionName();\nboolean isUnnamedFunction = false;\nif (name == null) {\n  name = new Name();\n  name.setIdentifier(\"\");\n  isUnnamedFunction = true;\n  name.setLineno(functionNode.getLineno());\n  // Calculate the left paren position based on the length of the function declaration\n  int lpColumn = functionNode.getAbsolutePosition() + \"function\".length() + 1;\n  name.setCharno(position2charno(lpColumn));\n}\nNode node = newNode(Token.FUNCTION);\nNode newName = transform(name);\nnode.addChildToBack(newName);\nNode lp = newNode(Token.LP);\n// The left paren's line number is based on the function name's line number\nlp.setLineno(newName.getLineno());\n// The left paren's char number is the function name's char number plus one\nlp.setCharno(newName.getCharno() + newName.getLength() + 1);\nfor (AstNode param : functionNode.getParams()) {\n  lp.addChildToBack(transform(param));\n}\nnode.addChildToBack(lp);\n\nNode bodyNode = transform(functionNode.getBody());\nparseDirectives(bodyNode);\nnode.addChildToBack(bodyNode);\n\nreturn node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..2cc7661e 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,35 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+Name name = functionNode.getFunctionName();\n+boolean isUnnamedFunction = false;\n+if (name == null) {\n+  name = new Name();\n+  name.setIdentifier(\"\");\n+  isUnnamedFunction = true;\n+  name.setLineno(functionNode.getLineno());\n+  // Calculate the left paren position based on the length of the function declaration\n+  int lpColumn = functionNode.getAbsolutePosition() + \"function\".length() + 1;\n+  name.setCharno(position2charno(lpColumn));\n+}\n+Node node = newNode(Token.FUNCTION);\n+Node newName = transform(name);\n+node.addChildToBack(newName);\n+Node lp = newNode(Token.LP);\n+// The left paren's line number is based on the function name's line number\n+lp.setLineno(newName.getLineno());\n+// The left paren's char number is the function name's char number plus one\n+lp.setCharno(newName.getCharno() + newName.getLength() + 1);\n+for (AstNode param : functionNode.getParams()) {\n+  lp.addChildToBack(transform(param));\n+}\n+node.addChildToBack(lp);\n+\n+Node bodyNode = transform(functionNode.getBody());\n+parseDirectives(bodyNode);\n+node.addChildToBack(bodyNode);\n+\n+return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable name is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}