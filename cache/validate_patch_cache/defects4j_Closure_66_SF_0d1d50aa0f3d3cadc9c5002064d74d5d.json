{
    "patch": "public double getTypedPercent(JsonObject obj) {\n    double typedCount = 0;\n    double totalCount = 0;\n\n    for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n        if (entry.getValue().isJsonObject()) {\n            typedCount += getTypedPercent(entry.getValue().getAsJsonObject());\n            totalCount++;\n        } else if (entry.getValue().isJsonPrimitive()) {\n            JsonPrimitive primitive = entry.getValue().getAsJsonPrimitive();\n            if (primitive.isNumber() || primitive.isBoolean()) {\n                typedCount++;\n            }\n            totalCount++;\n        }\n    }\n\n    if (totalCount == 0) {\n        return 0;\n    } else {\n        return (typedCount / totalCount) * 100;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..3578bd8a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(JsonObject obj) {\n+    double typedCount = 0;\n+    double totalCount = 0;\n+\n+    for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n+        if (entry.getValue().isJsonObject()) {\n+            typedCount += getTypedPercent(entry.getValue().getAsJsonObject());\n+            totalCount++;\n+        } else if (entry.getValue().isJsonPrimitive()) {\n+            JsonPrimitive primitive = entry.getValue().getAsJsonPrimitive();\n+            if (primitive.isNumber() || primitive.isBoolean()) {\n+                typedCount++;\n+            }\n+            totalCount++;\n+        }\n+    }\n+\n+    if (totalCount == 0) {\n+        return 0;\n+    } else {\n+        return (typedCount / totalCount) * 100;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}