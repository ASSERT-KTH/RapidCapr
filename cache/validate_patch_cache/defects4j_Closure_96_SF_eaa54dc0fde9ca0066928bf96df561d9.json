{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    boolean varArgs = functionType.isVarArgs();\n    List<Node> parameters = functionType.getParameters();\n\n    if (!varArgs && numArgs < minArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), String.valueOf(minArgs),\n                maxArgs != Integer.MAX_VALUE ?\n                \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n        return;\n    }\n\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameterIterator = parameters.iterator();\n    Node parameter = null;\n\n    for (int ordinal = 1; arguments.hasNext(); ordinal++) {\n        parameter = parameterIterator.hasNext() ? parameterIterator.next() : null;\n        Node argument = arguments.next();\n\n        if (parameter == null || varArgs) {\n            parameter = parameter != null ? parameter : parameters.get(parameters.size() - 1);\n            validator.expectArgumentMatchesParameter(\n                    t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n        } else {\n            validator.expectArgumentMatchesParameter(\n                    t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n        }\n    }\n\n    if (!varArgs && parameterIterator.hasNext()) {\n        int remaining = parameters.size() - ordinal + 1;\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                \"Too few arguments\", String.valueOf(minArgs),\n                maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..cec480b5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,50 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+    int numArgs = call.getChildCount() - 1;\n+    int minArgs = functionType.getMinArguments();\n+    int maxArgs = functionType.getMaxArguments();\n+    boolean varArgs = functionType.isVarArgs();\n+    List<Node> parameters = functionType.getParameters();\n+\n+    if (!varArgs && numArgs < minArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgs), String.valueOf(minArgs),\n+                maxArgs != Integer.MAX_VALUE ?\n+                \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+        return;\n+    }\n+\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n+    Iterator<Node> parameterIterator = parameters.iterator();\n     Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+\n+    for (int ordinal = 1; arguments.hasNext(); ordinal++) {\n+        parameter = parameterIterator.hasNext() ? parameterIterator.next() : null;\n+        Node argument = arguments.next();\n+\n+        if (parameter == null || varArgs) {\n+            parameter = parameter != null ? parameter : parameters.get(parameters.size() - 1);\n+            validator.expectArgumentMatchesParameter(\n+                    t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+        } else {\n+            validator.expectArgumentMatchesParameter(\n+                    t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+        }\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (!varArgs && parameterIterator.hasNext()) {\n+        int remaining = parameters.size() - ordinal + 1;\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                \"Too few arguments\", String.valueOf(minArgs),\n+                maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}