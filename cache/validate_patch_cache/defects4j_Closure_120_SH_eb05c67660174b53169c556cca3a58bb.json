{
    "patch": "List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\nfor (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n  if (outEdge.getValue() == Branch.ON_EX) {\n    return true;\n  }\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..a9c34a6e 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n+for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n+  if (outEdge.getValue() == Branch.ON_EX) {\n+    return true;\n+  }\n+}\n+return false;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}