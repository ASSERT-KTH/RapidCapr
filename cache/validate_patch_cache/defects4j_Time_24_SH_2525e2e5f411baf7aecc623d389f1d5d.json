{
    "patch": "for (int i = 0; i < count; i++) {\n    try {\n        millis = savedFields[i].set(millis, resetFields);\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    if (i == 0 && savedFields[i].iField.getType() == DateTimeFieldType.monthOfYear() &&\n            !savedFields[i].iField.isLeap(millis.getYear())) {\n        // Throw exception if month is invalid for non-leap year\n        if (savedFields[i].getDifference() == FEB_29) {\n            throw new IllegalArgumentException(\"Invalid date for non-leap year:\" + millis.getYear());\n        }\n    }\n    if (millis.getYear() < MIN_YEAR || millis.getYear() > MAX_YEAR) {\n        throw new IllegalArgumentException(\"The parsed date exceeds the supported date range\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e21c3a65 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,26 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    try {\n+        millis = savedFields[i].set(millis, resetFields);\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+    if (i == 0 && savedFields[i].iField.getType() == DateTimeFieldType.monthOfYear() &&\n+            !savedFields[i].iField.isLeap(millis.getYear())) {\n+        // Throw exception if month is invalid for non-leap year\n+        if (savedFields[i].getDifference() == FEB_29) {\n+            throw new IllegalArgumentException(\"Invalid date for non-leap year:\" + millis.getYear());\n+        }\n+    }\n+    if (millis.getYear() < MIN_YEAR || millis.getYear() > MAX_YEAR) {\n+        throw new IllegalArgumentException(\"The parsed date exceeds the supported date range\");\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: long cannot be dereferenced",
    "test_result": "ERROR"
}