{
    "patch": "        char[] chars = val.toCharArray();\n        int         firstChar = 0;\n        int         lastChar = chars.length - 1;\n        //Checking for signs\n        if (chars[firstChar] == '+') {\n            firstChar++;\n        } else if (chars[firstChar] == '-') {\n            firstChar++;\n            if (chars.length == 1) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n        }\n        //Counting number of decimal points and exponents\n        int decimalPts = -1;\n        int expPts     = -1;\n        for (int i = firstChar; i <= lastChar; i++) {\n            switch (chars[i]) {\n                case '.':\n                    if (decimalPts >= 0 || expPts >= 0) {\n                        throw new NumberFormatException(val + \" is not a valid number.\");\n                    }\n                    decimalPts = i;\n                    break;\n                case 'e':\n                case 'E':\n                    if (expPts >= 0) {\n                        throw new NumberFormatException(val + \" is not a valid number.\");\n                    }\n                    expPts = i;\n                    break;\n                case '+':\n                case '-':\n                    if (i != firstChar && i != expPts + 1) {\n                        throw new NumberFormatException(val + \" is not a valid number.\");\n                    }\n                    break;\n                default:\n                    if (chars[i] < '0' || chars[i] > '9') {\n                        throw new NumberFormatException(val + \" is not a valid number.\");\n                    }\n                    break;\n            }\n        }\n        if (lastChar == firstChar && (chars[firstChar] == '.' || chars[firstChar] == 'e' || chars[firstChar] == 'E')) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        if (expPts == -1) {\n            // no exponent\n            if (decimalPts == -1) {\n                // integer\n                return createInteger(val);\n            } else {\n                // decimal\n                if (decimalPts == lastChar) {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                return createDecimal(chars, decimalPts, firstChar, lastChar);\n            }\n        } else {\n            // exponent\n            if (expPts == lastChar) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n            if (decimalPts == -1) {\n                // integer with exponent\n                return createIntegerWithExponent(chars, expPts, firstChar, lastChar);\n            } else {\n                // decimal with exponent\n                return createDecimalWithExponent(chars, decimalPts, expPts, firstChar, lastChar);\n            }\n        }\n    }\n\n    private static Number createInteger(String val) {\n        //Try the biggest first\n        if (val.length() > 1 && val.startsWith(\"0\")) {\n            //Leading zeros, eg. 00\n            return createBigInteger(val);\n        }\n        if (val.length() <= 9) {\n            //Using parseInt saves us from catching exceptions\n            return Integer.valueOf(val);\n        } else if (val.length() <= 18) {\n            //Long.parseLong also saves exceptions and it's faster than BigInteger(String)\n            return Long.valueOf(val);\n        }\n        return createBigInteger(val);\n    }\n\n    private static Number createDecimal(char[] chars, int decimalPts, int firstChar, int lastChar) {\n        int      digitsAfterDecimal = lastChar - decimalPts;\n        switch (digitsAfterDecimal) {\n            case 0:\n                return createLong(new String(chars, firstChar, decimalPts - firstChar));\n            case 1:\n                return createDouble(new String(chars, firstChar, decimalPts - firstChar) + \".0\");\n            case 2:\n                return createDouble(new String(chars, firstChar, decimalPts - firstChar) + \"0\");\n            case 3:\n                return createDouble(new String(chars, firstChar, decimalPts - firstChar) + \"00\");\n            case 4:\n                return createDouble(new String(chars, firstChar, decimalPts - firstChar) + \"000\");\n            case 5:\n                return createDouble(new String(chars, firstChar, decimalPts - firstChar) + \"0000\");\n            default:\n                //If it has more than that it must be a BigDecimal which has way more precision\n                return createBigDecimal(chars, decimalPts, firstChar, lastChar);\n        }\n    }\n\n    private static Number createDecimalWithExponent(char[] chars, int decimalPts, int expPts, int firstChar, int lastChar) {\n        int exp = Integer.parseInt(new String(chars, expPts + 1, lastChar - expPts));\n        int digitsAfterDecimal = expPts - decimalPts - 1;\n        if (exp >= digitsAfterDecimal || exp < -2) {\n            //Use BigDecimal\n            return createBigDecimal(chars, decimalPts, firstChar, lastChar);\n        }\n        double value = Double.parseDouble(new String(chars, firstChar, expPts - firstChar) + new String(chars, decimalPts + 1, lastChar - decimalPts - 1));\n        if (chars[firstChar] == '-') {\n            value = -value;\n        }\n        if (exp == 0) {\n            return value;\n        } else if (exp >= 0) {\n            switch (exp - digitsAfterDecimal) {\n                case 0:\n                    return value;\n                case 1:\n                    return value * 10.0D;\n                case 2:\n                    return value * 100.0D;\n                case 3:\n                    return value * 1000.0D;\n                case 4:\n                    return value * 10000.0D;\n                case 5:\n                    return value * 100000.0D;\n                default:\n                    //Should not occur...\n                    throw new NumberFormatException(new String(chars));\n            }\n        } else {\n            switch (exp + 2) {\n                case 0:\n                    return value;\n                case -1:\n                    return value / 10.0D;\n                case -2:\n                    return value / 100.0D;\n                default:\n                    //Should not occur...\n                    throw new NumberFormatException(new String(chars));\n            }\n        }\n    }\n\n    private static Number createIntegerWithExponent(char[] chars, int expPts, int firstChar, int lastChar) {\n        int exp   = Integer.parseInt(new String(chars, expPts + 1, lastChar - expPts));\n        int value = Integer.parseInt(new String(chars, firstChar, expPts - firstChar));\n        if (exp == 0) {\n            return value;\n        }\n        if (exp >= 0) {\n            return value * POWERS_OF_TEN[Math.min(exp, POWERS_OF_TEN.length - 1)];\n        } else {\n            exp = -exp;\n            if (exp < POWERS_OF_TEN.length && value % POWERS_OF_TEN[exp] == 0) {\n                return value / POWERS_OF_TEN[exp];",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..c6332b9d 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -135,156 +135,175 @@ public final class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String val) throws NumberFormatException {\n-        if (val == null) {\n-            return null;\n-        }\n-        if (val.length() == 0) {\n-            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n-        }\n-        if (val.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n-        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n-            return createInteger(val);\n-        }   \n-        char lastChar = val.charAt(val.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = val.indexOf('.');\n-        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n-\n-        if (decPos > -1) {\n-\n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n-                }\n-                dec = val.substring(decPos + 1, expPos);\n-            } else {\n-                dec = val.substring(decPos + 1);\n+        char[] chars = val.toCharArray();\n+        int         firstChar = 0;\n+        int         lastChar = chars.length - 1;\n+        //Checking for signs\n+        if (chars[firstChar] == '+') {\n+            firstChar++;\n+        } else if (chars[firstChar] == '-') {\n+            firstChar++;\n+            if (chars.length == 1) {\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n             }\n-            mant = val.substring(0, decPos);\n-        } else {\n-            if (expPos > -1) {\n-                mant = val.substring(0, expPos);\n-            } else {\n-                mant = val;\n-            }\n-            dec = null;\n         }\n-        if (!Character.isDigit(lastChar)) {\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            String numeric = val.substring(0, val.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n+        //Counting number of decimal points and exponents\n+        int decimalPts = -1;\n+        int expPts     = -1;\n+        for (int i = firstChar; i <= lastChar; i++) {\n+            switch (chars[i]) {\n+                case '.':\n+                    if (decimalPts >= 0 || expPts >= 0) {\n+                        throw new NumberFormatException(val + \" is not a valid number.\");\n                     }\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n+                    decimalPts = i;\n+                    break;\n+                case 'e':\n+                case 'E':\n+                    if (expPts >= 0) {\n+                        throw new NumberFormatException(val + \" is not a valid number.\");\n                     }\n-                    //Fall through\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // empty catch\n+                    expPts = i;\n+                    break;\n+                case '+':\n+                case '-':\n+                    if (i != firstChar && i != expPts + 1) {\n+                        throw new NumberFormatException(val + \" is not a valid number.\");\n                     }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // empty catch\n+                    break;\n+                default:\n+                    if (chars[i] < '0' || chars[i] > '9') {\n+                        throw new NumberFormatException(val + \" is not a valid number.\");\n                     }\n-                    //Fall through\n-                default :\n+                    break;\n+            }\n+        }\n+        if (lastChar == firstChar && (chars[firstChar] == '.' || chars[firstChar] == 'e' || chars[firstChar] == 'E')) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n+        if (expPts == -1) {\n+            // no exponent\n+            if (decimalPts == -1) {\n+                // integer\n+                return createInteger(val);\n+            } else {\n+                // decimal\n+                if (decimalPts == lastChar) {\n                     throw new NumberFormatException(val + \" is not a valid number.\");\n-\n+                }\n+                return createDecimal(chars, decimalPts, firstChar, lastChar);\n             }\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length());\n+            // exponent\n+            if (expPts == lastChar) {\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n+            }\n+            if (decimalPts == -1) {\n+                // integer with exponent\n+                return createIntegerWithExponent(chars, expPts, firstChar, lastChar);\n             } else {\n-                exp = null;\n+                // decimal with exponent\n+                return createDecimalWithExponent(chars, decimalPts, expPts, firstChar, lastChar);\n             }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(val);\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n-                try {\n-                    return createLong(val);\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n-                return createBigInteger(val);\n+        }\n+    }\n \n-            } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-                try {\n-                    Float f = createFloat(val);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n-                try {\n-                    Double d = createDouble(val);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n+    private static Number createInteger(String val) {\n+        //Try the biggest first\n+        if (val.length() > 1 && val.startsWith(\"0\")) {\n+            //Leading zeros, eg. 00\n+            return createBigInteger(val);\n+        }\n+        if (val.length() <= 9) {\n+            //Using parseInt saves us from catching exceptions\n+            return Integer.valueOf(val);\n+        } else if (val.length() <= 18) {\n+            //Long.parseLong also saves exceptions and it's faster than BigInteger(String)\n+            return Long.valueOf(val);\n+        }\n+        return createBigInteger(val);\n+    }\n \n-                return createBigDecimal(val);\n+    private static Number createDecimal(char[] chars, int decimalPts, int firstChar, int lastChar) {\n+        int      digitsAfterDecimal = lastChar - decimalPts;\n+        switch (digitsAfterDecimal) {\n+            case 0:\n+                return createLong(new String(chars, firstChar, decimalPts - firstChar));\n+            case 1:\n+                return createDouble(new String(chars, firstChar, decimalPts - firstChar) + \".0\");\n+            case 2:\n+                return createDouble(new String(chars, firstChar, decimalPts - firstChar) + \"0\");\n+            case 3:\n+                return createDouble(new String(chars, firstChar, decimalPts - firstChar) + \"00\");\n+            case 4:\n+                return createDouble(new String(chars, firstChar, decimalPts - firstChar) + \"000\");\n+            case 5:\n+                return createDouble(new String(chars, firstChar, decimalPts - firstChar) + \"0000\");\n+            default:\n+                //If it has more than that it must be a BigDecimal which has way more precision\n+                return createBigDecimal(chars, decimalPts, firstChar, lastChar);\n+        }\n+    }\n \n+    private static Number createDecimalWithExponent(char[] chars, int decimalPts, int expPts, int firstChar, int lastChar) {\n+        int exp = Integer.parseInt(new String(chars, expPts + 1, lastChar - expPts));\n+        int digitsAfterDecimal = expPts - decimalPts - 1;\n+        if (exp >= digitsAfterDecimal || exp < -2) {\n+            //Use BigDecimal\n+            return createBigDecimal(chars, decimalPts, firstChar, lastChar);\n+        }\n+        double value = Double.parseDouble(new String(chars, firstChar, expPts - firstChar) + new String(chars, decimalPts + 1, lastChar - decimalPts - 1));\n+        if (chars[firstChar] == '-') {\n+            value = -value;\n+        }\n+        if (exp == 0) {\n+            return value;\n+        } else if (exp >= 0) {\n+            switch (exp - digitsAfterDecimal) {\n+                case 0:\n+                    return value;\n+                case 1:\n+                    return value * 10.0D;\n+                case 2:\n+                    return value * 100.0D;\n+                case 3:\n+                    return value * 1000.0D;\n+                case 4:\n+                    return value * 10000.0D;\n+                case 5:\n+                    return value * 100000.0D;\n+                default:\n+                    //Should not occur...\n+                    throw new NumberFormatException(new String(chars));\n+            }\n+        } else {\n+            switch (exp + 2) {\n+                case 0:\n+                    return value;\n+                case -1:\n+                    return value / 10.0D;\n+                case -2:\n+                    return value / 100.0D;\n+                default:\n+                    //Should not occur...\n+                    throw new NumberFormatException(new String(chars));\n             }\n-\n         }\n     }\n \n+    private static Number createIntegerWithExponent(char[] chars, int expPts, int firstChar, int lastChar) {\n+        int exp   = Integer.parseInt(new String(chars, expPts + 1, lastChar - expPts));\n+        int value = Integer.parseInt(new String(chars, firstChar, expPts - firstChar));\n+        if (exp == 0) {\n+            return value;\n+        }\n+        if (exp >= 0) {\n+            return value * POWERS_OF_TEN[Math.min(exp, POWERS_OF_TEN.length - 1)];\n+        } else {\n+            exp = -exp;\n+            if (exp < POWERS_OF_TEN.length && value % POWERS_OF_TEN[exp] == 0) {\n+                return value / POWERS_OF_TEN[exp];\n+\n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>\n      *",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}