{
    "patch": "  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    // Default to using \",\" as the join string.\n    String joinString = \",\";\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n      if (right.getType() == Token.STRING) {\n        joinString = right.getString();\n      } else if (NodeUtil.isNullish(right)) {\n        // Use \"\" if they pass null or undefined.\n        joinString = \"\";\n      } else {\n        return n;\n      }\n    }\n\n    List<Node> foldedElements = Lists.newArrayList();\n    int foldedLength = 0;\n    \n    for (Node element = arrayNode.getFirstChild(); element != null;\n         element = element.getNext()) {\n      if (element.getType() == Token.STRING) {\n        String value = element.getString();\n        foldedLength += value.length();\n        foldedElements.add(\n            IR.string(value).setJSType(element.getJSTypeAfterCast()));\n      } else {\n        if (element.getType() == Token.EMPTY) {\n          continue;\n        }\n        tryFoldStringConcat(element);\n        foldedLength += element.getLength();\n        foldedElements.add(element);\n      }\n    }\n\n    if (foldedElements.isEmpty()) {\n      n.getParent().replaceChild(n, IR.string(\"\").setJSType(n.getJSTypeAfterCast()));\n      reportCodeChange();\n      return n;\n    }\n\n    // Don't join a single literal element.\n    if (foldedElements.size() == 1 && foldedElements.get(0).getType() == Token.STRING) {\n      return n;\n    }\n\n    foldedLength += (foldedElements.size() - 1) * joinString.length();\n\n    // Don't join elements if we can't reasonably assume it will be beneficial.\n    if (foldedLength > (NodeUtil.getCharacters(n) +\n                        InlineCostEstimator.getCost(right))) {\n      return n;\n    }\n\n    // Create the new string node.\n    Node folded = IR.string(\"\").setLength(foldedLength).setJSType(n.getJSTypeAfterCast());\n    int i = 0;\n    folded.addChildToFront(foldedElements.get(i++));\n    for (int len = foldedElements.size(); i < len; i++) {\n      folded.addChildToBack(IR.string(joinString)\n          .setJSType(foldedElements.get(i - 1).getJSType()));\n      folded.addChildToBack(foldedElements.get(i));\n    }\n\n    n.getParent().replaceChild(n, folded);\n    reportCodeChange();\n    return folded;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..05c72315 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -386,93 +386,74 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n+    // Default to using \",\" as the join string.\n+    String joinString = \",\";\n+    if (right != null) {\n+      if (!NodeUtil.isImmutableValue(right)) {\n+        return n;\n+      }\n+      if (right.getType() == Token.STRING) {\n+        joinString = right.getString();\n+      } else if (NodeUtil.isNullish(right)) {\n+        // Use \"\" if they pass null or undefined.\n+        joinString = \"\";\n+      } else {\n+        return n;\n+      }\n+    }\n+\n+    List<Node> foldedElements = Lists.newArrayList();\n+    int foldedLength = 0;\n+    \n+    for (Node element = arrayNode.getFirstChild(); element != null;\n+         element = element.getNext()) {\n+      if (element.getType() == Token.STRING) {\n+        String value = element.getString();\n+        foldedLength += value.length();\n+        foldedElements.add(\n+            IR.string(value).setJSType(element.getJSTypeAfterCast()));\n       } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+        if (element.getType() == Token.EMPTY) {\n+          continue;\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+        tryFoldStringConcat(element);\n+        foldedLength += element.getLength();\n+        foldedElements.add(element);\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n     }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+    if (foldedElements.isEmpty()) {\n+      n.getParent().replaceChild(n, IR.string(\"\").setJSType(n.getJSTypeAfterCast()));\n+      reportCodeChange();\n+      return n;\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+    // Don't join a single literal element.\n+    if (foldedElements.size() == 1 && foldedElements.get(0).getType() == Token.STRING) {\n+      return n;\n     }\n \n-    return n;\n+    foldedLength += (foldedElements.size() - 1) * joinString.length();\n+\n+    // Don't join elements if we can't reasonably assume it will be beneficial.\n+    if (foldedLength > (NodeUtil.getCharacters(n) +\n+                        InlineCostEstimator.getCost(right))) {\n+      return n;\n+    }\n+\n+    // Create the new string node.\n+    Node folded = IR.string(\"\").setLength(foldedLength).setJSType(n.getJSTypeAfterCast());\n+    int i = 0;\n+    folded.addChildToFront(foldedElements.get(i++));\n+    for (int len = foldedElements.size(); i < len; i++) {\n+      folded.addChildToBack(IR.string(joinString)\n+          .setJSType(foldedElements.get(i - 1).getJSType()));\n+      folded.addChildToBack(foldedElements.get(i));\n+    }\n+\n+    n.getParent().replaceChild(n, folded);\n+    reportCodeChange();\n+    return folded;\n   }\n \n   /**\n@@ -642,4 +623,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}