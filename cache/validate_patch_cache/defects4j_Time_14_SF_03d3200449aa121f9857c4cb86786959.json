{
    "patch": "            DateTimeFieldType fieldType = partial.getFieldType(fieldIndex);\n            int currentValue = values[fieldIndex];\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i == fieldIndex) {\n                    currentValue += valueToAdd;\n                    if (currentValue < 1 || currentValue > fieldType.getDurationType().getField(iChronology).getMaximumValue()) {\n                        throw new IllegalFieldValueException(fieldType, currentValue);\n                    }\n                    instant = fieldType.getField(iChronology).set(instant, currentValue);\n                } else {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..3eb93139 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,19 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n+            DateTimeFieldType fieldType = partial.getFieldType(fieldIndex);\n+            int currentValue = values[fieldIndex];\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+                if (i == fieldIndex) {\n+                    currentValue += valueToAdd;\n+                    if (currentValue < 1 || currentValue > fieldType.getDurationType().getField(iChronology).getMaximumValue()) {\n+                        throw new IllegalFieldValueException(fieldType, currentValue);\n+                    }\n+                    instant = fieldType.getField(iChronology).set(instant, currentValue);\n+                } else {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                }\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}