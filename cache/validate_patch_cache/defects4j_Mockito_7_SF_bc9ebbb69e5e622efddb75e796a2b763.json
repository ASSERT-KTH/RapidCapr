{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n\n    Type[] bounds = typeVariable.getBounds();\n    List<Type> validBounds = new ArrayList<>();\n    if (bounds != null) {\n        for (Type type : bounds) {\n            if (type != null) {\n                validBounds.add(type);\n            }\n        }\n    }\n\n    if (!validBounds.isEmpty()) {\n        for (Type type : validBounds) {\n            registerTypeVariablesOn(type);\n        }\n    } else {\n        registerTypeVariablesOn(typeVariable);\n    }\n\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..5cd5ddc0e 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,35 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+\n+    Type[] bounds = typeVariable.getBounds();\n+    List<Type> validBounds = new ArrayList<>();\n+    if (bounds != null) {\n+        for (Type type : bounds) {\n+            if (type != null) {\n+                validBounds.add(type);\n+            }\n+        }\n+    }\n+\n+    if (!validBounds.isEmpty()) {\n+        for (Type type : validBounds) {\n+            registerTypeVariablesOn(type);\n+        }\n+    } else {\n+        registerTypeVariablesOn(typeVariable);\n+    }\n+\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}