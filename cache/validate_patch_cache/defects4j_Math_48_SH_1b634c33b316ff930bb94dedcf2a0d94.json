{
    "patch": "    default:\n        // Should never happen.\n        throw new MathInternalError();\n    }\n    // Check if we have converged before the max iterations are reached.\n    if (getMaxIterationCount() < Integer.MAX_VALUE &&\n            ++iterationCount >= getMaxIterationCount()) {\n        throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED,\n                getMaxIterationCount());\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..a01237b8f 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,17 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+    default:\n+        // Should never happen.\n+        throw new MathInternalError();\n+    }\n+    // Check if we have converged before the max iterations are reached.\n+    if (getMaxIterationCount() < Integer.MAX_VALUE &&\n+            ++iterationCount >= getMaxIterationCount()) {\n+        throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED,\n+                getMaxIterationCount());\n+    }\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: orphaned default",
    "test_result": "ERROR"
}