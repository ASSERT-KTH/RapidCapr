{
    "patch": "public static Object returnValueFor(Class<?> clazz) {\n    if (clazz == List.class) {\n        List<String> list = new ArrayList<>();\n        list.add(\"element1\");\n        list.add(\"element2\");\n        return list;\n    } else if (clazz == Set.class) {\n        Set<String> set = new HashSet<>();\n        set.add(\"element1\");\n        set.add(\"element2\");\n        return set;\n    } else if (clazz == Map.class) {\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"key1\", 1);\n        map.put(\"key2\", 2);\n        return map;\n    } else if (clazz == Iterable.class) {\n        List<String> list = new ArrayList<>();\n        return list;\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..77a719ce8 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,28 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Object returnValueFor(Class<?> clazz) {\n+    if (clazz == List.class) {\n+        List<String> list = new ArrayList<>();\n+        list.add(\"element1\");\n+        list.add(\"element2\");\n+        return list;\n+    } else if (clazz == Set.class) {\n+        Set<String> set = new HashSet<>();\n+        set.add(\"element1\");\n+        set.add(\"element2\");\n+        return set;\n+    } else if (clazz == Map.class) {\n+        Map<String, Integer> map = new HashMap<>();\n+        map.put(\"key1\", 1);\n+        map.put(\"key2\", 2);\n+        return map;\n+    } else if (clazz == Iterable.class) {\n+        List<String> list = new ArrayList<>();\n+        return list;\n+    }\n+    return null;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}