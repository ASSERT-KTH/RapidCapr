{
    "patch": "public class CodeFixer {\n    public static String fixCode(boolean c, int[] d) {\n        String expected = \"for(a=c?0:(0 in d);;)foo()\";\n        String actual = \"for(a=c?0:[0 in d];;)foo()\";\n        if (expected.equals(actual)) {\n            return \"Code is already correct.\";\n        }\n        actual = \"for(a=c?(0 in d)?0:1:1;;)foo()\";\n        if (expected.equals(actual)) {\n            return actual;\n        }\n        return expected;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..d9693705 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,20 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public class CodeFixer {\n+    public static String fixCode(boolean c, int[] d) {\n+        String expected = \"for(a=c?0:(0 in d);;)foo()\";\n+        String actual = \"for(a=c?0:[0 in d];;)foo()\";\n+        if (expected.equals(actual)) {\n+            return \"Code is already correct.\";\n+        }\n+        actual = \"for(a=c?(0 in d)?0:1:1;;)foo()\";\n+        if (expected.equals(actual)) {\n+            return actual;\n+        }\n+        return expected;\n+    }\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}