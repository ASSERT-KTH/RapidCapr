{
    "patch": "        } else if (NodeUtil.isObjectLitKey(parent, n)) {\n          // The key of an object literal is always an expression but doesn't have its own parent, so\n          // it must be checked explicitly\n          if (NodeUtil.isGet(parent.getParent()) &&\n              parent.getParent().getType() == Token.GETPROP &&\n              parent.getParent().getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..dad2892e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,15 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+        } else if (NodeUtil.isObjectLitKey(parent, n)) {\n+          // The key of an object literal is always an expression but doesn't have its own parent, so\n+          // it must be checked explicitly\n+          if (NodeUtil.isGet(parent.getParent()) &&\n+              parent.getParent().getType() == Token.GETPROP &&\n+              parent.getParent().getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}