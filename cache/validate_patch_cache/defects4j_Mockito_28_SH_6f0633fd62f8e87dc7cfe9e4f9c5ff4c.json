{
    "patch": "            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (candidate instanceof MockInjection) {\n                Object mock = ((MockInjection) candidate).getMock();\n                field.setAccessible(true);\n                try {\n                    field.set(fieldInstance, mock);\n                } catch (IllegalAccessException e) {\n                    e.printStackTrace();\n                }\n            ",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..673ff0360 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,19 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (candidate instanceof MockInjection) {\n+                Object mock = ((MockInjection) candidate).getMock();\n+                field.setAccessible(true);\n+                try {\n+                    field.set(fieldInstance, mock);\n+                } catch (IllegalAccessException e) {\n+                    e.printStackTrace();\n+                }\n+            \n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}