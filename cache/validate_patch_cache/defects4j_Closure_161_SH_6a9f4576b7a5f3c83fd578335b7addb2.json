{
    "patch": "    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    boolean hasIndexOutOfBounds = true;\n    if (left.getType() == Token.ARRAYLIT) {\n      List<Node> elems = left.children();\n      if (elems.size() <= intIndex) {\n        elems.add(makeDummy(index, index));\n      }\n      hasIndexOutOfBounds = false;\n    }\n    else if (left.getType() == Token.CALL && \n          \"Array\".equals(left.getFirstChild().getQualifiedName()) &&\n          left.getLastChild().getIntProp(Node.LENGTH_PROP, -1) == 1) {\n      left.getLastChild().setIntProp(Node.LENGTH_PROP, intIndex + 1);\n      hasIndexOutOfBounds = false;\n    }\n      \n    if (hasIndexOutOfBounds) {  \n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n    Node elem = left.getChildAtIndex(intIndex);\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..0df3d53a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,54 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (right.getType() != Token.NUMBER) {\n+      // Sometimes people like to use complex expressions to index into\n+      // arrays, or strings to index into array methods.\n+      return n;\n+    }\n+\n+    double index = right.getDouble();\n+    int intIndex = (int) index;\n+    if (intIndex != index) {\n+      error(INVALID_GETELEM_INDEX_ERROR, right);\n+      return n;\n+    }\n+\n+    boolean hasIndexOutOfBounds = true;\n+    if (left.getType() == Token.ARRAYLIT) {\n+      List<Node> elems = left.children();\n+      if (elems.size() <= intIndex) {\n+        elems.add(makeDummy(index, index));\n+      }\n+      hasIndexOutOfBounds = false;\n+    }\n+    else if (left.getType() == Token.CALL && \n+          \"Array\".equals(left.getFirstChild().getQualifiedName()) &&\n+          left.getLastChild().getIntProp(Node.LENGTH_PROP, -1) == 1) {\n+      left.getLastChild().setIntProp(Node.LENGTH_PROP, intIndex + 1);\n+      hasIndexOutOfBounds = false;\n+    }\n+      \n+    if (hasIndexOutOfBounds) {  \n+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+      return n;\n+    }\n+    Node elem = left.getChildAtIndex(intIndex);\n+    if (elem == null) {\n+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+      return n;\n+    }\n+\n+    if (elem.getType() == Token.EMPTY) {\n+      elem = NodeUtil.newUndefinedNode(elem);\n+    } else {\n+      left.removeChild(elem);\n+    }\n+\n+    // Replace the entire GETELEM with the value\n+    n.getParent().replaceChild(n, elem);\n+    reportCodeChange();\n+    return elem;\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}