{
    "patch": "public String fixCode(String code) {\n    Pattern pattern = Pattern.compile(\"for\\\\s*\\\\((\\\\w+)\\\\s*=\\\\s*(\\\\w+)\\\\.?(\\\\w*)\\\\s+in\\\\s+(\\\\w+)\\\\)\");\n    Matcher matcher = pattern.matcher(code);\n    StringBuffer stringBuffer = new StringBuffer();\n    while (matcher.find()) {\n        String init = matcher.group(1) + \" = 0\";\n        String length = \".length\";\n        if (!matcher.group(3).isEmpty()) {\n            length = \".\" + matcher.group(3) + length;\n        }\n        String condition = matcher.group(1) + \" < \" + matcher.group(4) + length;\n        String increment = matcher.group(1) + \"++\";\n        String replacement = \"for (\" + init + \"; \" + condition + \"; \" + increment + \")\";\n        matcher.appendReplacement(stringBuffer, replacement);\n    }\n    matcher.appendTail(stringBuffer);\n    return stringBuffer.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..9fc8f707 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,24 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    Pattern pattern = Pattern.compile(\"for\\\\s*\\\\((\\\\w+)\\\\s*=\\\\s*(\\\\w+)\\\\.?(\\\\w*)\\\\s+in\\\\s+(\\\\w+)\\\\)\");\n+    Matcher matcher = pattern.matcher(code);\n+    StringBuffer stringBuffer = new StringBuffer();\n+    while (matcher.find()) {\n+        String init = matcher.group(1) + \" = 0\";\n+        String length = \".length\";\n+        if (!matcher.group(3).isEmpty()) {\n+            length = \".\" + matcher.group(3) + length;\n+        }\n+        String condition = matcher.group(1) + \" < \" + matcher.group(4) + length;\n+        String increment = matcher.group(1) + \"++\";\n+        String replacement = \"for (\" + init + \"; \" + condition + \"; \" + increment + \")\";\n+        matcher.appendReplacement(stringBuffer, replacement);\n+    }\n+    matcher.appendTail(stringBuffer);\n+    return stringBuffer.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}