{
    "patch": "    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (index >= elem.getLength()) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node child = elem.getChildAt(intIndex);\n    if (child == null) {\n      child = NodeUtil.newUndefinedNode(elem);\n    } else {\n      elem.detachChildren();\n      elem.addChildToBack(child);\n    }\n\n    // Replace the entire GETELEM with the value\n    parent.replaceChild(n, child);\n    reportCodeChange();\n    return child;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..f7534aa3 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,36 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (right.getType() != Token.NUMBER) {\n+      // Sometimes people like to use complex expressions to index into\n+      // arrays, or strings to index into array methods.\n+      return n;\n+    }\n+\n+    double index = right.getDouble();\n+    int intIndex = (int) index;\n+    if (intIndex != index) {\n+      error(INVALID_GETELEM_INDEX_ERROR, right);\n+      return n;\n+    }\n+\n+    if (index >= elem.getLength()) {\n+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+      return n;\n+    }\n+\n+    Node child = elem.getChildAt(intIndex);\n+    if (child == null) {\n+      child = NodeUtil.newUndefinedNode(elem);\n+    } else {\n+      elem.detachChildren();\n+      elem.addChildToBack(child);\n+    }\n+\n+    // Replace the entire GETELEM with the value\n+    parent.replaceChild(n, child);\n+    reportCodeChange();\n+    return child;\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}