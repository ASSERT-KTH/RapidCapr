{
    "patch": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Distribution {\n    private int[] counts;\n    private double[] values;\n\n    /**\n     * Creates a new Distribution object from the given counts and values.\n     *\n     * @param counts An array of non-negative integers representing the frequency of each value.\n     * @param values An array of double values representing the values in the distribution. Must have the same length as counts.\n     * @throws IllegalArgumentException If counts and values have different lengths, any count is negative, or values contains NaN or infinite values.\n     */\n    public Distribution(int[] counts, double[] values) {\n        if (counts.length != values.length) {\n            throw new IllegalArgumentException(\"counts and values must have the same length.\");\n        }\n\n        for (int count : counts) {\n            if (count < 0) {\n                throw new IllegalArgumentException(\"counts must contain non-negative integers.\");\n            }\n        }\n\n        for (double value : values) {\n            if (Double.isNaN(value) || Double.isInfinite(value)) {\n                throw new IllegalArgumentException(\"values must not contain NaN or infinite values.\");\n            }\n        }\n\n        this.counts = Arrays.copyOf(counts, counts.length);\n        this.values = Arrays.copyOf(values, values.length);\n    }\n\n    /**\n     * Creates a new Distribution object from the given list of counts and values.\n     *\n     * @param counts A list of non-negative integers representing the frequency of each value.\n     * @param values A list of double values representing the values in the distribution. Must have the same length as counts.\n     * @throws IllegalArgumentException If counts and values have different lengths, any count is negative, or values contains NaN or infinite values.\n     */\n    public Distribution(List<Integer> counts, List<Double> values) {\n        this(counts.stream().mapToInt(Integer::intValue).toArray(), convertDoubles(values));\n    }\n\n    /**\n     * Returns the probability density function (PDF) evaluated at the given value.\n     *\n     * @param x The value at which to evaluate the PDF.\n     * @return The PDF at the given value.\n     */\n    public double pdf(double x) {\n        double pdf = 0;\n\n        for (int i = 0; i < counts.length; i++) {\n            if (values[i] == x) {\n                pdf = counts[i] / (double) sum(counts);\n                break;\n            }\n        }\n\n        return pdf;\n    }\n\n    /**\n     * Returns the cumulative distribution function (CDF) evaluated at the given value.\n     *\n     * @param x The value at which to evaluate the CDF.\n     * @return The CDF at the given value.\n     */\n    public double cdf(double x) {\n        double cdf = 0;\n\n        for (int i = 0; i < counts.length; i++) {\n            if (values[i] <= x) {\n                cdf += counts[i];\n            }\n        }\n\n        return cdf / sum(counts);\n    }\n\n    /**\n     * Returns a random sample from the distribution.\n     *\n     * @return A random sample from the distribution.\n     */\n    public double sample() {\n        double[] accum = new double[counts.length];\n        accum[0] = counts[0];\n\n        for (int i = 1; i < counts.length; i++) {\n            accum[i] = accum[i-1] + counts[i];\n        }\n\n        Random rand = new Random();\n        double r = rand.nextDouble() * accum[accum.length - 1];\n\n        for (int i = 0; i < accum.length; i++) {\n            if (r <= accum[i]) {\n                return values[i];\n            }\n        }\n\n        return values[values.length - 1];\n    }\n\n    private static double sum(int[] arr) {\n        double sum = 0;\n\n        for (int i : arr) {\n            sum += i;\n        }\n\n        return sum;\n    }\n\n    private static double[] convertDoubles(List<Double> doubles) {\n        double[] ret = new double[doubles.size()];\n        for (int i = 0; i < ret.length; i++) {\n            ret[i] = doubles.get(i).doubleValue();\n        }\n        return ret;\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}