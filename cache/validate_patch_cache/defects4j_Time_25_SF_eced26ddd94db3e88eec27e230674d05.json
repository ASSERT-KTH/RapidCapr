{
    "patch": "public int getOffsetFromLocal(long instantLocal) throws IllegalArgumentException {\n    // get the initial offset using the standard algorithm\n    final int initialOffset = getOffset(instantLocal);\n\n    // if the initial offset is unchanged and not a DST transition, return it\n    if (getOffset(instantLocal - initialOffset) == initialOffset) {\n        return initialOffset;\n    }\n\n    // check if the instant is within a DST gap (i.e., skipped local time)\n    final long nextTransition = nextTransition(instantLocal - initialOffset);\n    if (nextTransition == instantLocal) {\n        // find the next transition after the gap\n        nextTransition = nextTransition(nextTransition);\n    }\n    final int nextOffset = getOffset(nextTransition);\n    if (nextOffset > initialOffset) {\n        // we are in a DST gap; return the later offset\n        return nextOffset;\n    }\n\n    // check if the instant is within a DST overlap (i.e., ambiguous local time)\n    final long prevTransition = previousTransition(instantLocal - initialOffset);\n    final int prevOffset = getOffset(prevTransition);\n    if (prevOffset != initialOffset && prevOffset != nextOffset) {\n        // we are in a DST overlap; return the offset that is closest to t\n        final long diffFromPrev = instantLocal - prevTransition;\n        final long diffToNext = nextTransition - instantLocal;\n        final int offset;\n        if (diffFromPrev < diffToNext) {\n            offset = prevOffset;\n        } else if (diffToNext < diffFromPrev) {\n            offset = nextOffset;\n        } else {\n            // ambiguous; we return the earlier offset by convention\n            offset = prevOffset;\n        }\n        return offset;\n    }\n\n    // we are in a non-DST transition zone\n    return initialOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..921bdb27 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,50 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) throws IllegalArgumentException {\n+    // get the initial offset using the standard algorithm\n+    final int initialOffset = getOffset(instantLocal);\n+\n+    // if the initial offset is unchanged and not a DST transition, return it\n+    if (getOffset(instantLocal - initialOffset) == initialOffset) {\n+        return initialOffset;\n+    }\n+\n+    // check if the instant is within a DST gap (i.e., skipped local time)\n+    final long nextTransition = nextTransition(instantLocal - initialOffset);\n+    if (nextTransition == instantLocal) {\n+        // find the next transition after the gap\n+        nextTransition = nextTransition(nextTransition);\n+    }\n+    final int nextOffset = getOffset(nextTransition);\n+    if (nextOffset > initialOffset) {\n+        // we are in a DST gap; return the later offset\n+        return nextOffset;\n+    }\n+\n+    // check if the instant is within a DST overlap (i.e., ambiguous local time)\n+    final long prevTransition = previousTransition(instantLocal - initialOffset);\n+    final int prevOffset = getOffset(prevTransition);\n+    if (prevOffset != initialOffset && prevOffset != nextOffset) {\n+        // we are in a DST overlap; return the offset that is closest to t\n+        final long diffFromPrev = instantLocal - prevTransition;\n+        final long diffToNext = nextTransition - instantLocal;\n+        final int offset;\n+        if (diffFromPrev < diffToNext) {\n+            offset = prevOffset;\n+        } else if (diffToNext < diffFromPrev) {\n+            offset = nextOffset;\n+        } else {\n+            // ambiguous; we return the earlier offset by convention\n+            offset = prevOffset;\n         }\n-        return offsetAdjusted;\n+        return offset;\n     }\n \n+    // we are in a non-DST transition zone\n+    return initialOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "error: cannot assign a value to final variable nextTransition",
    "test_result": "ERROR"
}