{
    "patch": "    \n    // Removed unused variables from the parameter list of a function\n    Node argList = getFunctionArgList(function);\n    Node param = argList.getFirstChild();\n    while (param != null) {\n      Var var = fnScope.getVar(param.getString());\n      if (!referenced.contains(var)) {\n        Node temp = param.getNext();\n        argList.removeChild(param);\n        param = temp;\n        compiler.reportCodeChange();\n      } else {\n        param = param.getNext();\n      }\n    }\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f10c219d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    // Removed unused variables from the parameter list of a function\n+    Node argList = getFunctionArgList(function);\n+    Node param = argList.getFirstChild();\n+    while (param != null) {\n+      Var var = fnScope.getVar(param.getString());\n+      if (!referenced.contains(var)) {\n+        Node temp = param.getNext();\n+        argList.removeChild(param);\n+        param = temp;\n+        compiler.reportCodeChange();\n+      } else {\n+        param = param.getNext();\n+      }\n+    }\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}