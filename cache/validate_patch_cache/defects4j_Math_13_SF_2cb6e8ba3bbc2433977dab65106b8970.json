{
    "patch": "    private RealMatrix squareRoot(RealMatrix m, double tolerance) {\n        int n = m.getRowDimension();\n        RealMatrix x = MatrixUtils.createRealIdentityMatrix(n);\n        RealMatrix y = m.divide(n); // initial guess (optional)\n\n        while (true) {\n            RealMatrix nextY = y.add(x.multiply(m).multiply(x).transpose()).scalarMultiply(0.5);\n            if (nextY.subtract(y).getNorm() < tolerance) {\n                break;\n            }\n            y = nextY;\n            x = x.multiply(2).subtract(y.multiply(x).multiply(x));\n        }\n\n        return y;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c88855208 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+    private RealMatrix squareRoot(RealMatrix m, double tolerance) {\n+        int n = m.getRowDimension();\n+        RealMatrix x = MatrixUtils.createRealIdentityMatrix(n);\n+        RealMatrix y = m.divide(n); // initial guess (optional)\n+\n+        while (true) {\n+            RealMatrix nextY = y.add(x.multiply(m).multiply(x).transpose()).scalarMultiply(0.5);\n+            if (nextY.subtract(y).getNorm() < tolerance) {\n+                break;\n+            }\n+            y = nextY;\n+            x = x.multiply(2).subtract(y.multiply(x).multiply(x));\n+        }\n+\n+        return y;\n     }\n }",
    "result_reason": "error: method squareRoot in class AbstractLeastSquaresOptimizer cannot be applied to given types;",
    "test_result": "ERROR"
}