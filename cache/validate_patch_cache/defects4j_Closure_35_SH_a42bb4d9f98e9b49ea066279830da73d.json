{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (objType.isPropertyTypeDeclared(prop)) {\n            JSType currPropType = objType.getPropertyType(prop);\n            if (currPropType.isSubtype(propType)) {\n              continue;\n            }\n            // handle re-declaration of a property\n            objType.undeclareProperty(prop);\n          }\n          JSType inferredType = getNativeType(VOID_TYPE);\n          if (objType.hasProperty(prop)) {\n            JSType declType = objType.getDeclaredPropertyType(prop);\n            inferredType = inferredType.getLeastSupertype(propType);\n            if (!inferredType.isSubtype(declType)) {\n              throw new RuntimeException(\"Conflicting declaration of property \" + prop);\n            }\n          } else {\n            inferredType = inferredType.getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, inferredType, null);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..c219b0a3 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1123,17 +1123,29 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+          if (objType.isPropertyTypeDeclared(prop)) {\n+            JSType currPropType = objType.getPropertyType(prop);\n+            if (currPropType.isSubtype(propType)) {\n+              continue;\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+            // handle re-declaration of a property\n+            objType.undeclareProperty(prop);\n           }\n+          JSType inferredType = getNativeType(VOID_TYPE);\n+          if (objType.hasProperty(prop)) {\n+            JSType declType = objType.getDeclaredPropertyType(prop);\n+            inferredType = inferredType.getLeastSupertype(propType);\n+            if (!inferredType.isSubtype(declType)) {\n+              throw new RuntimeException(\"Conflicting declaration of property \" + prop);\n+            }\n+          } else {\n+            inferredType = inferredType.getLeastSupertype(propType);\n+          }\n+          objType.defineInferredProperty(prop, inferredType, null);\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}