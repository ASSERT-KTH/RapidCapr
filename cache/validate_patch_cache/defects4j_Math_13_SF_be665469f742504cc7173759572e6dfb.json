{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final double EPSILON = 1.e-12;\n    final int MAX_ITERATIONS = 100;\n    int n = m.getRowDimension();\n    RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n    RealMatrix result = m;\n    RealMatrix prevResult = MatrixUtils.createRealMatrix(n, n);\n    int count = 0;\n    while (count < MAX_ITERATIONS && !prevResult.equals(result, EPSILON)) {\n        prevResult = result;\n        result = result.add(identity.scalarMultiply(-1.0));\n        result = result.scalarMultiply(0.5);\n        result = result.add(m.divide(result.getRowNorms()));\n        count++;\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..442f6c61d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final double EPSILON = 1.e-12;\n+    final int MAX_ITERATIONS = 100;\n+    int n = m.getRowDimension();\n+    RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n+    RealMatrix result = m;\n+    RealMatrix prevResult = MatrixUtils.createRealMatrix(n, n);\n+    int count = 0;\n+    while (count < MAX_ITERATIONS && !prevResult.equals(result, EPSILON)) {\n+        prevResult = result;\n+        result = result.add(identity.scalarMultiply(-1.0));\n+        result = result.scalarMultiply(0.5);\n+        result = result.add(m.divide(result.getRowNorms()));\n+        count++;\n     }\n+    return result;\n+}\n }",
    "result_reason": "error: method equals in class Object cannot be applied to given types;",
    "test_result": "ERROR"
}