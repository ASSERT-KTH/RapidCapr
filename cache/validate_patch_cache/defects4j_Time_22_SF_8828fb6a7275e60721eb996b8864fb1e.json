{
    "patch": "public abstract class BasePeriod implements Period {\n\n    private int weeks;\n\n    protected BasePeriod(long duration) {\n        this(duration, null, null);\n        // bug [3264409]\n    }\n\n    protected BasePeriod(long duration, Chronology chronology) {\n        this(duration, null, chronology);\n    }\n\n    protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\n        super();\n        DurationFieldType[] types = getSupportedFields();\n        int[] values = new int[types.length];\n        this.weeks = 0;\n\n        long remainder = duration;\n        for (int i=0; i<types.length; i++) {\n            if (types[i] == DurationFieldType.weeks()) {\n                values[i] = (int) (remainder / DateTimeConstants.MILLIS_PER_WEEK);\n                this.weeks = values[i];\n            } else {\n                int value = types[i].getField(chrono).getDifference(remainder, getEffectiveDurationField(chrono), values);\n                remainder = remainder - (long) value * types[i].getUnitMillis();\n                values[i] = value;\n            }\n        }\n        this.iType = (type != null ? type : PeriodType.standard());\n        super.mergePeriodType(type);\n        this.iValues = values;\n        super.setPeriod(chrono);\n    }\n\n    protected BasePeriod(long duration, ReadableInstant start, ReadableInstant end) {\n        super();\n        DurationFieldType[] types = getSupportedFields();\n        int[] values = new int[types.length];\n        this.weeks = 0;\n        Chronology chrono = DateTimeUtils.getInstantChronology(start);\n\n        long startMillis = DateTimeUtils.getInstantMillis(start);\n        long endMillis = DateTimeUtils.getInstantMillis(end);\n        for (int i=0; i<types.length; i++) {\n            if (types[i] == DurationFieldType.weeks()) {\n                long diff = endMillis - startMillis;\n                int value = (int) (diff / DateTimeConstants.MILLIS_PER_WEEK);\n                this.weeks = value;\n                values[i] = value;\n                startMillis = chrono.add(startMillis, value, DurationFieldType.weeks().getFieldType());\n            } else {\n                int value = types[i].getField(chrono).getDifference(endMillis, startMillis);\n                startMillis = chrono.add(startMillis, value, types[i].getFieldType());\n                values[i] = value;\n            }\n        }\n        this.iType = PeriodType.standard();\n        this.iValues = values;\n        super.setPeriod(chrono);\n    }\n\n    /**\n     * Constructor used when we already have a weeks field.\n     * @param weeks  the number of weeks in the period\n     * @param days  the number of days in the period\n     * @param hours  the number of hours in the period\n     * @param minutes  the number of minutes in the period\n     * @param seconds  the number of seconds in the period\n     * @param millis  the number of milliseconds in the period\n     */\n    protected BasePeriod(int weeks, int days, int hours, int minutes, int seconds, int millis) {\n        super();\n        this.weeks = weeks;\n        this.iType = PeriodType.standard();\n        this.iValues = new int[] {0, weeks, days, hours, minutes, seconds, millis};\n    }\n    \n   //Rest of the code\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..63ad0e3c 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,11 +218,88 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n+public abstract class BasePeriod implements Period {\n+\n+    private int weeks;\n+\n     protected BasePeriod(long duration) {\n         this(duration, null, null);\n         // bug [3264409]\n     }\n \n+    protected BasePeriod(long duration, Chronology chronology) {\n+        this(duration, null, chronology);\n+    }\n+\n+    protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\n+        super();\n+        DurationFieldType[] types = getSupportedFields();\n+        int[] values = new int[types.length];\n+        this.weeks = 0;\n+\n+        long remainder = duration;\n+        for (int i=0; i<types.length; i++) {\n+            if (types[i] == DurationFieldType.weeks()) {\n+                values[i] = (int) (remainder / DateTimeConstants.MILLIS_PER_WEEK);\n+                this.weeks = values[i];\n+            } else {\n+                int value = types[i].getField(chrono).getDifference(remainder, getEffectiveDurationField(chrono), values);\n+                remainder = remainder - (long) value * types[i].getUnitMillis();\n+                values[i] = value;\n+            }\n+        }\n+        this.iType = (type != null ? type : PeriodType.standard());\n+        super.mergePeriodType(type);\n+        this.iValues = values;\n+        super.setPeriod(chrono);\n+    }\n+\n+    protected BasePeriod(long duration, ReadableInstant start, ReadableInstant end) {\n+        super();\n+        DurationFieldType[] types = getSupportedFields();\n+        int[] values = new int[types.length];\n+        this.weeks = 0;\n+        Chronology chrono = DateTimeUtils.getInstantChronology(start);\n+\n+        long startMillis = DateTimeUtils.getInstantMillis(start);\n+        long endMillis = DateTimeUtils.getInstantMillis(end);\n+        for (int i=0; i<types.length; i++) {\n+            if (types[i] == DurationFieldType.weeks()) {\n+                long diff = endMillis - startMillis;\n+                int value = (int) (diff / DateTimeConstants.MILLIS_PER_WEEK);\n+                this.weeks = value;\n+                values[i] = value;\n+                startMillis = chrono.add(startMillis, value, DurationFieldType.weeks().getFieldType());\n+            } else {\n+                int value = types[i].getField(chrono).getDifference(endMillis, startMillis);\n+                startMillis = chrono.add(startMillis, value, types[i].getFieldType());\n+                values[i] = value;\n+            }\n+        }\n+        this.iType = PeriodType.standard();\n+        this.iValues = values;\n+        super.setPeriod(chrono);\n+    }\n+\n+    /**\n+     * Constructor used when we already have a weeks field.\n+     * @param weeks  the number of weeks in the period\n+     * @param days  the number of days in the period\n+     * @param hours  the number of hours in the period\n+     * @param minutes  the number of minutes in the period\n+     * @param seconds  the number of seconds in the period\n+     * @param millis  the number of milliseconds in the period\n+     */\n+    protected BasePeriod(int weeks, int days, int hours, int minutes, int seconds, int millis) {\n+        super();\n+        this.weeks = weeks;\n+        this.iType = PeriodType.standard();\n+        this.iValues = new int[] {0, weeks, days, hours, minutes, seconds, millis};\n+    }\n+    \n+   //Rest of the code\n+}\n+\n     /**\n      * Creates a period from the given millisecond duration, which is only really\n      * suitable for durations less than one day.",
    "result_reason": "error: class BasePeriod is already defined in package org.joda.time.base",
    "test_result": "ERROR"
}