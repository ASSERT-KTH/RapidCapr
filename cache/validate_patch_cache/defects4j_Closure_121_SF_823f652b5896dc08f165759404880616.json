{
    "patch": "private boolean canInline(\n    Reference declaration, Reference init, Reference reference) {\n  int declarationIndex = declaration.getNode().getChildIndex();\n  int initIndex = (init == null) ? -1\n                                 : init.getNode().getChildIndex();\n  int referenceIndex = reference.getNode().getChildIndex();\n\n  // We can only inline if the declaration, init, and reference nodes are\n  // consecutive in the scope block's list of children.\n  boolean canInline =\n      (init == null || initIndex == declarationIndex + 1) &&\n      (referenceIndex == declarationIndex + 1 ||\n       referenceIndex == initIndex + 1);\n  if (canInline) {\n    Node parent = declaration.getNode().getParent();\n    int lastIndex = parent.getChildCount() - 1;\n    canInline &= parent.getChildAt(lastIndex) != init.getNode();\n    for (int i = declarationIndex + 2; canInline && i <= lastIndex; i++) {\n      Node sibling = parent.getChildAt(i);\n      canInline &= sibling != init.getNode() && sibling != reference.getNode();\n      canInline &= !NodeUtil.isFunctionExpression(sibling);\n    }\n  }\n  return canInline;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 376abd40..26140e35 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -251,80 +251,31 @@ class InlineVariables implements CompilerPass {\n           && parent.getFirstChild() == n));\n     }\n \n-    private void inlineNonConstants(\n-        Var v, ReferenceCollection referenceInfo,\n-        boolean maybeModifiedArguments) {\n-      int refCount = referenceInfo.references.size();\n-      Reference declaration = referenceInfo.references.get(0);\n-      Reference init = referenceInfo.getInitializingReference();\n-      int firstRefAfterInit = (declaration == init) ? 2 : 3;\n-\n-      if (refCount > 1 &&\n-          isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n-        // if the variable is referenced more than once, we can only\n-        // inline it if it's immutable and never defined before referenced.\n-        Node value;\n-        if (init != null) {\n-          value = init.getAssignedValue();\n-        } else {\n-          // Create a new node for variable that is never initialized.\n-          Node srcLocation = declaration.getNode();\n-          value = NodeUtil.newUndefinedNode(srcLocation);\n-        }\n-        Preconditions.checkNotNull(value);\n-        inlineWellDefinedVariable(v, value, referenceInfo.references);\n-        staleVars.add(v);\n-      } else if (refCount == firstRefAfterInit) {\n-        // The variable likely only read once, try some more\n-        // complex inlining heuristics.\n-        Reference reference = referenceInfo.references.get(\n-            firstRefAfterInit - 1);\n-        if (canInline(declaration, init, reference)) {\n-          inline(v, declaration, init, reference);\n-          staleVars.add(v);\n-        }\n-      } else if (declaration != init && refCount == 2) {\n-        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n-          // The only reference is the initialization, remove the assignment and\n-          // the variable declaration.\n-          Node value = init.getAssignedValue();\n-          Preconditions.checkNotNull(value);\n-          inlineWellDefinedVariable(v, value, referenceInfo.references);\n-          staleVars.add(v);\n-        }\n-      }\n-\n-      // If this variable was not inlined normally, check if we can\n-      // inline an alias of it. (If the variable was inlined, then the\n-      // reference data is out of sync. We're better off just waiting for\n-      // the next pass.)\n-      if (!maybeModifiedArguments &&\n-          !staleVars.contains(v) &&\n-          referenceInfo.isWellDefined() &&\n-          referenceInfo.isAssignedOnceInLifetime()) {\n-          // Inlining the variable based solely on well-defined and assigned\n-          // once is *NOT* correct. We relax the correctness requirement if\n-          // the variable is declared constant.\n-        List<Reference> refs = referenceInfo.references;\n-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n-          Node nameNode = refs.get(i).getNode();\n-          if (aliasCandidates.containsKey(nameNode)) {\n-            AliasCandidate candidate = aliasCandidates.get(nameNode);\n-            if (!staleVars.contains(candidate.alias) &&\n-                !isVarInlineForbidden(candidate.alias)) {\n-              Reference aliasInit;\n-              aliasInit = candidate.refInfo.getInitializingReference();\n-              Node value = aliasInit.getAssignedValue();\n-              Preconditions.checkNotNull(value);\n-              inlineWellDefinedVariable(candidate.alias,\n-                  value,\n-                  candidate.refInfo.references);\n-              staleVars.add(candidate.alias);\n-            }\n-          }\n-        }\n-      }\n+private boolean canInline(\n+    Reference declaration, Reference init, Reference reference) {\n+  int declarationIndex = declaration.getNode().getChildIndex();\n+  int initIndex = (init == null) ? -1\n+                                 : init.getNode().getChildIndex();\n+  int referenceIndex = reference.getNode().getChildIndex();\n+\n+  // We can only inline if the declaration, init, and reference nodes are\n+  // consecutive in the scope block's list of children.\n+  boolean canInline =\n+      (init == null || initIndex == declarationIndex + 1) &&\n+      (referenceIndex == declarationIndex + 1 ||\n+       referenceIndex == initIndex + 1);\n+  if (canInline) {\n+    Node parent = declaration.getNode().getParent();\n+    int lastIndex = parent.getChildCount() - 1;\n+    canInline &= parent.getChildAt(lastIndex) != init.getNode();\n+    for (int i = declarationIndex + 2; canInline && i <= lastIndex; i++) {\n+      Node sibling = parent.getChildAt(i);\n+      canInline &= sibling != init.getNode() && sibling != reference.getNode();\n+      canInline &= !NodeUtil.isFunctionExpression(sibling);\n     }\n+  }\n+  return canInline;\n+}\n \n     /**\n      * If there are any variable references in the given node tree, blacklist",
    "result_reason": "error: method canInline(Reference,Reference,Reference) is already defined in class InlineVariables.InliningBehavior",
    "test_result": "ERROR"
}