{
    "patch": "if (n.isAssign() && NodeUtil.isExpressionNode(n.getFirstChild()) && appliedToVar.get()) {\n          Node rhs = n.getLastChild();\n          if (rhs.isCall() && !NodeUtil.functionCallHasSideEffects(rhs)) {\n            String rhsName = rhs.getFirstChild().getQualifiedName();\n            if (safeFunctions.contains(rhsName)) {\n              if (allowedFunctionNames.contains(rhsName)) {\n                return false;\n              } else {\n                return true;\n              }\n            }\n          }\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..8064c8be 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,20 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isAssign() && NodeUtil.isExpressionNode(n.getFirstChild()) && appliedToVar.get()) {\n+          Node rhs = n.getLastChild();\n+          if (rhs.isCall() && !NodeUtil.functionCallHasSideEffects(rhs)) {\n+            String rhsName = rhs.getFirstChild().getQualifiedName();\n+            if (safeFunctions.contains(rhsName)) {\n+              if (allowedFunctionNames.contains(rhsName)) {\n+                return false;\n+              } else {\n+                return true;\n+              }\n+            }\n+          }\n+          return false;\n+        }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}