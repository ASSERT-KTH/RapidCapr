{
    "patch": "        long parsedOffset = (bucket.getOffsetInteger() != null) ? bucket.getOffsetInteger() : ((bucket.getZone() != null) ? bucket.getZone().getOffsetFromLocal(instantLocal) : 0);\n        instantLocal = parsedOffset + (instantMillis - parsedOffset) / DateTimeConstants.MILLIS_PER_SECOND * DateTimeConstants.MILLIS_PER_SECOND;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..f8088dc2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,8 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        long parsedOffset = (bucket.getOffsetInteger() != null) ? bucket.getOffsetInteger() : ((bucket.getZone() != null) ? bucket.getZone().getOffsetFromLocal(instantLocal) : 0);\n+        instantLocal = parsedOffset + (instantMillis - parsedOffset) / DateTimeConstants.MILLIS_PER_SECOND * DateTimeConstants.MILLIS_PER_SECOND;\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}