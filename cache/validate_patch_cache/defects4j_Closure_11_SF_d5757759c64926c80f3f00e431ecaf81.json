{
    "patch": "public boolean getprop(String input) {\n  if (input.indexOf('-') == -1) {\n    return false;\n  }\n  String[] parts = input.split(\"-\");\n  if (parts.length < 2) {\n    return false;\n  }\n  String prop = parts[0];\n  String value = parts[1];\n  if (value.isEmpty()) {\n    return false;\n  }\n  char firstChar = value.charAt(0);\n  if (firstChar < '0' || firstChar > '9') {\n    return false;\n  }\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..b271da20 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public boolean getprop(String input) {\n+  if (input.indexOf('-') == -1) {\n+    return false;\n+  }\n+  String[] parts = input.split(\"-\");\n+  if (parts.length < 2) {\n+    return false;\n+  }\n+  String prop = parts[0];\n+  String value = parts[1];\n+  if (value.isEmpty()) {\n+    return false;\n+  }\n+  char firstChar = value.charAt(0);\n+  if (firstChar < '0' || firstChar > '9') {\n+    return false;\n+  }\n+  return true;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}