{
    "patch": "public static boolean equals(CharSequence cs1, CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1.length() != cs2.length()) {\n        return false;\n    }\n    CharSequenceIterator it1 = new CharSequenceIterator(cs1);\n    CharSequenceIterator it2 = new CharSequenceIterator(cs2);\n    while (it1.hasNext() && it2.hasNext()) {\n        if (it1.nextChar() != it2.nextChar()) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static class CharSequenceIterator {\n    private final CharSequence cs;\n    private int index;\n\n    CharSequenceIterator(CharSequence cs) {\n        this.cs = cs;\n        this.index = 0;\n    }\n\n    boolean hasNext() {\n        return index < cs.length();\n    }\n\n    char nextChar() throws NoSuchElementException {\n        if (!hasNext()) {\n            throw new NoSuchElementException();\n        }\n        return cs.charAt(index++);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex 535a3f24..3cbcfbdb 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -778,15 +778,46 @@ public class StringUtils {\n      * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n      * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)\n      */\n-    public static boolean equals(CharSequence cs1, CharSequence cs2) {\n-        if (cs1 == cs2) {\n-            return true;\n-        }\n-        if (cs1 == null || cs2 == null) {\n+public static boolean equals(CharSequence cs1, CharSequence cs2) {\n+    if (cs1 == cs2) {\n+        return true;\n+    }\n+    if (cs1 == null || cs2 == null) {\n+        return false;\n+    }\n+    if (cs1.length() != cs2.length()) {\n+        return false;\n+    }\n+    CharSequenceIterator it1 = new CharSequenceIterator(cs1);\n+    CharSequenceIterator it2 = new CharSequenceIterator(cs2);\n+    while (it1.hasNext() && it2.hasNext()) {\n+        if (it1.nextChar() != it2.nextChar()) {\n             return false;\n         }\n-            return cs1.equals(cs2);\n     }\n+    return true;\n+}\n+\n+private static class CharSequenceIterator {\n+    private final CharSequence cs;\n+    private int index;\n+\n+    CharSequenceIterator(CharSequence cs) {\n+        this.cs = cs;\n+        this.index = 0;\n+    }\n+\n+    boolean hasNext() {\n+        return index < cs.length();\n+    }\n+\n+    char nextChar() throws NoSuchElementException {\n+        if (!hasNext()) {\n+            throw new NoSuchElementException();\n+        }\n+        return cs.charAt(index++);\n+    }\n+}\n \n     /**\n      * <p>Compares two CharSequences, returning {@code true} if they represent",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}