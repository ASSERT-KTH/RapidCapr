{
    "patch": "private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n        double result;\n        double lval = left.getDouble();\n        double rval = right.getDouble();\n\n        // Check ranges. Do not clip the double to a 32-bit range. \n        // The user likely does not intend that.\n        if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE ||\n            rval < 0 || rval >= 32) {\n            // Return original node and report error\n            if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE) {\n                error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            }\n            if (rval < 0 || rval >= 32) {\n                error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n            }\n            return n;\n        }\n\n        // Only the lower 5 bits of the shift value are used when shifting,\n        // So we need to convert the double value to its integer equivalent\n        // before performing the shift operation.\n        int lvalInt = (int) lval;\n        int rvalInt = (int) rval;\n\n        // If the fractional part in number is non-zero, return original node and report error.\n        if ((double)Math.round(lval) != lval || (double)Math.round(rval) != rval) {\n            error(FRACTIONAL_BITWISE_OPERAND, left);\n            return n;\n        }\n\n        switch (n.getType()) {\n            case Token.LSH:\n                result = lvalInt << rvalInt;\n                break;\n            case Token.RSH:\n                result = lvalInt >> rvalInt;\n                break;\n            case Token.URSH:\n                // In Java, the >>> operator is treated as a signed right shift,\n                // so we need to convert the result back to an unsigned value\n                result = Integer.toUnsignedLong(lvalInt) >>> rvalInt;\n                break;\n            default:\n                throw new AssertionError(\"Unknown shift operator: \" +\n                    Node.tokenToName(n.getType()));\n        }\n\n        Node newNumber = Node.newNumber(result);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n\n        return newNumber;\n    }\n\n    return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..5b14a0fa 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -649,68 +649,64 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n   /**\n    * Try to fold shift operations\n    */\n-  private Node tryFoldShift(Node n, Node left, Node right) {\n-    if (left.getType() == Token.NUMBER &&\n-        right.getType() == Token.NUMBER) {\n-\n-      double result;\n-      double lval = left.getDouble();\n-      double rval = right.getDouble();\n-\n-      // check ranges.  We do not do anything that would clip the double to\n-      // a 32-bit range, since the user likely does not intend that.\n-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n-        return n;\n-      }\n-\n-      // only the lower 5 bits are used when shifting, so don't do anything\n-      // if the shift amount is outside [0,32)\n-      if (!(rval >= 0 && rval < 32)) {\n-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n-        return n;\n-      }\n+private Node tryFoldShift(Node n, Node left, Node right) {\n+    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n+        double result;\n+        double lval = left.getDouble();\n+        double rval = right.getDouble();\n+\n+        // Check ranges. Do not clip the double to a 32-bit range. \n+        // The user likely does not intend that.\n+        if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE ||\n+            rval < 0 || rval >= 32) {\n+            // Return original node and report error\n+            if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE) {\n+                error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n+            }\n+            if (rval < 0 || rval >= 32) {\n+                error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n+            }\n+            return n;\n+        }\n \n-      // Convert the numbers to ints\n-      int lvalInt = (int) lval;\n-      if (lvalInt != lval) {\n-        error(FRACTIONAL_BITWISE_OPERAND, left);\n-        return n;\n-      }\n+        // Only the lower 5 bits of the shift value are used when shifting,\n+        // So we need to convert the double value to its integer equivalent\n+        // before performing the shift operation.\n+        int lvalInt = (int) lval;\n+        int rvalInt = (int) rval;\n \n-      int rvalInt = (int) rval;\n-      if (rvalInt != rval) {\n-        error(FRACTIONAL_BITWISE_OPERAND, right);\n-        return n;\n-      }\n+        // If the fractional part in number is non-zero, return original node and report error.\n+        if ((double)Math.round(lval) != lval || (double)Math.round(rval) != rval) {\n+            error(FRACTIONAL_BITWISE_OPERAND, left);\n+            return n;\n+        }\n \n-      switch (n.getType()) {\n-        case Token.LSH:\n-          result = lvalInt << rvalInt;\n-          break;\n-        case Token.RSH:\n-          result = lvalInt >> rvalInt;\n-          break;\n-        case Token.URSH:\n-          // JavaScript handles zero shifts on signed numbers differently than\n-          // Java as an Java int can not represent the unsigned 32-bit number\n-          // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n-          break;\n-        default:\n-          throw new AssertionError(\"Unknown shift operator: \" +\n-              Node.tokenToName(n.getType()));\n-      }\n+        switch (n.getType()) {\n+            case Token.LSH:\n+                result = lvalInt << rvalInt;\n+                break;\n+            case Token.RSH:\n+                result = lvalInt >> rvalInt;\n+                break;\n+            case Token.URSH:\n+                // In Java, the >>> operator is treated as a signed right shift,\n+                // so we need to convert the result back to an unsigned value\n+                result = Integer.toUnsignedLong(lvalInt) >>> rvalInt;\n+                break;\n+            default:\n+                throw new AssertionError(\"Unknown shift operator: \" +\n+                    Node.tokenToName(n.getType()));\n+        }\n \n-      Node newNumber = Node.newNumber(result);\n-      n.getParent().replaceChild(n, newNumber);\n-      reportCodeChange();\n+        Node newNumber = Node.newNumber(result);\n+        n.getParent().replaceChild(n, newNumber);\n+        reportCodeChange();\n \n-      return newNumber;\n+        return newNumber;\n     }\n \n     return n;\n-  }\n+}\n \n   /**\n    * Try to fold comparison nodes, e.g ==",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}