{
    "patch": "    final Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    final boolean isSetterOrGetter = NodeUtil.isGetOrSetKey(function.getParent());\n    if (isSetterOrGetter) {\n      return;\n    }\n    final Node paramList = NodeUtil.getFunctionParameters(function);\n    final boolean modifyCallers = isSimpleOperation && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Node param = paramList.getFirstChild();\n      while (param != null && !referenced.contains(fnScope.getVar(param.getString()))) {\n        paramList.removeChild(param);\n        compiler.reportCodeChange();\n        param = param.getNext();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..11617944 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    final Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    final boolean isSetterOrGetter = NodeUtil.isGetOrSetKey(function.getParent());\n+    if (isSetterOrGetter) {\n+      return;\n+    }\n+    final Node paramList = NodeUtil.getFunctionParameters(function);\n+    final boolean modifyCallers = isSimpleOperation && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      Node param = paramList.getFirstChild();\n+      while (param != null && !referenced.contains(fnScope.getVar(param.getString()))) {\n+        paramList.removeChild(param);\n+        compiler.reportCodeChange();\n+        param = param.getNext();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}