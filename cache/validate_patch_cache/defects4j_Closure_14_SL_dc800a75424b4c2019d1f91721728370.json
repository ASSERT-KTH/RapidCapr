{
    "patch": "              if (cfa != null && finallyNode != null) {\n                // If there is a cfa, create an unconditional edge from `fromNode` to `finallyNode`.\n                // This connects the `try` block to the `finally` block.\n                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n\n                // If there is a cfa, create a fallthrough edge from `finallyNode` to the next node that\n                // control should pass to after the `finally` block.\n                cfa.createEdge(finallyNode, Branch.UNCOND, computeFallThrough(finallyNode));\n              }\n\n              // Return the follow node after the `finally` block.\n              return computeFollowNode(fromNode, parent, cfa);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..2f5d2f14 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,18 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              if (cfa != null && finallyNode != null) {\n+                // If there is a cfa, create an unconditional edge from `fromNode` to `finallyNode`.\n+                // This connects the `try` block to the `finally` block.\n+                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+\n+                // If there is a cfa, create a fallthrough edge from `finallyNode` to the next node that\n+                // control should pass to after the `finally` block.\n+                cfa.createEdge(finallyNode, Branch.UNCOND, computeFallThrough(finallyNode));\n+              }\n+\n+              // Return the follow node after the `finally` block.\n+              return computeFollowNode(fromNode, parent, cfa);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "junit.framework.AssertionFailedError: No cross edges found",
    "test_result": "FAIL"
}