{
    "patch": "      if (NodeUtil.isLValue(parent)) {\n        // If we're doing an assignment to an object's prototype, we shouldn't bother\n        // traversing the function.\n        Node objectToAssign = findObjectBeingAssigned(parent.getFirstChild(), n);\n        if (objectToAssign != null &&\n           objectToAssign.getType() == Token.GETPROP &&\n           \"prototype\".equals(objectToAssign.getLastChild().getString())) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..5cb0ff77 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,15 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(parent)) {\n+        // If we're doing an assignment to an object's prototype, we shouldn't bother\n+        // traversing the function.\n+        Node objectToAssign = findObjectBeingAssigned(parent.getFirstChild(), n);\n+        if (objectToAssign != null &&\n+           objectToAssign.getType() == Token.GETPROP &&\n+           \"prototype\".equals(objectToAssign.getLastChild().getString())) {\n+          return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}