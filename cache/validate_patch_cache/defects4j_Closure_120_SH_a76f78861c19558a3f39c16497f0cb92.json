{
    "patch": ">>>      } else if (block.isBranchTarget() && block.endsWithConditionalBranch()) {\n>>>        return references.stream()\n>>>            .filter(Reference::writesVariable)\n>>>            .map(Reference::getBasicBlock)\n>>>            .filter(BasicBlock::endsWithConditionalBranch)\n>>>            .anyMatch(branch -> branch<EdgeType.TRUE>.getTarget() == block ||\n>>>                                branch<EdgeType.FALSE>.getTarget() == block);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..70f19970 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+>>>      } else if (block.isBranchTarget() && block.endsWithConditionalBranch()) {\n+>>>        return references.stream()\n+>>>            .filter(Reference::writesVariable)\n+>>>            .map(Reference::getBasicBlock)\n+>>>            .filter(BasicBlock::endsWithConditionalBranch)\n+>>>            .anyMatch(branch -> branch<EdgeType.TRUE>.getTarget() == block ||\n+>>>                                branch<EdgeType.FALSE>.getTarget() == block);\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}