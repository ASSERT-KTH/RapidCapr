{
    "patch": "public double density(final double[] vals) throws DimensionMismatchException {\n        final int dim = getDimension();\n        if (vals.length != dim) {\n            throw new DimensionMismatchException(vals.length, dim);\n        }\n        final double exponent = FastMath.exp(-0.5 * mahalanobis(vals));\n        final double normalization =\n                FastMath.pow(2 * FastMath.PI, -0.5 * dim) * FastMath.pow(covarianceMatrixDeterminant, -0.5);\n        return normalization * exponent;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..94b73fc83 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -174,16 +174,15 @@ public class MultivariateNormalDistribution\n     }\n \n     /** {@inheritDoc} */\n-    public double density(final double[] vals) throws DimensionMismatchException {\n+public double density(final double[] vals) throws DimensionMismatchException {\n         final int dim = getDimension();\n         if (vals.length != dim) {\n             throw new DimensionMismatchException(vals.length, dim);\n         }\n-\n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n-    }\n+        final double exponent = FastMath.exp(-0.5 * mahalanobis(vals));\n+        final double normalization =\n+                FastMath.pow(2 * FastMath.PI, -0.5 * dim) * FastMath.pow(covarianceMatrixDeterminant, -0.5);\n+        return normalization * exponent;\n \n     /**\n      * Gets the square root of each element on the diagonal of the covariance",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}