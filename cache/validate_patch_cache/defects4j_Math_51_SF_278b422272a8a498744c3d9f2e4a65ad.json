{
    "patch": "import org.apache.commons.math.analysis.UnivariateFunction;\nimport org.apache.commons.math.analysis.solvers.BaseUnivariateSolver;\nimport org.apache.commons.math.exception.*;\nimport org.apache.commons.math.util.FastMath;\n\npublic class SecantSolver extends BaseUnivariateSolver {\n\n    /**\n     * Construct a solver with default accuracy (1e-6).\n     */\n    public SecantSolver() {\n        super(1e-6);\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param absoluteAccuracy Absolute accuracy.\n     */\n    public SecantSolver(double absoluteAccuracy) {\n        super(absoluteAccuracy);\n    }\n\n    /**\n     * Construct a solver with given accuracies.\n     *\n     * @param relativeAccuracy Desired relative accuracy.\n     * @param absoluteAccuracy Desired absolute accuracy.\n     */\n    public SecantSolver(double relativeAccuracy,\n                        double absoluteAccuracy) {\n        super(relativeAccuracy, absoluteAccuracy);\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @param f Function to solve.\n     * @param min Lower bound of the search interval.\n     * @param max Upper bound of the search interval.\n     * @return the root.\n     * @throws NullArgumentException If {@code f} is {@code null}.\n     * @throws NoBracketingException If the function has the same sign at the\n     * bounds.\n     * @throws TooManyEvaluationsException if the maximum iteration count is exceeded.\n     */\n    public double solve(int maxEval, UnivariateFunction f, double min, double max,\n                        AllowedSolution allowedSolution)\n            throws NullArgumentException, NoBracketingException, TooManyEvaluationsException {\n        return super.solve(maxEval, f, min, max, 0.5 * (min + max), allowedSolution);\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @param f Function to solve.\n     * @param initial Initial approximation to the root.\n     * @return the root.\n     * @throws NullArgumentException If {@code f} is {@code null}.\n     * @throws TooManyEvaluationsException If the maximum iteration count is exceeded.\n     */\n    public double solve(int maxEval, UnivariateFunction f, double initial, AllowedSolution allowedSolution)\n            throws NullArgumentException, TooManyEvaluationsException {\n        final double absoluteAccuracy = getAbsoluteAccuracy();\n        double f0 = f.value(initial);\n        double f1 = f.value(initial + absoluteAccuracy);\n        double i = 1;\n        double p0 = initial;\n        double p1 = initial + absoluteAccuracy;\n        while (i < maxEval) {\n            if (FastMath.abs(f1) < FastMath.abs(f0)) {\n                final double tmp1 = p0;\n                p0 = p1;\n                p1 = tmp1;\n                final double tmp2 = f0;\n                f0 = f1;\n                f1 = tmp2;\n            }\n            final double fdiff = f0 - f1;\n            double nextp = p1 + (p1 - p0) * f1 / fdiff;\n            final double nextf = f.value(nextp);\n            if (FastMath.abs(nextf) <= getFunctionValueAccuracy()) {\n                switch (allowedSolution) {\n                case ANY_SIDE:\n                    return nextp;\n                case LEFT_SIDE:\n                    if (fdiff < 0) {\n                        return nextp;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (fdiff > 0) {\n                        return nextp;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (nextf <= 0) {\n                        return nextp;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (nextf >= 0) {\n                        return nextp;\n                    }\n                    break;\n                default :\n                    throw new MathInternalError();\n                }\n            }\n            p0 = p1;\n            f0 = f1;\n            p1 = nextp;\n            f1 = nextf;\n            i++;\n        }\n        throw new TooManyEvaluationsException(maxEval);\n    }\n\n    protected final double doSolve() {\n        throw new MathInternalError(); // Should never be called.\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..f6883db30 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,127 +125,129 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n-\n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+import org.apache.commons.math.analysis.UnivariateFunction;\n+import org.apache.commons.math.analysis.solvers.BaseUnivariateSolver;\n+import org.apache.commons.math.exception.*;\n+import org.apache.commons.math.util.FastMath;\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+public class SecantSolver extends BaseUnivariateSolver {\n \n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+    /**\n+     * Construct a solver with default accuracy (1e-6).\n+     */\n+    public SecantSolver() {\n+        super(1e-6);\n+    }\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param absoluteAccuracy Absolute accuracy.\n+     */\n+    public SecantSolver(double absoluteAccuracy) {\n+        super(absoluteAccuracy);\n+    }\n \n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+    /**\n+     * Construct a solver with given accuracies.\n+     *\n+     * @param relativeAccuracy Desired relative accuracy.\n+     * @param absoluteAccuracy Desired absolute accuracy.\n+     */\n+    public SecantSolver(double relativeAccuracy,\n+                        double absoluteAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy);\n+    }\n \n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n-            }\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @param f Function to solve.\n+     * @param min Lower bound of the search interval.\n+     * @param max Upper bound of the search interval.\n+     * @return the root.\n+     * @throws NullArgumentException If {@code f} is {@code null}.\n+     * @throws NoBracketingException If the function has the same sign at the\n+     * bounds.\n+     * @throws TooManyEvaluationsException if the maximum iteration count is exceeded.\n+     */\n+    public double solve(int maxEval, UnivariateFunction f, double min, double max,\n+                        AllowedSolution allowedSolution)\n+            throws NullArgumentException, NoBracketingException, TooManyEvaluationsException {\n+        return super.solve(maxEval, f, min, max, 0.5 * (min + max), allowedSolution);\n+    }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @param f Function to solve.\n+     * @param initial Initial approximation to the root.\n+     * @return the root.\n+     * @throws NullArgumentException If {@code f} is {@code null}.\n+     * @throws TooManyEvaluationsException If the maximum iteration count is exceeded.\n+     */\n+    public double solve(int maxEval, UnivariateFunction f, double initial, AllowedSolution allowedSolution)\n+            throws NullArgumentException, TooManyEvaluationsException {\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+        double f0 = f.value(initial);\n+        double f1 = f.value(initial + absoluteAccuracy);\n+        double i = 1;\n+        double p0 = initial;\n+        double p1 = initial + absoluteAccuracy;\n+        while (i < maxEval) {\n+            if (FastMath.abs(f1) < FastMath.abs(f0)) {\n+                final double tmp1 = p0;\n+                p0 = p1;\n+                p1 = tmp1;\n+                final double tmp2 = f0;\n                 f0 = f1;\n-                inverted = !inverted;\n-            } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n-                }\n+                f1 = tmp2;\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n-\n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n+            final double fdiff = f0 - f1;\n+            double nextp = p1 + (p1 - p0) * f1 / fdiff;\n+            final double nextf = f.value(nextp);\n+            if (FastMath.abs(nextf) <= getFunctionValueAccuracy()) {\n+                switch (allowedSolution) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    return nextp;\n                 case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n+                    if (fdiff < 0) {\n+                        return nextp;\n                     }\n                     break;\n                 case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n+                    if (fdiff > 0) {\n+                        return nextp;\n                     }\n                     break;\n                 case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n+                    if (nextf <= 0) {\n+                        return nextp;\n                     }\n                     break;\n                 case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n+                    if (nextf >= 0) {\n+                        return nextp;\n                     }\n                     break;\n-                default:\n-                    throw new MathInternalError();\n-                }\n-            }\n-\n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n+                default :\n                     throw new MathInternalError();\n                 }\n             }\n+            p0 = p1;\n+            f0 = f1;\n+            p1 = nextp;\n+            f1 = nextf;\n+            i++;\n         }\n+        throw new TooManyEvaluationsException(maxEval);\n     }\n \n+    protected final double doSolve() {\n+        throw new MathInternalError(); // Should never be called.\n+    }\n+}\n+\n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}