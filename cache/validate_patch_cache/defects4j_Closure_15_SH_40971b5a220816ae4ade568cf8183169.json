{
    "patch": "  if (n.isName()) {\n    String name = n.getString();\n    if (varNames.contains(name)) {\n      // For each dependent variable, check if it is passed to a\n      // non-side-effect-free function.\n      for (int argNum = 0; argNum < n.getParent().getChildCount(); argNum++) {\n        Node caller = n.getParent();\n        Node argNode = caller.getChildAtIndex(argNum);\n        if (ControlFlowGraph.isEnteringNewCfgNode(argNode) || !apply(argNode)) {\n          // There was a call to a non-side-effect-free function, or a branch\n          // for a dependent variable, so mark this variable as tainted.\n          taintedVars.add(name);\n          return true;\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..3e7832e3 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,23 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+  if (n.isName()) {\n+    String name = n.getString();\n+    if (varNames.contains(name)) {\n+      // For each dependent variable, check if it is passed to a\n+      // non-side-effect-free function.\n+      for (int argNum = 0; argNum < n.getParent().getChildCount(); argNum++) {\n+        Node caller = n.getParent();\n+        Node argNode = caller.getChildAtIndex(argNum);\n+        if (ControlFlowGraph.isEnteringNewCfgNode(argNode) || !apply(argNode)) {\n+          // There was a call to a non-side-effect-free function, or a branch\n+          // for a dependent variable, so mark this variable as tainted.\n+          taintedVars.add(name);\n+          return true;\n+        }\n+      }\n+    }\n+  }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}