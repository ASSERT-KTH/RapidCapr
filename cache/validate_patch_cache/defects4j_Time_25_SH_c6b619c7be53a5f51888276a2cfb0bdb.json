{
    "patch": "// if the offsets differ, we must be near a DST boundary\nif (offsetLocal != offsetAdjusted) {\n    // check if time is in a \"spring-forward\" transition\n    if (offsetAdjusted - offsetLocal > 0) {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n    }\n    // check if time is in a \"fall-back\" transition\n    if (offsetLocal - offsetAdjusted > 0) {\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n        if (prevAdjusted < instantAdjusted && prevLocal > instantAdjusted) {\n            // if so, use the earlier offset\n            return getOffset(prevLocal);\n        } else if (prevLocal != prevAdjusted) {\n            return offsetLocal;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f3c68c6e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,29 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+// if the offsets differ, we must be near a DST boundary\n+if (offsetLocal != offsetAdjusted) {\n+    // check if time is in a \"spring-forward\" transition\n+    if (offsetAdjusted - offsetLocal > 0) {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+    }\n+    // check if time is in a \"fall-back\" transition\n+    if (offsetLocal - offsetAdjusted > 0) {\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+        if (prevAdjusted < instantAdjusted && prevLocal > instantAdjusted) {\n+            // if so, use the earlier offset\n+            return getOffset(prevLocal);\n+        } else if (prevLocal != prevAdjusted) {\n+            return offsetLocal;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}