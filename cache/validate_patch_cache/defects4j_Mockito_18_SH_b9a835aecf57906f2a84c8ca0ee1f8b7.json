{
    "patch": "@Override\npublic Object handleChange(Method method, Object[] args, Object target) {\n    Caching annotation = method.getAnnotation(Caching.class);\n    if (annotation != null) {\n        CacheKey cacheKey = new CacheKey(method, args);\n        if (cache.containsKey(cacheKey)) {\n            CacheEntry cacheEntry = cache.get(cacheKey);\n            if (cacheEntry.isValid(annotation.ttl())) {\n                return cacheEntry.getValue();\n            } else {\n                cache.remove(cacheKey);\n            }\n        }\n        Object returnValue = ReflectionUtils.invokeMethod(method, target, args);\n        cache.put(cacheKey, new CacheEntry(returnValue));\n        return returnValue;\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}