{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n\n      // create default assingment to explicit undefined value for the last arguments which have been removed\n      Node functionBody = function.getLastChild();\n      Node undefinedNode = new Node(Token.DEFAULT_VALUE, Node.newString(Token.NAME, \"undefined\"), Node.newString(Token.NAME, \"undefined\"));\n      undefinedNode.useSourceInfoFromForTree(functionBody);\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        argList.removeChild(lastArg);\n        undefinedNode.addChildToFront(new Node(Token.NAME, var.getName()));\n      }\n      if (undefinedNode.hasChildren()) {\n        functionBody.addChildToBack(undefinedNode);\n        compiler.reportCodeChange();\n      }\n\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..be7734c5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,48 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+\n+      // create default assingment to explicit undefined value for the last arguments which have been removed\n+      Node functionBody = function.getLastChild();\n+      Node undefinedNode = new Node(Token.DEFAULT_VALUE, Node.newString(Token.NAME, \"undefined\"), Node.newString(Token.NAME, \"undefined\"));\n+      undefinedNode.useSourceInfoFromForTree(functionBody);\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        argList.removeChild(lastArg);\n+        undefinedNode.addChildToFront(new Node(Token.NAME, var.getName()));\n+      }\n+      if (undefinedNode.hasChildren()) {\n+        functionBody.addChildToBack(undefinedNode);\n+        compiler.reportCodeChange();\n+      }\n+\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}