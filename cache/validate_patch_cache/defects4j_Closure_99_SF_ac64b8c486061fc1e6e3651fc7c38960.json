{
    "patch": " public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    // Check whether the current node is a function.\n    if (n.isFunction()) {\n        // Get the JSDoc information for the function (if it exists).\n        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n\n        // Check for a constructor, @this, or @override annotation in the function's JSDoc.\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Only traverse the function if it is either in the global scope or directly references \"this\".\n        if ((t.getScope().isGlobal() || NodeUtil.containsType(n, Token.THIS))) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Check whether the current node is part of an assignment statement.\n    if (parent != null && parent.isAssign()) {\n        // Get the left-hand side (LHS) and right-hand side (RHS) of the assignment.\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        // Check whether the current node is the LHS.\n        if (n == lhs) {\n            // Always traverse the LHS of the assignment.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            // Check whether the assignment targets a prototype property.\n            if (isPrototypeProperty(lhs)) {\n                return false;\n            }\n\n            // Check whether the assignment targets a property of \"this\".\n            String lhsQualifiedName = lhs.getQualifiedName();\n            if (lhsQualifiedName != null && lhsQualifiedName.startsWith(\"this.\")) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    // Traverse all other nodes.\n    return true;\n}\n\n/**\n * Checks whether a node targets a prototype property.\n *\n * @param node The node to check.\n * @return True if the node targets a prototype property, false otherwise.\n */\nprivate boolean isPrototypeProperty(Node node) {\n    Node lastChild = node.getLastChild();\n    return node.isGetProp() && lastChild != null && lastChild.getString().equals(\"prototype\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..87418d59 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,67 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+ public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    // Check whether the current node is a function.\n+    if (n.isFunction()) {\n+        // Get the JSDoc information for the function (if it exists).\n+        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+        // Check for a constructor, @this, or @override annotation in the function's JSDoc.\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+            return false;\n+        }\n+\n+        // Only traverse the function if it is either in the global scope or directly references \"this\".\n+        if ((t.getScope().isGlobal() || NodeUtil.containsType(n, Token.THIS))) {\n+            return true;\n+        } else {\n+            return false;\n+        }\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+    // Check whether the current node is part of an assignment statement.\n+    if (parent != null && parent.isAssign()) {\n+        // Get the left-hand side (LHS) and right-hand side (RHS) of the assignment.\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        // Check whether the current node is the LHS.\n+        if (n == lhs) {\n+            // Always traverse the LHS of the assignment.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+        } else {\n+            // Check whether the assignment targets a prototype property.\n+            if (isPrototypeProperty(lhs)) {\n+                return false;\n+            }\n+\n+            // Check whether the assignment targets a property of \"this\".\n+            String lhsQualifiedName = lhs.getQualifiedName();\n+            if (lhsQualifiedName != null && lhsQualifiedName.startsWith(\"this.\")) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n     }\n \n+    // Traverse all other nodes.\n     return true;\n-  }\n+}\n+\n+/**\n+ * Checks whether a node targets a prototype property.\n+ *\n+ * @param node The node to check.\n+ * @return True if the node targets a prototype property, false otherwise.\n+ */\n+private boolean isPrototypeProperty(Node node) {\n+    Node lastChild = node.getLastChild();\n+    return node.isGetProp() && lastChild != null && lastChild.getString().equals(\"prototype\");\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}