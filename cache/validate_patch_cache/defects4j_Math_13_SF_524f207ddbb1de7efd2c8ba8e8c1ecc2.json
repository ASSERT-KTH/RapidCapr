{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    if (m.getColumnDimension() == 0) {\n        return MatrixUtils.EMPTY_REAL_MATRIX;\n    }\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] eigenvalues = dec.getRealEigenvalues();\n    final RealMatrix eigenvectors = dec.getV();\n    final double[] modifiedEigenValues = new double[eigenvalues.length];\n    boolean foundNegative = false;\n    for (int i = 0; i < eigenvalues.length; ++i) {\n        if (eigenvalues[i] < 0) {\n            modifiedEigenValues[i] = 0;\n            foundNegative = true;\n        } else {\n            modifiedEigenValues[i] = Math.sqrt(eigenvalues[i]);\n        }\n    }\n    if (foundNegative) {\n        final RealMatrix modifiedEigenDiag = MatrixUtils.createRealDiagonalMatrix(modifiedEigenValues);\n        final RealMatrix sqrt = eigenvectors.multiply(modifiedEigenDiag).multiply(eigenvectors.transpose());\n        return sqrt;\n    }\n    final RealMatrix sqrt = dec.getSquareRoot();\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..fa58858bc 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    if (m.getColumnDimension() == 0) {\n+        return MatrixUtils.EMPTY_REAL_MATRIX;\n     }\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] eigenvalues = dec.getRealEigenvalues();\n+    final RealMatrix eigenvectors = dec.getV();\n+    final double[] modifiedEigenValues = new double[eigenvalues.length];\n+    boolean foundNegative = false;\n+    for (int i = 0; i < eigenvalues.length; ++i) {\n+        if (eigenvalues[i] < 0) {\n+            modifiedEigenValues[i] = 0;\n+            foundNegative = true;\n+        } else {\n+            modifiedEigenValues[i] = Math.sqrt(eigenvalues[i]);\n+        }\n+    }\n+    if (foundNegative) {\n+        final RealMatrix modifiedEigenDiag = MatrixUtils.createRealDiagonalMatrix(modifiedEigenValues);\n+        final RealMatrix sqrt = eigenvectors.multiply(modifiedEigenDiag).multiply(eigenvectors.transpose());\n+        return sqrt;\n+    }\n+    final RealMatrix sqrt = dec.getSquareRoot();\n+    return sqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}