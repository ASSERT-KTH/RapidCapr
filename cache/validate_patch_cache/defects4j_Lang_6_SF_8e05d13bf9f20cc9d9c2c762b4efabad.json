{
    "patch": "                int c = Character.codePointAt(input, pos);\n                if (Character.isSupplementaryCodePoint(c)) {\n                    write(out, Character.toChars(c));\n                } else {\n                    out.write(c);\n                }\n                pos += Character.charCount(c);\n                continue;\n            }\n//          // contract with translators is that they have to understand codepoints \n//          // and they just took care of a surrogate pair\n            for (int pt = 0; pt < consumed; pt++) {\n                pos += Character.charCount(Character.codePointAt(input, pos));\n            }\n        }\n    }\n\n    private void write(Writer out, char[] c) throws IOException {\n        if (c != null) {\n            out.write(c);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..713f02a7 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,21 +72,13 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n+                int c = Character.codePointAt(input, pos);\n+                if (Character.isSupplementaryCodePoint(c)) {\n+                    write(out, Character.toChars(c));\n+                } else {\n+                    out.write(c);\n+                }\n+                pos += Character.charCount(c);\n                 continue;\n             }\n //          // contract with translators is that they have to understand codepoints \n@@ -97,6 +89,10 @@ public abstract class CharSequenceTranslator {\n         }\n     }\n \n+    private void write(Writer out, char[] c) throws IOException {\n+        if (c != null) {\n+            out.write(c);\n+\n     /**\n      * Helper method to create a merger of this translator with another set of \n      * translators. Useful in customizing the standard functionality.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}