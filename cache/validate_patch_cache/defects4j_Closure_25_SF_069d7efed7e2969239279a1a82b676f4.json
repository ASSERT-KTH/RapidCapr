{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n\n    // Check if the constructor is a function type\n    JSType constructorType = constructor.getJSType();\n    if (constructorType == null || !constructorType.isFunctionType()) {\n      n.setJSType(getNativeType(UNKNOWN_TYPE));\n      return scope;\n    }\n\n    // Check if the constructed type is a constructor function\n    FunctionType ct = constructorType.toMaybeFunctionType();\n    if (ct == null || !ct.isConstructor()) {\n      n.setJSType(getNativeType(UNKNOWN_TYPE));\n      return scope;\n    }\n\n    // Set the type of the new expression to the instance type of the constructor\n    n.setJSType(ct.getInstanceType());\n\n    // Traverse the arguments to the constructor function\n    Node arg = constructor.getNext();\n    while (arg != null) {\n      scope = traverse(arg, scope);\n      arg = arg.getNext();\n    }\n\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..ef45fa82 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1036,29 +1036,31 @@ class TypeInference\n \n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n+\n+    // Check if the constructor is a function type\n     JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n-      }\n+    if (constructorType == null || !constructorType.isFunctionType()) {\n+      n.setJSType(getNativeType(UNKNOWN_TYPE));\n+      return scope;\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+\n+    // Check if the constructed type is a constructor function\n+    FunctionType ct = constructorType.toMaybeFunctionType();\n+    if (ct == null || !ct.isConstructor()) {\n+      n.setJSType(getNativeType(UNKNOWN_TYPE));\n+      return scope;\n+    }\n+\n+    // Set the type of the new expression to the instance type of the constructor\n+    n.setJSType(ct.getInstanceType());\n+\n+    // Traverse the arguments to the constructor function\n+    Node arg = constructor.getNext();\n+    while (arg != null) {\n       scope = traverse(arg, scope);\n+      arg = arg.getNext();\n     }\n+\n     return scope;\n   }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[foo: (number|undefined)]}> but was:<{[]}>",
    "test_result": "FAIL"
}