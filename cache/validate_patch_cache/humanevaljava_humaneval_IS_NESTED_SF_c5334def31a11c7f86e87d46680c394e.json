{
    "patch": "public static boolean is_nested(String brackets) {\n    int nesting = 0, cnt = 0, i = 0;\n    while (i < brackets.length()) {\n        if (brackets.charAt(i) == '[') {\n            nesting++;\n            i++;\n        } else if (brackets.charAt(i) == ']') {\n            nesting--;\n            // detected a mismatched closing bracket\n            if (nesting < 0) {\n                return false;\n            }\n            i++;\n            // detected a pair of brackets at nesting level 1\n            if (nesting == 0) {\n                cnt++;\n                //no_of_pairs++;\n            }\n        } else {\n            i++;\n        }\n    }\n    // detected an extra opening bracket\n    if (nesting > 0) {\n        return false;\n    }\n    return cnt >= 2;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/IS_NESTED.java b/src/main/java/humaneval/buggy/IS_NESTED.java\nindex 28b9704..a451786 100644\n--- a/src/main/java/humaneval/buggy/IS_NESTED.java\n+++ b/src/main/java/humaneval/buggy/IS_NESTED.java\n@@ -18,21 +18,32 @@ import java.util.Collections;\n  */\n \n public class IS_NESTED {\n-    public static boolean is_nested(String brackets) {\n-        ArrayList<Integer> opening_brackets = new ArrayList<>();\n-        ArrayList<Integer> closing_brackets = new ArrayList<>();\n-        for(int i = 0; i < brackets.length(); i++) {\n-            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n-            else closing_brackets.add(i);\n-        }\n-        Collections.reverse(opening_brackets);\n-        int cnt = 0, i = 0, l = opening_brackets.size();\n-        for(int idx : closing_brackets) {\n-            if(i < l || idx >= opening_brackets.get(i)) {\n-                i++;\n+public static boolean is_nested(String brackets) {\n+    int nesting = 0, cnt = 0, i = 0;\n+    while (i < brackets.length()) {\n+        if (brackets.charAt(i) == '[') {\n+            nesting++;\n+            i++;\n+        } else if (brackets.charAt(i) == ']') {\n+            nesting--;\n+            // detected a mismatched closing bracket\n+            if (nesting < 0) {\n+                return false;\n+            }\n+            i++;\n+            // detected a pair of brackets at nesting level 1\n+            if (nesting == 0) {\n                 cnt++;\n+                //no_of_pairs++;\n             }\n+        } else {\n+            i++;\n         }\n-        return cnt >= 2;\n     }\n+    // detected an extra opening bracket\n+    if (nesting > 0) {\n+        return false;\n+    }\n+    return cnt >= 2;\n+}\n }",
    "result_reason": "   TEST_IS_NESTED.test_0:6 expected:<true> but was:<false>",
    "test_result": "FAIL"
}