{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n        return new PeriodFormatter(null, null);\n    }\n    ArrayList<Object> newElementPairs = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n        Object currentElement = elementPairs.get(i);\n        if (currentElement instanceof Separator) {\n            int j = i + 1;\n            ArrayList<Object> subElementPairs = new ArrayList<>();\n            subElementPairs.add(currentElement);\n            while (j < size && elementPairs.get(j) instanceof Literal) {\n                subElementPairs.add(elementPairs.get(j));\n                j++;\n            }\n            subElementPairs.add(toFormatter(elementPairs.subList(j, size), notPrinter, notParser));\n            newElementPairs.addAll(subElementPairs);\n            break;\n        } else {\n            newElementPairs.add(currentElement);\n        }\n    }\n    Object[] comp = createComposite(newElementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..213c1283 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,41 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    ArrayList<Object> newElementPairs = new ArrayList<>();\n+    for (int i = 0; i < size; i++) {\n+        Object currentElement = elementPairs.get(i);\n+        if (currentElement instanceof Separator) {\n+            int j = i + 1;\n+            ArrayList<Object> subElementPairs = new ArrayList<>();\n+            subElementPairs.add(currentElement);\n+            while (j < size && elementPairs.get(j) instanceof Literal) {\n+                subElementPairs.add(elementPairs.get(j));\n+                j++;\n+            }\n+            subElementPairs.add(toFormatter(elementPairs.subList(j, size), notPrinter, notParser));\n+            newElementPairs.addAll(subElementPairs);\n+            break;\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            newElementPairs.add(currentElement);\n         }\n     }\n+    Object[] comp = createComposite(newElementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}