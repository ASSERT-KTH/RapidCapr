{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            DateTimeField monthField = partial.getField(DateTimeFieldType.monthOfYear());\n            DateTimeField dayField = partial.getField(DateTimeFieldType.dayOfMonth());\n            if (valueToAdd < 0) {\n                while (valueToAdd < 0) {\n                    // adjust month and day\n                    int month = monthField.get(instant);\n                    int day = dayField.get(instant);\n                    if (month == 3 && day == 1) {\n                        month = 2;\n                        day = iChronology.getDaysOfMonth(2, iChronology.getYear(instant));\n                    } else {\n                        month = monthField.addWrapField(instant, -1);\n                        day = Math.min(day, iChronology.getDaysOfMonth(month, iChronology.getYear(instant)));\n                    }\n                    instant = monthField.set(instant, month);\n                    instant = dayField.set(instant, day);\n                    valueToAdd++;\n                }\n            } else {\n                instant = add(instant, valueToAdd);\n            }\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..bc6f9a41 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,13 +206,33 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n+            DateTimeField monthField = partial.getField(DateTimeFieldType.monthOfYear());\n+            DateTimeField dayField = partial.getField(DateTimeFieldType.dayOfMonth());\n+            if (valueToAdd < 0) {\n+                while (valueToAdd < 0) {\n+                    // adjust month and day\n+                    int month = monthField.get(instant);\n+                    int day = dayField.get(instant);\n+                    if (month == 3 && day == 1) {\n+                        month = 2;\n+                        day = iChronology.getDaysOfMonth(2, iChronology.getYear(instant));\n+                    } else {\n+                        month = monthField.addWrapField(instant, -1);\n+                        day = Math.min(day, iChronology.getDaysOfMonth(month, iChronology.getYear(instant)));\n+                    }\n+                    instant = monthField.set(instant, month);\n+                    instant = dayField.set(instant, day);\n+                    valueToAdd++;\n+                }\n+            } else {\n+                instant = add(instant, valueToAdd);\n+            }\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}