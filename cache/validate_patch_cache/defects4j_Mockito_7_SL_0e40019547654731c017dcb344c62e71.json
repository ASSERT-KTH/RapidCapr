{
    "patch": "if (typeVariable.getBounds().length == 0) {\n    // if no bounds available, treat as Object\n    registerTypeVariablesOn(Object.class);\n} else {\n    Type[] bounds = typeVariable.getBounds();\n    for (Type bound : bounds) {\n        if (bound instanceof TypeVariable<?>) {\n            readTypeVariables((TypeVariable<?>) bound);\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..0b56ed1b8 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,24 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+if (typeVariable.getBounds().length == 0) {\n+    // if no bounds available, treat as Object\n+    registerTypeVariablesOn(Object.class);\n+} else {\n+    Type[] bounds = typeVariable.getBounds();\n+    for (Type bound : bounds) {\n+        if (bound instanceof TypeVariable<?>) {\n+            readTypeVariables((TypeVariable<?>) bound);\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}