{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      boolean hasNumber = false;\n      boolean hasString = false;\n\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n\n        if (child.isNumber()) {\n          hasNumber = true;\n        } else if (child.isString()) {\n          hasString = true;\n        } else {\n          continue;\n        }\n\n        // We should never see a mix of numbers and strings.\n        if (hasNumber && hasString) {\n          compiler.report(JSError.make(\n              t.getSourceName(), n,\n              \"Object literals with mixed numeric and string keys are not supported in ES6\",\n              Warnings.MISPLACED_TYPE_ANNOTATION));\n          // no need to continue further as more errors will be generated.\n          break;\n        }\n\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..4d62da23 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,49 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+    private void handleObjectLit(NodeTraversal t, Node n) {\n+      boolean hasNumber = false;\n+      boolean hasString = false;\n+\n+      for (Node child = n.getFirstChild();\n+          child != null;\n+          child = child.getNext()) {\n+\n+        if (child.isNumber()) {\n+          hasNumber = true;\n+        } else if (child.isString()) {\n+          hasString = true;\n+        } else {\n+          continue;\n+        }\n+\n+        // We should never see a mix of numbers and strings.\n+        if (hasNumber && hasString) {\n+          compiler.report(JSError.make(\n+              t.getSourceName(), n,\n+              \"Object literals with mixed numeric and string keys are not supported in ES6\",\n+              Warnings.MISPLACED_TYPE_ANNOTATION));\n+          // no need to continue further as more errors will be generated.\n+          break;\n+        }\n+\n+        String name = child.getString();\n+        T type = typeSystem.getType(getScope(), n, name);\n+\n+        Property prop = getProperty(name);\n+        if (!prop.scheduleRenaming(child,\n+                                   processProperty(t, prop, type, null))) {\n+          // TODO(user): It doesn't look like the user can do much in this\n+          // case right now.\n+          if (propertiesToErrorFor.containsKey(name)) {\n+            compiler.report(JSError.make(\n+                t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                Warnings.INVALIDATION, name,\n+                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+          }\n+        }\n+      }\n+    }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}