{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n  FunctionType functionType) {\n\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  while (parameters.hasNext()) {\n    // If there are no arguments left in the list, then the while loop\n    // above implies that this must be an error since there are still parameters\n    // left in the list.\n    if (!arguments.hasNext()) {\n      // report error if function is not varargs\n      if (functionType.getMaxArguments() != Integer.MAX_VALUE) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n          String.valueOf(functionType.getMaxArguments()));\n        return;\n      }\n      // varargs function has no more strict parameters to check\n      break;\n    }\n\n    parameter = parameters.next();\n    argument = arguments.next();\n    ordinal++;\n\n    validator.expectArgumentMatchesParameter(t, argument,\n      getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  // check varargs count after all parameters\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (numArgs < minArgs ||\n      numArgs > maxArgs && maxArgs != Integer.MAX_VALUE) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n      validator.getReadableJSTypeName(call.getFirstChild(), false),\n      String.valueOf(numArgs), String.valueOf(minArgs),\n      maxArgs != Integer.MAX_VALUE ?\n        \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..36fe7f10 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,39 +1396,55 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(NodeTraversal t, Node call,\n+  FunctionType functionType) {\n+\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  Node parameter = null;\n+  Node argument = null;\n+  while (parameters.hasNext()) {\n+    // If there are no arguments left in the list, then the while loop\n+    // above implies that this must be an error since there are still parameters\n+    // left in the list.\n+    if (!arguments.hasNext()) {\n+      // report error if function is not varargs\n+      if (functionType.getMaxArguments() != Integer.MAX_VALUE) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n+          String.valueOf(functionType.getMaxArguments()));\n+        return;\n+      }\n+      // varargs function has no more strict parameters to check\n+      break;\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n+    parameter = parameters.next();\n+    argument = arguments.next();\n+    ordinal++;\n+\n+    validator.expectArgumentMatchesParameter(t, argument,\n+      getJSType(argument), getJSType(parameter), call, ordinal);\n   }\n \n+  // check varargs count after all parameters\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  if (numArgs < minArgs ||\n+      numArgs > maxArgs && maxArgs != Integer.MAX_VALUE) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+      validator.getReadableJSTypeName(call.getFirstChild(), false),\n+      String.valueOf(numArgs), String.valueOf(minArgs),\n+      maxArgs != Integer.MAX_VALUE ?\n+        \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  }\n+}\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warnings(s):",
    "test_result": "FAIL"
}