{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  // Skip the function name node\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next();\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  while (arguments.hasNext() && parameters.hasNext()) {\n    Node argument = arguments.next();\n    Node parameter = parameters.next();\n    ordinal++;\n    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n        getJSType(parameter), call, ordinal);\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n\n  String argCountString = numArgs == 1 ? \"1 argument\" : numArgs + \" arguments\";\n  String errorMsg;\n\n  if (minArgs == 0 && maxArgs == 0) {\n    errorMsg = \"takes no arguments\";\n  } else if (minArgs == maxArgs) {\n    if (numArgs != minArgs) {\n      errorMsg = String.format(\"requires exactly %d argument(s)\", minArgs);\n    } else {\n      return;\n    }\n  } else if (maxArgs == Integer.MAX_VALUE) {\n    if (numArgs < minArgs) {\n      errorMsg = String.format(\"requires at least %d argument(s)\", minArgs);\n    } else {\n      return;\n    }\n  } else { // minArgs < maxArgs\n    if (numArgs < minArgs) {\n      errorMsg = String.format(\"requires at least %d argument(s)\", minArgs);\n    } else if (numArgs > maxArgs) {\n      errorMsg = String.format(\"takes no more than %d argument(s)\", maxArgs);\n    } else {\n      return;\n    }\n  }\n\n  String errorDescription = String.format(\"%s: called with %s. Function %s and %s.\",\n      validator.getReadableJSTypeName(call.getFirstChild(), false), argCountString,\n      errorMsg, (maxArgs == Integer.MAX_VALUE) ? \"\" : \"no more than \" + maxArgs + \" argument(s)\");\n  report(t, call, WRONG_ARGUMENT_COUNT, errorDescription);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..9a0a8b80 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,39 +1396,58 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  // Skip the function name node\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next();\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  while (arguments.hasNext() && parameters.hasNext()) {\n+    Node argument = arguments.next();\n+    Node parameter = parameters.next();\n+    ordinal++;\n+    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+        getJSType(parameter), call, ordinal);\n+  }\n+\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+\n+  String argCountString = numArgs == 1 ? \"1 argument\" : numArgs + \" arguments\";\n+  String errorMsg;\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  if (minArgs == 0 && maxArgs == 0) {\n+    errorMsg = \"takes no arguments\";\n+  } else if (minArgs == maxArgs) {\n+    if (numArgs != minArgs) {\n+      errorMsg = String.format(\"requires exactly %d argument(s)\", minArgs);\n+    } else {\n+      return;\n+    }\n+  } else if (maxArgs == Integer.MAX_VALUE) {\n+    if (numArgs < minArgs) {\n+      errorMsg = String.format(\"requires at least %d argument(s)\", minArgs);\n+    } else {\n+      return;\n+    }\n+  } else { // minArgs < maxArgs\n+    if (numArgs < minArgs) {\n+      errorMsg = String.format(\"requires at least %d argument(s)\", minArgs);\n+    } else if (numArgs > maxArgs) {\n+      errorMsg = String.format(\"takes no more than %d argument(s)\", maxArgs);\n+    } else {\n+      return;\n     }\n   }\n \n+  String errorDescription = String.format(\"%s: called with %s. Function %s and %s.\",\n+      validator.getReadableJSTypeName(call.getFirstChild(), false), argCountString,\n+      errorMsg, (maxArgs == Integer.MAX_VALUE) ? \"\" : \"no more than \" + maxArgs + \" argument(s)\");\n+  report(t, call, WRONG_ARGUMENT_COUNT, errorDescription);\n+}\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_WRONG_ARGUMENT_COUNT. Function Bar: called with 0 arguments. Function takes no arguments and no more than 0 argument(s).: called with {1} argument(s). Function requires at least {2} argument(s){3}. at testcode line 1 : 149",
    "test_result": "FAIL"
}