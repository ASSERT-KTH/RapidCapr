{
    "patch": "        if (child.getToken() == Token.STRING) {\n          // String keys\n          String name = child.getString();\n          T type = typeSystem.getType(getScope(), n, name);\n\n          Property prop = getProperty(name);\n          if (!prop.scheduleRenaming(child,\n              processProperty(t, prop, type, null))) {\n            if (propertiesToErrorFor.containsKey(name)) {\n              compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }\n          }\n        } else {\n          // COMPUTED_PROP accessor\n          Node assignNode = child.getNext();\n          Preconditions.checkArgument(assignNode.isAssign(), assignNode);\n          Node keyNode = child.getLastChild();\n\n          T type = typeSystem.getType(getScope(), n, null);\n\n          Property prop = getProperty(null);\n          if (!prop.scheduleRenaming(keyNode,\n              processProperty(t, prop, type, null))) {\n            if (propertiesToErrorFor.containsKey(\"computed_property\")) {\n              compiler.report(JSError.make(\n                  t.getSourceName(), child, propertiesToErrorFor.get(\"computed_property\"),\n                  Warnings.INVALIDATION, \"computed_property\",\n                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..dac5cf0d 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,38 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        if (child.getToken() == Token.STRING) {\n+          // String keys\n+          String name = child.getString();\n+          T type = typeSystem.getType(getScope(), n, name);\n+\n+          Property prop = getProperty(name);\n+          if (!prop.scheduleRenaming(child,\n+              processProperty(t, prop, type, null))) {\n+            if (propertiesToErrorFor.containsKey(name)) {\n+              compiler.report(JSError.make(\n+                t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                Warnings.INVALIDATION, name,\n+                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+            }\n+          }\n+        } else {\n+          // COMPUTED_PROP accessor\n+          Node assignNode = child.getNext();\n+          Preconditions.checkArgument(assignNode.isAssign(), assignNode);\n+          Node keyNode = child.getLastChild();\n+\n+          T type = typeSystem.getType(getScope(), n, null);\n+\n+          Property prop = getProperty(null);\n+          if (!prop.scheduleRenaming(keyNode,\n+              processProperty(t, prop, type, null))) {\n+            if (propertiesToErrorFor.containsKey(\"computed_property\")) {\n+              compiler.report(JSError.make(\n+                  t.getSourceName(), child, propertiesToErrorFor.get(\"computed_property\"),\n+                  Warnings.INVALIDATION, \"computed_property\",\n+                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+            }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}