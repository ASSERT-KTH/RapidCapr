{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    int numArgsToRemove = 0;  // add this line\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          numArgsToRemove++;  // add this line\n        } else {\n          break;\n        }\n      }\n      compiler.reportCodeChange();\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n    \n    // add this whole block\n    Node functionBody = function.getLastChild();\n    int numArgs = argList.getChildCount();\n    while (numArgsToRemove-- > 0) {\n      Node argName = argList.getChildAtIndex(numArgs - 1);\n      Node paramValue = IR.name(\"undefined\").srcref(argName);\n      Node nameValue = IR.name(argName.getString()).srcref(argName);\n      Node assign = IR.assign(nameValue, paramValue).srcref(argName);\n      Node exprResult = IR.exprResult(assign).srcref(argName);\n      functionBody.addChildToBack(exprResult);\n      argList.removeChild(argName);\n      numArgs--;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..72604a1c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,49 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    int numArgsToRemove = 0;  // add this line\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          numArgsToRemove++;  // add this line\n+        } else {\n+          break;\n+        }\n+      }\n+      compiler.reportCodeChange();\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+    \n+    // add this whole block\n+    Node functionBody = function.getLastChild();\n+    int numArgs = argList.getChildCount();\n+    while (numArgsToRemove-- > 0) {\n+      Node argName = argList.getChildAtIndex(numArgs - 1);\n+      Node paramValue = IR.name(\"undefined\").srcref(argName);\n+      Node nameValue = IR.name(argName.getString()).srcref(argName);\n+      Node assign = IR.assign(nameValue, paramValue).srcref(argName);\n+      Node exprResult = IR.exprResult(assign).srcref(argName);\n+      functionBody.addChildToBack(exprResult);\n+      argList.removeChild(argName);\n+      numArgs--;\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable function is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}