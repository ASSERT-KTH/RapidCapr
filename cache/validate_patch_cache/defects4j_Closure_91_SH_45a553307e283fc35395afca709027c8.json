{
    "patch": "      if (NodeUtil.isExpressionResultUsed(n.getParent())) {\n        // Don't traverse functions that are getting lent to a prototype.\n        if (parent != null && parent.getType() == Token.ASSIGN) {\n          Node lhs = parent.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          } else if ((lhs.getType() == Token.NAME || lhs.getType() == Token.GETPROP) &&\n                     rhs == n) {\n            return false;\n          }\n        }\n      } else {\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..03d1c3e2 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,22 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isExpressionResultUsed(n.getParent())) {\n+        // Don't traverse functions that are getting lent to a prototype.\n+        if (parent != null && parent.getType() == Token.ASSIGN) {\n+          Node lhs = parent.getFirstChild();\n+          Node rhs = lhs.getNext();\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          } else if ((lhs.getType() == Token.NAME || lhs.getType() == Token.GETPROP) &&\n+                     rhs == n) {\n+            return false;\n+          }\n+        }\n+      } else {\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}