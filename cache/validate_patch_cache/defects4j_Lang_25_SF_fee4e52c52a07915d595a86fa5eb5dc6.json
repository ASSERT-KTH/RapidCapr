{
    "patch": "public static String unescapeJava(String str) {\n    if (str == null) {\n        return null;\n    }\n    int length = str.length();\n    StringBuilder sb = new StringBuilder(length);\n    for (int i = 0; i < length; i++) {\n        char ch = str.charAt(i);\n        if (ch == '\\\\') {\n            i++;\n            if (i >= length) {\n                throw new IllegalArgumentException(\"Invalid unicode sequence: \\\\ at end of string.\");\n            }\n            ch = str.charAt(i);\n            if (ch == 'u') {\n                i++;\n                if (i + 4 > length) {\n                    throw new IllegalArgumentException(\"Invalid unicode sequence: not enough characters.\");\n                }\n                int codepoint = Integer.parseInt(str.substring(i, i + 4), 16);\n                sb.append((char) codepoint);\n                i += 3;\n            } else {\n                if (ch == 't') {\n                    ch = '\\t';\n                } else if (ch == 'r') {\n                    ch = '\\r';\n                } else if (ch == 'n') {\n                    ch = '\\n';\n                } else if (ch == 'f') {\n                    ch = '\\f';\n                } else if (ch == 'b') {\n                    ch = '\\b';\n                }\n                sb.append(ch);\n            }\n        } else {\n            sb.append(ch);\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..ead8d4d4 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,48 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeJava(String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    int length = str.length();\n+    StringBuilder sb = new StringBuilder(length);\n+    for (int i = 0; i < length; i++) {\n+        char ch = str.charAt(i);\n+        if (ch == '\\\\') {\n+            i++;\n+            if (i >= length) {\n+                throw new IllegalArgumentException(\"Invalid unicode sequence: \\\\ at end of string.\");\n+            }\n+            ch = str.charAt(i);\n+            if (ch == 'u') {\n+                i++;\n+                if (i + 4 > length) {\n+                    throw new IllegalArgumentException(\"Invalid unicode sequence: not enough characters.\");\n+                }\n+                int codepoint = Integer.parseInt(str.substring(i, i + 4), 16);\n+                sb.append((char) codepoint);\n+                i += 3;\n+            } else {\n+                if (ch == 't') {\n+                    ch = '\\t';\n+                } else if (ch == 'r') {\n+                    ch = '\\r';\n+                } else if (ch == 'n') {\n+                    ch = '\\n';\n+                } else if (ch == 'f') {\n+                    ch = '\\f';\n+                } else if (ch == 'b') {\n+                    ch = '\\b';\n+                }\n+                sb.append(ch);\n+            }\n+        } else {\n+            sb.append(ch);\n+        }\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}