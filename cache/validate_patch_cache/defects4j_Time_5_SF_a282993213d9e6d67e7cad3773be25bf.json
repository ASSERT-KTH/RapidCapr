{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // Get the duration of the period in milliseconds\n    long durationInMillis = getMillis()\n            + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR)\n            + (getDays() * DateTimeConstants.MILLIS_PER_DAY)\n            + (getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n\n    // Remove any weeks from the duration if it is not supported by the requested period type\n    if (!type.isSupported(DurationFieldType.weeks())) {\n        durationInMillis -= getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n    }\n\n    // Normalize years and months if they are supported by the requested period type\n    int years = getYears();\n    int months = getMonths();\n    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n        years += months / 12;\n        months = months % 12;\n    }\n\n    // Construct a new period with the normalized values\n    Period result = new Period(durationInMillis, type, ISOChronology.getInstanceUTC())\n            .withYears(years)\n            .withMonths(months)\n            .withDays(0)\n            .withWeeks(0);\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..5552b994 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,38 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    // Get the duration of the period in milliseconds\n+    long durationInMillis = getMillis()\n+            + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n+            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n+            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR)\n+            + (getDays() * DateTimeConstants.MILLIS_PER_DAY)\n+            + (getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n+\n+    // Remove any weeks from the duration if it is not supported by the requested period type\n+    if (!type.isSupported(DurationFieldType.weeks())) {\n+        durationInMillis -= getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n+    }\n+\n+    // Normalize years and months if they are supported by the requested period type\n+    int years = getYears();\n+    int months = getMonths();\n+    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n+        years += months / 12;\n+        months = months % 12;\n+    }\n+\n+    // Construct a new period with the normalized values\n+    Period result = new Period(durationInMillis, type, ISOChronology.getInstanceUTC())\n+            .withYears(years)\n+            .withMonths(months)\n+            .withDays(0)\n+            .withWeeks(0);\n+\n+    return result;\n+}\n \n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P2W5D> but was:<PT0S>",
    "test_result": "FAIL"
}