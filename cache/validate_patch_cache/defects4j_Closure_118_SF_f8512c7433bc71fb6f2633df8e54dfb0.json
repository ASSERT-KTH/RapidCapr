{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (NodeUtil.isGetOrSetKey(child)) {\n      // skip over GET and SET properties\n      continue;\n    }\n\n    String name = null;\n    if (child.isStringKey() || child.isString()) {\n      name = child.getString();\n    } else if (child.isGetProp()) {\n      // handle nested GETPROP nodes\n      StringBuilder sb = new StringBuilder();\n      while (child.isGetProp()) {\n        sb.insert(0, child.getLastChild().getString());\n        sb.insert(0, \".\");\n        child = child.getFirstChild();\n      }\n      if (child.isString()) {\n        sb.insert(0, child.getString());\n        name = sb.toString();\n      }\n    } else if (child.isGetElem()) {\n      Node firstChild = child.getFirstChild();\n      Node secondChild = firstChild.getNext();\n      if ((firstChild.isString() || firstChild.isNumber())\n          && secondChild.isString()) {\n        if (!n.isArrayLit() && firstChild.isNumber()) {\n          continue;\n        }\n\n        if (firstChild.isNumber()) {\n          name = firstChild.getString() + \"[\" + secondChild.getString() + \"]\";\n        } else {\n          name = firstChild.getString() + \".\" + secondChild.getString();\n        }\n      }\n    } else if (child.isCall() || child.isNew()) {\n      Node callee = child.getFirstChild();\n      if (callee.isGetProp()) {\n        StringBuilder sb = new StringBuilder();\n        while (callee.isGetProp()) {\n          sb.insert(0, callee.getLastChild().getString());\n          sb.insert(0, \".\");\n          callee = callee.getFirstChild();\n        }\n        if (callee.isString()) {\n          sb.insert(0, callee.getString());\n          name = sb.toString();\n        }\n      }\n    }\n\n    if (name == null) {\n      continue;\n    }\n\n    T type = typeSystem.getType(getScope(), n, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(\n            JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name, (type == null ? \"null\" : type.toString()),\n                n.toString(), \"\"));\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..8a86ceb4 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,31 +487,76 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    if (NodeUtil.isGetOrSetKey(child)) {\n+      // skip over GET and SET properties\n+      continue;\n+    }\n+\n+    String name = null;\n+    if (child.isStringKey() || child.isString()) {\n+      name = child.getString();\n+    } else if (child.isGetProp()) {\n+      // handle nested GETPROP nodes\n+      StringBuilder sb = new StringBuilder();\n+      while (child.isGetProp()) {\n+        sb.insert(0, child.getLastChild().getString());\n+        sb.insert(0, \".\");\n+        child = child.getFirstChild();\n+      }\n+      if (child.isString()) {\n+        sb.insert(0, child.getString());\n+        name = sb.toString();\n+      }\n+    } else if (child.isGetElem()) {\n+      Node firstChild = child.getFirstChild();\n+      Node secondChild = firstChild.getNext();\n+      if ((firstChild.isString() || firstChild.isNumber())\n+          && secondChild.isString()) {\n+        if (!n.isArrayLit() && firstChild.isNumber()) {\n+          continue;\n+        }\n+\n+        if (firstChild.isNumber()) {\n+          name = firstChild.getString() + \"[\" + secondChild.getString() + \"]\";\n+        } else {\n+          name = firstChild.getString() + \".\" + secondChild.getString();\n+        }\n+      }\n+    } else if (child.isCall() || child.isNew()) {\n+      Node callee = child.getFirstChild();\n+      if (callee.isGetProp()) {\n+        StringBuilder sb = new StringBuilder();\n+        while (callee.isGetProp()) {\n+          sb.insert(0, callee.getLastChild().getString());\n+          sb.insert(0, \".\");\n+          callee = callee.getFirstChild();\n+        }\n+        if (callee.isString()) {\n+          sb.insert(0, callee.getString());\n+          name = sb.toString();\n         }\n       }\n     }\n \n+    if (name == null) {\n+      continue;\n+    }\n+\n+    T type = typeSystem.getType(getScope(), n, name);\n+    Property prop = getProperty(name);\n+    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+      if (propertiesToErrorFor.containsKey(name)) {\n+        compiler.report(\n+            JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                Warnings.INVALIDATION, name, (type == null ? \"null\" : type.toString()),\n+                n.toString(), \"\"));\n+      }\n+    }\n+  }\n+}\n+\n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {\n         return;",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[]}> but was:<{[a=[[Foo.prototype]]]}>",
    "test_result": "FAIL"
}