{
    "patch": "private static RealMatrix squareRoot(RealMatrix m, double epsilon) {\n    if (m == null) {\n        throw new IllegalArgumentException(\"Matrix cannot be null.\");\n    }\n    if (!m.isSquare()) {\n        throw new IllegalArgumentException(\"Matrix must be square.\");\n    }\n    if (epsilon <= 0) {\n        throw new IllegalArgumentException(\"Epsilon must be positive.\");\n    }\n    \n    int n = m.getRowDimension();\n    RealMatrix x = MatrixUtils.createRealIdentityMatrix(n);\n    \n    while (true) {\n        RealMatrix xOld = x;\n        x = x.add(m.multiply(x).inverse().scalarMultiply(0.5));\n        double normDiff = x.subtract(xOld).getFrobeniusNorm();\n        if (normDiff < epsilon) {\n            break;\n        }\n    }\n    \n    return x;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5babfdd78 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private static RealMatrix squareRoot(RealMatrix m, double epsilon) {\n+    if (m == null) {\n+        throw new IllegalArgumentException(\"Matrix cannot be null.\");\n     }\n+    if (!m.isSquare()) {\n+        throw new IllegalArgumentException(\"Matrix must be square.\");\n+    }\n+    if (epsilon <= 0) {\n+        throw new IllegalArgumentException(\"Epsilon must be positive.\");\n+    }\n+    \n+    int n = m.getRowDimension();\n+    RealMatrix x = MatrixUtils.createRealIdentityMatrix(n);\n+    \n+    while (true) {\n+        RealMatrix xOld = x;\n+        x = x.add(m.multiply(x).inverse().scalarMultiply(0.5));\n+        double normDiff = x.subtract(xOld).getFrobeniusNorm();\n+        if (normDiff < epsilon) {\n+            break;\n+        }\n+    }\n+    \n+    return x;\n+}\n }",
    "result_reason": "error: method squareRoot in class AbstractLeastSquaresOptimizer cannot be applied to given types;",
    "test_result": "ERROR"
}