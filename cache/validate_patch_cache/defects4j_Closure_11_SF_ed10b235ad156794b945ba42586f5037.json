{
    "patch": "public String getprop(String key, String defaultValue) {\n    String value = null;\n    try {\n        Properties props = new Properties();\n        InputStream input = getClass().getClassLoader()\n            .getResourceAsStream(\"config.properties\");\n        props.load(input);\n        value = props.getProperty(key, defaultValue);\n        if (value == null && defaultValue != null) {\n            System.out.println(\"Warning: property \" + key + \" not found, using default value: \" + defaultValue);\n        }\n    } catch (IOException ex) {\n        System.out.println(\"Error loading properties file\");\n        ex.printStackTrace();\n    }\n    return value != null ? value : defaultValue;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..285c48f7 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String key, String defaultValue) {\n+    String value = null;\n+    try {\n+        Properties props = new Properties();\n+        InputStream input = getClass().getClassLoader()\n+            .getResourceAsStream(\"config.properties\");\n+        props.load(input);\n+        value = props.getProperty(key, defaultValue);\n+        if (value == null && defaultValue != null) {\n+            System.out.println(\"Warning: property \" + key + \" not found, using default value: \" + defaultValue);\n+        }\n+    } catch (IOException ex) {\n+        System.out.println(\"Error loading properties file\");\n+        ex.printStackTrace();\n+    }\n+    return value != null ? value : defaultValue;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}