{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    // if we just return offsetAdjusted then the time is pushed\n    // back before the transition, whereas it should be\n    // on or after the transition\n    long nextInstant = nextTransition(instantLocal - offsetLocal);\n    int nextOffset = getOffset(nextInstant);\n\n    // if we want to preserve local time, we need to transition\n    // at or after instantLocal\n    if (nextInstant == (instantLocal - offsetLocal)) {\n        return (nextOffset > offsetLocal) ? nextOffset : offsetLocal;\n    } else {\n        return (nextOffset > offsetLocal) ? offsetLocal : nextOffset;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..6f96bf94 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    // if we just return offsetAdjusted then the time is pushed\n+    // back before the transition, whereas it should be\n+    // on or after the transition\n+    long nextInstant = nextTransition(instantLocal - offsetLocal);\n+    int nextOffset = getOffset(nextInstant);\n+\n+    // if we want to preserve local time, we need to transition\n+    // at or after instantLocal\n+    if (nextInstant == (instantLocal - offsetLocal)) {\n+        return (nextOffset > offsetLocal) ? nextOffset : offsetLocal;\n+    } else {\n+        return (nextOffset > offsetLocal) ? offsetLocal : nextOffset;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}