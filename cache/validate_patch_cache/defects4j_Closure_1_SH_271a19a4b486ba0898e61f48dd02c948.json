{
    "patch": "    Node fnRootNode = fnScope.getRootNode();\n    Preconditions.checkState(fnRootNode.isFunction());\n    // Parameters object literal setters can not be removed.\n    if (NodeUtil.isGetOrSetKey(fnRootNode.getParent())) {\n      return;\n    }\n\n    Node argList = getFunctionArgList(fnRootNode);\n    // Check if there are any callers to this function.\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(fnRootNode);\n\n    // If there are no callers, we can strip unreferenced arguments\n    // off the end of the function declaration.\n    if (!modifyCallers) {\n      // Remove unreferenced arguments from the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        // For each argument to the function declaration, check if it is unreferenced.\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          // If the argument is unreferenced, remove it.\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      // If there are any callers, optimize the function call sites.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bff8e785 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,35 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node fnRootNode = fnScope.getRootNode();\n+    Preconditions.checkState(fnRootNode.isFunction());\n+    // Parameters object literal setters can not be removed.\n+    if (NodeUtil.isGetOrSetKey(fnRootNode.getParent())) {\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(fnRootNode);\n+    // Check if there are any callers to this function.\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(fnRootNode);\n+\n+    // If there are no callers, we can strip unreferenced arguments\n+    // off the end of the function declaration.\n+    if (!modifyCallers) {\n+      // Remove unreferenced arguments from the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        // For each argument to the function declaration, check if it is unreferenced.\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          // If the argument is unreferenced, remove it.\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      // If there are any callers, optimize the function call sites.\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}