{
    "patch": "} else if (n.isGetProp() && n.getFirstChild().isQualifiedName() &&\n        n.getJSType() != null && parent.isAssign()) {\n      // check if the left-hand side of the assignment is a function call\n      Node lhs = parent.getFirstChild();\n      boolean isCall = lhs.isCall();\n      if (!isCall && lhs.isGetProp()) {\n        isCall = lhs.getLastChild().isCall();\n      }\n      if (isCall) {\n        // function call is being made, so this assignment should be OK\n        return;\n      }\n\n      warnings.add(JSError.make(n, TypeValidator.TYPE_MISMATCH_WARNING,\n          n.getQualifiedName() + \" is not a function\"));\n\n      return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}