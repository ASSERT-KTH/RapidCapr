{
    "patch": "      if (functionType.getParameterCount() > 0 && functionType.getThisType() != null) {\n        Node parent = n.getParent();\n        if (isGetProp(parent)) {\n          Node receiver = parent.getFirstChild();\n          JSType receiverType = getJSType(receiver);\n          if (!receiverType.isSubtypeOf(functionType.getThisType())) {\n            report(t, n, INVALID_THIS_TYPE, receiverType.toString(),\n                functionType.getThisType().toString());\n          }\n        } else if (parent.isGetElem()) {\n          Node receiver = parent.getFirstChild();\n          JSType receiverType = getJSType(receiver);\n          if (!receiverType.restrictByNotNullOrUndefined().isSubtypeOf(\n              getNativeType(ARRAY_TYPE))) {\n            report(t, n, GETELEM_ON_NONARRAY_WITH_THIS,\n                receiverType.toString());\n          }\n        } else {\n          report(t, n, INVALID_THIS, functionType.getThisType().toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..527ce0a0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getParameterCount() > 0 && functionType.getThisType() != null) {\n+        Node parent = n.getParent();\n+        if (isGetProp(parent)) {\n+          Node receiver = parent.getFirstChild();\n+          JSType receiverType = getJSType(receiver);\n+          if (!receiverType.isSubtypeOf(functionType.getThisType())) {\n+            report(t, n, INVALID_THIS_TYPE, receiverType.toString(),\n+                functionType.getThisType().toString());\n+          }\n+        } else if (parent.isGetElem()) {\n+          Node receiver = parent.getFirstChild();\n+          JSType receiverType = getJSType(receiver);\n+          if (!receiverType.restrictByNotNullOrUndefined().isSubtypeOf(\n+              getNativeType(ARRAY_TYPE))) {\n+            report(t, n, GETELEM_ON_NONARRAY_WITH_THIS,\n+                receiverType.toString());\n+          }\n+        } else {\n+          report(t, n, INVALID_THIS, functionType.getThisType().toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}