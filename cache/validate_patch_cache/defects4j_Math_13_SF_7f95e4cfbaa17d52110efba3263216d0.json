{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix eigenvalues = dec.getD();\n    final RealMatrix eigenvectors = dec.getV();\n\n    // compute the square root of each eigenvalue\n    for (int i = 0; i < eigenvalues.getRowDimension(); i++) {\n        double eigenvalue = eigenvalues.getEntry(i, i);\n        eigenvalues.setEntry(i, i, FastMath.sqrt(eigenvalue));\n    }\n\n    // reconstruct the matrix using the square roots of the eigenvalues\n    return eigenvectors.multiply(eigenvalues).multiply(eigenvectors.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a0fe541c7 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix eigenvalues = dec.getD();\n+    final RealMatrix eigenvectors = dec.getV();\n+\n+    // compute the square root of each eigenvalue\n+    for (int i = 0; i < eigenvalues.getRowDimension(); i++) {\n+        double eigenvalue = eigenvalues.getEntry(i, i);\n+        eigenvalues.setEntry(i, i, FastMath.sqrt(eigenvalue));\n     }\n+\n+    // reconstruct the matrix using the square roots of the eigenvalues\n+    return eigenvectors.multiply(eigenvalues).multiply(eigenvectors.transpose());\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}