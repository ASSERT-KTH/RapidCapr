{
    "patch": "public static Map<String, List<Integer>> groupNumbers(List<Integer> numbers) {\n    Map<String, List<Integer>> groupedNumbers = new HashMap<>();\n    for (int number : numbers) {\n        String key = number % 2 == 0 ? \"even\" : \"odd\";\n        groupedNumbers.computeIfAbsent(key, k -> new ArrayList<>()).add(number);\n    }\n    return groupedNumbers;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..33229c3c4 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,14 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<String, List<Integer>> groupNumbers(List<Integer> numbers) {\n+    Map<String, List<Integer>> groupedNumbers = new HashMap<>();\n+    for (int number : numbers) {\n+        String key = number % 2 == 0 ? \"even\" : \"odd\";\n+        groupedNumbers.computeIfAbsent(key, k -> new ArrayList<>()).add(number);\n+    }\n+    return groupedNumbers;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression:compileJava FAILED",
    "test_result": "ERROR"
}