{
    "patch": "private boolean isInitializingAssignmentAt(int index) {\n  if (index < references.size() && index > 0) {\n    Reference maybeDecl = references.get(index - 1);\n    if (maybeDecl.isVarDeclaration()) {\n      Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n      Reference maybeInit = references.get(index);\n      if (maybeInit.isSimpleAssignmentToName()) {\n        if (maybeInit.getBasicBlock() == maybeDecl.getBasicBlock()) {\n          return true;\n        }\n        boolean isDeclaredInFunction = maybeDecl.getBasicBlock().getFunction() != null;\n        // ensure that there are no other assignments in between the\n        // declaration and initialization\n        for (int i = 0; i < index - 1; i++) {\n          Reference prev = references.get(i);\n          if (prev.isAssignmentTo(maybeDecl.getName())\n              && (isDeclaredInFunction || prev.getBasicBlock().getFunction() == maybeDecl.getBasicBlock().getFunction())) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * @return The reference that provides the value for the variable at the\n * time of the first read, if known, otherwise null.\n *\n * This is either the variable declaration (\"var a = ...\") or first\n * reference following the declaration if it is an assignment.\n */\nReference getInitializingReference() {\n  if (isInitializingDeclarationAt(0)) {\n    return references.get(0);\n  } else {\n    int size = references.size();\n    for (int i = 1; i < size; i++) {\n      if (isInitializingAssignmentAt(i)) {\n        Reference maybeInit = references.get(i);\n        Reference maybeDecl = references.get(i - 1);\n        boolean isDeclaredInFunction = maybeDecl.getBasicBlock().getFunction() != null;\n        // ensure that there are no other assignments in between the\n        // declaration and initialization\n        boolean isAssignedBefore = false;\n        for (int j = i - 2; j >= 0; j--) {\n          Reference prev = references.get(j);\n          if (prev.isAssignmentTo(maybeDecl.getName())\n              && (isDeclaredInFunction || prev.getBasicBlock().getFunction() == maybeDecl.getBasicBlock().getFunction())) {\n              isAssignedBefore = true;\n              break;\n          }\n        }\n        if (!isAssignedBefore) {\n          return maybeInit;\n        }\n        break; // we are only looking for the first assignment, so break out of the loop\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * Constants are allowed to be defined after their first use.\n */\nReference getInitializingReferenceForConstants() {\n  int size = references.size();\n  for (int i = 0; i < size; i++) {\n    if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n      return references.get(i);\n    }\n  }\n  return null;\n}\n\n/**\n * @return Whether the variable is only assigned a value once for its\n *     lifetime.\n */\nboolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n\n  // Make sure this assignment is not in a loop.\n  for (BasicBlock block = ref.getBasicBlock();\n       block != null; block = block.getParent()) {\n    if (block.getFunction() != null) {\n      break;\n    } else if (block.isLoop()) {\n      return false;\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..0fe75ec2 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -371,71 +371,106 @@ class ReferenceCollectingCallback implements ScopedCallback,\n      * follow a variable declaration that itself does not initialize the\n      * variable.\n      */\n-    private boolean isInitializingAssignmentAt(int index) {\n-      if (index < references.size() && index > 0) {\n-        Reference maybeDecl = references.get(index - 1);\n-        if (maybeDecl.isVarDeclaration()) {\n-          Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n-          Reference maybeInit = references.get(index);\n-          if (maybeInit.isSimpleAssignmentToName()) {\n-            return true;\n+private boolean isInitializingAssignmentAt(int index) {\n+  if (index < references.size() && index > 0) {\n+    Reference maybeDecl = references.get(index - 1);\n+    if (maybeDecl.isVarDeclaration()) {\n+      Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n+      Reference maybeInit = references.get(index);\n+      if (maybeInit.isSimpleAssignmentToName()) {\n+        if (maybeInit.getBasicBlock() == maybeDecl.getBasicBlock()) {\n+          return true;\n+        }\n+        boolean isDeclaredInFunction = maybeDecl.getBasicBlock().getFunction() != null;\n+        // ensure that there are no other assignments in between the\n+        // declaration and initialization\n+        for (int i = 0; i < index - 1; i++) {\n+          Reference prev = references.get(i);\n+          if (prev.isAssignmentTo(maybeDecl.getName())\n+              && (isDeclaredInFunction || prev.getBasicBlock().getFunction() == maybeDecl.getBasicBlock().getFunction())) {\n+            return false;\n           }\n         }\n+        return true;\n       }\n-      return false;\n-    }\n-\n-    /**\n-     * @return The reference that provides the value for the variable at the\n-     * time of the first read, if known, otherwise null.\n-     *\n-     * This is either the variable declaration (\"var a = ...\") or first\n-     * reference following the declaration if it is an assignment.\n-     */\n-    Reference getInitializingReference() {\n-      if (isInitializingDeclarationAt(0)) {\n-        return references.get(0);\n-      } else if (isInitializingAssignmentAt(1)) {\n-        return references.get(1);\n-      }\n-      return null;\n     }\n+  }\n+  return false;\n+}\n \n-    /**\n-     * Constants are allowed to be defined after their first use.\n-     */\n-    Reference getInitializingReferenceForConstants() {\n-      int size = references.size();\n-      for (int i = 0; i < size; i++) {\n-        if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n-          return references.get(i);\n+/**\n+ * @return The reference that provides the value for the variable at the\n+ * time of the first read, if known, otherwise null.\n+ *\n+ * This is either the variable declaration (\"var a = ...\") or first\n+ * reference following the declaration if it is an assignment.\n+ */\n+Reference getInitializingReference() {\n+  if (isInitializingDeclarationAt(0)) {\n+    return references.get(0);\n+  } else {\n+    int size = references.size();\n+    for (int i = 1; i < size; i++) {\n+      if (isInitializingAssignmentAt(i)) {\n+        Reference maybeInit = references.get(i);\n+        Reference maybeDecl = references.get(i - 1);\n+        boolean isDeclaredInFunction = maybeDecl.getBasicBlock().getFunction() != null;\n+        // ensure that there are no other assignments in between the\n+        // declaration and initialization\n+        boolean isAssignedBefore = false;\n+        for (int j = i - 2; j >= 0; j--) {\n+          Reference prev = references.get(j);\n+          if (prev.isAssignmentTo(maybeDecl.getName())\n+              && (isDeclaredInFunction || prev.getBasicBlock().getFunction() == maybeDecl.getBasicBlock().getFunction())) {\n+              isAssignedBefore = true;\n+              break;\n+          }\n+        }\n+        if (!isAssignedBefore) {\n+          return maybeInit;\n         }\n+        break; // we are only looking for the first assignment, so break out of the loop\n       }\n-      return null;\n     }\n+  }\n+  return null;\n+}\n \n-    /**\n-     * @return Whether the variable is only assigned a value once for its\n-     *     lifetime.\n-     */\n-    boolean isAssignedOnceInLifetime() {\n-      Reference ref = getOneAndOnlyAssignment();\n-      if (ref == null) {\n-        return false;\n-      }\n+/**\n+ * Constants are allowed to be defined after their first use.\n+ */\n+Reference getInitializingReferenceForConstants() {\n+  int size = references.size();\n+  for (int i = 0; i < size; i++) {\n+    if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n+      return references.get(i);\n+    }\n+  }\n+  return null;\n+}\n \n-      // Make sure this assignment is not in a loop.\n-      for (BasicBlock block = ref.getBasicBlock();\n-           block != null; block = block.getParent()) {\n-        if (block.isFunction) {\n-          break;\n-        } else if (block.isLoop) {\n-          return false;\n-        }\n-      }\n+/**\n+ * @return Whether the variable is only assigned a value once for its\n+ *     lifetime.\n+ */\n+boolean isAssignedOnceInLifetime() {\n+  Reference ref = getOneAndOnlyAssignment();\n+  if (ref == null) {\n+    return false;\n+  }\n \n-      return true;\n+  // Make sure this assignment is not in a loop.\n+  for (BasicBlock block = ref.getBasicBlock();\n+       block != null; block = block.getParent()) {\n+    if (block.getFunction() != null) {\n+      break;\n+    } else if (block.isLoop()) {\n+      return false;\n     }\n+  }\n+\n+  return true;\n+}\n \n     /**\n      * @return The one and only assignment. Returns if there are 0 or 2+",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}