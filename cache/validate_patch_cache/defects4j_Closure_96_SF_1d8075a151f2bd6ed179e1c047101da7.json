{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n\n  // Validate each parameter with its corresponding argument.\n  int ordinal = 0;\n  while (parameters.hasNext() && arguments.hasNext()) {\n    Node argument = arguments.next();\n    Node parameter = parameters.next();\n    ordinal++;\n    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  // Handle `var_args`.\n  Node varArgsParameter = null;\n  while (parameters.hasNext()) {\n    varArgsParameter = parameters.next();\n    ordinal++;\n    validator.expectArgumentMatchesParameter(t, null, null, getJSType(varArgsParameter), call, ordinal);\n  }\n  while (arguments.hasNext()) {\n    Node argument = arguments.next();\n    ordinal++;\n    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(varArgsParameter), call, ordinal);\n  }\n\n  // Check argument count.\n  int numArgs = call.getChildCount() - 1;  // Exclude the function name.\n  if (numArgs < functionType.getMinArguments()\n      || (functionType.getMaxArguments() != -1 && numArgs > functionType.getMaxArguments())) {\n    String maxArgsMessage = \"\";\n    if (functionType.getMaxArguments() != -1) {\n      maxArgsMessage = \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\";\n    }\n    report(t, call, WRONG_ARGUMENT_COUNT,\n           validator.getReadableJSTypeName(call.getFirstChild(), false),\n           String.valueOf(numArgs),\n           String.valueOf(functionType.getMinArguments()),\n           maxArgsMessage);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..6376da9a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,49 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+\n+  // Validate each parameter with its corresponding argument.\n+  int ordinal = 0;\n+  while (parameters.hasNext() && arguments.hasNext()) {\n+    Node argument = arguments.next();\n+    Node parameter = parameters.next();\n+    ordinal++;\n+    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+  }\n+\n+  // Handle `var_args`.\n+  Node varArgsParameter = null;\n+  while (parameters.hasNext()) {\n+    varArgsParameter = parameters.next();\n+    ordinal++;\n+    validator.expectArgumentMatchesParameter(t, null, null, getJSType(varArgsParameter), call, ordinal);\n+  }\n+  while (arguments.hasNext()) {\n+    Node argument = arguments.next();\n+    ordinal++;\n+    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(varArgsParameter), call, ordinal);\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  // Check argument count.\n+  int numArgs = call.getChildCount() - 1;  // Exclude the function name.\n+  if (numArgs < functionType.getMinArguments()\n+      || (functionType.getMaxArguments() != -1 && numArgs > functionType.getMaxArguments())) {\n+    String maxArgsMessage = \"\";\n+    if (functionType.getMaxArguments() != -1) {\n+      maxArgsMessage = \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\";\n     }\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+           validator.getReadableJSTypeName(call.getFirstChild(), false),\n+           String.valueOf(numArgs),\n+           String.valueOf(functionType.getMinArguments()),\n+           maxArgsMessage);\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1> but was:<0>",
    "test_result": "FAIL"
}