{
    "patch": "public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n    double[] distribution = new double[N + 1];\n    double[] curr = new double[M];\n    double[] prev = new double[M];\n    prev[0] = 1.0;\n\n    for (int d = 1; d <= D; d++) {\n        for (int i = 0; i < M; i++) {\n            curr[i] = 0.0;\n\n            for (int j = 0; j < M; j++) {\n                curr[i] += prev[j] * genotypeProbabilities[getDominant(i, j, M)];\n            }\n        }\n        System.arraycopy(curr, 0, prev, 0, M);\n    }\n\n    for (int i = 0; i < M; i++) {\n        distribution[populationCount(i)] += prev[i];\n    }\n\n    for (int i = 0; i < distribution.length; i++) {\n        distribution[i] /= Math.pow(M, D);\n    }\n\n    return distribution;\n}\n\nprivate int getDominant(int i, int j, int M) {\n    int result = 0;\n\n    for (int k = 1; k <= M; k++) {\n        if (i >= k && j >= k) {\n            result += k;\n        } else if (i >= k || j >= k) {\n            result += k - 1;\n        } else {\n            break;\n        }\n    }\n\n    return result;\n}\n\nprivate int populationCount(int i) {\n    int count = 0;\n\n    while (i > 0) {\n        count += i % 2;\n        i /= 2;\n    }\n\n    return count;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}