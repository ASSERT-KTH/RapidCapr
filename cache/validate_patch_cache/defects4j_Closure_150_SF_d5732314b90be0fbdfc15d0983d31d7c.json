{
    "patch": "private boolean isFunctionDeclaration(Node n) {\n    return NodeUtil.isFunctionDeclaration(n) || (n.getType() == Token.ASSIGN && n.getFirstChild().getType() == Token.FUNCTION);\n}\n\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n        return;\n    }\n\n    // handle function inputs for function expressions\n    if (n.getType() == Token.FUNCTION && !isFunctionDeclaration(parent)) {\n        defineDeclaredFunction(n, parent);\n        if (parent.getType() == Token.EXPR_RESULT) {\n            handleFunctionInputs(parent);\n        }\n    }\n\n    switch (n.getType()) {\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        default:\n            break;\n    }\n\n    attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..34890e58 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,38 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+private boolean isFunctionDeclaration(Node n) {\n+    return NodeUtil.isFunctionDeclaration(n) || (n.getType() == Token.ASSIGN && n.getFirstChild().getType() == Token.FUNCTION);\n+}\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+    // handle function inputs for function expressions\n+    if (n.getType() == Token.FUNCTION && !isFunctionDeclaration(parent)) {\n+        defineDeclaredFunction(n, parent);\n+        if (parent.getType() == Token.EXPR_RESULT) {\n+            handleFunctionInputs(parent);\n+        }\n+    }\n+\n+    switch (n.getType()) {\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineVar(n, parent);\n+            break;\n+        case Token.CATCH:\n+            defineCatch(n, parent);\n+            break;\n+        default:\n+            break;\n     }\n \n+    attachLiteralTypes(n);\n+}\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}