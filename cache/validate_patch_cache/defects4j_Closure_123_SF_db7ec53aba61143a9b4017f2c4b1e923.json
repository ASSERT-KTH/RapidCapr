{
    "patch": "public static String fixCode(String code) {\n    String pattern = \"for\\\\((.*) in (.*)\\\\)\";\n    Pattern r = Pattern.compile(pattern);\n    Matcher m = r.matcher(code);\n    if (m.find()) {\n        String indices = m.group(1);\n        String iterable = m.group(2);\n        String fixedIndices = indices.replace(\"[\", \"\").replace(\"]\", \"\");\n        String fixedCode = code.replace(indices, fixedIndices);\n        return fixedCode;\n    } else {\n        return code;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..a5eb47bd 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,20 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String pattern = \"for\\\\((.*) in (.*)\\\\)\";\n+    Pattern r = Pattern.compile(pattern);\n+    Matcher m = r.matcher(code);\n+    if (m.find()) {\n+        String indices = m.group(1);\n+        String iterable = m.group(2);\n+        String fixedIndices = indices.replace(\"[\", \"\").replace(\"]\", \"\");\n+        String fixedCode = code.replace(indices, fixedIndices);\n+        return fixedCode;\n+    } else {\n+        return code;\n+    }\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}