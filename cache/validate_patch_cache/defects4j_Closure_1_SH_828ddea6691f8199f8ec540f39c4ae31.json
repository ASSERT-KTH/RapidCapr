{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    Node body = function.getLastChild();\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    // Get all referenced parameters for functions modified by callSiteOptimizer.\n    if (modifyCallers) {\n      List<Node> refs = callSiteOptimizer.getAllReferences(fnScope);\n      // If all parameters are referenced, return early.\n      if (refs.size() == argList.getChildCount()) {\n        return;\n      }\n    }\n\n    // Strip unreferenced args wherever they are.\n    Node arg = argList.getFirstChild();\n    while (arg != null) {\n      if (!arg.isDefaultValue() || !NodeUtil.mayHaveSideEffects(arg.getFirstChild())) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          Node nameNode = arg;\n          arg = arg.getNext();\n          argList.removeChild(nameNode);\n          if (body.hasChildren() && NodeUtil.mayHaveSideEffects(nameNode)) {\n            for (Node node : NodeUtil.findLhsNodesInNode(body, nameNode.getString())) {\n              node.setJSDocInfo(null);\n            }\n          }\n          continue;\n        }\n      }\n      arg = arg.getNext();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f77f31f1 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,44 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    Node body = function.getLastChild();\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    // Get all referenced parameters for functions modified by callSiteOptimizer.\n+    if (modifyCallers) {\n+      List<Node> refs = callSiteOptimizer.getAllReferences(fnScope);\n+      // If all parameters are referenced, return early.\n+      if (refs.size() == argList.getChildCount()) {\n+        return;\n+      }\n+    }\n+\n+    // Strip unreferenced args wherever they are.\n+    Node arg = argList.getFirstChild();\n+    while (arg != null) {\n+      if (!arg.isDefaultValue() || !NodeUtil.mayHaveSideEffects(arg.getFirstChild())) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          Node nameNode = arg;\n+          arg = arg.getNext();\n+          argList.removeChild(nameNode);\n+          if (body.hasChildren() && NodeUtil.mayHaveSideEffects(nameNode)) {\n+            for (Node node : NodeUtil.findLhsNodesInNode(body, nameNode.getString())) {\n+              node.setJSDocInfo(null);\n+            }\n+          }\n+          continue;\n+        }\n+      }\n+      arg = arg.getNext();\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}