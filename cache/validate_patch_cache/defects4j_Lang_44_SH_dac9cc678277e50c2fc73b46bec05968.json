{
    "patch": "        int firstSigDigit = CharUtils.indexOfFirstDigit(val);\n        int lastSigDigit = CharUtils.indexOfLastDigit(val);\n        if (firstSigDigit == -1 || lastSigDigit == -1) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        // to strip off leading zeros\n        if (val.charAt(firstSigDigit) == '0' && lastSigDigit > firstSigDigit) {\n            if (val.charAt(firstSigDigit + 1) != '.') {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n            firstSigDigit++;\n        }\n        if (val.charAt(lastSigDigit) == 'D' || val.charAt(lastSigDigit) == 'd' ||\n            val.charAt(lastSigDigit) == 'F' || val.charAt(lastSigDigit) == 'f' ||\n            val.charAt(lastSigDigit) == 'L' || val.charAt(lastSigDigit) == 'l') {\n            lastSigDigit--;\n        }\n        String mant = val.substring(firstSigDigit, lastSigDigit + 1);\n        String dec;\n        String exp;\n        int decPos = mant.indexOf('.');\n        int expPos = StringUtils.indexOfAny(mant, \"eE\");\n        if (decPos > -1) {\n            if (expPos > -1) {\n                if (expPos < decPos) {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                dec = mant.substring(decPos + 1, expPos);\n            } else {\n                dec = mant.substring(decPos + 1);\n            }\n            mant = mant.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                mant = mant.substring(0, expPos);\n            }\n            dec = null;\n        }\n        if (StringUtils.isEmpty(mant) || CharUtils.indexOfAnyBut(mant, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9') != -1 ||\n            StringUtils.isEmpty(dec) && StringUtils.containsAny(mant, '.', 'e', 'E') ||\n            StringUtils.isNotEmpty(dec) && (dec.charAt(0) == '0' && dec.length() > 1 || \n                                             !StringUtils.containsOnly(dec, '0') || StringUtils.countMatches(mant, '.') > 1)) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        if (dec == null && expPos > -1) {\n            exp = mant.substring(expPos + 1);\n            mant = mant.substring(0, expPos);\n        } else {\n            if (expPos > -1 && expPos < mant.length() - 1) {\n                exp = mant.substring(expPos + 1);\n            } else {\n                exp = null;\n            }\n        }\n        if (!StringUtils.isEmpty(exp) && CharUtils.indexOfAnyBut(exp, '+', '-') != -1 ||\n            StringUtils.countMatches(exp, '+') > 1 || StringUtils.countMatches(exp, '-') > 1) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        if (dec == null && exp == null) {\n            try {\n                return createInteger(mant);\n            } catch (NumberFormatException ignored) {\n                // ignored\n            }\n            try {\n                return createLong(mant);\n            } catch (NumberFormatException ignored) {\n                // ignored\n            }\n            return createBigInteger(mant);\n        } else {\n            boolean allZeros = StringUtils.isAllZeros(mant) && StringUtils.isAllZeros(exp);\n            switch (val.charAt(lastSigDigit)) {\n            case 'L':\n            case 'l':\n                if (dec == null && exp == null && (mant.charAt(0) == '-' && StringUtils.isDigits(mant.substring(1)) ||\n                                                   StringUtils.isDigits(mant))) {\n                    try {\n                        return createLong(mant);\n                    } catch (NumberFormatException ignored) {\n                        // ignored\n                    }\n                    return createBigInteger(mant);\n                }\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            case 'F':\n            case 'f':\n                try {\n                    float floatValue = createFloat(mant + (exp == null ? \"\" : \"E\" + exp));\n                    if (!(floatValue == 0.0F && !allZeros || Float.isInfinite(floatValue))) {\n                        return floatValue;\n                    }\n                } catch (NumberFormatException ignored) {\n                    // ignored\n                }\n                // Fall through\n            case 'D':\n            case 'd':\n                try {\n                    double doubleValue = createDouble(mant + (exp == null ? \"\" : \"E\" + exp));\n                    if (!(doubleValue == 0.0D && !allZeros || Double.isInfinite(doubleValue))) {\n                        return doubleValue;\n                    }\n                } catch (NumberFormatException ignored) {\n                    // ignored\n                }\n                // Fall through\n            default:\n                try {\n                    return createBigDecimal(mant + (exp == null ? \"\" : \"E\" + exp));\n                } catch (NumberFormatException ignored) {\n                    // ignored\n                }\n            }\n        }\n        throw new NumberFormatException(val + \" is not a valid number.\");",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..5c72902d 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,122 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        int firstSigDigit = CharUtils.indexOfFirstDigit(val);\n+        int lastSigDigit = CharUtils.indexOfLastDigit(val);\n+        if (firstSigDigit == -1 || lastSigDigit == -1) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n+        // to strip off leading zeros\n+        if (val.charAt(firstSigDigit) == '0' && lastSigDigit > firstSigDigit) {\n+            if (val.charAt(firstSigDigit + 1) != '.') {\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n+            }\n+            firstSigDigit++;\n+        }\n+        if (val.charAt(lastSigDigit) == 'D' || val.charAt(lastSigDigit) == 'd' ||\n+            val.charAt(lastSigDigit) == 'F' || val.charAt(lastSigDigit) == 'f' ||\n+            val.charAt(lastSigDigit) == 'L' || val.charAt(lastSigDigit) == 'l') {\n+            lastSigDigit--;\n+        }\n+        String mant = val.substring(firstSigDigit, lastSigDigit + 1);\n+        String dec;\n+        String exp;\n+        int decPos = mant.indexOf('.');\n+        int expPos = StringUtils.indexOfAny(mant, \"eE\");\n+        if (decPos > -1) {\n+            if (expPos > -1) {\n+                if (expPos < decPos) {\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                }\n+                dec = mant.substring(decPos + 1, expPos);\n+            } else {\n+                dec = mant.substring(decPos + 1);\n+            }\n+            mant = mant.substring(0, decPos);\n+        } else {\n+            if (expPos > -1) {\n+                mant = mant.substring(0, expPos);\n+            }\n+            dec = null;\n+        }\n+        if (StringUtils.isEmpty(mant) || CharUtils.indexOfAnyBut(mant, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9') != -1 ||\n+            StringUtils.isEmpty(dec) && StringUtils.containsAny(mant, '.', 'e', 'E') ||\n+            StringUtils.isNotEmpty(dec) && (dec.charAt(0) == '0' && dec.length() > 1 || \n+                                             !StringUtils.containsOnly(dec, '0') || StringUtils.countMatches(mant, '.') > 1)) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n+        if (dec == null && expPos > -1) {\n+            exp = mant.substring(expPos + 1);\n+            mant = mant.substring(0, expPos);\n+        } else {\n+            if (expPos > -1 && expPos < mant.length() - 1) {\n+                exp = mant.substring(expPos + 1);\n+            } else {\n+                exp = null;\n+            }\n+        }\n+        if (!StringUtils.isEmpty(exp) && CharUtils.indexOfAnyBut(exp, '+', '-') != -1 ||\n+            StringUtils.countMatches(exp, '+') > 1 || StringUtils.countMatches(exp, '-') > 1) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n+        if (dec == null && exp == null) {\n+            try {\n+                return createInteger(mant);\n+            } catch (NumberFormatException ignored) {\n+                // ignored\n+            }\n+            try {\n+                return createLong(mant);\n+            } catch (NumberFormatException ignored) {\n+                // ignored\n+            }\n+            return createBigInteger(mant);\n+        } else {\n+            boolean allZeros = StringUtils.isAllZeros(mant) && StringUtils.isAllZeros(exp);\n+            switch (val.charAt(lastSigDigit)) {\n+            case 'L':\n+            case 'l':\n+                if (dec == null && exp == null && (mant.charAt(0) == '-' && StringUtils.isDigits(mant.substring(1)) ||\n+                                                   StringUtils.isDigits(mant))) {\n+                    try {\n+                        return createLong(mant);\n+                    } catch (NumberFormatException ignored) {\n+                        // ignored\n+                    }\n+                    return createBigInteger(mant);\n+                }\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n+            case 'F':\n+            case 'f':\n+                try {\n+                    float floatValue = createFloat(mant + (exp == null ? \"\" : \"E\" + exp));\n+                    if (!(floatValue == 0.0F && !allZeros || Float.isInfinite(floatValue))) {\n+                        return floatValue;\n+                    }\n+                } catch (NumberFormatException ignored) {\n+                    // ignored\n+                }\n+                // Fall through\n+            case 'D':\n+            case 'd':\n+                try {\n+                    double doubleValue = createDouble(mant + (exp == null ? \"\" : \"E\" + exp));\n+                    if (!(doubleValue == 0.0D && !allZeros || Double.isInfinite(doubleValue))) {\n+                        return doubleValue;\n+                    }\n+                } catch (NumberFormatException ignored) {\n+                    // ignored\n+                }\n+                // Fall through\n+            default:\n+                try {\n+                    return createBigDecimal(mant + (exp == null ? \"\" : \"E\" + exp));\n+                } catch (NumberFormatException ignored) {\n+                    // ignored\n+                }\n+            }\n+        }\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}