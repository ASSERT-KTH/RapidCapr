{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    if (parent.isVar() && parent.getParent().isScript()) {\n      Node initializer = n.getFirstChild();\n      if (initializer != null && initializer.isQualifiedName()) {\n        String name = v.getName();\n        Var aliasVar = initializer.getBestJSDocInfo().isConstructor()\n            ? aliasEs6Class(scope, initializer) : aliasVar(scope, name);\n        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n          aliases.put(name, aliasVar);\n          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        } else {\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n        }\n      } else {\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, v.getName());\n      }\n    }\n  }\n}\n\nprivate Var aliasVar(Scope scope, String name) {\n  // Look for assignments to aliases of this variable.\n  Set<Var> aliases = scope.getAliasVars(name);\n  if (aliases == null) {\n    return scope.getVar(name);\n  }\n\n  for (Var aliasVar : aliases) {\n    Node aliasParent = aliasVar.getNode().getParent();\n    if (aliasParent != null && aliasParent.isExprResult()) {\n      Node aliasGrandparent = aliasParent.getParent();\n      Node aliasGreatgrandparent = aliasGrandparent.getParent();\n      if (aliasGrandparent.isAssign() && aliasGreatgrandparent.getParent() != null\n          && aliasGreatgrandparent.getParent().isExprResult()\n          && aliasVar.getNameNode().isQualifiedName()) {\n        return aliasVar;\n      }\n    }\n  }\n\n  // No aliases found.\n  return scope.getVar(name);\n}\n\nprivate Var aliasEs6Class(Scope scope, Node n) {\n  Node classNode = NodeUtil.getEnclosingClass(n);\n  Preconditions.checkNotNull(classNode);\n  String name = NodeUtil.getNameNode(classNode).getString();\n  Var classVar = scope.getVar(name);\n  Preconditions.checkNotNull(classVar);\n  Node initializer = NodeUtil.getClassMembers(classNode);\n  Preconditions.checkState(initializer.isClassMembers(), initializer);\n  Node constructor = initializer.getFirstChild();\n  Preconditions.checkState(constructor.isMemberFunctionDef(), constructor);\n  return constructor.getJSDocInfo().isConstructor() ? classVar : null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..6d68e60f 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,67 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    if (parent.isVar() && parent.getParent().isScript()) {\n+      Node initializer = n.getFirstChild();\n+      if (initializer != null && initializer.isQualifiedName()) {\n+        String name = v.getName();\n+        Var aliasVar = initializer.getBestJSDocInfo().isConstructor()\n+            ? aliasEs6Class(scope, initializer) : aliasVar(scope, name);\n+        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n           aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n         } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n         }\n+      } else {\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, v.getName());\n       }\n     }\n+  }\n+}\n+\n+private Var aliasVar(Scope scope, String name) {\n+  // Look for assignments to aliases of this variable.\n+  Set<Var> aliases = scope.getAliasVars(name);\n+  if (aliases == null) {\n+    return scope.getVar(name);\n+  }\n+\n+  for (Var aliasVar : aliases) {\n+    Node aliasParent = aliasVar.getNode().getParent();\n+    if (aliasParent != null && aliasParent.isExprResult()) {\n+      Node aliasGrandparent = aliasParent.getParent();\n+      Node aliasGreatgrandparent = aliasGrandparent.getParent();\n+      if (aliasGrandparent.isAssign() && aliasGreatgrandparent.getParent() != null\n+          && aliasGreatgrandparent.getParent().isExprResult()\n+          && aliasVar.getNameNode().isQualifiedName()) {\n+        return aliasVar;\n+      }\n+    }\n+  }\n+\n+  // No aliases found.\n+  return scope.getVar(name);\n+}\n+\n+private Var aliasEs6Class(Scope scope, Node n) {\n+  Node classNode = NodeUtil.getEnclosingClass(n);\n+  Preconditions.checkNotNull(classNode);\n+  String name = NodeUtil.getNameNode(classNode).getString();\n+  Var classVar = scope.getVar(name);\n+  Preconditions.checkNotNull(classVar);\n+  Node initializer = NodeUtil.getClassMembers(classNode);\n+  Preconditions.checkState(initializer.isClassMembers(), initializer);\n+  Node constructor = initializer.getFirstChild();\n+  Preconditions.checkState(constructor.isMemberFunctionDef(), constructor);\n+  return constructor.getJSDocInfo().isConstructor() ? classVar : null;\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}