{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] realEigenvalues = dec.getRealEigenvalues();\n\n    // Check if all eigenvalues are positive\n    for (double eigenvalue : realEigenvalues) {\n        if (eigenvalue < 0.0) {\n            throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n        }\n    }\n\n    // Set negative eigenvalues to zero\n    final double[] modifiedEigenvalues = new double[realEigenvalues.length];\n    for (int i = 0; i < realEigenvalues.length; i++) {\n        if (realEigenvalues[i] < 0.0) {\n            modifiedEigenvalues[i] = 0.0;\n        } else {\n            modifiedEigenvalues[i] = Math.sqrt(realEigenvalues[i]);\n        }\n    }\n\n    // Compute square root of diagonal matrix D\n    final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(modifiedEigenvalues);\n\n    // Compute square root of matrix M using V*D*V^T\n    final RealMatrix v = dec.getV();\n    final RealMatrix vT = v.transpose();\n    return v.multiply(d).multiply(vT);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5bab9a248 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,33 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] realEigenvalues = dec.getRealEigenvalues();\n+\n+    // Check if all eigenvalues are positive\n+    for (double eigenvalue : realEigenvalues) {\n+        if (eigenvalue < 0.0) {\n+            throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n+        }\n+    }\n+\n+    // Set negative eigenvalues to zero\n+    final double[] modifiedEigenvalues = new double[realEigenvalues.length];\n+    for (int i = 0; i < realEigenvalues.length; i++) {\n+        if (realEigenvalues[i] < 0.0) {\n+            modifiedEigenvalues[i] = 0.0;\n+        } else {\n+            modifiedEigenvalues[i] = Math.sqrt(realEigenvalues[i]);\n+        }\n     }\n+\n+    // Compute square root of diagonal matrix D\n+    final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(modifiedEigenvalues);\n+\n+    // Compute square root of matrix M using V*D*V^T\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix vT = v.transpose();\n+    return v.multiply(d).multiply(vT);\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}