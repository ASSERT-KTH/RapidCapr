{
    "patch": "                    if (++i >= maxIterations) {\n                        throw new ConvergenceException(\n                                LocalizedFormats.FAILED_BRACKETING,\n                                getMin(), getMax(), getMax() - getMin(),\n                                computeObjectiveValue(getMin()),\n                                computeObjectiveValue(getMax()),\n                                i, method.toString());\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..df018d79e 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,14 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                    if (++i >= maxIterations) {\n+                        throw new ConvergenceException(\n+                                LocalizedFormats.FAILED_BRACKETING,\n+                                getMin(), getMax(), getMax() - getMin(),\n+                                computeObjectiveValue(getMin()),\n+                                computeObjectiveValue(getMax()),\n+                                i, method.toString());\n+                    }\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}