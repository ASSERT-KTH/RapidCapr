{
    "patch": "private void parseType() {\n    // consume leading ?\n    if (stream.matches('?')) {\n        stream.advance();\n    }\n\n    // consume identifier\n    stream.eat(TokenStream.Type.IDENTIFIER);\n\n    // consume type parameters, if they exist\n    if (stream.matches('<')) {\n        do {\n            parseType();\n        } while (stream.matches(','));\n        stream.eat('>');\n    }\n\n    // consume array brackets, if they exist\n    while (stream.matches('[')) {\n        stream.eat(']');\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..51dd3706 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,28 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private void parseType() {\n+    // consume leading ?\n+    if (stream.matches('?')) {\n+        stream.advance();\n+    }\n+\n+    // consume identifier\n+    stream.eat(TokenStream.Type.IDENTIFIER);\n+\n+    // consume type parameters, if they exist\n+    if (stream.matches('<')) {\n+        do {\n+            parseType();\n+        } while (stream.matches(','));\n+        stream.eat('>');\n+    }\n+\n+    // consume array brackets, if they exist\n+    while (stream.matches('[')) {\n+        stream.eat(']');\n+    }\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}