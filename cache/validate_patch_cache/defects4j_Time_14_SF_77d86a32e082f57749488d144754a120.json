{
    "patch": "import org.joda.time.MonthDay;\nimport org.joda.time.DateTimeFieldType;\nimport org.joda.time.DateTimeField;\nimport org.joda.time.DateTimeUtils;\n\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    int dayOfMonth = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n    int monthOfYear = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n    int year = values[DateTimeFieldType.year().getFieldIndex()];\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        // month is largest field and being added to, such as month-day\n        long instant = 0L;\n\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n\n        instant = add(instant, valueToAdd);\n\n        int[] result = iChronology.get(partial, instant);\n\n        // Check for leap year and February 29\n        int leapYear = iChronology.isLeapYear(result[DateTimeFieldType.year().getFieldIndex()]) ? 1 : 0;\n        if (result[DateTimeFieldType.year().getFieldIndex()] == year && \n            result[DateTimeFieldType.monthOfYear().getFieldIndex()] == 2 && result[DateTimeFieldType.dayOfMonth().getFieldIndex()] == 29) {\n            if (leapYear == 0) {\n                result[DateTimeFieldType.dayOfMonth().getFieldIndex()] = 28;\n            }\n        }\n\n        return result;\n    } \n    else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..d578441a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,49 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+import org.joda.time.MonthDay;\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeUtils;\n+\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    int dayOfMonth = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n+    int monthOfYear = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+    int year = values[DateTimeFieldType.year().getFieldIndex()];\n+\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        // month is largest field and being added to, such as month-day\n+        long instant = 0L;\n+\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+\n+        instant = add(instant, valueToAdd);\n+\n+        int[] result = iChronology.get(partial, instant);\n+\n+        // Check for leap year and February 29\n+        int leapYear = iChronology.isLeapYear(result[DateTimeFieldType.year().getFieldIndex()]) ? 1 : 0;\n+        if (result[DateTimeFieldType.year().getFieldIndex()] == year && \n+            result[DateTimeFieldType.monthOfYear().getFieldIndex()] == 2 && result[DateTimeFieldType.dayOfMonth().getFieldIndex()] == 29) {\n+            if (leapYear == 0) {\n+                result[DateTimeFieldType.dayOfMonth().getFieldIndex()] = 28;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        return result;\n+    } \n+    else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}