{
    "patch": "public double getTypedPercent(String json){\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, Map<String, String>>>(){}.getType();\n    Map<String, Map<String, String>> map = gson.fromJson(json, type);\n    int typedCount = 0;\n    for(Map<String, String> subMap : map.values()){\n        if(subMap.containsKey(KEY_TYPE)){\n            typedCount++;\n        }\n    }\n    return (double)typedCount / map.size() * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..c3001c29 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json){\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, Map<String, String>>>(){}.getType();\n+    Map<String, Map<String, String>> map = gson.fromJson(json, type);\n+    int typedCount = 0;\n+    for(Map<String, String> subMap : map.values()){\n+        if(subMap.containsKey(KEY_TYPE)){\n+            typedCount++;\n+        }\n+    }\n+    return (double)typedCount / map.size() * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}