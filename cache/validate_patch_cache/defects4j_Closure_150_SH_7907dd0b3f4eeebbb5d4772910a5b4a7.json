{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.RETURN:\n          // Fix for Issue #794: use block enclosing return to determine function return type.\n          if (!returnStack.isEmpty() && nodeIsInFunction(parent)) {\n            JSType returnType = getNodeJSType(returnStack.peek());\n            if (returnType != null) {\n              JSDocInfoBuilder builder = new JSDocInfoBuilder(false);\n              builder.recordType(returnType);\n              n.setJSDocInfo(builder.build());\n            }\n          }\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..2a69f840 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1462,6 +1462,17 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        case Token.RETURN:\n+          // Fix for Issue #794: use block enclosing return to determine function return type.\n+          if (!returnStack.isEmpty() && nodeIsInFunction(parent)) {\n+            JSType returnType = getNodeJSType(returnStack.peek());\n+            if (returnType != null) {\n+              JSDocInfoBuilder builder = new JSDocInfoBuilder(false);\n+              builder.recordType(returnType);\n+              n.setJSDocInfo(builder.build());\n+            }\n+          }\n+          break;\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}