{
    "patch": "        String argName = lastArg.getString();\n        Var var = fnScope.getVar(argName);\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n\n          List<Ref> argRefs = fnScope.getVarReferences(argName);\n          for (Ref ref : argRefs) {\n            NodeUtil.deleteNode(ref.getBasicBlock(), ref.getNode());\n            compiler.reportCodeChange();\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3d3fcd5c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,17 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        String argName = lastArg.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+\n+          List<Ref> argRefs = fnScope.getVarReferences(argName);\n+          for (Ref ref : argRefs) {\n+            NodeUtil.deleteNode(ref.getBasicBlock(), ref.getNode());\n+            compiler.reportCodeChange();\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}