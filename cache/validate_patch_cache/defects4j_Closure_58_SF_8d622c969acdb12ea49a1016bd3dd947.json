{
    "patch": "private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n  switch (n.getType()) {\n    case Token.SCRIPT:\n      break;\n    case Token.BLOCK:\n      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        computeGenKill(c, gen, kill, conditional);\n      }\n      break;\n    case Token.FUNCTION:\n      if (n.getFirstChild() == null) {\n        // Function expression.\n        if (conditional) {\n          break;\n        }\n        Node parent = n.getParent();\n        if (NodeUtil.isNameDeclaration(parent)) {\n          addToSetIfLocal(parent.getFirstChild(), kill);\n          addToSetIfLocal(parent.getFirstChild(), gen);\n        } else if (parent.isAssign() && parent.getParent().getType() == Token.EXPR_RESULT) {\n          addToSetIfLocal(parent.getFirstChild(), gen);\n          // We can't add to the kill set here because it satisfies the access.\n        } else {\n          parent = parent.getParent();\n          while (NodeUtil.isUnaryOperator(parent)) {\n            parent = parent.getParent();\n          }\n          switch (parent.getType()) {\n            case Token.VAR:\n              for (Node c = parent.getFirstChild(); c != null; c = c.getNext()) {\n                if (c.hasChildren()) {\n                  addToSetIfLocal(c.getFirstChild(), gen);\n                }\n              }\n              break;\n            case Token.CALL:\n              if (NodeUtil.isName(parent.getFirstChild())) {\n                addToSetIfLocal(parent.getFirstChild(), gen);\n              }\n              break;\n            case Token.NAME:\n              if (isArgumentsName(parent)) {\n                markAllParametersEscaped();\n              }\n              break;\n            default:\n              break;\n          }\n        }\n      } else {\n        scope = n;\n        analyzeNesting(n, gen, kill, conditional);\n        scope = scope.getParent();\n      }\n      break;\n    case Token.WHILE:\n    case Token.DO:\n    case Token.IF:\n      computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n      computeGenKill(n.getFirstChild().getNext(), gen, kill, conditional);\n      break;\n    case Token.FOR:\n      if (!NodeUtil.isForIn(n)) {\n        Node cond = NodeUtil.getConditionExpression(n);\n        if (cond != null) {\n          computeGenKill(cond, gen, kill, conditional);\n        }\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, conditional);\n      } else {\n        // for(x in y) {...}\n        Node lhs = n.getFirstChild();\n        Node rhs = lhs.getNext();\n        if (NodeUtil.isVar(lhs)) {\n          lhs = lhs.getLastChild();\n        }\n        addToSetIfLocal(lhs, kill);\n        addToSetIfLocal(lhs, gen);\n        computeGenKill(rhs, gen, kill, conditional);\n      }\n      break;\n    case Token.SWITCH:\n      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n      for (Node c = n.getFirstChild().getNext(); c != null; c = c.getNext()) {\n        computeGenKill(c.getFirstChild(), gen, kill, conditional);\n      }\n      break;\n    case Token.TRY:\n      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n      for (Node c = n.getFirstChild().getNext(); c != null; c = c.getNext()) {\n        if (c.getType() == Token.CATCH) {\n          scope = c;\n          addToSetIfLocal(c.getFirstChild(), gen);\n          computeGenKill(c.getChildAtIndex(2), gen, kill, conditional);\n          scope = scope.getParent();\n        }\n      }\n      if (n.getLastChild().hasChildren()) {\n        computeGenKill(n.getLastChild().getFirstChild(), gen, kill, conditional);\n      }\n      break;\n    case Token.VAR:\n      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        if (c.hasChildren()) {\n          computeGenKill(c.getFirstChild(), gen, kill, conditional);\n          addToSetIfLocal(c.getFirstChild(), gen);\n          if (!conditional) {\n            addToSetIfLocal(c.getFirstChild(), kill);\n          }\n        }\n      }\n      break;\n    case Token.AND:\n      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n      computeGenKill(n.getLastChild(), gen, kill, true);\n      break;\n    case Token.OR:\n      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n      computeGenKill(n.getLastChild(), gen, kill, true);\n      break;\n    case Token.HOOK:\n      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n      computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n      computeGenKill(n.getLastChild(), gen, kill, true);\n      break;\n    case Token.NAME:\n      if (NodeUtil.isFunctionDeclaration(n)) {\n        // Function declarations become assignment ops here.\n        addToSetIfLocal(n, gen);\n        Node p = n.getParent();\n        if (p.isBlock() && p.getParent().getType() != Token.SCRIPT) {\n          // Don't include top-level variables.\n          break;\n        }\n        addToSetIfLocal(n, kill);\n      } else if (isArgumentsName(n)) {\n        markAllParametersEscaped();\n      } else {\n        addToSetIfLocal(n, gen);\n      }\n      break;\n    case Token.RETURN:\n      if (n.hasChildren()) {\n        computeGenKill(n.getFirstChild(), gen, kill, conditional || !getFlag(ESCAPES)));\n      }\n      break;\n    case Token.EXPR_RESULT:\n      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n      break;\n    default:\n      if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n        Node lhs = n.getFirstChild();\n        if (!conditional) {\n          addToSetIfLocal(lhs, kill);\n        }\n        if (!NodeUtil.isAssign(n)) {\n          addToSetIfLocal(lhs, gen);\n        }\n        computeGenKill(lhs.getNext(), gen, kill, conditional);\n      } else {\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          computeGenKill(c, gen, kill, conditional);\n        }\n      }\n      break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..fce31e60 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,92 +175,172 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n-      boolean conditional) {\n-\n-    switch (n.getType()) {\n-      case Token.SCRIPT:\n-      case Token.BLOCK:\n-      case Token.FUNCTION:\n-        return;\n-\n-      case Token.WHILE:\n-      case Token.DO:\n-      case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n-        return;\n-\n-      case Token.FOR:\n-        if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n+private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n+  switch (n.getType()) {\n+    case Token.SCRIPT:\n+      break;\n+    case Token.BLOCK:\n+      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+        computeGenKill(c, gen, kill, conditional);\n+      }\n+      break;\n+    case Token.FUNCTION:\n+      if (n.getFirstChild() == null) {\n+        // Function expression.\n+        if (conditional) {\n+          break;\n+        }\n+        Node parent = n.getParent();\n+        if (NodeUtil.isNameDeclaration(parent)) {\n+          addToSetIfLocal(parent.getFirstChild(), kill);\n+          addToSetIfLocal(parent.getFirstChild(), gen);\n+        } else if (parent.isAssign() && parent.getParent().getType() == Token.EXPR_RESULT) {\n+          addToSetIfLocal(parent.getFirstChild(), gen);\n+          // We can't add to the kill set here because it satisfies the access.\n         } else {\n-          // for(x in y) {...}\n-          Node lhs = n.getFirstChild();\n-          Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n+          parent = parent.getParent();\n+          while (NodeUtil.isUnaryOperator(parent)) {\n+            parent = parent.getParent();\n           }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n-        }\n-        return;\n-\n-      case Token.VAR:\n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n-            if (!conditional) {\n-              addToSetIfLocal(c, kill);\n-            }\n+          switch (parent.getType()) {\n+            case Token.VAR:\n+              for (Node c = parent.getFirstChild(); c != null; c = c.getNext()) {\n+                if (c.hasChildren()) {\n+                  addToSetIfLocal(c.getFirstChild(), gen);\n+                }\n+              }\n+              break;\n+            case Token.CALL:\n+              if (NodeUtil.isName(parent.getFirstChild())) {\n+                addToSetIfLocal(parent.getFirstChild(), gen);\n+              }\n+              break;\n+            case Token.NAME:\n+              if (isArgumentsName(parent)) {\n+                markAllParametersEscaped();\n+              }\n+              break;\n+            default:\n+              break;\n           }\n         }\n-        return;\n-\n-      case Token.AND:\n-      case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // May short circuit.\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n-        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.NAME:\n-        if (isArgumentsName(n)) {\n-          markAllParametersEscaped();\n-        } else {\n-          addToSetIfLocal(n, gen);\n+      } else {\n+        scope = n;\n+        analyzeNesting(n, gen, kill, conditional);\n+        scope = scope.getParent();\n+      }\n+      break;\n+    case Token.WHILE:\n+    case Token.DO:\n+    case Token.IF:\n+      computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n+      computeGenKill(n.getFirstChild().getNext(), gen, kill, conditional);\n+      break;\n+    case Token.FOR:\n+      if (!NodeUtil.isForIn(n)) {\n+        Node cond = NodeUtil.getConditionExpression(n);\n+        if (cond != null) {\n+          computeGenKill(cond, gen, kill, conditional);\n         }\n-        return;\n-\n-      default:\n-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n-          Node lhs = n.getFirstChild();\n+        computeGenKill(n.getFirstChild().getNext(), gen, kill, conditional);\n+      } else {\n+        // for(x in y) {...}\n+        Node lhs = n.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        if (NodeUtil.isVar(lhs)) {\n+          lhs = lhs.getLastChild();\n+        }\n+        addToSetIfLocal(lhs, kill);\n+        addToSetIfLocal(lhs, gen);\n+        computeGenKill(rhs, gen, kill, conditional);\n+      }\n+      break;\n+    case Token.SWITCH:\n+      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+      for (Node c = n.getFirstChild().getNext(); c != null; c = c.getNext()) {\n+        computeGenKill(c.getFirstChild(), gen, kill, conditional);\n+      }\n+      break;\n+    case Token.TRY:\n+      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+      for (Node c = n.getFirstChild().getNext(); c != null; c = c.getNext()) {\n+        if (c.getType() == Token.CATCH) {\n+          scope = c;\n+          addToSetIfLocal(c.getFirstChild(), gen);\n+          computeGenKill(c.getChildAtIndex(2), gen, kill, conditional);\n+          scope = scope.getParent();\n+        }\n+      }\n+      if (n.getLastChild().hasChildren()) {\n+        computeGenKill(n.getLastChild().getFirstChild(), gen, kill, conditional);\n+      }\n+      break;\n+    case Token.VAR:\n+      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+        if (c.hasChildren()) {\n+          computeGenKill(c.getFirstChild(), gen, kill, conditional);\n+          addToSetIfLocal(c.getFirstChild(), gen);\n           if (!conditional) {\n-            addToSetIfLocal(lhs, kill);\n-          }\n-          if (!NodeUtil.isAssign(n)) {\n-            // assignments such as a += 1 reads a.\n-            addToSetIfLocal(lhs, gen);\n-          }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n-        } else {\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n+            addToSetIfLocal(c.getFirstChild(), kill);\n           }\n         }\n-        return;\n-    }\n+      }\n+      break;\n+    case Token.AND:\n+      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+      computeGenKill(n.getLastChild(), gen, kill, true);\n+      break;\n+    case Token.OR:\n+      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+      computeGenKill(n.getLastChild(), gen, kill, true);\n+      break;\n+    case Token.HOOK:\n+      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+      computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n+      computeGenKill(n.getLastChild(), gen, kill, true);\n+      break;\n+    case Token.NAME:\n+      if (NodeUtil.isFunctionDeclaration(n)) {\n+        // Function declarations become assignment ops here.\n+        addToSetIfLocal(n, gen);\n+        Node p = n.getParent();\n+        if (p.isBlock() && p.getParent().getType() != Token.SCRIPT) {\n+          // Don't include top-level variables.\n+          break;\n+        }\n+        addToSetIfLocal(n, kill);\n+      } else if (isArgumentsName(n)) {\n+        markAllParametersEscaped();\n+      } else {\n+        addToSetIfLocal(n, gen);\n+      }\n+      break;\n+    case Token.RETURN:\n+      if (n.hasChildren()) {\n+        computeGenKill(n.getFirstChild(), gen, kill, conditional || !getFlag(ESCAPES)));\n+      }\n+      break;\n+    case Token.EXPR_RESULT:\n+      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+      break;\n+    default:\n+      if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n+        Node lhs = n.getFirstChild();\n+        if (!conditional) {\n+          addToSetIfLocal(lhs, kill);\n+        }\n+        if (!NodeUtil.isAssign(n)) {\n+          addToSetIfLocal(lhs, gen);\n+        }\n+        computeGenKill(lhs.getNext(), gen, kill, conditional);\n+      } else {\n+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+          computeGenKill(c, gen, kill, conditional);\n+        }\n+      }\n+      break;\n   }\n+}\n \n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}