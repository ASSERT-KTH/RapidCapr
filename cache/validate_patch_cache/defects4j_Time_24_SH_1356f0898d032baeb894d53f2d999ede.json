{
    "patch": "            if (savedFields[i].iValue == Integer.MIN_VALUE) {\n                if (savedFields[i].iField.getType() != DateTimeFieldType.weekyear()) {\n                    // leap year adjustment happens here\n                    savedFields[i].iValue = savedFields[i].iField.getDurationField().getRangeDurationField().getType().getField(iChrono).getMinimumValue();\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..8bde1633 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,12 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].iValue == Integer.MIN_VALUE) {\n+                if (savedFields[i].iField.getType() != DateTimeFieldType.weekyear()) {\n+                    // leap year adjustment happens here\n+                    savedFields[i].iValue = savedFields[i].iField.getDurationField().getRangeDurationField().getType().getField(iChrono).getMinimumValue();\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}