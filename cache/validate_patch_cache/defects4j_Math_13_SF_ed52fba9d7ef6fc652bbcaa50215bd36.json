{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final RealMatrix dSqrt = MatrixUtils.createRealMatrix(d.getRowDimension(), d.getColumnDimension());\n    for (int i = 0; i < dSqrt.getRowDimension(); i++) {\n        double sqrtValue = FastMath.sqrt(FastMath.max(d.getEntry(i, i), 0));\n        dSqrt.setEntry(i, i, sqrtValue);\n    }\n    RealMatrix result = v.multiply(dSqrt).multiply(v.transpose());\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..86af919d9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final RealMatrix dSqrt = MatrixUtils.createRealMatrix(d.getRowDimension(), d.getColumnDimension());\n+    for (int i = 0; i < dSqrt.getRowDimension(); i++) {\n+        double sqrtValue = FastMath.sqrt(FastMath.max(d.getEntry(i, i), 0));\n+        dSqrt.setEntry(i, i, sqrtValue);\n     }\n+    RealMatrix result = v.multiply(dSqrt).multiply(v.transpose());\n+    return result;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}