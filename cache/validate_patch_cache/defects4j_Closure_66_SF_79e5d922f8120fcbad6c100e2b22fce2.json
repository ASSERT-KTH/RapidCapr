{
    "patch": "public static double getTypedPercent(String[] arr) {\n    int total = arr.length;\n    int count = 0;\n    for (int i = 0; i < total; i++) {\n        if (arr[i] != null && !arr[i].isEmpty() && arr[i].matches(\"[0-9]+\")) {\n            count++;\n        }\n    }\n    return ((double) count / total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..937eede2 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String[] arr) {\n+    int total = arr.length;\n+    int count = 0;\n+    for (int i = 0; i < total; i++) {\n+        if (arr[i] != null && !arr[i].isEmpty() && arr[i].matches(\"[0-9]+\")) {\n+            count++;\n+        }\n+    }\n+    return ((double) count / total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}