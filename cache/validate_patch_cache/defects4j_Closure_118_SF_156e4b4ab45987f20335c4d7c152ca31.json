{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      boolean hasNumber = false;\n      boolean hasString = false;\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (!child.isString()) {\n          continue;\n        }\n        if (child.getString().isEmpty()) {\n          continue;\n        }\n        char firstChar = child.getString().charAt(0);\n        if (Character.isDigit(firstChar)) {\n          if (hasString) {\n            throw new RuntimeException(\"We should never see a mix of numbers and strings.\");\n          }\n          hasNumber = true;\n          continue;\n        }\n        if (hasNumber) {\n          throw new RuntimeException(\"We should never see a mix of numbers and strings.\");\n        }\n        hasString = true;\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..843f9e82 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -488,18 +488,31 @@ class DisambiguateProperties<T> implements CompilerPass {\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n+      boolean hasNumber = false;\n+      boolean hasString = false;\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        if (!child.isString()) {\n+          continue;\n+        }\n+        if (child.getString().isEmpty()) {\n+          continue;\n+        }\n+        char firstChar = child.getString().charAt(0);\n+        if (Character.isDigit(firstChar)) {\n+          if (hasString) {\n+            throw new RuntimeException(\"We should never see a mix of numbers and strings.\");\n+          }\n+          hasNumber = true;\n+          continue;\n+        }\n+        if (hasNumber) {\n+          throw new RuntimeException(\"We should never see a mix of numbers and strings.\");\n+        }\n+        hasString = true;\n         String name = child.getString();\n         T type = typeSystem.getType(getScope(), n, name);\n-\n         Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n+        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n           // TODO(user): It doesn't look like the user can do much in this\n           // case right now.\n           if (propertiesToErrorFor.containsKey(name)) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}