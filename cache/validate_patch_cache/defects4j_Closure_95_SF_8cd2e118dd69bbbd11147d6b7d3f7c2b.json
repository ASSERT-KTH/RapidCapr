{
    "patch": "      // Only allow declarations of NAMEs and qualified names.\n      boolean shouldDeclareOnGlobalThis = false;\n      if (n.getType() == Token.NAME) {\n        Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);\n        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);\n      } else if (n.getType() == Token.GETPROP) {\n        Preconditions.checkArgument(parent.getType() == Token.ASSIGN ||\n                                     parent.getType() == Token.EXPR_RESULT);\n        Node root = n.getFirstChild();\n        if (root.getType() == Token.NAME && !inferred) {\n          shouldDeclareOnGlobalThis = \n            \"this\".equals(root.getString()) && \n            scope.isGlobal();\n        }\n      } else {\n        throw new IllegalStateException(n.toStringTree());\n      }\n      String variableName = n.getQualifiedName();\n      Preconditions.checkArgument(!variableName.isEmpty());\n\n      // If n is a property, then we should really declare it in the\n      // scope where the root object appears. This helps out people\n      // who declare \"global\" names in an anonymous namespace.\n      Scope scopeToDeclareIn = scope;\n      Node root = null;\n      if (inferred && n.getType() == Token.GETPROP &&\n          (root = n.getFirstChild()).getType() == Token.NAME) {\n        Var v = scope.getVar(root.getString());\n        if (v != null) {\n          JSType t = v.getType();\n          if (t != null) {\n            ObjectType obj = ObjectType.cast(t.restrictByNotNullOrUndefined());\n            if (obj != null) {\n              scopeToDeclareIn = obj.getNominalType().getScope();\n            }\n          }\n        }\n      } else {\n        while (n.getType() == Token.GETPROP) {\n          n = n.getFirstChild();\n          String name = n.getString();\n          ObjectType objType =\n              ObjectType.cast(n.getJSType().restrictByNotNullOrUndefined());\n          if (objType != null) {\n            NominalType objNominalType = objType.getNominalType();\n            scopeToDeclareIn = objNominalType.getScope();\n            if (scopeToDeclareIn == null) {\n              // If for some reason the nominal type can't be found, bail out.\n              break;\n            }\n            JSType propertyType = NominalType.getPropertyType(\n                objNominalType, name);\n            if (inferred && propertyType == null && root != null) {\n              JSType rhsType = parent.getLastChild().getJSType();\n              if (rhsType != null) {\n                ObjectType rhsObjType = \n                    ObjectType.cast(rhsType.restrictByNotNullOrUndefined());\n                if (rhsObjType != null) {\n                  RhsNodeType rhsProp = rhsObjType.getPropertyType(name);\n                  if (rhsProp != null) {\n                    propertyType = rhsProp.getType();\n                  }\n                }\n              }\n            }\n            type = propertyType != null ? propertyType : type;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..fc34318a 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,10 +869,7 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n+      // Only allow declarations of NAMEs and qualified names.\n       boolean shouldDeclareOnGlobalThis = false;\n       if (n.getType() == Token.NAME) {\n         Preconditions.checkArgument(\n@@ -883,11 +880,17 @@ final class TypedScopeCreator implements ScopeCreator {\n         shouldDeclareOnGlobalThis = scope.isGlobal() &&\n             (parent.getType() == Token.VAR ||\n              parent.getType() == Token.FUNCTION);\n+      } else if (n.getType() == Token.GETPROP) {\n+        Preconditions.checkArgument(parent.getType() == Token.ASSIGN ||\n+                                     parent.getType() == Token.EXPR_RESULT);\n+        Node root = n.getFirstChild();\n+        if (root.getType() == Token.NAME && !inferred) {\n+          shouldDeclareOnGlobalThis = \n+            \"this\".equals(root.getString()) && \n+            scope.isGlobal();\n+        }\n       } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+        throw new IllegalStateException(n.toStringTree());\n       }\n       String variableName = n.getQualifiedName();\n       Preconditions.checkArgument(!variableName.isEmpty());\n@@ -896,53 +899,48 @@ final class TypedScopeCreator implements ScopeCreator {\n       // scope where the root object appears. This helps out people\n       // who declare \"global\" names in an anonymous namespace.\n       Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n-\n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n+      Node root = null;\n+      if (inferred && n.getType() == Token.GETPROP &&\n+          (root = n.getFirstChild()).getType() == Token.NAME) {\n+        Var v = scope.getVar(root.getString());\n+        if (v != null) {\n+          JSType t = v.getType();\n+          if (t != null) {\n+            ObjectType obj = ObjectType.cast(t.restrictByNotNullOrUndefined());\n+            if (obj != null) {\n+              scopeToDeclareIn = obj.getNominalType().getScope();\n+            }\n           }\n         }\n-      }\n-    }\n+      } else {\n+        while (n.getType() == Token.GETPROP) {\n+          n = n.getFirstChild();\n+          String name = n.getString();\n+          ObjectType objType =\n+              ObjectType.cast(n.getJSType().restrictByNotNullOrUndefined());\n+          if (objType != null) {\n+            NominalType objNominalType = objType.getNominalType();\n+            scopeToDeclareIn = objNominalType.getScope();\n+            if (scopeToDeclareIn == null) {\n+              // If for some reason the nominal type can't be found, bail out.\n+              break;\n+            }\n+            JSType propertyType = NominalType.getPropertyType(\n+                objNominalType, name);\n+            if (inferred && propertyType == null && root != null) {\n+              JSType rhsType = parent.getLastChild().getJSType();\n+              if (rhsType != null) {\n+                ObjectType rhsObjType = \n+                    ObjectType.cast(rhsType.restrictByNotNullOrUndefined());\n+                if (rhsObjType != null) {\n+                  RhsNodeType rhsProp = rhsObjType.getPropertyType(name);\n+                  if (rhsProp != null) {\n+                    propertyType = rhsProp.getType();\n+                  }\n+                }\n+              }\n+            }\n+            type = propertyType != null ? propertyType : type;\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}