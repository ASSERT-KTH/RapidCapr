{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.getParent() != null && n.getParent().getType() == Token.SCRIPT) {\n      // Top-level block with non-local vars defined.\n      return false;\n    }\n\n    if (n.hasOneChild()) {\n      Node onlyChild = n.getFirstChild();\n      \n      // Special case for EXPR_RESULT nodes that have a function as a child\n      if (onlyChild.getType() == Token.EXPR_RESULT) {\n        Node grandChild = onlyChild.getFirstChild();\n        if (grandChild.getType() == Token.FUNCTION) {\n          return false;\n        }\n      }\n      \n      // Don't fold if child is a labeled statement.\n      if (onlyChild.isLabel()) {\n        return false;\n      }\n      \n      // Check that the child is an expression.\n      if (NodeUtil.isExpressionNode(onlyChild)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..e7d40db9 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,37 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.getParent() != null && n.getParent().getType() == Token.SCRIPT) {\n+      // Top-level block with non-local vars defined.\n+      return false;\n     }\n \n-    return false;\n+    if (n.hasOneChild()) {\n+      Node onlyChild = n.getFirstChild();\n+      \n+      // Special case for EXPR_RESULT nodes that have a function as a child\n+      if (onlyChild.getType() == Token.EXPR_RESULT) {\n+        Node grandChild = onlyChild.getFirstChild();\n+        if (grandChild.getType() == Token.FUNCTION) {\n+          return false;\n+        }\n+      }\n+      \n+      // Don't fold if child is a labeled statement.\n+      if (onlyChild.isLabel()) {\n+        return false;\n+      }\n+      \n+      // Check that the child is an expression.\n+      if (NodeUtil.isExpressionNode(onlyChild)) {\n+        return true;\n+      }\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}