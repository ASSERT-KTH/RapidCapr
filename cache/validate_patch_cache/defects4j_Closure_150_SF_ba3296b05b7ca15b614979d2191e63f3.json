{
    "patch": "    @Override \n    public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n == scope.getRootNode()) {\n            return;\n        }\n\n        attachLiteralTypes(n);\n\n        int type = n.getType();\n        if (type == Token.FUNCTION && !NodeUtil.isFunctionExpression(n)) {\n            if (parent.getType() != Token.NAME) {\n                defineDeclaredFunction(n, parent);\n            }\n            return;\n        }\n        if (type == Token.CATCH) {\n            defineCatch(n, parent);\n            return;\n        }\n        if (type == Token.NAME || type == Token.VAR) {\n            defineVar(n, parent);\n            return;\n        }\n        if (type == Token.LP) {\n            if (parent != null) {\n                int parentType = parent.getType();\n                if (parentType == Token.CALL || NodeUtil.isFunctionExpression(parent)) {\n                    handleFunctionInputs(parent);\n                    return;\n                }\n                if (parentType == Token.SCRIPT) {\n                    handleFunctionInputs(n);\n                    return;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..b346f821 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,42 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+    @Override \n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n == scope.getRootNode()) {\n+            return;\n+        }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+        attachLiteralTypes(n);\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+        int type = n.getType();\n+        if (type == Token.FUNCTION && !NodeUtil.isFunctionExpression(n)) {\n+            if (parent.getType() != Token.NAME) {\n+                defineDeclaredFunction(n, parent);\n+            }\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n-    }\n+        }\n+        if (type == Token.CATCH) {\n+            defineCatch(n, parent);\n+            return;\n+        }\n+        if (type == Token.NAME || type == Token.VAR) {\n+            defineVar(n, parent);\n+            return;\n+        }\n+        if (type == Token.LP) {\n+            if (parent != null) {\n+                int parentType = parent.getType();\n+                if (parentType == Token.CALL || NodeUtil.isFunctionExpression(parent)) {\n+                    handleFunctionInputs(parent);\n+                    return;\n+                }\n+                if (parentType == Token.SCRIPT) {\n+                    handleFunctionInputs(n);\n+                    return;\n+                }\n+            }\n+        }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}