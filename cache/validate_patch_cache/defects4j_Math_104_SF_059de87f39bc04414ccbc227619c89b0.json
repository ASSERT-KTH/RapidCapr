{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid arguments!\");\n    }\n    double gammaA = gamma(a);\n    double igammaA = incompleteGamma(a, x);\n    return igammaA / gammaA;\n}\n\npublic static double gamma(double n) {\n    if (n <= 0.0) {\n        throw new IllegalArgumentException(\"Invalid argument: \" + n);\n    }\n    if (n < 0.5) {\n        return Math.PI / (Math.sin(Math.PI * n) * gamma(1.0 - n));\n    }\n    double p = 1.0;\n    while (n > 2.5) {\n        n -= 1.0;\n        p *= n;\n    }\n    double x = n - 1.0;\n    double t = 1.0 / (1.0 + x / 12.0);\n    t = (x + 0.5) * Math.log(x + 5.5) - (x + 5.5) + Math.log(Math.sqrt(2.0 * Math.PI * Math.E) * t);\n    return Math.exp(t + Math.log(Math.sqrt(2.0 * Math.PI)) + Math.log(p));\n}\n\npublic static double incompleteGamma(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid arguments!\");\n    }\n    double epsilon = 10e-15;\n    double ans = 0.0;\n    double ax = 0.0;\n    double c = 0.0;\n    double r = 0.0;\n    double term = 0.0;\n    double sum = 0.0;\n    if (x == 0.0) {\n        return 0.0;\n    } else if (x > a + 1.0) {\n        double g = regularizedGammaQ(a, x);\n        return 1.0 - g;\n    }\n    ax = a * Math.log(x) - x - logGamma(a);\n    ax = Math.exp(ax);\n    r = a;\n    sum = 1.0 / a;\n    term = sum;\n    while (Math.abs(term) > epsilon * Math.abs(sum)) {\n        r += 1.0;\n        term *= x / r;\n        sum += term;\n    }\n    ans = sum * ax / a;\n    return ans;\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid arguments!\");\n    }\n    double epsilon = 10e-15;\n    double igamma = incompleteGamma(a, x);\n    double gamma = gamma(a);\n    double sum = 1.0 - igamma / gamma;\n    double term = 1.0;\n    int n = 1;\n    while (Math.abs(term) > epsilon * Math.abs(sum)) {\n        term = igamma(a + n, x);\n        term /= gamma(a + n);\n        sum -= term;\n        n += 1;\n    }\n    return sum;\n}\n\npublic static double igamma(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid arguments!\");\n    }\n    double epsilon = 10e-15;\n    double term = 0.0;\n    double sum = 0.0;\n    int k = 0;\n    do {\n        term = Math.pow(x, a + k) / (gamma(a + k + 1.0));\n        sum += term;\n        k += 1;\n    } while (Math.abs(term) >= epsilon * Math.abs(sum));\n    return sum;\n}\n\npublic static double logGamma(double x) {\n    double[] coef = {\n            0.9999999999998099, 676.5203681218851, -1259.1392167224028,\n            771.3234287776531, -176.6150291621406, 12.507343278686905,\n            -0.13857109526572012, 0.000009984369578019571\n    };\n    double tmp = x + 5.5 - (x + 0.5) * Math.log(x + 5.5);\n    double ser = 1.0;\n    for (int j = 0; j <= 7; j++) {\n        ser += coef[j] / (x + j + 1.0);\n    }\n    return -tmp + Math.log(2.5066282746310007 * ser / x);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..d3a7ec6ea 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,112 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid arguments!\");\n+    }\n+    double gammaA = gamma(a);\n+    double igammaA = incompleteGamma(a, x);\n+    return igammaA / gammaA;\n+}\n+\n+public static double gamma(double n) {\n+    if (n <= 0.0) {\n+        throw new IllegalArgumentException(\"Invalid argument: \" + n);\n+    }\n+    if (n < 0.5) {\n+        return Math.PI / (Math.sin(Math.PI * n) * gamma(1.0 - n));\n+    }\n+    double p = 1.0;\n+    while (n > 2.5) {\n+        n -= 1.0;\n+        p *= n;\n+    }\n+    double x = n - 1.0;\n+    double t = 1.0 / (1.0 + x / 12.0);\n+    t = (x + 0.5) * Math.log(x + 5.5) - (x + 5.5) + Math.log(Math.sqrt(2.0 * Math.PI * Math.E) * t);\n+    return Math.exp(t + Math.log(Math.sqrt(2.0 * Math.PI)) + Math.log(p));\n+}\n+\n+public static double incompleteGamma(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid arguments!\");\n+    }\n+    double epsilon = 10e-15;\n+    double ans = 0.0;\n+    double ax = 0.0;\n+    double c = 0.0;\n+    double r = 0.0;\n+    double term = 0.0;\n+    double sum = 0.0;\n+    if (x == 0.0) {\n+        return 0.0;\n+    } else if (x > a + 1.0) {\n+        double g = regularizedGammaQ(a, x);\n+        return 1.0 - g;\n+    }\n+    ax = a * Math.log(x) - x - logGamma(a);\n+    ax = Math.exp(ax);\n+    r = a;\n+    sum = 1.0 / a;\n+    term = sum;\n+    while (Math.abs(term) > epsilon * Math.abs(sum)) {\n+        r += 1.0;\n+        term *= x / r;\n+        sum += term;\n+    }\n+    ans = sum * ax / a;\n+    return ans;\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid arguments!\");\n+    }\n+    double epsilon = 10e-15;\n+    double igamma = incompleteGamma(a, x);\n+    double gamma = gamma(a);\n+    double sum = 1.0 - igamma / gamma;\n+    double term = 1.0;\n+    int n = 1;\n+    while (Math.abs(term) > epsilon * Math.abs(sum)) {\n+        term = igamma(a + n, x);\n+        term /= gamma(a + n);\n+        sum -= term;\n+        n += 1;\n+    }\n+    return sum;\n+}\n+\n+public static double igamma(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid arguments!\");\n+    }\n+    double epsilon = 10e-15;\n+    double term = 0.0;\n+    double sum = 0.0;\n+    int k = 0;\n+    do {\n+        term = Math.pow(x, a + k) / (gamma(a + k + 1.0));\n+        sum += term;\n+        k += 1;\n+    } while (Math.abs(term) >= epsilon * Math.abs(sum));\n+    return sum;\n+}\n+\n+public static double logGamma(double x) {\n+    double[] coef = {\n+            0.9999999999998099, 676.5203681218851, -1259.1392167224028,\n+            771.3234287776531, -176.6150291621406, 12.507343278686905,\n+            -0.13857109526572012, 0.000009984369578019571\n+    };\n+    double tmp = x + 5.5 - (x + 0.5) * Math.log(x + 5.5);\n+    double ser = 1.0;\n+    for (int j = 0; j <= 7; j++) {\n+        ser += coef[j] / (x + j + 1.0);\n+    }\n+    return -tmp + Math.log(2.5066282746310007 * ser / x);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}