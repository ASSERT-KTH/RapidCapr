{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n\n    JSType constructorType = constructor.getJSType();\n\n    if (constructorType == null) {\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n    } else {\n        // Handle null and undefined types.\n        if (constructorType.isNoType() || constructorType.isVoidType()) {\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n        } else {\n            // Check if constructor type is a function type.\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null || !ct.isConstructor()) {\n                // If not a constructor, set the object type to the constructor type.\n                n.setJSType(constructorType);\n            } else {\n                // Set the object type to the instance type of the constructor function.\n                n.setJSType(ct.getInstanceType());\n            }\n        }\n    }\n\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..27e60556 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,37 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n+\n     JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+\n+    if (constructorType == null) {\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n+    } else {\n+        // Handle null and undefined types.\n+        if (constructorType.isNoType() || constructorType.isVoidType()) {\n+            n.setJSType(getNativeType(UNKNOWN_TYPE));\n+        } else {\n+            // Check if constructor type is a function type.\n+            FunctionType ct = constructorType.toMaybeFunctionType();\n+            if (ct == null || !ct.isConstructor()) {\n+                // If not a constructor, set the object type to the constructor type.\n+                n.setJSType(constructorType);\n+            } else {\n+                // Set the object type to the instance type of the constructor function.\n+                n.setJSType(ct.getInstanceType());\n+            }\n         }\n-      }\n     }\n-    n.setJSType(type);\n+\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+        scope = traverse(arg, scope);\n     }\n+\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[foo: (number|undefined)]}> but was:<{[]}>",
    "test_result": "FAIL"
}