{
    "patch": "Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\nif (actualTypeArgument != null) {\n    if (actualTypeArgument instanceof TypeVariable) {\n        registerTypeVariablesOn(typeVariable.getGenericDeclaration());\n    } else {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n} else {\n    if (typeVariable.getBounds().length == 0) {\n        registerTypeVariablesOn(typeVariable.getGenericDeclaration());\n    } else {\n        boolean hasObjectBound = false;\n        for (Type bound : typeVariable.getBounds()) {\n            if (bound.equals(Object.class)) {\n                hasObjectBound = true;\n                break;\n            }\n        }\n        if (hasObjectBound) {\n            registerTypeVariablesOn(Object.class);\n        } else {\n            registerTypeVariablesOn(typeVariable.getBounds()[0]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..37e4ea415 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,36 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+if (actualTypeArgument != null) {\n+    if (actualTypeArgument instanceof TypeVariable) {\n+        registerTypeVariablesOn(typeVariable.getGenericDeclaration());\n+    } else {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+} else {\n+    if (typeVariable.getBounds().length == 0) {\n+        registerTypeVariablesOn(typeVariable.getGenericDeclaration());\n+    } else {\n+        boolean hasObjectBound = false;\n+        for (Type bound : typeVariable.getBounds()) {\n+            if (bound.equals(Object.class)) {\n+                hasObjectBound = true;\n+                break;\n+            }\n+        }\n+        if (hasObjectBound) {\n+            registerTypeVariablesOn(Object.class);\n+        } else {\n+            registerTypeVariablesOn(typeVariable.getBounds()[0]);\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: incompatible types: GenericDeclaration cannot be converted to Type",
    "test_result": "ERROR"
}