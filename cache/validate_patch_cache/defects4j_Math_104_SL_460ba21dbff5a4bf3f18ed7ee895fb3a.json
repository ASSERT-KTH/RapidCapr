{
    "patch": "private static final double DEFAULT_EPSILON = 1e-9; // Added line\n\npublic static double gamma(double x) {\n    // Gamma reflection formula\n    if (x < 0.5) {\n        return Math.PI / (Math.sin(Math.PI * x) * gamma(1 - x));\n    }\n\n    // Lanczos approximation\n    double[] coefficients = {\n        0.99999999999980993227684700473478,\n        676.520368121885098567009190444019,\n        -1259.13921672240287047156078755283,\n        771.3234287776530788486528258894,\n        -176.61502916214059906584551354,\n        12.507343278686904814458936853,\n        -0.13857109526572011689554707,\n        0.00000998436957801957294142,\n        0.00000000150563273514931156};\n\n    double sum = coefficients[0];\n    for (int i = 1; i < coefficients.length; i++) {\n        sum += coefficients[i] / (x + i);\n    }\n\n    double sqrtTwoPi = Math.sqrt(2 * Math.PI);\n    return sqrtTwoPi * Math.pow((x + 5.5) / Math.E, x + 0.5) * sum / x;\n}\n\npublic static double regularizedGammaP(double a, double x) {\n    double sum = 0;\n    double term = 1;\n    double n = 0;\n    double an;\n\n    if (x < 0 || a <= 0) {\n        throw new IllegalArgumentException();\n    }\n\n    while (n < MAX_ITERATIONS) {\n        an = a + n;\n        term *= x / an;\n        sum += term;\n        if (Math.abs(term) < Math.abs(sum) * DEFAULT_EPSILON) {\n            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n        }\n        n++;\n    }\n\n    throw new MaxIterationsExceededException(MAX_ITERATIONS);\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    double gammaP = regularizedGammaP(a, x);\n    return 1 - gammaP;\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / (x + 0)\n                - 86.50532033 / (x + 1)\n                + 24.01409822 / (x + 2)\n                - 1.231739516 / (x + 3)\n                + 0.00120858003 / (x + 4)\n                - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}