{
    "patch": "              if(cfa != null){\n                for(Node finallyNode : cfa.finallyMap.get(parent)){\n                  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n                }\n              } else {\n                // In the absence of cfa we are unable to construct control\n                // flow graph for finally blocks.\n                // Best we can do is to simply jump to the next statement.\n                // This would suffice for warnings and checks that simply\n                // need to clear state, but control flow dependent checks\n                // will break with errors.\n                // Also see [1] above.\n                cfa.createUnlinkedEdge(fromNode, Branch.UNCOND, node.getNext());\n              }\n              return computeFollowNode(fromNode, parent, cfa);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..4373d666 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,21 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              if(cfa != null){\n+                for(Node finallyNode : cfa.finallyMap.get(parent)){\n+                  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+                }\n+              } else {\n+                // In the absence of cfa we are unable to construct control\n+                // flow graph for finally blocks.\n+                // Best we can do is to simply jump to the next statement.\n+                // This would suffice for warnings and checks that simply\n+                // need to clear state, but control flow dependent checks\n+                // will break with errors.\n+                // Also see [1] above.\n+                cfa.createUnlinkedEdge(fromNode, Branch.UNCOND, node.getNext());\n+              }\n+              return computeFollowNode(fromNode, parent, cfa);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: variable finallyNode is already defined in method computeFollowNode(Node,Node,ControlFlowAnalysis)",
    "test_result": "ERROR"
}