{
    "patch": "public void addValue(double value) {\n    // Ignore NaN and infinite values\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        return;\n    }\n\n    // Increment sum, sum of squares, minimum, and maximum\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n\n    // Increment mean and variance\n    if (meanImpl == null) {\n        meanImpl = new Mean();\n    }\n    if (meanImpl instanceof Mean) {\n        ((Mean) meanImpl).increment(value);\n    } else if (meanImpl instanceof StorelessUnivariateStatistic) {\n        meanImpl.increment(value);\n    }\n    if (varianceImpl == null) {\n        varianceImpl = new Variance();\n    }\n    if (varianceImpl instanceof Variance) {\n        ((Variance) varianceImpl).increment(value);\n    } else if (varianceImpl instanceof StorelessUnivariateStatistic) {\n        varianceImpl.increment(value);\n    }\n\n    // Increment geometric mean and sum of logarithms\n    if (geoMeanImpl == null) {\n        geoMeanImpl = new GeometricMean();\n    }\n    if (value > 0) {\n        secondMoment.increment(value);\n        sumLogImpl.increment(Math.log(value));\n        ((GeometricMean) geoMeanImpl).increment(value);\n    } else {\n        // If the value is <= 0, then convert it to a logarithm and increment the sum of logarithms\n        sumLogImpl.increment(Double.NEGATIVE_INFINITY);\n    }\n\n    // Increment count\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..3101b53c2 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,53 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n+public void addValue(double value) {\n+    // Ignore NaN and infinite values\n+    if (Double.isNaN(value) || Double.isInfinite(value)) {\n+        return;\n+    }\n+\n+    // Increment sum, sum of squares, minimum, and maximum\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+\n+    // Increment mean and variance\n+    if (meanImpl == null) {\n+        meanImpl = new Mean();\n+    }\n+    if (meanImpl instanceof Mean) {\n+        ((Mean) meanImpl).increment(value);\n+    } else if (meanImpl instanceof StorelessUnivariateStatistic) {\n+        meanImpl.increment(value);\n+    }\n+    if (varianceImpl == null) {\n+        varianceImpl = new Variance();\n+    }\n+    if (varianceImpl instanceof Variance) {\n+        ((Variance) varianceImpl).increment(value);\n+    } else if (varianceImpl instanceof StorelessUnivariateStatistic) {\n+        varianceImpl.increment(value);\n+    }\n+\n+    // Increment geometric mean and sum of logarithms\n+    if (geoMeanImpl == null) {\n+        geoMeanImpl = new GeometricMean();\n+    }\n+    if (value > 0) {\n         secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n-        }\n-        n++;\n+        sumLogImpl.increment(Math.log(value));\n+        ((GeometricMean) geoMeanImpl).increment(value);\n+    } else {\n+        // If the value is <= 0, then convert it to a logarithm and increment the sum of logarithms\n+        sumLogImpl.increment(Double.NEGATIVE_INFINITY);\n     }\n \n+    // Increment count\n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}