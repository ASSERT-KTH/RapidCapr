{
    "patch": "            Matcher m = matchers.get(indexOfVararg);\n            if (m instanceof CapturesArguments) {\n                Object[] varargs = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg, indexOfVararg+1);\n                ((CapturesArguments) m).captureFrom(varargs);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..5d3b817c5 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,11 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Matcher m = matchers.get(indexOfVararg);\n+            if (m instanceof CapturesArguments) {\n+                Object[] varargs = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg, indexOfVararg+1);\n+                ((CapturesArguments) m).captureFrom(varargs);\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}