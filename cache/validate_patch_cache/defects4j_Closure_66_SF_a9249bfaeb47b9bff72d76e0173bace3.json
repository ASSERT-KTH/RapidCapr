{
    "patch": "public static double getTypedPercent(String[] test) {\n    double correctKeystrokes = 0;\n    double totalKeystrokes = 0;\n    for (String word : test) {\n        String[] typedAndExpected = word.split(\"/\");\n        String typed = typedAndExpected[0].trim();\n        String expected = typedAndExpected[1].trim();\n        int len = Math.min(typed.length(), expected.length());\n        for (int i = 0; i < len; i++) {\n            if (typed.charAt(i) == expected.charAt(i)) {\n                correctKeystrokes++;\n            }\n            totalKeystrokes++;\n        }\n        totalKeystrokes += Math.max(0, typed.length() - len);\n    }\n    return (correctKeystrokes / totalKeystrokes) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..ab8ae725 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String[] test) {\n+    double correctKeystrokes = 0;\n+    double totalKeystrokes = 0;\n+    for (String word : test) {\n+        String[] typedAndExpected = word.split(\"/\");\n+        String typed = typedAndExpected[0].trim();\n+        String expected = typedAndExpected[1].trim();\n+        int len = Math.min(typed.length(), expected.length());\n+        for (int i = 0; i < len; i++) {\n+            if (typed.charAt(i) == expected.charAt(i)) {\n+                correctKeystrokes++;\n+            }\n+            totalKeystrokes++;\n+        }\n+        totalKeystrokes += Math.max(0, typed.length() - len);\n+    }\n+    return (correctKeystrokes / totalKeystrokes) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}