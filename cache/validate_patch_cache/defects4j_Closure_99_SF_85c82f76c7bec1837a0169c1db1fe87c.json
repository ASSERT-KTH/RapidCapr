{
    "patch": "      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN)) {\n        return false;\n      }\n      return true;\n    }\n\n    if (n.getType() == Token.NAME) {\n      // Don't traverse a function parameter name\n      if (parent.getType() == Token.PARAM_LIST && parent.getParent().getType() == Token.FUNCTION) {\n        if (n.getNext() == null) {\n          // only one parameter\n          parseFunctionParameterName(n, t);\n          return false;\n        }\n        // multiple parameters have special handling\n        return true;\n      }\n\n      // Don't traverse a LHS name in a for loop (only needs to be done once). We\n      // special-case this because the ignore name is associated with the BLOCK\n      // node of the for statement, and not the NAME node itself.\n      if (NodeUtil.isNameDeclaredInFor(parent, n.getString())) {\n        return false;\n      }\n\n      if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {\n        // Always traverse the left side of an assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = n;\n        }\n        return true;\n      }\n    } else if (n.getType() == Token.GETPROP) {\n      Node obj = n.getFirstChild();\n      Node prop = obj.getNext();\n\n      // Traversing assertions should never produce an error even if the obj\n      // of a GETPROP is 'undefined' or 'null' or something that is not an\n      // object (e.g. a string or boolean).\n      if (isAssertionCall(obj)) {\n        return true;\n      }\n\n      // Only traverse the right side of an assignment if it's not an assignment to a prototype\n      // property or subproperty.\n      if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {\n        if (obj.getType() == Token.GETPROP && obj.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        if (obj.getQualifiedName() != null && obj.getQualifiedName().contains(\".prototype.\")) {\n          return false;\n        }\n        return true;\n      }\n\n      // Skip over names like \"undefined\" or \"NaN\"\n      switch (obj.getType()) {\n        case Token.NAME:\n          if (isNumericName(obj.getString())) {\n            return false;\n          }\n          break;\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n          // Arrays and objects are OK (for obj[0] or obj.foo).\n          break;\n        default:\n          // Anything else will require a runtime check,\n          // so it's OK to touch its members.\n          return true;\n      }\n      // Skip over known global variables and functions.\n      if (isWhitelistedName(obj)) {\n        return false;\n      }\n      // Skip over known read-only properties.\n      if (isUnmodifiableName(obj, prop)) {\n        return false;\n      }\n      // Skip over properties of known read-only properties.\n      if (isUnmodifiableName(obj, null)) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..5d1dc9bd 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,16 +81,7 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n         return false;\n       }\n \n@@ -100,40 +91,96 @@ final class CheckGlobalThis implements Callback {\n       // function a() {} // or\n       // a.x = function() {};\n       int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n+      if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN)) {\n         return false;\n       }\n+      return true;\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n+    if (n.getType() == Token.NAME) {\n+      // Don't traverse a function parameter name\n+      if (parent.getType() == Token.PARAM_LIST && parent.getParent().getType() == Token.FUNCTION) {\n+        if (n.getNext() == null) {\n+          // only one parameter\n+          parseFunctionParameterName(n, t);\n+          return false;\n+        }\n+        // multiple parameters have special handling\n+        return true;\n+      }\n+\n+      // Don't traverse a LHS name in a for loop (only needs to be done once). We\n+      // special-case this because the ignore name is associated with the BLOCK\n+      // node of the for statement, and not the NAME node itself.\n+      if (NodeUtil.isNameDeclaredInFor(parent, n.getString())) {\n+        return false;\n+      }\n+\n+      if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {\n+        // Always traverse the left side of an assignment. To handle\n         // nested assignments properly (e.g., (a = this).property = c;),\n         // assignLhsChild should not be overridden.\n         if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+          assignLhsChild = n;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+        return true;\n+      }\n+    } else if (n.getType() == Token.GETPROP) {\n+      Node obj = n.getFirstChild();\n+      Node prop = obj.getNext();\n+\n+      // Traversing assertions should never produce an error even if the obj\n+      // of a GETPROP is 'undefined' or 'null' or something that is not an\n+      // object (e.g. a string or boolean).\n+      if (isAssertionCall(obj)) {\n+        return true;\n+      }\n+\n+      // Only traverse the right side of an assignment if it's not an assignment to a prototype\n+      // property or subproperty.\n+      if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {\n+        if (obj.getType() == Token.GETPROP && obj.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        if (obj.getQualifiedName() != null && obj.getQualifiedName().contains(\".prototype.\")) {\n+          return false;\n+        }\n+        return true;\n+      }\n+\n+      // Skip over names like \"undefined\" or \"NaN\"\n+      switch (obj.getType()) {\n+        case Token.NAME:\n+          if (isNumericName(obj.getString())) {\n             return false;\n           }\n+          break;\n+        case Token.ARRAYLIT:\n+        case Token.OBJECTLIT:\n+          // Arrays and objects are OK (for obj[0] or obj.foo).\n+          break;\n+        default:\n+          // Anything else will require a runtime check,\n+          // so it's OK to touch its members.\n+          return true;\n       }\n+      // Skip over known global variables and functions.\n+      if (isWhitelistedName(obj)) {\n+        return false;\n+      }\n+      // Skip over known read-only properties.\n+      if (isUnmodifiableName(obj, prop)) {\n+        return false;\n+      }\n+      // Skip over properties of known read-only properties.\n+      if (isUnmodifiableName(obj, null)) {\n+        return false;\n+      }\n+\n+      return true;\n     }\n \n-    return true;\n-  }\n+    return false;\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}