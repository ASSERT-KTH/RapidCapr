{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values.clone();\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        int[] newValues = values.clone();\n        addImpl(partial, fieldIndex, newValues, valueToAdd);\n        // month is largest field and being added to, such as month-day\n        if (fieldIndex <= DateTimeFieldType.monthOfYear().getFieldIndex() &&\n                DateTimeFieldType.dayOfMonth().isSupported(partial)) {\n            // recalculate day-of-month, preserving time-of-day\n            int year = newValues[DateTimeFieldType.year().getFieldIndex()];\n            int month = newValues[DateTimeFieldType.monthOfYear().getFieldIndex()];\n            int day = newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n            try {\n                int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);\n                day = Math.min(day, maxDay);\n            } catch (IllegalArgumentException e) {\n                // year/month combination is invalid\n                // ignore and use computed day after month added\n            }\n            newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = day;\n        }\n        return newValues;\n    }\n    // Let the superclass handle non-contiguous partials\n    return super.add(partial, fieldIndex, values, valueToAdd);\n}\n \nprivate void addImpl(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    DurationField fieldDuration = partial.getField(fieldIndex).getDurationField();\n    long instant = 0L;\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        DurationField loopFieldDuration = partial.getField(i).getDurationField();\n        int loopValue;\n        if (i == fieldIndex) {\n            loopValue = fieldDuration.addWrapPartial(values[i], valueToAdd);\n        } else {\n            loopValue = values[i];\n        }\n        instant = partial.getFieldType(i).getField(iChronology).set(instant, loopValue);\n        if (loopFieldDuration != null && loopFieldDuration.isPrecise()) {\n            instant = loopFieldDuration.add(instant, loopValue);\n        }\n    }\n    // Provide a duration based on the original instant and new instant.\n    DurationField resultDuration = partial.getField(fieldIndex).getRangeDurationField();\n    if (resultDuration == null) {\n        // Inexact result, but we can use equality of the values to get the duration\n        int[] result = iChronology.get(partial, instant);\n        for (int i = 0; i < values.length; i++) {\n            if (values[i] != result[i]) {\n                resultDuration = fieldDuration;\n                break;\n            }\n        }\n        if (resultDuration == null) {\n            resultDuration = DurationFieldType.days().getField(iChronology);\n        }\n    }\n    values[fieldIndex] = iChronology.add(instant, valueToAdd) - instant;\n    // Make sure the same values are returned if the partial is queried twice\n    if (resultDuration.getField(iChronology).getType() == DurationFieldType.months() &&\n            DateTimeFieldType.year().isSupported(partial)) {\n        int year = values[DateTimeFieldType.year().getFieldIndex()];\n        int month = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n        if (iChronology.yearMonth(year, month).equals(partial)) {\n            return;\n        }\n    } else if (resultDuration.getField(iChronology).isSupported()) {\n        int fieldValue = values[fieldIndex];\n        if (iChronology.getField(fieldIndex).getDurationField().getType() ==\n                DurationFieldType.months()) {\n            // Adjust for number of days in previous month\n            int year = values[DateTimeFieldType.year().getFieldIndex()];\n            int month = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n            int prevMonthDays = iChronology.dayOfMonth().getMaximumValue(\n                    iChronology.monthOfYear().set(iChronology.yearMonth(year, month), month - 1));\n            if (fieldValue > prevMonthDays) {\n                // Move to last day of previous month\n                fieldValue = prevMonthDays;\n            }\n        }\n        long durationMillis = resultDuration.getField(iChronology).getUnitMillis();\n        long instant2 = instant + (valueToAdd / fieldDuration.getUnitMillis() * durationMillis);\n        if (instant2 <= instant) {\n            // Date is unbounded, or at least will get earlier instead of later\n            return;\n        }\n        long end = iChronology.add(instant, valueToAdd);\n        if (instant2 > end) {\n            // Date is unbounded, or at least will get later instead of earlier\n            return;\n        }\n        int value = (int) ((end - instant2) / durationMillis);\n        int range[] = resultDuration.getRange(iChronology).get(instant2);\n        value = (value - range[0]) % (range[1] - range[0]);\n        if (value < 0) {\n            value += (range[1] - range[0]);\n        }\n        values[fieldIndex] = fieldValue + value;\n        for (int i = 0; i < partial.size(); i++) {\n            if (i != fieldIndex) {\n                while (true) {\n                    DateTimeField loopField = partial.getField(i);\n                    DurationField loopDurationField = loopField.getDurationField();\n                    int loopValue = values[i];\n                    long loopDuration = 0;\n                    if (loopDurationField != null) {\n                        loopDuration = loopDurationField.getUnitMillis();\n                        if (loopDurationField.isPrecise()) {\n                            loopValue = loopDurationField.add(values[i], (int) ((instant2 - instant) / loopDuration));\n                        }\n                    }\n                    long loopStart = loopField.roundFloor(iChronology.getDateTimeMillis(loopValue, instant));\n                    long loopEnd = loopField.add(loopStart, 1);\n                    long loopWhole = loopEnd - loopStart;\n                    if (loopEnd <= instant2) {\n                        long diff = (instant2 - loopEnd) / loopWhole + 1;\n                        loopValue = (int) loopField.add(loopValue, (int) diff);\n                        if (loopValue != loopField.set(instant2, loopValue)) {\n                            continue;\n                        }\n                    }\n                    if (loopStart > instant2) {\n                        long diff = (loopStart - instant2) / loopWhole;\n                        loopValue = (int) loopField.add(loopValue, (int) -diff);\n                        if (loopValue != loopField.set(instant2, loopValue)) {\n                            continue;\n                        }\n                    }\n                    values[i] = loopValue;\n                    break;\n                }\n            }\n        }\n    } else {\n        for (int i = 0; i < partial.size(); i++) {\n            if (i != fieldIndex) {\n                while (true) {\n                    DateTimeField loopField = partial.getField(i);\n                    DurationField loopDurationField = loopField.getDurationField();\n                    int loopValue = values[i];\n                    long loopDuration = 0;\n                    if (loopDurationField != null) {\n                        loopDuration = loopDurationField.getUnitMillis();\n                        if (loopDurationField.isPrecise()) {\n                            loopValue = loopDurationField.add(values[i], (int) ((iChronology.getDateTimeMillis(partial) - instant) / loopDuration));\n                        }\n                    }\n                    long loopStart = loopField.roundFloor(iChronology.getDateTimeMillis(loopValue, instant));\n                    if (loopStart != instant) {\n                        long loopEnd = loopField.add(loopStart, 1);\n                        long loopWhole = loopEnd - loopStart;\n                        if (loopEnd <= iChronology.getDateTimeMillis(partial)) {\n                            long diff = (loopEnd - instant) / loopWhole;\n                            loopValue = loopField.add(loopValue, (int) diff);\n                            if (loopValue != loopField.set(instant, loopValue)) {\n                                continue;\n                            }\n                        }\n                    }\n                    values[i] = loopValue;\n                    break;\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..3e668897 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,177 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values.clone();\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int[] newValues = values.clone();\n+        addImpl(partial, fieldIndex, newValues, valueToAdd);\n+        // month is largest field and being added to, such as month-day\n+        if (fieldIndex <= DateTimeFieldType.monthOfYear().getFieldIndex() &&\n+                DateTimeFieldType.dayOfMonth().isSupported(partial)) {\n+            // recalculate day-of-month, preserving time-of-day\n+            int year = newValues[DateTimeFieldType.year().getFieldIndex()];\n+            int month = newValues[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+            int day = newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n+            try {\n+                int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);\n+                day = Math.min(day, maxDay);\n+            } catch (IllegalArgumentException e) {\n+                // year/month combination is invalid\n+                // ignore and use computed day after month added\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = day;\n+        }\n+        return newValues;\n+    }\n+    // Let the superclass handle non-contiguous partials\n+    return super.add(partial, fieldIndex, values, valueToAdd);\n+}\n+ \n+private void addImpl(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    DurationField fieldDuration = partial.getField(fieldIndex).getDurationField();\n+    long instant = 0L;\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        DurationField loopFieldDuration = partial.getField(i).getDurationField();\n+        int loopValue;\n+        if (i == fieldIndex) {\n+            loopValue = fieldDuration.addWrapPartial(values[i], valueToAdd);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            loopValue = values[i];\n+        }\n+        instant = partial.getFieldType(i).getField(iChronology).set(instant, loopValue);\n+        if (loopFieldDuration != null && loopFieldDuration.isPrecise()) {\n+            instant = loopFieldDuration.add(instant, loopValue);\n+        }\n+    }\n+    // Provide a duration based on the original instant and new instant.\n+    DurationField resultDuration = partial.getField(fieldIndex).getRangeDurationField();\n+    if (resultDuration == null) {\n+        // Inexact result, but we can use equality of the values to get the duration\n+        int[] result = iChronology.get(partial, instant);\n+        for (int i = 0; i < values.length; i++) {\n+            if (values[i] != result[i]) {\n+                resultDuration = fieldDuration;\n+                break;\n+            }\n+        }\n+        if (resultDuration == null) {\n+            resultDuration = DurationFieldType.days().getField(iChronology);\n+        }\n+    }\n+    values[fieldIndex] = iChronology.add(instant, valueToAdd) - instant;\n+    // Make sure the same values are returned if the partial is queried twice\n+    if (resultDuration.getField(iChronology).getType() == DurationFieldType.months() &&\n+            DateTimeFieldType.year().isSupported(partial)) {\n+        int year = values[DateTimeFieldType.year().getFieldIndex()];\n+        int month = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+        if (iChronology.yearMonth(year, month).equals(partial)) {\n+            return;\n+        }\n+    } else if (resultDuration.getField(iChronology).isSupported()) {\n+        int fieldValue = values[fieldIndex];\n+        if (iChronology.getField(fieldIndex).getDurationField().getType() ==\n+                DurationFieldType.months()) {\n+            // Adjust for number of days in previous month\n+            int year = values[DateTimeFieldType.year().getFieldIndex()];\n+            int month = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+            int prevMonthDays = iChronology.dayOfMonth().getMaximumValue(\n+                    iChronology.monthOfYear().set(iChronology.yearMonth(year, month), month - 1));\n+            if (fieldValue > prevMonthDays) {\n+                // Move to last day of previous month\n+                fieldValue = prevMonthDays;\n+            }\n+        }\n+        long durationMillis = resultDuration.getField(iChronology).getUnitMillis();\n+        long instant2 = instant + (valueToAdd / fieldDuration.getUnitMillis() * durationMillis);\n+        if (instant2 <= instant) {\n+            // Date is unbounded, or at least will get earlier instead of later\n+            return;\n+        }\n+        long end = iChronology.add(instant, valueToAdd);\n+        if (instant2 > end) {\n+            // Date is unbounded, or at least will get later instead of earlier\n+            return;\n+        }\n+        int value = (int) ((end - instant2) / durationMillis);\n+        int range[] = resultDuration.getRange(iChronology).get(instant2);\n+        value = (value - range[0]) % (range[1] - range[0]);\n+        if (value < 0) {\n+            value += (range[1] - range[0]);\n+        }\n+        values[fieldIndex] = fieldValue + value;\n+        for (int i = 0; i < partial.size(); i++) {\n+            if (i != fieldIndex) {\n+                while (true) {\n+                    DateTimeField loopField = partial.getField(i);\n+                    DurationField loopDurationField = loopField.getDurationField();\n+                    int loopValue = values[i];\n+                    long loopDuration = 0;\n+                    if (loopDurationField != null) {\n+                        loopDuration = loopDurationField.getUnitMillis();\n+                        if (loopDurationField.isPrecise()) {\n+                            loopValue = loopDurationField.add(values[i], (int) ((instant2 - instant) / loopDuration));\n+                        }\n+                    }\n+                    long loopStart = loopField.roundFloor(iChronology.getDateTimeMillis(loopValue, instant));\n+                    long loopEnd = loopField.add(loopStart, 1);\n+                    long loopWhole = loopEnd - loopStart;\n+                    if (loopEnd <= instant2) {\n+                        long diff = (instant2 - loopEnd) / loopWhole + 1;\n+                        loopValue = (int) loopField.add(loopValue, (int) diff);\n+                        if (loopValue != loopField.set(instant2, loopValue)) {\n+                            continue;\n+                        }\n+                    }\n+                    if (loopStart > instant2) {\n+                        long diff = (loopStart - instant2) / loopWhole;\n+                        loopValue = (int) loopField.add(loopValue, (int) -diff);\n+                        if (loopValue != loopField.set(instant2, loopValue)) {\n+                            continue;\n+                        }\n+                    }\n+                    values[i] = loopValue;\n+                    break;\n+                }\n+            }\n+        }\n+    } else {\n+        for (int i = 0; i < partial.size(); i++) {\n+            if (i != fieldIndex) {\n+                while (true) {\n+                    DateTimeField loopField = partial.getField(i);\n+                    DurationField loopDurationField = loopField.getDurationField();\n+                    int loopValue = values[i];\n+                    long loopDuration = 0;\n+                    if (loopDurationField != null) {\n+                        loopDuration = loopDurationField.getUnitMillis();\n+                        if (loopDurationField.isPrecise()) {\n+                            loopValue = loopDurationField.add(values[i], (int) ((iChronology.getDateTimeMillis(partial) - instant) / loopDuration));\n+                        }\n+                    }\n+                    long loopStart = loopField.roundFloor(iChronology.getDateTimeMillis(loopValue, instant));\n+                    if (loopStart != instant) {\n+                        long loopEnd = loopField.add(loopStart, 1);\n+                        long loopWhole = loopEnd - loopStart;\n+                        if (loopEnd <= iChronology.getDateTimeMillis(partial)) {\n+                            long diff = (loopEnd - instant) / loopWhole;\n+                            loopValue = loopField.add(loopValue, (int) diff);\n+                            if (loopValue != loopField.set(instant, loopValue)) {\n+                                continue;\n+                            }\n+                        }\n+                    }\n+                    values[i] = loopValue;\n+                    break;\n+                }\n+            }\n         }\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}