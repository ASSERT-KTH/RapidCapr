{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    for (Type bound : bounds) {\n        registerTypeVariablesOn(bound);\n    }\n    if (bounds.length > 0) {\n        Type actualTypeArgument = extractActualTypeArgument(bounds[0], typeVariable.getName());\n        if (actualTypeArgument != null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}\n\nprivate Type extractActualTypeArgument(Type type, String typeVariableName) {\n    if (type instanceof ParameterizedType) {\n        Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();\n        TypeVariable<?>[] typeParameters = ((Class<?>) ((ParameterizedType) type).getRawType()).getTypeParameters();\n        for (int i = 0; i < typeParameters.length; i++) {\n            if (typeParameters[i].getName().equals(typeVariableName) && actualTypeArguments.length > i) {\n                return actualTypeArguments[i];\n            }\n        }\n    } else if (type instanceof TypeVariable) {\n        Type[] bounds = ((TypeVariable<?>) type).getBounds();\n        if (bounds.length > 0) {\n            return extractActualTypeArgument(bounds[0], typeVariableName);\n        }\n    } else if (type instanceof WildcardType) {\n        Type[] upperBounds = ((WildcardType) type).getUpperBounds();\n        if (upperBounds.length > 0) {\n            return extractActualTypeArgument(upperBounds[0], typeVariableName);\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..60e50ba69 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,42 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    for (Type bound : bounds) {\n+        registerTypeVariablesOn(bound);\n+    }\n+    if (bounds.length > 0) {\n+        Type actualTypeArgument = extractActualTypeArgument(bounds[0], typeVariable.getName());\n+        if (actualTypeArgument != null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n+\n+private Type extractActualTypeArgument(Type type, String typeVariableName) {\n+    if (type instanceof ParameterizedType) {\n+        Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();\n+        TypeVariable<?>[] typeParameters = ((Class<?>) ((ParameterizedType) type).getRawType()).getTypeParameters();\n+        for (int i = 0; i < typeParameters.length; i++) {\n+            if (typeParameters[i].getName().equals(typeVariableName) && actualTypeArguments.length > i) {\n+                return actualTypeArguments[i];\n+            }\n+        }\n+    } else if (type instanceof TypeVariable) {\n+        Type[] bounds = ((TypeVariable<?>) type).getBounds();\n+        if (bounds.length > 0) {\n+            return extractActualTypeArgument(bounds[0], typeVariableName);\n+        }\n+    } else if (type instanceof WildcardType) {\n+        Type[] upperBounds = ((WildcardType) type).getUpperBounds();\n+        if (upperBounds.length > 0) {\n+            return extractActualTypeArgument(upperBounds[0], typeVariableName);\n+        }\n+    }\n+    return null;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}