{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n        double dev = x - mean;\n        double div = standardDeviation * FastMath.sqrt(2.0);\n\n        if (FastMath.abs(dev) > 40 * div) {\n            return dev < 0 ? 0.0 : 1.0;\n        }\n\n        return 0.5 * (1.0 + Erf.erf(dev / div));\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..23ced72c6 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,9 +105,15 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+        double dev = x - mean;\n+        double div = standardDeviation * FastMath.sqrt(2.0);\n+\n+        if (FastMath.abs(dev) > 40 * div) {\n+            return dev < 0 ? 0.0 : 1.0;\n+        }\n+\n+        return 0.5 * (1.0 + Erf.erf(dev / div));\n     }\n     \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}