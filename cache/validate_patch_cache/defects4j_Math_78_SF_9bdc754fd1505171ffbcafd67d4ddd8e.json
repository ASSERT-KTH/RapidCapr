{
    "patch": "            int n = (int) Math.max(1, FastMath.ceil((t1 - t0) / maxCheckInterval));\n            final double h = (t1 - t0) / n;\n\n            double ta = t0;\n            double ga = g0;\n            double tb = t0 + (forward ? convergence : -convergence);\n            for (int i = 0; i < n; ++i) {\n\n                // evaluate handler value at the end of the substep\n                tb += h;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // check events occurrence\n                if (ga * gb <= 0) {\n                    // there is a sign change: an event is expected during this step\n\n                    // variation direction, with respect to the integration direction\n                    increasing = gb >= ga;\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n                                return handler.g(t, interpolator.getInterpolatedState());\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            } catch (EventException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n\n                    double root;\n                    if (FastMath.abs(ga) < FastMath.abs(gb)) {\n                        root = SecantSolver.solve(f, ta, tb, ga);\n                    } else {\n                        root = SecantSolver.solve(f, tb, ta, gb);\n                    }\n                    if (FastMath.abs(root - ta) <= convergence) {\n                        // we have found nothing or found (again ?) a past event\n                        ga = g0;\n                        ta = root;\n                    } else {\n                        pendingEventTime = root;\n                        if (pendingEventTime >= t1 - convergence) {\n                            // the event is still before the end of the step, we can accept it\n                            if (pendingEvent && (FastMath.abs(pendingEventTime - t1) <= convergence)) {\n                                // we were already waiting for this event which was\n                                // found during a previous call for a step that was\n                                // rejected, this step must now be accepted since it\n                                // properly ends exactly at the event occurrence\n                                return false;\n                            }\n                            // either we were not waiting for the event or it has\n                            // moved in such a way the step cannot be accepted\n                            pendingEvent = true;\n                            return true;\n                        } else {\n                            // the next event is beyond this step, or too close to the\n                            // end of the step for the event to be accepted\n                            ga = gb;\n                            ta = tb;\n                        }\n                    }\n                } else {\n                    ga = gb;\n                    ta = tb;\n                }\n\n                if (i < (n - 1)) {\n                    // prepare next step\n                    tb = ta + (forward ? maxCheckInterval : -maxCheckInterval);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..ffce141b4 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,19 +164,12 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n-        throws DerivativeException, EventException, ConvergenceException {\n-\n-        try {\n-\n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n+            int n = (int) Math.max(1, FastMath.ceil((t1 - t0) / maxCheckInterval));\n+            final double h = (t1 - t0) / n;\n \n             double ta = t0;\n             double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n+            double tb = t0 + (forward ? convergence : -convergence);\n             for (int i = 0; i < n; ++i) {\n \n                 // evaluate handler value at the end of the substep\n@@ -185,18 +178,9 @@ public class EventState {\n                 final double gb = handler.g(tb, interpolator.getInterpolatedState());\n \n                 // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n+                if (ga * gb <= 0) {\n                     // there is a sign change: an event is expected during this step\n \n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n                     // variation direction, with respect to the integration direction\n                     increasing = gb >= ga;\n \n@@ -212,55 +196,47 @@ public class EventState {\n                             }\n                         }\n                     };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n+\n+                    double root;\n+                    if (FastMath.abs(ga) < FastMath.abs(gb)) {\n+                        root = SecantSolver.solve(f, ta, tb, ga);\n+                    } else {\n+                        root = SecantSolver.solve(f, tb, ta, gb);\n+                    }\n+                    if (FastMath.abs(root - ta) <= convergence) {\n+                        // we have found nothing or found (again ?) a past event\n+                        ga = g0;\n+                        ta = root;\n+                    } else {\n                         pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n+                        if (pendingEventTime >= t1 - convergence) {\n+                            // the event is still before the end of the step, we can accept it\n+                            if (pendingEvent && (FastMath.abs(pendingEventTime - t1) <= convergence)) {\n+                                // we were already waiting for this event which was\n+                                // found during a previous call for a step that was\n+                                // rejected, this step must now be accepted since it\n+                                // properly ends exactly at the event occurrence\n+                                return false;\n+                            }\n+                            // either we were not waiting for the event or it has\n+                            // moved in such a way the step cannot be accepted\n+                            pendingEvent = true;\n+                            return true;\n+                        } else {\n+                            // the next event is beyond this step, or too close to the\n+                            // end of the step for the event to be accepted\n+                            ga = gb;\n+                            ta = tb;\n                         }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n-                        pendingEvent = true;\n-                        return true;\n                     }\n-\n                 } else {\n-                    // no sign change: there is no event for now\n-                    ta = tb;\n                     ga = gb;\n+                    ta = tb;\n                 }\n \n-            }\n-\n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n-            return false;\n-\n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n-            }\n-            throw new EventException(e);\n-        }\n-\n-    }\n+                if (i < (n - 1)) {\n+                    // prepare next step\n+                    tb = ta + (forward ? maxCheckInterval : -maxCheckInterval);\n \n     /** Get the occurrence time of the event triggered in the current\n      * step.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}