{
    "patch": "    if (argList != null && argList.hasChildren()) {\n      Node child = argList.getFirstChild();\n      while (child != null) {\n        Node next = child.getNext();\n        Var var = fnScope.getVar(child.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(child);\n          compiler.reportCodeChange();\n        }\n        child = next;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f9bc3e9d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,17 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    if (argList != null && argList.hasChildren()) {\n+      Node child = argList.getFirstChild();\n+      while (child != null) {\n+        Node next = child.getNext();\n+        Var var = fnScope.getVar(child.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(child);\n+          compiler.reportCodeChange();\n+        }\n+        child = next;\n+      }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}