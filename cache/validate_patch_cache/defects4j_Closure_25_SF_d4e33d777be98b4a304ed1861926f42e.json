{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    \n    // For functions passed as arguments to the \"new\" keyword, the instance type should be the function\n    // itself rather than a new object of type \"Function\". \n    // Need to check if ct is null since the constructor may be referencing an undeclared variable.\n    if (ct != null && ct.isInterface() && ct.getExtendedInterfacesCount() == 1) {\n      type = ct.getExtendedInterfaces().iterator().next();\n    }\n    \n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..09eabaec 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1055,6 +1055,14 @@ class TypeInference\n         }\n       }\n     }\n+    \n+    // For functions passed as arguments to the \"new\" keyword, the instance type should be the function\n+    // itself rather than a new object of type \"Function\". \n+    // Need to check if ct is null since the constructor may be referencing an undeclared variable.\n+    if (ct != null && ct.isInterface() && ct.getExtendedInterfacesCount() == 1) {\n+      type = ct.getExtendedInterfaces().iterator().next();\n+    }\n+    \n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}