{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    double s1x = v1.x, s1y = v1.y, s1z = v1.z;\n    double s2x = v2.x, s2y = v2.y, s2z = v2.z;\n\n    double a1 = s1y * s2z;\n    double a2 = s1z * s2y;\n    double b1 = s1z * s2x;\n    double b2 = s1x * s2z;\n    double c1 = s1x * s2y;\n    double c2 = s1y * s2x;\n\n    double x = a1 - a2;\n    double y = b1 - b2;\n    double z = c1 - c2;\n\n    double norm1 = Vector3D.dotProduct(v1, v1);\n    double norm2 = Vector3D.dotProduct(v2, v2);\n    double normProduct = norm1 * norm2;\n\n    if (normProduct == 0.0) {\n        // Angle of 0 or PI => cross product is zero and arbitrary\n        // => can be set to any vector orthogonal to v1 (e.g. (0,0,1))\n        return new Vector3D(0, 0, norm2);\n    }\n\n    double scale = FastMath.sqrt(FastMath.abs(normProduct));\n\n    // apply Kahan summation algorithm to enhance the accuracy of cross product\n    double largeValue = scale * ERROR;\n    double a = x * s2y + largeValue;\n    double b = y * s2z + largeValue;\n    double c = z * s2x + largeValue;\n    a -= (c - z * s2x);\n    b -= (a - x * s2y);\n    c -= (b - y * s2z);\n\n    return new Vector3D(a / scale, b / scale, c / scale);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..7248c325a 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,44 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    double s1x = v1.x, s1y = v1.y, s1z = v1.z;\n+    double s2x = v2.x, s2y = v2.y, s2z = v2.z;\n+\n+    double a1 = s1y * s2z;\n+    double a2 = s1z * s2y;\n+    double b1 = s1z * s2x;\n+    double b2 = s1x * s2z;\n+    double c1 = s1x * s2y;\n+    double c2 = s1y * s2x;\n+\n+    double x = a1 - a2;\n+    double y = b1 - b2;\n+    double z = c1 - c2;\n+\n+    double norm1 = Vector3D.dotProduct(v1, v1);\n+    double norm2 = Vector3D.dotProduct(v2, v2);\n+    double normProduct = norm1 * norm2;\n+\n+    if (normProduct == 0.0) {\n+        // Angle of 0 or PI => cross product is zero and arbitrary\n+        // => can be set to any vector orthogonal to v1 (e.g. (0,0,1))\n+        return new Vector3D(0, 0, norm2);\n+    }\n \n+    double scale = FastMath.sqrt(FastMath.abs(normProduct));\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    // apply Kahan summation algorithm to enhance the accuracy of cross product\n+    double largeValue = scale * ERROR;\n+    double a = x * s2y + largeValue;\n+    double b = y * s2z + largeValue;\n+    double c = z * s2x + largeValue;\n+    a -= (c - z * s2x);\n+    b -= (a - x * s2y);\n+    c -= (b - y * s2z);\n \n-  }\n+    return new Vector3D(a / scale, b / scale, c / scale);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}