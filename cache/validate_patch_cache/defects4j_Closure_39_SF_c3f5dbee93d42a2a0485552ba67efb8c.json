{
    "patch": "  public boolean canBeCalled() {\n    return isRegexpType();\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      Map<String, String> propertyNamesAndTypes = Maps.newLinkedHashMap();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNamesAndTypes.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        for (String property : current.getOwnPropertyNames()) {\n          // Only add the property if it is not already in the map\n          // This avoids duplicates with incorrect types.\n          if (!propertyNamesAndTypes.containsKey(property)) {\n            propertyNamesAndTypes.put(property, getPropertyType(property).toString());\n          }\n        }\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      int mapSize = propertyNamesAndTypes.keySet().size();\n      for (String property : propertyNamesAndTypes.keySet()) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        sb.append(propertyNamesAndTypes.get(property));\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES && i != mapSize) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..d078d1e7 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -357,30 +357,36 @@ class PrototypeObjectType extends ObjectType {\n       // Don't pretty print recursively.\n       prettyPrint = false;\n \n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n+      Map<String, String> propertyNamesAndTypes = Maps.newLinkedHashMap();\n       for (ObjectType current = this;\n            current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+               propertyNamesAndTypes.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n            current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n+        for (String property : current.getOwnPropertyNames()) {\n+          // Only add the property if it is not already in the map\n+          // This avoids duplicates with incorrect types.\n+          if (!propertyNamesAndTypes.containsKey(property)) {\n+            propertyNamesAndTypes.put(property, getPropertyType(property).toString());\n+          }\n+        }\n       }\n \n       StringBuilder sb = new StringBuilder();\n       sb.append(\"{\");\n \n       int i = 0;\n-      for (String property : propertyNames) {\n+      int mapSize = propertyNamesAndTypes.keySet().size();\n+      for (String property : propertyNamesAndTypes.keySet()) {\n         if (i > 0) {\n           sb.append(\", \");\n         }\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        sb.append(propertyNamesAndTypes.get(property));\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+        if (i == MAX_PRETTY_PRINTED_PROPERTIES && i != mapSize) {\n           sb.append(\", ...\");\n           break;\n         }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{loop: [?], number: number, st...> but was:<{loop: [{...}], number: number, st...>",
    "test_result": "FAIL"
}