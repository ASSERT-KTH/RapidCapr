{
    "patch": "    // If it is a function type, then validate parameters.\n    if (childType.isFunctionType()) {\n      FunctionType functionType = childType.toMaybeFunctionType();\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = child.getJSDocInfo();\n      if (functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceFileName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() && !functionType.isNativeObjectType()\n          && (functionType.getReturnType().isUnknownType()\n              || functionType.getReturnType().isVoidType() || !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP or GETELEM expression.\n      if (functionType.hasThisType()) {\n        Node parent = n.getParent();\n        if (!parent.isGetProp() && !parent.isGetElem()) {\n          report(t, n, EXPECTED_THIS_TYPE, childType.toString());\n          ensureTyped(t, n);\n          return;\n        }\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..09e173c2 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,42 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+    // If it is a function type, then validate parameters.\n+    if (childType.isFunctionType()) {\n+      FunctionType functionType = childType.toMaybeFunctionType();\n+\n+      boolean isExtern = false;\n+      JSDocInfo functionJSDocInfo = child.getJSDocInfo();\n+      if (functionJSDocInfo != null) {\n+        String sourceName = functionJSDocInfo.getSourceFileName();\n+        CompilerInput functionSource = compiler.getInput(sourceName);\n+        isExtern = functionSource.isExtern();\n+      }\n+\n+      // Non-native constructors should not be called directly\n+      // unless they specify a return type and are defined\n+      // in an extern.\n+      if (functionType.isConstructor() && !functionType.isNativeObjectType()\n+          && (functionType.getReturnType().isUnknownType()\n+              || functionType.getReturnType().isVoidType() || !isExtern)) {\n+        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+      }\n+\n+      // Functions with explicit 'this' types must be called in a GETPROP or GETELEM expression.\n+      if (functionType.hasThisType()) {\n+        Node parent = n.getParent();\n+        if (!parent.isGetProp() && !parent.isGetElem()) {\n+          report(t, n, EXPECTED_THIS_TYPE, childType.toString());\n+          ensureTyped(t, n);\n+          return;\n+        }\n+      }\n+\n+      visitParameterList(t, n, functionType);\n+      ensureTyped(t, n, functionType.getReturnType());\n+    } else {\n+      ensureTyped(t, n);\n+    }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: variable functionType is already defined in method visitCall(NodeTraversal,Node)",
    "test_result": "ERROR"
}