{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    for (Type bound : bounds) {\n        registerTypeVariablesOn(bound);\n    }\n    Type[] actualTypeArguments = null;\n    if (bounds.length > 0 && bounds[0] instanceof ParameterizedType) {\n        actualTypeArguments = ((ParameterizedType)bounds[0]).getActualTypeArguments();\n    } else {\n        actualTypeArguments = getActualTypeArguments(typeVariable.getGenericDeclaration());\n    }\n    TypeVariable<?>[] typeParameters = typeVariable.getGenericDeclaration().getTypeParameters();\n    for (int i = 0; i < typeParameters.length; i++) {\n        if (typeParameters[i].equals(typeVariable)) {\n            if (actualTypeArguments != null && actualTypeArguments.length > i) {\n                registerTypeVariablesOn(actualTypeArguments[i]);\n            }\n            break;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..67eaa6900 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,28 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    for (Type bound : bounds) {\n+        registerTypeVariablesOn(bound);\n+    }\n+    Type[] actualTypeArguments = null;\n+    if (bounds.length > 0 && bounds[0] instanceof ParameterizedType) {\n+        actualTypeArguments = ((ParameterizedType)bounds[0]).getActualTypeArguments();\n+    } else {\n+        actualTypeArguments = getActualTypeArguments(typeVariable.getGenericDeclaration());\n+    }\n+    TypeVariable<?>[] typeParameters = typeVariable.getGenericDeclaration().getTypeParameters();\n+    for (int i = 0; i < typeParameters.length; i++) {\n+        if (typeParameters[i].equals(typeVariable)) {\n+            if (actualTypeArguments != null && actualTypeArguments.length > i) {\n+                registerTypeVariablesOn(actualTypeArguments[i]);\n+            }\n+            break;\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}