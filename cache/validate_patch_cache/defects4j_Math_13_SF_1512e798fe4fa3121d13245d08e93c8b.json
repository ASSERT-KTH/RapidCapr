{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    try {\n        EigenDecomposition ed = new EigenDecomposition(m);\n        RealMatrix d = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n        double[] eigenValues = ed.getRealEigenvalues();\n        for (int i = 0; i < eigenValues.length; i++) {\n            double eigenValue = eigenValues[i];\n            if (eigenValue <= 0.0) {\n                d.setEntry(i, i, 0.0);\n            } else {\n                d.setEntry(i, i, Math.sqrt(eigenValue));\n            }\n        }\n        RealMatrix v = ed.getV();\n        RealMatrix vt = v.transpose();\n        return v.multiply(d).multiply(vt);\n    } catch (OutOfMemoryError e) {\n        final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n        throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..4e10a76c9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    try {\n+        EigenDecomposition ed = new EigenDecomposition(m);\n+        RealMatrix d = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+        double[] eigenValues = ed.getRealEigenvalues();\n+        for (int i = 0; i < eigenValues.length; i++) {\n+            double eigenValue = eigenValues[i];\n+            if (eigenValue <= 0.0) {\n+                d.setEntry(i, i, 0.0);\n+            } else {\n+                d.setEntry(i, i, Math.sqrt(eigenValue));\n+            }\n+        }\n+        RealMatrix v = ed.getV();\n+        RealMatrix vt = v.transpose();\n+        return v.multiply(d).multiply(vt);\n+    } catch (OutOfMemoryError e) {\n+        final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n+        throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n     }\n }\n+}",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space limit reached (14564 MB)",
    "test_result": "FAIL"
}