{
    "patch": "// Strip unreferenced args off the end of the function declaration.\nNode argList = getFunctionArgList(function);\nNode lastArg = argList.getLastChild();\nwhile (\n    lastArg != null\n    && !referenced.contains(fnScope.getVar(lastArg.getString()))\n    && !isVarargs(fnScope, lastArg)\n    && !isDefaultValue(fnScope, lastArg)\n    && !isFunctionDeclarationWithDefault(fnScope, lastArg)\n    && !isFunctionDeclarationWithinIfStatement(fnScope, lastArg)) {\n  argList.removeChild(lastArg);\n  lastArg = argList.getLastChild();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c1e8b9ac 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,19 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Strip unreferenced args off the end of the function declaration.\n+Node argList = getFunctionArgList(function);\n+Node lastArg = argList.getLastChild();\n+while (\n+    lastArg != null\n+    && !referenced.contains(fnScope.getVar(lastArg.getString()))\n+    && !isVarargs(fnScope, lastArg)\n+    && !isDefaultValue(fnScope, lastArg)\n+    && !isFunctionDeclarationWithDefault(fnScope, lastArg)\n+    && !isFunctionDeclarationWithinIfStatement(fnScope, lastArg)) {\n+  argList.removeChild(lastArg);\n+  lastArg = argList.getLastChild();\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}