{
    "patch": "      ObjectType thisType = functionType.getTypeOfThis();\n      boolean isFunctionWithThis = thisType != null && !thisType.isUnknownType();\n      boolean isInGetPropOrGetElem = NodeUtil.isGetProp(child.getParent()) ||\n          NodeUtil.isGetElem(child.getParent());\n      if (isFunctionWithThis && !isInGetPropOrGetElem) {\n        report(t, child, CANNOT_CALL_CLASS_CTOR_DIRECTLY);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..7c835700 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,12 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      ObjectType thisType = functionType.getTypeOfThis();\n+      boolean isFunctionWithThis = thisType != null && !thisType.isUnknownType();\n+      boolean isInGetPropOrGetElem = NodeUtil.isGetProp(child.getParent()) ||\n+          NodeUtil.isGetElem(child.getParent());\n+      if (isFunctionWithThis && !isInGetPropOrGetElem) {\n+        report(t, child, CANNOT_CALL_CLASS_CTOR_DIRECTLY);\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}