{
    "patch": "        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n            if (millis == Long.MIN_VALUE) {\n                throw new IllegalArgumentException(\"Illegal instant due to calculation overflow\");\n            }\n            if (millis == Long.MAX_VALUE) {\n                throw new IllegalArgumentException(\"Illegal instant due to calculation overflow\");\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..da77075f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,15 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+            if (millis == Long.MIN_VALUE) {\n+                throw new IllegalArgumentException(\"Illegal instant due to calculation overflow\");\n+            }\n+            if (millis == Long.MAX_VALUE) {\n+                throw new IllegalArgumentException(\"Illegal instant due to calculation overflow\");\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to calculation overflow",
    "test_result": "FAIL"
}