{
    "patch": "public static Locale toLocale(String str) {\n    if (StringUtils.isBlank(str))\n        return null;\n\n    str = str.trim().replaceAll(\"\\\\s+\", \"_\").replaceAll(\"__+\", \"_\");\n\n    String[] args = StringUtils.split(str, '_');\n\n    if (args.length > 3)\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n\n    for (String arg : args) {\n        if (!StringUtils.isAlpha(arg))\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    switch (args.length) {\n        case 1:\n            return new Locale(args[0]);\n        case 2:\n            return new Locale(args[0], args[1]);\n        case 3:\n            return new Locale(args[0], args[1], args[2]);\n        default:\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..38683342 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,34 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n+public static Locale toLocale(String str) {\n+    if (StringUtils.isBlank(str))\n+        return null;\n+\n+    str = str.trim().replaceAll(\"\\\\s+\", \"_\").replaceAll(\"__+\", \"_\");\n+\n+    String[] args = StringUtils.split(str, '_');\n+\n+    if (args.length > 3)\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+\n+    for (String arg : args) {\n+        if (!StringUtils.isAlpha(arg))\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n \n+    switch (args.length) {\n+        case 1:\n+            return new Locale(args[0]);\n+        case 2:\n+            return new Locale(args[0], args[1]);\n+        case 3:\n+            return new Locale(args[0], args[1], args[2]);\n+        default:\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "junit.framework.AssertionFailedError: expected:<[]> but was:<[P]>",
    "test_result": "FAIL"
}