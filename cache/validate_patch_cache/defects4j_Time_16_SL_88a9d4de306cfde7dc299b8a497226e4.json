{
    "patch": "\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        Chronology selectedChrono = selectChronology(chrono);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantMillis,\n                selectedChrono.withUTC(),\n                iLocale,\n                iPivotYear != null ? iPivotYear.intValue() : null,\n                iDefaultYear,\n                iDefaultMonthOfYear,\n                iDefaultDayOfMonth);\n        \n        long offsetMillis = chrono.getZone().getOffset(instantMillis);\n        long localMillis = instantMillis + offsetMillis;\n        long newOffsetMillis = parser.parseInto(bucket, text, position);\n        if (offsetMillis != newOffsetMillis) {\n            localMillis = instantMillis + newOffsetMillis;\n        }\n        instant.setMillis(localMillis);\n        \n        if (bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = selectedChrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = selectedChrono.withZone(bucket.getZone());\n        } else {\n            chrono = selectedChrono;\n        }\n        instant.setChronology(chrono);\n        \n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return bucket.getParsePosition();",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..10861942 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,43 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+\n+        long instantMillis = instant.getMillis();\n+        Chronology chrono = instant.getChronology();\n+        Chronology selectedChrono = selectChronology(chrono);\n+        \n+        DateTimeParserBucket bucket = new DateTimeParserBucket(\n+                instantMillis,\n+                selectedChrono.withUTC(),\n+                iLocale,\n+                iPivotYear != null ? iPivotYear.intValue() : null,\n+                iDefaultYear,\n+                iDefaultMonthOfYear,\n+                iDefaultDayOfMonth);\n+        \n+        long offsetMillis = chrono.getZone().getOffset(instantMillis);\n+        long localMillis = instantMillis + offsetMillis;\n+        long newOffsetMillis = parser.parseInto(bucket, text, position);\n+        if (offsetMillis != newOffsetMillis) {\n+            localMillis = instantMillis + newOffsetMillis;\n+        }\n+        instant.setMillis(localMillis);\n+        \n+        if (bucket.getOffsetInteger() != null) {\n+            int parsedOffset = bucket.getOffsetInteger();\n+            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+            chrono = selectedChrono.withZone(parsedZone);\n+        } else if (bucket.getZone() != null) {\n+            chrono = selectedChrono.withZone(bucket.getZone());\n+        } else {\n+            chrono = selectedChrono;\n+        }\n+        instant.setChronology(chrono);\n+        \n+        if (iZone != null) {\n+            instant.setZone(iZone);\n+        }\n+        return bucket.getParsePosition();\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}