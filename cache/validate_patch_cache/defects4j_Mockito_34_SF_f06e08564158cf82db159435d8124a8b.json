{
    "patch": "public void captureArgumentsFrom(Invocation i) {\n    for (int k = 0; k < matchers.length; k++) {\n        Matcher m = matchers[k];\n        if (m instanceof CapturesArguments && k < i.getArguments().length) {\n            ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex c72b119dd..c62298b2e 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -100,13 +100,12 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n         return invocation.toString(matchers, printSettings);\n     }\n \n-    public void captureArgumentsFrom(Invocation i) {\n-        int k = 0;\n-        for (Matcher m : matchers) {\n-            if (m instanceof CapturesArguments) {\n-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n-            }\n-            k++;\n+public void captureArgumentsFrom(Invocation i) {\n+    for (int k = 0; k < matchers.length; k++) {\n+        Matcher m = matchers[k];\n+        if (m instanceof CapturesArguments && k < i.getArguments().length) {\n+            ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n         }\n     }\n-}\n\\ No newline at end of file\n+}\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}