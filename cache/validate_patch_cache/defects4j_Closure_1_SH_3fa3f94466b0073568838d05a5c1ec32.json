{
    "patch": "    // Check if parameters object literal setters can be removed.\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n            && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Remove unused parameters from the declaration list.\n      int i = 0;\n      Node currentArg = argList.getFirstChild();\n      while (currentArg != null && !referenced.isEmpty()) {\n        Node nextArg = currentArg.getNext();\n        Var var = fnScope.getVar(currentArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(currentArg);\n          compiler.reportCodeChange();\n        } else {\n          referenced.remove(var);\n        }\n        currentArg = nextArg;\n        i++;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3ff74665 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Check if parameters object literal setters can be removed.\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+            && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Remove unused parameters from the declaration list.\n+      int i = 0;\n+      Node currentArg = argList.getFirstChild();\n+      while (currentArg != null && !referenced.isEmpty()) {\n+        Node nextArg = currentArg.getNext();\n+        Var var = fnScope.getVar(currentArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(currentArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          referenced.remove(var);\n+        }\n+        currentArg = nextArg;\n+        i++;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}