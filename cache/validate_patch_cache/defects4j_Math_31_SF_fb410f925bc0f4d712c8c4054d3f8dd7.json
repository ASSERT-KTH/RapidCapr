{
    "patch": "    public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50;\n        BigDecimal hPrev = BigDecimal.valueOf(getA(0, x));\n\n        // use the value of small as epsilon criteria for zero checks\n        if (Precision.equals(hPrev.doubleValue(), 0.0, small)) {\n            hPrev = BigDecimal.valueOf(small);\n        }\n\n        int n = 1;\n        BigFraction dPrev = BigFraction.ZERO;\n        BigFraction p0 = BigFraction.ONE;\n        BigFraction q1 = BigFraction.ONE;\n        BigDecimal cPrev = hPrev;\n        BigDecimal hN = hPrev;\n\n        while (n < maxIterations) {\n            final BigDecimal a = BigDecimal.valueOf(getA(n, x));\n            final BigDecimal b = BigDecimal.valueOf(getB(n, x));\n\n            BigDecimal cN = a.multiply(hPrev).add(b.multiply(p0));\n            BigFraction q2 = a.multiply(q1).add(dPrev).multiply(b.movePointRight(1)).reciprocal();\n            if (Double.isInfinite(cN.doubleValue()) || Double.isInfinite(q2.doubleValue())) {\n                BigDecimal scaleFactor = BigDecimal.ONE;\n                BigDecimal lastScaleFactor = BigDecimal.ONE;\n                final int maxPower = 5;\n                final BigDecimal scale = a.max(b.abs());\n                if (scale.compareTo(BigDecimal.ZERO) == 0) {  // Can't scale\n                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                }\n                for (int i = 0; i < maxPower; i++) {\n                    lastScaleFactor = scaleFactor;\n                    scaleFactor = scaleFactor.multiply(scale);\n                    if (a.signum() != 0 && a.abs().compareTo(b.abs()) > 0) {\n                        cN = hPrev.divide(lastScaleFactor).add(b.divide(scaleFactor).multiply(p0));\n                        q2 = q1.divide(lastScaleFactor).add(b.divide(scaleFactor).multiply(dPrev)).multiply(a).add(dPrev).multiply(scale).reciprocal();\n                    } else if (b.signum() != 0) {\n                        cN = a.divide(scaleFactor).multiply(hPrev).add(p0.divide(lastScaleFactor));\n                        q2 = q1.divide(lastScaleFactor).add(dPrev.divide(lastScaleFactor)).multiply(b).add(a).multiply(scale).reciprocal();\n                    }\n                    if (!(Double.isInfinite(cN.doubleValue()) || Double.isInfinite(q2.doubleValue()))) {\n                        break;\n                    }\n                }\n                if (Double.isInfinite(cN.doubleValue()) || Double.isInfinite(q2.doubleValue())) {\n                    continue; // continue with next iteration if still infinities\n                }\n            }\n\n            final BigDecimal deltaN = cN.divide(cPrev, RoundingMode.HALF_UP).multiply(q1).multiply(q2);\n            hN = cPrev.multiply(deltaN);\n\n            if (Double.isInfinite(hN.doubleValue())) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                        x);\n            }\n            if (Double.isNaN(hN.doubleValue())) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                        x);\n            }\n\n            if (hN.subtract(hPrev).abs().doubleValue() < epsilon * hN.abs().doubleValue()) {\n                break;\n            }\n\n            dPrev = q1;\n            cPrev = cN;\n            p0 = hPrev;\n            hPrev = hN;\n            q1 = q2;\n            n++;\n        }\n\n        if (n >= maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                    maxIterations, x);\n        }\n\n        return hN.doubleValue();\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..351d11bde 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -122,80 +122,83 @@ public abstract class ContinuedFraction {\n      */\n     public double evaluate(double x, double epsilon, int maxIterations) {\n         final double small = 1e-50;\n-        double hPrev = getA(0, x);\n+        BigDecimal hPrev = BigDecimal.valueOf(getA(0, x));\n \n         // use the value of small as epsilon criteria for zero checks\n-        if (Precision.equals(hPrev, 0.0, small)) {\n-            hPrev = small;\n+        if (Precision.equals(hPrev.doubleValue(), 0.0, small)) {\n+            hPrev = BigDecimal.valueOf(small);\n         }\n \n         int n = 1;\n-        double dPrev = 0.0;\n-        double p0 = 1.0;\n-        double q1 = 1.0;\n-        double cPrev = hPrev;\n-        double hN = hPrev;\n+        BigFraction dPrev = BigFraction.ZERO;\n+        BigFraction p0 = BigFraction.ONE;\n+        BigFraction q1 = BigFraction.ONE;\n+        BigDecimal cPrev = hPrev;\n+        BigDecimal hN = hPrev;\n \n         while (n < maxIterations) {\n-            final double a = getA(n, x);\n-            final double b = getB(n, x);\n-\n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n+            final BigDecimal a = BigDecimal.valueOf(getA(n, x));\n+            final BigDecimal b = BigDecimal.valueOf(getB(n, x));\n+\n+            BigDecimal cN = a.multiply(hPrev).add(b.multiply(p0));\n+            BigFraction q2 = a.multiply(q1).add(dPrev).multiply(b.movePointRight(1)).reciprocal();\n+            if (Double.isInfinite(cN.doubleValue()) || Double.isInfinite(q2.doubleValue())) {\n+                BigDecimal scaleFactor = BigDecimal.ONE;\n+                BigDecimal lastScaleFactor = BigDecimal.ONE;\n                 final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n+                final BigDecimal scale = a.max(b.abs());\n+                if (scale.compareTo(BigDecimal.ZERO) == 0) {  // Can't scale\n                     throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                 }\n                 for (int i = 0; i < maxPower; i++) {\n                     lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n+                    scaleFactor = scaleFactor.multiply(scale);\n+                    if (a.signum() != 0 && a.abs().compareTo(b.abs()) > 0) {\n+                        cN = hPrev.divide(lastScaleFactor).add(b.divide(scaleFactor).multiply(p0));\n+                        q2 = q1.divide(lastScaleFactor).add(b.divide(scaleFactor).multiply(dPrev)).multiply(a).add(dPrev).multiply(scale).reciprocal();\n+                    } else if (b.signum() != 0) {\n+                        cN = a.divide(scaleFactor).multiply(hPrev).add(p0.divide(lastScaleFactor));\n+                        q2 = q1.divide(lastScaleFactor).add(dPrev.divide(lastScaleFactor)).multiply(b).add(a).multiply(scale).reciprocal();\n                     }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n+                    if (!(Double.isInfinite(cN.doubleValue()) || Double.isInfinite(q2.doubleValue()))) {\n                         break;\n                     }\n                 }\n+                if (Double.isInfinite(cN.doubleValue()) || Double.isInfinite(q2.doubleValue())) {\n+                    continue; // continue with next iteration if still infinities\n+                }\n             }\n \n-            final double deltaN = cN / q2 / cPrev;\n-            hN = cPrev * deltaN;\n+            final BigDecimal deltaN = cN.divide(cPrev, RoundingMode.HALF_UP).multiply(q1).multiply(q2);\n+            hN = cPrev.multiply(deltaN);\n \n-            if (Double.isInfinite(hN)) {\n+            if (Double.isInfinite(hN.doubleValue())) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                               x);\n+                        x);\n             }\n-            if (Double.isNaN(hN)) {\n+            if (Double.isNaN(hN.doubleValue())) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n+                        x);\n             }\n \n-            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n+            if (hN.subtract(hPrev).abs().doubleValue() < epsilon * hN.abs().doubleValue()) {\n                 break;\n             }\n \n             dPrev = q1;\n-            cPrev = cN / q2;\n+            cPrev = cN;\n             p0 = hPrev;\n-            hPrev = cN;\n+            hPrev = hN;\n             q1 = q2;\n             n++;\n         }\n \n         if (n >= maxIterations) {\n             throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n+                    maxIterations, x);\n         }\n \n-        return hN;\n+        return hN.doubleValue();\n     }\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}