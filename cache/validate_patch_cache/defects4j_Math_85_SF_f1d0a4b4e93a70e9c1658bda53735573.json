{
    "patch": " public static double[] bracket(UnivariateRealFunction function,\n                                         double initial, double lowerBound, double upperBound,\n                                         int maximumIterations) throws ConvergenceException {\n        if (function == null) {\n            throw new NullPointerException(\"The function can not be null\");\n        } else if (maximumIterations <= 0) {\n            throw new IllegalArgumentException(\"The maximum iterations must be > 0\");\n        } else if (lowerBound >= upperBound) {\n            throw new IllegalArgumentException(\"Invalid interval:  lower must be less than upper.  Lower: \" + lowerBound\n                                               + \", Upper: \" + upperBound);\n        } else {\n            double a = initial;\n            double b = initial;\n            double fa = Double.NaN;\n            double fb = Double.NaN;\n            boolean tryBracketFromInitialPoints = false;\n\n            while((fa != 0.0D || fb != 0.0D) && maximumIterations-- > 0) {\n                try {\n                    fa = function.value(a);\n                    ++maximumIterations;\n                    fb = function.value(b);\n                    ++maximumIterations;\n                    if (fa != 0.0D && fb != 0.0D) {\n                        if (fa * fb > 0.0D) {\n                            if (FastMath.abs(fa) < FastMath.abs(fb)) {\n                                double tmp = b;\n                                b = a;\n                                a = tmp;\n                                tmp = fb;\n                                fb = fa;\n                                fa = tmp;\n                            }\n\n                            if (!tryBracketFromInitialPoints) {\n                                a = initial;\n                                b = initial;\n                            }\n\n                            b += 1.618034D * (a - b);\n                            fb = function.value(b);\n                            tryBracketFromInitialPoints = false;\n                        } else if (fa > 0.0D ^ fb > 0.0D) {\n                            double bMinusA = b - a;\n                            double c;\n                            if (FastMath.abs(fa) < FastMath.abs(fb)) {\n                                c = b;\n                                b = a;\n                                a = c;\n                                c = fb;\n                                fb = fa;\n                                fa = c;\n                            }\n\n                            c = b + 1.618034D * (a - b);\n                            double fc = function.value(c);\n                            int iterationsToGo = maximumIterations;\n                            ++maximumIterations;\n\n                            while(fc != 0.0D && fb != 0.0D && iterationsToGo-- > 0) {\n                                double denominator = (fa - fb) * (b - c) - (fb - fc) * (a - b);\n                                if (denominator == 0.0D) {\n                                    tryBracketFromInitialPoints = true;\n                                    break;\n                                }\n\n                                double q = (a - b) * fb * (c - b) * (fa - fc) / denominator;\n                                double newB;\n                                if (q > 0.0D) {\n                                    newB = b + q;\n                                    if (newB - b > 0.75D * (b - a)) {\n                                        tryBracketFromInitialPoints = true;\n                                        break;\n                                    }\n                                } else {\n                                    newB = b + -q;\n                                    if (b - newB > 0.75D * (b - a)) {\n                                        tryBracketFromInitialPoints = true;\n                                        break;\n                                    }\n                                }\n\n                                double newFb = function.value(newB);\n                                if (newFb < 0.0D) {\n                                    c = b;\n                                    b = newB;\n                                    fc = fb;\n                                    fb = newFb;\n                                } else if (newFb > 0.0D) {\n                                    a = b;\n                                    b = newB;\n                                    fa = fb;\n                                    fb = newFb;\n                                } else {\n                                    return new double[]{newB, newB};\n                                }\n                            }\n                        }\n                    }\n                } catch (FunctionEvaluationException var29) {\n                    throw new ConvergenceException(var29);\n                }\n            }\n\n            if (fa == 0.0D) {\n                return new double[]{a, a};\n            } else if (fb == 0.0D) {\n                return new double[]{b, b};\n            } else {\n                return new double[]{a, b};\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..74f3f233a 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,49 +162,118 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n+ public static double[] bracket(UnivariateRealFunction function,\n+                                         double initial, double lowerBound, double upperBound,\n+                                         int maximumIterations) throws ConvergenceException {\n         if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n-        }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n-        }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+            throw new NullPointerException(\"The function can not be null\");\n+        } else if (maximumIterations <= 0) {\n+            throw new IllegalArgumentException(\"The maximum iterations must be > 0\");\n+        } else if (lowerBound >= upperBound) {\n+            throw new IllegalArgumentException(\"Invalid interval:  lower must be less than upper.  Lower: \" + lowerBound\n+                                               + \", Upper: \" + upperBound);\n+        } else {\n+            double a = initial;\n+            double b = initial;\n+            double fa = Double.NaN;\n+            double fb = Double.NaN;\n+            boolean tryBracketFromInitialPoints = false;\n+\n+            while((fa != 0.0D || fb != 0.0D) && maximumIterations-- > 0) {\n+                try {\n+                    fa = function.value(a);\n+                    ++maximumIterations;\n+                    fb = function.value(b);\n+                    ++maximumIterations;\n+                    if (fa != 0.0D && fb != 0.0D) {\n+                        if (fa * fb > 0.0D) {\n+                            if (FastMath.abs(fa) < FastMath.abs(fb)) {\n+                                double tmp = b;\n+                                b = a;\n+                                a = tmp;\n+                                tmp = fb;\n+                                fb = fa;\n+                                fa = tmp;\n+                            }\n+\n+                            if (!tryBracketFromInitialPoints) {\n+                                a = initial;\n+                                b = initial;\n+                            }\n+\n+                            b += 1.618034D * (a - b);\n+                            fb = function.value(b);\n+                            tryBracketFromInitialPoints = false;\n+                        } else if (fa > 0.0D ^ fb > 0.0D) {\n+                            double bMinusA = b - a;\n+                            double c;\n+                            if (FastMath.abs(fa) < FastMath.abs(fb)) {\n+                                c = b;\n+                                b = a;\n+                                a = c;\n+                                c = fb;\n+                                fb = fa;\n+                                fa = c;\n+                            }\n+\n+                            c = b + 1.618034D * (a - b);\n+                            double fc = function.value(c);\n+                            int iterationsToGo = maximumIterations;\n+                            ++maximumIterations;\n+\n+                            while(fc != 0.0D && fb != 0.0D && iterationsToGo-- > 0) {\n+                                double denominator = (fa - fb) * (b - c) - (fb - fc) * (a - b);\n+                                if (denominator == 0.0D) {\n+                                    tryBracketFromInitialPoints = true;\n+                                    break;\n+                                }\n+\n+                                double q = (a - b) * fb * (c - b) * (fa - fc) / denominator;\n+                                double newB;\n+                                if (q > 0.0D) {\n+                                    newB = b + q;\n+                                    if (newB - b > 0.75D * (b - a)) {\n+                                        tryBracketFromInitialPoints = true;\n+                                        break;\n+                                    }\n+                                } else {\n+                                    newB = b + -q;\n+                                    if (b - newB > 0.75D * (b - a)) {\n+                                        tryBracketFromInitialPoints = true;\n+                                        break;\n+                                    }\n+                                }\n+\n+                                double newFb = function.value(newB);\n+                                if (newFb < 0.0D) {\n+                                    c = b;\n+                                    b = newB;\n+                                    fc = fb;\n+                                    fb = newFb;\n+                                } else if (newFb > 0.0D) {\n+                                    a = b;\n+                                    b = newB;\n+                                    fa = fb;\n+                                    fb = newFb;\n+                                } else {\n+                                    return new double[]{newB, newB};\n+                                }\n+                            }\n+                        }\n+                    }\n+                } catch (FunctionEvaluationException var29) {\n+                    throw new ConvergenceException(var29);\n+                }\n+            }\n+\n+            if (fa == 0.0D) {\n+                return new double[]{a, a};\n+            } else if (fb == 0.0D) {\n+                return new double[]{b, b};\n+            } else {\n+                return new double[]{a, b};\n+            }\n         }\n-        \n-        return new double[]{a, b};\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}