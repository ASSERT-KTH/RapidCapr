{
    "patch": "options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n\n    // Turn off `GLOBAL_THIS` warning if `checkGlobalThisLevel` is not enabled.\n    if (options.checkGlobalThisLevel != CheckLevel.OFF) {\n      this.warningsGuard.addGuard(\n          new DiagnosticGroupWarningsGuard(\n              DiagnosticGroups.GLOBAL_THIS,\n              options.checkGlobalThisLevel));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..9d8190d7 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,16 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+options.setWarningLevel(\n+        DiagnosticGroups.GLOBAL_THIS,\n+        options.checkGlobalThisLevel);\n+\n+    // Turn off `GLOBAL_THIS` warning if `checkGlobalThisLevel` is not enabled.\n+    if (options.checkGlobalThisLevel != CheckLevel.OFF) {\n+      this.warningsGuard.addGuard(\n+          new DiagnosticGroupWarningsGuard(\n+              DiagnosticGroups.GLOBAL_THIS,\n+              options.checkGlobalThisLevel));\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}