{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    final double x = v1.getY() * v2.getZ() - v1.getZ() * v2.getY();\n    final double y = v1.getZ() * v2.getX() - v1.getX() * v2.getZ();\n    final double z = v1.getX() * v2.getY() - v1.getY() * v2.getX();\n\n    double vx = x;\n    double vy = y;\n    double vz = z;\n\n    double comp = v2.dot(v2);\n\n    if (comp == 0.0) {\n        return Vector3D.ZERO;\n    }\n\n    double inv = 1.0 / comp;\n    double factor = ((v1.getX() * v2.getX() + v1.getY() * v2.getY() + v1.getZ() * v2.getZ()) * inv);\n    factor *= factor;\n    factor = 0.6666666666666666 - factor;\n    factor *= inv;\n    factor *= inv;\n\n    if (Double.isNaN(factor)) {\n        return new Vector3D(x, y, z);\n    }\n\n    double eps = factor * (vx * vx + vy * vy + vz * vz);\n\n    if (eps > 1.0e-8) {\n        double baseX = vx / Math.sqrt(eps);\n        double comp1 = v1.dot(v2) / comp;\n        Vector3D ortho1 = v2.scalarMultiply(comp1);\n        Vector3D correctedV1 = v1.subtract(ortho1);\n        double baseY = correctedV1.dot(correctedV1);\n        eps *= baseY;\n\n        if (eps > 1.0e-8 * baseY) {\n            double baseZ = Math.sqrt(baseY);\n            inv = 1.0 / baseZ;\n            Vector3D ortho2 = correctedV1.crossProduct(v2);\n            double comp2 = correctedV1.dot(v2) / comp;\n            Vector3D ortho3 = v2.scalarMultiply(comp2);\n            ortho2 = ortho2.subtract(ortho3);\n            double correctedX = baseX / inv;\n            double correctedY = baseZ * inv;\n            double correctedZ = ortho2.dot(correctedV1.multiply(inv)) * inv * inv;\n            vx = correctedX;\n            vy = correctedY;\n            vz = correctedZ;\n        }\n    }\n\n    return new Vector3D(vx, vy, vz);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..08d994954 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,60 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    final double x = v1.getY() * v2.getZ() - v1.getZ() * v2.getY();\n+    final double y = v1.getZ() * v2.getX() - v1.getX() * v2.getZ();\n+    final double z = v1.getX() * v2.getY() - v1.getY() * v2.getX();\n \n+    double vx = x;\n+    double vy = y;\n+    double vz = z;\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+    double comp = v2.dot(v2);\n \n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    if (comp == 0.0) {\n+        return Vector3D.ZERO;\n+    }\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    double inv = 1.0 / comp;\n+    double factor = ((v1.getX() * v2.getX() + v1.getY() * v2.getY() + v1.getZ() * v2.getZ()) * inv);\n+    factor *= factor;\n+    factor = 0.6666666666666666 - factor;\n+    factor *= inv;\n+    factor *= inv;\n \n+    if (Double.isNaN(factor)) {\n+        return new Vector3D(x, y, z);\n+    }\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    double eps = factor * (vx * vx + vy * vy + vz * vz);\n+\n+    if (eps > 1.0e-8) {\n+        double baseX = vx / Math.sqrt(eps);\n+        double comp1 = v1.dot(v2) / comp;\n+        Vector3D ortho1 = v2.scalarMultiply(comp1);\n+        Vector3D correctedV1 = v1.subtract(ortho1);\n+        double baseY = correctedV1.dot(correctedV1);\n+        eps *= baseY;\n+\n+        if (eps > 1.0e-8 * baseY) {\n+            double baseZ = Math.sqrt(baseY);\n+            inv = 1.0 / baseZ;\n+            Vector3D ortho2 = correctedV1.crossProduct(v2);\n+            double comp2 = correctedV1.dot(v2) / comp;\n+            Vector3D ortho3 = v2.scalarMultiply(comp2);\n+            ortho2 = ortho2.subtract(ortho3);\n+            double correctedX = baseX / inv;\n+            double correctedY = baseZ * inv;\n+            double correctedZ = ortho2.dot(correctedV1.multiply(inv)) * inv * inv;\n+            vx = correctedX;\n+            vy = correctedY;\n+            vz = correctedZ;\n+        }\n+    }\n \n-  }\n+    return new Vector3D(vx, vy, vz);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}