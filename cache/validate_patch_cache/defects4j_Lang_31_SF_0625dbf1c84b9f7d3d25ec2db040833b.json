{
    "patch": "import java.lang.Character;\n\npublic class StringUtils {\n    public static boolean containsAny(CharSequence cs, char... searchChars) {\n        if (cs == null || searchChars == null) {\n            return false;\n        }\n        final int length = cs.length();\n        final int searchLength = searchChars.length;\n        final int end = length - 1;\n        final int searchEnd = searchLength - 1;\n        for (int i = 0; i < length; i++) {\n            final char ch = cs.charAt(i);\n            if (isHighSurrogate(ch) && i < end) {\n                final char ch2 = cs.charAt(i + 1);\n                if (isLowSurrogate(ch2)) {\n                    final int codePoint = toCodePoint(ch, ch2);\n                    for (int j = 0; j < searchLength; j++) {\n                        final char searchChar = searchChars[j];\n                        if (searchChar == codePoint) {\n                            return true;\n                        }\n                    }\n                    i++; // 2 characters\n                }\n            } else {\n                for (int j = 0; j < searchLength; j++) {\n                    if (searchChars[j] == ch) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private static boolean isHighSurrogate(char ch) {\n        return ch >= '\\uD800' && ch <= '\\uDBFF';\n    }\n\n    private static boolean isLowSurrogate(char ch) {\n        return ch >= '\\uDC00' && ch <= '\\uDFFF';\n    }\n\n    private static int toCodePoint(char high, char low) {\n        return ((high - '\\uD800') << 10 | (low - '\\uDC00')) + 0x010000;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..8b3d4487 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,54 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.lang.Character;\n+\n+public class StringUtils {\n+    public static boolean containsAny(CharSequence cs, char... searchChars) {\n+        if (cs == null || searchChars == null) {\n+            return false;\n+        }\n+        final int length = cs.length();\n+        final int searchLength = searchChars.length;\n+        final int end = length - 1;\n+        final int searchEnd = searchLength - 1;\n+        for (int i = 0; i < length; i++) {\n+            final char ch = cs.charAt(i);\n+            if (isHighSurrogate(ch) && i < end) {\n+                final char ch2 = cs.charAt(i + 1);\n+                if (isLowSurrogate(ch2)) {\n+                    final int codePoint = toCodePoint(ch, ch2);\n+                    for (int j = 0; j < searchLength; j++) {\n+                        final char searchChar = searchChars[j];\n+                        if (searchChar == codePoint) {\n+                            return true;\n+                        }\n+                    }\n+                    i++; // 2 characters\n+                }\n+            } else {\n+                for (int j = 0; j < searchLength; j++) {\n+                    if (searchChars[j] == ch) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static boolean isHighSurrogate(char ch) {\n+        return ch >= '\\uD800' && ch <= '\\uDBFF';\n+    }\n+\n+    private static boolean isLowSurrogate(char ch) {\n+        return ch >= '\\uDC00' && ch <= '\\uDFFF';\n+    }\n+\n+    private static int toCodePoint(char high, char low) {\n+        return ((high - '\\uD800') << 10 | (low - '\\uDC00')) + 0x010000;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}