{
    "patch": "if (offsetLocal < offsetAdjusted) {\n    long prevAdjusted = previousTransition(instantAdjusted);\n    long nextLocal = nextTransition(prevAdjusted + 1);\n    if (nextLocal <= instantLocal) {\n        return offsetAdjusted;\n    }\n    int newOffset = getOffset(nextLocal - 1);\n    if (newOffset <= offsetLocal) {\n        return offsetLocal;\n    } else {\n        return newOffset;\n    }\n} else if (offsetLocal > offsetAdjusted) {\n    long nextAdjusted = nextTransition(instantAdjusted);\n    if (instantLocal < nextAdjusted) {\n        return offsetLocal;\n    }\n    long nextLocal = nextTransition(instantLocal);\n    if (nextLocal == nextAdjusted) {\n        return offsetAdjusted;\n    } else {\n        int newOffset = getOffset(nextAdjusted);\n        if (newOffset > offsetAdjusted) {\n            return newOffset;\n        } else {\n            return offsetAdjusted;\n        }\n    }\n} else {\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b5537de2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,37 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal < offsetAdjusted) {\n+    long prevAdjusted = previousTransition(instantAdjusted);\n+    long nextLocal = nextTransition(prevAdjusted + 1);\n+    if (nextLocal <= instantLocal) {\n+        return offsetAdjusted;\n+    }\n+    int newOffset = getOffset(nextLocal - 1);\n+    if (newOffset <= offsetLocal) {\n+        return offsetLocal;\n+    } else {\n+        return newOffset;\n+    }\n+} else if (offsetLocal > offsetAdjusted) {\n+    long nextAdjusted = nextTransition(instantAdjusted);\n+    if (instantLocal < nextAdjusted) {\n+        return offsetLocal;\n+    }\n+    long nextLocal = nextTransition(instantLocal);\n+    if (nextLocal == nextAdjusted) {\n+        return offsetAdjusted;\n+    } else {\n+        int newOffset = getOffset(nextAdjusted);\n+        if (newOffset > offsetAdjusted) {\n+            return newOffset;\n+        } else {\n+            return offsetAdjusted;\n+        }\n+    }\n+} else {\n+    return offsetAdjusted;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}