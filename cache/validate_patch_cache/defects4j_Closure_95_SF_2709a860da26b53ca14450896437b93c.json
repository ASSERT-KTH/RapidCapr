{
    "patch": "    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n      Preconditions.checkArgument(inferred || type != null);\n\n      // Only allow declarations of NAMEs and qualified names.\n      boolean shouldDeclareOnGlobalThis = false;\n      if (n.getType() == Token.NAME) {\n        Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LET ||\n            parent.getType() == Token.CONST ||\n            parent.getType() == Token.REST ||\n            parent.getType() == Token.EXPORT ||\n            parent.getType() == Token.PARAM_LIST ||\n            parent.getType() == Token.CATCH);\n        shouldDeclareOnGlobalThis =\n            scope.isGlobal()\n                && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);\n      } else {\n        Preconditions.checkArgument(\n            n.getType() == Token.GETPROP\n                && (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT));\n      }\n      String variableName = n.getQualifiedName();\n\n      // If n is a property, then we should really declare it in the\n      // scope where the root object appears. This helps out people\n      // who declare \"global\" names in an anonymous namespace.\n      Scope scopeToDeclareIn = scope;\n\n      // don't try to declare in a deleted scope\n      if (scopeToDeclareIn.isDeleted()) {\n        scopeToDeclareIn = scopeToDeclareIn.getParent();\n        if (scopeToDeclareIn.isDeleted()) {\n          scopeToDeclareIn = scope;\n        }\n      }\n\n      boolean declaredInClosestScope =\n          scopeToDeclareIn.isDeclared(variableName, false) && !scopeToDeclareIn.isVar(variableName);\n      if (declaredInClosestScope && !scope.isBlockScope()) {\n        Var existingVar = scopeToDeclareIn.getClosestHoistScope().getVar(variableName);\n\n        if (existingVar.getParentNode() == parent) {\n          // We redefined a var/let/const in the same scope.\n          validator.expectRedefinedVariable(sourceName, n, parent, existingVar);\n        } else {\n          // We tried to define a variable in a scope above an existing variable definition.\n          validator.expectDuplicateVariableDefinition(sourceName, n, existingVar.getNameNode());\n        }\n      } else if (scope.isGlobal() && compiler.getOptions().getCheckGlobalThisLevel().isOn()) {\n        if (shouldDeclareOnGlobalThis) {\n          ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n          boolean isExtern = currentScript.isExtern();\n          if (inferred) {\n            globalThis.defineInferredProperty(\n                variableName,\n                type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n                isExtern);\n          } else {\n            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n          }\n        }\n      } else if (!declaredInClosestScope) {\n        boolean varDeclarationHoisted = false;\n\n        if (n.getType() == Token.NAME && !scope.isGlobal() && (parent.isLet() || parent.isConst())) {\n          if (scope.isHoistScope()) {\n            varDeclarationHoisted = scope.declare(variableName, n, type, inferred);\n          } else {\n            validator.expectUndeclaredVariable(sourceName, n, parent, null, variableName, type);\n          }\n        } else if (inferred) {\n          if (n.getType() != Token.NAME || !parent.isVar()) {\n            setDeferredType(n, type);\n          }\n          if (n.getType() == Token.NAME) {\n            varDeclarationHoisted = scope.declare(variableName, n, type, inferred);\n          }\n        } else {\n          if (n.getType() == Token.NAME && parent.isVar()) {\n            Node rhs = n.getFirstChild();\n            boolean rightHandSideIsFunction = false;\n            if (rhs != null) {\n              Node grandparent = parent.getParent();\n              boolean rhsIsQualifiedDeclaration =\n                  rhs.isQualifiedName() && rhs != grandparent.getFirstChild();\n              if (rhsIsQualifiedDeclaration && grandparent.getType() == Token.EXPR_RESULT) {\n                rhs = grandparent.getFirstChild();\n              }\n              rightHandSideIsFunction =\n                  rhs.getType() == Token.FUNCTION || rhs.getType() == Token.FUNCTION_EXPR;\n            }\n            if (!rightHandSideIsFunction) {\n              validator.expectTypeMismatch(sourceName, type, rhs, rhs.getJSType());\n            }\n          }\n          if (n.getType() == Token.NAME) {\n            varDeclarationHoisted = scopeToDeclareIn.declare(variableName, n, type, inferred);\n          }\n        }\n\n        if (varDeclarationHoisted && !parent.isFunction()) {\n          Scope.Var var = scopeToDeclareIn.getVar(variableName);\n          Scope.Var hoistScopeVar = var.getScope().getVar(variableName);\n          if (hoistScopeVar == var) {\n            validator.expectMultipleVarDeclInCatch(sourceName, n, var);\n          }\n        }\n\n        // If we're in the global scope, also declare var.prototype\n        // in the scope chain.\n        if (scopeToDeclareIn.isGlobal() && type != null && type.isFunctionType()) {\n          FunctionType fnType = type.toMaybeFunctionType();\n          if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            ObjectType prototype = fnType.getPrototype();\n            InputId input = currentScript.getInputId();\n            boolean isDeclared =\n                superClassCtor != null\n                    && !superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE));\n            scopeToDeclareIn.declare(\n                variableName + \".prototype\", n, prototype, input, isDeclared);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..2cf41acd 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -872,73 +872,127 @@ final class TypedScopeCreator implements ScopeCreator {\n     void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n       Preconditions.checkArgument(inferred || type != null);\n \n-      // Only allow declarations of NAMEs and qualfied names.\n+      // Only allow declarations of NAMEs and qualified names.\n       boolean shouldDeclareOnGlobalThis = false;\n       if (n.getType() == Token.NAME) {\n         Preconditions.checkArgument(\n             parent.getType() == Token.FUNCTION ||\n             parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n+            parent.getType() == Token.LET ||\n+            parent.getType() == Token.CONST ||\n+            parent.getType() == Token.REST ||\n+            parent.getType() == Token.EXPORT ||\n+            parent.getType() == Token.PARAM_LIST ||\n             parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n+        shouldDeclareOnGlobalThis =\n+            scope.isGlobal()\n+                && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);\n       } else {\n         Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+            n.getType() == Token.GETPROP\n+                && (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT));\n       }\n       String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n \n       // If n is a property, then we should really declare it in the\n       // scope where the root object appears. This helps out people\n       // who declare \"global\" names in an anonymous namespace.\n       Scope scopeToDeclareIn = scope;\n \n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n+      // don't try to declare in a deleted scope\n+      if (scopeToDeclareIn.isDeleted()) {\n+        scopeToDeclareIn = scopeToDeclareIn.getParent();\n+        if (scopeToDeclareIn.isDeleted()) {\n+          scopeToDeclareIn = scope;\n         }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+      }\n \n+      boolean declaredInClosestScope =\n+          scopeToDeclareIn.isDeclared(variableName, false) && !scopeToDeclareIn.isVar(variableName);\n+      if (declaredInClosestScope && !scope.isBlockScope()) {\n+        Var existingVar = scopeToDeclareIn.getClosestHoistScope().getVar(variableName);\n+\n+        if (existingVar.getParentNode() == parent) {\n+          // We redefined a var/let/const in the same scope.\n+          validator.expectRedefinedVariable(sourceName, n, parent, existingVar);\n+        } else {\n+          // We tried to define a variable in a scope above an existing variable definition.\n+          validator.expectDuplicateVariableDefinition(sourceName, n, existingVar.getNameNode());\n+        }\n+      } else if (scope.isGlobal() && compiler.getOptions().getCheckGlobalThisLevel().isOn()) {\n         if (shouldDeclareOnGlobalThis) {\n           ObjectType globalThis =\n               typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n+          boolean isExtern = currentScript.isExtern();\n           if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n+            globalThis.defineInferredProperty(\n+                variableName,\n+                type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n                 isExtern);\n           } else {\n             globalThis.defineDeclaredProperty(variableName, type, isExtern);\n           }\n         }\n+      } else if (!declaredInClosestScope) {\n+        boolean varDeclarationHoisted = false;\n+\n+        if (n.getType() == Token.NAME && !scope.isGlobal() && (parent.isLet() || parent.isConst())) {\n+          if (scope.isHoistScope()) {\n+            varDeclarationHoisted = scope.declare(variableName, n, type, inferred);\n+          } else {\n+            validator.expectUndeclaredVariable(sourceName, n, parent, null, variableName, type);\n+          }\n+        } else if (inferred) {\n+          if (n.getType() != Token.NAME || !parent.isVar()) {\n+            setDeferredType(n, type);\n+          }\n+          if (n.getType() == Token.NAME) {\n+            varDeclarationHoisted = scope.declare(variableName, n, type, inferred);\n+          }\n+        } else {\n+          if (n.getType() == Token.NAME && parent.isVar()) {\n+            Node rhs = n.getFirstChild();\n+            boolean rightHandSideIsFunction = false;\n+            if (rhs != null) {\n+              Node grandparent = parent.getParent();\n+              boolean rhsIsQualifiedDeclaration =\n+                  rhs.isQualifiedName() && rhs != grandparent.getFirstChild();\n+              if (rhsIsQualifiedDeclaration && grandparent.getType() == Token.EXPR_RESULT) {\n+                rhs = grandparent.getFirstChild();\n+              }\n+              rightHandSideIsFunction =\n+                  rhs.getType() == Token.FUNCTION || rhs.getType() == Token.FUNCTION_EXPR;\n+            }\n+            if (!rightHandSideIsFunction) {\n+              validator.expectTypeMismatch(sourceName, type, rhs, rhs.getJSType());\n+            }\n+          }\n+          if (n.getType() == Token.NAME) {\n+            varDeclarationHoisted = scopeToDeclareIn.declare(variableName, n, type, inferred);\n+          }\n+        }\n+\n+        if (varDeclarationHoisted && !parent.isFunction()) {\n+          Scope.Var var = scopeToDeclareIn.getVar(variableName);\n+          Scope.Var hoistScopeVar = var.getScope().getVar(variableName);\n+          if (hoistScopeVar == var) {\n+            validator.expectMultipleVarDeclInCatch(sourceName, n, var);\n+          }\n+        }\n \n         // If we're in the global scope, also declare var.prototype\n         // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n+        if (scopeToDeclareIn.isGlobal() && type != null && type.isFunctionType()) {\n+          FunctionType fnType = type.toMaybeFunctionType();\n           if (fnType.isConstructor() || fnType.isInterface()) {\n             FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n+            ObjectType prototype = fnType.getPrototype();\n+            InputId input = currentScript.getInputId();\n+            boolean isDeclared =\n+                superClassCtor != null\n+                    && !superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE));\n+            scopeToDeclareIn.declare(\n+                variableName + \".prototype\", n, prototype, input, isDeclared);\n           }\n         }\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}