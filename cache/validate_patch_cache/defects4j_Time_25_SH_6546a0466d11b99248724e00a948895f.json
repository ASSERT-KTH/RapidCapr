{
    "patch": "                long nextAdjusted = nextTransition(nextLocal - 1);\n                if (instantLocal - offsetLocal <= nextAdjusted) {\n                    return offsetLocal;\n                } else {\n                    return getOffset(nextLocal);\n                }\n            } else {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(prevLocal + DateTimeConstants.MILLIS_PER_SECOND);\n                if (instantLocal - offsetLocal >= prevAdjusted) {\n                    return offsetAdjusted;\n                } else {\n                    return getOffset(prevLocal);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b575dc6a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                long nextAdjusted = nextTransition(nextLocal - 1);\n+                if (instantLocal - offsetLocal <= nextAdjusted) {\n+                    return offsetLocal;\n+                } else {\n+                    return getOffset(nextLocal);\n+                }\n+            } else {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(prevLocal + DateTimeConstants.MILLIS_PER_SECOND);\n+                if (instantLocal - offsetLocal >= prevAdjusted) {\n+                    return offsetAdjusted;\n+                } else {\n+                    return getOffset(prevLocal);\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}