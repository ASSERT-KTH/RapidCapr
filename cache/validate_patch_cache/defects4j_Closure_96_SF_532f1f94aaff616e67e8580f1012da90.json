{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n\t\tIterator<Node> arguments = call.children().iterator();\n\t\targuments.next(); // skip the function name\n\n\t\tIterator<Node> parameters = functionType.getParameters().iterator();\n\t\tint ordinal = 0;\n\t\tNode parameter = null;\n\t\tNode argument = null;\n\t\twhile (parameters.hasNext()) {\n\t\t\t// If there are no arguments left in the list, then the while loop above\n\t\t\t// implies that this must be an error since there are still parameters left\n\t\t\t// in the list.\n\t\t\tif (!arguments.hasNext()) {\n\t\t\t\t// report error\n\t\t\t\treport(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n\t\t\t\t\t\tString.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n\t\t\t\t\t\tString.valueOf(functionType.getMaxArguments()));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tparameter = parameters.next();\n\t\t\targument = arguments.next();\n\t\t\tordinal++;\n\n\t\t\tvalidator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call,\n\t\t\t\t\tordinal);\n\t\t}\n\n\t\t// Check if there are any arguments left in the list\n\t\twhile (arguments.hasNext()) {\n\t\t\t// If there are arguments left in the list but there are no remaining\n\t\t\t// parameters, and the function does not accept var_args, then an error\n\t\t\t// has occurred.\n\t\t\tif (parameters.hasNext() || !functionType.acceptsVarArgs()) {\n\t\t\t\treport(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n\t\t\t\t\t\tString.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n\t\t\t\t\t\tString.valueOf(functionType.getMaxArguments()));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If there are arguments left in the list and there are remaining\n\t\t\t// parameters, then assign the arguments to the var_args parameter.\n\t\t\tparameters.next();\n\t\t\targuments.next();\n\t\t\tordinal++;\n\t\t}\n\n\t\tint numArgs = call.getChildCount() - 1;\n\t\tint minArgs = functionType.getMinArguments();\n\t\tint maxArgs = functionType.getMaxArguments();\n\t\tif (minArgs > numArgs || maxArgs < numArgs) {\n\t\t\treport(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n\t\t\t\t\tString.valueOf(numArgs), String.valueOf(minArgs),\n\t\t\t\t\tmaxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n\t\t}\n\t}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..4139c2cb 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,60 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n-\n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n-  }\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+\t\tIterator<Node> arguments = call.children().iterator();\n+\t\targuments.next(); // skip the function name\n+\n+\t\tIterator<Node> parameters = functionType.getParameters().iterator();\n+\t\tint ordinal = 0;\n+\t\tNode parameter = null;\n+\t\tNode argument = null;\n+\t\twhile (parameters.hasNext()) {\n+\t\t\t// If there are no arguments left in the list, then the while loop above\n+\t\t\t// implies that this must be an error since there are still parameters left\n+\t\t\t// in the list.\n+\t\t\tif (!arguments.hasNext()) {\n+\t\t\t\t// report error\n+\t\t\t\treport(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+\t\t\t\t\t\tString.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n+\t\t\t\t\t\tString.valueOf(functionType.getMaxArguments()));\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tparameter = parameters.next();\n+\t\t\targument = arguments.next();\n+\t\t\tordinal++;\n+\n+\t\t\tvalidator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call,\n+\t\t\t\t\tordinal);\n+\t\t}\n+\n+\t\t// Check if there are any arguments left in the list\n+\t\twhile (arguments.hasNext()) {\n+\t\t\t// If there are arguments left in the list but there are no remaining\n+\t\t\t// parameters, and the function does not accept var_args, then an error\n+\t\t\t// has occurred.\n+\t\t\tif (parameters.hasNext() || !functionType.acceptsVarArgs()) {\n+\t\t\t\treport(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+\t\t\t\t\t\tString.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n+\t\t\t\t\t\tString.valueOf(functionType.getMaxArguments()));\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t// If there are arguments left in the list and there are remaining\n+\t\t\t// parameters, then assign the arguments to the var_args parameter.\n+\t\t\tparameters.next();\n+\t\t\targuments.next();\n+\t\t\tordinal++;\n+\t\t}\n+\n+\t\tint numArgs = call.getChildCount() - 1;\n+\t\tint minArgs = functionType.getMinArguments();\n+\t\tint maxArgs = functionType.getMaxArguments();\n+\t\tif (minArgs > numArgs || maxArgs < numArgs) {\n+\t\t\treport(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+\t\t\t\t\tString.valueOf(numArgs), String.valueOf(minArgs),\n+\t\t\t\t\tmaxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+\t\t}\n+\t}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}