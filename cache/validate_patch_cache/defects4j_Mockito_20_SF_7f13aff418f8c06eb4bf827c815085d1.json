{
    "patch": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n\n    try {\n        T mockInstance = classInstantiator.instantiate(mockedProxyType);\n        if (mockInstance == null) {\n            throw new MockitoException(\"Failed to create mock instance of type: \" + mockedProxyType.getName());\n        }\n        MockMethodInterceptor.MockAccess mockAccess = null; // initialize to null to avoid NPE\n        if (MockMethodInterceptor.MockAccess.class.isAssignableFrom(mockedProxyType)) {\n            mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        }\n        MockMethodInterceptor mockitoInterceptor = new MockMethodInterceptor(asInternalMockHandler(handler), settings);\n        if (mockAccess != null) {\n            mockAccess.setMockitoInterceptor(mockitoInterceptor);\n        } else {\n            Field field = getField(mockedProxyType, \"$$delegatedInstance\");\n            if (field != null) {\n                field.setAccessible(true);\n                Object delegatedInstance = field.get(mockInstance);\n                if (delegatedInstance != null) {\n                    ((MockAccess) delegatedInstance).setMockitoInterceptor(mockitoInterceptor);\n                }\n            }\n        }\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ),cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n    } catch (IllegalAccessException e) {\n        throw new MockitoException(e.getMessage(), e);\n    }\n}\n\nprivate Field getField(Class<?> clazz, String name) {\n    while (clazz != null) {\n        for (Field field : clazz.getDeclaredFields()) {\n            if (field.getName().equals(name)) {\n                return field;\n            }\n        }\n        clazz = clazz.getSuperclass();\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..fa49a0a69 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,36 +21,66 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n+        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+    }\n+    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n+            settings.getTypeToMock(),\n+            settings.getExtraInterfaces()\n+    );\n+\n+    try {\n+        T mockInstance = classInstantiator.instantiate(mockedProxyType);\n+        if (mockInstance == null) {\n+            throw new MockitoException(\"Failed to create mock instance of type: \" + mockedProxyType.getName());\n         }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+        MockMethodInterceptor.MockAccess mockAccess = null; // initialize to null to avoid NPE\n+        if (MockMethodInterceptor.MockAccess.class.isAssignableFrom(mockedProxyType)) {\n+            mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n+        }\n+        MockMethodInterceptor mockitoInterceptor = new MockMethodInterceptor(asInternalMockHandler(handler), settings);\n+        if (mockAccess != null) {\n+            mockAccess.setMockitoInterceptor(mockitoInterceptor);\n+        } else {\n+            Field field = getField(mockedProxyType, \"$$delegatedInstance\");\n+            if (field != null) {\n+                field.setAccessible(true);\n+                Object delegatedInstance = field.get(mockInstance);\n+                if (delegatedInstance != null) {\n+                    ((MockAccess) delegatedInstance).setMockitoInterceptor(mockitoInterceptor);\n+                }\n+            }\n+        }\n+        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n+    } catch (ClassCastException cce) {\n+        throw new MockitoException(join(\n+                \"ClassCastException occurred while creating the mock :\",\n+                \"  class to mock : \" + describeClass(mockedProxyType),\n+                \"  created class : \" + describeClass(settings.getTypeToMock()),\n+                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n+                \"\",\n+                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n+                \"\"\n+        ),cce);\n+    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n+        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+    } catch (IllegalAccessException e) {\n+        throw new MockitoException(e.getMessage(), e);\n+    }\n+}\n \n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+private Field getField(Class<?> clazz, String name) {\n+    while (clazz != null) {\n+        for (Field field : clazz.getDeclaredFields()) {\n+            if (field.getName().equals(name)) {\n+                return field;\n+            }\n         }\n+        clazz = clazz.getSuperclass();\n     }\n+    return null;\n+}\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}