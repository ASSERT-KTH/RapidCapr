{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    long durationMillis = getMillis();\n    durationMillis += getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n    durationMillis += getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n    durationMillis += getHours() * DateTimeConstants.MILLIS_PER_HOUR;\n    durationMillis += getDays() * DateTimeConstants.MILLIS_PER_DAY;\n    durationMillis += getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n\n    // Split the period into years, months, weeks, and days.\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n\n    // Normalize months and add to years.\n    years += months / 12;\n    months = months % 12;\n\n    // Normalize weeks and add to days.\n    days += weeks * 7;\n\n    // Build and return the normalized period.\n    Period result = new Period(durationMillis, type, ISOChronology.getInstanceUTC())\n                        .withYears(years)\n                        .withMonths(months)\n                        .withWeeks(0)\n                        .withDays(0);\n    result = result.normalizedStandard(type)\n                   .withDays(days);\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..38cfbc13 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,36 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    long durationMillis = getMillis();\n+    durationMillis += getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n+    durationMillis += getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n+    durationMillis += getHours() * DateTimeConstants.MILLIS_PER_HOUR;\n+    durationMillis += getDays() * DateTimeConstants.MILLIS_PER_DAY;\n+    durationMillis += getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n+\n+    // Split the period into years, months, weeks, and days.\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+\n+    // Normalize months and add to years.\n+    years += months / 12;\n+    months = months % 12;\n+\n+    // Normalize weeks and add to days.\n+    days += weeks * 7;\n+\n+    // Build and return the normalized period.\n+    Period result = new Period(durationMillis, type, ISOChronology.getInstanceUTC())\n+                        .withYears(years)\n+                        .withMonths(months)\n+                        .withWeeks(0)\n+                        .withDays(0);\n+    result = result.normalizedStandard(type)\n+                   .withDays(days);\n+    return result;\n+}\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}