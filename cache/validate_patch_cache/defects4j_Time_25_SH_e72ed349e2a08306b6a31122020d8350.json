{
    "patch": "                // We need to ensure that we are not in a gap and the gap has caused the mismatch\n                if (nextLocal == instantLocal && nextAdjusted == instantAdjusted) {\n                    return offsetAdjusted;\n                }\n\n                if (nextLocal != nextAdjusted) {\n                    // if we want to preserve local time, we need to transition\n                    // at or after instantLocal\n                    if (nextLocal > instantLocal - offsetAdjusted) {\n                        return offsetLocal;\n                    }\n                    return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..c32b7140 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,18 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // We need to ensure that we are not in a gap and the gap has caused the mismatch\n+                if (nextLocal == instantLocal && nextAdjusted == instantAdjusted) {\n+                    return offsetAdjusted;\n+                }\n+\n+                if (nextLocal != nextAdjusted) {\n+                    // if we want to preserve local time, we need to transition\n+                    // at or after instantLocal\n+                    if (nextLocal > instantLocal - offsetAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                    return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}