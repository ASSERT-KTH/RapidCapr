{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n    // Fix the bug when nextLocal is greater than nextAdjusted\n    if (nextLocal > instantAdjusted) {\n        if (nextLocal + offsetLocal <= instantLocal) {\n            return offsetLocal;\n        }\n    } else {\n        if (nextAdjusted + offsetAdjusted <= instantAdjusted) {\n            return offsetLocal;\n        }\n    }\n} else if (offsetLocal > offsetAdjusted) {\n    long prevLocal = previousTransition(instantAdjusted);\n    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n    if (prevLocal != prevAdjusted) {\n        return offsetLocal;\n    }\n} else if (offsetLocal == offsetAdjusted) {\n    return offsetLocal;\n} else if (offsetLocal < 0 && offsetAdjusted == 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n    if (nextLocal != nextAdjusted) {\n        return offsetLocal;     \n    }\n}\n\n// check if time is in a \"fall-back\" transition\nlong prevLocal = previousTransition(instantAdjusted);\nlong prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\nif (prevAdjusted < instantAdjusted && prevLocal >= instantAdjusted) { // fixed\n    // if so, use the earlier offset\n    return getOffset(prevLocal);\n}\n\nif (offsetAdjusted > offsetLocal) {\n    // go forward from the instant until we hit a wall\n    long nextLocal = nextTransition(instantAdjusted);\n    int offsetNextLocal = getOffset(nextLocal);\n    if (offsetNextLocal > offsetLocal) {\n        long wall = nextLocal + offsetNextLocal;\n        long nextAdjusted = nextTransition(Math.max(instantLocal, wall));\n        int offsetNextAdjusted = getOffset(nextAdjusted);\n        if (offsetNextAdjusted > offsetLocal) {\n            return offsetLocal;\n        } else {\n            return offsetNextAdjusted;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..015ace01 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,60 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+    // Fix the bug when nextLocal is greater than nextAdjusted\n+    if (nextLocal > instantAdjusted) {\n+        if (nextLocal + offsetLocal <= instantLocal) {\n+            return offsetLocal;\n+        }\n+    } else {\n+        if (nextAdjusted + offsetAdjusted <= instantAdjusted) {\n+            return offsetLocal;\n+        }\n+    }\n+} else if (offsetLocal > offsetAdjusted) {\n+    long prevLocal = previousTransition(instantAdjusted);\n+    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+    if (prevLocal != prevAdjusted) {\n+        return offsetLocal;\n+    }\n+} else if (offsetLocal == offsetAdjusted) {\n+    return offsetLocal;\n+} else if (offsetLocal < 0 && offsetAdjusted == 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+    if (nextLocal != nextAdjusted) {\n+        return offsetLocal;     \n+    }\n+}\n+\n+// check if time is in a \"fall-back\" transition\n+long prevLocal = previousTransition(instantAdjusted);\n+long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+if (prevAdjusted < instantAdjusted && prevLocal >= instantAdjusted) { // fixed\n+    // if so, use the earlier offset\n+    return getOffset(prevLocal);\n+}\n+\n+if (offsetAdjusted > offsetLocal) {\n+    // go forward from the instant until we hit a wall\n+    long nextLocal = nextTransition(instantAdjusted);\n+    int offsetNextLocal = getOffset(nextLocal);\n+    if (offsetNextLocal > offsetLocal) {\n+        long wall = nextLocal + offsetNextLocal;\n+        long nextAdjusted = nextTransition(Math.max(instantLocal, wall));\n+        int offsetNextAdjusted = getOffset(nextAdjusted);\n+        if (offsetNextAdjusted > offsetLocal) {\n+            return offsetLocal;\n+        } else {\n+            return offsetNextAdjusted;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}