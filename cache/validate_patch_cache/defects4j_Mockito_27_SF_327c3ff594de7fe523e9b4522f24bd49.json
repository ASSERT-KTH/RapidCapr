{
    "patch": "private static Map<Object, MockHandler<?>> mockHandlers = new HashMap<>();\nprivate static MethodInterceptorFilter methodInterceptorFilter = null;\n\npublic <T> T resetMock(T mock) {\n    org.mockito.Mockito.reset(mock);\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = (MockHandler<T>) mockHandlers.computeIfAbsent(mock, key -> new MockHandler<>(oldMockHandler));\n    if (methodInterceptorFilter == null) {\n        methodInterceptorFilter = new MethodInterceptorFilter(newMockHandler,\n                (MockSettingsImpl) org.mockito.Mockito.withSettings()\n                    .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    }\n    ((Factory) mock).setCallback(0, methodInterceptorFilter);\n    return mock;\n}\n\nprivate <T> MockHandlerInterface<T> getMockHandler(T mock) {\n    return ((Factory) mock).getInvocationHandler();\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..fdc75a39d 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,26 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+private static Map<Object, MockHandler<?>> mockHandlers = new HashMap<>();\n+private static MethodInterceptorFilter methodInterceptorFilter = null;\n+\n+public <T> T resetMock(T mock) {\n+    org.mockito.Mockito.reset(mock);\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = (MockHandler<T>) mockHandlers.computeIfAbsent(mock, key -> new MockHandler<>(oldMockHandler));\n+    if (methodInterceptorFilter == null) {\n+        methodInterceptorFilter = new MethodInterceptorFilter(newMockHandler,\n+                (MockSettingsImpl) org.mockito.Mockito.withSettings()\n+                    .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    }\n+    ((Factory) mock).setCallback(0, methodInterceptorFilter);\n+    return mock;\n+}\n+\n+private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n+    return ((Factory) mock).getInvocationHandler();\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}