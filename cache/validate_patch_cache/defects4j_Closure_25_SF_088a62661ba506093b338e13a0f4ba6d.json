{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n        Node constructor = n.getFirstChild();\n        scope = traverse(constructor, scope);\n        JSType constructorType = constructor.getJSType();\n        JSType type = null;\n        if (constructorType != null) {\n            constructorType = constructorType.restrictByNotNullOrUndefined();\n            if (constructorType.isUnknownType()) {\n                type = getNativeType(UNKNOWN_TYPE);\n            } else {\n                FunctionType ct = constructorType.toMaybeFunctionType();\n                if (ct == null && constructorType instanceof NoObjectType) {\n                    // If constructorType is a NoObjectType, then it can validly construct objects\n                    ct = constructorType.toMaybeObjectType().getConstructor();\n                }\n                if (ct != null && ct.isConstructor()) {\n                    ObjectType instanceType = ct.getInstanceType();\n                    // Handle the case where instanceType is undefined.\n                    if (instanceType != null && !instanceType.isBottom()) {\n                        type = instanceType.withProperty(\"prototype\").getTopProp(\"constructor\");\n                    }\n                }\n            }\n        }\n        n.setJSType(type);\n        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n            scope = traverse(arg, scope);\n        }\n        return scope;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..97395314 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,35 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+        Node constructor = n.getFirstChild();\n+        scope = traverse(constructor, scope);\n+        JSType constructorType = constructor.getJSType();\n+        JSType type = null;\n+        if (constructorType != null) {\n+            constructorType = constructorType.restrictByNotNullOrUndefined();\n+            if (constructorType.isUnknownType()) {\n+                type = getNativeType(UNKNOWN_TYPE);\n+            } else {\n+                FunctionType ct = constructorType.toMaybeFunctionType();\n+                if (ct == null && constructorType instanceof NoObjectType) {\n+                    // If constructorType is a NoObjectType, then it can validly construct objects\n+                    ct = constructorType.toMaybeObjectType().getConstructor();\n+                }\n+                if (ct != null && ct.isConstructor()) {\n+                    ObjectType instanceType = ct.getInstanceType();\n+                    // Handle the case where instanceType is undefined.\n+                    if (instanceType != null && !instanceType.isBottom()) {\n+                        type = instanceType.withProperty(\"prototype\").getTopProp(\"constructor\");\n+                    }\n+                }\n+            }\n         }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        n.setJSType(type);\n+        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+            scope = traverse(arg, scope);\n         }\n-      }\n-    }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n-    return scope;\n-  }\n+        return scope;\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}