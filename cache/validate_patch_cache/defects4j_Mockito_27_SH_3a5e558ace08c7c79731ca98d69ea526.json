{
    "patch": "        T newMock = Mockito.mock(mock.getClass(), newFilter);\n        Field[] fields = oldMock.getClass().getDeclaredFields();\n        for (Field field : fields) {\n            if (!field.isAccessible()) {\n                field.setAccessible(true);\n            }\n            try {\n                Object value = field.get(oldMock);\n                if (value instanceof MockitoSpy) {\n                    Object spiedValue = ((MockitoSpy) value).getTarget();\n                    Object newSpiedValue = Mockito.spy(spiedValue);\n                    field.set(newMock, newSpiedValue);\n\n                    continue;\n                }\n            } catch (IllegalAccessException e) {\n                // empty\n            }\n\n            Object value = Mockito.mock(field.getType(), newFilter);\n            try {\n                field.set(newMock, value);\n            } catch (IllegalAccessException e) {\n                // empty\n            }\n        }\n        mock = newMock;",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..025678c13 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,36 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        T newMock = Mockito.mock(mock.getClass(), newFilter);\n+        Field[] fields = oldMock.getClass().getDeclaredFields();\n+        for (Field field : fields) {\n+            if (!field.isAccessible()) {\n+                field.setAccessible(true);\n+            }\n+            try {\n+                Object value = field.get(oldMock);\n+                if (value instanceof MockitoSpy) {\n+                    Object spiedValue = ((MockitoSpy) value).getTarget();\n+                    Object newSpiedValue = Mockito.spy(spiedValue);\n+                    field.set(newMock, newSpiedValue);\n+\n+                    continue;\n+                }\n+            } catch (IllegalAccessException e) {\n+                // empty\n+            }\n+\n+            Object value = Mockito.mock(field.getType(), newFilter);\n+            try {\n+                field.set(newMock, value);\n+            } catch (IllegalAccessException e) {\n+                // empty\n+            }\n+        }\n+        mock = newMock;\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}