{
    "patch": "attachLiteralTypes(n);\nNode grandparent = parent.getParent();\nswitch (n.getType()) {\n  case Token.FUNCTION:\n    if (parent.getType() == Token.NAME) {\n      return;\n    }\n    defineDeclaredFunction(n, parent);\n    break;\n  case Token.CATCH:\n    defineCatch(n, parent);\n    break;\n  case Token.VAR:\n    defineVar(n, parent);\n    break;\n  case Token.LP:\n    if (parent == grandparent.getFirstChild() && grandparent.getType() == Token.FUNCTION) {\n      defineDeclaredFunction(grandparent, grandparent.getParent());\n    } else if (parent.getParent() == scope.getRootNode()) {\n      handleFunctionInputs(parent.getParent());\n    }\n    break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..7804fc79 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,29 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+attachLiteralTypes(n);\n+Node grandparent = parent.getParent();\n+switch (n.getType()) {\n+  case Token.FUNCTION:\n+    if (parent.getType() == Token.NAME) {\n+      return;\n+    }\n+    defineDeclaredFunction(n, parent);\n+    break;\n+  case Token.CATCH:\n+    defineCatch(n, parent);\n+    break;\n+  case Token.VAR:\n+    defineVar(n, parent);\n+    break;\n+  case Token.LP:\n+    if (parent == grandparent.getFirstChild() && grandparent.getType() == Token.FUNCTION) {\n+      defineDeclaredFunction(grandparent, grandparent.getParent());\n+    } else if (parent.getParent() == scope.getRootNode()) {\n+      handleFunctionInputs(parent.getParent());\n+    }\n+    break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}