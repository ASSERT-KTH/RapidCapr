{
    "patch": "      // Strip unreferenced formal parameters.\n      int numArgsToRemove = 0;\n      Node arg = argList.getFirstChild();\n      while (arg != null) {\n        Preconditions.checkState(arg.isName());\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          arg.getNext().remove();\n          arg = arg.getNext();\n          numArgsToRemove++;\n          compiler.reportCodeChange();\n        } else {\n          arg = arg.getNext();\n        }\n      }\n\n      if (numArgsToRemove > 0) {\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..11073780 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,24 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // Strip unreferenced formal parameters.\n+      int numArgsToRemove = 0;\n+      Node arg = argList.getFirstChild();\n+      while (arg != null) {\n+        Preconditions.checkState(arg.isName());\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          arg.getNext().remove();\n+          arg = arg.getNext();\n+          numArgsToRemove++;\n+          compiler.reportCodeChange();\n+        } else {\n+          arg = arg.getNext();\n+        }\n+      }\n+\n+      if (numArgsToRemove > 0) {\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}