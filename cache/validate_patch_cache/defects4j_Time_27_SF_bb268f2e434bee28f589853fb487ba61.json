{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        List<Object> remainingPairs = elementPairs.subList(1, size);\n        int nonLiteralIndex = -1;\n        for (int i = 0; i < remainingPairs.size(); i++) {\n            if (!(remainingPairs.get(i) instanceof Literal)) {\n                nonLiteralIndex = i;\n                break;\n            }\n        }\n        List<Object> printerPairs, parserPairs;\n        if (nonLiteralIndex < 0) {\n            // only literals after the separator, no printer/parser needed\n            printerPairs = null;\n            parserPairs = null;\n        } else {\n            printerPairs = remainingPairs.subList(0, nonLiteralIndex);\n            parserPairs = remainingPairs.subList(nonLiteralIndex, remainingPairs.size());\n        }\n        PeriodFormatter printerFormatter, parserFormatter;\n        if (printerPairs != null) {\n            printerFormatter = toFormatter(printerPairs, false, true);\n        } else {\n            printerFormatter = null;\n        }\n        if (parserPairs != null) {\n            parserFormatter = toFormatter(parserPairs, true, false);\n        } else {\n            parserFormatter = null;\n        }\n        if (printerFormatter != null && parserFormatter != null) {\n            sep = sep.finish(printerFormatter.getPrinter(), parserFormatter.getParser());\n        }\n        return new PeriodFormatter(sep, sep);\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..8ceb0263 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,55 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        List<Object> remainingPairs = elementPairs.subList(1, size);\n+        int nonLiteralIndex = -1;\n+        for (int i = 0; i < remainingPairs.size(); i++) {\n+            if (!(remainingPairs.get(i) instanceof Literal)) {\n+                nonLiteralIndex = i;\n+                break;\n+            }\n+        }\n+        List<Object> printerPairs, parserPairs;\n+        if (nonLiteralIndex < 0) {\n+            // only literals after the separator, no printer/parser needed\n+            printerPairs = null;\n+            parserPairs = null;\n+        } else {\n+            printerPairs = remainingPairs.subList(0, nonLiteralIndex);\n+            parserPairs = remainingPairs.subList(nonLiteralIndex, remainingPairs.size());\n+        }\n+        PeriodFormatter printerFormatter, parserFormatter;\n+        if (printerPairs != null) {\n+            printerFormatter = toFormatter(printerPairs, false, true);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            printerFormatter = null;\n         }\n+        if (parserPairs != null) {\n+            parserFormatter = toFormatter(parserPairs, true, false);\n+        } else {\n+            parserFormatter = null;\n+        }\n+        if (printerFormatter != null && parserFormatter != null) {\n+            sep = sep.finish(printerFormatter.getPrinter(), parserFormatter.getParser());\n+        }\n+        return new PeriodFormatter(sep, sep);\n     }\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.IllegalArgumentException: Invalid format: \"P0D\" is too short",
    "test_result": "FAIL"
}