{
    "patch": "        SavedField lastSavedField = null;\n        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            if (lastSavedField != null) {\n                DurationField currentField = lastSavedField.iField.getDurationField();\n                DurationField nextDurationField = savedField.iField.getDurationField();\n                if (compareReverse(currentField, nextDurationField) > 0) {\n                    throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField.getName() + \" -> \" + nextDurationField.getName());\n                }\n            }\n            try {\n                if (lastSavedField != null && savedField.iField.getType() == DateTimeFieldType.weekyear() &&\n                        lastSavedField.iField.getType() == DateTimeFieldType.monthOfYear()) {\n                    // Parse error occurred on the weekyear field; try to compensate by setting the weekyear field to previous value\n                    millis = lastSavedField.set(millis, false);\n                }\n                millis = savedField.set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                // Year is occasionally interpreted wrong due to Gregorian Reform\n                if (DateTimeFieldType.year().equals(savedFields[i].iField.getType())) {\n                    iDefaultYear = -iDefaultYear;\n                    long instant = savedFields[i].iField.set(0L, iDefaultYear);\n                    millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n                } else if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                    throw e;\n                } else {\n                    throw e;\n                }\n            }\n            lastSavedField = savedField;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..bf0379c8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,38 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        SavedField lastSavedField = null;\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            if (lastSavedField != null) {\n+                DurationField currentField = lastSavedField.iField.getDurationField();\n+                DurationField nextDurationField = savedField.iField.getDurationField();\n+                if (compareReverse(currentField, nextDurationField) > 0) {\n+                    throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField.getName() + \" -> \" + nextDurationField.getName());\n+                }\n+            }\n+            try {\n+                if (lastSavedField != null && savedField.iField.getType() == DateTimeFieldType.weekyear() &&\n+                        lastSavedField.iField.getType() == DateTimeFieldType.monthOfYear()) {\n+                    // Parse error occurred on the weekyear field; try to compensate by setting the weekyear field to previous value\n+                    millis = lastSavedField.set(millis, false);\n+                }\n+                millis = savedField.set(millis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                // Year is occasionally interpreted wrong due to Gregorian Reform\n+                if (DateTimeFieldType.year().equals(savedFields[i].iField.getType())) {\n+                    iDefaultYear = -iDefaultYear;\n+                    long instant = savedFields[i].iField.set(0L, iDefaultYear);\n+                    millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n+                } else if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                    throw e;\n+                } else {\n+                    throw e;\n+                }\n+            }\n+            lastSavedField = savedField;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}