{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, NUMBER, GET, SET\n        if (!child.isString() && !child.isNumber()) {\n          // This is an error condition, but we'll just ignore it.\n          continue;\n        }\n\n        // We should never see a mix of numbers and strings.\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..56743184 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -491,7 +491,11 @@ class DisambiguateProperties<T> implements CompilerPass {\n       for (Node child = n.getFirstChild();\n           child != null;\n           child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n+        // Maybe STRING, NUMBER, GET, SET\n+        if (!child.isString() && !child.isNumber()) {\n+          // This is an error condition, but we'll just ignore it.\n+          continue;\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}