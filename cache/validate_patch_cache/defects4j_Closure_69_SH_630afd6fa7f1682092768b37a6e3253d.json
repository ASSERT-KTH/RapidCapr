{
    "patch": "private void visitCall(NodeTraversal t, Node n) {\n  Node child = n.getFirstChild();\n\n  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n  if (!childType.canBeCalled()) {\n    report(t, n, NOT_CALLABLE, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n\n  if (childType instanceof FunctionType) {\n    FunctionType functionType = (FunctionType) childType;\n\n    boolean isExtern = false;\n    JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n    if(functionJSDocInfo != null) {\n      String sourceName = functionJSDocInfo.getSourceName();\n      CompilerInput functionSource = compiler.getInput(sourceName);\n      isExtern = functionSource.isExtern();\n    }\n\n    if (functionType.isConstructor() &&\n        !functionType.isNativeObjectType() &&\n        (functionType.getReturnType().isUnknownType() ||\n         functionType.getReturnType().isVoidType() ||\n         !isExtern)) {\n      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n    }\n\n    Node parent = n.getParent();\n    if (functionType.getTypeOfThis() != null &&\n        !(NodeUtil.isGetOrSetKey(parent) &&\n          parent.getParent().isGetProp() &&\n          parent.getGrandparent().isExprResult()) &&\n        !NodeUtil.isFunctionExpression(parent)) {\n      report(t, n, EXPECTED_THIS_TYPE, functionType.getTypeOfThis().toString());\n    }\n\n    visitParameterList(t, n, functionType);\n    ensureTyped(t, n, functionType.getReturnType());\n  } else {\n    ensureTyped(t, n);\n  }\n\n  // TODO: Add something to check for calls of RegExp objects, which is not\n  // supported by IE.  Either say something about the return type or warn\n  // about the non-portability of the call or both.\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..27601afd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,55 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+private void visitCall(NodeTraversal t, Node n) {\n+  Node child = n.getFirstChild();\n+\n+  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n+\n+  if (!childType.canBeCalled()) {\n+    report(t, n, NOT_CALLABLE, childType.toString());\n+    ensureTyped(t, n);\n+    return;\n+  }\n+\n+  if (childType instanceof FunctionType) {\n+    FunctionType functionType = (FunctionType) childType;\n+\n+    boolean isExtern = false;\n+    JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+    if(functionJSDocInfo != null) {\n+      String sourceName = functionJSDocInfo.getSourceName();\n+      CompilerInput functionSource = compiler.getInput(sourceName);\n+      isExtern = functionSource.isExtern();\n+    }\n+\n+    if (functionType.isConstructor() &&\n+        !functionType.isNativeObjectType() &&\n+        (functionType.getReturnType().isUnknownType() ||\n+         functionType.getReturnType().isVoidType() ||\n+         !isExtern)) {\n+      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+    }\n+\n+    Node parent = n.getParent();\n+    if (functionType.getTypeOfThis() != null &&\n+        !(NodeUtil.isGetOrSetKey(parent) &&\n+          parent.getParent().isGetProp() &&\n+          parent.getGrandparent().isExprResult()) &&\n+        !NodeUtil.isFunctionExpression(parent)) {\n+      report(t, n, EXPECTED_THIS_TYPE, functionType.getTypeOfThis().toString());\n+    }\n+\n+    visitParameterList(t, n, functionType);\n+    ensureTyped(t, n, functionType.getReturnType());\n+  } else {\n+    ensureTyped(t, n);\n+  }\n+\n+  // TODO: Add something to check for calls of RegExp objects, which is not\n+  // supported by IE.  Either say something about the return type or warn\n+  // about the non-portability of the call or both.\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}