{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    RealMatrix sqrtM;\n    try {\n        final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n        sqrtM = dec.getL();\n    } catch (Exception e1) {\n        final EigenDecomposition eig = new EigenDecomposition(m);\n        final RealMatrix v = eig.getV();\n        final RealMatrix d = eig.getD();\n        for (int i = 0; i < d.getRowDimension(); i++) {\n            if (d.getEntry(i, i) < 0) {\n                throw new IllegalArgumentException(\"Matrix is not positive definite\");\n            }\n            d.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n        }\n        sqrtM = v.multiply(d).multiply(v.transpose());\n    }\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..3acff9eda 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    RealMatrix sqrtM;\n+    try {\n+        final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+        sqrtM = dec.getL();\n+    } catch (Exception e1) {\n+        final EigenDecomposition eig = new EigenDecomposition(m);\n+        final RealMatrix v = eig.getV();\n+        final RealMatrix d = eig.getD();\n+        for (int i = 0; i < d.getRowDimension(); i++) {\n+            if (d.getEntry(i, i) < 0) {\n+                throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+            }\n+            d.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n+        }\n+        sqrtM = v.multiply(d).multiply(v.transpose());\n     }\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}