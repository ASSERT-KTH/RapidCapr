{
    "patch": "        private void readTypeVariables() {\n            for (Type type : typeVariable.getBounds()) {\n                registerTypeVariablesOn(type);\n            }\n            Type actualTypeArgument;\n            if (typeVariable instanceof TypeVariable) {\n                Type[] actualTypeArguments = ((TypeVariable<?>) typeVariable).getActualTypeArguments();\n                actualTypeArgument = actualTypeArguments.length > 0 ? actualTypeArguments[0] : Object.class;\n            } else {\n                actualTypeArgument = typeVariable;\n            }\n            registerTypeVariablesOn(actualTypeArgument);\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..0aad8aed2 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,24 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+        private void readTypeVariables() {\n+            for (Type type : typeVariable.getBounds()) {\n+                registerTypeVariablesOn(type);\n+            }\n+            Type actualTypeArgument;\n+            if (typeVariable instanceof TypeVariable) {\n+                Type[] actualTypeArguments = ((TypeVariable<?>) typeVariable).getActualTypeArguments();\n+                actualTypeArgument = actualTypeArguments.length > 0 ? actualTypeArguments[0] : Object.class;\n+            } else {\n+                actualTypeArgument = typeVariable;\n+            }\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}