{
    "patch": "    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n            Separator sep = (Separator) elementPairs.get(0);\n            Object next = elementPairs.get(1);\n            boolean nested = false;\n            if (next instanceof Separator) {\n                Separator[] array = new Separator[size - 1];\n                nested = true;\n                for (int i = 1; i < size; i++) {\n                    array[i - 1] = (Separator) elementPairs.get(i);\n                }\n                next = array;\n            }\n            PeriodFormatter f = toFormatter(elementPairs.subList(nested ? 2 : 1, size), notPrinter, notParser);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            Object printer = nested ? new Composite(array(sep, f.getPrinter())) : sep;\n            Object parser = nested ? new Composite(array(sep, f.getParser())) : sep;\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) parser);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) printer, null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) printer, (PeriodParser) parser);\n            }\n        }\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n\n    private static Object[] array(Object element) {\n        Object[] array = new Object[1];\n        array[0] = element;\n        return array;\n    }\n\n    private static Object[] array(Object e1, Object e2) {\n        Object[] array = new Object[2];\n        array[0] = e1;\n        array[1] = e2;\n        return array;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..bf0cb1d3 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -798,9 +798,27 @@ public class PeriodFormatterBuilder {\n         int size = elementPairs.size();\n         if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n             Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+            Object next = elementPairs.get(1);\n+            boolean nested = false;\n+            if (next instanceof Separator) {\n+                Separator[] array = new Separator[size - 1];\n+                nested = true;\n+                for (int i = 1; i < size; i++) {\n+                    array[i - 1] = (Separator) elementPairs.get(i);\n+                }\n+                next = array;\n+            }\n+            PeriodFormatter f = toFormatter(elementPairs.subList(nested ? 2 : 1, size), notPrinter, notParser);\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+            Object printer = nested ? new Composite(array(sep, f.getPrinter())) : sep;\n+            Object parser = nested ? new Composite(array(sep, f.getParser())) : sep;\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) parser);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) printer, null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) printer, (PeriodParser) parser);\n+            }\n         }\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n@@ -812,6 +830,19 @@ public class PeriodFormatterBuilder {\n         }\n     }\n \n+    private static Object[] array(Object element) {\n+        Object[] array = new Object[1];\n+        array[0] = element;\n+        return array;\n+    }\n+\n+    private static Object[] array(Object e1, Object e2) {\n+        Object[] array = new Object[2];\n+        array[0] = e1;\n+        array[1] = e2;\n+        return array;\n+    }\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: constructor Composite in class Composite cannot be applied to given types;",
    "test_result": "ERROR"
}