{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n        String ns = arg.getString();\n        ProvidedName provided = providedNames.get(ns);\n        if (provided == null || !provided.isExplicitlyProvided()) {\n            unrecognizedRequires.add(\n                new UnrecognizedRequire(n, ns, t.getSourceName()));\n        } else {\n            JSModule providedModule = provided.explicitModule;\n\n            // This must be non-null, because there was an explicit provide.\n            Preconditions.checkNotNull(providedModule);\n\n            JSModule module = t.getModule();\n            if (moduleGraph != null &&\n                    module != providedModule &&\n                    !moduleGraph.dependsOn(module, providedModule)) {\n                compiler.report(\n                        t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                                providedModule.getName(),\n                                module.getName()));\n            }\n        }\n\n        maybeAddToSymbolTable(left);\n        maybeAddStringNodeToSymbolTable(arg);\n\n        if (provided != null && provided.isExplicitlyProvided()) {\n            parent.removeChild(n);\n            t.getCompiler().reportCodeChange();\n            n = null; // set n to null after removal from parent\n        }\n    }\n\n    // Process the next sibling node\n    Node next = (n != null) ? n.getNext() : null;\n    if (next != null) {\n        processNextNode(t, next, parent);\n    }\n}\n\nprivate void processNextNode(NodeTraversal t, Node n, Node parent) {\n    // Recurse into the next node.\n    switch (n.getToken()) {\n        case SCRIPT:\n            processScriptNode(t, n);\n            break;\n        case BLOCK:\n        case FUNCTION:\n        case SWITCH:\n        case IF:\n        case TRY:\n        case CATCH:\n        case WHILE:\n        case DO:\n        case FOR:\n        case FOR_OF:\n        case FOR_AWAIT_OF:\n        case HOOK:\n            Node child = n.getFirstChild();\n            while (child != null) {\n                Node next = child.getNext();\n                processNextNode(t, child, n);\n                child = next;\n            }\n            break;\n        case EXPR_RESULT:\n            processExprResultNode(t, n, parent);\n            break;\n        default:\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..ef636aec 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,46 +292,81 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n     Node arg = left.getNext();\n     if (verifyLastArgumentIsString(t, left, arg)) {\n-      String ns = arg.getString();\n-      ProvidedName provided = providedNames.get(ns);\n-      if (provided == null || !provided.isExplicitlyProvided()) {\n-        unrecognizedRequires.add(\n-            new UnrecognizedRequire(n, ns, t.getSourceName()));\n-      } else {\n-        JSModule providedModule = provided.explicitModule;\n+        String ns = arg.getString();\n+        ProvidedName provided = providedNames.get(ns);\n+        if (provided == null || !provided.isExplicitlyProvided()) {\n+            unrecognizedRequires.add(\n+                new UnrecognizedRequire(n, ns, t.getSourceName()));\n+        } else {\n+            JSModule providedModule = provided.explicitModule;\n+\n+            // This must be non-null, because there was an explicit provide.\n+            Preconditions.checkNotNull(providedModule);\n+\n+            JSModule module = t.getModule();\n+            if (moduleGraph != null &&\n+                    module != providedModule &&\n+                    !moduleGraph.dependsOn(module, providedModule)) {\n+                compiler.report(\n+                        t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                                providedModule.getName(),\n+                                module.getName()));\n+            }\n+        }\n \n-        // This must be non-null, because there was an explicit provide.\n-        Preconditions.checkNotNull(providedModule);\n+        maybeAddToSymbolTable(left);\n+        maybeAddStringNodeToSymbolTable(arg);\n \n-        JSModule module = t.getModule();\n-        if (moduleGraph != null &&\n-            module != providedModule &&\n-            !moduleGraph.dependsOn(module, providedModule)) {\n-          compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n-                  providedModule.getName(),\n-                  module.getName()));\n+        if (provided != null && provided.isExplicitlyProvided()) {\n+            parent.removeChild(n);\n+            t.getCompiler().reportCodeChange();\n+            n = null; // set n to null after removal from parent\n         }\n-      }\n+    }\n \n-      maybeAddToSymbolTable(left);\n-      maybeAddStringNodeToSymbolTable(arg);\n+    // Process the next sibling node\n+    Node next = (n != null) ? n.getNext() : null;\n+    if (next != null) {\n+        processNextNode(t, next, parent);\n+    }\n+}\n \n-      // Requires should be removed before further processing.\n-      // Some clients run closure pass multiple times, first with\n-      // the checks for broken requires turned off. In these cases, we\n-      // allow broken requires to be preserved by the first run to\n-      // let them be caught in the subsequent run.\n-      if (provided != null) {\n-        parent.detachFromParent();\n-        compiler.reportCodeChange();\n-      }\n+private void processNextNode(NodeTraversal t, Node n, Node parent) {\n+    // Recurse into the next node.\n+    switch (n.getToken()) {\n+        case SCRIPT:\n+            processScriptNode(t, n);\n+            break;\n+        case BLOCK:\n+        case FUNCTION:\n+        case SWITCH:\n+        case IF:\n+        case TRY:\n+        case CATCH:\n+        case WHILE:\n+        case DO:\n+        case FOR:\n+        case FOR_OF:\n+        case FOR_AWAIT_OF:\n+        case HOOK:\n+            Node child = n.getFirstChild();\n+            while (child != null) {\n+                Node next = child.getNext();\n+                processNextNode(t, child, n);\n+                child = next;\n+            }\n+            break;\n+        case EXPR_RESULT:\n+            processExprResultNode(t, n, parent);\n+            break;\n+        default:\n+            break;\n     }\n-  }\n+}\n \n   /**\n    * Handles a goog.provide call.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}