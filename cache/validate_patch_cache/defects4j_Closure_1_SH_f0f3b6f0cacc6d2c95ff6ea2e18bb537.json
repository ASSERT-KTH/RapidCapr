{
    "patch": "I apologize for the error in my previous suggestion. Here is the correct hunk for the infill location:\n```\n// Strip unreferenced args off the end of the function declaration.\nNode lastArg;\nwhile ((lastArg = argList.getLastChild()) != null) {\n    Preconditions.checkState(lastArg.isName());\n    String paramName = lastArg.getString();\n    if (!referenced.contains(fnScope.getVar(paramName))) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n    } else {\n        break;\n    }\n}\n```\nPlease replace the previous hunk with this one.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..fb6bd637 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,22 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+I apologize for the error in my previous suggestion. Here is the correct hunk for the infill location:\n+```\n+// Strip unreferenced args off the end of the function declaration.\n+Node lastArg;\n+while ((lastArg = argList.getLastChild()) != null) {\n+    Preconditions.checkState(lastArg.isName());\n+    String paramName = lastArg.getString();\n+    if (!referenced.contains(fnScope.getVar(paramName))) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+    } else {\n+        break;\n+    }\n+}\n+```\n+Please replace the previous hunk with this one.\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}