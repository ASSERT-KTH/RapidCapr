{
    "patch": "    if (cArg != null && NodeUtil.isFunctionObjectApply(callNode)) {\n      // For an \"apply\" call, the arguments can appear in arbitrary order.\n      // They must be treated as though they were named in the parameter list,\n      // and in the correct order.\n      for (;fnParam != null && cArg != null; fnParam = fnParam.getNext(), cArg = cArg.getNext()) {\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n            && NodeUtil.getNameReferenceCount(fnNode, fnParam.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n      }\n      return CanInlineResult.YES;\n    }\n    int i = -1;\n    // Skip the function name\n    Node currentArg = callNode.getFirstChild().getNext();\n    while (currentArg != null){\n      i++;\n      if (currentArg == cArg) {\n        break;\n      }\n      currentArg = currentArg.getNext();\n    }\n    while (cArg != null || fnParam != null) {\n      if (fnParam != null) {\n        if (cArg != null) {\n\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getCallParameterReferenceCount(\n                  currentArg, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n          if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n            return CanInlineResult.NO;\n          }\n          cArg = cArg.getNext();\n        } else if (NodeUtil.getCallParameterReferenceCount(\n            currentArg, fnParam.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n        fnParam = fnParam.getNext(); \n      } else if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..4e950cc5 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,56 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n-\n-    Node block = fnNode.getLastChild();\n-\n-\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n+    if (cArg != null && NodeUtil.isFunctionObjectApply(callNode)) {\n+      // For an \"apply\" call, the arguments can appear in arbitrary order.\n+      // They must be treated as though they were named in the parameter list,\n+      // and in the correct order.\n+      for (;fnParam != null && cArg != null; fnParam = fnParam.getNext(), cArg = cArg.getNext()) {\n+        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n+            && NodeUtil.getNameReferenceCount(fnNode, fnParam.getString()) > 1) {\n+          return CanInlineResult.NO;\n+        }\n+        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n       }\n+      return CanInlineResult.YES;\n+    }\n+    int i = -1;\n+    // Skip the function name\n+    Node currentArg = callNode.getFirstChild().getNext();\n+    while (currentArg != null){\n+      i++;\n+      if (currentArg == cArg) {\n+        break;\n+      }\n+      currentArg = currentArg.getNext();\n     }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n         if (cArg != null) {\n \n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n           if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+              && NodeUtil.getCallParameterReferenceCount(\n+                  currentArg, fnParam.getString()) > 1) {\n+            return CanInlineResult.NO;\n+          }\n+          if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n             return CanInlineResult.NO;\n           }\n+          cArg = cArg.getNext();\n+        } else if (NodeUtil.getCallParameterReferenceCount(\n+            currentArg, fnParam.getString()) > 1) {\n+          return CanInlineResult.NO;\n         }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n+        fnParam = fnParam.getNext(); \n+      } else if (cArg != null) {\n         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           return CanInlineResult.NO;\n         }\n         cArg = cArg.getNext();\n-      }\n-    }\n-\n-    return CanInlineResult.YES;\n-  }\n+      } else {\n+        break;\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}