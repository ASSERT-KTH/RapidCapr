{
    "patch": "                boolean canThrow = false;\n                try {\n                    for (int i = 0; i < count; i++) {\n                        millis = savedFields[i].set(millis, resetFields);\n                    }\n                } catch (IllegalFieldValueException e) {\n                    canThrow = true;\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                    }\n                    throw e;\n                } finally {\n                    if (canThrow) {\n                        for (int i = 0; i < count; i++) {\n                            SavedField savedField = savedFields[i];\n                            int savedValue = savedField.iValue;\n                            if (savedValue == Integer.MIN_VALUE) {\n                                savedField.iValue = savedField.iField.getMinimumValue();\n                            } else if (savedValue == Integer.MAX_VALUE) {\n                                savedField.iValue = savedField.iField.getMaximumValue();\n                            } else {\n                                savedField.iValue = savedValue;\n                            }\n                        }\n                        iSavedFields = savedFields;\n                        iSavedFieldsShared = false;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..14c7274c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,34 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                boolean canThrow = false;\n+                try {\n+                    for (int i = 0; i < count; i++) {\n+                        millis = savedFields[i].set(millis, resetFields);\n+                    }\n+                } catch (IllegalFieldValueException e) {\n+                    canThrow = true;\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                    }\n+                    throw e;\n+                } finally {\n+                    if (canThrow) {\n+                        for (int i = 0; i < count; i++) {\n+                            SavedField savedField = savedFields[i];\n+                            int savedValue = savedField.iValue;\n+                            if (savedValue == Integer.MIN_VALUE) {\n+                                savedField.iValue = savedField.iField.getMinimumValue();\n+                            } else if (savedValue == Integer.MAX_VALUE) {\n+                                savedField.iValue = savedField.iField.getMaximumValue();\n+                            } else {\n+                                savedField.iValue = savedValue;\n+                            }\n+                        }\n+                        iSavedFields = savedFields;\n+                        iSavedFieldsShared = false;\n+                    }\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot assign a value to final variable iValue",
    "test_result": "ERROR"
}