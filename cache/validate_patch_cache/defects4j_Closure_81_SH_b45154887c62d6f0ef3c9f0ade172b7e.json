{
    "patch": "        // Set isParenthesized to true if the function is not named and is not immediately\n        // being called (i.e., the parent is not a FunctionCall node).\n        Node parent = getCurrentParent();\n        boolean isParenthesized = parent.getType() != Token.CALL;\n\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n        \n        if (isParenthesized) {\n          Node fakeNode = new Node(Token.EXPR_VOID, createZeroLengthPosition());\n          getCurrentParent().addChildToBack(fakeNode);\n          pushEnclosingAnonymousFunctionNode(fakeNode);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..9d560a0a 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,20 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+        // Set isParenthesized to true if the function is not named and is not immediately\n+        // being called (i.e., the parent is not a FunctionCall node).\n+        Node parent = getCurrentParent();\n+        boolean isParenthesized = parent.getType() != Token.CALL;\n+\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamedFunction = true;\n+        \n+        if (isParenthesized) {\n+          Node fakeNode = new Node(Token.EXPR_VOID, createZeroLengthPosition());\n+          getCurrentParent().addChildToBack(fakeNode);\n+          pushEnclosingAnonymousFunctionNode(fakeNode);\n+        }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}