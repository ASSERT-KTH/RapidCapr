{
    "patch": "    public <T> void resetMock(T mock) {\n        MockHandler<T> oldMockHandler = (MockHandler<T>) MockUtil.getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MockSettingsImpl mockSettings = Mockito.mockingDetails(mock).getMockSettings();\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, mockSettings.getDefaultAnswer());\n        ((Factory) mock).setCallback(0, newFilter);\n        MockUtil.setMockitoNamingPolicy(null); // Avoids issues with naming policies and custom matchers\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..f12193baf 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,15 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+    public <T> void resetMock(T mock) {\n+        MockHandler<T> oldMockHandler = (MockHandler<T>) MockUtil.getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MockSettingsImpl mockSettings = Mockito.mockingDetails(mock).getMockSettings();\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, mockSettings.getDefaultAnswer());\n+        ((Factory) mock).setCallback(0, newFilter);\n+        MockUtil.setMockitoNamingPolicy(null); // Avoids issues with naming policies and custom matchers\n+    }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: non-static method <T>getMockHandler(T) cannot be referenced from a static context",
    "test_result": "ERROR"
}