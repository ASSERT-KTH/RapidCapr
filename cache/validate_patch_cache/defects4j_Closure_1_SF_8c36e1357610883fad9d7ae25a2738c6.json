{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n\t// Strip unreferenced args off the end of the function declaration.\n\tif (fnScope.getDepth() != 0) {\n\t\tNode function = fnScope.getRootNode();\n\n\t\tPreconditions.checkState(function.isFunction());\n\t\tif (NodeUtil.isGetOrSetKey(function.getParent())) {\n\t\t\t// The parameters object literal setters can not be removed.\n\t\t\treturn;\n\t\t}\n\n\t\tNode argList = NodeUtil.getFunctionParameters(function);\n\n\t\tboolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n\t\tif (!modifyCallers) {\n\t\t\tNode lastArg;\n\t\t\twhile ((lastArg = argList.getLastChild()) != null) {\n\t\t\t\tif (!lastArg.isDefaultValue()) {\n\t\t\t\t\tVar var = scope.getVar(lastArg.getString());\n\t\t\t\t\t\n\t\t\t\t\tif (referenced.contains(var)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\targList.removeChild(lastArg);\n\n\t\t\t\t\treportCodeChange();\n\t\t\t\t} else {\n\t\t\t    \t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tcallSiteOptimizer.optimize(fnScope, referenced);\n\t\t}\n\t}\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9601361f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,43 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n-    }\n-  }\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+\t// Strip unreferenced args off the end of the function declaration.\n+\tif (fnScope.getDepth() != 0) {\n+\t\tNode function = fnScope.getRootNode();\n+\n+\t\tPreconditions.checkState(function.isFunction());\n+\t\tif (NodeUtil.isGetOrSetKey(function.getParent())) {\n+\t\t\t// The parameters object literal setters can not be removed.\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tNode argList = NodeUtil.getFunctionParameters(function);\n+\n+\t\tboolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+\t\tif (!modifyCallers) {\n+\t\t\tNode lastArg;\n+\t\t\twhile ((lastArg = argList.getLastChild()) != null) {\n+\t\t\t\tif (!lastArg.isDefaultValue()) {\n+\t\t\t\t\tVar var = scope.getVar(lastArg.getString());\n+\t\t\t\t\t\n+\t\t\t\t\tif (referenced.contains(var)) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\targList.removeChild(lastArg);\n+\n+\t\t\t\t\treportCodeChange();\n+\t\t\t\t} else {\n+\t\t\t    \t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tcallSiteOptimizer.optimize(fnScope, referenced);\n+\t\t}\n+\t}\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}