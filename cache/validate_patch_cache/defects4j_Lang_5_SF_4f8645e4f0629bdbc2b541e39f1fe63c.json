{
    "patch": "    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final char ch0 = str.charAt(0);\n        final char ch1 = str.charAt(1);\n        if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2) {\n            return new Locale(str);\n        }\n        if (len < 5) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (str.charAt(2) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final String[] parts = str.split(\"_\", -1);\n        final String language = parts[0];\n        if (!isValidLanguageCode(language)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        if (parts.length == 2) {\n            final String country = parts[1];\n            if (!isValidCountryCode(country)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(language, country);\n        } else if (parts.length == 3) {\n            final String variant = parts[2];\n            if (!isValidVariantCode(variant)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final String country = parts[1];\n            if (!isValidCountryCode(country)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(language, country, variant);\n        } else {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    }\n\n    private static boolean isValidLanguageCode(String language) {\n        String pattern = \"^[a-zA-Z]{2,8}$\";\n        return language.matches(pattern);\n    }\n\n    private static boolean isValidCountryCode(String country) {\n        if (country.isEmpty()) {\n            return true;\n        }\n        String pattern = \"^[a-zA-Z]{2}$\";\n        return country.matches(pattern);\n    }\n\n    private static boolean isValidVariantCode(String variant) {\n        if (variant.isEmpty()) {\n            return true;\n        }\n        String pattern = \"^[0-9a-zA-Z]{1,8}([_][0-9a-zA-Z]{1,8})*$\";\n        return variant.matches(pattern);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..7d3ea117 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -94,37 +94,66 @@ public class LocaleUtils {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n+        final char ch1 = str.charAt(1);\n+        if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        if (len == 2) {\n+            return new Locale(str);\n+        }\n+        if (len < 5) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        if (str.charAt(2) != '_') {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+\n+        final String[] parts = str.split(\"_\", -1);\n+        final String language = parts[0];\n+        if (!isValidLanguageCode(language)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+\n+        if (parts.length == 2) {\n+            final String country = parts[1];\n+            if (!isValidCountryCode(country)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n+            return new Locale(language, country);\n+        } else if (parts.length == 3) {\n+            final String variant = parts[2];\n+            if (!isValidVariantCode(variant)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            if (str.charAt(5) != '_') {\n+            final String country = parts[1];\n+            if (!isValidCountryCode(country)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+            return new Locale(language, country, variant);\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+    }\n+\n+    private static boolean isValidLanguageCode(String language) {\n+        String pattern = \"^[a-zA-Z]{2,8}$\";\n+        return language.matches(pattern);\n+    }\n+\n+    private static boolean isValidCountryCode(String country) {\n+        if (country.isEmpty()) {\n+            return true;\n+        }\n+        String pattern = \"^[a-zA-Z]{2}$\";\n+        return country.matches(pattern);\n+    }\n+\n+    private static boolean isValidVariantCode(String variant) {\n+        if (variant.isEmpty()) {\n+            return true;\n+        }\n+        String pattern = \"^[0-9a-zA-Z]{1,8}([_][0-9a-zA-Z]{1,8})*$\";\n+        return variant.matches(pattern);\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: _GB",
    "test_result": "FAIL"
}