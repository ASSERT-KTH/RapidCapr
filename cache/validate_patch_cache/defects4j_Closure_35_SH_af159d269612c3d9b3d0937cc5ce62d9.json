{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {      \n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n         if (!objType.isPropertyTypeDeclared(prop)) {\n           JSType typeToInfer = propType;\n           if (!objType.hasProperty(prop)) {\n            typeToInfer =\n               getNativeType(VOID_TYPE).getLeastSupertype(propType);\n           }\n           String inferredDescription = null;\n           if (propType.hasInferredTypeMarker()) {\n             inferredDescription = \"inferred type: \" + propType;\n           }\n           JSType inferred = typeToInfer != null ? typeToInfer : getNativeType(UNKNOWN_TYPE);\n           objType = objType.withProperty(prop, inferred, inferredDescription);\n         }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..9b7c52cc 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,21 +1118,25 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n+    if (constraintObj != null && constraintObj.isRecordType()) {      \n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n+         JSType propType = constraintObj.getPropertyType(prop);\n+         if (!objType.isPropertyTypeDeclared(prop)) {\n+           JSType typeToInfer = propType;\n+           if (!objType.hasProperty(prop)) {\n+            typeToInfer =\n+               getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+           }\n+           String inferredDescription = null;\n+           if (propType.hasInferredTypeMarker()) {\n+             inferredDescription = \"inferred type: \" + propType;\n+           }\n+           JSType inferred = typeToInfer != null ? typeToInfer : getNativeType(UNKNOWN_TYPE);\n+           objType = objType.withProperty(prop, inferred, inferredDescription);\n+         }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}