{
    "patch": "            Chronology chrono = partial.getChronology();\n            DateTimeField field = partial.getField(fieldIndex);\n            int currentValue = values[fieldIndex];\n            \n            // find last day of current month\n            int maxDayOfMonth = field.getMaximumValue(currentValue);\n            int dayOfMonth = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n            if (dayOfMonth > maxDayOfMonth) {\n                dayOfMonth = maxDayOfMonth;\n            }\n            \n            // create new partial with adjusted values\n            int[] newValues = Arrays.copyOf(values, values.length);\n            newValues[fieldIndex] = currentValue + valueToAdd;\n            Partial newPartial = new Partial(partial, newValues);\n            \n            // handle new date in a specific way if it is invalid in current partial\n            boolean isInvalid = !newPartial.isSupported(field.getDurationField()) || \n                                newPartial.get(field) != currentValue + valueToAdd;\n            if (isInvalid) {\n                int newValue = field.getRangeDurationField().getType().subtract(currentValue, maxDayOfMonth + 1);\n                newPartial = newPartial.withField(fieldIndex, newValue + valueToAdd);\n                newPartial = chrono.normalize(newPartial);\n            }\n            \n            return chrono.get(newPartial, 0);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..1d6193a8 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,32 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            Chronology chrono = partial.getChronology();\n+            DateTimeField field = partial.getField(fieldIndex);\n+            int currentValue = values[fieldIndex];\n+            \n+            // find last day of current month\n+            int maxDayOfMonth = field.getMaximumValue(currentValue);\n+            int dayOfMonth = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n+            if (dayOfMonth > maxDayOfMonth) {\n+                dayOfMonth = maxDayOfMonth;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            \n+            // create new partial with adjusted values\n+            int[] newValues = Arrays.copyOf(values, values.length);\n+            newValues[fieldIndex] = currentValue + valueToAdd;\n+            Partial newPartial = new Partial(partial, newValues);\n+            \n+            // handle new date in a specific way if it is invalid in current partial\n+            boolean isInvalid = !newPartial.isSupported(field.getDurationField()) || \n+                                newPartial.get(field) != currentValue + valueToAdd;\n+            if (isInvalid) {\n+                int newValue = field.getRangeDurationField().getType().subtract(currentValue, maxDayOfMonth + 1);\n+                newPartial = newPartial.withField(fieldIndex, newValue + valueToAdd);\n+                newPartial = chrono.normalize(newPartial);\n+            }\n+            \n+            return chrono.get(newPartial, 0);\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}