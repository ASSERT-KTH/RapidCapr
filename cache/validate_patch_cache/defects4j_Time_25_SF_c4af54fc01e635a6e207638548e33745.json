{
    "patch": "    public int getOffset(long instant) {\n        if (iCount == 0) {\n            return iStandardOffset;\n        }\n        // quick check\n        long info0 = iInfoCache[iCacheStart];\n        long info1 = iInfoCache[iCacheStart + 1];\n        long info2 = iInfoCache[iCacheStart + 2];\n        if (instant < info0 || instant >= info2) {\n            // regenerate cache\n            if (iCacheStart < (iInfoCache.length - 3)) {\n                iCacheStart++;\n            } else {\n                iCacheStart = 0;\n            }\n            iInfoCache[iCacheStart + 2] = 0;\n            iInfoCache[iCacheStart + 1] = iStandardOffset;\n            info2 = nextTransition(info0);\n            int i = 0;\n            while (info2 <= instant && i < iCount) {\n                iInfoCache[iCacheStart + (i * 3) + 2] = info2;\n                iInfoCache[iCacheStart + (i * 3) + 1] = iWallOffsets[i];\n                info2 = (i < (iTransitions.length - 1) ?\n                            iTransitions[i++] : Long.MAX_VALUE);\n            }\n            iInfoCache[iCacheStart + (i * 3) + 2] = Long.MAX_VALUE;\n            info1 = iInfoCache[iCacheStart + 4];\n        }\n        // binary search\n        int high = iCount;\n        int low = -1;\n        while (high - low > 1) {\n            int pivot = (high + low) >>> 1;\n            long mid = iInfoCache[iCacheStart + (pivot * 3) + 2];\n            if (mid <= instant) {\n                low = pivot;\n            } else {\n                high = pivot;\n            }\n        }\n        if (low >= 0) {\n            return iInfoCache[iCacheStart + (low * 3) + 1];\n        } else {\n            return iInitialWallOffset;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..35a7b2c2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,28 +876,51 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+    public int getOffset(long instant) {\n+        if (iCount == 0) {\n+            return iStandardOffset;\n+        }\n+        // quick check\n+        long info0 = iInfoCache[iCacheStart];\n+        long info1 = iInfoCache[iCacheStart + 1];\n+        long info2 = iInfoCache[iCacheStart + 2];\n+        if (instant < info0 || instant >= info2) {\n+            // regenerate cache\n+            if (iCacheStart < (iInfoCache.length - 3)) {\n+                iCacheStart++;\n+            } else {\n+                iCacheStart = 0;\n             }\n+            iInfoCache[iCacheStart + 2] = 0;\n+            iInfoCache[iCacheStart + 1] = iStandardOffset;\n+            info2 = nextTransition(info0);\n+            int i = 0;\n+            while (info2 <= instant && i < iCount) {\n+                iInfoCache[iCacheStart + (i * 3) + 2] = info2;\n+                iInfoCache[iCacheStart + (i * 3) + 1] = iWallOffsets[i];\n+                info2 = (i < (iTransitions.length - 1) ?\n+                            iTransitions[i++] : Long.MAX_VALUE);\n+            }\n+            iInfoCache[iCacheStart + (i * 3) + 2] = Long.MAX_VALUE;\n+            info1 = iInfoCache[iCacheStart + 4];\n+        }\n+        // binary search\n+        int high = iCount;\n+        int low = -1;\n+        while (high - low > 1) {\n+            int pivot = (high + low) >>> 1;\n+            long mid = iInfoCache[iCacheStart + (pivot * 3) + 2];\n+            if (mid <= instant) {\n+                low = pivot;\n+            } else {\n+                high = pivot;\n+            }\n+        }\n+        if (low >= 0) {\n+            return iInfoCache[iCacheStart + (low * 3) + 1];\n+        } else {\n+            return iInitialWallOffset;\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "error: method getOffset(long) is already defined in class DateTimeZone",
    "test_result": "ERROR"
}