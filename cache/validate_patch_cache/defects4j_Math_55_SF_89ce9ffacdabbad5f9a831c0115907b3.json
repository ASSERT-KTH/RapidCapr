{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n        //rescale both vectors without losing precision,\n        //to ensure their norm are the same order of magnitude\n        double scale = v1.getNorm() * v2.getNorm();\n        double comp1 = v1.getY() * v2.getZ() - v1.getZ() * v2.getY();\n        double comp2 = v1.getZ() * v2.getX() - v1.getX() * v2.getZ();\n        double comp3 = v1.getX() * v2.getY() - v1.getY() * v2.getX();\n\n        double s = Math.max(Math.max(Math.abs(comp1), Math.abs(comp2)), Math.abs(comp3));\n        if (s < 2.52587890625e-5) {\n            return new Vector3D(comp1, comp2, comp3);\n        } else if (s > 0.9999999 * scale) {\n            return new Vector3D(0, 0, 0);\n        } else {\n            double f = 1 / Math.sqrt(v2.dot(v2));\n            Vector3D c = new Vector3D(f * v2.getX(), f * v2.getY(), f * v2.getZ());\n            Vector3D u = c.crossProduct(v1);\n            return new Vector3D(u.getX(), u.getY(), u.getZ());\n        }\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..f27cabcd1 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,21 +456,24 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+        //rescale both vectors without losing precision,\n+        //to ensure their norm are the same order of magnitude\n+        double scale = v1.getNorm() * v2.getNorm();\n+        double comp1 = v1.getY() * v2.getZ() - v1.getZ() * v2.getY();\n+        double comp2 = v1.getZ() * v2.getX() - v1.getX() * v2.getZ();\n+        double comp3 = v1.getX() * v2.getY() - v1.getY() * v2.getX();\n+\n+        double s = Math.max(Math.max(Math.abs(comp1), Math.abs(comp2)), Math.abs(comp3));\n+        if (s < 2.52587890625e-5) {\n+            return new Vector3D(comp1, comp2, comp3);\n+        } else if (s > 0.9999999 * scale) {\n+            return new Vector3D(0, 0, 0);\n+        } else {\n+            double f = 1 / Math.sqrt(v2.dot(v2));\n+            Vector3D c = new Vector3D(f * v2.getX(), f * v2.getY(), f * v2.getZ());\n+            Vector3D u = c.crossProduct(v1);\n+            return new Vector3D(u.getX(), u.getY(), u.getZ());\n+        }\n \n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}