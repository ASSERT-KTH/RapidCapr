{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    } else if (size == 1) {\n        Object obj = elementPairs.get(0);\n        if (obj instanceof PeriodPrinter) {\n            return new PeriodFormatter((PeriodPrinter) obj, null);\n        } else if (obj instanceof PeriodParser) {\n            return new PeriodFormatter(null, (PeriodParser) obj);\n        } else {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n    } else if (elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n\n        int i;\n        for (i = 1; i < size; i++) {\n            if (!(elementPairs.get(i) instanceof Separator)) {\n                break;\n            }\n        }\n\n        List<Object> rest = elementPairs.subList(i, size);\n        PeriodFormatter f = toFormatter(rest, notPrinter, notParser);\n\n        PeriodPrinter printer = notPrinter ? null : sep.finish(f.getPrinter(), null);\n        PeriodParser parser = notParser ? null : sep.finish(null, f.getParser());\n\n        if (notPrinter && printer != null) {\n            printer = null;\n        }\n        if (notParser && parser != null) {\n            parser = null;\n        }\n\n        return new PeriodFormatter(printer, parser);\n    } else {\n        Object[] comp = createComposite(elementPairs);\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..f0366850 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,53 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    } else if (size == 1) {\n+        Object obj = elementPairs.get(0);\n+        if (obj instanceof PeriodPrinter) {\n+            return new PeriodFormatter((PeriodPrinter) obj, null);\n+        } else if (obj instanceof PeriodParser) {\n+            return new PeriodFormatter(null, (PeriodParser) obj);\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid input\");\n         }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+    } else if (elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+\n+        int i;\n+        for (i = 1; i < size; i++) {\n+            if (!(elementPairs.get(i) instanceof Separator)) {\n+                break;\n+            }\n         }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+\n+        List<Object> rest = elementPairs.subList(i, size);\n+        PeriodFormatter f = toFormatter(rest, notPrinter, notParser);\n+\n+        PeriodPrinter printer = notPrinter ? null : sep.finish(f.getPrinter(), null);\n+        PeriodParser parser = notParser ? null : sep.finish(null, f.getParser());\n+\n+        if (notPrinter && printer != null) {\n+            printer = null;\n         }\n+        if (notParser && parser != null) {\n+            parser = null;\n+        }\n+\n+        return new PeriodFormatter(printer, parser);\n+    } else {\n+        Object[] comp = createComposite(elementPairs);\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}