{
    "patch": "    if (parent != null && parent != NodeUtil.getEnclosingFunction(n)) {\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.NAME:\n          if (NodeUtil.isFunctionExpression(n)) {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.LP:\n          if (parent == scope.getRootNode() || NodeUtil.isFunctionExpression(parent)) {\n            handleFunctionInputs(n);\n          }\n          break;\n        default:\n          break;\n      }\n    }\n\n    attachLiteralTypes(n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..628c4b83 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,15 +1440,7 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n+    if (parent != null && parent != NodeUtil.getEnclosingFunction(n)) {\n       switch (n.getType()) {\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n@@ -1456,15 +1448,29 @@ final class TypedScopeCreator implements ScopeCreator {\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n+        case Token.NAME:\n+          if (NodeUtil.isFunctionExpression(n)) {\n+            defineDeclaredFunction(n, parent);\n+          }\n+          break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        case Token.LP:\n+          if (parent == scope.getRootNode() || NodeUtil.isFunctionExpression(parent)) {\n+            handleFunctionInputs(n);\n+          }\n+          break;\n+        default:\n+          break;\n       }\n     }\n \n+    attachLiteralTypes(n);\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}