{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException,\n        FunctionEvaluationException {\n\n    clearResult();\n    verifyInterval(min, max);\n\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n\n    double x = Double.NaN;\n    double y;\n\n    double xMidpoint;\n    double yMidpoint;\n\n    double previousX = Double.NaN;\n    double previousY;\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    if (yMin * yMax >= 0) {\n        throw new IllegalArgumentException(\n                \"Function values at endpoints do not have different signs.\" +\n                        \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    }\n\n    int i = 0;\n\n    while (i < getMaximalIterationCount()) {\n\n        // Compute the next x value using improved secant method\n        if (!Double.isNaN(previousX)) {\n            double secantDenominator = (yMax - yMin) / (max - min) - previousY / (previousX - min);\n            if (Math.abs(secantDenominator) < Math.ulp(min)) { // Numerical noise\n                x = 0.5 * (max + min);\n            } else {\n                x = min - (min - previousX) * yMin / secantDenominator;\n            }\n            y = f.value(x);\n            if (Math.abs(y) < ftol) {\n                setResult(x, i);\n                return getResult();\n            }\n            if ((max - x) * (x - min) < 0) {\n                // Outside of bracket, bisect instead\n                x = 0.5 * (min + max);\n                y = f.value(x);\n                if (Math.abs(y) < ftol) {\n                    setResult(x, i);\n                    return getResult();\n                }\n            }\n        } else {\n            // No previous point, bisect instead\n            x = 0.5 * (min + max);\n            y = f.value(x);\n            if (Math.abs(y) < ftol) {\n                setResult(x, i);\n                return getResult();\n            }\n        }\n\n        // Update the interval\n        if (y * yMin < 0) {\n            max = x;\n            yMax = y;\n        } else if (y * yMax < 0) {\n            min = x;\n            yMin = y;\n        } else {\n            // Stagnation: try to restart from the middle of the interval\n            if (yMax == 0 || yMin == 0) {\n                // One of the endpoints is a root\n                setResult(yMin == 0 ? min : max, i);\n                return getResult();\n            }\n            double yDiff = yMax - yMin;\n            double eps = 0.5 * (Math.abs(yMin) + Math.abs(yMax)) * atol + ftol;\n            double relativeThreshold = eps / (Math.abs(yDiff) + eps);\n            if (Math.abs(yDiff) < relativeThreshold * atol) {\n                x = 0.5 * (min + max);\n                y = f.value(x);\n                if (Math.abs(y) < ftol) {\n                    setResult(x, i);\n                    return getResult();\n                }\n                if (y * yMin >= 0.0) {\n                    yMin = y;\n                } else {\n                    yMax = y;\n                }\n            } else {\n                // Not a stagnation\n                if (y * yMin > 0) {\n                    yMin = yMin / 2;\n                    yMax = yMax / 2;\n                } else {\n                    previousX = x;\n                    previousY = y;\n                    continue; // Next iteration\n                }\n            }\n        }\n\n        // Check for convergence\n        y = Math.min(Math.abs(yMin), Math.abs(yMax));\n        if (y < ftol) {\n            setResult(x, i);\n            return getResult();\n        }\n        ++i;\n\n    }\n\n    throw new MaxIterationsExceededException(getMaximalIterationCount());\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..85656d875 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,125 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n+public double solve(double min, double max) throws MaxIterationsExceededException,\n         FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n+\n+    clearResult();\n+    verifyInterval(min, max);\n+\n+    final double ftol = getFunctionValueAccuracy();\n+    final double atol = getAbsoluteAccuracy();\n+\n+    double x = Double.NaN;\n+    double y;\n+\n+    double xMidpoint;\n+    double yMidpoint;\n+\n+    double previousX = Double.NaN;\n+    double previousY;\n+\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+\n+    if (yMin * yMax >= 0) {\n+        throw new IllegalArgumentException(\n+                \"Function values at endpoints do not have different signs.\" +\n+                        \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+    }\n+\n+    int i = 0;\n+\n+    while (i < getMaximalIterationCount()) {\n+\n+        // Compute the next x value using improved secant method\n+        if (!Double.isNaN(previousX)) {\n+            double secantDenominator = (yMax - yMin) / (max - min) - previousY / (previousX - min);\n+            if (Math.abs(secantDenominator) < Math.ulp(min)) { // Numerical noise\n+                x = 0.5 * (max + min);\n+            } else {\n+                x = min - (min - previousX) * yMin / secantDenominator;\n+            }\n+            y = f.value(x);\n+            if (Math.abs(y) < ftol) {\n+                setResult(x, i);\n+                return getResult();\n+            }\n+            if ((max - x) * (x - min) < 0) {\n+                // Outside of bracket, bisect instead\n+                x = 0.5 * (min + max);\n+                y = f.value(x);\n+                if (Math.abs(y) < ftol) {\n+                    setResult(x, i);\n+                    return getResult();\n+                }\n+            }\n         } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+            // No previous point, bisect instead\n+            x = 0.5 * (min + max);\n+            y = f.value(x);\n+            if (Math.abs(y) < ftol) {\n+                setResult(x, i);\n+                return getResult();\n+            }\n         }\n \n-        return ret;\n+        // Update the interval\n+        if (y * yMin < 0) {\n+            max = x;\n+            yMax = y;\n+        } else if (y * yMax < 0) {\n+            min = x;\n+            yMin = y;\n+        } else {\n+            // Stagnation: try to restart from the middle of the interval\n+            if (yMax == 0 || yMin == 0) {\n+                // One of the endpoints is a root\n+                setResult(yMin == 0 ? min : max, i);\n+                return getResult();\n+            }\n+            double yDiff = yMax - yMin;\n+            double eps = 0.5 * (Math.abs(yMin) + Math.abs(yMax)) * atol + ftol;\n+            double relativeThreshold = eps / (Math.abs(yDiff) + eps);\n+            if (Math.abs(yDiff) < relativeThreshold * atol) {\n+                x = 0.5 * (min + max);\n+                y = f.value(x);\n+                if (Math.abs(y) < ftol) {\n+                    setResult(x, i);\n+                    return getResult();\n+                }\n+                if (y * yMin >= 0.0) {\n+                    yMin = y;\n+                } else {\n+                    yMax = y;\n+                }\n+            } else {\n+                // Not a stagnation\n+                if (y * yMin > 0) {\n+                    yMin = yMin / 2;\n+                    yMax = yMax / 2;\n+                } else {\n+                    previousX = x;\n+                    previousY = y;\n+                    continue; // Next iteration\n+                }\n+            }\n+        }\n+\n+        // Check for convergence\n+        y = Math.min(Math.abs(yMin), Math.abs(yMax));\n+        if (y < ftol) {\n+            setResult(x, i);\n+            return getResult();\n+        }\n+        ++i;\n+\n     }\n+\n+    throw new MaxIterationsExceededException(getMaximalIterationCount());\n+\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: variable previousY might not have been initialized",
    "test_result": "ERROR"
}