{
    "patch": " void inferPropertiesDeclaredExternally(ObjectType objectType, JSType externsType) {\n    if (objectType == null || externsType == null) {\n      return;\n    }\n    ObjectType externsObjectType = ObjectType.cast(externsType);\n    if (externsObjectType != null && externsObjectType.isRecordType()) {\n      for (String propName : externsObjectType.getOwnPropertyNames()) {\n        JSType propType = externsObjectType.getPropertyType(propName);\n        if (objectType.hasProperty(propName)) {\n          JSType currentPropType = objectType.getPropertyType(propName);\n          objectType.setPropertyType(propName, JSType.join(currentPropType, propType));\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..2f302f46 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,42 +1111,21 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n-    if (type == null || constraint == null) {\n+ void inferPropertiesDeclaredExternally(ObjectType objectType, JSType externsType) {\n+    if (objectType == null || externsType == null) {\n       return;\n     }\n-\n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n+    ObjectType externsObjectType = ObjectType.cast(externsType);\n+    if (externsObjectType != null && externsObjectType.isRecordType()) {\n+      for (String propName : externsObjectType.getOwnPropertyNames()) {\n+        JSType propType = externsObjectType.getPropertyType(propName);\n+        if (objectType.hasProperty(propName)) {\n+          JSType currentPropType = objectType.getPropertyType(propName);\n+          objectType.setPropertyType(propName, JSType.join(currentPropType, propType));\n         }\n       }\n     }\n   }\n-\n-  /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n-   */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n-      }\n     }\n     return scope;\n   }",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}