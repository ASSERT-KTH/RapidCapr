{
    "patch": "        if (unitField.isSupported()) {\n            boolean inserted = false;\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (!loopUnitField.isSupported()) {\n                    continue;\n                }\n                int compare = unitField.compareTo(loopUnitField);\n                if (compare > 0) {\n                    break;\n                } else if (compare == 0) {\n                    DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                    DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                    if (rangeField.compareTo(loopRangeField) > 0) {\n                        break;\n        >>> [ INFILL ] <<<\n                    } else {\n                        inserted = true;\n                    }\n                }\n            }\n\n            if (!inserted && i < iTypes.length) {\n                i--;\n            }\n        }\n        \n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n\n        System.arraycopy(iTypes, 0, newTypes, 0, i + 1);\n        System.arraycopy(iValues, 0, newValues, 0, i + 1);\n\n        System.arraycopy(iTypes, i + 1, newTypes, i + 2, newTypes.length - (i + 2) );\n        System.arraycopy(iValues, i + 1, newValues, i + 2, newValues.length - (i + 2) );\n\n        newTypes[i + 1] = fieldType;\n        newValues[i + 1] = value;\n\n        return new Partial(iChronology, newTypes, newValues);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..15dba8a4 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,48 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+        if (unitField.isSupported()) {\n+            boolean inserted = false;\n+            for (; i < iTypes.length; i++) {\n+                DateTimeFieldType loopType = iTypes[i];\n+                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n+                if (!loopUnitField.isSupported()) {\n+                    continue;\n+                }\n+                int compare = unitField.compareTo(loopUnitField);\n+                if (compare > 0) {\n+                    break;\n+                } else if (compare == 0) {\n+                    DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n+                    DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n+                    if (rangeField.compareTo(loopRangeField) > 0) {\n+                        break;\n+        >>> [ INFILL ] <<<\n+                    } else {\n+                        inserted = true;\n+                    }\n+                }\n+            }\n+\n+            if (!inserted && i < iTypes.length) {\n+                i--;\n+            }\n+        }\n+        \n+        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n+        int[] newValues = new int[newTypes.length];\n+\n+        System.arraycopy(iTypes, 0, newTypes, 0, i + 1);\n+        System.arraycopy(iValues, 0, newValues, 0, i + 1);\n+\n+        System.arraycopy(iTypes, i + 1, newTypes, i + 2, newTypes.length - (i + 2) );\n+        System.arraycopy(iValues, i + 1, newValues, i + 2, newValues.length - (i + 2) );\n+\n+        newTypes[i + 1] = fieldType;\n+        newValues[i + 1] = value;\n+\n+        return new Partial(iChronology, newTypes, newValues);\n+    }\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}