{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    RealMatrix l = new CholeskyDecomposition(m).getL();\n    for(int i=0; i<l.getRowDimension(); i++) {\n        for(int j=i+1; j<l.getColumnDimension(); j++) {\n            l.setEntry(i,j,0.0);\n        }\n    }\n    return l.multiply(l.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..102a36520 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,13 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    RealMatrix l = new CholeskyDecomposition(m).getL();\n+    for(int i=0; i<l.getRowDimension(); i++) {\n+        for(int j=i+1; j<l.getColumnDimension(); j++) {\n+            l.setEntry(i,j,0.0);\n+        }\n     }\n+    return l.multiply(l.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}