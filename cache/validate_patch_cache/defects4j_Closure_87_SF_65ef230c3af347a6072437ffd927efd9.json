{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node onlyChild = n.getFirstChild();\n      if (n.getParent() != null && (n.getParent().getType() == Token.EXPR_VOID || n.getParent().getType() == Token.IF)) {\n        // Do not fold a block whose parent is an expression or if statements.\n        return false;\n      }\n      \n      if (onlyChild.getType() == Token.EXPR_RESULT) {\n        Node child = onlyChild.getFirstChild();\n        if (child != null && !child.hasChildren() &&\n            (child.getType() == Token.TRUE ||\n             child.getType() == Token.FALSE ||\n             child.getType() == Token.NUMBER ||\n             child.getType() == Token.STRING)) {\n          // Literal value should not be wrapped with ExpressionStatement node.\n          return false;\n        }\n        if (child != null && child.getType() == Token.HOOK) {\n          // Conditional expression should not be wrapped with ExpressionStatement node.\n          return false;\n        }\n      } else if (onlyChild.getType() == Token.IF) {\n        // A single IF statement should not be wrapped with ExpressionStatement node.\n        return false;\n      }\n\n      if (n.getParent() != null && (n.getParent().getType() == Token.WHILE || n.getParent().getType() == Token.FOR)) {\n        if (onlyChild.hasChildren()) {\n          Node cur = onlyChild.getFirstChild();\n          while (cur != null) {\n            if (!NodeUtil.isExpressionNode(cur)) {\n              // Do not fold a block containing multiple non-expressions.\n              return false;\n            }\n            \n            cur = cur.getNext();\n          }\n        }\n      }\n\n      return NodeUtil.isExpressionNode(n.getFirstChild());\n    } else if (n.getFirstChild().getType() == Token.FUNCTION) {\n      // Do not fold a block containing only a function declaration.\n      return false;\n    }\n  }\n  \n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..19cc3629 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,57 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node onlyChild = n.getFirstChild();\n+      if (n.getParent() != null && (n.getParent().getType() == Token.EXPR_VOID || n.getParent().getType() == Token.IF)) {\n+        // Do not fold a block whose parent is an expression or if statements.\n+        return false;\n+      }\n+      \n+      if (onlyChild.getType() == Token.EXPR_RESULT) {\n+        Node child = onlyChild.getFirstChild();\n+        if (child != null && !child.hasChildren() &&\n+            (child.getType() == Token.TRUE ||\n+             child.getType() == Token.FALSE ||\n+             child.getType() == Token.NUMBER ||\n+             child.getType() == Token.STRING)) {\n+          // Literal value should not be wrapped with ExpressionStatement node.\n+          return false;\n+        }\n+        if (child != null && child.getType() == Token.HOOK) {\n+          // Conditional expression should not be wrapped with ExpressionStatement node.\n+          return false;\n+        }\n+      } else if (onlyChild.getType() == Token.IF) {\n+        // A single IF statement should not be wrapped with ExpressionStatement node.\n+        return false;\n       }\n-    }\n \n-    return false;\n+      if (n.getParent() != null && (n.getParent().getType() == Token.WHILE || n.getParent().getType() == Token.FOR)) {\n+        if (onlyChild.hasChildren()) {\n+          Node cur = onlyChild.getFirstChild();\n+          while (cur != null) {\n+            if (!NodeUtil.isExpressionNode(cur)) {\n+              // Do not fold a block containing multiple non-expressions.\n+              return false;\n+            }\n+            \n+            cur = cur.getNext();\n+          }\n+        }\n+      }\n+\n+      return NodeUtil.isExpressionNode(n.getFirstChild());\n+    } else if (n.getFirstChild().getType() == Token.FUNCTION) {\n+      // Do not fold a block containing only a function declaration.\n+      return false;\n+    }\n   }\n+  \n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}