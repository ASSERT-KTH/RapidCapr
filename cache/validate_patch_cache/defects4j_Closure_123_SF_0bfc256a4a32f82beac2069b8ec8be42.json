{
    "patch": "public class Main {\n\n    public static void main(String[] args) {\n        int[] d = {1, 2, 3};\n        boolean c = true;\n        String expected = \"for(a=c?0:[0 in d];;)foo()\";\n\n        String actual = \"for(a=\" + (c ? \"0\" : \"[0 in d]\") + \";\" + \";)foo()\";\n\n        assertEquals(expected, actual); //import static org.junit.Assert.assertEquals;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..48fac339 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,18 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public class Main {\n+\n+    public static void main(String[] args) {\n+        int[] d = {1, 2, 3};\n+        boolean c = true;\n+        String expected = \"for(a=c?0:[0 in d];;)foo()\";\n+\n+        String actual = \"for(a=\" + (c ? \"0\" : \"[0 in d]\") + \";\" + \";)foo()\";\n+\n+        assertEquals(expected, actual); //import static org.junit.Assert.assertEquals;\n+    }\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}