{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    int numIterations = 0;\n    final int maxIterations = getMaxIterations();\n    while (numIterations < maxIterations) {\n        numIterations++;\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            return;\n        }\n\n        // check if we need a contraction\n        final RealPointValuePair worst = original[n];\n        RealPointValuePair contracted = null;\n        boolean needContraction = true;\n        if (comparator.compare(reflected, worst) >= 0) {\n            // check for possible expansion\n            final RealPointValuePair[] reflectedSimplex = evaluateNewSimplex(original, rho, comparator);\n            if (comparator.compare(reflectedSimplex[n + 1], reflected) < 0) {\n                contracted = reflectedSimplex[n + 1];\n            } else {\n                contracted = reflected;\n            }\n        } else {\n            // do we need a contraction inwards?\n            if (comparator.compare(reflected, original[n - 1]) < 0) {\n                // yes, as the reflected point is better than the second-to-worst but not better than the best\n                contracted = reflected;\n            } else {\n                // do we need a contraction towards the best?\n                final RealPointValuePair[] reflectedSimplex = evaluateNewSimplex(original, sigma, comparator);\n                if (comparator.compare(reflectedSimplex[n + 1], worst) < 0) {\n                    contracted = reflectedSimplex[n + 1];\n                } else {\n                    // no contraction - we need to improve the simplex\n                    needContraction = false;\n                }\n            }\n        }\n\n        if (needContraction) {\n            final RealPointValuePair[] contractedSimplex = contract(original, contracted, comparator);\n            final RealPointValuePair contractedWorst = contractedSimplex[n];\n            if (comparator.compare(contractedWorst, worst) < 0) {\n                simplex = contractedSimplex;\n            } else {\n                // perform a shrink\n                final RealPointValuePair[] shrunkSimplex = shrink(original, comparator);\n                if (comparator.compare(shrunkSimplex[0], best) < 0) {\n                    simplex = shrunkSimplex;\n                } else {\n                    // neither contraction nor shrink were successful\n                    return;\n                }\n            }\n        }\n    }\n    throw new OptimizationException(\"Maximum number of iterations exceeded\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..7f15da7be 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,82 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+    int numIterations = 0;\n+    final int maxIterations = getMaxIterations();\n+    while (numIterations < maxIterations) {\n+        numIterations++;\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // accept the expanded simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            }\n+            return;\n+        }\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+        // check if we need a contraction\n+        final RealPointValuePair worst = original[n];\n+        RealPointValuePair contracted = null;\n+        boolean needContraction = true;\n+        if (comparator.compare(reflected, worst) >= 0) {\n+            // check for possible expansion\n+            final RealPointValuePair[] reflectedSimplex = evaluateNewSimplex(original, rho, comparator);\n+            if (comparator.compare(reflectedSimplex[n + 1], reflected) < 0) {\n+                contracted = reflectedSimplex[n + 1];\n+            } else {\n+                contracted = reflected;\n+            }\n+        } else {\n+            // do we need a contraction inwards?\n+            if (comparator.compare(reflected, original[n - 1]) < 0) {\n+                // yes, as the reflected point is better than the second-to-worst but not better than the best\n+                contracted = reflected;\n+            } else {\n+                // do we need a contraction towards the best?\n+                final RealPointValuePair[] reflectedSimplex = evaluateNewSimplex(original, sigma, comparator);\n+                if (comparator.compare(reflectedSimplex[n + 1], worst) < 0) {\n+                    contracted = reflectedSimplex[n + 1];\n+                } else {\n+                    // no contraction - we need to improve the simplex\n+                    needContraction = false;\n                 }\n-\n-                return;\n-\n             }\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+        if (needContraction) {\n+            final RealPointValuePair[] contractedSimplex = contract(original, contracted, comparator);\n+            final RealPointValuePair contractedWorst = contractedSimplex[n];\n+            if (comparator.compare(contractedWorst, worst) < 0) {\n+                simplex = contractedSimplex;\n+            } else {\n+                // perform a shrink\n+                final RealPointValuePair[] shrunkSimplex = shrink(original, comparator);\n+                if (comparator.compare(shrunkSimplex[0], best) < 0) {\n+                    simplex = shrunkSimplex;\n+                } else {\n+                    // neither contraction nor shrink were successful\n+                    return;\n+                }\n             }\n-\n         }\n-\n     }\n+    throw new OptimizationException(\"Maximum number of iterations exceeded\");\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}