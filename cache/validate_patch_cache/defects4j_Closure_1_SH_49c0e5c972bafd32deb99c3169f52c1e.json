{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    List<Node> argsToRemove = new ArrayList<>();\n    int argNumber = 0;\n    for (Node currentArg = argList.getFirstChild(); currentArg != null;) {\n      Var var = fnScope.getVar(currentArg.getString());\n      if (!referenced.contains(var)) {\n        argsToRemove.add(currentArg);\n        currentArg = currentArg.getNext();\n        argNumber++;\n      } else {\n        currentArg.putIntProp(Node.JSDOC_INFO_PROP, argNumber++);\n        currentArg = currentArg.getNext();\n      }\n    }\n\n    for (Node argToRemove : argsToRemove) {\n      argList.removeChild(argToRemove);\n      compiler.reportCodeChange();\n    }\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f61ab931 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    List<Node> argsToRemove = new ArrayList<>();\n+    int argNumber = 0;\n+    for (Node currentArg = argList.getFirstChild(); currentArg != null;) {\n+      Var var = fnScope.getVar(currentArg.getString());\n+      if (!referenced.contains(var)) {\n+        argsToRemove.add(currentArg);\n+        currentArg = currentArg.getNext();\n+        argNumber++;\n+      } else {\n+        currentArg.putIntProp(Node.JSDOC_INFO_PROP, argNumber++);\n+        currentArg = currentArg.getNext();\n+      }\n+    }\n+\n+    for (Node argToRemove : argsToRemove) {\n+      argList.removeChild(argToRemove);\n+      compiler.reportCodeChange();\n+    }\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}