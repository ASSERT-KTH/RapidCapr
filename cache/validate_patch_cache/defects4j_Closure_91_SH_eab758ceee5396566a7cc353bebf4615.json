{
    "patch": "  private boolean isPrototypePropertyDefinition(Node n) {\n    if (n.isGetProp() && n.getLastChild().getString().equals(\"prototype\")) {\n      n = n.getFirstChild();\n      if (n.isName() && !n.getString().isEmpty()) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..e5d5c026 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,15 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+  private boolean isPrototypePropertyDefinition(Node n) {\n+    if (n.isGetProp() && n.getLastChild().getString().equals(\"prototype\")) {\n+      n = n.getFirstChild();\n+      if (n.isName() && !n.getString().isEmpty()) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}