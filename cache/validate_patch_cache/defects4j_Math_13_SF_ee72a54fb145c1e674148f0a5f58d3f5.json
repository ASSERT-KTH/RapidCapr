{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    int n = m.getRowDimension();\n    RealMatrix x = m;\n    RealMatrix y = MatrixUtils.createRealIdentityMatrix(n);\n\n    // Perform Newton-Schulz iteration until convergence\n    double eps = 1e-8;\n    while (norm(x.subtract(y.multiply(y))) > eps) {\n        RealMatrix xInv = new LUDecomposition(x).getSolver().getInverse();\n        x = x.add(y).scalarMultiply(0.5);\n        y = y.add(xInv).scalarMultiply(0.5);\n    }\n\n    return y;\n}\n\n// Helper method to compute Euclidean norm of a matrix\nprivate double norm(RealMatrix m) {\n    return m.transpose().multiply(m).getTrace();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..886ccb083 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    int n = m.getRowDimension();\n+    RealMatrix x = m;\n+    RealMatrix y = MatrixUtils.createRealIdentityMatrix(n);\n+\n+    // Perform Newton-Schulz iteration until convergence\n+    double eps = 1e-8;\n+    while (norm(x.subtract(y.multiply(y))) > eps) {\n+        RealMatrix xInv = new LUDecomposition(x).getSolver().getInverse();\n+        x = x.add(y).scalarMultiply(0.5);\n+        y = y.add(xInv).scalarMultiply(0.5);\n     }\n+\n+    return y;\n+}\n+\n+// Helper method to compute Euclidean norm of a matrix\n+private double norm(RealMatrix m) {\n+    return m.transpose().multiply(m).getTrace();\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}