{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    // \"[][0] += 1\"\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i <= intIndex; i++) {\n      // the upper limit of the for-loop was '<' instead of '<=' \n      // so it was skipping the index that caused the index out of bounds \n      // error while adding a new index.\n      if(i == intIndex && elem.getType() != Token.EMPTY || i==intIndex && elem.getType() == Token.EMPTY){\n          if (elem.getType() == Token.EMPTY) {\n              elem = NodeUtil.newUndefinedNode(elem);\n          } else {\n              left.removeChild(elem);\n          }\n\n          // Replace the entire GETELEM with the value\n          n.getParent().replaceChild(n, elem);\n          reportCodeChange();\n          return elem;\n      }\n      elem = elem.getNext();\n    }\n\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..82c01c8f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1275,11 +1275,11 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n+    // \"[][0] += 1\"\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into\n@@ -1294,31 +1294,28 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       return n;\n     }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n     Node elem = left.getFirstChild();\n-    for (int i = 0; elem != null && i < intIndex; i++) {\n-      elem = elem.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+    for (int i = 0; elem != null && i <= intIndex; i++) {\n+      // the upper limit of the for-loop was '<' instead of '<=' \n+      // so it was skipping the index that caused the index out of bounds \n+      // error while adding a new index.\n+      if(i == intIndex && elem.getType() != Token.EMPTY || i==intIndex && elem.getType() == Token.EMPTY){\n+          if (elem.getType() == Token.EMPTY) {\n+              elem = NodeUtil.newUndefinedNode(elem);\n+          } else {\n+              left.removeChild(elem);\n+          }\n \n-    if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+          // Replace the entire GETELEM with the value\n+          n.getParent().replaceChild(n, elem);\n+          reportCodeChange();\n+          return elem;\n+      }\n+      elem = elem.getNext();\n     }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n   }\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_INDEX_OUT_OF_BOUNDS_ERROR. Array index out of bounds: NUMBER 1.0 1 [source_file: testcode] at testcode line 1 : 3 expected:<0> but was:<1>",
    "test_result": "FAIL"
}