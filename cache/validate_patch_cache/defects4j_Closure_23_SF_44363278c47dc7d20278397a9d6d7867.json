{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (left.isObjectLit()) {\n      Node elem = null;\n      for (Node key = left.getFirstChild(); key != null; key = key.getNext()) {\n        if (key.isString() && key.getString().equals(Integer.toString(intIndex))) {\n          if (elem == null) {\n            elem = key.getFirstChild();\n            if (elem == null) {\n              elem = NodeUtil.newUndefinedNode(key);\n              key.addChildToBack(elem);\n            }\n          } else {\n            error(DUPLICATE_KEY_ERROR, key);\n            return n;\n          }\n        }\n      }\n\n      if (elem == null) {\n        if (intIndex == 0) {\n          elem = NodeUtil.newUndefinedNode(left);\n          left.addChildToBack(elem);\n        } else {\n          error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n          return n;\n        }\n      }\n\n      // Replace the entire GETELEM with the value\n      n.getParent().replaceChild(n, elem);\n      reportCodeChange();\n      return elem;\n    }\n\n    int arrLength = NodeUtil.arrayLength(left);\n    if (intIndex >= arrLength) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (intIndex == 0) {\n      Node elem = left.getFirstChild();\n      if (elem == null) {\n        elem = NodeUtil.newUndefinedNode(left);\n        left.addChildToBack(elem);\n      }\n      left.removeChild(elem);\n      // Replace the entire GETELEM with the value\n      n.getParent().replaceChild(n, elem);\n      reportCodeChange();\n      return elem;\n\n    } else {\n      // Traverse the array to get to the ith element.\n      Node current = left.getFirstChild();\n      Node elem = null;\n      for (int i = 0; i < intIndex && current != null; i++) {\n        elem = current;\n        current = current.getNext();\n      }\n\n      if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n\n      if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n      } else {\n        left.removeChild(elem);\n      }\n\n      // Replace the entire GETELEM with the value\n      n.getParent().replaceChild(n, elem);\n      reportCodeChange();\n      return elem;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..92542d1b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,7 +1419,7 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n@@ -1446,29 +1446,82 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       return n;\n     }\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n+    if (left.isObjectLit()) {\n+      Node elem = null;\n+      for (Node key = left.getFirstChild(); key != null; key = key.getNext()) {\n+        if (key.isString() && key.getString().equals(Integer.toString(intIndex))) {\n+          if (elem == null) {\n+            elem = key.getFirstChild();\n+            if (elem == null) {\n+              elem = NodeUtil.newUndefinedNode(key);\n+              key.addChildToBack(elem);\n+            }\n+          } else {\n+            error(DUPLICATE_KEY_ERROR, key);\n+            return n;\n+          }\n+        }\n+      }\n \n-      current = current.getNext();\n+      if (elem == null) {\n+        if (intIndex == 0) {\n+          elem = NodeUtil.newUndefinedNode(left);\n+          left.addChildToBack(elem);\n+        } else {\n+          error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+          return n;\n+        }\n+      }\n+\n+      // Replace the entire GETELEM with the value\n+      n.getParent().replaceChild(n, elem);\n+      reportCodeChange();\n+      return elem;\n     }\n \n-    if (elem == null) {\n+    int arrLength = NodeUtil.arrayLength(left);\n+    if (intIndex >= arrLength) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n+    if (intIndex == 0) {\n+      Node elem = left.getFirstChild();\n+      if (elem == null) {\n+        elem = NodeUtil.newUndefinedNode(left);\n+        left.addChildToBack(elem);\n+      }\n       left.removeChild(elem);\n-    }\n+      // Replace the entire GETELEM with the value\n+      n.getParent().replaceChild(n, elem);\n+      reportCodeChange();\n+      return elem;\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n+    } else {\n+      // Traverse the array to get to the ith element.\n+      Node current = left.getFirstChild();\n+      Node elem = null;\n+      for (int i = 0; i < intIndex && current != null; i++) {\n+        elem = current;\n+        current = current.getNext();\n+      }\n+\n+      if (elem == null) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n+\n+      if (elem.isEmpty()) {\n+        elem = NodeUtil.newUndefinedNode(elem);\n+      } else {\n+        left.removeChild(elem);\n+      }\n+\n+      // Replace the entire GETELEM with the value\n+      n.getParent().replaceChild(n, elem);\n+      reportCodeChange();\n+      return elem;\n+    }\n   }\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}