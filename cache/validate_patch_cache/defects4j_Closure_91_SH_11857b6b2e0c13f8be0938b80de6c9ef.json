{
    "patch": "      if (parent.hasOneChild() && NodeUtil.isGet(parent)) {\n        Node receiver = parent.getFirstChild();\n        if (NodeUtil.isGet(receiver) &&\n            \"prototype\".equals(NodeUtil.getGetPropString(receiver))) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..ef70d0fb 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,12 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.hasOneChild() && NodeUtil.isGet(parent)) {\n+        Node receiver = parent.getFirstChild();\n+        if (NodeUtil.isGet(receiver) &&\n+            \"prototype\".equals(NodeUtil.getGetPropString(receiver))) {\n+          return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}