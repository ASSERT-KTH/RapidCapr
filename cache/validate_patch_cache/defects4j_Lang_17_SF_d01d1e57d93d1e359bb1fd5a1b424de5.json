{
    "patch": "public static String escape(String input) {\n    if (input == null) {\n        return null;\n    }\n    int len = input.length();\n    StringWriter output = new StringWriter(len * 2);\n    for (int i = 0; i < len; i++) {\n        char ch = input.charAt(i);\n        switch (ch) {\n            case '\\\\':\n                output.write(\"\\\\\\\\\");\n                break;\n            case '\\n':\n                output.write(\"\\\\n\");\n                break;\n            case '\\r':\n                output.write(\"\\\\r\");\n                break;\n            case '\\t':\n                output.write(\"\\\\t\");\n                break;\n            case '\\b':\n                output.write(\"\\\\b\");\n                break;\n            case '\\f':\n                output.write(\"\\\\f\");\n                break;\n            case '\\'':\n                output.write(\"\\\\'\");\n                break;\n            case '\\\"':\n                output.write(\"\\\\\\\"\");\n                break;\n            default:\n                if (ch < 32 || ch > 127) {\n                    output.write(\"\\\\u\");\n                    String hex = Integer.toHexString(ch);\n                    for (int j = 0; j < 4 - hex.length(); j++) {\n                        output.write('0');\n                    }\n                    output.write(hex);\n                } else {\n                    output.write(ch);\n                }\n                break;\n        }\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..4733c48a 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,36 +72,55 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = Character.codePointCount(input, 0, input.length());\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-            }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-                    } else {\n-                        pos++;\n+public static String escape(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    int len = input.length();\n+    StringWriter output = new StringWriter(len * 2);\n+    for (int i = 0; i < len; i++) {\n+        char ch = input.charAt(i);\n+        switch (ch) {\n+            case '\\\\':\n+                output.write(\"\\\\\\\\\");\n+                break;\n+            case '\\n':\n+                output.write(\"\\\\n\");\n+                break;\n+            case '\\r':\n+                output.write(\"\\\\r\");\n+                break;\n+            case '\\t':\n+                output.write(\"\\\\t\");\n+                break;\n+            case '\\b':\n+                output.write(\"\\\\b\");\n+                break;\n+            case '\\f':\n+                output.write(\"\\\\f\");\n+                break;\n+            case '\\'':\n+                output.write(\"\\\\'\");\n+                break;\n+            case '\\\"':\n+                output.write(\"\\\\\\\"\");\n+                break;\n+            default:\n+                if (ch < 32 || ch > 127) {\n+                    output.write(\"\\\\u\");\n+                    String hex = Integer.toHexString(ch);\n+                    for (int j = 0; j < 4 - hex.length(); j++) {\n+                        output.write('0');\n                     }\n+                    output.write(hex);\n+                } else {\n+                    output.write(ch);\n                 }\n-                pos--;\n-            }\n-            pos++;\n+                break;\n         }\n     }\n+    return output.toString();\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}