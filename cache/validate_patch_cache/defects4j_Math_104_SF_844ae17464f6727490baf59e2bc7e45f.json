{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid arguments!\");\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x > a + 1.0) {\n        double incompleteGammaC = regularizedGammaQ(a, x);\n        return 1.0 - incompleteGammaC;\n    }\n    double result = 1.0 / a;\n    double term = result;\n    double n = 1.0;\n    double tol = 10e-15;\n    while (Math.abs(term / result) > tol) {\n        term *= x / (a + n);\n        result += term;\n        n += 1.0;\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..7debad472 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,28 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid arguments!\");\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x > a + 1.0) {\n+        double incompleteGammaC = regularizedGammaQ(a, x);\n+        return 1.0 - incompleteGammaC;\n+    }\n+    double result = 1.0 / a;\n+    double term = result;\n+    double n = 1.0;\n+    double tol = 10e-15;\n+    while (Math.abs(term / result) > tol) {\n+        term *= x / (a + n);\n+        result += term;\n+        n += 1.0;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * result;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}