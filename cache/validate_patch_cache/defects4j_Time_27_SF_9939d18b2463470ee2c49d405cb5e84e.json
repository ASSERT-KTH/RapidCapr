{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n    boolean hasSeparator = false;\n    Separator separator = null;\n    int size = elementPairs.size();\n\n    for (int i = 0; i < size; i++) {\n        Object element = elementPairs.get(i);\n        if (element instanceof Separator) {\n            hasSeparator = true;\n            separator = (Separator) element;\n            break;\n        }\n        Object[] comp = createComposite(Collections.singletonList(element));\n        if (comp[0] instanceof PeriodPrinter) {\n            printer = mergePrinters(printer, (PeriodPrinter) comp[0]);\n        }\n        if (comp[1] instanceof PeriodParser) {\n            parser = mergeParsers(parser, (PeriodParser) comp[1]);\n        }\n    }\n\n    if (notPrinter && printer == null) {\n        return null;\n    }\n\n    if (notParser && parser == null) {\n        return null;\n    }\n\n    if (hasSeparator) {\n        List<Object> sublist = elementPairs.subList(elementPairs.indexOf(separator) + 1, size);\n        PeriodFormatter innerFormatter = toFormatter(sublist, false, false);\n        return new PeriodFormatter(separator.finish(printer, parser), innerFormatter.getParser());\n    }\n\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..e88583b1 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,50 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+    boolean hasSeparator = false;\n+    Separator separator = null;\n+    int size = elementPairs.size();\n+\n+    for (int i = 0; i < size; i++) {\n+        Object element = elementPairs.get(i);\n+        if (element instanceof Separator) {\n+            hasSeparator = true;\n+            separator = (Separator) element;\n+            break;\n         }\n+        Object[] comp = createComposite(Collections.singletonList(element));\n+        if (comp[0] instanceof PeriodPrinter) {\n+            printer = mergePrinters(printer, (PeriodPrinter) comp[0]);\n+        }\n+        if (comp[1] instanceof PeriodParser) {\n+            parser = mergeParsers(parser, (PeriodParser) comp[1]);\n+        }\n+    }\n+\n+    if (notPrinter && printer == null) {\n+        return null;\n+    }\n+\n+    if (notParser && parser == null) {\n+        return null;\n     }\n \n+    if (hasSeparator) {\n+        List<Object> sublist = elementPairs.subList(elementPairs.indexOf(separator) + 1, size);\n+        PeriodFormatter innerFormatter = toFormatter(sublist, false, false);\n+        return new PeriodFormatter(separator.finish(printer, parser), innerFormatter.getParser());\n+    }\n+\n+    return new PeriodFormatter(printer, parser);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}