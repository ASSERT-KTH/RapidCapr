{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    int numPairs = elementPairs.size();\n    boolean foundLiteral = false;\n    for (int ii = 0; ii < numPairs; ii ++) {\n        if (elementPairs.get(ii) instanceof Literal) {\n            foundLiteral = true;\n            break;\n        }\n    }\n\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    } else if (numPairs == 1) {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n    else if (foundLiteral) {\n        // if a literal is found in the elementPairs, combine in a single segment as Literal+Composite\n        int index = 0;\n        Accumulator acc = new Accumulator();\n        while (index < numPairs) {\n            Object obj = elementPairs.get(index);\n            if (obj instanceof Literal) {\n                acc.appendLiteral((Literal) obj);\n            } else {\n                break;\n            }\n            index++;\n        }\n        if (index >= numPairs) {\n            return new PeriodFormatter(acc.toPrinter(), acc.toParser());\n        }\n        acc.append(createComposite(elementPairs.subList(index, numPairs)));\n\n        if (notPrinter) {\n            return new PeriodFormatter(null, acc.toParser());\n        } else if (notParser) {\n            return new PeriodFormatter(acc.toPrinter(), null);\n        } else {\n            return new PeriodFormatter(acc.toPrinter(), acc.toParser());\n        }\n    }\n    else if (numPairs >= 2) {\n        Separator sep = (Separator) elementPairs.get(0);\n        Object[] comp = createComposite(elementPairs.subList(1, numPairs));\n        sep = sep.finish(comp[0] instanceof PeriodPrinter ? (PeriodPrinter) comp[0] : null,\n                    comp[1] instanceof PeriodParser ? (PeriodParser) comp[1] : null);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter(sep, null);\n        } else {\n            return new PeriodFormatter(sep, sep);\n        }\n    }\n    throw new UnsupportedOperationException(\"Cannot create formatter\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..6bf08159 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,19 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    int numPairs = elementPairs.size();\n+    boolean foundLiteral = false;\n+    for (int ii = 0; ii < numPairs; ii ++) {\n+        if (elementPairs.get(ii) instanceof Literal) {\n+            foundLiteral = true;\n+            break;\n         }\n+    }\n+\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    } else if (numPairs == 1) {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -811,6 +813,47 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+    else if (foundLiteral) {\n+        // if a literal is found in the elementPairs, combine in a single segment as Literal+Composite\n+        int index = 0;\n+        Accumulator acc = new Accumulator();\n+        while (index < numPairs) {\n+            Object obj = elementPairs.get(index);\n+            if (obj instanceof Literal) {\n+                acc.appendLiteral((Literal) obj);\n+            } else {\n+                break;\n+            }\n+            index++;\n+        }\n+        if (index >= numPairs) {\n+            return new PeriodFormatter(acc.toPrinter(), acc.toParser());\n+        }\n+        acc.append(createComposite(elementPairs.subList(index, numPairs)));\n+\n+        if (notPrinter) {\n+            return new PeriodFormatter(null, acc.toParser());\n+        } else if (notParser) {\n+            return new PeriodFormatter(acc.toPrinter(), null);\n+        } else {\n+            return new PeriodFormatter(acc.toPrinter(), acc.toParser());\n+        }\n+    }\n+    else if (numPairs >= 2) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        Object[] comp = createComposite(elementPairs.subList(1, numPairs));\n+        sep = sep.finish(comp[0] instanceof PeriodPrinter ? (PeriodPrinter) comp[0] : null,\n+                    comp[1] instanceof PeriodParser ? (PeriodParser) comp[1] : null);\n+        if (notPrinter) {\n+            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+        } else if (notParser) {\n+            return new PeriodFormatter(sep, null);\n+        } else {\n+            return new PeriodFormatter(sep, sep);\n+        }\n+    }\n+    throw new UnsupportedOperationException(\"Cannot create formatter\");\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}