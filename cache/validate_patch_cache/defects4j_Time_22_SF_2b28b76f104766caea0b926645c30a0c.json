{
    "patch": "    /**\n     * Constructor that creates a period from a duration and a time zone.\n     * Other than enforcing constraints, the input is not checked against\n     * the calendar.\n     * \n     * @param duration  the duration of the period, null means zero\n     * @param start  the start of the period, null means zero length\n     * @param end  the end of the period, null means zero length\n     */\n    protected BasePeriod(long duration, ReadablePartial start, ReadablePartial end) {\n        iDuration = duration;\n        iStart = start;\n        iEnd = end;\n        \n        // bug fix start\n        MutablePeriod period = new MutablePeriod(duration);\n        if (duration >= DateTimeConstants.MILLIS_PER_SECOND) {\n            iSeconds = period.getSeconds();\n        }\n        if (duration >= DateTimeConstants.MILLIS_PER_MINUTE) {\n            iMinutes = period.getMinutes();\n        }\n        if (duration >= DateTimeConstants.MILLIS_PER_HOUR) {\n            iHours = period.getHours();\n        }\n        if (duration >= DateTimeConstants.MILLIS_PER_DAY) {\n            iDays = period.getDays();\n        }\n        if (duration >= (7L * DateTimeConstants.MILLIS_PER_DAY)) {\n            iWeeks = period.getWeeks();\n        }\n        if (duration >= DateTimeConstants.MILLIS_PER_MONTH) {\n            iMonths = period.getMonths();\n        }\n        if (duration >= DateTimeConstants.MILLIS_PER_YEAR) {\n            iYears = period.getYears();\n        }\n        // bug fix end",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..26ffe315 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,44 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+    /**\n+     * Constructor that creates a period from a duration and a time zone.\n+     * Other than enforcing constraints, the input is not checked against\n+     * the calendar.\n+     * \n+     * @param duration  the duration of the period, null means zero\n+     * @param start  the start of the period, null means zero length\n+     * @param end  the end of the period, null means zero length\n+     */\n+    protected BasePeriod(long duration, ReadablePartial start, ReadablePartial end) {\n+        iDuration = duration;\n+        iStart = start;\n+        iEnd = end;\n+        \n+        // bug fix start\n+        MutablePeriod period = new MutablePeriod(duration);\n+        if (duration >= DateTimeConstants.MILLIS_PER_SECOND) {\n+            iSeconds = period.getSeconds();\n+        }\n+        if (duration >= DateTimeConstants.MILLIS_PER_MINUTE) {\n+            iMinutes = period.getMinutes();\n+        }\n+        if (duration >= DateTimeConstants.MILLIS_PER_HOUR) {\n+            iHours = period.getHours();\n+        }\n+        if (duration >= DateTimeConstants.MILLIS_PER_DAY) {\n+            iDays = period.getDays();\n+        }\n+        if (duration >= (7L * DateTimeConstants.MILLIS_PER_DAY)) {\n+            iWeeks = period.getWeeks();\n+        }\n+        if (duration >= DateTimeConstants.MILLIS_PER_MONTH) {\n+            iMonths = period.getMonths();\n+        }\n+        if (duration >= DateTimeConstants.MILLIS_PER_YEAR) {\n+            iYears = period.getYears();\n+        }\n+        // bug fix end\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}