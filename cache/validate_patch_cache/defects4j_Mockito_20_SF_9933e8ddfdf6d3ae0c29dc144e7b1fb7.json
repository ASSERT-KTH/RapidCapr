{
    "patch": "    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n        }\n        List<Class<?>> interfacesAndClasses = new ArrayList<>();\n        interfacesAndClasses.add(settings.getTypeToMock());\n        interfacesAndClasses.addAll(Arrays.asList(settings.getExtraInterfaces()));\n        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(interfacesAndClasses);\n\n        // Check that generated bytecode implements all requested interfaces and classes\n        for (Class<?> clazz : interfacesAndClasses) {\n            if (!clazz.isAssignableFrom(mockedProxyType)) {\n                throw new MockitoException(\"Generated bytecode for mock does not implement \" + clazz.getSimpleName());\n            }\n        }\n\n        T mockInstance = null;\n        try {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n        } catch (ClassCastException cce) {\n            throw new MockitoException(join(\n                    \"ClassCastException occurred while creating the mockito mock :\",\n                    \"  class to mock : \" + describeClass(mockedProxyType),\n                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n                    \"  proxy instance class : \" + describeClass(mockInstance),\n                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                    \"\",\n                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                    \"\"\n            ),cce);\n        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..4d166e87d 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -25,10 +25,18 @@ public class ByteBuddyMockMaker implements MockMaker {\n         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n             throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n         }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n+        List<Class<?>> interfacesAndClasses = new ArrayList<>();\n+        interfacesAndClasses.add(settings.getTypeToMock());\n+        interfacesAndClasses.addAll(Arrays.asList(settings.getExtraInterfaces()));\n+        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(interfacesAndClasses);\n+\n+        // Check that generated bytecode implements all requested interfaces and classes\n+        for (Class<?> clazz : interfacesAndClasses) {\n+            if (!clazz.isAssignableFrom(mockedProxyType)) {\n+                throw new MockitoException(\"Generated bytecode for mock does not implement \" + clazz.getSimpleName());\n+            }\n+        }\n+\n         T mockInstance = null;\n         try {\n             mockInstance = classInstantiator.instantiate(mockedProxyType);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}