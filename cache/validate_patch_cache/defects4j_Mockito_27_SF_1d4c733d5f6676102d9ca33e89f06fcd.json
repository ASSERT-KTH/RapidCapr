{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MockCreationSettings<T> mockSettings = org.mockito.Mockito.mockingDetails(mock).getMockCreationSettings();\n    T newMock = org.mockito.Mockito.mock(mockSettings);\n    ((MockAccess) newMock).setMockitoInterceptor(newMockHandler);\n    ((Factory) mock).setCallbacks(newMethodInterceptorFilterList(newMockHandler));\n    copySerializationSupport(mock, newMock);\n}\n\n@SuppressWarnings(\"unchecked\")\nprivate <T> void copySerializationSupport(T oldMock, T newMock) {\n    if (oldMock instanceof Serializable && newMock instanceof Serializable) {\n        try {\n            ByteArrayOutputStream out = new ByteArrayOutputStream();\n            ObjectOutputStream oos = new ObjectOutputStream(out);\n            oos.writeObject(oldMock);\n            oos.flush();\n            oos.close();\n            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n            Object newMockCopy = ois.readObject();\n            ois.close();\n            BeanUtils.copyProperties(newMockCopy, newMock);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to copy serialization support from old to new mock\", e);\n        }\n    }\n}\n\n@SuppressWarnings(\"unchecked\")\nprivate <T> List<MethodInterceptorFilter> newMethodInterceptorFilterList(MockHandler<T> mockHandler) {\n    List<MethodInterceptorFilter> newMethodInterceptorFilterList = new ArrayList<>();\n    newMethodInterceptorFilterList.add(new MethodInterceptorFilter(mockHandler, (MockSettingsImpl) Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS)));\n    return newMethodInterceptorFilterList;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..53943ee29 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,42 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MockCreationSettings<T> mockSettings = org.mockito.Mockito.mockingDetails(mock).getMockCreationSettings();\n+    T newMock = org.mockito.Mockito.mock(mockSettings);\n+    ((MockAccess) newMock).setMockitoInterceptor(newMockHandler);\n+    ((Factory) mock).setCallbacks(newMethodInterceptorFilterList(newMockHandler));\n+    copySerializationSupport(mock, newMock);\n+}\n+\n+@SuppressWarnings(\"unchecked\")\n+private <T> void copySerializationSupport(T oldMock, T newMock) {\n+    if (oldMock instanceof Serializable && newMock instanceof Serializable) {\n+        try {\n+            ByteArrayOutputStream out = new ByteArrayOutputStream();\n+            ObjectOutputStream oos = new ObjectOutputStream(out);\n+            oos.writeObject(oldMock);\n+            oos.flush();\n+            oos.close();\n+            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n+            Object newMockCopy = ois.readObject();\n+            ois.close();\n+            BeanUtils.copyProperties(newMockCopy, newMock);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to copy serialization support from old to new mock\", e);\n+        }\n+    }\n+}\n+\n+@SuppressWarnings(\"unchecked\")\n+private <T> List<MethodInterceptorFilter> newMethodInterceptorFilterList(MockHandler<T> mockHandler) {\n+    List<MethodInterceptorFilter> newMethodInterceptorFilterList = new ArrayList<>();\n+    newMethodInterceptorFilterList.add(new MethodInterceptorFilter(mockHandler, (MockSettingsImpl) Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS)));\n+    return newMethodInterceptorFilterList;\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}