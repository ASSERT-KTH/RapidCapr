{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      JSDocInfo docInfo = NodeUtil.getBestJSDocInfo(child);\n      JSType thisType = docInfo != null && docInfo.hasThisType()\n          ? getJSType(docInfo.getThisType()).restrictByNotNullOrUndefined()\n          : null;\n      if (thisType != null && !NodeUtil.isGet(child.getParent())) {\n        report(t, child, MUST_USE_GET_FOR_THIS);\n        ensureTyped(t, n);\n        return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..09f8e3da 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      JSDocInfo docInfo = NodeUtil.getBestJSDocInfo(child);\n+      JSType thisType = docInfo != null && docInfo.hasThisType()\n+          ? getJSType(docInfo.getThisType()).restrictByNotNullOrUndefined()\n+          : null;\n+      if (thisType != null && !NodeUtil.isGet(child.getParent())) {\n+        report(t, child, MUST_USE_GET_FOR_THIS);\n+        ensureTyped(t, n);\n+        return;\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}