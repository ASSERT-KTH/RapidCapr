{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is the largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        final Chronology chrono = partial.getChronology();\n        final DateTimeFieldType type = partial.getFieldType(fieldIndex);\n        int year = 0;\n        int month = 0;\n        int day = 0;\n        long millis = 0L;\n\n        for (int i = 0; i < partial.size(); i++) {\n            int value = values[i];\n\n            if (i == fieldIndex) {\n                value = type.getField(chrono).add(value, valueToAdd);\n            }\n\n            millis = partial.getFieldType(i).getField(chrono).set(millis, value);\n\n            if (i == 0) {\n                year = value;\n            } else if (i == 1) {\n                month = value;\n                // check if the day is February 29 and if the year is a leap year\n                if (day == 29 && month == 2 && isLeapYear(year)) {\n                    day = 29;\n                } else {\n                    day = Math.min(day, chrono.getDaysInMonthMax(year, month));\n                }\n            } else {\n                day = value;\n            }\n        }\n\n        int[] result = { year, month, day };\n        return chrono.get(partial, millis, result);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n\nprivate boolean isLeapYear(int year) {\n    return (((year & 3) == 0) && ((year % 100) != 0) || (year % 400) == 0);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..a62afe00 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,56 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // month is the largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        final Chronology chrono = partial.getChronology();\n+        final DateTimeFieldType type = partial.getFieldType(fieldIndex);\n+        int year = 0;\n+        int month = 0;\n+        int day = 0;\n+        long millis = 0L;\n+\n+        for (int i = 0; i < partial.size(); i++) {\n+            int value = values[i];\n+\n+            if (i == fieldIndex) {\n+                value = type.getField(chrono).add(value, valueToAdd);\n+            }\n+\n+            millis = partial.getFieldType(i).getField(chrono).set(millis, value);\n+\n+            if (i == 0) {\n+                year = value;\n+            } else if (i == 1) {\n+                month = value;\n+                // check if the day is February 29 and if the year is a leap year\n+                if (day == 29 && month == 2 && isLeapYear(year)) {\n+                    day = 29;\n+                } else {\n+                    day = Math.min(day, chrono.getDaysInMonthMax(year, month));\n+                }\n+            } else {\n+                day = value;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        int[] result = { year, month, day };\n+        return chrono.get(partial, millis, result);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n+\n+private boolean isLeapYear(int year) {\n+    return (((year & 3) == 0) && ((year % 100) != 0) || (year % 400) == 0);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}