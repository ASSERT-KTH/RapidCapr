{
    "patch": "    // Remove any unreferenced params at the end of the parameter list.\n    Node functionNode = fnScope.getRootNode();\n    Node parameterList = NodeUtil.getFunctionParameters(functionNode);\n    // Edgecase for arrow functions\n    if (parameterList == null) {\n      return;\n    }\n    Node lastArg;\n    while ((lastArg = parameterList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        parameterList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b397e4af 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Remove any unreferenced params at the end of the parameter list.\n+    Node functionNode = fnScope.getRootNode();\n+    Node parameterList = NodeUtil.getFunctionParameters(functionNode);\n+    // Edgecase for arrow functions\n+    if (parameterList == null) {\n+      return;\n+    }\n+    Node lastArg;\n+    while ((lastArg = parameterList.getLastChild()) != null) {\n+      Var var = fnScope.getVar(lastArg.getString());\n+      if (!referenced.contains(var)) {\n+        parameterList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable lastArg is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}