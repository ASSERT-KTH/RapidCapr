{
    "patch": "            Type actualTypeArgument = null;\n            for (Type bound : typeVariable.getBounds()) {\n                if (bound instanceof Class && ((Class<?>) bound).isAssignableFrom(Object.class)) {\n                    actualTypeArgument = bound;\n                } else if (bound instanceof ParameterizedType) {\n                    actualTypeArgument = getActualTypeArgumentFor((ParameterizedType) bound, typeVariable.getName());\n                    break;\n                }\n            }\n            if (actualTypeArgument != null) {\n                registerTypeVariablesOn(actualTypeArgument);\n            } else {\n                registerTypeVariablesOn(Object.class);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..0c205b817 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,24 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+            Type actualTypeArgument = null;\n+            for (Type bound : typeVariable.getBounds()) {\n+                if (bound instanceof Class && ((Class<?>) bound).isAssignableFrom(Object.class)) {\n+                    actualTypeArgument = bound;\n+                } else if (bound instanceof ParameterizedType) {\n+                    actualTypeArgument = getActualTypeArgumentFor((ParameterizedType) bound, typeVariable.getName());\n+                    break;\n+                }\n+            }\n+            if (actualTypeArgument != null) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            } else {\n+                registerTypeVariablesOn(Object.class);\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}