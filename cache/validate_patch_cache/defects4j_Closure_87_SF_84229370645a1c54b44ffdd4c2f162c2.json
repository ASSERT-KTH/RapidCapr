{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n    Node parent = maybeExpr.getParent();\n\n    // Not foldable if the child node is a function expression or if the enclosing\n    // expression is assigned to a variable\n    if (NodeUtil.isFunctionExpression(maybeExpr) || (parent != null && parent.getType() == Token.ASSIGN)) {\n      return false;\n    }\n\n    // Traverse through the child expression until we reach the final expression\n    while (true) {\n      Node child = maybeExpr.getFirstChild();\n      while (child.getType() == Token.BLOCK && child.hasOneChild()) {\n        // Skip over nested blocks with only one child\n        child = child.getFirstChild();\n      }\n      if (child.getType() != Token.HOOK && child.getType() != Token.AND && child.getType() != Token.OR &&\n          child.getType() != Token.COMMA && child.getType() != Token.NOT) {\n        break;\n      }\n      maybeExpr = child;\n    }\n\n    // Foldable only if the child expression is an expression statement and it does not have\n    // any side effects\n    if (maybeExpr.getType() == Token.EXPR_RESULT && !NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild())) {\n      Node expr = maybeExpr.getFirstChild();\n      if (expr.getType() == Token.OR) {\n        Node left = expr.getFirstChild();\n        Node right = left.getNext();\n        return left.getType() == Token.NAME && right.getType() == Token.CALL && right.getFirstChild().getType() == Token.TRUE;\n      }\n      return true;\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..d52e299c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,47 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+    Node parent = maybeExpr.getParent();\n+\n+    // Not foldable if the child node is a function expression or if the enclosing\n+    // expression is assigned to a variable\n+    if (NodeUtil.isFunctionExpression(maybeExpr) || (parent != null && parent.getType() == Token.ASSIGN)) {\n+      return false;\n+    }\n+\n+    // Traverse through the child expression until we reach the final expression\n+    while (true) {\n+      Node child = maybeExpr.getFirstChild();\n+      while (child.getType() == Token.BLOCK && child.hasOneChild()) {\n+        // Skip over nested blocks with only one child\n+        child = child.getFirstChild();\n+      }\n+      if (child.getType() != Token.HOOK && child.getType() != Token.AND && child.getType() != Token.OR &&\n+          child.getType() != Token.COMMA && child.getType() != Token.NOT) {\n+        break;\n       }\n+      maybeExpr = child;\n     }\n \n-    return false;\n+    // Foldable only if the child expression is an expression statement and it does not have\n+    // any side effects\n+    if (maybeExpr.getType() == Token.EXPR_RESULT && !NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild())) {\n+      Node expr = maybeExpr.getFirstChild();\n+      if (expr.getType() == Token.OR) {\n+        Node left = expr.getFirstChild();\n+        Node right = left.getNext();\n+        return left.getType() == Token.NAME && right.getType() == Token.CALL && right.getFirstChild().getType() == Token.TRUE;\n+      }\n+      return true;\n+    }\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}