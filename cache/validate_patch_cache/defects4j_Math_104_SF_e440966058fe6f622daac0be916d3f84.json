{
    "patch": "public double regularizedGammaP(double a, double x) {\n    double epsilon = 1e-15;\n    double maxIterations = 1000;\n\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid argument for gamma function.\");\n    }\n\n    if (x == 0) {\n        return 0;\n    } else if (x < a + 1) {\n        double term = a;\n        double sum = term;\n        int i = 1;\n        while (Math.abs(term) >= epsilon && i <= maxIterations) {\n            term = term * x / (a + i);\n            sum += term;\n            i++;\n        }\n        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n    } else {\n        double b0 = 1;\n        double b1 = x + 1 - a;\n        double b2 = x;\n        double c = 1;\n        double delta = 1 - b1 / b2;\n        int i = 2;\n        while (Math.abs(delta) >= epsilon && Math.abs(b2) <= Double.MAX_VALUE && i <= maxIterations) {\n            double tmp = b1;\n            b1 = b2;\n            b2 = x * b1 + i * tmp;\n            c = x * c + i * b0;\n            tmp = b2 / c;\n            delta = tmp - delta;\n            b0 = b1 / tmp;\n            b1 = delta * b0 - b1;\n            if (Math.abs(b0) > Double.MAX_VALUE / epsilon) {\n                b0 *= epsilon;\n                b1 *= epsilon;\n                b2 *= epsilon;\n                c *= epsilon;\n            }\n            i++;\n        }\n        double gammaValue = Math.exp(-x + a * Math.log(x) - logGamma(a));\n        return 1 - gammaValue * b1 / b2;\n    }\n}\n\n// This function is used internally in the above function to compute the log gamma value.\npublic double logGamma(double x) {\n    if (x <= 0) {\n        throw new IllegalArgumentException(\"Invalid input argument for log gamma function.\");\n    }\n\n    double cof[] = {\n        76.18009172947146,\n        -86.50532032941677,\n        24.01409824083091,\n        -1.231739572450155,\n        0.1208650973866179e-2,\n        -0.5395239384953e-5\n    };\n    double ser = 1.000000000190015;\n    double y = x;\n    double tmp = x + 5.5 - (x + 0.5) * Math.log(x + 5.5);\n    double dig = tmp - 4.7421875;\n    double sum = 0.0;\n    for (int i = 0; i < 6; ++i) {\n        sum += cof[i] / ++y;\n    }\n    return dig + Math.log(2.5066282746310005 * sum / x);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..e2d1afc53 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,79 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public double regularizedGammaP(double a, double x) {\n+    double epsilon = 1e-15;\n+    double maxIterations = 1000;\n+\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid argument for gamma function.\");\n+    }\n+\n+    if (x == 0) {\n+        return 0;\n+    } else if (x < a + 1) {\n+        double term = a;\n+        double sum = term;\n+        int i = 1;\n+        while (Math.abs(term) >= epsilon && i <= maxIterations) {\n+            term = term * x / (a + i);\n+            sum += term;\n+            i++;\n+        }\n+        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+    } else {\n+        double b0 = 1;\n+        double b1 = x + 1 - a;\n+        double b2 = x;\n+        double c = 1;\n+        double delta = 1 - b1 / b2;\n+        int i = 2;\n+        while (Math.abs(delta) >= epsilon && Math.abs(b2) <= Double.MAX_VALUE && i <= maxIterations) {\n+            double tmp = b1;\n+            b1 = b2;\n+            b2 = x * b1 + i * tmp;\n+            c = x * c + i * b0;\n+            tmp = b2 / c;\n+            delta = tmp - delta;\n+            b0 = b1 / tmp;\n+            b1 = delta * b0 - b1;\n+            if (Math.abs(b0) > Double.MAX_VALUE / epsilon) {\n+                b0 *= epsilon;\n+                b1 *= epsilon;\n+                b2 *= epsilon;\n+                c *= epsilon;\n+            }\n+            i++;\n+        }\n+        double gammaValue = Math.exp(-x + a * Math.log(x) - logGamma(a));\n+        return 1 - gammaValue * b1 / b2;\n+    }\n+}\n+\n+// This function is used internally in the above function to compute the log gamma value.\n+public double logGamma(double x) {\n+    if (x <= 0) {\n+        throw new IllegalArgumentException(\"Invalid input argument for log gamma function.\");\n+    }\n+\n+    double cof[] = {\n+        76.18009172947146,\n+        -86.50532032941677,\n+        24.01409824083091,\n+        -1.231739572450155,\n+        0.1208650973866179e-2,\n+        -0.5395239384953e-5\n+    };\n+    double ser = 1.000000000190015;\n+    double y = x;\n+    double tmp = x + 5.5 - (x + 0.5) * Math.log(x + 5.5);\n+    double dig = tmp - 4.7421875;\n+    double sum = 0.0;\n+    for (int i = 0; i < 6; ++i) {\n+        sum += cof[i] / ++y;\n+    }\n+    return dig + Math.log(2.5066282746310005 * sum / x);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}