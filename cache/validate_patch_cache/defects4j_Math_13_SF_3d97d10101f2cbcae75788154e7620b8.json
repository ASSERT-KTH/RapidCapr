{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final double EPSILON = 1.0e-12;\n    final EigenDecomposition eig = new EigenDecomposition(m);\n\n    final RealMatrix d = eig.getD();\n    final RealMatrix v = eig.getV();\n\n    for (int i = 0; i < d.getColumnDimension(); i++) {\n        double dValue = d.getEntry(i, i);\n\n        // Ensure that diagonal entry is non-negative.\n        if (dValue < 0)\n            dValue = 0;\n\n        d.setEntry(i, i, Math.sqrt(dValue));\n    }\n\n    RealMatrix sqrtM = v.multiply(d).multiply(v.transpose());\n\n    return sqrtM.scalarMultiply(1.0 / sqrtM.getFrobeniusNorm());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d10a891eb 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final double EPSILON = 1.0e-12;\n+    final EigenDecomposition eig = new EigenDecomposition(m);\n+\n+    final RealMatrix d = eig.getD();\n+    final RealMatrix v = eig.getV();\n+\n+    for (int i = 0; i < d.getColumnDimension(); i++) {\n+        double dValue = d.getEntry(i, i);\n+\n+        // Ensure that diagonal entry is non-negative.\n+        if (dValue < 0)\n+            dValue = 0;\n+\n+        d.setEntry(i, i, Math.sqrt(dValue));\n     }\n+\n+    RealMatrix sqrtM = v.multiply(d).multiply(v.transpose());\n+\n+    return sqrtM.scalarMultiply(1.0 / sqrtM.getFrobeniusNorm());\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3496978.1837704973> but was:<3496978.1842644885>",
    "test_result": "FAIL"
}