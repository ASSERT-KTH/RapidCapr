{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    double sum = 0.0;\n    double term = 1.0 / a;\n    int n = 1;\n\n    while (Math.abs(term) > epsilon && n <= maxIterations) {\n        sum += term;\n        term *= x / (a + n);\n        n++;\n    }\n\n    if (n > maxIterations) {\n        throw new IllegalArgumentException(\"Maximum number of iterations exceeded\");\n    }\n\n    return Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..01440fbc3 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,23 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    double sum = 0.0;\n+    double term = 1.0 / a;\n+    int n = 1;\n+\n+    while (Math.abs(term) > epsilon && n <= maxIterations) {\n+        sum += term;\n+        term *= x / (a + n);\n+        n++;\n+    }\n+\n+    if (n > maxIterations) {\n+        throw new IllegalArgumentException(\"Maximum number of iterations exceeded\");\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}