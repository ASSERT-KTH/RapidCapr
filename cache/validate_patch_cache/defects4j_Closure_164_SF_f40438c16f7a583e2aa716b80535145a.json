{
    "patch": "public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n    \n    if (parameters.hasChildWithName(Token.THIS)) {\n        // Special case for methods.\n        // For a method to be a subtype of 'that', its this type must be a subtype of 'that'.\n        JSType thisType = parameters.getFirstChild().getJSType();\n        if (thisType != null) {\n            if (!that.getThisType().isSubtype(thisType)) {\n                return false;\n            }\n        }\n    }\n\n    // For a function to be a subtype of 'that', its return type must be a subtype of 'that'.\n    if (!returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // For a function to be a subtype of 'that', each of its parameter types must be a supertype of the corresponding\n    // parameter types of 'that'. Parameter types are contravariant, so we must ensure that the parameter type of\n    // 'that' is a subtype of the corresponding parameter type of 'this'.\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n        JSType thisParamType = thisParam.getJSType();\n        JSType thatParamType = thatParam.getJSType();\n        boolean optionalThisParam = ParameterUtil.isOptionalParameter(thisParam);\n        boolean optionalThatParam = ParameterUtil.isOptionalParameter(thatParam);\n        boolean varThisParams = thisParam.isVarArgs();\n        boolean varThatParams = thatParam.isVarArgs();\n\n        if (varThisParams || varThatParams) {\n            // If one of the parameters is varargs, they must both be varargs.\n            if (!varThisParams || !varThatParams) {\n                return false;\n            }\n\n            // If we match on varargs, there are no more parameters.\n            return thatParamType.isSubtype(thisParamType);\n        } else if (optionalThisParam || optionalThatParam) {\n            // If one of the parameters is optional, check if we have no more parameters.\n            thisParam = thisParam.getNext();\n            thatParam = thatParam.getNext();\n            if (thisParam == null && thatParam == null) {\n                return true;\n            }\n\n            // If the parameter type of 'that' is not a subtype of the corresponding parameter type of 'this',\n            // then 'this' is not a subtype of 'that'.\n            if (thatParamType != null && !thatParamType.isSubtype(thisParamType)) {\n                return false;\n            }\n        } else if (!thatParamType.isSubtype(thisParamType)) {\n            // If the parameter type of 'that' is not a subtype of the corresponding parameter type of 'this',\n            // then 'this' is not a subtype of 'that'.\n            return false;\n        }\n\n        thisParam = thisParam.getNext();\n        thatParam = thatParam.getNext();\n    }\n\n    // If one function has more required parameter types than the other, it is not a subtype.\n    if (thisParam != null || thatParam != null) {\n        return false;\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..d4a50a45 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,81 +77,80 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n+public boolean isSubtype(JSType other) {\n     if (!(other instanceof ArrowType)) {\n-      return false;\n+        return false;\n     }\n \n     ArrowType that = (ArrowType) other;\n+    \n+    if (parameters.hasChildWithName(Token.THIS)) {\n+        // Special case for methods.\n+        // For a method to be a subtype of 'that', its this type must be a subtype of 'that'.\n+        JSType thisType = parameters.getFirstChild().getJSType();\n+        if (thisType != null) {\n+            if (!that.getThisType().isSubtype(thisType)) {\n+                return false;\n+            }\n+        }\n+    }\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n-\n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n+    // For a function to be a subtype of 'that', its return type must be a subtype of 'that'.\n+    if (!returnType.isSubtype(that.returnType)) {\n+        return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n+    // For a function to be a subtype of 'that', each of its parameter types must be a supertype of the corresponding\n+    // parameter types of 'that'. Parameter types are contravariant, so we must ensure that the parameter type of\n+    // 'that' is a subtype of the corresponding parameter type of 'this'.\n     Node thisParam = parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n     while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n-      }\n+        JSType thisParamType = thisParam.getJSType();\n+        JSType thatParamType = thatParam.getJSType();\n+        boolean optionalThisParam = ParameterUtil.isOptionalParameter(thisParam);\n+        boolean optionalThatParam = ParameterUtil.isOptionalParameter(thatParam);\n+        boolean varThisParams = thisParam.isVarArgs();\n+        boolean varThatParams = thatParam.isVarArgs();\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+        if (varThisParams || varThatParams) {\n+            // If one of the parameters is varargs, they must both be varargs.\n+            if (!varThisParams || !varThatParams) {\n+                return false;\n+            }\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+            // If we match on varargs, there are no more parameters.\n+            return thatParamType.isSubtype(thisParamType);\n+        } else if (optionalThisParam || optionalThatParam) {\n+            // If one of the parameters is optional, check if we have no more parameters.\n+            thisParam = thisParam.getNext();\n+            thatParam = thatParam.getNext();\n+            if (thisParam == null && thatParam == null) {\n+                return true;\n+            }\n+\n+            // If the parameter type of 'that' is not a subtype of the corresponding parameter type of 'this',\n+            // then 'this' is not a subtype of 'that'.\n+            if (thatParamType != null && !thatParamType.isSubtype(thisParamType)) {\n+                return false;\n+            }\n+        } else if (!thatParamType.isSubtype(thisParamType)) {\n+            // If the parameter type of 'that' is not a subtype of the corresponding parameter type of 'this',\n+            // then 'this' is not a subtype of 'that'.\n+            return false;\n+        }\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n         thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n         thatParam = thatParam.getNext();\n-      }\n-\n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+    // If one function has more required parameter types than the other, it is not a subtype.\n+    if (thisParam != null || thatParam != null) {\n+        return false;\n+    }\n \n     return true;\n-  }\n+}\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}