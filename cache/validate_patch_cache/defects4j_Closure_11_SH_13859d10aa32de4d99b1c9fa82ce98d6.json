{
    "patch": "if (n.isGetProp()) {\n  Node parent = n.getParent();\n  if (parent.isExprResult()) {\n    if (n.getFirstChild().isName() && !externs.isDeclared(n.getFirstChild().getString(), true)) {\n      warnings.add(JSError.make(EXTERNS_VALIDATION_ERROR, n, missingExterns(n.getFirstChild().getString(), \"property\")));\n    } else if (n.getJSType() != null && parent.isAssign()) {\n      // To handle generic types, we should check the type of the value being assigned\n      // with the type annotation of the method call result. In case the types are different,\n      // raise a warning. If the result type is nullable and the assigned value is null\n      // it would not raise a warning, it will be covered in NotNullCheck.\n      if (!n.getBooleanProp(Node.NULLABLE_RETURN)) {\n        Node value = parent.getLastChild();\n        JSType resultType = n.getJSType();\n        JSType valueType = value.getJSType();\n        if (resultType != null && valueType != null && !resultType.isAssignableFrom(valueType)) {\n          warnings.add(JSError.make(RESULT_TYPE_WARNING, n, \"Assigned value type \" + valueType.toString() + \" does not match method result type \" + resultType.toString()));\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}