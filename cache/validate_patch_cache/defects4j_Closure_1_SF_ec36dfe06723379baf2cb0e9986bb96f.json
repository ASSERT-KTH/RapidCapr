{
    "patch": "import com.google.common.base.Preconditions;\nimport com.google.javascript.jscomp.*;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\n\nimport java.util.*;\n\npublic class RemoveUnusedFunctionArgs extends AbstractPostOrderCallback {\n    private final AbstractCompiler compiler;\n    private final boolean modifyCallSites;\n    private final CallSiteAnalyzer callSiteAnalyzer;\n    private final CallSiteOptimizer callSiteOptimizer;\n    private final List<Var> referencedVars = new ArrayList<>();\n\n    public RemoveUnusedFunctionArgs(AbstractCompiler compiler, boolean modifyCallSites) {\n        this.compiler = compiler;\n        this.modifyCallSites = modifyCallSites;\n        this.callSiteAnalyzer = new CallSiteAnalyzer(compiler);\n        this.callSiteOptimizer = new CallSiteOptimizer();\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Node node, Node parent) {\n        Scope fnScope = t.getScope();\n        if (node.isFunction()) {\n            referencedVars.clear();\n            FunctionArgumentInjectorGatherer argumentInjectorGatherer = new FunctionArgumentInjectorGatherer(\n                    new SyntacticScopeCreator(compiler),\n                    t.getInput());\n            NodeTraversal.traverse(compiler, node.getLastChild(), argumentInjectorGatherer);\n            referencedVars.addAll(argumentInjectorGatherer.getReferencedVars());\n\n            removeUnreferencedFunctionArgs(fnScope);\n        }\n    }\n\n    private void removeUnreferencedFunctionArgs(Scope fnScope) {\n        Node function = fnScope.getRootNode();\n\n        Preconditions.checkState(function.isFunction());\n        if (NodeUtil.isGetOrSetKey(function.getParent())) {\n            // The parameters object literal setters can not be removed.\n            return;\n        }\n\n        Node argList = function.getSecondChild();\n        boolean modifyCallers = modifyCallSites\n                && callSiteAnalyzer.canModifyCallers(function);\n        if (!modifyCallers) {\n            // Strip unreferenced args off the end of the function declaration.\n            Node lastArg;\n            while ((lastArg = argList.getLastChild()) != null) {\n                Var var = fnScope.getVar(lastArg.getString());\n                if (!referencedVars.contains(var)) {\n                    argList.removeChild(lastArg);\n                    compiler.reportChangeToEnclosingScope(argList);\n                } else {\n                    break;\n                }\n            }\n        } else {\n            callSiteOptimizer.optimize(fnScope, referencedVars);\n        }\n    }\n\n    private static class FunctionArgumentInjectorGatherer extends AbstractScopedCallback {\n        private final List<Var> referencedVars = new ArrayList<>();\n\n        FunctionArgumentInjectorGatherer(ScopeCreator scopeCreator, CompilerInput input) {\n            super(new AbstractCompiler() {\n                @Override\n                public double getLanguageMode() {\n                    return 0;\n                }\n\n                @Override\n                public CodingConvention getCodingConvention() {\n                    return null;\n                }\n\n                @Override\n                public void reportChangeToEnclosingScope(Node n) {}\n\n                @Override\n                public void reportCodeChange() {}\n            }, scopeCreator);\n            enterSourceFile(new JsAst(input).getAstRoot(getCompiler()));\n        }\n\n        @Override\n        public void enterScope(NodeTraversal t) {\n            Scope scope = t.getScope();\n            if (scope.isLocal()) {\n                for (Var var : scope.getVarIterable()) {\n                    if (var.getParentNode().isParamList()) {\n                        referencedVars.add(var);\n                    }\n                }\n            }\n        }\n\n        @Override\n        public void exitScope(NodeTraversal t) {}\n\n        @Override\n        public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n            return n.isFunction();\n        }\n\n        @Override\n        public void visit(NodeTraversal t, Node node, Node parent) {}\n\n        public List<Var> getReferencedVars() {\n            return referencedVars;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..7d89862c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,123 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n+import com.google.common.base.Preconditions;\n+import com.google.javascript.jscomp.*;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.util.*;\n+\n+public class RemoveUnusedFunctionArgs extends AbstractPostOrderCallback {\n+    private final AbstractCompiler compiler;\n+    private final boolean modifyCallSites;\n+    private final CallSiteAnalyzer callSiteAnalyzer;\n+    private final CallSiteOptimizer callSiteOptimizer;\n+    private final List<Var> referencedVars = new ArrayList<>();\n+\n+    public RemoveUnusedFunctionArgs(AbstractCompiler compiler, boolean modifyCallSites) {\n+        this.compiler = compiler;\n+        this.modifyCallSites = modifyCallSites;\n+        this.callSiteAnalyzer = new CallSiteAnalyzer(compiler);\n+        this.callSiteOptimizer = new CallSiteOptimizer();\n+    }\n+\n+    @Override\n+    public void visit(NodeTraversal t, Node node, Node parent) {\n+        Scope fnScope = t.getScope();\n+        if (node.isFunction()) {\n+            referencedVars.clear();\n+            FunctionArgumentInjectorGatherer argumentInjectorGatherer = new FunctionArgumentInjectorGatherer(\n+                    new SyntacticScopeCreator(compiler),\n+                    t.getInput());\n+            NodeTraversal.traverse(compiler, node.getLastChild(), argumentInjectorGatherer);\n+            referencedVars.addAll(argumentInjectorGatherer.getReferencedVars());\n+\n+            removeUnreferencedFunctionArgs(fnScope);\n+        }\n+    }\n+\n+    private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+        Node function = fnScope.getRootNode();\n+\n+        Preconditions.checkState(function.isFunction());\n+        if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+            // The parameters object literal setters can not be removed.\n+            return;\n+        }\n+\n+        Node argList = function.getSecondChild();\n+        boolean modifyCallers = modifyCallSites\n+                && callSiteAnalyzer.canModifyCallers(function);\n+        if (!modifyCallers) {\n+            // Strip unreferenced args off the end of the function declaration.\n+            Node lastArg;\n+            while ((lastArg = argList.getLastChild()) != null) {\n+                Var var = fnScope.getVar(lastArg.getString());\n+                if (!referencedVars.contains(var)) {\n+                    argList.removeChild(lastArg);\n+                    compiler.reportChangeToEnclosingScope(argList);\n+                } else {\n+                    break;\n+                }\n+            }\n         } else {\n-          break;\n+            callSiteOptimizer.optimize(fnScope, referencedVars);\n         }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+\n+    private static class FunctionArgumentInjectorGatherer extends AbstractScopedCallback {\n+        private final List<Var> referencedVars = new ArrayList<>();\n+\n+        FunctionArgumentInjectorGatherer(ScopeCreator scopeCreator, CompilerInput input) {\n+            super(new AbstractCompiler() {\n+                @Override\n+                public double getLanguageMode() {\n+                    return 0;\n+                }\n+\n+                @Override\n+                public CodingConvention getCodingConvention() {\n+                    return null;\n+                }\n+\n+                @Override\n+                public void reportChangeToEnclosingScope(Node n) {}\n+\n+                @Override\n+                public void reportCodeChange() {}\n+            }, scopeCreator);\n+            enterSourceFile(new JsAst(input).getAstRoot(getCompiler()));\n+        }\n+\n+        @Override\n+        public void enterScope(NodeTraversal t) {\n+            Scope scope = t.getScope();\n+            if (scope.isLocal()) {\n+                for (Var var : scope.getVarIterable()) {\n+                    if (var.getParentNode().isParamList()) {\n+                        referencedVars.add(var);\n+                    }\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void exitScope(NodeTraversal t) {}\n+\n+        @Override\n+        public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+            return n.isFunction();\n+        }\n+\n+        @Override\n+        public void visit(NodeTraversal t, Node node, Node parent) {}\n+\n+        public List<Var> getReferencedVars() {\n+            return referencedVars;\n+        }\n+    }\n+}\n \n \n   /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}