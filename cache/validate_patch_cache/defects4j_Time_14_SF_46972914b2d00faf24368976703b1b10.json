{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n\n        // add current values, adjusting if necessary\n        for (int i = 0, size = partial.size(); i < size; i++) {\n            try {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            } catch (IllegalArgumentException e) {\n                // adjust if necessary\n                if (i == fieldIndex) {\n                    int newVal = values[i] + valueToAdd;\n                    int max = partial.getFieldType(i).getField(iChronology).getMaximumValue(instant);\n                    int min = partial.getFieldType(i).getField(iChronology).getMinimumValue(instant);\n                    if (newVal > max || newVal < min) {\n                        // valueToAdd results in an invalid date\n                        throw e;\n                    } else {\n                        // adjust value\n                        instant = partial.getFieldType(i).getField(iChronology).set(instant, newVal);\n                    }\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        // add the valueToAdd\n        instant = add(instant, valueToAdd);\n\n        // adjust if necessary, then return result\n        try {\n            return iChronology.get(partial, instant);\n        } catch (IllegalArgumentException e) {\n            // adjust if necessary\n            if (fieldIndex >= 0 && fieldIndex < partial.size()) {\n                int max = partial.getFieldType(fieldIndex).getField(iChronology).getMaximumValue(instant);\n                int min = partial.getFieldType(fieldIndex).getField(iChronology).getMinimumValue(instant);\n                if (values[fieldIndex] > max || values[fieldIndex] < min) {\n                    // valueToAdd results in an invalid date\n                    throw e;\n                }\n            }\n            return iChronology.get(partial.getFieldTypes(), instant);\n        }\n\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..99c55dd9 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,63 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+\n+        // add current values, adjusting if necessary\n+        for (int i = 0, size = partial.size(); i < size; i++) {\n+            try {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            } catch (IllegalArgumentException e) {\n+                // adjust if necessary\n+                if (i == fieldIndex) {\n+                    int newVal = values[i] + valueToAdd;\n+                    int max = partial.getFieldType(i).getField(iChronology).getMaximumValue(instant);\n+                    int min = partial.getFieldType(i).getField(iChronology).getMinimumValue(instant);\n+                    if (newVal > max || newVal < min) {\n+                        // valueToAdd results in an invalid date\n+                        throw e;\n+                    } else {\n+                        // adjust value\n+                        instant = partial.getFieldType(i).getField(iChronology).set(instant, newVal);\n+                    }\n+                } else {\n+                    throw e;\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n+        }\n+\n+        // add the valueToAdd\n+        instant = add(instant, valueToAdd);\n+\n+        // adjust if necessary, then return result\n+        try {\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        } catch (IllegalArgumentException e) {\n+            // adjust if necessary\n+            if (fieldIndex >= 0 && fieldIndex < partial.size()) {\n+                int max = partial.getFieldType(fieldIndex).getField(iChronology).getMaximumValue(instant);\n+                int min = partial.getFieldType(fieldIndex).getField(iChronology).getMinimumValue(instant);\n+                if (values[fieldIndex] > max || values[fieldIndex] < min) {\n+                    // valueToAdd results in an invalid date\n+                    throw e;\n+                }\n+            }\n+            return iChronology.get(partial.getFieldTypes(), instant);\n         }\n+\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}