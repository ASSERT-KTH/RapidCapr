{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value); \n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n    \n    // Handle mean\n    if (meanImpl != null) {\n        if (meanImpl instanceof Mean) {\n            ((Mean) meanImpl).increment(value);\n            ((Mean) meanImpl).evaluate();\n        } else {\n            double[] values = {value};\n            meanImpl.incrementAll(values);\n            meanImpl.evaluate();\n        }\n    } else {\n        meanImpl = new Mean();\n        meanImpl.increment(value);\n    }\n\n    // Handle variance\n    if (varianceImpl != null) {\n        if (varianceImpl instanceof Variance) {\n            ((Variance) varianceImpl).increment(value);\n            ((Variance) varianceImpl).evaluate();\n        } else {\n            double[] values = {value};\n            varianceImpl.clear();\n            varianceImpl.incrementAll(values);\n            ((Variance) varianceImpl).evaluate();\n        }\n    } else {\n        varianceImpl = new Variance();\n        varianceImpl.increment(value);\n        ((Variance) varianceImpl).evaluate();\n    }\n\n    // Handle geomean\n    if (geoMeanImpl != null) {\n        if (geoMeanImpl instanceof GeometricMean) {\n            ((GeometricMean) geoMeanImpl).increment(value);\n            ((GeometricMean) geoMeanImpl).evaluate();\n        } else {\n            double[] values = {value};\n            geoMeanImpl.clear();\n            geoMeanImpl.incrementAll(values);\n            ((GeometricMean) geoMeanImpl).evaluate();\n        }\n    } else {\n        geoMeanImpl = new GeometricMean();\n        geoMeanImpl.increment(value);\n        ((GeometricMean) geoMeanImpl).evaluate();\n    }\n\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..6da66d64d 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,66 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value); \n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+    \n+    // Handle mean\n+    if (meanImpl != null) {\n+        if (meanImpl instanceof Mean) {\n+            ((Mean) meanImpl).increment(value);\n+            ((Mean) meanImpl).evaluate();\n+        } else {\n+            double[] values = {value};\n+            meanImpl.incrementAll(values);\n+            meanImpl.evaluate();\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+    } else {\n+        meanImpl = new Mean();\n+        meanImpl.increment(value);\n+    }\n+\n+    // Handle variance\n+    if (varianceImpl != null) {\n+        if (varianceImpl instanceof Variance) {\n+            ((Variance) varianceImpl).increment(value);\n+            ((Variance) varianceImpl).evaluate();\n+        } else {\n+            double[] values = {value};\n+            varianceImpl.clear();\n+            varianceImpl.incrementAll(values);\n+            ((Variance) varianceImpl).evaluate();\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+    } else {\n+        varianceImpl = new Variance();\n+        varianceImpl.increment(value);\n+        ((Variance) varianceImpl).evaluate();\n+    }\n+\n+    // Handle geomean\n+    if (geoMeanImpl != null) {\n+        if (geoMeanImpl instanceof GeometricMean) {\n+            ((GeometricMean) geoMeanImpl).increment(value);\n+            ((GeometricMean) geoMeanImpl).evaluate();\n+        } else {\n+            double[] values = {value};\n+            geoMeanImpl.clear();\n+            geoMeanImpl.incrementAll(values);\n+            ((GeometricMean) geoMeanImpl).evaluate();\n         }\n-        n++;\n+    } else {\n+        geoMeanImpl = new GeometricMean();\n+        geoMeanImpl.increment(value);\n+        ((GeometricMean) geoMeanImpl).evaluate();\n     }\n \n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "error: no suitable method found for evaluate()",
    "test_result": "ERROR"
}