{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    long fixedInstant = instant.getMillis();\n    long instantLocal = chrono.getZone().convertUTCToLocal(fixedInstant);\n    Chronology adjustedChrono = selectChronology(chrono);\n    \n    // Use a temporary bucket to get the offset and zone from the parsed text\n    DateTimeParserBucket tempBucket = new DateTimeParserBucket(\n            instantLocal, adjustedChrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(tempBucket, text, position);\n    \n    // Calculate the adjusted instant based on the parsed text's offset and zone\n    long adjustedInstant = tempBucket.computeMillis();\n    if (tempBucket.getOffsetInteger() != null) {\n        // If an offset was parsed, use it to calculate the adjusted instant\n        adjustedInstant -= tempBucket.getOffsetInteger().intValue();\n    } else if (tempBucket.getZone() != null) {\n        // If a zone was parsed, use it to calculate the adjusted instant\n        adjustedChrono = adjustedChrono.withZone(tempBucket.getZone());\n        adjustedInstant -= adjustedChrono.getZone().getOffset(adjustedInstant);\n    }\n    \n    // Continue parsing with the adjusted instant\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            adjustedInstant, adjustedChrono, iLocale, iPivotYear, iDefaultYear);\n    newPos = parser.parseInto(bucket, text, newPos);\n    instant.setMillis(bucket.computeMillis());\n    \n    // Set the chronology and time zone as appropriate\n    if (iOffsetParsed && tempBucket.getOffsetInteger() != null) {\n        int parsedOffset = tempBucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    \n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..86afd362 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -694,34 +694,54 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n-    }\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    long fixedInstant = instant.getMillis();\n+    long instantLocal = chrono.getZone().convertUTCToLocal(fixedInstant);\n+    Chronology adjustedChrono = selectChronology(chrono);\n+    \n+    // Use a temporary bucket to get the offset and zone from the parsed text\n+    DateTimeParserBucket tempBucket = new DateTimeParserBucket(\n+            instantLocal, adjustedChrono, iLocale, iPivotYear, iDefaultYear);\n+    int newPos = parser.parseInto(tempBucket, text, position);\n+    \n+    // Calculate the adjusted instant based on the parsed text's offset and zone\n+    long adjustedInstant = tempBucket.computeMillis();\n+    if (tempBucket.getOffsetInteger() != null) {\n+        // If an offset was parsed, use it to calculate the adjusted instant\n+        adjustedInstant -= tempBucket.getOffsetInteger().intValue();\n+    } else if (tempBucket.getZone() != null) {\n+        // If a zone was parsed, use it to calculate the adjusted instant\n+        adjustedChrono = adjustedChrono.withZone(tempBucket.getZone());\n+        adjustedInstant -= adjustedChrono.getZone().getOffset(adjustedInstant);\n+    }\n+    \n+    // Continue parsing with the adjusted instant\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            adjustedInstant, adjustedChrono, iLocale, iPivotYear, iDefaultYear);\n+    newPos = parser.parseInto(bucket, text, newPos);\n+    instant.setMillis(bucket.computeMillis());\n+    \n+    // Set the chronology and time zone as appropriate\n+    if (iOffsetParsed && tempBucket.getOffsetInteger() != null) {\n+        int parsedOffset = tempBucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        chrono = chrono.withZone(parsedZone);\n+    } else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+    }\n+    instant.setChronology(chrono);\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    \n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1> but was:<-2>",
    "test_result": "FAIL"
}