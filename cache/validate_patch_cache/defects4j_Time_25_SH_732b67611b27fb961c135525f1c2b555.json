{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // get the local time at next/previous transitions\n    long nextTransLocal = nextTransition(instantLocal);\n    long prevTransLocal = previousTransition(instantLocal);\n\n    // check if next/previous transitions are closer than current offset difference\n    if (Math.abs(nextTransLocal - instantLocal) < Math.abs(offsetLocal - offsetAdjusted)) {\n        int offsetNext = getOffset(nextTransLocal);\n        if (offsetLocal < offsetNext) {\n            // we are before a DST gap\n            return offsetLocal;\n        } else {\n            // we are during or after a DST overlap\n            return Math.max(offsetLocal, offsetNext);\n        }\n    } else if (Math.abs(prevTransLocal - instantLocal) < Math.abs(offsetLocal - offsetAdjusted)) {\n        int offsetPrev = getOffset(prevTransLocal);\n        if (offsetPrev < offsetLocal) {\n            // we are after a DST overlap\n            return offsetLocal;\n        } else {\n            // we are during or before a DST gap\n            return getOffset(prevTransLocal - 1);\n        }\n    } else if (offsetLocal < offsetAdjusted) {\n        // if more than 24 hours from the transition (in either direction), return the estimated offset\n        long nextTransAdjusted = (nextTransLocal - offsetLocal < instantLocal - offsetAdjusted) ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n        long interval = Math.abs(nextTransAdjusted - instantAdjusted);\n        if (interval >= DateTimeConstants.MILLIS_PER_DAY) {\n            return offsetLocal;\n        }\n        // calculate the offset just before the transition in the estimated timezone\n        int offsetBeforeTransAdjusted = getOffset(nextTransAdjusted - 1);\n        // check if there is a gap or overlap\n        if (offsetAdjusted >= offsetBeforeTransAdjusted) {\n            // we're in an overlap, return the bigger of the two offsets\n            return Math.max(offsetLocal, offsetAdjusted);\n        } else {\n            // we're in a gap, return the offset just before the transition in the estimated timezone\n            return offsetBeforeTransAdjusted;\n        }\n    } else {\n        // if more than 24 hours from the transition (in either direction), return the estimated offset\n        long prevTransAdjusted = (prevTransLocal - offsetLocal > instantLocal - offsetAdjusted) ? previousTransition(instantAdjusted) : nextTransition(instantAdjusted);\n        long interval = Math.abs(prevTransAdjusted - instantAdjusted);\n        if (interval >= DateTimeConstants.MILLIS_PER_DAY) {\n            return offsetLocal;\n        }\n        // calculate the offset just before the transition in the estimated timezone\n        int offsetBeforePrevAdjusted = getOffset(prevTransAdjusted - 1);\n        // check if there is a gap or overlap\n        if (offsetAdjusted >= offsetBeforePrevAdjusted) {\n            // we're in an overlap, return the bigger of the two offsets\n            return offsetLocal;\n        } else {\n            // we're in a gap, return the offset just before the transition in the estimated timezone\n            return offsetBeforePrevAdjusted;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b377eda3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,67 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // get the local time at next/previous transitions\n+    long nextTransLocal = nextTransition(instantLocal);\n+    long prevTransLocal = previousTransition(instantLocal);\n+\n+    // check if next/previous transitions are closer than current offset difference\n+    if (Math.abs(nextTransLocal - instantLocal) < Math.abs(offsetLocal - offsetAdjusted)) {\n+        int offsetNext = getOffset(nextTransLocal);\n+        if (offsetLocal < offsetNext) {\n+            // we are before a DST gap\n+            return offsetLocal;\n+        } else {\n+            // we are during or after a DST overlap\n+            return Math.max(offsetLocal, offsetNext);\n+        }\n+    } else if (Math.abs(prevTransLocal - instantLocal) < Math.abs(offsetLocal - offsetAdjusted)) {\n+        int offsetPrev = getOffset(prevTransLocal);\n+        if (offsetPrev < offsetLocal) {\n+            // we are after a DST overlap\n+            return offsetLocal;\n+        } else {\n+            // we are during or before a DST gap\n+            return getOffset(prevTransLocal - 1);\n+        }\n+    } else if (offsetLocal < offsetAdjusted) {\n+        // if more than 24 hours from the transition (in either direction), return the estimated offset\n+        long nextTransAdjusted = (nextTransLocal - offsetLocal < instantLocal - offsetAdjusted) ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n+        long interval = Math.abs(nextTransAdjusted - instantAdjusted);\n+        if (interval >= DateTimeConstants.MILLIS_PER_DAY) {\n+            return offsetLocal;\n+        }\n+        // calculate the offset just before the transition in the estimated timezone\n+        int offsetBeforeTransAdjusted = getOffset(nextTransAdjusted - 1);\n+        // check if there is a gap or overlap\n+        if (offsetAdjusted >= offsetBeforeTransAdjusted) {\n+            // we're in an overlap, return the bigger of the two offsets\n+            return Math.max(offsetLocal, offsetAdjusted);\n+        } else {\n+            // we're in a gap, return the offset just before the transition in the estimated timezone\n+            return offsetBeforeTransAdjusted;\n+        }\n+    } else {\n+        // if more than 24 hours from the transition (in either direction), return the estimated offset\n+        long prevTransAdjusted = (prevTransLocal - offsetLocal > instantLocal - offsetAdjusted) ? previousTransition(instantAdjusted) : nextTransition(instantAdjusted);\n+        long interval = Math.abs(prevTransAdjusted - instantAdjusted);\n+        if (interval >= DateTimeConstants.MILLIS_PER_DAY) {\n+            return offsetLocal;\n+        }\n+        // calculate the offset just before the transition in the estimated timezone\n+        int offsetBeforePrevAdjusted = getOffset(prevTransAdjusted - 1);\n+        // check if there is a gap or overlap\n+        if (offsetAdjusted >= offsetBeforePrevAdjusted) {\n+            // we're in an overlap, return the bigger of the two offsets\n+            return offsetLocal;\n+        } else {\n+            // we're in a gap, return the offset just before the transition in the estimated timezone\n+            return offsetBeforePrevAdjusted;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}