{
    "patch": "int c1, c2, c3, c4;\nint i = start;\n\nwhile (i < end) {\n    char ch = s.charAt(i);\n    if (ch < 0x80) {\n        out.append((char) ch);\n        i++;\n    } else {\n        switch (decode(ch)) {\n            case -1:\n                out.append(REPLACEMENT_CHAR);\n                i++;\n                continue;\n            case -2:\n                if (i + 3 < end) {\n                    c1 = decode(s.charAt(i + 1));\n                    c2 = decode(s.charAt(i + 2));\n                    c3 = decode(s.charAt(i + 3));\n                    if ((c1 & c2 & c3 & 0xC0) == 0x80) {\n                        out.append((char) (((ch & 0x0F) << 12) |\n                                           ((c1 & 0x3F) << 6) |\n                                           ((c2 & 0x3F) << 0)));\n                        i += 4;\n                        break;\n                    }\n                }\n                out.append(REPLACEMENT_CHAR);\n                i++;\n                break;\n            case -3:\n                if (i + 5 < end) {\n                    c1 = decode(s.charAt(i + 1));\n                    c2 = decode(s.charAt(i + 2));\n                    c3 = decode(s.charAt(i + 3));\n                    c4 = decode(s.charAt(i + 4));\n                    int uc = (((ch & 0x07) << 18) |\n                              ((c1 & 0x3F) << 12) |\n                              ((c2 & 0x3F) << 6) |\n                              ((c3 & 0x3F) << 0));\n                    if ((c4 & 0xC0) == 0x80 &&\n                        (((uc >= 0x0000) && (uc <= 0xD7FF)) ||\n                         ((uc >= 0xE000) && (uc <= 0xFFFF)))) {\n                        out.append(Character.highSurrogate(uc));\n                        out.append(Character.lowSurrogate(uc));\n                        i += 6;\n                        break;\n                    }\n                }\n                out.append(REPLACEMENT_CHAR);\n                i++;\n                break;\n            default:\n                // This case should never be reached\n                assert false;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}