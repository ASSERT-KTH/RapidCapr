{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n\n  Node function = fnScope.getRootNode();\n\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  int expectedLength = argList.getChildCount();\n  boolean modifyCallers = modifyCallSites\n          && callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers) {\n    // Strip unreferenced args off the end of the function declaration.\n    for (int i = expectedLength - 1; i >= 0; i--) {\n      Node arg = argList.getChildAtIndex(i);\n      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n        if (arg.getNext() == null) {\n          // last argument can be safely removed\n          arg.detachFromParent();\n        } else {\n          // we must remove this arg and all remaining args\n          argList.removeChildren(i, argList.getChildCount());\n        }\n        compiler.reportCodeChange();\n        expectedLength--;\n      }\n    }\n\n    // check that there are no more arguments left to remove\n    Preconditions.checkState(expectedLength == referenced.size(),\n      \"Size mismatch: %s vs %s\", expectedLength, referenced.size());\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c92c97dd 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,45 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+\n+  Node function = fnScope.getRootNode();\n+\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  int expectedLength = argList.getChildCount();\n+  boolean modifyCallers = modifyCallSites\n+          && callSiteOptimizer.canModifyCallers(function);\n+  if (!modifyCallers) {\n+    // Strip unreferenced args off the end of the function declaration.\n+    for (int i = expectedLength - 1; i >= 0; i--) {\n+      Node arg = argList.getChildAtIndex(i);\n+      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+        if (arg.getNext() == null) {\n+          // last argument can be safely removed\n+          arg.detachFromParent();\n+        } else {\n+          // we must remove this arg and all remaining args\n+          argList.removeChildren(i, argList.getChildCount());\n+        }\n+        compiler.reportCodeChange();\n+        expectedLength--;\n+      }\n+    }\n+\n+    // check that there are no more arguments left to remove\n+    Preconditions.checkState(expectedLength == referenced.size(),\n+      \"Size mismatch: %s vs %s\", expectedLength, referenced.size());\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+  }\n+\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}