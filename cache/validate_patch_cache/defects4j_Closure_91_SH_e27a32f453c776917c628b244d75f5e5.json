{
    "patch": "    if (NodeUtil.isGet(lhs)) {\n      if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n      Node llhs = lhs.getFirstChild();\n      if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n      while (lhs.getType() == Token.GETPROP) {\n        lhs = lhs.getFirstChild();\n      }\n      String className = NodeUtil.getNameNode(lhs).getString();\n      if (classPrototypes.contains(className)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..845bbbf5 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,19 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+    if (NodeUtil.isGet(lhs)) {\n+      if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+      Node llhs = lhs.getFirstChild();\n+      if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+      while (lhs.getType() == Token.GETPROP) {\n+        lhs = lhs.getFirstChild();\n+      }\n+      String className = NodeUtil.getNameNode(lhs).getString();\n+      if (classPrototypes.contains(className)) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}