{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    if (size == 1) {\n        Object single = elementPairs.get(0);\n        if (single instanceof Separator) {\n            Separator sep = (Separator) single;\n            return new PeriodFormatter(sep, sep);\n        } else if (single instanceof PeriodPrinter) {\n            return new PeriodFormatter((PeriodPrinter) single, null);\n        } else if (single instanceof PeriodParser) {\n            return new PeriodFormatter(null, (PeriodParser) single);\n        } else {\n            throw new IllegalArgumentException(\"Unknown element type: \" + single.getClass());\n        }\n    } else if (size == 2) {\n        Object first = elementPairs.get(0);\n        Object second = elementPairs.get(1);\n        if (first instanceof PeriodPrinter) {\n            if (second instanceof PeriodParser) {\n                return new PeriodFormatter((PeriodPrinter) first, (PeriodParser) second);\n            } else if (second instanceof Separator) {\n                Separator sep = (Separator) second;\n                return new PeriodFormatter(sep.finish((PeriodPrinter) first, null), null);\n            } else {\n                throw new IllegalArgumentException(\"Unknown element type: \" + second.getClass());\n            }\n        } else if (first instanceof PeriodParser) {\n            if (second instanceof PeriodPrinter) {\n                return new PeriodFormatter((PeriodPrinter) second, (PeriodParser) first);\n            } else if (second instanceof Separator) {\n                Separator sep = (Separator) second;\n                return new PeriodFormatter((PeriodPrinter) null, sep.finish(null, (PeriodParser) first));\n            } else {\n                throw new IllegalArgumentException(\"Unknown element type: \" + second.getClass());\n            }\n        } else {\n            throw new IllegalArgumentException(\"Unknown element type: \" + first.getClass());\n        }\n    } else {\n        Separator sep = null;\n        int i = 0;\n        while (i < size) {\n            Object o = elementPairs.get(i);\n            if (o instanceof Separator) {\n                sep = (Separator) o;\n                i++; // skip separator\n                break;\n            } else if (o instanceof PeriodPrinter) {\n                if (notPrinter) {\n                    i++;\n                } else {\n                    PeriodPrinter printer = (PeriodPrinter) o;\n                    PeriodFormatter f = toFormatter(elementPairs.subList(i + 1, size), true, notParser);\n                    return new PeriodFormatter(sep.finish(printer, f.getParser()), null);\n                }\n            } else if (o instanceof PeriodParser) {\n                if (notParser) {\n                    i++;\n                } else {\n                    PeriodParser parser = (PeriodParser) o;\n                    PeriodFormatter f = toFormatter(elementPairs.subList(i + 1, size), notPrinter, true);\n                    return new PeriodFormatter(null, sep.finish(f.getPrinter(), parser));\n                }\n            } else {\n                throw new IllegalArgumentException(\"Unknown element type: \" + o.getClass());\n            }\n        }\n        if (i == size) {\n            throw new IllegalArgumentException(\"Unable to create formatter from element pairs: \" + elementPairs);\n        }\n        PeriodFormatter f = toFormatter(elementPairs.subList(i, size), notPrinter, notParser);\n        return new PeriodFormatter(sep.finish(null, f.getParser()), f.getParser());\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..d1b1596c 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,85 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    if (size == 1) {\n+        Object single = elementPairs.get(0);\n+        if (single instanceof Separator) {\n+            Separator sep = (Separator) single;\n+            return new PeriodFormatter(sep, sep);\n+        } else if (single instanceof PeriodPrinter) {\n+            return new PeriodFormatter((PeriodPrinter) single, null);\n+        } else if (single instanceof PeriodParser) {\n+            return new PeriodFormatter(null, (PeriodParser) single);\n+        } else {\n+            throw new IllegalArgumentException(\"Unknown element type: \" + single.getClass());\n+        }\n+    } else if (size == 2) {\n+        Object first = elementPairs.get(0);\n+        Object second = elementPairs.get(1);\n+        if (first instanceof PeriodPrinter) {\n+            if (second instanceof PeriodParser) {\n+                return new PeriodFormatter((PeriodPrinter) first, (PeriodParser) second);\n+            } else if (second instanceof Separator) {\n+                Separator sep = (Separator) second;\n+                return new PeriodFormatter(sep.finish((PeriodPrinter) first, null), null);\n+            } else {\n+                throw new IllegalArgumentException(\"Unknown element type: \" + second.getClass());\n+            }\n+        } else if (first instanceof PeriodParser) {\n+            if (second instanceof PeriodPrinter) {\n+                return new PeriodFormatter((PeriodPrinter) second, (PeriodParser) first);\n+            } else if (second instanceof Separator) {\n+                Separator sep = (Separator) second;\n+                return new PeriodFormatter((PeriodPrinter) null, sep.finish(null, (PeriodParser) first));\n+            } else {\n+                throw new IllegalArgumentException(\"Unknown element type: \" + second.getClass());\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            throw new IllegalArgumentException(\"Unknown element type: \" + first.getClass());\n+        }\n+    } else {\n+        Separator sep = null;\n+        int i = 0;\n+        while (i < size) {\n+            Object o = elementPairs.get(i);\n+            if (o instanceof Separator) {\n+                sep = (Separator) o;\n+                i++; // skip separator\n+                break;\n+            } else if (o instanceof PeriodPrinter) {\n+                if (notPrinter) {\n+                    i++;\n+                } else {\n+                    PeriodPrinter printer = (PeriodPrinter) o;\n+                    PeriodFormatter f = toFormatter(elementPairs.subList(i + 1, size), true, notParser);\n+                    return new PeriodFormatter(sep.finish(printer, f.getParser()), null);\n+                }\n+            } else if (o instanceof PeriodParser) {\n+                if (notParser) {\n+                    i++;\n+                } else {\n+                    PeriodParser parser = (PeriodParser) o;\n+                    PeriodFormatter f = toFormatter(elementPairs.subList(i + 1, size), notPrinter, true);\n+                    return new PeriodFormatter(null, sep.finish(f.getPrinter(), parser));\n+                }\n+            } else {\n+                throw new IllegalArgumentException(\"Unknown element type: \" + o.getClass());\n+            }\n+        }\n+        if (i == size) {\n+            throw new IllegalArgumentException(\"Unable to create formatter from element pairs: \" + elementPairs);\n         }\n+        PeriodFormatter f = toFormatter(elementPairs.subList(i, size), notPrinter, notParser);\n+        return new PeriodFormatter(sep.finish(null, f.getParser()), f.getParser());\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}