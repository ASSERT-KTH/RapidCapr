{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1) {\n        // use the stable series representation\n        RegularizedGammaP.Series series = new RegularizedGammaP.Series();\n        return 1 - series.value(a, x, epsilon, maxIterations);\n    }\n    // compute the continued fraction representation\n    RegularizedGammaP.Fraction fraction = new RegularizedGammaP.Fraction();\n    return fraction.value(a, x, epsilon, maxIterations);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..1ba311a94 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,22 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1) {\n+        // use the stable series representation\n+        RegularizedGammaP.Series series = new RegularizedGammaP.Series();\n+        return 1 - series.value(a, x, epsilon, maxIterations);\n+    }\n+    // compute the continued fraction representation\n+    RegularizedGammaP.Fraction fraction = new RegularizedGammaP.Fraction();\n+    return fraction.value(a, x, epsilon, maxIterations);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}