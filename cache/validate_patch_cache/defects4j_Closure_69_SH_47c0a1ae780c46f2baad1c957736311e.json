{
    "patch": "      if (childType.isFunctionType() && child.isName()) {\n        boolean foundProp = false;\n        for (Node ancestor : this.context.getCurrentNode().getAncestors()) {\n          if (NodeUtil.isGet(ancestor) && ancestor.getLastChild().getString().equals(child.getString())) {\n            foundProp = true;\n            break;\n          }\n        }\n        if (!foundProp) {\n          report(t, n, FUNCTION_WITHOUT_GETTHIS, childType.toString());\n        }\n      }\n      ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..14dc80cb 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (childType.isFunctionType() && child.isName()) {\n+        boolean foundProp = false;\n+        for (Node ancestor : this.context.getCurrentNode().getAncestors()) {\n+          if (NodeUtil.isGet(ancestor) && ancestor.getLastChild().getString().equals(child.getString())) {\n+            foundProp = true;\n+            break;\n+          }\n+        }\n+        if (!foundProp) {\n+          report(t, n, FUNCTION_WITHOUT_GETTHIS, childType.toString());\n+        }\n+      }\n+      \n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}