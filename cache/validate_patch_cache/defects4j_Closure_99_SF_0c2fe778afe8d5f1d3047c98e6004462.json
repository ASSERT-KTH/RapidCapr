{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.isFunction()) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = n.getJSDocInfo();\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n            // Check for the @interface annotation.\n           (jsDoc.isInterface() && !t.getInput().isIdeMode()))) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally be able to have a @this annotation\n      // associated with them. e.g., var a = function() { }; // or function a() {} // or a.x =\n      // function() {};\n      int pType = (parent == null ? Token.SCRIPT : parent.getType());\n      if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME\n                || pType == Token.EXPR_RESULT)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle nested assignments\n        // properly\n        // (e.g., (a = this).property = c;), assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype property or\n        // subproperty.\n        Node findParent = lhs;\n        while (findParent != null) {\n          if (findParent.getType() == Token.PROPERTY) {\n            findParent = findParent.getFirstChild();\n          } else {\n            break;\n          }\n        }\n        if (lhs != findParent) {\n          return true;\n        }\n        String qName = lhs.getQualifiedName();\n        if (qName != null && qName.contains(\".prototype.\")) {\n          return false;\n        }\n        if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..b0a8e426 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,29 +81,25 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    if (n.isFunction()) {\n       // Don't traverse functions that are constructors or have the @this\n       // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      JSDocInfo jsDoc = n.getJSDocInfo();\n       if (jsDoc != null &&\n           (jsDoc.isConstructor() ||\n            jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+            // Check for the @interface annotation.\n+           (jsDoc.isInterface() && !t.getInput().isIdeMode()))) {\n         return false;\n       }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n+      // Don't traverse functions unless they would normally be able to have a @this annotation\n+      // associated with them. e.g., var a = function() { }; // or function a() {} // or a.x =\n+      // function() {};\n+      int pType = (parent == null ? Token.SCRIPT : parent.getType());\n+      if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME\n+                || pType == Token.EXPR_RESULT)) {\n         return false;\n       }\n     }\n@@ -111,24 +107,35 @@ final class CheckGlobalThis implements Callback {\n     if (parent != null && parent.getType() == Token.ASSIGN) {\n       Node lhs = parent.getFirstChild();\n       Node rhs = lhs.getNext();\n-      \n+\n       if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n+        // Always traverse the left side of the assignment. To handle nested assignments\n+        // properly\n+        // (e.g., (a = this).property = c;), assignLhsChild should not be overridden.\n         if (assignLhsChild == null) {\n           assignLhsChild = lhs;\n         }\n       } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n+        // Only traverse the right side if it's not an assignment to a prototype property or\n+        // subproperty.\n+        Node findParent = lhs;\n+        while (findParent != null) {\n+          if (findParent.getType() == Token.PROPERTY) {\n+            findParent = findParent.getFirstChild();\n+          } else {\n+            break;\n           }\n+        }\n+        if (lhs != findParent) {\n+          return true;\n+        }\n+        String qName = lhs.getQualifiedName();\n+        if (qName != null && qName.contains(\".prototype.\")) {\n+          return false;\n+        }\n+        if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}