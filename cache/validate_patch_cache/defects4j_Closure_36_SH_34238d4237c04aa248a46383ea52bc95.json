{
    "patch": "      if (value.isFunction()) {\n        Node callNode = reference.getParent();\n        if (reference.getParent().isCall()) {\n          CodingConvention convention = compiler.getCodingConvention();\n          // Bug 2388531: Don't inline subclass definitions into class defining\n          // calls as this confused class removing logic.\n          SubclassRelationship relationship =\n              convention.getClassesDefinedByCall(callNode);\n          if (relationship != null) {\n            return false;\n          }\n\n          // issue 668: Don't inline singleton getter methods\n          // calls as this confused class removing logic.\n          if (value.getLastChild() != null\n              && value.getLastChild().isBlock()\n              && convention.extractIsModuleFile(value.getJSDocInfo())) {\n            Node statement = value.getLastChild().getFirstChild();\n            if (NodeUtil.isNameDeclaration(statement)) {\n              Node rhs = statement.getFirstChild().getLastChild();\n              if (rhs != null\n                  && rhs.isCall()\n                  && convention.isSingletonGetter(rhs)) {\n                return false;\n              }\n            }\n          }\n        }\n      }\n\n      return canMoveAggressively(value) ||\n          canMoveModerately(initialization, reference);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..76f54dee 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,39 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+      if (value.isFunction()) {\n+        Node callNode = reference.getParent();\n+        if (reference.getParent().isCall()) {\n+          CodingConvention convention = compiler.getCodingConvention();\n+          // Bug 2388531: Don't inline subclass definitions into class defining\n+          // calls as this confused class removing logic.\n+          SubclassRelationship relationship =\n+              convention.getClassesDefinedByCall(callNode);\n+          if (relationship != null) {\n+            return false;\n+          }\n+\n+          // issue 668: Don't inline singleton getter methods\n+          // calls as this confused class removing logic.\n+          if (value.getLastChild() != null\n+              && value.getLastChild().isBlock()\n+              && convention.extractIsModuleFile(value.getJSDocInfo())) {\n+            Node statement = value.getLastChild().getFirstChild();\n+            if (NodeUtil.isNameDeclaration(statement)) {\n+              Node rhs = statement.getFirstChild().getLastChild();\n+              if (rhs != null\n+                  && rhs.isCall()\n+                  && convention.isSingletonGetter(rhs)) {\n+                return false;\n+              }\n+            }\n+          }\n+        }\n+      }\n+\n+      return canMoveAggressively(value) ||\n+          canMoveModerately(initialization, reference);\n+    }\n         }\n       }\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}