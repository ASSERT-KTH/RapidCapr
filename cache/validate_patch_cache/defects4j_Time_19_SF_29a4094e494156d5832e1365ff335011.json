{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    int offsetBefore = initialOffset;\n    int offsetAfter = initialOffset;\n\n    if (initialOffset >= 0) {\n        long next = nextTransition(instantLocal);\n        if (next > instantLocal + maxMillisAhead) {\n            return initialOffset;\n        }\n        offsetAfter = getOffset(next);\n        if (initialOffset != offsetAfter) {\n            return initialOffset;\n        }\n\n        long prev = previousTransition(instantLocal);\n        if (instantLocal - prev > maxMillisBehind) {\n            return initialOffset;\n        }\n        offsetBefore = getOffset(prev);\n    } else {\n        long prev = previousTransition(instantLocal);\n        if (instantLocal - prev > maxMillisBehind) {\n            return initialOffset;\n        }\n        offsetBefore = getOffset(prev);\n        if (initialOffset != offsetBefore) {\n            return initialOffset;\n        }\n\n        long next = nextTransition(instantLocal);\n        if (next > instantLocal + maxMillisAhead) {\n            return initialOffset;\n        }\n        offsetAfter = getOffset(next);\n    }\n\n    if (offsetBefore == offsetAfter) {\n        return offsetBefore;\n    }\n\n    final long diff = nextTransition(instantLocal) - previousTransition(instantLocal);\n    if (diff < maxMillisDivisible) {\n        return offsetBefore;\n    }\n\n    int offset = offsetBefore;\n    long instant = previousTransition(instantLocal);\n    while (true) {\n        final long next = nextTransition(instant);\n        if (next == TRANSITION_MAX_INSTANT) {\n            break;\n        }\n        if (next > instantLocal + maxMillisDivisible) {\n            break;\n        }\n        offset = (getOffset(next) + getOffset(instant)) / 2;\n        instant = next;\n    }\n\n    return offset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..d2bb5aaa 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,39 +877,69 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    int offsetBefore = initialOffset;\n+    int offsetAfter = initialOffset;\n+\n+    if (initialOffset >= 0) {\n+        long next = nextTransition(instantLocal);\n+        if (next > instantLocal + maxMillisAhead) {\n+            return initialOffset;\n+        }\n+        offsetAfter = getOffset(next);\n+        if (initialOffset != offsetAfter) {\n+            return initialOffset;\n+        }\n+\n+        long prev = previousTransition(instantLocal);\n+        if (instantLocal - prev > maxMillisBehind) {\n+            return initialOffset;\n+        }\n+        offsetBefore = getOffset(prev);\n+    } else {\n+        long prev = previousTransition(instantLocal);\n+        if (instantLocal - prev > maxMillisBehind) {\n+            return initialOffset;\n+        }\n+        offsetBefore = getOffset(prev);\n+        if (initialOffset != offsetBefore) {\n+            return initialOffset;\n         }\n-        return offsetAdjusted;\n+\n+        long next = nextTransition(instantLocal);\n+        if (next > instantLocal + maxMillisAhead) {\n+            return initialOffset;\n+        }\n+        offsetAfter = getOffset(next);\n+    }\n+\n+    if (offsetBefore == offsetAfter) {\n+        return offsetBefore;\n+    }\n+\n+    final long diff = nextTransition(instantLocal) - previousTransition(instantLocal);\n+    if (diff < maxMillisDivisible) {\n+        return offsetBefore;\n     }\n \n+    int offset = offsetBefore;\n+    long instant = previousTransition(instantLocal);\n+    while (true) {\n+        final long next = nextTransition(instant);\n+        if (next == TRANSITION_MAX_INSTANT) {\n+            break;\n+        }\n+        if (next > instantLocal + maxMillisDivisible) {\n+            break;\n+        }\n+        offset = (getOffset(next) + getOffset(instant)) / 2;\n+        instant = next;\n+    }\n+\n+    return offset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}