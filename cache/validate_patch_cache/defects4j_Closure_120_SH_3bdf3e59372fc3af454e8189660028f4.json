{
    "patch": "if (ref.getBasicBlock().getSuccessors().size() == 1\n          && !ref.getBasicBlock().isDoWhile()) {\n        // There is exactly one way to reach the one-and-only assignment.\n        BasicBlock block = ref.getBasicBlock().getSuccessors().get(0);\n        while (block.isGoto()) {\n          block = block.getSuccessors().get(0);\n        }\n\n        if (block.isFunction) {\n          // If there's only one assignment and it's this one inside a function, it's fine.\n          return getOneAndOnlyAssignment() == ref;\n        } else if (block.isLoop && !block.dominates(ref.getBasicBlock())) {\n          // There's a loop between us and the assignment!\n          return false;\n        } else if (!block.dominates(ref.getBasicBlock())) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e462f81c 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,23 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (ref.getBasicBlock().getSuccessors().size() == 1\n+          && !ref.getBasicBlock().isDoWhile()) {\n+        // There is exactly one way to reach the one-and-only assignment.\n+        BasicBlock block = ref.getBasicBlock().getSuccessors().get(0);\n+        while (block.isGoto()) {\n+          block = block.getSuccessors().get(0);\n+        }\n+\n+        if (block.isFunction) {\n+          // If there's only one assignment and it's this one inside a function, it's fine.\n+          return getOneAndOnlyAssignment() == ref;\n+        } else if (block.isLoop && !block.dominates(ref.getBasicBlock())) {\n+          // There's a loop between us and the assignment!\n+          return false;\n+        } else if (!block.dominates(ref.getBasicBlock())) {\n+          return false;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}