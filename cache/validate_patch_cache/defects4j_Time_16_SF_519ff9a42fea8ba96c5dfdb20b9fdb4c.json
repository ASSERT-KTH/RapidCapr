{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n        \n    Chronology chrono = instant.getChronology();\n    LocalDate baseDate = new LocalDate(instant.getMillis(), chrono);\n    Period basePeriod = new Period(baseDate.getYear(), baseDate.getMonthOfYear(), 1, 0, 0, 0, 0, 0);\n    \n    MutableDateTime mdt = new MutableDateTime(baseDate.toDateTimeAtCurrentTime(), chrono);\n    long instantMillis = mdt.getMillis();\n    DateTimeZone zone = mdt.getZone();\n    \n    Chronology adjustedChrono = selectChronology(chrono);\n    long fixedInstant = adjustedChrono.getZone().convertLocalToUTC(instantMillis, false);\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            fixedInstant, adjustedChrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis());\n    \n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        adjustedChrono = adjustedChrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        adjustedChrono = adjustedChrono.withZone(bucket.getZone());\n    }\n    \n    LocalDate adjustedDate = baseDate.withChronology(adjustedChrono);\n    adjustedDate = adjustedDate.plus(basePeriod);\n    \n    instant.setChronology(adjustedChrono);\n    instant.setMillis(adjustedDate.toDateTimeAtStartOfDay().plusMillis(bucket.getMillis()).getMillis());\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..247309f7 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -694,34 +694,46 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n     }\n+        \n+    Chronology chrono = instant.getChronology();\n+    LocalDate baseDate = new LocalDate(instant.getMillis(), chrono);\n+    Period basePeriod = new Period(baseDate.getYear(), baseDate.getMonthOfYear(), 1, 0, 0, 0, 0, 0);\n+    \n+    MutableDateTime mdt = new MutableDateTime(baseDate.toDateTimeAtCurrentTime(), chrono);\n+    long instantMillis = mdt.getMillis();\n+    DateTimeZone zone = mdt.getZone();\n+    \n+    Chronology adjustedChrono = selectChronology(chrono);\n+    long fixedInstant = adjustedChrono.getZone().convertLocalToUTC(instantMillis, false);\n+    \n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            fixedInstant, adjustedChrono, iLocale, iPivotYear, iDefaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    instant.setMillis(bucket.computeMillis());\n+    \n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        adjustedChrono = adjustedChrono.withZone(parsedZone);\n+    } else if (bucket.getZone() != null) {\n+        adjustedChrono = adjustedChrono.withZone(bucket.getZone());\n+    }\n+    \n+    LocalDate adjustedDate = baseDate.withChronology(adjustedChrono);\n+    adjustedDate = adjustedDate.plus(basePeriod);\n+    \n+    instant.setChronology(adjustedChrono);\n+    instant.setMillis(adjustedDate.toDateTimeAtStartOfDay().plusMillis(bucket.getMillis()).getMillis());\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}