{
    "patch": "public static double getTypedPercent(String jsonString) {\n    try {\n        ObjectMapper objectMapper = new ObjectMapper();\n        JsonNode rootNode = objectMapper.readTree(jsonString);\n        JsonNode typeNode = rootNode.path(\"type\");\n        if (typeNode != null && typeNode.isTextual() && \"article\".equals(typeNode.asText())) {\n            JsonNode bodyNode = rootNode.path(\"body\");\n            if (bodyNode != null && bodyNode.isTextual()) {\n                String bodyText = bodyNode.asText();\n                long typedCount = bodyText.chars().filter(ch -> ch != ' ').count();\n                long totalCount = bodyText.length();\n                return ((double) typedCount / totalCount) * 100;\n            }\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return 0.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..31396fd7 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonString) {\n+    try {\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        JsonNode rootNode = objectMapper.readTree(jsonString);\n+        JsonNode typeNode = rootNode.path(\"type\");\n+        if (typeNode != null && typeNode.isTextual() && \"article\".equals(typeNode.asText())) {\n+            JsonNode bodyNode = rootNode.path(\"body\");\n+            if (bodyNode != null && bodyNode.isTextual()) {\n+                String bodyText = bodyNode.asText();\n+                long typedCount = bodyText.chars().filter(ch -> ch != ' ').count();\n+                long totalCount = bodyText.length();\n+                return ((double) typedCount / totalCount) * 100;\n+            }\n+        }\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+    return 0.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}