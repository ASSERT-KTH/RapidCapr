{
    "patch": "  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (NodeUtil.isFunctionExpression(n)) {\n        return;\n      }\n      if ((parent.getType() == Token.NAME && parent.getParent().getType() != Token.EXPR_RESULT)\n          || parent.getType() != Token.NAME) {\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n    case Token.LP:\n      Node grandParent = parent.getParent();\n      if (grandParent == null) {\n        break;\n      }\n      if (grandParent.getType() == Token.CALL || grandParent == scope.getRootNode() ||\n          (grandParent.getType() == Token.FUNCTION && NodeUtil.isFunctionExpression(grandParent)) ||\n          (grandParent.getType() == Token.EXPR_RESULT && NodeUtil.isFunctionExpression(grandParent.getParent()))) {\n        handleFunctionInputs(grandParent);\n        return;\n      }\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n    case Token.NAME:\n      defineVar(n, parent);\n      break;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..dd260053 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,37 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+  attachLiteralTypes(n);\n+  switch (n.getType()) {\n+    case Token.FUNCTION:\n+      if (NodeUtil.isFunctionExpression(n)) {\n+        return;\n       }\n+      if ((parent.getType() == Token.NAME && parent.getParent().getType() != Token.EXPR_RESULT)\n+          || parent.getType() != Token.NAME) {\n+        defineDeclaredFunction(n, parent);\n+      }\n+      break;\n+    case Token.LP:\n+      Node grandParent = parent.getParent();\n+      if (grandParent == null) {\n+        break;\n+      }\n+      if (grandParent.getType() == Token.CALL || grandParent == scope.getRootNode() ||\n+          (grandParent.getType() == Token.FUNCTION && NodeUtil.isFunctionExpression(grandParent)) ||\n+          (grandParent.getType() == Token.EXPR_RESULT && NodeUtil.isFunctionExpression(grandParent.getParent()))) {\n+        handleFunctionInputs(grandParent);\n+        return;\n+      }\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.VAR:\n+    case Token.NAME:\n+      defineVar(n, parent);\n+      break;\n+  }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}