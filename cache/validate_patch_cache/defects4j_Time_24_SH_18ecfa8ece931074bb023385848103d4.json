{
    "patch": "try {\n    boolean failure = false;\n    int unfixedFields = 0;\n    for (int i = 0; i < count; i++) {\n        try {\n            millis = savedFields[i].set(millis, resetFields);\n        } catch (IllegalArgumentException e) {\n            failure = true;\n            unfixedFields++;\n            if (text != null) {\n                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n            }\n            throw e;\n        }\n    }\n    if (resetFields && failure) {\n        for (int i = 0; i < count; i++) {\n            try {\n                millis = savedFields[i].set(millis, true);\n            } catch (IllegalArgumentException e) {\n                unfixedFields--;\n            }\n        }\n        if (unfixedFields > 0) {\n            if (text != null) {\n                throw new IllegalFieldValueException(\"Cannot parse \\\"\" + text + '\"', text, null);\n            } else {\n                throw new IllegalFieldValueException();\n            }\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..6feb8e91 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,43 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    boolean failure = false;\n+    int unfixedFields = 0;\n+    for (int i = 0; i < count; i++) {\n+        try {\n+            millis = savedFields[i].set(millis, resetFields);\n+        } catch (IllegalArgumentException e) {\n+            failure = true;\n+            unfixedFields++;\n+            if (text != null) {\n+                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+            }\n+            throw e;\n+        }\n+    }\n+    if (resetFields && failure) {\n+        for (int i = 0; i < count; i++) {\n+            try {\n+                millis = savedFields[i].set(millis, true);\n+            } catch (IllegalArgumentException e) {\n+                unfixedFields--;\n+            }\n+        }\n+        if (unfixedFields > 0) {\n+            if (text != null) {\n+                throw new IllegalFieldValueException(\"Cannot parse \\\"\" + text + '\"', text, null);\n+            } else {\n+                throw new IllegalFieldValueException();\n+            }\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: no suitable constructor found for IllegalFieldValueException(String,String,<null>)",
    "test_result": "ERROR"
}