{
    "patch": "DateTimeFormatter formatter = ISODateTimeFormat.dateTimeParser()\n    .withChronology(selectChronology(chrono));\nDateTimeParserOffset parserOffset = new DateTimeParserOffset(formatter.getPrinter(), chrono.getZone());\nlong offsetMillis = parserOffset.getOffsetMillis(bucket, text);\ninstantLocal = instantMillis + offsetMillis;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..cd2eb3a4 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,11 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+DateTimeFormatter formatter = ISODateTimeFormat.dateTimeParser()\n+    .withChronology(selectChronology(chrono));\n+DateTimeParserOffset parserOffset = new DateTimeParserOffset(formatter.getPrinter(), chrono.getZone());\n+long offsetMillis = parserOffset.getOffsetMillis(bucket, text);\n+instantLocal = instantMillis + offsetMillis;\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}