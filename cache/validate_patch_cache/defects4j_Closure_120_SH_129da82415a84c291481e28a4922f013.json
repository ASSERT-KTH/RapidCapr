{
    "patch": "      if (block.isFunction) {\n        // We only care about one assignment on function level. Variable\n        // shadowing ensures that there is no mixing with outer scope.\n        Reference ref = getOneAndOnlyAssignment();\n        if (ref != null && !ref.isSimpleAssignmentToName()) {\n          return false;\n        }\n        return true;\n      } else if (block.isLoop) {\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..359bd617 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        // We only care about one assignment on function level. Variable\n+        // shadowing ensures that there is no mixing with outer scope.\n+        Reference ref = getOneAndOnlyAssignment();\n+        if (ref != null && !ref.isSimpleAssignmentToName()) {\n+          return false;\n+        }\n+        return true;\n+      } else if (block.isLoop) {\n+        return false;\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable ref is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}