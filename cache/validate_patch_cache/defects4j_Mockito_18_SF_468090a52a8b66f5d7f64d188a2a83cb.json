{
    "patch": "import java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class MyIterable implements Iterable<Integer> {\n\n    private final List<Integer> values;\n\n    public MyIterable() {\n        this.values = new ArrayList<>();\n    }\n\n    public void addValue(int value) {\n        values.add(value);\n    }\n\n    @Override\n    public Iterator<Integer> iterator() {\n        return values.iterator();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..05c267e37 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,27 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class MyIterable implements Iterable<Integer> {\n+\n+    private final List<Integer> values;\n+\n+    public MyIterable() {\n+        this.values = new ArrayList<>();\n+    }\n+\n+    public void addValue(int value) {\n+        values.add(value);\n+    }\n+\n+    @Override\n+    public Iterator<Integer> iterator() {\n+        return values.iterator();\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}