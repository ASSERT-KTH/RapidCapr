{
    "patch": "            copy.data = new java.util.ArrayList(end - start + 1);\n            int validEnd = Math.min(end, this.getItemCount() - 1);\n            for (int index = start; index <= validEnd; index++) {\n                TimeSeriesDataItem item = (TimeSeriesDataItem) this.getDataItem(index).clone();\n                try {\n                    copy.add(item);\n                } catch (SeriesException e) {\n                    e.printStackTrace();\n                }\n            }\n        } else {\n            copy.data = new java.util.ArrayList();",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..60ed58f 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,18 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+            copy.data = new java.util.ArrayList(end - start + 1);\n+            int validEnd = Math.min(end, this.getItemCount() - 1);\n+            for (int index = start; index <= validEnd; index++) {\n+                TimeSeriesDataItem item = (TimeSeriesDataItem) this.getDataItem(index).clone();\n+                try {\n+                    copy.add(item);\n+                } catch (SeriesException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        } else {\n+            copy.data = new java.util.ArrayList();\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}