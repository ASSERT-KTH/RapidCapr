{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    int originalOffset = zone.getOffset(instantMillis);\n    \n    DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(parser).toFormatter()\n        .withChronology(chrono)\n        .withZone(zone);\n    \n    LocalDate localDate = formatter.parseLocalDate(text);\n    LocalTime localTime = formatter.parseLocalTime(text);\n    \n    instantMillis = localDate.toDateTime(localTime, zone).getMillis();\n    int offset = zone.getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantMillis);\n\n    // set pivot year before parsing\n    int pivotYear = iPivotYear != null ? iPivotYear.intValue() : defaultYear;\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantMillis + offset, chrono, iLocale, pivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    Long parsedMillis = bucket.computeMillis(true, text);\n    if (parsedMillis != null) {\n        zone = bucket.getZone() != null ? bucket.getZone() : zone;\n        chrono = chrono.withZone(zone);\n        \n        instant.setMillis(parsedMillis);\n        instant.setChronology(chrono);\n        instant.setZone(zone);\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..d9fb3b35 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,48 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+    int originalOffset = zone.getOffset(instantMillis);\n+    \n+    DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(parser).toFormatter()\n+        .withChronology(chrono)\n+        .withZone(zone);\n+    \n+    LocalDate localDate = formatter.parseLocalDate(text);\n+    LocalTime localTime = formatter.parseLocalTime(text);\n+    \n+    instantMillis = localDate.toDateTime(localTime, zone).getMillis();\n+    int offset = zone.getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantMillis);\n+\n+    // set pivot year before parsing\n+    int pivotYear = iPivotYear != null ? iPivotYear.intValue() : defaultYear;\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantMillis + offset, chrono, iLocale, pivotYear, defaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    Long parsedMillis = bucket.computeMillis(true, text);\n+    if (parsedMillis != null) {\n+        zone = bucket.getZone() != null ? bucket.getZone() : zone;\n+        chrono = chrono.withZone(zone);\n         \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n+        instant.setMillis(parsedMillis);\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+        instant.setZone(zone);\n     }\n \n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": " java.lang.IllegalArgumentException: Invalid format: \"23:00s\" is malformed at \"s\"",
    "test_result": "ERROR"
}