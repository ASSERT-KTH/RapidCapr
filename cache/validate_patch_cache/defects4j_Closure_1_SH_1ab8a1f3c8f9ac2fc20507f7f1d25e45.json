{
    "patch": "    Node function = fnScope.getRootNode();\n    List<Node> params = Lists.newArrayList(getFunctionParams(function));\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    Iterator<Node> argsItr = params.iterator();\n    int argsIndex = 0;\n    while (argsItr.hasNext()) {\n      Node arg = argsItr.next();\n      Var var = fnScope.getVar(arg.getString());\n\n      // For some reason, arguments in nested scopes do not appear\n      // in the referenced set for the function scope.\n      if (!referenced.contains(var)) {\n        argsItr.remove();\n        compiler.reportCodeChange();\n        if (modifyCallers) {\n          callSiteOptimizer.removeParameter(function, argsIndex);\n        }\n      } else {\n        argsIndex++;\n      }\n    }\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n      NodeUtil.markFunctionsDeleted(lastFunctionNodes);\n    } else {\n      Node argList = getFunctionArgList(function);\n      argList.removeChildren();\n      for (Node param : params) {\n        argList.addChildToBack(param.cloneNode());\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bb07da04 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,46 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    List<Node> params = Lists.newArrayList(getFunctionParams(function));\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    Iterator<Node> argsItr = params.iterator();\n+    int argsIndex = 0;\n+    while (argsItr.hasNext()) {\n+      Node arg = argsItr.next();\n+      Var var = fnScope.getVar(arg.getString());\n+\n+      // For some reason, arguments in nested scopes do not appear\n+      // in the referenced set for the function scope.\n+      if (!referenced.contains(var)) {\n+        argsItr.remove();\n+        compiler.reportCodeChange();\n+        if (modifyCallers) {\n+          callSiteOptimizer.removeParameter(function, argsIndex);\n+        }\n+      } else {\n+        argsIndex++;\n+      }\n+    }\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+      NodeUtil.markFunctionsDeleted(lastFunctionNodes);\n+    } else {\n+      Node argList = getFunctionArgList(function);\n+      argList.removeChildren();\n+      for (Node param : params) {\n+        argList.addChildToBack(param.cloneNode());\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}