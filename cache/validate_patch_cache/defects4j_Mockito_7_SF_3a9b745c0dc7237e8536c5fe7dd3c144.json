{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length == 0) {\n        registerTypeVariablesOn(typeVariable);\n    } else {\n        for (Type type : bounds) {\n            registerTypeVariablesOn(type);\n        }\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument != null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        } else {\n            if (typeVariable.getGenericDeclaration() instanceof Class) {\n                Class<?> superclass = ((Class<?>) typeVariable.getGenericDeclaration()).getSuperclass();\n                if(superclass != null) {\n                    TypeVariable<?>[] superClassTypeParameters = superclass.getTypeParameters();\n                    for(TypeVariable superClassTypeParameter : superClassTypeParameters) {\n                        if(superClassTypeParameter.getName().equals(typeVariable.getName())) {\n                            registerTypeVariablesOn(superClassTypeParameter);\n                            break;\n                        }\n                    }\n                }\n            }\n            registerTypeVariablesOn(typeVariable);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..992838ec0 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,35 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length == 0) {\n+        registerTypeVariablesOn(typeVariable);\n+    } else {\n+        for (Type type : bounds) {\n+            registerTypeVariablesOn(type);\n+        }\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument != null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        } else {\n+            if (typeVariable.getGenericDeclaration() instanceof Class) {\n+                Class<?> superclass = ((Class<?>) typeVariable.getGenericDeclaration()).getSuperclass();\n+                if(superclass != null) {\n+                    TypeVariable<?>[] superClassTypeParameters = superclass.getTypeParameters();\n+                    for(TypeVariable superClassTypeParameter : superClassTypeParameters) {\n+                        if(superClassTypeParameter.getName().equals(typeVariable.getName())) {\n+                            registerTypeVariablesOn(superClassTypeParameter);\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+            registerTypeVariablesOn(typeVariable);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}