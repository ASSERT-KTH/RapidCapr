{
    "patch": "// Make sure this assignment is not in a loop or in the if condition.\nfor (BasicBlock block = ref.getBasicBlock();\n      block != null; block = block.getParent()) {\n   if (block.isFunction) { \n      return true;\n   } else if (block.isLoop || block.isConditionalBoundary()) {\n      return false;\n   }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..3b1de16b 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+// Make sure this assignment is not in a loop or in the if condition.\n+for (BasicBlock block = ref.getBasicBlock();\n+      block != null; block = block.getParent()) {\n+   if (block.isFunction) { \n+      return true;\n+   } else if (block.isLoop || block.isConditionalBoundary()) {\n+      return false;\n+   }\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}