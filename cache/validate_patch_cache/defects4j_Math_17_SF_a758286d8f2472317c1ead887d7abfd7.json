{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN()) {\n            return newInstance(getField(), qnan);\n        }\n        if (x == 0) {\n            return newInstance(getField(), 0);\n        }\n        if (x == 1) {\n            return newInstance(this);\n        }\n        if (x == -1) {\n            return newInstance(getField(), -mant[mant.length - 1], exp);\n        }\n\n        final Dfp product = newInstance(getField(), 0);\n        long carry = 0;\n        int limit = Math.min(mant.length, error.length);\n        for (int i = 0; i < limit; i++) {\n            final long value = (long) mant[i] * (long) x + carry;\n            product.mant[i] = (int) (value % radix);\n            carry = value / radix;\n        }\n        if (carry != 0) {\n            product.mant[limit] = (int) carry;\n            limit++;\n        }\n\n        for (int i = limit; i < mant.length; i++) {\n            final long value = (long) mant[i] * (long) x + carry;\n            product.mant[i] = (int) (value % radix);\n            carry = value / radix;\n        }\n\n        if (carry != 0) {\n            product.mant[mant.length] = (int) carry;\n            product.exp++;\n        }\n\n        product.trailing = trailing;\n        product.round(product.getPrecision());\n\n        return product;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..45c95db46 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,47 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN()) {\n+            return newInstance(getField(), qnan);\n+        }\n+        if (x == 0) {\n+            return newInstance(getField(), 0);\n+        }\n+        if (x == 1) {\n+            return newInstance(this);\n+        }\n+        if (x == -1) {\n+            return newInstance(getField(), -mant[mant.length - 1], exp);\n+        }\n+\n+        final Dfp product = newInstance(getField(), 0);\n+        long carry = 0;\n+        int limit = Math.min(mant.length, error.length);\n+        for (int i = 0; i < limit; i++) {\n+            final long value = (long) mant[i] * (long) x + carry;\n+            product.mant[i] = (int) (value % radix);\n+            carry = value / radix;\n+        }\n+        if (carry != 0) {\n+            product.mant[limit] = (int) carry;\n+            limit++;\n+        }\n+\n+        for (int i = limit; i < mant.length; i++) {\n+            final long value = (long) mant[i] * (long) x + carry;\n+            product.mant[i] = (int) (value % radix);\n+            carry = value / radix;\n+        }\n+\n+        if (carry != 0) {\n+            product.mant[mant.length] = (int) carry;\n+            product.exp++;\n+        }\n+\n+        product.trailing = trailing;\n+        product.round(product.getPrecision());\n+\n+        return product;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}