{
    "patch": "          if (topType.isUnknownType() && topType.getJSDocInfo() != null &&\n              topType.getJSDocInfo().isConstructorOrInterface()) {\n            // sometimes the type is just an occurrence\n            // of a constructor function or interface\n            // without an explicit call to the constructor:\n            // this type should not have properties itself\n            return getNativeType(OBJECT_TYPE);\n          }\n          return topType;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\nindex 1706e345..3a3425df 100644\n--- a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n@@ -51,6 +51,14 @@ public class ClosureReverseAbstractInterpreter\n       new RestrictByTrueTypeOfResultVisitor() {\n         @Override\n         protected JSType caseTopType(JSType topType) {\n+          if (topType.isUnknownType() && topType.getJSDocInfo() != null &&\n+              topType.getJSDocInfo().isConstructorOrInterface()) {\n+            // sometimes the type is just an occurrence\n+            // of a constructor function or interface\n+            // without an explicit call to the constructor:\n+            // this type should not have properties itself\n+            return getNativeType(OBJECT_TYPE);\n+          }\n           return topType;\n         }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}