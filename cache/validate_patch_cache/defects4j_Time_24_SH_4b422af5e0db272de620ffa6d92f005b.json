{
    "patch": "            boolean errorSet = false;\n            for (int i = 0; i < count; i++) {\n                SavedField field = savedFields[i];\n                if (field.iErrorIndex == -1) {\n                    continue;\n                }\n                if (!errorSet) {\n                    savedFields = (SavedField[]) savedFields.clone();\n                    errorSet = true;\n                }\n                field = (SavedField) field.clone();\n                field.iErrorIndex = -1;\n                savedFields[i] = field;\n            }\n            if (errorSet) {\n                shiftForInvalidField(savedFields, count);\n                return computeMillis(resetFields, text);\n            }\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        } ",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..b9318cee 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,29 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            boolean errorSet = false;\n+            for (int i = 0; i < count; i++) {\n+                SavedField field = savedFields[i];\n+                if (field.iErrorIndex == -1) {\n+                    continue;\n+                }\n+                if (!errorSet) {\n+                    savedFields = (SavedField[]) savedFields.clone();\n+                    errorSet = true;\n+                }\n+                field = (SavedField) field.clone();\n+                field.iErrorIndex = -1;\n+                savedFields[i] = field;\n+            }\n+            if (errorSet) {\n+                shiftForInvalidField(savedFields, count);\n+                return computeMillis(resetFields, text);\n+            }\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        } \n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'try' without 'catch' or 'finally'",
    "test_result": "ERROR"
}