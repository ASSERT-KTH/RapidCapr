{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match constraints on anonymous types.\n    if (!(constraintObj instanceof FunctionType) || constraintObj.getOwnPropertyNames().size() != 1) {\n        return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // adding properties to this object for each property on the record.\n    String propName = constraintObj.getOwnPropertyNames().iterator().next();\n    JSType propType = constraintObj.getPropertyType(propName);\n    if (!isPropertyTypeDeclared(propName)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(propName)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                    .getLeastSupertype(propType);\n        }\n        defineInferredProperty(propName, typeToInfer, null);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..f80cfdaf 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,8 +552,11 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n+public void matchConstraint(ObjectType constraintObj) {\n+    // We only want to match constraints on anonymous types.\n+    if (!(constraintObj instanceof FunctionType) || constraintObj.getOwnPropertyNames().size() != 1) {\n+        return;\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //\n@@ -562,20 +565,16 @@ class PrototypeObjectType extends ObjectType {\n     // f({});\n     //\n     // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n+    // adding properties to this object for each property on the record.\n+    String propName = constraintObj.getOwnPropertyNames().iterator().next();\n+    JSType propType = constraintObj.getPropertyType(propName);\n+    if (!isPropertyTypeDeclared(propName)) {\n+        JSType typeToInfer = propType;\n+        if (!hasProperty(propName)) {\n             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n+                    .getLeastSupertype(propType);\n         }\n-      }\n+        defineInferredProperty(propName, typeToInfer, null);\n     }\n-  }\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...arameter",
    "test_result": "FAIL"
}