{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n    \n    // If any of the statistics measures return NaN or infinite values, reset all measures\n    if (Double.isNaN(getMean()) || Double.isNaN(getVariance()) || \n            Double.isNaN(getGeometricMean()) || Double.isInfinite(getMean()) || \n            Double.isInfinite(getVariance()) || Double.isInfinite(getGeometricMean())) {\n        \n        // Reset all statistical measures\n        sumImpl.clear();\n        sumsqImpl.clear();\n        minImpl.clear();\n        maxImpl.clear();\n        sumLogImpl.clear();\n        secondMoment.clear();\n        \n        // Reset all overridden measures\n        meanImpl = new Mean();\n        varianceImpl = new Variance();\n        geoMeanImpl = new GeometricMean();\n        \n        // Reset count\n        n = 0;\n    }\n    // Otherwise, increment overridden measures unless they are Mean, Variance, or GeometricMean\n    else {\n        if (meanImpl instanceof Mean) {\n            n++;\n        } else {\n            meanImpl.increment(value);\n        }\n        if (varianceImpl instanceof Variance) {\n            n++;\n        } else {\n            varianceImpl.increment(value);\n        }\n        if (geoMeanImpl instanceof GeometricMean) {\n            n++;\n        } else {\n            geoMeanImpl.increment(value);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..c695ffb30 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,54 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+    \n+    // If any of the statistics measures return NaN or infinite values, reset all measures\n+    if (Double.isNaN(getMean()) || Double.isNaN(getVariance()) || \n+            Double.isNaN(getGeometricMean()) || Double.isInfinite(getMean()) || \n+            Double.isInfinite(getVariance()) || Double.isInfinite(getGeometricMean())) {\n+        \n+        // Reset all statistical measures\n+        sumImpl.clear();\n+        sumsqImpl.clear();\n+        minImpl.clear();\n+        maxImpl.clear();\n+        sumLogImpl.clear();\n+        secondMoment.clear();\n+        \n+        // Reset all overridden measures\n+        meanImpl = new Mean();\n+        varianceImpl = new Variance();\n+        geoMeanImpl = new GeometricMean();\n+        \n+        // Reset count\n+        n = 0;\n+    }\n+    // Otherwise, increment overridden measures unless they are Mean, Variance, or GeometricMean\n+    else {\n+        if (meanImpl instanceof Mean) {\n+            n++;\n+        } else {\n             meanImpl.increment(value);\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n+        if (varianceImpl instanceof Variance) {\n+            n++;\n+        } else {\n             varianceImpl.increment(value);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n+        if (geoMeanImpl instanceof GeometricMean) {\n+            n++;\n+        } else {\n             geoMeanImpl.increment(value);\n         }\n-        n++;\n     }\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}