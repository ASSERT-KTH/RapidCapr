{
    "patch": "public static String getProp(String propName) {\n    Properties props = new Properties();\n    String fileName = \"config.properties\";\n    InputStream inputStream = null;\n    try {\n        inputStream = new FileInputStream(fileName);\n        props.load(inputStream);\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File \" + fileName + \" not found\");\n    } catch (IOException e) {\n        System.out.println(\"Exception while loading the file \" + fileName);\n    }\n    return props.getProperty(propName);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..ad5dbd8e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getProp(String propName) {\n+    Properties props = new Properties();\n+    String fileName = \"config.properties\";\n+    InputStream inputStream = null;\n+    try {\n+        inputStream = new FileInputStream(fileName);\n+        props.load(inputStream);\n+    } catch (FileNotFoundException e) {\n+        System.out.println(\"File \" + fileName + \" not found\");\n+    } catch (IOException e) {\n+        System.out.println(\"Exception while loading the file \" + fileName);\n+    }\n+    return props.getProperty(propName);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}