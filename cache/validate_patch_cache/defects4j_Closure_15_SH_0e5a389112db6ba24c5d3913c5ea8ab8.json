{
    "patch": "    if (n == null) {\n        return false;\n    }\n\n    // We care about mutation operations on dependent variables.\n    if (n.isAssign() && NodeUtil.isExpressionNode(n.getFirstChild())) {\n        return NodeUtil.isExpressionAssignTarget(n.getFirstChild().getFirstChild());\n    }\n\n    if (n.isDelProp() || NodeUtil.isIncDecOp(n)) {\n        return true;\n    }\n\n    // Recurse on child nodes.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..1dbe82ec 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,20 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+    if (n == null) {\n+        return false;\n+    }\n+\n+    // We care about mutation operations on dependent variables.\n+    if (n.isAssign() && NodeUtil.isExpressionNode(n.getFirstChild())) {\n+        return NodeUtil.isExpressionAssignTarget(n.getFirstChild().getFirstChild());\n+    }\n+\n+    if (n.isDelProp() || NodeUtil.isIncDecOp(n)) {\n+        return true;\n+    }\n+\n+    // Recurse on child nodes.\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}