{
    "patch": "public Dfp multiply(final int x) {\n    if (x >= 0 && x < RADIX) {\n        return multiplyFast(x);\n    } else {\n        if (this.isNaN()) {\n            return newInstance(Double.NaN, this.field);\n        } else if ((this.isInfinite() && x != 0) || x == Integer.MIN_VALUE) {\n            return newInstance(Double.NaN, this.field);\n        } else {\n            final int exp = this.exponent + 1;\n            final int max = this.precision + 1;\n            final byte[] product = new byte[max];\n            final byte[] factor = DfpUtility.convertToByteArray(Math.abs((long) x));\n\n            int top = 0;\n            int i = 0;\n            int j = 0;\n            long carry = 0;\n            byte c = 0;\n\n            while (i < this.mant.length && top < max) {\n                c = 0;\n                j = 0;\n                carry = 0;\n                while (j < factor.length && j < max && i + j - 1 < this.mant.length) {\n                    carry += (long) (Byte.toUnsignedInt(this.mant[i + j - 1])) * (long) (Byte.toUnsignedInt(factor[j]));\n                    carry += Byte.toUnsignedInt(c);\n                    c = (byte) carry;\n                    carry >>>= 8;\n                    j++;\n                }\n\n                while (carry != 0) {\n                    if (i + j - 1 >= this.mant.length) {\n                        break;\n                    }\n                    carry += Byte.toUnsignedInt(this.mant[i + j - 1]);\n                    c = (byte) carry;\n                    carry >>>= 8;\n                    j++;\n                }\n\n                i += j;\n                product[top] = c;\n                top++;\n            }\n\n            if (carry != 0) {\n                return newInstance(Double.NaN, this.field);\n            }\n\n            byte sgn = (byte) (this.sign * ((x < 0) ? -1 : 1));\n\n            while (top > 1 && product[top - 1] == 0) {\n                top--;\n            }\n\n            return new Dfp(sgn, DfpBase.NAN_NO_ROUNDING, product, exp, this.field);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..aa025a807 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -172,70 +172,67 @@ public class Fraction\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge.\n      */\n-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n-        throws FractionConversionException\n-    {\n-        long overflow = Integer.MAX_VALUE;\n-        double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n-            throw new FractionConversionException(value, a0, 1l);\n-        }\n-\n-        // check for (almost) integer arguments, which should not go\n-        // to iterations.\n-        if (FastMath.abs(a0 - value) < epsilon) {\n-            this.numerator = (int) a0;\n-            this.denominator = 1;\n-            return;\n-        }\n-\n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n-\n-        long p2 = 0;\n-        long q2 = 1;\n-\n-        int n = 0;\n-        boolean stop = false;\n-        do {\n-            ++n;\n-            double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n+public Dfp multiply(final int x) {\n+    if (x >= 0 && x < RADIX) {\n+        return multiplyFast(x);\n+    } else {\n+        if (this.isNaN()) {\n+            return newInstance(Double.NaN, this.field);\n+        } else if ((this.isInfinite() && x != 0) || x == Integer.MIN_VALUE) {\n+            return newInstance(Double.NaN, this.field);\n+        } else {\n+            final int exp = this.exponent + 1;\n+            final int max = this.precision + 1;\n+            final byte[] product = new byte[max];\n+            final byte[] factor = DfpUtility.convertToByteArray(Math.abs((long) x));\n+\n+            int top = 0;\n+            int i = 0;\n+            int j = 0;\n+            long carry = 0;\n+            byte c = 0;\n+\n+            while (i < this.mant.length && top < max) {\n+                c = 0;\n+                j = 0;\n+                carry = 0;\n+                while (j < factor.length && j < max && i + j - 1 < this.mant.length) {\n+                    carry += (long) (Byte.toUnsignedInt(this.mant[i + j - 1])) * (long) (Byte.toUnsignedInt(factor[j]));\n+                    carry += Byte.toUnsignedInt(c);\n+                    c = (byte) carry;\n+                    carry >>>= 8;\n+                    j++;\n+                }\n+\n+                while (carry != 0) {\n+                    if (i + j - 1 >= this.mant.length) {\n+                        break;\n+                    }\n+                    carry += Byte.toUnsignedInt(this.mant[i + j - 1]);\n+                    c = (byte) carry;\n+                    carry >>>= 8;\n+                    j++;\n+                }\n+\n+                i += j;\n+                product[top] = c;\n+                top++;\n             }\n \n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n-                p0 = p1;\n-                p1 = p2;\n-                q0 = q1;\n-                q1 = q2;\n-                a0 = a1;\n-                r0 = r1;\n-            } else {\n-                stop = true;\n+            if (carry != 0) {\n+                return newInstance(Double.NaN, this.field);\n             }\n-        } while (!stop);\n \n-        if (n >= maxIterations) {\n-            throw new FractionConversionException(value, maxIterations);\n-        }\n+            byte sgn = (byte) (this.sign * ((x < 0) ? -1 : 1));\n \n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n-        } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n-        }\n+            while (top > 1 && product[top - 1] == 0) {\n+                top--;\n+            }\n \n+            return new Dfp(sgn, DfpBase.NAN_NO_ROUNDING, product, exp, this.field);\n+        }\n     }\n+}\n \n     /**\n      * Create a fraction from an int.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}