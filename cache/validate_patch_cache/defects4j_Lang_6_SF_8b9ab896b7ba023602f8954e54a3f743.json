{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n\n    for (int i = 0; i < input.length(); i++) {\n        char c = input.charAt(i);\n\n        if (Character.isHighSurrogate(c)) {\n            if (i + 1 < input.length() && Character.isLowSurrogate(input.charAt(i + 1))) {\n                // We have a valid surrogate pair, so write it out using the appropriate escape sequence\n                int codePoint = Character.toCodePoint(c, input.charAt(i + 1));\n                out.write(\"&#x\" + Integer.toHexString(codePoint) + \";\");\n                i++;\n            } else {\n                // We have an invalid surrogate pair; just write out the first character as-is\n                out.write(c);\n            }\n        } else if (Character.isLowSurrogate(c)) {\n            // We have a lone low surrogate, which is invalid; just write it out as-is\n            out.write(c);\n        } else {\n            // If the current character isn't a surrogate, just write it out\n            out.write(c);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..ecda2ddd 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,36 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+\n+    for (int i = 0; i < input.length(); i++) {\n+        char c = input.charAt(i);\n+\n+        if (Character.isHighSurrogate(c)) {\n+            if (i + 1 < input.length() && Character.isLowSurrogate(input.charAt(i + 1))) {\n+                // We have a valid surrogate pair, so write it out using the appropriate escape sequence\n+                int codePoint = Character.toCodePoint(c, input.charAt(i + 1));\n+                out.write(\"&#x\" + Integer.toHexString(codePoint) + \";\");\n+                i++;\n+            } else {\n+                // We have an invalid surrogate pair; just write out the first character as-is\n                 out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n             }\n+        } else if (Character.isLowSurrogate(c)) {\n+            // We have a lone low surrogate, which is invalid; just write it out as-is\n+            out.write(c);\n+        } else {\n+            // If the current character isn't a surrogate, just write it out\n+            out.write(c);\n         }\n     }\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}