{
    "patch": "    // Added a check for LP token with a single child of FUNCTION type\n      if (n.getType() == Token.LP && n.hasOneChild() && n.getFirstChild().getType() == Token.FUNCTION) {\n        defineDeclaredFunction(n.getFirstChild(), n);\n        return;\n      }\n      \n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          Node functionName = n.getFirstChild();\n          if (functionName.getType() == Token.NAME) {\n            defineDeclaredFunction(functionName, n);\n          } else if (parent.getType() == Token.EXPR_RESULT) {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          if (n.hasChildren() && n.getFirstChild().getType() == Token.NAME) {\n            defineVar(n.getFirstChild(), n);\n          }\n          break;\n        default:\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..5a8dff16 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,32 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n+    // Added a check for LP token with a single child of FUNCTION type\n+      if (n.getType() == Token.LP && n.hasOneChild() && n.getFirstChild().getType() == Token.FUNCTION) {\n+        defineDeclaredFunction(n.getFirstChild(), n);\n+        return;\n+      }\n+      \n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          Node functionName = n.getFirstChild();\n+          if (functionName.getType() == Token.NAME) {\n+            defineDeclaredFunction(functionName, n);\n+          } else if (parent.getType() == Token.EXPR_RESULT) {\n+            defineDeclaredFunction(n, parent);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n-          defineVar(n, parent);\n+          if (n.hasChildren() && n.getFirstChild().getType() == Token.NAME) {\n+            defineVar(n.getFirstChild(), n);\n+          }\n+          break;\n+        default:\n           break;\n-      }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}