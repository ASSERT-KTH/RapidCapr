{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Check if '&' and '#' exist in the right places to indicate a numeric entity\n    if (index >= seqEnd - 2 || input.charAt(index) != '&' || input.charAt(index+1) != '#') {\n        return 0;\n    }\n\n    // Extract the entity value\n    int entityValue;\n    int start = index + 2;\n    boolean isHex = false;\n    if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n        // This is a hexadecimal entity\n        isHex = true;\n        start++;\n    }\n    int end = start;\n    while (end < seqEnd && (Character.isDigit(input.charAt(end)) || (isHex && Character.toLowerCase(input.charAt(end)) >= 'a' && Character.toLowerCase(input.charAt(end)) <= 'f'))) {\n        end++;\n    }\n\n    if ((end == seqEnd) || (input.charAt(end) != ';')) {\n        // The entity is incomplete\n        return 0;\n    }\n\n    String entityStr = input.subSequence(start, end).toString();\n    try {\n        entityValue = Integer.parseInt(entityStr, isHex ? 16 : 10);\n    } catch (NumberFormatException nfe) {\n        return 0;\n    }\n\n    if ((entityValue < 0) || (entityValue > Character.MAX_VALUE)) {\n        // The entity is outside the valid Unicode range\n        return 0;\n    }\n\n    // Output the entity's corresponding character\n    out.write((char)entityValue);\n    return end - index + 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..c7f6d5f9 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,46 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    // Check if '&' and '#' exist in the right places to indicate a numeric entity\n+    if (index >= seqEnd - 2 || input.charAt(index) != '&' || input.charAt(index+1) != '#') {\n+        return 0;\n+    }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n+    // Extract the entity value\n+    int entityValue;\n+    int start = index + 2;\n+    boolean isHex = false;\n+    if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n+        // This is a hexadecimal entity\n+        isHex = true;\n+        start++;\n+    }\n+    int end = start;\n+    while (end < seqEnd && (Character.isDigit(input.charAt(end)) || (isHex && Character.toLowerCase(input.charAt(end)) >= 'a' && Character.toLowerCase(input.charAt(end)) <= 'f'))) {\n+        end++;\n+    }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n-            }\n+    if ((end == seqEnd) || (input.charAt(end) != ';')) {\n+        // The entity is incomplete\n+        return 0;\n+    }\n \n+    String entityStr = input.subSequence(start, end).toString();\n+    try {\n+        entityValue = Integer.parseInt(entityStr, isHex ? 16 : 10);\n+    } catch (NumberFormatException nfe) {\n+        return 0;\n+    }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n-        }\n+    if ((entityValue < 0) || (entityValue > Character.MAX_VALUE)) {\n+        // The entity is outside the valid Unicode range\n         return 0;\n     }\n+\n+    // Output the entity's corresponding character\n+    out.write((char)entityValue);\n+    return end - index + 1;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: Failed to unescape numeric entities supplementary characters expected:<[\ud803\udc22]> but was:<[&#68642;]>",
    "test_result": "FAIL"
}