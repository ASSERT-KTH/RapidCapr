{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  Node root = t.getScopeRoot();\n  for (Node var : NodeUtil.findMatchingDescendants(root, new NodeUtil.MatchNodeType(Token.VAR))) {\n    for (Node child : var.children()) {\n      // Check if the child is a qualified name, which should be on the left-hand side of the\n      // declaration.\n      if (child.isQualifiedName()) {\n        String name = child.getQualifiedName();\n        Var scopeVar = scope.getVar(name);\n        Node right = child.getNext();\n        // Check if the right-hand side of the declaration is also a qualified name.\n        if (right != null && right.isQualifiedName()) {\n          String qualifiedName = right.getQualifiedName();\n          // If the qualified name on the left-hand side is the same\n          // as that on the right-hand side, then it is a non-alias local variable.\n          if (name.equals(qualifiedName)) {\n            report(t, var, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n          } else if (scopeVar != null && scopeVar.getInitialValue() != null) {\n            // Otherwise, it is an alias local variable.\n            aliases.put(name, scopeVar);\n            transformation.addAlias(name, qualifiedName);\n          } else {\n            report(t, var, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n          }\n        } else if (right == null && scopeVar != null && scopeVar.getInitialValue() != null) {\n          // If there is no right-hand side and the left-hand side is a qualified name,\n          // then it is also an alias local variable.\n          aliases.put(name, scopeVar);\n          transformation.addAlias(name, name);\n        } else {\n          report(t, var, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..a03299ce 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,43 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  Node root = t.getScopeRoot();\n+  for (Node var : NodeUtil.findMatchingDescendants(root, new NodeUtil.MatchNodeType(Token.VAR))) {\n+    for (Node child : var.children()) {\n+      // Check if the child is a qualified name, which should be on the left-hand side of the\n+      // declaration.\n+      if (child.isQualifiedName()) {\n+        String name = child.getQualifiedName();\n+        Var scopeVar = scope.getVar(name);\n+        Node right = child.getNext();\n+        // Check if the right-hand side of the declaration is also a qualified name.\n+        if (right != null && right.isQualifiedName()) {\n+          String qualifiedName = right.getQualifiedName();\n+          // If the qualified name on the left-hand side is the same\n+          // as that on the right-hand side, then it is a non-alias local variable.\n+          if (name.equals(qualifiedName)) {\n+            report(t, var, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+          } else if (scopeVar != null && scopeVar.getInitialValue() != null) {\n+            // Otherwise, it is an alias local variable.\n+            aliases.put(name, scopeVar);\n+            transformation.addAlias(name, qualifiedName);\n+          } else {\n+            report(t, var, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+          }\n+        } else if (right == null && scopeVar != null && scopeVar.getInitialValue() != null) {\n+          // If there is no right-hand side and the left-hand side is a qualified name,\n+          // then it is also an alias local variable.\n+          aliases.put(name, scopeVar);\n+          transformation.addAlias(name, name);\n         } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+          report(t, var, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n         }\n       }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}