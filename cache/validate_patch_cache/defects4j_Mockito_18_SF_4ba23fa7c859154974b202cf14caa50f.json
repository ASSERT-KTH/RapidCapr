{
    "patch": "public class MyClass {\n    public static <T> T returnValueFor(Class<T> clazz) {\n        if (clazz.equals(String.class)) {\n            return clazz.cast(\"Hello World\");\n        } else if (clazz.isArray()) {\n            return clazz.cast(Array.newInstance(clazz.getComponentType(), 1));\n        } else if (Iterable.class.isAssignableFrom(clazz)) {\n            return clazz.cast(Collections.emptyList());\n        } else if (Map.class.isAssignableFrom(clazz)) {\n            return clazz.cast(Collections.emptyMap());\n        } else if (clazz.isPrimitive()) {\n            if (clazz.equals(boolean.class)) {\n                return clazz.cast(false);\n            } else if (clazz.equals(byte.class)) {\n                return clazz.cast((byte) 0);\n            } else if (clazz.equals(char.class)) {\n                return clazz.cast((char) 0);\n            } else if (clazz.equals(double.class)) {\n                return clazz.cast(0.0);\n            } else if (clazz.equals(float.class)) {\n                return clazz.cast(0.0f);\n            } else if (clazz.equals(int.class)) {\n                return clazz.cast(0);\n            } else if (clazz.equals(long.class)) {\n                return clazz.cast(0L);\n            } else if (clazz.equals(short.class)) {\n                return clazz.cast((short) 0);\n            }\n        }\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..75e8a399a 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,38 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyClass {\n+    public static <T> T returnValueFor(Class<T> clazz) {\n+        if (clazz.equals(String.class)) {\n+            return clazz.cast(\"Hello World\");\n+        } else if (clazz.isArray()) {\n+            return clazz.cast(Array.newInstance(clazz.getComponentType(), 1));\n+        } else if (Iterable.class.isAssignableFrom(clazz)) {\n+            return clazz.cast(Collections.emptyList());\n+        } else if (Map.class.isAssignableFrom(clazz)) {\n+            return clazz.cast(Collections.emptyMap());\n+        } else if (clazz.isPrimitive()) {\n+            if (clazz.equals(boolean.class)) {\n+                return clazz.cast(false);\n+            } else if (clazz.equals(byte.class)) {\n+                return clazz.cast((byte) 0);\n+            } else if (clazz.equals(char.class)) {\n+                return clazz.cast((char) 0);\n+            } else if (clazz.equals(double.class)) {\n+                return clazz.cast(0.0);\n+            } else if (clazz.equals(float.class)) {\n+                return clazz.cast(0.0f);\n+            } else if (clazz.equals(int.class)) {\n+                return clazz.cast(0);\n+            } else if (clazz.equals(long.class)) {\n+                return clazz.cast(0L);\n+            } else if (clazz.equals(short.class)) {\n+                return clazz.cast((short) 0);\n+            }\n+        }\n+        return null;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}