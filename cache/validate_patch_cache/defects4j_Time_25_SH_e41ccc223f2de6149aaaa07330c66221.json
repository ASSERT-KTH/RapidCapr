{
    "patch": "            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            final int MINUTE = 60 * 1000;\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted - MINUTE);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - MINUTE);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..8552b86d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,16 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // we need to ensure that time is always after the DST gap\n+            // this happens naturally for positive offsets, but not for negative\n+            final int MINUTE = 60 * 1000;\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted - MINUTE);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - MINUTE);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}