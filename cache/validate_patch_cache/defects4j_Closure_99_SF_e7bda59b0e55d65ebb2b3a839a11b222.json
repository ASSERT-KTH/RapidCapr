{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse functions unless they are in the global scope, a block, a script, or are assigned to a\n        // variable name.\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN)) {\n            return false;\n        }\n\n        // Don't traverse functions unless they have a name or are assigned to a variable name.\n        if (n.getFirstChild().getType() != Token.NAME && (parent.getType() != Token.ASSIGN || parent.getFirstChild() != n)) {\n            return false;\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle nested assignments properly\n            // (e.g., (a = this).property = c;), assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n            // If the right-hand side is an object literal, we should also traverse its children. This can happen in\n            // patterns like: `var {x} = obj;`.\n            if (rhs != null && rhs.getType() == Token.OBJECTLIT) {\n                return true;\n            }\n        } else {\n            // Only traverse the right side if it's not an assignment to a prototype property or subproperty or a\n            // function inside a function.\n            if ((lhs.getType() == Token.GETPROP || lhs.getType() == Token.GETELEM)) {\n                Node prop = lhs.getLastChild();\n                if (prop != null && \"prototype\".equals(prop.getString())) {\n                    return false;\n                }\n            } else if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n                // Don't traverse the right-hand side, unless it's a property of \"this\".\n                Node parentNode = parent.getParent();\n                if (parentNode != null && parentNode.getType() == Token.FUNCTION &&\n                        parentNode.getFirstChild().getType() != Token.NAME) {\n                    return false;\n                }\n                Node grandparentNode = (parentNode == null ? null : parentNode.getParent());\n                if (grandparentNode != null && grandparentNode.getType() == Token.ASSIGN &&\n                        grandparentNode.getFirstChild() != parentNode) {\n                    return false;\n                }\n            } else if (isNestedFunction(n)) {\n                return false;\n            }\n            // If the right-hand side is an object literal, we should also traverse its children. This can happen in\n            // patterns like: `var {x} = obj;`.\n            if (rhs != null && rhs.getType() == Token.OBJECTLIT) {\n                return true;\n            }\n        }\n    }\n\n    return true;\n}\n\nprivate boolean isNestedFunction(Node n) {\n    Node parent = n.getParent();\n    while (parent != null && parent.getType() == Token.CALL) {\n        parent = parent.getParent();\n    }\n    return parent != null && parent.getType() == Token.FUNCTION && parent.getFirstChild() != n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..22137f41 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,83 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+        // Don't traverse functions that are constructors or have the @this or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+        // Don't traverse functions unless they are in the global scope, a block, a script, or are assigned to a\n+        // variable name.\n+        int pType = parent.getType();\n+        if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN)) {\n+            return false;\n+        }\n+\n+        // Don't traverse functions unless they have a name or are assigned to a variable name.\n+        if (n.getFirstChild().getType() != Token.NAME && (parent.getType() != Token.ASSIGN || parent.getFirstChild() != n)) {\n+            return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment. To handle nested assignments properly\n+            // (e.g., (a = this).property = c;), assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+            // If the right-hand side is an object literal, we should also traverse its children. This can happen in\n+            // patterns like: `var {x} = obj;`.\n+            if (rhs != null && rhs.getType() == Token.OBJECTLIT) {\n+                return true;\n+            }\n+        } else {\n+            // Only traverse the right side if it's not an assignment to a prototype property or subproperty or a\n+            // function inside a function.\n+            if ((lhs.getType() == Token.GETPROP || lhs.getType() == Token.GETELEM)) {\n+                Node prop = lhs.getLastChild();\n+                if (prop != null && \"prototype\".equals(prop.getString())) {\n+                    return false;\n+                }\n+            } else if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+                // Don't traverse the right-hand side, unless it's a property of \"this\".\n+                Node parentNode = parent.getParent();\n+                if (parentNode != null && parentNode.getType() == Token.FUNCTION &&\n+                        parentNode.getFirstChild().getType() != Token.NAME) {\n+                    return false;\n+                }\n+                Node grandparentNode = (parentNode == null ? null : parentNode.getParent());\n+                if (grandparentNode != null && grandparentNode.getType() == Token.ASSIGN &&\n+                        grandparentNode.getFirstChild() != parentNode) {\n+                    return false;\n+                }\n+            } else if (isNestedFunction(n)) {\n+                return false;\n+            }\n+            // If the right-hand side is an object literal, we should also traverse its children. This can happen in\n+            // patterns like: `var {x} = obj;`.\n+            if (rhs != null && rhs.getType() == Token.OBJECTLIT) {\n+                return true;\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n     }\n \n     return true;\n-  }\n+}\n+\n+private boolean isNestedFunction(Node n) {\n+    Node parent = n.getParent();\n+    while (parent != null && parent.getType() == Token.CALL) {\n+        parent = parent.getParent();\n+    }\n+    return parent != null && parent.getType() == Token.FUNCTION && parent.getFirstChild() != n;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 46 expected:<0> but was:<1>",
    "test_result": "FAIL"
}