{
    "patch": "if (n.getType() == Token.CATCH) {\n  defineCatch(n, parent);\n} else if (n.getType() == Token.VAR) {\n  defineVar(n, parent);\n} else if (n.getType() == Token.FUNCTION) {\n  if (NodeUtil.isFunctionDeclaration(n)) {\n    defineDeclaredFunction(n, parent);\n  } else if (NodeUtil.isFunctionExpression(n)) {\n    Node grandparent = parent.getParent();\n    if (parent.getType() == Token.EXPR_RESULT &&\n        grandparent != null && grandparent.getType() == Token.BLOCK) {\n      defineDeclaredFunction(n, grandparent);\n    } else {\n      handleFunctionInputs(parent);\n    }\n  }\n} else if (n.getType() == Token.LP) {\n  if (parent.getType() == Token.EXPR_RESULT &&\n      parent.getFirstChild() != null &&\n      parent.getFirstChild().getType() == Token.FUNCTION) {\n    handleFunctionInputs(parent);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..1cf0f352 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,29 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+if (n.getType() == Token.CATCH) {\n+  defineCatch(n, parent);\n+} else if (n.getType() == Token.VAR) {\n+  defineVar(n, parent);\n+} else if (n.getType() == Token.FUNCTION) {\n+  if (NodeUtil.isFunctionDeclaration(n)) {\n+    defineDeclaredFunction(n, parent);\n+  } else if (NodeUtil.isFunctionExpression(n)) {\n+    Node grandparent = parent.getParent();\n+    if (parent.getType() == Token.EXPR_RESULT &&\n+        grandparent != null && grandparent.getType() == Token.BLOCK) {\n+      defineDeclaredFunction(n, grandparent);\n+    } else {\n+      handleFunctionInputs(parent);\n+    }\n+  }\n+} else if (n.getType() == Token.LP) {\n+  if (parent.getType() == Token.EXPR_RESULT &&\n+      parent.getFirstChild() != null &&\n+      parent.getFirstChild().getType() == Token.FUNCTION) {\n+    handleFunctionInputs(parent);\n+  }\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}