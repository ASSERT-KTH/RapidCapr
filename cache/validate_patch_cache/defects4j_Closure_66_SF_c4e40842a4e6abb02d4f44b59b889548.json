{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    Gson gson = new Gson();\n    Map<String, Object> map = new HashMap<String, Object>();\n    map = (Map<String, Object>) gson.fromJson(jsonStr, map.getClass());\n    double count = getCount(map, 0);\n    double total = getTotal(map, 0);\n    return total == 0 ? 0 : (count / total) * 100;\n}\n\npublic static double getCount(Object value, double count) {\n    if (value instanceof Double) {\n        return count + (double) value;\n    } else if (value instanceof Map) {\n        for (Object v : ((Map) value).values()) {\n            count = getCount(v, count);\n        }\n    } else if (value instanceof List) {\n        for (Object v : (List) value) {\n            count = getCount(v, count);\n        }\n    }\n    return count;\n}\n\npublic static double getTotal(Object value, double total) {\n    if (value instanceof Double) {\n        return total + (double) value;\n    } else if (value instanceof Map) {\n        for (Object v : ((Map) value).values()) {\n            total = getTotal(v, total);\n        }\n    } else if (value instanceof List) {\n        for (Object v : (List) value) {\n            total = getTotal(v, total);\n        }\n    }\n    return total;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..8304ff14 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,44 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    Gson gson = new Gson();\n+    Map<String, Object> map = new HashMap<String, Object>();\n+    map = (Map<String, Object>) gson.fromJson(jsonStr, map.getClass());\n+    double count = getCount(map, 0);\n+    double total = getTotal(map, 0);\n+    return total == 0 ? 0 : (count / total) * 100;\n+}\n+\n+public static double getCount(Object value, double count) {\n+    if (value instanceof Double) {\n+        return count + (double) value;\n+    } else if (value instanceof Map) {\n+        for (Object v : ((Map) value).values()) {\n+            count = getCount(v, count);\n+        }\n+    } else if (value instanceof List) {\n+        for (Object v : (List) value) {\n+            count = getCount(v, count);\n+        }\n+    }\n+    return count;\n+}\n+\n+public static double getTotal(Object value, double total) {\n+    if (value instanceof Double) {\n+        return total + (double) value;\n+    } else if (value instanceof Map) {\n+        for (Object v : ((Map) value).values()) {\n+            total = getTotal(v, total);\n+        }\n+    } else if (value instanceof List) {\n+        for (Object v : (List) value) {\n+            total = getTotal(v, total);\n+        }\n+    }\n+    return total;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}