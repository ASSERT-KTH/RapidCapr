{
    "patch": "public static double getTypedPercent(String jsonString) {\n    try {\n        ObjectMapper objectMapper = new ObjectMapper();\n        Map<String, Object> map = objectMapper.readValue(jsonString, new TypeReference<Map<String, Object>>() {});\n        Object typed = map.get(\"typed\");\n        Object total = map.get(\"total\");\n        if (typed instanceof Integer && total instanceof Integer) {\n            int typedCount = (Integer) typed;\n            int totalCount = (Integer) total;\n            return ((double) typedCount / totalCount) * 100.0;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return -1.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..eabe5de2 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonString) {\n+    try {\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        Map<String, Object> map = objectMapper.readValue(jsonString, new TypeReference<Map<String, Object>>() {});\n+        Object typed = map.get(\"typed\");\n+        Object total = map.get(\"total\");\n+        if (typed instanceof Integer && total instanceof Integer) {\n+            int typedCount = (Integer) typed;\n+            int totalCount = (Integer) total;\n+            return ((double) typedCount / totalCount) * 100.0;\n+        }\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+    return -1.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}