{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    if (dec.hasComplexEigenvalues()) {\n        // Matrix has complex eigenvalues, return null or throw an exception\n        return null;\n    } else {\n        final RealMatrix eigenvecs = dec.getV();\n        final RealMatrix eigenvals = dec.getD();\n        final double[][] real_eigenvals = eigenvals.getData();\n\n        // Take square root of the eigenvalues\n        for (int i = 0; i < eigenvals.getColumnDimension(); i++) {\n            if (real_eigenvals[i][i] < 0) {\n                return null; // Negative eigenvalue, return null or throw an exception\n            }\n            real_eigenvals[i][i] = FastMath.sqrt(real_eigenvals[i][i]);\n        }\n\n        final RealMatrix sqrt_eigenvals = MatrixUtils.createRealMatrix(real_eigenvals);\n        final RealMatrix eigenvals_sqrt = eigenvecs.multiply(sqrt_eigenvals).multiply(eigenvecs.transpose());\n\n        // Round small values to zero to reduce memory usage\n        for (int i = 0; i < eigenvals_sqrt.getRowDimension(); i++) {\n            for (int j = 0; j < eigenvals_sqrt.getColumnDimension(); j++) {\n                if (FastMath.abs(eigenvals_sqrt.getEntry(i, j)) < 1e-16) {\n                    eigenvals_sqrt.setEntry(i, j, 0.0);\n                }\n            }\n        }\n\n        return eigenvals_sqrt;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..eb4829b22 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,37 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    if (dec.hasComplexEigenvalues()) {\n+        // Matrix has complex eigenvalues, return null or throw an exception\n+        return null;\n+    } else {\n+        final RealMatrix eigenvecs = dec.getV();\n+        final RealMatrix eigenvals = dec.getD();\n+        final double[][] real_eigenvals = eigenvals.getData();\n+\n+        // Take square root of the eigenvalues\n+        for (int i = 0; i < eigenvals.getColumnDimension(); i++) {\n+            if (real_eigenvals[i][i] < 0) {\n+                return null; // Negative eigenvalue, return null or throw an exception\n+            }\n+            real_eigenvals[i][i] = FastMath.sqrt(real_eigenvals[i][i]);\n+        }\n+\n+        final RealMatrix sqrt_eigenvals = MatrixUtils.createRealMatrix(real_eigenvals);\n+        final RealMatrix eigenvals_sqrt = eigenvecs.multiply(sqrt_eigenvals).multiply(eigenvecs.transpose());\n+\n+        // Round small values to zero to reduce memory usage\n+        for (int i = 0; i < eigenvals_sqrt.getRowDimension(); i++) {\n+            for (int j = 0; j < eigenvals_sqrt.getColumnDimension(); j++) {\n+                if (FastMath.abs(eigenvals_sqrt.getEntry(i, j)) < 1e-16) {\n+                    eigenvals_sqrt.setEntry(i, j, 0.0);\n+                }\n+            }\n+        }\n+\n+        return eigenvals_sqrt;\n     }\n }\n+}",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}