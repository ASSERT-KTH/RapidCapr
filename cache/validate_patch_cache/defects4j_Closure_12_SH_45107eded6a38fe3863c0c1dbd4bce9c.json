{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    List<Node> children = new ArrayList<>(cfgNode.getChildren());\n    List<Node> catchBlocks = new ArrayList<>();\n    for (Node child : children) {\n        if (!child.getType().equals(NodeType.EXCEPTION_HANDLER)) {\n            continue;\n        }\n        catchBlocks.add(child);\n    }\n    return !catchBlocks.isEmpty();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..e0ff0fba 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,17 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    List<Node> children = new ArrayList<>(cfgNode.getChildren());\n+    List<Node> catchBlocks = new ArrayList<>();\n+    for (Node child : children) {\n+        if (!child.getType().equals(NodeType.EXCEPTION_HANDLER)) {\n+            continue;\n+        }\n+        catchBlocks.add(child);\n+    }\n+    return !catchBlocks.isEmpty();\n+}\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}