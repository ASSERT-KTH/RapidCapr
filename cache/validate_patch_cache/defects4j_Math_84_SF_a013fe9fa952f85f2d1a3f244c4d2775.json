{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n        RealPointValuePair best;\n        RealPointValuePair reflected;\n        RealPointValuePair[] reflectedSimplex;\n        RealPointValuePair expanded;\n        RealPointValuePair contracted;\n        RealPointValuePair[] contractedSimplex;\n        RealPointValuePair contractedOut;\n        RealPointValuePair[] shrinked;\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        best = original[0];\n\n        // perform a reflection step\n        reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            reflectedSimplex = simplex.clone();\n            expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                simplex = expanded.getPoint();\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contracted.getPoint();\n            } else {\n                boolean shouldShrink = true;\n                if (comparator.compare(contracted, original[original.length - 1]) >= 0) {\n                    contractedSimplex = simplex.clone();\n                    contractedOut = evaluateNewSimplex(original, rho, comparator);\n                    if (comparator.compare(contractedOut, contracted) < 0) {\n                        simplex = contractedOut.getPoint();\n                        shouldShrink = false;\n                    }\n                }\n                if (shouldShrink) {\n                    // shrink the simplex\n                    shrinked = shrink(original, comparator);\n                    if (comparator.compare(shrinked[0], best) < 0) {\n                        simplex = shrinked.clone();\n                    } else {\n                        simplex = contractInside(original, comparator);\n                    }\n                }\n            }\n\n        }\n\n        if (checker != null) {\n            if (checker.converged(getIterations(), best, simplex)) {\n                return;\n            }\n        }\n\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..40f40adec 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,77 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+    while (true) {\n+\n+        incrementIterationsCounter();\n+        RealPointValuePair best;\n+        RealPointValuePair reflected;\n+        RealPointValuePair[] reflectedSimplex;\n+        RealPointValuePair expanded;\n+        RealPointValuePair contracted;\n+        RealPointValuePair[] contractedSimplex;\n+        RealPointValuePair contractedOut;\n+        RealPointValuePair[] shrinked;\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        best = original[0];\n+\n+        // perform a reflection step\n+        reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+\n+            // compute the expanded simplex\n+            reflectedSimplex = simplex.clone();\n+            expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                simplex = expanded.getPoint();\n             }\n \n+        } else {\n+\n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = contracted.getPoint();\n+            } else {\n+                boolean shouldShrink = true;\n+                if (comparator.compare(contracted, original[original.length - 1]) >= 0) {\n+                    contractedSimplex = simplex.clone();\n+                    contractedOut = evaluateNewSimplex(original, rho, comparator);\n+                    if (comparator.compare(contractedOut, contracted) < 0) {\n+                        simplex = contractedOut.getPoint();\n+                        shouldShrink = false;\n+                    }\n+                }\n+                if (shouldShrink) {\n+                    // shrink the simplex\n+                    shrinked = shrink(original, comparator);\n+                    if (comparator.compare(shrinked[0], best) < 0) {\n+                        simplex = shrinked.clone();\n+                    } else {\n+                        simplex = contractInside(original, comparator);\n+                    }\n+                }\n+            }\n \n-            // check convergence\n+        }\n+\n+        if (checker != null) {\n+            if (checker.converged(getIterations(), best, simplex)) {\n                 return;\n             }\n-\n         }\n \n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}