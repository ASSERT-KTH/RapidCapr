{
    "patch": "private void inferPropertyTypes(\n      Node n, JSType type, JSType constraint, List<JSError> warnings) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n              warnings.add(JSError.make(\n                  n, INVALID_INFERRED_TYPE, prop, typeToInfer.toString()));\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n      JSType instanceType = narrowed.autobox().getInstanceType();\n      if (instanceType != null) {\n        ObjectType objType = ObjectType.cast(instanceType);\n        ObjectKind ok = objType.getObjectKind();\n        if (ok == ObjectKind.NULL ||\n            ok == ObjectKind.UNDEFINED ||\n            ok == ObjectKind.TOP_OBJECT ||\n            ok == ObjectKind.FUNCTION_INSTANCE) {\n          String pname = n.getLastChild().getString();\n          warnings.add(JSError.make(n, PROPERTY_ACCESS_ON_NONOBJECT, pname));\n          return scope;\n        }\n        // Infer property types if there's a record type constraint.\n        JSDocInfo jsdoc = NodeUtil.getBestJSDocInfo(n);\n        if (jsdoc != null && jsdoc.hasType() && jsdoc.getType().isRecordType()) {\n          inferPropertyTypes(n, objType, jsdoc.getType(), warnings);\n        }\n      }\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..b54b8ac1 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,7 +1111,8 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n+private void inferPropertyTypes(\n+      Node n, JSType type, JSType constraint, List<JSError> warnings) {\n     if (type == null || constraint == null) {\n       return;\n     }\n@@ -1128,6 +1129,8 @@ class TypeInference\n             if (!objType.hasProperty(prop)) {\n               typeToInfer =\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+              warnings.add(JSError.make(\n+                  n, INVALID_INFERRED_TYPE, prop, typeToInfer.toString()));\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n@@ -1147,6 +1150,27 @@ class TypeInference\n       if (type != narrowed) {\n         scope = narrowScope(scope, n, narrowed);\n       }\n+      JSType instanceType = narrowed.autobox().getInstanceType();\n+      if (instanceType != null) {\n+        ObjectType objType = ObjectType.cast(instanceType);\n+        ObjectKind ok = objType.getObjectKind();\n+        if (ok == ObjectKind.NULL ||\n+            ok == ObjectKind.UNDEFINED ||\n+            ok == ObjectKind.TOP_OBJECT ||\n+            ok == ObjectKind.FUNCTION_INSTANCE) {\n+          String pname = n.getLastChild().getString();\n+          warnings.add(JSError.make(n, PROPERTY_ACCESS_ON_NONOBJECT, pname));\n+          return scope;\n+        }\n+        // Infer property types if there's a record type constraint.\n+        JSDocInfo jsdoc = NodeUtil.getBestJSDocInfo(n);\n+        if (jsdoc != null && jsdoc.hasType() && jsdoc.getType().isRecordType()) {\n+          inferPropertyTypes(n, objType, jsdoc.getType(), warnings);\n+        }\n+      }\n+    }\n+    return scope;\n+  }\n     }\n     return scope;\n   }",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}