{
    "patch": "  private boolean isLentToPrototype(Node getPropNode) {\n    Node targetParent = getPropNode.getParent();\n    Node lhsNode = getPropNode.getFirstChild();\n    Node rhsNode = lhsNode.getNext();\n\n    if (targetParent.getType() == Token.ASSIGN) {\n      // Get the name of the variable being assigned to.\n      String assignName = getNodeNameString(lhsNode);\n\n      // Check if the assigned variable is a prototype property.\n      return assignName != null\n          && (assignName.endsWith(\".prototype\") || assignName.matches(\".+\\\\.prototype\\\\..+\"));\n    } else if (NodeUtil.isNameDeclaration(targetParent)) {\n      // Get the name of the variable being declared.\n      String varName = getNodeNameString(lhsNode);\n\n      // Check if the declared variable is a prototype property.\n      return varName != null\n          && (varName.endsWith(\".prototype\") || varName.matches(\".+\\\\.prototype\\\\..+\"));\n    } else if (NodeUtil.isGet(targetParent) && rhsNode != null && !rhsNode.isFunction()) {\n      // If this is an indirect assignment to a prototype property, we need to check the entire\n      // chain of assignments leading up to it to determine if this function is being lent to a\n      // prototype object.\n      return isLentToPrototype(targetParent);\n    }\n\n    return false;\n  }\n\n  private String getNodeNameString(Node nameNode) {\n    if (NodeUtil.isGet(nameNode)) {\n      Node target = nameNode.getFirstChild();\n      String targetName = getNodeNameString(target);\n      if (targetName != null) {\n        return targetName + '.' + nameNode.getLastChild().getString();\n      }\n    } else if (nameNode.getType() == Token.NAME) {\n      return nameNode.getString();\n    }\n\n    return null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..df66c6f4 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,47 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+  private boolean isLentToPrototype(Node getPropNode) {\n+    Node targetParent = getPropNode.getParent();\n+    Node lhsNode = getPropNode.getFirstChild();\n+    Node rhsNode = lhsNode.getNext();\n+\n+    if (targetParent.getType() == Token.ASSIGN) {\n+      // Get the name of the variable being assigned to.\n+      String assignName = getNodeNameString(lhsNode);\n+\n+      // Check if the assigned variable is a prototype property.\n+      return assignName != null\n+          && (assignName.endsWith(\".prototype\") || assignName.matches(\".+\\\\.prototype\\\\..+\"));\n+    } else if (NodeUtil.isNameDeclaration(targetParent)) {\n+      // Get the name of the variable being declared.\n+      String varName = getNodeNameString(lhsNode);\n+\n+      // Check if the declared variable is a prototype property.\n+      return varName != null\n+          && (varName.endsWith(\".prototype\") || varName.matches(\".+\\\\.prototype\\\\..+\"));\n+    } else if (NodeUtil.isGet(targetParent) && rhsNode != null && !rhsNode.isFunction()) {\n+      // If this is an indirect assignment to a prototype property, we need to check the entire\n+      // chain of assignments leading up to it to determine if this function is being lent to a\n+      // prototype object.\n+      return isLentToPrototype(targetParent);\n+    }\n+\n+    return false;\n+  }\n+\n+  private String getNodeNameString(Node nameNode) {\n+    if (NodeUtil.isGet(nameNode)) {\n+      Node target = nameNode.getFirstChild();\n+      String targetName = getNodeNameString(target);\n+      if (targetName != null) {\n+        return targetName + '.' + nameNode.getLastChild().getString();\n+      }\n+    } else if (nameNode.getType() == Token.NAME) {\n+      return nameNode.getString();\n+    }\n+\n+    return null;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}