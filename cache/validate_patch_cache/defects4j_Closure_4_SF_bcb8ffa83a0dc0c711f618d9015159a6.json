{
    "patch": " JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    boolean shouldFinishPropertyContinuations = false;\n    if (!resolved) {\n      resolveViaProperties(t, enclosing);\n    }\n    if (isPrototypeObject() && getPrototypeObject() != null) {\n      getPrototypeObject().resolve(t);\n    }\n    // We want to call super.resolve before calling finishPropertyContinuations\n    // because it can swap out the instance members.\n    JSType result = super.resolveInternal(t, enclosing);\n    if (!resolved && isResolved()) {\n      // We finished resolving via properties but originally considered trying\n      // the registry. Make sure to set instance type properties.\n      finishPropertyContinuations();\n      shouldFinishPropertyContinuations = true;\n    }\n    if (shouldFinishPropertyContinuations || (resolved && isResolved())) {\n      finishPropertyContinuations();\n    }\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..806461bf 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,34 +181,31 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n+ JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n     boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    boolean shouldFinishPropertyContinuations = false;\n+    if (!resolved) {\n+      resolveViaProperties(t, enclosing);\n     }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n+    if (isPrototypeObject() && getPrototypeObject() != null) {\n+      getPrototypeObject().resolve(t);\n+    }\n+    // We want to call super.resolve before calling finishPropertyContinuations\n+    // because it can swap out the instance members.\n+    JSType result = super.resolveInternal(t, enclosing);\n+    if (!resolved && isResolved()) {\n+      // We finished resolving via properties but originally considered trying\n+      // the registry. Make sure to set instance type properties.\n+      finishPropertyContinuations();\n+      shouldFinishPropertyContinuations = true;\n+    }\n+    if (shouldFinishPropertyContinuations || (resolved && isResolved())) {\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n     }\n-\n-    resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}