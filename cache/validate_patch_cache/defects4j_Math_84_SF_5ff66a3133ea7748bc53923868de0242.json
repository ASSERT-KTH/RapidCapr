{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] origVertex = simplex.clone();\n        final RealPointValuePair best = origVertex[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(origVertex, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(origVertex, rho, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex[0] = expanded;\n            } else {\n                // accept the reflected simplex\n                simplex[0] = reflected;\n            }\n        } else {\n            final RealPointValuePair contracted = evaluateNewSimplex(origVertex, -sigma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex[0] = contracted;\n            } else {\n                final RealPointValuePair[] contractedSimplex = new RealPointValuePair[origVertex.length];\n                for (int i = 0; i < contractedSimplex.length; ++i) {\n                    contractedSimplex[i] = origVertex[0].combine(0.5, origVertex[i + 1].combine(0.5, origVertex[origVertex.length - 1]));\n                }\n                simplex = contractedSimplex;\n            }\n        }\n\n        // check convergence\n        boolean converged = true;\n        for (int i = 1; i < simplex.length; ++i) {\n            converged &= FastMath.abs(simplex[i].getValue() - simplex[0].getValue()) <= simplexComparator.getRelativeThreshold() * (FastMath.abs(simplex[i].getValue()) + FastMath.abs(simplex[0].getValue())) + simplexComparator.getAbsoluteThreshold();\n        }\n        if (converged) {\n            return;\n        }\n\n        if (getIterations() >= maxIterations) {\n            throw new OptimizationException(new MaxIterationsExceededException(maxIterations));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..8105aca0d 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,57 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+    while (true) {\n+\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] origVertex = simplex.clone();\n+        final RealPointValuePair best = origVertex[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(origVertex, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            // compute the expanded simplex\n+            final RealPointValuePair expanded = evaluateNewSimplex(origVertex, rho, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // accept the expanded simplex\n+                simplex[0] = expanded;\n+            } else {\n+                // accept the reflected simplex\n+                simplex[0] = reflected;\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        } else {\n+            final RealPointValuePair contracted = evaluateNewSimplex(origVertex, -sigma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex[0] = contracted;\n+            } else {\n+                final RealPointValuePair[] contractedSimplex = new RealPointValuePair[origVertex.length];\n+                for (int i = 0; i < contractedSimplex.length; ++i) {\n+                    contractedSimplex[i] = origVertex[0].combine(0.5, origVertex[i + 1].combine(0.5, origVertex[origVertex.length - 1]));\n+                }\n+                simplex = contractedSimplex;\n             }\n+        }\n \n+        // check convergence\n+        boolean converged = true;\n+        for (int i = 1; i < simplex.length; ++i) {\n+            converged &= FastMath.abs(simplex[i].getValue() - simplex[0].getValue()) <= simplexComparator.getRelativeThreshold() * (FastMath.abs(simplex[i].getValue()) + FastMath.abs(simplex[0].getValue())) + simplexComparator.getAbsoluteThreshold();\n+        }\n+        if (converged) {\n+            return;\n         }\n \n+        if (getIterations() >= maxIterations) {\n+            throw new OptimizationException(new MaxIterationsExceededException(maxIterations));\n+        }\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}