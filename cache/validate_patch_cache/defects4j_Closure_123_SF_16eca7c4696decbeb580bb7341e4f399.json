{
    "patch": "public String fixCode(String code) {\n    String fixedCode = \"\";\n    Pattern pattern = Pattern.compile(\"(?<=(for\\\\().+?;)\");\n    Matcher matcher = pattern.matcher(code);\n    \n    while (matcher.find()) {\n        String match = matcher.group();\n        String[] parts = match.split(\";\");\n        boolean foundIn = false;\n\n        for (int i = 0; i < parts.length; i++) {\n            String part = parts[i].trim();\n            \n            if (part.contains(\"in\")) {\n                foundIn = true;\n                parts[i] = \"[\" + part + \"]\";\n                break;\n            }\n        }\n        \n        if (foundIn) {\n            match = String.join(\";\", parts);\n            fixedCode = code.replace(matcher.group(), match);\n            break;\n        }\n    }\n\n    return fixedCode.equals(\"\") ? \"ERROR\" : fixedCode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..277e7077 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,35 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    String fixedCode = \"\";\n+    Pattern pattern = Pattern.compile(\"(?<=(for\\\\().+?;)\");\n+    Matcher matcher = pattern.matcher(code);\n+    \n+    while (matcher.find()) {\n+        String match = matcher.group();\n+        String[] parts = match.split(\";\");\n+        boolean foundIn = false;\n+\n+        for (int i = 0; i < parts.length; i++) {\n+            String part = parts[i].trim();\n+            \n+            if (part.contains(\"in\")) {\n+                foundIn = true;\n+                parts[i] = \"[\" + part + \"]\";\n+                break;\n+            }\n+        }\n+        \n+        if (foundIn) {\n+            match = String.join(\";\", parts);\n+            fixedCode = code.replace(matcher.group(), match);\n+            break;\n+        }\n+    }\n+\n+    return fixedCode.equals(\"\") ? \"ERROR\" : fixedCode;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}