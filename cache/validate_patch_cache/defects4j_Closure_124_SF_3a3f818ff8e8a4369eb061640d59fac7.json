{
    "patch": "  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n    // Traverse the chain of getprop nodes to check if any of the parts of the chain\n    // are assigned the replacement node.\n    while (node.isGetProp()) {\n      node = node.getFirstChild();\n      if (node.isName() && isNameAssignedTo(node.getString(), replacement)) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..372d356e 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -210,10 +210,13 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n     }\n     Preconditions.checkArgument(node.isGetProp());\n \n+    // Traverse the chain of getprop nodes to check if any of the parts of the chain\n+    // are assigned the replacement node.\n+    while (node.isGetProp()) {\n       node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n-      return false;\n+      if (node.isName() && isNameAssignedTo(node.getString(), replacement)) {\n+        return false;\n+      }\n     }\n \n     return true;\n@@ -241,4 +244,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}