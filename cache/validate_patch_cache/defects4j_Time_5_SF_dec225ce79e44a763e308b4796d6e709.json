{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    // extract the period fields into individual variables\n    int years = getYears();\n    int months = getMonths();\n    int days = getDays();\n    int weeks = getWeeks();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    // normalize the period fields using the period type\n    years += months / 12;\n    months %= 12;\n    days += weeks * 7;\n    weeks = 0;\n    hours += days / 24;\n    days %= 24;\n    minutes += hours / 60;\n    hours %= 60;\n    seconds += minutes / 60;\n    minutes %= 60;\n    millis += seconds / 1000;\n    seconds %= 1000;\n\n    // construct a new normalized period with the normalized period fields\n    Period normalized = new Period(0, type, ISOChronology.getInstanceUTC())\n            .withYears(years)\n            .withMonths(months)\n            .withWeeks(weeks)\n            .withDays(days)\n            .withHours(hours)\n            .withMinutes(minutes)\n            .withSeconds(seconds)\n            .withMillis(millis);\n\n    return normalized;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..0ca69ada 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,43 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    // extract the period fields into individual variables\n+    int years = getYears();\n+    int months = getMonths();\n+    int days = getDays();\n+    int weeks = getWeeks();\n+    int hours = getHours();\n+    int minutes = getMinutes();\n+    int seconds = getSeconds();\n+    int millis = getMillis();\n+\n+    // normalize the period fields using the period type\n+    years += months / 12;\n+    months %= 12;\n+    days += weeks * 7;\n+    weeks = 0;\n+    hours += days / 24;\n+    days %= 24;\n+    minutes += hours / 60;\n+    hours %= 60;\n+    seconds += minutes / 60;\n+    minutes %= 60;\n+    millis += seconds / 1000;\n+    seconds %= 1000;\n+\n+    // construct a new normalized period with the normalized period fields\n+    Period normalized = new Period(0, type, ISOChronology.getInstanceUTC())\n+            .withYears(years)\n+            .withMonths(months)\n+            .withWeeks(weeks)\n+            .withDays(days)\n+            .withHours(hours)\n+            .withMinutes(minutes)\n+            .withSeconds(seconds)\n+            .withMillis(millis);\n+\n+    return normalized;\n+}\n \n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P2W5D> but was:<P19D>",
    "test_result": "FAIL"
}