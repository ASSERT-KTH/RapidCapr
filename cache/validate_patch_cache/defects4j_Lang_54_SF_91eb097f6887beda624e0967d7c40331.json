{
    "patch": "public static Locale toLocale(String str) {\n    if (str == null) {\n        return null;\n    }\n    int len = str.length();\n    if (len != 2 && len != 5 && len < 7) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    char ch0 = str.charAt(0);\n    char ch1 = str.charAt(1);\n    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 2) {\n        return new Locale(str, \"\");\n    } else {\n        int index1 = str.charAt(2) == '_' ? 3 : 2;\n        int index2 = str.indexOf('_', index1); \n        if (index2 == -1) {\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            } else {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n        } else {\n            int index3 = index2 + (len > index2 + 1 && str.charAt(index2 + 1) == '_' ? 1 : 0);\n            if (index3 < len && !isWellFormedISO3CountryCode(str.substring(index3))) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (index2 == index1) {\n                return new Locale(str.substring(0, 2), \"\", str.substring(index2 + 1));\n            } else {\n                return new Locale(str.substring(0, 2), str.substring(index1, index2), len == index3 ? \"\" : str.substring(index3));\n            }\n        }\n    }\n}\n\n/**\n * Internal method to validate whether the specified string is a well-formed\n * ISO 3 country code.\n */\nprivate static boolean isWellFormedISO3CountryCode(String code) {\n    return code.length() == 3 && isLowerCaseAlpha(code.charAt(0)) && isLowerCaseAlpha(code.charAt(1)) && isLowerCaseAlpha(code.charAt(2));\n}\n\n/**\n * Internal method to validate whether the specified character is a\n * lower-case letter.\n */\nprivate static boolean isLowerCaseAlpha(char ch) {\n    return ch >= 'a' && ch <= 'z';\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..d057149f 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -91,40 +91,59 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int len = str.length();\n-        if (len != 2 && len != 5 && len < 7) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        char ch0 = str.charAt(0);\n-        char ch1 = str.charAt(1);\n-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        if (len == 2) {\n-            return new Locale(str, \"\");\n-        } else {\n-            if (str.charAt(2) != '_') {\n+public static Locale toLocale(String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    int len = str.length();\n+    if (len != 2 && len != 5 && len < 7) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    char ch0 = str.charAt(0);\n+    char ch1 = str.charAt(1);\n+    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (len == 2) {\n+        return new Locale(str, \"\");\n+    } else {\n+        int index1 = str.charAt(2) == '_' ? 3 : 2;\n+        int index2 = str.indexOf('_', index1); \n+        if (index2 == -1) {\n+            if (len == 5) {\n+                return new Locale(str.substring(0, 2), str.substring(3, 5));\n+            } else {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            char ch3 = str.charAt(3);\n-            char ch4 = str.charAt(4);\n-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n+        } else {\n+            int index3 = index2 + (len > index2 + 1 && str.charAt(index2 + 1) == '_' ? 1 : 0);\n+            if (index3 < len && !isWellFormedISO3CountryCode(str.substring(index3))) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n+            if (index2 == index1) {\n+                return new Locale(str.substring(0, 2), \"\", str.substring(index2 + 1));\n             } else {\n-                if (str.charAt(5) != '_') {\n-                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-                }\n-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+                return new Locale(str.substring(0, 2), str.substring(index1, index2), len == index3 ? \"\" : str.substring(index3));\n             }\n         }\n     }\n+}\n+\n+/**\n+ * Internal method to validate whether the specified string is a well-formed\n+ * ISO 3 country code.\n+ */\n+private static boolean isWellFormedISO3CountryCode(String code) {\n+    return code.length() == 3 && isLowerCaseAlpha(code.charAt(0)) && isLowerCaseAlpha(code.charAt(1)) && isLowerCaseAlpha(code.charAt(2));\n+}\n+\n+/**\n+ * Internal method to validate whether the specified character is a\n+ * lower-case letter.\n+ */\n+private static boolean isLowerCaseAlpha(char ch) {\n+    return ch >= 'a' && ch <= 'z';\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: fr__POSIX",
    "test_result": "FAIL"
}