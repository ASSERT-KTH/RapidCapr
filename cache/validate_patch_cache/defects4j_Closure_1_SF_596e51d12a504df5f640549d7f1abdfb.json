{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node function = fnScope.getRootNode();\n\n  // The parameters object literal setters can not be removed.\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    return;\n  }\n  \n  Preconditions.checkState(function.isFunction());\n  \n  Node argList = function.getSecondChild();\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers) {\n    // Strip unreferenced args off the end of the function declaration.\n    while (argList.getFirstChild() != null) {\n      Node arg = argList.getFirstChild();\n\n      String argName = arg.getString();\n      if (arg.isName()) {\n        // Ignore any functions that have @nocollapse annotations that would\n        // disable parameter removal.\n        JSDocInfo info = NodeUtil.getBestJSDocInfo(arg);\n        if (info != null && info.isNoCollapse()) {\n          return;\n        }\n      }\n\n      Var var = fnScope.getVar(argName);\n      if (referenced.contains(var)) {\n        // Only reference that arg and later ones.\n        referenced.addAll(fnScope.getVarReferences(var));\n        argList.removeChild(argList.getFirstChild());\n      } else {\n        break;\n      }\n    }\n\n    if (argList.getFirstChild() != null) {\n      // Strip unreferenced args from the front of the function declaration.\n      while (argList.getLastChild() != null) {\n        Node arg = argList.getLastChild();\n\n        String argName = arg.getString();\n        if (arg.isName()) {\n          // Ignore any functions that have @nocollapse annotations that would\n          // disable parameter removal.\n          JSDocInfo info = NodeUtil.getBestJSDocInfo(arg);\n          if (info != null && info.isNoCollapse()) {\n            return;\n          }\n        }\n\n        Var var = fnScope.getVar(argName);\n        if (referenced.contains(var)) {\n          // Only reference that arg and earlier ones.\n          referenced.addAll(fnScope.getVarReferences(var));\n          argList.removeChild(argList.getLastChild());\n        } else {\n          break;\n        }\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..05b8672a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,72 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  Node function = fnScope.getRootNode();\n+\n+  // The parameters object literal setters can not be removed.\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    return;\n+  }\n+  \n+  Preconditions.checkState(function.isFunction());\n+  \n+  Node argList = function.getSecondChild();\n+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+  if (!modifyCallers) {\n+    // Strip unreferenced args off the end of the function declaration.\n+    while (argList.getFirstChild() != null) {\n+      Node arg = argList.getFirstChild();\n+\n+      String argName = arg.getString();\n+      if (arg.isName()) {\n+        // Ignore any functions that have @nocollapse annotations that would\n+        // disable parameter removal.\n+        JSDocInfo info = NodeUtil.getBestJSDocInfo(arg);\n+        if (info != null && info.isNoCollapse()) {\n+          return;\n+        }\n+      }\n+\n+      Var var = fnScope.getVar(argName);\n+      if (referenced.contains(var)) {\n+        // Only reference that arg and later ones.\n+        referenced.addAll(fnScope.getVarReferences(var));\n+        argList.removeChild(argList.getFirstChild());\n+      } else {\n+        break;\n+      }\n+    }\n+\n+    if (argList.getFirstChild() != null) {\n+      // Strip unreferenced args from the front of the function declaration.\n+      while (argList.getLastChild() != null) {\n+        Node arg = argList.getLastChild();\n+\n+        String argName = arg.getString();\n+        if (arg.isName()) {\n+          // Ignore any functions that have @nocollapse annotations that would\n+          // disable parameter removal.\n+          JSDocInfo info = NodeUtil.getBestJSDocInfo(arg);\n+          if (info != null && info.isNoCollapse()) {\n+            return;\n+          }\n+        }\n+\n+        Var var = fnScope.getVar(argName);\n+        if (referenced.contains(var)) {\n+          // Only reference that arg and earlier ones.\n+          referenced.addAll(fnScope.getVarReferences(var));\n+          argList.removeChild(argList.getLastChild());\n         } else {\n           break;\n         }\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n   }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}