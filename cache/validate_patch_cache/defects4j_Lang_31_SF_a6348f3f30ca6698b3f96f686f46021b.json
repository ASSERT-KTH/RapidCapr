{
    "patch": "public static boolean containsAny(final CharSequence cs, final char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int strLen = cs.length();\n    final int searchLen = searchChars.length;\n    final int lastIndex = searchLen - 1;\n    for (int i = 0; i < strLen; i++) {\n        final char ch = cs.charAt(i);\n        if (searchChars[lastIndex] < Character.MIN_SURROGATE || searchChars[lastIndex] > Character.MAX_SURROGATE) {\n            // Search for a non-surrogate character\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n        } else {\n            // Search for a surrogate pair\n            if (lastIndex > 0 && Character.isHighSurrogate(searchChars[lastIndex - 1])) {\n                final char high = searchChars[lastIndex - 1];\n                if (i < strLen - 1) {\n                    final char low = cs.charAt(i + 1);\n                    if (Character.isLowSurrogate(low) && Character.toCodePoint(high, low) == Character.toCodePoint(searchChars[lastIndex - 1], searchChars[lastIndex])) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..52fda8f5 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,37 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence cs, final char[] searchChars) {\n+    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int strLen = cs.length();\n+    final int searchLen = searchChars.length;\n+    final int lastIndex = searchLen - 1;\n+    for (int i = 0; i < strLen; i++) {\n+        final char ch = cs.charAt(i);\n+        if (searchChars[lastIndex] < Character.MIN_SURROGATE || searchChars[lastIndex] > Character.MAX_SURROGATE) {\n+            // Search for a non-surrogate character\n+            for (int j = 0; j < searchLen; j++) {\n+                if (searchChars[j] == ch) {\n+                    return true;\n+                }\n+            }\n+        } else {\n+            // Search for a surrogate pair\n+            if (lastIndex > 0 && Character.isHighSurrogate(searchChars[lastIndex - 1])) {\n+                final char high = searchChars[lastIndex - 1];\n+                if (i < strLen - 1) {\n+                    final char low = cs.charAt(i + 1);\n+                    if (Character.isLowSurrogate(low) && Character.toCodePoint(high, low) == Character.toCodePoint(searchChars[lastIndex - 1], searchChars[lastIndex])) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}