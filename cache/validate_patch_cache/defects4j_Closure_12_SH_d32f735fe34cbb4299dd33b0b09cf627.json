{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    NodeList children = cfgNode.getChildNodes();\n    for (int i = 0; i < children.getLength(); i++) {\n        Node childNode = children.item(i);\n        if (childNode.getNodeType() == Node.TRY_STATEMENT) {\n            NodeList tryChildren = childNode.getChildNodes();\n            for (int j = 0; j < tryChildren.getLength(); j++) {\n                Node tryChild = tryChildren.item(j);\n                if (tryChild.getNodeType() == Node.CATCH_STATEMENT) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..206a77d3 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,22 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    NodeList children = cfgNode.getChildNodes();\n+    for (int i = 0; i < children.getLength(); i++) {\n+        Node childNode = children.item(i);\n+        if (childNode.getNodeType() == Node.TRY_STATEMENT) {\n+            NodeList tryChildren = childNode.getChildNodes();\n+            for (int j = 0; j < tryChildren.getLength(); j++) {\n+                Node tryChild = tryChildren.item(j);\n+                if (tryChild.getNodeType() == Node.CATCH_STATEMENT) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}