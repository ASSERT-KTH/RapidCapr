{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    RealMatrix identity = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n    CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n    RealMatrix l = cholesky.getL();\n    RealMatrix lInverse = new LUDecomposition(l).getSolver().getInverse();\n    RealMatrix sqrtM = identity.add(lInverse).multiply(l).scalarMultiply(0.5);\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..24e7abb67 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,12 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    RealMatrix identity = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n+    CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n+    RealMatrix l = cholesky.getL();\n+    RealMatrix lInverse = new LUDecomposition(l).getSolver().getInverse();\n+    RealMatrix sqrtM = identity.add(lInverse).multiply(l).scalarMultiply(0.5);\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}