{
    "patch": "  private static final ImmutableSet<String> UNSAFE_PROTOTYPE_FUNCTIONS = ImmutableSet.of(\n      \"isPrototypeOf\", \"hasOwnProperty\", \"propertyIsEnumerable\");\n  private static final ImmutableSet<String> UNSAFE_FUNCTIONS = ImmutableSet.of(\n      \"eval\", \"setTimeout\", \"setInterval\");\n\n  @Override\n  public void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    if (parent == null || n.getJSType() == null || !parent.isAssign()) {\n      return;\n    }\n\n    String propName = n.getLastChild().getString();\n    if ((UNSAFE_PROTOTYPE_FUNCTIONS.contains(propName)\n            && isPrototypeProperty(n.getFirstChild()))\n        || UNSAFE_FUNCTIONS.contains(propName)) {\n      t.report(n, UNSAFE_METHOD_CALL);\n    }\n  }\n\n  private boolean isPrototypeProperty(Node obj) {\n    return obj.isGetProp() && obj.getLastChild().getString().equals(\"prototype\");\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}