{
    "patch": "public static Locale toLocale(final String str) {\n    if (StringUtils.isEmpty(str)) {\n        return null;\n    }\n\n    String language = \"\";\n    String country = \"\";\n    String variant = \"\";\n\n    int len = str.length();\n    int startIndex = 0;\n\n    // Extract language\n    int index = str.indexOf('_');\n    if (index == -1) {\n        // No underscore, assume language-only\n        language = str;\n        startIndex = len;\n    } else {\n        // Underscore present, extract language substring\n        language = str.substring(startIndex, index);\n        startIndex = index + 1;\n    }\n\n    // Extract country\n    index = str.indexOf('_', startIndex);\n    if (index == -1) {\n        // No second underscore, assume country-only or language-country\n        if (startIndex < len - 1) {\n            country = str.substring(startIndex);\n        }\n    } else {\n        // Second underscore present, extract country substring\n        country = str.substring(startIndex, index);\n        startIndex = index + 1;\n\n        // Extract variant\n        variant = str.substring(startIndex);\n    }\n\n    return new Locale(language, country, variant);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..f3933634 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,49 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+public static Locale toLocale(final String str) {\n+    if (StringUtils.isEmpty(str)) {\n+        return null;\n+    }\n+\n+    String language = \"\";\n+    String country = \"\";\n+    String variant = \"\";\n+\n+    int len = str.length();\n+    int startIndex = 0;\n+\n+    // Extract language\n+    int index = str.indexOf('_');\n+    if (index == -1) {\n+        // No underscore, assume language-only\n+        language = str;\n+        startIndex = len;\n+    } else {\n+        // Underscore present, extract language substring\n+        language = str.substring(startIndex, index);\n+        startIndex = index + 1;\n+    }\n+\n+    // Extract country\n+    index = str.indexOf('_', startIndex);\n+    if (index == -1) {\n+        // No second underscore, assume country-only or language-country\n+        if (startIndex < len - 1) {\n+            country = str.substring(startIndex);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+    } else {\n+        // Second underscore present, extract country substring\n+        country = str.substring(startIndex, index);\n+        startIndex = index + 1;\n+\n+        // Extract variant\n+        variant = str.substring(startIndex);\n     }\n \n+    return new Locale(language, country, variant);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "junit.framework.AssertionFailedError: Must be at least 3 chars if starts with underscore",
    "test_result": "FAIL"
}