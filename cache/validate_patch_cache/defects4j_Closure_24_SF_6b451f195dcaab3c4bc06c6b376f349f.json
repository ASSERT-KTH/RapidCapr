{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    Map<String, Node> scopeVars = scope.getVarNames();\n\n    for (String varName : scopeVars.keySet()) {\n        Var var = scopeVars.get(varName).getVar();\n      \n        if (isAliasDefinition(var)) {\n            Node value = var.getNode().getFirstChild();\n            String qualifiedName = value.getQualifiedName();\n\n            if (qualifiedName == null) {\n                continue;\n            }\n\n            aliases.put(varName, var);\n            transformation.addAlias(varName, qualifiedName);\n        } else if (isLocalVar(var)) {\n            report(t, var.getNode(), GOOG_SCOPE_NON_ALIAS_LOCAL, varName);\n        }\n    }\n}\n\nprivate boolean isAliasDefinition(Var var) {\n    Node node = var.getNode();\n    Node parent = node.getParent();\n    Scope scope = var.getScope();\n\n    // ignore variables not declared with `var` or `const`\n    if (!parent.isVar() && !parent.isLet() && !parent.isConst()) {\n        return false;\n    }\n\n    // ignore nested declarations and assignments\n    Node ancestor = parent.getFirstChild();\n    while (ancestor != node) {\n        if (ancestor.isObjectPattern() || ancestor.isArrayPattern()) {\n            return false;\n        }\n        ancestor = ancestor.getFirstChild();\n    }\n\n    // ignore variables with no declaration value\n    Node value = node.getFirstChild();\n    if (value == null) {\n        return false;\n    }\n\n    // ignore variables without a qualified name value\n    String qualifiedName = value.getQualifiedName();\n    if (qualifiedName == null) {\n        return false;\n    }\n\n    // ignore variables already added as an alias, and their sub-properties\n    if (aliases.containsKey(var.getName())) {\n        return false;\n    } else {\n        for (String alias : aliases.keySet()) {\n            if (qualifiedName.startsWith(alias + \".\") || alias.startsWith(qualifiedName + \".\")) {\n                return false;\n            }\n        }\n    }\n\n    // ignore variables not declared in the goog.scope closure\n    Node grandparent = parent.getParent();\n    if (grandparent == null || !grandparent.isBlock()) {\n        return false;\n    }\n    Node greatGrandparent = grandparent.getParent();\n    if (greatGrandparent == null || !greatGrandparent.isCall()) {\n        return false;\n    }\n    Node greatGreatGrandparent = greatGrandparent.getParent();\n    if (greatGreatGrandparent == null || !greatGreatGrandparent.isFunction()) {\n        return false;\n    }\n    if (!scope.isDeclared(var.getName(), true) && !scope.isDeclared(var.getName())) {\n        return false;\n    }\n\n    return true;\n}\n\nprivate boolean isLocalVar(Var var) {\n    Node node = var.getNode();\n    Node parent = node.getParent();\n\n    if (parent.isFunction()) {\n        Node grandparent = parent.getParent();\n\n        // ignore parameters of the surrounding function\n        if (grandparent.isCall()) {\n            return false;\n        }\n    }\n\n    // ignore variables declared outside the goog.scope closure\n    if (!parent.isBlock()) {\n        return false;\n    }\n    Node grandparent = parent.getParent();\n    if (grandparent == null || !grandparent.isCall()) {\n        return false;\n    }\n    Node greatGrandparent = grandparent.getParent();\n    if (greatGrandparent == null || !greatGrandparent.isFunction()) {\n        return false;\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..01df69c0 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,118 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    Map<String, Node> scopeVars = scope.getVarNames();\n+\n+    for (String varName : scopeVars.keySet()) {\n+        Var var = scopeVars.get(varName).getVar();\n+      \n+        if (isAliasDefinition(var)) {\n+            Node value = var.getNode().getFirstChild();\n+            String qualifiedName = value.getQualifiedName();\n+\n+            if (qualifiedName == null) {\n+                continue;\n+            }\n+\n+            aliases.put(varName, var);\n+            transformation.addAlias(varName, qualifiedName);\n+        } else if (isLocalVar(var)) {\n+            report(t, var.getNode(), GOOG_SCOPE_NON_ALIAS_LOCAL, varName);\n         }\n+    }\n+}\n+\n+private boolean isAliasDefinition(Var var) {\n+    Node node = var.getNode();\n+    Node parent = node.getParent();\n+    Scope scope = var.getScope();\n+\n+    // ignore variables not declared with `var` or `const`\n+    if (!parent.isVar() && !parent.isLet() && !parent.isConst()) {\n+        return false;\n+    }\n+\n+    // ignore nested declarations and assignments\n+    Node ancestor = parent.getFirstChild();\n+    while (ancestor != node) {\n+        if (ancestor.isObjectPattern() || ancestor.isArrayPattern()) {\n+            return false;\n         }\n-      }\n+        ancestor = ancestor.getFirstChild();\n+    }\n+\n+    // ignore variables with no declaration value\n+    Node value = node.getFirstChild();\n+    if (value == null) {\n+        return false;\n+    }\n+\n+    // ignore variables without a qualified name value\n+    String qualifiedName = value.getQualifiedName();\n+    if (qualifiedName == null) {\n+        return false;\n+    }\n+\n+    // ignore variables already added as an alias, and their sub-properties\n+    if (aliases.containsKey(var.getName())) {\n+        return false;\n+    } else {\n+        for (String alias : aliases.keySet()) {\n+            if (qualifiedName.startsWith(alias + \".\") || alias.startsWith(qualifiedName + \".\")) {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    // ignore variables not declared in the goog.scope closure\n+    Node grandparent = parent.getParent();\n+    if (grandparent == null || !grandparent.isBlock()) {\n+        return false;\n+    }\n+    Node greatGrandparent = grandparent.getParent();\n+    if (greatGrandparent == null || !greatGrandparent.isCall()) {\n+        return false;\n+    }\n+    Node greatGreatGrandparent = greatGrandparent.getParent();\n+    if (greatGreatGrandparent == null || !greatGreatGrandparent.isFunction()) {\n+        return false;\n+    }\n+    if (!scope.isDeclared(var.getName(), true) && !scope.isDeclared(var.getName())) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+private boolean isLocalVar(Var var) {\n+    Node node = var.getNode();\n+    Node parent = node.getParent();\n+\n+    if (parent.isFunction()) {\n+        Node grandparent = parent.getParent();\n+\n+        // ignore parameters of the surrounding function\n+        if (grandparent.isCall()) {\n+            return false;\n+        }\n+    }\n+\n+    // ignore variables declared outside the goog.scope closure\n+    if (!parent.isBlock()) {\n+        return false;\n+    }\n+    Node grandparent = parent.getParent();\n+    if (grandparent == null || !grandparent.isCall()) {\n+        return false;\n     }\n+    Node greatGrandparent = grandparent.getParent();\n+    if (greatGrandparent == null || !greatGrandparent.isFunction()) {\n+        return false;\n+    }\n+    return true;\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}