{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    if (n.isCall()) {\n        Node fn = n.getFirstChild();\n        if (fn.isName()) {\n            // this is a named function call\n            return false;\n        } else {\n            // this is an anonymous function call\n            n = fn;\n        }\n    }\n    return NodeUtil.isFunctionExpression(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..4e536b0c 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -113,9 +113,19 @@ class FunctionRewriter implements CompilerPass {\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n \n-  private static boolean isReduceableFunctionExpression(Node n) {\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    if (n.isCall()) {\n+        Node fn = n.getFirstChild();\n+        if (fn.isName()) {\n+            // this is a named function call\n+            return false;\n+        } else {\n+            // this is an anonymous function call\n+            n = fn;\n+        }\n+    }\n     return NodeUtil.isFunctionExpression(n);\n-  }\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}