{
    "patch": "                } else {\n                    simplex = performContraction(original, best, comparator);\n                }\n\n                return;\n\n            } else {\n                final RealPointValuePair contracted = performContraction(original, best, comparator);\n\n            // check convergence\n                return;\n            }\n\n        }\n\n    }\n    \n    private RealPointValuePair[] performContraction(final RealPointValuePair[] original,\n                                                     final RealPointValuePair best,\n                                                     final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] contractedSimplex = buildContractedSimplex(original, best);\n        final RealPointValuePair contracted = evaluateNewSimplex(contractedSimplex, rho, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            return contractedSimplex;\n        } else {\n            return shrink(original, comparator);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..2403c5b78 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,37 +58,14 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                } else {\n+                    simplex = performContraction(original, best, comparator);\n                 }\n \n                 return;\n \n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            } else {\n+                final RealPointValuePair contracted = performContraction(original, best, comparator);\n \n             // check convergence\n                 return;\n@@ -97,6 +74,17 @@ public class MultiDirectional extends DirectSearchOptimizer {\n         }\n \n     }\n+    \n+    private RealPointValuePair[] performContraction(final RealPointValuePair[] original,\n+                                                     final RealPointValuePair best,\n+                                                     final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] contractedSimplex = buildContractedSimplex(original, best);\n+        final RealPointValuePair contracted = evaluateNewSimplex(contractedSimplex, rho, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            return contractedSimplex;\n+        } else {\n+            return shrink(original, comparator);\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}