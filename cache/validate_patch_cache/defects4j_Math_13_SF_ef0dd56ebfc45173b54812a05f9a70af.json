{
    "patch": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.SparseRealMatrix;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix eigenvalueMatrix = dec.getSquareRoot();\n    double[] eigenValues =  dec.getRealEigenvalues();\n\n    // Replace negative eigenvalues with 0.\n    for (int i = 0; i < eigenValues.length; i++) {\n        if (eigenValues[i] < 0) {\n            eigenValues[i] = 0;\n        }\n    }\n\n    SparseRealMatrix diagonalMatrix = new SparseRealMatrix(m.getColumnDimension(), m.getRowDimension());\n    for (int i = 0; i < eigenValues.length; i++) {\n        diagonalMatrix.setEntry(i, i, Math.sqrt(eigenValues[i]));\n    }\n\n    return eigenvalueMatrix.multiply(diagonalMatrix).\n            multiply(eigenvalueMatrix.inverse());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a4bd660e9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,28 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.SparseRealMatrix;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix eigenvalueMatrix = dec.getSquareRoot();\n+    double[] eigenValues =  dec.getRealEigenvalues();\n+\n+    // Replace negative eigenvalues with 0.\n+    for (int i = 0; i < eigenValues.length; i++) {\n+        if (eigenValues[i] < 0) {\n+            eigenValues[i] = 0;\n+        }\n     }\n+\n+    SparseRealMatrix diagonalMatrix = new SparseRealMatrix(m.getColumnDimension(), m.getRowDimension());\n+    for (int i = 0; i < eigenValues.length; i++) {\n+        diagonalMatrix.setEntry(i, i, Math.sqrt(eigenValues[i]));\n+    }\n+\n+    return eigenvalueMatrix.multiply(diagonalMatrix).\n+            multiply(eigenvalueMatrix.inverse());\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}