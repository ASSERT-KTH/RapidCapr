{
    "patch": "    // get the list of explicitly declared parameters\n    Node argList = getFunctionArgList(function);\n\n    // the setters of Object Literal Pattern can not be removed\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        return;\n    }\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      int argcDelta = 0;\n      for (Node param = argList.getFirstChild(); param != null; param = param.getNext()) {\n        String paramName = param.getString();\n        Var var = fnScope.getVar(paramName);\n        // Ignore non-constant parameters (e.g. arguments)\n        if (var != null && var.isParam() && var.isConst() && !referenced.contains(var)) {\n          ++argcDelta;\n        } else {\n          // This parameter is a constant, so we can remove any subsequent\n          // unused constants\n          if (argcDelta != 0) {\n            for (Node nextParam = param.getNext(); nextParam != null; nextParam = nextParam.getNext()) {\n              Var nextVar = fnScope.getVar(nextParam.getString());\n              if (nextVar != null && nextVar.isParam() && nextVar.isConst()) {\n                nextParam.skipTransformTree();\n                ++argcDelta;\n              }\n            }\n          }\n\n          if (argcDelta > 0) {\n            compiler.reportCodeChange();\n          }\n          while (argcDelta-- > 0) {\n            argList.getLastChild().removeFromParent();\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..96c13702 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,45 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // get the list of explicitly declared parameters\n+    Node argList = getFunctionArgList(function);\n+\n+    // the setters of Object Literal Pattern can not be removed\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+        return;\n+    }\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      int argcDelta = 0;\n+      for (Node param = argList.getFirstChild(); param != null; param = param.getNext()) {\n+        String paramName = param.getString();\n+        Var var = fnScope.getVar(paramName);\n+        // Ignore non-constant parameters (e.g. arguments)\n+        if (var != null && var.isParam() && var.isConst() && !referenced.contains(var)) {\n+          ++argcDelta;\n+        } else {\n+          // This parameter is a constant, so we can remove any subsequent\n+          // unused constants\n+          if (argcDelta != 0) {\n+            for (Node nextParam = param.getNext(); nextParam != null; nextParam = nextParam.getNext()) {\n+              Var nextVar = fnScope.getVar(nextParam.getString());\n+              if (nextVar != null && nextVar.isParam() && nextVar.isConst()) {\n+                nextParam.skipTransformTree();\n+                ++argcDelta;\n+              }\n+            }\n+          }\n+\n+          if (argcDelta > 0) {\n+            compiler.reportCodeChange();\n+          }\n+          while (argcDelta-- > 0) {\n+            argList.getLastChild().removeFromParent();\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}