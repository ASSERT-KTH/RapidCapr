{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    Chronology chrono = partial.getChronology();\n    DateTimeField field = partial.getField(fieldIndex);\n\n    long instant = 0L;\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        long value = values[i];\n        DateTimeField f = partial.getField(i);\n        if (f.equals(field)) {\n            value = field.add(value, valueToAdd);\n            if (chrono.dayOfMonth().isSupported()) {\n                int maxDay = chrono.dayOfMonth().getMaximumValue(instant);\n                value = Math.min(value, maxDay);\n            }\n        }\n        instant = f.set(instant, value);\n    }\n\n    return chrono.get(partial, instant);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..88959446 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,31 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    Chronology chrono = partial.getChronology();\n+    DateTimeField field = partial.getField(fieldIndex);\n+\n+    long instant = 0L;\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        long value = values[i];\n+        DateTimeField f = partial.getField(i);\n+        if (f.equals(field)) {\n+            value = field.add(value, valueToAdd);\n+            if (chrono.dayOfMonth().isSupported()) {\n+                int maxDay = chrono.dayOfMonth().getMaximumValue(instant);\n+                value = Math.min(value, maxDay);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        instant = f.set(instant, value);\n     }\n \n+    return chrono.get(partial, instant);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}