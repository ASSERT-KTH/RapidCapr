{
    "patch": "    // DiagnosticGroups override the plain checkGlobalThisLevel option.\n    if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n      options.checkGlobalThisLevel = CheckLevel.ERROR;\n    } else if (options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n      options.checkGlobalThisLevel = CheckLevel.OFF;\n    }\n\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..9451b520 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,16 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+    // DiagnosticGroups override the plain checkGlobalThisLevel option.\n+    if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n+      options.checkGlobalThisLevel = CheckLevel.ERROR;\n+    } else if (options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n+      options.checkGlobalThisLevel = CheckLevel.OFF;\n+    }\n+\n+    options.setWarningLevel(\n+        DiagnosticGroups.GLOBAL_THIS,\n+        options.checkGlobalThisLevel);\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}