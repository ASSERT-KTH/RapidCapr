{
    "patch": "      if (NodeUtil.isGet(parent)) {\n        Node assignedValue = findAssignedValue(parent);\n        if (assignedValue != null && assignedValue.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n\n      // Don't traverse functions that are used in an expression statement and have this for reference.\n      if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n        if (NodeUtil.referencesThis(n)) {\n          return false;\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          // Traverse if assigning to something other than \"prototype\".\n          Node targetNode = n.getLastChild();\n          if (!(targetNode.getType() == Token.STRING && targetNode.getString().equals(\"prototype\"))) {\n            return true;\n          }\n          // Don't traverse assignments to prototype that are done for nesting or scoping purposes.\n          if (parent.getParent() != null) {\n            Node targetParent = parent.getParent().getLastChild();\n            if (targetParent != null && (targetParent.getType() == Token.OBJECTLIT || NodeUtil.isFunctionExpression(targetParent))) {\n              return true;\n            }\n          }\n          // Don't traverse assignments to non-function types, such as constructors or interfaces.\n          JSDocInfo jsDoc = getJSDocInfo(rhs);\n          if (jsDoc != null &&\n              (jsDoc.isConstructor() || jsDoc.isInterface())) {\n            return false;\n          }\n          // Don't traverse assignments to prototype where the assigned value is a function with references to \"this\".\n          if (rhs.getType() == Token.FUNCTION && NodeUtil.referencesThis(rhs.getFirstChild())) {\n            return false;\n          }\n          // Traverse otherwise.\n          return true;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private Node findAssignedValue(Node getPropNode) {\n    Node result = null;\n    if (NodeUtil.isGet(getPropNode)) {\n      Node lhs = getPropNode.getFirstChild();\n      Node rhs = lhs.getNext();\n      if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n        // Assignments involving prototype property access are also prototype assignments.\n        return rhs;\n      }\n      if (rhs.getType() == Token.FUNCTION) {\n        return rhs;\n      }\n    }\n    return result;\n  }\n\n  private JSDocInfo getJSDocInfo(Node n) {\n    if (n != null && n.getJSDocInfo() != null) {\n      return n.getJSDocInfo();\n    }\n    return null;\n  }\n\n  private JSDocInfo getFunctionJsDocInfo(Node n) {\n    if (NodeUtil.isFunctionDeclaration(n)) {\n      if (n.getJSDocInfo() != null) {\n        return n.getJSDocInfo();\n      }\n    } else if (NodeUtil.isFunctionExpression(n)) {\n      if (n.getParent() != null && NodeUtil.isName(n.getParent())) {\n        if (n.getParent().getJSDocInfo() != null) {\n          return n.getParent().getJSDocInfo();\n        }\n      } else if (n.getJSDocInfo() != null) {\n        return n.getJSDocInfo();\n      }\n    }\n    return null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..e75ece90 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,105 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node assignedValue = findAssignedValue(parent);\n+        if (assignedValue != null && assignedValue.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+      }\n+\n+      // Don't traverse functions that are used in an expression statement and have this for reference.\n+      if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+        if (NodeUtil.referencesThis(n)) {\n+          return false;\n+        }\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype\n+        // property or subproperty.\n+        if (NodeUtil.isGet(lhs)) {\n+          // Traverse if assigning to something other than \"prototype\".\n+          Node targetNode = n.getLastChild();\n+          if (!(targetNode.getType() == Token.STRING && targetNode.getString().equals(\"prototype\"))) {\n+            return true;\n+          }\n+          // Don't traverse assignments to prototype that are done for nesting or scoping purposes.\n+          if (parent.getParent() != null) {\n+            Node targetParent = parent.getParent().getLastChild();\n+            if (targetParent != null && (targetParent.getType() == Token.OBJECTLIT || NodeUtil.isFunctionExpression(targetParent))) {\n+              return true;\n+            }\n+          }\n+          // Don't traverse assignments to non-function types, such as constructors or interfaces.\n+          JSDocInfo jsDoc = getJSDocInfo(rhs);\n+          if (jsDoc != null &&\n+              (jsDoc.isConstructor() || jsDoc.isInterface())) {\n+            return false;\n+          }\n+          // Don't traverse assignments to prototype where the assigned value is a function with references to \"this\".\n+          if (rhs.getType() == Token.FUNCTION && NodeUtil.referencesThis(rhs.getFirstChild())) {\n+            return false;\n+          }\n+          // Traverse otherwise.\n+          return true;\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n+\n+  private Node findAssignedValue(Node getPropNode) {\n+    Node result = null;\n+    if (NodeUtil.isGet(getPropNode)) {\n+      Node lhs = getPropNode.getFirstChild();\n+      Node rhs = lhs.getNext();\n+      if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n+        // Assignments involving prototype property access are also prototype assignments.\n+        return rhs;\n+      }\n+      if (rhs.getType() == Token.FUNCTION) {\n+        return rhs;\n+      }\n+    }\n+    return result;\n+  }\n+\n+  private JSDocInfo getJSDocInfo(Node n) {\n+    if (n != null && n.getJSDocInfo() != null) {\n+      return n.getJSDocInfo();\n+    }\n+    return null;\n+  }\n+\n+  private JSDocInfo getFunctionJsDocInfo(Node n) {\n+    if (NodeUtil.isFunctionDeclaration(n)) {\n+      if (n.getJSDocInfo() != null) {\n+        return n.getJSDocInfo();\n+      }\n+    } else if (NodeUtil.isFunctionExpression(n)) {\n+      if (n.getParent() != null && NodeUtil.isName(n.getParent())) {\n+        if (n.getParent().getJSDocInfo() != null) {\n+          return n.getParent().getJSDocInfo();\n+        }\n+      } else if (n.getJSDocInfo() != null) {\n+        return n.getJSDocInfo();\n+      }\n+    }\n+    return null;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}