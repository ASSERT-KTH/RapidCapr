{
    "patch": "        //  a() or a.b() (the result becomes the return value of the function and could be\n        //  a local value).\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)\n            || isFunctionCallOrNewWithCallable(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node \" + value +",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex dd78f900..14757231 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2462,7 +2462,17 @@ public final class NodeUtil {\n         // TODO(nicksantos): This needs to be changed so that it\n         // returns true iff we're sure the value was never aliased from inside\n         // the constructor (similar to callHasLocalResult)\n-        return true;\n+        //  a() or a.b() (the result becomes the return value of the function and could be\n+        //  a local value).\n+        if (isAssignmentOp(value)\n+            || isSimpleOperator(value)\n+            || isImmutableValue(value)\n+            || isFunctionCallOrNewWithCallable(value)) {\n+          return true;\n+        }\n+\n+        throw new IllegalStateException(\n+            \"Unexpected expression node \" + value +\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}