{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    if (typeVariable instanceof WildcardType) {\n        WildcardType wildcardType = (WildcardType) typeVariable;\n        Type[] lowerBounds = wildcardType.getLowerBounds();\n        Type[] upperBounds = wildcardType.getUpperBounds();\n        if (lowerBounds.length > 0) {\n            registerTypeVariablesOn(getActualTypeArgumentFor(lowerBounds[0]));\n        } else if (upperBounds.length > 0) {\n            registerTypeVariablesOn(getActualTypeArgumentFor(upperBounds[0]));\n        }\n    } else {\n        registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..638f1d6cb 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,28 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    if (typeVariable instanceof WildcardType) {\n+        WildcardType wildcardType = (WildcardType) typeVariable;\n+        Type[] lowerBounds = wildcardType.getLowerBounds();\n+        Type[] upperBounds = wildcardType.getUpperBounds();\n+        if (lowerBounds.length > 0) {\n+            registerTypeVariablesOn(getActualTypeArgumentFor(lowerBounds[0]));\n+        } else if (upperBounds.length > 0) {\n+            registerTypeVariablesOn(getActualTypeArgumentFor(upperBounds[0]));\n+        }\n+    } else {\n+        registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}