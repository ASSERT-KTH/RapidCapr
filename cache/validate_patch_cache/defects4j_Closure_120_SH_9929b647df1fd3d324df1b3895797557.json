{
    "patch": "      if (block.isFunction || block.isScript) {\n        // Functions are no longer inlined into their callers, after this pass runs, so\n        // we should look inside them.\n        ref = null;\n        break;\n      } else if (block.isLoop) {\n        return false;\n      } else {\n        // Continue searching up the parent chain.\n        ref = getOneAndOnlyAssignment(ref.from.getParents().iterator().next());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e3b909dc 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction || block.isScript) {\n+        // Functions are no longer inlined into their callers, after this pass runs, so\n+        // we should look inside them.\n+        ref = null;\n+        break;\n+      } else if (block.isLoop) {\n+        return false;\n+      } else {\n+        // Continue searching up the parent chain.\n+        ref = getOneAndOnlyAssignment(ref.from.getParents().iterator().next());\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}