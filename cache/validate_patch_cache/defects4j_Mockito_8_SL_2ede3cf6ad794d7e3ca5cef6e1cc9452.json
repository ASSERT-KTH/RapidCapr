{
    "patch": "return actualTypeArgument instanceof Class ? ((Class) actualTypeArgument).isAssignableFrom(contextualType)\n                    : actualTypeArgument.equals(contextualType) ? true\n                            : (actualTypeArgument instanceof TypeVariable\n                                    && contextualActualTypeParameters.containsKey(actualTypeArgument))\n                                            ? areTheContextualTypesMatching((Type) contextualActualTypeParameters.get(actualTypeArgument), contextualType, contextualActualTypeParameters)\n                                            : false;",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..fdd8f1a8c 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,12 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+return actualTypeArgument instanceof Class ? ((Class) actualTypeArgument).isAssignableFrom(contextualType)\n+                    : actualTypeArgument.equals(contextualType) ? true\n+                            : (actualTypeArgument instanceof TypeVariable\n+                                    && contextualActualTypeParameters.containsKey(actualTypeArgument))\n+                                            ? areTheContextualTypesMatching((Type) contextualActualTypeParameters.get(actualTypeArgument), contextualType, contextualActualTypeParameters)\n+                                            : false;\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: incompatible types: unexpected return value",
    "test_result": "ERROR"
}