{
    "patch": "                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expanded.getPoint() != best.getPoint() ? expanded.getPoint() : reflectedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n                continue;\n            }\n\n            // Compute the contracted simplex.\n            final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                simplex = contracted.getPoint() != best.getPoint() ? contracted.getPoint() : evaluateNewSimplex(original, rho, comparator);\n                continue;\n            }\n\n            // Compute the shrunken simplex.\n            final RealPointValuePair shrunken[] = shrink(original, comparator);\n            if (comparator.compare(shrunken[0], original[0]) == 0) {\n                // the simplex was shrunk\n                incrementShrinking();\n            }\n\n            simplex = shrunken;\n\n            // check convergence\n            if (isConverged(simplex[0].getValue(), previous[0].getValue())) {\n                return;\n            }\n\n            // save the best point as previous.\n            System.arraycopy(simplex, 0, previous, 0, simplex.length);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..3440e8de1 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,39 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expanded.getPoint() != best.getPoint() ? expanded.getPoint() : reflectedSimplex;\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n+                continue;\n+            }\n \n-                return;\n+            // Compute the contracted simplex.\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n+            if (comparator.compare(contracted, best) < 0) {\n+                simplex = contracted.getPoint() != best.getPoint() ? contracted.getPoint() : evaluateNewSimplex(original, rho, comparator);\n+                continue;\n+            }\n \n+            // Compute the shrunken simplex.\n+            final RealPointValuePair shrunken[] = shrink(original, comparator);\n+            if (comparator.compare(shrunken[0], original[0]) == 0) {\n+                // the simplex was shrunk\n+                incrementShrinking();\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            simplex = shrunken;\n \n             // check convergence\n+            if (isConverged(simplex[0].getValue(), previous[0].getValue())) {\n                 return;\n             }\n \n-        }\n-\n-    }\n+            // save the best point as previous.\n+            System.arraycopy(simplex, 0, previous, 0, simplex.length);\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}