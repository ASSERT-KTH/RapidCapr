{
    "patch": "    attachLiteralTypes(n);\n    Node grandparent = parent.getParent();\n    if (parent.getType() == Token.CATCH) {\n      defineCatchParam(n, parent);\n    } else if (n.getType() == Token.FUNCTION && parent.getType() != Token.NAME) {\n      defineDeclaredFunction(n, parent);\n    } else if (n.getType() == Token.LP && grandparent.getType() == Token.FUNCTION) {\n      handleFunctionInputs(grandparent);\n    } else if (n.getType() == Token.NAME && \n               (parent.getType() == Token.VAR || parent.getType() == Token.ASSIGN)) {\n      defineVar(n, parent);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..0f61736f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,17 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    attachLiteralTypes(n);\n+    Node grandparent = parent.getParent();\n+    if (parent.getType() == Token.CATCH) {\n+      defineCatchParam(n, parent);\n+    } else if (n.getType() == Token.FUNCTION && parent.getType() != Token.NAME) {\n+      defineDeclaredFunction(n, parent);\n+    } else if (n.getType() == Token.LP && grandparent.getType() == Token.FUNCTION) {\n+      handleFunctionInputs(grandparent);\n+    } else if (n.getType() == Token.NAME && \n+               (parent.getType() == Token.VAR || parent.getType() == Token.ASSIGN)) {\n+      defineVar(n, parent);\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}