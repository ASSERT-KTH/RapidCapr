{
    "patch": "    Node body = function.getLastChild();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    List<Node> argsToRemove = new ArrayList<>();\n    if (!modifyCallers) {\n      for (Node arg : argList.children()) {\n        if (!arg.isName()) {\n          continue;\n        }\n\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          argsToRemove.add(arg);\n        } else if (!argsToRemove.isEmpty()) {\n          // Removing arguments will cause renumbering, so we only want\n          // to ensure that all the trailing ones are unused.\n          reportAndRemoveUnreferencedArgs(argsToRemove);\n          argsToRemove.clear();\n        }\n      }\n      if (!argsToRemove.isEmpty()) {\n        reportAndRemoveUnreferencedArgs(argsToRemove);\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n    // Possible the function body has changed and the dead parameter references\n    // have already been compiled out.  So skip writing out the new function\n    // signature if there are no changes to make.\n    if (!argsToRemove.isEmpty()) {\n      maybeWriteFunctionSignature(function, argList, body);\n    }\n  }\n\n  /**\n   * Remove all the leftover arguments from a function signature and record\n   * the removal in the change tracker.\n   */\n  private void reportAndRemoveUnreferencedArgs(List<Node> argsToRemove) {\n    for (Node arg : argsToRemove) {\n      arg.remove();\n      compiler.reportChangeToEnclosingScope(arg);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..647e020f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,56 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node body = function.getLastChild();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    List<Node> argsToRemove = new ArrayList<>();\n+    if (!modifyCallers) {\n+      for (Node arg : argList.children()) {\n+        if (!arg.isName()) {\n+          continue;\n+        }\n+\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          argsToRemove.add(arg);\n+        } else if (!argsToRemove.isEmpty()) {\n+          // Removing arguments will cause renumbering, so we only want\n+          // to ensure that all the trailing ones are unused.\n+          reportAndRemoveUnreferencedArgs(argsToRemove);\n+          argsToRemove.clear();\n+        }\n+      }\n+      if (!argsToRemove.isEmpty()) {\n+        reportAndRemoveUnreferencedArgs(argsToRemove);\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+    // Possible the function body has changed and the dead parameter references\n+    // have already been compiled out.  So skip writing out the new function\n+    // signature if there are no changes to make.\n+    if (!argsToRemove.isEmpty()) {\n+      maybeWriteFunctionSignature(function, argList, body);\n+    }\n+  }\n+\n+  /**\n+   * Remove all the leftover arguments from a function signature and record\n+   * the removal in the change tracker.\n+   */\n+  private void reportAndRemoveUnreferencedArgs(List<Node> argsToRemove) {\n+    for (Node arg : argsToRemove) {\n+      arg.remove();\n+      compiler.reportChangeToEnclosingScope(arg);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}