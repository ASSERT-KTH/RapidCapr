{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int initialOffset = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    long instantAdjusted = instantLocal - initialOffset;\n    final int offsetAfterAdjustment = getOffset(instantAdjusted);\n    if (initialOffset == offsetAfterAdjustment) {\n        return initialOffset;\n    }\n    // find closest transition to instantAdjusted\n    long nextTransitionAfterAdjustment = nextTransition(instantAdjusted);\n    long nextTransitionBeforeAdjustment = nextTransition(instantLocal - initialOffset);\n    if (nextTransitionAfterAdjustment == nextTransitionBeforeAdjustment) {\n        // there is only one transition between instantLocal and instantAdjusted; check it\n        int offsetAtTransition = getOffset(nextTransitionAfterAdjustment);\n        if (offsetAtTransition != offsetAfterAdjustment) {\n            // crossed a transition going forward\n            return offsetAfterAdjustment;\n        } else {\n            // not crossing a transition going forward, check going backwards\n            nextTransitionBeforeAdjustment = previousTransition(instantLocal - initialOffset);\n            if (nextTransitionBeforeAdjustment < instantAdjusted) {\n                return offsetAfterAdjustment;\n            } else {\n                int offsetBeforeTransition = getOffset(nextTransitionBeforeAdjustment);\n                if (offsetBeforeTransition == offsetAfterAdjustment) {\n                    // didn't cross any transitions going backwards\n                    return offsetAfterAdjustment;\n                } else {\n                    return initialOffset;\n                }\n            }\n        }\n    } else {\n        // there are multiple transitions between instantLocal and instantAdjusted\n        if (nextTransitionAfterAdjustment > instantLocal) {\n            // crossed a transition going forward\n            return offsetAfterAdjustment;\n        } else {\n            // check if previous transition to nextTransitionAfterAdjustment is the same as nextTransitionBeforeAdjustment\n            long previousTransitionAfterAdjustment = previousTransition(nextTransitionAfterAdjustment);\n            if (previousTransitionAfterAdjustment == nextTransitionBeforeAdjustment) {\n                // bumped into a transition but didn't cross it, check going backwards\n                long previousTransitionBeforeAdjustment = previousTransition(instantLocal - initialOffset);\n                if (previousTransitionBeforeAdjustment >= instantAdjusted) {\n                    // crossed a transition going backwards\n                    return initialOffset;\n                } else {\n                    int offsetBeforeTransition = getOffset(previousTransitionBeforeAdjustment);\n                    if (offsetBeforeTransition == offsetAfterAdjustment) {\n                        // didn't cross any transitions going backwards\n                        return offsetAfterAdjustment;\n                    } else {\n                        return initialOffset;\n                    }\n                }\n            } else {\n                return initialOffset;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..7574c387 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,68 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int initialOffset = getOffset(instantLocal);\n+    // adjust instantLocal using the estimate and recalc the offset\n+    long instantAdjusted = instantLocal - initialOffset;\n+    final int offsetAfterAdjustment = getOffset(instantAdjusted);\n+    if (initialOffset == offsetAfterAdjustment) {\n+        return initialOffset;\n+    }\n+    // find closest transition to instantAdjusted\n+    long nextTransitionAfterAdjustment = nextTransition(instantAdjusted);\n+    long nextTransitionBeforeAdjustment = nextTransition(instantLocal - initialOffset);\n+    if (nextTransitionAfterAdjustment == nextTransitionBeforeAdjustment) {\n+        // there is only one transition between instantLocal and instantAdjusted; check it\n+        int offsetAtTransition = getOffset(nextTransitionAfterAdjustment);\n+        if (offsetAtTransition != offsetAfterAdjustment) {\n+            // crossed a transition going forward\n+            return offsetAfterAdjustment;\n+        } else {\n+            // not crossing a transition going forward, check going backwards\n+            nextTransitionBeforeAdjustment = previousTransition(instantLocal - initialOffset);\n+            if (nextTransitionBeforeAdjustment < instantAdjusted) {\n+                return offsetAfterAdjustment;\n+            } else {\n+                int offsetBeforeTransition = getOffset(nextTransitionBeforeAdjustment);\n+                if (offsetBeforeTransition == offsetAfterAdjustment) {\n+                    // didn't cross any transitions going backwards\n+                    return offsetAfterAdjustment;\n+                } else {\n+                    return initialOffset;\n                 }\n             }\n         }\n-        return offsetAdjusted;\n+    } else {\n+        // there are multiple transitions between instantLocal and instantAdjusted\n+        if (nextTransitionAfterAdjustment > instantLocal) {\n+            // crossed a transition going forward\n+            return offsetAfterAdjustment;\n+        } else {\n+            // check if previous transition to nextTransitionAfterAdjustment is the same as nextTransitionBeforeAdjustment\n+            long previousTransitionAfterAdjustment = previousTransition(nextTransitionAfterAdjustment);\n+            if (previousTransitionAfterAdjustment == nextTransitionBeforeAdjustment) {\n+                // bumped into a transition but didn't cross it, check going backwards\n+                long previousTransitionBeforeAdjustment = previousTransition(instantLocal - initialOffset);\n+                if (previousTransitionBeforeAdjustment >= instantAdjusted) {\n+                    // crossed a transition going backwards\n+                    return initialOffset;\n+                } else {\n+                    int offsetBeforeTransition = getOffset(previousTransitionBeforeAdjustment);\n+                    if (offsetBeforeTransition == offsetAfterAdjustment) {\n+                        // didn't cross any transitions going backwards\n+                        return offsetAfterAdjustment;\n+                    } else {\n+                        return initialOffset;\n+                    }\n+                }\n+            } else {\n+                return initialOffset;\n+            }\n+        }\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2007-0[4-01T01:00:00.000-04]:00> but was:<2007-0[3-31T23:00:00.000-05]:00>",
    "test_result": "FAIL"
}