{
    "patch": "// Strip unreferenced args off the end of the function declaration.\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    Node lastArg = argList.getLastChild();\n    while (lastArg != null) {\n      if (lastArg.isDefaultValue()) {\n        Preconditions.checkState(lastArg.getFirstChild().isName());\n        lastArg = lastArg.getPrevious();\n      } else {\n        break;\n      }\n    }\n    while (lastArg != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n        lastArg = lastArg.getPrevious();\n      } else if (NodeUtil.getRValueOfLValue(lastArg) != null) {\n        break;\n      } else {\n        lastArg = lastArg.getPrevious();\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..73e3968c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,31 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Strip unreferenced args off the end of the function declaration.\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    Node lastArg = argList.getLastChild();\n+    while (lastArg != null) {\n+      if (lastArg.isDefaultValue()) {\n+        Preconditions.checkState(lastArg.getFirstChild().isName());\n+        lastArg = lastArg.getPrevious();\n+      } else {\n+        break;\n+      }\n+    }\n+    while (lastArg != null) {\n+      Var var = fnScope.getVar(lastArg.getString());\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+        lastArg = lastArg.getPrevious();\n+      } else if (NodeUtil.getRValueOfLValue(lastArg) != null) {\n+        break;\n+      } else {\n+        lastArg = lastArg.getPrevious();\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}