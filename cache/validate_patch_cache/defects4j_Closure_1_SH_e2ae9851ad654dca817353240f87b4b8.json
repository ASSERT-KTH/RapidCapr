{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    \n    // Strip unreferenced args off the end of the function declaration.\n    // Also, remove any default value assignments, since these are\n    // expressions that may have side-effects.\n    Node child = argList.getFirstChild();\n    while (child != null) {\n      Node next = child.getNext();\n      if (child.isDefaultValue()) {\n        argList.removeChild(child);\n        compiler.reportCodeChange();\n      } else {\n        Var var = fnScope.getVar(child.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(child);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n      child = next;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5aa90431 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,36 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    \n+    // Strip unreferenced args off the end of the function declaration.\n+    // Also, remove any default value assignments, since these are\n+    // expressions that may have side-effects.\n+    Node child = argList.getFirstChild();\n+    while (child != null) {\n+      Node next = child.getNext();\n+      if (child.isDefaultValue()) {\n+        argList.removeChild(child);\n+        compiler.reportCodeChange();\n+      } else {\n+        Var var = fnScope.getVar(child.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(child);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+      child = next;\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}