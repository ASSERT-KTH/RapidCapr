{
    "patch": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    // Handle null and empty strings\n    if (str == null || str.isEmpty()) {\n        return str;\n    }\n\n    // If lower index is greater than or equal to string length, return full string\n    if (lower >= str.length()) {\n        return str;\n    }\n\n    // If upper index is -1 or greater than string length, set upper index to string length\n    if (upper == -1 || upper > str.length()) {\n        upper = str.length();\n    }\n\n    // If upper index is less than lower index, set upper index to lower index\n    if (upper < lower) {\n        upper = lower;\n    }\n\n    // Find the index of the first space after the lower index\n    int index = StringUtils.ordinalIndexOf(str, \" \", upper);\n\n    // If no space is found after the lower index, return the abbreviated string or the full string with the appended string\n    if (index == -1) {\n        return str.substring(lower, upper) + StringUtils.defaultString(appendToEnd);\n    } else {\n        // If the first space is beyond the upper index, return the abbreviated string with the appended string\n        if (index > upper) {\n            return str.substring(lower, upper) + StringUtils.defaultString(appendToEnd);\n        } else {\n            // If the first space is within the limits, return the abbreviated string with the appended string\n            return str.substring(lower, index) + StringUtils.defaultString(appendToEnd);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..ec080390 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -602,43 +602,42 @@ public class WordUtils {\n      * @return the abbreviated String.\n      * @since 2.4\n      */\n-    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n-        // initial parameter checks\n-        if (str == null) {\n-            return null;\n-        }\n-        if (str.length() == 0) {\n-            return StringUtils.EMPTY;\n-        }\n+public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n+    // Handle null and empty strings\n+    if (str == null || str.isEmpty()) {\n+        return str;\n+    }\n \n-        // if the lower value is greater than the length of the string,\n-        // set to the length of the string\n-        // if the upper value is -1 (i.e. no limit) or is greater\n-        // than the length of the string, set to the length of the string\n-        if (upper == -1 || upper > str.length()) {\n-            upper = str.length();\n-        }\n-        // if upper is less than lower, raise it to lower\n-        if (upper < lower) {\n-            upper = lower;\n-        }\n+    // If lower index is greater than or equal to string length, return full string\n+    if (lower >= str.length()) {\n+        return str;\n+    }\n \n-        StringBuffer result = new StringBuffer();\n-        int index = StringUtils.indexOf(str, \" \", lower);\n-        if (index == -1) {\n-            result.append(str.substring(0, upper));\n-            // only if abbreviation has occured do we append the appendToEnd value\n-            if (upper != str.length()) {\n-                result.append(StringUtils.defaultString(appendToEnd));\n-            }\n-        } else if (index > upper) {\n-            result.append(str.substring(0, upper));\n-            result.append(StringUtils.defaultString(appendToEnd));\n+    // If upper index is -1 or greater than string length, set upper index to string length\n+    if (upper == -1 || upper > str.length()) {\n+        upper = str.length();\n+    }\n+\n+    // If upper index is less than lower index, set upper index to lower index\n+    if (upper < lower) {\n+        upper = lower;\n+    }\n+\n+    // Find the index of the first space after the lower index\n+    int index = StringUtils.ordinalIndexOf(str, \" \", upper);\n+\n+    // If no space is found after the lower index, return the abbreviated string or the full string with the appended string\n+    if (index == -1) {\n+        return str.substring(lower, upper) + StringUtils.defaultString(appendToEnd);\n+    } else {\n+        // If the first space is beyond the upper index, return the abbreviated string with the appended string\n+        if (index > upper) {\n+            return str.substring(lower, upper) + StringUtils.defaultString(appendToEnd);\n         } else {\n-            result.append(str.substring(0, index));\n-            result.append(StringUtils.defaultString(appendToEnd));\n+            // If the first space is within the limits, return the abbreviated string with the appended string\n+            return str.substring(lower, index) + StringUtils.defaultString(appendToEnd);\n         }\n-        return result.toString();\n     }\n+}\n \n }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[01234]> but was:<[]>",
    "test_result": "FAIL"
}