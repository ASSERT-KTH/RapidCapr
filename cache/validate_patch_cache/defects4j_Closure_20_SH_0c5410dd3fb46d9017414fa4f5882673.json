{
    "patch": "    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\")) {\n      // Fold String(a) to '' + (a) on immutable literals,\n      // which allows further optimizations\n      //\n      // We can't do this in the general case, because String(a) has\n      // slightly different semantics than '' + (a). See\n      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n      Node value = callTarget.getNext();\n      if (value != null) {\n        Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            value.detachFromParent());\n        n.getParent().replaceChild(n, addition);\n        reportCodeChange();\n        return addition;\n      }\n    }\n    return n;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..1415fbfb 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -208,6 +208,17 @@ class PeepholeSubstituteAlternateSyntax\n   private Node tryFoldSimpleFunctionCall(Node n) {\n     Preconditions.checkState(n.isCall());\n     Node callTarget = n.getFirstChild();\n+    if (callTarget != null && callTarget.isName() &&\n+          callTarget.getString().equals(\"String\")) {\n+      // Fold String(a) to '' + (a) on immutable literals,\n+      // which allows further optimizations\n+      //\n+      // We can't do this in the general case, because String(a) has\n+      // slightly different semantics than '' + (a). See\n+      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n+      Node value = callTarget.getNext();\n+    Preconditions.checkState(n.isCall());\n+    Node callTarget = n.getFirstChild();\n     if (callTarget != null && callTarget.isName() &&\n           callTarget.getString().equals(\"String\")) {\n       // Fold String(a) to '' + (a) on immutable literals,\n@@ -226,6 +237,15 @@ class PeepholeSubstituteAlternateSyntax\n         return addition;\n       }\n     }\n+    return n;\n+        Node addition = IR.add(\n+            IR.string(\"\").srcref(callTarget),\n+            value.detachFromParent());\n+        n.getParent().replaceChild(n, addition);\n+        reportCodeChange();\n+        return addition;\n+      }\n+    }\n     return n;\n   }\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}