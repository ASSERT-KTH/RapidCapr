{
    "patch": "    if (token.getType() == JsDocToken.Type.NAME_TYPE) {\n      return parseNamedType(token);\n    } else if (token.getType() == JsDocToken.Type.OPTIONAL) {\n      TokenStream ts = new TokenStream(Arrays.asList(token));\n      ts.read();\n      return finishNode(new OptionalTypeNode(parseContextTypeExpression(ts.read())));\n    } else if (token.getType() == JsDocToken.Type.UNION_TYPE) {\n      TokenStream ts = new TokenStream(Arrays.asList(token));\n      ts.read();\n      Node first = parseContextTypeExpression(ts.read());\n      Node last = parseContextTypeExpression(ts.read());\n      return finishNode(new UnionTypeNode(Lists.newArrayList(first, last)));\n    } else {\n      warning(token, CheckLevel.WARNING, BAD_TYPE_ANNOTATION);\n      return finishNode(new UnknownTypeNode());\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..489b7ef8 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,22 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+    if (token.getType() == JsDocToken.Type.NAME_TYPE) {\n+      return parseNamedType(token);\n+    } else if (token.getType() == JsDocToken.Type.OPTIONAL) {\n+      TokenStream ts = new TokenStream(Arrays.asList(token));\n+      ts.read();\n+      return finishNode(new OptionalTypeNode(parseContextTypeExpression(ts.read())));\n+    } else if (token.getType() == JsDocToken.Type.UNION_TYPE) {\n+      TokenStream ts = new TokenStream(Arrays.asList(token));\n+      ts.read();\n+      Node first = parseContextTypeExpression(ts.read());\n+      Node last = parseContextTypeExpression(ts.read());\n+      return finishNode(new UnionTypeNode(Lists.newArrayList(first, last)));\n+    } else {\n+      warning(token, CheckLevel.WARNING, BAD_TYPE_ANNOTATION);\n+      return finishNode(new UnknownTypeNode());\n+    }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}