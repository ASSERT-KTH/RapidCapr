{
    "patch": "Object[] rawArgs = invocation.getRawArguments();\n\n// Check if invocation has varargs\nif (rawArgs != null && rawArgs.length > 0 && rawArgs[rawArgs.length - 1].getClass().isArray()) {\n    Object[] varargs = (Object[]) rawArgs[rawArgs.length - 1];\n    rawArgs = Arrays.copyOf(rawArgs, rawArgs.length - 1);\n    rawArgs = ArrayUtils.addAll(rawArgs, varargs);\n}\n\n// Capture the arguments\nfor (int i = 0; i < rawArgs.length && i < matchers.size(); i++) {\n    Object arg = rawArgs[i];\n    Matcher m = matchers.get(i);\n    if (m instanceof CapturesArguments) {\n        ((CapturesArguments) m).captureFrom(arg);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..03d40dc5b 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,23 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+Object[] rawArgs = invocation.getRawArguments();\n+\n+// Check if invocation has varargs\n+if (rawArgs != null && rawArgs.length > 0 && rawArgs[rawArgs.length - 1].getClass().isArray()) {\n+    Object[] varargs = (Object[]) rawArgs[rawArgs.length - 1];\n+    rawArgs = Arrays.copyOf(rawArgs, rawArgs.length - 1);\n+    rawArgs = ArrayUtils.addAll(rawArgs, varargs);\n+}\n+\n+// Capture the arguments\n+for (int i = 0; i < rawArgs.length && i < matchers.size(); i++) {\n+    Object arg = rawArgs[i];\n+    Matcher m = matchers.get(i);\n+    if (m instanceof CapturesArguments) {\n+        ((CapturesArguments) m).captureFrom(arg);\n+    }\n+}\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}