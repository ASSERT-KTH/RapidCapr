{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final SchurTransformer transformer = new SchurTransformer(m);\n    final RealMatrix t = transformer.getT();\n    final RealMatrix z = transformer.getZ();\n    final int n = t.getRowDimension();\n    final double[][] sqrtTData = new double[n][n];\n    for (int i = 0; i < n; i++) {\n        final double ti = t.getEntry(i, i);\n        if (ti < 0) {\n            throw new IllegalArgumentException(\"Matrix cannot be square rooted: negative eigenvalue on diagonal\");\n        } else {\n            sqrtTData[i][i] = FastMath.sqrt(ti);\n            for (int j = i + 1; j < n; j++) {\n                final double tij = t.getEntry(i, j);\n                final double sij = tij / (sqrtTData[i][i] + sqrtTData[j][j]);\n                sqrtTData[i][j] = sij;\n                sqrtTData[j][i] = sij;\n            }\n        }\n    }\n    final RealMatrix sqrtT = MatrixUtils.createRealMatrix(sqrtTData);\n    return z.multiply(sqrtT).multiply(z.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..79db35ac1 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final SchurTransformer transformer = new SchurTransformer(m);\n+    final RealMatrix t = transformer.getT();\n+    final RealMatrix z = transformer.getZ();\n+    final int n = t.getRowDimension();\n+    final double[][] sqrtTData = new double[n][n];\n+    for (int i = 0; i < n; i++) {\n+        final double ti = t.getEntry(i, i);\n+        if (ti < 0) {\n+            throw new IllegalArgumentException(\"Matrix cannot be square rooted: negative eigenvalue on diagonal\");\n+        } else {\n+            sqrtTData[i][i] = FastMath.sqrt(ti);\n+            for (int j = i + 1; j < n; j++) {\n+                final double tij = t.getEntry(i, j);\n+                final double sij = tij / (sqrtTData[i][i] + sqrtTData[j][j]);\n+                sqrtTData[i][j] = sij;\n+                sqrtTData[j][i] = sij;\n+            }\n+        }\n     }\n+    final RealMatrix sqrtT = MatrixUtils.createRealMatrix(sqrtTData);\n+    return z.multiply(sqrtT).multiply(z.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}