{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  \n  if (n.isFunction()) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n    if (info != null && (info.isConstructor() || info.hasThisType() || info.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them.\n    // var a = function() .., function a() .. or a.b = function() ...\n    int nodeType = parent.getType();\n    if (!(nodeType == Token.SCRIPT || nodeType == Token.BLOCK ||\n          nodeType == Token.LP || nodeType == Token.IF || nodeType == Token.WHILE ||\n          nodeType == Token.DO || nodeType == Token.FOR || nodeType == Token.FOR_IN ||\n          nodeType == Token.CATCH ||\n          nodeType == Token.EXPR_RESULT || nodeType == Token.VAR)) {\n      return false;\n    }\n\n    // Don't traverse functions that are getting lent to a prototype.\n    if (parent.isAssign()) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = parent.getLastChild();\n\n      if (lhs == null || rhs == null) {\n        return false;\n      }\n\n      if (lhs.isGetProp()) {\n        if (lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n\n        // Traversed up to the prototype itself, don't go any further.\n        Node lValue = lhs.getFirstChild();\n        if (lValue.isGetProp() && lValue.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n\n      // Always traverse the LHS, even if it haven't seen it before.\n      if (n == lhs) {\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else if (lhs.isGetProp() && !NodeUtil.isObjectLitKey(lhs) && !n.isFromExterns()) {\n        return false;\n      } else if (lhs.isName() &&\n          !(n.isFunction() || n.isClass() || n.isTemplateLit() || NodeUtil.isFunctionExpression(n))) {\n        return false;\n      } else if (lhs.isQualifiedName() && parent.getParent().isExprResult() &&\n          !(n.isFunction() || n.isClass() || n.isTemplateLit() || NodeUtil.isFunctionExpression(n))) {\n        return false;\n      } else if (NodeUtil.isObjectLitKey(parent, lhs)) {\n        // Don't traverse function expressions in object literals.\n        if (n.isFunction()) {\n          Node grandparent = parent.getParent();\n          int grandparentType = grandparent.getType();\n          if (!((grandparentType == Token.ASSIGN || grandparentType == Token.VAR) &&\n              NodeUtil.isObjectLitKey(grandparent.getParent(), grandparent))) {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..9489727c 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,71 +79,79 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  \n+  if (n.isFunction()) {\n+    // Don't traverse functions that are constructors or have the @this\n+    // or @override annotation.\n+    JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n+    if (info != null && (info.isConstructor() || info.hasThisType() || info.isOverride())) {\n+      return false;\n+    }\n+\n+    // Don't traverse functions unless they would normally\n+    // be able to have a @this annotation associated with them.\n+    // var a = function() .., function a() .. or a.b = function() ...\n+    int nodeType = parent.getType();\n+    if (!(nodeType == Token.SCRIPT || nodeType == Token.BLOCK ||\n+          nodeType == Token.LP || nodeType == Token.IF || nodeType == Token.WHILE ||\n+          nodeType == Token.DO || nodeType == Token.FOR || nodeType == Token.FOR_IN ||\n+          nodeType == Token.CATCH ||\n+          nodeType == Token.EXPR_RESULT || nodeType == Token.VAR)) {\n+      return false;\n+    }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+    // Don't traverse functions that are getting lent to a prototype.\n+    if (parent.isAssign()) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = parent.getLastChild();\n+\n+      if (lhs == null || rhs == null) {\n         return false;\n       }\n \n-      // Don't traverse functions that are getting lent to a prototype.\n-    }\n+      if (lhs.isGetProp()) {\n+        if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n+        // Traversed up to the prototype itself, don't go any further.\n+        Node lValue = lhs.getFirstChild();\n+        if (lValue.isGetProp() && lValue.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+      }\n \n+      // Always traverse the LHS, even if it haven't seen it before.\n       if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n         if (assignLhsChild == null) {\n           assignLhsChild = lhs;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n+      } else if (lhs.isGetProp() && !NodeUtil.isObjectLitKey(lhs) && !n.isFromExterns()) {\n+        return false;\n+      } else if (lhs.isName() &&\n+          !(n.isFunction() || n.isClass() || n.isTemplateLit() || NodeUtil.isFunctionExpression(n))) {\n+        return false;\n+      } else if (lhs.isQualifiedName() && parent.getParent().isExprResult() &&\n+          !(n.isFunction() || n.isClass() || n.isTemplateLit() || NodeUtil.isFunctionExpression(n))) {\n+        return false;\n+      } else if (NodeUtil.isObjectLitKey(parent, lhs)) {\n+        // Don't traverse function expressions in object literals.\n+        if (n.isFunction()) {\n+          Node grandparent = parent.getParent();\n+          int grandparentType = grandparent.getType();\n+          if (!((grandparentType == Token.ASSIGN || grandparentType == Token.VAR) &&\n+              NodeUtil.isObjectLitKey(grandparent.getParent(), grandparent))) {\n             return false;\n           }\n+        } else {\n+          return false;\n         }\n       }\n     }\n-\n-    return true;\n   }\n+  return true;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}