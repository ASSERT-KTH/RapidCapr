{
    "patch": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n    boolean increasing = false;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a * hPrev + b * p0;\n        double q2 = a * q1 + b * dPrev;\n\n        if (Double.isInfinite(cN) || Double.isInfinite(q2) || Double.isNaN(cN) || Double.isNaN(q2)) {\n            // The continued fraction contains terms that are too large or undefined.\n            // We can try to rescale the terms to avoid overflow.\n\n            // Rescale with the largest (finite, positive) value among absolute b and a2 --> it only makes sense if a2 and b have same sign or one of them is zero\n            final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n            double scaleFactor = 1.0;\n\n            int i = 0; // counter to track number of rescales\n            // iteratively rescale the terms until there is no overflow or maximum-nb-of-tries has been reached\n            while ((i < 20) && (Double.isInfinite(cN) || Double.isInfinite(q2) || Double.isNaN(cN) || Double.isNaN(q2))) {\n                scaleFactor *= scale;\n                cN = a / scaleFactor * hPrev + b / scaleFactor * p0;\n                q2 = a / scaleFactor * q1 + b / scaleFactor * dPrev;\n                i++;\n            }\n            if (i == 20 || Double.isInfinite(cN) || Double.isInfinite(q2) || Double.isNaN(cN) || Double.isNaN(q2)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n        }\n\n        final double deltaN;\n        if(FastMath.abs(q2) < 1E-20) {\n            deltaN = cN / cPrev;\n        } else {\n            deltaN = cN / q2 / cPrev;\n        }\n        hN = cPrev * deltaN;\n\n        if (Double.isInfinite(hN)) {\n            // divergent, try another rescaling\n            double scaleFactor = 1.0;\n            int i = 0;\n            while (Double.isInfinite(hN) && i < 20) {\n                scaleFactor *= 10; // arbitrary scaling\n                cN = a * hPrev / scaleFactor + b * p0 / scaleFactor;\n                q2 = a * q1 / scaleFactor + b * dPrev / scaleFactor;\n                if (FastMath.abs(q2) > 1e-10) {\n                    deltaN = cN / q2 / cPrev;\n                } else {\n                    deltaN = cN / p0 / cPrev;\n                }\n                hN = cPrev * deltaN;\n                i++;\n            }\n            if (i == 20 || Double.isInfinite(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n        }\n        // check if the convergent is fluctuating between positive and negative values, and break the loop if it is non-decreasing or non-increasing\n        if (deltaN > 0 && increasing) {\n            break;\n        } else if (deltaN < 0 && !increasing) {\n            break;\n        }\n        increasing  = deltaN > 0;\n        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n            break;\n        }\n\n        dPrev = q1;\n        cPrev = cN / q2;\n        p0 = hPrev;\n        hPrev = hN;\n        q1 = q2;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                            maxIterations, x);\n    }\n\n    return hN;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..dc69761be 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -120,82 +120,104 @@ public abstract class ContinuedFraction {\n      * @return the value of the continued fraction evaluated at x.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n-    public double evaluate(double x, double epsilon, int maxIterations) {\n-        final double small = 1e-50;\n-        double hPrev = getA(0, x);\n+public double evaluate(double x, double epsilon, int maxIterations) {\n+    final double small = 1e-50;\n+    double hPrev = getA(0, x);\n \n-        // use the value of small as epsilon criteria for zero checks\n-        if (Precision.equals(hPrev, 0.0, small)) {\n-            hPrev = small;\n-        }\n-\n-        int n = 1;\n-        double dPrev = 0.0;\n-        double p0 = 1.0;\n-        double q1 = 1.0;\n-        double cPrev = hPrev;\n-        double hN = hPrev;\n-\n-        while (n < maxIterations) {\n-            final double a = getA(n, x);\n-            final double b = getB(n, x);\n-\n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n-                }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n-                    }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            final double deltaN = cN / q2 / cPrev;\n-            hN = cPrev * deltaN;\n+    // use the value of small as epsilon criteria for zero checks\n+    if (Precision.equals(hPrev, 0.0, small)) {\n+        hPrev = small;\n+    }\n \n-            if (Double.isInfinite(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                               x);\n+    int n = 1;\n+    double dPrev = 0.0;\n+    double p0 = 1.0;\n+    double q1 = 1.0;\n+    double cPrev = hPrev;\n+    double hN = hPrev;\n+    boolean increasing = false;\n+\n+    while (n < maxIterations) {\n+        final double a = getA(n, x);\n+        final double b = getB(n, x);\n+\n+        double cN = a * hPrev + b * p0;\n+        double q2 = a * q1 + b * dPrev;\n+\n+        if (Double.isInfinite(cN) || Double.isInfinite(q2) || Double.isNaN(cN) || Double.isNaN(q2)) {\n+            // The continued fraction contains terms that are too large or undefined.\n+            // We can try to rescale the terms to avoid overflow.\n+\n+            // Rescale with the largest (finite, positive) value among absolute b and a2 --> it only makes sense if a2 and b have same sign or one of them is zero\n+            final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n+            double scaleFactor = 1.0;\n+\n+            int i = 0; // counter to track number of rescales\n+            // iteratively rescale the terms until there is no overflow or maximum-nb-of-tries has been reached\n+            while ((i < 20) && (Double.isInfinite(cN) || Double.isInfinite(q2) || Double.isNaN(cN) || Double.isNaN(q2))) {\n+                scaleFactor *= scale;\n+                cN = a / scaleFactor * hPrev + b / scaleFactor * p0;\n+                q2 = a / scaleFactor * q1 + b / scaleFactor * dPrev;\n+                i++;\n             }\n-            if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n+            if (i == 20 || Double.isInfinite(cN) || Double.isInfinite(q2) || Double.isNaN(cN) || Double.isNaN(q2)) {\n+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n             }\n+        }\n \n-            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n-                break;\n+        final double deltaN;\n+        if(FastMath.abs(q2) < 1E-20) {\n+            deltaN = cN / cPrev;\n+        } else {\n+            deltaN = cN / q2 / cPrev;\n+        }\n+        hN = cPrev * deltaN;\n+\n+        if (Double.isInfinite(hN)) {\n+            // divergent, try another rescaling\n+            double scaleFactor = 1.0;\n+            int i = 0;\n+            while (Double.isInfinite(hN) && i < 20) {\n+                scaleFactor *= 10; // arbitrary scaling\n+                cN = a * hPrev / scaleFactor + b * p0 / scaleFactor;\n+                q2 = a * q1 / scaleFactor + b * dPrev / scaleFactor;\n+                if (FastMath.abs(q2) > 1e-10) {\n+                    deltaN = cN / q2 / cPrev;\n+                } else {\n+                    deltaN = cN / p0 / cPrev;\n+                }\n+                hN = cPrev * deltaN;\n+                i++;\n+            }\n+            if (i == 20 || Double.isInfinite(hN)) {\n+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n             }\n-\n-            dPrev = q1;\n-            cPrev = cN / q2;\n-            p0 = hPrev;\n-            hPrev = cN;\n-            q1 = q2;\n-            n++;\n         }\n-\n-        if (n >= maxIterations) {\n-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n+        // check if the convergent is fluctuating between positive and negative values, and break the loop if it is non-decreasing or non-increasing\n+        if (deltaN > 0 && increasing) {\n+            break;\n+        } else if (deltaN < 0 && !increasing) {\n+            break;\n+        }\n+        increasing  = deltaN > 0;\n+        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n+            break;\n         }\n \n-        return hN;\n+        dPrev = q1;\n+        cPrev = cN / q2;\n+        p0 = hPrev;\n+        hPrev = hN;\n+        q1 = q2;\n+        n++;\n     }\n \n+    if (n >= maxIterations) {\n+        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n+                                            maxIterations, x);\n+    }\n+\n+    return hN;\n+}\n+\n }",
    "result_reason": "error: variable deltaN might already have been assigned",
    "test_result": "ERROR"
}