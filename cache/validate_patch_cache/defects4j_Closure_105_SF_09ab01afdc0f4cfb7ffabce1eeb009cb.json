{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  boolean hasImmutableElement = false;\n  boolean allElementsAreStrings = true;\n  StringBuilder sb = new StringBuilder();\n  IntList foldedSizes = new IntList();\n  Node elem = arrayNode.getFirstChild();\n\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      hasImmutableElement = true;\n      if (sb.length() > 0) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n    } else {\n      if (!NodeUtil.isStringPrimitive(elem)) {\n        allElementsAreStrings = false;\n      }\n      if (sb.length() > 0) {\n        foldedSizes.add(sb.length() + joinString.length());\n      }\n      sb.setLength(0);\n      foldedSizes.add(InlineCostEstimator.getCost(elem));\n    }\n    elem = elem.getNext();\n  }\n\n  if (sb.length() > 0) {\n    foldedSizes.add(sb.length());\n  }\n\n  if (!hasImmutableElement || !allElementsAreStrings) {\n    return;\n  }\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  int foldedSize = foldedSizes.stream().sum() + (joinString.length() * (foldedSizes.size() - 1));\n\n  if (foldedSize > originalSize) {\n    return;\n  }\n\n  Node foldedStringNode;\n  if (foldedSizes.size() == 1) {\n    foldedStringNode = Node.newString(foldString(joinString, foldedSizes, 0, 1));\n  } else {\n    foldedStringNode = new Node(Token.ADD);\n    for (int i = 0; i < foldedSizes.size(); i++) {\n      foldedStringNode.addChildToBack(NodeUtil.newStringOrNumber(\n          t.getCompiler(), foldString(joinString, foldedSizes, i, 2)));\n      if (i != foldedSizes.size() - 1) {\n        foldedStringNode.addChildToBack(right.cloneTree());\n      }\n    }\n  }\n\n  parent.replaceChild(n, foldedStringNode);\n  t.getCompiler().reportCodeChange();\n}\n\nprivate static String foldString(String joinString, IntList foldedSizes, int start, int step) {\n  StringBuilder sb = new StringBuilder();\n  for (int i = start; i < foldedSizes.size(); i += step) {\n    if (foldedSizes.get(i) <= 0) {\n      continue;\n    }\n    if (sb.length() > 0) {\n      sb.append(joinString);\n    }\n    sb.append(NodeUtil.getStringValue(Node.newString(new String(new char[foldedSizes.get(i)]))));\n  }\n  return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..5e04f737 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,96 +1458,92 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = left.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+  if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+  String joinString = NodeUtil.getStringValue(right);\n+  boolean hasImmutableElement = false;\n+  boolean allElementsAreStrings = true;\n+  StringBuilder sb = new StringBuilder();\n+  IntList foldedSizes = new IntList();\n+  Node elem = arrayNode.getFirstChild();\n+\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      hasImmutableElement = true;\n+      if (sb.length() > 0) {\n+        sb.append(joinString);\n       }\n-      elem = elem.getNext();\n+      sb.append(NodeUtil.getStringValue(elem));\n+    } else {\n+      if (!NodeUtil.isStringPrimitive(elem)) {\n+        allElementsAreStrings = false;\n+      }\n+      if (sb.length() > 0) {\n+        foldedSizes.add(sb.length() + joinString.length());\n+      }\n+      sb.setLength(0);\n+      foldedSizes.add(InlineCostEstimator.getCost(elem));\n     }\n+    elem = elem.getNext();\n+  }\n \n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+  if (sb.length() > 0) {\n+    foldedSizes.add(sb.length());\n+  }\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  if (!hasImmutableElement || !allElementsAreStrings) {\n+    return;\n+  }\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+  int originalSize = InlineCostEstimator.getCost(n);\n+  int foldedSize = foldedSizes.stream().sum() + (joinString.length() * (foldedSizes.size() - 1));\n+\n+  if (foldedSize > originalSize) {\n+    return;\n+  }\n+\n+  Node foldedStringNode;\n+  if (foldedSizes.size() == 1) {\n+    foldedStringNode = Node.newString(foldString(joinString, foldedSizes, 0, 1));\n+  } else {\n+    foldedStringNode = new Node(Token.ADD);\n+    for (int i = 0; i < foldedSizes.size(); i++) {\n+      foldedStringNode.addChildToBack(NodeUtil.newStringOrNumber(\n+          t.getCompiler(), foldString(joinString, foldedSizes, i, 2)));\n+      if (i != foldedSizes.size() - 1) {\n+        foldedStringNode.addChildToBack(right.cloneTree());\n+      }\n     }\n-    t.getCompiler().reportCodeChange();\n   }\n \n+  parent.replaceChild(n, foldedStringNode);\n+  t.getCompiler().reportCodeChange();\n+}\n+\n+private static String foldString(String joinString, IntList foldedSizes, int start, int step) {\n+  StringBuilder sb = new StringBuilder();\n+  for (int i = start; i < foldedSizes.size(); i += step) {\n+    if (foldedSizes.get(i) <= 0) {\n+      continue;\n+    }\n+    if (sb.length() > 0) {\n+      sb.append(joinString);\n+    }\n+    sb.append(NodeUtil.getStringValue(Node.newString(new String(new char[foldedSizes.get(i)]))));\n+  }\n+  return sb.toString();\n+}\n+\n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}