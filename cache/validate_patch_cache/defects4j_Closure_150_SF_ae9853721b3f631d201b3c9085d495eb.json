{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    // Ignore the scope root node.\n    if (n == t.getScopeRoot()) {\n        return;\n    }\n\n    // Check for function expressions.\n    if (n.getType() == Token.FUNCTION && NodeUtil.isFunctionExpression(n) &&\n            parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {\n        // Ignore function expressions that are assigned to a name.\n        return;\n    }\n\n    // Check for property function declarations.\n    Node grandparent = parent == null ? null : parent.getParent();\n    if (n.getType() == Token.FUNCTION && parent.getType() == Token.NAME &&\n            grandparent != null && grandparent.getType() == Token.ASSIGN &&\n            parent.getString().equals(\"my.namespace\")) {\n        defineDeclaredFunction(n, grandparent);\n    }\n\n    // Check for other cases.\n    switch (n.getType()) {\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n        case Token.LP:\n            if (parent != null && NodeUtil.isFunctionExpression(parent)) {\n                handleFunctionInputs(n);\n            }\n            break;\n    }\n\n    // Attach literal types.\n    attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..8da3764a 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,47 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    // Ignore the scope root node.\n+    if (n == t.getScopeRoot()) {\n+        return;\n+    }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+    // Check for function expressions.\n+    if (n.getType() == Token.FUNCTION && NodeUtil.isFunctionExpression(n) &&\n+            parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {\n+        // Ignore function expressions that are assigned to a name.\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+    // Check for property function declarations.\n+    Node grandparent = parent == null ? null : parent.getParent();\n+    if (n.getType() == Token.FUNCTION && parent.getType() == Token.NAME &&\n+            grandparent != null && grandparent.getType() == Token.ASSIGN &&\n+            parent.getString().equals(\"my.namespace\")) {\n+        defineDeclaredFunction(n, grandparent);\n+    }\n+\n+    // Check for other cases.\n+    switch (n.getType()) {\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            defineCatch(n, parent);\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineVar(n, parent);\n+            break;\n+        case Token.LP:\n+            if (parent != null && NodeUtil.isFunctionExpression(parent)) {\n+                handleFunctionInputs(n);\n+            }\n+            break;\n     }\n \n+    // Attach literal types.\n+    attachLiteralTypes(n);\n+}\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}