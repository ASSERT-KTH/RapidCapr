{
    "patch": "        String prefix = isExpressionLambda(functionNode) ? \"\" : \"anonymous\";\n        name = new Name(prefix + functionCounter++);\n        // Rhino parser positions the function name at the \"function\" token.\n        name.setPosition(functionNode.getPosition());\n        // Add created name to set of all VAR names in scope.\n        if (scope != null) {\n          scope.getVarNames().add(name.getIdentifier());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..d79736ba 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,14 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+        String prefix = isExpressionLambda(functionNode) ? \"\" : \"anonymous\";\n+        name = new Name(prefix + functionCounter++);\n+        // Rhino parser positions the function name at the \"function\" token.\n+        name.setPosition(functionNode.getPosition());\n+        // Add created name to set of all VAR names in scope.\n+        if (scope != null) {\n+          scope.getVarNames().add(name.getIdentifier());\n+        }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}