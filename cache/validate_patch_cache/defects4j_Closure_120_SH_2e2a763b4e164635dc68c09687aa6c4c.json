{
    "patch": "      if (block.isFunction) {\n        break;\n      } else if (block.isLoop) {\n        // Check that this is the only assignment in the loop.\n        int numAssignments = 0;\n        for (Reference otherRef : variable.getAllRefs()) {\n          if (otherRef.isAssignment() && otherRef != ref &&\n              otherRef.getBasicBlock() == block) {\n            numAssignments++;\n          }\n        }\n        if (numAssignments > 0) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..f85cf9f4 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        break;\n+      } else if (block.isLoop) {\n+        // Check that this is the only assignment in the loop.\n+        int numAssignments = 0;\n+        for (Reference otherRef : variable.getAllRefs()) {\n+          if (otherRef.isAssignment() && otherRef != ref &&\n+              otherRef.getBasicBlock() == block) {\n+            numAssignments++;\n+          }\n+        }\n+        if (numAssignments > 0) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}