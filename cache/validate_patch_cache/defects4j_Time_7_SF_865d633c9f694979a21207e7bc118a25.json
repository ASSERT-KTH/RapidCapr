{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        bucket.setOffset(iOffsetParsed ? 0 : instant.getZone().getOffset(instantMillis));\n        int newPos = parser.parseInto(bucket, text, position);\n        if (bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        long instantAfterParser = bucket.computeMillis(true, text);\n        boolean midnightCrossed = bucket.isMidnightCrosses();\n        \n        if (iOffsetParsed) {\n            if (midnightCrossed) {\n                // Midnight on the day was invalid, rerun with UTC midnight instead\n                parsedOffset = 0;\n                parsedZone = DateTimeZone.UTC;\n                chrono = chrono.withZone(parsedZone);\n                instantAfterParser = bucket.computeMillis(true, text);\n            }\n        } else if (iZone != null) {\n            parsedZone = iZone;\n            chrono = chrono.withZone(parsedZone);\n        } \n        \n        instant.setMillis(parsedOffset == null ? instantAfterParser : instantAfterParser - parsedOffset);\n        instant.setChronology(chrono);\n        instant.setZone(parsedZone);\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..92efd30f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -711,19 +711,34 @@ public class DateTimeFormatter {\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+        bucket.setOffset(iOffsetParsed ? 0 : instant.getZone().getOffset(instantMillis));\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        if (bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n             chrono = chrono.withZone(parsedZone);\n         } else if (bucket.getZone() != null) {\n             chrono = chrono.withZone(bucket.getZone());\n         }\n+        long instantAfterParser = bucket.computeMillis(true, text);\n+        boolean midnightCrossed = bucket.isMidnightCrosses();\n+        \n+        if (iOffsetParsed) {\n+            if (midnightCrossed) {\n+                // Midnight on the day was invalid, rerun with UTC midnight instead\n+                parsedOffset = 0;\n+                parsedZone = DateTimeZone.UTC;\n+                chrono = chrono.withZone(parsedZone);\n+                instantAfterParser = bucket.computeMillis(true, text);\n+            }\n+        } else if (iZone != null) {\n+            parsedZone = iZone;\n+            chrono = chrono.withZone(parsedZone);\n+        } \n+        \n+        instant.setMillis(parsedOffset == null ? instantAfterParser : instantAfterParser - parsedOffset);\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n+        instant.setZone(parsedZone);\n         return newPos;\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}