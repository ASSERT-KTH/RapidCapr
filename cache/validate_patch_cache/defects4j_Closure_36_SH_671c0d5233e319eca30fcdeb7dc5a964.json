{
    "patch": "/**\n * Determines if the given `callNode` represents a singleton getter call for the function represented by `value`.\n *\n * @param value the function whose singleton getter status is being checked\n * @param callNode the `CALL` node to be checked\n * @return `true` if it is a singleton getter call; `false` otherwise\n */\nprivate boolean isSingletonGetterCall(Node value, Node callNode) {\n    if (!value.isFunction()) {\n        return false;\n    }\n    String className = compiler.getCodingConvention().getSingletonGetterClassName(value);\n    if (className == null) {\n        return false;\n    }\n    Node callee = callNode.getFirstChild();\n    if (callee == null || !callee.isGetProp()) {\n        return false;\n    }\n    return className.equals(callee.getLastChild().getString());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..78434b42 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,27 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+/**\n+ * Determines if the given `callNode` represents a singleton getter call for the function represented by `value`.\n+ *\n+ * @param value the function whose singleton getter status is being checked\n+ * @param callNode the `CALL` node to be checked\n+ * @return `true` if it is a singleton getter call; `false` otherwise\n+ */\n+private boolean isSingletonGetterCall(Node value, Node callNode) {\n+    if (!value.isFunction()) {\n+        return false;\n+    }\n+    String className = compiler.getCodingConvention().getSingletonGetterClassName(value);\n+    if (className == null) {\n+        return false;\n+    }\n+    Node callee = callNode.getFirstChild();\n+    if (callee == null || !callee.isGetProp()) {\n+        return false;\n+    }\n+    return className.equals(callee.getLastChild().getString());\n+}\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}