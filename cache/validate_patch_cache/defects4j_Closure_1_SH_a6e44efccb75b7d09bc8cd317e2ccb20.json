{
    "patch": "    Node function = fnScope.getRootNode();\n    Node parent = function.getParent();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(parent)) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    // Collect all the parameter names and their corresponding VARs.\n    // Start at the last parameter because it's the most likely to be unused (and\n    // we want to clean up unused parameters).\n    List<Node> parameters = new ArrayList<>();\n    Node param = argList.getLastChild();\n    while (param != null) {\n      Preconditions.checkState(param.isName());\n      parameters.add(param);\n      param = param.getPrevious();\n    }\n    Collections.reverse(parameters);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      boolean keepProcessingParams = true;\n      while (keepProcessingParams && !parameters.isEmpty()) {\n        Node lastParam = parameters.get(parameters.size() - 1);\n        Var var = fnScope.getVar(lastParam.getString());\n        if (!referenced.contains(var)) {\n          NodeUtil.removeChild(argList, lastParam);\n          parameters.remove(parameters.size() - 1);\n        } else {\n          keepProcessingParams = false;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0e016e78 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,46 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Node parent = function.getParent();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(parent)) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    // Collect all the parameter names and their corresponding VARs.\n+    // Start at the last parameter because it's the most likely to be unused (and\n+    // we want to clean up unused parameters).\n+    List<Node> parameters = new ArrayList<>();\n+    Node param = argList.getLastChild();\n+    while (param != null) {\n+      Preconditions.checkState(param.isName());\n+      parameters.add(param);\n+      param = param.getPrevious();\n+    }\n+    Collections.reverse(parameters);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      boolean keepProcessingParams = true;\n+      while (keepProcessingParams && !parameters.isEmpty()) {\n+        Node lastParam = parameters.get(parameters.size() - 1);\n+        Var var = fnScope.getVar(lastParam.getString());\n+        if (!referenced.contains(var)) {\n+          NodeUtil.removeChild(argList, lastParam);\n+          parameters.remove(parameters.size() - 1);\n+        } else {\n+          keepProcessingParams = false;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}