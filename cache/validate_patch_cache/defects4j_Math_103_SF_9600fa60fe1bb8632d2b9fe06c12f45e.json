{
    "patch": "    public double cumulativeProbability(double x) throws MathException {\n        double ret;\n        if (x == Double.NEGATIVE_INFINITY) {\n            ret = 0.0;\n        } else if (x == Double.POSITIVE_INFINITY) {\n            ret = 1.0;\n        } else if (x == mean) {\n            ret = 0.5;\n        } else if (Double.isNaN(x)) {\n            ret = Double.NaN;\n        } else {\n            double dev = standardDeviation * Math.sqrt(2.0);\n            double x0 = (lowerTail(x - mean, standardDeviation)) * 0.5;\n            double x1 = 0.5 - x0;\n            ret = (x < mean) ? x1 : x0;\n        }\n        return ret;\n    }\n\n    private double lowerTail(double z, double standardDeviation) {\n        double root2 = Math.sqrt(2.0);\n        double inner = (-z) / (standardDeviation * root2);\n        double inv = Erf.erfc(-inner * 0.5);\n        return 0.5 * inv;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..a24ed1add 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -106,8 +106,29 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+        double ret;\n+        if (x == Double.NEGATIVE_INFINITY) {\n+            ret = 0.0;\n+        } else if (x == Double.POSITIVE_INFINITY) {\n+            ret = 1.0;\n+        } else if (x == mean) {\n+            ret = 0.5;\n+        } else if (Double.isNaN(x)) {\n+            ret = Double.NaN;\n+        } else {\n+            double dev = standardDeviation * Math.sqrt(2.0);\n+            double x0 = (lowerTail(x - mean, standardDeviation)) * 0.5;\n+            double x1 = 0.5 - x0;\n+            ret = (x < mean) ? x1 : x0;\n+        }\n+        return ret;\n+    }\n+\n+    private double lowerTail(double z, double standardDeviation) {\n+        double root2 = Math.sqrt(2.0);\n+        double inner = (-z) / (standardDeviation * root2);\n+        double inv = Erf.erfc(-inner * 0.5);\n+        return 0.5 * inv;\n     }\n     \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}