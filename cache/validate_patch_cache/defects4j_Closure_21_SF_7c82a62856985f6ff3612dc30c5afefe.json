{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    // Ignore any nodes inside a FOR initialization clause\n    // (handled by `visitFor`)\n    if (inForInit) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA)\n            continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n            return;\n          else\n            break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n        return;\n      }\n    }\n\n    // Check if node has side effects and report an error if not.\n    if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n      boolean isLValue = n.isQualifiedName() || NodeUtil.isGet(n);\n      boolean isArrayIndexLValue = n.isGetElem() && NodeUtil.isArrayReference(n);\n      if (isLValue || isArrayIndexLValue || NodeUtil.isFunctionObjectCall(n)) {\n        // If a side-effect free expression is an LHS somewhere, we can't\n        // remove if without replacing that LHS.\n        return;\n      }\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      problemNodes.add(n);\n    }\n  }\n\n  @Override\n  public void visitFor(NodeTraversal t, Node n, Node parent) {\n    Node firstChildNode = n.getFirstChild();\n    inForInit = true;\n    for (Node c = firstChildNode; c != null; c = c.getNext()) {\n      visit(t, c, n);\n    }\n    inForInit = false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..c3518b9c 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,7 +81,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n     // VOID nodes appear when there are extra semicolons at the BLOCK level.\n     // I've been unable to think of any cases where this indicates a bug,\n     // and apparently some people like keeping these semicolons around,\n@@ -108,6 +108,12 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       return;\n     }\n \n+    // Ignore any nodes inside a FOR initialization clause\n+    // (handled by `visitFor`)\n+    if (inForInit) {\n+      return;\n+    }\n+\n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n     if (parent.getType() == Token.COMMA) {\n@@ -117,9 +123,12 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       if (n == parent.getLastChild()) {\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n+          if (ancestorType == Token.COMMA)\n+            continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n+            return;\n+          else\n+            break;\n         }\n       }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n@@ -127,8 +136,16 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n         return;\n       }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+\n+    // Check if node has side effects and report an error if not.\n+    if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+      boolean isLValue = n.isQualifiedName() || NodeUtil.isGet(n);\n+      boolean isArrayIndexLValue = n.isGetElem() && NodeUtil.isArrayReference(n);\n+      if (isLValue || isArrayIndexLValue || NodeUtil.isFunctionObjectCall(n)) {\n+        // If a side-effect free expression is an LHS somewhere, we can't\n+        // remove if without replacing that LHS.\n+        return;\n+      }\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n         msg = \"Is there a missing '+' on the previous line?\";\n@@ -136,17 +153,20 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n         msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n             \"' operator is not being used.\";\n       }\n-\n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n+      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+      problemNodes.add(n);\n     }\n   }\n \n+  @Override\n+  public void visitFor(NodeTraversal t, Node n, Node parent) {\n+    Node firstChildNode = n.getFirstChild();\n+    inForInit = true;\n+    for (Node c = firstChildNode; c != null; c = c.getNext()) {\n+      visit(t, c, n);\n+    }\n+    inForInit = false;\n+\n   /**\n    * Protect side-effect free nodes by making them parameters\n    * to a extern function call.  This call will be removed",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}