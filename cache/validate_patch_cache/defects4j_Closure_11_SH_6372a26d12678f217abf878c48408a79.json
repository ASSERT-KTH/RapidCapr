{
    "patch": "if (n.isGetProp() && (n.getLastChild().getString().equals(\"length\") || \n                     n.getLastChild().getString().equals(\"prototype\")) &&\n    n.getFirstChild().getJSType() != null &&\n    n.getFirstChild().getJSType().isFunctionPrototypeType()) {\n  warnings.add(JSError.make(n, SUSPICIOUS_SEMICOLON, nodeName));\n} else if (n.getJSType() != null && parent.isAssign() && n.getFirstChild().isQualifiedName()) {\n  JSType lhsType = n.getFirstChild().getJSType();\n  JSType rhsType = n.getLastChild().getJSType();\n  if (lhsType != null && lhsType.isConstructor() && \n      rhsType != null && rhsType.isFunctionType()) {\n    warnings.add(JSError.make(n, COMPARE_CONSTRUCTOR_TO_FUNCTIONS, nodeName));\n  }\n} else if (n.getJSType() != null && parent.isAssign()) {\n  if (n.getJSType().isFunctionType()) {\n    warnings.add(JSError.make(n, REASSIGN_FUNCTION_TYPE, nodeName));\n  } else {\n    return;\n  }\n} else if (n.isFunction()) {\n  Node fnNameNode = n.getFirstChild();\n  if (fnNameNode != null && fnNameNode.isName() && \n      FUNCTION_NAMESPACE.matcher(fnNameNode.getString()).find()) {\n    warnings.add(JSError.make(fnNameNode, ANONYMOUS_DEFINED_FUNCTION, fnNameNode.getString()));\n  }\n} ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}