{
    "patch": "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType == null || !constraintObj.isRecordType()) {\n        return;\n      }\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        boolean isDeclared = objType.isPropertyTypeDeclared(prop);\n        boolean isInferred = objType.isPropertyTypeInferred(prop);\n        if (!isDeclared && !isInferred && !objType.hasProperty(prop)) {\n          // Property is undeclared and undefined, so infer its type as void\n          objType.defineInferredProperty(prop, getNativeType(VOID_TYPE), null);\n        } else if (!isDeclared) {\n          // Property is inferred or has a declared type\n          JSType currentType = isInferred ?\n              objType.getPropertyInferredType(prop) : objType.getPropertyType(prop);\n          if (!currentType.isSubtype(propType)) {\n            objType.defineInferredProperty(prop, currentType.getLeastSupertype(propType), null);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..c0eece64 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,21 +1118,25 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+      if (objType == null || !constraintObj.isRecordType()) {\n+        return;\n+      }\n+      for (String prop : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        boolean isDeclared = objType.isPropertyTypeDeclared(prop);\n+        boolean isInferred = objType.isPropertyTypeInferred(prop);\n+        if (!isDeclared && !isInferred && !objType.hasProperty(prop)) {\n+          // Property is undeclared and undefined, so infer its type as void\n+          objType.defineInferredProperty(prop, getNativeType(VOID_TYPE), null);\n+        } else if (!isDeclared) {\n+          // Property is inferred or has a declared type\n+          JSType currentType = isInferred ?\n+              objType.getPropertyInferredType(prop) : objType.getPropertyType(prop);\n+          if (!currentType.isSubtype(propType)) {\n+            objType.defineInferredProperty(prop, currentType.getLeastSupertype(propType), null);\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}