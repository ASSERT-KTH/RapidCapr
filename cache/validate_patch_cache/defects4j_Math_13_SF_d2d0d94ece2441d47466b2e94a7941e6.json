{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix sqrtMatrix = dec.getSquareRoot();\n\n    final double[] eigenValues = dec.getRealEigenvalues();\n    for (int i = 0; i < eigenValues.length; i++) {\n        eigenValues[i] = Math.sqrt(eigenValues[i]);\n    }\n    final RealMatrix diagMatrix = MatrixUtils.createRealDiagonalMatrix(eigenValues);\n    final RealMatrix eigenVectors = dec.getV();\n    final RealMatrix result = eigenVectors.multiply(diagMatrix).multiply(eigenVectors.transpose());\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..916b6e547 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix sqrtMatrix = dec.getSquareRoot();\n+\n+    final double[] eigenValues = dec.getRealEigenvalues();\n+    for (int i = 0; i < eigenValues.length; i++) {\n+        eigenValues[i] = Math.sqrt(eigenValues[i]);\n     }\n+    final RealMatrix diagMatrix = MatrixUtils.createRealDiagonalMatrix(eigenValues);\n+    final RealMatrix eigenVectors = dec.getV();\n+    final RealMatrix result = eigenVectors.multiply(diagMatrix).multiply(eigenVectors.transpose());\n+\n+    return result;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}