{
    "patch": "    Node removalPoint = null;\n    Node maybeRemovalParent = argList.getLastChild();\n    while (maybeRemovalParent != null) {\n      Var var = fnScope.getVar(maybeRemovalParent.getString());\n      if (!referenced.contains(var)) {\n        removalPoint = maybeRemovalParent;\n        maybeRemovalParent = maybeRemovalParent.getPrevious();\n      } else {\n        break;\n      }\n    }\n    if (removalPoint != null) {\n      compiler.reportCodeChange();\n      argList.removeChildrenAfter(removalPoint);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..743bbf76 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node removalPoint = null;\n+    Node maybeRemovalParent = argList.getLastChild();\n+    while (maybeRemovalParent != null) {\n+      Var var = fnScope.getVar(maybeRemovalParent.getString());\n+      if (!referenced.contains(var)) {\n+        removalPoint = maybeRemovalParent;\n+        maybeRemovalParent = maybeRemovalParent.getPrevious();\n+      } else {\n+        break;\n+      }\n+    }\n+    if (removalPoint != null) {\n+      compiler.reportCodeChange();\n+      argList.removeChildrenAfter(removalPoint);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}