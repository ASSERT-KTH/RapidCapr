{
    "patch": "public static double getTypedPercent(JSONObject js) {\n    double totalItems = js.keySet().size();\n    double matchedItems = 0;\n    for (Object key : js.keySet()) {\n        Object value = js.get((String) key);\n        if (value instanceof JSONObject) {\n            matchedItems += getTypedPercent((JSONObject) value);\n        } else if (value instanceof String) {\n            String stringValue = (String) value;\n            if (stringValue.startsWith(\"Typed\"))\n                matchedItems++;\n        }\n    }\n    return matchedItems / totalItems * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..acf50f20 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject js) {\n+    double totalItems = js.keySet().size();\n+    double matchedItems = 0;\n+    for (Object key : js.keySet()) {\n+        Object value = js.get((String) key);\n+        if (value instanceof JSONObject) {\n+            matchedItems += getTypedPercent((JSONObject) value);\n+        } else if (value instanceof String) {\n+            String stringValue = (String) value;\n+            if (stringValue.startsWith(\"Typed\"))\n+                matchedItems++;\n+        }\n+    }\n+    return matchedItems / totalItems * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}