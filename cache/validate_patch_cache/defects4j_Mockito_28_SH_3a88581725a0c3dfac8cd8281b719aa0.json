{
    "patch": "            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if(candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n                field.setAccessible(true);\n                try { \n                    field.set(fieldInstance, candidate); \n                    injectMockCandidate(candidate.getClass(), mocks, candidate); \n                    break;\n                } catch(IllegalAccessException e) { \n                    throw new IllegalArgumentException(e); \n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..97609aca7 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,20 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if(candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n+                field.setAccessible(true);\n+                try { \n+                    field.set(fieldInstance, candidate); \n+                    injectMockCandidate(candidate.getClass(), mocks, candidate); \n+                    break;\n+                } catch(IllegalAccessException e) { \n+                    throw new IllegalArgumentException(e); \n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}