{
    "patch": "    if(node != null && node.getType() == Token.CALL && node.getFirstChild() != null && \n       node.getFirstChild().getType() == Token.NAME && node.getFirstChild().getFirstChild() == null) {\n      String functionName = node.getFirstChild().getString();\n      if(functionName != null && !functionName.startsWith(\"$\") && !functionName.startsWith(\"goog.\")) {\n        changed.add(functionName);\n      }\n    } else {\n      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n        findCalledFunctions(c, changed);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..4c6e0bed 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,15 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+    if(node != null && node.getType() == Token.CALL && node.getFirstChild() != null && \n+       node.getFirstChild().getType() == Token.NAME && node.getFirstChild().getFirstChild() == null) {\n+      String functionName = node.getFirstChild().getString();\n+      if(functionName != null && !functionName.startsWith(\"$\") && !functionName.startsWith(\"goog.\")) {\n+        changed.add(functionName);\n+      }\n+    } else {\n+      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+        findCalledFunctions(c, changed);\n       }\n     }\n ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}