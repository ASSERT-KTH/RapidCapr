{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      boolean sawNumber = false;\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n>>> if (child.isNumber()) {\n>>>   if (sawNumber) {\n>>>     compiler.report(JSError.make(\n>>>         t.getSourceName(), child,\n>>>         Warnings.MIXED_NUMERIC_PROPERTY_NAME_IN_OBJECT_LIT));\n>>>   }\n>>>   sawNumber = true;\n>>>   continue;\n>>> } <<<\n\n        // We should never see a mix of numbers and strings.\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..eb564187 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -488,10 +488,20 @@ class DisambiguateProperties<T> implements CompilerPass {\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n+      boolean sawNumber = false;\n       for (Node child = n.getFirstChild();\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+>>> if (child.isNumber()) {\n+>>>   if (sawNumber) {\n+>>>     compiler.report(JSError.make(\n+>>>         t.getSourceName(), child,\n+>>>         Warnings.MIXED_NUMERIC_PROPERTY_NAME_IN_OBJECT_LIT));\n+>>>   }\n+>>>   sawNumber = true;\n+>>>   continue;\n+>>> } <<<\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}