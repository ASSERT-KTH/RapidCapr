{
    "patch": "/**\n * Finds all variables that are undefined (including parameters) in the given code snippet.\n * Reports an error for each undefined variable found.\n *\n * @param n The root of the AST subtree to search for undefined variables.\n * @param undefinedVars A set to which any undefined variables should be added.\n * @param warnings A list to which any warnings about undefined variables should be added.\n * @param input The source code being checked.\n * @param functionParamNames The names of the parameters of the function containing `n`.\n */\nprivate void checkUndefinedVarsAtNode(\n    Node n,\n    Set<String> undefinedVars,\n    List<JSError> warnings,\n    String input,\n    Set<String> functionParamNames) {\n  if (n == null) {\n    return;\n  }\n  String varName;\n  Node parent = n.getParent();\n  switch (n.getToken()) {\n    case NAME:\n      varName = n.getString();\n      // Check if the variable is undefined.\n      if (parent != null && parent.isExprResult()) {\n        undefinedVars.add(varName);\n        warnings.add(JSError.make(n, UNDEFINED_VARIABLE_WARNING, input));\n      } else if (parent != null) {\n        if (n.isGetProp() && n.getNext() != null && \"split\".equals(n.getNext().getString())) {\n          // Do nothing and let the built-in split handle it\n          return;\n        } else if (n.getJSType() != null && NodeUtil.isAssignmentOp(parent)) {\n          // Do nothing and let the assignment handle it\n          return;\n        }\n      }\n      break;\n    case PARAM_LIST:\n      for (Node param : n.children()) {\n        functionParamNames.add(param.getString());\n      }\n      break;\n    case FUNCTION:\n      // Enter a new scope.\n      checkUndefinedVarsAtFunctionNode(n, undefinedVars, warnings);\n      break;\n    default:\n      for (Node child : n.children()) {\n        checkUndefinedVarsAtNode(child, undefinedVars, warnings, input, functionParamNames);\n      }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}