{
    "patch": "    if (NodeUtil.isFunctionExpression(fnScope.getRootNode())) {\n      // If the function is an expression, don't modify the argument list.\n      // Rename any unreferenced parameters to not produce unresolvable\n      // reference errors.\n      Node argList = getFunctionArgList(fnScope.getRootNode());\n      if (argList == null) {\n        // Some function ASTs like getters have no arguments.\n        return;\n      }\n      int paramIndex = 0;\n      for (Node arg = argList.getFirstChild(); arg != null;\n           arg = arg.getNext(), ++paramIndex) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          NodeUtil.renameNode(arg, compiler.getNodeFactory().createName(\n                                                VAR_PREFIX + paramIndex));\n          compiler.reportCodeChange();\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..92515aee 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    if (NodeUtil.isFunctionExpression(fnScope.getRootNode())) {\n+      // If the function is an expression, don't modify the argument list.\n+      // Rename any unreferenced parameters to not produce unresolvable\n+      // reference errors.\n+      Node argList = getFunctionArgList(fnScope.getRootNode());\n+      if (argList == null) {\n+        // Some function ASTs like getters have no arguments.\n+        return;\n+      }\n+      int paramIndex = 0;\n+      for (Node arg = argList.getFirstChild(); arg != null;\n+           arg = arg.getNext(), ++paramIndex) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          NodeUtil.renameNode(arg, compiler.getNodeFactory().createName(\n+                                                VAR_PREFIX + paramIndex));\n+          compiler.reportCodeChange();\n+        }\n+      }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}