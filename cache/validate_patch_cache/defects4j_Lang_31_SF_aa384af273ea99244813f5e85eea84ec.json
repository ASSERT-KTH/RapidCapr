{
    "patch": "public static boolean containsAny(CharSequence seq, char[] searchChars) {\n    if (seq == null || searchChars == null) {\n        return false;\n    }\n    int strLength = seq.length();\n    int searchLength = searchChars.length;\n    int strLast = strLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < strLength; i++) {\n        char ch = seq.charAt(i);\n        if (isHighSurrogate(ch)) {\n            if (i < strLast) {\n                int cp = codePointAt(seq, i);\n                if (contains(cp, searchChars)) {\n                    return true;\n                }\n                i++;\n            }\n        } else {\n            if (contains(ch, searchChars)) {\n                return true;\n            }\n        }\n        if (i < searchLast) {\n            break;\n        }\n    }\n    return false;\n}\n\nprivate static boolean contains(int codePoint, char[] searchChars) {\n    for (int i = 0; i < searchChars.length;) {\n        if (Character.isHighSurrogate(searchChars[i])) {\n            if (i < searchChars.length - 1) {\n                int cp = Character.toCodePoint(searchChars[i], searchChars[i + 1]);\n                if (cp == codePoint) {\n                    return true;\n                }\n                i += 2;\n            } else {\n                break;\n            }\n        } else {\n            if (codePoint == searchChars[i]) {\n                return true;\n            }\n            i++;\n        }\n    }\n    return false;\n}\n\nprivate static boolean isHighSurrogate(char ch) {\n    return ch >= '\\uD800' && ch <= '\\uDBFF';\n}\n\nprivate static int codePointAt(CharSequence seq, int index) {\n    char high = seq.charAt(index);\n    char low = seq.charAt(index + 1);\n    return Character.toCodePoint(high, low);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..94e1d345 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,67 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence seq, char[] searchChars) {\n+    if (seq == null || searchChars == null) {\n+        return false;\n+    }\n+    int strLength = seq.length();\n+    int searchLength = searchChars.length;\n+    int strLast = strLength - 1;\n+    int searchLast = searchLength - 1;\n+    for (int i = 0; i < strLength; i++) {\n+        char ch = seq.charAt(i);\n+        if (isHighSurrogate(ch)) {\n+            if (i < strLast) {\n+                int cp = codePointAt(seq, i);\n+                if (contains(cp, searchChars)) {\n+                    return true;\n+                }\n+                i++;\n+            }\n+        } else {\n+            if (contains(ch, searchChars)) {\n+                return true;\n+            }\n+        }\n+        if (i < searchLast) {\n+            break;\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean contains(int codePoint, char[] searchChars) {\n+    for (int i = 0; i < searchChars.length;) {\n+        if (Character.isHighSurrogate(searchChars[i])) {\n+            if (i < searchChars.length - 1) {\n+                int cp = Character.toCodePoint(searchChars[i], searchChars[i + 1]);\n+                if (cp == codePoint) {\n+                    return true;\n+                }\n+                i += 2;\n+            } else {\n+                break;\n+            }\n+        } else {\n+            if (codePoint == searchChars[i]) {\n+                return true;\n+            }\n+            i++;\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean isHighSurrogate(char ch) {\n+    return ch >= '\\uD800' && ch <= '\\uDBFF';\n+}\n+\n+private static int codePointAt(CharSequence seq, int index) {\n+    char high = seq.charAt(index);\n+    char low = seq.charAt(index + 1);\n+    return Character.toCodePoint(high, low);\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}