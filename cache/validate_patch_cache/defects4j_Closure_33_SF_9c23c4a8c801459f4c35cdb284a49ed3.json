{
    "patch": "  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match contraints on anonymous types.\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    } else if (constraintObj.isFunctionType()) {\n      FunctionType funType = constraintObj.toMaybeFunctionType();\n      NominalType nominalType = funType.getInstanceType();\n      if (nominalType.isInterface()) {\n        InterfaceType interfaceType = nominalType.getInterface();\n        if (interfaceType.isGeneric()) {\n          if (funType.isGeneric()) {\n            Map<String, JSType> typeMap = funType.getTypeMap();\n            List<String> names = Lists.newArrayList(typeMap.keySet());\n            List<JSType> types = Lists.newArrayList(typeMap.values());\n            interfaceType = substituteGenerics(names, types,\n                interfaceType, nominalType.getTypeParameters());\n          }\n          Map<String, JSType> typeMap = inferTemplateTypeMap(interfaceType, nominalType);\n          for (String pname : typeMap.keySet()) {\n            JSType propType = typeMap.get(pname);\n            if (propType != null && !isPropertyTypeDeclared(pname)) {\n              JSType typeToInfer = propType;\n              if (!hasProperty(pname)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                    .getLeastSupertype(propType);\n              }\n              defineInferredProperty(pname, typeToInfer, null);\n            }\n          }\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..31d6cf3c 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -576,6 +576,33 @@ class PrototypeObjectType extends ObjectType {\n           defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n+    } else if (constraintObj.isFunctionType()) {\n+      FunctionType funType = constraintObj.toMaybeFunctionType();\n+      NominalType nominalType = funType.getInstanceType();\n+      if (nominalType.isInterface()) {\n+        InterfaceType interfaceType = nominalType.getInterface();\n+        if (interfaceType.isGeneric()) {\n+          if (funType.isGeneric()) {\n+            Map<String, JSType> typeMap = funType.getTypeMap();\n+            List<String> names = Lists.newArrayList(typeMap.keySet());\n+            List<JSType> types = Lists.newArrayList(typeMap.values());\n+            interfaceType = substituteGenerics(names, types,\n+                interfaceType, nominalType.getTypeParameters());\n+          }\n+          Map<String, JSType> typeMap = inferTemplateTypeMap(interfaceType, nominalType);\n+          for (String pname : typeMap.keySet()) {\n+            JSType propType = typeMap.get(pname);\n+            if (propType != null && !isPropertyTypeDeclared(pname)) {\n+              JSType typeToInfer = propType;\n+              if (!hasProperty(pname)) {\n+                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                    .getLeastSupertype(propType);\n+              }\n+              defineInferredProperty(pname, typeToInfer, null);\n+            }\n+          }\n+        }\n+      }\n     }\n   }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}