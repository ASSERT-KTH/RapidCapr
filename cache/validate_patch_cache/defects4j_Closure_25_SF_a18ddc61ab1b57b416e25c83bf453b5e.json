{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n\n    // Include a check to see if the constructor is null or undefined\n    if (constructor.getJSType() == null || constructor.getJSType().restrictByNotNullOrUndefined().isUnknownType()) {\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n        return scope;\n    }\n\n    // Visit the constructor node.\n    scope = traverse(constructor, scope);\n\n    // Get the type of the constructor\n    JSType constructorType = constructor.getJSType();\n\n    // Determine the type of the object being created by the new expression\n    JSType type = null;\n    if (constructorType.isFunctionType()) {\n        // If the constructor type is a function type\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct.isConstructor()) {\n            // If the function is a constructor function, then set the type of the new expression to the instance type\n            // of the constructor function\n            type = ct.getInstanceType();\n        } else {\n            // Otherwise, set the new expression type to the function type\n            type = constructorType;\n        }\n    } else {\n        // Otherwise, set the new expression type to the unknown type\n        type = getNativeType(UNKNOWN_TYPE);\n    }\n\n    // Set the type of the new expression node\n    n.setJSType(type);\n\n    // Visit the arguments of the constructor after the constructor itself so that the arguments are evaluated\n    // in the scope that existed after the constructor was called.\n    // Arguments are evaluated from left to right.\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..ad9c5324 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,51 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n+\n+    // Include a check to see if the constructor is null or undefined\n+    if (constructor.getJSType() == null || constructor.getJSType().restrictByNotNullOrUndefined().isUnknownType()) {\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n+        return scope;\n+    }\n+\n+    // Visit the constructor node.\n     scope = traverse(constructor, scope);\n+\n+    // Get the type of the constructor\n     JSType constructorType = constructor.getJSType();\n+\n+    // Determine the type of the object being created by the new expression\n     JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n+    if (constructorType.isFunctionType()) {\n+        // If the constructor type is a function type\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        if (ct.isConstructor()) {\n+            // If the function is a constructor function, then set the type of the new expression to the instance type\n+            // of the constructor function\n+            type = ct.getInstanceType();\n+        } else {\n+            // Otherwise, set the new expression type to the function type\n+            type = constructorType;\n         }\n-      }\n+    } else {\n+        // Otherwise, set the new expression type to the unknown type\n+        type = getNativeType(UNKNOWN_TYPE);\n     }\n+\n+    // Set the type of the new expression node\n     n.setJSType(type);\n+\n+    // Visit the arguments of the constructor after the constructor itself so that the arguments are evaluated\n+    // in the scope that existed after the constructor was called.\n+    // Arguments are evaluated from left to right.\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }\n+\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}