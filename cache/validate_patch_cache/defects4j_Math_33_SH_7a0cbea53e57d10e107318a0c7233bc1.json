{
    "patch": "        BigDecimal sum = BigDecimal.ZERO;\n        for (double value : list) {\n            sum = sum.add(BigDecimal.valueOf(value));\n        }\n        BigDecimal avg = sum.divide(BigDecimal.valueOf(list.size()), BigDecimal.ROUND_HALF_UP);\n        BigDecimal squaredDiffSum = BigDecimal.ZERO;\n        for (double value : list) {\n            BigDecimal diff = BigDecimal.valueOf(value).subtract(avg);\n            squaredDiffSum = squaredDiffSum.add(diff.multiply(diff));\n        }\n        BigDecimal stdev = BigDecimal.valueOf(Math.sqrt(\n            squaredDiffSum.divide(BigDecimal.valueOf(list.size()), BigDecimal.ROUND_HALF_UP).doubleValue()\n        ));\n        BigDecimal two = BigDecimal.valueOf(2);\n        BigDecimal value = stdev.multiply(two).add(avg).setScale(1, BigDecimal.ROUND_HALF_UP);\n>>> [ INFILL ] <<<",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..59b45a75e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -335,7 +335,22 @@ class SimplexTableau implements Serializable {\n         // positive cost non-artificial variables\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+        BigDecimal sum = BigDecimal.ZERO;\n+        for (double value : list) {\n+            sum = sum.add(BigDecimal.valueOf(value));\n+        }\n+        BigDecimal avg = sum.divide(BigDecimal.valueOf(list.size()), BigDecimal.ROUND_HALF_UP);\n+        BigDecimal squaredDiffSum = BigDecimal.ZERO;\n+        for (double value : list) {\n+            BigDecimal diff = BigDecimal.valueOf(value).subtract(avg);\n+            squaredDiffSum = squaredDiffSum.add(diff.multiply(diff));\n+        }\n+        BigDecimal stdev = BigDecimal.valueOf(Math.sqrt(\n+            squaredDiffSum.divide(BigDecimal.valueOf(list.size()), BigDecimal.ROUND_HALF_UP).doubleValue()\n+        ));\n+        BigDecimal two = BigDecimal.valueOf(2);\n+        BigDecimal value = stdev.multiply(two).add(avg).setScale(1, BigDecimal.ROUND_HALF_UP);\n+>>> [ INFILL ] <<<\n                 columnsToDrop.add(i);\n             }\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}