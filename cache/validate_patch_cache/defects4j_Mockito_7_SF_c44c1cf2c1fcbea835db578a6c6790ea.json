{
    "patch": "private void readTypeVariables() {\n    TypeToken<?> typeToken = TypeToken.of(typeVariable.getClass());\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    Type actualTypeArg = getActualTypeArgumentFor(typeVariable, typeToken);\n    if (actualTypeArg != null) {\n        registerTypeVariablesOn(actualTypeArg);\n    }\n}\n\nprivate Type getActualTypeArgumentFor(TypeVariable<?> typeVariable, TypeToken<?> typeToken) {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length == 0) {\n        return null;\n    }\n    Type typeArg = bounds[0];\n    if (typeArg instanceof TypeVariable<?>) {\n        TypeVariable<?> typeVarArg = (TypeVariable<?>) typeArg;\n        typeArg = typeToken.resolveType(typeVarArg).getType();\n    }\n    return typeArg;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..086d51fb7 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,30 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    TypeToken<?> typeToken = TypeToken.of(typeVariable.getClass());\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    Type actualTypeArg = getActualTypeArgumentFor(typeVariable, typeToken);\n+    if (actualTypeArg != null) {\n+        registerTypeVariablesOn(actualTypeArg);\n+    }\n+}\n+\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable, TypeToken<?> typeToken) {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length == 0) {\n+        return null;\n+    }\n+    Type typeArg = bounds[0];\n+    if (typeArg instanceof TypeVariable<?>) {\n+        TypeVariable<?> typeVarArg = (TypeVariable<?>) typeArg;\n+        typeArg = typeToken.resolveType(typeVarArg).getType();\n+    }\n+    return typeArg;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}