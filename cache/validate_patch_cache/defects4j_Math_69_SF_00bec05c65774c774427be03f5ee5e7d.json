{
    "patch": "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        out[i][i] = 0d; // diagonal elements should be zero\n        for (int j = i + 1; j < nVars; j++) { // only calculate upper triangle\n            double r = correlationMatrix.getEntry(i, j);\n            if (Math.abs(r) == 1) { // handle perfect correlations separately\n                out[i][j] = 0d;\n                out[j][i] = 0d;\n            } else {\n                double t = r * Math.sqrt(nObs - 2) / Math.sqrt(1 - r * r);\n                double p = 2 * (1 - tDistribution.cumulativeProbability(Math.abs(t)));\n                out[i][j] = p;\n                out[j][i] = p;\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\nindex 83b4c4130..24f9e33a8 100644\n--- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n@@ -157,23 +157,27 @@ public class PearsonsCorrelation {\n      * @return matrix of p-values\n      * @throws MathException if an error occurs estimating probabilities\n      */\n-    public RealMatrix getCorrelationPValues() throws MathException {\n-        TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n-        int nVars = correlationMatrix.getColumnDimension();\n-        double[][] out = new double[nVars][nVars];\n-        for (int i = 0; i < nVars; i++) {\n-            for (int j = 0; j < nVars; j++) {\n-                if (i == j) {\n-                    out[i][j] = 0d;\n-                } else {\n-                    double r = correlationMatrix.getEntry(i, j);\n-                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n-                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n-                }\n+public RealMatrix getCorrelationPValues() throws MathException {\n+    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n+    int nVars = correlationMatrix.getColumnDimension();\n+    double[][] out = new double[nVars][nVars];\n+    for (int i = 0; i < nVars; i++) {\n+        out[i][i] = 0d; // diagonal elements should be zero\n+        for (int j = i + 1; j < nVars; j++) { // only calculate upper triangle\n+            double r = correlationMatrix.getEntry(i, j);\n+            if (Math.abs(r) == 1) { // handle perfect correlations separately\n+                out[i][j] = 0d;\n+                out[j][i] = 0d;\n+            } else {\n+                double t = r * Math.sqrt(nObs - 2) / Math.sqrt(1 - r * r);\n+                double p = 2 * (1 - tDistribution.cumulativeProbability(Math.abs(t)));\n+                out[i][j] = p;\n+                out[j][i] = p;\n             }\n         }\n-        return new BlockRealMatrix(out);\n     }\n+    return new BlockRealMatrix(out);\n+}\n \n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}