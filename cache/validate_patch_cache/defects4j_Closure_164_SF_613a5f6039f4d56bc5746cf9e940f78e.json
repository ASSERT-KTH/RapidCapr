{
    "patch": "  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // Check if both this and that are instance of a function type.\n    // This check is here to ensure that a function type is only compared with another function type.\n    if (!(this instanceof ArrowType)) {\n      return false;\n    }\n    ArrowType thisFunctionType = (ArrowType) this;\n\n    // Check that the number of parameters match.\n    if (thisFunctionType.parameters.getChildCount() != that.parameters.getChildCount()) {\n      return false;\n    }\n\n    // Check if the return types are compatible.\n    if (!thisFunctionType.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // Check if the parameters types are compatible.\n    Node thisParam = thisFunctionType.parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n      \n      // Check if the this parameter is not optional but that parameter is optional.\n      if ((thisParamType != null && !thisParam.isOptional()) && (thatParamType == null || thatParam.isOptional())) {\n        return false;\n      }\n      \n      // Check if the types of the parameters are compatible.\n      if (thisParamType != null) {\n        if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n\n      // If both parameter lists are variable length, then we're done.\n      if (thisIsVarArgs && thatIsVarArgs) {\n        break;\n      }\n\n      // If the this parameter list has no more parameters, but the that parameter list\n      // still has at least one required parameter, then they aren't compatible.\n      if (!thisIsVarArgs && (thatParam.getNext() != null && !thatParam.getNext().isOptional())) {\n        return false;\n      }\n\n      thisParam = thisParam.getNext();\n      thatParam = thatParam.getNext();\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..1d33f367 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -84,41 +84,38 @@ final class ArrowType extends JSType {\n \n     ArrowType that = (ArrowType) other;\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+    // Check if both this and that are instance of a function type.\n+    // This check is here to ensure that a function type is only compared with another function type.\n+    if (!(this instanceof ArrowType)) {\n+      return false;\n+    }\n+    ArrowType thisFunctionType = (ArrowType) this;\n \n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n+    // Check that the number of parameters match.\n+    if (thisFunctionType.parameters.getChildCount() != that.parameters.getChildCount()) {\n       return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n+    // Check if the return types are compatible.\n+    if (!thisFunctionType.returnType.isSubtype(that.returnType)) {\n+      return false;\n+    }\n+\n+    // Check if the parameters types are compatible.\n+    Node thisParam = thisFunctionType.parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n+    while (thisParam != null) {\n       JSType thisParamType = thisParam.getJSType();\n       JSType thatParamType = thatParam.getJSType();\n+      \n+      // Check if the this parameter is not optional but that parameter is optional.\n+      if ((thisParamType != null && !thisParam.isOptional()) && (thatParamType == null || thatParam.isOptional())) {\n+        return false;\n+      }\n+      \n+      // Check if the types of the parameters are compatible.\n       if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n+        if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n           return false;\n         }\n       }\n@@ -126,29 +123,20 @@ final class ArrowType extends JSType {\n       boolean thisIsVarArgs = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n-\n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n+      // If both parameter lists are variable length, then we're done.\n+      if (thisIsVarArgs && thatIsVarArgs) {\n+        break;\n       }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n+      // If the this parameter list has no more parameters, but the that parameter list\n+      // still has at least one required parameter, then they aren't compatible.\n+      if (!thisIsVarArgs && (thatParam.getNext() != null && !thatParam.getNext().isOptional())) {\n+        return false;\n       }\n-    }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+      thisParam = thisParam.getNext();\n+      thatParam = thatParam.getNext();\n+    }\n \n     return true;\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}