{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    // if the time is more than an hour before the transition,\n    // go to the previous transition\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal == nextAdjusted) {\n        return offsetAdjusted;\n    } else if ((nextAdjusted - instantLocal) < DateTimeConstants.MILLIS_PER_HOUR) {\n        return offsetLocal;\n    } else {\n        return getOffset(nextLocal - 1);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5127a12b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    // if the time is more than an hour before the transition,\n+    // go to the previous transition\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal == nextAdjusted) {\n+        return offsetAdjusted;\n+    } else if ((nextAdjusted - instantLocal) < DateTimeConstants.MILLIS_PER_HOUR) {\n+        return offsetLocal;\n+    } else {\n+        return getOffset(nextLocal - 1);\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}