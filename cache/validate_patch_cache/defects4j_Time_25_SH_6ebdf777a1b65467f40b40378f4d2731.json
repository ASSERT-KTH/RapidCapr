{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if (offsetLocal > offsetAdjusted) { // gap in local time\n        long prevTransition = previousTransition(instantLocal - offsetAdjusted);\n        if (prevTransition == instantAdjusted - offsetLocal) { // adjacent to gap\n            return offsetLocal;\n        }\n        return offsetAdjusted; // within gap\n    } else { // overlap in local time\n        long nextTransition = nextTransition(instantLocal - offsetAdjusted);\n        if (nextTransition == instantAdjusted - offsetLocal) { // adjacent to overlap\n            return offsetLocal;\n        }\n        return offsetAdjusted; // within overlap\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3086f1f2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if (offsetLocal > offsetAdjusted) { // gap in local time\n+        long prevTransition = previousTransition(instantLocal - offsetAdjusted);\n+        if (prevTransition == instantAdjusted - offsetLocal) { // adjacent to gap\n+            return offsetLocal;\n+        }\n+        return offsetAdjusted; // within gap\n+    } else { // overlap in local time\n+        long nextTransition = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextTransition == instantAdjusted - offsetLocal) { // adjacent to overlap\n+            return offsetLocal;\n+        }\n+        return offsetAdjusted; // within overlap\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}