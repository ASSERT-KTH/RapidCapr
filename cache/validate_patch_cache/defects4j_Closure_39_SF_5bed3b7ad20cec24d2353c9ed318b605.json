{
    "patch": "private abstract static class PropertyType {\n  private static final PropertyType BOOLEAN = new PropertyType(){\n    @Override public String toString() { return \"boolean\"; }\n  };\n\n  private static final PropertyType NUMBER = new PropertyType(){\n    @Override public String toString() { return \"number\"; }\n  };\n\n  private static final PropertyType STRING = new PropertyType(){\n    @Override public String toString() { return \"string\"; }\n  };\n\n  private static final PropertyType OBJECT = new PropertyType(){\n    @Override public String toString() { return \"object\"; }\n  };\n\n  private static final PropertyType UNKNOWN = new PropertyType(){\n    @Override public String toString() { return \"?\"; }\n  };\n\n  /** Returns the string representation of the property type. */\n  @Override\n  public abstract String toStringHelper(boolean forAnnotations);\n\n  /** Returns a property type for a boolean. */\n  static PropertyType booleanType() {\n    return BOOLEAN;\n  }\n\n  /** Returns a property type for a number. */\n  static PropertyType numberType() {\n    return NUMBER;\n  }\n\n  /** Returns a property type for a string. */\n  static PropertyType stringType() {\n    return STRING;\n  }\n\n  /** Returns a property type for an object reference. */\n  static PropertyType objectType(String referenceName) {\n    return new PropertyType() {\n      @Override\n      public String toStringHelper(boolean forAnnotations) {\n        // Return the reference name or a placeholder value.\n        return referenceName != null ? referenceName : \"object\";\n      }\n    };\n  }\n\n  /** Returns a property type for an unknown type. */\n  static PropertyType unknownType() {\n    return UNKNOWN;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..d2e44457 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,62 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+private abstract static class PropertyType {\n+  private static final PropertyType BOOLEAN = new PropertyType(){\n+    @Override public String toString() { return \"boolean\"; }\n+  };\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n+  private static final PropertyType NUMBER = new PropertyType(){\n+    @Override public String toString() { return \"number\"; }\n+  };\n \n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n+  private static final PropertyType STRING = new PropertyType(){\n+    @Override public String toString() { return \"string\"; }\n+  };\n \n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n+  private static final PropertyType OBJECT = new PropertyType(){\n+    @Override public String toString() { return \"object\"; }\n+  };\n \n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n+  private static final PropertyType UNKNOWN = new PropertyType(){\n+    @Override public String toString() { return \"?\"; }\n+  };\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+  /** Returns the string representation of the property type. */\n+  @Override\n+  public abstract String toStringHelper(boolean forAnnotations);\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n-      }\n+  /** Returns a property type for a boolean. */\n+  static PropertyType booleanType() {\n+    return BOOLEAN;\n+  }\n \n-      sb.append(\"}\");\n+  /** Returns a property type for a number. */\n+  static PropertyType numberType() {\n+    return NUMBER;\n+  }\n \n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n-    }\n+  /** Returns a property type for a string. */\n+  static PropertyType stringType() {\n+    return STRING;\n+  }\n+\n+  /** Returns a property type for an object reference. */\n+  static PropertyType objectType(String referenceName) {\n+    return new PropertyType() {\n+      @Override\n+      public String toStringHelper(boolean forAnnotations) {\n+        // Return the reference name or a placeholder value.\n+        return referenceName != null ? referenceName : \"object\";\n+      }\n+    };\n+  }\n+\n+  /** Returns a property type for an unknown type. */\n+  static PropertyType unknownType() {\n+    return UNKNOWN;\n   }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: PrototypeObjectType is not abstract and does not override abstract method toStringHelper(boolean) in JSType",
    "test_result": "ERROR"
}