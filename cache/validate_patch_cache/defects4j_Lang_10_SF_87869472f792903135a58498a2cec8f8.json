{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    if (value == null) {\n        regex.append(\"\\\\b\\\\Q\\\\E\\\\b\");\n        return regex;\n    }\n    boolean inCharClass = false;\n    boolean charClassRange = false;\n    boolean wasWhite = false;\n    char lastChar = '\\0';\n    int length = value.length();\n    for (int i = 0; i < length; ++i) {\n        char c = value.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n        wasWhite = false;\n        switch (c) {\n            case '\\'':\n                if (unquote) {\n                    if (++i == value.length()) {\n                        regex.append(\"\\\\b\\\\Q\\\\E\\\\b\");\n                        return regex;\n                    }\n                    if (value.charAt(i-2) != '\\'') {\n                        // quotes not paired\n                        regex.append(\"\\\\b\\\\Q\\\\E\\\\b\");\n                        return regex;\n                    }\n                    c = value.charAt(i);\n                }\n                break;\n            case '\\\\':\n                if (inCharClass) {\n                    charClassRange = !charClassRange;\n                }\n                if (++i < length) {\n                    c = value.charAt(i);\n                    switch (c) {\n                        case 'b':\n                            if (inCharClass) {\n                                regex.append(\"\\\\\\\\b\");\n                            } else {\n                                if (Character.isLetterOrDigit(lastChar)) {\n                                    regex.append('\\\\');\n                                }\n                                regex.append(\"\\\\b\");\n                            }\n                            lastChar = '\\0';\n                            continue;\n                        case 'B':\n                            if (inCharClass) {\n                                regex.append(\"\\\\\\\\B\");\n                            } else {\n                                if (Character.isLetterOrDigit(lastChar)) {\n                                    regex.append('\\\\');\n                                }\n                                regex.append(\"\\\\B\");\n                            }\n                            lastChar = '\\0';\n                            continue;\n                        case 'd':\n                            regex.append(\"\\\\\\\\d\");\n                            lastChar = '\\0';\n                            continue;\n                        case 'D':\n                            regex.append(\"\\\\\\\\D\");\n                            lastChar = '\\0';\n                            continue;\n                        case 's':\n                            regex.append(\"\\\\\\\\s\");\n                            lastChar = '\\0';\n                            continue;\n                        case 'S':\n                            regex.append(\"\\\\\\\\S\");\n                            lastChar = '\\0';\n                            continue;\n                        case 'w':\n                            regex.append(\"\\\\\\\\w\");\n                            lastChar = '\\0';\n                            continue;\n                        case 'W':\n                            regex.append(\"\\\\\\\\W\");\n                            lastChar = '\\0';\n                            continue;\n                        default:\n                            regex.append('\\\\');\n                            regex.append(c);\n                            lastChar = c;\n                            continue;\n                    }\n                }\n                regex.append('\\\\');\n                regex.append(c);\n                lastChar = c;\n                continue;\n\n            case '[':\n                if (inCharClass) {\n                    regex.append('[');\n                }\n                if (lastChar != '\\\\') {\n                    inCharClass = true;\n                    charClassRange = false;\n                }\n                break;\n            case ']':\n                if (inCharClass && !charClassRange) {\n                    regex.append(']');\n                    inCharClass = false;\n                    continue;\n                }\n                break;\n            case '-':\n                if (inCharClass && !charClassRange) {\n                    charClassRange = true;\n                    regex.append('-');\n                } else {\n                    regex.append('\\\\');\n                    regex.append('-');\n                }\n                break;\n            case '^':\n                if (!inCharClass) {\n                    regex.append('\\\\');\n                }\n                regex.append('^');\n                break;\n            case '$':\n                if (i == length - 1 || (i == length - 2 && value.charAt(i + 1) == '\\\\')) {\n                    regex.append(\"\\\\z\");\n                    return regex;\n                }\n                regex.append('$');\n                break;\n            case '.':\n                if (lastChar == '\\\\') {\n                    regex.append(\"\\\\.\");\n                } else {\n                    regex.append('.');\n                }\n                break;\n            case '?':\n            case '+':\n            case '*':\n                if (inCharClass) {\n                    if (charClassRange) {\n                        regex.append('?');\n                    } else {\n                        regex.append(c);\n                    }\n                } else {\n                    if (lastChar == ')' || lastChar == '\\\\') {\n                        regex.append(c);\n                    } else {\n                        regex.append(\"(?:\").append(lastChar).append(c == '*' ? \"*\" : \"+\").append(\")?\");\n                    }\n                }\n                lastChar = '\\0';\n                continue;\n            case '|':\n            case '(':\n            case ')':\n                if (inCharClass) {\n                    regex.append(c);\n                } else {\n                    regex.append('\\\\');\n                    regex.append(c);\n                }\n                break;\n            default:\n                if (inCharClass) {\n                    if (charClassRange) {\n                        regex.append(c);\n                    } else {\n                        regex.append('\\\\');\n                        regex.append(c);\n                    }\n                } else {\n                    regex.append(c);\n                }\n                break;\n        }\n        lastChar = c;\n    }\n    if (inCharClass) {\n        regex.append(']');\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..4b44f372 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,199 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    if (value == null) {\n+        regex.append(\"\\\\b\\\\Q\\\\E\\\\b\");\n+        return regex;\n+    }\n+    boolean inCharClass = false;\n+    boolean charClassRange = false;\n+    boolean wasWhite = false;\n+    char lastChar = '\\0';\n+    int length = value.length();\n+    for (int i = 0; i < length; ++i) {\n+        char c = value.charAt(i);\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n+            continue;\n+        }\n+        wasWhite = false;\n+        switch (c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n+                if (unquote) {\n+                    if (++i == value.length()) {\n+                        regex.append(\"\\\\b\\\\Q\\\\E\\\\b\");\n+                        return regex;\n+                    }\n+                    if (value.charAt(i-2) != '\\'') {\n+                        // quotes not paired\n+                        regex.append(\"\\\\b\\\\Q\\\\E\\\\b\");\n                         return regex;\n                     }\n-                    c= value.charAt(i);\n+                    c = value.charAt(i);\n                 }\n                 break;\n-            case '?':\n+            case '\\\\':\n+                if (inCharClass) {\n+                    charClassRange = !charClassRange;\n+                }\n+                if (++i < length) {\n+                    c = value.charAt(i);\n+                    switch (c) {\n+                        case 'b':\n+                            if (inCharClass) {\n+                                regex.append(\"\\\\\\\\b\");\n+                            } else {\n+                                if (Character.isLetterOrDigit(lastChar)) {\n+                                    regex.append('\\\\');\n+                                }\n+                                regex.append(\"\\\\b\");\n+                            }\n+                            lastChar = '\\0';\n+                            continue;\n+                        case 'B':\n+                            if (inCharClass) {\n+                                regex.append(\"\\\\\\\\B\");\n+                            } else {\n+                                if (Character.isLetterOrDigit(lastChar)) {\n+                                    regex.append('\\\\');\n+                                }\n+                                regex.append(\"\\\\B\");\n+                            }\n+                            lastChar = '\\0';\n+                            continue;\n+                        case 'd':\n+                            regex.append(\"\\\\\\\\d\");\n+                            lastChar = '\\0';\n+                            continue;\n+                        case 'D':\n+                            regex.append(\"\\\\\\\\D\");\n+                            lastChar = '\\0';\n+                            continue;\n+                        case 's':\n+                            regex.append(\"\\\\\\\\s\");\n+                            lastChar = '\\0';\n+                            continue;\n+                        case 'S':\n+                            regex.append(\"\\\\\\\\S\");\n+                            lastChar = '\\0';\n+                            continue;\n+                        case 'w':\n+                            regex.append(\"\\\\\\\\w\");\n+                            lastChar = '\\0';\n+                            continue;\n+                        case 'W':\n+                            regex.append(\"\\\\\\\\W\");\n+                            lastChar = '\\0';\n+                            continue;\n+                        default:\n+                            regex.append('\\\\');\n+                            regex.append(c);\n+                            lastChar = c;\n+                            continue;\n+                    }\n+                }\n+                regex.append('\\\\');\n+                regex.append(c);\n+                lastChar = c;\n+                continue;\n+\n             case '[':\n+                if (inCharClass) {\n+                    regex.append('[');\n+                }\n+                if (lastChar != '\\\\') {\n+                    inCharClass = true;\n+                    charClassRange = false;\n+                }\n+                break;\n             case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n+                if (inCharClass && !charClassRange) {\n+                    regex.append(']');\n+                    inCharClass = false;\n+                    continue;\n+                }\n+                break;\n+            case '-':\n+                if (inCharClass && !charClassRange) {\n+                    charClassRange = true;\n+                    regex.append('-');\n+                } else {\n+                    regex.append('\\\\');\n+                    regex.append('-');\n+                }\n+                break;\n             case '^':\n+                if (!inCharClass) {\n+                    regex.append('\\\\');\n+                }\n+                regex.append('^');\n+                break;\n             case '$':\n+                if (i == length - 1 || (i == length - 2 && value.charAt(i + 1) == '\\\\')) {\n+                    regex.append(\"\\\\z\");\n+                    return regex;\n+                }\n+                regex.append('$');\n+                break;\n             case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                if (lastChar == '\\\\') {\n+                    regex.append(\"\\\\.\");\n+                } else {\n+                    regex.append('.');\n+                }\n+                break;\n+            case '?':\n+            case '+':\n+            case '*':\n+                if (inCharClass) {\n+                    if (charClassRange) {\n+                        regex.append('?');\n+                    } else {\n+                        regex.append(c);\n+                    }\n+                } else {\n+                    if (lastChar == ')' || lastChar == '\\\\') {\n+                        regex.append(c);\n+                    } else {\n+                        regex.append(\"(?:\").append(lastChar).append(c == '*' ? \"*\" : \"+\").append(\")?\");\n+                    }\n+                }\n+                lastChar = '\\0';\n+                continue;\n+            case '|':\n+            case '(':\n+            case ')':\n+                if (inCharClass) {\n+                    regex.append(c);\n+                } else {\n+                    regex.append('\\\\');\n+                    regex.append(c);\n+                }\n+                break;\n+            default:\n+                if (inCharClass) {\n+                    if (charClassRange) {\n+                        regex.append(c);\n+                    } else {\n+                        regex.append('\\\\');\n+                        regex.append(c);\n+                    }\n+                } else {\n+                    regex.append(c);\n+                }\n+                break;\n         }\n-        return regex;\n+        lastChar = c;\n+    }\n+    if (inCharClass) {\n+        regex.append(']');\n     }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: Locale uk failed with GGGG/yyyy/MMMM/dddd/hhhh/aaaa/EEEE/ZZZZ era BC",
    "test_result": "FAIL"
}