{
    "patch": "    if (parent != null) {\n      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isPrototypeProperty(lhs)) {\n        return false;\n      }\n\n      if (parent.getType() == Token.ASSIGN) {\n        Node lhsc = lhs;\n\n        while (lhsc != null && lhsc.isGetProp()) {\n          lhsc = lhsc.getFirstChild();\n        }\n\n        // Don't traverse functions being assigned to `goog.abstractMethod`.\n        if (lhsc != null && lhsc.isName() && isAbstractMethod(lhs)) {\n          return false;\n        }\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n        } else {\n          // Only traverse the right side if it's not an assignment to a prototype\n          // property or subproperty.\n          if (NodeUtil.isGet(lhs)) {\n            Node llhs = lhs.getFirstChild();\n            if (llhs.getType() == Token.GETPROP &&\n                (llhs.getLastChild().getString().equals(\"prototype\") || \n                 llhs.getLastChild().getString().equals(\"constructor\"))) {\n              return false;\n            }\n          }\n\n          // Don't traverse functions that are conditionally constructed.\n          if (!NodeUtil.evaluatesToLocalValue(rhs)) {\n            return false;\n          }\n        }\n      } else if (NodeUtil.isCall(parent) && parent.getFirstChild() == n) {\n        if (n.isQualifiedName()) {\n          if (isEnumPropertyDeclaration(parent)) {\n            // Enums don't have functions on individual properties.\n            return false;\n          }\n        } else if (!NodeUtil.evaluatesToLocalValue(n)) {\n          // Don't traverse functions that are conditionally constructed.\n          return false;\n        }\n      } else if (!(parent.isClass() && (n.isStaticMember() || n.isComputedProp()))) {\n        return false;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..c9ce50f2 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,62 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+    if (parent != null) {\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isPrototypeProperty(lhs)) {\n+        return false;\n+      }\n+\n+      if (parent.getType() == Token.ASSIGN) {\n+        Node lhsc = lhs;\n+\n+        while (lhsc != null && lhsc.isGetProp()) {\n+          lhsc = lhsc.getFirstChild();\n+        }\n+\n+        // Don't traverse functions being assigned to `goog.abstractMethod`.\n+        if (lhsc != null && lhsc.isName() && isAbstractMethod(lhs)) {\n+          return false;\n+        }\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+        } else {\n+          // Only traverse the right side if it's not an assignment to a prototype\n+          // property or subproperty.\n+          if (NodeUtil.isGet(lhs)) {\n+            Node llhs = lhs.getFirstChild();\n+            if (llhs.getType() == Token.GETPROP &&\n+                (llhs.getLastChild().getString().equals(\"prototype\") || \n+                 llhs.getLastChild().getString().equals(\"constructor\"))) {\n+              return false;\n+            }\n+          }\n+\n+          // Don't traverse functions that are conditionally constructed.\n+          if (!NodeUtil.evaluatesToLocalValue(rhs)) {\n+            return false;\n+          }\n+        }\n+      } else if (NodeUtil.isCall(parent) && parent.getFirstChild() == n) {\n+        if (n.isQualifiedName()) {\n+          if (isEnumPropertyDeclaration(parent)) {\n+            // Enums don't have functions on individual properties.\n+            return false;\n+          }\n+        } else if (!NodeUtil.evaluatesToLocalValue(n)) {\n+          // Don't traverse functions that are conditionally constructed.\n+          return false;\n+        }\n+      } else if (!(parent.isClass() && (n.isStaticMember() || n.isComputedProp()))) {\n+        return false;\n+      }\n+    }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}