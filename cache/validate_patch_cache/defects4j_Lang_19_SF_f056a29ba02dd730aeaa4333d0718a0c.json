{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    final int seqEnd = input.length();\n\n    int entityValue = -1;\n    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n        boolean hasSemicolon = false;\n\n        char firstChar = input.charAt(start);\n\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            if (start >= seqEnd) {\n                return 0;\n            }\n\n            while (start < seqEnd && input.charAt(start) != ';') {\n                start++;\n            }\n\n            if (start >= seqEnd || input.charAt(start) != ';') {\n                return 0;\n            }\n\n            hasSemicolon = true;\n        } else {\n            int end = start;\n\n            while (end < seqEnd && input.charAt(end) != ';') {\n                end++;\n            }\n\n            if (end >= seqEnd) {\n                return 0;\n            }\n\n            if (input.charAt(end) == ';') {\n                hasSemicolon = true;\n            }\n\n            try {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            } catch (NumberFormatException nfe) {\n                return 0;\n            }\n        }\n\n        if (!hasSemicolon) {\n            return 0;\n        }\n\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n            return start + (isHex ? 2 : 0) + (hasSemicolon ? 1 : 0) - index;\n        } else {\n            out.write(entityValue);\n            return start + (isHex ? 2 : 0) + (hasSemicolon ? 1 : 0) - index;\n        }\n    }\n\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..f12520af 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,70 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    final int seqEnd = input.length();\n+\n+    int entityValue = -1;\n+    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+        int start = index + 2;\n+        boolean isHex = false;\n+        boolean hasSemicolon = false;\n+\n+        char firstChar = input.charAt(start);\n+\n+        if (firstChar == 'x' || firstChar == 'X') {\n+            start++;\n+            isHex = true;\n+            if (start >= seqEnd) {\n+                return 0;\n+            }\n+\n+            while (start < seqEnd && input.charAt(start) != ';') {\n                 start++;\n-                isHex = true;\n+            }\n \n-                // Check there's more than just an x after the &#\n+            if (start >= seqEnd || input.charAt(start) != ';') {\n+                return 0;\n             }\n \n+            hasSemicolon = true;\n+        } else {\n             int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n+\n+            while (end < seqEnd && input.charAt(end) != ';') {\n                 end++;\n             }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+            if (end >= seqEnd) {\n                 return 0;\n             }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n+            if (input.charAt(end) == ';') {\n+                hasSemicolon = true;\n             }\n \n+            try {\n+                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n+            } catch (NumberFormatException nfe) {\n+                return 0;\n+            }\n+        }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        if (!hasSemicolon) {\n+            return 0;\n+        }\n+\n+        if (entityValue > 0xFFFF) {\n+            char[] chrs = Character.toChars(entityValue);\n+            out.write(chrs[0]);\n+            out.write(chrs[1]);\n+            return start + (isHex ? 2 : 0) + (hasSemicolon ? 1 : 0) - index;\n+        } else {\n+            out.write(entityValue);\n+            return start + (isHex ? 2 : 0) + (hasSemicolon ? 1 : 0) - index;\n         }\n-        return 0;\n     }\n+\n+    return 0;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape expected:<[\u0080\u009f]> but was:<[\uffffx9F;]>",
    "test_result": "FAIL"
}