{
    "patch": "        if (block.isFunction) {\n          break;\n        } else if (block.isLoop && block.getUniqueSuccessor() == null) {\n          return false;\n        } else if (block.getUniqueSuccessor() != null && block.getUniqueSuccessor().isExceptionHandler()) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..a3a84031 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop && block.getUniqueSuccessor() == null) {\n+          return false;\n+        } else if (block.getUniqueSuccessor() != null && block.getUniqueSuccessor().isExceptionHandler()) {\n+          return false;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}