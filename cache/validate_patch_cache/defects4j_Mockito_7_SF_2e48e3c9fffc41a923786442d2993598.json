{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds == null || bounds.length == 0) {\n        return;\n    }\n    Set<TypeVariable<?>> visited = new HashSet<>();\n    for (Type bound : bounds) {\n        registerTypeVariablesOn(bound, visited);\n    }\n    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable), visited);\n}\n\nprivate void registerTypeVariablesOn(Type type, Set<TypeVariable<?>> visited) {\n    if (type instanceof TypeVariable) {\n        TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n        if (!visited.contains(typeVariable)) {\n            visited.add(typeVariable);\n            Type[] bounds = typeVariable.getBounds();\n            if (bounds != null && bounds.length > 0) {\n                for (Type bound : bounds) {\n                    registerTypeVariablesOn(bound, visited);\n                }\n            }\n            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable), visited);\n        }\n    } else if (type instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) type;\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        if (actualTypeArguments != null && actualTypeArguments.length > 0) {\n            for (Type actualTypeArgument : actualTypeArguments) {\n                registerTypeVariablesOn(actualTypeArgument, visited);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..f4f905a19 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,42 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds == null || bounds.length == 0) {\n+        return;\n+    }\n+    Set<TypeVariable<?>> visited = new HashSet<>();\n+    for (Type bound : bounds) {\n+        registerTypeVariablesOn(bound, visited);\n+    }\n+    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable), visited);\n+}\n+\n+private void registerTypeVariablesOn(Type type, Set<TypeVariable<?>> visited) {\n+    if (type instanceof TypeVariable) {\n+        TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n+        if (!visited.contains(typeVariable)) {\n+            visited.add(typeVariable);\n+            Type[] bounds = typeVariable.getBounds();\n+            if (bounds != null && bounds.length > 0) {\n+                for (Type bound : bounds) {\n+                    registerTypeVariablesOn(bound, visited);\n+                }\n+            }\n+            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable), visited);\n+        }\n+    } else if (type instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) type;\n+        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+        if (actualTypeArguments != null && actualTypeArguments.length > 0) {\n+            for (Type actualTypeArgument : actualTypeArguments) {\n+                registerTypeVariablesOn(actualTypeArgument, visited);\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}