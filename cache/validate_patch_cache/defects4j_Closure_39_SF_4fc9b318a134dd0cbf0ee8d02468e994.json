{
    "patch": "public boolean canBeCalled() {\n    return !isRegexpType();\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n        return getReferenceName();\n    } else if (prettyPrint) {\n        // Don't pretty print recursively.\n        prettyPrint = false;\n\n        // Use a tree set so that the properties are sorted.\n        Set<String> propertyNames = Sets.newTreeSet();\n        for (ObjectType current = this;\n                current != null && !current.isNativeObjectType() &&\n                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n                current = current.getImplicitPrototype()) {\n            propertyNames.addAll(current.getOwnPropertyNames());\n        }\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n\n        int numProperties = 0;\n        int numPrintedProperties = 0;\n        for (String property : propertyNames) {\n            if (numPrintedProperties >= MAX_PRETTY_PRINTED_PROPERTIES) {\n                sb.append(\", ...\");\n                break;\n            }\n\n            JSType propertyType = getPropertyType(property);\n\n            // Skip constructors, functions that have `@interface` annotations, and records.\n            if (propertyType instanceof FunctionType &&\n                ((!forAnnotations && !((FunctionType) propertyType).isConstructor()) ||\n                (forAnnotations && ((FunctionType) propertyType).isConstructor() &&\n                        ((ObjectType) propertyType).isRecordType()))) {\n                continue;\n            } else if (propertyType.isConstructor() && ((ObjectType) propertyType).isRecordType()) {\n                continue;\n            }\n\n            if (numProperties > 0) {\n                sb.append(\", \");\n            }\n\n            sb.append(property);\n            sb.append(\": \");\n\n            if (propertyType instanceof ObjectType) {\n                // Recursively call toStringHelper.\n                sb.append(((ObjectType) propertyType).toStringHelper(forAnnotations));\n            } else {\n                sb.append(propertyType.toString());\n            }\n\n            ++numProperties;\n            ++numPrintedProperties;\n        }\n\n        sb.append(\"}\");\n\n        prettyPrint = true;\n        return sb.toString();\n    } else {\n        return \"{...}\";\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..cf7db849 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,76 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+public boolean canBeCalled() {\n+    return !isRegexpType();\n+}\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n     if (hasReferenceName()) {\n-      return getReferenceName();\n+        return getReferenceName();\n     } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n-\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n-\n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+        // Don't pretty print recursively.\n+        prettyPrint = false;\n+\n+        // Use a tree set so that the properties are sorted.\n+        Set<String> propertyNames = Sets.newTreeSet();\n+        for (ObjectType current = this;\n+                current != null && !current.isNativeObjectType() &&\n+                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+                current = current.getImplicitPrototype()) {\n+            propertyNames.addAll(current.getOwnPropertyNames());\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"{\");\n+\n+        int numProperties = 0;\n+        int numPrintedProperties = 0;\n+        for (String property : propertyNames) {\n+            if (numPrintedProperties >= MAX_PRETTY_PRINTED_PROPERTIES) {\n+                sb.append(\", ...\");\n+                break;\n+            }\n+\n+            JSType propertyType = getPropertyType(property);\n+\n+            // Skip constructors, functions that have `@interface` annotations, and records.\n+            if (propertyType instanceof FunctionType &&\n+                ((!forAnnotations && !((FunctionType) propertyType).isConstructor()) ||\n+                (forAnnotations && ((FunctionType) propertyType).isConstructor() &&\n+                        ((ObjectType) propertyType).isRecordType()))) {\n+                continue;\n+            } else if (propertyType.isConstructor() && ((ObjectType) propertyType).isRecordType()) {\n+                continue;\n+            }\n+\n+            if (numProperties > 0) {\n+                sb.append(\", \");\n+            }\n+\n+            sb.append(property);\n+            sb.append(\": \");\n+\n+            if (propertyType instanceof ObjectType) {\n+                // Recursively call toStringHelper.\n+                sb.append(((ObjectType) propertyType).toStringHelper(forAnnotations));\n+            } else {\n+                sb.append(propertyType.toString());\n+            }\n+\n+            ++numProperties;\n+            ++numPrintedProperties;\n         }\n-      }\n \n-      sb.append(\"}\");\n+        sb.append(\"}\");\n \n-      prettyPrint = true;\n-      return sb.toString();\n+        prettyPrint = true;\n+        return sb.toString();\n     } else {\n-      return \"{...}\";\n+        return \"{...}\";\n     }\n-  }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{b: {[c: function (): undefined]}}> but was:<{b: {[]}}>",
    "test_result": "FAIL"
}