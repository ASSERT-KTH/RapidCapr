{
    "patch": "```\npublic static float max(final float a, final float b) {\n    if (a == Float.POSITIVE_INFINITY || b == Float.NEGATIVE_INFINITY || Float.isNaN(a) || Float.isNaN(b)) {\n        return Float.NaN;\n    } else if (a == b) {\n        return a;\n    } else {\n        return (a > b) ? a : b;\n    }\n}\n```\n\nThis alternative fix function adds checks for positive infinity and negative infinity values to handle cases where the input values are outside of the valid range of floating point numbers. It also simplifies the code by removing the unnecessary ternary statement that checks for `Float.isNaN(a + b)`.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/FastMath.java b/src/main/java/org/apache/commons/math/util/FastMath.java\nindex 8cba4d484..67c2afb07 100644\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n@@ -3478,9 +3478,19 @@ public class FastMath {\n      * @param b second value\n      * @return b if a is lesser or equal to b, a otherwise\n      */\n-    public static float max(final float a, final float b) {\n-        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n+```\n+public static float max(final float a, final float b) {\n+    if (a == Float.POSITIVE_INFINITY || b == Float.NEGATIVE_INFINITY || Float.isNaN(a) || Float.isNaN(b)) {\n+        return Float.NaN;\n+    } else if (a == b) {\n+        return a;\n+    } else {\n+        return (a > b) ? a : b;\n     }\n+}\n+```\n+\n+This alternative fix function adds checks for positive infinity and negative infinity values to handle cases where the input values are outside of the valid range of floating point numbers. It also simplifies the code by removing the unnecessary ternary statement that checks for `Float.isNaN(a + b)`.\n \n     /** Compute the maximum of two values\n      * @param a first value",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}