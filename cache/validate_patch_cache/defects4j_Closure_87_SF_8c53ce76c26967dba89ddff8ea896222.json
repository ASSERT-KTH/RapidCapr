{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n    Node child = n.getFirstChild();\n    Node parent = n.getParent();\n    Token parentType = parent != null ? parent.getType() : null;\n    boolean parentIsBlock = parentType == Token.BLOCK;\n\n    if (parentType == Token.EXPR_RESULT) {\n      return false;\n    }\n\n    if (parentIsBlock && child.getType() == Token.EXPR_RESULT) {\n      return false;\n    }\n\n    if (NodeUtil.isFunctionExpression(child) || NodeUtil.isFunctionDeclaration(child)) {\n      return false;\n    }\n\n    if (!NodeUtil.mayHaveSideEffects(child)) {\n      if (child.getType() == Token.CALL || child.getType() == Token.GETPROP || child.getType() == Token.GETELEM) {\n        if (parentType == Token.CALL || parentType == Token.NEW) {\n          return false;\n        }\n        if (parentIsBlock) {\n          Node grandParent = parent.getParent();\n          if (grandParent != null && NodeUtil.isCallOrNew(grandParent)) {\n            return false;\n          }\n          if (parent.hasChildren() && NodeUtil.isAssignmentOp(parent.getFirstChild())) {\n            return false;\n          }\n          return true;\n        }\n      } else if (child.getType() == Token.STRING) {\n        // Don't fold strings that are not in a call.\n        return parent != null && (parentType == Token.CALL || parentType == Token.NEW);\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..61295b76 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,48 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n+    Node child = n.getFirstChild();\n+    Node parent = n.getParent();\n+    Token parentType = parent != null ? parent.getType() : null;\n+    boolean parentIsBlock = parentType == Token.BLOCK;\n+\n+    if (parentType == Token.EXPR_RESULT) {\n+      return false;\n     }\n \n-    return false;\n+    if (parentIsBlock && child.getType() == Token.EXPR_RESULT) {\n+      return false;\n+    }\n+\n+    if (NodeUtil.isFunctionExpression(child) || NodeUtil.isFunctionDeclaration(child)) {\n+      return false;\n+    }\n+\n+    if (!NodeUtil.mayHaveSideEffects(child)) {\n+      if (child.getType() == Token.CALL || child.getType() == Token.GETPROP || child.getType() == Token.GETELEM) {\n+        if (parentType == Token.CALL || parentType == Token.NEW) {\n+          return false;\n+        }\n+        if (parentIsBlock) {\n+          Node grandParent = parent.getParent();\n+          if (grandParent != null && NodeUtil.isCallOrNew(grandParent)) {\n+            return false;\n+          }\n+          if (parent.hasChildren() && NodeUtil.isAssignmentOp(parent.getFirstChild())) {\n+            return false;\n+          }\n+          return true;\n+        }\n+      } else if (child.getType() == Token.STRING) {\n+        // Don't fold strings that are not in a call.\n+        return parent != null && (parentType == Token.CALL || parentType == Token.NEW);\n+      }\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}