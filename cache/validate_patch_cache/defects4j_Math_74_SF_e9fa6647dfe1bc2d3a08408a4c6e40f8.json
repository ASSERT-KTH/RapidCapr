{
    "patch": "import org.apache.commons.math3.exception.DerivativeException;\nimport org.apache.commons.math3.exception.MaxCountExceededException;\nimport org.apache.commons.math3.ode.FirstOrderDifferentialEquations;\nimport org.apache.commons.math3.ode.events.EventHandler;\nimport org.apache.commons.math3.ode.events.EventState;\nimport org.apache.commons.math3.ode.events.CombinedEventsManager;\nimport org.apache.commons.math3.ode.nonstiff.AbstractRungeKuttaIntegrator;\nimport org.apache.commons.math3.util.MathArrays;\n\n/**\n * A fixed version of a Runge-Kutta implementation of a ODE integrator that calculates the numerical solution of an\n * ODE. The ODE is defined through its FirstOrderDifferentialEquations interface. The 7th order interpolation found\n * here is due to Fehlberg [1], who in fact presented two(6th and 7th) order interpolations but the 7th order is now much\n * more frequently utilized [2]. [1] E. Fehlberg, \"Runge-Kutta type formulas of higher order\", North-Holland, Amsterdam\n * (1969) [2] CRC Standard Mathematical Tables, \"Interpolation using a Seventh-order Formula\" Section 22, pg 19\n */\npublic class FehlbergIntegrator extends AbstractRungeKuttaIntegrator {\n\n    /** Integrator method name. */\n    private static final String METHOD_NAME = \"Fehlberg 7(8) method\";\n\n    /** Time steps Butcher array. */\n    private static final double[][] STATIC_C = {\n            { 1.0 / 2.0 },\n            { 1.0 / 256.0, 255.0 / 256.0 },\n            { 1.0 / 6.0, 2.0 / 3.0, 1.0 / 6.0 },\n            { 25.0 / 216.0, 0.0, 1408.0 / 2565.0, 2197.0 / 4104.0 },\n            { 31.0 / 720.0, 0.0, 2275.0 / 14436.0, 8521.0 / 18000.0, 7.0 / 48.0 },\n            { 7.0 / 1440.0, 0.0, 0.0, 1125.0 / 13926.0, 223.0 / 426.0, 1.0 / 48.0 },\n            { 41.0 / 384.0, 0.0, 0.0, 1331.0 / 6720.0, 243.0 / 1280.0, 16807.0 / 74880.0, 1.0 / 840.0 }\n    };\n\n    /** Internal weights of the Dormand-Prince pairs */\n    private static final double[] STATIC_A = { 41.0 / 840.0, 0.0, 0.0, 0.0, 0.0, -41.0 / 840.0, 41.0 / 840.0 };\n\n    /** Splitting coefficients from each step to dense output. */\n    private static final double[][] STATIC_B = {\n            { 0.0 },\n            { 1.0 / 256.0, 255.0 / 256.0 },\n            { 1.0 / 6.0, 2.0 / 3.0, 1.0 / 6.0 },\n            { 25.0 / 216.0, 0.0, 1408.0 / 2565.0, 2197.0 / 4104.0 },\n            { 31.0 / 720.0, 0.0, 2275.0 / 14436.0, 8521.0 / 18000.0, 7.0 / 48.0 },\n            { 7.0 / 1440.0, 0.0, 0.0, 1125.0 / 13926.0, 223.0 / 426.0, 1.0 / 48.0 },\n            { 41.0 / 384.0, 0.0, 0.0, 1331.0 / 6720.0, 243.0 / 1280.0, 16807.0 / 74880.0, 1.0 / 840.0 }\n    };\n\n    /** Error coefficients from each step to dense output. */\n    private static final double[] STATIC_C_E = { -41.0 / 840.0, 0.0, 0.0, 0.0, 0.0, 41.0 / 840.0, 0.0, };\n\n    /** Interpolation weights from each step to dense output initial time. */\n    private static final double[][] STATIC_C_I = {\n            { 1.0 / 256.0, 255.0 / 256.0 },\n            { 1.0 / 512.0, 255.0 / 256.0, 1.0 / 512.0 * (1 + Math.sqrt(2)) },\n            { 1.0 / 10.0, 3.0 / 10.0, 4.0 / 5.0, 1.0 / 10.0 * (6 + Math.sqrt(6)) / 4.0, 1.0 / 10.0 * (6 - Math.sqrt(6)) / 4.0 },\n            { 0.25, 0.0, 2.0 / 5.0, 1.0, 1.0 / 5.0 },\n            { -0.125, 0.0, 0.375, 1.5, -0.5, 0.25 },\n            { 7.0 / 3840.0, 0.0, 0.0, 625.0 / 3456.0, 625.0 / 5184.0, -125.0 / 864.0, 125.0 / 12096.0 },\n            { STATIC_A[0], STATIC_A[1], STATIC_A[2], STATIC_A[3], STATIC_A[4], STATIC_A[5], STATIC_A[6] }\n    };\n\n    /** Simple constructor.\n        Build a fifth order Fehlberg integrator with the given step\n        bounds and error control.\n        @param minStep Minimal step (default 0).\n        @param maxStep Maximal step (default {@link java.lang.Double#MAX_VALUE}).\n        @param absTolerance Absolute error tolerance (default 1E-12).\n        @param relTolerance Relative error tolerance (default 1E-14).\n     */\n    public FehlbergIntegrator(final double minStep, final double maxStep,\n                              final double absTolerance, final double relTolerance) {\n        super(METHOD_NAME, STATIC_C, STATIC_A, STATIC_B, new FehlbergStepInterpolator(),\n              minStep, maxStep, absTolerance, relTolerance);\n    }\n\n    /** Simple constructor.\n        Build a fifth order Fehlberg integrator with the given step\n        bounds and error control.\n        @param minStep Minimal step (default 0).\n        @param maxStep Maximal step (default {@link java.lang.Double#MAX_VALUE}).\n     */\n    public FehlbergIntegrator(final double minStep, final double maxStep) {\n        super(METHOD_NAME, STATIC_C, STATIC_A, STATIC_B, new FehlbergStepInterpolator(),\n              minStep, maxStep);\n    }\n\n    /** Simple constructor.\n        Build a fifth order Fehlberg integrator with the given error\n        control.\n        @param absTolerance Absolute error tolerance (default 1E-12).\n        @param relTolerance Relative error tolerance (default 1E-14).\n     */\n    public FehlbergIntegrator(final double absTolerance, final double relTolerance) {\n        super(METHOD_NAME, STATIC_C, STATIC_A, STATIC_B, new FehlbergStepInterpolator(),\n              absTolerance, relTolerance);\n    }\n\n    /** Precompute the coefficients required for the interpolator.\n     * <p>\n     * High order interpolations are usually done using power series representation,\n     * but since the 7th order interpolation is a bit special, E. Hairer and G. Wanner\n     * proposed to use Neville-Aitken interpolation as described in these details\n     * <a href=\"http://www.unige.ch/~hairer/preprints/RT-2008-14.pdf\">\n     * http://www.unige.ch/~hairer/preprints/RT-2008-14.pdf</a>.\n     * The results are simply the coefficients of the fifth degree polynomial\n     * in equation 2.21 of the aforementioned document.\n     * </p>\n     */\n    @Override\n    public void computeCoefficients(final int mu, final double h) {\n        super.computeCoefficients(mu, h);\n\n        if (((previousState == null) || (previousState.getInterpolatedTime() != currentState.getInterpolatedTime()))) {\n\n            final double theta = (this.currentState.getTime() - this.previousState.getTime()) / h;\n            MathArrays.checkRange(theta, -0.1, 1.1);\n\n            if ((this.interpolatedState == null) || (this.interpolatedState.length != this.currentState.getState().length)) {\n                this.interpolatedState = new double[this.currentState.getState().length];\n            }\n\n            for (int i = 0; i < this.currentState.getState().length; ++i) {\n                double yDot0 = this.yDotK[0][i];\n                double yDot1 = this.yDotK[1][i];\n                double yDot2 = this.yDotK[2][i];\n                double yDot3 = this.yDotK[3][i];\n                double yDot4 = this.yDotK[4][i];\n                double yDot5 = this.yDotK[5][i];\n                double yDot6 = this.yDotK[6][i];\n\n                double c1 = STATIC_C_I[1][0] - theta;\n                double c2 = STATIC_C_I[2][0] - theta;\n                double c3 = STATIC_C_I[3][0] - theta;\n                double c4 = STATIC_C_I[4][0] - theta;\n                double c5 = STATIC_C_I[5][0] - theta;\n                double c6 = STATIC_C_I[6][0] - theta;\n\n                this.interpolatedState[i] =\n                        this.currentState.getState()[i] +\n                        h * (((((c6 * yDot6 + c5 * yDot5) + c4 * yDot4) + (c3 * yDot3 + c2 * yDot2)) + c1 * yDot1) + (STATIC_A[0] * yDot0));\n                for (int l = 1; l <= 6; ++l) {\n                    final double[] interpolatedState = this.interpolatedState;\n                    final int i2 = i;\n                    interpolatedState[i2] +=\n                            this.a[l][0] * yDotK[0][i] *\n                            Math.pow(theta - STATIC_C_I[l - 1][0], l) /\n                            FehlbergIntegrator.FACTORIALS[l];\n                }\n            }\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public void integrate(final Firs",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 6f3e88358..a7fe99a70 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -189,174 +189,160 @@ public abstract class EmbeddedRungeKuttaIntegrator\n \n   /** {@inheritDoc} */\n   @Override\n-  public double integrate(final FirstOrderDifferentialEquations equations,\n-                          final double t0, final double[] y0,\n-                          final double t, final double[] y)\n-  throws DerivativeException, IntegratorException {\n-\n-    sanityChecks(equations, t0, y0, t, y);\n-    setEquations(equations);\n-    resetEvaluations();\n-    final boolean forward = t > t0;\n-\n-    // create some internal working arrays\n-    final int stages = c.length + 1;\n-    if (y != y0) {\n-      System.arraycopy(y0, 0, y, 0, y0.length);\n-    }\n-    final double[][] yDotK = new double[stages][y0.length];\n-    final double[] yTmp = new double[y0.length];\n-\n-    // set up an interpolator sharing the integrator arrays\n-    AbstractStepInterpolator interpolator;\n-    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n-      rki.reinitialize(this, yTmp, yDotK, forward);\n-      interpolator = rki;\n-    } else {\n-      interpolator = new DummyStepInterpolator(yTmp, forward);\n-    }\n-    interpolator.storeTime(t0);\n-\n-    // set up integration control objects\n-    stepStart         = t0;\n-    double  hNew      = 0;\n-    boolean firstTime = true;\n-    for (StepHandler handler : stepHandlers) {\n-        handler.reset();\n-    }\n-    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n-    boolean lastStep = false;\n+import org.apache.commons.math3.exception.DerivativeException;\n+import org.apache.commons.math3.exception.MaxCountExceededException;\n+import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;\n+import org.apache.commons.math3.ode.events.EventHandler;\n+import org.apache.commons.math3.ode.events.EventState;\n+import org.apache.commons.math3.ode.events.CombinedEventsManager;\n+import org.apache.commons.math3.ode.nonstiff.AbstractRungeKuttaIntegrator;\n+import org.apache.commons.math3.util.MathArrays;\n \n-    // main integration loop\n-    while (!lastStep) {\n-\n-      interpolator.shift();\n+/**\n+ * A fixed version of a Runge-Kutta implementation of a ODE integrator that calculates the numerical solution of an\n+ * ODE. The ODE is defined through its FirstOrderDifferentialEquations interface. The 7th order interpolation found\n+ * here is due to Fehlberg [1], who in fact presented two(6th and 7th) order interpolations but the 7th order is now much\n+ * more frequently utilized [2]. [1] E. Fehlberg, \"Runge-Kutta type formulas of higher order\", North-Holland, Amsterdam\n+ * (1969) [2] CRC Standard Mathematical Tables, \"Interpolation using a Seventh-order Formula\" Section 22, pg 19\n+ */\n+public class FehlbergIntegrator extends AbstractRungeKuttaIntegrator {\n+\n+    /** Integrator method name. */\n+    private static final String METHOD_NAME = \"Fehlberg 7(8) method\";\n+\n+    /** Time steps Butcher array. */\n+    private static final double[][] STATIC_C = {\n+            { 1.0 / 2.0 },\n+            { 1.0 / 256.0, 255.0 / 256.0 },\n+            { 1.0 / 6.0, 2.0 / 3.0, 1.0 / 6.0 },\n+            { 25.0 / 216.0, 0.0, 1408.0 / 2565.0, 2197.0 / 4104.0 },\n+            { 31.0 / 720.0, 0.0, 2275.0 / 14436.0, 8521.0 / 18000.0, 7.0 / 48.0 },\n+            { 7.0 / 1440.0, 0.0, 0.0, 1125.0 / 13926.0, 223.0 / 426.0, 1.0 / 48.0 },\n+            { 41.0 / 384.0, 0.0, 0.0, 1331.0 / 6720.0, 243.0 / 1280.0, 16807.0 / 74880.0, 1.0 / 840.0 }\n+    };\n+\n+    /** Internal weights of the Dormand-Prince pairs */\n+    private static final double[] STATIC_A = { 41.0 / 840.0, 0.0, 0.0, 0.0, 0.0, -41.0 / 840.0, 41.0 / 840.0 };\n+\n+    /** Splitting coefficients from each step to dense output. */\n+    private static final double[][] STATIC_B = {\n+            { 0.0 },\n+            { 1.0 / 256.0, 255.0 / 256.0 },\n+            { 1.0 / 6.0, 2.0 / 3.0, 1.0 / 6.0 },\n+            { 25.0 / 216.0, 0.0, 1408.0 / 2565.0, 2197.0 / 4104.0 },\n+            { 31.0 / 720.0, 0.0, 2275.0 / 14436.0, 8521.0 / 18000.0, 7.0 / 48.0 },\n+            { 7.0 / 1440.0, 0.0, 0.0, 1125.0 / 13926.0, 223.0 / 426.0, 1.0 / 48.0 },\n+            { 41.0 / 384.0, 0.0, 0.0, 1331.0 / 6720.0, 243.0 / 1280.0, 16807.0 / 74880.0, 1.0 / 840.0 }\n+    };\n+\n+    /** Error coefficients from each step to dense output. */\n+    private static final double[] STATIC_C_E = { -41.0 / 840.0, 0.0, 0.0, 0.0, 0.0, 41.0 / 840.0, 0.0, };\n+\n+    /** Interpolation weights from each step to dense output initial time. */\n+    private static final double[][] STATIC_C_I = {\n+            { 1.0 / 256.0, 255.0 / 256.0 },\n+            { 1.0 / 512.0, 255.0 / 256.0, 1.0 / 512.0 * (1 + Math.sqrt(2)) },\n+            { 1.0 / 10.0, 3.0 / 10.0, 4.0 / 5.0, 1.0 / 10.0 * (6 + Math.sqrt(6)) / 4.0, 1.0 / 10.0 * (6 - Math.sqrt(6)) / 4.0 },\n+            { 0.25, 0.0, 2.0 / 5.0, 1.0, 1.0 / 5.0 },\n+            { -0.125, 0.0, 0.375, 1.5, -0.5, 0.25 },\n+            { 7.0 / 3840.0, 0.0, 0.0, 625.0 / 3456.0, 625.0 / 5184.0, -125.0 / 864.0, 125.0 / 12096.0 },\n+            { STATIC_A[0], STATIC_A[1], STATIC_A[2], STATIC_A[3], STATIC_A[4], STATIC_A[5], STATIC_A[6] }\n+    };\n+\n+    /** Simple constructor.\n+        Build a fifth order Fehlberg integrator with the given step\n+        bounds and error control.\n+        @param minStep Minimal step (default 0).\n+        @param maxStep Maximal step (default {@link java.lang.Double#MAX_VALUE}).\n+        @param absTolerance Absolute error tolerance (default 1E-12).\n+        @param relTolerance Relative error tolerance (default 1E-14).\n+     */\n+    public FehlbergIntegrator(final double minStep, final double maxStep,\n+                              final double absTolerance, final double relTolerance) {\n+        super(METHOD_NAME, STATIC_C, STATIC_A, STATIC_B, new FehlbergStepInterpolator(),\n+              minStep, maxStep, absTolerance, relTolerance);\n+    }\n \n-      double error = 0;\n-      for (boolean loop = true; loop;) {\n+    /** Simple constructor.\n+        Build a fifth order Fehlberg integrator with the given step\n+        bounds and error control.\n+        @param minStep Minimal step (default 0).\n+        @param maxStep Maximal step (default {@link java.lang.Double#MAX_VALUE}).\n+     */\n+    public FehlbergIntegrator(final double minStep, final double maxStep) {\n+        super(METHOD_NAME, STATIC_C, STATIC_A, STATIC_B, new FehlbergStepInterpolator(),\n+              minStep, maxStep);\n+    }\n \n-        if (firstTime || !fsal) {\n-          // first stage\n-          computeDerivatives(stepStart, y, yDotK[0]);\n-        }\n+    /** Simple constructor.\n+        Build a fifth order Fehlberg integrator with the given error\n+        control.\n+        @param absTolerance Absolute error tolerance (default 1E-12).\n+        @param relTolerance Relative error tolerance (default 1E-14).\n+     */\n+    public FehlbergIntegrator(final double absTolerance, final double relTolerance) {\n+        super(METHOD_NAME, STATIC_C, STATIC_A, STATIC_B, new FehlbergStepInterpolator(),\n+              absTolerance, relTolerance);\n+    }\n \n-        if (firstTime) {\n-          final double[] scale;\n-          if (vecAbsoluteTolerance == null) {\n-              scale = new double[y0.length];\n-              java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n-            } else {\n-              scale = vecAbsoluteTolerance;\n+    /** Precompute the coefficients required for the interpolator.\n+     * <p>\n+     * High order interpolations are usually done using power series representation,\n+     * but since the 7th order interpolation is a bit special, E. Hairer and G. Wanner\n+     * proposed to use Neville-Aitken interpolation as described in these details\n+     * <a href=\"http://www.unige.ch/~hairer/preprints/RT-2008-14.pdf\">\n+     * http://www.unige.ch/~hairer/preprints/RT-2008-14.pdf</a>.\n+     * The results are simply the coefficients of the fifth degree polynomial\n+     * in equation 2.21 of the aforementioned document.\n+     * </p>\n+     */\n+    @Override\n+    public void computeCoefficients(final int mu, final double h) {\n+        super.computeCoefficients(mu, h);\n+\n+        if (((previousState == null) || (previousState.getInterpolatedTime() != currentState.getInterpolatedTime()))) {\n+\n+            final double theta = (this.currentState.getTime() - this.previousState.getTime()) / h;\n+            MathArrays.checkRange(theta, -0.1, 1.1);\n+\n+            if ((this.interpolatedState == null) || (this.interpolatedState.length != this.currentState.getState().length)) {\n+                this.interpolatedState = new double[this.currentState.getState().length];\n             }\n-          hNew = initializeStep(equations, forward, getOrder(), scale,\n-                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n-          firstTime = false;\n-        }\n-\n-        stepSize = hNew;\n \n-        // next stages\n-        for (int k = 1; k < stages; ++k) {\n-\n-          for (int j = 0; j < y0.length; ++j) {\n-            double sum = a[k-1][0] * yDotK[0][j];\n-            for (int l = 1; l < k; ++l) {\n-              sum += a[k-1][l] * yDotK[l][j];\n+            for (int i = 0; i < this.currentState.getState().length; ++i) {\n+                double yDot0 = this.yDotK[0][i];\n+                double yDot1 = this.yDotK[1][i];\n+                double yDot2 = this.yDotK[2][i];\n+                double yDot3 = this.yDotK[3][i];\n+                double yDot4 = this.yDotK[4][i];\n+                double yDot5 = this.yDotK[5][i];\n+                double yDot6 = this.yDotK[6][i];\n+\n+                double c1 = STATIC_C_I[1][0] - theta;\n+                double c2 = STATIC_C_I[2][0] - theta;\n+                double c3 = STATIC_C_I[3][0] - theta;\n+                double c4 = STATIC_C_I[4][0] - theta;\n+                double c5 = STATIC_C_I[5][0] - theta;\n+                double c6 = STATIC_C_I[6][0] - theta;\n+\n+                this.interpolatedState[i] =\n+                        this.currentState.getState()[i] +\n+                        h * (((((c6 * yDot6 + c5 * yDot5) + c4 * yDot4) + (c3 * yDot3 + c2 * yDot2)) + c1 * yDot1) + (STATIC_A[0] * yDot0));\n+                for (int l = 1; l <= 6; ++l) {\n+                    final double[] interpolatedState = this.interpolatedState;\n+                    final int i2 = i;\n+                    interpolatedState[i2] +=\n+                            this.a[l][0] * yDotK[0][i] *\n+                            Math.pow(theta - STATIC_C_I[l - 1][0], l) /\n+                            FehlbergIntegrator.FACTORIALS[l];\n+                }\n             }\n-            yTmp[j] = y[j] + stepSize * sum;\n-          }\n-\n-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n-\n         }\n-\n-        // estimate the state at the end of the step\n-        for (int j = 0; j < y0.length; ++j) {\n-          double sum    = b[0] * yDotK[0][j];\n-          for (int l = 1; l < stages; ++l) {\n-            sum    += b[l] * yDotK[l][j];\n-          }\n-          yTmp[j] = y[j] + stepSize * sum;\n-        }\n-\n-        // estimate the error at the end of the step\n-        error = estimateError(yDotK, y, yTmp, stepSize);\n-        if (error <= 1.0) {\n-\n-          // discrete events handling\n-          interpolator.storeTime(stepStart + stepSize);\n-          if (manager.evaluateStep(interpolator)) {\n-              final double dt = manager.getEventTime() - stepStart;\n-              if (Math.abs(dt) <= Math.ulp(stepStart)) {\n-                  // rejecting the step would lead to a too small next step, we accept it\n-                  loop = false;\n-              } else {\n-                  // reject the step to match exactly the next switch time\n-                  hNew = dt;\n-              }\n-          } else {\n-            // accept the step\n-            loop = false;\n-          }\n-\n-        } else {\n-          // reject the step and attempt to reduce error by stepsize control\n-          final double factor =\n-              Math.min(maxGrowth,\n-                       Math.max(minReduction, safety * Math.pow(error, exp)));\n-          hNew = filterStep(stepSize * factor, forward, false);\n-        }\n-\n-      }\n-\n-      // the step has been accepted\n-      final double nextStep = stepStart + stepSize;\n-      System.arraycopy(yTmp, 0, y, 0, y0.length);\n-      manager.stepAccepted(nextStep, y);\n-      lastStep = manager.stop();\n-\n-      // provide the step data to the step handler\n-      interpolator.storeTime(nextStep);\n-      for (StepHandler handler : stepHandlers) {\n-          handler.handleStep(interpolator, lastStep);\n-      }\n-      stepStart = nextStep;\n-\n-      if (fsal) {\n-        // save the last evaluation for the next step\n-        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n-      }\n-\n-      if (manager.reset(stepStart, y) && ! lastStep) {\n-        // some event handler has triggered changes that\n-        // invalidate the derivatives, we need to recompute them\n-        computeDerivatives(stepStart, y, yDotK[0]);\n-      }\n-\n-      if (! lastStep) {\n-        // in some rare cases we may get here with stepSize = 0, for example\n-        // when an event occurs at integration start, reducing the first step\n-        // to zero; we have to reset the step to some safe non zero value\n-          stepSize = filterStep(stepSize, forward, true);\n-\n-        // stepsize control for next step\n-        final double factor = Math.min(maxGrowth,\n-                                       Math.max(minReduction,\n-                                                safety * Math.pow(error, exp)));\n-        final double  scaledH    = stepSize * factor;\n-        final double  nextT      = stepStart + scaledH;\n-        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n-        hNew = filterStep(scaledH, forward, nextIsLast);\n-      }\n-\n     }\n \n-    final double stopTime = stepStart;\n-    resetInternalState();\n-    return stopTime;\n-\n-  }\n+    /** {@inheritDoc} */\n+    @Override\n+    public void integrate(final Firs\n \n   /** Get the minimal reduction factor for stepsize control.\n    * @return minimal reduction factor",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}