{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    int numIterations = 0;\n    final int maxIterations = getMaxIterations();\n    while (numIterations < maxIterations) {\n\n        incrementIterationsCounter();\n        numIterations++;\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // if expanded point is still better than reflected point,\n                // accept it instead of reflected point\n                simplex = reflectedSimplex;\n            } else {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n            return;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = contractSimplex(original, comparator);\n            return;\n        }\n\n    }\n\n    throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n}\n\nprivate RealPointValuePair[] contractSimplex(RealPointValuePair[] original,\n        Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair best = original[0];\n    final int dimension = best.getPointRef().length;\n    final double[] contractedCentroid = new double[dimension];\n    for (int i = 0; i < dimension; i++) {\n        for (int j = 0; j < original.length - 1; j++) {\n            contractedCentroid[i] += original[j].getPoint()[i];\n        }\n        contractedCentroid[i] /= original.length - 1;\n    }\n    // replace worst point with contracted simplex\n    final RealPointValuePair contracted = new RealPointValuePair(evaluate(contractedCentroid),\n            contractedCentroid);\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n    contractedSimplex[0] = best;\n    for (int i = 0; i < original.length - 1; i++) {\n        final double[] contractedPoint = new double[dimension];\n        for (int j = 0; j < dimension; j++) {\n            contractedPoint[j] = contractionCoeff * original[i + 1].getPoint()[j]\n                    + (1 - contractionCoeff) * contractedCentroid[j];\n        }\n        contractedSimplex[i + 1] = new RealPointValuePair(evaluate(contractedPoint), contractedPoint);\n    }\n    Arrays.sort(contractedSimplex, comparator);\n    return contractedSimplex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..eb3e07fe7 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,80 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+    int numIterations = 0;\n+    final int maxIterations = getMaxIterations();\n+    while (numIterations < maxIterations) {\n+\n+        incrementIterationsCounter();\n+        numIterations++;\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // if expanded point is still better than reflected point,\n+                // accept it instead of reflected point\n+                simplex = reflectedSimplex;\n+            } else {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            }\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            return;\n \n-                return;\n+        }\n \n-            }\n+        // compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            simplex = contractSimplex(original, comparator);\n+            return;\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+    }\n \n-            // check convergence\n-                return;\n-            }\n+    throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n+}\n \n+private RealPointValuePair[] contractSimplex(RealPointValuePair[] original,\n+        Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair best = original[0];\n+    final int dimension = best.getPointRef().length;\n+    final double[] contractedCentroid = new double[dimension];\n+    for (int i = 0; i < dimension; i++) {\n+        for (int j = 0; j < original.length - 1; j++) {\n+            contractedCentroid[i] += original[j].getPoint()[i];\n         }\n-\n+        contractedCentroid[i] /= original.length - 1;\n     }\n+    // replace worst point with contracted simplex\n+    final RealPointValuePair contracted = new RealPointValuePair(evaluate(contractedCentroid),\n+            contractedCentroid);\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+    contractedSimplex[0] = best;\n+    for (int i = 0; i < original.length - 1; i++) {\n+        final double[] contractedPoint = new double[dimension];\n+        for (int j = 0; j < dimension; j++) {\n+            contractedPoint[j] = contractionCoeff * original[i + 1].getPoint()[j]\n+                    + (1 - contractionCoeff) * contractedCentroid[j];\n+        }\n+        contractedSimplex[i + 1] = new RealPointValuePair(evaluate(contractedPoint), contractedPoint);\n+    }\n+    Arrays.sort(contractedSimplex, comparator);\n+    return contractedSimplex;\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: no suitable constructor found for RealPointValuePair(double,double[])",
    "test_result": "ERROR"
}