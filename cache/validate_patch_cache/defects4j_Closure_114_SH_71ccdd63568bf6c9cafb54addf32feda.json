{
    "patch": "        } else if (recordNode.getParent().isCall() && recordNode.getParent().getFirstChild() == recordNode) {\n          // Don't associate the rhs of the assignment with the lhs if the assignment is a caller expression.\n          // FYI: this fixes only the specific case where the assignment is the caller expression.\n          // See testAssignWithCall2 for an example of this.\n          recordDepScope(recordNode.getParent(), ns);\n        } else {\n          recordDepScope(recordNode, ns);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..5d6502b4 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,14 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n+        } else if (recordNode.getParent().isCall() && recordNode.getParent().getFirstChild() == recordNode) {\n+          // Don't associate the rhs of the assignment with the lhs if the assignment is a caller expression.\n+          // FYI: this fixes only the specific case where the assignment is the caller expression.\n+          // See testAssignWithCall2 for an example of this.\n+          recordDepScope(recordNode.getParent(), ns);\n         } else {\n+          recordDepScope(recordNode, ns);\n+        }\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}