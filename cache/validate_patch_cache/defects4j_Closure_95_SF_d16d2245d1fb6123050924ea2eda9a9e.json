{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n    // Check if the type is inferred, or if it exists\n    Preconditions.checkArgument(inferred || type != null);\n\n    String variableName = null;\n    boolean shouldDeclareOnGlobalThis = false;\n\n    // Determine if the identifier is a qualified name or a simple name\n    if (n.isName()) {\n        // Handle variable declaration of simple names\n        Preconditions.checkArgument(parent.isFunction() || parent.isVar() || parent.isLet() || parent.isConst() || parent.isParamList() || parent.isCatch());\n\n        // Check if the identifier should be declared in global scope\n        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n                                    (parent.isVar() || parent.isFunction() || parent.isParamList());\n        variableName = n.getString();\n    } else {\n        // Handle property declaration of qualified names\n        Preconditions.checkArgument(n.isGetProp() && (parent.isAssign() || parent.isExprResult()));\n\n        variableName = NodeUtil.getBestLValueName(n);\n        if (variableName != null && variableName.equals(\"prototype\") && type != null && type.isFunctionType()) {\n            // Use the root of the name chain for prototype calls.\n            JSType objType = ((FunctionType) type).getInstanceType();\n            if (objType != null && objType.isObject()) {\n                type = objType;\n            }\n        }\n    }\n    Preconditions.checkArgument(variableName != null && !variableName.isEmpty());\n\n    Scope scopeToDeclareIn = scope;\n    if (n.isGetProp()) {\n        // If property is a qualified name, declare it in root object's\n        // scope for better modeling of global variables.\n        Node objNode = n.getFirstChild();\n        ObjectType objectType = ObjectType.cast(scopeToDeclareIn.getDeclaredTypeOf(objNode.getQualifiedName()));\n        if (objectType != null) {\n            scopeToDeclareIn = objectType.getScope();\n        }\n    }\n\n    // Declare the variable if it hasn't been declared in the scope chain\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar = scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        CompilerInput input = compiler.getInput(sourceName);\n        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n        // Set inferred or declared properties on Global This if the node is global\n        if (shouldDeclareOnGlobalThis && variableName != null) {\n            ObjectType globalType = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n            boolean isExtern = input.isExtern();\n            if (inferred) {\n                globalType.defineInferredProperty(variableName, type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern);\n            } else {\n                globalType.defineDeclaredProperty(variableName, type, isExtern);\n            }\n        }\n\n        // Declare constructor prototype variable if it is a function with a constructor tag\n        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType && variableName != null) {\n            FunctionType fnType = (FunctionType) type;\n            if (fnType.isConstructor() || fnType.isInterface()) {\n                FunctionType superClassCtor = fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                        fnType.getPrototype(), input,\n                        superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(JSTypeNative.OBJECT_TYPE)));\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..2b827c09 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,79 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n-      }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+    // Check if the type is inferred, or if it exists\n+    Preconditions.checkArgument(inferred || type != null);\n \n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n+    String variableName = null;\n+    boolean shouldDeclareOnGlobalThis = false;\n \n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n+    // Determine if the identifier is a qualified name or a simple name\n+    if (n.isName()) {\n+        // Handle variable declaration of simple names\n+        Preconditions.checkArgument(parent.isFunction() || parent.isVar() || parent.isLet() || parent.isConst() || parent.isParamList() || parent.isCatch());\n \n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n+        // Check if the identifier should be declared in global scope\n+        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n+                                    (parent.isVar() || parent.isFunction() || parent.isParamList());\n+        variableName = n.getString();\n+    } else {\n+        // Handle property declaration of qualified names\n+        Preconditions.checkArgument(n.isGetProp() && (parent.isAssign() || parent.isExprResult()));\n+\n+        variableName = NodeUtil.getBestLValueName(n);\n+        if (variableName != null && variableName.equals(\"prototype\") && type != null && type.isFunctionType()) {\n+            // Use the root of the name chain for prototype calls.\n+            JSType objType = ((FunctionType) type).getInstanceType();\n+            if (objType != null && objType.isObject()) {\n+                type = objType;\n+            }\n+        }\n+    }\n+    Preconditions.checkArgument(variableName != null && !variableName.isEmpty());\n+\n+    Scope scopeToDeclareIn = scope;\n+    if (n.isGetProp()) {\n+        // If property is a qualified name, declare it in root object's\n+        // scope for better modeling of global variables.\n+        Node objNode = n.getFirstChild();\n+        ObjectType objectType = ObjectType.cast(scopeToDeclareIn.getDeclaredTypeOf(objNode.getQualifiedName()));\n+        if (objectType != null) {\n+            scopeToDeclareIn = objectType.getScope();\n         }\n+    }\n+\n+    // Declare the variable if it hasn't been declared in the scope chain\n+    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n+        Var oldVar = scopeToDeclareIn.getVar(variableName);\n+        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n+    } else {\n         CompilerInput input = compiler.getInput(sourceName);\n         scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n \n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n+        // Set inferred or declared properties on Global This if the node is global\n+        if (shouldDeclareOnGlobalThis && variableName != null) {\n+            ObjectType globalType = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+            boolean isExtern = input.isExtern();\n+            if (inferred) {\n+                globalType.defineInferredProperty(variableName, type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern);\n+            } else {\n+                globalType.defineDeclaredProperty(variableName, type, isExtern);\n+            }\n         }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n+        // Declare constructor prototype variable if it is a function with a constructor tag\n+        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType && variableName != null) {\n+            FunctionType fnType = (FunctionType) type;\n+            if (fnType.isConstructor() || fnType.isInterface()) {\n+                FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+                scopeToDeclareIn.declare(variableName + \".prototype\", n,\n+                        fnType.getPrototype(), input,\n+                        superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(JSTypeNative.OBJECT_TYPE)));\n+            }\n         }\n-      }\n     }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}