{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode),\n            \"CanInlineReferenceDirectly: \" + Token.FUNCTION + \" object \" +\n            Token.NAME + \" parameter not supported\");\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    // mark which function arguments have been matched with formal parameter\n    // names\n    Set<String> matchedArgs = Sets.newHashSet();\n\n    // Keep track of whether all arguments were matched with formal parameters\n    boolean allArgsMatched = true;\n\n    while (cArg != null || fnParam != null) {\n      if (fnParam != null && !fnParam.isName()) {\n        // Skip labels or non-name formal parameters, for they cannot be\n        // referenced anyways.\n        fnParam = fnParam.getNext();\n        continue;\n      }\n\n      // Check if the current formal parameter is a match for the next\n      // argument to the function call.\n      if (cArg != null) {\n        if (!matchedArgs.contains(cArg.toString())) {\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n            return CanInlineResult.NO;\n          }\n\n          // If the formal param is used more than once and the corresponding\n          // argument is a complex expression, bail out.\n          if (fnParam != null\n              && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1\n              && (cArg.isObjectLit()\n                  || cArg.isArrayLit()\n                  || cArg.isObjectPattern()\n                  || cArg.isArrayPattern()\n                  || NodeUtil.isGet(cArg))) {\n            return CanInlineResult.NO;\n          }\n\n          matchedArgs.add(cArg.toString());\n        }\n        cArg = cArg.getNext();\n      } else {\n        allArgsMatched = false;\n      }\n      if (fnParam != null) {\n        fnParam = fnParam.getNext();\n      } else {\n        allArgsMatched = false;\n      }\n    }\n\n    // If the function takes more arguments than are provided, then it's not\n    // safe to inline.\n    if (!allArgsMatched) {\n      return CanInlineResult.NO;\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..f9108139 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,15 +686,13 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n     Node block = fnNode.getLastChild();\n \n-\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n@@ -710,41 +708,69 @@ class FunctionInjector {\n         cArg = cArg.getNext();\n       } else {\n         // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode),\n+            \"CanInlineReferenceDirectly: \" + Token.FUNCTION + \" object \" +\n+            Token.NAME + \" parameter not supported\");\n       }\n     }\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n \n-        // Move to the next name.\n+    // mark which function arguments have been matched with formal parameter\n+    // names\n+    Set<String> matchedArgs = Sets.newHashSet();\n+\n+    // Keep track of whether all arguments were matched with formal parameters\n+    boolean allArgsMatched = true;\n+\n+    while (cArg != null || fnParam != null) {\n+      if (fnParam != null && !fnParam.isName()) {\n+        // Skip labels or non-name formal parameters, for they cannot be\n+        // referenced anyways.\n         fnParam = fnParam.getNext();\n+        continue;\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n+      // Check if the current formal parameter is a match for the next\n+      // argument to the function call.\n       if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+        if (!matchedArgs.contains(cArg.toString())) {\n+          if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n+            return CanInlineResult.NO;\n+          }\n+\n+          // If the formal param is used more than once and the corresponding\n+          // argument is a complex expression, bail out.\n+          if (fnParam != null\n+              && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1\n+              && (cArg.isObjectLit()\n+                  || cArg.isArrayLit()\n+                  || cArg.isObjectPattern()\n+                  || cArg.isArrayPattern()\n+                  || NodeUtil.isGet(cArg))) {\n+            return CanInlineResult.NO;\n+          }\n+\n+          matchedArgs.add(cArg.toString());\n         }\n         cArg = cArg.getNext();\n+      } else {\n+        allArgsMatched = false;\n+      }\n+      if (fnParam != null) {\n+        fnParam = fnParam.getNext();\n+      } else {\n+        allArgsMatched = false;\n       }\n     }\n \n+    // If the function takes more arguments than are provided, then it's not\n+    // safe to inline.\n+    if (!allArgsMatched) {\n+      return CanInlineResult.NO;\n+    }\n+\n     return CanInlineResult.YES;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}