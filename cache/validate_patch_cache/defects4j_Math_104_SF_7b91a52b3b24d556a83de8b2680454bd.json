{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException();\n    }\n    double eps = 10e-15;\n    double gln = LanczosApproximation.lnGamma(a);\n    double b = x + 1 - a;\n    double c = 1 / eps;\n    double d = 1 / b;\n    double h = d;\n    double an = a;\n    double sum = 0;\n    while (true) {\n        an++;\n        b += 2;\n        d = an * d + b;\n        if (Math.abs(d) < eps) {\n            d = eps;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < eps) {\n            c = eps;\n        }\n        d = 1 / d;\n        double del = d * c;\n        h *= del;\n        if (Math.abs(del - 1) < eps) {\n            break;\n        }\n    }\n\n    double result = Math.exp(-x + a * Math.log(x) - gln) * h;\n    return 1 - result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..703e243f9 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,40 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException();\n+    }\n+    double eps = 10e-15;\n+    double gln = LanczosApproximation.lnGamma(a);\n+    double b = x + 1 - a;\n+    double c = 1 / eps;\n+    double d = 1 / b;\n+    double h = d;\n+    double an = a;\n+    double sum = 0;\n+    while (true) {\n+        an++;\n+        b += 2;\n+        d = an * d + b;\n+        if (Math.abs(d) < eps) {\n+            d = eps;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < eps) {\n+            c = eps;\n+        }\n+        d = 1 / d;\n+        double del = d * c;\n+        h *= del;\n+        if (Math.abs(del - 1) < eps) {\n+            break;\n+        }\n+    }\n+\n+    double result = Math.exp(-x + a * Math.log(x) - gln) * h;\n+    return 1 - result;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}