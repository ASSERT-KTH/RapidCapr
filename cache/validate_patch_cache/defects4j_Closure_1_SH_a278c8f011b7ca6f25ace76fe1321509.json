{
    "patch": "    Set<String> unusedArgs = Sets.newHashSet();\n    NodeUtil.getFunctionBody(fnScope.getRootNode()).visit(\n        new NodeTraversal(compiler, new NodeTraversal.Callback() {\n          @Override\n          public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n              Node parent) {\n            if (n.isName() && parent.isParamList()) {\n              String name = n.getString();\n              if (!referenced.contains(fnScope.getVar(name))) {\n                unusedArgs.add(name);\n              }\n            }\n            return true;\n          }\n        }));\n\n    if (unusedArgs.isEmpty()) {\n      return; // Nothing to do here\n    }\n\n    Node paramList = getFunctionParamList(function);\n    NodeUtil.markFunctionsDeleted(paramList, compiler);\n    for (String argName : unusedArgs) {\n      Node argNode = paramList.getFirstChild();\n      while (argNode != null) {\n        if (argNode.getString().equals(argName)) {\n          paramList.removeChild(argNode);\n          compiler.reportCodeChange();\n          break;\n        }\n        argNode = argNode.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bed65300 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,37 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Set<String> unusedArgs = Sets.newHashSet();\n+    NodeUtil.getFunctionBody(fnScope.getRootNode()).visit(\n+        new NodeTraversal(compiler, new NodeTraversal.Callback() {\n+          @Override\n+          public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n+              Node parent) {\n+            if (n.isName() && parent.isParamList()) {\n+              String name = n.getString();\n+              if (!referenced.contains(fnScope.getVar(name))) {\n+                unusedArgs.add(name);\n+              }\n+            }\n+            return true;\n+          }\n+        }));\n+\n+    if (unusedArgs.isEmpty()) {\n+      return; // Nothing to do here\n+    }\n+\n+    Node paramList = getFunctionParamList(function);\n+    NodeUtil.markFunctionsDeleted(paramList, compiler);\n+    for (String argName : unusedArgs) {\n+      Node argNode = paramList.getFirstChild();\n+      while (argNode != null) {\n+        if (argNode.getString().equals(argName)) {\n+          paramList.removeChild(argNode);\n+          compiler.reportCodeChange();\n+          break;\n+        }\n+        argNode = argNode.getNext();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}