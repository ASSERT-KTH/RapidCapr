{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n\n    final int n = m.getRowDimension();\n    final RealMatrix dSqrt = MatrixUtils.createRealMatrix(n, n);\n\n    // Compute the square root of the eigenvalues\n    for (int i = 0; i < n; i++) {\n        double eigenvalue = d.getEntry(i, i);\n        if (eigenvalue < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        double sqrtEigenvalue = Math.sqrt(eigenvalue);\n        dSqrt.setEntry(i, i, sqrtEigenvalue);\n    }\n\n    // Compute the square root of the matrix by multiplying the eigenvectors by the square root of the eigenvalues\n    RealMatrix sqrtM = v.multiply(dSqrt).multiply(v.transpose());\n\n    // Ensure that the resulting matrix is symmetric positive definite\n    EigenDecomposition decSqrt = new EigenDecomposition(sqrtM);\n    RealMatrix vSqrt = decSqrt.getV();\n    RealMatrix dSqrtCheck = decSqrt.getD();\n\n    for (int i = 0; i < n; i++) {\n        double eigenvalue = dSqrtCheck.getEntry(i, i);\n        if (eigenvalue < 0) {\n            throw new IllegalArgumentException(\"Matrix square root is not positive definite\");\n        }\n    }\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..0d960d136 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,38 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+\n+    final int n = m.getRowDimension();\n+    final RealMatrix dSqrt = MatrixUtils.createRealMatrix(n, n);\n+\n+    // Compute the square root of the eigenvalues\n+    for (int i = 0; i < n; i++) {\n+        double eigenvalue = d.getEntry(i, i);\n+        if (eigenvalue < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        double sqrtEigenvalue = Math.sqrt(eigenvalue);\n+        dSqrt.setEntry(i, i, sqrtEigenvalue);\n     }\n+\n+    // Compute the square root of the matrix by multiplying the eigenvectors by the square root of the eigenvalues\n+    RealMatrix sqrtM = v.multiply(dSqrt).multiply(v.transpose());\n+\n+    // Ensure that the resulting matrix is symmetric positive definite\n+    EigenDecomposition decSqrt = new EigenDecomposition(sqrtM);\n+    RealMatrix vSqrt = decSqrt.getV();\n+    RealMatrix dSqrtCheck = decSqrt.getD();\n+\n+    for (int i = 0; i < n; i++) {\n+        double eigenvalue = dSqrtCheck.getEntry(i, i);\n+        if (eigenvalue < 0) {\n+            throw new IllegalArgumentException(\"Matrix square root is not positive definite\");\n+        }\n+    }\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}