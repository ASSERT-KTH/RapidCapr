{
    "patch": "public <T> void resetMock(T mock) {\n    if (mock == null) {\n        throw new IllegalArgumentException(\"Mock object cannot be null.\");\n    }\n\n    if (!Mockito.mockingDetails(mock).isMock()) {\n        throw new IllegalArgumentException(\"Object passed is not a mock object created by Mockito.\");\n    }\n\n    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n    ((MockAccess) mock).setMockitoInterceptor(newHandler);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..ce4f13014 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,20 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (mock == null) {\n+        throw new IllegalArgumentException(\"Mock object cannot be null.\");\n+    }\n+\n+    if (!Mockito.mockingDetails(mock).isMock()) {\n+        throw new IllegalArgumentException(\"Object passed is not a mock object created by Mockito.\");\n+    }\n+\n+    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n+    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n+    ((MockAccess) mock).setMockitoInterceptor(newHandler);\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}