{
    "patch": "public static String rounded_avg(int n, int m) {\n    if (m < n) return \"-1\";\n\n    long sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    double average = (double) sum / (m - n + 1);\n\n    int roundedAverage;\n    if (average - Math.floor(average) < 0.5) {\n        roundedAverage = (int) Math.floor(average);\n    } else {\n        roundedAverage = (int) Math.ceil(average);\n    }\n\n    return Integer.toBinaryString(roundedAverage);\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/ROUNDED_AVG.java b/src/main/java/humaneval/buggy/ROUNDED_AVG.java\nindex 4f7aba3..55f048f 100644\n--- a/src/main/java/humaneval/buggy/ROUNDED_AVG.java\n+++ b/src/main/java/humaneval/buggy/ROUNDED_AVG.java\n@@ -12,20 +12,23 @@ package humaneval.buggy;\n  */\n \n public class ROUNDED_AVG {\n-    public static String rounded_avg(int n, int m) {\n-        if(m < n) return \"-1\";\n-        int summation = 0;\n-        for(int i = n; i < m + 1; i++) {\n-            summation += i;\n-        }\n-        double avg = ((double) summation)/((double) (m - n + 1));\n-        double rem = avg - Math.floor(avg);\n-        int avg_rounded = 0;\n-        if(rem <= 0.5) {\n-            avg_rounded = (int) Math.ceil(avg);\n-        } else {\n-            avg_rounded = (int) Math.ceil(avg);\n-        }\n-        return Integer.toBinaryString(avg_rounded);\n+public static String rounded_avg(int n, int m) {\n+    if (m < n) return \"-1\";\n+\n+    long sum = 0;\n+    for (int i = n; i <= m; i++) {\n+        sum += i;\n+    }\n+\n+    double average = (double) sum / (m - n + 1);\n+\n+    int roundedAverage;\n+    if (average - Math.floor(average) < 0.5) {\n+        roundedAverage = (int) Math.floor(average);\n+    } else {\n+        roundedAverage = (int) Math.ceil(average);\n     }\n+\n+    return Integer.toBinaryString(roundedAverage);\n+}\n }",
    "result_reason": "   TEST_ROUNDED_AVG.test_2:20 expected:<111100101[1]> but was:<111100101[0]>",
    "test_result": "FAIL"
}