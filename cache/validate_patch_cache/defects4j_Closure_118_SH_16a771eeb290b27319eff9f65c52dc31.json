{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (child.isString()) {\n      // We should never see a mix of numbers and strings.\n      String name = child.getString();\n      T type = typeSystem.getType(getScope(), n, name);\n\n      Property prop = getProperty(name);\n\n      // If the property is not renamed, schedule it for renaming and process the property.\n      if (!prop.isRenamed() && !prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n\n        // Record the error for the property name.\n        if (propertiesToErrorFor.containsKey(name)) {\n          compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION,\n              name, (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..afbdc5ea 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,27 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    if (child.isString()) {\n+      // We should never see a mix of numbers and strings.\n+      String name = child.getString();\n+      T type = typeSystem.getType(getScope(), n, name);\n+\n+      Property prop = getProperty(name);\n+\n+      // If the property is not renamed, schedule it for renaming and process the property.\n+      if (!prop.isRenamed() && !prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+\n+        // Record the error for the property name.\n+        if (propertiesToErrorFor.containsKey(name)) {\n+          compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION,\n+              name, (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+        }\n+      }\n+    }\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}