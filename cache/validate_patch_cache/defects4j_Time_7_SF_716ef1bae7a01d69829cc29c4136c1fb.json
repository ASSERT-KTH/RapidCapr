{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = selectChronology(instant.getChronology());\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instant.getMillis(), chrono, iLocale, iPivotYear, chrono.year().get(instant));\n    parser.parseInto(bucket, text, position);\n\n    boolean parsedWithOffset = (bucket.getOffsetInteger() != null);\n    Integer parsedYear = bucket.getParsed(DateTimeFieldType.year());\n    Integer parsedMonthOfYear = bucket.getParsed(DateTimeFieldType.monthOfYear());\n    Integer parsedDayOfMonth = bucket.getParsed(DateTimeFieldType.dayOfMonth());\n\n    if (parsedYear == null || parsedMonthOfYear == null || parsedDayOfMonth == null) {\n        throw new IllegalFieldValueException(\"\");\n    }\n\n    // Check if the parsed date is valid\n    try {\n        chrono.getDateTimeMillis(parsedYear, parsedMonthOfYear, parsedDayOfMonth, 0);\n    } catch (IllegalArgumentException ex) {\n        throw new IllegalFieldValueException(ex.getMessage());\n    }\n\n    if (parsedWithOffset) {\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n\n    instant.setChronology(chrono);\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n\n    return bucket.getParsePosition();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..f5aeb34d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,49 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = selectChronology(instant.getChronology());\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            instant.getMillis(), chrono, iLocale, iPivotYear, chrono.year().get(instant));\n+    parser.parseInto(bucket, text, position);\n+\n+    boolean parsedWithOffset = (bucket.getOffsetInteger() != null);\n+    Integer parsedYear = bucket.getParsed(DateTimeFieldType.year());\n+    Integer parsedMonthOfYear = bucket.getParsed(DateTimeFieldType.monthOfYear());\n+    Integer parsedDayOfMonth = bucket.getParsed(DateTimeFieldType.dayOfMonth());\n+\n+    if (parsedYear == null || parsedMonthOfYear == null || parsedDayOfMonth == null) {\n+        throw new IllegalFieldValueException(\"\");\n+    }\n+\n+    // Check if the parsed date is valid\n+    try {\n+        chrono.getDateTimeMillis(parsedYear, parsedMonthOfYear, parsedDayOfMonth, 0);\n+    } catch (IllegalArgumentException ex) {\n+        throw new IllegalFieldValueException(ex.getMessage());\n+    }\n+\n+    if (parsedWithOffset) {\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n+        chrono = chrono.withZone(parsedZone);\n+    } else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+    }\n+\n+    instant.setChronology(chrono);\n+    instant.setMillis(bucket.computeMillis(false, text));\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n     }\n \n+    return bucket.getParsePosition();\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: incompatible types: ReadWritableInstant cannot be converted to long",
    "test_result": "ERROR"
}