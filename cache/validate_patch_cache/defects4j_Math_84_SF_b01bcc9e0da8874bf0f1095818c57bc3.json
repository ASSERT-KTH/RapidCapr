{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            RealPointValuePair[] newSimplex = null;\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    newSimplex = expandedSimplex(reflectedSimplex, expanded);\n                } else {\n                    newSimplex = reflectedSimplex;\n                }\n            } else {\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // compute the contracted simplex\n                    newSimplex = contractedSimplex(original, contracted, comparator);\n                } else {\n                    // non of the above but iteration count increases\n                    newSimplex = simplex;\n                }\n            }\n\n            // check convergence\n            if (checker != null) {\n                if (checker.converged(getIterations(), best, simplex)) {\n                    return;\n                }\n            }\n\n            // update the simplex for the next iteration\n            simplex = newSimplex;\n        }\n    }\n\n    private RealPointValuePair[] expandedSimplex(final RealPointValuePair[] reflectedSimplex,\n                                                  final RealPointValuePair expanded) {\n        final RealPointValuePair[] contractedSimplex = newRealPointPairArray(reflectedSimplex.length);\n        for (int i = 0; i < reflectedSimplex.length; i++) {\n            final double[] contractedCoords = new double[reflectedSimplex[i].getPoint().length];\n            final double[] reflectedCoords = reflectedSimplex[i].getPoint();\n            for (int j = 0; j < contractedCoords.length; j++) {\n                contractedCoords[j] = (1 + psi * chi) * reflectedCoords[j] - psi * chi * simplex[simplex.length - 1].getPoint()[j];\n            }\n            contractedSimplex[i] = new RealPointValuePair(contractedCoords, Double.NaN);\n        }\n        contractedSimplex[reflectedSimplex.length - 1] = expanded;\n        Arrays.sort(contractedSimplex, getComparator());\n        return contractedSimplex;\n    }\n\n    private RealPointValuePair[] contractedSimplex(final RealPointValuePair[] original,\n                                                    final RealPointValuePair contracted,\n                                                    final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] contractedSimplex = newRealPointPairArray(original.length);\n        contractedSimplex[0] = original[0];\n        final double[] contractedCoords = new double[original[0].getPoint().length];\n        final double[] contractedPoint = contracted.getPoint();\n        for (int j = 0; j < contractedCoords.length; j++) {\n            contractedCoords[j] = sigma * (original[0].getPoint()[j] + contractedPoint[j]);\n        }\n        contractedSimplex[contractedSimplex.length - 1] = new RealPointValuePair(contractedCoords, Double.NaN);\n        for (int i = 1; i < original.length; i++) {\n            final double[] newPoint = new double[original[i].getPoint().length];\n            final double[] oldPoint = original[i].getPoint();\n            for (int j = 0; j < oldPoint.length; j++) {\n                newPoint[j] = sigma * (oldPoint[j] + original[0].getPoint()[j]);\n            }\n            contractedSimplex[i] = new RealPointValuePair(newPoint, Double.NaN);\n        }\n        Arrays.sort(contractedSimplex, comparator);\n        return contractedSimplex;\n    }\n\n    private RealPointValuePair[] newRealPointPairArray(final int length) {\n        final RealPointValuePair[] array = new RealPointValuePair[length];\n        for (int i = 0; i < length; i++) {\n            array[i] = new RealPointValuePair(new double[length], Double.NaN);\n        }\n        return array;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..d6acd330f 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -71,31 +71,85 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+            RealPointValuePair[] newSimplex = null;\n             if (comparator.compare(reflected, best) < 0) {\n \n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    newSimplex = expandedSimplex(reflectedSimplex, expanded);\n+                } else {\n+                    newSimplex = reflectedSimplex;\n                 }\n+            } else {\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // compute the contracted simplex\n+                    newSimplex = contractedSimplex(original, contracted, comparator);\n+                } else {\n+                    // non of the above but iteration count increases\n+                    newSimplex = simplex;\n+                }\n+            }\n \n-                return;\n-\n+            // check convergence\n+            if (checker != null) {\n+                if (checker.converged(getIterations(), best, simplex)) {\n+                    return;\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            // update the simplex for the next iteration\n+            simplex = newSimplex;\n+        }\n+    }\n \n-            // check convergence\n-                return;\n+    private RealPointValuePair[] expandedSimplex(final RealPointValuePair[] reflectedSimplex,\n+                                                  final RealPointValuePair expanded) {\n+        final RealPointValuePair[] contractedSimplex = newRealPointPairArray(reflectedSimplex.length);\n+        for (int i = 0; i < reflectedSimplex.length; i++) {\n+            final double[] contractedCoords = new double[reflectedSimplex[i].getPoint().length];\n+            final double[] reflectedCoords = reflectedSimplex[i].getPoint();\n+            for (int j = 0; j < contractedCoords.length; j++) {\n+                contractedCoords[j] = (1 + psi * chi) * reflectedCoords[j] - psi * chi * simplex[simplex.length - 1].getPoint()[j];\n             }\n+            contractedSimplex[i] = new RealPointValuePair(contractedCoords, Double.NaN);\n+        }\n+        contractedSimplex[reflectedSimplex.length - 1] = expanded;\n+        Arrays.sort(contractedSimplex, getComparator());\n+        return contractedSimplex;\n+    }\n \n+    private RealPointValuePair[] contractedSimplex(final RealPointValuePair[] original,\n+                                                    final RealPointValuePair contracted,\n+                                                    final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] contractedSimplex = newRealPointPairArray(original.length);\n+        contractedSimplex[0] = original[0];\n+        final double[] contractedCoords = new double[original[0].getPoint().length];\n+        final double[] contractedPoint = contracted.getPoint();\n+        for (int j = 0; j < contractedCoords.length; j++) {\n+            contractedCoords[j] = sigma * (original[0].getPoint()[j] + contractedPoint[j]);\n         }\n+        contractedSimplex[contractedSimplex.length - 1] = new RealPointValuePair(contractedCoords, Double.NaN);\n+        for (int i = 1; i < original.length; i++) {\n+            final double[] newPoint = new double[original[i].getPoint().length];\n+            final double[] oldPoint = original[i].getPoint();\n+            for (int j = 0; j < oldPoint.length; j++) {\n+                newPoint[j] = sigma * (oldPoint[j] + original[0].getPoint()[j]);\n+            }\n+            contractedSimplex[i] = new RealPointValuePair(newPoint, Double.NaN);\n+        }\n+        Arrays.sort(contractedSimplex, comparator);\n+        return contractedSimplex;\n+    }\n \n+    private RealPointValuePair[] newRealPointPairArray(final int length) {\n+        final RealPointValuePair[] array = new RealPointValuePair[length];\n+        for (int i = 0; i < length; i++) {\n+            array[i] = new RealPointValuePair(new double[length], Double.NaN);\n+        }\n+        return array;\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}