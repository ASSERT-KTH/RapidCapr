{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        int numIterations = 0;\n        final int maxIterations = getMaxIterations();\n\n        while (numIterations < maxIterations) {\n            numIterations++;\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = performShrink(original, comparator);\n                }\n                return;\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                 simplex = performContract(original, comparator);\n            } else {\n                simplex = performShrink(original, comparator);\n            }\n\n        }\n\n        throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n    }\n    \n    protected RealPointValuePair[] performShrink(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] simplexAfterShrink = new RealPointValuePair[simplex.length];\n        simplexAfterShrink[0] = original[0];\n        final double[] xSmallest = original[0].getPoint();\n        for (int i = 1; i < simplex.length; ++i) {\n            final double[] xOriginal = original[i].getPoint();\n            final double[] xShrunk = new double[xOriginal.length];\n            for (int j = 0; j < xOriginal.length; ++j) {\n                xShrunk[j] = shrinkFactor * (xOriginal[j] - xSmallest[j]) + xSmallest[j];\n            }\n            final double[] y = computeObjectiveValue(xShrunk);\n            final RealPointValuePair v = new RealPointValuePair(xShrunk, y, false);\n            simplexAfterShrink[i] = v;\n        }\n        sortSimplex(simplexAfterShrink, comparator);\n        return simplexAfterShrink;\n    }\n    \n    protected RealPointValuePair[] performContract(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] simplexAfterContract = new RealPointValuePair[simplex.length];\n        simplexAfterContract[0] = original[0];\n        final double[] xSmallest = original[0].getPoint();\n        for (int i = 1; i < simplex.length; ++i) {\n            final double[] xOriginal = original[i].getPoint();\n            final double[] xContracted = new double[xOriginal.length];\n            for (int j = 0; j < xOriginal.length; ++j) {\n                xContracted[j] = contractFactor * (xOriginal[j] - xSmallest[j]) + xSmallest[j];\n            }\n            final double[] y = computeObjectiveValue(xContracted);\n            final RealPointValuePair v = new RealPointValuePair(xContracted, y, false);\n            simplexAfterContract[i] = v;\n        }\n        sortSimplex(simplexAfterContract, comparator);\n        return simplexAfterContract;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..3e5a521bf 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,11 +59,12 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+        int numIterations = 0;\n+        final int maxIterations = getMaxIterations();\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n+        while (numIterations < maxIterations) {\n+            numIterations++;\n \n             // save the original vertex\n             final RealPointValuePair[] original = simplex;\n@@ -72,30 +73,66 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n-\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = performShrink(original, comparator);\n                 }\n-\n                 return;\n-\n             }\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                 simplex = performContract(original, comparator);\n+            } else {\n+                simplex = performShrink(original, comparator);\n             }\n \n         }\n \n+        throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n+    }\n+    \n+    protected RealPointValuePair[] performShrink(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] simplexAfterShrink = new RealPointValuePair[simplex.length];\n+        simplexAfterShrink[0] = original[0];\n+        final double[] xSmallest = original[0].getPoint();\n+        for (int i = 1; i < simplex.length; ++i) {\n+            final double[] xOriginal = original[i].getPoint();\n+            final double[] xShrunk = new double[xOriginal.length];\n+            for (int j = 0; j < xOriginal.length; ++j) {\n+                xShrunk[j] = shrinkFactor * (xOriginal[j] - xSmallest[j]) + xSmallest[j];\n+            }\n+            final double[] y = computeObjectiveValue(xShrunk);\n+            final RealPointValuePair v = new RealPointValuePair(xShrunk, y, false);\n+            simplexAfterShrink[i] = v;\n+        }\n+        sortSimplex(simplexAfterShrink, comparator);\n+        return simplexAfterShrink;\n+    }\n+    \n+    protected RealPointValuePair[] performContract(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] simplexAfterContract = new RealPointValuePair[simplex.length];\n+        simplexAfterContract[0] = original[0];\n+        final double[] xSmallest = original[0].getPoint();\n+        for (int i = 1; i < simplex.length; ++i) {\n+            final double[] xOriginal = original[i].getPoint();\n+            final double[] xContracted = new double[xOriginal.length];\n+            for (int j = 0; j < xOriginal.length; ++j) {\n+                xContracted[j] = contractFactor * (xOriginal[j] - xSmallest[j]) + xSmallest[j];\n+            }\n+            final double[] y = computeObjectiveValue(xContracted);\n+            final RealPointValuePair v = new RealPointValuePair(xContracted, y, false);\n+            simplexAfterContract[i] = v;\n+        }\n+        sortSimplex(simplexAfterContract, comparator);\n+        return simplexAfterContract;\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}