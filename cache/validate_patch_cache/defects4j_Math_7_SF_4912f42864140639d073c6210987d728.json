{
    "patch": "public void doEvents(final SpacecraftState s, final AbsoluteDate t) throws OrekitException {\n\n    final double tEvent = t.durationFrom(initialTime);\n\n    // set up an interpolator for the step\n    final double previousT = interpolator.getInterpolatedTime();\n    interpolator.setSoftPreviousTime(previousT);\n    interpolator.setSoftCurrentTime(tEvent);\n\n    final List<EventState> occuringEvents = new ArrayList<>();\n    // detect trigger events\n    for (final EventState state : eventsStates) {\n        if (state.evaluateStep(interpolator)) {\n            // the event occurs during the current step\n            occuringEvents.add(state);\n        }\n    }\n\n    boolean isLastStep = false;\n    if (!occuringEvents.isEmpty()) {\n\n        // a trigger was detected during the step\n        // sort events to handle chronologically first events first\n        Collections.sort(occuringEvents, new Comparator<EventState>() {\n            /** {@inheritDoc} */\n            @Override\n            public int compare(EventState es0, EventState es1) {\n                return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n            }\n        });\n\n        while (!occuringEvents.isEmpty()) {\n            // handle the chronologically first event\n            final Iterator<EventState> iterator = occuringEvents.iterator();\n            final EventState currentEvent = iterator.next();\n            iterator.remove();\n\n            // restrict the interpolator to the first part of the step, up to the event\n            final double eventT = currentEvent.getEventTime();\n            interpolator.setSoftPreviousTime(previousT);\n            interpolator.setSoftCurrentTime(eventT);\n\n            // get state at event time\n            interpolator.setInterpolatedTime(eventT);\n            final double[] eventY = interpolator.getInterpolatedState().clone();\n\n            // advance all event states to current time\n            currentEvent.stepAccepted(eventT, eventY);\n            isLastStep = currentEvent.stop();\n\n            // handle the first part of the step, up to the event\n            for (final StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n            // detect trigger events at the end of the processed part of the step\n            for (final EventState state : eventsStates) {\n                if (state.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(state);\n                }\n            }\n            if (!occuringEvents.isEmpty()) {\n                // sort events to handle chronologically first events first\n                Collections.sort(occuringEvents, new Comparator<EventState>() {\n                    /** {@inheritDoc} */\n                    @Override\n                    public int compare(EventState es0, EventState es1) {\n                        return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n                    }\n                });\n            }\n        }\n    } else {\n        // handle the whole step as a regular integration step\n        isLastStep = integrator.integrate(s, t);\n        for (final StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n    }\n\n    // handle the final current-time part of the step that was not processed by event handling\n    final double dt = t.subtract(interpolator.getInterpolatedDate()).getSeconds();\n    final double[][] yDotK = new double[2][];\n    yDotK[0] = interpolator.getInterpolatedStateDot();\n    final double[] yTmp = interpolator.getInterpolatedState().clone();\n    interpolator.setInterpolatedTime(tEvent);\n    yDotK[1] = computeDerivatives(interpolator.getInterpolatedDate(), yTmp);\n    for (final int k : newIndicator) {\n        if (k < stateVariationRate.length) {\n            stateVariationRate[k] = 0;\n        }\n    }\n    for (final int k : newEventIndicator) {\n        if (k < eventVariationRate.length) {\n            eventVariationRate[k] = 0;\n        }\n    }\n    interpolator.storeTime(t);\n    interpolator.storeState(yTmp, isLastStep);\n    System.arraycopy(yDotK[1], 0, stateVariationRate, 0, stateVariationRate.length);\n    System.arraycopy(yDotK[1], stateVariationRate.length, eventVariationRate, 0, eventVariationRate.length);\n    for (final StepHandler handler : stepHandlers) {\n        handler.handleStep(interpolator, isLastStep);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..b90df27c7 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,111 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n+public void doEvents(final SpacecraftState s, final AbsoluteDate t) throws OrekitException {\n \n-            });\n+    final double tEvent = t.durationFrom(initialTime);\n \n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n+    // set up an interpolator for the step\n+    final double previousT = interpolator.getInterpolatedTime();\n+    interpolator.setSoftPreviousTime(previousT);\n+    interpolator.setSoftCurrentTime(tEvent);\n+\n+    final List<EventState> occuringEvents = new ArrayList<>();\n+    // detect trigger events\n+    for (final EventState state : eventsStates) {\n+        if (state.evaluateStep(interpolator)) {\n+            // the event occurs during the current step\n+            occuringEvents.add(state);\n+        }\n+    }\n \n-            while (!occuringEvents.isEmpty()) {\n+    boolean isLastStep = false;\n+    if (!occuringEvents.isEmpty()) {\n+\n+        // a trigger was detected during the step\n+        // sort events to handle chronologically first events first\n+        Collections.sort(occuringEvents, new Comparator<EventState>() {\n+            /** {@inheritDoc} */\n+            @Override\n+            public int compare(EventState es0, EventState es1) {\n+                return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n+            }\n+        });\n \n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n+        while (!occuringEvents.isEmpty()) {\n+            // handle the chronologically first event\n+            final Iterator<EventState> iterator = occuringEvents.iterator();\n+            final EventState currentEvent = iterator.next();\n+            iterator.remove();\n \n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n+            // restrict the interpolator to the first part of the step, up to the event\n+            final double eventT = currentEvent.getEventTime();\n+            interpolator.setSoftPreviousTime(previousT);\n+            interpolator.setSoftCurrentTime(eventT);\n \n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n+            // get state at event time\n+            interpolator.setInterpolatedTime(eventT);\n+            final double[] eventY = interpolator.getInterpolatedState().clone();\n \n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+            // advance all event states to current time\n+            currentEvent.stepAccepted(eventT, eventY);\n+            isLastStep = currentEvent.stop();\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n+            // handle the first part of the step, up to the event\n+            for (final StepHandler handler : stepHandlers) {\n+                handler.handleStep(interpolator, isLastStep);\n+            }\n+            // detect trigger events at the end of the processed part of the step\n+            for (final EventState state : eventsStates) {\n+                if (state.evaluateStep(interpolator)) {\n+                    // the event occurs during the current step\n+                    occuringEvents.add(state);\n                 }\n+            }\n+            if (!occuringEvents.isEmpty()) {\n+                // sort events to handle chronologically first events first\n+                Collections.sort(occuringEvents, new Comparator<EventState>() {\n+                    /** {@inheritDoc} */\n+                    @Override\n+                    public int compare(EventState es0, EventState es1) {\n+                        return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n+                    }\n+                });\n+            }\n+        }\n+    } else {\n+        // handle the whole step as a regular integration step\n+        isLastStep = integrator.integrate(s, t);\n+        for (final StepHandler handler : stepHandlers) {\n+            handler.handleStep(interpolator, isLastStep);\n+        }\n+    }\n+\n+    // handle the final current-time part of the step that was not processed by event handling\n+    final double dt = t.subtract(interpolator.getInterpolatedDate()).getSeconds();\n+    final double[][] yDotK = new double[2][];\n+    yDotK[0] = interpolator.getInterpolatedStateDot();\n+    final double[] yTmp = interpolator.getInterpolatedState().clone();\n+    interpolator.setInterpolatedTime(tEvent);\n+    yDotK[1] = computeDerivatives(interpolator.getInterpolatedDate(), yTmp);\n+    for (final int k : newIndicator) {\n+        if (k < stateVariationRate.length) {\n+            stateVariationRate[k] = 0;\n+        }\n+    }\n+    for (final int k : newEventIndicator) {\n+        if (k < eventVariationRate.length) {\n+            eventVariationRate[k] = 0;\n+        }\n+    }\n+    interpolator.storeTime(t);\n+    interpolator.storeState(yTmp, isLastStep);\n+    System.arraycopy(yDotK[1], 0, stateVariationRate, 0, stateVariationRate.length);\n+    System.arraycopy(yDotK[1], stateVariationRate.length, eventVariationRate, 0, eventVariationRate.length);\n+    for (final StepHandler handler : stepHandlers) {\n+        handler.handleStep(interpolator, isLastStep);\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}