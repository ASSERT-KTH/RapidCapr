{
    "patch": "private static synchronized String getConvertedId(String id) {\n        Map<String, String> map = cZoneIdConversion;\n        if (map == null) {\n            // Backwards compatibility with TimeZone.\n            map = new HashMap<String, String>();\n            map.put(\"GMT\", \"Etc/GMT\");\n            map.put(\"MIT\", \"Pacific/Apia\");\n            map.put(\"HST\", \"Pacific/Honolulu\");\n            map.put(\"AST\", \"America/Anchorage\");\n            map.put(\"PST\", \"America/Los_Angeles\");\n            map.put(\"MST\", \"America/Denver\");\n            map.put(\"PNT\", \"America/Phoenix\");\n            map.put(\"CST\", \"America/Chicago\");\n            map.put(\"EST\", \"America/New_York\");\n            map.put(\"IET\", \"America/Indianapolis\");\n            map.put(\"PRT\", \"America/Puerto_Rico\");\n            map.put(\"CNT\", \"America/St_Johns\");\n            map.put(\"AGT\", \"America/Buenos_Aires\");\n            map.put(\"BET\", \"America/Sao_Paulo\");\n            map.put(\"WET\", \"Europe/Lisbon\");\n            map.put(\"ECT\", \"Europe/Paris\");\n            map.put(\"ART\", \"Africa/Cairo\");\n            map.put(\"CAT\", \"Africa/Harare\");\n            map.put(\"EET\", \"Europe/Bucharest\");\n            map.put(\"EAT\", \"Africa/Addis_Ababa\");\n            map.put(\"MET\", \"Asia/Tehran\");\n            map.put(\"NET\", \"Asia/Yerevan\");\n            map.put(\"PLT\", \"Asia/Karachi\");\n            map.put(\"IST\", \"Asia/Kolkata\");\n            map.put(\"BST\", \"Asia/Dhaka\");\n            map.put(\"VST\", \"Asia/Ho_Chi_Minh\");\n            map.put(\"CTT\", \"Asia/Shanghai\");\n            map.put(\"JST\", \"Asia/Tokyo\");\n            map.put(\"ACT\", \"Australia/Darwin\");\n            map.put(\"AET\", \"Australia/Sydney\");\n            map.put(\"SST\", \"Pacific/Guadalcanal\");\n            map.put(\"NST\", \"Pacific/Auckland\");\n            cZoneIdConversion = map;\n        }\n        return map.get(id);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 5d89e34b..cc44c88a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -555,26 +555,26 @@ public abstract class DateTimeZone implements Serializable {\n      * @param id  the old style id\n      * @return the new style id, null if not found\n      */\n-    private static synchronized String getConvertedId(String id) {\n+private static synchronized String getConvertedId(String id) {\n         Map<String, String> map = cZoneIdConversion;\n         if (map == null) {\n             // Backwards compatibility with TimeZone.\n             map = new HashMap<String, String>();\n-            map.put(\"GMT\", \"UTC\");\n+            map.put(\"GMT\", \"Etc/GMT\");\n             map.put(\"MIT\", \"Pacific/Apia\");\n-            map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n+            map.put(\"HST\", \"Pacific/Honolulu\");\n             map.put(\"AST\", \"America/Anchorage\");\n             map.put(\"PST\", \"America/Los_Angeles\");\n-            map.put(\"MST\", \"America/Denver\");  // JDK 1.1 compatible\n+            map.put(\"MST\", \"America/Denver\");\n             map.put(\"PNT\", \"America/Phoenix\");\n             map.put(\"CST\", \"America/Chicago\");\n-            map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\n+            map.put(\"EST\", \"America/New_York\");\n             map.put(\"IET\", \"America/Indianapolis\");\n             map.put(\"PRT\", \"America/Puerto_Rico\");\n             map.put(\"CNT\", \"America/St_Johns\");\n             map.put(\"AGT\", \"America/Buenos_Aires\");\n             map.put(\"BET\", \"America/Sao_Paulo\");\n-            map.put(\"WET\", \"Europe/London\");\n+            map.put(\"WET\", \"Europe/Lisbon\");\n             map.put(\"ECT\", \"Europe/Paris\");\n             map.put(\"ART\", \"Africa/Cairo\");\n             map.put(\"CAT\", \"Africa/Harare\");\n@@ -583,9 +583,9 @@ public abstract class DateTimeZone implements Serializable {\n             map.put(\"MET\", \"Asia/Tehran\");\n             map.put(\"NET\", \"Asia/Yerevan\");\n             map.put(\"PLT\", \"Asia/Karachi\");\n-            map.put(\"IST\", \"Asia/Calcutta\");\n+            map.put(\"IST\", \"Asia/Kolkata\");\n             map.put(\"BST\", \"Asia/Dhaka\");\n-            map.put(\"VST\", \"Asia/Saigon\");\n+            map.put(\"VST\", \"Asia/Ho_Chi_Minh\");\n             map.put(\"CTT\", \"Asia/Shanghai\");\n             map.put(\"JST\", \"Asia/Tokyo\");\n             map.put(\"ACT\", \"Australia/Darwin\");\n@@ -595,7 +595,7 @@ public abstract class DateTimeZone implements Serializable {\n             cZoneIdConversion = map;\n         }\n         return map.get(id);\n-    }\n+}\n \n     private static int parseOffset(String str) {\n         // Can't use a real chronology if called during class",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[UTC]> but was:<[Etc/GMT]>",
    "test_result": "FAIL"
}