{
    "patch": "public final boolean isEmptyType() {\n    boolean result = true;\n    if(!(isNoType() || isNoObjectType() || isNoResolvedType() || isVoidType() || isNullType() || isUnknownType())) {\n        // check whether this is a non-empty union type\n        if(isUnionType() && !isUnknownType()) {\n            // union type is non-empty as it contains at least one type other than unknown type\n            result = false;\n        } else if (isArrayType()) {\n            // array type is not empty\n            result = false;\n        } else if (isFunctionType()) {\n            // function type's return type determines if the type is empty or not\n            JSType returnType = getReturnType();\n            result = returnType == null || returnType.isEmptyType();\n        } else if (isObjectLiteralType() && hasPropertyTypeWithName(\"prototype\")) {\n            // object literal type with a prototype property is not empty\n            result = false;\n        } else {\n            // all other types are empty\n            result = true;\n        }\n    }\n    if (result) {\n        System.err.println(\"Warning: isEmptyType() called with no type.\");\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b250..1ba4c375 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -159,9 +159,33 @@ public abstract class JSType implements Serializable {\n     return false;\n   }\n \n-  public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n-  }\n+public final boolean isEmptyType() {\n+    boolean result = true;\n+    if(!(isNoType() || isNoObjectType() || isNoResolvedType() || isVoidType() || isNullType() || isUnknownType())) {\n+        // check whether this is a non-empty union type\n+        if(isUnionType() && !isUnknownType()) {\n+            // union type is non-empty as it contains at least one type other than unknown type\n+            result = false;\n+        } else if (isArrayType()) {\n+            // array type is not empty\n+            result = false;\n+        } else if (isFunctionType()) {\n+            // function type's return type determines if the type is empty or not\n+            JSType returnType = getReturnType();\n+            result = returnType == null || returnType.isEmptyType();\n+        } else if (isObjectLiteralType() && hasPropertyTypeWithName(\"prototype\")) {\n+            // object literal type with a prototype property is not empty\n+            result = false;\n+        } else {\n+            // all other types are empty\n+            result = true;\n+        }\n+    }\n+    if (result) {\n+        System.err.println(\"Warning: isEmptyType() called with no type.\");\n+    }\n+    return result;\n+}\n \n   public boolean isNumberObjectType() {\n     return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}