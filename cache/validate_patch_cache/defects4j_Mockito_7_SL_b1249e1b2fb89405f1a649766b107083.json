{
    "patch": "Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\nif (actualTypeArgument != null) {\n    if (actualTypeArgument instanceof Class) {\n        registerTypeVariablesOn(actualTypeArgument);\n    } else if (actualTypeArgument instanceof TypeVariable) {\n        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n        Type[] bounds = actualTypeVariable.getBounds();\n        if (bounds != null && bounds.length > 0) {\n            registerTypeVariablesOn(bounds[0]);\n        } else {\n            registerTypeVariablesOn(Object.class);\n        }\n    } else if (actualTypeArgument instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) actualTypeArgument;\n        for (Type type : parameterizedType.getActualTypeArguments()) {\n            registerTypeVariablesOn(type);\n        }\n    } else if (actualTypeArgument instanceof WildcardType) {\n        Type[] upperBounds = ((WildcardType) actualTypeArgument).getUpperBounds();\n        if (upperBounds != null && upperBounds.length > 0) {\n            registerTypeVariablesOn(upperBounds[0]);\n        } else {\n            registerTypeVariablesOn(Object.class);\n        }\n    }\n} else {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..2ee3f3d57 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,41 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+if (actualTypeArgument != null) {\n+    if (actualTypeArgument instanceof Class) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    } else if (actualTypeArgument instanceof TypeVariable) {\n+        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n+        Type[] bounds = actualTypeVariable.getBounds();\n+        if (bounds != null && bounds.length > 0) {\n+            registerTypeVariablesOn(bounds[0]);\n+        } else {\n+            registerTypeVariablesOn(Object.class);\n+        }\n+    } else if (actualTypeArgument instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) actualTypeArgument;\n+        for (Type type : parameterizedType.getActualTypeArguments()) {\n+            registerTypeVariablesOn(type);\n+        }\n+    } else if (actualTypeArgument instanceof WildcardType) {\n+        Type[] upperBounds = ((WildcardType) actualTypeArgument).getUpperBounds();\n+        if (upperBounds != null && upperBounds.length > 0) {\n+            registerTypeVariablesOn(upperBounds[0]);\n+        } else {\n+            registerTypeVariablesOn(Object.class);\n+        }\n+    }\n+} else {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}