{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    if (elementPairs.isEmpty()) {\n        return new PeriodFormatter(null, null);\n    }\n\n    Object[] comp = createComposite(elementPairs);\n\n    if (elementPairs.size() == 1) {\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n\n    List<PeriodFormatterBuilder> builders = new ArrayList<>();\n    List<Separator> separators = new ArrayList<>();\n\n    for (Object elementPair : elementPairs) {\n        if (elementPair instanceof Separator) {\n            if (!builders.isEmpty()) {\n                PeriodFormatterBuilder builder = builders.remove(builders.size() - 1);\n                Separator sep = separators.remove(separators.size() - 1);\n\n                Object[] currentComp = createComposite(builder.toFormatter().getElements());\n\n                if (notPrinter) {\n                    builder = new PeriodFormatterBuilder().append((PeriodParser) currentComp[1]);\n                } else if (notParser) {\n                    builder = new PeriodFormatterBuilder().append((PeriodPrinter) currentComp[0]);\n                } else {\n                    builder = new PeriodFormatterBuilder()\n                            .append((PeriodPrinter) currentComp[0], (PeriodParser) currentComp[1]);\n                }\n\n                separatorNext(builder, sep);\n                builders.add(builder);\n            }\n            separators.add((Separator) elementPair);\n        } else {\n            if (builders.isEmpty() || !(elementPair instanceof PeriodFormatterBuilder)) {\n                builders.add(new PeriodFormatterBuilder());\n            }\n            builders.get(builders.size() - 1).append(elementPair);\n        }\n    }\n    if (builders.size() == separators.size()) {\n        builders.add(new PeriodFormatterBuilder());\n    }\n\n    while (!builders.isEmpty()) {\n        PeriodFormatterBuilder builder = builders.remove(0);\n        Separator sep = separators.isEmpty() ? null : separators.remove(0);\n\n        Object[] currentComp = createComposite(builder.toFormatter().getElements());\n\n        if (notPrinter) {\n            comp[0] = null;\n        }\n        if (notParser) {\n            comp[1] = null;\n        }\n\n        if (sep != null) {\n            separatorNext(builder, sep);\n            builders.add(0, builder);\n        }\n\n        builder = builders.remove(0);\n\n        currentComp = createComposite(builder.toFormatter().getElements());\n\n        if (notPrinter) {\n            builder = new PeriodFormatterBuilder().append(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            builder = new PeriodFormatterBuilder().append((PeriodPrinter) comp[0], null);\n        } else {\n            builder = new PeriodFormatterBuilder()\n                    .append((PeriodPrinter) currentComp[0], (PeriodParser) comp[1]);\n        }\n\n        builders.add(0, builder);\n    }\n\n    return builders.get(0).toFormatter();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..cc69dbe5 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,18 +791,18 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    if (elementPairs.isEmpty()) {\n+        return new PeriodFormatter(null, null);\n+    }\n+\n+    Object[] comp = createComposite(elementPairs);\n+\n+    if (elementPairs.size() == 1) {\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n         } else if (notParser) {\n@@ -812,6 +812,78 @@ public class PeriodFormatterBuilder {\n         }\n     }\n \n+    List<PeriodFormatterBuilder> builders = new ArrayList<>();\n+    List<Separator> separators = new ArrayList<>();\n+\n+    for (Object elementPair : elementPairs) {\n+        if (elementPair instanceof Separator) {\n+            if (!builders.isEmpty()) {\n+                PeriodFormatterBuilder builder = builders.remove(builders.size() - 1);\n+                Separator sep = separators.remove(separators.size() - 1);\n+\n+                Object[] currentComp = createComposite(builder.toFormatter().getElements());\n+\n+                if (notPrinter) {\n+                    builder = new PeriodFormatterBuilder().append((PeriodParser) currentComp[1]);\n+                } else if (notParser) {\n+                    builder = new PeriodFormatterBuilder().append((PeriodPrinter) currentComp[0]);\n+                } else {\n+                    builder = new PeriodFormatterBuilder()\n+                            .append((PeriodPrinter) currentComp[0], (PeriodParser) currentComp[1]);\n+                }\n+\n+                separatorNext(builder, sep);\n+                builders.add(builder);\n+            }\n+            separators.add((Separator) elementPair);\n+        } else {\n+            if (builders.isEmpty() || !(elementPair instanceof PeriodFormatterBuilder)) {\n+                builders.add(new PeriodFormatterBuilder());\n+            }\n+            builders.get(builders.size() - 1).append(elementPair);\n+        }\n+    }\n+    if (builders.size() == separators.size()) {\n+        builders.add(new PeriodFormatterBuilder());\n+    }\n+\n+    while (!builders.isEmpty()) {\n+        PeriodFormatterBuilder builder = builders.remove(0);\n+        Separator sep = separators.isEmpty() ? null : separators.remove(0);\n+\n+        Object[] currentComp = createComposite(builder.toFormatter().getElements());\n+\n+        if (notPrinter) {\n+            comp[0] = null;\n+        }\n+        if (notParser) {\n+            comp[1] = null;\n+        }\n+\n+        if (sep != null) {\n+            separatorNext(builder, sep);\n+            builders.add(0, builder);\n+        }\n+\n+        builder = builders.remove(0);\n+\n+        currentComp = createComposite(builder.toFormatter().getElements());\n+\n+        if (notPrinter) {\n+            builder = new PeriodFormatterBuilder().append(null, (PeriodParser) comp[1]);\n+        } else if (notParser) {\n+            builder = new PeriodFormatterBuilder().append((PeriodPrinter) comp[0], null);\n+        } else {\n+            builder = new PeriodFormatterBuilder()\n+                    .append((PeriodPrinter) currentComp[0], (PeriodParser) comp[1]);\n+        }\n+\n+        builders.add(0, builder);\n+    }\n+\n+    return builders.get(0).toFormatter();\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}