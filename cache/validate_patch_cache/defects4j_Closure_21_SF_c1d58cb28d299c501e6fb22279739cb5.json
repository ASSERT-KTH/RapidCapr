{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n.isComma() || n.isEmpty()) {\n    return;\n  }\n\n  // We don't want to report on scripts or function declarations.\n  if (parent == null || parent.isFunction() || parent.isScript()) {\n    return;\n  }\n\n  if (n.isExprResult()) {\n    // For now, don't fret about unconventionally placed expressions.\n    return;\n  }\n\n  boolean isSideEffectFree = NodeUtil.isJSCompilerAnnotation(n) || !NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n\n  if (NodeUtil.mayHaveSideEffects(n)\n      && !isSideEffectFree\n      && !NodeUtil.isExpressionResultUsed(n)) {\n    String msg = \"\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (NodeUtil.isSimpleOperatorType(n.getType())) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase()\n              + \"' operator is not being used.\";\n    } else if (NodeUtil.isLiteralValue(n)) {\n      msg = \"This literal has no effect. Is there a bug?\";\n    } else if (n.getType() == Token.THIS\n               && !NodeUtil.thisNodeMayHaveSideEffects(n.getParent())) {\n      msg = \"The 'this' reference is not being used.\";\n    } else if (n.isQualifiedName()) {\n      JSDocInfo info = n.getJSDocInfo();\n      // Don't warn on declarations.\n      if (info != null && !info.hasTypedefType()) {\n        msg = \"The value of the variable is not used.\";\n      }\n    }\n\n    if (!msg.isEmpty()) {\n      t.report(n, USELESS_CODE_ERROR, msg);\n      problemNodes.add(n);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..258c8d70 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,71 +81,51 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n-\n-    if (parent == null) {\n-      return;\n-    }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n.isComma() || n.isEmpty()) {\n+    return;\n+  }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n-      return;\n-    }\n+  // We don't want to report on scripts or function declarations.\n+  if (parent == null || parent.isFunction() || parent.isScript()) {\n+    return;\n+  }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-      return;\n-    }\n+  if (n.isExprResult()) {\n+    // For now, don't fret about unconventionally placed expressions.\n+    return;\n+  }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n-        return;\n-      }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n-        }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n-        return;\n+  boolean isSideEffectFree = NodeUtil.isJSCompilerAnnotation(n) || !NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n+\n+  if (NodeUtil.mayHaveSideEffects(n)\n+      && !isSideEffectFree\n+      && !NodeUtil.isExpressionResultUsed(n)) {\n+    String msg = \"\";\n+    if (n.isString()) {\n+      msg = \"Is there a missing '+' on the previous line?\";\n+    } else if (NodeUtil.isSimpleOperatorType(n.getType())) {\n+      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase()\n+              + \"' operator is not being used.\";\n+    } else if (NodeUtil.isLiteralValue(n)) {\n+      msg = \"This literal has no effect. Is there a bug?\";\n+    } else if (n.getType() == Token.THIS\n+               && !NodeUtil.thisNodeMayHaveSideEffects(n.getParent())) {\n+      msg = \"The 'this' reference is not being used.\";\n+    } else if (n.isQualifiedName()) {\n+      JSDocInfo info = n.getJSDocInfo();\n+      // Don't warn on declarations.\n+      if (info != null && !info.hasTypedefType()) {\n+        msg = \"The value of the variable is not used.\";\n       }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n+    if (!msg.isEmpty()) {\n+      t.report(n, USELESS_CODE_ERROR, msg);\n+      problemNodes.add(n);\n     }\n   }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}