{
    "patch": "  void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n    Preconditions.checkArgument(inferred || type != null);\n\n    // Only allow declarations of NAMEs and qualified names.\n    boolean shouldDeclareOnGlobalThis = false;\n\n    int parentType = parent.getType();\n    if (n.getType() == Token.NAME) {\n      Preconditions.checkArgument(\n          parentType == Token.FUNCTION ||\n          parentType == Token.VAR ||\n          parentType == Token.LP ||\n          parentType == Token.CATCH);\n      shouldDeclareOnGlobalThis = scope.isGlobal() &&\n          (parentType == Token.VAR ||\n           parentType == Token.FUNCTION);\n    } else {\n      Preconditions.checkArgument(\n          n.getType() == Token.GETPROP &&\n          (parentType == Token.ASSIGN ||\n           parentType == Token.EXPR_RESULT));\n    }\n    String variableName = n.getQualifiedName();\n    Preconditions.checkArgument(!variableName.isEmpty());\n\n    boolean declared = false;\n    JSType varType = null;\n    Scope scopeToDeclareIn = scope;\n    // If n is a property, then we should really declare it in the\n    // scope where the root object appears. This helps out people\n    // who declare \"global\" names in an anonymous namespace.\n    if (n.getType() == Token.GETPROP) {\n      Node rootObject = n.getFirstChild();\n      if (rootObject.getType() == Token.NAME) {\n        String rootVarName = rootObject.getString();\n        if (rootVarName.equals(\"window\") || rootVarName.equals(\"document\")) {\n          scopeToDeclareIn = topScope;\n        } else if (rootVarName.equals(\"this\") && !scopeToDeclareIn.isFunctionBlockScope()) {\n          // Don't declare a property on the global this object.\n          return;\n        } else {\n          Var rootVar = getVar(rootObject);\n          if (rootVar != null && rootVar.getType() != null && rootVar.getType().isObject()) {\n            ObjectType objType = rootVar.getType().toMaybeObjectType();\n            if (objType != null && objType.getOwnPropertyNames().contains(n.getLastChild().getString())) {\n              varType = objType.getPropertyType(n.getLastChild().getString());\n              declared = true;\n              scopeToDeclareIn = null;  // Don't declare the variable again.\n            }\n          }\n        }\n      } else if (rootObject.getType() == Token.THIS && !scopeToDeclareIn.isFunctionBlockScope()) {\n        // Don't declare a property on the global this object.\n        return;\n      }\n    }\n\n    if (scopeToDeclareIn != null) {\n      // declared in closest scope?\n      declared = scopeToDeclareIn.isDeclared(variableName, false);\n      if (!declared) {\n        if (!inferred) {\n          setDeferredType(n, type);\n        }\n        CompilerInput input = compiler.getInput(sourceName);\n        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        declared = true;\n\n        if (shouldDeclareOnGlobalThis) {\n          ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n          boolean isExtern = input.isExtern();\n          if (inferred) {\n            globalThis.defineInferredProperty(variableName,\n                type == null ?\n                    getNativeType(JSTypeNative.NO_TYPE) :\n                    type,\n                isExtern);\n          } else {\n            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n          }\n        }\n\n        // If we're in the global scope, also declare var.prototype\n        // in the scope chain.\n        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n          FunctionType fnType = (FunctionType) type;\n          if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(OBJECT_TYPE)));\n          }\n        }\n      }\n    }\n\n    if (declared) {\n      if (varType == null) {\n        varType = scopeToDeclareIn.getVar(variableName).getType();\n      }\n      if (parentType == Token.VAR || inferred && parentType == Token.ASSIGN) {\n        return;\n      }\n      Node varNode = scopeToDeclareIn.getVar(variableName).getNode();\n      int varNodeType = varNode.getType();\n      if (parentType == Token.CATCH) {\n        if (varNodeType == Token.ARRAY_PATTERN) {\n          varNode = varNode.getFirstChild();\n        }\n        Preconditions.checkState(varNode.getType() == Token.NAME);\n        declareTypeAlias(varNode.getString(), type != null ? type : getNativeType(UNKNOWN_TYPE),\n            compiler.getCurrentScriptOrFn(), varNode, true /* inferred */);\n      } else if (parentType == Token.ASSIGN ||\n                 parentType == Token.INC ||\n                 parentType == Token.DEC ||\n                 NodeUtil.isAssignmentOp(parent) ||\n                 NodeUtil.isUnaryOp(parent)) {\n        if (varNodeType == Token.ARRAY_PATTERN) {\n          // Can't get type.\n          return;\n        }\n        Preconditions.checkState(varNode.getType() == Token.NAME);\n        checkAssignment(varNode, varType, type, /* isCompound=*/ parentType == Token.ASSIGN);\n      } else if (parentType == Token.FOR_OF) {\n        Preconditions.checkState(varNode.getType() == Token.NAME);\n        checkAssignJSTypeToNonConstName(n, varType, checkNotNull(type));\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..2c207ee5 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,48 +869,73 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+  void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+    Preconditions.checkArgument(inferred || type != null);\n+\n+    // Only allow declarations of NAMEs and qualified names.\n+    boolean shouldDeclareOnGlobalThis = false;\n+\n+    int parentType = parent.getType();\n+    if (n.getType() == Token.NAME) {\n+      Preconditions.checkArgument(\n+          parentType == Token.FUNCTION ||\n+          parentType == Token.VAR ||\n+          parentType == Token.LP ||\n+          parentType == Token.CATCH);\n+      shouldDeclareOnGlobalThis = scope.isGlobal() &&\n+          (parentType == Token.VAR ||\n+           parentType == Token.FUNCTION);\n+    } else {\n+      Preconditions.checkArgument(\n+          n.getType() == Token.GETPROP &&\n+          (parentType == Token.ASSIGN ||\n+           parentType == Token.EXPR_RESULT));\n+    }\n+    String variableName = n.getQualifiedName();\n+    Preconditions.checkArgument(!variableName.isEmpty());\n+\n+    boolean declared = false;\n+    JSType varType = null;\n+    Scope scopeToDeclareIn = scope;\n+    // If n is a property, then we should really declare it in the\n+    // scope where the root object appears. This helps out people\n+    // who declare \"global\" names in an anonymous namespace.\n+    if (n.getType() == Token.GETPROP) {\n+      Node rootObject = n.getFirstChild();\n+      if (rootObject.getType() == Token.NAME) {\n+        String rootVarName = rootObject.getString();\n+        if (rootVarName.equals(\"window\") || rootVarName.equals(\"document\")) {\n+          scopeToDeclareIn = topScope;\n+        } else if (rootVarName.equals(\"this\") && !scopeToDeclareIn.isFunctionBlockScope()) {\n+          // Don't declare a property on the global this object.\n+          return;\n+        } else {\n+          Var rootVar = getVar(rootObject);\n+          if (rootVar != null && rootVar.getType() != null && rootVar.getType().isObject()) {\n+            ObjectType objType = rootVar.getType().toMaybeObjectType();\n+            if (objType != null && objType.getOwnPropertyNames().contains(n.getLastChild().getString())) {\n+              varType = objType.getPropertyType(n.getLastChild().getString());\n+              declared = true;\n+              scopeToDeclareIn = null;  // Don't declare the variable again.\n+            }\n+          }\n+        }\n+      } else if (rootObject.getType() == Token.THIS && !scopeToDeclareIn.isFunctionBlockScope()) {\n+        // Don't declare a property on the global this object.\n+        return;\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n+    }\n \n+    if (scopeToDeclareIn != null) {\n       // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n+      declared = scopeToDeclareIn.isDeclared(variableName, false);\n+      if (!declared) {\n         if (!inferred) {\n           setDeferredType(n, type);\n         }\n         CompilerInput input = compiler.getInput(sourceName);\n         scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+        declared = true;\n \n         if (shouldDeclareOnGlobalThis) {\n           ObjectType globalThis =\n@@ -944,6 +969,40 @@ final class TypedScopeCreator implements ScopeCreator {\n       }\n     }\n \n+    if (declared) {\n+      if (varType == null) {\n+        varType = scopeToDeclareIn.getVar(variableName).getType();\n+      }\n+      if (parentType == Token.VAR || inferred && parentType == Token.ASSIGN) {\n+        return;\n+      }\n+      Node varNode = scopeToDeclareIn.getVar(variableName).getNode();\n+      int varNodeType = varNode.getType();\n+      if (parentType == Token.CATCH) {\n+        if (varNodeType == Token.ARRAY_PATTERN) {\n+          varNode = varNode.getFirstChild();\n+        }\n+        Preconditions.checkState(varNode.getType() == Token.NAME);\n+        declareTypeAlias(varNode.getString(), type != null ? type : getNativeType(UNKNOWN_TYPE),\n+            compiler.getCurrentScriptOrFn(), varNode, true /* inferred */);\n+      } else if (parentType == Token.ASSIGN ||\n+                 parentType == Token.INC ||\n+                 parentType == Token.DEC ||\n+                 NodeUtil.isAssignmentOp(parent) ||\n+                 NodeUtil.isUnaryOp(parent)) {\n+        if (varNodeType == Token.ARRAY_PATTERN) {\n+          // Can't get type.\n+          return;\n+        }\n+        Preconditions.checkState(varNode.getType() == Token.NAME);\n+        checkAssignment(varNode, varType, type, /* isCompound=*/ parentType == Token.ASSIGN);\n+      } else if (parentType == Token.FOR_OF) {\n+        Preconditions.checkState(varNode.getType() == Token.NAME);\n+        checkAssignJSTypeToNonConstName(n, varType, checkNotNull(type));\n+      }\n+    }\n+  }\n+\n     /**\n      * Check if the given node is a property of a name in the global scope.\n      */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}