{
    "patch": "            if (savedFields[i].getFieldType() == DateTimeFieldType.year() &&\n                    savedFields[i] instanceof UnsavedValue) {\n                UnsavedValue uv = (UnsavedValue)savedFields[i];\n                int year = uv.getValue();\n                if (year < 0) {\n                    if (year != iDefaultYear) {\n                        saveField(DateTimeFieldType.year(), iDefaultYear);\n                        return computeMillis(resetFields, text);\n                    }\n                } else {\n                    saveField(DateTimeFieldType.year(), year);\n                }\n            } else if (savedFields[i].getFieldType() == DateTimeFieldType.weekyear() &&\n                    savedFields[i] instanceof UnsavedValue) {\n                UnsavedValue uv = (UnsavedValue)savedFields[i];\n                int weekyear = uv.getValue();\n                if (weekyear < 0) {\n                    if (weekyear != iDefaultYear) {\n                        saveField(DateTimeFieldType.weekyear(), iDefaultYear);\n                        return computeMillis(resetFields, text);\n                    }\n                } else {\n                    saveField(DateTimeFieldType.weekyear(), weekyear);\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5f3a557b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,31 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].getFieldType() == DateTimeFieldType.year() &&\n+                    savedFields[i] instanceof UnsavedValue) {\n+                UnsavedValue uv = (UnsavedValue)savedFields[i];\n+                int year = uv.getValue();\n+                if (year < 0) {\n+                    if (year != iDefaultYear) {\n+                        saveField(DateTimeFieldType.year(), iDefaultYear);\n+                        return computeMillis(resetFields, text);\n+                    }\n+                } else {\n+                    saveField(DateTimeFieldType.year(), year);\n+                }\n+            } else if (savedFields[i].getFieldType() == DateTimeFieldType.weekyear() &&\n+                    savedFields[i] instanceof UnsavedValue) {\n+                UnsavedValue uv = (UnsavedValue)savedFields[i];\n+                int weekyear = uv.getValue();\n+                if (weekyear < 0) {\n+                    if (weekyear != iDefaultYear) {\n+                        saveField(DateTimeFieldType.weekyear(), iDefaultYear);\n+                        return computeMillis(resetFields, text);\n+                    }\n+                } else {\n+                    saveField(DateTimeFieldType.weekyear(), weekyear);\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}