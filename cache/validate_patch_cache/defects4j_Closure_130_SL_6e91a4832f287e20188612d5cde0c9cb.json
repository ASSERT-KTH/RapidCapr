{
    "patch": "      if (name.localSets == 0 && name.globalSets == 1 && name.aliasingGets == 0 &&\n          // Don't inline param or var declarations because they can only appear once.\n          // Don't inline constant declarations because they have already been optimized.\n          // Don't inline named types because they should have namespaces of their own.\n          (name.type != Name.Type.VAR ||\n            name.getParent().isFunctionBlock() ||\n            name.getDeclaration() != null &&\n            !NodeUtil.isConstantDeclaration(name.getDeclaration())) &&\n          name.type != Name.Type.PARAM &&\n          name.type != Name.Type.EXPORT &&\n          name.type != Name.Type.TYPE &&\n          (name.getFullName().contains(\".\") ||\n           (!compiler.getCodingConvention().isExported(name.getBaseName(), name.getFullName()) &&\n            !name.isExtern() &&\n            (!name.getParent().isFunctionBlock() || !isImmutableValue(name)))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..b46f2fb8 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,21 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+      if (name.localSets == 0 && name.globalSets == 1 && name.aliasingGets == 0 &&\n+          // Don't inline param or var declarations because they can only appear once.\n+          // Don't inline constant declarations because they have already been optimized.\n+          // Don't inline named types because they should have namespaces of their own.\n+          (name.type != Name.Type.VAR ||\n+            name.getParent().isFunctionBlock() ||\n+            name.getDeclaration() != null &&\n+            !NodeUtil.isConstantDeclaration(name.getDeclaration())) &&\n+          name.type != Name.Type.PARAM &&\n+          name.type != Name.Type.EXPORT &&\n+          name.type != Name.Type.TYPE &&\n+          (name.getFullName().contains(\".\") ||\n+           (!compiler.getCodingConvention().isExported(name.getBaseName(), name.getFullName()) &&\n+            !name.isExtern() &&\n+            (!name.getParent().isFunctionBlock() || !isImmutableValue(name)))) {\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}