{
    "patch": "                } else {\n                    // accept the expanded simplex\n                    simplex = contractedSimplex(reflectedSimplex, best, comparator);\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contractedSimplex(original, best, comparator);\n            } else {\n                // perform a one dimensional contraction\n                simplex = contractedSimplex(original, best, comparator);\n                if (comparator.compare(simplex[simplex.length - 1], original[0]) >= 0) {\n                    // perform an inside contraction\n                    simplex = shrinkSimplex(original, comparator);\n                }\n            }\n\n            // check convergence\n            if (checker != null && checker.converged(getIterations(), best, simplex)) {\n                return;\n            }\n\n        }\n\n    }\n    \n    private RealPointValuePair[] contractedSimplex(final RealPointValuePair[] original,\n                                                    final RealPointValuePair best,\n                                                    final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] contracted = new RealPointValuePair[original.length];\n        contracted[0] = best;\n        for (int i = 1; i < contracted.length; i++) {\n            contracted[i] = new RealPointValuePair(contractFactor * original[i].getPointRef() +\n                                                    (1 - contractFactor) * best.getPointRef(),\n                                                    Double.NaN,\n                                                    false);\n            contracted[i] = new RealPointValuePair(contracted[i].getPoint(),\n                                                    computeObjectiveValue(contracted[i].getPoint()), \n                                                    false);\n        }\n        Arrays.sort(contracted, comparator);\n        return contracted;\n    }\n    \n    private RealPointValuePair[] shrinkSimplex(final RealPointValuePair[] original,\n                                                final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] shrinked = new RealPointValuePair[original.length];\n        final RealPointValuePair best = original[0];\n        shrinked[0] = best;\n        for (int i = 1; i < shrinked.length; i++) {\n            shrinked[i] = new RealPointValuePair(shrinkFactor * (original[i].getPointRef() - best.getPointRef()) + best.getPointRef(),\n                                                Double.NaN,\n                                                false);\n            shrinked[i] = new RealPointValuePair(shrinked[i].getPoint(),\n                                                computeObjectiveValue(shrinked[i].getPoint()), \n                                                false);\n        }\n        Arrays.sort(shrinked, comparator);\n        return shrinked;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..353beb066 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,27 +58,9 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                } else {\n+                    // accept the expanded simplex\n+                    simplex = contractedSimplex(reflectedSimplex, best, comparator);\n                 }\n \n                 return;\n@@ -89,14 +71,58 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = contractedSimplex(original, best, comparator);\n+            } else {\n+                // perform a one dimensional contraction\n+                simplex = contractedSimplex(original, best, comparator);\n+                if (comparator.compare(simplex[simplex.length - 1], original[0]) >= 0) {\n+                    // perform an inside contraction\n+                    simplex = shrinkSimplex(original, comparator);\n+                }\n+            }\n \n             // check convergence\n+            if (checker != null && checker.converged(getIterations(), best, simplex)) {\n                 return;\n             }\n \n         }\n \n     }\n+    \n+    private RealPointValuePair[] contractedSimplex(final RealPointValuePair[] original,\n+                                                    final RealPointValuePair best,\n+                                                    final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] contracted = new RealPointValuePair[original.length];\n+        contracted[0] = best;\n+        for (int i = 1; i < contracted.length; i++) {\n+            contracted[i] = new RealPointValuePair(contractFactor * original[i].getPointRef() +\n+                                                    (1 - contractFactor) * best.getPointRef(),\n+                                                    Double.NaN,\n+                                                    false);\n+            contracted[i] = new RealPointValuePair(contracted[i].getPoint(),\n+                                                    computeObjectiveValue(contracted[i].getPoint()), \n+                                                    false);\n+        }\n+        Arrays.sort(contracted, comparator);\n+        return contracted;\n+    }\n+    \n+    private RealPointValuePair[] shrinkSimplex(final RealPointValuePair[] original,\n+                                                final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] shrinked = new RealPointValuePair[original.length];\n+        final RealPointValuePair best = original[0];\n+        shrinked[0] = best;\n+        for (int i = 1; i < shrinked.length; i++) {\n+            shrinked[i] = new RealPointValuePair(shrinkFactor * (original[i].getPointRef() - best.getPointRef()) + best.getPointRef(),\n+                                                Double.NaN,\n+                                                false);\n+            shrinked[i] = new RealPointValuePair(shrinked[i].getPoint(),\n+                                                computeObjectiveValue(shrinked[i].getPoint()), \n+                                                false);\n+        }\n+        Arrays.sort(shrinked, comparator);\n+        return shrinked;\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}