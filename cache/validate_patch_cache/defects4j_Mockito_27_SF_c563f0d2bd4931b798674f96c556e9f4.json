{
    "patch": "Mockito.mockConstruction(MyMockedClass.class, (mockConstruction) ->\n{\n    MyMockedClass myMockedObject = mockConstruction.constructed();\n    InvocationListener invocationListener = Mockito.mock(InvocationListener.class);\n    myMockedObject.setInvocationListener(invocationListener); // set the invocation listener on the mocked object\n\n    yourObjectUnderTest.callMethodThatUsesMock(myMockedObject); // Call the method that uses the mocked object\n\n    verify(invocationListener).reportInvocation(any(MethodInvocationReport.class)); // Verify that the reportInvocation() method was called\n});",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..ed98e3927 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,17 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+Mockito.mockConstruction(MyMockedClass.class, (mockConstruction) ->\n+{\n+    MyMockedClass myMockedObject = mockConstruction.constructed();\n+    InvocationListener invocationListener = Mockito.mock(InvocationListener.class);\n+    myMockedObject.setInvocationListener(invocationListener); // set the invocation listener on the mocked object\n+\n+    yourObjectUnderTest.callMethodThatUsesMock(myMockedObject); // Call the method that uses the mocked object\n+\n+    verify(invocationListener).reportInvocation(any(MethodInvocationReport.class)); // Verify that the reportInvocation() method was called\n+});\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}