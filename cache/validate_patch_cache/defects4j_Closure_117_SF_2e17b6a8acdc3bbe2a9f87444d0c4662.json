{
    "patch": "String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // if we're analyzing a GETPROP, the property may be inherited by the prototype chain. So,\n    // climb the prototype chain and find out where the property was originally defined.\n    ObjectType objectType = null;\n    String propName = null;\n    if (n.isGetProp()) {\n        objectType = getJSType(n.getFirstChild()).dereference();\n        if (objectType != null) {\n            propName = n.getLastChild().getString();\n            // classes\n            while (objectType != null && !objectType.getOwnPropertyNames().contains(propName)) {\n                objectType = objectType.getImplicitPrototype();\n            }\n            if (objectType == null) {\n                objectType = getJSType(n.getFirstChild()).dereference();\n            }\n        }\n    }\n    // if the immediately enclosing function has formal type parameters\n    // then we might be better off using their symbolic names.\n    if (n.isGetProp()) {\n        Scope functionScope = Node.getEnclosingFunction(n).getScope();\n        if (functionScope.isFunctionScope()) {\n            String symbolName = null;\n            if (propName != null) {\n                for (String symbol : functionScope.getSlotNames()) {\n                    if (symbol.equalsIgnoreCase(propName)) {\n                        symbolName = symbol;\n                        break;\n                    }\n                }\n            }\n            if (symbolName != null) {\n                ObjectType ownerType = functionScope.getOwner().getType().dereference();\n                if (ownerType != null) {\n                    boolean hasSymbol = false;\n                    for (String property : ownerType.getOwnPropertyNames()) {\n                        if (property.equalsIgnoreCase(symbolName)) {\n                            hasSymbol = true;\n                            break;\n                        }\n                    }\n                    if (hasSymbol) {\n                        return ownerType.getDisplayName() + \".\" + symbolName;\n                    }\n                }\n            }\n        }\n    }\n    if (objectType == null) {\n        objectType = getJSType(n);\n    }\n    if (dereference) {\n        ObjectType dereferenced = objectType.dereference();\n        if (dereferenced != null) {\n            objectType = dereferenced;\n        }\n    }\n    if (objectType == null) {\n        return \"\";\n    }\n    if (objectType.isFunctionPrototypeType() ||\n            (objectType.toObjectType() != null &&\n            objectType.toObjectType().getConstructor() != null)) {\n        return objectType.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n        return qualifiedName;\n    } else if (objectType.isFunctionType()) {\n        // Don't show complex function names.\n        return \"function\";\n    } else {\n        return objectType.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..7590826f 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -721,60 +721,83 @@ class TypeValidator {\n    * @param dereference If true, the type of the node will be dereferenced\n    *     to an Object type, if possible.\n    */\n-  String getReadableJSTypeName(Node n, boolean dereference) {\n+String getReadableJSTypeName(Node n, boolean dereference) {\n \n-    // The best type name is the actual type name.\n-\n-    // If we're analyzing a GETPROP, the property may be inherited by the\n-    // prototype chain. So climb the prototype chain and find out where\n-    // the property was originally defined.\n+    // if we're analyzing a GETPROP, the property may be inherited by the prototype chain. So,\n+    // climb the prototype chain and find out where the property was originally defined.\n+    ObjectType objectType = null;\n+    String propName = null;\n     if (n.isGetProp()) {\n-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n-      if (objectType != null) {\n-        String propName = n.getLastChild().getString();\n-        if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n-          objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n-        } else {\n-          // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n-          }\n+        objectType = getJSType(n.getFirstChild()).dereference();\n+        if (objectType != null) {\n+            propName = n.getLastChild().getString();\n+            // classes\n+            while (objectType != null && !objectType.getOwnPropertyNames().contains(propName)) {\n+                objectType = objectType.getImplicitPrototype();\n+            }\n+            if (objectType == null) {\n+                objectType = getJSType(n.getFirstChild()).dereference();\n+            }\n         }\n-\n-        // Don't show complex function names or anonymous types.\n-        // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n+    }\n+    // if the immediately enclosing function has formal type parameters\n+    // then we might be better off using their symbolic names.\n+    if (n.isGetProp()) {\n+        Scope functionScope = Node.getEnclosingFunction(n).getScope();\n+        if (functionScope.isFunctionScope()) {\n+            String symbolName = null;\n+            if (propName != null) {\n+                for (String symbol : functionScope.getSlotNames()) {\n+                    if (symbol.equalsIgnoreCase(propName)) {\n+                        symbolName = symbol;\n+                        break;\n+                    }\n+                }\n+            }\n+            if (symbolName != null) {\n+                ObjectType ownerType = functionScope.getOwner().getType().dereference();\n+                if (ownerType != null) {\n+                    boolean hasSymbol = false;\n+                    for (String property : ownerType.getOwnPropertyNames()) {\n+                        if (property.equalsIgnoreCase(symbolName)) {\n+                            hasSymbol = true;\n+                            break;\n+                        }\n+                    }\n+                    if (hasSymbol) {\n+                        return ownerType.getDisplayName() + \".\" + symbolName;\n+                    }\n+                }\n+            }\n         }\n-      }\n     }\n-\n-    JSType type = getJSType(n);\n+    if (objectType == null) {\n+        objectType = getJSType(n);\n+    }\n     if (dereference) {\n-      ObjectType dereferenced = type.dereference();\n-      if (dereferenced != null) {\n-        type = dereferenced;\n-      }\n+        ObjectType dereferenced = objectType.dereference();\n+        if (dereferenced != null) {\n+            objectType = dereferenced;\n+        }\n     }\n-    if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n-      return type.toString();\n+    if (objectType == null) {\n+        return \"\";\n+    }\n+    if (objectType.isFunctionPrototypeType() ||\n+            (objectType.toObjectType() != null &&\n+            objectType.toObjectType().getConstructor() != null)) {\n+        return objectType.toString();\n     }\n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n-      return qualifiedName;\n-    } else if (type.isFunctionType()) {\n-      // Don't show complex function names.\n-      return \"function\";\n+        return qualifiedName;\n+    } else if (objectType.isFunctionType()) {\n+        // Don't show complex function names.\n+        return \"function\";\n     } else {\n-      return type.toString();\n+        return objectType.toString();\n     }\n-  }\n+}\n \n   /**\n    * This method gets the JSType from the Node argument and verifies that it is",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}