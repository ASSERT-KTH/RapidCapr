{
    "patch": "  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    // \",\" is the default, it doesn't need to be explicit\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    Node prev = null;\n    StringBuilder sb = new StringBuilder();\n\n    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n      String elemValue = (elem.isObjectLit() || elem.isArrayLit()) ? null : NodeUtil.getStringValue(elem);\n      if (elemValue != null || elem.getType() == Token.EMPTY) {\n        if (elemValue == null || elemValue.isEmpty()) {\n          // ignore empty or non-string elements\n          continue;\n        }\n        // concatenate the string to the current sb\n        if (prev != null && prev.getType() != Token.EMPTY) {\n          sb.append(joinString);\n        }\n        sb.append(elemValue);\n      } else {\n        if (sb.length() != 0) {\n          // create a new String node from the current sb\n          arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n          sb.setLength(0);\n        }\n        arrayFoldedChildren.add(elem);\n      }\n      prev = elem;\n    }\n\n    if (sb.length() != 0) {\n      // create a new string node from the current sb\n      arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n    }\n\n    // one for each comma.\n    int foldedSize = arrayFoldedChildren.size() - 1;\n\n    // calculate the folded size by adding the size of all non-string nodes and strings as well as the length of the separator\n    for (Node elem : arrayFoldedChildren) {\n      if (elem.getType() == Token.STRING) {\n        foldedSize += NodeUtil.getStringValue(elem).length();\n      } else {\n        foldedSize += InlineCostEstimator.getCost(elem);\n      }\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that it is coerced to a string.\n          Node replacement =\n              new Node(Token.ADD, Node.newString(\"\").copyInformationFrom(n), foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        reportCodeChange();\n        break;\n    }\n\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..d39a8a60 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -381,53 +381,55 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     Node arrayNode = callTarget.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n+    // \",\" is the default, it doesn't need to be explicit\n     String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n     Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n+    StringBuilder sb = new StringBuilder();\n+\n+    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n+      String elemValue = (elem.isObjectLit() || elem.isArrayLit()) ? null : NodeUtil.getStringValue(elem);\n+      if (elemValue != null || elem.getType() == Token.EMPTY) {\n+        if (elemValue == null || elemValue.isEmpty()) {\n+          // ignore empty or non-string elements\n+          continue;\n+        }\n+        // concatenate the string to the current sb\n+        if (prev != null && prev.getType() != Token.EMPTY) {\n           sb.append(joinString);\n         }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n+        sb.append(elemValue);\n       } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+        if (sb.length() != 0) {\n+          // create a new String node from the current sb\n+          arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n+          sb.setLength(0);\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n       }\n       prev = elem;\n-      elem = elem.getNext();\n     }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+    if (sb.length() != 0) {\n+      // create a new string node from the current sb\n+      arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n     }\n+\n     // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+    int foldedSize = arrayFoldedChildren.size() - 1;\n+\n+    // calculate the folded size by adding the size of all non-string nodes and strings as well as the length of the separator\n+    for (Node elem : arrayFoldedChildren) {\n+      if (elem.getType() == Token.STRING) {\n+        foldedSize += NodeUtil.getStringValue(elem).length();\n+      } else {\n+        foldedSize += InlineCostEstimator.getCost(elem);\n+      }\n+    }\n \n     int originalSize = InlineCostEstimator.getCost(n);\n     switch (arrayFoldedChildren.size()) {\n@@ -443,11 +445,9 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n         }\n         arrayNode.detachChildren();\n         if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n+          // If the Node is not a string literal, ensure that it is coerced to a string.\n+          Node replacement =\n+              new Node(Token.ADD, Node.newString(\"\").copyInformationFrom(n), foldedStringNode);\n           foldedStringNode = replacement;\n         }\n         n.getParent().replaceChild(n, foldedStringNode);\n@@ -642,4 +642,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}