{
    "patch": "Matcher patternMatcher = formatPattern.matcher(pattern);\nif (!patternMatcher.lookingAt()) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\n\ncurrentFormatField = patternMatcher.group();\nStrategy currentStrategy = getStrategy(currentFormatField);\nwhile (patternMatcher.find()) {\n    String nextFormatField = patternMatcher.group();\n    nextStrategy = getStrategy(nextFormatField);\n    if (currentStrategy == nextStrategy) {\n        if (currentStrategy.addRegex(this, regex)) {\n            continue;\n        }\n    } else {\n        if (currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField = nextFormatField;\n        currentStrategy = nextStrategy;\n    }\n}\nif (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n    collector.add(currentStrategy);\n}\nif (collector.isEmpty()) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\nstrategies = collector.toArray(new Strategy[collector.size()]);\ncurrentFormatField = null;\nparsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..8c71517d 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,37 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+Matcher patternMatcher = formatPattern.matcher(pattern);\n+if (!patternMatcher.lookingAt()) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+\n+currentFormatField = patternMatcher.group();\n+Strategy currentStrategy = getStrategy(currentFormatField);\n+while (patternMatcher.find()) {\n+    String nextFormatField = patternMatcher.group();\n+    nextStrategy = getStrategy(nextFormatField);\n+    if (currentStrategy == nextStrategy) {\n+        if (currentStrategy.addRegex(this, regex)) {\n+            continue;\n+        }\n+    } else {\n+        if (currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+        currentFormatField = nextFormatField;\n+        currentStrategy = nextStrategy;\n+    }\n+}\n+if (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n+    collector.add(currentStrategy);\n+}\n+if (collector.isEmpty()) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+strategies = collector.toArray(new Strategy[collector.size()]);\n+currentFormatField = null;\n+parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: variable patternMatcher is already defined in method init()",
    "test_result": "ERROR"
}