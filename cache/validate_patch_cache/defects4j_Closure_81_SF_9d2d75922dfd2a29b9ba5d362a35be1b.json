{
    "patch": "import com.google.common.collect.ImmutableSet;\nimport com.google.javascript.jscomp.ErrorReporter;\nimport com.google.javascript.jscomp.InlineFunctionAliases;\nimport com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.jscomp.SourceFile;\nimport com.google.javascript.jscomp.parsing.parser.util.format.FormatUtil;\nimport com.google.javascript.rhino.*;\nimport com.google.javascript.rhino.jstype.JSTypeRegistry;\n\nimport java.util.Set;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\nimport static com.google.common.base.Preconditions.checkState;\n\n/**\n * Provides an implementation of the Rhino Parser's {@link IRFactory.TypeSafeDispatcher} interface\n * that can be used to transform a Rhino AST into a corresponding Google Closure Compiler\n * {@link com.google.javascript.jscomp.Node} AST.\n */\npublic class TransformDispatcher implements IRFactory.TypeSafeDispatcher {\n  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\n          \"use strict\", // ES5 strict mode\n          \"use babel\", // babel.js\n          \"use strict-mode\" // Mozilla\n      );\n\n  private final AstRoot root;\n  private final ErrorReporter errorReporter;\n  private final String sourceName;\n  private final InlineFunctionAliases aliases;\n  private final Set<String> referencedNames;\n  private final JSTypeRegistry typeRegistry;\n  private final SourceFile sourceFile;\n\n  /**\n   * Initializes the dispatcher with the given error reporter, source name, {@link SourceFile}, and\n   * {@link JSTypeRegistry}.\n   *\n   * @param root the root node of the Rhino AST\n   * @param errorReporter the error reporter for logging parser messages\n   * @param sourceName the name of the source file being compiled\n   * @param aliases the inline function aliases for this compilation unit\n   * @param referencedNames the {@link Set} of referenced names from the transpile operation\n   * @param typeRegistry the type registry for this compilation unit\n   * @param sourceFile the source file being compiled\n   */\n  public TransformDispatcher(\n      AstRoot root,\n      ErrorReporter errorReporter,\n      String sourceName,\n      InlineFunctionAliases aliases,\n      Set<String> referencedNames,\n      JSTypeRegistry typeRegistry,\n      SourceFile sourceFile) {\n    this.root = root;\n    this.errorReporter = errorReporter;\n    this.sourceName = sourceName;\n    this.aliases = aliases;\n    this.referencedNames = referencedNames;\n    this.typeRegistry = typeRegistry;\n    this.sourceFile = sourceFile;\n  }\n\n  private Node newNode(int type, AstNode original) {\n    int position = original != null ? original.getPosition() : -1;\n    return new Node(position, type);\n  }\n\n  private Node newNode(int type, AstNode left, AstNode right) {\n    int position = left != null ? left.getPosition() ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..1dccdf28 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,181 +385,77 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.javascript.jscomp.ErrorReporter;\n+import com.google.javascript.jscomp.InlineFunctionAliases;\n+import com.google.javascript.jscomp.NodeUtil;\n+import com.google.javascript.jscomp.SourceFile;\n+import com.google.javascript.jscomp.parsing.parser.util.format.FormatUtil;\n+import com.google.javascript.rhino.*;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n-\n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n+import java.util.Set;\n \n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n-    }\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n+/**\n+ * Provides an implementation of the Rhino Parser's {@link IRFactory.TypeSafeDispatcher} interface\n+ * that can be used to transform a Rhino AST into a corresponding Google Closure Compiler\n+ * {@link com.google.javascript.jscomp.Node} AST.\n+ */\n+public class TransformDispatcher implements IRFactory.TypeSafeDispatcher {\n+  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n+      ImmutableSet.of(\n+          \"use strict\", // ES5 strict mode\n+          \"use babel\", // babel.js\n+          \"use strict-mode\" // Mozilla\n+      );\n+\n+  private final AstRoot root;\n+  private final ErrorReporter errorReporter;\n+  private final String sourceName;\n+  private final InlineFunctionAliases aliases;\n+  private final Set<String> referencedNames;\n+  private final JSTypeRegistry typeRegistry;\n+  private final SourceFile sourceFile;\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+  /**\n+   * Initializes the dispatcher with the given error reporter, source name, {@link SourceFile}, and\n+   * {@link JSTypeRegistry}.\n+   *\n+   * @param root the root node of the Rhino AST\n+   * @param errorReporter the error reporter for logging parser messages\n+   * @param sourceName the name of the source file being compiled\n+   * @param aliases the inline function aliases for this compilation unit\n+   * @param referencedNames the {@link Set} of referenced names from the transpile operation\n+   * @param typeRegistry the type registry for this compilation unit\n+   * @param sourceFile the source file being compiled\n+   */\n+  public TransformDispatcher(\n+      AstRoot root,\n+      ErrorReporter errorReporter,\n+      String sourceName,\n+      InlineFunctionAliases aliases,\n+      Set<String> referencedNames,\n+      JSTypeRegistry typeRegistry,\n+      SourceFile sourceFile) {\n+    this.root = root;\n+    this.errorReporter = errorReporter;\n+    this.sourceName = sourceName;\n+    this.aliases = aliases;\n+    this.referencedNames = referencedNames;\n+    this.typeRegistry = typeRegistry;\n+    this.sourceFile = sourceFile;\n+  }\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+  private Node newNode(int type, AstNode original) {\n+    int position = original != null ? original.getPosition() : -1;\n+    return new Node(position, type);\n+  }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n-    }\n+  private Node newNode(int type, AstNode left, AstNode right) {\n+    int position = left != null ? left.getPosition() \n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}