{
    "patch": "public void addValue(double value) {\n    // Ignore NaN and infinite values\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        return;\n    }\n    \n    // Update count\n    n++;\n    \n    // Update running statistics\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    secondMoment.increment(value);\n    \n    // Handle Mean\n    if (meanImpl instanceof Mean) {\n        ((Mean) meanImpl).increment(value);\n    }\n    else if (meanImpl instanceof StorelessUnivariateStatistic) {\n        meanImpl.increment(value);\n    }\n    \n    // Handle Variance\n    if (varianceImpl instanceof Variance && n > 1) {\n        ((Variance) varianceImpl).increment(value);\n    }\n    else if (varianceImpl instanceof StorelessUnivariateStatistic && n > 1) {\n        varianceImpl.increment(value);\n    }\n    \n    // Handle Geometric Mean\n    if (geoMeanImpl instanceof GeometricMean && value > 0) {\n        ((GeometricMean) geoMeanImpl).increment(value);\n        sumLogImpl.increment(Math.log(value));\n    }\n    else if (geoMeanImpl instanceof StorelessUnivariateStatistic && value > 0) {\n        geoMeanImpl.increment(value);\n        sumLogImpl.increment(Math.log(value));\n    }\n    \n    // Handle negative values for geometric mean\n    if (value < 0 && geoMeanImpl instanceof GeometricMean) {\n        sumLogImpl = null;\n        geoMeanImpl = new GeometricMean();\n    }\n    else if (value < 0 && geoMeanImpl instanceof StorelessUnivariateStatistic) {\n        ((StorelessUnivariateStatistic) geoMeanImpl).clear();\n        sumLogImpl.increment(Double.NEGATIVE_INFINITY);\n    }\n    \n    // Handle overflow conditions\n    if (n == 0) {\n        throw new MathIllegalStateException(LocalizedFormats.OVERFLOW);\n    }\n    if (meanImpl instanceof StorelessUnivariateStatistic && Double.isInfinite(((StorelessUnivariateStatistic) meanImpl).getResult())) {\n        throw new MathIllegalStateException(LocalizedFormats.OVERFLOW);\n    }\n    if (varianceImpl instanceof StorelessUnivariateStatistic && Double.isInfinite(((StorelessUnivariateStatistic) varianceImpl).getResult())) {\n        throw new MathIllegalStateException(LocalizedFormats.OVERFLOW);\n    }\n    if (geoMeanImpl instanceof StorelessUnivariateStatistic && Double.isInfinite(((StorelessUnivariateStatistic) geoMeanImpl).getResult())) {\n        throw new MathIllegalStateException(LocalizedFormats.OVERFLOW);\n    }\n}\n",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..6e19f303c 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,73 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n-        }\n-        n++;\n+public void addValue(double value) {\n+    // Ignore NaN and infinite values\n+    if (Double.isNaN(value) || Double.isInfinite(value)) {\n+        return;\n+    }\n+    \n+    // Update count\n+    n++;\n+    \n+    // Update running statistics\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    secondMoment.increment(value);\n+    \n+    // Handle Mean\n+    if (meanImpl instanceof Mean) {\n+        ((Mean) meanImpl).increment(value);\n+    }\n+    else if (meanImpl instanceof StorelessUnivariateStatistic) {\n+        meanImpl.increment(value);\n+    }\n+    \n+    // Handle Variance\n+    if (varianceImpl instanceof Variance && n > 1) {\n+        ((Variance) varianceImpl).increment(value);\n+    }\n+    else if (varianceImpl instanceof StorelessUnivariateStatistic && n > 1) {\n+        varianceImpl.increment(value);\n+    }\n+    \n+    // Handle Geometric Mean\n+    if (geoMeanImpl instanceof GeometricMean && value > 0) {\n+        ((GeometricMean) geoMeanImpl).increment(value);\n+        sumLogImpl.increment(Math.log(value));\n+    }\n+    else if (geoMeanImpl instanceof StorelessUnivariateStatistic && value > 0) {\n+        geoMeanImpl.increment(value);\n+        sumLogImpl.increment(Math.log(value));\n+    }\n+    \n+    // Handle negative values for geometric mean\n+    if (value < 0 && geoMeanImpl instanceof GeometricMean) {\n+        sumLogImpl = null;\n+        geoMeanImpl = new GeometricMean();\n+    }\n+    else if (value < 0 && geoMeanImpl instanceof StorelessUnivariateStatistic) {\n+        ((StorelessUnivariateStatistic) geoMeanImpl).clear();\n+        sumLogImpl.increment(Double.NEGATIVE_INFINITY);\n+    }\n+    \n+    // Handle overflow conditions\n+    if (n == 0) {\n+        throw new MathIllegalStateException(LocalizedFormats.OVERFLOW);\n+    }\n+    if (meanImpl instanceof StorelessUnivariateStatistic && Double.isInfinite(((StorelessUnivariateStatistic) meanImpl).getResult())) {\n+        throw new MathIllegalStateException(LocalizedFormats.OVERFLOW);\n+    }\n+    if (varianceImpl instanceof StorelessUnivariateStatistic && Double.isInfinite(((StorelessUnivariateStatistic) varianceImpl).getResult())) {\n+        throw new MathIllegalStateException(LocalizedFormats.OVERFLOW);\n+    }\n+    if (geoMeanImpl instanceof StorelessUnivariateStatistic && Double.isInfinite(((StorelessUnivariateStatistic) geoMeanImpl).getResult())) {\n+        throw new MathIllegalStateException(LocalizedFormats.OVERFLOW);\n     }\n+}\n+\n \n     /**\n      * Returns the number of available values",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}