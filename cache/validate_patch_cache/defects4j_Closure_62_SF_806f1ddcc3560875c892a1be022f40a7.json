{
    "patch": "private String format(JSError error, boolean warning) {\n    SourceExcerptProvider source = getSource();\n    String sourceExcerpt = source == null ? null : excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n\n    StringBuilder builder = new StringBuilder();\n    if (error.sourceName != null) {\n        builder.append(error.sourceName);\n        if (error.lineNumber > 0) {\n            builder.append(':');\n            builder.append(error.lineNumber);\n        }\n        builder.append(\": \");\n    }\n\n    builder.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    builder.append(\" - \");\n    builder.append(error.description);\n    builder.append('\\n');\n    if (sourceExcerpt != null) {\n        builder.append(sourceExcerpt);\n        builder.append('\\n');\n        int charno = error.getCharno();\n        if (excerpt.equals(LINE) && 0 <= charno && charno <= sourceExcerpt.length()) {\n            for (int i = 0; i < charno; i++) {\n                char c = sourceExcerpt.charAt(i);\n                builder.append(Character.isWhitespace(c) ? c : ' ');\n            }\n            builder.append(\"^\\n\");\n        } else if (excerpt.equals(LINE) && charno > sourceExcerpt.length()) {\n            for (int i = 0; i < sourceExcerpt.length(); i++) {\n                char c = sourceExcerpt.charAt(i);\n                builder.append(Character.isWhitespace(c) ? c : ' ');\n            }\n            builder.append('^');\n            builder.append('\\n');\n        }\n    }\n\n    return builder.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884c..08011240 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -63,52 +63,46 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n     return format(warning, true);\n   }\n \n-  private String format(JSError error, boolean warning) {\n-    // extract source excerpt\n+private String format(JSError error, boolean warning) {\n     SourceExcerptProvider source = getSource();\n-    String sourceExcerpt = source == null ? null :\n-        excerpt.get(\n-            source, error.sourceName, error.lineNumber, excerptFormatter);\n+    String sourceExcerpt = source == null ? null : excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n \n-    // formatting the message\n-    StringBuilder b = new StringBuilder();\n+    StringBuilder builder = new StringBuilder();\n     if (error.sourceName != null) {\n-      b.append(error.sourceName);\n-      if (error.lineNumber > 0) {\n-        b.append(':');\n-        b.append(error.lineNumber);\n-      }\n-      b.append(\": \");\n+        builder.append(error.sourceName);\n+        if (error.lineNumber > 0) {\n+            builder.append(':');\n+            builder.append(error.lineNumber);\n+        }\n+        builder.append(\": \");\n     }\n \n-    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n-    b.append(\" - \");\n-\n-    b.append(error.description);\n-    b.append('\\n');\n+    builder.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n+    builder.append(\" - \");\n+    builder.append(error.description);\n+    builder.append('\\n');\n     if (sourceExcerpt != null) {\n-      b.append(sourceExcerpt);\n-      b.append('\\n');\n-      int charno = error.getCharno();\n-\n-      // padding equal to the excerpt and arrow at the end\n-      // charno == sourceExpert.length() means something is missing\n-      // at the end of the line\n-      if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n-        for (int i = 0; i < charno; i++) {\n-          char c = sourceExcerpt.charAt(i);\n-          if (Character.isWhitespace(c)) {\n-            b.append(c);\n-          } else {\n-            b.append(' ');\n-          }\n+        builder.append(sourceExcerpt);\n+        builder.append('\\n');\n+        int charno = error.getCharno();\n+        if (excerpt.equals(LINE) && 0 <= charno && charno <= sourceExcerpt.length()) {\n+            for (int i = 0; i < charno; i++) {\n+                char c = sourceExcerpt.charAt(i);\n+                builder.append(Character.isWhitespace(c) ? c : ' ');\n+            }\n+            builder.append(\"^\\n\");\n+        } else if (excerpt.equals(LINE) && charno > sourceExcerpt.length()) {\n+            for (int i = 0; i < sourceExcerpt.length(); i++) {\n+                char c = sourceExcerpt.charAt(i);\n+                builder.append(Character.isWhitespace(c) ? c : ' ');\n+            }\n+            builder.append('^');\n+            builder.append('\\n');\n         }\n-        b.append(\"^\\n\");\n-      }\n     }\n-    return b.toString();\n-  }\n+\n+    return builder.toString();\n+}\n \n   /**\n    * Formats a region by appending line numbers in front, e.g.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}