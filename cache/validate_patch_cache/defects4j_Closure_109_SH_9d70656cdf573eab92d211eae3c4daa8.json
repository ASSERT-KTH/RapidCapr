{
    "patch": "    if (token != null) {\n      switch (token.getType()) {\n        case IDENTIFIER:\n          return new ContextTypeExpression(new Name(token.getValue()));\n        case LBRACKET:\n          JSDocToken nextToken = getNextToken();\n          if (nextToken != null && nextToken.getType() == JSDocToken.Type.RBRACKET) {\n            return new ContextTypeExpression(new GenericType(Lists.newArrayList()));\n          }\n          break;\n        case RECORD_START:\n          return parseRecordTypeExpression(token);\n        case FUNCTION_START:\n          return parseFunctionTypeExpression(token);\n        case UNION_OPERATOR:\n          return parseUnionTypeExpression();\n        case VOID_OPERATOR:\n          return VOID;\n        default:\n          break;\n      }\n    }\n    throw new JSDocSyntaxException(\"Missing or invalid context type expression\");",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..47739ec0 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,29 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+    if (token != null) {\n+      switch (token.getType()) {\n+        case IDENTIFIER:\n+          return new ContextTypeExpression(new Name(token.getValue()));\n+        case LBRACKET:\n+          JSDocToken nextToken = getNextToken();\n+          if (nextToken != null && nextToken.getType() == JSDocToken.Type.RBRACKET) {\n+            return new ContextTypeExpression(new GenericType(Lists.newArrayList()));\n+          }\n+          break;\n+        case RECORD_START:\n+          return parseRecordTypeExpression(token);\n+        case FUNCTION_START:\n+          return parseFunctionTypeExpression(token);\n+        case UNION_OPERATOR:\n+          return parseUnionTypeExpression();\n+        case VOID_OPERATOR:\n+          return VOID;\n+        default:\n+          break;\n+      }\n+    }\n+    throw new JSDocSyntaxException(\"Missing or invalid context type expression\");\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}