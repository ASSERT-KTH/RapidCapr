{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double v1Magnitude = v1.getNorm();\n    final double v2Magnitude = v2.getNorm();\n\n    final double ax = v1.x / v1Magnitude;\n    final double ay = v1.y / v1Magnitude;\n    final double az = v1.z / v1Magnitude;\n\n    final double bx = v2.x / v2Magnitude;\n    final double by = v2.y / v2Magnitude;\n    final double bz = v2.z / v2Magnitude;\n\n    final double cx = ay * bz - az * by;\n    final double cy = az * bx - ax * bz;\n    final double cz = ax * by - ay * bx;\n    \n    return new Vector3D(cx * v1Magnitude * v2Magnitude, cy * v1Magnitude * v2Magnitude, cz * v1Magnitude * v2Magnitude);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..b27566826 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,27 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double v1Magnitude = v1.getNorm();\n+    final double v2Magnitude = v2.getNorm();\n+\n+    final double ax = v1.x / v1Magnitude;\n+    final double ay = v1.y / v1Magnitude;\n+    final double az = v1.z / v1Magnitude;\n+\n+    final double bx = v2.x / v2Magnitude;\n+    final double by = v2.y / v2Magnitude;\n+    final double bz = v2.z / v2Magnitude;\n+\n+    final double cx = ay * bz - az * by;\n+    final double cy = az * bx - ax * bz;\n+    final double cz = ax * by - ay * bx;\n+    \n+    return new Vector3D(cx * v1Magnitude * v2Magnitude, cy * v1Magnitude * v2Magnitude, cz * v1Magnitude * v2Magnitude);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<-1.0> but was:<-1.0000002150225664>",
    "test_result": "FAIL"
}