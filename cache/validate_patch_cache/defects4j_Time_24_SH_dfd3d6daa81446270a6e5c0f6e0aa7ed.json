{
    "patch": "            if (resetFields) {\n                for (int i = 0; i < count; i++) {\n                    SavedField savedField = savedFields[i];\n                    if (savedField.isSaved()) {\n                        resetField(savedField.iField);\n                        savedField.setNotSaved();\n                    }\n                }\n            } else {\n                long millis = iMillis;\n                try {\n                    for (int i = 0; i < count; i++) {\n                        millis = savedFields[i].set(millis, resetFields);\n                    }\n                } catch (IllegalFieldValueException e) {\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                    }\n                    throw e;\n                }\n                long duration = millis - iMillis;\n                if (resetFields) {\n                    for (int i = 0; i < count; i++) {\n                        SavedField savedField = savedFields[i];\n                        if (savedField.isSaved()) {\n                            DurationField durationField = savedField.iField.getDurationField();\n                            duration = durationField.addWrapped(millis, durationField.getType().getField(iChrono).getMinimumValue(), durationField.getType().getField(iChrono).getMaximumValue());\n                            millis = savedField.set(duration, false);\n                        }\n                    }\n                } else {\n                    for (int i = 0; i < count; i++) {\n                        millis = savedFields[i].set(millis, resetFields);\n                    }\n                }\n                if (millis <= iMillis && millis != DateTimeUtils.MILLIS_PER_DAY) {\n                    boolean dateAdjusted = false;\n                    for (int i = 0; i < count; i++) {\n                        SavedField savedField = savedFields[i];\n                        if (savedField.isSaved()) {\n                            DateTimeField field = savedField.iField;\n                            int amount = savedField.iValue;\n                            int min = field.getMinimumValue(millis);\n                            int max = field.getMaximumValue(millis);\n                            int diff = max - min + 1;\n                            int mod = (amount % diff + diff) % diff;\n                            if (mod != 0) {\n                                millis = field.addWrapField(millis, mod);\n                                savedField.set(millis + FieldUtils.safeMultiply(field.getType().getField(iChrono).getDurationField().getType().getField(iChrono).getUnitMillis(), (amount - mod)), false);\n                                dateAdjusted = true;\n                                break;\n                            }\n                        }\n                    }\n        >>> [ INFILL ] <<<\n                    if (!dateAdjusted) {\n                        throw new IllegalStateException(\"Failed to resolve parsed fields\");\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..bc763fe1 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,66 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (resetFields) {\n+                for (int i = 0; i < count; i++) {\n+                    SavedField savedField = savedFields[i];\n+                    if (savedField.isSaved()) {\n+                        resetField(savedField.iField);\n+                        savedField.setNotSaved();\n+                    }\n+                }\n+            } else {\n+                long millis = iMillis;\n+                try {\n+                    for (int i = 0; i < count; i++) {\n+                        millis = savedFields[i].set(millis, resetFields);\n+                    }\n+                } catch (IllegalFieldValueException e) {\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                    }\n+                    throw e;\n+                }\n+                long duration = millis - iMillis;\n+                if (resetFields) {\n+                    for (int i = 0; i < count; i++) {\n+                        SavedField savedField = savedFields[i];\n+                        if (savedField.isSaved()) {\n+                            DurationField durationField = savedField.iField.getDurationField();\n+                            duration = durationField.addWrapped(millis, durationField.getType().getField(iChrono).getMinimumValue(), durationField.getType().getField(iChrono).getMaximumValue());\n+                            millis = savedField.set(duration, false);\n+                        }\n+                    }\n+                } else {\n+                    for (int i = 0; i < count; i++) {\n+                        millis = savedFields[i].set(millis, resetFields);\n+                    }\n+                }\n+                if (millis <= iMillis && millis != DateTimeUtils.MILLIS_PER_DAY) {\n+                    boolean dateAdjusted = false;\n+                    for (int i = 0; i < count; i++) {\n+                        SavedField savedField = savedFields[i];\n+                        if (savedField.isSaved()) {\n+                            DateTimeField field = savedField.iField;\n+                            int amount = savedField.iValue;\n+                            int min = field.getMinimumValue(millis);\n+                            int max = field.getMaximumValue(millis);\n+                            int diff = max - min + 1;\n+                            int mod = (amount % diff + diff) % diff;\n+                            if (mod != 0) {\n+                                millis = field.addWrapField(millis, mod);\n+                                savedField.set(millis + FieldUtils.safeMultiply(field.getType().getField(iChrono).getDurationField().getType().getField(iChrono).getUnitMillis(), (amount - mod)), false);\n+                                dateAdjusted = true;\n+                                break;\n+                            }\n+                        }\n+                    }\n+        >>> [ INFILL ] <<<\n+                    if (!dateAdjusted) {\n+                        throw new IllegalStateException(\"Failed to resolve parsed fields\");\n+                    }\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}