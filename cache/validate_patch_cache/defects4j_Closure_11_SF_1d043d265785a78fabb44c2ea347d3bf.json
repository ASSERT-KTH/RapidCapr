{
    "patch": "public Properties getprop4(InputStream input) throws IOException {\n    Properties prop = new Properties();\n    prop.load(input);\n    validate(prop);\n    return prop;\n}\n\nprivate void validate(Properties prop) {\n    String[] requiredProperties = { \"key1\", \"key2\" };\n    List<String> warnings = new ArrayList<>();\n\n    for (String key : requiredProperties) {\n        String value = prop.getProperty(key);\n        if (value == null || value.trim().isEmpty()) {\n            warnings.add(\"Missing required property: '\" + key + \"'\");\n        }\n    }\n\n    if (!warnings.isEmpty()) {\n        throw new IllegalArgumentException(\"Invalid configuration:\" + System.lineSeparator()\n                + String.join(System.lineSeparator(), warnings));\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..066eeceb 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public Properties getprop4(InputStream input) throws IOException {\n+    Properties prop = new Properties();\n+    prop.load(input);\n+    validate(prop);\n+    return prop;\n+}\n+\n+private void validate(Properties prop) {\n+    String[] requiredProperties = { \"key1\", \"key2\" };\n+    List<String> warnings = new ArrayList<>();\n+\n+    for (String key : requiredProperties) {\n+        String value = prop.getProperty(key);\n+        if (value == null || value.trim().isEmpty()) {\n+            warnings.add(\"Missing required property: '\" + key + \"'\");\n+        }\n+    }\n+\n+    if (!warnings.isEmpty()) {\n+        throw new IllegalArgumentException(\"Invalid configuration:\" + System.lineSeparator()\n+                + String.join(System.lineSeparator(), warnings));\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}