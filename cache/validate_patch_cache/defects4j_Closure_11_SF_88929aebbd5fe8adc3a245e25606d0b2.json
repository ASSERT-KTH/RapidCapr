{
    "patch": "public String getProp(String propName) {\n    String retVal = \"\";\n    String propVal = System.getProperty(propName);\n    if (propVal == null) {\n        String message = \"Property \" + propName + \" not found\";\n        System.err.println(message);\n        retVal = message;\n    } else if (propVal.isEmpty()) {\n        String message = \"Property \" + propName + \" is empty\";\n        System.err.println(message);\n        retVal = message;\n    } else {\n        retVal = propVal;\n    }\n\n    return retVal;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..c0da7f59 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProp(String propName) {\n+    String retVal = \"\";\n+    String propVal = System.getProperty(propName);\n+    if (propVal == null) {\n+        String message = \"Property \" + propName + \" not found\";\n+        System.err.println(message);\n+        retVal = message;\n+    } else if (propVal.isEmpty()) {\n+        String message = \"Property \" + propName + \" is empty\";\n+        System.err.println(message);\n+        retVal = message;\n+    } else {\n+        retVal = propVal;\n+    }\n+\n+    return retVal;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}