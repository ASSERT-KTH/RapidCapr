{
    "patch": "public static double getTypedPercent(String input) {\n    double count = 0;\n    double totalCount = 0;\n    boolean inString = false;\n\n    for(int i = 0; i < input.length(); i++) {\n        char c = input.charAt(i);\n        if(c == '\"' || c == '\\'') {\n            inString = !inString;\n        }\n        if(!inString && c != ' ' && c != '\\n' && c != '\\t' && c != '\\r') {\n            totalCount++;\n            if(Character.isLetter(c)) {\n                count++;\n            }\n        }\n    }\n\n    return (count / totalCount) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..e6852ba6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String input) {\n+    double count = 0;\n+    double totalCount = 0;\n+    boolean inString = false;\n+\n+    for(int i = 0; i < input.length(); i++) {\n+        char c = input.charAt(i);\n+        if(c == '\"' || c == '\\'') {\n+            inString = !inString;\n+        }\n+        if(!inString && c != ' ' && c != '\\n' && c != '\\t' && c != '\\r') {\n+            totalCount++;\n+            if(Character.isLetter(c)) {\n+                count++;\n+            }\n+        }\n+    }\n+\n+    return (count / totalCount) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}