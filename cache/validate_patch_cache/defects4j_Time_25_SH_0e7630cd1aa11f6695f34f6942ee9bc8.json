{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted) {\n        int beforeDstOffset = getOffset(nextAdjusted - 1);\n        int afterDstOffset = getOffset(nextAdjusted);\n        if (offsetLocal >= afterDstOffset && offsetLocal - afterDstOffset < (beforeDstOffset - afterDstOffset) / 2) {\n            return offsetLocal;\n        } else {\n            return getOffset(nextLocal - 1);\n        }\n    } else {\n        long prevAdjusted = previousTransition(nextLocal);\n        if (prevAdjusted < instantLocal - offsetAdjusted && getOffset(prevAdjusted) >= offsetAdjusted) {\n            return offsetLocal;\n        }\n        return getOffset(nextLocal - 1);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..dee2896e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted) {\n+        int beforeDstOffset = getOffset(nextAdjusted - 1);\n+        int afterDstOffset = getOffset(nextAdjusted);\n+        if (offsetLocal >= afterDstOffset && offsetLocal - afterDstOffset < (beforeDstOffset - afterDstOffset) / 2) {\n+            return offsetLocal;\n+        } else {\n+            return getOffset(nextLocal - 1);\n+        }\n+    } else {\n+        long prevAdjusted = previousTransition(nextLocal);\n+        if (prevAdjusted < instantLocal - offsetAdjusted && getOffset(prevAdjusted) >= offsetAdjusted) {\n+            return offsetLocal;\n+        }\n+        return getOffset(nextLocal - 1);\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-04-01T02:30:00.000-04:00 expected:<2007-04-01T0[1]:30:00.000-04:00> but was:<2007-04-01T0[2]:30:00.000-04:00>",
    "test_result": "FAIL"
}