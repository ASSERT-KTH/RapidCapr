{
    "patch": "private boolean canInline(\n        Reference declaration,\n        Reference initialization,\n        Reference reference) {\n      if (!isValidDeclaration(declaration)\n          || !isValidInitialization(initialization)\n          || !isValidReference(reference)) {\n        return false;\n      }\n\n      // If the value is read more than once, skip it.\n      // VAR declarations and EXPR_RESULT nodes don't need the value, but other\n      // ASSIGN expressions parents do.\n      if (declaration.getNode() != initialization.getNode()\n          && !initialization.getGrandparent().isExprResult()) {\n        return false;\n      }\n\n      // Be very conservative and do no cross control structures or\n      // scope boundaries.\n      if (!TraversalUtil.areInSameBlockScope(declaration.getNode(), initialization.getNode())\n          || !TraversalUtil.areInSameBlockScope(declaration.getNode(), reference.getNode())) {\n        return false;\n      }\n\n      // Do not inline into a call node. This would change\n      // the context in which it was being called. For example,\n      //   var a = b.c;\n      //   a();\n      // is different than inline version\n      //   b.c()();\n      // would call a in the context of b rather than the context of the window.\n      //   var a = b.c;\n      //   f(a)\n      // is ok.\n      if (initialization.getAssignedValue().isFunction() && reference.getParent().isCall()) {\n        // Don't inline subclass definitions into class defining calls as they confuse\n        // class removing logic.\n        if (compiler.getCodingConvention().getClassesDefinedByCall(reference.getParent()) != null) {\n          return false;\n        }\n\n        // Don't inline singleton getter methods calls as they confuse class removing logic.\n        if (isValidSingletonGetter(initialization)) {\n          return false;\n        }\n      }\n\n      return canMoveAggressively(initialization.getAssignedValue())\n          || canMoveModerately(initialization, reference);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..df13e76b 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -516,7 +516,7 @@ class InlineVariables implements CompilerPass {\n      * @return true if the provided reference and declaration can be safely\n      *         inlined according to our criteria\n      */\n-    private boolean canInline(\n+private boolean canInline(\n         Reference declaration,\n         Reference initialization,\n         Reference reference) {\n@@ -527,17 +527,17 @@ class InlineVariables implements CompilerPass {\n       }\n \n       // If the value is read more than once, skip it.\n-      // VAR declarations and EXPR_RESULT don't need the value, but other\n+      // VAR declarations and EXPR_RESULT nodes don't need the value, but other\n       // ASSIGN expressions parents do.\n-      if (declaration != initialization &&\n-          !initialization.getGrandparent().isExprResult()) {\n+      if (declaration.getNode() != initialization.getNode()\n+          && !initialization.getGrandparent().isExprResult()) {\n         return false;\n       }\n \n       // Be very conservative and do no cross control structures or\n-      // scope boundaries\n-      if (declaration.getBasicBlock() != initialization.getBasicBlock()\n-          || declaration.getBasicBlock() != reference.getBasicBlock()) {\n+      // scope boundaries.\n+      if (!TraversalUtil.areInSameBlockScope(declaration.getNode(), initialization.getNode())\n+          || !TraversalUtil.areInSameBlockScope(declaration.getNode(), reference.getNode())) {\n         return false;\n       }\n \n@@ -545,38 +545,27 @@ class InlineVariables implements CompilerPass {\n       // the context in which it was being called. For example,\n       //   var a = b.c;\n       //   a();\n-      // should not be inlined, because it calls a in the context of b\n-      // rather than the context of the window.\n+      // is different than inline version\n+      //   b.c()();\n+      // would call a in the context of b rather than the context of the window.\n       //   var a = b.c;\n       //   f(a)\n       // is ok.\n-      Node value = initialization.getAssignedValue();\n-      Preconditions.checkState(value != null);\n-      if (value.isGetProp()\n-          && reference.getParent().isCall()\n-          && reference.getParent().getFirstChild() == reference.getNode()) {\n-        return false;\n-      }\n-\n-      if (value.isFunction()) {\n-        Node callNode = reference.getParent();\n-        if (reference.getParent().isCall()) {\n-          CodingConvention convention = compiler.getCodingConvention();\n-          // Bug 2388531: Don't inline subclass definitions into class defining\n-          // calls as this confused class removing logic.\n-          SubclassRelationship relationship =\n-              convention.getClassesDefinedByCall(callNode);\n-          if (relationship != null) {\n-            return false;\n-          }\n+      if (initialization.getAssignedValue().isFunction() && reference.getParent().isCall()) {\n+        // Don't inline subclass definitions into class defining calls as they confuse\n+        // class removing logic.\n+        if (compiler.getCodingConvention().getClassesDefinedByCall(reference.getParent()) != null) {\n+          return false;\n+        }\n \n-          // issue 668: Don't inline singleton getter methods\n-          // calls as this confused class removing logic.\n+        // Don't inline singleton getter methods calls as they confuse class removing logic.\n+        if (isValidSingletonGetter(initialization)) {\n+          return false;\n         }\n       }\n \n-      return canMoveAggressively(value) ||\n-          canMoveModerately(initialization, reference);\n+      return canMoveAggressively(initialization.getAssignedValue())\n+          || canMoveModerately(initialization, reference);\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}