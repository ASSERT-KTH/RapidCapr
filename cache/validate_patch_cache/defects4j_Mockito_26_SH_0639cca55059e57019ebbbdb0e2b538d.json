{
    "patch": "private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();\n\n    static {\n        primitiveTypes.put(Boolean.class, Boolean.TYPE);\n        primitiveTypes.put(Character.class, Character.TYPE);\n        primitiveTypes.put(Byte.class, Byte.TYPE);\n        primitiveTypes.put(Short.class, Short.TYPE);\n        primitiveTypes.put(Integer.class, Integer.TYPE);\n        primitiveTypes.put(Long.class, Long.TYPE);\n        primitiveTypes.put(Float.class, Float.TYPE);\n        primitiveTypes.put(Double.class, Double.TYPE);\n    }\n\n    static {\n        wrapperReturnValues.put(Boolean.class, false);\n        wrapperReturnValues.put(Character.class, '\\u0000');\n        wrapperReturnValues.put(Byte.class, (byte) 0);\n        wrapperReturnValues.put(Short.class, (short) 0);\n        wrapperReturnValues.put(Integer.class, 0);\n        wrapperReturnValues.put(Long.class, 0L);\n        wrapperReturnValues.put(Float.class, 0F);\n        wrapperReturnValues.put(Double.class, 0D);\n    }\n\n    static {\n        primitiveValues.put(boolean.class, false);\n        primitiveValues.put(char.class, '\\u0000');\n        primitiveValues.put(byte.class, (byte) 0);\n        primitiveValues.put(short.class, (short) 0);\n        primitiveValues.put(int.class, 0);\n        primitiveValues.put(long.class, 0L);\n        primitiveValues.put(float.class, 0F);\n        primitiveValues.put(double.class, 0D); \n        // The infilled code starts on a new line\n    }\n\n    public Object returnFor(Class<?> type) {\n        if (type.isPrimitive()) {\n            return primitiveValues.get(type);\n        } else {\n            return wrapperReturnValues.get(type);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java\nindex b44b8253d..a8c945739 100644\n--- a/src/org/mockito/internal/util/Primitives.java\n+++ b/src/org/mockito/internal/util/Primitives.java\n@@ -63,6 +63,48 @@ public class Primitives {\n         primitiveValues.put(int.class, 0);\n         primitiveValues.put(long.class, 0L);\n         primitiveValues.put(float.class, 0F);\n-        primitiveValues.put(double.class, 0);\n+private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();\n+\n+    static {\n+        primitiveTypes.put(Boolean.class, Boolean.TYPE);\n+        primitiveTypes.put(Character.class, Character.TYPE);\n+        primitiveTypes.put(Byte.class, Byte.TYPE);\n+        primitiveTypes.put(Short.class, Short.TYPE);\n+        primitiveTypes.put(Integer.class, Integer.TYPE);\n+        primitiveTypes.put(Long.class, Long.TYPE);\n+        primitiveTypes.put(Float.class, Float.TYPE);\n+        primitiveTypes.put(Double.class, Double.TYPE);\n+    }\n+\n+    static {\n+        wrapperReturnValues.put(Boolean.class, false);\n+        wrapperReturnValues.put(Character.class, '\\u0000');\n+        wrapperReturnValues.put(Byte.class, (byte) 0);\n+        wrapperReturnValues.put(Short.class, (short) 0);\n+        wrapperReturnValues.put(Integer.class, 0);\n+        wrapperReturnValues.put(Long.class, 0L);\n+        wrapperReturnValues.put(Float.class, 0F);\n+        wrapperReturnValues.put(Double.class, 0D);\n+    }\n+\n+    static {\n+        primitiveValues.put(boolean.class, false);\n+        primitiveValues.put(char.class, '\\u0000');\n+        primitiveValues.put(byte.class, (byte) 0);\n+        primitiveValues.put(short.class, (short) 0);\n+        primitiveValues.put(int.class, 0);\n+        primitiveValues.put(long.class, 0L);\n+        primitiveValues.put(float.class, 0F);\n+        primitiveValues.put(double.class, 0D); \n+        // The infilled code starts on a new line\n+    }\n+\n+    public Object returnFor(Class<?> type) {\n+        if (type.isPrimitive()) {\n+            return primitiveValues.get(type);\n+        } else {\n+            return wrapperReturnValues.get(type);\n+        }\n+    }\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}