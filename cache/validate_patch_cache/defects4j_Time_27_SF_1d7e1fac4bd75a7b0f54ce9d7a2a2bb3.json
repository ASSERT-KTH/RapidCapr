{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    // Base case\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n\n    // Case when there is only one pair\n    if (size == 1) {\n        Object pair = elementPairs.get(0);\n        if (pair instanceof PeriodPrinter && !notPrinter) {\n            return new PeriodFormatter((PeriodPrinter) pair, null);\n        } else if (pair instanceof PeriodParser && !notParser) {\n            return new PeriodFormatter(null, (PeriodParser) pair);\n        } else {\n            throw new IllegalArgumentException(\"Invalid element pair\");\n        }\n    }\n\n    // Case when the list starts with a separator\n    if (elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(sep, sep);\n    }\n\n    // Case when the list does not start with a separator\n    Object[] comp = null;\n    int i = 0;\n    int separatorIndex = -1;\n\n    while (i < size) {\n        if (elementPairs.get(i) instanceof Separator) {\n            separatorIndex = i;\n            break;\n        }\n        i++;\n    }\n\n    if (separatorIndex == -1) {\n        // If there are no separators in the list, create a composite and return formatter\n        comp = createComposite(elementPairs);\n\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    } else {\n        // If there is a separator in the list, split the list and recursively process the two parts\n        PeriodFormatter f1 = toFormatter(elementPairs.subList(0, separatorIndex), notPrinter, notParser);\n        PeriodFormatter f2 = toFormatter(elementPairs.subList(separatorIndex + 1, size), notPrinter, notParser);\n        Separator sep = (Separator) elementPairs.get(separatorIndex);\n        if (notPrinter) {\n            return new PeriodFormatter(null, sep.finish(null, f2.getParser()));\n        } else if (notParser) {\n            return new PeriodFormatter(f1.getPrinter(), sep.finish(f2.getPrinter(), null));\n        } else {\n            return new PeriodFormatter(f1.getPrinter(), sep.finish(f2.getPrinter(), f2.getParser()));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..bd6af48d 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,18 +791,55 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    // Base case\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+\n+    // Case when there is only one pair\n+    if (size == 1) {\n+        Object pair = elementPairs.get(0);\n+        if (pair instanceof PeriodPrinter && !notPrinter) {\n+            return new PeriodFormatter((PeriodPrinter) pair, null);\n+        } else if (pair instanceof PeriodParser && !notParser) {\n+            return new PeriodFormatter(null, (PeriodParser) pair);\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid element pair\");\n+        }\n+    }\n+\n+    // Case when the list starts with a separator\n+    if (elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        return new PeriodFormatter(sep, sep);\n+    }\n+\n+    // Case when the list does not start with a separator\n+    Object[] comp = null;\n+    int i = 0;\n+    int separatorIndex = -1;\n+\n+    while (i < size) {\n+        if (elementPairs.get(i) instanceof Separator) {\n+            separatorIndex = i;\n+            break;\n+        }\n+        i++;\n+    }\n+\n+    if (separatorIndex == -1) {\n+        // If there are no separators in the list, create a composite and return formatter\n+        comp = createComposite(elementPairs);\n+\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n         } else if (notParser) {\n@@ -810,7 +847,20 @@ public class PeriodFormatterBuilder {\n         } else {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n+    } else {\n+        // If there is a separator in the list, split the list and recursively process the two parts\n+        PeriodFormatter f1 = toFormatter(elementPairs.subList(0, separatorIndex), notPrinter, notParser);\n+        PeriodFormatter f2 = toFormatter(elementPairs.subList(separatorIndex + 1, size), notPrinter, notParser);\n+        Separator sep = (Separator) elementPairs.get(separatorIndex);\n+        if (notPrinter) {\n+            return new PeriodFormatter(null, sep.finish(null, f2.getParser()));\n+        } else if (notParser) {\n+            return new PeriodFormatter(f1.getPrinter(), sep.finish(f2.getPrinter(), null));\n+        } else {\n+            return new PeriodFormatter(f1.getPrinter(), sep.finish(f2.getPrinter(), f2.getParser()));\n+        }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}