{
    "patch": "        //check if lower is greater than or equal to string length\n        if (lower >= str.length()) {\n             //if greater or equal, return abbreviate entire string\n            if (appendToEnd != null) { \n                return str + appendToEnd;\n            } else {\n                return str;\n            }\n        }\n        //if upper value is -1 (no limit) or greater than the length of the string\n        //set upper to the length of the string\n        if (upper == -1 || upper > str.length()) { \n            upper = str.length();\n        }\n        //if upper value is less than or equal to lower, return substring from 0 to upper\n        if (upper <= lower) { \n            if (appendToEnd != null) {\n                return str.substring(0, upper) + appendToEnd;\n            } else {\n                return str.substring(0, upper);\n            }\n        }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..002c196a 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -613,6 +613,28 @@ public class WordUtils {\n \n         // if the lower value is greater than the length of the string,\n         // set to the length of the string\n+        //check if lower is greater than or equal to string length\n+        if (lower >= str.length()) {\n+             //if greater or equal, return abbreviate entire string\n+            if (appendToEnd != null) { \n+                return str + appendToEnd;\n+            } else {\n+                return str;\n+            }\n+        }\n+        //if upper value is -1 (no limit) or greater than the length of the string\n+        //set upper to the length of the string\n+        if (upper == -1 || upper > str.length()) { \n+            upper = str.length();\n+        }\n+        //if upper value is less than or equal to lower, return substring from 0 to upper\n+        if (upper <= lower) { \n+            if (appendToEnd != null) {\n+                return str.substring(0, upper) + appendToEnd;\n+            } else {\n+                return str.substring(0, upper);\n+            }\n+        }\n         // if the upper value is -1 (i.e. no limit) or is greater\n         // than the length of the string, set to the length of the string\n         if (upper == -1 || upper > str.length()) {",
    "result_reason": "junit.framework.ComparisonFailure: expected:<01[234]> but was:<01[]>",
    "test_result": "FAIL"
}