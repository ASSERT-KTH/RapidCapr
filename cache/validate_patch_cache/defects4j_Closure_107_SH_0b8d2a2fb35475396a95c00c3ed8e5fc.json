{
    "patch": "if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n      if (!flags.translationsFile.isEmpty()) {\n        try {\n          options.messageBundle = new XtbMessageBundle(\n              new FileInputStream(flags.translationsFile),\n              flags.translationsProject);\n        } catch (IOException e) {\n          throw new RuntimeException(\"Reading XTB file\", e);\n        }\n      } else {\n      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n      // translations file, they might reasonably try to write their own\n      // implementation of goog.getMsg that makes the substitution at\n      // run-time.\n      //\n      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n      // so we might as well inline it. But shut off the i18n warnings,\n      // because the user didn't really ask for i18n.\n        options.messageBundle = null;\n        WarningsGuard oldGuard = options.getWarningsGuard();\n        options.setWarningsGuard(new WarningsGuard() {\n          @Override public CheckLevel level(JSError error) {\n            // Only ignore warnings about undefined variables - other warnings must be fixed.\n            if (error.getType() == VarCheck.UNDEFINED_VAR_ERROR) {\n              return null;\n            } else {\n              return oldGuard.level(error);\n            }\n          }\n        });\n      }\n    } else {\n      options.messageBundle = null;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 93b35475..530023b1 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -859,6 +859,40 @@ public class CommandLineRunner extends\n       // so we might as well inline it. But shut off the i18n warnings,\n       // because the user didn't really ask for i18n.\n       options.messageBundle = new EmptyMessageBundle();\n+if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n+      if (!flags.translationsFile.isEmpty()) {\n+        try {\n+          options.messageBundle = new XtbMessageBundle(\n+              new FileInputStream(flags.translationsFile),\n+              flags.translationsProject);\n+        } catch (IOException e) {\n+          throw new RuntimeException(\"Reading XTB file\", e);\n+        }\n+      } else {\n+      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n+      // translations file, they might reasonably try to write their own\n+      // implementation of goog.getMsg that makes the substitution at\n+      // run-time.\n+      //\n+      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n+      // so we might as well inline it. But shut off the i18n warnings,\n+      // because the user didn't really ask for i18n.\n+        options.messageBundle = null;\n+        WarningsGuard oldGuard = options.getWarningsGuard();\n+        options.setWarningsGuard(new WarningsGuard() {\n+          @Override public CheckLevel level(JSError error) {\n+            // Only ignore warnings about undefined variables - other warnings must be fixed.\n+            if (error.getType() == VarCheck.UNDEFINED_VAR_ERROR) {\n+              return null;\n+            } else {\n+              return oldGuard.level(error);\n+            }\n+          }\n+        });\n+      }\n+    } else {\n+      options.messageBundle = null;\n+    }\n     }\n \n     return options;",
    "result_reason": "error: local variable oldGuard is accessed from within inner class; needs to be declared final",
    "test_result": "ERROR"
}