{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    final double factor1 = v1.getNormSq() * v2.getNorm();\n    final double factor2 = v2.getNormSq() * v1.getNorm();\n    final Vector3D v3;\n    if (factor1 == 0 || factor2 == 0) {\n        // if one vector has length 0, the cross product is 0\n        v3 = Vector3D.ZERO;\n    } else {\n        // normalize both vectors without losing precision\n        final Vector3D u1 = v1.normalize();\n        final Vector3D u2 = v2.normalize();\n        // compute v3 = u1 x u2 using formulae from\n        // http://en.wikipedia.org/wiki/Cross_product#Coordinate_notation\n        v3 = new Vector3D(u1.getY() * u2.getZ() - u1.getZ() * u2.getY(),\n                          u1.getZ() * u2.getX() - u1.getX() * u2.getZ(),\n                          u1.getX() * u2.getY() - u1.getY() * u2.getX());\n    }\n    return v3;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..98679f6cc 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,25 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    final double factor1 = v1.getNormSq() * v2.getNorm();\n+    final double factor2 = v2.getNormSq() * v1.getNorm();\n+    final Vector3D v3;\n+    if (factor1 == 0 || factor2 == 0) {\n+        // if one vector has length 0, the cross product is 0\n+        v3 = Vector3D.ZERO;\n+    } else {\n+        // normalize both vectors without losing precision\n+        final Vector3D u1 = v1.normalize();\n+        final Vector3D u2 = v2.normalize();\n+        // compute v3 = u1 x u2 using formulae from\n+        // http://en.wikipedia.org/wiki/Cross_product#Coordinate_notation\n+        v3 = new Vector3D(u1.getY() * u2.getZ() - u1.getZ() * u2.getY(),\n+                          u1.getZ() * u2.getX() - u1.getX() * u2.getZ(),\n+                          u1.getX() * u2.getY() - u1.getY() * u2.getX());\n+    }\n+    return v3;\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.19738550848793068>",
    "test_result": "FAIL"
}