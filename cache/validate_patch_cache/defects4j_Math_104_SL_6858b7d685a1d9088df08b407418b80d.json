{
    "patch": "public class Gamma {\n\n    private static final double DEFAULT_EPSILON = 1e-10;\n\n    private Gamma() {}\n\n    public static double regularizedGammaP(double a, double x) {\n        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n    }\n\n    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n            return Double.NaN;\n        }\n        if (x == 0.0) {\n            return 0.0;\n        }\n        if (x >= a + 1) {\n            return 1 - regularizedGammaQ(a, x, epsilon, maxIterations);\n        }\n        double n = 0.0;\n        double an = 1.0 / a;\n        double sum = an;\n        while (Math.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n            n++;\n            an *= x / (a + n);\n            sum += an;\n        }\n        if (n >= maxIterations) {\n            throw new MaxIterationsExceededException(maxIterations);\n        }\n        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n    }\n\n    private static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations) {\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n            return Double.NaN;\n        }\n        if (x == 0.0) {\n            return 1.0;\n        }\n        if (x < a + 1) {\n            return 1 - regularizedGammaP(a, x, epsilon, maxIterations);\n        }\n        ContinuedFraction fraction = new ContinuedFraction() {\n            protected double getB(int n, double x) {\n                double ret;\n                if (n % 2 == 0) {\n                    ret = n / 2.0;\n                } else {\n                    ret = (a + n) / 2.0;\n                }\n                return ret;\n            }\n\n            protected double getA(int n, double x) {\n                return -(x + a + n - 1);\n            }\n        };\n        return Math.exp(-x + a * Math.log(x) - logGamma(a)) / fraction.evaluate(x, epsilon, maxIterations);\n    }\n\n    public static double logGamma(double x) {\n        if (Double.isNaN(x) || x <= 0.0) {\n            return Double.NaN;\n        }\n        else if (x < 0.5) {\n            return logGamma1(x) - Math.log(x);\n        } else if (x <= 2.5) {\n            return logGamma2(x - 1.0);\n        } else if (x <= 8.0) {\n            int n = (int) Math.floor(x - 1.5);\n            double prod = 1.0;\n            for (int i = 1; i <= n; ++i) {\n                prod *= x - i;\n            }\n            return logGamma2(x - n - 1.0) + Math.log(prod);\n        } else {\n            double sum = lanczos(x);\n            double tmp = x + LANCZOS_G + .5;\n            return ((x -.5) * Math.log(tmp)) - tmp + HALF_LOG_2_PI + Math.log(sum / x);\n        }\n    }\n\n    private static double logGamma1(double x) {\n        double ret;\n        if (Double.isNaN(x) || x <= 0.0) {\n            ret = Double.NaN;\n        } else {\n            double sum = COFF[COFF.length - 1];\n            for (int i = COFF.length - 2; i >= 0; --i) {\n                sum *= x;\n                sum += COFF[i];\n            }\n            ret = Math.log(sum);\n        }\n        return ret;\n    }\n\n    private static double logGamma2(double x) {\n        if (Double.isNaN(x) || x <= 0.0) {\n            return Double.NaN;\n        }\n        double denom = 1.0;\n        for (int i = 0; i < B.length; ++i) {\n            denom += B[i] / (x + i);\n        }\n        double de = x + G + .5;\n        return (((x + .5) * Math.log(de)) - de) + HALF_LOG_2_PI + Math.log(denom / x);\n    }\n    \n    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2 * Math.PI);\n    private static final double LANCZOS_G = 607.0 / 128.0;\n    private static final double[] LANCZOS =\n            {\n                    0.99999999999999709182,\n                    57.156235665862923517,\n                    -59.597960355475491248,\n                    14.136097974741747174,\n                    -0.49191381609762019978,\n                    .33994649984811888699e-4,\n                    .46523628927048575665e-4,\n                    -.98374475304879564677e-4,\n                    .15808870322491248884e-3,\n                    -.21026444172410488319e-3,\n                    .21743961811521264320e-3,\n                    -.16431810653676389022e-3,\n                    .84418223983852743293e-4,\n                    -.26190838401581408670e-4,\n                    .36899182659531622704e-5,\n            };\n\n    private static double lanczos(double x) {\n        double sum = 0.0;\n        for (int i = LANCZOS.length - 1; i > 0; --i) {\n            sum += LANCZOS[i] / (x + i);\n        }\n        return sum + LANCZOS[0];\n    }\n    \n    private static final double[] B = {\n            1.0,\n            -1.0 / 6.0,\n            1.0 / 30.0,\n            -1.0 / 42.0,\n            1.0 / 30.0,\n            -5.0 / 66.0,\n            691.0 / 2730.0,\n            -1.0 / 66.0,\n            3617.0 / 510.0,\n            -43867.0 / 798.0,\n            174611.0 / 330.0,\n            -854513.0 / 138.0,\n            236364091.0 / 2730.0\n    };\n\n    private static final double[] COFF = {\n            .08333333333333333126,\n            -.00277777777776099123,\n            .00079365079350035002,\n            -.00059523809523803840,\n            .00084175084175084440,\n            -.00191752691752691260,\n            .00641025641025641050,\n            -.02955065359477124200,\n            .17964437236883059370,\n            -1.39243221690590111640,\n            13.40286404416838544800,\n            -156.84828462600201702000,\n            2193.10333333333333330000,\n            -36108.77125372498914200000,\n            691472.26885131306720000000,\n            -15238226.46579804432100000000,\n            382900751.39141414140000000000,\n            -10882266035.78439109000000000000,\n            347320283765.00225237000000000000,\n            -12369602142269.27496600000000000000,\n            488788064793079.33523000000000000000,\n            -21320333960919319.0 / 31.0,\n            1.017281476939276805938563785362402256077235e+21 / 3598695.0,\n            -5.1090942171709440000E31 / 33330.0,\n            2.80442169490376840000E33 / 155925.0,\n            -2.20271090519557350000E35 / 6081075.0};\n    \n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}