{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantEstimate (first estimate)\n        final int initialOffset = getOffset(instantLocal);\n\n        // adjust instantEstimate using the initial estimate and recalc the offset\n        final long instantEstimate = instantLocal + initialOffset;\n        final int offsetAfterTransition = getOffset(instantEstimate);\n\n        // if the two offsets are still not equal, we must be near a DST boundary\n        if (offsetAfterTransition != initialOffset) {\n            // Depending on the comparison between the two offsets, we can tell\n            // whether the local wall time was in a gap or an overlap at the DST boundary.\n            long nextTransition = nextTransition(instantLocal);\n            final int offsetBeforeTransition = getOffset(nextTransition - 1);\n\n            if (offsetAfterTransition > initialOffset) {\n                // The local wall time was in a DST gap, so it was skipped.\n                if (initialOffset < offsetBeforeTransition) {\n                    // We were already on the correct side of the gap, so we can use the initial offset.\n                    return initialOffset;\n                } else {\n                    // We need to jump over the gap by using the offset before the transition.\n                    return offsetBeforeTransition;\n                }\n            } else {\n                // The local wall time was during an overlap, so it was ambiguous.\n                if (initialOffset > offsetBeforeTransition) {\n                    // We were already on the correct side of the overlap, so we can use the initial offset.\n                    return initialOffset;\n                }\n\n                // We need to figure out whether we're in the gap or the overlap.\n                long nextTransitionLocal = nextTransition - initialOffset;\n                long nextTransitionEstimate = nextTransition - offsetAfterTransition;\n                if (nextTransitionLocal == nextTransitionEstimate) {\n                    // The local wall time is unambiguous and is in the overlap.\n                    return offsetAfterTransition;\n                } else {\n                    // The local wall time is in a gap and should use the offset before transition.\n                    return offsetBeforeTransition;\n                }\n            }\n        }\n\n        // The estimate is still valid.\n        return initialOffset;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f325e0aa 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,28 +876,52 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+public int getOffsetFromLocal(long instantLocal) {\n+        // get the offset at instantEstimate (first estimate)\n+        final int initialOffset = getOffset(instantLocal);\n+\n+        // adjust instantEstimate using the initial estimate and recalc the offset\n+        final long instantEstimate = instantLocal + initialOffset;\n+        final int offsetAfterTransition = getOffset(instantEstimate);\n+\n+        // if the two offsets are still not equal, we must be near a DST boundary\n+        if (offsetAfterTransition != initialOffset) {\n+            // Depending on the comparison between the two offsets, we can tell\n+            // whether the local wall time was in a gap or an overlap at the DST boundary.\n+            long nextTransition = nextTransition(instantLocal);\n+            final int offsetBeforeTransition = getOffset(nextTransition - 1);\n+\n+            if (offsetAfterTransition > initialOffset) {\n+                // The local wall time was in a DST gap, so it was skipped.\n+                if (initialOffset < offsetBeforeTransition) {\n+                    // We were already on the correct side of the gap, so we can use the initial offset.\n+                    return initialOffset;\n+                } else {\n+                    // We need to jump over the gap by using the offset before the transition.\n+                    return offsetBeforeTransition;\n+                }\n+            } else {\n+                // The local wall time was during an overlap, so it was ambiguous.\n+                if (initialOffset > offsetBeforeTransition) {\n+                    // We were already on the correct side of the overlap, so we can use the initial offset.\n+                    return initialOffset;\n+                }\n+\n+                // We need to figure out whether we're in the gap or the overlap.\n+                long nextTransitionLocal = nextTransition - initialOffset;\n+                long nextTransitionEstimate = nextTransition - offsetAfterTransition;\n+                if (nextTransitionLocal == nextTransitionEstimate) {\n+                    // The local wall time is unambiguous and is in the overlap.\n+                    return offsetAfterTransition;\n+                } else {\n+                    // The local wall time is in a gap and should use the offset before transition.\n+                    return offsetBeforeTransition;\n                 }\n             }\n         }\n-        return offsetAdjusted;\n+\n+        // The estimate is still valid.\n+        return initialOffset;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}