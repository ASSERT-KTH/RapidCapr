{
    "patch": "MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\nClass<?>[] interfaces = ((Factory) mock).getInterfaces();\nCallback[] callbacks = ((Factory) mock).getCallbacks();\nMockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n            (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\nif (callbacks == null) {\n    callbacks = new Callback[interfaces.length];\n    for (int i = 0; i < interfaces.length; i++) {\n        if (org.mockito.internal.creation.util.MockUtil.isSpy(mock) && i == interfaces.length - 1) {\n            callbacks[i] = org.mockito.internal.creation.SpyMethodInterceptor.INSTANCE;\n        } else {\n            callbacks[i] = newFilter;\n        }\n    }\n} else {\n    boolean filterFound = false;\n    for (int i = 0; i < callbacks.length; i++) {\n        if (callbacks[i] instanceof MethodInterceptorFilter) {\n            callbacks[i] = newFilter;\n            filterFound = true;\n            break;\n        }\n    }\n    if (!filterFound) {\n        Callback[] newCallbacks = new Callback[callbacks.length + 1];\n        System.arraycopy(callbacks, 0, newCallbacks, 0, callbacks.length);\n        newCallbacks[callbacks.length] = newFilter;\n        callbacks = newCallbacks;\n    }\n}\n((Factory) mock).setCallbacks(callbacks);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..a47d8970e 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,42 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+Class<?>[] interfaces = ((Factory) mock).getInterfaces();\n+Callback[] callbacks = ((Factory) mock).getCallbacks();\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n+            (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+if (callbacks == null) {\n+    callbacks = new Callback[interfaces.length];\n+    for (int i = 0; i < interfaces.length; i++) {\n+        if (org.mockito.internal.creation.util.MockUtil.isSpy(mock) && i == interfaces.length - 1) {\n+            callbacks[i] = org.mockito.internal.creation.SpyMethodInterceptor.INSTANCE;\n+        } else {\n+            callbacks[i] = newFilter;\n+        }\n+    }\n+} else {\n+    boolean filterFound = false;\n+    for (int i = 0; i < callbacks.length; i++) {\n+        if (callbacks[i] instanceof MethodInterceptorFilter) {\n+            callbacks[i] = newFilter;\n+            filterFound = true;\n+            break;\n+        }\n+    }\n+    if (!filterFound) {\n+        Callback[] newCallbacks = new Callback[callbacks.length + 1];\n+        System.arraycopy(callbacks, 0, newCallbacks, 0, callbacks.length);\n+        newCallbacks[callbacks.length] = newFilter;\n+        callbacks = newCallbacks;\n+    }\n+}\n+((Factory) mock).setCallbacks(callbacks);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: variable oldMockHandler is already defined in method <T>resetMock(T)",
    "test_result": "ERROR"
}