{
    "patch": "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n  if (result == null) {\n    throw new IllegalStateException(\"Failed to get remaining JSDoc line\", new Throwable(\"Null value returned from Stream.getRemainingJSDocLine()\"));\n  }\n  try {\n    jsdocParser.parse();\n  } catch (Exception e) {\n    throw new RuntimeException(\"Failed to parse JSDoc line\", e);\n  }\n  result = result.replace(\"*/\", \"\");\n  return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..873d6a8f 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,19 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+  String result = stream.getRemainingJSDocLine();\n+  if (result == null) {\n+    throw new IllegalStateException(\"Failed to get remaining JSDoc line\", new Throwable(\"Null value returned from Stream.getRemainingJSDocLine()\"));\n+  }\n+  try {\n+    jsdocParser.parse();\n+  } catch (Exception e) {\n+    throw new RuntimeException(\"Failed to parse JSDoc line\", e);\n+  }\n+  result = result.replace(\"*/\", \"\");\n+  return result;\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}