{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n\n    // Save current base year\n    int originalYear = iDefaultYear;\n\n    // Alter base year for parsing if first field is month or day\n    if (count > 0) {\n        DateTimeField firstField = savedFields[0].iField;\n        if (firstField.getType() == DateTimeFieldType.monthOfYear() ||\n            firstField.getType() == DateTimeFieldType.dayOfYear()) {\n            saveField(DateTimeFieldType.year(), 2000);\n        }\n    }\n\n    // Parse fields and compute millis\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    // Restore original base year if it was not modified during parsing\n    if (iDefaultYear == originalYear) {\n        iDefaultYear = originalYear;\n    }\n\n    // Re-sort fields if they were modified and compute millis again\n    if (count > 0) {\n        DateTimeField firstField = savedFields[0].iField;\n        if (firstField.getType() == DateTimeFieldType.monthOfYear() ||\n            firstField.getType() == DateTimeFieldType.dayOfYear()) {\n            sort(savedFields, count);\n            millis = iMillis; // resetting millis to original value after sorting\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        }\n    }\n\n    // Adjust millis by time zone offset\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        if (offset != iZone.getOffset(millis - offset)) {\n            offset = iZone.getOffset(millis - offset);\n        }\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..14448e6f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,73 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+\n+    // Save current base year\n+    int originalYear = iDefaultYear;\n+\n+    // Alter base year for parsing if first field is month or day\n+    if (count > 0) {\n+        DateTimeField firstField = savedFields[0].iField;\n+        if (firstField.getType() == DateTimeFieldType.monthOfYear() ||\n+            firstField.getType() == DateTimeFieldType.dayOfYear()) {\n+            saveField(DateTimeFieldType.year(), 2000);\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n+    }\n+\n+    // Parse fields and compute millis\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n         }\n+        throw e;\n+    }\n \n-        long millis = iMillis;\n-        try {\n+    // Restore original base year if it was not modified during parsing\n+    if (iDefaultYear == originalYear) {\n+        iDefaultYear = originalYear;\n+    }\n+\n+    // Re-sort fields if they were modified and compute millis again\n+    if (count > 0) {\n+        DateTimeField firstField = savedFields[0].iField;\n+        if (firstField.getType() == DateTimeFieldType.monthOfYear() ||\n+            firstField.getType() == DateTimeFieldType.dayOfYear()) {\n+            sort(savedFields, count);\n+            millis = iMillis; // resetting millis to original value after sorting\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+    }\n+\n+    // Adjust millis by time zone offset\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        if (offset != iZone.getOffset(millis - offset)) {\n+            offset = iZone.getOffset(millis - offset);\n+        }\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-06-30T00:00:00.000+01:00> but was:<2010-06-01T00:00:00.000+01:00>",
    "test_result": "FAIL"
}