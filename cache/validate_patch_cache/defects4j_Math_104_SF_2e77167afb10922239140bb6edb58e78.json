{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.Precision;\n\npublic class GammaFunction {\n\n    public static double gamma(double x) {\n        if (x <= 0.0) {\n            return Double.NaN;\n        }\n        if (x < 0.5) {\n            return FastMath.PI / (FastMath.sin(FastMath.PI * x) * gamma(1.0 - x));\n        }\n        if (x == 1.0) {\n            return 1.0;\n        }\n        if (x == 2.0) {\n            return 1.0;\n        }\n        if (x > 2.0 && x < 3.0) {\n            double p = x - 2.0;\n            return p * gamma(x - 1.0);\n        }\n        double lnGamma = Gamma.logGamma(x);\n        if (Precision.isInfinite(lnGamma)) {\n            return lnGamma;\n        }\n        return FastMath.exp(lnGamma);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b8f88380e 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,36 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.Precision;\n+\n+public class GammaFunction {\n+\n+    public static double gamma(double x) {\n+        if (x <= 0.0) {\n+            return Double.NaN;\n+        }\n+        if (x < 0.5) {\n+            return FastMath.PI / (FastMath.sin(FastMath.PI * x) * gamma(1.0 - x));\n+        }\n+        if (x == 1.0) {\n+            return 1.0;\n+        }\n+        if (x == 2.0) {\n+            return 1.0;\n+        }\n+        if (x > 2.0 && x < 3.0) {\n+            double p = x - 2.0;\n+            return p * gamma(x - 1.0);\n+        }\n+        double lnGamma = Gamma.logGamma(x);\n+        if (Precision.isInfinite(lnGamma)) {\n+            return lnGamma;\n+        }\n+        return FastMath.exp(lnGamma);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}