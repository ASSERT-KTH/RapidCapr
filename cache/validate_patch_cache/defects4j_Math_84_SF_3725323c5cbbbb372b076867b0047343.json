{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n\n            } else {\n                simplex = contract(original, comparator);\n            }\n\n        } else {\n            simplex = contract(original, comparator);\n        }\n\n        // check convergence\n        if (isConverged(simplex[0], simplex[simplex.length - 1])) {\n            return;\n        }\n\n    }\n\n}\n\nprivate RealPointValuePair[] contract(final RealPointValuePair[] x,\n                                       final Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair best = x[0];\n\n    // compute the contracted simplex\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[x.length];\n    for (int i = 1; i < x.length; i++) {\n        final double[] xki = x[i].getPoint();\n        final double[] x1 = best.getPoint();\n        final double[] xc = new double[x1.length];\n        double c1 = 0;\n        for (int j = 0; j < x1.length; j++) {\n            final double tmp = contraction * (xki[j] - x1[j]);\n            xc[j] = x1[j] + tmp;\n            c1 += tmp * tmp;\n        }\n        contractedSimplex[i] = new RealPointValuePair(xc,\n                                                       Double.NaN,\n                                                       false);\n    }\n\n    Arrays.sort(contractedSimplex, comparator);\n    return contractedSimplex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..d5a3c790a 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,70 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n \n+            } else {\n+                simplex = contract(original, comparator);\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n+        } else {\n+            simplex = contract(original, comparator);\n+        }\n \n+        // check convergence\n+        if (isConverged(simplex[0], simplex[simplex.length - 1])) {\n+            return;\n         }\n \n     }\n \n+}\n+\n+private RealPointValuePair[] contract(final RealPointValuePair[] x,\n+                                       final Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair best = x[0];\n+\n+    // compute the contracted simplex\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[x.length];\n+    for (int i = 1; i < x.length; i++) {\n+        final double[] xki = x[i].getPoint();\n+        final double[] x1 = best.getPoint();\n+        final double[] xc = new double[x1.length];\n+        double c1 = 0;\n+        for (int j = 0; j < x1.length; j++) {\n+            final double tmp = contraction * (xki[j] - x1[j]);\n+            xc[j] = x1[j] + tmp;\n+            c1 += tmp * tmp;\n+        }\n+        contractedSimplex[i] = new RealPointValuePair(xc,\n+                                                       Double.NaN,\n+                                                       false);\n+    }\n+\n+    Arrays.sort(contractedSimplex, comparator);\n+    return contractedSimplex;\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}