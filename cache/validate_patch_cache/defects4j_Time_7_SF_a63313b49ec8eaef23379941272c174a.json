{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = selectChronology(instant.getChronology());\n    long instantMillis = instant.getMillis();\n    int defaultYear = chrono.year().get(instantMillis);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(instantMillis, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        instant.setMillis(instantMillis);\n        return newPos;\n    }\n    \n    if (bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        chrono = chrono.withZone(DateTimeZone.forOffsetMillis(parsedOffset));\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n\n    long parsedMillis = bucket.computeMillis(false, text);\n    try {\n        instant.setMillis(parsedMillis);\n        if (instant.getChronology() != chrono) {\n            instant.setChronology(chrono);\n        }\n    } catch (IllegalArgumentException e) {\n        if (bucket.getZone() == null && bucket.getOffsetInteger() == null) {\n            throw e;\n        }\n        if (bucket.getOffsetInteger() != null) {\n            instantMillis -= bucket.getOffsetInteger().intValue();\n            instant.setMillis(parsedMillis - bucket.getOffsetInteger().intValue());\n        } else if (bucket.getZone() instanceof FixedDateTimeZone) {\n            instantMillis -= bucket.getZone().getOffset(instantMillis);\n            instant.setMillis(parsedMillis - bucket.getZone().getOffset(parsedMillis));\n        } else {\n            instant.setMillis(parsedMillis);\n        }\n        if (instant.getChronology() != chrono) {\n            instant.setChronology(chrono);\n        }\n    }\n    \n    if (iZone != null) {\n        instant.setZone(iZone);\n    } else if (bucket.getOffsetInteger() != null) {\n        instant.setZone(chrono.getZone().fixedOffsetZone(bucket.getOffsetInteger().intValue()));\n    } else if (bucket.getZone() != null) {\n        instant.setZone(bucket.getZone());\n    }\n    \n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..604d9e00 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,63 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = selectChronology(instant.getChronology());\n+    long instantMillis = instant.getMillis();\n+    int defaultYear = chrono.year().get(instantMillis);\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(instantMillis, chrono, iLocale, iPivotYear, defaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos < 0) {\n+        instant.setMillis(instantMillis);\n+        return newPos;\n+    }\n+    \n+    if (bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        chrono = chrono.withZone(DateTimeZone.forOffsetMillis(parsedOffset));\n+    } else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+    }\n+\n+    long parsedMillis = bucket.computeMillis(false, text);\n+    try {\n+        instant.setMillis(parsedMillis);\n+        if (instant.getChronology() != chrono) {\n+            instant.setChronology(chrono);\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+    } catch (IllegalArgumentException e) {\n+        if (bucket.getZone() == null && bucket.getOffsetInteger() == null) {\n+            throw e;\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        if (bucket.getOffsetInteger() != null) {\n+            instantMillis -= bucket.getOffsetInteger().intValue();\n+            instant.setMillis(parsedMillis - bucket.getOffsetInteger().intValue());\n+        } else if (bucket.getZone() instanceof FixedDateTimeZone) {\n+            instantMillis -= bucket.getZone().getOffset(instantMillis);\n+            instant.setMillis(parsedMillis - bucket.getZone().getOffset(parsedMillis));\n+        } else {\n+            instant.setMillis(parsedMillis);\n         }\n-        return newPos;\n+        if (instant.getChronology() != chrono) {\n+            instant.setChronology(chrono);\n+        }\n+    }\n+    \n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    } else if (bucket.getOffsetInteger() != null) {\n+        instant.setZone(chrono.getZone().fixedOffsetZone(bucket.getOffsetInteger().intValue()));\n+    } else if (bucket.getZone() != null) {\n+        instant.setZone(bucket.getZone());\n     }\n+    \n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}