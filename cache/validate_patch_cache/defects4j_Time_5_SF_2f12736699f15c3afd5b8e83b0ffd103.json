{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        if (millis >= ((long) DateTimeConstants.MILLIS_PER_DAY)) {\n            int days = (int) (millis / ((long) DateTimeConstants.MILLIS_PER_DAY));\n            millis = millis % ((long) DateTimeConstants.MILLIS_PER_DAY);\n            days = FieldUtils.safeAdd(days, getDays());\n            PeriodType pType = type.withDaysRemoved();\n            Period result = new Period(days, 0, 0, 0, 0, 0, 0, 0, pType, ISOChronology.getInstanceUTC());\n            result = result.withMillis((int)millis);\n            type = type.withHoursRemoved().withMinutesRemoved().withSecondsRemoved().withMillisRemoved();\n            if (type.equals(PeriodType.standard())) {\n                result.checkYearsAndMonths(\"normalizedStandard\");\n            }\n            return result;\n        }\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        if (millis < ((long) DateTimeConstants.MILLIS_PER_WEEK)) {\n            Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n            result = result.withYears(getYears());\n            result = result.withMonths(getMonths());\n            result = result.withWeeks(getWeeks());\n            result = result.withDays(0);\n            if (type.equals(PeriodType.standard())) {\n                result.checkYearsAndMonths(\"normalizedStandard\");\n            }\n            return result;\n        }\n        int weeks = (int) (millis / ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        millis = millis % ((long) DateTimeConstants.MILLIS_PER_WEEK);\n        weeks = FieldUtils.safeAdd(weeks, getWeeks());\n        PeriodType pType = type.withWeeksRemoved();\n        Period result = new Period(weeks, 0, 0, 0, 0, 0, 0, 0, pType, ISOChronology.getInstanceUTC());\n        result = result.withMillis((int)millis);\n        type = type.withDaysRemoved().withHoursRemoved().withMinutesRemoved().withSecondsRemoved().withMillisRemoved();\n        if (type.equals(PeriodType.standard())) {\n            result.checkYearsAndMonths(\"normalizedStandard\");\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..b4786645 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1619,20 +1619,40 @@ public final class Period\n         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n+        if (millis >= ((long) DateTimeConstants.MILLIS_PER_DAY)) {\n+            int days = (int) (millis / ((long) DateTimeConstants.MILLIS_PER_DAY));\n+            millis = millis % ((long) DateTimeConstants.MILLIS_PER_DAY);\n+            days = FieldUtils.safeAdd(days, getDays());\n+            PeriodType pType = type.withDaysRemoved();\n+            Period result = new Period(days, 0, 0, 0, 0, 0, 0, 0, pType, ISOChronology.getInstanceUTC());\n+            result = result.withMillis((int)millis);\n+            type = type.withHoursRemoved().withMinutesRemoved().withSecondsRemoved().withMillisRemoved();\n+            if (type.equals(PeriodType.standard())) {\n+                result.checkYearsAndMonths(\"normalizedStandard\");\n             }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+            return result;\n+        }\n+        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+        if (millis < ((long) DateTimeConstants.MILLIS_PER_WEEK)) {\n+            Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+            result = result.withYears(getYears());\n+            result = result.withMonths(getMonths());\n+            result = result.withWeeks(getWeeks());\n+            result = result.withDays(0);\n+            if (type.equals(PeriodType.standard())) {\n+                result.checkYearsAndMonths(\"normalizedStandard\");\n             }\n+            return result;\n+        }\n+        int weeks = (int) (millis / ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+        millis = millis % ((long) DateTimeConstants.MILLIS_PER_WEEK);\n+        weeks = FieldUtils.safeAdd(weeks, getWeeks());\n+        PeriodType pType = type.withWeeksRemoved();\n+        Period result = new Period(weeks, 0, 0, 0, 0, 0, 0, 0, pType, ISOChronology.getInstanceUTC());\n+        result = result.withMillis((int)millis);\n+        type = type.withDaysRemoved().withHoursRemoved().withMinutesRemoved().withSecondsRemoved().withMillisRemoved();\n+        if (type.equals(PeriodType.standard())) {\n+            result.checkYearsAndMonths(\"normalizedStandard\");\n         }\n         return result;\n     }",
    "result_reason": "error: no suitable constructor found for Period(int,int,int,int,int,int,int,int,PeriodType,ISOChronology)",
    "test_result": "ERROR"
}