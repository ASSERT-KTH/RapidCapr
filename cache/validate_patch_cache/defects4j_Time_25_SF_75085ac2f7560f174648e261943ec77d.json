{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long nextTransition = nextTransition(instantLocal);\n    if (instantLocal + offsetLocal < nextTransition) {\n        final int offsetTransition = getOffset(nextTransition);\n        if (offsetLocal != offsetTransition) {\n            return offsetLocal;\n        }\n        return offsetTransition;\n    }\n    final long prevTransition = previousTransition(instantLocal);\n    final int offsetPrevTransition = getOffset(prevTransition);\n    if (offsetLocal == offsetPrevTransition) {\n        return offsetLocal;\n    }\n    final int offsetNextTransition = getOffset(nextTransition);\n    if (offsetLocal >= offsetNextTransition) {\n        return offsetNextTransition;\n    }\n    return offsetPrevTransition;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..2e6417ae 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,27 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int offsetLocal = getOffset(instantLocal);\n+    final long nextTransition = nextTransition(instantLocal);\n+    if (instantLocal + offsetLocal < nextTransition) {\n+        final int offsetTransition = getOffset(nextTransition);\n+        if (offsetLocal != offsetTransition) {\n+            return offsetLocal;\n         }\n-        return offsetAdjusted;\n+        return offsetTransition;\n+    }\n+    final long prevTransition = previousTransition(instantLocal);\n+    final int offsetPrevTransition = getOffset(prevTransition);\n+    if (offsetLocal == offsetPrevTransition) {\n+        return offsetLocal;\n     }\n+    final int offsetNextTransition = getOffset(nextTransition);\n+    if (offsetLocal >= offsetNextTransition) {\n+        return offsetNextTransition;\n+    }\n+    return offsetPrevTransition;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}