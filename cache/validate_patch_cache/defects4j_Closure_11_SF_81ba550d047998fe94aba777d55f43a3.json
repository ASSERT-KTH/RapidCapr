{
    "patch": "public String getprop(String propName) {\n    String propValue = null;\n    Properties props = new Properties();\n\n    try {\n        FileInputStream fis = new FileInputStream(\"config.properties\");\n        props.load(fis);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    propValue = props.getProperty(propName);\n\n    // check if the property exists\n    if (propValue == null) {\n        System.out.println(\"Property \" + propName + \" not found!\");\n    }\n\n    return propValue;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..17a3820c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String propName) {\n+    String propValue = null;\n+    Properties props = new Properties();\n+\n+    try {\n+        FileInputStream fis = new FileInputStream(\"config.properties\");\n+        props.load(fis);\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+\n+    propValue = props.getProperty(propName);\n+\n+    // check if the property exists\n+    if (propValue == null) {\n+        System.out.println(\"Property \" + propName + \" not found!\");\n+    }\n+\n+    return propValue;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}