{
    "patch": "            } catch (IllegalFieldValueException e) {\n                SavedField lastField = iSavedFields[i];\n                if (lastField.isSaved()) {\n                    for (int j = 0; j < i; j++) {\n                        if (iSavedFields[j].isLeap()) {\n                            lastField = iSavedFields[j];\n                        }\n                    }\n                    if (lastField.isLeap()) {\n                        long leapMillis = lastField.getLeapDuration().toMillis();\n                        long lastMillis = lastField.getMillis(millis);\n                        long correctedMillis = correctLeapSecond(lastMillis + leapMillis, false);\n                        if (correctedMillis == lastMillis + leapMillis + 1000) {\n                            correctedMillis = correctLeapSecond(lastMillis + leapMillis - 1000, false);\n                        }\n                        millis = lastField.setMillis(millis, correctedMillis);\n                        i++;\n                        continue;\n                    }\n                }\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c88bc5c6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,31 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } catch (IllegalFieldValueException e) {\n+                SavedField lastField = iSavedFields[i];\n+                if (lastField.isSaved()) {\n+                    for (int j = 0; j < i; j++) {\n+                        if (iSavedFields[j].isLeap()) {\n+                            lastField = iSavedFields[j];\n+                        }\n+                    }\n+                    if (lastField.isLeap()) {\n+                        long leapMillis = lastField.getLeapDuration().toMillis();\n+                        long lastMillis = lastField.getMillis(millis);\n+                        long correctedMillis = correctLeapSecond(lastMillis + leapMillis, false);\n+                        if (correctedMillis == lastMillis + leapMillis + 1000) {\n+                            correctedMillis = correctLeapSecond(lastMillis + leapMillis - 1000, false);\n+                        }\n+                        millis = lastField.setMillis(millis, correctedMillis);\n+                        i++;\n+                        continue;\n+                    }\n+                }\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}