{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getToken()) {\n          case FUNCTION:\n          if (NodeUtil.isFunctionExpression(n) || (NodeUtil.isFunctionDeclaration(n) && NodeUtil.isStatementBlock(parent))) {\n            defineDeclaredFunction(n, parent);\n            return;\n          }\n          break;\n        case CATCH:\n          defineCatch(n, parent);\n          return;\n        case VAR:\n        case LET:\n        case CONST:\n          defineVar(n, parent);\n          return;\n        case LP:\n          if (NodeUtil.isFunctionExpression(parent) || NodeUtil.isFunctionDeclaration(parent)) {\n            handleFunctionInputs(parent);\n          }\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..cbf2539d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1449,20 +1449,26 @@ final class TypedScopeCreator implements ScopeCreator {\n       }\n \n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+      switch (n.getToken()) {\n+          case FUNCTION:\n+          if (NodeUtil.isFunctionExpression(n) || (NodeUtil.isFunctionDeclaration(n) && NodeUtil.isStatementBlock(parent))) {\n+            defineDeclaredFunction(n, parent);\n             return;\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n-        case Token.CATCH:\n+        case CATCH:\n           defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n+          return;\n+        case VAR:\n+        case LET:\n+        case CONST:\n           defineVar(n, parent);\n+          return;\n+        case LP:\n+          if (NodeUtil.isFunctionExpression(parent) || NodeUtil.isFunctionDeclaration(parent)) {\n+            handleFunctionInputs(parent);\n+          }\n           break;\n-      }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}