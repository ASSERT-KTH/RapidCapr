{
    "patch": "    @Override \n    public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n == scope.getRootNode()) {\n            return;\n        }\n\n        switch(n.getType()) {\n            case Token.FUNCTION:\n                if (parent != null && parent.getType() != Token.NAME && !NodeUtil.isFunctionExpression(n)) {\n                    defineDeclaredFunction(n, parent);\n                }\n                break;\n            case Token.NAME:\n            case Token.VAR:\n                defineVar(n, parent);\n                break;\n            case Token.CATCH:\n                defineCatch(n, parent);\n                break;\n            case Token.LP:\n                if (parent != null) {\n                    if (parent.getType() == Token.CALL || NodeUtil.isFunctionExpression(parent)) {\n                        handleFunctionInputs(parent);\n                    }\n                    if (parent.getType() == Token.SCRIPT || parent.getType() == Token.BLOCK) {\n                        handleFunctionInputs(n);\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n        attachLiteralTypes(n);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e0c756ca 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,29 +1440,39 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+    @Override \n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n == scope.getRootNode()) {\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+\n+        switch(n.getType()) {\n+            case Token.FUNCTION:\n+                if (parent != null && parent.getType() != Token.NAME && !NodeUtil.isFunctionExpression(n)) {\n+                    defineDeclaredFunction(n, parent);\n+                }\n+                break;\n+            case Token.NAME:\n+            case Token.VAR:\n+                defineVar(n, parent);\n+                break;\n+            case Token.CATCH:\n+                defineCatch(n, parent);\n+                break;\n+            case Token.LP:\n+                if (parent != null) {\n+                    if (parent.getType() == Token.CALL || NodeUtil.isFunctionExpression(parent)) {\n+                        handleFunctionInputs(parent);\n+                    }\n+                    if (parent.getType() == Token.SCRIPT || parent.getType() == Token.BLOCK) {\n+                        handleFunctionInputs(n);\n+                    }\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+        attachLiteralTypes(n);\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}