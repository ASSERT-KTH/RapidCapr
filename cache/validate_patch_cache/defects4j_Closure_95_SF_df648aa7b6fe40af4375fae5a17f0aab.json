{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(!variableName.isEmpty());\n\n  boolean shouldDeclareOnGlobalThis = false;\n  boolean isDeclaration = false;\n  boolean isFunction =\n      type != null && type.isFunctionType() &&\n      ((FunctionType) type).isInterface();\n  boolean isPrototype =\n      !isFunction &&\n      n.getType() == Token.GETPROP &&\n      n.getLastChild().getString().equals(\"prototype\");\n  if (n.getType() == Token.NAME) {\n    if (parent.getType() == Token.EXPR_RESULT ||\n        parent.getType() == Token.RETURN) {\n      isDeclaration = true;\n      shouldDeclareOnGlobalThis = scope.isGlobal();\n    } else if (parent.getType() == Token.VAR ||\n               parent.getType() == Token.LET ||\n               parent.getType() == Token.CONST) {\n      isDeclaration = true;\n    } else if (isFunction) {\n      isDeclaration = true;\n    }\n  } else if (isPrototype) {\n    isDeclaration = true;\n  }\n\n  Preconditions.checkArgument(!(isDeclaration && inferred));\n\n  if (isDeclaration) {\n    Var existingVar = scope.getVar(variableName);\n    boolean isNewDeclaration = existingVar == null || existingVar.isGlobal();\n    if (!isNewDeclaration && variableName.equals(\"arguments\")) {\n      validator.expectUndeclaredVariable(\n          sourceName, n, parent, existingVar, variableName, type);\n      return;\n    }\n\n    Preconditions.checkArgument(\n        !existingVar ||\n        !existingVar.getSourceFile().getName().equals(sourceName) ||\n        existingVar.isExtern());\n\n    if (existingVar != null &&\n        (existingVar.isLet() ||\n         existingVar.isConst() ||\n         (existingVar.isGlobal() && !scope.isGlobal()))) {\n      validator.expectDuplicateDeclaration(\n          sourceName, n, parent, existingVar, variableName);\n      return;\n    }\n\n    CompilerInput input = compiler.getInput(sourceName);\n\n    if (type != null) {\n      if (!inferred && isNewDeclaration) {\n        setDeferredType(n, type);\n      }\n\n      if (shouldDeclareOnGlobalThis) {\n        ObjectType globalThis =\n            typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n        boolean isExtern = input.isExtern();\n        if (inferred) {\n          globalThis.defineInferredProperty(variableName,\n              type == null ?\n                  getNativeType(JSTypeNative.NO_TYPE) :\n                  type,\n              isExtern);\n        } else {\n          globalThis.defineDeclaredProperty(variableName, type, isExtern);\n        }\n      }\n\n      if (isFunction && scope.isGlobal()) {\n        FunctionType fnType = (FunctionType) type;\n        if (fnType.isConstructor() || fnType.isInterface()) {\n          FunctionType superClassCtor = fnType.getSuperClassConstructor();\n          scope.declare(variableName + \".prototype\", n,\n              fnType.getPrototype(), input,\n              /* declared iff there's an explicit supertype */\n              superClassCtor == null ||\n              superClassCtor.getInstanceType().equals(\n                  getNativeType(OBJECT_TYPE)));\n        }\n\n        if (fnType.isOrdinaryFunction()) {\n          UserDefinedClassType udcType = new UserDefinedClassType(variableName);\n          compiler.getTypeRegistry().registerImplicitClass(udcType);\n          scope.declare(variableName, n, udcType, input, false);\n        } else {\n          scope.declare(variableName, n, type, input, false);\n        }\n        return;\n      }\n\n      boolean shouldDeclareInParentScope =\n          isNewDeclaration && isFunction && !isPrototype && !scope.isModuleScope();\n\n      if (shouldDeclareInParentScope) {\n        Scope parentScope = scope.getParent();\n        if (parentScope == null) {\n          parentScope = scope.getGlobalScope();\n        }\n\n        if (!inferred) {\n          setDeferredType(n, type);\n        }\n\n        if (isFunction) {\n          parentScope.declare(variableName, n, type, input, inferred);\n        } else {\n          // A variable that is not a function should be declared in current scope\n          scope.declare(variableName, n, type, input, inferred);\n        }\n      } else {\n        // Variable should be declared in current scope\n        scope.declare(variableName, n, type, input, inferred);\n      }\n    } else {\n      // type == null\n      if (isPrototype) {\n        validator.expectUndeclaredVariable(\n            sourceName, n, parent, existingVar, variableName,\n            getNativeType(JSTypeNative.OBJECT_TYPE));\n      } else if (isNewDeclaration && isFunction) {\n        UserDefinedClassType udcType = new UserDefinedClassType(variableName);\n        compiler.getTypeRegistry().registerImplicitClass(udcType);\n        scope.declare(variableName, n, udcType, input, false);\n      } else {\n        scope.declare(variableName, n, type, input, inferred);\n      }\n    }\n  } else {\n    // This is not a declaration but an access.\n    Var var = scope.getVar(variableName);\n    if (var == null) {\n      validator.expectUndeclaredVariable(\n          sourceName, n, parent, null, variableName, type);\n    } else if (var.isLet() && scope.getRootNode().getLastChild() == parent) {\n      validator.expectReferenceToUninitLet(variableName, n);\n    } else if (type != null && !type.isSubtype(var.getType())) {\n      validator.expectInvalidReference(sourceName, n, parent, var, type);\n    } else {\n      scope.referencedNames.add(variableName);\n      if (isFunction && var.isGlobal() &&\n          !var.getType().isFunctionPrototypeType()) {\n        validator.expectFunctionWithoutPrototype(sourceName, n, parent, var);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..5f8ec7a6 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,162 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  Preconditions.checkArgument(inferred || type != null);\n+\n+  String variableName = n.getQualifiedName();\n+  Preconditions.checkArgument(!variableName.isEmpty());\n+\n+  boolean shouldDeclareOnGlobalThis = false;\n+  boolean isDeclaration = false;\n+  boolean isFunction =\n+      type != null && type.isFunctionType() &&\n+      ((FunctionType) type).isInterface();\n+  boolean isPrototype =\n+      !isFunction &&\n+      n.getType() == Token.GETPROP &&\n+      n.getLastChild().getString().equals(\"prototype\");\n+  if (n.getType() == Token.NAME) {\n+    if (parent.getType() == Token.EXPR_RESULT ||\n+        parent.getType() == Token.RETURN) {\n+      isDeclaration = true;\n+      shouldDeclareOnGlobalThis = scope.isGlobal();\n+    } else if (parent.getType() == Token.VAR ||\n+               parent.getType() == Token.LET ||\n+               parent.getType() == Token.CONST) {\n+      isDeclaration = true;\n+    } else if (isFunction) {\n+      isDeclaration = true;\n+    }\n+  } else if (isPrototype) {\n+    isDeclaration = true;\n+  }\n+\n+  Preconditions.checkArgument(!(isDeclaration && inferred));\n+\n+  if (isDeclaration) {\n+    Var existingVar = scope.getVar(variableName);\n+    boolean isNewDeclaration = existingVar == null || existingVar.isGlobal();\n+    if (!isNewDeclaration && variableName.equals(\"arguments\")) {\n+      validator.expectUndeclaredVariable(\n+          sourceName, n, parent, existingVar, variableName, type);\n+      return;\n+    }\n+\n+    Preconditions.checkArgument(\n+        !existingVar ||\n+        !existingVar.getSourceFile().getName().equals(sourceName) ||\n+        existingVar.isExtern());\n+\n+    if (existingVar != null &&\n+        (existingVar.isLet() ||\n+         existingVar.isConst() ||\n+         (existingVar.isGlobal() && !scope.isGlobal()))) {\n+      validator.expectDuplicateDeclaration(\n+          sourceName, n, parent, existingVar, variableName);\n+      return;\n+    }\n+\n+    CompilerInput input = compiler.getInput(sourceName);\n+\n+    if (type != null) {\n+      if (!inferred && isNewDeclaration) {\n+        setDeferredType(n, type);\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n \n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n+      if (shouldDeclareOnGlobalThis) {\n+        ObjectType globalThis =\n+            typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+        boolean isExtern = input.isExtern();\n+        if (inferred) {\n+          globalThis.defineInferredProperty(variableName,\n+              type == null ?\n+                  getNativeType(JSTypeNative.NO_TYPE) :\n+                  type,\n+              isExtern);\n+        } else {\n+          globalThis.defineDeclaredProperty(variableName, type, isExtern);\n+        }\n+      }\n \n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n+      if (isFunction && scope.isGlobal()) {\n+        FunctionType fnType = (FunctionType) type;\n+        if (fnType.isConstructor() || fnType.isInterface()) {\n+          FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+          scope.declare(variableName + \".prototype\", n,\n+              fnType.getPrototype(), input,\n+              /* declared iff there's an explicit supertype */\n+              superClassCtor == null ||\n+              superClassCtor.getInstanceType().equals(\n+                  getNativeType(OBJECT_TYPE)));\n+        }\n+\n+        if (fnType.isOrdinaryFunction()) {\n+          UserDefinedClassType udcType = new UserDefinedClassType(variableName);\n+          compiler.getTypeRegistry().registerImplicitClass(udcType);\n+          scope.declare(variableName, n, udcType, input, false);\n+        } else {\n+          scope.declare(variableName, n, type, input, false);\n+        }\n+        return;\n+      }\n+\n+      boolean shouldDeclareInParentScope =\n+          isNewDeclaration && isFunction && !isPrototype && !scope.isModuleScope();\n+\n+      if (shouldDeclareInParentScope) {\n+        Scope parentScope = scope.getParent();\n+        if (parentScope == null) {\n+          parentScope = scope.getGlobalScope();\n+        }\n \n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n         if (!inferred) {\n           setDeferredType(n, type);\n         }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n+        if (isFunction) {\n+          parentScope.declare(variableName, n, type, input, inferred);\n+        } else {\n+          // A variable that is not a function should be declared in current scope\n+          scope.declare(variableName, n, type, input, inferred);\n         }\n+      } else {\n+        // Variable should be declared in current scope\n+        scope.declare(variableName, n, type, input, inferred);\n+      }\n+    } else {\n+      // type == null\n+      if (isPrototype) {\n+        validator.expectUndeclaredVariable(\n+            sourceName, n, parent, existingVar, variableName,\n+            getNativeType(JSTypeNative.OBJECT_TYPE));\n+      } else if (isNewDeclaration && isFunction) {\n+        UserDefinedClassType udcType = new UserDefinedClassType(variableName);\n+        compiler.getTypeRegistry().registerImplicitClass(udcType);\n+        scope.declare(variableName, n, udcType, input, false);\n+      } else {\n+        scope.declare(variableName, n, type, input, inferred);\n       }\n     }\n+  } else {\n+    // This is not a declaration but an access.\n+    Var var = scope.getVar(variableName);\n+    if (var == null) {\n+      validator.expectUndeclaredVariable(\n+          sourceName, n, parent, null, variableName, type);\n+    } else if (var.isLet() && scope.getRootNode().getLastChild() == parent) {\n+      validator.expectReferenceToUninitLet(variableName, n);\n+    } else if (type != null && !type.isSubtype(var.getType())) {\n+      validator.expectInvalidReference(sourceName, n, parent, var, type);\n+    } else {\n+      scope.referencedNames.add(variableName);\n+      if (isFunction && var.isGlobal() &&\n+          !var.getType().isFunctionPrototypeType()) {\n+        validator.expectFunctionWithoutPrototype(sourceName, n, parent, var);\n+      }\n+    }\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}