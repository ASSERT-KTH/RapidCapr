{
    "patch": "public static String htmlDecode(String s) {\n    if (s == null) {\n        return null;\n    }\n    if (s.indexOf('&') == -1) {\n        return s;\n    }\n    StringBuffer entity = new StringBuffer();\n    StringBuffer decoded = new StringBuffer();\n    boolean inEntity = false;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (inEntity) {\n            if (c == ';') {\n                inEntity = false;\n                String decodedEntity = decodeEntity(entity.toString());\n                decoded.append(decodedEntity);\n                entity.setLength(0);\n            }\n            else {\n                entity.append(c);\n            }\n        }\n        else {\n            if (c == '&') {\n                inEntity = true;\n                entity.append(c);\n            }\n            else {\n                decoded.append(c);\n            }\n        }\n    }\n    if (entity.length() > 0) {\n        decoded.append(entity.toString());\n    }\n    return decoded.toString();\n}\n\nprivate static String decodeEntity(String entity) {\n    int i = entity.indexOf(';');\n    if (i == -1) {\n        return entity;\n    }\n    String entityName = entity.substring(1, i);\n    String entityValue = (String) ht.get(entityName);\n    if (entityValue == null) {\n        return entity;\n    }\n    return entityValue+entity.substring(i+1);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..45a775bf 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,57 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String htmlDecode(String s) {\n+    if (s == null) {\n+        return null;\n+    }\n+    if (s.indexOf('&') == -1) {\n+        return s;\n+    }\n+    StringBuffer entity = new StringBuffer();\n+    StringBuffer decoded = new StringBuffer();\n+    boolean inEntity = false;\n+    for (int i = 0; i < s.length(); i++) {\n+        char c = s.charAt(i);\n+        if (inEntity) {\n+            if (c == ';') {\n+                inEntity = false;\n+                String decodedEntity = decodeEntity(entity.toString());\n+                decoded.append(decodedEntity);\n+                entity.setLength(0);\n+            }\n+            else {\n+                entity.append(c);\n+            }\n+        }\n+        else {\n+            if (c == '&') {\n+                inEntity = true;\n+                entity.append(c);\n+            }\n+            else {\n+                decoded.append(c);\n+            }\n+        }\n+    }\n+    if (entity.length() > 0) {\n+        decoded.append(entity.toString());\n+    }\n+    return decoded.toString();\n+}\n+\n+private static String decodeEntity(String entity) {\n+    int i = entity.indexOf(';');\n+    if (i == -1) {\n+        return entity;\n+    }\n+    String entityName = entity.substring(1, i);\n+    String entityValue = (String) ht.get(entityName);\n+    if (entityValue == null) {\n+        return entity;\n+    }\n+    return entityValue+entity.substring(i+1);\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}