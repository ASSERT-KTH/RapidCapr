{
    "patch": "      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP && (lhs.getLastChild().getString().equals(\"prototype\"))) {\n            return false;\n          }\n          if (n.isArrowFunction()) {\n            // Don't traverse arrow functions with \"this\" inside them\n            Node arrowFunctionBody = n.getLastChild();\n            if (NodeUtil.has(getThisNodePredicate, arrowFunctionBody)) {\n              return false;\n            }\n          } else {\n            // Don't traverse non-arrow functions with \"this\" inside them\n            Block functionBody = (Block) n.getLastChild();\n            if (functionBody.containsXProp(NodeUtil.THIS)) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..4f995fe5 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,24 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP && (lhs.getLastChild().getString().equals(\"prototype\"))) {\n+            return false;\n+          }\n+          if (n.isArrowFunction()) {\n+            // Don't traverse arrow functions with \"this\" inside them\n+            Node arrowFunctionBody = n.getLastChild();\n+            if (NodeUtil.has(getThisNodePredicate, arrowFunctionBody)) {\n+              return false;\n+            }\n+          } else {\n+            // Don't traverse non-arrow functions with \"this\" inside them\n+            Block functionBody = (Block) n.getLastChild();\n+            if (functionBody.containsXProp(NodeUtil.THIS)) {\n+              return false;\n+            }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}