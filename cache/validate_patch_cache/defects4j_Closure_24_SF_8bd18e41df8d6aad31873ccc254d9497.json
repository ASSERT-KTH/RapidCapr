{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  Node rootNode = t.getCompiler().getJsRoot();\n  Node googScopeCall = rootNode.getFirstChild();\n  if (!NodeUtil.isGoogScopeCall(googScopeCall)) {\n    // This should never happen according to the test that's failing now,\n    // but better to check just in case.\n    throw new RuntimeException(\"Internal error: goog.scope not found\");\n  }\n\n  Node functionNode = googScopeCall.getSecondChild();\n  if (functionNode == null) {\n    report(t, googScopeCall, GOOG_SCOPE_EXPECTS_FUNCTION);\n    return;\n  }\n\n  if (!NodeUtil.isEmptyBlock(functionNode.getLastChild())) {\n    report(t, functionNode, FUNCTION_MUST_RETURN_VOID);\n    // No point continuing, since we can't reason about the aliases declared\n    // in this function.\n    return;\n  }\n\n  List<Node> params = NodeUtil.getFunctionParameters(functionNode);\n  if (!params.isEmpty()) {\n    report(t, functionNode, NO_ALIASING_PARAMETERS);\n  }\n\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (n.getParent() != functionNode.getParent()) {\n      // This variable is not defined inside the anonymous function that's\n      // the argument to goog.scope. Therefore, it's not an alias.\n      continue;\n    }\n\n    String name = n.getString();\n    if (!n.getFirstChild().isQualifiedName()) {\n      // Not an alias.\n      continue;\n    }\n\n    Var aliasVar = scope.getVar(name);\n    aliases.put(name, aliasVar);\n    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n    transformation.addAlias(name, qualifiedName);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..effd6019 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,33 +269,55 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n-      }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  Node rootNode = t.getCompiler().getJsRoot();\n+  Node googScopeCall = rootNode.getFirstChild();\n+  if (!NodeUtil.isGoogScopeCall(googScopeCall)) {\n+    // This should never happen according to the test that's failing now,\n+    // but better to check just in case.\n+    throw new RuntimeException(\"Internal error: goog.scope not found\");\n+  }\n+\n+  Node functionNode = googScopeCall.getSecondChild();\n+  if (functionNode == null) {\n+    report(t, googScopeCall, GOOG_SCOPE_EXPECTS_FUNCTION);\n+    return;\n+  }\n+\n+  if (!NodeUtil.isEmptyBlock(functionNode.getLastChild())) {\n+    report(t, functionNode, FUNCTION_MUST_RETURN_VOID);\n+    // No point continuing, since we can't reason about the aliases declared\n+    // in this function.\n+    return;\n+  }\n+\n+  List<Node> params = NodeUtil.getFunctionParameters(functionNode);\n+  if (!params.isEmpty()) {\n+    report(t, functionNode, NO_ALIASING_PARAMETERS);\n+  }\n+\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (n.getParent() != functionNode.getParent()) {\n+      // This variable is not defined inside the anonymous function that's\n+      // the argument to goog.scope. Therefore, it's not an alias.\n+      continue;\n+    }\n+\n+    String name = n.getString();\n+    if (!n.getFirstChild().isQualifiedName()) {\n+      // Not an alias.\n+      continue;\n     }\n \n+    Var aliasVar = scope.getVar(name);\n+    aliases.put(name, aliasVar);\n+    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+    transformation.addAlias(name, qualifiedName);\n+  }\n+}\n+\n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {\n         preprocessorSymbolTable.addReference(n.getFirstChild());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}