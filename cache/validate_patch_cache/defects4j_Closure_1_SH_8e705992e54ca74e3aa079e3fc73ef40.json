{
    "patch": "  List<String> argNames = new ArrayList<>();\n  Node argList = getFunctionArgList(fnScope.getRootNode());\n  for (Node arg : argList.children()) {\n    argNames.add(arg.getString());\n  }\n\n  Node fnBody = fnScope.getRootNode().getLastChild();\n  NodeTraversal.traverse(compiler, fnBody, new NodeTraversal.Callback() {\n    @Override\n    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n      return n != fnBody;\n    }\n\n    @Override\n    public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n      if (n.isName() && parent.isFunction()) {\n        String name = n.getString();\n        if (argNames.contains(name)) {\n          Var var = fnScope.getVar(name);\n          if (!referenced.contains(var)) {\n            n.setDeclaredTypeExpression(null);\n            n.removeChild();\n            compiler.reportCodeChange();\n          }\n        }\n      }\n    }\n  });",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ea04a106 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,34 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  List<String> argNames = new ArrayList<>();\n+  Node argList = getFunctionArgList(fnScope.getRootNode());\n+  for (Node arg : argList.children()) {\n+    argNames.add(arg.getString());\n+  }\n+\n+  Node fnBody = fnScope.getRootNode().getLastChild();\n+  NodeTraversal.traverse(compiler, fnBody, new NodeTraversal.Callback() {\n+    @Override\n+    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+      return n != fnBody;\n+    }\n+\n+    @Override\n+    public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n+      if (n.isName() && parent.isFunction()) {\n+        String name = n.getString();\n+        if (argNames.contains(name)) {\n+          Var var = fnScope.getVar(name);\n+          if (!referenced.contains(var)) {\n+            n.setDeclaredTypeExpression(null);\n+            n.removeChild();\n+            compiler.reportCodeChange();\n+          }\n+        }\n+      }\n+    }\n+  });\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}