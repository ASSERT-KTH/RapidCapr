{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    List<Node> referencedParams = Lists.newArrayList();\n    List<Var> referenced = findReferencedVars(fnScope, referencedParams);\n\n    Node fnNode = fnScope.getRootNode();\n    Preconditions.checkState(fnNode.isFunction(), fnNode);\n\n    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = NodeUtil.getFunctionParameters(fnNode);\n    List<Node> unusedArgs = Lists.newLinkedList();\n    int totalArgs = argList.getChildCount();\n    boolean varArgs = NodeUtil.isVarArgsFunction(fnNode);\n\n    for (int i = 0; i < totalArgs; i++) {\n        Node arg = argList.getChildAtIndex(i);\n        Var var = fnScope.getVar(arg.getString());\n\n        if (!referenced.contains(var)) {\n            unusedArgs.add(arg);\n        }\n    }\n\n    while (!unusedArgs.isEmpty()) {\n        Node unusedArg = unusedArgs.removeLast();\n        argList.removeChild(unusedArg);\n        compiler.reportChangeToEnclosingScope(argList);\n    }\n\n    if (modifyCallSites\n            && callSiteOptimizer.canModifyCallers(fnNode)) {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    } else if (varArgs) {\n        // If the function has variable arguments, we need to check for\n        // calls to this function with too few arguments.\n        String fnName = NodeUtil.getName(fnNode);\n        NodeTraversal.traverse(compiler,\n                new VarArgsChecker(referencedParams, fnName, fnNode));\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..182b9fd7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,49 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    List<Node> referencedParams = Lists.newArrayList();\n+    List<Var> referenced = findReferencedVars(fnScope, referencedParams);\n+\n+    Node fnNode = fnScope.getRootNode();\n+    Preconditions.checkState(fnNode.isFunction(), fnNode);\n+\n+    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n+        // The parameters object literal setters can not be removed.\n+        return;\n+    }\n+\n+    Node argList = NodeUtil.getFunctionParameters(fnNode);\n+    List<Node> unusedArgs = Lists.newLinkedList();\n+    int totalArgs = argList.getChildCount();\n+    boolean varArgs = NodeUtil.isVarArgsFunction(fnNode);\n+\n+    for (int i = 0; i < totalArgs; i++) {\n+        Node arg = argList.getChildAtIndex(i);\n+        Var var = fnScope.getVar(arg.getString());\n+\n         if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+            unusedArgs.add(arg);\n         }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+\n+    while (!unusedArgs.isEmpty()) {\n+        Node unusedArg = unusedArgs.removeLast();\n+        argList.removeChild(unusedArg);\n+        compiler.reportChangeToEnclosingScope(argList);\n+    }\n+\n+    if (modifyCallSites\n+            && callSiteOptimizer.canModifyCallers(fnNode)) {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+    } else if (varArgs) {\n+        // If the function has variable arguments, we need to check for\n+        // calls to this function with too few arguments.\n+        String fnName = NodeUtil.getName(fnNode);\n+        NodeTraversal.traverse(compiler,\n+                new VarArgsChecker(referencedParams, fnName, fnNode));\n+    }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}