{
    "patch": "    } else if (constraintObj.isNamespaceType()) {\n      return;\n    } else if (constraintObj.isNominalType()) {\n      return;\n    } else if (constraintObj.isEnumElementType()) {\n      defineInferredProperty(\"__iterator__\", getNativeType(JSTypeNative.FUNCTION_TYPE), null);\n      return;\n    } else if (constraintObj.isUnknownType()) {\n      inferAllProperties = true;\n    } else {\n      throw new RuntimeException(\"Unhandled type\");",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..69395d62 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,17 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    } else if (constraintObj.isNamespaceType()) {\n+      return;\n+    } else if (constraintObj.isNominalType()) {\n+      return;\n+    } else if (constraintObj.isEnumElementType()) {\n+      defineInferredProperty(\"__iterator__\", getNativeType(JSTypeNative.FUNCTION_TYPE), null);\n+      return;\n+    } else if (constraintObj.isUnknownType()) {\n+      inferAllProperties = true;\n+    } else {\n+      throw new RuntimeException(\"Unhandled type\");\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}