{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    Period period = withDays(FieldUtils.safeToInt(getMillis() / DateTimeConstants.MILLIS_PER_DAY));\n    period = period.withMillis(getMillis() % DateTimeConstants.MILLIS_PER_DAY);\n    int totalMonths = period.getMonths() + period.getYears() * 12;\n    int years = totalMonths / 12;\n    int months = totalMonths % 12;\n    Period result = new Period()\n            .withYears(years)\n            .withMonths(months)\n            .withWeeks(period.getWeeks())\n            .withDays(period.getDays())\n            .withHours(period.getHours())\n            .withMinutes(period.getMinutes())\n            .withSeconds(period.getSeconds())\n            .withMillis(period.getMillis());\n    if (type.isSupported(DurationFieldType.weeks())) {\n        int totalDays = period.getDays() + period.getWeeks() * 7;\n        int weeks = totalDays / 7;\n        int days = totalDays % 7;\n        result = result.withWeeks(weeks).withDays(days);\n    }\n    return result.normalizedStandard(type);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..ae97f42d 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,29 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    Period period = withDays(FieldUtils.safeToInt(getMillis() / DateTimeConstants.MILLIS_PER_DAY));\n+    period = period.withMillis(getMillis() % DateTimeConstants.MILLIS_PER_DAY);\n+    int totalMonths = period.getMonths() + period.getYears() * 12;\n+    int years = totalMonths / 12;\n+    int months = totalMonths % 12;\n+    Period result = new Period()\n+            .withYears(years)\n+            .withMonths(months)\n+            .withWeeks(period.getWeeks())\n+            .withDays(period.getDays())\n+            .withHours(period.getHours())\n+            .withMinutes(period.getMinutes())\n+            .withSeconds(period.getSeconds())\n+            .withMillis(period.getMillis());\n+    if (type.isSupported(DurationFieldType.weeks())) {\n+        int totalDays = period.getDays() + period.getWeeks() * 7;\n+        int weeks = totalDays / 7;\n+        int days = totalDays % 7;\n+        result = result.withWeeks(weeks).withDays(days);\n+    }\n+    return result.normalizedStandard(type);\n+}\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}