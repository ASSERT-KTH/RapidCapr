{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds == null || bounds.length == 0) {\n        return;\n    }\n    for (Type type : bounds) {\n        if (type instanceof TypeVariable) {\n            TypeVariable<?> tv = (TypeVariable<?>) type;\n            Type[] tvBounds = tv.getBounds();\n            if (tvBounds != null && tvBounds.length > 0) {\n                for (Type tvType : tvBounds) {\n                    registerTypeVariablesOn(tvType);\n                }\n            }\n        }\n        registerTypeVariablesOn(type);\n    }\n    if (typeVariable instanceof ParameterizedType) {\n        Type[] args = ((ParameterizedType) typeVariable).getActualTypeArguments();\n        for (Type arg : args) {\n            readTypeVariables(arg);\n        }\n    } else if (typeVariable instanceof GenericArrayType) {\n        readTypeVariables(((GenericArrayType) typeVariable).getGenericComponentType());\n    } else if (typeVariable instanceof TypeVariable) {\n        Type[] tvBounds = ((TypeVariable<?>) typeVariable).getBounds();\n        if (tvBounds != null && tvBounds.length > 0) {\n            for (Type tvType : tvBounds) {\n                readTypeVariables(tvType);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..8aa817275 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,40 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds == null || bounds.length == 0) {\n+        return;\n+    }\n+    for (Type type : bounds) {\n+        if (type instanceof TypeVariable) {\n+            TypeVariable<?> tv = (TypeVariable<?>) type;\n+            Type[] tvBounds = tv.getBounds();\n+            if (tvBounds != null && tvBounds.length > 0) {\n+                for (Type tvType : tvBounds) {\n+                    registerTypeVariablesOn(tvType);\n+                }\n+            }\n+        }\n+        registerTypeVariablesOn(type);\n+    }\n+    if (typeVariable instanceof ParameterizedType) {\n+        Type[] args = ((ParameterizedType) typeVariable).getActualTypeArguments();\n+        for (Type arg : args) {\n+            readTypeVariables(arg);\n+        }\n+    } else if (typeVariable instanceof GenericArrayType) {\n+        readTypeVariables(((GenericArrayType) typeVariable).getGenericComponentType());\n+    } else if (typeVariable instanceof TypeVariable) {\n+        Type[] tvBounds = ((TypeVariable<?>) typeVariable).getBounds();\n+        if (tvBounds != null && tvBounds.length > 0) {\n+            for (Type tvType : tvBounds) {\n+                readTypeVariables(tvType);\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}