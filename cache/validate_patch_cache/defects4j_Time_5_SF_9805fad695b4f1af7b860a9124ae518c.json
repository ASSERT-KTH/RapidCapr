{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    \n    // Build a period with the total milliseconds and zeroed out date/time fields\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    // Extract units and reset them to zero\n    int years = result.getYears();\n    int months = result.getMonths();\n    int weeks = result.getWeeks();\n    int days = result.getDays();\n    int hours = result.getHours();\n    int minutes = result.getMinutes();\n    int seconds = result.getSeconds();\n    \n    result = result\n        .withYears(0)\n        .withMonths(0)\n        .withWeeks(0)\n        .withDays(0)\n        .withHours(0)\n        .withMinutes(0)\n        .withSeconds(0);\n    \n    // Add the units back in in the correct order\n    result = result.plusYears(years).plusMonths(months);\n    result = result.plusWeeks(weeks).plusDays(days);\n    result = result.plusHours(hours).plusMinutes(minutes).plusSeconds(seconds);\n    \n    // Perform normalization by calling normalizedStandard on the result\n    return result.normalizedStandard(type);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..7e9f4c71 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,43 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    \n+    // Build a period with the total milliseconds and zeroed out date/time fields\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    \n+    // Extract units and reset them to zero\n+    int years = result.getYears();\n+    int months = result.getMonths();\n+    int weeks = result.getWeeks();\n+    int days = result.getDays();\n+    int hours = result.getHours();\n+    int minutes = result.getMinutes();\n+    int seconds = result.getSeconds();\n+    \n+    result = result\n+        .withYears(0)\n+        .withMonths(0)\n+        .withWeeks(0)\n+        .withDays(0)\n+        .withHours(0)\n+        .withMinutes(0)\n+        .withSeconds(0);\n+    \n+    // Add the units back in in the correct order\n+    result = result.plusYears(years).plusMonths(months);\n+    result = result.plusWeeks(weeks).plusDays(days);\n+    result = result.plusHours(hours).plusMinutes(minutes).plusSeconds(seconds);\n+    \n+    // Perform normalization by calling normalizedStandard on the result\n+    return result.normalizedStandard(type);\n+}\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}