{
    "patch": "import org.apache.commons.math3.analysis.UnivariateFunction;\nimport org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver;\nimport org.apache.commons.math3.exception.MathIllegalArgumentException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\n\n/**\n * An implementation of the <a href=\n * \"http://mathworld.wolfram.com/Bisection.html\">Bisection Method</a> for\n * finding a zero of a real univariate function.\n *\n * @since 1.2\n */\npublic class BisectionSolver extends AbstractUnivariateSolver {\n\n    /**\n     * Construct a solver with default accuracy.\n     */\n    public BisectionSolver() {\n        super(DEFAULT_ABSOLUTE_ACCURACY, Method.BISECTION);\n    }\n\n    /**\n     * Construct a solver with the given accuracy.\n     *\n     * @param absoluteAccuracy Maximum absolute error.\n     */\n    public BisectionSolver(final double absoluteAccuracy) {\n        super(absoluteAccuracy, Method.BISECTION);\n    }\n\n    /**\n    * Computes the root of the function given the intervals.\n    *\n    * @param f the function.\n    * @param min the lower bound for the interval.\n    * @param max the upper bound for the interval.\n    * @param allowedSolution the kind of solutions that the root can have.\n    *\n    * @return the point where the function crosses the x-axis.\n    * @throws TooManyEvaluationsException if the maximum number of iterations is exceeded.\n    * @throws MathIllegalArgumentException if min is greater than max or if the function values have the same sign\n    *                                      at the end points.\n    */\n    @Override\n    public double solve(final UnivariateFunction f, final double min, final double max,\n                        final AllowedSolution allowedSolution)\n            throws TooManyEvaluationsException, MathIllegalArgumentException {\n        // Checks inputs\n        setup(min, max, allowedSolution);\n\n        double a = min;\n        double b = max;\n        double m = UnivariateSolverUtils.midpoint(a, b);\n\n        double f_m;\n        double f_b = f.value(b);\n        double f_a = f.value(a);\n        double f_m_last = Double.MAX_VALUE;\n        double delta = 0;\n\n        // Keeps track of the last change in input values\n        double lastDeltaMeta = max - min;\n\n        // Keeps on dividing the interval till we reach the desired precision level\n        while (true) {\n            f_m = f.value(m);\n\n            // Check for convergence\n            if (FastMath.abs(f_m) <= functionValueAccuracy) {\n                switch (allowedSolution) {\n                    case ANY_SIDE:\n                        return m;\n                    case LEFT_SIDE:\n                        if (f_a * f_m <= 0) {\n                            return a;\n                        }\n                        return m;\n                    case RIGHT_SIDE:\n                        if (f_b * f_m <= 0) {\n                            return b;\n                        }\n                        return m;\n                    case BELOW_SIDE:\n                        if (f_m <= 0) {\n                            return m;\n                        }\n                        return solve(f, a, m, allowedSolution);\n                    case ABOVE_SIDE:\n                        if (f_m >= 0) {\n                            return m;\n                        }\n                        return solve(f, a, m, allowedSolution);\n                    default:\n                        throw new MathIllegalArgumentException(\n                                \"Unsupported value for allowedSolution - \" + allowedSolution);\n                }\n            }\n            // If the signs of end points are same then throw exception\n            if ((f_a > 0 && f_b > 0) || (f_a < 0 && f_b < 0)) {\n                throw new MathIllegalArgumentException(\n                        \"Function values at endpoints do not have different signs.\" +\n                                \"Endpoints: [\" + min + \",\" + max + \"]\" + \" Values: [\" + f_a + \",\" + f_b + \"]\");\n            }\n\n            // Reduce the interval\n            if (f_a < 0 && f_m < 0) {\n                a = m;\n                f_a = f_m;\n            } else {\n                b = m;\n                f_b = f_m;\n            }\n            m = UnivariateSolverUtils.midpoint(a, b);\n\n            // Check for convergence\n            if (FastMath.abs(f_m) <= functionValueAccuracy) {\n                switch (allowedSolution) {\n                    case ANY_SIDE:\n                        return m;\n                    case LEFT_SIDE:\n                        if (f_a * f_m <= 0) {\n                            return a;\n                        }\n                        return m;\n                    case RIGHT_SIDE:\n                        if (f_b * f_m <= 0) {\n                            return b;\n                        }\n                        return m;\n                    case BELOW_SIDE:\n                        if (f_m <= 0) {\n                            return m;\n                        }\n                        return solve(f, a, m, allowedSolution);\n                    case ABOVE_SIDE:\n                        if (f_m >= 0) {\n                            return m;\n                        }\n                        return solve(f, a, m, allowedSolution);\n                    default:\n                        throw new MathIllegalArgumentException(\n                                \"Unsupported value for allowedSolution - \" + allowedSolution);\n                }\n            }\n\n            // Check for convergence\n            delta = FastMath.min(FastMath.abs(m - a), FastMath.abs(b - m));\n            if (delta < absoluteAccuracy || UnivariateSolverUtils.isRelativeChangeBelowTolerance(m, m_last, relativeAccuracy)) {\n                switch (allowedSolution) {\n                    case ANY_SIDE:\n                        return m;\n                    case LEFT_SIDE:\n                        if (f_a * f_m <= 0) {\n                            return a;\n                        }\n                        return m;\n                    case RIGHT_SIDE:\n                        if (f_b * f_m <= 0) {\n                            return b;\n                        }\n                        return m;\n                    case BELOW_SIDE:\n                        if (f_m <= 0) {\n                            return m;\n                        }\n                        return solve(f, a, m, allowedSolution);\n                    case ABOVE_SIDE:\n                        if (f_m >= 0) {\n                            return m;\n                        }\n                        return solve(f, a, m, allowedSolution);\n                    default:\n                        throw new MathIllegalArgumentException(\n                                \"Unsupported value for allowedSolution - \" + allowedSolution);\n                }\n            }\n\n            // Check for maximum number of iterations\n            if (getEvaluations() > maximalIterationCount) {\n                throw new TooManyEvaluationsException(maximalIterationCount);\n            }\n\n            // Check progression of interval\n            double deltaMeta = FastMath.abs(b - a);\n            if (deltaMeta >= lastDeltaMeta * stagnationIterationCount) {\n                throw new MathIllegalArgumentException(\"BisectionSolver falling into stagnation trap, \"\n                        + (int) (deltaMeta / lastDeltaMeta) + \" bisections without apparent change.\");\n            }\n            lastDeltaMeta = deltaMeta;\n            m_last = m;\n        }\n    }\n\n    /**\n     * Set up for computing a zero.\n     * Implements checks and default computation method inherited from {@link AbstractUnivariateSolver}.\n     *\n     * @param min Lower bound for the interval.\n     * @param max Upper bound for the interval.\n     * @param allowedSolution The kind of solutions that shall be returned.\n     */\n    protected void setup(final double min, final double max, final AllowedSolution allowedSolution) {\n        super.setup(allowedSolution, maximalevaluations, min, max);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..ea6697738 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,127 +125,212 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n-\n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver;\n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+\n+/**\n+ * An implementation of the <a href=\n+ * \"http://mathworld.wolfram.com/Bisection.html\">Bisection Method</a> for\n+ * finding a zero of a real univariate function.\n+ *\n+ * @since 1.2\n+ */\n+public class BisectionSolver extends AbstractUnivariateSolver {\n+\n+    /**\n+     * Construct a solver with default accuracy.\n+     */\n+    public BisectionSolver() {\n+        super(DEFAULT_ABSOLUTE_ACCURACY, Method.BISECTION);\n+    }\n+\n+    /**\n+     * Construct a solver with the given accuracy.\n+     *\n+     * @param absoluteAccuracy Maximum absolute error.\n+     */\n+    public BisectionSolver(final double absoluteAccuracy) {\n+        super(absoluteAccuracy, Method.BISECTION);\n+    }\n+\n+    /**\n+    * Computes the root of the function given the intervals.\n+    *\n+    * @param f the function.\n+    * @param min the lower bound for the interval.\n+    * @param max the upper bound for the interval.\n+    * @param allowedSolution the kind of solutions that the root can have.\n+    *\n+    * @return the point where the function crosses the x-axis.\n+    * @throws TooManyEvaluationsException if the maximum number of iterations is exceeded.\n+    * @throws MathIllegalArgumentException if min is greater than max or if the function values have the same sign\n+    *                                      at the end points.\n+    */\n+    @Override\n+    public double solve(final UnivariateFunction f, final double min, final double max,\n+                        final AllowedSolution allowedSolution)\n+            throws TooManyEvaluationsException, MathIllegalArgumentException {\n+        // Checks inputs\n+        setup(min, max, allowedSolution);\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+        double a = min;\n+        double b = max;\n+        double m = UnivariateSolverUtils.midpoint(a, b);\n \n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        double f_m;\n+        double f_b = f.value(b);\n+        double f_a = f.value(a);\n+        double f_m_last = Double.MAX_VALUE;\n+        double delta = 0;\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+        // Keeps track of the last change in input values\n+        double lastDeltaMeta = max - min;\n \n-        // Keep finding better approximations.\n+        // Keeps on dividing the interval till we reach the desired precision level\n         while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n-\n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n+            f_m = f.value(m);\n+\n+            // Check for convergence\n+            if (FastMath.abs(f_m) <= functionValueAccuracy) {\n+                switch (allowedSolution) {\n+                    case ANY_SIDE:\n+                        return m;\n+                    case LEFT_SIDE:\n+                        if (f_a * f_m <= 0) {\n+                            return a;\n+                        }\n+                        return m;\n+                    case RIGHT_SIDE:\n+                        if (f_b * f_m <= 0) {\n+                            return b;\n+                        }\n+                        return m;\n+                    case BELOW_SIDE:\n+                        if (f_m <= 0) {\n+                            return m;\n+                        }\n+                        return solve(f, a, m, allowedSolution);\n+                    case ABOVE_SIDE:\n+                        if (f_m >= 0) {\n+                            return m;\n+                        }\n+                        return solve(f, a, m, allowedSolution);\n+                    default:\n+                        throw new MathIllegalArgumentException(\n+                                \"Unsupported value for allowedSolution - \" + allowedSolution);\n+                }\n+            }\n+            // If the signs of end points are same then throw exception\n+            if ((f_a > 0 && f_b > 0) || (f_a < 0 && f_b < 0)) {\n+                throw new MathIllegalArgumentException(\n+                        \"Function values at endpoints do not have different signs.\" +\n+                                \"Endpoints: [\" + min + \",\" + max + \"]\" + \" Values: [\" + f_a + \",\" + f_b + \"]\");\n             }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n+            // Reduce the interval\n+            if (f_a < 0 && f_m < 0) {\n+                a = m;\n+                f_a = f_m;\n             } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n-                }\n+                b = m;\n+                f_b = f_m;\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n-\n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n+            m = UnivariateSolverUtils.midpoint(a, b);\n+\n+            // Check for convergence\n+            if (FastMath.abs(f_m) <= functionValueAccuracy) {\n+                switch (allowedSolution) {\n+                    case ANY_SIDE:\n+                        return m;\n+                    case LEFT_SIDE:\n+                        if (f_a * f_m <= 0) {\n+                            return a;\n+                        }\n+                        return m;\n+                    case RIGHT_SIDE:\n+                        if (f_b * f_m <= 0) {\n+                            return b;\n+                        }\n+                        return m;\n+                    case BELOW_SIDE:\n+                        if (f_m <= 0) {\n+                            return m;\n+                        }\n+                        return solve(f, a, m, allowedSolution);\n+                    case ABOVE_SIDE:\n+                        if (f_m >= 0) {\n+                            return m;\n+                        }\n+                        return solve(f, a, m, allowedSolution);\n+                    default:\n+                        throw new MathIllegalArgumentException(\n+                                \"Unsupported value for allowedSolution - \" + allowedSolution);\n                 }\n             }\n \n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n+            // Check for convergence\n+            delta = FastMath.min(FastMath.abs(m - a), FastMath.abs(b - m));\n+            if (delta < absoluteAccuracy || UnivariateSolverUtils.isRelativeChangeBelowTolerance(m, m_last, relativeAccuracy)) {\n+                switch (allowedSolution) {\n+                    case ANY_SIDE:\n+                        return m;\n+                    case LEFT_SIDE:\n+                        if (f_a * f_m <= 0) {\n+                            return a;\n+                        }\n+                        return m;\n+                    case RIGHT_SIDE:\n+                        if (f_b * f_m <= 0) {\n+                            return b;\n+                        }\n+                        return m;\n+                    case BELOW_SIDE:\n+                        if (f_m <= 0) {\n+                            return m;\n+                        }\n+                        return solve(f, a, m, allowedSolution);\n+                    case ABOVE_SIDE:\n+                        if (f_m >= 0) {\n+                            return m;\n+                        }\n+                        return solve(f, a, m, allowedSolution);\n+                    default:\n+                        throw new MathIllegalArgumentException(\n+                                \"Unsupported value for allowedSolution - \" + allowedSolution);\n                 }\n             }\n+\n+            // Check for maximum number of iterations\n+            if (getEvaluations() > maximalIterationCount) {\n+                throw new TooManyEvaluationsException(maximalIterationCount);\n+            }\n+\n+            // Check progression of interval\n+            double deltaMeta = FastMath.abs(b - a);\n+            if (deltaMeta >= lastDeltaMeta * stagnationIterationCount) {\n+                throw new MathIllegalArgumentException(\"BisectionSolver falling into stagnation trap, \"\n+                        + (int) (deltaMeta / lastDeltaMeta) + \" bisections without apparent change.\");\n+            }\n+            lastDeltaMeta = deltaMeta;\n+            m_last = m;\n         }\n     }\n \n+    /**\n+     * Set up for computing a zero.\n+     * Implements checks and default computation method inherited from {@link AbstractUnivariateSolver}.\n+     *\n+     * @param min Lower bound for the interval.\n+     * @param max Upper bound for the interval.\n+     * @param allowedSolution The kind of solutions that shall be returned.\n+     */\n+    protected void setup(final double min, final double max, final AllowedSolution allowedSolution) {\n+        super.setup(allowedSolution, maximalevaluations, min, max);\n+    }\n+}\n+\n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}