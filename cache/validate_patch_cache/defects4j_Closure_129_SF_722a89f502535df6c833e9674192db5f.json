{
    "patch": "    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n      \n      // ignore cast nodes if first child is GETPROP or GETELEM\n      if (NodeUtil.isGet(first)) {\n        Node second = first.getNext();\n        if (second.isCast()) {\n          second = second.getFirstChild(); \n        }\n        first = second;\n      } else if (first.isCast()) {\n        first = first.getFirstChild();\n      }\n\n      if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      if (first.isName() &&\n          \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..1ff0a30d 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -158,11 +158,20 @@ class PrepareAst implements CompilerPass {\n     private void annotateCalls(Node n) {\n       Preconditions.checkState(n.isCall());\n \n-      // Keep track of of the \"this\" context of a call.  A call without an\n+      // Keep track of the \"this\" context of a call.  A call without an\n       // explicit \"this\" is a free call.\n       Node first = n.getFirstChild();\n-\n-      // ignore cast nodes.\n+      \n+      // ignore cast nodes if first child is GETPROP or GETELEM\n+      if (NodeUtil.isGet(first)) {\n+        Node second = first.getNext();\n+        if (second.isCast()) {\n+          second = second.getFirstChild(); \n+        }\n+        first = second;\n+      } else if (first.isCast()) {\n+        first = first.getFirstChild();\n+      }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}