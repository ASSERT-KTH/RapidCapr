{
    "patch": "        attachLiteralTypes(n);\n        if (n.getType() == Token.FUNCTION && parent.getType() != Token.NAME) {\n          if (NodeUtil.isFunctionDeclaration(n)) {\n            defineFunctionDeclaration(n, parent);\n          } else {\n            defineDeclaredFunction(n, parent);\n          }\n        } else if (n.getType() == Token.CATCH) {\n          defineCatch(n, parent);\n        } else if (n.getType() == Token.VAR) {\n          defineVar(n, parent);\n        } else if (n.getType() == Token.LP) {\n          if (parent == scope.getRootNode()) {\n            handleFunctionInputs(n);\n            if (NodeUtil.isExpressionResult(n.getParent())) {\n              defineDeclaredFunction(n, n.getParent().getParent());\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..a5e146b3 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,25 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+        attachLiteralTypes(n);\n+        if (n.getType() == Token.FUNCTION && parent.getType() != Token.NAME) {\n+          if (NodeUtil.isFunctionDeclaration(n)) {\n+            defineFunctionDeclaration(n, parent);\n+          } else {\n+            defineDeclaredFunction(n, parent);\n           }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n+        } else if (n.getType() == Token.CATCH) {\n           defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n+        } else if (n.getType() == Token.VAR) {\n           defineVar(n, parent);\n-          break;\n-      }\n+        } else if (n.getType() == Token.LP) {\n+          if (parent == scope.getRootNode()) {\n+            handleFunctionInputs(n);\n+            if (NodeUtil.isExpressionResult(n.getParent())) {\n+              defineDeclaredFunction(n, n.getParent().getParent());\n+            }\n+          }\n+        }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}