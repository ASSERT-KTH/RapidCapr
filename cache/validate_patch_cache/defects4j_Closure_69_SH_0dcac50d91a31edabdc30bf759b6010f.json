{
    "patch": "      if (functionType.hasInstanceType()\n          && !NodeUtil.isGet(functionType.getInstanceType().getReferenceNode())) {\n        t.report(n, THIS_REFERENCE_IN_NON_GET_ERROR);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..372799eb 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,9 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.hasInstanceType()\n+          && !NodeUtil.isGet(functionType.getInstanceType().getReferenceNode())) {\n+        t.report(n, THIS_REFERENCE_IN_NON_GET_ERROR);\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}