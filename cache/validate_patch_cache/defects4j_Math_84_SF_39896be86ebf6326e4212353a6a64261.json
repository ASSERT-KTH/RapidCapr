{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);           \n            final RealPointValuePair[] expandedSimplex = simplex;\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex = expandedSimplex;\n            } else {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            return;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted;\n        RealPointValuePair[] contractedSimplex;\n        if (comparator.compare(reflected, original[getWorst(original)]) > 0) {\n            // perform an inside contraction\n            contracted = evaluateNewSimplex(original, -gamma, comparator);\n            contractedSimplex = simplex;\n            if (comparator.compare(contracted, best) < 0) {\n                // save the contracted simplex\n                simplex = (contractedSimplex != null && contracted.getPoint() != null) ? contractedSimplex : original;\n                return;\n            }\n        } else {\n            // perform an outside contraction\n            contracted = evaluateNewSimplex(original, sigma, comparator);\n            contractedSimplex = simplex;\n            if (comparator.compare(contracted, reflected) < 0) {\n                // save the contracted simplex\n                simplex = (contractedSimplex != null && contracted.getPoint() != null) ? contractedSimplex : original;\n                return;\n            }\n        }\n\n        // Shrink the simplex around the best vertex\n        final RealPointValuePair[] updatedSimplex = new RealPointValuePair[original.length];\n        updatedSimplex[0] = best;\n        for (int i = 1; i < simplex.length; i++) {\n            RealPointValuePair vertex = original[i];\n            RealPointValuePair updatedVertex = new RealPointValuePair(\n                    best.getPoint().add(vertex.getPoint().subtract(best.getPoint()).mapMultiply(sigma)),\n                    Double.NaN);\n            updatedSimplex[i] = updatedVertex;\n        }\n        simplex = updatedSimplex;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..ecf0833f8 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,72 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);           \n+            final RealPointValuePair[] expandedSimplex = simplex;\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // accept the expanded simplex\n+                simplex = expandedSimplex;\n+            } else {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n             }\n+            return;\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        }\n \n-            // check convergence\n+        // compute the contracted simplex\n+        final RealPointValuePair contracted;\n+        RealPointValuePair[] contractedSimplex;\n+        if (comparator.compare(reflected, original[getWorst(original)]) > 0) {\n+            // perform an inside contraction\n+            contracted = evaluateNewSimplex(original, -gamma, comparator);\n+            contractedSimplex = simplex;\n+            if (comparator.compare(contracted, best) < 0) {\n+                // save the contracted simplex\n+                simplex = (contractedSimplex != null && contracted.getPoint() != null) ? contractedSimplex : original;\n+                return;\n+            }\n+        } else {\n+            // perform an outside contraction\n+            contracted = evaluateNewSimplex(original, sigma, comparator);\n+            contractedSimplex = simplex;\n+            if (comparator.compare(contracted, reflected) < 0) {\n+                // save the contracted simplex\n+                simplex = (contractedSimplex != null && contracted.getPoint() != null) ? contractedSimplex : original;\n                 return;\n             }\n-\n         }\n \n+        // Shrink the simplex around the best vertex\n+        final RealPointValuePair[] updatedSimplex = new RealPointValuePair[original.length];\n+        updatedSimplex[0] = best;\n+        for (int i = 1; i < simplex.length; i++) {\n+            RealPointValuePair vertex = original[i];\n+            RealPointValuePair updatedVertex = new RealPointValuePair(\n+                    best.getPoint().add(vertex.getPoint().subtract(best.getPoint()).mapMultiply(sigma)),\n+                    Double.NaN);\n+            updatedSimplex[i] = updatedVertex;\n+        }\n+        simplex = updatedSimplex;\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}