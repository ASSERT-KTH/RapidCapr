{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  // First, try to resolve via the registry\n  boolean resolved = resolveViaRegistry(t, enclosing);\n  if (resolved) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  // If not resolved, try to resolve via properties\n  boolean resolvedViaProps = resolveViaProperties(t, enclosing);\n  if (resolvedViaProps) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  // If the type cannot be resolved by either method, keep trying\n  boolean continueTrying = true;\n  while (continueTrying) {\n    continueTrying = false;\n\n    // Check for an implicit prototype cycle\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      continueTrying = true;\n    }\n\n    // Try to resolve via the registry\n    resolved = resolveViaRegistry(t, enclosing);\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      continueTrying = false;\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // Try to resolve via properties\n    resolvedViaProps = resolveViaProperties(t, enclosing);\n    if (resolvedViaProps) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      continueTrying = false;\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n  }\n\n  // If the type still cannot be resolved, call super and return the type\n  super.resolveInternal(t, enclosing);\n  finishPropertyContinuations();\n  return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..8eda29f5 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,65 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  // First, try to resolve via the registry\n+  boolean resolved = resolveViaRegistry(t, enclosing);\n+  if (resolved) {\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+  // If not resolved, try to resolve via properties\n+  boolean resolvedViaProps = resolveViaProperties(t, enclosing);\n+  if (resolvedViaProps) {\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n+    if (detectImplicitPrototypeCycle()) {\n+      handleTypeCycle(t);\n     }\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n+\n+  // If the type cannot be resolved by either method, keep trying\n+  boolean continueTrying = true;\n+  while (continueTrying) {\n+    continueTrying = false;\n \n-    resolveViaProperties(t, enclosing);\n+    // Check for an implicit prototype cycle\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n+      continueTrying = true;\n     }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n+    // Try to resolve via the registry\n+    resolved = resolveViaRegistry(t, enclosing);\n+    if (resolved) {\n+      super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n+      continueTrying = false;\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n+    }\n+\n+    // Try to resolve via properties\n+    resolvedViaProps = resolveViaProperties(t, enclosing);\n+    if (resolvedViaProps) {\n+      super.resolveInternal(t, enclosing);\n+      finishPropertyContinuations();\n+      continueTrying = false;\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n \n+  // If the type still cannot be resolved, call super and return the type\n+  super.resolveInternal(t, enclosing);\n+  finishPropertyContinuations();\n+  return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}