{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (parent != null) {\n        int parentType = parent.getType();\n        if (parentType == Token.SCRIPT || parentType == Token.MODULE_BODY) {\n            // Always traverse the the top-level of the AST.\n            return true;\n        } else if (parentType == Token.OBJECTLIT) {\n            // Object literal property definitions should be traversed in any context.\n            return true;\n        } else if (parentType == Token.ASSIGN && parent.getParent().getType() == Token.EXPR_RESULT) {\n            // Don't traverse the left-hand side of expressions like \"Foo.prototype.bar = ...\".\n            Node lhs = parent.getFirstChild();\n            if (n == lhs && lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n            }\n        }\n    }\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n        // Don't traverse functions unless they would normally be able to have a @this annotation associated with them.\n        // e.g., var a = function() { }; // or function a() {} // or a.x = function() {};\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN\n                || pType == Token.FOR || pType == Token.FUNCTION || pType == Token.IF || pType == Token.WHILE\n                || pType == Token.DO || pType == Token.TRY || pType == Token.CATCH || pType == Token.FINALLY\n                || pType == Token.SWITCH || pType == Token.CASE || pType == Token.DEFAULT)) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..a66f7186 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,41 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    if (parent != null) {\n+        int parentType = parent.getType();\n+        if (parentType == Token.SCRIPT || parentType == Token.MODULE_BODY) {\n+            // Always traverse the the top-level of the AST.\n+            return true;\n+        } else if (parentType == Token.OBJECTLIT) {\n+            // Object literal property definitions should be traversed in any context.\n+            return true;\n+        } else if (parentType == Token.ASSIGN && parent.getParent().getType() == Token.EXPR_RESULT) {\n+            // Don't traverse the left-hand side of expressions like \"Foo.prototype.bar = ...\".\n+            Node lhs = parent.getFirstChild();\n+            if (n == lhs && lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+    }\n+    if (n.getType() == Token.FUNCTION) {\n+        // Don't traverse functions that are constructors or have the @this or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n             return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+        }\n+        // Don't traverse functions unless they would normally be able to have a @this annotation associated with them.\n+        // e.g., var a = function() { }; // or function a() {} // or a.x = function() {};\n+        int pType = parent.getType();\n+        if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN\n+                || pType == Token.FOR || pType == Token.FUNCTION || pType == Token.IF || pType == Token.WHILE\n+                || pType == Token.DO || pType == Token.TRY || pType == Token.CATCH || pType == Token.FINALLY\n+                || pType == Token.SWITCH || pType == Token.CASE || pType == Token.DEFAULT)) {\n             return false;\n-          }\n-      }\n+        }\n     }\n-\n     return true;\n-  }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}