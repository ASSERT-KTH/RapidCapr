{
    "patch": "  private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap) {\n      // Compute all of the assignments necessary\n      List<Node> nodes = Lists.newArrayList();\n      Node val = ref.getAssignedValue();\n      blacklistVarReferencesInTree(val, v.scope);\n      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n      for (Node key = val.getFirstChild(); key != null;\n           key = key.getNext()) {\n        String var = key.getString();\n        Node value = key.removeFirstChild();\n        // TODO(user): Copy type information.\n        nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)), value));\n        all.remove(var);\n      }\n\n      // TODO(user): Better source information.\n      for (String var : all) {\n        nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)),\n                   NodeUtil.newUndefinedNode(null)));\n      }\n\n      Node replacement;\n        // All assignments evaluate to true, so make sure that the\n        // expr statement evaluates to true in case it matters.\n        nodes.add(new Node(Token.TRUE));\n\n        // Join these using COMMA.  A COMMA node must have 2 children, so we\n        // create a tree. In the tree the first child be the COMMA to match\n        // the parser, otherwise tree equality tests fail.\n        nodes = Lists.reverse(nodes);\n        replacement = new Node(Token.COMMA);\n        Node cur = replacement;\n\n        int i = 0;\n        int size = nodes.size();\n        while(i + 2 <= size) {\n          Node t = NodeUtil.newExprNodes(Token.COMMA, nodes.subList(i, i+2));\n          cur.addChildToFront(t);\n          cur = t;\n          i += 2;\n        }\n        while (i < size) {\n          cur.addChildToFront(nodes.get(i++));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9061925d..b52ca49d 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -300,7 +300,7 @@ class InlineObjectLiterals implements CompilerPass {\n      * Note that the resulting expression will always evaluate to\n      * true, as would the x = {...} expression.\n      */\n-    private void replaceAssignmentExpression(Var v, Reference ref,\n+  private void replaceAssignmentExpression(Var v, Reference ref,\n                                              Map<String, String> varmap) {\n       // Compute all of the assignments necessary\n       List<Node> nodes = Lists.newArrayList();\n@@ -338,26 +338,17 @@ class InlineObjectLiterals implements CompilerPass {\n         nodes = Lists.reverse(nodes);\n         replacement = new Node(Token.COMMA);\n         Node cur = replacement;\n-        int i;\n-        for (i = 0; i < nodes.size() - 2; i++) {\n-          cur.addChildToFront(nodes.get(i));\n-          Node t = new Node(Token.COMMA);\n+\n+        int i = 0;\n+        int size = nodes.size();\n+        while(i + 2 <= size) {\n+          Node t = NodeUtil.newExprNodes(Token.COMMA, nodes.subList(i, i+2));\n           cur.addChildToFront(t);\n           cur = t;\n+          i += 2;\n         }\n-        cur.addChildToFront(nodes.get(i));\n-        cur.addChildToFront(nodes.get(i + 1));\n-\n-      Node replace = ref.getParent();\n-      replacement.copyInformationFromForTree(replace);\n-\n-      if (replace.getType() == Token.VAR) {\n-        replace.getParent().replaceChild(\n-            replace, NodeUtil.newExpr(replacement));\n-      } else {\n-        replace.getParent().replaceChild(replace, replacement);\n-      }\n-    }\n+        while (i < size) {\n+          cur.addChildToFront(nodes.get(i++));\n \n     /**\n      * Splits up the object literal into individual variables, and",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}