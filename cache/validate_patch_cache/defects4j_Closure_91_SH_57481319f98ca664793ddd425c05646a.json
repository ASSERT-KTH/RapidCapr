{
    "patch": "      Node fnNameNode = n.getFirstChild();\n      // Traverse renamed function.\n      // var x = function FOO() {}\n      // function BAR(){ FOO(); }\n      if (fnNameNode != null && fnNameNode.isName()) {\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() &&\n            !compiler.getCodingConvention().isExported(fnName) &&\n            compiler.getCodingConvention().isFunctionPredicate().apply(fnName)) {\n          return true;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..13f152b5 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,17 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node fnNameNode = n.getFirstChild();\n+      // Traverse renamed function.\n+      // var x = function FOO() {}\n+      // function BAR(){ FOO(); }\n+      if (fnNameNode != null && fnNameNode.isName()) {\n+        String fnName = fnNameNode.getString();\n+        if (!fnName.isEmpty() &&\n+            !compiler.getCodingConvention().isExported(fnName) &&\n+            compiler.getCodingConvention().isFunctionPredicate().apply(fnName)) {\n+          return true;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}