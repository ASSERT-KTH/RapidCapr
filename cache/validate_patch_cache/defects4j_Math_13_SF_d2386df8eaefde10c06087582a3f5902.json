{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] realEigen = dec.getRealEigenvalues();\n    final double eps = 2.2204E-16;\n    double maxValue = 0.0;\n    for (int i = 0; i < realEigen.length; ++i) {\n        if (realEigen[i] > maxValue) {\n            maxValue = realEigen[i];\n        }\n    }\n    final double thresh = eps * maxValue;\n    \n    for (int i = 0; i < realEigen.length; i++) {\n        if (realEigen[i] < thresh) {\n            realEigen[i] = 0.0;\n        } else {\n            realEigen[i] = Math.sqrt(realEigen[i]);\n        }\n    }\n    \n    final RealMatrix V = dec.getV();\n    final RealMatrix D = MatrixUtils.createRealDiagonalMatrix(realEigen);\n    final RealMatrix D_sqrt = MatrixUtils.createRealDiagonalMatrix(Math.sqrt(2.0));\n    \n    return V.multiply(D_sqrt).multiply(D.multiply(D_sqrt)).multiply(V.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c6352564e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,30 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] realEigen = dec.getRealEigenvalues();\n+    final double eps = 2.2204E-16;\n+    double maxValue = 0.0;\n+    for (int i = 0; i < realEigen.length; ++i) {\n+        if (realEigen[i] > maxValue) {\n+            maxValue = realEigen[i];\n+        }\n+    }\n+    final double thresh = eps * maxValue;\n+    \n+    for (int i = 0; i < realEigen.length; i++) {\n+        if (realEigen[i] < thresh) {\n+            realEigen[i] = 0.0;\n+        } else {\n+            realEigen[i] = Math.sqrt(realEigen[i]);\n+        }\n     }\n+    \n+    final RealMatrix V = dec.getV();\n+    final RealMatrix D = MatrixUtils.createRealDiagonalMatrix(realEigen);\n+    final RealMatrix D_sqrt = MatrixUtils.createRealDiagonalMatrix(Math.sqrt(2.0));\n+    \n+    return V.multiply(D_sqrt).multiply(D.multiply(D_sqrt)).multiply(V.transpose());\n+}\n }",
    "result_reason": "error: method createRealDiagonalMatrix in class MatrixUtils cannot be applied to given types;",
    "test_result": "ERROR"
}