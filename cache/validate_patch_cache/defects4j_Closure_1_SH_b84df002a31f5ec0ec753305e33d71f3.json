{
    "patch": "Node function = fnScope.getRootNode();\nNode blockNode = NodeUtil.getFunctionBody(function);\n\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\nif (!modifyCallers) {\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n            Node prev = lastArg.getPrevious();\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n\n            if (prev == null) {\n                // First argument of function, so we need to update the argument list start\n                blockNode.addChildToFront(IR.exprResult(IR.assign(\n                        IR.getprop(IR.name(\"arguments\"), IR.string(Integer.toString(argList.getNumberOfChildren()))),\n                        lastArg.detach())));\n                compiler.reportCodeChange();\n            }\n        } else {\n            break;\n        }\n    }\n} else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..fa7a37be 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,41 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+Node blockNode = NodeUtil.getFunctionBody(function);\n+\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+if (!modifyCallers) {\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+            Node prev = lastArg.getPrevious();\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+\n+            if (prev == null) {\n+                // First argument of function, so we need to update the argument list start\n+                blockNode.addChildToFront(IR.exprResult(IR.assign(\n+                        IR.getprop(IR.name(\"arguments\"), IR.string(Integer.toString(argList.getNumberOfChildren()))),\n+                        lastArg.detach())));\n+                compiler.reportCodeChange();\n+            }\n+        } else {\n+            break;\n+        }\n+    }\n+} else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}