{
    "patch": "// Make sure this assignment is not in a loop.\nfor (BasicBlock block = ref.getBasicBlock();\n     block != null; block = block.getParent()) {\n    if (block.isFunction) {\n        break;\n    } else if (block.isLoop) {\n        if (!block.getParent().getLastChild().isEqual(ref)) {\n            return false;\n        }\n        block.getOutEdges().stream()\n                .filter(e -> e.getValue() instanceof Branch)\n                .forEach(e -> {\n                    if (((Branch) e.getValue()).getType() == Branch.Type.ON_TRUE) {\n                        if (e.getEnd().getLastChild().isExit()) {\n                            exitBlocks.add(e.getEnd());\n                        } else {\n                            todoBlocks.push(e.getEnd());\n                        }\n                    } else if (((Branch) e.getValue()).getType() == Branch.Type.ON_FALSE) {\n                        if (e.getEnd().getLastChild().isExit()) {\n                            exitBlocks.add(e.getEnd());\n                        } else {\n                            todoBlocks.push(e.getEnd());\n                        }\n                    } else {\n                        returnValues.put(e.getEnd(), new ReturnDecision(false));\n                    }\n                });\n    }\n}\n\nwhile (!todoBlocks.empty()) {\n    BasicBlock block = todoBlocks.pop();\n    for (DiGraphEdge<BasicBlock, Branch> e : block.getInEdges()) {\n        if (!((Branch) e.getValue()).getType().equals(Branch.Type.ON_FALSE)) {\n            continue;\n        }\n        BasicBlock source = e.getStart();\n        if (exitBlocks.contains(source)) {\n            continue;\n        }\n        boolean isValid = true;\n        for (DiGraphEdge<BasicBlock, Branch> le : source.getInEdges()) {\n            if (!((Branch) le.getValue()).getType().equals(Branch.Type.ON_FALSE)) {\n                continue;\n            }\n            if (!exitBlocks.contains(le.getStart())) {\n                isValid = false;\n                break;\n            }\n        }\n        if (isValid) {\n            exitBlocks.add(source);\n            todoBlocks.push(source);\n        }\n    }\n}\n\nList<Reference> assignments = exitBlocks.stream()\n        .flatMap(b -> b.getInEdges().stream())\n        .flatMap(e -> e.getStart().getChildReferences().stream())\n        .filter(r -> r.isReferenceTo(namedDeclaration))\n        .filter(Reference::isAssignment)\n        .collect(Collectors.toList());\n\nreturn assignments.size() == 1;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..8eb84db9 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,72 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+// Make sure this assignment is not in a loop.\n+for (BasicBlock block = ref.getBasicBlock();\n+     block != null; block = block.getParent()) {\n+    if (block.isFunction) {\n+        break;\n+    } else if (block.isLoop) {\n+        if (!block.getParent().getLastChild().isEqual(ref)) {\n+            return false;\n+        }\n+        block.getOutEdges().stream()\n+                .filter(e -> e.getValue() instanceof Branch)\n+                .forEach(e -> {\n+                    if (((Branch) e.getValue()).getType() == Branch.Type.ON_TRUE) {\n+                        if (e.getEnd().getLastChild().isExit()) {\n+                            exitBlocks.add(e.getEnd());\n+                        } else {\n+                            todoBlocks.push(e.getEnd());\n+                        }\n+                    } else if (((Branch) e.getValue()).getType() == Branch.Type.ON_FALSE) {\n+                        if (e.getEnd().getLastChild().isExit()) {\n+                            exitBlocks.add(e.getEnd());\n+                        } else {\n+                            todoBlocks.push(e.getEnd());\n+                        }\n+                    } else {\n+                        returnValues.put(e.getEnd(), new ReturnDecision(false));\n+                    }\n+                });\n+    }\n+}\n+\n+while (!todoBlocks.empty()) {\n+    BasicBlock block = todoBlocks.pop();\n+    for (DiGraphEdge<BasicBlock, Branch> e : block.getInEdges()) {\n+        if (!((Branch) e.getValue()).getType().equals(Branch.Type.ON_FALSE)) {\n+            continue;\n+        }\n+        BasicBlock source = e.getStart();\n+        if (exitBlocks.contains(source)) {\n+            continue;\n+        }\n+        boolean isValid = true;\n+        for (DiGraphEdge<BasicBlock, Branch> le : source.getInEdges()) {\n+            if (!((Branch) le.getValue()).getType().equals(Branch.Type.ON_FALSE)) {\n+                continue;\n+            }\n+            if (!exitBlocks.contains(le.getStart())) {\n+                isValid = false;\n+                break;\n+            }\n+        }\n+        if (isValid) {\n+            exitBlocks.add(source);\n+            todoBlocks.push(source);\n+        }\n+    }\n+}\n+\n+List<Reference> assignments = exitBlocks.stream()\n+        .flatMap(b -> b.getInEdges().stream())\n+        .flatMap(e -> e.getStart().getChildReferences().stream())\n+        .filter(r -> r.isReferenceTo(namedDeclaration))\n+        .filter(Reference::isAssignment)\n+        .collect(Collectors.toList());\n+\n+return assignments.size() == 1;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}