{
    "patch": "      final boolean functionIsDirectlyLentToPrototype = NodeUtil.isPrototypeProperty(parent.getParent());\n      if (functionIsDirectlyLentToPrototype) {\n        return false;\n      }\n      if (jsDoc != null && jsDoc.isConstructor()) {\n        return parent.getLastChild() != n; // Don't traverse the constructor call.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..3ea9f9e5 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,12 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      final boolean functionIsDirectlyLentToPrototype = NodeUtil.isPrototypeProperty(parent.getParent());\n+      if (functionIsDirectlyLentToPrototype) {\n+        return false;\n+      }\n+      if (jsDoc != null && jsDoc.isConstructor()) {\n+        return parent.getLastChild() != n; // Don't traverse the constructor call.\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}