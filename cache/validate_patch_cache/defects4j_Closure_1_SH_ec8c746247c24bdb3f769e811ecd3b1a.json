{
    "patch": "      NodeList<Param> parameters = function.getFunctionParameters();\n      while (!parameters.isEmpty()) {\n        Param lastArg = parameters.getLast();\n        String paramName = lastArg.getString();\n        Var var = fnScope.getVar(paramName);\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          parameters.removeLast();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5652c169 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,14 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      NodeList<Param> parameters = function.getFunctionParameters();\n+      while (!parameters.isEmpty()) {\n+        Param lastArg = parameters.getLast();\n+        String paramName = lastArg.getString();\n+        Var var = fnScope.getVar(paramName);\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          parameters.removeLast();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}