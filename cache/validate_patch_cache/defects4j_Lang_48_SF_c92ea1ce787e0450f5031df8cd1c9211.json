{
    "patch": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class EqualsBuilder {\n    private boolean isEquals = true;\n    private Set<Pair> comparedPairs = new HashSet<>();\n\n    private static class Pair {\n        Object lhs;\n        Object rhs;\n\n        Pair(Object lhs, Object rhs) {\n            this.lhs = lhs;\n            this.rhs = rhs;\n        }\n\n        @Override\n        public int hashCode() {\n            return System.identityHashCode(lhs) + System.identityHashCode(rhs);\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (obj instanceof Pair) {\n                Pair other = (Pair) obj;\n                return this.lhs == other.lhs && this.rhs == other.rhs;\n            }\n            return false;\n        }\n    }\n\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n\n        Pair pair = new Pair(lhs, rhs);\n        if (comparedPairs.contains(pair)) {\n            return this;\n        }\n        comparedPairs.add(pair);\n\n        Class<?> lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            // The simple case, not an array, just test the element\n            isEquals = lhs.equals(rhs);\n        } else if (lhs.getClass() != rhs.getClass()) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n            this.setEquals(false);\n        }\n        // 'Switch' on type of array, to dispatch to the correct handler\n        // This handles multi dimensional arrays of the same depth\n        else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else if (lhs.getClass().getComponentType().equals(Object.class)) {\n            append((Object[]) lhs, (Object[]) rhs);\n        } else {\n            // Not an array of primitives\n            append((Object) lhs, (Object) rhs);\n        }\n        return this;\n    }\n\n    private void append(Object[] lhs, Object[] rhs) {\n        if (isEquals == false) {\n            return;\n        }\n        if (lhs == rhs) {\n            return;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return;\n        }\n        if (lhs == rhs) {\n            return;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return;\n        }\n\n        this.setEquals(lhs.equals(rhs));\n    }\n\n    private void append(long[] lhs, long[] rhs) {\n        if (isEquals == false) {\n            return;\n        }\n        if (lhs == rhs) {\n            return;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(int[] lhs, int[] rhs) {\n        if (isEquals == false) {\n            return;\n        }\n        if (lhs == rhs) {\n            return;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(short[] lhs, short[] rhs) {\n        if (isEquals == false) {\n            return;\n        }\n        if (lhs == rhs) {\n            return;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(char[] lhs, char[] rhs) {\n        if (isEquals == false) {\n            return;\n        }\n        if (lhs == rhs) {\n            return;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(byte[] lhs, byte[] rhs) {\n        if (isEquals == false) {\n            return;\n        }\n        if (lhs == rhs) {\n            return;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(double[] lhs, double[] rhs) {\n        if (isEquals == false) {\n            return;\n        }\n        if (lhs == rhs) {\n            return;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length; ++i) {\n            double lhsVal = lhs[i];\n            double rhsVal = rhs[i];\n            if (Double.doubleToLongBits(lhsVal) != Double.doubleToLongBits(rhsVal)) {\n                this.setEquals(false);\n                return;\n            }\n        }\n    }\n\n    private void append(float[] lhs, float[] rhs) {\n        if (isEquals == false) {\n            return;\n        }\n        if (lhs == rhs) {\n            return;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length; ++i) {\n            float lhsVal = lhs[i];\n            float rhsVal = rhs[i];\n            if (Float.floatToIntBits(lhsVal) != Float.floatToIntBits(rhsVal)) {\n                this.setEquals(false);\n                return;\n            }\n        }\n    }\n\n    private void append(boolean[] lhs, boolean[] rhs) {\n        if (isEquals == false) {\n            return;\n        }\n        if (lhs == rhs) {\n            return;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length; ++i) {\n            if (lhs[i] != rhs[i]) {\n                this.setEquals(false);\n                return;\n            }\n        }\n    }\n\n    public boolean isEquals() {\n        return isEquals;\n    }\n\n    public void setEquals(boolean isEquals) {\n        this.isEquals = isEquals;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..50b198e2 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,6 +364,37 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class EqualsBuilder {\n+    private boolean isEquals = true;\n+    private Set<Pair> comparedPairs = new HashSet<>();\n+\n+    private static class Pair {\n+        Object lhs;\n+        Object rhs;\n+\n+        Pair(Object lhs, Object rhs) {\n+            this.lhs = lhs;\n+            this.rhs = rhs;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return System.identityHashCode(lhs) + System.identityHashCode(rhs);\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (obj instanceof Pair) {\n+                Pair other = (Pair) obj;\n+                return this.lhs == other.lhs && this.rhs == other.rhs;\n+            }\n+            return false;\n+        }\n+    }\n+\n     public EqualsBuilder append(Object lhs, Object rhs) {\n         if (isEquals == false) {\n             return this;\n@@ -375,10 +406,17 @@ public class EqualsBuilder {\n             this.setEquals(false);\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n+\n+        Pair pair = new Pair(lhs, rhs);\n+        if (comparedPairs.contains(pair)) {\n+            return this;\n+        }\n+        comparedPairs.add(pair);\n+\n+        Class<?> lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n+            // The simple case, not an array, just test the element\n+            isEquals = lhs.equals(rhs);\n         } else if (lhs.getClass() != rhs.getClass()) {\n             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n             this.setEquals(false);\n@@ -401,13 +439,232 @@ public class EqualsBuilder {\n             append((float[]) lhs, (float[]) rhs);\n         } else if (lhs instanceof boolean[]) {\n             append((boolean[]) lhs, (boolean[]) rhs);\n+        } else if (lhs.getClass().getComponentType().equals(Object.class)) {\n+            append((Object[]) lhs, (Object[]) rhs);\n         } else {\n             // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            append((Object) lhs, (Object) rhs);\n         }\n         return this;\n     }\n \n+    private void append(Object[] lhs, Object[] rhs) {\n+        if (isEquals == false) {\n+            return;\n+        }\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length; ++i) {\n+            append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(Object lhs, Object rhs) {\n+        if (isEquals == false) {\n+            return;\n+        }\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return;\n+        }\n+\n+        this.setEquals(lhs.equals(rhs));\n+    }\n+\n+    private void append(long[] lhs, long[] rhs) {\n+        if (isEquals == false) {\n+            return;\n+        }\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length; ++i) {\n+            append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(int[] lhs, int[] rhs) {\n+        if (isEquals == false) {\n+            return;\n+        }\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length; ++i) {\n+            append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(short[] lhs, short[] rhs) {\n+        if (isEquals == false) {\n+            return;\n+        }\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length; ++i) {\n+            append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(char[] lhs, char[] rhs) {\n+        if (isEquals == false) {\n+            return;\n+        }\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length; ++i) {\n+            append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(byte[] lhs, byte[] rhs) {\n+        if (isEquals == false) {\n+            return;\n+        }\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length; ++i) {\n+            append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(double[] lhs, double[] rhs) {\n+        if (isEquals == false) {\n+            return;\n+        }\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length; ++i) {\n+            double lhsVal = lhs[i];\n+            double rhsVal = rhs[i];\n+            if (Double.doubleToLongBits(lhsVal) != Double.doubleToLongBits(rhsVal)) {\n+                this.setEquals(false);\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void append(float[] lhs, float[] rhs) {\n+        if (isEquals == false) {\n+            return;\n+        }\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length; ++i) {\n+            float lhsVal = lhs[i];\n+            float rhsVal = rhs[i];\n+            if (Float.floatToIntBits(lhsVal) != Float.floatToIntBits(rhsVal)) {\n+                this.setEquals(false);\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void append(boolean[] lhs, boolean[] rhs) {\n+        if (isEquals == false) {\n+            return;\n+        }\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length; ++i) {\n+            if (lhs[i] != rhs[i]) {\n+                this.setEquals(false);\n+                return;\n+            }\n+        }\n+    }\n+\n+    public boolean isEquals() {\n+        return isEquals;\n+    }\n+\n+    public void setEquals(boolean isEquals) {\n+        this.isEquals = isEquals;\n+    }\n+}\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}