{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0) {\n        throw new IllegalArgumentException(\"a must be positive\");\n    }\n    if (x < 0) {\n        throw new IllegalArgumentException(\"x must be non-negative\");\n    }\n    if (x == 0) {\n        return 0;\n    }\n    double epsilon = 10e-15;\n    double term = 1 / a;\n    double sum = term;\n    while (Math.abs(term) > epsilon * Math.abs(sum)) {\n        term *= x / (a + sum + 1);\n        sum += term;\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\nprivate static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.120858003e-2 / (x + 4) - 0.536382e-5 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..73ef69c6d 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,31 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0) {\n+        throw new IllegalArgumentException(\"a must be positive\");\n+    }\n+    if (x < 0) {\n+        throw new IllegalArgumentException(\"x must be non-negative\");\n+    }\n+    if (x == 0) {\n+        return 0;\n+    }\n+    double epsilon = 10e-15;\n+    double term = 1 / a;\n+    double sum = term;\n+    while (Math.abs(term) > epsilon * Math.abs(sum)) {\n+        term *= x / (a + sum + 1);\n+        sum += term;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+private static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.120858003e-2 / (x + 4) - 0.536382e-5 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}