{
    "patch": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null || str.isEmpty() || str.isBlank()) {\n        return null;\n    }\n    if (str.startsWith(\"--\")) {\n        // This is protection for poorness in java.lang.BigDecimal.\n        // It accepts this as a legal value, but it does not appear\n        // to be in specification of class. OS X Java parses it to\n        // a wrong value.\n        return null;\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n\n    int decPos = str.indexOf('.');\n    int expPos = str.toLowerCase().indexOf('e');\n    if (expPos == -1) {\n        expPos = str.toLowerCase().indexOf('d');\n        if (expPos == -1) {\n            expPos = str.toLowerCase().indexOf('f');\n        }\n    }\n    if (decPos == -1 && expPos == -1) {\n        // Must be an int, long, or big integer\n        try {\n            return createInteger(str);\n        } catch (NumberFormatException ignored) {}\n        try {\n            return createLong(str);\n        } catch (NumberFormatException ignored) {}\n        return createBigInteger(str);\n    }\n    if (expPos > decPos && expPos != -1) {\n        // Exponential notation\n        if (expPos == str.length() - 1) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        String mant = str.substring(0, expPos);\n        String exp = str.substring(expPos + 1);\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        try {\n            Float f = Float.valueOf(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        } catch (NumberFormatException ignored) {}\n        try {\n            Double d = Double.valueOf(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        } catch (NumberFormatException ignored) {}\n        return createBigDecimal(str);\n    } else {\n        // Decimal notation\n        if (decPos == str.length() - 1) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        String mant;\n        String dec;\n        if (decPos > -1) {\n            mant = str.substring(0, decPos);\n            dec = str.substring(decPos + 1);\n        } else {\n            mant = str;\n            dec = null;\n        }\n        String exp = expPos > -1 ? str.substring(expPos + 1) : null;\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp) && (dec == null || isAllZeros(dec));\n        switch (str.charAt(str.length() - 1)) {\n            case 'f':\n            case 'F':\n                float f = Float.parseFloat(str);\n                if (Float.isInfinite(f) || f == 0 && !allZeros) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                return f;\n            case 'd':\n            case 'D':\n                double d = Double.parseDouble(str);\n                if (Double.isInfinite(d) || d == 0 && !allZeros) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                return d;\n            default:\n                break;\n        }\n        if (exp != null && exp.length() > 0) {\n            int intValue = Integer.parseInt(exp);\n            if (intValue < 0 || intValue > 28) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            BigDecimal bd = new BigDecimal(str);\n            if (bd.precision() - bd.scale() > intValue) {\n                return bd.scaleByPowerOfTen(-intValue);\n            } else {\n                return bd;\n            }\n        }\n    }\n    return createBigDecimal(str);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex fd03ab8f..d35197a3 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,154 +449,109 @@ public class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n+public static Number createNumber(String str) throws NumberFormatException {\n+    if (str == null || str.isEmpty() || str.isBlank()) {\n+        return null;\n+    }\n+    if (str.startsWith(\"--\")) {\n+        // This is protection for poorness in java.lang.BigDecimal.\n+        // It accepts this as a legal value, but it does not appear\n+        // to be in specification of class. OS X Java parses it to\n+        // a wrong value.\n+        return null;\n+    }\n+    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+        return createInteger(str);\n+    }\n+\n+    int decPos = str.indexOf('.');\n+    int expPos = str.toLowerCase().indexOf('e');\n+    if (expPos == -1) {\n+        expPos = str.toLowerCase().indexOf('d');\n+        if (expPos == -1) {\n+            expPos = str.toLowerCase().indexOf('f');\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+    }\n+    if (decPos == -1 && expPos == -1) {\n+        // Must be an int, long, or big integer\n+        try {\n             return createInteger(str);\n-        }   \n-        char lastChar = str.charAt(str.length() - 1);\n+        } catch (NumberFormatException ignored) {}\n+        try {\n+            return createLong(str);\n+        } catch (NumberFormatException ignored) {}\n+        return createBigInteger(str);\n+    }\n+    if (expPos > decPos && expPos != -1) {\n+        // Exponential notation\n+        if (expPos == str.length() - 1) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+        String mant = str.substring(0, expPos);\n+        String exp = str.substring(expPos + 1);\n+        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+        try {\n+            Float f = Float.valueOf(str);\n+            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                return f;\n+            }\n+        } catch (NumberFormatException ignored) {}\n+        try {\n+            Double d = Double.valueOf(str);\n+            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                return d;\n+            }\n+        } catch (NumberFormatException ignored) {}\n+        return createBigDecimal(str);\n+    } else {\n+        // Decimal notation\n+        if (decPos == str.length() - 1) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n         String mant;\n         String dec;\n-        String exp;\n-        int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n-\n         if (decPos > -1) {\n-\n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n             mant = str.substring(0, decPos);\n+            dec = str.substring(decPos + 1);\n         } else {\n-            if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n+            mant = str;\n             dec = null;\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            String numeric = str.substring(0, str.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n+        String exp = expPos > -1 ? str.substring(expPos + 1) : null;\n+        boolean allZeros = isAllZeros(mant) && isAllZeros(exp) && (dec == null || isAllZeros(dec));\n+        switch (str.charAt(str.length() - 1)) {\n+            case 'f':\n+            case 'F':\n+                float f = Float.parseFloat(str);\n+                if (Float.isInfinite(f) || f == 0 && !allZeros) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-\n-            }\n-        } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n-            } else {\n-                exp = null;\n-            }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n                 }\n-                try {\n-                    return createLong(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+                return f;\n+            case 'd':\n+            case 'D':\n+                double d = Double.parseDouble(str);\n+                if (Double.isInfinite(d) || d == 0 && !allZeros) {\n+                    throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n-                return createBigInteger(str);\n-\n+                return d;\n+            default:\n+                break;\n+        }\n+        if (exp != null && exp.length() > 0) {\n+            int intValue = Integer.parseInt(exp);\n+            if (intValue < 0 || intValue > 28) {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+            }\n+            BigDecimal bd = new BigDecimal(str);\n+            if (bd.precision() - bd.scale() > intValue) {\n+                return bd.scaleByPowerOfTen(-intValue);\n             } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-                try {\n-                    Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                try {\n-                    Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-\n-                return createBigDecimal(str);\n-\n+                return bd;\n             }\n         }\n     }\n+    return createBigDecimal(str);\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}