{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        SavedField savedField = savedFields[i];\n        try {\n            millis = savedField.set(millis, resetFields);\n        } catch (IllegalFieldValueException e) {\n            if ((i + 1) >= count ||\n                savedFields[i + 1].iField.getType() != DateTimeFieldType.year()) {\n                // We cannot even rely on the most significant field to be able to\n                // calculate a partial millisecond value. Instead, we will discard all\n                // chronological pieces and try to parse forward to the next year boundary.\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                }\n                return Long.MAX_VALUE; // Same as throwing an IllegalArgumentException\n            }\n            // If integer value of either duration field is greater than one, assigned\n            // value of either field will be within the range of minValue and maxValue\n            // corresponding to either field.\n            long savedFieldValue = savedFields[i + 1].set(millis, resetFields);\n            long duration;\n            try {\n                DurationField savedFieldDuration = savedField.iField.getDurationField();\n                duration = savedFieldDuration.convertPeriodType(\n                        savedFields[i + 1].iField.getDurationField().getType().getPeriodType(),\n                        savedField.iField.getDurationField().getUnitMillis());\n            } catch (UnsupportedOperationException ex) {\n                duration = 1;\n            }\n            long minValue = savedFields[i + 1].iField.getDurationField().getMinimumValue();\n            long maxValue = savedFields[i + 1].iField.getDurationField().getMaximumValue();\n            long value = ((savedFieldValue - minValue) / duration) * duration + minValue;\n            for (int j = i; j < count; j++) {\n                savedField = savedFields[j];\n                if (savedField.iField == savedFields[i + 1].iField) {\n                    savedField.set(value, resetFields);\n                }\n            }\n            millis = iChrono.set(savedFields[i].getField(), millis, savedFields[i].getDifference());\n            iSavedFieldsShared = false;\n            iSavedFieldsCount = i;\n            iSavedFields = Arrays.copyOf(savedFields, i);\n            break;\n        }\n    }\n    iSavedFieldsShared = false;\n    iSavedFieldsCount = count;\n    iSavedFields = Arrays.copyOf(savedFields, count);\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\\\"', e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5237190e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,60 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        SavedField savedField = savedFields[i];\n+        try {\n+            millis = savedField.set(millis, resetFields);\n+        } catch (IllegalFieldValueException e) {\n+            if ((i + 1) >= count ||\n+                savedFields[i + 1].iField.getType() != DateTimeFieldType.year()) {\n+                // We cannot even rely on the most significant field to be able to\n+                // calculate a partial millisecond value. Instead, we will discard all\n+                // chronological pieces and try to parse forward to the next year boundary.\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                }\n+                return Long.MAX_VALUE; // Same as throwing an IllegalArgumentException\n+            }\n+            // If integer value of either duration field is greater than one, assigned\n+            // value of either field will be within the range of minValue and maxValue\n+            // corresponding to either field.\n+            long savedFieldValue = savedFields[i + 1].set(millis, resetFields);\n+            long duration;\n+            try {\n+                DurationField savedFieldDuration = savedField.iField.getDurationField();\n+                duration = savedFieldDuration.convertPeriodType(\n+                        savedFields[i + 1].iField.getDurationField().getType().getPeriodType(),\n+                        savedField.iField.getDurationField().getUnitMillis());\n+            } catch (UnsupportedOperationException ex) {\n+                duration = 1;\n+            }\n+            long minValue = savedFields[i + 1].iField.getDurationField().getMinimumValue();\n+            long maxValue = savedFields[i + 1].iField.getDurationField().getMaximumValue();\n+            long value = ((savedFieldValue - minValue) / duration) * duration + minValue;\n+            for (int j = i; j < count; j++) {\n+                savedField = savedFields[j];\n+                if (savedField.iField == savedFields[i + 1].iField) {\n+                    savedField.set(value, resetFields);\n+                }\n+            }\n+            millis = iChrono.set(savedFields[i].getField(), millis, savedFields[i].getDifference());\n+            iSavedFieldsShared = false;\n+            iSavedFieldsCount = i;\n+            iSavedFields = Arrays.copyOf(savedFields, i);\n+            break;\n+        }\n+    }\n+    iSavedFieldsShared = false;\n+    iSavedFieldsCount = count;\n+    iSavedFields = Arrays.copyOf(savedFields, count);\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\\\"', e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}