{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    double vx1 = v1.getX();\n    double vy1 = v1.getY();\n    double vz1 = v1.getZ();\n    double ax1 = FastMath.abs(vx1);\n    double ay1 = FastMath.abs(vy1);\n    double az1 = FastMath.abs(vz1);\n    double max1 = FastMath.max(ay1, az1);\n    double norm1 = FastMath.sqrt(ax1 * ax1 + max1 * (ay1 + az1 - max1));\n    vx1 /= norm1;\n    vy1 /= norm1;\n    vz1 /= norm1;\n\n    double vx2 = v2.getX();\n    double vy2 = v2.getY();\n    double vz2 = v2.getZ();\n    double ax2 = FastMath.abs(vx2);\n    double ay2 = FastMath.abs(vy2);\n    double az2 = FastMath.abs(vz2);\n    double max2 = FastMath.max(ay2, az2);\n    double norm2 = FastMath.sqrt(ax2 * ax2 + max2 * (ay2 + az2 - max2));\n    vx2 /= norm2;\n    vy2 /= norm2;\n    vz2 /= norm2;\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    double dot21 = vx2 * vx1 + vy2 * vy1 + vz2 * vz1;\n    double mu = FastMath.min(FastMath.max(dot21, -1.0), 1.0);\n    double rho = FastMath.asin(mu);\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    double ax3 = vy2 * vz1 - vz2 * vy1;\n    double ay3 = vz2 * vx1 - vx2 * vz1;\n    double az3 = vx2 * vy1 - vy2 * vx1;\n\n    double cosRho = FastMath.cos(rho);\n    double sinRho = FastMath.sin(rho);\n\n    double resX = cosRho * vx1 + sinRho * ax3;\n    double resY = cosRho * vy1 + sinRho * ay3;\n    double resZ = cosRho * vz1 + sinRho * az3;\n\n    // normalize the result\n    double ax = FastMath.abs(resX);\n    double ay = FastMath.abs(resY);\n    double az = FastMath.abs(resZ);\n    double max = FastMath.max(ay, az);\n    double norm = FastMath.sqrt(ax * ax + max * (ay + az - max));\n    \n    return new Vector3D(resX / norm, resY / norm, resZ / norm);\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..b99b15b21 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,67 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    double vx1 = v1.getX();\n+    double vy1 = v1.getY();\n+    double vz1 = v1.getZ();\n+    double ax1 = FastMath.abs(vx1);\n+    double ay1 = FastMath.abs(vy1);\n+    double az1 = FastMath.abs(vz1);\n+    double max1 = FastMath.max(ay1, az1);\n+    double norm1 = FastMath.sqrt(ax1 * ax1 + max1 * (ay1 + az1 - max1));\n+    vx1 /= norm1;\n+    vy1 /= norm1;\n+    vz1 /= norm1;\n+\n+    double vx2 = v2.getX();\n+    double vy2 = v2.getY();\n+    double vz2 = v2.getZ();\n+    double ax2 = FastMath.abs(vx2);\n+    double ay2 = FastMath.abs(vy2);\n+    double az2 = FastMath.abs(vz2);\n+    double max2 = FastMath.max(ay2, az2);\n+    double norm2 = FastMath.sqrt(ax2 * ax2 + max2 * (ay2 + az2 - max2));\n+    vx2 /= norm2;\n+    vy2 /= norm2;\n+    vz2 /= norm2;\n+\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    double dot21 = vx2 * vx1 + vy2 * vy1 + vz2 * vz1;\n+    double mu = FastMath.min(FastMath.max(dot21, -1.0), 1.0);\n+    double rho = FastMath.asin(mu);\n+\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    double ax3 = vy2 * vz1 - vz2 * vy1;\n+    double ay3 = vz2 * vx1 - vx2 * vz1;\n+    double az3 = vx2 * vy1 - vy2 * vx1;\n+\n+    double cosRho = FastMath.cos(rho);\n+    double sinRho = FastMath.sin(rho);\n+\n+    double resX = cosRho * vx1 + sinRho * ax3;\n+    double resY = cosRho * vy1 + sinRho * ay3;\n+    double resZ = cosRho * vz1 + sinRho * az3;\n+\n+    // normalize the result\n+    double ax = FastMath.abs(resX);\n+    double ay = FastMath.abs(resY);\n+    double az = FastMath.abs(resZ);\n+    double max = FastMath.max(ay, az);\n+    double norm = FastMath.sqrt(ax * ax + max * (ay + az - max));\n+    \n+    return new Vector3D(resX / norm, resY / norm, resZ / norm);\n \n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}