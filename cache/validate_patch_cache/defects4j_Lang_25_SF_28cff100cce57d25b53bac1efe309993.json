{
    "patch": "public String transform(final String input) {\n    final StringBuilder buf = new StringBuilder(input.length());\n    final int len = input.length();\n    for (int i = 0; i < len; i++) {\n        final char c = input.charAt(i);\n        switch (c) {\n            case '&':\n                buf.append(\"&amp;\");\n                break;\n            case '<':\n                buf.append(\"&lt;\");\n                break;\n            case '>':\n                buf.append(\"&gt;\");\n                break;\n            case '\\\"':\n                buf.append(\"&quot;\");\n                break;\n            case '\\'':\n                buf.append(\"&#39;\");\n                break;\n            case '\\\\':\n                buf.append(\"&#92;\");\n                break;\n            case '/':\n                buf.append(\"&#47;\");\n                break;\n            default:\n                if (isValidPrintableChar(c)) {\n                    buf.append(c);\n                } else {\n                    buf.append(\"&#\");\n                    buf.append(Integer.toString(c));\n                    buf.append(';');\n                }\n        }\n    }\n    return buf.toString();\n}\n\nprivate boolean isValidPrintableChar(final char c) {\n    return c >= 32 && c <= 126;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..abef92dd 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,49 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public String transform(final String input) {\n+    final StringBuilder buf = new StringBuilder(input.length());\n+    final int len = input.length();\n+    for (int i = 0; i < len; i++) {\n+        final char c = input.charAt(i);\n+        switch (c) {\n+            case '&':\n+                buf.append(\"&amp;\");\n+                break;\n+            case '<':\n+                buf.append(\"&lt;\");\n+                break;\n+            case '>':\n+                buf.append(\"&gt;\");\n+                break;\n+            case '\\\"':\n+                buf.append(\"&quot;\");\n+                break;\n+            case '\\'':\n+                buf.append(\"&#39;\");\n+                break;\n+            case '\\\\':\n+                buf.append(\"&#92;\");\n+                break;\n+            case '/':\n+                buf.append(\"&#47;\");\n+                break;\n+            default:\n+                if (isValidPrintableChar(c)) {\n+                    buf.append(c);\n+                } else {\n+                    buf.append(\"&#\");\n+                    buf.append(Integer.toString(c));\n+                    buf.append(';');\n+                }\n+        }\n+    }\n+    return buf.toString();\n+}\n+\n+private boolean isValidPrintableChar(final char c) {\n+    return c >= 32 && c <= 126;\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}