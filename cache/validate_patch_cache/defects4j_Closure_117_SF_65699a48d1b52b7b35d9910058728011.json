{
    "patch": "String getReadableJSTypeName(Node n, boolean dereference) {\n    // The best type name is the actual type name.\n    JSType type = getJSType(n);\n    if (dereference) {\n        ObjectType dereferenced = type.dereference();\n        if (dereferenced != null) {\n            type = dereferenced;\n        }\n    }\n\n    // Check if the node is a GETPROP\n    if (n.isGetProp()) {\n        ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n        if (objectType != null) {\n            String propName = n.getLastChild().getString();\n            // If the parent object is an interface\n            if (objectType.getConstructor() != null &&\n                    objectType.getConstructor().isInterface()) {\n                objectType = FunctionType.getTopDefiningInterface(\n                        objectType, propName);\n            } else {\n                // If the parent object is a class or object\n                while (objectType != null && !objectType.hasProperty(propName)) {\n                    objectType = objectType.getImplicitPrototype();\n                }\n            }\n\n            // Don't show complex function names or anonymous types.\n            // Instead, try to get a human-readable type name.\n            if (objectType != null &&\n                    (objectType.getConstructor() != null ||\n                            objectType.isFunctionPrototypeType())) {\n                return objectType.toString() + \".\" + propName;\n            }\n        }\n    }\n\n    // If the type is a function or an object with a constructor\n    if (type.isFunctionPrototypeType() ||\n            (type.toObjectType() != null &&\n                    type.toObjectType().getConstructor() != null)) {\n        return type.toString();\n    }\n\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n        return qualifiedName;\n    }\n    // If the type is a function\n    else if (type.isFunctionType()) {\n        return \"function\";\n    } else {\n        return type.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..1fe8a6eb 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -721,60 +721,61 @@ class TypeValidator {\n    * @param dereference If true, the type of the node will be dereferenced\n    *     to an Object type, if possible.\n    */\n-  String getReadableJSTypeName(Node n, boolean dereference) {\n-\n+String getReadableJSTypeName(Node n, boolean dereference) {\n     // The best type name is the actual type name.\n-\n-    // If we're analyzing a GETPROP, the property may be inherited by the\n-    // prototype chain. So climb the prototype chain and find out where\n-    // the property was originally defined.\n-    if (n.isGetProp()) {\n-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n-      if (objectType != null) {\n-        String propName = n.getLastChild().getString();\n-        if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n-          objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n-        } else {\n-          // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n-          }\n+    JSType type = getJSType(n);\n+    if (dereference) {\n+        ObjectType dereferenced = type.dereference();\n+        if (dereferenced != null) {\n+            type = dereferenced;\n         }\n+    }\n \n-        // Don't show complex function names or anonymous types.\n-        // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n+    // Check if the node is a GETPROP\n+    if (n.isGetProp()) {\n+        ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n+        if (objectType != null) {\n+            String propName = n.getLastChild().getString();\n+            // If the parent object is an interface\n+            if (objectType.getConstructor() != null &&\n+                    objectType.getConstructor().isInterface()) {\n+                objectType = FunctionType.getTopDefiningInterface(\n+                        objectType, propName);\n+            } else {\n+                // If the parent object is a class or object\n+                while (objectType != null && !objectType.hasProperty(propName)) {\n+                    objectType = objectType.getImplicitPrototype();\n+                }\n+            }\n+\n+            // Don't show complex function names or anonymous types.\n+            // Instead, try to get a human-readable type name.\n+            if (objectType != null &&\n+                    (objectType.getConstructor() != null ||\n+                            objectType.isFunctionPrototypeType())) {\n+                return objectType.toString() + \".\" + propName;\n+            }\n         }\n-      }\n     }\n \n-    JSType type = getJSType(n);\n-    if (dereference) {\n-      ObjectType dereferenced = type.dereference();\n-      if (dereferenced != null) {\n-        type = dereferenced;\n-      }\n-    }\n+    // If the type is a function or an object with a constructor\n     if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n-      return type.toString();\n+            (type.toObjectType() != null &&\n+                    type.toObjectType().getConstructor() != null)) {\n+        return type.toString();\n     }\n+\n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n-      return qualifiedName;\n-    } else if (type.isFunctionType()) {\n-      // Don't show complex function names.\n-      return \"function\";\n+        return qualifiedName;\n+    }\n+    // If the type is a function\n+    else if (type.isFunctionType()) {\n+        return \"function\";\n     } else {\n-      return type.toString();\n+        return type.toString();\n     }\n-  }\n+}\n \n   /**\n    * This method gets the JSType from the Node argument and verifies that it is",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...tual parameter 1 of [Window.prototype].alert does not matc...> but was:<...tual parameter 1 of [global this].alert does not matc...>",
    "test_result": "FAIL"
}