{
    "patch": "        } else if (actualTypeArgument instanceof TypeVariable && contextualActualTypeParameters.containsKey(actualTypeArgument)) {\n            Type resolvedActualTypeArgument = this.contextualActualTypeParameters.get(actualTypeArgument);\n            if (resolvedActualTypeArgument instanceof TypeVariable && resolvedActualTypeArgument.equals(typeParameter)) {\n                // typeParameter refers back to this type variable\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            } else {\n                // resolved type variable with known context\n                contextualActualTypeParameters.put(typeParameter, resolvedActualTypeArgument);\n            }\n        } else {\n            // unknown type variable\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..d7b30ae12 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,18 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+        } else if (actualTypeArgument instanceof TypeVariable && contextualActualTypeParameters.containsKey(actualTypeArgument)) {\n+            Type resolvedActualTypeArgument = this.contextualActualTypeParameters.get(actualTypeArgument);\n+            if (resolvedActualTypeArgument instanceof TypeVariable && resolvedActualTypeArgument.equals(typeParameter)) {\n+                // typeParameter refers back to this type variable\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            } else {\n+                // resolved type variable with known context\n+                contextualActualTypeParameters.put(typeParameter, resolvedActualTypeArgument);\n+            }\n+        } else {\n+            // unknown type variable\n+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}