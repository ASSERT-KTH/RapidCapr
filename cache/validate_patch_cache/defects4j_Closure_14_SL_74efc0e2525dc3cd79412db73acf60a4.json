{
    "patch": "// This code adds a default case to handle the switch properly.\n// First we add a NODE_BLOCK around the switch case body if one was not present\n// Second we add default case at the end of the cases.\nif (defaultCase == null) {\n  defaultCase = NodeUtil.getEnclosingStatement(switchNode);\n  Node defaultBlock = IR.block().srcref(defaultCase);\n  Node lastCaseChild = getLastNonJSDocChild(switchNode.getLastChild());\n  switchNode.addChildAfter(defaultBlock, lastCaseChild);\n  defaultBlock.addChild(lastCaseChild.detach());\n  defaultCase = IR.defaultCase().srcref(defaultCase).setFirstChild(IR.block().srcref(defaultCase));\n  defaultBlock.getFirstChild().addChildToFront(defaultCase);\n}\nstream.enqueue(new NodeAndControlFlow(switchNode.getLastChild(), controlFlow));\n",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..516f19d7 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,20 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+// This code adds a default case to handle the switch properly.\n+// First we add a NODE_BLOCK around the switch case body if one was not present\n+// Second we add default case at the end of the cases.\n+if (defaultCase == null) {\n+  defaultCase = NodeUtil.getEnclosingStatement(switchNode);\n+  Node defaultBlock = IR.block().srcref(defaultCase);\n+  Node lastCaseChild = getLastNonJSDocChild(switchNode.getLastChild());\n+  switchNode.addChildAfter(defaultBlock, lastCaseChild);\n+  defaultBlock.addChild(lastCaseChild.detach());\n+  defaultCase = IR.defaultCase().srcref(defaultCase).setFirstChild(IR.block().srcref(defaultCase));\n+  defaultBlock.getFirstChild().addChildToFront(defaultCase);\n+}\n+stream.enqueue(new NodeAndControlFlow(switchNode.getLastChild(), controlFlow));\n+\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}