{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      Node parent = n.getParent();\n      if (!NodeUtil.isGet(parent) && !NodeUtil.isGetElem(parent)) {\n        JSTypeRegistry registry = getTypedScope(t).getRegistry();\n        JSType thisType = functionType.getTypeOfThis();\n        JSType unknownType = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        if (!thisType.equals(unknownType)) {\n          report(t, n, EXPLICIT_THIS, childType.toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..8e194ef6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      Node parent = n.getParent();\n+      if (!NodeUtil.isGet(parent) && !NodeUtil.isGetElem(parent)) {\n+        JSTypeRegistry registry = getTypedScope(t).getRegistry();\n+        JSType thisType = functionType.getTypeOfThis();\n+        JSType unknownType = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+        if (!thisType.equals(unknownType)) {\n+          report(t, n, EXPLICIT_THIS, childType.toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}