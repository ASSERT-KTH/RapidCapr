{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    double lgm = Gamma.lgamma(a);\n    double yp = 1.0 / a;\n    double ap = a;\n    double sum = yp;\n\n    double DELTA = 1.0e-15;\n    while (yp > sum * DELTA) {\n        ap += 1.0;\n        yp *= x / ap;\n        sum += yp;\n    }\n\n    return Math.exp(-x + a * Math.log(x) - lgm) * sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b1c7088c8 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,29 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    double lgm = Gamma.lgamma(a);\n+    double yp = 1.0 / a;\n+    double ap = a;\n+    double sum = yp;\n+\n+    double DELTA = 1.0e-15;\n+    while (yp > sum * DELTA) {\n+        ap += 1.0;\n+        yp *= x / ap;\n+        sum += yp;\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - lgm) * sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}