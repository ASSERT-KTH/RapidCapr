{
    "patch": "    Node currentArg = argList.getFirstChild();\n    while (currentArg != null) {\n      Var var = fnScope.getVar(currentArg.getString());\n      if (!referenced.contains(var)) {\n        NodeUtil.removeChild(currentArg);\n        compiler.reportCodeChange();\n        currentArg = argList.getFirstChild();\n      } else {\n        currentArg = currentArg.getNext();\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..530d6c3d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,16 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node currentArg = argList.getFirstChild();\n+    while (currentArg != null) {\n+      Var var = fnScope.getVar(currentArg.getString());\n+      if (!referenced.contains(var)) {\n+        NodeUtil.removeChild(currentArg);\n+        compiler.reportCodeChange();\n+        currentArg = argList.getFirstChild();\n+      } else {\n+        currentArg = currentArg.getNext();\n+      }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}