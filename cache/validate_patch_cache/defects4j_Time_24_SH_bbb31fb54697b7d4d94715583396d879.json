{
    "patch": "            // try to find a matching rule\n            for (int i = 0; i < e.getIllegalFieldValueSet().size(); i++) {\n                IllegalFieldValue illegalFieldValue = e.getIllegalFieldValueSet().get(i);\n                if (illegalFieldValue.getFieldType() instanceof DateTimeFieldType) {\n                    DateTimeFieldType fieldType = (DateTimeFieldType) illegalFieldValue.getFieldType();\n                    if (fieldType != null) {\n                        DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder().append(fieldType, fieldType.getRangeDurationType());\n                        Rule[] rules = fieldType.getDurationType().getField(iChrono).getDurationField().getRangeDurationType().getRules();\n                        int len = rules.length;\n                        boolean unknown = true;\n                        for (int j = 0; j < len; j++) {\n                            Rule rule = rules[j];\n                            String ruleName = rule.getName();\n                            if (ruleName.equals(illegalFieldValue.getIllegalValueAsString())) {\n                                saveField(fieldType, rule.getValue());\n                                unknown = false;\n                                break;\n                            }\n                        }\n                        if (unknown && fieldType.getName().equals(\"weekyear\")) {\n                            int weekyear = illegalFieldValue.getIllegalValue() - 1;\n                            saveField(fieldType, weekyear);\n                            getField(DateTimeFieldType.year()).set(iDefaultYear + 1);\n                        } else if (unknown && fieldType.getName().equals(\"year\")) {\n                            DurationField field = fieldType.getField(iChrono);\n                            int year = field.add(iDefaultYear, illegalFieldValue.getIllegalIntValue());\n                            saveField(fieldType, year);\n                        } else {\n                            throw e;\n                        }\n                        i--;\n                        count--;\n                        millis = computeMillis(resetFields, text);\n                    } else {\n                        throw e;\n                    }\n                } else {\n                    throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..06dbd5e6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,44 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            // try to find a matching rule\n+            for (int i = 0; i < e.getIllegalFieldValueSet().size(); i++) {\n+                IllegalFieldValue illegalFieldValue = e.getIllegalFieldValueSet().get(i);\n+                if (illegalFieldValue.getFieldType() instanceof DateTimeFieldType) {\n+                    DateTimeFieldType fieldType = (DateTimeFieldType) illegalFieldValue.getFieldType();\n+                    if (fieldType != null) {\n+                        DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder().append(fieldType, fieldType.getRangeDurationType());\n+                        Rule[] rules = fieldType.getDurationType().getField(iChrono).getDurationField().getRangeDurationType().getRules();\n+                        int len = rules.length;\n+                        boolean unknown = true;\n+                        for (int j = 0; j < len; j++) {\n+                            Rule rule = rules[j];\n+                            String ruleName = rule.getName();\n+                            if (ruleName.equals(illegalFieldValue.getIllegalValueAsString())) {\n+                                saveField(fieldType, rule.getValue());\n+                                unknown = false;\n+                                break;\n+                            }\n+                        }\n+                        if (unknown && fieldType.getName().equals(\"weekyear\")) {\n+                            int weekyear = illegalFieldValue.getIllegalValue() - 1;\n+                            saveField(fieldType, weekyear);\n+                            getField(DateTimeFieldType.year()).set(iDefaultYear + 1);\n+                        } else if (unknown && fieldType.getName().equals(\"year\")) {\n+                            DurationField field = fieldType.getField(iChrono);\n+                            int year = field.add(iDefaultYear, illegalFieldValue.getIllegalIntValue());\n+                            saveField(fieldType, year);\n+                        } else {\n+                            throw e;\n+                        }\n+                        i--;\n+                        count--;\n+                        millis = computeMillis(resetFields, text);\n+                    } else {\n+                        throw e;\n+                    }\n+                } else {\n+                    throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}