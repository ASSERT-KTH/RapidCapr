{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.hasProperty(prop)) {\n            JSType inferredType = propType.isUnknownType() ? getNativeType(VOID_TYPE) : propType;\n            objType.defineInferredProperty(prop, inferredType, null);\n          }\n        }\n      }\n      compiler.report(JSError.make(n, REACT_COMMON_USAGE));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..4d628dcd 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1123,16 +1123,13 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          if (!objType.hasProperty(prop)) {\n+            JSType inferredType = propType.isUnknownType() ? getNativeType(VOID_TYPE) : propType;\n+            objType.defineInferredProperty(prop, inferredType, null);\n           }\n         }\n       }\n+      compiler.report(JSError.make(n, REACT_COMMON_USAGE));\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}