{
    "patch": "     case TRUE:\n        if (this.isUnknown() || that.isUnknown()) {\n          return new TypePair(this, that);\n        } else if (this.isNull() || that.isNull()) {\n          return new TypePair(this.removeNull(), this.isSubtypeOf(that) ? that : that.removeNull());\n        } else {\n          return new TypePair(this, this.isSubtypeOf(that) ? that : null);\n        }\n\n      case FALSE:\n      case UNKNOWN:\n        return new TypePair(this, that);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..d3c9869a 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,18 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+     case TRUE:\n+        if (this.isUnknown() || that.isUnknown()) {\n+          return new TypePair(this, that);\n+        } else if (this.isNull() || that.isNull()) {\n+          return new TypePair(this.removeNull(), this.isSubtypeOf(that) ? that : that.removeNull());\n+        } else {\n+          return new TypePair(this, this.isSubtypeOf(that) ? that : null);\n+        }\n+\n+      case FALSE:\n+      case UNKNOWN:\n+        return new TypePair(this, that);\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}