{
    "patch": "    Node currentArg = argList.getFirstChild();\n    while (currentArg != null) {\n      Var var = fnScope.getVar(currentArg.getString());\n      Node nextArg = currentArg.getNext();\n      if (!referenced.contains(var)) {\n        argList.removeChild(currentArg);\n        compiler.reportCodeChange();\n      }\n      currentArg = nextArg;\n    }\n\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d1b98097 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node currentArg = argList.getFirstChild();\n+    while (currentArg != null) {\n+      Var var = fnScope.getVar(currentArg.getString());\n+      Node nextArg = currentArg.getNext();\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(currentArg);\n+        compiler.reportCodeChange();\n+      }\n+      currentArg = nextArg;\n+    }\n+\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}