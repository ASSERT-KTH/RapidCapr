{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    if (parent != null && parent.isVar() && parent.getParent().isScript()) {\n      Node init = n.getFirstChild();\n      if (init != null && init.isQualifiedName()) {\n        String name = init.getQualifiedName();\n        Var aliasVar = scope.getVar(name);\n        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n          aliases.put(name, aliasVar);\n          transformation.addAlias(name, qualifiedName);\n        } else {\n          aliases.remove(name);\n          if (parent.getParent().hasChildren() && parent.getNext() != null \n              && parent.getNext().getFirstChild().matchesQualifiedName(name)) {\n            // A local variable declared immediately after an alias with\n            // the same name locally shadows the alias.\n            continue;\n          }\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n          return;\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..e2719a59 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,35 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    if (parent != null && parent.isVar() && parent.getParent().isScript()) {\n+      Node init = n.getFirstChild();\n+      if (init != null && init.isQualifiedName()) {\n+        String name = init.getQualifiedName();\n+        Var aliasVar = scope.getVar(name);\n+        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n           aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n         } else {\n-          // TODO(robbyw): Support using locals for private variables.\n+          aliases.remove(name);\n+          if (parent.getParent().hasChildren() && parent.getNext() != null \n+              && parent.getNext().getFirstChild().matchesQualifiedName(name)) {\n+            // A local variable declared immediately after an alias with\n+            // the same name locally shadows the alias.\n+            continue;\n+          }\n           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+          return;\n         }\n       }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}