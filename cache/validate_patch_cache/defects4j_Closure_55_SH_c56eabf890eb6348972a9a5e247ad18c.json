{
    "patch": "    if (n.getType() == Token.CALL) {\n      Node callee = n.getFirstChild();\n      String calleeName = getNodeName(callee);\n      if (calleeName == null) {\n        return false;\n      }\n      return isAllowedReduceableFunction(calleeName);\n    }\n    return NodeUtil.isFunctionExpression(n) && NodeUtil.getFunctionName(n) != null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..9053ac75 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,15 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (n.getType() == Token.CALL) {\n+      Node callee = n.getFirstChild();\n+      String calleeName = getNodeName(callee);\n+      if (calleeName == null) {\n+        return false;\n+      }\n+      return isAllowedReduceableFunction(calleeName);\n+    }\n+    return NodeUtil.isFunctionExpression(n) && NodeUtil.getFunctionName(n) != null;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}