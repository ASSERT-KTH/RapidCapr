{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis() + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR)\n            + (getDays() * DateTimeConstants.MILLIS_PER_DAY)\n            + (getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n    \n    int years = 0;\n    int months = 0;\n    int weeks = 0;\n    int days = 0;\n    long remainingMillis = millis;\n    \n    // Calculate the number of years in the period\n    int tmpYears = getYears();\n    if (tmpYears != 0) {\n        years = (int) (remainingMillis / (DateTimeConstants.MILLIS_PER_DAY * 365));\n        if (tmpYears < 0 && years > 0) {\n            years++;\n        }\n        else if (tmpYears > 0 && years < 0) {\n            years--;\n        }\n        remainingMillis -= years * (DateTimeConstants.MILLIS_PER_DAY * 365);\n        years += tmpYears;\n    }\n    else if (remainingMillis >= DateTimeConstants.MILLIS_PER_DAY * 365) {\n        years = (int) (remainingMillis / (DateTimeConstants.MILLIS_PER_DAY * 365));\n        remainingMillis -= years * (DateTimeConstants.MILLIS_PER_DAY * 365);\n    }\n    \n    // Calculate the number of months in the period\n    int tmpMonths = getMonths();\n    if (tmpMonths != 0) {\n        int yearMonthCount = (monthsInYear(years) + tmpMonths) * (years < 0 ? -1 : 1);\n        months = (int) (remainingMillis / (DateTimeConstants.MILLIS_PER_DAY * averageMonthDurationInMillis()));\n        if (yearMonthCount < 0 && months > 0) {\n            months++;\n        }\n        else if (yearMonthCount > 0 && months < 0) {\n            months--;\n        }\n        remainingMillis -= months * (DateTimeConstants.MILLIS_PER_DAY * averageMonthDurationInMillis());\n        months += tmpMonths;\n    }\n    else if (remainingMillis >= DateTimeConstants.MILLIS_PER_DAY * averageMonthDurationInMillis()) {\n        months = (int) (remainingMillis / (DateTimeConstants.MILLIS_PER_DAY * averageMonthDurationInMillis()));\n        remainingMillis -= months * (DateTimeConstants.MILLIS_PER_DAY * averageMonthDurationInMillis());\n    }\n\n    // Calculate the number of weeks in the period\n    int tmpWeeks = getWeeks();\n    if (tmpWeeks != 0) {\n        weeks = (int) (remainingMillis / DateTimeConstants.MILLIS_PER_WEEK);\n        remainingMillis -= weeks * DateTimeConstants.MILLIS_PER_WEEK;\n        weeks += tmpWeeks;\n    }\n    else if (remainingMillis >= DateTimeConstants.MILLIS_PER_WEEK) {\n        weeks = (int) (remainingMillis / DateTimeConstants.MILLIS_PER_WEEK);\n        remainingMillis -= weeks * DateTimeConstants.MILLIS_PER_WEEK;\n    }\n    \n    // Calculate the number of days in the period\n    if (remainingMillis >= DateTimeConstants.MILLIS_PER_DAY) {\n        days = (int) (remainingMillis / DateTimeConstants.MILLIS_PER_DAY);\n        remainingMillis -= days * DateTimeConstants.MILLIS_PER_DAY;\n    }\n    \n    // Create a new Period object with the calculated values\n    Period result = new Period(remainingMillis, type, ISOChronology.getInstanceUTC());\n    result = years == 0 ? result : result.withYears(years);\n    result = months == 0 ? result : result.withMonths(months);\n    result = weeks == 0 ? result : result.withWeeks(weeks);\n    result = days == 0 ? result : result.withDays(days);\n    \n    return result.normalizedStandard(type);\n}\n\n/**\n * Returns the average duration of a month in milliseconds\n */\nprivate long averageMonthDurationInMillis() {\n    // We consider a month to be 30.4375 days\n    return (long) (30.4375 * DateTimeConstants.MILLIS_PER_DAY);\n}\n\n/**\n * Returns the number of months in a year, taking into account leap years\n */\nprivate int monthsInYear(int years) {\n    if (years == 0) {\n        return 12;\n    }\n    else if (years > 0) {\n        return (years * 12) + ((years - 1) / 4) - ((years -1) / 100) + ((years - 1) / 400);\n    }\n    else {\n        return (years * 12) - ((years + 3) / 4) + ((years + 99) / 100) - ((years + 399) / 400);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..e5943416 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,106 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis() + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n+            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n+            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR)\n+            + (getDays() * DateTimeConstants.MILLIS_PER_DAY)\n+            + (getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n+    \n+    int years = 0;\n+    int months = 0;\n+    int weeks = 0;\n+    int days = 0;\n+    long remainingMillis = millis;\n+    \n+    // Calculate the number of years in the period\n+    int tmpYears = getYears();\n+    if (tmpYears != 0) {\n+        years = (int) (remainingMillis / (DateTimeConstants.MILLIS_PER_DAY * 365));\n+        if (tmpYears < 0 && years > 0) {\n+            years++;\n+        }\n+        else if (tmpYears > 0 && years < 0) {\n+            years--;\n+        }\n+        remainingMillis -= years * (DateTimeConstants.MILLIS_PER_DAY * 365);\n+        years += tmpYears;\n+    }\n+    else if (remainingMillis >= DateTimeConstants.MILLIS_PER_DAY * 365) {\n+        years = (int) (remainingMillis / (DateTimeConstants.MILLIS_PER_DAY * 365));\n+        remainingMillis -= years * (DateTimeConstants.MILLIS_PER_DAY * 365);\n+    }\n+    \n+    // Calculate the number of months in the period\n+    int tmpMonths = getMonths();\n+    if (tmpMonths != 0) {\n+        int yearMonthCount = (monthsInYear(years) + tmpMonths) * (years < 0 ? -1 : 1);\n+        months = (int) (remainingMillis / (DateTimeConstants.MILLIS_PER_DAY * averageMonthDurationInMillis()));\n+        if (yearMonthCount < 0 && months > 0) {\n+            months++;\n+        }\n+        else if (yearMonthCount > 0 && months < 0) {\n+            months--;\n         }\n-        return result;\n+        remainingMillis -= months * (DateTimeConstants.MILLIS_PER_DAY * averageMonthDurationInMillis());\n+        months += tmpMonths;\n+    }\n+    else if (remainingMillis >= DateTimeConstants.MILLIS_PER_DAY * averageMonthDurationInMillis()) {\n+        months = (int) (remainingMillis / (DateTimeConstants.MILLIS_PER_DAY * averageMonthDurationInMillis()));\n+        remainingMillis -= months * (DateTimeConstants.MILLIS_PER_DAY * averageMonthDurationInMillis());\n+    }\n+\n+    // Calculate the number of weeks in the period\n+    int tmpWeeks = getWeeks();\n+    if (tmpWeeks != 0) {\n+        weeks = (int) (remainingMillis / DateTimeConstants.MILLIS_PER_WEEK);\n+        remainingMillis -= weeks * DateTimeConstants.MILLIS_PER_WEEK;\n+        weeks += tmpWeeks;\n+    }\n+    else if (remainingMillis >= DateTimeConstants.MILLIS_PER_WEEK) {\n+        weeks = (int) (remainingMillis / DateTimeConstants.MILLIS_PER_WEEK);\n+        remainingMillis -= weeks * DateTimeConstants.MILLIS_PER_WEEK;\n+    }\n+    \n+    // Calculate the number of days in the period\n+    if (remainingMillis >= DateTimeConstants.MILLIS_PER_DAY) {\n+        days = (int) (remainingMillis / DateTimeConstants.MILLIS_PER_DAY);\n+        remainingMillis -= days * DateTimeConstants.MILLIS_PER_DAY;\n+    }\n+    \n+    // Create a new Period object with the calculated values\n+    Period result = new Period(remainingMillis, type, ISOChronology.getInstanceUTC());\n+    result = years == 0 ? result : result.withYears(years);\n+    result = months == 0 ? result : result.withMonths(months);\n+    result = weeks == 0 ? result : result.withWeeks(weeks);\n+    result = days == 0 ? result : result.withDays(days);\n+    \n+    return result.normalizedStandard(type);\n+}\n+\n+/**\n+ * Returns the average duration of a month in milliseconds\n+ */\n+private long averageMonthDurationInMillis() {\n+    // We consider a month to be 30.4375 days\n+    return (long) (30.4375 * DateTimeConstants.MILLIS_PER_DAY);\n+}\n+\n+/**\n+ * Returns the number of months in a year, taking into account leap years\n+ */\n+private int monthsInYear(int years) {\n+    if (years == 0) {\n+        return 12;\n+    }\n+    else if (years > 0) {\n+        return (years * 12) + ((years - 1) / 4) - ((years -1) / 100) + ((years - 1) / 400);\n     }\n+    else {\n+        return (years * 12) - ((years + 3) / 4) + ((years + 99) / 100) - ((years + 399) / 400);\n+    }\n+}\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}