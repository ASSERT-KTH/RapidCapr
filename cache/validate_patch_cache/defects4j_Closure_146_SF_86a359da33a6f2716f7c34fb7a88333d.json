{
    "patch": "  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        return new TypePair(null, null);\n\n      case FALSE:\n      case UNKNOWN:\n        return new TypePair(this, that).canonicalize();\n\n      default:\n        throw new IllegalStateException();\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..4f624fad 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -707,11 +707,11 @@ public abstract class JSType implements Serializable {\n \n       case FALSE:\n       case UNKNOWN:\n-        return new TypePair(this, that);\n-    }\n+        return new TypePair(this, that).canonicalize();\n \n-    // switch case is exhaustive\n-    throw new IllegalStateException();\n+      default:\n+        throw new IllegalStateException();\n+    }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}