{
    "patch": "public Dfp multiply(final int x) {\n    if (isNaN()) {\n        return newInstance(this);\n    }\n    if (x == 0) {\n        return getZero();\n    }\n    if (x == 1) {\n        return newInstance(this);\n    }\n    final DfpField field = getField();\n    final int xSign = (x < 0) ? -1 : 1;\n    final int q = intValue();\n    final int r = getRoundedMultiplyAddSubtract(xSign * x, xSign * q, -xSign * q * x);\n    return newInstance(field, r);\n}\n\nprivate int getRoundedMultiplyAddSubtract(int a, int b1, int b2) {\n    if (a > 0) {\n        // Asymmetric rounding\n        final int xl = (int) (0x00000000FFFFFFFFl & a) * (int) (0x00000000FFFFFFFFl & b1);\n        final int xh = (int) ((long) a >>> 32) * (int) ((long) b1 >>> 32);\n        final int xs = (int) ((long) a >>> 63) << 1 | (int) ((long) b1 >>> 63);\n        final long s = ((long) xs ^ 1) - 1;\n        final long zl = xl - ((s & xl) << 1) + ((s & 1) & xl);\n        final long sxl_s = (xl >>> 63) & xs ^ xs;\n        final long sh_sxl = (sxl_s & xh) << 1;\n        final long sxl_sxlh = sxl_s & xl | sxl_s & sh_sxl;\n        final long z = (sxl_s & zl) + sxl_sxlh + sh_sxl + (s & ((xh | zl | sxl_sxlh) >>> 62));\n        return (int) (z ^ xs) | ((a + b1 + b2) & -((z >>> 31) & 1));\n    } else {\n        // Symmetric rounding\n        final int al = (a == Integer.MIN_VALUE) ? 1 << 31 : -a;\n        final int bl = (b1 == Integer.MIN_VALUE) ? 1 << 31 : -b1;\n        final long p = (long) al * bl;\n        final int ph = (int) (p >>> 32);\n        final int t = al * (int) (0x00000000FFFFFFFFl & b2) - ((int) ((p << 31) >>> 31) & (b2 >>> 31));\n        int r = ph + t;\n        if ((al ^ bl) < 0 && (r ^ ph) < 0) {\n            r = (r & (1 << 31)) | (r >>> 1);\n        }\n        return r ^ ((a + b1 + b2 < 0) ? -1 : 0);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..829c78398 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1599,9 +1599,50 @@ public class Dfp implements FieldElement<Dfp> {\n      * @param x multiplicand\n      * @return product of this and x\n      */\n-    public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+public Dfp multiply(final int x) {\n+    if (isNaN()) {\n+        return newInstance(this);\n     }\n+    if (x == 0) {\n+        return getZero();\n+    }\n+    if (x == 1) {\n+        return newInstance(this);\n+    }\n+    final DfpField field = getField();\n+    final int xSign = (x < 0) ? -1 : 1;\n+    final int q = intValue();\n+    final int r = getRoundedMultiplyAddSubtract(xSign * x, xSign * q, -xSign * q * x);\n+    return newInstance(field, r);\n+}\n+\n+private int getRoundedMultiplyAddSubtract(int a, int b1, int b2) {\n+    if (a > 0) {\n+        // Asymmetric rounding\n+        final int xl = (int) (0x00000000FFFFFFFFl & a) * (int) (0x00000000FFFFFFFFl & b1);\n+        final int xh = (int) ((long) a >>> 32) * (int) ((long) b1 >>> 32);\n+        final int xs = (int) ((long) a >>> 63) << 1 | (int) ((long) b1 >>> 63);\n+        final long s = ((long) xs ^ 1) - 1;\n+        final long zl = xl - ((s & xl) << 1) + ((s & 1) & xl);\n+        final long sxl_s = (xl >>> 63) & xs ^ xs;\n+        final long sh_sxl = (sxl_s & xh) << 1;\n+        final long sxl_sxlh = sxl_s & xl | sxl_s & sh_sxl;\n+        final long z = (sxl_s & zl) + sxl_sxlh + sh_sxl + (s & ((xh | zl | sxl_sxlh) >>> 62));\n+        return (int) (z ^ xs) | ((a + b1 + b2) & -((z >>> 31) & 1));\n+    } else {\n+        // Symmetric rounding\n+        final int al = (a == Integer.MIN_VALUE) ? 1 << 31 : -a;\n+        final int bl = (b1 == Integer.MIN_VALUE) ? 1 << 31 : -b1;\n+        final long p = (long) al * bl;\n+        final int ph = (int) (p >>> 32);\n+        final int t = al * (int) (0x00000000FFFFFFFFl & b2) - ((int) ((p << 31) >>> 31) & (b2 >>> 31));\n+        int r = ph + t;\n+        if ((al ^ bl) < 0 && (r ^ ph) < 0) {\n+            r = (r & (1 << 31)) | (r >>> 1);\n+        }\n+        return r ^ ((a + b1 + b2 < 0) ? -1 : 0);\n+    }\n+}\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n      * There are speed advantages in this special case.",
    "result_reason": "error: no suitable method found for newInstance(DfpField,int)",
    "test_result": "ERROR"
}