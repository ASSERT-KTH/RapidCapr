{
    "patch": "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    LocalTime time1 = LocalTime.of(cal1.get(Calendar.HOUR_OF_DAY), cal1.get(Calendar.MINUTE), cal1.get(Calendar.SECOND), cal1.get(Calendar.MILLISECOND));\n    LocalTime time2 = LocalTime.of(cal2.get(Calendar.HOUR_OF_DAY), cal2.get(Calendar.MINUTE), cal2.get(Calendar.SECOND), cal2.get(Calendar.MILLISECOND));\n    return time1.equals(time2);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/DateUtils.java b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\nindex 9a24c00f..a16ea300 100644\n--- a/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n@@ -262,7 +262,14 @@ public class DateUtils {\n         return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n+public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n+    if (cal1 == null || cal2 == null) {\n+        throw new IllegalArgumentException(\"The date must not be null\");\n+    }\n+    LocalTime time1 = LocalTime.of(cal1.get(Calendar.HOUR_OF_DAY), cal1.get(Calendar.MINUTE), cal1.get(Calendar.SECOND), cal1.get(Calendar.MILLISECOND));\n+    LocalTime time2 = LocalTime.of(cal2.get(Calendar.HOUR_OF_DAY), cal2.get(Calendar.MINUTE), cal2.get(Calendar.SECOND), cal2.get(Calendar.MILLISECOND));\n+    return time1.equals(time2);\n+}\n                 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}