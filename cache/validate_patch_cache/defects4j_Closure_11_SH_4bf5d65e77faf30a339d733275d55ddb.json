{
    "patch": "    } else if (n.getJSType() != null && parent.isAssign()) {\n      if (n.getBooleanProp(Node.EXPORT_DEFAULT)) {\n        return;\n      }\n      if (n.getBooleanProp(Node.EXPORT)) {\n        return;\n      }\n      checkState(\n          n.isStringLit()\n              || n.isNumber()\n              || n.getJSType().isEnumType()\n              || n.getJSType().isBooleanValueType()\n              || n.getJSType().isFunctionPrototypeType()\n              || n.getJSType().isObject()\n              || n.getJSType().isStructuralInterface(),\n          \"unexpected type for property \", n);\n      if (!getScope().isDeclared(parent.getFirstChild().getQualifiedName(), true)) {\n        warnings.add(JSError.make(parent, IMPLICIT_GLOBAL_DECLARATION, \"\"));\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}