{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.hasProperty(prop)) {\n            objType.defineInferredProperty(prop, propType, null);\n          }\n        }\n      }\n      if (constraintObj.getOwnPropertyCount() > 0 && objType == null) {\n        warnings.add(\n            JSError.make(n, TypeCheck.INEXISTENT_PROPERTY, constraintObj.toString()));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..a60aa79f 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1123,16 +1123,14 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          if (!objType.hasProperty(prop)) {\n+            objType.defineInferredProperty(prop, propType, null);\n           }\n         }\n       }\n+      if (constraintObj.getOwnPropertyCount() > 0 && objType == null) {\n+        warnings.add(\n+            JSError.make(n, TypeCheck.INEXISTENT_PROPERTY, constraintObj.toString()));\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}