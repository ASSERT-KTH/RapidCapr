{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    long instantLocal = instantMillis + zone.getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    bucket.setOffset(iOffsetParsed ? 0 : zone.getOffset(instantMillis));\n    int oldSize = bucket.saveField(DateTimeFieldType.year());\n    int newPos = parser.parseInto(bucket, text, position);\n    int yearValue;\n    if (iPivotYear != null) {\n        yearValue = selectPivotYear(bucket.getPivotYear(), bucket.getOffset());\n    } else {\n        if (bucket.restoreField(DateTimeFieldType.year(), oldSize) != null) {\n            yearValue = bucket.getFieldValue(chrono.year());\n        } else {\n            if (bucket.restoreField(DateTimeFieldType.dayOfYear(), oldSize) == null) {\n                if (bucket.restoreField(DateTimeFieldType.monthOfYear(), oldSize) == null) {\n                    yearValue = defaultYear;\n                } else {\n                    int month = bucket.getFieldValue(chrono.monthOfYear());\n                    yearValue = getYearInfo(chrono).getDefaultYear(month);\n                }\n            } else {\n                long instantMidnight = bucket.computeMillis(false, text) + chrono.millisOfDay().get(instantLocal);\n                instantLocal = zone.getOffset(instantMidnight) + instantMidnight;\n                bucket = new DateTimeParserBucket(\n                        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n                if (iOffsetParsed) {\n                    bucket.setOffset(0);\n                }\n                bucket.restoreField(DateTimeFieldType.year(), oldSize);\n                newPos = parser.parseInto(bucket, text, newPos);\n                yearValue = bucket.getFieldValue(chrono.year());\n            }\n        }\n    }\n    int parsedCenturyOfEra = bucket.getCenturyOfEra();\n    if (parsedCenturyOfEra != null) {\n        if (bucket.getSign(parsedCenturyOfEra) == '-') {\n            yearValue = -yearValue;\n        }\n        int century = parsedCenturyOfEra * 100 + ((yearValue >= 0) ? 0 : 99);\n        yearValue += century - (yearValue + century) / 100 * 100;\n        bucket.setParsedField(DateTimeFieldType.year(), yearValue);\n    }\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed) {\n        chrono = chrono.withUTC();\n    } else if (iZone != null) {\n        chrono = chrono.withZone(iZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..e08e6885 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,70 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+    long instantLocal = instantMillis + zone.getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+    bucket.setOffset(iOffsetParsed ? 0 : zone.getOffset(instantMillis));\n+    int oldSize = bucket.saveField(DateTimeFieldType.year());\n+    int newPos = parser.parseInto(bucket, text, position);\n+    int yearValue;\n+    if (iPivotYear != null) {\n+        yearValue = selectPivotYear(bucket.getPivotYear(), bucket.getOffset());\n+    } else {\n+        if (bucket.restoreField(DateTimeFieldType.year(), oldSize) != null) {\n+            yearValue = bucket.getFieldValue(chrono.year());\n+        } else {\n+            if (bucket.restoreField(DateTimeFieldType.dayOfYear(), oldSize) == null) {\n+                if (bucket.restoreField(DateTimeFieldType.monthOfYear(), oldSize) == null) {\n+                    yearValue = defaultYear;\n+                } else {\n+                    int month = bucket.getFieldValue(chrono.monthOfYear());\n+                    yearValue = getYearInfo(chrono).getDefaultYear(month);\n+                }\n+            } else {\n+                long instantMidnight = bucket.computeMillis(false, text) + chrono.millisOfDay().get(instantLocal);\n+                instantLocal = zone.getOffset(instantMidnight) + instantMidnight;\n+                bucket = new DateTimeParserBucket(\n+                        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                if (iOffsetParsed) {\n+                    bucket.setOffset(0);\n+                }\n+                bucket.restoreField(DateTimeFieldType.year(), oldSize);\n+                newPos = parser.parseInto(bucket, text, newPos);\n+                yearValue = bucket.getFieldValue(chrono.year());\n+            }\n         }\n-        return newPos;\n     }\n+    int parsedCenturyOfEra = bucket.getCenturyOfEra();\n+    if (parsedCenturyOfEra != null) {\n+        if (bucket.getSign(parsedCenturyOfEra) == '-') {\n+            yearValue = -yearValue;\n+        }\n+        int century = parsedCenturyOfEra * 100 + ((yearValue >= 0) ? 0 : 99);\n+        yearValue += century - (yearValue + century) / 100 * 100;\n+        bucket.setParsedField(DateTimeFieldType.year(), yearValue);\n+    }\n+    instant.setMillis(bucket.computeMillis(false, text));\n+    if (iOffsetParsed) {\n+        chrono = chrono.withUTC();\n+    } else if (iZone != null) {\n+        chrono = chrono.withZone(iZone);\n+    } else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+    }\n+    instant.setChronology(chrono);\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}