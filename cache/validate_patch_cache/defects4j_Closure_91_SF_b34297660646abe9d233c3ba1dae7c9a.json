{
    "patch": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n        return false;\n      }\n\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN || pType == Token.COLON)) {\n        return false;\n      }\n\n      if (isFunctionGettingLentToPrototype(parent)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private static boolean isFunctionGettingLentToPrototype(Node functionNode) {\n    Node parent = functionNode.getParent();\n    while (parent != null) {\n      int parentType = parent.getType();\n      if (parentType == Token.SCRIPT || parentType == Token.BLOCK) {\n        break;\n      }\n\n      if (parentType == Token.EXPR_RESULT) {\n        parent = parent.getParent();\n        if (parent == null) {\n          return false;\n        }\n        if (parent.getType() == Token.ASSIGN) {\n          Node lhs = parent.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (isDirectLentToPrototype(lhs)) {\n            return true;\n          }\n          rhs = removeParens(rhs);\n          if (rhs.getType() == Token.CALL && rhs.getFirstChild().getType() == Token.GETPROP) {\n            return isDirectLentToPrototype(rhs.getFirstChild());\n          }\n        }\n      }\n      parent = parent.getParent();\n    }\n\n    return false;\n  }\n\n  private static Node removeParens(Node n) {\n    while (n.getType() == Token.PARENTHESIZED_EXPRESSION) {\n      n = n.getFirstChild();\n    }\n    return n;\n  }\n\n  private static boolean isDirectLentToPrototype(Node n) {\n    if (n.getType() == Token.GETPROP && n.getLastChild().getString().equals(\"prototype\")) {\n      Node objectNode = n.getFirstChild();\n      if (NodeUtil.isGet(objectNode)) {\n        if (objectNode.getType() == Token.GETPROP && objectNode.getLastChild().getString().equals(\"prototype\")) {\n          return true;\n        }\n        objectNode = objectNode.getFirstChild();\n        if (objectNode.getType() == Token.GETPROP && objectNode.getLastChild().getString().equals(\"prototype\")) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..757354b9 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -80,38 +80,20 @@ final class CheckGlobalThis implements Callback {\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n       JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n         return false;\n       }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n       int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+      if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN || pType == Token.COLON)) {\n         return false;\n       }\n \n-      // Don't traverse functions that are getting lent to a prototype.\n+      if (isFunctionGettingLentToPrototype(parent)) {\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n@@ -119,23 +101,16 @@ final class CheckGlobalThis implements Callback {\n       Node rhs = lhs.getNext();\n \n       if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n         if (assignLhsChild == null) {\n           assignLhsChild = lhs;\n         }\n       } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n         if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+          if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n           }\n           Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n+          if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n           }\n         }\n@@ -145,6 +120,61 @@ final class CheckGlobalThis implements Callback {\n     return true;\n   }\n \n+  private static boolean isFunctionGettingLentToPrototype(Node functionNode) {\n+    Node parent = functionNode.getParent();\n+    while (parent != null) {\n+      int parentType = parent.getType();\n+      if (parentType == Token.SCRIPT || parentType == Token.BLOCK) {\n+        break;\n+      }\n+\n+      if (parentType == Token.EXPR_RESULT) {\n+        parent = parent.getParent();\n+        if (parent == null) {\n+          return false;\n+        }\n+        if (parent.getType() == Token.ASSIGN) {\n+          Node lhs = parent.getFirstChild();\n+          Node rhs = lhs.getNext();\n+          if (isDirectLentToPrototype(lhs)) {\n+            return true;\n+          }\n+          rhs = removeParens(rhs);\n+          if (rhs.getType() == Token.CALL && rhs.getFirstChild().getType() == Token.GETPROP) {\n+            return isDirectLentToPrototype(rhs.getFirstChild());\n+          }\n+        }\n+      }\n+      parent = parent.getParent();\n+    }\n+\n+    return false;\n+  }\n+\n+  private static Node removeParens(Node n) {\n+    while (n.getType() == Token.PARENTHESIZED_EXPRESSION) {\n+      n = n.getFirstChild();\n+    }\n+    return n;\n+  }\n+\n+  private static boolean isDirectLentToPrototype(Node n) {\n+    if (n.getType() == Token.GETPROP && n.getLastChild().getString().equals(\"prototype\")) {\n+      Node objectNode = n.getFirstChild();\n+      if (NodeUtil.isGet(objectNode)) {\n+        if (objectNode.getType() == Token.GETPROP && objectNode.getLastChild().getString().equals(\"prototype\")) {\n+          return true;\n+        }\n+        objectNode = objectNode.getFirstChild();\n+        if (objectNode.getType() == Token.GETPROP && objectNode.getLastChild().getString().equals(\"prototype\")) {\n+          return true;\n+        }\n+      }\n+    }\n+\n+    return false;\n+  }\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}