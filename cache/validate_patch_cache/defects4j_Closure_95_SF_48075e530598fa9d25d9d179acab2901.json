{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  if (n.getType() == Token.GETPROP) {\n    String propName = n.getLastChild().getString();\n    if (inferred && !scope.isDeclared(propName, false)) {\n      validator.expectUndeclaredVariable(\n          sourceName, n, parent, null, propName, null);\n      return;\n    }\n    if (!inferred && scope.isGlobal()) {\n      // When at the global scope, we should ensure that the we don't\n      // clobber an existing property on `window` or on the global scope\n      // object.\n      ObjectType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      if (globalThis.hasOwnProperty(propName)) {\n        return;\n      }\n      ObjectType globalObject =\n          typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_GLOBAL);\n      if (globalObject.hasOwnProperty(propName)) {\n        return;\n      }\n      if (!scope.isDeclared(propName, false)) {\n        validator.expectUndeclaredVariable(\n            sourceName, n, parent, null, propName, type);\n        return;\n      }\n    }\n  } else {\n    String varName = n.getString();\n    if (!inferred && scope.isGlobal()) {\n      // When in the global scope, we should ensure that we don't clobber\n      // an existing property on `window` or on the global scope object.\n      ObjectType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      if (globalThis.hasOwnProperty(varName)) {\n        return;\n      }\n      ObjectType globalObject =\n          typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_GLOBAL);\n      if (globalObject.hasOwnProperty(varName)) {\n        return;\n      }\n    }\n    if (!scope.isDeclared(varName, false)) {\n      validator.expectUndeclaredVariable(\n          sourceName, n, parent, null, varName, inferred ? null : type);\n      return;\n    }\n  }\n  if (!inferred) {\n    setDeferredType(n, type);\n  }\n  CompilerInput input = compiler.getInput(sourceName);\n  String name = n.getQualifiedName();\n  scope.declare(name, n, type, input, inferred);\n  if (scope.isGlobal()) {\n    // Check if there already exists a non-shim global with the same name on\n    // either the global object or the window object. This is essentially a\n    // reverse check to the above block. If so, then this var's name is invalid\n    // unless it is being used in a shim of an existing global.\n    ObjectType globalThis =\n        typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n    ObjectType globalObject =\n        typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_GLOBAL);\n    boolean isInGlobalThis = globalThis.hasOwnProperty(name);\n    boolean isInGlobalObject = globalObject.hasOwnProperty(name);\n    if (isInGlobalThis || isInGlobalObject) {\n      PropDeclaration decl =\n          new PropDeclaration(n, parent, name, currFileId, type);\n      boolean isPropagationCandidate =\n          n.isName() && parent.isAssign() && parent.getFirstChild() == n;\n      validator.expectGlobalShimPropagation(\n          decl, isInGlobalThis ? globalThis : globalObject,\n          isPropagationCandidate);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..fc4b295f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,86 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  Preconditions.checkArgument(inferred || type != null);\n+\n+  if (n.getType() == Token.GETPROP) {\n+    String propName = n.getLastChild().getString();\n+    if (inferred && !scope.isDeclared(propName, false)) {\n+      validator.expectUndeclaredVariable(\n+          sourceName, n, parent, null, propName, null);\n+      return;\n+    }\n+    if (!inferred && scope.isGlobal()) {\n+      // When at the global scope, we should ensure that the we don't\n+      // clobber an existing property on `window` or on the global scope\n+      // object.\n+      ObjectType globalThis =\n+          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+      if (globalThis.hasOwnProperty(propName)) {\n+        return;\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n+      ObjectType globalObject =\n+          typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_GLOBAL);\n+      if (globalObject.hasOwnProperty(propName)) {\n+        return;\n+      }\n+      if (!scope.isDeclared(propName, false)) {\n         validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n-\n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n+            sourceName, n, parent, null, propName, type);\n+        return;\n+      }\n+    }\n+  } else {\n+    String varName = n.getString();\n+    if (!inferred && scope.isGlobal()) {\n+      // When in the global scope, we should ensure that we don't clobber\n+      // an existing property on `window` or on the global scope object.\n+      ObjectType globalThis =\n+          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+      if (globalThis.hasOwnProperty(varName)) {\n+        return;\n+      }\n+      ObjectType globalObject =\n+          typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_GLOBAL);\n+      if (globalObject.hasOwnProperty(varName)) {\n+        return;\n       }\n     }\n+    if (!scope.isDeclared(varName, false)) {\n+      validator.expectUndeclaredVariable(\n+          sourceName, n, parent, null, varName, inferred ? null : type);\n+      return;\n+    }\n+  }\n+  if (!inferred) {\n+    setDeferredType(n, type);\n+  }\n+  CompilerInput input = compiler.getInput(sourceName);\n+  String name = n.getQualifiedName();\n+  scope.declare(name, n, type, input, inferred);\n+  if (scope.isGlobal()) {\n+    // Check if there already exists a non-shim global with the same name on\n+    // either the global object or the window object. This is essentially a\n+    // reverse check to the above block. If so, then this var's name is invalid\n+    // unless it is being used in a shim of an existing global.\n+    ObjectType globalThis =\n+        typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+    ObjectType globalObject =\n+        typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_GLOBAL);\n+    boolean isInGlobalThis = globalThis.hasOwnProperty(name);\n+    boolean isInGlobalObject = globalObject.hasOwnProperty(name);\n+    if (isInGlobalThis || isInGlobalObject) {\n+      PropDeclaration decl =\n+          new PropDeclaration(n, parent, name, currFileId, type);\n+      boolean isPropagationCandidate =\n+          n.isName() && parent.isAssign() && parent.getFirstChild() == n;\n+      validator.expectGlobalShimPropagation(\n+          decl, isInGlobalThis ? globalThis : globalObject,\n+          isPropagationCandidate);\n+    }\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}