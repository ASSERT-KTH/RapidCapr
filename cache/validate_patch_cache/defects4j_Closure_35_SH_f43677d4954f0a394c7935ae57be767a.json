{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          if (!objType.hasProperty(prop)) {\n            continue;\n          }\n          JSType propType = constraintObj.getPropertyType(prop);\n          JSType inferredType = null;\n          if (!objType.isPropertyTypeInferred(prop) && objType.isPropertyTypeUnknown(prop)) {\n            inferredType = propType;\n          } else if (!objType.isPropertyTypeDeclared(prop)) {\n            inferredType =\n                objType.getInferredPropertyTypeWithDeclaredFallbacks(prop).getSecond();\n            inferredType = inferredType.getLeastSupertype(propType);\n          }\n          if (inferredType != null) {\n            objType.defineInferredProperty(prop, inferredType, null);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..9ac3acff 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1122,18 +1122,25 @@ class TypeInference\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n+          if (!objType.hasProperty(prop)) {\n+            continue;\n+          }\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          JSType inferredType = null;\n+          if (!objType.isPropertyTypeInferred(prop) && objType.isPropertyTypeUnknown(prop)) {\n+            inferredType = propType;\n+          } else if (!objType.isPropertyTypeDeclared(prop)) {\n+            inferredType =\n+                objType.getInferredPropertyTypeWithDeclaredFallbacks(prop).getSecond();\n+            inferredType = inferredType.getLeastSupertype(propType);\n+          }\n+          if (inferredType != null) {\n+            objType.defineInferredProperty(prop, inferredType, null);\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}