{
    "patch": "      Node grandparent = parent.getParent();\n      if (NodeUtil.isGet(parent)) {\n        // Only traverse the right hand side of get/put.\n        if (!NodeUtil.isPut(grandparent)) {\n          return false;\n        }\n        // Only traverse the put if it's on a prototype property or subproperty.\n        Node grandparentParent = grandparent.getParent();\n        if (grandparentParent != null &&\n            grandparentParent.getType() == Token.GETPROP &&\n            grandparentParent.getLastChild().getString().equals(\"prototype\")) {\n          return true;\n        }\n        return false;\n      } else if (Natives.isAddNode(n)) {\n        // Only traverse the literal side or a variable assigned with the literal.\n        return (n.getFirstChild().isString() && NodeUtil.isLiteralValue(n.getFirstChild(), true)) ||\n            (n.getFirstChild().isName() && NodeUtil.isLiteralValue(Natives.nameNode(n.getFirstChild()), true));\n      } else if (parent.isCall() && parent.getFirstChild() == n) {\n        // Only traverse the callsite.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..391dabd3 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,26 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node grandparent = parent.getParent();\n+      if (NodeUtil.isGet(parent)) {\n+        // Only traverse the right hand side of get/put.\n+        if (!NodeUtil.isPut(grandparent)) {\n+          return false;\n+        }\n+        // Only traverse the put if it's on a prototype property or subproperty.\n+        Node grandparentParent = grandparent.getParent();\n+        if (grandparentParent != null &&\n+            grandparentParent.getType() == Token.GETPROP &&\n+            grandparentParent.getLastChild().getString().equals(\"prototype\")) {\n+          return true;\n+        }\n+        return false;\n+      } else if (Natives.isAddNode(n)) {\n+        // Only traverse the literal side or a variable assigned with the literal.\n+        return (n.getFirstChild().isString() && NodeUtil.isLiteralValue(n.getFirstChild(), true)) ||\n+            (n.getFirstChild().isName() && NodeUtil.isLiteralValue(Natives.nameNode(n.getFirstChild()), true));\n+      } else if (parent.isCall() && parent.getFirstChild() == n) {\n+        // Only traverse the callsite.\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}