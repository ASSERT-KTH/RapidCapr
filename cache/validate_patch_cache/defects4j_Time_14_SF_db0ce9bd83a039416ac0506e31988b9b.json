{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        if (valueToAdd == 0) {\n            return values;\n        }\n        int curMonth = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n        int curYear = values[DateTimeFieldType.year().getFieldIndex()];\n        if (!DateTimeUtils.isContiguous(partial) ||\n            (fieldIndex != DateTimeFieldType.monthOfYear().getFieldIndex())) {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n        int newMonth = (curMonth + valueToAdd) % 12;\n        int yearsChange = (curMonth + valueToAdd) / 12;\n        if (newMonth <= 0) {\n            yearsChange--;\n            newMonth += 12;\n        }\n        int newYear = curYear + yearsChange;\n        int newDay = Math.min(DateTimeUtils.getDaysInYearMonth(newYear, newMonth), values[DateTimeFieldType.dayOfMonth().getFieldIndex()]);\n        int[] newValues = Arrays.copyOf(values, values.length);\n        newValues[DateTimeFieldType.year().getFieldIndex()] = newYear;\n        newValues[DateTimeFieldType.monthOfYear().getFieldIndex()] = newMonth;\n        newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = newDay;\n        return newValues;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..d9a568bd 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -201,22 +201,28 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n \n     //-----------------------------------------------------------------------\n     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n+        int curMonth = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+        int curYear = values[DateTimeFieldType.year().getFieldIndex()];\n+        if (!DateTimeUtils.isContiguous(partial) ||\n+            (fieldIndex != DateTimeFieldType.monthOfYear().getFieldIndex())) {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        int newMonth = (curMonth + valueToAdd) % 12;\n+        int yearsChange = (curMonth + valueToAdd) / 12;\n+        if (newMonth <= 0) {\n+            yearsChange--;\n+            newMonth += 12;\n+        }\n+        int newYear = curYear + yearsChange;\n+        int newDay = Math.min(DateTimeUtils.getDaysInYearMonth(newYear, newMonth), values[DateTimeFieldType.dayOfMonth().getFieldIndex()]);\n+        int[] newValues = Arrays.copyOf(values, values.length);\n+        newValues[DateTimeFieldType.year().getFieldIndex()] = newYear;\n+        newValues[DateTimeFieldType.monthOfYear().getFieldIndex()] = newMonth;\n+        newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = newDay;\n+        return newValues;\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}