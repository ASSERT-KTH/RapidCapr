{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    final int seqEnd = input.length();\n\n    if (index < seqEnd && input.charAt(index) == '&') {\n        boolean isHex = false;\n        int start = index + 1;\n        int end = start;\n\n        char c = input.charAt(end);\n        if (c == '#') {\n            end++;\n            if (end < seqEnd && (input.charAt(end) == 'x' || input.charAt(end) == 'X')) {\n                isHex = true;\n                end++;\n            }\n\n            while (end < seqEnd && input.charAt(end) >= '0' && input.charAt(end) <= (isHex ? 'f' : '9')) {\n                end++;\n            }\n            if (end < seqEnd && input.charAt(end) == ';') {\n                end++;\n            }\n        } else {\n            // named entity\n            while (end < seqEnd && input.charAt(end) != ';') {\n                end++;\n            }\n            if (end < seqEnd && input.charAt(end) == ';') {\n                end++;\n            }\n        }\n\n        // If the entity is incomplete or has unexpected characters, pass it through\n        if (end == seqEnd || (isHex && end == start) || (!isHex && end == start + 1)) {\n            out.write(input.subSequence(index, end).toString());\n            return end - index;\n        }\n\n        int entityValue;\n        try {\n            entityValue = isHex ? Integer.parseInt(input.subSequence(start + 2, end - 1).toString(), 16)\n                    : Integer.parseInt(input.subSequence(start + 1, end - 1).toString());\n        } catch (NumberFormatException nfe) {\n            out.write(input.subSequence(index, end).toString());\n            return end - index;\n        }\n\n        // Pass through control characters\n        if (entityValue < 32 || (entityValue > 126 && entityValue < 160)) {\n            out.write(input.subSequence(index, end).toString());\n            return end - index;\n        }\n\n        // Pass through non-characters\n        if ((entityValue >= 0xD800 && entityValue <= 0xDFFF) || entityValue > 0x10FFFF) {\n            out.write(input.subSequence(index, end).toString());\n            return end - index;\n        }\n\n        // Write the character to output\n        out.write(entityValue);\n\n        return end - index;\n    }\n\n    out.write(input.charAt(index)); // Write out the current character\n    return 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..53463ef0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,72 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    final int seqEnd = input.length();\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n+    if (index < seqEnd && input.charAt(index) == '&') {\n+        boolean isHex = false;\n+        int start = index + 1;\n+        int end = start;\n \n-                // Check there's more than just an x after the &#\n+        char c = input.charAt(end);\n+        if (c == '#') {\n+            end++;\n+            if (end < seqEnd && (input.charAt(end) == 'x' || input.charAt(end) == 'X')) {\n+                isHex = true;\n+                end++;\n             }\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n+            while (end < seqEnd && input.charAt(end) >= '0' && input.charAt(end) <= (isHex ? 'f' : '9')) {\n                 end++;\n             }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n+            if (end < seqEnd && input.charAt(end) == ';') {\n+                end++;\n             }\n-\n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n+        } else {\n+            // named entity\n+            while (end < seqEnd && input.charAt(end) != ';') {\n+                end++;\n             }\n+            if (end < seqEnd && input.charAt(end) == ';') {\n+                end++;\n+            }\n+        }\n \n+        // If the entity is incomplete or has unexpected characters, pass it through\n+        if (end == seqEnd || (isHex && end == start) || (!isHex && end == start + 1)) {\n+            out.write(input.subSequence(index, end).toString());\n+            return end - index;\n+        }\n+\n+        int entityValue;\n+        try {\n+            entityValue = isHex ? Integer.parseInt(input.subSequence(start + 2, end - 1).toString(), 16)\n+                    : Integer.parseInt(input.subSequence(start + 1, end - 1).toString());\n+        } catch (NumberFormatException nfe) {\n+            out.write(input.subSequence(index, end).toString());\n+            return end - index;\n+        }\n+\n+        // Pass through control characters\n+        if (entityValue < 32 || (entityValue > 126 && entityValue < 160)) {\n+            out.write(input.subSequence(index, end).toString());\n+            return end - index;\n+        }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        // Pass through non-characters\n+        if ((entityValue >= 0xD800 && entityValue <= 0xDFFF) || entityValue > 0x10FFFF) {\n+            out.write(input.subSequence(index, end).toString());\n+            return end - index;\n         }\n-        return 0;\n+\n+        // Write the character to output\n+        out.write(entityValue);\n+\n+        return end - index;\n     }\n+\n+    out.write(input.charAt(index)); // Write out the current character\n+    return 1;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<<P&O[>]> but was:<<P&O[&gt;]>",
    "test_result": "FAIL"
}