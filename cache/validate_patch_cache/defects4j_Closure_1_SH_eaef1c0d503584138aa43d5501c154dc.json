{
    "patch": "// Get the parameter names before we start removing any.\nSet<String> paramNames = new HashSet<>();\nfor (Node arg : getFunctionArgs(fnScope.getRootNode())) {\n  // Chances there will be no duplicates but just in case.\n  paramNames.add(arg.getString());\n}\n\n// Check if any arguments are unreferenced.\nboolean anyUnused = referenced.stream()\n    .noneMatch(var -> paramNames.contains(var.getName()) && isSafeToRemove(var, fnScope));\n\nif (anyUnused) {\n  // Remove unused parameter nodes.\n  Node function = fnScope.getRootNode();\n  Node argList = getFunctionArgList(function);\n  Set<Node> unusedArgs = new HashSet<>();\n  for (Node arg : argList.children()) {\n    Var var = fnScope.getVar(arg.getString());\n    if (paramNames.contains(arg.getString()) && isSafeToRemove(var, fnScope)) {\n      unusedArgs.add(arg);\n    }\n  }\n  for (Node unusedArg : unusedArgs) {\n    argList.removeChild(unusedArg);\n    compiler.reportCodeChange();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..47f39a41 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,33 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Get the parameter names before we start removing any.\n+Set<String> paramNames = new HashSet<>();\n+for (Node arg : getFunctionArgs(fnScope.getRootNode())) {\n+  // Chances there will be no duplicates but just in case.\n+  paramNames.add(arg.getString());\n+}\n+\n+// Check if any arguments are unreferenced.\n+boolean anyUnused = referenced.stream()\n+    .noneMatch(var -> paramNames.contains(var.getName()) && isSafeToRemove(var, fnScope));\n+\n+if (anyUnused) {\n+  // Remove unused parameter nodes.\n+  Node function = fnScope.getRootNode();\n+  Node argList = getFunctionArgList(function);\n+  Set<Node> unusedArgs = new HashSet<>();\n+  for (Node arg : argList.children()) {\n+    Var var = fnScope.getVar(arg.getString());\n+    if (paramNames.contains(arg.getString()) && isSafeToRemove(var, fnScope)) {\n+      unusedArgs.add(arg);\n+    }\n+  }\n+  for (Node unusedArg : unusedArgs) {\n+    argList.removeChild(unusedArg);\n+    compiler.reportCodeChange();\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}