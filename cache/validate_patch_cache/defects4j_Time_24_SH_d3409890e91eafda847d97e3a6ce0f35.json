{
    "patch": "try {\n    // save the current value of the year field\n    int savedYear = iDefaultYear;\n\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n\n    // ensure that the year field is reset to the default value\n    // before calling the method recursively\n    if (resetFields) {\n        int year = DateTimeUtils.getYear(millis, getChronology());\n        if (year != savedYear) {\n            iDefaultYear = savedYear;\n            millis = computeMillis(true, null);\n            iDefaultYear = year; // restore the altered year value\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..f94c7607 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,30 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    // save the current value of the year field\n+    int savedYear = iDefaultYear;\n+\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+\n+    // ensure that the year field is reset to the default value\n+    // before calling the method recursively\n+    if (resetFields) {\n+        int year = DateTimeUtils.getYear(millis, getChronology());\n+        if (year != savedYear) {\n+            iDefaultYear = savedYear;\n+            millis = computeMillis(true, null);\n+            iDefaultYear = year; // restore the altered year value\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}