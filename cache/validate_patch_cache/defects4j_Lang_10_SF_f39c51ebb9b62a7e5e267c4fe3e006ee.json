{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    if (value == null) {\n        return regex;\n    }\n    boolean escaped = false;\n    boolean inGroup = false;\n    int length = value.length();\n    char lastChar = '\\0';\n    for (int i = 0; i < length; i++) {\n        char c = value.charAt(i);\n        switch (c) {\n            case '\\'':\n                if (unquote) {\n                    if (i == 0 || i == length - 1) {\n                        // quotes not paired or not at either end of value\n                        return null;\n                    }\n                    c = value.charAt(++i);\n                }\n                break;\n            case '(':\n                if (!escaped) {\n                    if (inGroup) {\n                        regex.append(\"(?:\");\n                    } else {\n                        inGroup = true;\n                    }\n                    lastChar = c;\n                    break;\n                }\n                escaped = false;\n                regex.append('\\\\');\n                break;\n            case ')':\n                if (!escaped) {\n                    if (inGroup) {\n                        regex.append(')');\n                        inGroup = false;\n                    } else {\n                        regex.append(\"\\\\)\");\n                    }\n                    lastChar = c;\n                    break;\n                }\n                escaped = false;\n                regex.append('\\\\');\n                break;\n            case '|':\n                if (inGroup && !escaped) {\n                    regex.append(c);\n                    break;\n                }\n                escaped = false;\n                regex.append('\\\\');\n                break;\n            default:\n                // handle special characters\n                switch (c) {\n                    case '?':\n                    case '*':\n                    case '+':\n                        if (!escaped && lastChar != '(' && lastChar != '|' && lastChar != '\\0') {\n                            regex.append(lastChar == ')' ? \"?\" : (\"(?:\\\\Q\" + lastChar + \"\\\\E)?\"));\n                        }\n                        lastChar = c;\n                        break;\n                    case '[':\n                        if (!escaped) {\n                            regex.append(\"\\\\[\");\n                            lastChar = c;\n                            break;\n                        }\n                        escaped = false;\n                        regex.append('\\\\');\n                        break;\n                    case ']':\n                        if (!escaped) {\n                            regex.append(\"\\\\]\");\n                            lastChar = c;\n                            break;\n                        }\n                        escaped = false;\n                        regex.append('\\\\');\n                        break;\n                    case '{':\n                        if (i == 0 || i == length - 1) {\n                            // improperly formed quantifier\n                            return null;\n                        } else if (!escaped) {\n                            regex.append(\"(?:\");\n                            lastChar = c;\n                            break;\n                        }\n                        escaped = false;\n                        regex.append('\\\\');\n                        break;\n                    case '}':\n                        if (!escaped) {\n                            regex.append(\")?\");\n                            lastChar = c;\n                            break;\n                        }\n                        escaped = false;\n                        regex.append('\\\\');\n                        break;\n                    case '\\\\':\n                        if (escaped) {\n                            regex.append(\"\\\\\\\\\");\n                        }\n                        escaped = !escaped;\n                        break;\n                    default:\n                        if (escaped) {\n                            regex.append('\\\\');\n                        }\n                        regex.append(c);\n                        lastChar = c;\n                        break;\n                }\n                escaped = false;\n                break;\n        }\n        if (unquote && i == length - 1 && c == '\\'') {\n            return null;\n        }\n    }\n\n    if (inGroup) {\n        regex.append(\"\\\\)\");\n    }\n\n    regex.append(\"(?:\\\\z)\");\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..5161299f 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,48 +300,141 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    if (value == null) {\n+        return regex;\n+    }\n+    boolean escaped = false;\n+    boolean inGroup = false;\n+    int length = value.length();\n+    char lastChar = '\\0';\n+    for (int i = 0; i < length; i++) {\n+        char c = value.charAt(i);\n+        switch (c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+                if (unquote) {\n+                    if (i == 0 || i == length - 1) {\n+                        // quotes not paired or not at either end of value\n+                        return null;\n                     }\n-                    c= value.charAt(i);\n+                    c = value.charAt(++i);\n                 }\n                 break;\n-            case '?':\n-            case '[':\n-            case ']':\n             case '(':\n+                if (!escaped) {\n+                    if (inGroup) {\n+                        regex.append(\"(?:\");\n+                    } else {\n+                        inGroup = true;\n+                    }\n+                    lastChar = c;\n+                    break;\n+                }\n+                escaped = false;\n+                regex.append('\\\\');\n+                break;\n             case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n+                if (!escaped) {\n+                    if (inGroup) {\n+                        regex.append(')');\n+                        inGroup = false;\n+                    } else {\n+                        regex.append(\"\\\\)\");\n+                    }\n+                    lastChar = c;\n+                    break;\n+                }\n+                escaped = false;\n+                regex.append('\\\\');\n+                break;\n             case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n+                if (inGroup && !escaped) {\n+                    regex.append(c);\n+                    break;\n+                }\n+                escaped = false;\n                 regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                break;\n+            default:\n+                // handle special characters\n+                switch (c) {\n+                    case '?':\n+                    case '*':\n+                    case '+':\n+                        if (!escaped && lastChar != '(' && lastChar != '|' && lastChar != '\\0') {\n+                            regex.append(lastChar == ')' ? \"?\" : (\"(?:\\\\Q\" + lastChar + \"\\\\E)?\"));\n+                        }\n+                        lastChar = c;\n+                        break;\n+                    case '[':\n+                        if (!escaped) {\n+                            regex.append(\"\\\\[\");\n+                            lastChar = c;\n+                            break;\n+                        }\n+                        escaped = false;\n+                        regex.append('\\\\');\n+                        break;\n+                    case ']':\n+                        if (!escaped) {\n+                            regex.append(\"\\\\]\");\n+                            lastChar = c;\n+                            break;\n+                        }\n+                        escaped = false;\n+                        regex.append('\\\\');\n+                        break;\n+                    case '{':\n+                        if (i == 0 || i == length - 1) {\n+                            // improperly formed quantifier\n+                            return null;\n+                        } else if (!escaped) {\n+                            regex.append(\"(?:\");\n+                            lastChar = c;\n+                            break;\n+                        }\n+                        escaped = false;\n+                        regex.append('\\\\');\n+                        break;\n+                    case '}':\n+                        if (!escaped) {\n+                            regex.append(\")?\");\n+                            lastChar = c;\n+                            break;\n+                        }\n+                        escaped = false;\n+                        regex.append('\\\\');\n+                        break;\n+                    case '\\\\':\n+                        if (escaped) {\n+                            regex.append(\"\\\\\\\\\");\n+                        }\n+                        escaped = !escaped;\n+                        break;\n+                    default:\n+                        if (escaped) {\n+                            regex.append('\\\\');\n+                        }\n+                        regex.append(c);\n+                        lastChar = c;\n+                        break;\n+                }\n+                escaped = false;\n+                break;\n         }\n-        return regex;\n+        if (unquote && i == length - 1 && c == '\\'') {\n+            return null;\n+        }\n+    }\n+\n+    if (inGroup) {\n+        regex.append(\"\\\\)\");\n     }\n \n+    regex.append(\"(?:\\\\z)\");\n+    return regex;\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}