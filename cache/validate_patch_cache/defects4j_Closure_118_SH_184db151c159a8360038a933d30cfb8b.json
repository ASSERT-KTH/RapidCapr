{
    "patch": "      boolean hasNumber = false;\n      boolean hasString = false;\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n>>>        if (child.isNumber()) {\n>>>          hasNumber = true;\n>>>        } else if (child.isString()) {\n>>>          hasString = true;\n>>>        }\n        \n        // We should never see a mix of numbers and strings.\n>>>        if (hasNumber && hasString) {\n>>>          compiler.report(JSError.make(\n>>>              t.getSourceName(), n,\n>>>              Warnings.INVALID_MIXED_PROPERTIES, n.toString(), \"\"));\n>>>          break;\n>>>        }\n        ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..b7bcebb1 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,26 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+      boolean hasNumber = false;\n+      boolean hasString = false;\n+      for (Node child = n.getFirstChild();\n+          child != null;\n+          child = child.getNext()) {\n+        // Maybe STRING, GET, SET\n+>>>        if (child.isNumber()) {\n+>>>          hasNumber = true;\n+>>>        } else if (child.isString()) {\n+>>>          hasString = true;\n+>>>        }\n+        \n+        // We should never see a mix of numbers and strings.\n+>>>        if (hasNumber && hasString) {\n+>>>          compiler.report(JSError.make(\n+>>>              t.getSourceName(), n,\n+>>>              Warnings.INVALID_MIXED_PROPERTIES, n.toString(), \"\"));\n+>>>          break;\n+>>>        }\n+        \n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}