{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            // fixed to add months first, then adjust dayOfMonth if necessary\n            if (fieldIndex == 0) {\n                // month is largest field and being added to\n                int newMonthValue = iChronology.monthOfYear().add(instant, valueToAdd);\n                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(newMonthValue);\n                int newDayOfMonth = values[1];\n                if (newDayOfMonth > maxDayOfMonth) {\n                    newDayOfMonth = maxDayOfMonth;\n                }\n                instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n                instant = iChronology.monthOfYear().set(instant, newMonthValue);\n            } else {\n                instant = add(instant, valueToAdd);\n            }\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..b4ef3063 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,13 +206,26 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n+            // fixed to add months first, then adjust dayOfMonth if necessary\n+            if (fieldIndex == 0) {\n+                // month is largest field and being added to\n+                int newMonthValue = iChronology.monthOfYear().add(instant, valueToAdd);\n+                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(newMonthValue);\n+                int newDayOfMonth = values[1];\n+                if (newDayOfMonth > maxDayOfMonth) {\n+                    newDayOfMonth = maxDayOfMonth;\n+                }\n+                instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n+                instant = iChronology.monthOfYear().set(instant, newMonthValue);\n+            } else {\n+                instant = add(instant, valueToAdd);\n+            }\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}