{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos >= 0) {\n        int parsedYear = bucket.year;\n        Chronology parsedChrono = bucket.chronology;\n        int parsedOffset = bucket.getOffsetInteger();\n        if (parsedYear <= 0 && parsedChrono != null) {\n            parsedChrono = parsedChrono.withUTC();\n        }\n        if (parsedYear > 0 && parsedChrono != null && iPivotYear != null && parsedYear < iPivotYear.intValue()) {\n            parsedChrono = parsedChrono.withUTC();\n            parsedYear = iPivotYear.intValue();\n        }\n        DateTimeZone parsedZone;\n        if (parsedOffset != null) {\n            parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        } else {\n            parsedZone = bucket.getZone();\n            if (iZone != null) {\n                parsedZone = iZone;\n            }\n        }\n        if (parsedChrono != null) {\n            instantLocal = parsedChrono.getZone().convertLocalToUTC(bucket.computeMillis(false, text), false, parsedZone);\n            parsedChrono = parsedChrono.withZone(parsedZone);\n            instant.setChronology(parsedChrono);\n        } else {\n            instantLocal -= parsedOffset;\n            instant.setChronology(chrono.withZone(parsedZone));\n        }\n        instant.setMillis(instantLocal);\n        instant.setZone(parsedZone);\n    } else {\n        instant.setMillis(instantLocal);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..7b8204fd 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,56 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos >= 0) {\n+        int parsedYear = bucket.year;\n+        Chronology parsedChrono = bucket.chronology;\n+        int parsedOffset = bucket.getOffsetInteger();\n+        if (parsedYear <= 0 && parsedChrono != null) {\n+            parsedChrono = parsedChrono.withUTC();\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        if (parsedYear > 0 && parsedChrono != null && iPivotYear != null && parsedYear < iPivotYear.intValue()) {\n+            parsedChrono = parsedChrono.withUTC();\n+            parsedYear = iPivotYear.intValue();\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        DateTimeZone parsedZone;\n+        if (parsedOffset != null) {\n+            parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        } else {\n+            parsedZone = bucket.getZone();\n+            if (iZone != null) {\n+                parsedZone = iZone;\n+            }\n         }\n-        return newPos;\n+        if (parsedChrono != null) {\n+            instantLocal = parsedChrono.getZone().convertLocalToUTC(bucket.computeMillis(false, text), false, parsedZone);\n+            parsedChrono = parsedChrono.withZone(parsedZone);\n+            instant.setChronology(parsedChrono);\n+        } else {\n+            instantLocal -= parsedOffset;\n+            instant.setChronology(chrono.withZone(parsedZone));\n+        }\n+        instant.setMillis(instantLocal);\n+        instant.setZone(parsedZone);\n+    } else {\n+        instant.setMillis(instantLocal);\n     }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}