{
    "patch": "      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      if (functionType.getTypeOfThis() != null &&\n          !NodeUtil.isGet(child.getParent()) &&\n          !NodeUtil.isFunctionExpression(child)) {\n        report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());\n      }\n      \n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..5152205b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.isConstructor() &&\n+          !functionType.isNativeObjectType() &&\n+          (functionType.getReturnType().isUnknownType() ||\n+           functionType.getReturnType().isVoidType() ||\n+           !isExtern)) {\n+        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+      }\n+\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      if (functionType.getTypeOfThis() != null &&\n+          !NodeUtil.isGet(child.getParent()) &&\n+          !NodeUtil.isFunctionExpression(child)) {\n+        report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());\n+      }\n+      \n+      visitParameterList(t, n, functionType);\n+      ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_FUNCTION_MASKS_VARIABLE. function function (this:Bar): string masks variable (IE bug) at testcode line 1 : 164 expected:<0> but was:<1>",
    "test_result": "FAIL"
}