{
    "patch": "      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        newName.setLineno(functionNode.getLineno());\n        int lpColumn = functionNode.getAbsolutePosition()\n            + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      }\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null)\n        lp.setLineno(fnName.getLineno());\n      else\n        lp.setLineno(functionNode.getLineno());\n      int lparenCharno = functionNode.getLp()\n          + functionNode.getAbsolutePosition();\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      Node rp = newNode(Token.RP);\n      int rparenCharno = functionNode.getRparenPosition()\n          + functionNode.getAbsolutePosition();\n      rp.setLineno(lp.getLineno());\n      rp.setCharno(position2charno(rparenCharno));\n      lp.addChildToBack(rp);\n      node.addChildToBack(lp);\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..48648f60 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,44 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      Boolean isUnnamedFunction = false;\n+      if (name == null) {\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamedFunction = true;\n+      }\n+      Node node = newNode(Token.FUNCTION);\n+      Node newName = transform(name);\n+      if (isUnnamedFunction) {\n+        newName.setLineno(functionNode.getLineno());\n+        int lpColumn = functionNode.getAbsolutePosition()\n+            + functionNode.getLp();\n+        newName.setCharno(position2charno(lpColumn));\n+      }\n+      node.addChildToBack(newName);\n+      Node lp = newNode(Token.LP);\n+      Name fnName = functionNode.getFunctionName();\n+      if (fnName != null)\n+        lp.setLineno(fnName.getLineno());\n+      else\n+        lp.setLineno(functionNode.getLineno());\n+      int lparenCharno = functionNode.getLp()\n+          + functionNode.getAbsolutePosition();\n+      lp.setCharno(position2charno(lparenCharno));\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      Node rp = newNode(Token.RP);\n+      int rparenCharno = functionNode.getRparenPosition()\n+          + functionNode.getAbsolutePosition();\n+      rp.setLineno(lp.getLineno());\n+      rp.setCharno(position2charno(rparenCharno));\n+      lp.addChildToBack(rp);\n+      node.addChildToBack(lp);\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      node.addChildToBack(bodyNode);\n+     return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable isUnnamedFunction is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}