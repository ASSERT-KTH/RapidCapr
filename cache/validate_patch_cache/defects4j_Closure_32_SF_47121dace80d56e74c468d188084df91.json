{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    StringBuilder builder = new StringBuilder();\n\n    String line = stream.getRemainingJSDocLine();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n    boolean expectingEOL = false;\n\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Mark the position after the star as the new start of the line.\n          } else {\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n            builder.append('*');\n          }\n          ignoreStar = true;\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE && !expectingEOL) {\n            builder.append(\"\\n\");\n          }\n          ignoreStar = false;\n          expectingEOL = false;\n          token = next();\n          continue;\n\n        case ANNOTATION:\n          if (option != WhitespaceOption.PRESERVE && builder.length() > 0 && builder.charAt(builder.length() - 1) != ' ') {\n            builder.append(' ');\n          }\n          expectingEOL = true;\n          ignoreStar = false;\n          builder.append(toString(token));\n          token = next();\n          continue;\n\n        case EOF:\n        case EOC:\n          if (expectingEOL && option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n          break;\n\n        default:\n          if (expectingEOL && option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n          expectingEOL = false;\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          if (builder.length() > 0 && builder.charAt(builder.length() - 1) != ' ') {\n            builder.append(' ');\n          }\n\n          builder.append(toString(token));\n\n          line = stream.getRemainingJSDocLine();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            line = line.trim();\n          }\n\n          builder.append(line);\n          token = next();\n          continue;\n      }\n\n      String multilineText = builder.toString().trim();\n      if (option != WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.replaceAll(\"\\\\n\\\\s+\", \" \");\n      }\n      int endLineno = stream.getLineno();\n      int endCharno = stream.getCharno();\n\n      if (multilineText.length() > 0) {\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n      }\n\n      return new ExtractionInfo(multilineText, token);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..1eb550b0 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,35 +1326,29 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n-\n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n+    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n       return new ExtractionInfo(\"\", token);\n     }\n \n     stream.update();\n+    StringBuilder builder = new StringBuilder();\n+\n+    String line = stream.getRemainingJSDocLine();\n     int startLineno = stream.getLineno();\n     int startCharno = stream.getCharno() + 1;\n \n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n     if (option != WhitespaceOption.PRESERVE) {\n       line = line.trim();\n     }\n \n-    StringBuilder builder = new StringBuilder();\n     builder.append(line);\n \n     state = State.SEARCHING_ANNOTATION;\n     token = next();\n \n     boolean ignoreStar = false;\n-\n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n+    boolean expectingEOL = false;\n \n     do {\n       switch (token) {\n@@ -1362,71 +1356,78 @@ public final class JsDocInfoParser {\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n           } else {\n-            // The star is part of the comment.\n             if (builder.length() > 0) {\n               builder.append(' ');\n             }\n-\n             builder.append('*');\n           }\n-\n+          ignoreStar = true;\n           token = next();\n           continue;\n \n         case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n+          if (option != WhitespaceOption.SINGLE_LINE && !expectingEOL) {\n             builder.append(\"\\n\");\n           }\n-\n-          ignoreStar = true;\n+          ignoreStar = false;\n+          expectingEOL = false;\n           token = next();\n           continue;\n \n-        default:\n+        case ANNOTATION:\n+          if (option != WhitespaceOption.PRESERVE && builder.length() > 0 && builder.charAt(builder.length() - 1) != ' ') {\n+            builder.append(' ');\n+          }\n+          expectingEOL = true;\n           ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n-\n-              // All tokens must be separated by a space.\n-\n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n-\n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n-\n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+          builder.append(toString(token));\n+          token = next();\n+          continue;\n \n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n+        case EOF:\n+        case EOC:\n+          if (expectingEOL && option != WhitespaceOption.SINGLE_LINE) {\n+            builder.append(\"\\n\");\n+          }\n+          break;\n \n-            return new ExtractionInfo(multilineText, token);\n+        default:\n+          if (expectingEOL && option != WhitespaceOption.SINGLE_LINE) {\n+            builder.append(\"\\n\");\n           }\n+          expectingEOL = false;\n+          ignoreStar = false;\n+          state = State.SEARCHING_ANNOTATION;\n \n-          if (builder.length() > 0) {\n+          if (builder.length() > 0 && builder.charAt(builder.length() - 1) != ' ') {\n             builder.append(' ');\n           }\n+\n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n \n           if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n+            line = line.trim();\n           }\n \n           builder.append(line);\n           token = next();\n+          continue;\n       }\n-    } while (true);\n-  }\n+\n+      String multilineText = builder.toString().trim();\n+      if (option != WhitespaceOption.PRESERVE) {\n+        multilineText = multilineText.replaceAll(\"\\\\n\\\\s+\", \" \");\n+      }\n+      int endLineno = stream.getLineno();\n+      int endCharno = stream.getCharno();\n+\n+      if (multilineText.length() > 0) {\n+        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n+      }\n+\n+      return new ExtractionInfo(multilineText, token);\n \n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}