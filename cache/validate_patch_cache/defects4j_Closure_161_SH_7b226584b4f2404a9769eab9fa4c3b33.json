{
    "patch": "    if (right.getType() != Token.NUMBER || left.getType() == Token.ARRAYLIT || left.getType() == Token.REGEXP) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods. Also, we can't fold\n      // array literals or regexps.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..0b35fb20 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,10 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (right.getType() != Token.NUMBER || left.getType() == Token.ARRAYLIT || left.getType() == Token.REGEXP) {\n+      // Sometimes people like to use complex expressions to index into\n+      // arrays, or strings to index into array methods. Also, we can't fold\n+      // array literals or regexps.\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}