{
    "patch": "            for (int i = 0; i < count; i++) {\n                SavedField field = savedFields[i];\n                int index = field.iField.getType();\n                DateTimeField dateTimeField = iFields[index];\n                DurationField rangeField = dateTimeField.getRangeDurationField();\n                int value;\n                if (rangeField == null) {\n                    value = dateTimeField.get(millis);\n                } else {\n                    long range = rangeField.getField(millis).getMaximumValue();\n                    value = field.iValue;\n                    if (value < range) {\n                        value = (int) (value - rangeField.getUnitMillis() * range);\n                    }\n                    while (value < dateTimeField.getMinimumValue()) {\n                        value += rangeField.getUnitMillis();\n                    }\n                    while (value > dateTimeField.getMaximumValue()) {\n                        value -= rangeField.getUnitMillis();\n                    }\n                }\n                if (i == 0 && dateTimeField.getType() == DateTimeFieldType.year()) {\n                    int year = determineYear(value);\n                    // modify remaining fields if necessary\n                    LocalDate date = new LocalDate(year, 1, 1);\n                    for (int j = 0; j < count; j++) {\n                        if (savedFields[j].iField.getType() != DateTimeFieldType.year()) {\n                            date = savedFields[j].iField.set(date, savedFields[j].iValue);\n                        }\n                    }\n                    if (iZone == null) {\n                        millis = date.toDateTimeAtStartOfDay(iChrono).getMillis();\n                    } else {\n                        millis = date.toDateTimeAtStartOfDay(iZone).getMillis();\n                    }\n                } else {\n                    millis = dateTimeField.set(millis, value);\n                }                \n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..cad56e45 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,45 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            for (int i = 0; i < count; i++) {\n+                SavedField field = savedFields[i];\n+                int index = field.iField.getType();\n+                DateTimeField dateTimeField = iFields[index];\n+                DurationField rangeField = dateTimeField.getRangeDurationField();\n+                int value;\n+                if (rangeField == null) {\n+                    value = dateTimeField.get(millis);\n+                } else {\n+                    long range = rangeField.getField(millis).getMaximumValue();\n+                    value = field.iValue;\n+                    if (value < range) {\n+                        value = (int) (value - rangeField.getUnitMillis() * range);\n+                    }\n+                    while (value < dateTimeField.getMinimumValue()) {\n+                        value += rangeField.getUnitMillis();\n+                    }\n+                    while (value > dateTimeField.getMaximumValue()) {\n+                        value -= rangeField.getUnitMillis();\n+                    }\n+                }\n+                if (i == 0 && dateTimeField.getType() == DateTimeFieldType.year()) {\n+                    int year = determineYear(value);\n+                    // modify remaining fields if necessary\n+                    LocalDate date = new LocalDate(year, 1, 1);\n+                    for (int j = 0; j < count; j++) {\n+                        if (savedFields[j].iField.getType() != DateTimeFieldType.year()) {\n+                            date = savedFields[j].iField.set(date, savedFields[j].iValue);\n+                        }\n+                    }\n+                    if (iZone == null) {\n+                        millis = date.toDateTimeAtStartOfDay(iChrono).getMillis();\n+                    } else {\n+                        millis = date.toDateTimeAtStartOfDay(iZone).getMillis();\n+                    }\n+                } else {\n+                    millis = dateTimeField.set(millis, value);\n+                }                \n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}