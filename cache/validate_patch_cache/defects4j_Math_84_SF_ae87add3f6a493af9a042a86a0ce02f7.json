{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n      while (true) {\n            ++this.iterations;\n            final RealPointValuePair best = this.simplex[0];\n            final RealPointValuePair reflected = this.evaluateNewSimplex(this.simplex, 1.0D, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n                final RealPointValuePair[] reflectedSimplex = Arrays.copyOf(this.simplex, this.simplex.length);\n                reflectedSimplex[this.simplex.length - 1] = reflected;\n                final RealPointValuePair expanded = this.evaluateNewSimplex(this.simplex, this.khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    this.simplex = Arrays.copyOf(reflectedSimplex, reflectedSimplex.length);\n                } else {\n                    this.simplex = Arrays.copyOf(this.simplex, this.simplex.length);\n                    this.simplex[this.simplex.length - 1] = expanded;\n                }\n            } else {\n                RealPointValuePair contracted = null;\n                if (comparator.compare(reflected, this.simplex[this.simplex.length - 1]) >= 0) {\n                    contracted = this.contractInside(best, comparator);\n                } else {\n                    contracted = this.contractOutside(best, comparator);\n                }\n\n                if (comparator.compare(contracted, best) < 0) {\n                    this.simplex[this.simplex.length - 1] = contracted;\n                } else {\n                    this.reduceSimplex(comparator);\n                }\n            }\n\n            if (this.checkConvergence(comparator)) {\n                return;\n            }\n            \n            if (this.iterations >= this.getMaxIterations()) { // add maximum iteration check\n                throw new OptimizationException(\"Max iterations (\"+this.getMaxIterations()+\") reached\");\n            }\n      }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..133cb4e3e 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,45 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+      while (true) {\n+            ++this.iterations;\n+            final RealPointValuePair best = this.simplex[0];\n+            final RealPointValuePair reflected = this.evaluateNewSimplex(this.simplex, 1.0D, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                final RealPointValuePair[] reflectedSimplex = Arrays.copyOf(this.simplex, this.simplex.length);\n+                reflectedSimplex[this.simplex.length - 1] = reflected;\n+                final RealPointValuePair expanded = this.evaluateNewSimplex(this.simplex, this.khi, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    this.simplex = Arrays.copyOf(reflectedSimplex, reflectedSimplex.length);\n+                } else {\n+                    this.simplex = Arrays.copyOf(this.simplex, this.simplex.length);\n+                    this.simplex[this.simplex.length - 1] = expanded;\n+                }\n+            } else {\n+                RealPointValuePair contracted = null;\n+                if (comparator.compare(reflected, this.simplex[this.simplex.length - 1]) >= 0) {\n+                    contracted = this.contractInside(best, comparator);\n+                } else {\n+                    contracted = this.contractOutside(best, comparator);\n                 }\n \n-                return;\n-\n+                if (comparator.compare(contracted, best) < 0) {\n+                    this.simplex[this.simplex.length - 1] = contracted;\n+                } else {\n+                    this.reduceSimplex(comparator);\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n+            if (this.checkConvergence(comparator)) {\n                 return;\n             }\n-\n-        }\n-\n-    }\n+            \n+            if (this.iterations >= this.getMaxIterations()) { // add maximum iteration check\n+                throw new OptimizationException(\"Max iterations (\"+this.getMaxIterations()+\") reached\");\n+            }\n+      }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: iterations has private access in DirectSearchOptimizer",
    "test_result": "ERROR"
}