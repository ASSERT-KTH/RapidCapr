{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    final double v1x = v1.getX();\n    final double v1y = v1.getY();\n    final double v1z = v1.getZ();\n    final double v2x = v2.getX();\n    final double v2y = v2.getY();\n    final double v2z = v2.getZ();\n\n    final double norm1 = FastMath.sqrt(v1x * v1x + v1y * v1y + v1z * v1z);\n    final double norm2 = FastMath.sqrt(v2x * v2x + v2y * v2y + v2z * v2z);\n\n    if (norm1 == 0.0 || norm2 == 0.0) {\n        return Vector3D.ZERO;\n    }\n\n    final double invNorm1 = 1.0 / norm1;\n    final double invNorm2 = 1.0 / norm2;\n\n    final double x = (v1y * v2z - v1z * v2y) * invNorm1 * invNorm2;\n    final double y = (v1z * v2x - v1x * v2z) * invNorm1 * invNorm2;\n    final double z = (v1x * v2y - v1y * v2x) * invNorm1 * invNorm2;\n\n    final double norm = FastMath.sqrt(x * x + y * y + z * z);\n\n    if (norm == 0.0) {\n        return Vector3D.ZERO;\n    }\n\n    final double invNorm = 1.0 / norm;\n    final double x1 = x * invNorm;\n    final double y1 = y * invNorm;\n    final double z1 = z * invNorm;\n\n    // Check if the cross product is parallel with the second vector.\n    final double angle = Vector3D.angle(v2, new Vector3D(x1, y1, z1));\n    if (angle < 1e-10 || angle > (FastMath.PI - 1e-10)) {\n        return Vector3D.ZERO;\n    }\n\n    return new Vector3D(x1, y1, z1);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..fec4bd777 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,47 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    final double v1x = v1.getX();\n+    final double v1y = v1.getY();\n+    final double v1z = v1.getZ();\n+    final double v2x = v2.getX();\n+    final double v2y = v2.getY();\n+    final double v2z = v2.getZ();\n+\n+    final double norm1 = FastMath.sqrt(v1x * v1x + v1y * v1y + v1z * v1z);\n+    final double norm2 = FastMath.sqrt(v2x * v2x + v2y * v2y + v2z * v2z);\n+\n+    if (norm1 == 0.0 || norm2 == 0.0) {\n+        return Vector3D.ZERO;\n+    }\n \n+    final double invNorm1 = 1.0 / norm1;\n+    final double invNorm2 = 1.0 / norm2;\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+    final double x = (v1y * v2z - v1z * v2y) * invNorm1 * invNorm2;\n+    final double y = (v1z * v2x - v1x * v2z) * invNorm1 * invNorm2;\n+    final double z = (v1x * v2y - v1y * v2x) * invNorm1 * invNorm2;\n \n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    final double norm = FastMath.sqrt(x * x + y * y + z * z);\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    if (norm == 0.0) {\n+        return Vector3D.ZERO;\n+    }\n \n+    final double invNorm = 1.0 / norm;\n+    final double x1 = x * invNorm;\n+    final double y1 = y * invNorm;\n+    final double z1 = z * invNorm;\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    // Check if the cross product is parallel with the second vector.\n+    final double angle = Vector3D.angle(v2, new Vector3D(x1, y1, z1));\n+    if (angle < 1e-10 || angle > (FastMath.PI - 1e-10)) {\n+        return Vector3D.ZERO;\n+    }\n \n-  }\n+    return new Vector3D(x1, y1, z1);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.2860387767736776>",
    "test_result": "FAIL"
}