{
    "patch": "      Node currentNode = argList.getFirstChild();\n      while (currentNode != null) {\n        Node nextNode = currentNode.getNext();\n        if (NodeUtil.isVarArgs(currentNode)) {\n          break;\n        }\n        if (!currentNode.isDefaultValue() && !referenced.contains(fnScope.getVar(currentNode.getString()))) {\n          argList.removeChild(currentNode);\n          compiler.reportCodeChange();\n        }\n        currentNode = nextNode;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..709833c8 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,17 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node currentNode = argList.getFirstChild();\n+      while (currentNode != null) {\n+        Node nextNode = currentNode.getNext();\n+        if (NodeUtil.isVarArgs(currentNode)) {\n+          break;\n+        }\n+        if (!currentNode.isDefaultValue() && !referenced.contains(fnScope.getVar(currentNode.getString()))) {\n+          argList.removeChild(currentNode);\n+          compiler.reportCodeChange();\n+        }\n+        currentNode = nextNode;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}