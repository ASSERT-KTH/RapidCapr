{
    "patch": "      if (t.getScope().isDeclared(ANONYMOUS_FUN_NAME, false)) {\n        Var anonymousVar = t.getScope().getVar(ANONYMOUS_FUN_NAME);\n        Node anonymousVarParent = anonymousVar.getParentNode();\n        if (anonymousVarParent != null &&\n            NodeUtil.isObjectLitKey(anonymousVarParent, n)) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..65d7841a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,13 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (t.getScope().isDeclared(ANONYMOUS_FUN_NAME, false)) {\n+        Var anonymousVar = t.getScope().getVar(ANONYMOUS_FUN_NAME);\n+        Node anonymousVarParent = anonymousVar.getParentNode();\n+        if (anonymousVarParent != null &&\n+            NodeUtil.isObjectLitKey(anonymousVarParent, n)) {\n+          return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}