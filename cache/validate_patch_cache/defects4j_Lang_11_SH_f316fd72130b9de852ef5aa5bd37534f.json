{
    "patch": "        if (start > end) {\n            throw new IllegalArgumentException(\"Start (\" + start + \") must be less than or equal to end (\" + end + \")\");\n        }\n\n        if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start == 0 && end == 0) {\n            if (chars != null) {\n                end = chars.length;\n            } else {\n                if (!letters && !numbers) {\n                    end = Integer.MAX_VALUE;\n                } else {\n                    end = 'z' + 1;\n                    start = ' ';                \n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\nindex a7990575..159f7a2a 100644\n--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n@@ -242,6 +242,30 @@ public class RandomStringUtils {\n                     start = ' ';                \n                 }\n             }\n+        if (start > end) {\n+            throw new IllegalArgumentException(\"Start (\" + start + \") must be less than or equal to end (\" + end + \")\");\n+        }\n+\n+        if (count < 0) {\n+            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n+        }\n+\n+        if (chars != null && chars.length == 0) {\n+            throw new IllegalArgumentException(\"The chars array must not be empty\");\n+        }\n+\n+        if (start == 0 && end == 0) {\n+            if (chars != null) {\n+                end = chars.length;\n+            } else {\n+                if (!letters && !numbers) {\n+                    end = Integer.MAX_VALUE;\n+                } else {\n+                    end = 'z' + 1;\n+                    start = ' ';                \n+                }\n+            }\n+        }\n         }\n \n         char[] buffer = new char[count];",
    "result_reason": "junit.framework.AssertionFailedError: Message (bound must be positive) must contain 'start'",
    "test_result": "FAIL"
}