{
    "patch": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n\n    // Keep a set of visited nodes to avoid revisiting them\n    Set<Node> visited = new HashSet<>();\n    visited.add(node);\n\n    int visits = 0;\n    do {\n      Node c = node.getFirstChild();\n      while (c != null) {\n        if (!visited.contains(c)) {\n          traverse(c);\n          visited.add(c);\n        }\n        Node next = c.getNext();\n        c = next;\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many iterations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..4b79b42e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -115,15 +115,19 @@ class PeepholeOptimizationsPass\n     // the entire AST to catch newly created opportunities.\n     // So we track whether a \"unit of code\" has changed,\n     // and revisit immediately.\n-    if (!shouldVisit(node)) {\n-      return;\n-    }\n+\n+    // Keep a set of visited nodes to avoid revisiting them\n+    Set<Node> visited = new HashSet<>();\n+    visited.add(node);\n \n     int visits = 0;\n     do {\n       Node c = node.getFirstChild();\n-      while(c != null) {\n-        traverse(c);\n+      while (c != null) {\n+        if (!visited.contains(c)) {\n+          traverse(c);\n+          visited.add(c);\n+        }\n         Node next = c.getNext();\n         c = next;\n       }\n@@ -131,7 +135,7 @@ class PeepholeOptimizationsPass\n       visit(node);\n       visits++;\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n+      Preconditions.checkState(visits < 10000, \"too many iterations\");\n     } while (shouldRetraverse(node));\n \n     exitNode(node);",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}