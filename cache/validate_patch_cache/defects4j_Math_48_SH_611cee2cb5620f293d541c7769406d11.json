{
    "patch": "                // Detect early that algorithm is stuck, instead of waiting\n                // for the maximum number of iterations to be exceeded.\n                if (FastMath.abs(x - x1) <= atol) {\n                    if (FastMath.abs(fx) > FastMath.abs(f1)) {\n                        // Beware of splitting tolerance when tolerances are very small.\n                        if (FastMath.abs(f0) * 8 >= FastMath.abs(f1)) {\n                            return x;\n                        }\n                    } else {\n                        if (FastMath.abs(f1) * 8 >= FastMath.abs(fx)) {\n                            return x1;\n                        }\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..8d7045a0b 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,20 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                // Detect early that algorithm is stuck, instead of waiting\n+                // for the maximum number of iterations to be exceeded.\n+                if (FastMath.abs(x - x1) <= atol) {\n+                    if (FastMath.abs(fx) > FastMath.abs(f1)) {\n+                        // Beware of splitting tolerance when tolerances are very small.\n+                        if (FastMath.abs(f0) * 8 >= FastMath.abs(f1)) {\n+                            return x;\n+                        }\n+                    } else {\n+                        if (FastMath.abs(f1) * 8 >= FastMath.abs(fx)) {\n+                            return x1;\n+                        }\n+                    }\n+                }\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "java.lang.Exception: Unexpected exception, expected<org.apache.commons.math.exception.ConvergenceException> but was<java.lang.AssertionError>",
    "test_result": "FAIL"
}