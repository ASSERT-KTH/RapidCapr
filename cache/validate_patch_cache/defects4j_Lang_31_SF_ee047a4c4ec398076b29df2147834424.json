{
    "patch": "public static boolean containsAny(char[] str, char[] searchChars) {\n    if (str == null || searchChars == null) {\n        return false;\n    }\n    int len = str.length;\n    int searchLen = searchChars.length;\n    int firstSupplementaryCharIndex = -1;\n    for (int i = 0; i < len; i++) {\n        char ch = str[i];\n        if (Character.isHighSurrogate(ch)) {\n            if (i < len - 1) {\n                i++;\n                char nextCh = str[i];\n                if (Character.isLowSurrogate(nextCh)) {\n                    int codePoint = Character.toCodePoint(ch, nextCh);\n                    for (int j = 0; j < searchLen; j++) {\n                        if (searchChars[j] == codePoint) {\n                            return true;\n                        }\n                    }\n                } else {\n                    if (firstSupplementaryCharIndex == -1) {\n                        firstSupplementaryCharIndex = i - 1;\n                    }\n                }\n            } else {\n                if (firstSupplementaryCharIndex == -1) {\n                    firstSupplementaryCharIndex = i;\n                }\n            }\n        } else {\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n        }\n    }\n    if (firstSupplementaryCharIndex == -1) {\n        return false;\n    }\n    try {\n        String strTmp = new String(str, firstSupplementaryCharIndex, len - firstSupplementaryCharIndex);\n        for (int i = 0; i < searchLen; i++) {\n            if (strTmp.contains(String.valueOf(searchChars[i]))) {\n                return true;\n            }\n        }\n    } catch (IndexOutOfBoundsException e) {\n        e.printStackTrace();\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..25c0dbec 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,59 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(char[] str, char[] searchChars) {\n+    if (str == null || searchChars == null) {\n+        return false;\n+    }\n+    int len = str.length;\n+    int searchLen = searchChars.length;\n+    int firstSupplementaryCharIndex = -1;\n+    for (int i = 0; i < len; i++) {\n+        char ch = str[i];\n+        if (Character.isHighSurrogate(ch)) {\n+            if (i < len - 1) {\n+                i++;\n+                char nextCh = str[i];\n+                if (Character.isLowSurrogate(nextCh)) {\n+                    int codePoint = Character.toCodePoint(ch, nextCh);\n+                    for (int j = 0; j < searchLen; j++) {\n+                        if (searchChars[j] == codePoint) {\n+                            return true;\n+                        }\n+                    }\n+                } else {\n+                    if (firstSupplementaryCharIndex == -1) {\n+                        firstSupplementaryCharIndex = i - 1;\n+                    }\n+                }\n+            } else {\n+                if (firstSupplementaryCharIndex == -1) {\n+                    firstSupplementaryCharIndex = i;\n+                }\n+            }\n+        } else {\n+            for (int j = 0; j < searchLen; j++) {\n+                if (searchChars[j] == ch) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    if (firstSupplementaryCharIndex == -1) {\n+        return false;\n+    }\n+    try {\n+        String strTmp = new String(str, firstSupplementaryCharIndex, len - firstSupplementaryCharIndex);\n+        for (int i = 0; i < searchLen; i++) {\n+            if (strTmp.contains(String.valueOf(searchChars[i]))) {\n+                return true;\n+            }\n+        }\n+    } catch (IndexOutOfBoundsException e) {\n+        e.printStackTrace();\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}