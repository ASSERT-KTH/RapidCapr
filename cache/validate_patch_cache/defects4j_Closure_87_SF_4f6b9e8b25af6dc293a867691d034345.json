{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n    Node parent = maybeExpr.getParent();\n\n    if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n      return false;\n    }\n\n    if (parent != null && (parent.getType() == Token.CALL || parent.getType() == Token.NEW)) {\n      return false;\n    }\n\n    if (NodeUtil.isFunctionExpression(maybeExpr) || NodeUtil.isFunctionDeclaration(maybeExpr)) {\n      return false;\n    }\n\n    if (maybeExpr.getType() == Token.IF) {\n      // Avoid folding expressions in IF statements to avoid the IE bug\n      if (maybeExpr.getFirstChild() != null && maybeExpr.getFirstChild().getType() == Token.NOT) {\n        return false;\n      }\n      return maybeExpr.getChildCount() == 2;\n    }\n\n    return NodeUtil.isExpressionNode(maybeExpr);\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..8e04119b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,35 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+    Node parent = maybeExpr.getParent();\n+\n+    if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+      return false;\n+    }\n+\n+    if (parent != null && (parent.getType() == Token.CALL || parent.getType() == Token.NEW)) {\n+      return false;\n+    }\n+\n+    if (NodeUtil.isFunctionExpression(maybeExpr) || NodeUtil.isFunctionDeclaration(maybeExpr)) {\n+      return false;\n+    }\n+\n+    if (maybeExpr.getType() == Token.IF) {\n+      // Avoid folding expressions in IF statements to avoid the IE bug\n+      if (maybeExpr.getFirstChild() != null && maybeExpr.getFirstChild().getType() == Token.NOT) {\n+        return false;\n       }\n+      return maybeExpr.getChildCount() == 2;\n     }\n \n-    return false;\n+    return NodeUtil.isExpressionNode(maybeExpr);\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}