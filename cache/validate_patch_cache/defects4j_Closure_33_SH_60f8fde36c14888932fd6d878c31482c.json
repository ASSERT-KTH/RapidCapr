{
    "patch": "if (!constraintObj.isNominalConstructor()) {\n      return;\n    }\n\n    NominalType fn = constraintObj.getNominalTypeIfSingletonObj();\n    if (fn == null) {\n      return;\n    }\n    \n    JSType constrType = fn.getInstanceAsJSType();\n    if (constrType == null || !constrType.isFunctionType()) {\n      return;\n    }\n    \n    FunctionType constrFunc = constrType.toMaybeFunctionType();\n    JSType inheritFromType = constrFunc.getParentType();\n    if (inheritFromType == null) {\n      return;\n    }\n    \n    ObjectType inheritFromObj = inheritFromType.instantiateGenerics(constrFunc.getTypeParameters());\n                \n    for (String prop : inheritFromObj.getOwnPropertyNames()){\n      if (!constraintObj.getOwnPropertyNames().contains(prop)){\n        defineInferredProperty(prop, inheritFromObj.getPropertyType(prop), null);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..99392102 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,33 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (!constraintObj.isNominalConstructor()) {\n+      return;\n+    }\n+\n+    NominalType fn = constraintObj.getNominalTypeIfSingletonObj();\n+    if (fn == null) {\n+      return;\n+    }\n+    \n+    JSType constrType = fn.getInstanceAsJSType();\n+    if (constrType == null || !constrType.isFunctionType()) {\n+      return;\n+    }\n+    \n+    FunctionType constrFunc = constrType.toMaybeFunctionType();\n+    JSType inheritFromType = constrFunc.getParentType();\n+    if (inheritFromType == null) {\n+      return;\n+    }\n+    \n+    ObjectType inheritFromObj = inheritFromType.instantiateGenerics(constrFunc.getTypeParameters());\n+                \n+    for (String prop : inheritFromObj.getOwnPropertyNames()){\n+      if (!constraintObj.getOwnPropertyNames().contains(prop)){\n+        defineInferredProperty(prop, inheritFromObj.getPropertyType(prop), null);\n+      }\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}