{
    "patch": "public boolean evaluateStep(final StepInterpolator interpolator) throws DerivativeException, EventException, ConvergenceException {\n\n\t\ttry {\n\t\t\tforward = interpolator.isForward();\n\t\t\tfinal double t1 = interpolator.getCurrentTime();\n\t\t\tfinal int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n\t\t\tfinal double h = (t1 - t0) / n;\n\n\t\t\tdouble ta = t0;\n\t\t\tdouble ga = g0;\n\t\t\tdouble tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n\n\t\t\tfor (int i = 0; i < n; ++i) {\n\n\t\t\t\ttb = (i == n - 1) ? t1 : ta + h;\n\n\t\t\t\t// evaluate handler value at the end of the substep\n\t\t\t\tinterpolator.setInterpolatedTime(tb);\n\t\t\t\tfinal double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n\t\t\t\t// check events occurrence\n\t\t\t\tif (g0Positive ^ (gb >= 0)) {\n\t\t\t\t\t// variation direction, with respect to the integration direction\n\t\t\t\t\tincreasing = gb >= ga;\n\n\t\t\t\t\tfinal UnivariateRealFunction f = t -> {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tinterpolator.setInterpolatedTime(t);\n\t\t\t\t\t\t\treturn handler.g(t, interpolator.getInterpolatedState());\n\t\t\t\t\t\t} catch (DerivativeException | EventException e) {\n\t\t\t\t\t\t\tthrow new FunctionEvaluationException(e, t);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tfinal BaseAbstractUnivariateSolver<UnivariateRealFunction> solver;\n\t\t\t\t\tif (allowInvalidStateAtRoot) {\n\t\t\t\t\t\tsolver = new InterceptingStepInterpolatorBrentSolver();\n\t\t\t\t\t\t((InterceptingStepInterpolatorBrentSolver) solver).setConvergence(checker.getConvergence());\n\t\t\t\t\t\t((InterceptingStepInterpolatorBrentSolver) solver).setMaximalOrder(4);\n\t\t\t\t\t\t((InterceptingStepInterpolatorBrentSolver) solver).setInterpolatedTime(tb, i, n);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsolver = new BrentSolver(checker.getAbsoluteAccuracy());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (solver instanceof BaseAbstractUnivariateSolver) {\n\t\t\t\t          ((BaseAbstractUnivariateSolver<?>) solver)\n\t\t\t\t          .setMaximalIterationCount(getMaxIterationCount());\n\t\t\t\t    }\n\t\t\t\t\t\n\t\t\t\t\tfinal double root;\n\t\t\t\t\tif(ta < tb) {\n\t\t\t\t\t\troot = solver.solve(getMaxEvaluations(), f, ta, tb);\n\t\t\t\t\t} else {\n\t\t\t\t\t\troot = solver.solve(getMaxEvaluations(), f, tb, ta);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (Double.isNaN(root)) {\n\t\t\t\t\t\tthrow new ConvergenceException(new LocalizedFormats(\"unrecoverable.event\"));\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((Math.abs(root - previousEventTime) <= convergence) && (i < n - 1)) {\n\t\t\t\t\t\t// we have already found an event at this point in time, move on to the next sub-step\n\t\t\t\t\t\tta = tb;\n\t\t\t\t\t\tga = gb;\n\t\t\t\t\t} else if ((Math.abs(root - t0) <= convergence) || (Math.abs(root - t1) <= convergence)) {\n\t\t\t\t\t\tpendingEventTime = root;\n\t\t\t\t\t\tpendingEvent = true;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tta = tb;\n\t\t\t\t\t\tga = gb;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// no sign change: there is no event for now\n\t\t\t\t\tta = tb;\n\t\t\t\t\tga = gb;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// no event during the whole step\n\t\t\tpendingEvent = false;\n\t\t\tpendingEventTime = Double.NaN;\n\t\t\treturn false;\n\n\t\t} catch (FunctionEvaluationException e) {\n\t\t\tfinal Throwable cause = e.getCause();\n\t\t\tif ((cause != null) && (cause instanceof DerivativeException)) {\n\t\t\t\tthrow (DerivativeException) cause;\n\t\t\t} else if ((cause != null) && (cause instanceof EventException)) {\n\t\t\t\tthrow (EventException) cause;\n\t\t\t}\n\t\t\tthrow new EventException(e);\n\t\t}\n\t}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..407a5f201 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,103 +164,99 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n-        throws DerivativeException, EventException, ConvergenceException {\n-\n-        try {\n-\n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n-\n-            double ta = t0;\n-            double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n-\n-                // evaluate handler value at the end of the substep\n-                tb += h;\n-                interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n-\n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n-                    // there is a sign change: an event is expected during this step\n-\n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n-                    // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n-\n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n-                        public double value(final double t) throws FunctionEvaluationException {\n-                            try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n-                            } catch (DerivativeException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            } catch (EventException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            }\n-                        }\n-                    };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n-                        }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n-                        pendingEvent = true;\n-                        return true;\n-                    }\n-\n-                } else {\n-                    // no sign change: there is no event for now\n-                    ta = tb;\n-                    ga = gb;\n-                }\n-\n-            }\n-\n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n-            return false;\n-\n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n-            }\n-            throw new EventException(e);\n-        }\n-\n-    }\n+public boolean evaluateStep(final StepInterpolator interpolator) throws DerivativeException, EventException, ConvergenceException {\n+\n+\t\ttry {\n+\t\t\tforward = interpolator.isForward();\n+\t\t\tfinal double t1 = interpolator.getCurrentTime();\n+\t\t\tfinal int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n+\t\t\tfinal double h = (t1 - t0) / n;\n+\n+\t\t\tdouble ta = t0;\n+\t\t\tdouble ga = g0;\n+\t\t\tdouble tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n+\n+\t\t\tfor (int i = 0; i < n; ++i) {\n+\n+\t\t\t\ttb = (i == n - 1) ? t1 : ta + h;\n+\n+\t\t\t\t// evaluate handler value at the end of the substep\n+\t\t\t\tinterpolator.setInterpolatedTime(tb);\n+\t\t\t\tfinal double gb = handler.g(tb, interpolator.getInterpolatedState());\n+\n+\t\t\t\t// check events occurrence\n+\t\t\t\tif (g0Positive ^ (gb >= 0)) {\n+\t\t\t\t\t// variation direction, with respect to the integration direction\n+\t\t\t\t\tincreasing = gb >= ga;\n+\n+\t\t\t\t\tfinal UnivariateRealFunction f = t -> {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tinterpolator.setInterpolatedTime(t);\n+\t\t\t\t\t\t\treturn handler.g(t, interpolator.getInterpolatedState());\n+\t\t\t\t\t\t} catch (DerivativeException | EventException e) {\n+\t\t\t\t\t\t\tthrow new FunctionEvaluationException(e, t);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t};\n+\t\t\t\t\tfinal BaseAbstractUnivariateSolver<UnivariateRealFunction> solver;\n+\t\t\t\t\tif (allowInvalidStateAtRoot) {\n+\t\t\t\t\t\tsolver = new InterceptingStepInterpolatorBrentSolver();\n+\t\t\t\t\t\t((InterceptingStepInterpolatorBrentSolver) solver).setConvergence(checker.getConvergence());\n+\t\t\t\t\t\t((InterceptingStepInterpolatorBrentSolver) solver).setMaximalOrder(4);\n+\t\t\t\t\t\t((InterceptingStepInterpolatorBrentSolver) solver).setInterpolatedTime(tb, i, n);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tsolver = new BrentSolver(checker.getAbsoluteAccuracy());\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (solver instanceof BaseAbstractUnivariateSolver) {\n+\t\t\t\t          ((BaseAbstractUnivariateSolver<?>) solver)\n+\t\t\t\t          .setMaximalIterationCount(getMaxIterationCount());\n+\t\t\t\t    }\n+\t\t\t\t\t\n+\t\t\t\t\tfinal double root;\n+\t\t\t\t\tif(ta < tb) {\n+\t\t\t\t\t\troot = solver.solve(getMaxEvaluations(), f, ta, tb);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\troot = solver.solve(getMaxEvaluations(), f, tb, ta);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tif (Double.isNaN(root)) {\n+\t\t\t\t\t\tthrow new ConvergenceException(new LocalizedFormats(\"unrecoverable.event\"));\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif ((Math.abs(root - previousEventTime) <= convergence) && (i < n - 1)) {\n+\t\t\t\t\t\t// we have already found an event at this point in time, move on to the next sub-step\n+\t\t\t\t\t\tta = tb;\n+\t\t\t\t\t\tga = gb;\n+\t\t\t\t\t} else if ((Math.abs(root - t0) <= convergence) || (Math.abs(root - t1) <= convergence)) {\n+\t\t\t\t\t\tpendingEventTime = root;\n+\t\t\t\t\t\tpendingEvent = true;\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tta = tb;\n+\t\t\t\t\t\tga = gb;\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\t// no sign change: there is no event for now\n+\t\t\t\t\tta = tb;\n+\t\t\t\t\tga = gb;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t// no event during the whole step\n+\t\t\tpendingEvent = false;\n+\t\t\tpendingEventTime = Double.NaN;\n+\t\t\treturn false;\n+\n+\t\t} catch (FunctionEvaluationException e) {\n+\t\t\tfinal Throwable cause = e.getCause();\n+\t\t\tif ((cause != null) && (cause instanceof DerivativeException)) {\n+\t\t\t\tthrow (DerivativeException) cause;\n+\t\t\t} else if ((cause != null) && (cause instanceof EventException)) {\n+\t\t\t\tthrow (EventException) cause;\n+\t\t\t}\n+\t\t\tthrow new EventException(e);\n+\t\t}\n+\t}\n \n     /** Get the occurrence time of the event triggered in the current\n      * step.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}