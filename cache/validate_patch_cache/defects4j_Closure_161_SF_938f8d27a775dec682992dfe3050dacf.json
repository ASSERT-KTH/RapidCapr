{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || (!NodeUtil.isUndefined(left) && !NodeUtil.isObjectLiteral(left))) {\n      // We can't fold if the index is not an integer or if left is not an undefined or\n      // an object literal.\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = null;\n    if (NodeUtil.isObjectLiteral(left)) {\n      elem = left.getLastChild(); // Last added element should have the highest index.\n      for (int i = 0; elem != null && i < (elem.getDouble() > index ? intIndex + 1 : intIndex); i++) {\n        elem = elem.getPrevious();\n      }\n    } else {\n      elem = left.getFirstChild();\n      for (int i = 0; elem != null && i < intIndex; i++) {\n        elem = elem.getNext();\n      }\n    }\n\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (elem.getType() == Token.EMPTY) {\n      if (parent.getType() == Token.NEW) {\n        parent.replaceChild(n, Node.newString(n, \"undefined\"));\n        reportCodeChange();\n        return parent.getFirstChild();\n      }\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..c852adc4 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1286,11 +1286,11 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       // arrays, or strings to index into array methods.\n       return n;\n     }\n-\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n+    if (intIndex != index || (!NodeUtil.isUndefined(left) && !NodeUtil.isObjectLiteral(left))) {\n+      // We can't fold if the index is not an integer or if left is not an undefined or\n+      // an object literal.\n       return n;\n     }\n \n@@ -1299,9 +1299,17 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       return n;\n     }\n \n-    Node elem = left.getFirstChild();\n-    for (int i = 0; elem != null && i < intIndex; i++) {\n-      elem = elem.getNext();\n+    Node elem = null;\n+    if (NodeUtil.isObjectLiteral(left)) {\n+      elem = left.getLastChild(); // Last added element should have the highest index.\n+      for (int i = 0; elem != null && i < (elem.getDouble() > index ? intIndex + 1 : intIndex); i++) {\n+        elem = elem.getPrevious();\n+      }\n+    } else {\n+      elem = left.getFirstChild();\n+      for (int i = 0; elem != null && i < intIndex; i++) {\n+        elem = elem.getNext();\n+      }\n     }\n \n     if (elem == null) {\n@@ -1310,6 +1318,11 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n \n     if (elem.getType() == Token.EMPTY) {\n+      if (parent.getType() == Token.NEW) {\n+        parent.replaceChild(n, Node.newString(n, \"undefined\"));\n+        reportCodeChange();\n+        return parent.getFirstChild();\n+      }\n       elem = NodeUtil.newUndefinedNode(elem);\n     } else {\n       left.removeChild(elem);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}