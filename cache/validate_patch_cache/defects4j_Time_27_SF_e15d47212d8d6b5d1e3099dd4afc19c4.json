{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n        return new PeriodFormatter(null, null);\n    }\n\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n    Separator defaultSeparator = null;\n    for (int i = 0; i < size; i+=2) {\n        Object element = elementPairs.get(i);\n\n        if (!(element instanceof Element)) {\n            throw new IllegalArgumentException(\"Unknown element type: \" + element.getClass());\n        }\n\n        int k = i + 1;\n        if (k >= size) {\n            throw new IllegalArgumentException(\"Must have a pair of elements\");\n        }\n\n        Object obj = elementPairs.get(k);\n        if (obj == null || obj instanceof PeriodParser) {\n            if (parser != null) {\n                throw new IllegalArgumentException(\"Multiple parsers in the builder\");\n            }\n            parser = (PeriodParser) obj;\n        } else {\n            if (obj instanceof PeriodPrinter) {\n                if (printer != null) {\n                    throw new IllegalArgumentException(\"Multiple printers in the builder\");\n                }\n                printer = (PeriodPrinter) obj;\n            } else {\n                if (!(obj instanceof Separator)) {\n                    throw new IllegalArgumentException(\"Unknown element type: \" + obj.getClass());\n                }\n\n                if (defaultSeparator == null) {\n                    defaultSeparator = (Separator) obj;\n                } else {\n                    defaultSeparator = defaultSeparator.finish((PeriodPrinter)printer, (PeriodParser)parser);\n                    printer = null;\n                    parser = null;\n                    defaultSeparator = defaultSeparator.finish((PeriodPrinter)element, (PeriodParser)obj);\n                }\n\n            }\n\n        }\n    }\n\n    if (defaultSeparator != null) {\n        PeriodFormatter formatter = new PeriodFormatter(printer, parser);\n        Separator separator = defaultSeparator.finish(formatter.getPrinter(), formatter.getParser());\n        return new PeriodFormatter(separator, separator);\n    }\n\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..49966bae 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,78 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n+        return new PeriodFormatter(null, null);\n+    }\n+\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+    Separator defaultSeparator = null;\n+    for (int i = 0; i < size; i+=2) {\n+        Object element = elementPairs.get(i);\n+\n+        if (!(element instanceof Element)) {\n+            throw new IllegalArgumentException(\"Unknown element type: \" + element.getClass());\n+        }\n+\n+        int k = i + 1;\n+        if (k >= size) {\n+            throw new IllegalArgumentException(\"Must have a pair of elements\");\n+        }\n+\n+        Object obj = elementPairs.get(k);\n+        if (obj == null || obj instanceof PeriodParser) {\n+            if (parser != null) {\n+                throw new IllegalArgumentException(\"Multiple parsers in the builder\");\n+            }\n+            parser = (PeriodParser) obj;\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            if (obj instanceof PeriodPrinter) {\n+                if (printer != null) {\n+                    throw new IllegalArgumentException(\"Multiple printers in the builder\");\n+                }\n+                printer = (PeriodPrinter) obj;\n+            } else {\n+                if (!(obj instanceof Separator)) {\n+                    throw new IllegalArgumentException(\"Unknown element type: \" + obj.getClass());\n+                }\n+\n+                if (defaultSeparator == null) {\n+                    defaultSeparator = (Separator) obj;\n+                } else {\n+                    defaultSeparator = defaultSeparator.finish((PeriodPrinter)printer, (PeriodParser)parser);\n+                    printer = null;\n+                    parser = null;\n+                    defaultSeparator = defaultSeparator.finish((PeriodPrinter)element, (PeriodParser)obj);\n+                }\n+\n+            }\n+\n         }\n     }\n \n+    if (defaultSeparator != null) {\n+        PeriodFormatter formatter = new PeriodFormatter(printer, parser);\n+        Separator separator = defaultSeparator.finish(formatter.getPrinter(), formatter.getParser());\n+        return new PeriodFormatter(separator, separator);\n+    }\n+\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}