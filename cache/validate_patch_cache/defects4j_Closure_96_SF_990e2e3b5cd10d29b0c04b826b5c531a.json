{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (parameters.hasNext()) {\n        ordinal++;\n        parameter = parameters.next();\n        if (!arguments.hasNext()) { // check if there are any remaining arguments\n            reportMissingParameters(t, call, ordinal);\n            return;\n        }\n        argument = arguments.next();\n\n        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n            getJSType(parameter), call, ordinal);\n    }\n\n    if (arguments.hasNext()) { // check if there are any remaining arguments\n        reportExtraParameters(t, call, ordinal);\n        return;\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n                maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n}\n\nprivate void reportMissingParameters(NodeTraversal t, Node call, int ordinal) {\n    report(t, call, MISSING_FORMAL_PARAMETER,\n        \"Missing parameter at index \" + ordinal);\n}\n\nprivate void reportExtraParameters(NodeTraversal t, Node call, int ordinal) {\n    report(t, call, TOO_MANY_ARGUMENTS,\n        \"Expected \" + ordinal + \" argument(s), but found more\");\n}\n\nprivate void report(NodeTraversal t, Node call, DiagnosticType type, String... args) {\n    t.report(call, type, args);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..4e209fa8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,8 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n@@ -1405,29 +1404,48 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    while (parameters.hasNext()) {\n+        ordinal++;\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+        if (!arguments.hasNext()) { // check if there are any remaining arguments\n+            reportMissingParameters(t, call, ordinal);\n+            return;\n+        }\n+        argument = arguments.next();\n+\n+        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+            getJSType(parameter), call, ordinal);\n+    }\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    if (arguments.hasNext()) { // check if there are any remaining arguments\n+        reportExtraParameters(t, call, ordinal);\n+        return;\n     }\n \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n     if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs), String.valueOf(minArgs),\n+                maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n     }\n-  }\n+}\n+\n+private void reportMissingParameters(NodeTraversal t, Node call, int ordinal) {\n+    report(t, call, MISSING_FORMAL_PARAMETER,\n+        \"Missing parameter at index \" + ordinal);\n+}\n+\n+private void reportExtraParameters(NodeTraversal t, Node call, int ordinal) {\n+    report(t, call, TOO_MANY_ARGUMENTS,\n+        \"Expected \" + ordinal + \" argument(s), but found more\");\n+}\n+\n+private void report(NodeTraversal t, Node call, DiagnosticType type, String... args) {\n+    t.report(call, type, args);\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: method report(NodeTraversal,Node,DiagnosticType,String...) is already defined in class TypeCheck",
    "test_result": "ERROR"
}