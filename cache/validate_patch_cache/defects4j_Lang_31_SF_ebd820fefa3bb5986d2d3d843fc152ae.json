{
    "patch": "public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int sequenceLength = sequence.length();\n    final int searchLength = searchChars.length;\n    final int end = sequenceLength - searchLength;\n    for (int i = 0; i <= end; i++) {\n        int j = 0;\n        int i2 = i;\n        while (j < searchLength && sequence.charAt(i2) == searchChars[j]) {\n            i2++;\n            j++;\n        }\n        if (j == searchLength) {\n            return true;\n        }\n        if (Character.isHighSurrogate(sequence.charAt(i2 - 1))) {\n            // Handle supplementary characters\n            int codePoint = Character.codePointAt(sequence, i2 - 2);\n            int[] codePoints = Character.toChars(codePoint);\n            j--;\n            while (j < searchLength && Arrays.equals(codePoints, Arrays.copyOfRange(searchChars, j, j + codePoints.length))) {\n                j += codePoints.length;\n                codePoint = Character.codePointAt(sequence, i2 - 2 + j);\n                codePoints = Character.toChars(codePoint);\n            }\n            if (j == searchLength) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..23776587 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,40 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int sequenceLength = sequence.length();\n+    final int searchLength = searchChars.length;\n+    final int end = sequenceLength - searchLength;\n+    for (int i = 0; i <= end; i++) {\n+        int j = 0;\n+        int i2 = i;\n+        while (j < searchLength && sequence.charAt(i2) == searchChars[j]) {\n+            i2++;\n+            j++;\n+        }\n+        if (j == searchLength) {\n+            return true;\n+        }\n+        if (Character.isHighSurrogate(sequence.charAt(i2 - 1))) {\n+            // Handle supplementary characters\n+            int codePoint = Character.codePointAt(sequence, i2 - 2);\n+            int[] codePoints = Character.toChars(codePoint);\n+            j--;\n+            while (j < searchLength && Arrays.equals(codePoints, Arrays.copyOfRange(searchChars, j, j + codePoints.length))) {\n+                j += codePoints.length;\n+                codePoint = Character.codePointAt(sequence, i2 - 2 + j);\n+                codePoints = Character.toChars(codePoint);\n+            }\n+            if (j == searchLength) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}