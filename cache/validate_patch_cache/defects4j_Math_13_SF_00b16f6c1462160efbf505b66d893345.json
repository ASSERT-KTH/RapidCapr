{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition eig = new EigenDecomposition(m);\n    final RealMatrix d = eig.getD();\n    final RealMatrix v = eig.getV();\n    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        sqrtD.setEntry(i, i, Math.sqrt(Math.abs(d.getEntry(i, i))));\n    }\n    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n    final RealMatrix sqInv = MatrixUtils.createRealIdentityMatrix(n);\n    for (int i = 0; i < 5; ++i) {\n        sqInv = sqInv.multiply(MatrixUtils.createRealIdentityMatrix(n).add(sqrtM))\n                         .scalarMultiply(0.5);\n    }\n    final RealMatrix sqrtInv = sqInv.inverse();\n    final RealMatrix sqrtMFinal = sqrtM.multiply(sqrtInv);\n    return sqrtMFinal;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..51d70661e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition eig = new EigenDecomposition(m);\n+    final RealMatrix d = eig.getD();\n+    final RealMatrix v = eig.getV();\n+    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        sqrtD.setEntry(i, i, Math.sqrt(Math.abs(d.getEntry(i, i))));\n     }\n+    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n+    final RealMatrix sqInv = MatrixUtils.createRealIdentityMatrix(n);\n+    for (int i = 0; i < 5; ++i) {\n+        sqInv = sqInv.multiply(MatrixUtils.createRealIdentityMatrix(n).add(sqrtM))\n+                         .scalarMultiply(0.5);\n+    }\n+    final RealMatrix sqrtInv = sqInv.inverse();\n+    final RealMatrix sqrtMFinal = sqrtM.multiply(sqrtInv);\n+    return sqrtMFinal;\n+}\n }",
    "result_reason": "error: cannot assign a value to final variable sqInv",
    "test_result": "ERROR"
}