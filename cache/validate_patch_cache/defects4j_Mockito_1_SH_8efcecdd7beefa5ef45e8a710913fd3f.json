{
    "patch": "    public void captureArgumentsFrom(Invocation invocation) {\n        Object[] rawArguments = invocation.getRawArguments();\n\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object varArgsArray = Array.newInstance(invocation.getMethod().getParameterTypes()[position].getComponentType(),\n                            rawArguments.length - position);\n                    for (int i = position; i < rawArguments.length; i++) {\n                        Array.set(varArgsArray, i - position, rawArguments[i]);\n                    }\n                    ((CapturesArguments) m).captureFrom(varArgsArray);\n                } else {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..29cb0e0aa 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,25 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    public void captureArgumentsFrom(Invocation invocation) {\n+        Object[] rawArguments = invocation.getRawArguments();\n+\n+        for (int position = 0; position < matchers.size(); position++) {\n+            Matcher m = matchers.get(position);\n+            if (m instanceof CapturesArguments) {\n+                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n+                    Object varArgsArray = Array.newInstance(invocation.getMethod().getParameterTypes()[position].getComponentType(),\n+                            rawArguments.length - position);\n+                    for (int i = position; i < rawArguments.length; i++) {\n+                        Array.set(varArgsArray, i - position, rawArguments[i]);\n+                    }\n+                    ((CapturesArguments) m).captureFrom(varArgsArray);\n+                } else {\n+                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n+                }\n+            }\n+        }\n+    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}