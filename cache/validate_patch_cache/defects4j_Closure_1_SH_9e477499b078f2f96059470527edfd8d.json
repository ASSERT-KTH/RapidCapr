{
    "patch": "   \n    boolean allArgsReferenced = true;\n    List<Node> toRemove = new ArrayList<>();\n    for (Node arg : argList.children()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!var.isReferenced()) {\n        toRemove.add(arg);\n      } else {\n        allArgsReferenced = false;\n      }\n    }\n    if (!toRemove.isEmpty()) {\n      argList.removeChildren(toRemove);\n      removeImplicitArgs(fnScope, toRemove);\n      compiler.reportCodeChange();\n    }\n    if (modifyCallers && !allArgsReferenced) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1cef2d2f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+   \n+    boolean allArgsReferenced = true;\n+    List<Node> toRemove = new ArrayList<>();\n+    for (Node arg : argList.children()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!var.isReferenced()) {\n+        toRemove.add(arg);\n+      } else {\n+        allArgsReferenced = false;\n+      }\n+    }\n+    if (!toRemove.isEmpty()) {\n+      argList.removeChildren(toRemove);\n+      removeImplicitArgs(fnScope, toRemove);\n+      compiler.reportCodeChange();\n+    }\n+    if (modifyCallers && !allArgsReferenced) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}