{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        boolean inferredPropertiesDefined = false;\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            JSType typeToInfer = objType.hasProperty(prop)\n                ? objType.getPropertyType(prop).getLeastSupertype(propType)\n                : propType;\n            objType.defineInferredProperty(prop, typeToInfer, null);\n            inferredPropertiesDefined = true;\n          }\n        }\n        if (inferredPropertiesDefined) {\n          warnings.add(JSError.make(n, TypeValidator.INFERRED_PROPERTY_INVALIDATION));\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..641cc83c 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1121,18 +1121,20 @@ class TypeInference\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n+        boolean inferredPropertiesDefined = false;\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n+            JSType propType = constraintObj.getPropertyType(prop);\n+            JSType typeToInfer = objType.hasProperty(prop)\n+                ? objType.getPropertyType(prop).getLeastSupertype(propType)\n+                : propType;\n             objType.defineInferredProperty(prop, typeToInfer, null);\n+            inferredPropertiesDefined = true;\n           }\n         }\n-      }\n+        if (inferredPropertiesDefined) {\n+          warnings.add(JSError.make(n, TypeValidator.INFERRED_PROPERTY_INVALIDATION));\n+        }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}