{
    "patch": "public Fraction reduce() {\n    // If numerator or denominator is zero, return zero\n    if (numerator == 0) {\n        return new Fraction(0, 1);\n    } else if (denominator == 0) {\n        throw new ArithmeticException(\"Denominator is zero\");\n    }\n\n    // Find the absolute values of numerator and denominator\n    int num = Math.abs(numerator);\n    int den = Math.abs(denominator);\n\n    // Find the GCD of numerator and denominator using Euclidean algorithm\n    int gcd = getGcd(num, den);\n\n    // Determine the sign of the result\n    int sign = numerator * denominator < 0 ? -1 : 1;\n\n    // Return a new fraction with reduced numerator and denominator\n    int reducedNum = sign * num / gcd;\n    int reducedDen = den / gcd;\n    return new Fraction(reducedNum, reducedDen);\n}\n\n// Euclidean algorithm to find gcd recursively\nprivate static int getGcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    }\n    return getGcd(b, a % b);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..fa28320f 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,13 +462,37 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    // If numerator or denominator is zero, return zero\n+    if (numerator == 0) {\n+        return new Fraction(0, 1);\n+    } else if (denominator == 0) {\n+        throw new ArithmeticException(\"Denominator is zero\");\n+    }\n+\n+    // Find the absolute values of numerator and denominator\n+    int num = Math.abs(numerator);\n+    int den = Math.abs(denominator);\n+\n+    // Find the GCD of numerator and denominator using Euclidean algorithm\n+    int gcd = getGcd(num, den);\n+\n+    // Determine the sign of the result\n+    int sign = numerator * denominator < 0 ? -1 : 1;\n+\n+    // Return a new fraction with reduced numerator and denominator\n+    int reducedNum = sign * num / gcd;\n+    int reducedDen = den / gcd;\n+    return new Fraction(reducedNum, reducedDen);\n+}\n+\n+// Euclidean algorithm to find gcd recursively\n+private static int getGcd(int a, int b) {\n+    if (b == 0) {\n+        return a;\n     }\n+    return getGcd(b, a % b);\n+}\n \n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<-2/3> was not:<-2/3>",
    "test_result": "FAIL"
}