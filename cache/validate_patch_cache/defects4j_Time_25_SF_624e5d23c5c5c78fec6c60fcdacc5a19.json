{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int initialOffset = getOffset(instantLocal);\n    long instantAdjusted = instantLocal + initialOffset;\n    int offsetAdjusted = getOffset(instantAdjusted);\n\n    if (initialOffset != offsetAdjusted) {\n        long nextTransition = nextTransition(instantAdjusted);\n        long previousTransition = previousTransition(instantAdjusted);\n\n        if (nextTransition - instantAdjusted < DateTimeConstants.MILLIS_PER_MINUTE && nextTransition > instantAdjusted) {\n            // we are in a gap\n            int gapOffset = getOffset(nextTransition);\n            if (initialOffset < gapOffset) {\n                return initialOffset;\n            } else {\n                return gapOffset;\n            }\n        } else if (instantAdjusted - previousTransition < DateTimeConstants.MILLIS_PER_MINUTE && previousTransition < instantAdjusted) {\n            // we are in an overlap\n            int previousOffset = getOffset(previousTransition);\n            int latestOffset = getOffset(nextTransition);\n            if (previousOffset != latestOffset) {\n                // we have an overlap of some duration\n                if (inOverlap(instantAdjusted, previousTransition, nextTransition)) {\n                    // we are fully inside the overlap\n                    if (previousOffset > latestOffset) {\n                        // use earlier offset\n                        return previousOffset;\n                    } else {\n                        // use later offset\n                        return latestOffset;\n                    }\n                } else {\n                    // we are in the transition zone\n                    if (initialOffset < previousOffset) {\n                        return previousOffset;\n                    } else if (initialOffset < latestOffset) {\n                        return initialOffset;\n                    } else {\n                        return latestOffset;\n                    }\n                }\n            }\n        }\n    }\n    return offsetAdjusted;\n}\n\nprivate boolean inOverlap(long instant, long previousTransition, long nextTransition) {\n    return instant > previousTransition && instant < nextTransition;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..87af86a5 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,57 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+public int getOffsetFromLocal(long instantLocal) {\n+    int initialOffset = getOffset(instantLocal);\n+    long instantAdjusted = instantLocal + initialOffset;\n+    int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    if (initialOffset != offsetAdjusted) {\n+        long nextTransition = nextTransition(instantAdjusted);\n+        long previousTransition = previousTransition(instantAdjusted);\n+\n+        if (nextTransition - instantAdjusted < DateTimeConstants.MILLIS_PER_MINUTE && nextTransition > instantAdjusted) {\n+            // we are in a gap\n+            int gapOffset = getOffset(nextTransition);\n+            if (initialOffset < gapOffset) {\n+                return initialOffset;\n+            } else {\n+                return gapOffset;\n+            }\n+        } else if (instantAdjusted - previousTransition < DateTimeConstants.MILLIS_PER_MINUTE && previousTransition < instantAdjusted) {\n+            // we are in an overlap\n+            int previousOffset = getOffset(previousTransition);\n+            int latestOffset = getOffset(nextTransition);\n+            if (previousOffset != latestOffset) {\n+                // we have an overlap of some duration\n+                if (inOverlap(instantAdjusted, previousTransition, nextTransition)) {\n+                    // we are fully inside the overlap\n+                    if (previousOffset > latestOffset) {\n+                        // use earlier offset\n+                        return previousOffset;\n+                    } else {\n+                        // use later offset\n+                        return latestOffset;\n+                    }\n+                } else {\n+                    // we are in the transition zone\n+                    if (initialOffset < previousOffset) {\n+                        return previousOffset;\n+                    } else if (initialOffset < latestOffset) {\n+                        return initialOffset;\n+                    } else {\n+                        return latestOffset;\n+                    }\n                 }\n             }\n         }\n-        return offsetAdjusted;\n     }\n+    return offsetAdjusted;\n+}\n+\n+private boolean inOverlap(long instant, long previousTransition, long nextTransition) {\n+    return instant > previousTransition && instant < nextTransition;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}