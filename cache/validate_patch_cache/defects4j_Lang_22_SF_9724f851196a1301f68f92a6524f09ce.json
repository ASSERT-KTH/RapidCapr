{
    "patch": "private static int greatestCommonDivisor(int u, int v) {\n    // case when u or v is 0\n    if (u == 0 || v == 0) {\n        return Math.abs(u) + Math.abs(v);\n    }\n\n    // case when u or v is 1 or -1\n    if (Math.abs(u) == 1 || Math.abs(v) == 1) {\n        return 1;\n    }\n\n    // make u and v negative and keep track of sign\n    boolean isNegative = false;\n    if (u > 0) {\n        u = -u;\n        isNegative = true;\n    }\n    if (v > 0) {\n        v = -v;\n        isNegative = !isNegative;\n    }\n\n    // extract power of 2 from u and v\n    int shift = 0;\n    while (((u & 1) == 0) && ((v & 1) == 0)) {\n        u /= 2;\n        v /= 2;\n        shift++;\n    }\n\n    // remove factors of 2 from v\n    while ((v & 1) == 0) {\n        v /= 2;\n    }\n\n    // process odd integers u and v\n    while (u != 0) {\n        while ((u & 1) == 0) {\n            u /= 2;\n        }\n        if (u > 0) {\n            int t = u;\n            u = -v + (u / 2);\n            if (u >= 0) {\n                u = -t;\n            }\n        } else {\n            int t = u;\n            u = v + (u / 2);\n            if (u >= 0) {\n                u = -t;\n            }\n        }\n    }\n\n    // restore common factor of 2\n    int gcd = v << shift;\n\n    // restore sign if necessary\n    if (isNegative) {\n        gcd = -gcd;\n    }\n\n    return gcd;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/Fraction.java b/src/main/java/org/apache/commons/lang3/math/Fraction.java\nindex b36a156a..49f3b212 100644\n--- a/src/main/java/org/apache/commons/lang3/math/Fraction.java\n+++ b/src/main/java/org/apache/commons/lang3/math/Fraction.java\n@@ -578,51 +578,72 @@ public final class Fraction extends Number implements Comparable<Fraction> {\n      * @param v  a non-zero number\n      * @return the greatest common divisor, never zero\n      */\n-    private static int greatestCommonDivisor(int u, int v) {\n-        // From Commons Math:\n-        //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n-            return 1;\n+private static int greatestCommonDivisor(int u, int v) {\n+    // case when u or v is 0\n+    if (u == 0 || v == 0) {\n+        return Math.abs(u) + Math.abs(v);\n+    }\n+\n+    // case when u or v is 1 or -1\n+    if (Math.abs(u) == 1 || Math.abs(v) == 1) {\n+        return 1;\n+    }\n+\n+    // make u and v negative and keep track of sign\n+    boolean isNegative = false;\n+    if (u > 0) {\n+        u = -u;\n+        isNegative = true;\n+    }\n+    if (v > 0) {\n+        v = -v;\n+        isNegative = !isNegative;\n+    }\n+\n+    // extract power of 2 from u and v\n+    int shift = 0;\n+    while (((u & 1) == 0) && ((v & 1) == 0)) {\n+        u /= 2;\n+        v /= 2;\n+        shift++;\n+    }\n+\n+    // remove factors of 2 from v\n+    while ((v & 1) == 0) {\n+        v /= 2;\n+    }\n+\n+    // process odd integers u and v\n+    while (u != 0) {\n+        while ((u & 1) == 0) {\n+            u /= 2;\n         }\n-        // keep u and v negative, as negative integers range down to\n-        // -2^31, while positive numbers can only be as large as 2^31-1\n-        // (i.e. we can't necessarily negate a negative number without\n-        // overflow)\n-        if (u>0) { u=-u; } // make u negative\n-        if (v>0) { v=-v; } // make v negative\n-        // B1. [Find power of 2]\n-        int k=0;\n-        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n-            u/=2; v/=2; k++; // cast out twos.\n-        }\n-        if (k==31) {\n-            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n-        }\n-        // B2. Initialize: u and v have been divided by 2^k and at least\n-        //     one is odd.\n-        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n-        // t negative: u was odd, v may be even (t replaces v)\n-        // t positive: u was even, v is odd (t replaces u)\n-        do {\n-            /* assert u<0 && v<0; */\n-            // B4/B3: cast out twos from t.\n-            while ((t&1)==0) { // while t is even..\n-                t/=2; // cast out twos\n+        if (u > 0) {\n+            int t = u;\n+            u = -v + (u / 2);\n+            if (u >= 0) {\n+                u = -t;\n             }\n-            // B5 [reset max(u,v)]\n-            if (t>0) {\n+        } else {\n+            int t = u;\n+            u = v + (u / 2);\n+            if (u >= 0) {\n                 u = -t;\n-            } else {\n-                v = t;\n             }\n-            // B6/B3. at this point both u and v should be odd.\n-            t = (v - u)/2;\n-            // |u| larger: t positive (replace u)\n-            // |v| larger: t negative (replace v)\n-        } while (t!=0);\n-        return -u*(1<<k); // gcd is u*2^k\n+        }\n     }\n \n+    // restore common factor of 2\n+    int gcd = v << shift;\n+\n+    // restore sign if necessary\n+    if (isNegative) {\n+        gcd = -gcd;\n+    }\n+\n+    return gcd;\n+}\n+\n     // Arithmetic\n     //-------------------------------------------------------------------\n ",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}