{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n        return;\n    }\n\n    if (n.isFunction()) {\n        if (parent != null && parent.isAssign()) {\n            Node var = parent.getFirstChild();\n            if (var.isName()) {\n                // A named function expression like var a = function b() {}\n                return;\n            }\n        }\n\n        defineDeclaredFunction(n, parent);\n    } else if (n.isCatch()) {\n        defineCatch(n, parent);\n    } else if (n.isVar()) {\n        defineVar(n, parent);\n    }\n\n    if (n.isParamList() && parent == scope.getRootNode()) {\n        handleFunctionInputs(n);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..4ac7a0f4 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,33 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    if (n.isFunction()) {\n+        if (parent != null && parent.isAssign()) {\n+            Node var = parent.getFirstChild();\n+            if (var.isName()) {\n+                // A named function expression like var a = function b() {}\n+                return;\n+            }\n+        }\n+\n+        defineDeclaredFunction(n, parent);\n+    } else if (n.isCatch()) {\n+        defineCatch(n, parent);\n+    } else if (n.isVar()) {\n+        defineVar(n, parent);\n     }\n \n+    if (n.isParamList() && parent == scope.getRootNode()) {\n+        handleFunctionInputs(n);\n+    }\n+}\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}