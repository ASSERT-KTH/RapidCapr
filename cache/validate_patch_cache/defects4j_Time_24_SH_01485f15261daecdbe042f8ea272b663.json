{
    "patch": "                boolean conflict = false;\n                SavedField field = savedFields[i];\n                DateTimeField dtField = field.iField;\n                int value = field.iValue;\n                \n                if (i + 1 < count) {\n                    // Peek ahead to next field. \n                    // Any time zone adjustment occurs at the end of\n                    // a parse sequence, so adjust if the next field is a zone\n                    DateTimeField nextField = savedFields[i + 1].iField;\n                    if (nextField.getDurationField().getType() == DurationFieldType.hours().getType()) {\n                        // The current field plus next field are equal to a supported time zone offset.\n                        value = nextField.set(0, value) + nextField.getMinimumValue();\n                        if (value != dtField.getMaximumValue() + 1) {\n                            throw new IllegalFieldValueException(dtField.getType(), Integer.valueOf(value), null, null);\n                        }\n                        conflict = true;\n                    }\n                }\n                \n                if (!conflict) {\n                    millis = field.set(millis, resetFields);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..b07cd0a6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,28 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                boolean conflict = false;\n+                SavedField field = savedFields[i];\n+                DateTimeField dtField = field.iField;\n+                int value = field.iValue;\n+                \n+                if (i + 1 < count) {\n+                    // Peek ahead to next field. \n+                    // Any time zone adjustment occurs at the end of\n+                    // a parse sequence, so adjust if the next field is a zone\n+                    DateTimeField nextField = savedFields[i + 1].iField;\n+                    if (nextField.getDurationField().getType() == DurationFieldType.hours().getType()) {\n+                        // The current field plus next field are equal to a supported time zone offset.\n+                        value = nextField.set(0, value) + nextField.getMinimumValue();\n+                        if (value != dtField.getMaximumValue() + 1) {\n+                            throw new IllegalFieldValueException(dtField.getType(), Integer.valueOf(value), null, null);\n+                        }\n+                        conflict = true;\n+                    }\n+                }\n+                \n+                if (!conflict) {\n+                    millis = field.set(millis, resetFields);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}