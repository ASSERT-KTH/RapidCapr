{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int initialOffset = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        long instantAdjusted = instantLocal - initialOffset;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n\n        // handle the case when the adjusted offset is less (earlier) than the initial offset\n        if (initialOffset > offsetAdjusted) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - initialOffset);\n            if (nextLocal != nextAdjusted) {\n                return initialOffset;\n            }\n            instantAdjusted = nextLocal - 1;\n        }\n\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetAdjusted != initialOffset) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((initialOffset - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return initialOffset;\n                }\n            }\n        }\n\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..546e443e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,25 +878,37 @@ public abstract class DateTimeZone implements Serializable {\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n         // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n+        final int initialOffset = getOffset(instantLocal);\n         // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n+        long instantAdjusted = instantLocal - initialOffset;\n         final int offsetAdjusted = getOffset(instantAdjusted);\n+\n+        // handle the case when the adjusted offset is less (earlier) than the initial offset\n+        if (initialOffset > offsetAdjusted) {\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - initialOffset);\n+            if (nextLocal != nextAdjusted) {\n+                return initialOffset;\n+            }\n+            instantAdjusted = nextLocal - 1;\n+        }\n+\n         // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n+        if (offsetAdjusted != initialOffset) {\n             // we need to ensure that time is always after the DST gap\n             // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n+            if ((initialOffset - offsetAdjusted) < 0) {\n                 // if we just return offsetAdjusted then the time is pushed\n                 // back before the transition, whereas it should be\n                 // on or after the transition\n                 long nextLocal = nextTransition(instantAdjusted);\n                 long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                 if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+                    return initialOffset;\n                 }\n             }\n         }\n+\n         return offsetAdjusted;\n     }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}