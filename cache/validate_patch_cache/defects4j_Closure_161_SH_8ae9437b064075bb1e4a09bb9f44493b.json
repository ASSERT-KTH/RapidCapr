{
    "patch": "if (left.getType() == Token.ARRAYLIT && left.getChildCount() == 0) {\n  // Don't fold empty array literals because they don't have the side-effects\n  // we would like for GETPROP/GETELEM targets.\n  if (NodeUtil.isAssignmentOp(n.getParent())) {\n    // When empty array literal is used as an assignment target, it needs \n    // to be preserved to maintain side-effect.\n    return n;\n  } else {\n    // Replace the entire GETELEM with 'undefined'\n    Node undefinedNode = NodeUtil.newUndefinedNode(n);\n    parent.replaceChild(n, undefinedNode);\n    reportCodeChange();\n    return undefinedNode;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..605f54c0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,21 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+if (left.getType() == Token.ARRAYLIT && left.getChildCount() == 0) {\n+  // Don't fold empty array literals because they don't have the side-effects\n+  // we would like for GETPROP/GETELEM targets.\n+  if (NodeUtil.isAssignmentOp(n.getParent())) {\n+    // When empty array literal is used as an assignment target, it needs \n+    // to be preserved to maintain side-effect.\n+    return n;\n+  } else {\n+    // Replace the entire GETELEM with 'undefined'\n+    Node undefinedNode = NodeUtil.newUndefinedNode(n);\n+    parent.replaceChild(n, undefinedNode);\n+    reportCodeChange();\n+    return undefinedNode;\n+  }\n+}\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}