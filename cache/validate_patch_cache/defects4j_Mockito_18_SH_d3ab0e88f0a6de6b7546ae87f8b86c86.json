{
    "patch": "public ReturnValue execute(Container container) {\n    ReturnValue values = new ReturnValue();\n    try {\n        FileInputStream fis = new FileInputStream(container.getInputPath());\n        ObjectInputStream ois = new ObjectInputStream(fis);\n        List<Integer> numbers = (ArrayList<Integer>) ois.readObject();\n        ois.close();\n        fis.close();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) % 2 == 0) {\n                numbers.remove(i);\n                i--;\n            }\n        }\n\n        FileOutputStream fos = new FileOutputStream(container.getOutputPath());\n        ObjectOutputStream oos = new ObjectOutputStream(fos);\n        oos.writeObject(numbers);\n        oos.close();\n        fos.close();\n\n        values.setReturnValue(numbers);\n        values.setException(null);\n    } catch (Exception ex) {\n        values.setReturnValue(null);\n        values.setException(ex);\n\n    }\n\n    return values;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}