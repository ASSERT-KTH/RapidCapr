{
    "patch": "boolean currentFieldAdded = false;\nboolean nextFieldAdded = false;\n\nif (currentStrategy == null) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\ncurrentFieldAdded = currentStrategy.addRegex(this, regex);\nif (nextStrategy != null) {\n    patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n    while (patternMatcher.lookingAt()) {\n        currentFormatField = patternMatcher.group();\n        currentStrategy = nextStrategy;\n        nextStrategy = getStrategy(currentFormatField);\n        if (nextStrategy != null) {\n            nextFieldAdded = nextStrategy.addRegex(this, regex);\n            if (nextFieldAdded) {\n                collector.add(nextStrategy);\n            }\n        } else {\n            break;\n        }\n        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n    }\n} else if (!currentFieldAdded) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\n\nif (!currentFieldAdded) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\ncollector.add(currentStrategy);\ncurrentFormatField = null;\nstrategies = collector.toArray(new Strategy[0]);\nparsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..9439bb91 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,40 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+boolean currentFieldAdded = false;\n+boolean nextFieldAdded = false;\n+\n+if (currentStrategy == null) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+currentFieldAdded = currentStrategy.addRegex(this, regex);\n+if (nextStrategy != null) {\n+    patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+    while (patternMatcher.lookingAt()) {\n+        currentFormatField = patternMatcher.group();\n+        currentStrategy = nextStrategy;\n+        nextStrategy = getStrategy(currentFormatField);\n+        if (nextStrategy != null) {\n+            nextFieldAdded = nextStrategy.addRegex(this, regex);\n+            if (nextFieldAdded) {\n+                collector.add(nextStrategy);\n+            }\n+        } else {\n+            break;\n+        }\n+        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+    }\n+} else if (!currentFieldAdded) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+\n+if (!currentFieldAdded) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+collector.add(currentStrategy);\n+currentFormatField = null;\n+strategies = collector.toArray(new Strategy[0]);\n+parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}