{
    "patch": "    Node node;\n    switch (token.type) {\n      case LBRACK:\n        node = new OptionalTypeNode(checkToken(DELIM, null));\n        parseContextType(checkToken(RBRACK, null), ((OptionalTypeNode) node).elementtype);\n        break;\n      case VERTICAL:\n        node = new UnionTypeNode();\n        parseOptionalWhitespace();\n        ((UnionTypeNode) node).types.add(parseContextTypeExpression(checkToken(null, null)));\n        while (token.type == VERTICAL) {\n          checkType(token, null);\n          parseOptionalWhitespace();\n          ((UnionTypeNode) node).types.add(parseContextTypeExpression(checkToken(null, null)));\n        }\n        break;\n      default:\n        node = parseTypeName(token);\n        break;\n    }\n    return node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..4e0f8958 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,27 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+    Node node;\n+    switch (token.type) {\n+      case LBRACK:\n+        node = new OptionalTypeNode(checkToken(DELIM, null));\n+        parseContextType(checkToken(RBRACK, null), ((OptionalTypeNode) node).elementtype);\n+        break;\n+      case VERTICAL:\n+        node = new UnionTypeNode();\n+        parseOptionalWhitespace();\n+        ((UnionTypeNode) node).types.add(parseContextTypeExpression(checkToken(null, null)));\n+        while (token.type == VERTICAL) {\n+          checkType(token, null);\n+          parseOptionalWhitespace();\n+          ((UnionTypeNode) node).types.add(parseContextTypeExpression(checkToken(null, null)));\n+        }\n+        break;\n+      default:\n+        node = parseTypeName(token);\n+        break;\n+    }\n+    return node;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}