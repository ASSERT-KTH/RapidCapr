{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node expr, Node left, Node right,\n                        Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n  boolean hasEmptyString = false;\n\n  Node elem = arrayNode.getFirstChild();\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (sb.length() > 0) {\n        sb.append(NodeUtil.getStringValue(right));\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n      if (NodeUtil.getStringValue(elem).isEmpty()) {\n        hasEmptyString = true;\n      }\n    } else {\n      if (sb.length() > 0) {\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = new StringBuilder();\n        hasEmptyString = false;\n      }\n      arrayFoldedChildren.add(elem);\n      hasEmptyString = false;\n    }\n    elem = elem.getNext();\n  }\n\n  if (sb.length() > 0) {\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n\n  // If there are only empty strings in the array, replace the expression with the empty string\n  if (arrayFoldedChildren.isEmpty() && hasEmptyString) {\n    parent.replaceChild(expr, Node.newString(\"\"));\n    t.getCompiler().reportCodeChange();\n    return;\n  }\n\n  // If the array contains a single non-empty string literal, replace the expression with the string literal\n  if (arrayFoldedChildren.size() == 1 && !hasEmptyString) {\n    Node stringLit = arrayFoldedChildren.get(0);\n    if (NodeUtil.isImmutableValue(stringLit)) {\n      parent.replaceChild(expr, stringLit);\n      t.getCompiler().reportCodeChange();\n      return;\n    }\n  }\n\n  // Create the folded expression and replace the expression with it if it fits the budget\n  Node foldedExpr = IR.call(NodeUtil.newQName(t.getCompiler(), \"eval\"), Node.newString(\n        \"\\\"\" + Joiner.on(NodeUtil.getStringValue(right)).join(\n            Iterables.transform(arrayFoldedChildren, new Function<Node, String>() {\n              @Override\n              public String apply(Node node) {\n                if (node.isString()) {\n                  String str = NodeUtil.getStringValue(node);\n                  str = str.replace(\"\\\\\", \"\\\\\\\\\");\n                  str = str.replace(\"\\\"\", \"\\\\\\\"\");\n                  return \"\\\"\" + str + \"\\\"\";\n                }\n                return NodeUtil.getSourceCode(node);\n              }\n            }))\n        + \"\\\"\"));\n  int foldedCost = InlineCostEstimator.getCost(foldedExpr) + Joiner.on(\"\").join(\n      Iterables.transform(arrayFoldedChildren, new Function<Node, String>() {\n        @Override\n        public String apply(Node node) {\n          return NodeUtil.getStringValue(node);\n        }\n      })).length();\n  int originalCost = InlineCostEstimator.getCost(expr);\n\n  if (foldedCost <= originalCost) {\n    parent.replaceChild(expr, foldedExpr);\n    t.getCompiler().reportCodeChange();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..29d7b924 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,97 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n+void tryFoldStringJoin(NodeTraversal t, Node expr, Node left, Node right,\n+                        Node parent) {\n+  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = left.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n+      !functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+  StringBuilder sb = new StringBuilder();\n+  boolean hasEmptyString = false;\n+\n+  Node elem = arrayNode.getFirstChild();\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      if (sb.length() > 0) {\n+        sb.append(NodeUtil.getStringValue(right));\n+      }\n+      sb.append(NodeUtil.getStringValue(elem));\n+      if (NodeUtil.getStringValue(elem).isEmpty()) {\n+        hasEmptyString = true;\n+      }\n+    } else {\n+      if (sb.length() > 0) {\n+        arrayFoldedChildren.add(Node.newString(sb.toString()));\n+        sb = new StringBuilder();\n+        hasEmptyString = false;\n       }\n-      elem = elem.getNext();\n+      arrayFoldedChildren.add(elem);\n+      hasEmptyString = false;\n     }\n+    elem = elem.getNext();\n+  }\n \n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+  if (sb.length() > 0) {\n+    arrayFoldedChildren.add(Node.newString(sb.toString()));\n+  }\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+  // If there are only empty strings in the array, replace the expression with the empty string\n+  if (arrayFoldedChildren.isEmpty() && hasEmptyString) {\n+    parent.replaceChild(expr, Node.newString(\"\"));\n+    t.getCompiler().reportCodeChange();\n+    return;\n+  }\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  // If the array contains a single non-empty string literal, replace the expression with the string literal\n+  if (arrayFoldedChildren.size() == 1 && !hasEmptyString) {\n+    Node stringLit = arrayFoldedChildren.get(0);\n+    if (NodeUtil.isImmutableValue(stringLit)) {\n+      parent.replaceChild(expr, stringLit);\n+      t.getCompiler().reportCodeChange();\n+      return;\n+    }\n+  }\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n+  // Create the folded expression and replace the expression with it if it fits the budget\n+  Node foldedExpr = IR.call(NodeUtil.newQName(t.getCompiler(), \"eval\"), Node.newString(\n+        \"\\\"\" + Joiner.on(NodeUtil.getStringValue(right)).join(\n+            Iterables.transform(arrayFoldedChildren, new Function<Node, String>() {\n+              @Override\n+              public String apply(Node node) {\n+                if (node.isString()) {\n+                  String str = NodeUtil.getStringValue(node);\n+                  str = str.replace(\"\\\\\", \"\\\\\\\\\");\n+                  str = str.replace(\"\\\"\", \"\\\\\\\"\");\n+                  return \"\\\"\" + str + \"\\\"\";\n+                }\n+                return NodeUtil.getSourceCode(node);\n+              }\n+            }))\n+        + \"\\\"\"));\n+  int foldedCost = InlineCostEstimator.getCost(foldedExpr) + Joiner.on(\"\").join(\n+      Iterables.transform(arrayFoldedChildren, new Function<Node, String>() {\n+        @Override\n+        public String apply(Node node) {\n+          return NodeUtil.getStringValue(node);\n         }\n-        break;\n-    }\n+      })).length();\n+  int originalCost = InlineCostEstimator.getCost(expr);\n+\n+  if (foldedCost <= originalCost) {\n+    parent.replaceChild(expr, foldedExpr);\n     t.getCompiler().reportCodeChange();\n   }\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}