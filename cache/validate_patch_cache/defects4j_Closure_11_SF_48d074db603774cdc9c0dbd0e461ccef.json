{
    "patch": "public static String getprop(String prop) {\n    Process process = null;\n    try {\n        process = Runtime.getRuntime().exec(\"getprop \" + prop);\n        InputStream is = process.getInputStream();\n        InputStreamReader isr = new InputStreamReader(is);\n        BufferedReader br = new BufferedReader(isr);\n        String line;\n        while ((line = br.readLine()) != null) {\n            return line;\n        }\n    } catch (IOException e) {\n        return null;\n    } finally {\n        if (process != null) {\n            process.destroy();\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..f7bc4a32 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String prop) {\n+    Process process = null;\n+    try {\n+        process = Runtime.getRuntime().exec(\"getprop \" + prop);\n+        InputStream is = process.getInputStream();\n+        InputStreamReader isr = new InputStreamReader(is);\n+        BufferedReader br = new BufferedReader(isr);\n+        String line;\n+        while ((line = br.readLine()) != null) {\n+            return line;\n+        }\n+    } catch (IOException e) {\n+        return null;\n+    } finally {\n+        if (process != null) {\n+            process.destroy();\n+        }\n+    }\n+    return null;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}