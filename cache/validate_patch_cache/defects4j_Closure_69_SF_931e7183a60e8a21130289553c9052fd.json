{
    "patch": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = checkNotNull(n.getFirstChild());\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType.isFunctionType()) {\n      FunctionType functionType = childType.toMaybeFunctionType();\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if (functionJSDocInfo != null) {\n        String originalName = functionJSDocInfo.getFileoverview().getOriginalName();\n        isExtern = originalName.endsWith(\".externs.js\");\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined in an extern.\n      if (functionType.isConstructor() && !functionType.isNativeObjectType()) {\n        if (functionType.getReturnType().isUnknownType()\n            || functionType.getReturnType().isVoidType()\n            || !isExtern) {\n          report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n          ensureTyped(t, n);\n          return;\n        }\n\n        if (functionType.getTypeOfThis() != null) {\n          report(t, n, FUNCTION_WITHOUT_TYPE_THIS, childType.toString());\n          ensureTyped(t, n);\n          return;\n        }\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n      if (functionType.getTypeOfThis() != null && (n.getParent() == null\n          || (!n.getParent().isGetProp() && !n.getParent().isGetElem()))) {\n        report(t, n, INCORRECT_CALL_TO_FUNCTION_WITH_TYPE_THIS, childType.toString());\n        ensureTyped(t, n);\n        return;\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..ff37a2a0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1541,8 +1541,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * scope chain to use in name lookups as well as error reporting.\n    * @param n The node being visited.\n    */\n-  private void visitCall(NodeTraversal t, Node n) {\n-    Node child = n.getFirstChild();\n+private void visitCall(NodeTraversal t, Node n) {\n+    Node child = checkNotNull(n.getFirstChild());\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n \n     if (!childType.canBeCalled()) {\n@@ -1553,40 +1553,47 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n     // A couple of types can be called as if they were functions.\n     // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-      FunctionType functionType = (FunctionType) childType;\n+    if (childType.isFunctionType()) {\n+      FunctionType functionType = childType.toMaybeFunctionType();\n \n       boolean isExtern = false;\n       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n-        CompilerInput functionSource = compiler.getInput(sourceName);\n-        isExtern = functionSource.isExtern();\n+      if (functionJSDocInfo != null) {\n+        String originalName = functionJSDocInfo.getFileoverview().getOriginalName();\n+        isExtern = originalName.endsWith(\".externs.js\");\n       }\n \n       // Non-native constructors should not be called directly\n-      // unless they specify a return type and are defined\n-      // in an extern.\n-      if (functionType.isConstructor() &&\n-          !functionType.isNativeObjectType() &&\n-          (functionType.getReturnType().isUnknownType() ||\n-           functionType.getReturnType().isVoidType() ||\n-           !isExtern)) {\n-        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+      // unless they specify a return type and are defined in an extern.\n+      if (functionType.isConstructor() && !functionType.isNativeObjectType()) {\n+        if (functionType.getReturnType().isUnknownType()\n+            || functionType.getReturnType().isVoidType()\n+            || !isExtern) {\n+          report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+          ensureTyped(t, n);\n+          return;\n+        }\n+\n+        if (functionType.getTypeOfThis() != null) {\n+          report(t, n, FUNCTION_WITHOUT_TYPE_THIS, childType.toString());\n+          ensureTyped(t, n);\n+          return;\n+        }\n       }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n-      // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n+      if (functionType.getTypeOfThis() != null && (n.getParent() == null\n+          || (!n.getParent().isGetProp() && !n.getParent().isGetElem()))) {\n+        report(t, n, INCORRECT_CALL_TO_FUNCTION_WITH_TYPE_THIS, childType.toString());\n+        ensureTyped(t, n);\n+        return;\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n     } else {\n       ensureTyped(t, n);\n     }\n-\n-    // TODO: Add something to check for calls of RegExp objects, which is not\n-    // supported by IE.  Either say something about the return type or warn\n-    // about the non-portability of the call or both.\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}