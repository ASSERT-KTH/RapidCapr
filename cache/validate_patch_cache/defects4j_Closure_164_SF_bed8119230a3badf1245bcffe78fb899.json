{
    "patch": "public boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  if (!this.returnType.isEquivalentTo(that.returnType)) {\n    return false;\n  }\n\n  if (parameters.hasChildren() != that.parameters.hasChildren()) {\n    // If one function has no parameters and the other does, they are not subtypes.\n    return false;\n  }\n\n  if (parameters.hasChildren()) {\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n\n    // Iterate through each parameter, making sure that:\n    //   - this param type is subtype of that param type\n    //   - if that param is required, so is this param\n    //   - if this param is varargs, so is that param\n    //   - if that param is varargs, this must have at least as many varargs\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n\n      // Ensure that this parameter is not required unless that parameter is required (covariance).\n      boolean thisIsRequired = TypeCheck.isParameterRequired(thisParam);\n      boolean thatIsRequired = TypeCheck.isParameterRequired(thatParam);\n      if (!thatIsRequired && thisIsRequired) {\n        return false;\n      }\n\n      // Ensure that this parameter is a subtype of that parameter.\n      if (!thisParamType.isSubtype(thatParamType)) {\n        return false;\n      }\n\n      // If that parameter is varargs, this parameter must also be varargs (covariance).\n      boolean thatIsVarargs = thatParam.isVarArgs();\n      boolean thisIsVarargs = thisParam.isVarArgs();\n      if (thatIsVarargs && !thisIsVarargs) {\n        return false;\n      }\n\n      if (thatIsVarargs) {\n        // If that parameter is varargs, this parameter must have at least as many parameters,\n        // including varargs.\n        int thisParamCount = parameters.getChildCount() - (thisIsVarargs ? 1 : 0);\n        int thatParamCount = that.parameters.getChildCount() - (thatIsVarargs ? 1 : 0);\n        if (thisParamCount < thatParamCount) {\n          return false;\n        }\n      }\n\n      thisParam = thisParam.getNext();\n      thatParam = thatParam.getNext();\n    }\n\n    // If the two parameter lists are not the same length,\n    // and the last parameter in that parameter list is required,\n    // but missing from this parameter list, then these two functions\n    // are not subtypes of each other, and we should return false.\n    if (thatParam != null && TypeCheck.isParameterRequired(thatParam)) {\n      return false;\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..7901783e 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,82 +77,80 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n-    if (!(other instanceof ArrowType)) {\n-      return false;\n-    }\n+public boolean isSubtype(JSType other) {\n+  if (!(other instanceof ArrowType)) {\n+    return false;\n+  }\n \n-    ArrowType that = (ArrowType) other;\n+  ArrowType that = (ArrowType) other;\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+  if (!this.returnType.isEquivalentTo(that.returnType)) {\n+    return false;\n+  }\n \n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n-    }\n+  if (parameters.hasChildren() != that.parameters.hasChildren()) {\n+    // If one function has no parameters and the other does, they are not subtypes.\n+    return false;\n+  }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n+  if (parameters.hasChildren()) {\n     Node thisParam = parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n+\n+    // Iterate through each parameter, making sure that:\n+    //   - this param type is subtype of that param type\n+    //   - if that param is required, so is this param\n+    //   - if this param is varargs, so is that param\n+    //   - if that param is varargs, this must have at least as many varargs\n     while (thisParam != null && thatParam != null) {\n       JSType thisParamType = thisParam.getJSType();\n       JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n-      }\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n-\n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+      // Ensure that this parameter is not required unless that parameter is required (covariance).\n+      boolean thisIsRequired = TypeCheck.isParameterRequired(thisParam);\n+      boolean thatIsRequired = TypeCheck.isParameterRequired(thatParam);\n+      if (!thatIsRequired && thisIsRequired) {\n+        return false;\n+      }\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n+      // Ensure that this parameter is a subtype of that parameter.\n+      if (!thisParamType.isSubtype(thatParamType)) {\n+        return false;\n       }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n+\n+      // If that parameter is varargs, this parameter must also be varargs (covariance).\n+      boolean thatIsVarargs = thatParam.isVarArgs();\n+      boolean thisIsVarargs = thisParam.isVarArgs();\n+      if (thatIsVarargs && !thisIsVarargs) {\n+        return false;\n       }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n+      if (thatIsVarargs) {\n+        // If that parameter is varargs, this parameter must have at least as many parameters,\n+        // including varargs.\n+        int thisParamCount = parameters.getChildCount() - (thisIsVarargs ? 1 : 0);\n+        int thatParamCount = that.parameters.getChildCount() - (thatIsVarargs ? 1 : 0);\n+        if (thisParamCount < thatParamCount) {\n+          return false;\n+        }\n       }\n-    }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+      thisParam = thisParam.getNext();\n+      thatParam = thatParam.getNext();\n+    }\n \n-    return true;\n+    // If the two parameter lists are not the same length,\n+    // and the last parameter in that parameter list is required,\n+    // but missing from this parameter list, then these two functions\n+    // are not subtypes of each other, and we should return false.\n+    if (thatParam != null && TypeCheck.isParameterRequired(thatParam)) {\n+      return false;\n+    }\n   }\n \n+  return true;\n+}\n+\n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter\n    *     spec.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}