{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct != null && ct.isConstructor()) {\n        if (ct.hasInstanceType()) {\n          type = ct.getInstanceType().restrictByNotNullOrUndefined();\n        } else if (ct.getReturnType() != null) {\n          type = ct.getReturnType().restrictByNotNullOrUndefined();\n        }\n      }\n    }\n  }\n  if (type == null) {\n    type = getNativeType(JSTypeNative.OBJECT_TYPE);\n  }\n  n.setJSType(type);\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  Node parent = n.getParent();\n  if (parent != null && parent.isAssign() && n == parent.getLastChild()) {\n    // This is a constructor call in a variable assignment.\n    // Constrain the type of the variable to the instance type.\n    Node var = parent.getFirstChild();\n    JSType varType = var.getJSType();\n    if (varType == null) {\n      varType = type;\n    } else if (varType.isUnknownType()) {\n      varType = getNativeType(UNKNOWN_TYPE);\n    } else {\n      varType = varType.restrictByNotNullOrUndefined();\n      FunctionType varCt = varType.toMaybeFunctionType();\n      if (varCt != null && varCt.isConstructor() && varCt.hasInstanceType()) {\n        if (ct.hasInstanceType()) {\n          varType = varCt.getInstanceType().getGreatestSubtype(type).restrictByNotNullOrUndefined();\n        } else if (ct.getReturnType() != null) {\n          varType = varCt.getInstanceType().getGreatestSubtype(ct.getReturnType()).restrictByNotNullOrUndefined();\n        }\n      } else {\n        varType = varType.getGreatestSubtype(type).restrictByNotNullOrUndefined();\n      }\n    }\n    var.setJSType(varType);\n    scope = scope.withType(var.getString(), varType);\n  }\n  Preconditions.checkArgument(scope.getWarnings().isEmpty());\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..6a748f1f 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,62 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+  if (constructorType != null) {\n+    constructorType = constructorType.restrictByNotNullOrUndefined();\n+    if (constructorType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct != null && ct.isConstructor()) {\n+        if (ct.hasInstanceType()) {\n+          type = ct.getInstanceType().restrictByNotNullOrUndefined();\n+        } else if (ct.getReturnType() != null) {\n+          type = ct.getReturnType().restrictByNotNullOrUndefined();\n         }\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+  }\n+  if (type == null) {\n+    type = getNativeType(JSTypeNative.OBJECT_TYPE);\n+  }\n+  n.setJSType(type);\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n+  }\n+  Node parent = n.getParent();\n+  if (parent != null && parent.isAssign() && n == parent.getLastChild()) {\n+    // This is a constructor call in a variable assignment.\n+    // Constrain the type of the variable to the instance type.\n+    Node var = parent.getFirstChild();\n+    JSType varType = var.getJSType();\n+    if (varType == null) {\n+      varType = type;\n+    } else if (varType.isUnknownType()) {\n+      varType = getNativeType(UNKNOWN_TYPE);\n+    } else {\n+      varType = varType.restrictByNotNullOrUndefined();\n+      FunctionType varCt = varType.toMaybeFunctionType();\n+      if (varCt != null && varCt.isConstructor() && varCt.hasInstanceType()) {\n+        if (ct.hasInstanceType()) {\n+          varType = varCt.getInstanceType().getGreatestSubtype(type).restrictByNotNullOrUndefined();\n+        } else if (ct.getReturnType() != null) {\n+          varType = varCt.getInstanceType().getGreatestSubtype(ct.getReturnType()).restrictByNotNullOrUndefined();\n+        }\n+      } else {\n+        varType = varType.getGreatestSubtype(type).restrictByNotNullOrUndefined();\n+      }\n     }\n-    return scope;\n+    var.setJSType(varType);\n+    scope = scope.withType(var.getString(), varType);\n   }\n+  Preconditions.checkArgument(scope.getWarnings().isEmpty());\n+  return scope;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}