{
    "patch": "public static double getTypedPercent(ArrayList<JSONObject> list) throws JSONException {\n    int typedCount = 0;\n    int totalCount = list.size();\n    for (JSONObject obj : list) {\n        if (obj.getString(\"type\").equals(\"typed\")) { \n            typedCount++;\n        }\n    }\n    return (double) typedCount / totalCount * 100; // fix the formula\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..97c0d7fb 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(ArrayList<JSONObject> list) throws JSONException {\n+    int typedCount = 0;\n+    int totalCount = list.size();\n+    for (JSONObject obj : list) {\n+        if (obj.getString(\"type\").equals(\"typed\")) { \n+            typedCount++;\n+        }\n+    }\n+    return (double) typedCount / totalCount * 100; // fix the formula\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}