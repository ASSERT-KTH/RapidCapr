{
    "patch": "case TRUE:\n    TypePair subtypes = this.getTypesUnderEquality(that);\n    // If one of the types is null or undefined, return the non-null/undefined type as typeA\n    if (subtypes.typeA.isNullable()) {\n        return new TypePair(subtypes.typeB, subtypes.typeA);\n    } else {\n        return subtypes;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..7a690a52 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,14 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+case TRUE:\n+    TypePair subtypes = this.getTypesUnderEquality(that);\n+    // If one of the types is null or undefined, return the non-null/undefined type as typeA\n+    if (subtypes.typeA.isNullable()) {\n+        return new TypePair(subtypes.typeB, subtypes.typeA);\n+    } else {\n+        return subtypes;\n+    }\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}