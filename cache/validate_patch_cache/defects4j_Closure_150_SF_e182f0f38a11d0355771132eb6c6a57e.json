{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n        return;\n    }\n\n    if (n.getType() == Token.FUNCTION) {\n        if (parent != null && parent.getType() == Token.NAME) {\n            return;\n        }\n        defineDeclaredFunction(n, parent);\n        return;\n    }\n\n    if (n.getType() == Token.CATCH) {\n        defineCatch(n, parent);\n        return;\n    }\n\n    if (n.getType() == Token.VAR) {\n        defineVar(n, parent);\n        return;\n    }\n\n    attachLiteralTypes(n);\n    checkExpression(n);\n}\n\nprivate void checkExpression(Node n) {\n    JSTypeExpression expr = nodeToTypeExprMap.get(n);\n    if (expr != null) {\n        JSType jsType = typeParser.evaluateTypeExpression(expr);\n        TypeMismatch lvalueType = mismatchPairMap.get(n);\n        if (lvalueType != null) {\n            if (jsType != null && !jsType.equals(lvalueType.getRight())) {\n                reportError(n, lvalueType);\n            }\n            mismatchPairMap.remove(n);\n        }\n    } else {\n        TypeMismatch lvalueTypeMismatch = mismatchPairMap.get(n);\n        if (lvalueTypeMismatch != null) {\n            JSType lvalueType = lvalueTypeMismatch.getRight();\n            if (lvalueType != null && !lvalueType.isUnknownType()) {\n                reportError(n, lvalueTypeMismatch);\n            }\n            mismatchPairMap.remove(n);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..dc0cbfbc 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,57 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+    if (n.getType() == Token.FUNCTION) {\n+        if (parent != null && parent.getType() == Token.NAME) {\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        defineDeclaredFunction(n, parent);\n+        return;\n     }\n \n+    if (n.getType() == Token.CATCH) {\n+        defineCatch(n, parent);\n+        return;\n+    }\n+\n+    if (n.getType() == Token.VAR) {\n+        defineVar(n, parent);\n+        return;\n+    }\n+\n+    attachLiteralTypes(n);\n+    checkExpression(n);\n+}\n+\n+private void checkExpression(Node n) {\n+    JSTypeExpression expr = nodeToTypeExprMap.get(n);\n+    if (expr != null) {\n+        JSType jsType = typeParser.evaluateTypeExpression(expr);\n+        TypeMismatch lvalueType = mismatchPairMap.get(n);\n+        if (lvalueType != null) {\n+            if (jsType != null && !jsType.equals(lvalueType.getRight())) {\n+                reportError(n, lvalueType);\n+            }\n+            mismatchPairMap.remove(n);\n+        }\n+    } else {\n+        TypeMismatch lvalueTypeMismatch = mismatchPairMap.get(n);\n+        if (lvalueTypeMismatch != null) {\n+            JSType lvalueType = lvalueTypeMismatch.getRight();\n+            if (lvalueType != null && !lvalueType.isUnknownType()) {\n+                reportError(n, lvalueTypeMismatch);\n+            }\n+            mismatchPairMap.remove(n);\n+        }\n+    }\n+}\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}