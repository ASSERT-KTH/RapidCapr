{
    "patch": "import java.util.Properties;\n\npublic class PropertyGetter {\n\n  Properties systemProps = new Properties();\n\n  public String getProp(String propName) {\n    return System.getProperty(propName);\n  }\n\n  public String getEnv(String envName) {\n    return System.getenv(envName);\n  }\n\n  public String[] getWarnings() {\n    return null;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..aa913c9b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+import java.util.Properties;\n+\n+public class PropertyGetter {\n+\n+  Properties systemProps = new Properties();\n+\n+  public String getProp(String propName) {\n+    return System.getProperty(propName);\n+  }\n+\n+  public String getEnv(String envName) {\n+    return System.getenv(envName);\n+  }\n+\n+  public String[] getWarnings() {\n+    return null;\n+  }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}