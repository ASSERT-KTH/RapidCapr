{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\nif(candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n    field.setAccessible(true);\n    try {\n        field.set(fieldInstance, field.getType().cast(candidate));\n        mocks.remove(candidate); // remove the used mock from the set of available mocks\n    } catch(IllegalAccessException e) {\n        throw new RuntimeException(\"Unable to inject mock candidate\", e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..e7645f829 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,19 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+if(candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n+    field.setAccessible(true);\n+    try {\n+        field.set(fieldInstance, field.getType().cast(candidate));\n+        mocks.remove(candidate); // remove the used mock from the set of available mocks\n+    } catch(IllegalAccessException e) {\n+        throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}