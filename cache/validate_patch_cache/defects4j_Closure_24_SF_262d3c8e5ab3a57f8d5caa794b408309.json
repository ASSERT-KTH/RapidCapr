{
    "patch": "        if (parent.isVar() || parent.isFunction()) { \n          // check if the parent is either a var or a function node\n          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n            String name = n.getString();\n            Var aliasVar = scope.getVar(name);\n            if (aliasVar.getParentNode().isLet()) {\n              // if the parent of the alias variable is a let node, \n              // it indicates that it's a local variable and not an alias.\n              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n            } else {\n              String qualifiedName =\n                  aliasVar.getInitialValue().getQualifiedName();\n              aliases.put(name, aliasVar);\n              transformation.addAlias(name, qualifiedName);\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..ca51ca34 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,22 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n+        if (parent.isVar() || parent.isFunction()) { \n+          // check if the parent is either a var or a function node\n           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n-      }\n-    }\n+            String name = n.getString();\n+            Var aliasVar = scope.getVar(name);\n+            if (aliasVar.getParentNode().isLet()) {\n+              // if the parent of the alias variable is a let node, \n+              // it indicates that it's a local variable and not an alias.\n+              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+            } else {\n+              String qualifiedName =\n+                  aliasVar.getInitialValue().getQualifiedName();\n+              aliases.put(name, aliasVar);\n+              transformation.addAlias(name, qualifiedName);\n+            }\n+          }\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}