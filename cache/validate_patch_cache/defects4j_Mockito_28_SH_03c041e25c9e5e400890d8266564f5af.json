{
    "patch": "        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        if (candidate != null) {\n            try {\n                if (!field.isAccessible()) {\n                    field.setAccessible(true);\n                }\n                field.set(fieldInstance, candidate);\n            } catch (IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..a51b6f235 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,19 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        if (candidate != null) {\n+            try {\n+                if (!field.isAccessible()) {\n+                    field.setAccessible(true);\n+                }\n+                field.set(fieldInstance, candidate);\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(e);\n+            }\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}