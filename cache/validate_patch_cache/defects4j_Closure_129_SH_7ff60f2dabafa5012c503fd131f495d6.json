{
    "patch": "// Traverse through any cast nodes and update first node accordingly\nwhile (first != null && first.isCast()) {\n  first = first.getFirstChild();\n}\n\nif (!NodeUtil.isGet(first)) {\n  n.putBooleanProp(Node.FREE_CALL, true);\n}\n\n// Keep track of the context in which eval is called. It is important\n// to distinguish between \"(0, eval)()\" and \"eval()\".\nif (first != null && \"eval\".equals(first.getString())) {\n  if (first.isName()) {\n    first.putBooleanProp(Node.DIRECT_EVAL, true);\n  } else if (first.isGetProp() && NodeUtil.isNullOrUndefined(first.getLastChild())) {\n    Node parent = first.getParent();\n    if (parent != null && NodeUtil.isComma(parent)) {\n      Node grandparent = parent.getParent();\n      if (grandparent != null && grandparent.isNumber()) {\n        grandparent.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..c71a864d 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,30 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+// Traverse through any cast nodes and update first node accordingly\n+while (first != null && first.isCast()) {\n+  first = first.getFirstChild();\n+}\n+\n+if (!NodeUtil.isGet(first)) {\n+  n.putBooleanProp(Node.FREE_CALL, true);\n+}\n+\n+// Keep track of the context in which eval is called. It is important\n+// to distinguish between \"(0, eval)()\" and \"eval()\".\n+if (first != null && \"eval\".equals(first.getString())) {\n+  if (first.isName()) {\n+    first.putBooleanProp(Node.DIRECT_EVAL, true);\n+  } else if (first.isGetProp() && NodeUtil.isNullOrUndefined(first.getLastChild())) {\n+    Node parent = first.getParent();\n+    if (parent != null && NodeUtil.isComma(parent)) {\n+      Node grandparent = parent.getParent();\n+      if (grandparent != null && grandparent.isNumber()) {\n+        grandparent.putBooleanProp(Node.DIRECT_EVAL, true);\n+      }\n+    }\n+  }\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}