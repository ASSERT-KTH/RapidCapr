{
    "patch": "MockCandidate candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif(candidate != null) {\n    Object mock = candidate.thenInject();\n    if(mock != null) {\n        field.setAccessible(true);\n        try {\n            field.set(fieldInstance, mock);\n            mocks.remove(mock);\n        } catch(IllegalAccessException e) {\n            throw new RuntimeException(\"Unable to inject mock candidate\", e);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..249391dd2 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,22 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+MockCandidate candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if(candidate != null) {\n+    Object mock = candidate.thenInject();\n+    if(mock != null) {\n+        field.setAccessible(true);\n+        try {\n+            field.set(fieldInstance, mock);\n+            mocks.remove(mock);\n+        } catch(IllegalAccessException e) {\n+            throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+        }\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}