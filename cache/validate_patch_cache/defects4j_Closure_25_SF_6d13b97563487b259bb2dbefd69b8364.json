{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n\n    if (constructor == null) {\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n        return scope;\n    }\n\n    // Visit the arguments of the constructor first so that the arguments are evaluated\n    // in the scope that existed before the constructor was called.\n    // Arguments are evaluated from left to right.\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n\n    // Visit the constructor node.\n    scope = traverse(constructor, scope);\n\n    JSType constructorType = constructor.getJSType();\n    if (constructorType == null) {\n        // If the constructor's type is not known, set the new node's type to unknown.\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n    } else if (constructorType.isFunctionType()) {\n        // If the constructor's type is a function, get the instance type and set the new node's type to it.\n        FunctionType constructorFunctionType = constructorType.toMaybeFunctionType();\n        if (constructorFunctionType != null && constructorFunctionType.isConstructor()) {\n            JSType instanceType = constructorFunctionType.getInstanceType();\n            if (instanceType == null) {\n                // If the instance type of the constructor is not known, set the new node's type to unknown.\n                n.setJSType(getNativeType(UNKNOWN_TYPE));\n            } else {\n                n.setJSType(instanceType);\n            }\n        } else {\n            // If the constructor is not a constructor function type, set the new node's type to unknown.\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n        }\n\n    } else if (constructorType.isUnknownType()) {\n        // If the constructor's type is unknown, set the new node's type to unknown.\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n    } else {\n        // If the constructor's type is not a function type and not unknown, set the new node's type to unknown.\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n    }\n\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..07705962 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,54 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n+\n+    if (constructor == null) {\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n+        return scope;\n+    }\n+\n+    // Visit the arguments of the constructor first so that the arguments are evaluated\n+    // in the scope that existed before the constructor was called.\n+    // Arguments are evaluated from left to right.\n+    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+        scope = traverse(arg, scope);\n+    }\n+\n+    // Visit the constructor node.\n     scope = traverse(constructor, scope);\n+\n     JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+    if (constructorType == null) {\n+        // If the constructor's type is not known, set the new node's type to unknown.\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n+    } else if (constructorType.isFunctionType()) {\n+        // If the constructor's type is a function, get the instance type and set the new node's type to it.\n+        FunctionType constructorFunctionType = constructorType.toMaybeFunctionType();\n+        if (constructorFunctionType != null && constructorFunctionType.isConstructor()) {\n+            JSType instanceType = constructorFunctionType.getInstanceType();\n+            if (instanceType == null) {\n+                // If the instance type of the constructor is not known, set the new node's type to unknown.\n+                n.setJSType(getNativeType(UNKNOWN_TYPE));\n+            } else {\n+                n.setJSType(instanceType);\n+            }\n+        } else {\n+            // If the constructor is not a constructor function type, set the new node's type to unknown.\n+            n.setJSType(getNativeType(UNKNOWN_TYPE));\n         }\n-      }\n-    }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+\n+    } else if (constructorType.isUnknownType()) {\n+        // If the constructor's type is unknown, set the new node's type to unknown.\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n+    } else {\n+        // If the constructor's type is not a function type and not unknown, set the new node's type to unknown.\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n     }\n+\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[foo: (number|undefined)]}> but was:<{[]}>",
    "test_result": "FAIL"
}