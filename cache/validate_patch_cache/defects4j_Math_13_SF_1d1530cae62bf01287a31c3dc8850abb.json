{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    if (n <= 50) { // if matrix is small, use existing method\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    } else { // if matrix is large, use iterative method\n        final CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n        final RealMatrix l = cholesky.getL();\n        final RealMatrix c = MatrixUtils.createRealIdentityMatrix(n);\n\n        for (int i = 0; i < n; i++) {\n            for (int j = i+1; j < n; j++) {\n                final double q = (l.getEntry(i,j) * c.getEntry(j,j) - l.getEntry(j,i) * c.getEntry(i,i))\n                        / (c.getEntry(j,j) - c.getEntry(i,i));\n                c.setEntry(i,j, q);\n                c.setEntry(j,i, q);\n            }\n            final double r = l.getEntry(i,i) * c.getEntry(i,i);\n            c.setEntry(i,i, r);\n        }\n        return c;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..93546adef 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    if (n <= 50) { // if matrix is small, use existing method\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n+    } else { // if matrix is large, use iterative method\n+        final CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n+        final RealMatrix l = cholesky.getL();\n+        final RealMatrix c = MatrixUtils.createRealIdentityMatrix(n);\n+\n+        for (int i = 0; i < n; i++) {\n+            for (int j = i+1; j < n; j++) {\n+                final double q = (l.getEntry(i,j) * c.getEntry(j,j) - l.getEntry(j,i) * c.getEntry(i,i))\n+                        / (c.getEntry(j,j) - c.getEntry(i,i));\n+                c.setEntry(i,j, q);\n+                c.setEntry(j,i, q);\n+            }\n+            final double r = l.getEntry(i,i) * c.getEntry(i,i);\n+            c.setEntry(i,i, r);\n+        }\n+        return c;\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}