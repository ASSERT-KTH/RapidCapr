{
    "patch": "  private Set<String> analyzeTheming(List<String> rules,\n      Set<String> fontNamesAndSizes, Set<String> colors) {\n    List<String> matches = new ArrayList<>();\n    Set<String> missing = new HashSet<>();\n\n    // Check for font names and sizes.\n    if (fontNamesAndSizes != null) {\n      matches.addAll(this.matchRegex(regexFontNamesAndSizes, rules));\n      missing.addAll(fontNamesAndSizes);\n    }\n\n    // Check for colors.\n    if (colors != null) {\n      matches.addAll(this.matchRegex(regexColors, rules));\n      missing.addAll(colors);\n    }\n\n    // Remove all static matches from potential missing items.\n    missing.removeAll(matches);\n\n    // Handle the special case when a single color is used both as a hex and a\n    // named color.\n    if (missing.contains(\"black\") && missing.contains(\"#000000\")) {\n      missing.remove(\"black\");\n      matches.remove(\"#000000\");\n    }\n\n    // Optionally remove matches too short to be usable.\n    if (this.suffixLessThanTwo) {\n      matches.removeIf(match -> match.length() < 2);\n    }\n\n    // Optionally remove non-letter suffixes.\n    if (this.ignoreNumericSuffix) {\n      matches.replaceAll(match -> match.replaceAll(\"[^a-zA-Z]+?\", \"\"));\n    }\n\n    // Handle exact matches before fuzzy matching.\n    List<String> exactMatches = null;\n    if (this.enforceExactMatches) {\n      exactMatches = new ArrayList<>();\n      for (String match : matches) {\n        if (this.exactMatchValues.contains(match)) {\n          exactMatches.add(match);\n        }\n      }\n      missing.removeAll(exactMatches);\n      matches.removeAll(exactMatches);\n    }\n\n    // Fuzzy match remaining missing items.\n    if (!missing.isEmpty()) {\n      matches.addAll(this.fuzzyMatch(missing, matches));\n    }\n\n    // Add exact matches back into result list.\n    if (exactMatches != null) {\n      matches.addAll(exactMatches);\n      Collections.sort(matches);\n    }\n\n    // Sort result before returning.\n    Collections.sort(matches);\n    return new LinkedHashSet<String>(matches);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..20ebc146 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,71 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+  private Set<String> analyzeTheming(List<String> rules,\n+      Set<String> fontNamesAndSizes, Set<String> colors) {\n+    List<String> matches = new ArrayList<>();\n+    Set<String> missing = new HashSet<>();\n+\n+    // Check for font names and sizes.\n+    if (fontNamesAndSizes != null) {\n+      matches.addAll(this.matchRegex(regexFontNamesAndSizes, rules));\n+      missing.addAll(fontNamesAndSizes);\n+    }\n+\n+    // Check for colors.\n+    if (colors != null) {\n+      matches.addAll(this.matchRegex(regexColors, rules));\n+      missing.addAll(colors);\n+    }\n+\n+    // Remove all static matches from potential missing items.\n+    missing.removeAll(matches);\n+\n+    // Handle the special case when a single color is used both as a hex and a\n+    // named color.\n+    if (missing.contains(\"black\") && missing.contains(\"#000000\")) {\n+      missing.remove(\"black\");\n+      matches.remove(\"#000000\");\n+    }\n+\n+    // Optionally remove matches too short to be usable.\n+    if (this.suffixLessThanTwo) {\n+      matches.removeIf(match -> match.length() < 2);\n+    }\n+\n+    // Optionally remove non-letter suffixes.\n+    if (this.ignoreNumericSuffix) {\n+      matches.replaceAll(match -> match.replaceAll(\"[^a-zA-Z]+?\", \"\"));\n+    }\n+\n+    // Handle exact matches before fuzzy matching.\n+    List<String> exactMatches = null;\n+    if (this.enforceExactMatches) {\n+      exactMatches = new ArrayList<>();\n+      for (String match : matches) {\n+        if (this.exactMatchValues.contains(match)) {\n+          exactMatches.add(match);\n+        }\n+      }\n+      missing.removeAll(exactMatches);\n+      matches.removeAll(exactMatches);\n+    }\n+\n+    // Fuzzy match remaining missing items.\n+    if (!missing.isEmpty()) {\n+      matches.addAll(this.fuzzyMatch(missing, matches));\n+    }\n+\n+    // Add exact matches back into result list.\n+    if (exactMatches != null) {\n+      matches.addAll(exactMatches);\n+      Collections.sort(matches);\n+    }\n+\n+    // Sort result before returning.\n+    Collections.sort(matches);\n+    return new LinkedHashSet<String>(matches);\n+  }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}