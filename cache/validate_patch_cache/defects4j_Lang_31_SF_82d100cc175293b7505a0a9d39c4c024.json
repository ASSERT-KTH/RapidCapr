{
    "patch": "import java.util.Arrays;\n\npublic class StringUtils {\n\n    public static boolean containsAny(final CharSequence seq, final char[] searchChars) {\n        if (seq == null || searchChars == null) {\n            return false;\n        }\n        final int strLen = seq.length();\n        final int searchCharsLength = searchChars.length;\n        final int strLast = strLen - 1;\n        final int searchLast = searchCharsLength - 1;\n        for (int i = 0; i < strLen; i++) {\n            final char ch = seq.charAt(i);\n            for (int j = 0; j < searchCharsLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (Character.isHighSurrogate(ch)) {\n                        if (j == searchLast) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                            return false;\n                        }\n                        if (i < strLast && searchChars[j + 1] == seq.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        char[] CharU20000 = { 0xd840, 0xdc00 };\n        char[] CharU20001 = { 0xd840, 0xdc01 };\n        System.out.println(containsAny(new String(CharU20000), CharU20001));\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..143c66e4 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,46 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.Arrays;\n+\n+public class StringUtils {\n+\n+    public static boolean containsAny(final CharSequence seq, final char[] searchChars) {\n+        if (seq == null || searchChars == null) {\n+            return false;\n+        }\n+        final int strLen = seq.length();\n+        final int searchCharsLength = searchChars.length;\n+        final int strLast = strLen - 1;\n+        final int searchLast = searchCharsLength - 1;\n+        for (int i = 0; i < strLen; i++) {\n+            final char ch = seq.charAt(i);\n+            for (int j = 0; j < searchCharsLength; j++) {\n+                if (searchChars[j] == ch) {\n+                    if (Character.isHighSurrogate(ch)) {\n+                        if (j == searchLast) {\n+                            // missing low surrogate, fine, like String.indexOf(String)\n+                            return false;\n+                        }\n+                        if (i < strLast && searchChars[j + 1] == seq.charAt(i + 1)) {\n+                            return true;\n+                        }\n+                    } else {\n+                        // ch is in the Basic Multilingual Plane\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public static void main(String[] args) {\n+        char[] CharU20000 = { 0xd840, 0xdc00 };\n+        char[] CharU20001 = { 0xd840, 0xdc01 };\n+        System.out.println(containsAny(new String(CharU20000), CharU20001));\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}