{
    "patch": "                if (nextLocal > instantAdjusted) {\n                    if (nextLocal + offsetLocal <= instantLocal) {\n                        return offsetLocal;\n                    }\n                } else {\n                    if (nextAdjusted + offsetAdjusted <= instantAdjusted) {\n                        return offsetLocal;\n                    }\n                }\n\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n\n                if (prevAdjusted < instantAdjusted && prevLocal > instantAdjusted) {\n                    return getOffset(prevLocal);\n                }\n\n                int beforeDstOffset = offsetLocal - getStandardOffset(nextAdjusted);\n                int afterDstOffset = getOffset(nextAdjusted);\n\n                if (beforeDstOffset < afterDstOffset) {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..eb7e9594 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if (nextLocal > instantAdjusted) {\n+                    if (nextLocal + offsetLocal <= instantLocal) {\n+                        return offsetLocal;\n+                    }\n+                } else {\n+                    if (nextAdjusted + offsetAdjusted <= instantAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                }\n+\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+\n+                if (prevAdjusted < instantAdjusted && prevLocal > instantAdjusted) {\n+                    return getOffset(prevLocal);\n+                }\n+\n+                int beforeDstOffset = offsetLocal - getStandardOffset(nextAdjusted);\n+                int afterDstOffset = getOffset(nextAdjusted);\n+\n+                if (beforeDstOffset < afterDstOffset) {\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}