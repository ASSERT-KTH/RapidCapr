{
    "patch": "if (Character.isHighSurrogate(input.charAt(pos))) {\n    if (pos < len && Character.isLowSurrogate(input.charAt(pos+1))) {\n        out.write(input.charAt(pos));\n        out.write(input.charAt(pos+1));\n        pos += 2;\n        continue;\n    }\n}\npos += Character.charCount(Character.codePointAt(input, pos));",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..51317e33 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,15 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+if (Character.isHighSurrogate(input.charAt(pos))) {\n+    if (pos < len && Character.isLowSurrogate(input.charAt(pos+1))) {\n+        out.write(input.charAt(pos));\n+        out.write(input.charAt(pos+1));\n+        pos += 2;\n+        continue;\n+    }\n+}\n+pos += Character.charCount(Character.codePointAt(input, pos));\n             }\n         }\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Supplementary character must be represented using a single escape expected:<&#144308;[]> but was:<&#144308;[\ud84c\udfb4]>",
    "test_result": "FAIL"
}