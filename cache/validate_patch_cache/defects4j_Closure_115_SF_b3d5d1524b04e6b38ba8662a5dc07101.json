{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n        Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    // Get the arguments of the call\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Get the parameters of the function\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    // Traverse through the parameters and arguments, one by one\n    while (fnParam != null && cArg != null) {\n        // Check if the argument has any side effects\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n            return CanInlineResult.NO;\n        }\n\n        // Check if the parameter is mutated multiple times and the argument has side effects\n        if (NodeUtil.getNameReferenceCount(fnParam, fnNode) > 1 &&\n                NodeUtil.canBeSideEffected(cArg)) {\n            return CanInlineResult.NO;\n        }\n\n        // Move on to next parameter and argument\n        fnParam = fnParam.getNext();\n        cArg = cArg.getNext();\n    }\n\n    // The arguments and parameters can be unequal if the function and call contain rest or default parameters.\n    // So, if it's the end of call arguments or parameters, we check accordingly.\n    if (fnParam == null && cArg == null) {\n        return CanInlineResult.YES;\n    } else if (cArg != null && fnParam == null) {\n        while (cArg != null) {\n            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n                return CanInlineResult.NO;\n            }\n            cArg = cArg.getNext();\n        }\n        return CanInlineResult.YES;\n    } else {\n        return CanInlineResult.NO;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..09d675e9 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,76 +686,52 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(\n+        Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+        return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n-\n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n-    }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+    // Get the arguments of the call\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+    // Get the parameters of the function\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n+\n+    // Traverse through the parameters and arguments, one by one\n+    while (fnParam != null && cArg != null) {\n+        // Check if the argument has any side effects\n+        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n             return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+        }\n+\n+        // Check if the parameter is mutated multiple times and the argument has side effects\n+        if (NodeUtil.getNameReferenceCount(fnParam, fnNode) > 1 &&\n+                NodeUtil.canBeSideEffected(cArg)) {\n             return CanInlineResult.NO;\n-          }\n         }\n \n-        // Move to the next name.\n+        // Move on to next parameter and argument\n         fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n         cArg = cArg.getNext();\n-      }\n     }\n \n-    return CanInlineResult.YES;\n-  }\n+    // The arguments and parameters can be unequal if the function and call contain rest or default parameters.\n+    // So, if it's the end of call arguments or parameters, we check accordingly.\n+    if (fnParam == null && cArg == null) {\n+        return CanInlineResult.YES;\n+    } else if (cArg != null && fnParam == null) {\n+        while (cArg != null) {\n+            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+                return CanInlineResult.NO;\n+            }\n+            cArg = cArg.getNext();\n+        }\n+        return CanInlineResult.YES;\n+    } else {\n+        return CanInlineResult.NO;\n+    }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: method getNameReferenceCount in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}