{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    ObjectMapper mapper = new ObjectMapper();\n    try {\n        JsonNode node = mapper.readValue(jsonStr, JsonNode.class);\n        int totalFields = getNodeCount(node);\n        int typedFields = getTypedCount(node);\n        return ((double) typedFields / (double) totalFields) * 100.0;\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return 0.0;\n}\n\nprivate static int getNodeCount(JsonNode node) {\n    Iterator<String> fieldNames = node.fieldNames();\n    int count = 0;\n    while (fieldNames.hasNext()) {\n        count++;\n        fieldNames.next();\n    }\n    return count;\n}\n\nprivate static int getTypedCount(JsonNode node) {\n    Iterator<JsonNode> fields = node.elements();\n    int count = 0;\n    while (fields.hasNext()) {\n        JsonNode field = fields.next();\n        if (!field.isNull() && !field.isMissingNode()) {\n            count++;\n        }\n        if (field.isObject()) {\n            count += getTypedCount(field);\n        }\n    }\n    return count;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..8f2b0555 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,43 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    ObjectMapper mapper = new ObjectMapper();\n+    try {\n+        JsonNode node = mapper.readValue(jsonStr, JsonNode.class);\n+        int totalFields = getNodeCount(node);\n+        int typedFields = getTypedCount(node);\n+        return ((double) typedFields / (double) totalFields) * 100.0;\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+    return 0.0;\n+}\n+\n+private static int getNodeCount(JsonNode node) {\n+    Iterator<String> fieldNames = node.fieldNames();\n+    int count = 0;\n+    while (fieldNames.hasNext()) {\n+        count++;\n+        fieldNames.next();\n+    }\n+    return count;\n+}\n+\n+private static int getTypedCount(JsonNode node) {\n+    Iterator<JsonNode> fields = node.elements();\n+    int count = 0;\n+    while (fields.hasNext()) {\n+        JsonNode field = fields.next();\n+        if (!field.isNull() && !field.isMissingNode()) {\n+            count++;\n+        }\n+        if (field.isObject()) {\n+            count += getTypedCount(field);\n+        }\n+    }\n+    return count;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}