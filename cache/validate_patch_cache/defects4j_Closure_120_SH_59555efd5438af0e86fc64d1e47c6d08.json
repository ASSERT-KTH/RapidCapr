{
    "patch": "        if (block.isFunction) {\n          // function boundary is ok since the variable is not in scope outside\n          // of this function\n          break;\n        } else if (block.isLoop) {\n          // loop assignment is not ok since it may execute multiple times\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..07f93d40 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,14 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          // function boundary is ok since the variable is not in scope outside\n+          // of this function\n+          break;\n+        } else if (block.isLoop) {\n+          // loop assignment is not ok since it may execute multiple times\n+          return false;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}