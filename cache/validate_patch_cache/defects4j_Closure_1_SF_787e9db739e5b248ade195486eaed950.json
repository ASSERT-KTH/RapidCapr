{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastNodeToRemove = null;\n\n      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          if (lastNodeToRemove == null) {\n            lastNodeToRemove = argList.getLastChild();\n          } else {\n            lastNodeToRemove = lastNodeToRemove.getNext();\n          }\n          arg.detach();\n          compiler.reportCodeChange();\n          continue;\n        }\n        lastNodeToRemove = null;\n      }\n\n      if (lastNodeToRemove != null) {\n        Preconditions.checkState(lastNodeToRemove.isName());\n        Preconditions.checkState(unreferenced.isEmpty());\n        unreferenced.add(lastNodeToRemove.getString());\n      }\n\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4ada209d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -378,7 +378,6 @@ class RemoveUnusedVars\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n \n     Node function = fnScope.getRootNode();\n-\n     Preconditions.checkState(function.isFunction());\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n       // The parameters object literal setters can not be removed.\n@@ -388,18 +387,32 @@ class RemoveUnusedVars\n     Node argList = getFunctionArgList(function);\n     boolean modifyCallers = modifyCallSites\n         && callSiteOptimizer.canModifyCallers(function);\n+\n     if (!modifyCallers) {\n       // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n+      Node lastNodeToRemove = null;\n+\n+      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+        Var var = fnScope.getVar(arg.getString());\n         if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n+          if (lastNodeToRemove == null) {\n+            lastNodeToRemove = argList.getLastChild();\n+          } else {\n+            lastNodeToRemove = lastNodeToRemove.getNext();\n+          }\n+          arg.detach();\n           compiler.reportCodeChange();\n-        } else {\n-          break;\n+          continue;\n         }\n+        lastNodeToRemove = null;\n       }\n+\n+      if (lastNodeToRemove != null) {\n+        Preconditions.checkState(lastNodeToRemove.isName());\n+        Preconditions.checkState(unreferenced.isEmpty());\n+        unreferenced.add(lastNodeToRemove.getString());\n+      }\n+\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}