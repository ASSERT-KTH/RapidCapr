{
    "patch": "public static double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, Object>>() {}.getType();\n    \n    Map<String, Object> map = gson.fromJson(json, type);\n    int total = 0;\n    int typed = 0;\n    \n    for (Object value : map.values()) {\n        if (value instanceof Number) {\n            Number number = (Number) value;\n            total++;\n            if (number.doubleValue() != 0) {\n                typed++;\n            }\n        }\n    }\n    \n    return ((double) typed / total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..a25c37af 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, Object>>() {}.getType();\n+    \n+    Map<String, Object> map = gson.fromJson(json, type);\n+    int total = 0;\n+    int typed = 0;\n+    \n+    for (Object value : map.values()) {\n+        if (value instanceof Number) {\n+            Number number = (Number) value;\n+            total++;\n+            if (number.doubleValue() != 0) {\n+                typed++;\n+            }\n+        }\n+    }\n+    \n+    return ((double) typed / total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}