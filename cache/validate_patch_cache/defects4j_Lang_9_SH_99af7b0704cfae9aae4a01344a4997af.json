{
    "patch": "        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField = nextFormatField;\n        currentStrategy = nextStrategy;\n        if (currentStrategy == null) {\n            break;\n        }\n    }\n    if(collector.isEmpty()) {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n    strategies= collector.toArray(new Strategy[collector.size()]);\n    parsePattern= Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..c3d6aed5 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,20 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        if(currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+        currentFormatField = nextFormatField;\n+        currentStrategy = nextStrategy;\n+        if (currentStrategy == null) {\n+            break;\n+        }\n+    }\n+    if(collector.isEmpty()) {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n+    strategies= collector.toArray(new Strategy[collector.size()]);\n+    parsePattern= Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}