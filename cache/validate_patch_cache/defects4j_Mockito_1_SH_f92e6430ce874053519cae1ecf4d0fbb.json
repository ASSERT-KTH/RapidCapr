{
    "patch": "Object[] rawArgs = invocation.getRawArguments();\nif (rawArgs == null) {\n    return;\n}\nfor (int i = 0; i < rawArgs.length; i++) {\n    Object arg = rawArgs[i];\n    for (int j = 0; j < matchers.size(); j++) {\n        Matcher m = matchers.get(j);\n        if (m instanceof CapturesArguments) {\n            if (!(m instanceof VarargMatcher)) {\n                if (i == j) {\n                    ((CapturesArguments) m).captureFrom(arg);\n                    break;\n                }\n            } else if (i == rawArgs.length - 1) {\n                Object varargs = rawArgs[i];\n                if (varargs != null && varargs.getClass().isArray()) {\n                    for (int k = 0; k < Array.getLength(varargs); k++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(varargs, k));\n                    }\n                    break;\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..c3c9f9cae 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,32 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+Object[] rawArgs = invocation.getRawArguments();\n+if (rawArgs == null) {\n+    return;\n+}\n+for (int i = 0; i < rawArgs.length; i++) {\n+    Object arg = rawArgs[i];\n+    for (int j = 0; j < matchers.size(); j++) {\n+        Matcher m = matchers.get(j);\n+        if (m instanceof CapturesArguments) {\n+            if (!(m instanceof VarargMatcher)) {\n+                if (i == j) {\n+                    ((CapturesArguments) m).captureFrom(arg);\n+                    break;\n+                }\n+            } else if (i == rawArgs.length - 1) {\n+                Object varargs = rawArgs[i];\n+                if (varargs != null && varargs.getClass().isArray()) {\n+                    for (int k = 0; k < Array.getLength(varargs); k++) {\n+                        ((CapturesArguments) m).captureFrom(Array.get(varargs, k));\n+                    }\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}