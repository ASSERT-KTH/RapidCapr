{
    "patch": "      if (NodeUtil.isLValue(parent)) {\n        Node left = parent.getFirstChild();\n        if (NodeUtil.isGet(left)) {\n          // If not lending to a prototype property or subproperty, always traverse.\n          if (left.getType() != Token.GETPROP ||\n              !left.getLastChild().getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n      }\n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..c4af6755 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,17 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(parent)) {\n+        Node left = parent.getFirstChild();\n+        if (NodeUtil.isGet(left)) {\n+          // If not lending to a prototype property or subproperty, always traverse.\n+          if (left.getType() != Token.GETPROP ||\n+              !left.getLastChild().getString().equals(\"prototype\")) {\n+            return true;\n+          }\n+        }\n+      }\n+      return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}