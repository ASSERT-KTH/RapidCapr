{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // Handling the case when local time matches a transition\n    if ((offsetLocal < 0 && offsetLocal > offsetAdjusted) ||\n            (offsetLocal > 0 && offsetLocal < offsetAdjusted)) {\n        long prevLocal = previousTransition(instantLocal - offsetLocal);\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n        if (prevLocal != prevAdjusted) {\n            int diff = prevLocal > prevAdjusted ? getOffset(prevAdjusted) : offsetLocal;\n            return diff;\n        }\n    }\n\n    // We need to ensure that time is always after the DST gap\n    boolean positiveOffset = offsetLocal > 0 && offsetAdjusted >= 0;\n    boolean negativeOffset = offsetLocal < 0 && offsetAdjusted <= 0;\n    if (positiveOffset || negativeOffset) {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n        if (Math.abs(offsetLocal - offsetAdjusted) == 1) {\n            long diff = Math.abs(nextLocal - instantAdjusted) - Math.abs(nextAdjusted - instantLocal);\n            if (diff > 0) {\n                return offsetAdjusted;\n            } else if (diff == 0) {\n                if (offsetLocal > 0) {\n                    return offsetAdjusted;\n                } else {\n                    return offsetLocal;\n                }\n            } else {\n                return offsetLocal;\n            }\n        }\n\n        if ((offsetLocal < 0 && nextLocal <= instantAdjusted) || \n                (offsetLocal > 0 && nextLocal < instantAdjusted)) {\n            long nextLocal1 = nextTransition(instantAdjusted + 1);\n            long nextAdjusted1 = nextTransition(instantLocal - offsetAdjusted + 1);\n            if (Math.abs(offsetLocal - offsetAdjusted) == 1 && nextLocal1 == nextAdjusted1 && nextLocal1 <= instantAdjusted) {\n                return offsetAdjusted;\n            }\n            nextLocal = nextLocal1;\n            nextAdjusted = nextAdjusted1;\n            \n            if ((offsetLocal < 0 && nextLocal <= instantAdjusted) || \n                    (offsetLocal > 0 && nextLocal < instantAdjusted)) {\n                return offsetLocal;\n            }\n        }\n\n        if (nextLocal == nextAdjusted) {\n            return offsetAdjusted;\n        }\n        else {\n            int diff = nextLocal > instantAdjusted ? offsetLocal : getOffset(nextLocal);\n            return diff;\n        }\n    }\n    else {\n        // (offsetLocal > 0 && offsetAdjusted < 0) || (offsetLocal < 0 && offsetAdjusted > 0)\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n\n        if ((offsetLocal > 0 && prevLocal >= instantAdjusted) || \n                (offsetLocal < 0 && prevLocal > instantAdjusted)) {\n            long prevLocal1 = previousTransition(instantAdjusted - 1);\n            long prevAdjusted1 = previousTransition(instantLocal - offsetLocal - 1);\n            if (Math.abs(offsetLocal - offsetAdjusted) == 1 && prevLocal1 == prevAdjusted1 && prevLocal1 >= instantAdjusted) {\n                return offsetLocal;\n            }\n            prevLocal = prevLocal1;\n            prevAdjusted = prevAdjusted1;\n\n            if ((offsetLocal > 0 && prevLocal >= instantAdjusted) || \n                    (offsetLocal < 0 && prevLocal > instantAdjusted)) {\n                return offsetLocal;\n            }\n        }\n\n        if (prevLocal == prevAdjusted) {\n            return offsetLocal;\n        }\n        else {\n            int diff = prevLocal > prevAdjusted ? getOffset(prevAdjusted) : offsetLocal;\n            return diff;\n        }\n    }\n}\n\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..9d93e2cb 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,96 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // Handling the case when local time matches a transition\n+    if ((offsetLocal < 0 && offsetLocal > offsetAdjusted) ||\n+            (offsetLocal > 0 && offsetLocal < offsetAdjusted)) {\n+        long prevLocal = previousTransition(instantLocal - offsetLocal);\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+        if (prevLocal != prevAdjusted) {\n+            int diff = prevLocal > prevAdjusted ? getOffset(prevAdjusted) : offsetLocal;\n+            return diff;\n+        }\n+    }\n+\n+    // We need to ensure that time is always after the DST gap\n+    boolean positiveOffset = offsetLocal > 0 && offsetAdjusted >= 0;\n+    boolean negativeOffset = offsetLocal < 0 && offsetAdjusted <= 0;\n+    if (positiveOffset || negativeOffset) {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+        if (Math.abs(offsetLocal - offsetAdjusted) == 1) {\n+            long diff = Math.abs(nextLocal - instantAdjusted) - Math.abs(nextAdjusted - instantLocal);\n+            if (diff > 0) {\n+                return offsetAdjusted;\n+            } else if (diff == 0) {\n+                if (offsetLocal > 0) {\n+                    return offsetAdjusted;\n+                } else {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                return offsetLocal;\n+            }\n+        }\n+\n+        if ((offsetLocal < 0 && nextLocal <= instantAdjusted) || \n+                (offsetLocal > 0 && nextLocal < instantAdjusted)) {\n+            long nextLocal1 = nextTransition(instantAdjusted + 1);\n+            long nextAdjusted1 = nextTransition(instantLocal - offsetAdjusted + 1);\n+            if (Math.abs(offsetLocal - offsetAdjusted) == 1 && nextLocal1 == nextAdjusted1 && nextLocal1 <= instantAdjusted) {\n+                return offsetAdjusted;\n+            }\n+            nextLocal = nextLocal1;\n+            nextAdjusted = nextAdjusted1;\n+            \n+            if ((offsetLocal < 0 && nextLocal <= instantAdjusted) || \n+                    (offsetLocal > 0 && nextLocal < instantAdjusted)) {\n+                return offsetLocal;\n+            }\n+        }\n+\n+        if (nextLocal == nextAdjusted) {\n+            return offsetAdjusted;\n+        }\n+        else {\n+            int diff = nextLocal > instantAdjusted ? offsetLocal : getOffset(nextLocal);\n+            return diff;\n+        }\n+    }\n+    else {\n+        // (offsetLocal > 0 && offsetAdjusted < 0) || (offsetLocal < 0 && offsetAdjusted > 0)\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+\n+        if ((offsetLocal > 0 && prevLocal >= instantAdjusted) || \n+                (offsetLocal < 0 && prevLocal > instantAdjusted)) {\n+            long prevLocal1 = previousTransition(instantAdjusted - 1);\n+            long prevAdjusted1 = previousTransition(instantLocal - offsetLocal - 1);\n+            if (Math.abs(offsetLocal - offsetAdjusted) == 1 && prevLocal1 == prevAdjusted1 && prevLocal1 >= instantAdjusted) {\n+                return offsetLocal;\n+            }\n+            prevLocal = prevLocal1;\n+            prevAdjusted = prevAdjusted1;\n+\n+            if ((offsetLocal > 0 && prevLocal >= instantAdjusted) || \n+                    (offsetLocal < 0 && prevLocal > instantAdjusted)) {\n+                return offsetLocal;\n+            }\n+        }\n+\n+        if (prevLocal == prevAdjusted) {\n+            return offsetLocal;\n+        }\n+        else {\n+            int diff = prevLocal > prevAdjusted ? getOffset(prevAdjusted) : offsetLocal;\n+            return diff;\n+        }\n+    }\n+}\n+\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}