{
    "patch": "// Ignore any cast nodes\nNode currentNode = first;\nwhile (currentNode.isCast()) {\n  currentNode = currentNode.getFirstChild();\n}\n\nif (!NodeUtil.isGet(currentNode)) {\n  n.putBooleanProp(Node.FREE_CALL, true);\n}\n\n// Keep track of the context in which eval is called. It is important\n// to distinguish between \"(0, eval)()\" and \"eval()\".\nif (currentNode.isName() &&\n    \"eval\".equals(currentNode.getString())) {\n  currentNode.putBooleanProp(Node.DIRECT_EVAL, true);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..505e5f4a 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,22 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+// Ignore any cast nodes\n+Node currentNode = first;\n+while (currentNode.isCast()) {\n+  currentNode = currentNode.getFirstChild();\n+}\n+\n+if (!NodeUtil.isGet(currentNode)) {\n+  n.putBooleanProp(Node.FREE_CALL, true);\n+}\n+\n+// Keep track of the context in which eval is called. It is important\n+// to distinguish between \"(0, eval)()\" and \"eval()\".\n+if (currentNode.isName() &&\n+    \"eval\".equals(currentNode.getString())) {\n+  currentNode.putBooleanProp(Node.DIRECT_EVAL, true);\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}