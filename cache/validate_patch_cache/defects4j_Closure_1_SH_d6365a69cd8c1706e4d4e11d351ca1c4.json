{
    "patch": "      boolean done = false;\n      while (!done) {\n        done = true;\n        for (Node arg : argList.children()) {\n          if (!arg.isName()) {\n            continue;\n          }\n          String name = arg.getString();\n          Var var = fnScope.getVar(name);\n          if (!referenced.contains(var)) {\n            argList.removeChild(arg);\n            compiler.reportCodeChange();\n            done = false;\n            break;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3b7d72c4 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,21 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      boolean done = false;\n+      while (!done) {\n+        done = true;\n+        for (Node arg : argList.children()) {\n+          if (!arg.isName()) {\n+            continue;\n+          }\n+          String name = arg.getString();\n+          Var var = fnScope.getVar(name);\n+          if (!referenced.contains(var)) {\n+            argList.removeChild(arg);\n+            compiler.reportCodeChange();\n+            done = false;\n+            break;\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}