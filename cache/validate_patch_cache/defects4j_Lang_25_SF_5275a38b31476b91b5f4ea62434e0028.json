{
    "patch": "public static String unescape(String input) {\n    StringBuffer output = new StringBuffer(input.length());\n    for (int i = 0; i < input.length(); i++) {\n        char currentChar = input.charAt(i);\n        if (currentChar == '\\\\') {\n            char nextChar = (i == input.length() - 1) ? '\\\\' : input.charAt(i + 1);\n            // Octal escape?\n            if (nextChar >= '0' && nextChar <= '7') {\n                String octalString = \"\" + nextChar;\n                i++;\n                if ((i < input.length() - 1) && input.charAt(i + 1) >= '0' && input.charAt(i + 1) <= '7') {\n                    octalString += input.charAt(i + 1);\n                    i++;\n                    if ((i < input.length() - 1) && input.charAt(i + 1) >= '0' && input.charAt(i + 1) <= '7') {\n                        octalString += input.charAt(i + 1);\n                        i++;\n                    }\n                }\n                output.append((char) Integer.parseInt(octalString, 8));\n                continue;\n            }\n            switch (nextChar) {\n                case '\\\\':\n                    currentChar = '\\\\';\n                    break;\n                case 'b':\n                    currentChar = '\\b';\n                    break;\n                case 'f':\n                    currentChar = '\\f';\n                    break;\n                case 'n':\n                    currentChar = '\\n';\n                    break;\n                case 'r':\n                    currentChar = '\\r';\n                    break;\n                case 't':\n                    currentChar = '\\t';\n                    break;\n                case '\\\"':\n                    currentChar = '\\\"';\n                    break;\n                case '\\'':\n                    currentChar = '\\'';\n                    break;\n                // Hex Unicode: u????    \n                case 'u':\n                    if (i >= input.length() - 5) {\n                        currentChar = 'u';\n                        break;\n                    }\n                    int code = Integer.parseInt(\"\" + input.charAt(i + 2) + input.charAt(i + 3) + input.charAt(i + 4) + input.charAt(i + 5), 16);\n                    output.append(Character.toChars(code));\n                    i += 5;\n                    continue;\n            }\n            i++;\n        }\n        output.append(currentChar);\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..2b095b50 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,69 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String input) {\n+    StringBuffer output = new StringBuffer(input.length());\n+    for (int i = 0; i < input.length(); i++) {\n+        char currentChar = input.charAt(i);\n+        if (currentChar == '\\\\') {\n+            char nextChar = (i == input.length() - 1) ? '\\\\' : input.charAt(i + 1);\n+            // Octal escape?\n+            if (nextChar >= '0' && nextChar <= '7') {\n+                String octalString = \"\" + nextChar;\n+                i++;\n+                if ((i < input.length() - 1) && input.charAt(i + 1) >= '0' && input.charAt(i + 1) <= '7') {\n+                    octalString += input.charAt(i + 1);\n+                    i++;\n+                    if ((i < input.length() - 1) && input.charAt(i + 1) >= '0' && input.charAt(i + 1) <= '7') {\n+                        octalString += input.charAt(i + 1);\n+                        i++;\n+                    }\n+                }\n+                output.append((char) Integer.parseInt(octalString, 8));\n+                continue;\n+            }\n+            switch (nextChar) {\n+                case '\\\\':\n+                    currentChar = '\\\\';\n+                    break;\n+                case 'b':\n+                    currentChar = '\\b';\n+                    break;\n+                case 'f':\n+                    currentChar = '\\f';\n+                    break;\n+                case 'n':\n+                    currentChar = '\\n';\n+                    break;\n+                case 'r':\n+                    currentChar = '\\r';\n+                    break;\n+                case 't':\n+                    currentChar = '\\t';\n+                    break;\n+                case '\\\"':\n+                    currentChar = '\\\"';\n+                    break;\n+                case '\\'':\n+                    currentChar = '\\'';\n+                    break;\n+                // Hex Unicode: u????    \n+                case 'u':\n+                    if (i >= input.length() - 5) {\n+                        currentChar = 'u';\n+                        break;\n+                    }\n+                    int code = Integer.parseInt(\"\" + input.charAt(i + 2) + input.charAt(i + 3) + input.charAt(i + 4) + input.charAt(i + 5), 16);\n+                    output.append(Character.toChars(code));\n+                    i += 5;\n+                    continue;\n+            }\n+            i++;\n+        }\n+        output.append(currentChar);\n+    }\n+    return output.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}