{
    "patch": "public static String getprop(String property) {\n    String output = null;\n    try {\n        Process process = Runtime.getRuntime().exec(\"getprop \" + property);\n        InputStream inputStream = process.getInputStream();\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        byte[] buffer = new byte[1024];\n        int length;\n        while ((length = inputStream.read(buffer)) != -1) {\n            outputStream.write(buffer, 0, length);\n        }\n        output = outputStream.toString().trim();\n        outputStream.close();\n        inputStream.close();\n    } catch (IOException e) {\n        System.err.println(\"Error reading system property: \" + property);\n    }\n    return output;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..a8fcb0ff 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String property) {\n+    String output = null;\n+    try {\n+        Process process = Runtime.getRuntime().exec(\"getprop \" + property);\n+        InputStream inputStream = process.getInputStream();\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        byte[] buffer = new byte[1024];\n+        int length;\n+        while ((length = inputStream.read(buffer)) != -1) {\n+            outputStream.write(buffer, 0, length);\n+        }\n+        output = outputStream.toString().trim();\n+        outputStream.close();\n+        inputStream.close();\n+    } catch (IOException e) {\n+        System.err.println(\"Error reading system property: \" + property);\n+    }\n+    return output;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}