{
    "patch": "private void readTypeVariables() {\n    Set<TypeVariable<?>> visitedVariables = new HashSet<>();\n    readTypeVariablesImpl(visitedVariables);\n}\n\nprivate void readTypeVariablesImpl(Set<TypeVariable<?>> visitedVariables) {\n    if (visitedVariables.contains(typeVariable)) {\n        // Handle the case of a recursive type variable\n        registerTypeVariablesOn(Object.class);\n        return;\n    }\n    visitedVariables.add(typeVariable);\n    for (Type bound : typeVariable.getBounds()) {\n        if (bound instanceof TypeVariable) {\n            TypeVariable<?> typeVariable = (TypeVariable<?>) bound;\n            new TypeVariableReader(typeVariable, registerTypeVariablesOn).readTypeVariablesImpl(new HashSet<>(visitedVariables));\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        if (actualTypeArgument instanceof TypeVariable) {\n            new TypeVariableReader((TypeVariable<?>) actualTypeArgument, registerTypeVariablesOn).readTypeVariablesImpl(new HashSet<>(visitedVariables));\n        } else {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}\n\n/**\n * A helper class for reading type variables.\n */\nprivate static class TypeVariableReader {\n    private final TypeVariable<?> typeVariable;\n    private final Consumer<Type> registerTypeVariablesOn;\n\n    private TypeVariableReader(TypeVariable<?> typeVariable, Consumer<Type> registerTypeVariablesOn) {\n        this.typeVariable = typeVariable;\n        this.registerTypeVariablesOn = registerTypeVariablesOn;\n    }\n\n    private void readTypeVariablesImpl(Set<TypeVariable<?>> visitedVariables) {\n        // Simplify implementation by delegating to readTypeVariables \n        new TypeVariableReader(typeVariable, registerTypeVariablesOn).readTypeVariablesImpl(visitedVariables);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..6b3816eb2 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,54 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Set<TypeVariable<?>> visitedVariables = new HashSet<>();\n+    readTypeVariablesImpl(visitedVariables);\n+}\n+\n+private void readTypeVariablesImpl(Set<TypeVariable<?>> visitedVariables) {\n+    if (visitedVariables.contains(typeVariable)) {\n+        // Handle the case of a recursive type variable\n+        registerTypeVariablesOn(Object.class);\n+        return;\n+    }\n+    visitedVariables.add(typeVariable);\n+    for (Type bound : typeVariable.getBounds()) {\n+        if (bound instanceof TypeVariable) {\n+            TypeVariable<?> typeVariable = (TypeVariable<?>) bound;\n+            new TypeVariableReader(typeVariable, registerTypeVariablesOn).readTypeVariablesImpl(new HashSet<>(visitedVariables));\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        if (actualTypeArgument instanceof TypeVariable) {\n+            new TypeVariableReader((TypeVariable<?>) actualTypeArgument, registerTypeVariablesOn).readTypeVariablesImpl(new HashSet<>(visitedVariables));\n+        } else {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n+\n+/**\n+ * A helper class for reading type variables.\n+ */\n+private static class TypeVariableReader {\n+    private final TypeVariable<?> typeVariable;\n+    private final Consumer<Type> registerTypeVariablesOn;\n+\n+    private TypeVariableReader(TypeVariable<?> typeVariable, Consumer<Type> registerTypeVariablesOn) {\n+        this.typeVariable = typeVariable;\n+        this.registerTypeVariablesOn = registerTypeVariablesOn;\n+    }\n+\n+    private void readTypeVariablesImpl(Set<TypeVariable<?>> visitedVariables) {\n+        // Simplify implementation by delegating to readTypeVariables \n+        new TypeVariableReader(typeVariable, registerTypeVariablesOn).readTypeVariablesImpl(visitedVariables);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}