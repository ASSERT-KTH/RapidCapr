{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = tryResolveArrowType(call, t, scope);\n    prototype = tryResolveFunctionPrototypeType(prototype, t, scope);\n    typeOfThis = tryResolveObjectType(typeOfThis, t, scope);\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n            ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n        ObjectType resolvedIface = tryResolveObjectType(iface, t, scope);\n        resolvedInterfaces.add(resolvedIface);\n        changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n        implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n        for (int i = 0; i < subTypes.size(); i++) {\n            JSType resolvedSubType = tryResolveFunctionType(subTypes.get(i), t, scope);\n            subTypes.set(i, resolvedSubType);\n        }\n    }\n\n    return super.resolveInternal(t, scope);\n}\n\nprivate JSType tryResolveArrowType(JSType type, ErrorReporter t, StaticScope<JSType> scope) {\n    if (type != null && type instanceof ArrowType) {\n        return safeResolve(type, t, scope);\n    }\n    return type;\n}\n\nprivate JSType tryResolveFunctionPrototypeType(JSType type, ErrorReporter t, StaticScope<JSType> scope) {\n    if (type != null && type instanceof FunctionPrototypeType) {\n        return safeResolve(type, t, scope);\n    }\n    return type;\n}\n\nprivate JSType tryResolveObjectType(JSType type, ErrorReporter t, StaticScope<JSType> scope) {\n    if (type != null && type instanceof ObjectType) {\n        return safeResolve(type, t, scope);\n    }\n    return type;\n}\n\nprivate JSType tryResolveFunctionType(JSType type, ErrorReporter t, StaticScope<JSType> scope) {\n    if (type != null && type instanceof FunctionType) {\n        return safeResolve(type, t, scope);\n    }\n    return type;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..6fea74ba 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -859,37 +859,62 @@ public class FunctionType extends PrototypeObjectType {\n   }\n \n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n     setResolvedTypeInternal(this);\n \n-    call = (ArrowType) safeResolve(call, t, scope);\n-    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n-\n-    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n-    // is handled further upstream.\n-    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    call = tryResolveArrowType(call, t, scope);\n+    prototype = tryResolveFunctionPrototypeType(prototype, t, scope);\n+    typeOfThis = tryResolveObjectType(typeOfThis, t, scope);\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =\n-        ImmutableList.builder();\n+            ImmutableList.builder();\n     for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n-      resolvedInterfaces.add(resolvedIface);\n-      changed |= (resolvedIface != iface);\n+        ObjectType resolvedIface = tryResolveObjectType(iface, t, scope);\n+        resolvedInterfaces.add(resolvedIface);\n+        changed |= (resolvedIface != iface);\n     }\n     if (changed) {\n-      implementedInterfaces = resolvedInterfaces.build();\n+        implementedInterfaces = resolvedInterfaces.build();\n     }\n \n     if (subTypes != null) {\n-      for (int i = 0; i < subTypes.size(); i++) {\n-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n-      }\n+        for (int i = 0; i < subTypes.size(); i++) {\n+            JSType resolvedSubType = tryResolveFunctionType(subTypes.get(i), t, scope);\n+            subTypes.set(i, resolvedSubType);\n+        }\n     }\n \n     return super.resolveInternal(t, scope);\n-  }\n+}\n+\n+private JSType tryResolveArrowType(JSType type, ErrorReporter t, StaticScope<JSType> scope) {\n+    if (type != null && type instanceof ArrowType) {\n+        return safeResolve(type, t, scope);\n+    }\n+    return type;\n+}\n+\n+private JSType tryResolveFunctionPrototypeType(JSType type, ErrorReporter t, StaticScope<JSType> scope) {\n+    if (type != null && type instanceof FunctionPrototypeType) {\n+        return safeResolve(type, t, scope);\n+    }\n+    return type;\n+}\n+\n+private JSType tryResolveObjectType(JSType type, ErrorReporter t, StaticScope<JSType> scope) {\n+    if (type != null && type instanceof ObjectType) {\n+        return safeResolve(type, t, scope);\n+    }\n+    return type;\n+}\n+\n+private JSType tryResolveFunctionType(JSType type, ErrorReporter t, StaticScope<JSType> scope) {\n+    if (type != null && type instanceof FunctionType) {\n+        return safeResolve(type, t, scope);\n+    }\n+    return type;\n+}\n \n   @Override\n   public String toDebugHashCodeString() {",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}