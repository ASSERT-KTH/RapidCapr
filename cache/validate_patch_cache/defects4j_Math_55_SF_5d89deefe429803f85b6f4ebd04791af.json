{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      final double vx1 = v1.getX();\n      final double vy1 = v1.getY();\n      final double vz1 = v1.getZ();\n      final double vx2 = v2.getX();\n      final double vy2 = v2.getY();\n      final double vz2 = v2.getZ();\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      final double max1 = FastMath.max(FastMath.max(FastMath.abs(vx1), FastMath.abs(vy1)), FastMath.abs(vz1));\n      final double max2 = FastMath.max(FastMath.max(FastMath.abs(vx2), FastMath.abs(vy2)), FastMath.abs(vz2));\n      final double norm1 = FastMath.sqrt(FastMath.scalb(FastMathUtils.square(vx1 / max1) + FastMathUtils.square(vy1 / max1) + FastMathUtils.square(vz1 / max1), -1));\n      final double norm2 = FastMath.sqrt(FastMath.scalb(FastMathUtils.square(vx2 / max2) + FastMathUtils.square(vy2 / max2) + FastMathUtils.square(vz2 / max2), -1));\n      final double n1 = norm1;\n      final double n2 = norm2;\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      final double a = vx1 * vy2 - vy1 * vx2;\n      final double b = vx1 * vz2 - vz1 * vx2;\n      final double c = vy1 * vz2 - vz1 * vy2;\n      final double rho;\n      final double absA = FastMath.abs(a);\n      final double absB = FastMath.abs(b);\n      final double absC = FastMath.abs(c);\n      if (absA >= absB) {\n          if (absA >= absC) {\n              final double invC = c / a;\n              rho = b - a * invC;\n          } else {\n              final double invA = a / c;\n              rho = b * invA - c;\n          }\n      } else if (absB >= absC) {\n          final double invC = c / b;\n          rho = a * invC - c;\n      } else {\n          final double invA = a / c;\n          rho = b * invA - c;\n      }\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      final double normX = (vy1 * vz2 - vz1 * vy2) / rho;\n      final double normY = (vz1 * vx2 - vx1 * vz2) / rho;\n      final double normZ = (vx1 * vy2 - vy1 * vx2) / rho;\n      final double scalingFactor = FastMath.max(FastMath.max(FastMath.abs(normX), FastMath.abs(normY)), FastMath.abs(normZ));\n      final double scaledNormX = normX / scalingFactor;\n      final double scaledNormY = normY / scalingFactor;\n      final double scaledNormZ = normZ / scalingFactor;\n      final double crossX = scaledNormY * vz2 - scaledNormZ * vy2;\n      final double crossY = scaledNormZ * vx2 - scaledNormX * vz2;\n      final double crossZ = scaledNormX * vy2 - scaledNormY * vx2;\n\n      return new Vector3D(FastMath.scalb(crossX, -1), FastMath.scalb(crossY, -1), FastMath.scalb(crossZ, -1));\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..bec07a769 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,9 +456,21 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+      final double vx1 = v1.getX();\n+      final double vy1 = v1.getY();\n+      final double vz1 = v1.getZ();\n+      final double vx2 = v2.getX();\n+      final double vy2 = v2.getY();\n+      final double vz2 = v2.getZ();\n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n+      final double max1 = FastMath.max(FastMath.max(FastMath.abs(vx1), FastMath.abs(vy1)), FastMath.abs(vz1));\n+      final double max2 = FastMath.max(FastMath.max(FastMath.abs(vx2), FastMath.abs(vy2)), FastMath.abs(vz2));\n+      final double norm1 = FastMath.sqrt(FastMath.scalb(FastMathUtils.square(vx1 / max1) + FastMathUtils.square(vy1 / max1) + FastMathUtils.square(vz1 / max1), -1));\n+      final double norm2 = FastMath.sqrt(FastMath.scalb(FastMathUtils.square(vx2 / max2) + FastMathUtils.square(vy2 / max2) + FastMathUtils.square(vz2 / max2), -1));\n+      final double n1 = norm1;\n+      final double n2 = norm2;\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n@@ -467,10 +479,42 @@ public class Vector3D implements Serializable {\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n       // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+      final double a = vx1 * vy2 - vy1 * vx2;\n+      final double b = vx1 * vz2 - vz1 * vx2;\n+      final double c = vy1 * vz2 - vz1 * vy2;\n+      final double rho;\n+      final double absA = FastMath.abs(a);\n+      final double absB = FastMath.abs(b);\n+      final double absC = FastMath.abs(c);\n+      if (absA >= absB) {\n+          if (absA >= absC) {\n+              final double invC = c / a;\n+              rho = b - a * invC;\n+          } else {\n+              final double invA = a / c;\n+              rho = b * invA - c;\n+          }\n+      } else if (absB >= absC) {\n+          final double invC = c / b;\n+          rho = a * invC - c;\n+      } else {\n+          final double invA = a / c;\n+          rho = b * invA - c;\n+      }\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      final double normX = (vy1 * vz2 - vz1 * vy2) / rho;\n+      final double normY = (vz1 * vx2 - vx1 * vz2) / rho;\n+      final double normZ = (vx1 * vy2 - vy1 * vx2) / rho;\n+      final double scalingFactor = FastMath.max(FastMath.max(FastMath.abs(normX), FastMath.abs(normY)), FastMath.abs(normZ));\n+      final double scaledNormX = normX / scalingFactor;\n+      final double scaledNormY = normY / scalingFactor;\n+      final double scaledNormZ = normZ / scalingFactor;\n+      final double crossX = scaledNormY * vz2 - scaledNormZ * vy2;\n+      final double crossY = scaledNormZ * vx2 - scaledNormX * vz2;\n+      final double crossZ = scaledNormX * vy2 - scaledNormY * vx2;\n+\n+      return new Vector3D(FastMath.scalb(crossX, -1), FastMath.scalb(crossY, -1), FastMath.scalb(crossZ, -1));\n \n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}