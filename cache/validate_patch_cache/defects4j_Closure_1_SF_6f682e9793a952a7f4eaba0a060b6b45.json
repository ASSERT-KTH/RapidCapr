{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Maintain a linked list of formal arguments for simple scanning.\n    LinkedList<Node> argNodes = new LinkedList<Node>();\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      argNodes.add(arg);\n    }\n\n    // For tracking last trivial argument that everyone can be eliminated.\n    Node lastSafety = null;\n\n    // Strip unreferenced args off the end of the function declaration.\n    Iterator<Node> nodeIter = argNodes.iterator();\n    while (nodeIter.hasNext()) {\n      Node argNode = nodeIter.next();\n\n      Var var = fnScope.getVar(argNode.getString());\n      if (referenced.contains(var)) {\n        lastSafety = argNode;\n      } else if (modifyCallers) {\n        // Eliminate parameter and remove from all calling sites\n        callSiteOptimizer.removeParameter(fnScope, argNode);\n        nodeIter.remove(); // Remove from argNodes as well.\n      } else if (lastSafety == null) {\n        // First trivial argument.\n        lastSafety = argNode;\n      } else {\n        // Trivial argument but not the first. We can't remove this one\n        // without changing the number of earlier arguments. So the\n        // last argument that everyone can be eliminated is a good\n        // one to stop at.\n        break;\n      }\n    }\n\n    if (lastSafety != null) {\n      while (argList.getLastChild() != lastSafety) {\n        argList.removeChild(argList.getLastChild());\n        compiler.reportCodeChange();\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d4405aec 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -367,19 +367,9 @@ class RemoveUnusedVars\n    * @param fnScope The scope inside the function\n    */\n   private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n     Node function = fnScope.getRootNode();\n-\n     Preconditions.checkState(function.isFunction());\n+\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n       // The parameters object literal setters can not be removed.\n       return;\n@@ -388,20 +378,45 @@ class RemoveUnusedVars\n     Node argList = getFunctionArgList(function);\n     boolean modifyCallers = modifyCallSites\n         && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+\n+    // Maintain a linked list of formal arguments for simple scanning.\n+    LinkedList<Node> argNodes = new LinkedList<Node>();\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      argNodes.add(arg);\n+    }\n+\n+    // For tracking last trivial argument that everyone can be eliminated.\n+    Node lastSafety = null;\n+\n+    // Strip unreferenced args off the end of the function declaration.\n+    Iterator<Node> nodeIter = argNodes.iterator();\n+    while (nodeIter.hasNext()) {\n+      Node argNode = nodeIter.next();\n+\n+      Var var = fnScope.getVar(argNode.getString());\n+      if (referenced.contains(var)) {\n+        lastSafety = argNode;\n+      } else if (modifyCallers) {\n+        // Eliminate parameter and remove from all calling sites\n+        callSiteOptimizer.removeParameter(fnScope, argNode);\n+        nodeIter.remove(); // Remove from argNodes as well.\n+      } else if (lastSafety == null) {\n+        // First trivial argument.\n+        lastSafety = argNode;\n+      } else {\n+        // Trivial argument but not the first. We can't remove this one\n+        // without changing the number of earlier arguments. So the\n+        // last argument that everyone can be eliminated is a good\n+        // one to stop at.\n+        break;\n+      }\n+    }\n+\n+    if (lastSafety != null) {\n+      while (argList.getLastChild() != lastSafety) {\n+        argList.removeChild(argList.getLastChild());\n+        compiler.reportCodeChange();\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}