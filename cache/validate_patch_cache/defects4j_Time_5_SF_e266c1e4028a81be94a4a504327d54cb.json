{
    "patch": "public Period normalizedStandard(PeriodType periodType) {\n    periodType = DateTimeUtils.getPeriodType(periodType);\n    long totalMillis = getMillis();\n    totalMillis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    totalMillis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    totalMillis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    totalMillis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    totalMillis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    boolean hasYears = periodType.isSupported(DurationFieldType.years());\n    boolean hasMonths = periodType.isSupported(DurationFieldType.months());\n    if (hasYears || hasMonths) {\n        int years = getYears();\n        int months = getMonths();\n        months += years * 12;\n        months += getWeeks() * DateTimeConstants.WEEKS_PER_MONTH;\n        months += getDays() * DateTimeConstants.DAYS_PER_MONTH;\n        if (hasYears) {\n            years = months / 12;\n            months = months % 12;\n        }\n        if (getYears() != years || getMonths() != months) {\n            Period result = new Period(totalMillis, periodType, ISOChronology.getInstanceUTC());\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n            return result;\n        }\n    }\n    return new Period(totalMillis, periodType, ISOChronology.getInstanceUTC());\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..25019441 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,38 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+public Period normalizedStandard(PeriodType periodType) {\n+    periodType = DateTimeUtils.getPeriodType(periodType);\n+    long totalMillis = getMillis();\n+    totalMillis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    totalMillis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    totalMillis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    totalMillis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    totalMillis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    boolean hasYears = periodType.isSupported(DurationFieldType.years());\n+    boolean hasMonths = periodType.isSupported(DurationFieldType.months());\n+    if (hasYears || hasMonths) {\n         int years = getYears();\n         int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n+        months += years * 12;\n+        months += getWeeks() * DateTimeConstants.WEEKS_PER_MONTH;\n+        months += getDays() * DateTimeConstants.DAYS_PER_MONTH;\n+        if (hasYears) {\n+            years = months / 12;\n             months = months % 12;\n+        }\n+        if (getYears() != years || getMonths() != months) {\n+            Period result = new Period(totalMillis, periodType, ISOChronology.getInstanceUTC());\n             if (years != 0) {\n                 result = result.withYears(years);\n             }\n             if (months != 0) {\n                 result = result.withMonths(months);\n             }\n+            return result;\n         }\n-        return result;\n     }\n+    return new Period(totalMillis, periodType, ISOChronology.getInstanceUTC());\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}