{
    "patch": "    if (callTarget != null && callTarget.isName()) {\n      String functionName = callTarget.getString();\n      if (functionName.equals(\"String\")) {\n        Node value = callTarget.getNext();\n        if (value != null && (!value.isFunction() || NodeUtil.isBuiltinFunction(value, \"Array\"))) {\n          Node addition = IR.add(\n              IR.string(\"\").srcref(callTarget),\n              value.detachFromParent());\n          n.getParent().replaceChild(n, addition);\n          reportCodeChange();\n          return addition;\n        }\n      } else if (functionName.equals(\"Number\") || functionName.equals(\"Boolean\")) {\n        Node value = callTarget.getNext();\n        if (value != null && !value.isFunction() && !value.isObjectLit() && !value.hasChildren()) {\n          n.getParent().replaceChild(n, value.detachFromParent());\n          reportCodeChange();\n          return value;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..01961c8c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,25 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+    if (callTarget != null && callTarget.isName()) {\n+      String functionName = callTarget.getString();\n+      if (functionName.equals(\"String\")) {\n+        Node value = callTarget.getNext();\n+        if (value != null && (!value.isFunction() || NodeUtil.isBuiltinFunction(value, \"Array\"))) {\n+          Node addition = IR.add(\n+              IR.string(\"\").srcref(callTarget),\n+              value.detachFromParent());\n+          n.getParent().replaceChild(n, addition);\n+          reportCodeChange();\n+          return addition;\n+        }\n+      } else if (functionName.equals(\"Number\") || functionName.equals(\"Boolean\")) {\n+        Node value = callTarget.getNext();\n+        if (value != null && !value.isFunction() && !value.isObjectLit() && !value.hasChildren()) {\n+          n.getParent().replaceChild(n, value.detachFromParent());\n+          reportCodeChange();\n+          return value;\n+        }\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}