{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        return Double.NaN;\n    }\n\n    double result;\n\n    if (x <= mean - 40 * standardDeviation) {\n        result = 0.0;\n    } else if (x >= mean + 40 * standardDeviation) {\n        result = 1.0;\n    } else {\n        try {\n            final double dev = x - mean;\n            result = 0.5 * Erf.erfc(-dev / (standardDeviation * Math.sqrt(2.0)));\n        } catch (MaxIterationsExceededException ex) {\n            throw new MathException(ex);\n        }\n    }\n    \n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..a4debdf6a 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -121,21 +121,28 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @return CDF evaluated at {@code x}.\n      * @throws MathException if the algorithm fails to converge\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-        final double dev = x - mean;\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+\n+    double result;\n+\n+    if (x <= mean - 40 * standardDeviation) {\n+        result = 0.0;\n+    } else if (x >= mean + 40 * standardDeviation) {\n+        result = 1.0;\n+    } else {\n         try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n+            final double dev = x - mean;\n+            result = 0.5 * Erf.erfc(-dev / (standardDeviation * Math.sqrt(2.0)));\n         } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n-            } else {\n-                throw ex;\n-            }\n+            throw new MathException(ex);\n         }\n     }\n+    \n+    return result;\n+}\n \n     /**\n      * Return the absolute accuracy setting of the solver used to estimate",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}