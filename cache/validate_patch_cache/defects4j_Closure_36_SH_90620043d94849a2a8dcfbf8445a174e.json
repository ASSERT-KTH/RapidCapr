{
    "patch": "      if (value.isFunction()) {\n        Node callNode = reference.getParent();\n        if (reference.getParent().isCall()) {\n          CodingConvention convention = compiler.getCodingConvention();\n          // Bug 2388531: Don't inline subclass definitions into class defining\n          // calls as this confused class removing logic.\n          SubclassRelationship relationship =\n              convention.getClassesDefinedByCall(callNode);\n          if (relationship != null) {\n            return false;\n          }\n\n          // issue 668: Don't inline singleton getter methods\n          // calls as this confused class removing logic.\n          if (!callNode.hasOneChild() || !value.getParent().isAssign()) {\n            return false;\n          }\n          Node parentAssign = value.getParent();\n          Node grandparent = parentAssign.getParent();\n          if (parentAssign.getNext() != null ||\n              parentAssign.hasChildren() ||\n              grandparent == null || !grandparent.isExprResult()) {\n            return false;\n          }\n          Node functionBody = value.getLastChild();\n          if (functionBody == null) {\n            return false;\n          }\n          Node returnStatement = functionBody.getLastChild();\n          if (returnStatement == null) {\n            return false;\n          }\n          Node returnValue = returnStatement.getFirstChild();\n          if (returnValue == null) {\n            return false;\n          }\n          returnValue = returnValue.getOnlyChild();\n          if (returnValue == null) {\n            return false;\n          }\n          if (!returnValue.isQualifiedName()) {\n            return false;\n          }\n          String expectedName = parentAssign.getFirstChild().getQualifiedName();\n          String actualName = returnValue.getQualifiedName();\n          return expectedName.equals(actualName);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..a5c67f31 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,54 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+      if (value.isFunction()) {\n+        Node callNode = reference.getParent();\n+        if (reference.getParent().isCall()) {\n+          CodingConvention convention = compiler.getCodingConvention();\n+          // Bug 2388531: Don't inline subclass definitions into class defining\n+          // calls as this confused class removing logic.\n+          SubclassRelationship relationship =\n+              convention.getClassesDefinedByCall(callNode);\n+          if (relationship != null) {\n+            return false;\n+          }\n+\n+          // issue 668: Don't inline singleton getter methods\n+          // calls as this confused class removing logic.\n+          if (!callNode.hasOneChild() || !value.getParent().isAssign()) {\n+            return false;\n+          }\n+          Node parentAssign = value.getParent();\n+          Node grandparent = parentAssign.getParent();\n+          if (parentAssign.getNext() != null ||\n+              parentAssign.hasChildren() ||\n+              grandparent == null || !grandparent.isExprResult()) {\n+            return false;\n+          }\n+          Node functionBody = value.getLastChild();\n+          if (functionBody == null) {\n+            return false;\n+          }\n+          Node returnStatement = functionBody.getLastChild();\n+          if (returnStatement == null) {\n+            return false;\n+          }\n+          Node returnValue = returnStatement.getFirstChild();\n+          if (returnValue == null) {\n+            return false;\n+          }\n+          returnValue = returnValue.getOnlyChild();\n+          if (returnValue == null) {\n+            return false;\n+          }\n+          if (!returnValue.isQualifiedName()) {\n+            return false;\n+          }\n+          String expectedName = parentAssign.getFirstChild().getQualifiedName();\n+          String actualName = returnValue.getQualifiedName();\n+          return expectedName.equals(actualName);\n+        }\n+      }\n         }\n       }\n ",
    "result_reason": "error: variable callNode is already defined in method canInline(Reference,Reference,Reference)",
    "test_result": "ERROR"
}