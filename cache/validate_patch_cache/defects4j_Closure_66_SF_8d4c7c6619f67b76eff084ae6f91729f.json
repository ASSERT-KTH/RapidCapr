{
    "patch": "public static double getTypedPercent(String js) {\n    double percent = 0;\n    String[] parts = js.split(\",|\\\\s\");\n\n    for (String part : parts) {\n        if (part.equals(\"true\") || part.equals(\"false\")) {\n            percent += 1.0;\n        }\n    }\n    if (parts.length > 0) {\n        percent /= parts.length;\n        percent *= 100;\n    }\n    return percent;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..e60b1293 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    double percent = 0;\n+    String[] parts = js.split(\",|\\\\s\");\n+\n+    for (String part : parts) {\n+        if (part.equals(\"true\") || part.equals(\"false\")) {\n+            percent += 1.0;\n+        }\n+    }\n+    if (parts.length > 0) {\n+        percent /= parts.length;\n+        percent *= 100;\n+    }\n+    return percent;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}