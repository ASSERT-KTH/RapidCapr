{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN()) {\n            return newInstance(getField(), sign, NaN);\n        }\n\n        if (x == 0) {\n            return newInstance(getField(), 0);\n        }\n\n        if (x == 1) {\n            return this;\n        }\n\n        int[] product = new int[2 * mant.length + 1];\n        for (int i = 0; i < mant.length; i++) {\n            int prod = mant[i] * x;\n            DfpMath.dAdd(product, i, prod);\n        }\n\n        return newInstance(getField(), sign, nans, product);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..532023a50 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,25 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN()) {\n+            return newInstance(getField(), sign, NaN);\n+        }\n+\n+        if (x == 0) {\n+            return newInstance(getField(), 0);\n+        }\n+\n+        if (x == 1) {\n+            return this;\n+        }\n+\n+        int[] product = new int[2 * mant.length + 1];\n+        for (int i = 0; i < mant.length; i++) {\n+            int prod = mant[i] * x;\n+            DfpMath.dAdd(product, i, prod);\n+        }\n+\n+        return newInstance(getField(), sign, nans, product);\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}