{
    "patch": "          if (!lastArg.isDefaultValue()) {\n            argList.removeChild(lastArg);\n          } else {\n            // In ES6, a default value can reference variables inside the function,\n            // so that variable must not be considered unreferenced.\n            Preconditions.checkState(!referenced.contains(\n                fnScope.getVarForName(lastArg.getFirstChild().getQualifiedName())),\n                \"Default value should not reference local variables!\");\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..af13f161 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,15 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+          if (!lastArg.isDefaultValue()) {\n+            argList.removeChild(lastArg);\n+          } else {\n+            // In ES6, a default value can reference variables inside the function,\n+            // so that variable must not be considered unreferenced.\n+            Preconditions.checkState(!referenced.contains(\n+                fnScope.getVarForName(lastArg.getFirstChild().getQualifiedName())),\n+                \"Default value should not reference local variables!\");\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}