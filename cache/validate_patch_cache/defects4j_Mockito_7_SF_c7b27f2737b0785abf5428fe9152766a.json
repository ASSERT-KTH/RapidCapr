{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    if (typeVariable instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) typeVariable;\n        for (Type type : parameterizedType.getActualTypeArguments()) {\n            if (type instanceof TypeVariable) {\n                readTypeVariables((TypeVariable<?>) type);\n            }\n        }\n        for (Type type : parameterizedType.getBounds()) {\n            if (type instanceof TypeVariable) {\n                readTypeVariables((TypeVariable<?>) type);\n            }\n        }\n    } else if (typeVariable instanceof TypeVariable) {\n        readTypeVariables((TypeVariable<?>) typeVariable);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..d0a408cfe 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,27 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    if (typeVariable instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) typeVariable;\n+        for (Type type : parameterizedType.getActualTypeArguments()) {\n+            if (type instanceof TypeVariable) {\n+                readTypeVariables((TypeVariable<?>) type);\n+            }\n+        }\n+        for (Type type : parameterizedType.getBounds()) {\n+            if (type instanceof TypeVariable) {\n+                readTypeVariables((TypeVariable<?>) type);\n+            }\n+        }\n+    } else if (typeVariable instanceof TypeVariable) {\n+        readTypeVariables((TypeVariable<?>) typeVariable);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}