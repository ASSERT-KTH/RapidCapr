{
    "patch": "if (ref == null) {\n        return false;\n      }\n      \n      boolean foundAnotherAssignment = false;\n      for (Reference reference : references) {\n        if (reference.isAssignmentToSameNameAs(ref) && !reference.equals(ref)) {\n          foundAnotherAssignment = true;\n        }\n      }\n      \n      return !foundAnotherAssignment;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..33e4a463 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (ref == null) {\n+        return false;\n+      }\n+      \n+      boolean foundAnotherAssignment = false;\n+      for (Reference reference : references) {\n+        if (reference.isAssignmentToSameNameAs(ref) && !reference.equals(ref)) {\n+          foundAnotherAssignment = true;\n+        }\n+      }\n+      \n+      return !foundAnotherAssignment;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}