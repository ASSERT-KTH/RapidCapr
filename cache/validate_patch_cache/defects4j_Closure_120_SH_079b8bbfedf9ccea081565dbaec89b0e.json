{
    "patch": "          // Consider the lifetime of the variable to be the lifetime of the function.\n          if (!block.equals(ref.getBasicBlock())) {\n            // Don't assume assignments in inner function scopes won't be executed multiple times.\n            for (BasicBlock currentBlock = block; currentBlock != null; currentBlock = currentBlock.getParent()) {\n              if (currentBlock.isLoop) {\n                return false;\n              }\n              if (currentBlock.equals(ref.getBasicBlock())) {\n                break;\n              } \n            }\n            // Do not allow an assignment in a different function block.\n            if (!block.getFunction().equals(ref.getBasicBlock().getFunction())) {\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c01f95ff 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,22 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Consider the lifetime of the variable to be the lifetime of the function.\n+          if (!block.equals(ref.getBasicBlock())) {\n+            // Don't assume assignments in inner function scopes won't be executed multiple times.\n+            for (BasicBlock currentBlock = block; currentBlock != null; currentBlock = currentBlock.getParent()) {\n+              if (currentBlock.isLoop) {\n+                return false;\n+              }\n+              if (currentBlock.equals(ref.getBasicBlock())) {\n+                break;\n+              } \n+            }\n+            // Do not allow an assignment in a different function block.\n+            if (!block.getFunction().equals(ref.getBasicBlock().getFunction())) {\n+              return false;\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}