{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) {\n        return;\n      }\n\n      if (n.getType() == Token.FUNCTION && !NodeUtil.isFunctionDeclaration(n)) {\n        defineDeclaredFunction(n, parent);\n        return;\n      }\n\n      if (n.getType() == Token.CATCH) {\n        defineCatch(n, parent);\n        return;\n      }\n\n      if (n.getType() == Token.BLOCK) {\n        switch (parent.getType()) {\n          case Token.FUNCTION:\n          case Token.SCRIPT:\n          case Token.TRY:\n          case Token.CATCH:\n          case Token.WHILE:\n          case Token.DO:\n          case Token.IF:\n          case Token.FOR:\n          case Token.FOR_IN:\n            break;\n          default:\n            attachLiteralTypes(n);\n            break;\n        }\n        return;\n      }\n\n      if (n.getType() == Token.VAR) {\n        defineVar(n, parent);\n        return;\n      }\n\n      if (n.getType() == Token.LP) {\n        Node funcParent = parent.getParent();\n        if (funcParent != null && funcParent.getType() == Token.FUNCTION) {\n          handleFunctionInputs(funcParent);\n          return;\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..31e15140 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1441,27 +1441,50 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param parent The parent of n\n      */\n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+      if (n == scope.getRootNode()) {\n+        return;\n+      }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+      if (n.getType() == Token.FUNCTION && !NodeUtil.isFunctionDeclaration(n)) {\n+        defineDeclaredFunction(n, parent);\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+      if (n.getType() == Token.CATCH) {\n+        defineCatch(n, parent);\n+        return;\n+      }\n+\n+      if (n.getType() == Token.BLOCK) {\n+        switch (parent.getType()) {\n+          case Token.FUNCTION:\n+          case Token.SCRIPT:\n+          case Token.TRY:\n+          case Token.CATCH:\n+          case Token.WHILE:\n+          case Token.DO:\n+          case Token.IF:\n+          case Token.FOR:\n+          case Token.FOR_IN:\n+            break;\n+          default:\n+            attachLiteralTypes(n);\n+            break;\n+        }\n+        return;\n+      }\n+\n+      if (n.getType() == Token.VAR) {\n+        defineVar(n, parent);\n+        return;\n+      }\n+\n+      if (n.getType() == Token.LP) {\n+        Node funcParent = parent.getParent();\n+        if (funcParent != null && funcParent.getType() == Token.FUNCTION) {\n+          handleFunctionInputs(funcParent);\n+          return;\n+        }\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}