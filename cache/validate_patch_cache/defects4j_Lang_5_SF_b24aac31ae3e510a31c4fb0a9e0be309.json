{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n    final int len = str.length();\n    int pos = 0;\n    int nextPos = str.indexOf('_', pos);\n    if (nextPos < 0) {\n        // Locale with language only\n        return new Locale(str);\n    }\n    if (nextPos == pos) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final String language = str.substring(pos, nextPos);\n    if (!isValidCode(language)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    pos = nextPos + 1;\n    if (pos >= len) {\n        // Locale with language and no country or variant\n        return new Locale(language);\n    }\n    nextPos = str.indexOf('_', pos);\n    if (nextPos < 0) {\n        // Locale with language and country or variant only\n        final String countryOrVariant = str.substring(pos);\n        if (countryOrVariant.length() == 2) {\n            // Locale with language and country\n            if (!isValidCode(countryOrVariant)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(language, countryOrVariant);\n        } else {\n            // Locale with language and variant only\n            if (countryOrVariant.length() < 5 || countryOrVariant.length() > 8 || !isValidCode(countryOrVariant)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(language, \"\", countryOrVariant);\n        }\n    }\n    if (nextPos == pos) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final String country = str.substring(pos, nextPos);\n    if (!isValidCode(country)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    pos = nextPos + 1;\n    if (pos >= len) {\n        // Locale with language and country but no variant\n        return new Locale(language, country);\n    }\n    final String variant = str.substring(pos);\n    if (variant.length() < 5 || variant.length() > 8 || !isValidCode(variant)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isValidCode(String code) {\n    String pattern = \"^[a-zA-Z0-9]+$\";\n    return code.matches(pattern);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..745707e0 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,47 +85,70 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+    final int len = str.length();\n+    int pos = 0;\n+    int nextPos = str.indexOf('_', pos);\n+    if (nextPos < 0) {\n+        // Locale with language only\n+        return new Locale(str);\n+    }\n+    if (nextPos == pos) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    final String language = str.substring(pos, nextPos);\n+    if (!isValidCode(language)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    pos = nextPos + 1;\n+    if (pos >= len) {\n+        // Locale with language and no country or variant\n+        return new Locale(language);\n+    }\n+    nextPos = str.indexOf('_', pos);\n+    if (nextPos < 0) {\n+        // Locale with language and country or variant only\n+        final String countryOrVariant = str.substring(pos);\n+        if (countryOrVariant.length() == 2) {\n+            // Locale with language and country\n+            if (!isValidCode(countryOrVariant)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            if (str.charAt(5) != '_') {\n+            return new Locale(language, countryOrVariant);\n+        } else {\n+            // Locale with language and variant only\n+            if (countryOrVariant.length() < 5 || countryOrVariant.length() > 8 || !isValidCode(countryOrVariant)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+            return new Locale(language, \"\", countryOrVariant);\n+        }\n+    }\n+    if (nextPos == pos) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n     }\n+    final String country = str.substring(pos, nextPos);\n+    if (!isValidCode(country)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    pos = nextPos + 1;\n+    if (pos >= len) {\n+        // Locale with language and country but no variant\n+        return new Locale(language, country);\n+    }\n+    final String variant = str.substring(pos);\n+    if (variant.length() < 5 || variant.length() > 8 || !isValidCode(variant)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isValidCode(String code) {\n+    String pattern = \"^[a-zA-Z0-9]+$\";\n+    return code.matches(pattern);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: fr__P",
    "test_result": "FAIL"
}