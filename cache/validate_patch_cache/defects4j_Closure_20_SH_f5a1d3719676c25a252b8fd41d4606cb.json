{
    "patch": "      if (value != null && !NodeUtil.mayHaveSideEffects(value)) {\n        boolean isImmutableValue = NodeUtil.isImmutableValue(value);\n        boolean hasOneImmutableArg = isImmutableValue && value.getNext() == null;\n        boolean hasTwoImmutableArgs = isImmutableValue && NodeUtil.isImmutableValue(value.getNext());\n        if (hasOneImmutableArg || hasTwoImmutableArgs) {\n          Node addition = IR.add(\n              IR.string(\"\").srcref(callTarget),\n              value.detachFromParent());\n          if (hasTwoImmutableArgs) {\n            addition = IR.add(\n                addition,\n                value.getNext().detachFromParent());\n          }\n          n.getParent().replaceChild(n, addition);\n          reportCodeChange();\n          return addition;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..ad977964 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,23 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+      if (value != null && !NodeUtil.mayHaveSideEffects(value)) {\n+        boolean isImmutableValue = NodeUtil.isImmutableValue(value);\n+        boolean hasOneImmutableArg = isImmutableValue && value.getNext() == null;\n+        boolean hasTwoImmutableArgs = isImmutableValue && NodeUtil.isImmutableValue(value.getNext());\n+        if (hasOneImmutableArg || hasTwoImmutableArgs) {\n+          Node addition = IR.add(\n+              IR.string(\"\").srcref(callTarget),\n+              value.detachFromParent());\n+          if (hasTwoImmutableArgs) {\n+            addition = IR.add(\n+                addition,\n+                value.getNext().detachFromParent());\n+          }\n+          n.getParent().replaceChild(n, addition);\n+          reportCodeChange();\n+          return addition;\n+        }\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}