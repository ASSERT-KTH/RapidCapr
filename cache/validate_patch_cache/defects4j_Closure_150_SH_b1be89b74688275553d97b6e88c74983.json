{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.NAME: // add this line\n          if (NodeUtil.isFunctionDeclaration(n) && !NodeUtil.isStatement(parent)) {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.LP:\n          if (NodeUtil.isFunctionExpression(parent)) {  // use NodeUtil.isFunctionExpression() instead of parent == scope.getRootNode()\n            handleFunctionInputs(parent);\n          }\n          break;\n        default:\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..6fd33eae 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1456,12 +1456,24 @@ final class TypedScopeCreator implements ScopeCreator {\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n+        case Token.NAME: // add this line\n+          if (NodeUtil.isFunctionDeclaration(n) && !NodeUtil.isStatement(parent)) {\n+            defineDeclaredFunction(n, parent);\n+          }\n+          break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        case Token.LP:\n+          if (NodeUtil.isFunctionExpression(parent)) {  // use NodeUtil.isFunctionExpression() instead of parent == scope.getRootNode()\n+            handleFunctionInputs(parent);\n+          }\n+          break;\n+        default:\n+          break;\n       }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}