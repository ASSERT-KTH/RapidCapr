{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    final RealPointValuePair best = simplex[0];\n    final RealPointValuePair secondBest = simplex[simplex.length - 2];\n    final RealPointValuePair worst = simplex[simplex.length - 1];\n    final RealPointValuePair centroid = computeCentroidExcludingWorst(worst, simplex);\n    final RealPointValuePair reflected = evaluateNewSimplex(original, rho, comparator, centroid);\n    if (comparator.compare(reflected, best) < 0) {\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator, centroid);\n        simplex = comparator.compare(expanded, reflected) < 0 ? expanded.getPoint() : reflected.getPoint();\n    } else {\n        final boolean needToShrink = comparator.compare(reflected, secondBest) >= 0 && comparator.compare(reflected, worst) < 0;\n        final RealPointValuePair contracted = needToShrink ? evaluateNewSimplex(original, gamma, comparator, centroid) : reflected;\n        if (comparator.compare(contracted, worst) < 0) {\n            simplex = contracted.getPoint();\n        } else {\n            shrink(comparator);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..40db585df 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,26 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n-\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+    final RealPointValuePair best = simplex[0];\n+    final RealPointValuePair secondBest = simplex[simplex.length - 2];\n+    final RealPointValuePair worst = simplex[simplex.length - 1];\n+    final RealPointValuePair centroid = computeCentroidExcludingWorst(worst, simplex);\n+    final RealPointValuePair reflected = evaluateNewSimplex(original, rho, comparator, centroid);\n+    if (comparator.compare(reflected, best) < 0) {\n+        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator, centroid);\n+        simplex = comparator.compare(expanded, reflected) < 0 ? expanded.getPoint() : reflected.getPoint();\n+    } else {\n+        final boolean needToShrink = comparator.compare(reflected, secondBest) >= 0 && comparator.compare(reflected, worst) < 0;\n+        final RealPointValuePair contracted = needToShrink ? evaluateNewSimplex(original, gamma, comparator, centroid) : reflected;\n+        if (comparator.compare(contracted, worst) < 0) {\n+            simplex = contracted.getPoint();\n+        } else {\n+            shrink(comparator);\n         }\n-\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}