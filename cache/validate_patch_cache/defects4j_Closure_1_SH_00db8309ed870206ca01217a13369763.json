{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean canOptimizeCallSites =\n        mode == Mode.ADVANCED && callSiteCompilerEnabled && callSiteOptimizer != null;\n    boolean canModifyCallers = modifyCallSites && callSiteModifier.canModifyCallers(fnScope);\n    if (!canOptimizeCallSites && !canModifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        String argName = lastArg.getString();\n        Var var = fnScope.getVar(argName);\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n          fnScope.undeclare(var);\n        } else {\n          break;\n        }\n      }\n    } else if (canOptimizeCallSites) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    } else {\n      callSiteModifier.modify(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1ed2a870 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,37 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean canOptimizeCallSites =\n+        mode == Mode.ADVANCED && callSiteCompilerEnabled && callSiteOptimizer != null;\n+    boolean canModifyCallers = modifyCallSites && callSiteModifier.canModifyCallers(fnScope);\n+    if (!canOptimizeCallSites && !canModifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        String argName = lastArg.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+          fnScope.undeclare(var);\n+        } else {\n+          break;\n+        }\n+      }\n+    } else if (canOptimizeCallSites) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    } else {\n+      callSiteModifier.modify(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}