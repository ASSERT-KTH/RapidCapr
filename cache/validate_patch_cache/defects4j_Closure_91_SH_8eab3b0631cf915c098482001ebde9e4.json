{
    "patch": "// Don't traverse functions that are getting lent to a prototype.\nif (n.getType() == Token.FUNCTION &&\n    parent != null &&\n    parent.getType() == Token.EXPR_RESULT) {\n  Node assign = parent.getFirstChild();\n  Node lhs = assign.getFirstChild();\n  // Check if the left-hand side is a GETPROP of the form foo.prototype.bar\n  if (NodeUtil.isGet(lhs) &&\n      lhs.getLastChild().getString().equals(\"prototype\")) {\n    Node currentNode = lhs.getFirstChild();\n    // Check if the object being assigned is a top-level name or chain of properties\n    // without any function calls that could mutate it (such as a.b().prototype.c)\n    while (currentNode != null && NodeUtil.isGet(currentNode)) {\n      currentNode = currentNode.getFirstChild();\n    }\n    if (currentNode != null &&\n        currentNode.getType() == Token.NAME &&\n        isTopLevelName(currentNode.getString(), assign.getParent())) {\n      return false;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..30ca86d9 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,28 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+// Don't traverse functions that are getting lent to a prototype.\n+if (n.getType() == Token.FUNCTION &&\n+    parent != null &&\n+    parent.getType() == Token.EXPR_RESULT) {\n+  Node assign = parent.getFirstChild();\n+  Node lhs = assign.getFirstChild();\n+  // Check if the left-hand side is a GETPROP of the form foo.prototype.bar\n+  if (NodeUtil.isGet(lhs) &&\n+      lhs.getLastChild().getString().equals(\"prototype\")) {\n+    Node currentNode = lhs.getFirstChild();\n+    // Check if the object being assigned is a top-level name or chain of properties\n+    // without any function calls that could mutate it (such as a.b().prototype.c)\n+    while (currentNode != null && NodeUtil.isGet(currentNode)) {\n+      currentNode = currentNode.getFirstChild();\n+    }\n+    if (currentNode != null &&\n+        currentNode.getType() == Token.NAME &&\n+        isTopLevelName(currentNode.getString(), assign.getParent())) {\n+      return false;\n+    }\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}