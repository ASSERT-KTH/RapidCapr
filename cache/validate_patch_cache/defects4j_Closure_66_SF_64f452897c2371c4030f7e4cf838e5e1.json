{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    try {\n        Gson gson = new Gson();\n        Type type = new TypeToken<List<MyUser>>() {}.getType();\n        List<MyUser> users = gson.fromJson(jsonStr, type);\n        \n        int typedCount = 0;\n        for (MyUser user : users) {\n            if (user.isTyping()) {\n                typedCount++;\n            }\n        }\n        \n        return ((double)typedCount / users.size()) * 100;\n        \n    } catch (JsonSyntaxException e) {\n        System.err.println(\"Error parsing JSON: \" + e.getMessage());\n        return 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..de87e1e5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    try {\n+        Gson gson = new Gson();\n+        Type type = new TypeToken<List<MyUser>>() {}.getType();\n+        List<MyUser> users = gson.fromJson(jsonStr, type);\n+        \n+        int typedCount = 0;\n+        for (MyUser user : users) {\n+            if (user.isTyping()) {\n+                typedCount++;\n+            }\n+        }\n+        \n+        return ((double)typedCount / users.size()) * 100;\n+        \n+    } catch (JsonSyntaxException e) {\n+        System.err.println(\"Error parsing JSON: \" + e.getMessage());\n+        return 0.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}