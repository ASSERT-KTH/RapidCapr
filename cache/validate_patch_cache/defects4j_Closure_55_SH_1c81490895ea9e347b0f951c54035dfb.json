{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  if (!NodeUtil.isFunctionExpression(n)) {\n    return false;\n  }\n  Node parent = n.getParent();\n  if (parent == null) {\n    return false;\n  }\n  int parentType = parent.getType();\n  if (parentType == Token.CALL || parentType == Token.NEW || parentType == Token.OBJECTLIT ||\n      NodeUtil.isExpressionNode(parent)) {\n    return false;\n  }\n  if (parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN || parentType == Token.VAR ||\n      parentType == Token.RETURN || (parentType == Token.BLOCK && parent.getParent() != null &&\n      parent.getParent().getType() == Token.FUNCTION)) {\n    return true;\n  }\n  Node grandparent = parent.getParent();\n  int grandparentType = grandparent.getType();\n  if ((parentType == Token.CALL || parentType == Token.NEW) &&\n      (grandparentType == Token.EXPR_RESULT || grandparentType == Token.ASSIGN ||\n      grandparentType == Token.VAR || grandparentType == Token.RETURN)) {\n    return true;\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..aecb5f8b 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,33 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  if (!NodeUtil.isFunctionExpression(n)) {\n+    return false;\n+  }\n+  Node parent = n.getParent();\n+  if (parent == null) {\n+    return false;\n+  }\n+  int parentType = parent.getType();\n+  if (parentType == Token.CALL || parentType == Token.NEW || parentType == Token.OBJECTLIT ||\n+      NodeUtil.isExpressionNode(parent)) {\n+    return false;\n+  }\n+  if (parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN || parentType == Token.VAR ||\n+      parentType == Token.RETURN || (parentType == Token.BLOCK && parent.getParent() != null &&\n+      parent.getParent().getType() == Token.FUNCTION)) {\n+    return true;\n+  }\n+  Node grandparent = parent.getParent();\n+  int grandparentType = grandparent.getType();\n+  if ((parentType == Token.CALL || parentType == Token.NEW) &&\n+      (grandparentType == Token.EXPR_RESULT || grandparentType == Token.ASSIGN ||\n+      grandparentType == Token.VAR || grandparentType == Token.RETURN)) {\n+    return true;\n+  }\n+  return false;\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}