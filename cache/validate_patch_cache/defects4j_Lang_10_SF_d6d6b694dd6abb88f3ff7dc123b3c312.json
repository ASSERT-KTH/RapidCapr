{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n\tboolean wasWhite= false;\n\tboolean escape= false;\n\tboolean inQuotes= false;\n\n\tfor(int i= 0; i<value.length(); ++i) {\n\t\tchar c= value.charAt(i);\n\t\tswitch(c) {\n\t\t\tcase '?':\n\t\t\tcase '[':\n\t\t\tcase ']':\n\t\t\tcase '(':\n\t\t\tcase ')':\n\t\t\tcase '{':\n\t\t\tcase '}':\n\t\t\tcase '|':\n\t\t\tcase '*':\n\t\t\tcase '+':\n\t\t\tcase '^':\n\t\t\tcase '$':\n\t\t\tcase '.':\n\t\t\t\tif (!inQuotes && !escape)\n\t\t\t\t\tregex.append('\\\\');\n\t\t\t\tescape= false;\n\t\t\t\tbreak;\n\t\t\tcase '\\\\':\n\t\t\t\tif (!escape && i < value.length() - 1 && value.charAt(i + 1) == 's') {\n\t\t\t\t\tregex.append(\"\\\\s+\");\n\t\t\t\t\ti++;  // skip the 's' character\n\t\t\t\t\twasWhite= true;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (!escape) {\n\t\t\t\t\tregex.append('\\\\');\n\t\t\t\t}\n\t\t\t\tescape= !escape;\n\t\t\t\tbreak;\n\t\t\tcase '\\'':\n\t\t\t\tif (unquote) {\n\t\t\t\t\tif (++i==value.length())\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tc= value.charAt(i);\n\t\t\t\t}\n\t\t\t\tif (!escape) {\n\t\t\t\t\tregex.append('\\\\');\n\t\t\t\t}\n\t\t\t\tinQuotes= !inQuotes;\n\t\t\t\tescape= false;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tescape= false;\n\t\t\t\tif (Character.isWhitespace(c)) {\n\t\t\t\t\tif (!inQuotes && !wasWhite) {\n\t\t\t\t\t\tregex.append(\"\\\\s+\");\n\t\t\t\t\t\twasWhite= true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tregex.append(c);\n\t\t\t\t\twasWhite= false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tif (wasWhite || escape)\n\t\tregex.append(\"\\\\s+\");\n\treturn regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..c743f8a0 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,72 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n-        }\n-        return regex;\n-    }\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+\tboolean wasWhite= false;\n+\tboolean escape= false;\n+\tboolean inQuotes= false;\n+\n+\tfor(int i= 0; i<value.length(); ++i) {\n+\t\tchar c= value.charAt(i);\n+\t\tswitch(c) {\n+\t\t\tcase '?':\n+\t\t\tcase '[':\n+\t\t\tcase ']':\n+\t\t\tcase '(':\n+\t\t\tcase ')':\n+\t\t\tcase '{':\n+\t\t\tcase '}':\n+\t\t\tcase '|':\n+\t\t\tcase '*':\n+\t\t\tcase '+':\n+\t\t\tcase '^':\n+\t\t\tcase '$':\n+\t\t\tcase '.':\n+\t\t\t\tif (!inQuotes && !escape)\n+\t\t\t\t\tregex.append('\\\\');\n+\t\t\t\tescape= false;\n+\t\t\t\tbreak;\n+\t\t\tcase '\\\\':\n+\t\t\t\tif (!escape && i < value.length() - 1 && value.charAt(i + 1) == 's') {\n+\t\t\t\t\tregex.append(\"\\\\s+\");\n+\t\t\t\t\ti++;  // skip the 's' character\n+\t\t\t\t\twasWhite= true;\n+\t\t\t\t\tcontinue;\n+\t\t\t\t} else if (!escape) {\n+\t\t\t\t\tregex.append('\\\\');\n+\t\t\t\t}\n+\t\t\t\tescape= !escape;\n+\t\t\t\tbreak;\n+\t\t\tcase '\\'':\n+\t\t\t\tif (unquote) {\n+\t\t\t\t\tif (++i==value.length())\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tc= value.charAt(i);\n+\t\t\t\t}\n+\t\t\t\tif (!escape) {\n+\t\t\t\t\tregex.append('\\\\');\n+\t\t\t\t}\n+\t\t\t\tinQuotes= !inQuotes;\n+\t\t\t\tescape= false;\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tescape= false;\n+\t\t\t\tif (Character.isWhitespace(c)) {\n+\t\t\t\t\tif (!inQuotes && !wasWhite) {\n+\t\t\t\t\t\tregex.append(\"\\\\s+\");\n+\t\t\t\t\t\twasWhite= true;\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tregex.append(c);\n+\t\t\t\t\twasWhite= false;\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t}\n+\t}\n+\tif (wasWhite || escape)\n+\t\tregex.append(\"\\\\s+\");\n+\treturn regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}