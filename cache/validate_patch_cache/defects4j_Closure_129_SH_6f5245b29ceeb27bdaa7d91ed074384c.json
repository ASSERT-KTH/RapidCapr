{
    "patch": "// Ignore any cast nodes\nNodeUtil.visitPreOrder(n, new Visitor() {\n  @Override\n  public void visit(Node node) {\n    if (node.isCast()) {\n      node.replaceWith(node.getFirstChild());\n    }\n  }\n});\n\n// Check if the first node is a get node\nNode first = n.getFirstChild();\nif (!NodeUtil.isGet(first)) {\n  n.putBooleanProp(Node.FREE_CALL, true);\n}\n\n// Check if the first node is an eval node\nif (first.isName() && \"eval\".equals(first.getString())) {\n  first.putBooleanProp(Node.DIRECT_EVAL, true);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..32cb6dfa 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,26 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+// Ignore any cast nodes\n+NodeUtil.visitPreOrder(n, new Visitor() {\n+  @Override\n+  public void visit(Node node) {\n+    if (node.isCast()) {\n+      node.replaceWith(node.getFirstChild());\n+    }\n+  }\n+});\n+\n+// Check if the first node is a get node\n+Node first = n.getFirstChild();\n+if (!NodeUtil.isGet(first)) {\n+  n.putBooleanProp(Node.FREE_CALL, true);\n+}\n+\n+// Check if the first node is an eval node\n+if (first.isName() && \"eval\".equals(first.getString())) {\n+  first.putBooleanProp(Node.DIRECT_EVAL, true);\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}