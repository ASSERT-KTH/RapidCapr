{
    "patch": "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations)\n        throws ConvergenceException, FunctionEvaluationException {\n    \n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0 ;\n    double fmin = function.value(initial);\n    double ftmp;\n    \n    if (Double.isNaN(fmin)) {\n        throw new ConvergenceException(\"Initial point returned NaN value for function\");\n    }\n    \n    if (fmin == 0.0) {\n        return new double[]{initial, initial};\n    }\n\n    do {\n        if (fmin < 0) {\n            a = initial;\n            b = upperBound;\n        } else {\n            a = lowerBound;\n            b = initial;\n        }\n        \n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++ ;\n        \n        if (fa * fmin < 0.0) {\n            b = initial;\n            fb = fmin;\n            initial = a;\n            fmin = fa;\n        } else if (fb * fmin < 0.0) {\n            a = initial;\n            fa = fmin;\n            initial = b;\n            fmin = fb;\n        } else {\n            throw new ConvergenceException(\"function values at endpoints do not have different signs.\");\n        }\n       \n        if (fmin == 0.0) {\n            return new double[]{initial, initial};\n        }\n        \n        final double m = 0.5 * (a + b);\n        final double fm = function.value(m);\n        numIterations++ ;\n        \n        if (fa * fm < 0.0) {\n            b = m;\n            fb = fm;\n        } else if (fb * fm < 0.0) {\n            a = m;\n            fa = fm;\n        } else {\n            initial = m;\n            fmin = fm;\n            break;\n        }\n        \n        // Improve tightness of bracketing:\n        if (Math.abs(b - a) < 2.0 * FastMath.abs(initial) * Math.ulp(initial) + (b - a) * 1.0e-15) {\n            break;\n        }\n        \n        ftmp = function.value(b);\n        if ((ftmp >= 0.0 && fb >= 0.0) || (ftmp < 0.0 && fb < 0.0)) {\n            fb = 0.5 * fb;\n        }\n        ftmp = function.value(a);\n        if ((ftmp >= 0.0 && fa >= 0.0) || (ftmp < 0.0 && fa < 0.0)) {\n            fa = 0.5 * fa;\n        }\n        \n    } while ((fa * fb >= 0.0) && (numIterations < maximumIterations));\n    \n    \n    if (fa * fb >= 0.0 ) {\n        throw new ConvergenceException(\n                  \"number of iterations={0}, maximum iterations={1}, \" +\n                  \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                  \"final b value={6}, f(a)={7}, f(b)={8}\",\n                  numIterations, maximumIterations, initial,\n                  lowerBound, upperBound, a, b, fa, fb);\n    }\n    \n    if (Double.isNaN(fmin)) {\n        throw new ConvergenceException(\"function evaluation returned NaN.\");\n    }\n    \n    if (!Double.isFinite(fmin)) {\n        throw new ConvergenceException(\"function evaluation diverged to {0} for input ({1})\", fmin, initial);\n    }\n    \n    return new double[]{a, b};\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..22f8e3988 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,50 +162,122 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n+public static double[] bracket(UnivariateRealFunction function,\n+        double initial, double lowerBound, double upperBound, \n+        int maximumIterations)\n+        throws ConvergenceException, FunctionEvaluationException {\n+    \n+    if (function == null) {\n+        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+    }\n+    if (maximumIterations <= 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+              \"bad value for maximum iterations number: {0}\", maximumIterations);\n+    }\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+              lowerBound, initial, upperBound);\n+    }\n+    double a = initial;\n+    double b = initial;\n+    double fa;\n+    double fb;\n+    int numIterations = 0 ;\n+    double fmin = function.value(initial);\n+    double ftmp;\n+    \n+    if (Double.isNaN(fmin)) {\n+        throw new ConvergenceException(\"Initial point returned NaN value for function\");\n+    }\n+    \n+    if (fmin == 0.0) {\n+        return new double[]{initial, initial};\n+    }\n+\n+    do {\n+        if (fmin < 0) {\n+            a = initial;\n+            b = upperBound;\n+        } else {\n+            a = lowerBound;\n+            b = initial;\n+        }\n         \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+        fa = function.value(a);\n+        fb = function.value(b);\n+        numIterations++ ;\n+        \n+        if (fa * fmin < 0.0) {\n+            b = initial;\n+            fb = fmin;\n+            initial = a;\n+            fmin = fa;\n+        } else if (fb * fmin < 0.0) {\n+            a = initial;\n+            fa = fmin;\n+            initial = b;\n+            fmin = fb;\n+        } else {\n+            throw new ConvergenceException(\"function values at endpoints do not have different signs.\");\n+        }\n+       \n+        if (fmin == 0.0) {\n+            return new double[]{initial, initial};\n         }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n+        \n+        final double m = 0.5 * (a + b);\n+        final double fm = function.value(m);\n+        numIterations++ ;\n+        \n+        if (fa * fm < 0.0) {\n+            b = m;\n+            fb = fm;\n+        } else if (fb * fm < 0.0) {\n+            a = m;\n+            fa = fm;\n+        } else {\n+            initial = m;\n+            fmin = fm;\n+            break;\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+        \n+        // Improve tightness of bracketing:\n+        if (Math.abs(b - a) < 2.0 * FastMath.abs(initial) * Math.ulp(initial) + (b - a) * 1.0e-15) {\n+            break;\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+        \n+        ftmp = function.value(b);\n+        if ((ftmp >= 0.0 && fb >= 0.0) || (ftmp < 0.0 && fb < 0.0)) {\n+            fb = 0.5 * fb;\n+        }\n+        ftmp = function.value(a);\n+        if ((ftmp >= 0.0 && fa >= 0.0) || (ftmp < 0.0 && fa < 0.0)) {\n+            fa = 0.5 * fa;\n         }\n         \n-        return new double[]{a, b};\n+    } while ((fa * fb >= 0.0) && (numIterations < maximumIterations));\n+    \n+    \n+    if (fa * fb >= 0.0 ) {\n+        throw new ConvergenceException(\n+                  \"number of iterations={0}, maximum iterations={1}, \" +\n+                  \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                  \"final b value={6}, f(a)={7}, f(b)={8}\",\n+                  numIterations, maximumIterations, initial,\n+                  lowerBound, upperBound, a, b, fa, fb);\n+    }\n+    \n+    if (Double.isNaN(fmin)) {\n+        throw new ConvergenceException(\"function evaluation returned NaN.\");\n     }\n+    \n+    if (!Double.isFinite(fmin)) {\n+        throw new ConvergenceException(\"function evaluation diverged to {0} for input ({1})\", fmin, initial);\n+    }\n+    \n+    return new double[]{a, b};\n+}\n \n     /**\n      * Compute the midpoint of two values.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}