{
    "patch": "        if (partial.size() == 0) {\n            throw new IllegalArgumentException(\"Partial cannot be empty\");\n        }\n        if (partial.isSupported(DateTimeFieldType.monthOfYear()) &&\n            partial.isSupported(DateTimeFieldType.year()) &&\n            DateTimeUtils.isContiguous(partial)) {\n            // This partial has a month and year field and it's contiguous\n            int year = partial.get(DateTimeFieldType.year());\n            int month = partial.get(DateTimeFieldType.monthOfYear());\n            int day = 1;\n            if (partial.isSupported(DateTimeFieldType.dayOfMonth())) {\n                day = partial.get(DateTimeFieldType.dayOfMonth());\n            }\n            Chronology chronology = partial.getChronology();\n            long newInstant = chronology.getDateTimeMillis(year, month, day, 0);\n            int[] newPartialValues = chronology.get(partial, newInstant);\n            int maxMonthDay = chronology.dayOfMonth().getMaximumValue(newInstant);\n            if (day > maxMonthDay) {\n                newPartialValues = chronology.dayOfMonth().set(newPartialValues, maxMonthDay);\n            }\n            newPartialValues[fieldIndex] += valueToAdd;\n            int newMonthDay = chronology.get(DateTimeFieldType.dayOfMonth(), newInstant);\n            if (newMonthDay < day) {\n                // The maximum month day of the new month is less than the old dayOfMonth,\n                // so roll back to the maximum month day of the new month\n                newInstant = chronology.dayOfMonth().set(newInstant, newMonthDay);\n                newPartialValues = chronology.get(partial, newInstant);\n            }\n            return newPartialValues;\n        } else {\n            // Use the default algorithm",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..2ea4c9a2 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,37 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+        if (partial.size() == 0) {\n+            throw new IllegalArgumentException(\"Partial cannot be empty\");\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        if (partial.isSupported(DateTimeFieldType.monthOfYear()) &&\n+            partial.isSupported(DateTimeFieldType.year()) &&\n+            DateTimeUtils.isContiguous(partial)) {\n+            // This partial has a month and year field and it's contiguous\n+            int year = partial.get(DateTimeFieldType.year());\n+            int month = partial.get(DateTimeFieldType.monthOfYear());\n+            int day = 1;\n+            if (partial.isSupported(DateTimeFieldType.dayOfMonth())) {\n+                day = partial.get(DateTimeFieldType.dayOfMonth());\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            Chronology chronology = partial.getChronology();\n+            long newInstant = chronology.getDateTimeMillis(year, month, day, 0);\n+            int[] newPartialValues = chronology.get(partial, newInstant);\n+            int maxMonthDay = chronology.dayOfMonth().getMaximumValue(newInstant);\n+            if (day > maxMonthDay) {\n+                newPartialValues = chronology.dayOfMonth().set(newPartialValues, maxMonthDay);\n+            }\n+            newPartialValues[fieldIndex] += valueToAdd;\n+            int newMonthDay = chronology.get(DateTimeFieldType.dayOfMonth(), newInstant);\n+            if (newMonthDay < day) {\n+                // The maximum month day of the new month is less than the old dayOfMonth,\n+                // so roll back to the maximum month day of the new month\n+                newInstant = chronology.dayOfMonth().set(newInstant, newMonthDay);\n+                newPartialValues = chronology.get(partial, newInstant);\n+            }\n+            return newPartialValues;\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            // Use the default algorithm\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}