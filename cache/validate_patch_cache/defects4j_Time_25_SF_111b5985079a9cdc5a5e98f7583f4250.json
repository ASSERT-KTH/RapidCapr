{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int initialOffset = getOffset(instantLocal);\n        final long instantAdjusted = instantLocal - initialOffset;\n\n        // find the next transition after instantAdjusted\n        final long nextTransition = nextTransition(instantAdjusted);\n        if (nextTransition == instantLocal) {\n            // we're at a transition but not on a gap, return the local offset\n            return initialOffset;\n        }\n\n        // find out which side of the gap this instant is on\n        final long nextLocalTransition = nextTransition(instantLocal);\n        if (nextLocalTransition == instantLocal) {\n            // we're at an older transition, return the older offset\n            return getOffset(nextLocalTransition - 1L);\n        }\n\n        final int offsetBeforeTransition = getOffset(nextLocalTransition - 1L);\n        if (initialOffset < offsetBeforeTransition) {\n            // gap started before instantLocal, return the older offset\n            return getOffset(nextTransition - 1L);\n        } else if (initialOffset > offsetBeforeTransition) {\n            // gap is completely after instantLocal, return the newer offset\n            return offsetBeforeTransition;\n        }\n\n        // the instantLocal is in the gap, return the offset over it (newer)\n        return offsetBeforeTransition - 1;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..95782192 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,27 +877,34 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+        final int initialOffset = getOffset(instantLocal);\n+        final long instantAdjusted = instantLocal - initialOffset;\n+\n+        // find the next transition after instantAdjusted\n+        final long nextTransition = nextTransition(instantAdjusted);\n+        if (nextTransition == instantLocal) {\n+            // we're at a transition but not on a gap, return the local offset\n+            return initialOffset;\n         }\n-        return offsetAdjusted;\n+\n+        // find out which side of the gap this instant is on\n+        final long nextLocalTransition = nextTransition(instantLocal);\n+        if (nextLocalTransition == instantLocal) {\n+            // we're at an older transition, return the older offset\n+            return getOffset(nextLocalTransition - 1L);\n+        }\n+\n+        final int offsetBeforeTransition = getOffset(nextLocalTransition - 1L);\n+        if (initialOffset < offsetBeforeTransition) {\n+            // gap started before instantLocal, return the older offset\n+            return getOffset(nextTransition - 1L);\n+        } else if (initialOffset > offsetBeforeTransition) {\n+            // gap is completely after instantLocal, return the newer offset\n+            return offsetBeforeTransition;\n+        }\n+\n+        // the instantLocal is in the gap, return the offset over it (newer)\n+        return offsetBeforeTransition - 1;\n     }\n \n     /**",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-06-09T10:00:00.001",
    "test_result": "FAIL"
}