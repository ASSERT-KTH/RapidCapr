{
    "patch": "var declaredArgs = new HashSet<>();\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Build a set of all declared parameters. Then remove unreferenced\n      // args off the end of the function declaration.\n      for (Node arg : argList.children()) {\n        declaredArgs.add(arg.getString());\n      }\n\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        if (!referenced.contains(fnScope.getVar(lastArg.getString()))) {\n          if (declaredArgs.size() == 1) {\n            // If this is the last argument, remove the entire parameter list\n            // because it's empty.\n            argList.detach();\n          } else {\n            argList.removeChild(lastArg);\n          }\n          compiler.reportCodeChange();\n          declaredArgs.remove(lastArg.getString());\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..df9b8f58 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,44 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+var declaredArgs = new HashSet<>();\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Build a set of all declared parameters. Then remove unreferenced\n+      // args off the end of the function declaration.\n+      for (Node arg : argList.children()) {\n+        declaredArgs.add(arg.getString());\n+      }\n+\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        if (!referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+          if (declaredArgs.size() == 1) {\n+            // If this is the last argument, remove the entire parameter list\n+            // because it's empty.\n+            argList.detach();\n+          } else {\n+            argList.removeChild(lastArg);\n+          }\n+          compiler.reportCodeChange();\n+          declaredArgs.remove(lastArg.getString());\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}