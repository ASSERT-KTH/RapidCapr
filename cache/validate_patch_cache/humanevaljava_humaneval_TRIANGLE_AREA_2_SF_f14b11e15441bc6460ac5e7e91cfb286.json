{
    "patch": "public static double triangle_area_2(double a, double b, double c) {\n    double result = -1; // default value for invalid inputs\n    \n    if (a > 0 && b > 0 && c > 0\n            && a + b > c && a + c > b && b + c > a) { // check for valid inputs\n        double s = (a + b + c) / 2.0;\n        double temp = s * (s - a) * (s - b) * (s - c); // intermediate value\n        \n        try {\n            result = Math.sqrt(temp); // calculate using square root function\n            result = Math.round(result * 100.0) / 100.0; // round to 2 decimal places\n        } catch (ArithmeticException e) {\n            // handle exception by returning default value\n        }\n    }\n    \n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/TRIANGLE_AREA_2.java b/src/main/java/humaneval/buggy/TRIANGLE_AREA_2.java\nindex 484c02b..05bf7da 100644\n--- a/src/main/java/humaneval/buggy/TRIANGLE_AREA_2.java\n+++ b/src/main/java/humaneval/buggy/TRIANGLE_AREA_2.java\n@@ -13,15 +13,22 @@ triangle_area(3, 4, 5) == 6.00\n triangle_area(1, 2, 10) == -1 */\n \n public class TRIANGLE_AREA_2 {\n-    public static double triangle_area_2(double a, double b, double c) {\n-        if (a + b <= c || a + c <= b || b + c <= a)\n-            return -1;\n+public static double triangle_area_2(double a, double b, double c) {\n+    double result = -1; // default value for invalid inputs\n+    \n+    if (a > 0 && b > 0 && c > 0\n+            && a + b > c && a + c > b && b + c > a) { // check for valid inputs\n+        double s = (a + b + c) / 2.0;\n+        double temp = s * (s - a) * (s - b) * (s - c); // intermediate value\n         \n-        double s = (a + b + c) / 2.;\n-        double result = Math.pow(s, 0.5);\n-        \n-        BigDecimal bd = BigDecimal.valueOf(result);\n-        bd = bd.setScale(2, RoundingMode.HALF_UP);\n-        return bd.doubleValue();\n+        try {\n+            result = Math.sqrt(temp); // calculate using square root function\n+            result = Math.round(result * 100.0) / 100.0; // round to 2 decimal places\n+        } catch (ArithmeticException e) {\n+            // handle exception by returning default value\n+        }\n     }\n+    \n+    return result;\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}