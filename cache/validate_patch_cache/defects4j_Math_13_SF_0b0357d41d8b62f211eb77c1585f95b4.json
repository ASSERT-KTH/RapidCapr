{
    "patch": "private RealMatrix squareRoot(final RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec;\n    if (n < 500) {\n        dec = new EigenDecomposition(m);\n    } else {\n        final EigenDecompositionImpl decImpl = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN);\n        final double[][] realEigenvalues = extractEigenvalues(decImpl.getRealEigenvalueMatrix().getData());\n        final double[][] imagEigenvalues = extractEigenvalues(decImpl.getImagEigenvalueMatrix().getData());\n        final double[][] v = decImpl.getV().getData();\n        final double[][] d = decImpl.getD().getData();\n        final boolean isSymmetric = decImpl.isSymmetric();\n        dec = new EigenDecomposition(realEigenvalues, imagEigenvalues, v, d, isSymmetric);\n    }\n    return dec.getSquareRoot();\n}\n\nprivate double[][] extractEigenvalues(final double[][] input) {\n    final int n = input.length;\n    final double[][] result = new double[n][];\n    for (int i = 0; i < n; i++) {\n        result[i] = new double[]{input[i][i]};\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..9acc7655d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(final RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec;\n+    if (n < 500) {\n+        dec = new EigenDecomposition(m);\n+    } else {\n+        final EigenDecompositionImpl decImpl = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN);\n+        final double[][] realEigenvalues = extractEigenvalues(decImpl.getRealEigenvalueMatrix().getData());\n+        final double[][] imagEigenvalues = extractEigenvalues(decImpl.getImagEigenvalueMatrix().getData());\n+        final double[][] v = decImpl.getV().getData();\n+        final double[][] d = decImpl.getD().getData();\n+        final boolean isSymmetric = decImpl.isSymmetric();\n+        dec = new EigenDecomposition(realEigenvalues, imagEigenvalues, v, d, isSymmetric);\n     }\n+    return dec.getSquareRoot();\n+}\n+\n+private double[][] extractEigenvalues(final double[][] input) {\n+    final int n = input.length;\n+    final double[][] result = new double[n][];\n+    for (int i = 0; i < n; i++) {\n+        result[i] = new double[]{input[i][i]};\n+    }\n+    return result;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}