{
    "patch": "class MockInjector {\n    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n        for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n            if (candidate != null) {\n                field.setAccessible(true);\n                try {\n                    Class<?> fieldType = field.getType();\n                    if (fieldType.isAssignableFrom(candidate.getClass())) {\n                        field.set(fieldInstance, candidate);\n                        mocks.remove(candidate);\n                    } else {\n                        String message = String.format(\n                            \"Cannot inject %s into %s: incompatible types\",\n                            candidate.getClass().getSimpleName(),\n                            fieldType.getSimpleName()\n                        );\n                        throw new RuntimeException(message);\n                    }\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(\"Unable to inject mock candidate\", e);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..043455d94 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,35 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+class MockInjector {\n+    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+        for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            if (candidate != null) {\n+                field.setAccessible(true);\n+                try {\n+                    Class<?> fieldType = field.getType();\n+                    if (fieldType.isAssignableFrom(candidate.getClass())) {\n+                        field.set(fieldInstance, candidate);\n+                        mocks.remove(candidate);\n+                    } else {\n+                        String message = String.format(\n+                            \"Cannot inject %s into %s: incompatible types\",\n+                            candidate.getClass().getSimpleName(),\n+                            fieldType.getSimpleName()\n+                        );\n+                        throw new RuntimeException(message);\n+                    }\n+                } catch (IllegalAccessException e) {\n+                    throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+                }\n+            }\n+        }\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}