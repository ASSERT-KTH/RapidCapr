{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    try {\n        JsonNode rootNode = new ObjectMapper().readTree(jsonStr);\n        JsonNode sitesNode = rootNode.get(\"sites\");\n        double typedCount = 0;\n        double totalCount = sitesNode.size();\n        for (JsonNode siteNode : sitesNode) {\n            JsonNode typedNode = siteNode.get(\"typed\");\n            if (typedNode != null && typedNode.asBoolean()) {\n                typedCount++;\n            }\n        }\n        return (typedCount / totalCount) * 100;\n    } catch (IOException e) {\n        return 0; // or some other default value\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..0fd72606 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    try {\n+        JsonNode rootNode = new ObjectMapper().readTree(jsonStr);\n+        JsonNode sitesNode = rootNode.get(\"sites\");\n+        double typedCount = 0;\n+        double totalCount = sitesNode.size();\n+        for (JsonNode siteNode : sitesNode) {\n+            JsonNode typedNode = siteNode.get(\"typed\");\n+            if (typedNode != null && typedNode.asBoolean()) {\n+                typedCount++;\n+            }\n+        }\n+        return (typedCount / totalCount) * 100;\n+    } catch (IOException e) {\n+        return 0; // or some other default value\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}