{
    "patch": "          Node valueParent = value.getParent().getParent();\n          if (valueParent != null &&\n              valueParent.isAssign() &&\n              valueParent.getParent().isFunction()) {\n            ScopedAliases sa = new ScopedAliases(\n                valueParent.getParent().getSecondChild(),\n                new SyntacticScopeCreator(compiler));\n            String methodName = convention.getSingletonGetterClassName(sa);\n            if (methodName != null && value.getFirstChild().getString().equals(methodName)) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..04c17c15 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,17 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+          Node valueParent = value.getParent().getParent();\n+          if (valueParent != null &&\n+              valueParent.isAssign() &&\n+              valueParent.getParent().isFunction()) {\n+            ScopedAliases sa = new ScopedAliases(\n+                valueParent.getParent().getSecondChild(),\n+                new SyntacticScopeCreator(compiler));\n+            String methodName = convention.getSingletonGetterClassName(sa);\n+            if (methodName != null && value.getFirstChild().getString().equals(methodName)) {\n+              return false;\n+            }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}