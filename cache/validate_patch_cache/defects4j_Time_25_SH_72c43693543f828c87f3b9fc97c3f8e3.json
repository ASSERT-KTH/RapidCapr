{
    "patch": "            if (offsetLocal < offsetAdjusted) {\n                long prev = previousTransition(instantLocal- offsetAdjusted);\n                if (prev < instantAdjusted) {\n                    // we are inside the \"gap\"; take the old, first non-DST offset\n                    return offsetLocal;\n                }\n            } else {\n                // we are beyond the \"overlap\"; take the new, first non-DST offset\n                long next = nextTransition(instantLocal - offsetAdjusted);\n                if (next <= instantAdjusted) {\n                    return offsetAdjusted;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..9c1039bb 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal < offsetAdjusted) {\n+                long prev = previousTransition(instantLocal- offsetAdjusted);\n+                if (prev < instantAdjusted) {\n+                    // we are inside the \"gap\"; take the old, first non-DST offset\n+                    return offsetLocal;\n+                }\n+            } else {\n+                // we are beyond the \"overlap\"; take the new, first non-DST offset\n+                long next = nextTransition(instantLocal - offsetAdjusted);\n+                if (next <= instantAdjusted) {\n+                    return offsetAdjusted;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}