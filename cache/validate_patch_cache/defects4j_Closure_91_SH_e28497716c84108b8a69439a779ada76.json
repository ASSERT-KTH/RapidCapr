{
    "patch": "      if (NodeUtil.isGet(parent)) {\n        // Don't traverse the right side of the assignment if it's an\n        // assignment to a prototype property or subproperty.\n        Node lp = parent.getFirstChild();\n        if (lp.getType() == Token.GETPROP &&\n            lp.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n          return true;\n        } else {\n          // Only traverse the right side if it's not an assignment to a prototype\n          // property or subproperty.\n          if (NodeUtil.isGet(lhs)) {\n            if (lhs.getType() == Token.GETPROP &&\n                lhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n            Node llhs = lhs.getFirstChild();\n            if (llhs.getType() == Token.GETPROP &&\n                llhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n          }\n          if (n != rhs) {\n            // Only traverse the right side of the assignment once.\n            return false;\n          }\n        }\n      }\n\n      if (NodeUtil.isObjectLitKey(parent, n)) {\n        // Don't traverse function expressions in object literals.\n        if (n.getParent().getType() != Token.CATCH) {\n          return false;\n        }\n      } else if (NodeUtil.isFunctionDeclaration(n)) {\n        // Don't traverse function declarations.\n        return false;\n      }\n\n      if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n                (jsDoc.isConstructor() ||\n                 jsDoc.isInterface() ||\n                 jsDoc.hasThisType() ||\n                 jsDoc.isOverride())) {\n          return false;\n        }\n\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them. e.g.,\n        // var a = function() { }; // or\n        // function a() {} // or\n        // a.x = function() {}; // or\n        // var a = {x: function() {}};\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK ||\n                pType == Token.SCRIPT ||\n                pType == Token.NAME ||\n                pType == Token.ASSIGN ||\n                pType == Token.CALL ||\n                pType == Token.PARAM_LIST ||\n\n                // object literal keys\n                pType == Token.STRING ||\n                pType == Token.NUMBER)) {\n          return false;\n        }\n\n        // Don't traverse functions that are getting lent to a prototype.\n        Node firstArg = n.getSecondChild();\n        for (Node arg = firstArg; arg != null; arg = arg.getNext()) {\n          if (arg.getType() == Token.OBJECTLIT) {\n            Node objLit = arg;\n            Node key = objLit.getFirstChild();\n            for (; key != null; key = key.getNext()) {\n              if (key.getType() == Token.STRING &&\n                  key.getString().equals(\"value\") &&\n                  key.getNext() != null &&\n                  key.getNext().getType() == Token.FUNCTION) {\n                return false;\n              }\n            }\n          }\n        }\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..440fe6bc 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,110 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        // Don't traverse the right side of the assignment if it's an\n+        // assignment to a prototype property or subproperty.\n+        Node lp = parent.getFirstChild();\n+        if (lp.getType() == Token.GETPROP &&\n+            lp.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+      }\n+\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+          return true;\n+        } else {\n+          // Only traverse the right side if it's not an assignment to a prototype\n+          // property or subproperty.\n+          if (NodeUtil.isGet(lhs)) {\n+            if (lhs.getType() == Token.GETPROP &&\n+                lhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+            Node llhs = lhs.getFirstChild();\n+            if (llhs.getType() == Token.GETPROP &&\n+                llhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          }\n+          if (n != rhs) {\n+            // Only traverse the right side of the assignment once.\n+            return false;\n+          }\n+        }\n+      }\n+\n+      if (NodeUtil.isObjectLitKey(parent, n)) {\n+        // Don't traverse function expressions in object literals.\n+        if (n.getParent().getType() != Token.CATCH) {\n+          return false;\n+        }\n+      } else if (NodeUtil.isFunctionDeclaration(n)) {\n+        // Don't traverse function declarations.\n+        return false;\n+      }\n+\n+      if (n.getType() == Token.FUNCTION) {\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null &&\n+                (jsDoc.isConstructor() ||\n+                 jsDoc.isInterface() ||\n+                 jsDoc.hasThisType() ||\n+                 jsDoc.isOverride())) {\n+          return false;\n+        }\n+\n+        // Don't traverse functions unless they would normally\n+        // be able to have a @this annotation associated with them. e.g.,\n+        // var a = function() { }; // or\n+        // function a() {} // or\n+        // a.x = function() {}; // or\n+        // var a = {x: function() {}};\n+        int pType = parent.getType();\n+        if (!(pType == Token.BLOCK ||\n+                pType == Token.SCRIPT ||\n+                pType == Token.NAME ||\n+                pType == Token.ASSIGN ||\n+                pType == Token.CALL ||\n+                pType == Token.PARAM_LIST ||\n+\n+                // object literal keys\n+                pType == Token.STRING ||\n+                pType == Token.NUMBER)) {\n+          return false;\n+        }\n+\n+        // Don't traverse functions that are getting lent to a prototype.\n+        Node firstArg = n.getSecondChild();\n+        for (Node arg = firstArg; arg != null; arg = arg.getNext()) {\n+          if (arg.getType() == Token.OBJECTLIT) {\n+            Node objLit = arg;\n+            Node key = objLit.getFirstChild();\n+            for (; key != null; key = key.getNext()) {\n+              if (key.getType() == Token.STRING &&\n+                  key.getString().equals(\"value\") &&\n+                  key.getNext() != null &&\n+                  key.getNext().getType() == Token.FUNCTION) {\n+                return false;\n+              }\n+            }\n+          }\n+        }\n+      }\n+\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: variable jsDoc is already defined in method shouldTraverse(NodeTraversal,Node,Node)",
    "test_result": "ERROR"
}