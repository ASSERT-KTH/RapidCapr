{
    "patch": "public class StringUtils {\n    public static boolean containsAny(final CharSequence sequence, final char... searchChars) {\n        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        final int length = sequence.length();\n        final int searchLength = searchChars.length;\n        final boolean[] matched = new boolean[Character.MAX_VALUE + 1];\n        for (int i = 0; i < searchLength; i++) {\n            final char searchChar = searchChars[i];\n            if (matched[searchChar]) {\n                continue;\n            }\n            if (CharUtils.indexOf(sequence, searchChar, 0) >= 0) {\n                matched[searchChar] = true;\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    public static boolean isEmpty(CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n}\n\nclass CharUtils {\n    public static int indexOf(CharSequence seq, int searchChar, int startPos) {\n        if (isEmpty(seq)) {\n            return -1;\n        }\n        return CharSequenceUtils.indexOf(seq, searchChar, startPos);\n    }\n    \n    public static boolean isEmpty(CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n}\n\nclass CharSequenceUtils {\n    public static int indexOf(CharSequence cs, int searchChar, int start) {\n        final int sz = cs.length();\n        for (int i = start; i < sz; i++) {\n            if (cs.charAt(i) == searchChar) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..7dafdce6 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,56 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+    public static boolean containsAny(final CharSequence sequence, final char... searchChars) {\n+        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+            return false;\n+        }\n+        final int length = sequence.length();\n+        final int searchLength = searchChars.length;\n+        final boolean[] matched = new boolean[Character.MAX_VALUE + 1];\n+        for (int i = 0; i < searchLength; i++) {\n+            final char searchChar = searchChars[i];\n+            if (matched[searchChar]) {\n+                continue;\n+            }\n+            if (CharUtils.indexOf(sequence, searchChar, 0) >= 0) {\n+                matched[searchChar] = true;\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    public static boolean isEmpty(CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+}\n+\n+class CharUtils {\n+    public static int indexOf(CharSequence seq, int searchChar, int startPos) {\n+        if (isEmpty(seq)) {\n+            return -1;\n+        }\n+        return CharSequenceUtils.indexOf(seq, searchChar, startPos);\n+    }\n+    \n+    public static boolean isEmpty(CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+}\n+\n+class CharSequenceUtils {\n+    public static int indexOf(CharSequence cs, int searchChar, int start) {\n+        final int sz = cs.length();\n+        for (int i = start; i < sz; i++) {\n+            if (cs.charAt(i) == searchChar) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}