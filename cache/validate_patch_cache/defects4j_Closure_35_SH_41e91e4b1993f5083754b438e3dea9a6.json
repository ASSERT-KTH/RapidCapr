{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop) &&\n              !objType.hasProperty(prop)) {\n            if (objType.mayHaveProp(prop)) {\n              JSType typeToInfer =\n                  objType.getLeastSupertype(propType).restrictByNotNullOrUndefined();\n              objType.defineInferredProperty(prop, typeToInfer, null);\n            } else if (propType.isUnknownType()) {\n              ObjectType emptyObject = getCommonTypes().getEmptyObjectLiteral();\n              objType.defineInferredProperty(prop, emptyObject, null);\n            } else if (propType.isUnionType() &&\n                propType.isTruthy()) {\n              ObjectType emptyObject = getCommonTypes().getEmptyObjectLiteral();\n              objType.defineInferredProperty(prop, emptyObject, null);\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..15cb7bf2 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1123,16 +1123,22 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+          if (!objType.isPropertyTypeDeclared(prop) &&\n+              !objType.hasProperty(prop)) {\n+            if (objType.mayHaveProp(prop)) {\n+              JSType typeToInfer =\n+                  objType.getLeastSupertype(propType).restrictByNotNullOrUndefined();\n+              objType.defineInferredProperty(prop, typeToInfer, null);\n+            } else if (propType.isUnknownType()) {\n+              ObjectType emptyObject = getCommonTypes().getEmptyObjectLiteral();\n+              objType.defineInferredProperty(prop, emptyObject, null);\n+            } else if (propType.isUnionType() &&\n+                propType.isTruthy()) {\n+              ObjectType emptyObject = getCommonTypes().getEmptyObjectLiteral();\n+              objType.defineInferredProperty(prop, emptyObject, null);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}