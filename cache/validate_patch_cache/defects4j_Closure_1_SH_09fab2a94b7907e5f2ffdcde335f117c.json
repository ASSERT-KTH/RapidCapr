{
    "patch": "    boolean hasAnyReferences = false;\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (referenced.contains(var)) {\n        hasAnyReferences = true;\n      } else if (!hasAnyReferences) {\n        arg.detach();\n        compiler.reportCodeChange();\n      }\n    }\n\n    if (modifyCallSites && callSiteOptimizer.canModifyCallers(function)) {\n      callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9a7a0288 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,19 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean hasAnyReferences = false;\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (referenced.contains(var)) {\n+        hasAnyReferences = true;\n+      } else if (!hasAnyReferences) {\n+        arg.detach();\n+        compiler.reportCodeChange();\n+      }\n+    }\n+\n+    if (modifyCallSites && callSiteOptimizer.canModifyCallers(function)) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}