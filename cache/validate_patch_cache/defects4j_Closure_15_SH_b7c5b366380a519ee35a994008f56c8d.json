{
    "patch": "if (n.isFunction()) {\n  return false;\n}\n\nif (n.isBlock()) {\n  // Check grandchildren for calls to functions with side effects\n  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    for (Node cc = c.getFirstChild(); cc != null; cc = cc.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(cc) && apply(cc)) {\n        return true;\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..149f2774 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,20 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isFunction()) {\n+  return false;\n+}\n+\n+if (n.isBlock()) {\n+  // Check grandchildren for calls to functions with side effects\n+  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+    for (Node cc = c.getFirstChild(); cc != null; cc = cc.getNext()) {\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(cc) && apply(cc)) {\n+        return true;\n+      }\n+    }\n+  }\n+}\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}