{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    boolean hasSideEffects = false;\n    if (block.hasChildren()) {\n        Preconditions.checkState(block.hasOneChild());\n        Node stmt = block.getFirstChild();\n        if (stmt.isReturn()) {\n            hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n        }\n    }\n  \n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Function called using `call` or `apply`\n    if (NodeUtil.isFunctionObjectCall(callNode) || NodeUtil.isFunctionObjectApply(callNode)) {\n        // The first parameter should be `this`\n        if (cArg == null || !cArg.isThis()) {\n            return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    boolean paramCountMismatch = false;\n    while (fnParam != null && cArg != null) {\n        // Check for mutable argument use\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n            // Arguments that have side effects cannot have more than one usage\n            if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1 || hasSideEffects) {\n                return CanInlineResult.NO;\n            }\n        }\n        fnParam = fnParam.getNext();\n        cArg = cArg.getNext();\n    }\n\n    // Count the number of parameters and arguments\n    int paramCount = 0, argCount = 0;\n    for (Node child = NodeUtil.getFunctionParameters(fnNode).getFirstChild(); child != null; child = child.getNext()) {\n        paramCount++;\n    }\n    for (Node child = callNode.getFirstChild().getNext(); child != null; child = child.getNext()) {\n        argCount++;\n    }\n\n    if (paramCount < argCount) {\n        paramCountMismatch = true;\n    }\n\n    // There should be no unmatched arguments\n    if (cArg != null) {\n        return CanInlineResult.NO;\n    }\n\n    // There may be unmatched parameters in the case of default values\n    while (fnParam != null) {\n        // Parameters that have side effects are not inlineable\n        if (NodeUtil.canBeSideEffected(fnParam) || (hasSideEffects && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 0)) {\n            return CanInlineResult.NO;\n        }\n        fnParam = fnParam.getNext();\n    }\n\n    if (!paramCountMismatch) {\n        return CanInlineResult.YES;\n    } else {\n        // This code may call an overloaded function\n        return CanInlineResult.MAYBE;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..639ea0bd 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,76 +686,85 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n+private CanInlineResult canInlineReferenceDirectly(\n       Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+        return CanInlineResult.NO;\n     }\n \n     Node block = fnNode.getLastChild();\n \n     boolean hasSideEffects = false;\n     if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n+        Preconditions.checkState(block.hasOneChild());\n+        Node stmt = block.getFirstChild();\n+        if (stmt.isReturn()) {\n+            hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n+        }\n     }\n+  \n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n+    // Function called using `call` or `apply`\n+    if (NodeUtil.isFunctionObjectCall(callNode) || NodeUtil.isFunctionObjectApply(callNode)) {\n+        // The first parameter should be `this`\n         if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n+            return CanInlineResult.NO;\n         }\n         cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n     }\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n \n-        // Move to the next name.\n+    boolean paramCountMismatch = false;\n+    while (fnParam != null && cArg != null) {\n+        // Check for mutable argument use\n+        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n+            // Arguments that have side effects cannot have more than one usage\n+            if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1 || hasSideEffects) {\n+                return CanInlineResult.NO;\n+            }\n+        }\n         fnParam = fnParam.getNext();\n-      }\n+        cArg = cArg.getNext();\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+    // Count the number of parameters and arguments\n+    int paramCount = 0, argCount = 0;\n+    for (Node child = NodeUtil.getFunctionParameters(fnNode).getFirstChild(); child != null; child = child.getNext()) {\n+        paramCount++;\n+    }\n+    for (Node child = callNode.getFirstChild().getNext(); child != null; child = child.getNext()) {\n+        argCount++;\n+    }\n+\n+    if (paramCount < argCount) {\n+        paramCountMismatch = true;\n+    }\n+\n+    // There should be no unmatched arguments\n+    if (cArg != null) {\n+        return CanInlineResult.NO;\n+    }\n+\n+    // There may be unmatched parameters in the case of default values\n+    while (fnParam != null) {\n+        // Parameters that have side effects are not inlineable\n+        if (NodeUtil.canBeSideEffected(fnParam) || (hasSideEffects && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 0)) {\n+            return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n-      }\n+        fnParam = fnParam.getNext();\n     }\n \n-    return CanInlineResult.YES;\n-  }\n+    if (!paramCountMismatch) {\n+        return CanInlineResult.YES;\n+    } else {\n+        // This code may call an overloaded function\n+        return CanInlineResult.MAYBE;\n+    }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}