{
    "patch": "      if (nameNode.getType() == Token.GETPROP) {\n        if (nameNode.getLastChild() == null) {\n          return false;\n        }\n        if (callNode.hasOneChild()\n            && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                  nameNode.getLastChild().getString())) {\n          return false;\n        }\n\n        if (callNode.isOnlyModifiesThisCall()\n            && evaluatesToLocalValue(nameNode.getFirstChild())) {\n          return false;\n        }\n\n        // Functions in the \"Math\" namespace have no side effects.\n        if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n          if (nameNode.getFirstChild().getType() == Token.REGEXP\n              && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n            return false;\n          } else if (nameNode.getFirstChild().getType() == Token.STRING\n              && STRING_REGEXP_METHODS.contains(\n                  nameNode.getLastChild().getString())) {\n            Node param = nameNode.getNext();\n            if (param != null &&\n                (param.getType() == Token.STRING\n                    || param.getType() == Token.REGEXP))\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..ec5549c1 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -955,6 +955,35 @@ public final class NodeUtil {\n       }\n \n       // Functions in the \"Math\" namespace have no side effects.\n+      if (nameNode.getType() == Token.GETPROP) {\n+        if (nameNode.getLastChild() == null) {\n+          return false;\n+        }\n+        if (callNode.hasOneChild()\n+            && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n+                  nameNode.getLastChild().getString())) {\n+          return false;\n+        }\n+\n+        if (callNode.isOnlyModifiesThisCall()\n+            && evaluatesToLocalValue(nameNode.getFirstChild())) {\n+          return false;\n+        }\n+\n+        // Functions in the \"Math\" namespace have no side effects.\n+        if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n+          if (nameNode.getFirstChild().getType() == Token.REGEXP\n+              && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n+            return false;\n+          } else if (nameNode.getFirstChild().getType() == Token.STRING\n+              && STRING_REGEXP_METHODS.contains(\n+                  nameNode.getLastChild().getString())) {\n+            Node param = nameNode.getNext();\n+            if (param != null &&\n+                (param.getType() == Token.STRING\n+                    || param.getType() == Token.REGEXP))\n+            return false;\n+          }\n \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n         if (nameNode.getFirstChild().getType() == Token.REGEXP",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}