{
    "patch": "if (!modifyCallers) {\n  // Strip unreferenced args off the end of the function declaration.\n  Node lastArg;\n  while ((lastArg = argList.getLastChild()) != null) {\n    Var var = fnScope.getVar(lastArg.getString());\n    if (!referenced.contains(var)) {\n      argList.removeChild(lastArg);\n      compiler.reportCodeChange();\n    } else {\n      break;\n    }\n  }\n  // Check if the function is a constructor and if the last argument is injected.\n  if (NodeUtil.isConstructor(function) && function.getBooleanProp(Node.IS_ARROW_FUNCTION) == false) {\n    Node lastParam = NodeUtil.getLastNonRestParamNode(argList);\n    if (lastParam != null && lastParam.getBooleanProp(Node.INJECTED)) {\n      argList.removeChild(lastParam);\n      compiler.reportCodeChange();\n    }\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0591fe8d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+if (!modifyCallers) {\n+  // Strip unreferenced args off the end of the function declaration.\n+  Node lastArg;\n+  while ((lastArg = argList.getLastChild()) != null) {\n+    Var var = fnScope.getVar(lastArg.getString());\n+    if (!referenced.contains(var)) {\n+      argList.removeChild(lastArg);\n+      compiler.reportCodeChange();\n+    } else {\n+      break;\n+    }\n+  }\n+  // Check if the function is a constructor and if the last argument is injected.\n+  if (NodeUtil.isConstructor(function) && function.getBooleanProp(Node.IS_ARROW_FUNCTION) == false) {\n+    Node lastParam = NodeUtil.getLastNonRestParamNode(argList);\n+    if (lastParam != null && lastParam.getBooleanProp(Node.INJECTED)) {\n+      argList.removeChild(lastParam);\n+      compiler.reportCodeChange();\n+    }\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}