{
    "patch": "            int diff = offsetLocal - offsetAdjusted;\n            long next;\n            if (diff < 0) {\n                next = nextTransition(instantAdjusted);\n            } else {\n                next = previousTransition(instantAdjusted);\n            }\n            long nextAdjusted = next - diff * DateTimeConstants.MILLIS_PER_HOUR;\n            int offsetNext = getOffset(nextAdjusted);\n            if (offsetNext != offsetLocal && offsetNext != offsetAdjusted) {\n                return offsetNext;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e1e4c624 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,17 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            int diff = offsetLocal - offsetAdjusted;\n+            long next;\n+            if (diff < 0) {\n+                next = nextTransition(instantAdjusted);\n+            } else {\n+                next = previousTransition(instantAdjusted);\n+            }\n+            long nextAdjusted = next - diff * DateTimeConstants.MILLIS_PER_HOUR;\n+            int offsetNext = getOffset(nextAdjusted);\n+            if (offsetNext != offsetLocal && offsetNext != offsetAdjusted) {\n+                return offsetNext;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}