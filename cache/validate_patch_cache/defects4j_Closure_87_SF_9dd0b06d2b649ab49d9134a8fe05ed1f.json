{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (!n.isBlock() || !n.hasOneChild()) {\n    return false;\n  }\n  Node child = n.getFirstChild();\n\n  // If the child node is a function expression, it can't be folded\n  if (NodeUtil.isFunctionExpression(child)) {\n    return false;\n  }\n\n  // Traverse through the child expression if it's a ternary expression until we reach\n  // the final expression\n  while (child.getType() == Token.HOOK) {\n    child = child.getFirstChild().getNext();\n  }\n\n  if (!NodeUtil.isExpressionNode(child)) {\n    return false;\n  }\n\n  Node parent = child.getParent();\n  if (parent.getType() != Token.EXPR_RESULT) {\n    // If the child expression is not an expression statement, we can immediately fold it\n    // without worrying about any side effects.\n    return true;\n  }\n\n  if (child.getType() == Token.CALL) {\n    // If the child expression is a simple function call with no parameters, it can be\n    // folded without worrying about any side effects\n    Node target = child.getFirstChild();\n    if (target.getType() == Token.NAME) {\n      String targetName = target.getString();\n      return !NodeUtil.hasCallArgument(child) && !NodeUtil.hasArgumentsReference(n, targetName);\n    }\n  }\n\n  if (!NodeUtil.mayHaveSideEffects(child)) {\n    // If the child expression doesn't have any side effects, and it's either a simple\n    // statement like `foo()` or a complex one like `x = foo()`, we can fold it.\n    boolean isAssignable = NodeUtil.isExpressionAssignableTo(child, parent);\n    if (isAssignable) {\n      return true;\n    }\n    Node grandparent = parent.getParent();\n    if (parent.getType() == Token.GETPROP || parent.getType() == Token.VOID ||\n        (grandparent != null && grandparent.getType() == Token.FOR &&\n        grandparent.getFirstChild() == parent)) {\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..a42da22e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,61 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (!n.isBlock() || !n.hasOneChild()) {\n+    return false;\n+  }\n+  Node child = n.getFirstChild();\n+\n+  // If the child node is a function expression, it can't be folded\n+  if (NodeUtil.isFunctionExpression(child)) {\n+    return false;\n+  }\n+\n+  // Traverse through the child expression if it's a ternary expression until we reach\n+  // the final expression\n+  while (child.getType() == Token.HOOK) {\n+    child = child.getFirstChild().getNext();\n+  }\n \n+  if (!NodeUtil.isExpressionNode(child)) {\n     return false;\n   }\n \n+  Node parent = child.getParent();\n+  if (parent.getType() != Token.EXPR_RESULT) {\n+    // If the child expression is not an expression statement, we can immediately fold it\n+    // without worrying about any side effects.\n+    return true;\n+  }\n+\n+  if (child.getType() == Token.CALL) {\n+    // If the child expression is a simple function call with no parameters, it can be\n+    // folded without worrying about any side effects\n+    Node target = child.getFirstChild();\n+    if (target.getType() == Token.NAME) {\n+      String targetName = target.getString();\n+      return !NodeUtil.hasCallArgument(child) && !NodeUtil.hasArgumentsReference(n, targetName);\n+    }\n+  }\n+\n+  if (!NodeUtil.mayHaveSideEffects(child)) {\n+    // If the child expression doesn't have any side effects, and it's either a simple\n+    // statement like `foo()` or a complex one like `x = foo()`, we can fold it.\n+    boolean isAssignable = NodeUtil.isExpressionAssignableTo(child, parent);\n+    if (isAssignable) {\n+      return true;\n+    }\n+    Node grandparent = parent.getParent();\n+    if (parent.getType() == Token.GETPROP || parent.getType() == Token.VOID ||\n+        (grandparent != null && grandparent.getType() == Token.FOR &&\n+        grandparent.getFirstChild() == parent)) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}