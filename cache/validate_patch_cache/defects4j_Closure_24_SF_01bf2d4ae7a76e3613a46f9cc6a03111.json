{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    Node grandparent = parent == null ? null : parent.getParent();\n\n    if ((parent == null || !parent.isVar()) ||\n        (grandparent == null || (!grandparent.isBlock() && !grandparent.isScript()))) {\n      continue;\n    }\n\n    Node targetNode = n.getFirstChild(); // get the name node\n    if (targetNode == null || !targetNode.isQualifiedName()) {\n      // the variable is not an alias; report it as an error\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      continue;\n    }\n\n    String name = targetNode.getQualifiedName();\n    Var aliasVar = scope.getVar(name);\n\n    if (aliasVar == null || aliasVar.getInitialValue() == null) {\n      continue;\n    }\n\n    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n\n    if (qualifiedName == null) {\n      continue;\n    }\n\n    aliases.put(name, aliasVar);\n    transformation.addAlias(name, qualifiedName);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..eb4bae80 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,33 +269,43 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n-      }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    Node grandparent = parent == null ? null : parent.getParent();\n+\n+    if ((parent == null || !parent.isVar()) ||\n+        (grandparent == null || (!grandparent.isBlock() && !grandparent.isScript()))) {\n+      continue;\n     }\n \n+    Node targetNode = n.getFirstChild(); // get the name node\n+    if (targetNode == null || !targetNode.isQualifiedName()) {\n+      // the variable is not an alias; report it as an error\n+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+      continue;\n+    }\n+\n+    String name = targetNode.getQualifiedName();\n+    Var aliasVar = scope.getVar(name);\n+\n+    if (aliasVar == null || aliasVar.getInitialValue() == null) {\n+      continue;\n+    }\n+\n+    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+\n+    if (qualifiedName == null) {\n+      continue;\n+    }\n+\n+    aliases.put(name, aliasVar);\n+    transformation.addAlias(name, qualifiedName);\n+  }\n+}\n+\n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {\n         preprocessorSymbolTable.addReference(n.getFirstChild());",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}