{
    "patch": "        MockHandler<T> oldMockHandlerImpl = (MockHandler<T>) org.mockito.internal.util.JavaEightUtil.<T>getInternalState(mock, \"handler\");\n        MockHandler<T> newMockHandlerImpl = new MockHandler<T>(oldMockHandlerImpl.getMockSettings());\n        MethodInterceptorFilter newFilterImpl = new MethodInterceptorFilter(newMockHandlerImpl, newMockHandlerImpl.getMockSettings().getMockName());\n        org.mockito.internal.util.JavaEightUtil.setInternalState(mock, \"handler\", newMockHandlerImpl);\n        ((Factory) mock).setCallback(0, newFilterImpl);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..83995832e 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,14 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> oldMockHandlerImpl = (MockHandler<T>) org.mockito.internal.util.JavaEightUtil.<T>getInternalState(mock, \"handler\");\n+        MockHandler<T> newMockHandlerImpl = new MockHandler<T>(oldMockHandlerImpl.getMockSettings());\n+        MethodInterceptorFilter newFilterImpl = new MethodInterceptorFilter(newMockHandlerImpl, newMockHandlerImpl.getMockSettings().getMockName());\n+        org.mockito.internal.util.JavaEightUtil.setInternalState(mock, \"handler\", newMockHandlerImpl);\n+        ((Factory) mock).setCallback(0, newFilterImpl);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}