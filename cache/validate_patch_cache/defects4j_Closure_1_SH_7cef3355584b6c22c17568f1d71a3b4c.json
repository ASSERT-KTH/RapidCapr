{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    // Retrieve the function node and make sure it's a function.\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    // Check to see if the function is a setter or getter key.\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    \n    // Retrieve the function argument list.\n    Node argList = getFunctionArgList(function);\n\n    // Check if the function can have its callers modified.\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n      // Strip unreferenced arguments off the end of the argument list.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n          Var var = fnScope.getVar(lastArg.getString());\n          if (!referenced.contains(var)) {\n              argList.removeChild(lastArg);\n              compiler.reportCodeChange();\n          } else {\n              break;\n          }\n          lastArg = argList.getLastChild();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..fd431d03 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,50 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    // Notice that removing unreferenced function args breaks\n+    // Function.prototype.length. In advanced mode, we don't really care\n+    // about this: we consider \"length\" the equivalent of reflecting on\n+    // the function's lexical source.\n+    //\n+    // Rather than create a new option for this, we assume that if the user\n+    // is removing globals, then it's OK to remove unused function args.\n+    //\n+    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+\n+    // Retrieve the function node and make sure it's a function.\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+\n+    // Check to see if the function is a setter or getter key.\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    \n+    // Retrieve the function argument list.\n+    Node argList = getFunctionArgList(function);\n+\n+    // Check if the function can have its callers modified.\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced arguments off the end of the argument list.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+          Var var = fnScope.getVar(lastArg.getString());\n+          if (!referenced.contains(var)) {\n+              argList.removeChild(lastArg);\n+              compiler.reportCodeChange();\n+          } else {\n+              break;\n+          }\n+          lastArg = argList.getLastChild();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}