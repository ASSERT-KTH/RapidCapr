{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      //Always traverse the left side of an assignment\n      if (n == lhs) {\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n\n        // Don't traverse properties of prototype objects\n        if (isPrototypeProperty(lhs) || isNestedPrototypeProperty(lhs)) {\n          return false;\n        }\n\n        // Traverse object properties inside functions and global 'this' references\n        if ((parent.getParent().getType() == Token.FUNCTION) ||\n            (lhs.getType() == Token.NAME && \"this\".equals(lhs.getString()))) {\n          return true;\n        }\n        \n        // If this is a computed property, we can't determine at compile-time\n        // what the name is.\n        if (n == rhs) {\n          if (lhs.getType() == Token.OBJECTLIT ||\n              lhs.getType() == Token.ARRAYLIT) {\n            return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..ec40757e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,36 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n-    }\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n       Node lhs = parent.getFirstChild();\n       Node rhs = lhs.getNext();\n-      \n+\n+      //Always traverse the left side of an assignment\n       if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n         if (assignLhsChild == null) {\n           assignLhsChild = lhs;\n         }\n       } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n-    }\n \n-    return true;\n-  }\n+        // Don't traverse properties of prototype objects\n+        if (isPrototypeProperty(lhs) || isNestedPrototypeProperty(lhs)) {\n+          return false;\n+        }\n+\n+        // Traverse object properties inside functions and global 'this' references\n+        if ((parent.getParent().getType() == Token.FUNCTION) ||\n+            (lhs.getType() == Token.NAME && \"this\".equals(lhs.getString()))) {\n+          return true;\n+        }\n+        \n+        // If this is a computed property, we can't determine at compile-time\n+        // what the name is.\n+        if (n == rhs) {\n+          if (lhs.getType() == Token.OBJECTLIT ||\n+              lhs.getType() == Token.ARRAYLIT) {\n+            return true;\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}