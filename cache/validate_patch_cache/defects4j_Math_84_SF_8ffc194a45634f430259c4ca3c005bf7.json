{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n\n        final boolean reflectedIsBetter = comparator.compare(reflected, original[original.length - 1]) < 0;\n        RealPointValuePair[] replacement = null;\n        if (reflectedIsBetter) {\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, ReflectionCoefficient.EXPANSION_COEFFICIENT, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                replacement = expanded.getPoint() == null ? reflect(original, comparator) : expanded;\n            } else {\n                replacement = reflected;\n            }\n        } else {\n            final boolean reflectedIsWorst = comparator.compare(reflected, original[0]) >= 0;\n            if (reflectedIsWorst) {\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, ReflectionCoefficient.CONTRACTION_COEFFICIENT, comparator);\n                if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n                    replacement = contracted.getPoint() == null ? reflect(original, comparator) : contracted;\n                } else {\n                    replacement = shrink(original, comparator);\n                }\n            } else {\n                replacement = reflected;\n            }\n        }\n\n        // check convergence\n        final RealPointValuePair newBest = replacement[0];\n        final double newValue = newBest.getValue();\n        final double oldValue = best.getValue();\n        if (Math.abs(newValue - oldValue) <= getRelativeThreshold() * (Math.abs(oldValue) + getAbsoluteThreshold())) {\n            return;\n        }\n\n        simplex = replacement;\n\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..d9f21da77 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,59 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n \n+        final boolean reflectedIsBetter = comparator.compare(reflected, original[original.length - 1]) < 0;\n+        RealPointValuePair[] replacement = null;\n+        if (reflectedIsBetter) {\n+            // compute the expanded simplex\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, ReflectionCoefficient.EXPANSION_COEFFICIENT, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                replacement = expanded.getPoint() == null ? reflect(original, comparator) : expanded;\n+            } else {\n+                replacement = reflected;\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+        } else {\n+            final boolean reflectedIsWorst = comparator.compare(reflected, original[0]) >= 0;\n+            if (reflectedIsWorst) {\n+                // compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, ReflectionCoefficient.CONTRACTION_COEFFICIENT, comparator);\n+                if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n+                    replacement = contracted.getPoint() == null ? reflect(original, comparator) : contracted;\n+                } else {\n+                    replacement = shrink(original, comparator);\n+                }\n+            } else {\n+                replacement = reflected;\n             }\n+        }\n \n+        // check convergence\n+        final RealPointValuePair newBest = replacement[0];\n+        final double newValue = newBest.getValue();\n+        final double oldValue = best.getValue();\n+        if (Math.abs(newValue - oldValue) <= getRelativeThreshold() * (Math.abs(oldValue) + getAbsoluteThreshold())) {\n+            return;\n         }\n \n+        simplex = replacement;\n+\n     }\n \n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}