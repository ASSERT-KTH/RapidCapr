{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  // Resolution via properties is first in order to trigger the warnings built into that method\n  // before we attempt to resolve via the registry.\n  boolean resolved = resolveViaProperties(t, enclosing, new HashSet<>());\n  if (resolved) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  resolved = resolveViaRegistry(t, enclosing);\n  if (resolved) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  if (isResolved()) {\n    finishPropertyContinuations();\n  }\n  return registry.isLastGeneration() ? getReferencedType() : this;\n}\n\nprivate boolean resolveViaProperties(ErrorReporter errorReporter, StaticScope<JSType> scope,\n      Set<SoyTypeRegistry> visitedRegistries) {\n  if (!visitedRegistries.add(registry)) {\n    // Return immediately if registry has been visited before to prevent infinite recursion.\n    return false;\n  }\n  if (soyType != null) {\n    return true;\n  }\n  if (paramTypeSupplier != null) {\n    JSType paramType = paramTypeSupplier.get();\n    if (paramType != null) {\n      soyType = paramType;\n      return true;\n    }\n  }\n  for (Property prop : properties) {\n    if (prop.name().equals(\"constructor\")) {\n      continue;\n    }\n    boolean success = prop.resolve(errorReporter, scope);\n    if (success && prop.type() != null) {\n      if (soyType == null) {\n        soyType = prop.type();\n      } else if (!soyType.isAssignableFrom(prop.type())) {\n        errorReporter.report(\n            prop.node().getSourceLocation(),\n            UNEXPECTED_PROPERTY_TYPE,\n            prop.name(),\n            soyType.getKind().toString(),\n            prop.type().getKind().toString());\n      }\n    }\n  }\n  return soyType != null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..8d39528f 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,71 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  // Resolution via properties is first in order to trigger the warnings built into that method\n+  // before we attempt to resolve via the registry.\n+  boolean resolved = resolveViaProperties(t, enclosing, new HashSet<>());\n+  if (resolved) {\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n+  resolved = resolveViaRegistry(t, enclosing);\n+  if (resolved) {\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+  if (isResolved()) {\n+    finishPropertyContinuations();\n+  }\n+  return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n+\n+private boolean resolveViaProperties(ErrorReporter errorReporter, StaticScope<JSType> scope,\n+      Set<SoyTypeRegistry> visitedRegistries) {\n+  if (!visitedRegistries.add(registry)) {\n+    // Return immediately if registry has been visited before to prevent infinite recursion.\n+    return false;\n+  }\n+  if (soyType != null) {\n+    return true;\n+  }\n+  if (paramTypeSupplier != null) {\n+    JSType paramType = paramTypeSupplier.get();\n+    if (paramType != null) {\n+      soyType = paramType;\n+      return true;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n+  for (Property prop : properties) {\n+    if (prop.name().equals(\"constructor\")) {\n+      continue;\n+    }\n+    boolean success = prop.resolve(errorReporter, scope);\n+    if (success && prop.type() != null) {\n+      if (soyType == null) {\n+        soyType = prop.type();\n+      } else if (!soyType.isAssignableFrom(prop.type())) {\n+        errorReporter.report(\n+            prop.node().getSourceLocation(),\n+            UNEXPECTED_PROPERTY_TYPE,\n+            prop.name(),\n+            soyType.getKind().toString(),\n+            prop.type().getKind().toString());\n+      }\n+    }\n+  }\n+  return soyType != null;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}