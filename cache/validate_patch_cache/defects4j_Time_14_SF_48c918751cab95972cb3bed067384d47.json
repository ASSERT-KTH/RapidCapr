{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            boolean changed = false;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i == fieldIndex) {\n                    try {\n                        instant = partial.getFieldType(i).getField(iChronology).add(instant, valueToAdd);\n                        changed = true;\n                    } catch (IllegalArgumentException ex) {\n                        if (partial.getFieldType(i).getFieldDurationType().getFieldType() != DurationFieldType.months()) {\n                            throw ex;\n                        }\n                        Partial copy = partial.withFieldAdded(DurationFieldType.months(), valueToAdd);\n                        return iChronology.get(copy, 0L);\n                    }\n                } else {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }\n            }\n            if (changed) {\n                return iChronology.get(partial, instant);\n            }\n            return values;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..ef06d16d 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,14 +206,30 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            boolean changed = false;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                if (i == fieldIndex) {\n+                    try {\n+                        instant = partial.getFieldType(i).getField(iChronology).add(instant, valueToAdd);\n+                        changed = true;\n+                    } catch (IllegalArgumentException ex) {\n+                        if (partial.getFieldType(i).getFieldDurationType().getFieldType() != DurationFieldType.months()) {\n+                            throw ex;\n+                        }\n+                        Partial copy = partial.withFieldAdded(DurationFieldType.months(), valueToAdd);\n+                        return iChronology.get(copy, 0L);\n+                    }\n+                } else {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            if (changed) {\n+                return iChronology.get(partial, instant);\n+            }\n+            return values;\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}