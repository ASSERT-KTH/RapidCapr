{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n\n    long weeksMillis = (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    millis += weeksMillis;\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    int years = getYears();\n    int months = getMonths() + 12 * years;\n\n    if (weeksMillis > 0) {\n        int days = getDays();\n        if (days > 0) {\n            days += ((int) (weeksMillis / DateTimeConstants.MILLIS_PER_DAY));\n            result = result.withDays(days % 7).withWeeks((int) ((weeksMillis / DateTimeConstants.MILLIS_PER_DAY) / 7));\n        } else {\n            result = result.withWeeks((int) ((weeksMillis / DateTimeConstants.MILLIS_PER_DAY) / 7));\n        }\n    }\n\n    if (months != 0) {\n        result = result.withMonths(months);\n    }\n\n    return result.normalizedStandard();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..76edc4fe 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,36 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+\n+    long weeksMillis = (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    millis += weeksMillis;\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+\n+    int years = getYears();\n+    int months = getMonths() + 12 * years;\n+\n+    if (weeksMillis > 0) {\n+        int days = getDays();\n+        if (days > 0) {\n+            days += ((int) (weeksMillis / DateTimeConstants.MILLIS_PER_DAY));\n+            result = result.withDays(days % 7).withWeeks((int) ((weeksMillis / DateTimeConstants.MILLIS_PER_DAY) / 7));\n+        } else {\n+            result = result.withWeeks((int) ((weeksMillis / DateTimeConstants.MILLIS_PER_DAY) / 7));\n         }\n-        return result;\n     }\n \n+    if (months != 0) {\n+        result = result.withMonths(months);\n+    }\n+\n+    return result.normalizedStandard();\n+}\n+\n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}