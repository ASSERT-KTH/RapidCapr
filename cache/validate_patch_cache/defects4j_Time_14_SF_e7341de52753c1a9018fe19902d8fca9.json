{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean isLeapYear = true;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n                isLeapYear = iChronology.year().isLeap(values[0]);\n                values[i] += valueToAdd;\n                if (values[i] < 1) {\n                    // Handle negative month values\n                    int yearDiff = Math.abs(values[i] / 12) + 1;\n                    values[i] += yearDiff * 12;\n                    values[0] -= yearDiff;\n                    isLeapYear = iChronology.year().isLeap(values[0]);\n                }\n                values[i] = ((values[i] - 1) % 12) + 1;\n                if (isLeapYear && values[i] == 2 && values[1] == 29) {\n                    // Special case for February 29 in leap years\n                    values[2] = 29;\n                } else {\n                    // Set the day of the month to the minimum or maximum value if necessary\n                    int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n                    int minDayOfMonth = iChronology.dayOfMonth().getMinimumValue(instant);\n                    if (values[2] > maxDayOfMonth) {\n                        values[2] = maxDayOfMonth;\n                    }\n                    if (values[2] < minDayOfMonth) {\n                        values[2] = minDayOfMonth;\n                    }\n                }\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..c5095ea7 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,48 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean isLeapYear = true;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n+                isLeapYear = iChronology.year().isLeap(values[0]);\n+                values[i] += valueToAdd;\n+                if (values[i] < 1) {\n+                    // Handle negative month values\n+                    int yearDiff = Math.abs(values[i] / 12) + 1;\n+                    values[i] += yearDiff * 12;\n+                    values[0] -= yearDiff;\n+                    isLeapYear = iChronology.year().isLeap(values[0]);\n+                }\n+                values[i] = ((values[i] - 1) % 12) + 1;\n+                if (isLeapYear && values[i] == 2 && values[1] == 29) {\n+                    // Special case for February 29 in leap years\n+                    values[2] = 29;\n+                } else {\n+                    // Set the day of the month to the minimum or maximum value if necessary\n+                    int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+                    int minDayOfMonth = iChronology.dayOfMonth().getMinimumValue(instant);\n+                    if (values[2] > maxDayOfMonth) {\n+                        values[2] = maxDayOfMonth;\n+                    }\n+                    if (values[2] < minDayOfMonth) {\n+                        values[2] = minDayOfMonth;\n+                    }\n+                }\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 2",
    "test_result": "FAIL"
}