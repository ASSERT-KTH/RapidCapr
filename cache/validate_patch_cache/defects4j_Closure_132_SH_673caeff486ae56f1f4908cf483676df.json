{
    "patch": "              Node assignName = thenOp.removeFirstChild();\n              Node thenExpr = thenOp.removeFirstChild();\n              Node elseExpr = elseOp.getLastChild().detachFromParent();\n              Node booleanCondition = NodeUtil.getBinaryOperatorForTokenType(\n                  TokenType.HOOK,\n                  cond,\n                  thenExpr,\n                  elseExpr\n              );\n              Node nameNode = NodeUtil.newName(contextualizeName(assignName.getString()));\n              Node assignNode = NodeUtil.newAssignNode(nameNode, booleanCondition.detachFromParent());\n              Node exprNode = NodeUtil.newExpr(assignNode);\n              parent.replaceChild(n, exprNode);\n              reportCodeChange();\n\n              return exprNode;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..c4ccd86e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,22 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              Node assignName = thenOp.removeFirstChild();\n+              Node thenExpr = thenOp.removeFirstChild();\n+              Node elseExpr = elseOp.getLastChild().detachFromParent();\n+              Node booleanCondition = NodeUtil.getBinaryOperatorForTokenType(\n+                  TokenType.HOOK,\n+                  cond,\n+                  thenExpr,\n+                  elseExpr\n+              );\n+              Node nameNode = NodeUtil.newName(contextualizeName(assignName.getString()));\n+              Node assignNode = NodeUtil.newAssignNode(nameNode, booleanCondition.detachFromParent());\n+              Node exprNode = NodeUtil.newExpr(assignNode);\n+              parent.replaceChild(n, exprNode);\n+              reportCodeChange();\n+\n+              return exprNode;\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}