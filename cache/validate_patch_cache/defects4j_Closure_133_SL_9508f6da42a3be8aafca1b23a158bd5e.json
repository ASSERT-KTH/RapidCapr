{
    "patch": "private void parseJSDocIfNeeded(NodeTraversal t, JSDocInfo info) {\n  if (info != null && !info.isParsed()) {\n    try {\n        info.parseDocumentation();\n    } catch (IllegalStateException ex) {\n        if (ex.getMessage().equals(\"Recorded bad position information\")) {\n          info = null;\n        } else {\n          throw ex;\n        }\n    }\n    t.getCompiler().reportChangeToEnclosingScope(info);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..52fd3e24 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,20 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private void parseJSDocIfNeeded(NodeTraversal t, JSDocInfo info) {\n+  if (info != null && !info.isParsed()) {\n+    try {\n+        info.parseDocumentation();\n+    } catch (IllegalStateException ex) {\n+        if (ex.getMessage().equals(\"Recorded bad position information\")) {\n+          info = null;\n+        } else {\n+          throw ex;\n+        }\n+    }\n+    t.getCompiler().reportChangeToEnclosingScope(info);\n+  }\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}