{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    \n    boolean canRemoveUnreferencedArgs = true;\n    // Check if any @this annotations are used on the function\n    JSType type = function.getJSType();\n    if (type != null) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined().getGreatestSubtype(\n          ObjectType.cast(typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_TYPE))));\n      if (objType != null) {\n        ObjectPrototype objPrototype = typeRegistry.getNativeObjectPrototype();\n        FunctionType funcType = objPrototype.getOwnerFunctionType(NodeUtil.getName(function));\n        if (funcType != null) {\n          canRemoveUnreferencedArgs =\n              !funcType.hasRestFormals() && !funcType.isConstructible();\n        }\n      }\n    }\n    \n    if (!modifyCallers && canRemoveUnreferencedArgs) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else if (modifyCallers) {\n      // Don't strip unreferenced args if we are optimizing calls.\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6f40731e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,50 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    \n+    boolean canRemoveUnreferencedArgs = true;\n+    // Check if any @this annotations are used on the function\n+    JSType type = function.getJSType();\n+    if (type != null) {\n+      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined().getGreatestSubtype(\n+          ObjectType.cast(typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_TYPE))));\n+      if (objType != null) {\n+        ObjectPrototype objPrototype = typeRegistry.getNativeObjectPrototype();\n+        FunctionType funcType = objPrototype.getOwnerFunctionType(NodeUtil.getName(function));\n+        if (funcType != null) {\n+          canRemoveUnreferencedArgs =\n+              !funcType.hasRestFormals() && !funcType.isConstructible();\n+        }\n+      }\n+    }\n+    \n+    if (!modifyCallers && canRemoveUnreferencedArgs) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else if (modifyCallers) {\n+      // Don't strip unreferenced args if we are optimizing calls.\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}