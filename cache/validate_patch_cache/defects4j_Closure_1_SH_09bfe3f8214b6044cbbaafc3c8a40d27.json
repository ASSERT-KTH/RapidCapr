{
    "patch": "      // Use an auxiliary list as a stack\n      LinkedList<Node> candidateParams = new LinkedList<>();\n      // add all the function's parameters to the stack\n      for (Node n : argList.children()) {\n        candidateParams.push(n);\n      }\n\n      while (!candidateParams.isEmpty()) {\n        // remove the last element in the stack\n        Node param = candidateParams.pop();\n        String paramName = param.getString();\n        Var var = fnScope.getVar(paramName);\n        if (!referenced.contains(var)) {\n\n          // Remove the parameter from its parent\n          param.detach();\n          compiler.reportCodeChange();\n        }\n        else {\n          // If we can't remove this parameter then we \n          // don't need to process siblings or parents\n          return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a9369163 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,28 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // Use an auxiliary list as a stack\n+      LinkedList<Node> candidateParams = new LinkedList<>();\n+      // add all the function's parameters to the stack\n+      for (Node n : argList.children()) {\n+        candidateParams.push(n);\n+      }\n+\n+      while (!candidateParams.isEmpty()) {\n+        // remove the last element in the stack\n+        Node param = candidateParams.pop();\n+        String paramName = param.getString();\n+        Var var = fnScope.getVar(paramName);\n+        if (!referenced.contains(var)) {\n+\n+          // Remove the parameter from its parent\n+          param.detach();\n+          compiler.reportCodeChange();\n+        }\n+        else {\n+          // If we can't remove this parameter then we \n+          // don't need to process siblings or parents\n+          return;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}