{
    "patch": ">>> [ INFILL ] <<<\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop;\n\n      // Find the lowest property defined on a class with visibility\n      // information.\n      if (isOverride) {\n        objectType = objectType.getImplicitPrototype();\n      }\n      JSDocInfo docInfo = null;\n      for (; objectType != null;\n           objectType = objectType.getImplicitPrototype()) {\n        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n        if (docInfo != null &&\n            docInfo.getVisibility() != Visibility.INHERITED) {\n          break;\n        }\n      }\n\n      if (objectType == null) {\n        // We couldn't find a visibility modifier; assume it's public.\n        return;\n      }\n\n      boolean sameInput =\n          t.getInput().getName().equals(docInfo.getSourceName());\n      Visibility visibility = docInfo.getVisibility();\n      JSType ownerType = normalizeClassType(objectType);\n      if (isOverride) {\n        // Check an ASSIGN statement that's trying to override a property\n        // on a superclass.\n        JSDocInfo overridingInfo = parent.getJSDocInfo();\n        Visibility overridingVisibility = overridingInfo == null ?\n            Visibility.INHERITED : overridingInfo.getVisibility();\n\n        // Check that (a) the property *can* be overridden, and\n        // (b) that the visibility of the override is the same as the\n        // visibility of the original property.\n        if (ownerType != null && visibility == Visibility.PRIVATE &&\n            !sameInput) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..6b16dddf 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,46 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+>>> [ INFILL ] <<<\n+          parent.getType() == Token.ASSIGN &&\n+          parent.getFirstChild() == getprop;\n+\n+      // Find the lowest property defined on a class with visibility\n+      // information.\n+      if (isOverride) {\n+        objectType = objectType.getImplicitPrototype();\n+      }\n+      JSDocInfo docInfo = null;\n+      for (; objectType != null;\n+           objectType = objectType.getImplicitPrototype()) {\n+        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n+        if (docInfo != null &&\n+            docInfo.getVisibility() != Visibility.INHERITED) {\n+          break;\n+        }\n+      }\n+\n+      if (objectType == null) {\n+        // We couldn't find a visibility modifier; assume it's public.\n+        return;\n+      }\n+\n+      boolean sameInput =\n+          t.getInput().getName().equals(docInfo.getSourceName());\n+      Visibility visibility = docInfo.getVisibility();\n+      JSType ownerType = normalizeClassType(objectType);\n+      if (isOverride) {\n+        // Check an ASSIGN statement that's trying to override a property\n+        // on a superclass.\n+        JSDocInfo overridingInfo = parent.getJSDocInfo();\n+        Visibility overridingVisibility = overridingInfo == null ?\n+            Visibility.INHERITED : overridingInfo.getVisibility();\n+\n+        // Check that (a) the property *can* be overridden, and\n+        // (b) that the visibility of the override is the same as the\n+        // visibility of the original property.\n+        if (ownerType != null && visibility == Visibility.PRIVATE &&\n+            !sameInput) {\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}