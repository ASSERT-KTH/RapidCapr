{
    "patch": "      if (parent.getType() == Token.EXPR_RESULT) {\n        Node gparent = parent.getParent();\n        if (gparent != null) {\n          Node ggparent = gparent.getParent();\n          if (ggparent != null && ggparent.getType() == Token.ASSIGN &&\n              NodeUtil.isGet(ggparent.getFirstChild()) &&\n              ggparent.getFirstChild().getFirstChild().getString().equals(\"prototype\")) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..da88a470 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,13 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.EXPR_RESULT) {\n+        Node gparent = parent.getParent();\n+        if (gparent != null) {\n+          Node ggparent = gparent.getParent();\n+          if (ggparent != null && ggparent.getType() == Token.ASSIGN &&\n+              NodeUtil.isGet(ggparent.getFirstChild()) &&\n+              ggparent.getFirstChild().getFirstChild().getString().equals(\"prototype\")) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}