{
    "patch": "            if (offsetLocal < offsetAdjusted) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            } else if (offsetLocal > offsetAdjusted) {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n                if (prevLocal < prevAdjusted) {\n                    return offsetAdjusted;\n                } else if (prevLocal > prevAdjusted) {\n                    return offsetLocal;\n                } else {\n                    if (offsetAdjusted != 0) {\n                        long nextLocal = nextTransition(prevLocal + 1);\n                        if (nextLocal <= instantLocal) {\n                            return offsetAdjusted;\n                        } else {\n                            return offsetLocal;\n                        }\n                    } else {\n                        return offsetLocal;\n                    }\n                }\n            } else {\n                if (offsetLocal != 0) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                    if (nextLocal != nextAdjusted) {\n                        return offsetLocal;\n                    }\n                }\n                return offsetAdjusted;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..db435da4 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,41 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal < offsetAdjusted) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+            } else if (offsetLocal > offsetAdjusted) {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+                if (prevLocal < prevAdjusted) {\n+                    return offsetAdjusted;\n+                } else if (prevLocal > prevAdjusted) {\n+                    return offsetLocal;\n+                } else {\n+                    if (offsetAdjusted != 0) {\n+                        long nextLocal = nextTransition(prevLocal + 1);\n+                        if (nextLocal <= instantLocal) {\n+                            return offsetAdjusted;\n+                        } else {\n+                            return offsetLocal;\n+                        }\n+                    } else {\n+                        return offsetLocal;\n+                    }\n+                }\n+            } else {\n+                if (offsetLocal != 0) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+                    if (nextLocal != nextAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                }\n+                return offsetAdjusted;\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}