{
    "patch": "public Complex add(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double r = real + rhs.getReal();\n    double i = imaginary + rhs.getImaginary();\n    if (Double.isInfinite(r) || Double.isInfinite(i)) {\n        throw new ArithmeticException(\"Result is infinite\");\n    }\n    if (Double.isNaN(r) || Double.isNaN(i)) {\n        throw new ArithmeticException(\"Result is undefined\");\n    }\n    return createComplex(r, i);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..a2bba8534 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -147,12 +147,18 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n      * @return the complex number sum\n      * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs)\n-        throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n+public Complex add(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n+    double r = real + rhs.getReal();\n+    double i = imaginary + rhs.getImaginary();\n+    if (Double.isInfinite(r) || Double.isInfinite(i)) {\n+        throw new ArithmeticException(\"Result is infinite\");\n     }\n+    if (Double.isNaN(r) || Double.isNaN(i)) {\n+        throw new ArithmeticException(\"Result is undefined\");\n+    }\n+    return createComplex(r, i);\n+}\n \n     /**\n      * Return the conjugate of this complex number. The conjugate of",
    "result_reason": "java.lang.ArithmeticException: Result is undefined",
    "test_result": "FAIL"
}