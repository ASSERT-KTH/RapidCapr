{
    "patch": "          // Search for the last assignment in the loop.\n          Reference lastAssignment = null;\n          for (int i = index - 1; i >= 0; i--) {\n            if (references.get(i).getBasicBlock() != block) {\n              break;\n            }\n            if (references.get(i).isAssignment()) {\n              lastAssignment = references.get(i);\n              break;\n            }\n          }\n\n          // Check if the last assignment is in the loop header or in the loop body.\n          BasicBlock loopHeader = block.getLoopHeader();\n          if (lastAssignment.getBasicBlock().equals(loopHeader)) {\n            // The last assignment is in the loop header.\n            DiGraphEdge<?, Branch> edges = block.getIncomingEdges().iterator().next();\n            if (edges.getValue().getType() == Branch.Type.INCREMENT ||\n                edges.getValue().getType() == Branch.Type.DECREMENT) {\n              // Check if the loop variable is used more than once in the body.\n              boolean usedMoreThanOnceInLoopBody = false;\n              for (int i = index + 1; i < references.size(); i++) {\n                Reference reference = references.get(i);\n                if (reference.isName() &&\n                    reference.getNameNode() == edges.getTarget().getValue().getJSErrorNode()) {\n                  BasicBlock referenceBlock = reference.getBasicBlock();\n                  if (referenceBlock != null && referenceBlock.getParent() == block) {\n                    usedMoreThanOnceInLoopBody = true;\n                    break;\n                  }\n                }\n              }\n              if (usedMoreThanOnceInLoopBody) {\n                return false;\n              }\n            } else {\n              return false;\n            }\n          } else {\n            // The last assignment is in the loop body.\n            for (BasicBlock succ : block.getSuccessors()) {\n              if (!succ.isBackwardBranch()) {\n                // The last assignment is not in the last iteration of the loop.\n                return false;\n              }\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..0f561d92 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,52 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Search for the last assignment in the loop.\n+          Reference lastAssignment = null;\n+          for (int i = index - 1; i >= 0; i--) {\n+            if (references.get(i).getBasicBlock() != block) {\n+              break;\n+            }\n+            if (references.get(i).isAssignment()) {\n+              lastAssignment = references.get(i);\n+              break;\n+            }\n+          }\n+\n+          // Check if the last assignment is in the loop header or in the loop body.\n+          BasicBlock loopHeader = block.getLoopHeader();\n+          if (lastAssignment.getBasicBlock().equals(loopHeader)) {\n+            // The last assignment is in the loop header.\n+            DiGraphEdge<?, Branch> edges = block.getIncomingEdges().iterator().next();\n+            if (edges.getValue().getType() == Branch.Type.INCREMENT ||\n+                edges.getValue().getType() == Branch.Type.DECREMENT) {\n+              // Check if the loop variable is used more than once in the body.\n+              boolean usedMoreThanOnceInLoopBody = false;\n+              for (int i = index + 1; i < references.size(); i++) {\n+                Reference reference = references.get(i);\n+                if (reference.isName() &&\n+                    reference.getNameNode() == edges.getTarget().getValue().getJSErrorNode()) {\n+                  BasicBlock referenceBlock = reference.getBasicBlock();\n+                  if (referenceBlock != null && referenceBlock.getParent() == block) {\n+                    usedMoreThanOnceInLoopBody = true;\n+                    break;\n+                  }\n+                }\n+              }\n+              if (usedMoreThanOnceInLoopBody) {\n+                return false;\n+              }\n+            } else {\n+              return false;\n+            }\n+          } else {\n+            // The last assignment is in the loop body.\n+            for (BasicBlock succ : block.getSuccessors()) {\n+              if (!succ.isBackwardBranch()) {\n+                // The last assignment is not in the last iteration of the loop.\n+                return false;\n+              }\n+            }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}