{
    "patch": "public static String anti_shuffle(String s) {\n    String[] words = s.split(\" \");\n    StringBuilder result = new StringBuilder();\n\n    for (String word : words) {\n        char[] chars = word.toCharArray();\n\n        // Using quicksort algorithm instead of Arrays.sort()\n        quickSort(chars, 0, chars.length-1);\n\n        result.append(chars);\n        result.append(\" \");\n    }\n\n    return result.toString().trim();\n\n}\n\n// Quicksort algorithm\npublic static void quickSort(char[] array, int low, int high) {\n    if (low < high) {\n        int pivotIndex = partition(array, low, high);\n        quickSort(array, low, pivotIndex - 1);\n        quickSort(array, pivotIndex + 1, high);\n    }\n}\n\npublic static int partition(char[] array, int low, int high) {\n    char pivot = array[high];\n    int i = low - 1;\n    for (int j = low; j < high; j++) {\n        if (array[j] < pivot) {\n            i++;\n            char temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n    char temp = array[i+1];\n    array[i+1] = array[high];\n    array[high] = temp;\n\n    return i+1;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/ANTI_SHUFFLE.java b/src/main/java/humaneval/buggy/ANTI_SHUFFLE.java\nindex 4389f67..4e85e15 100644\n--- a/src/main/java/humaneval/buggy/ANTI_SHUFFLE.java\n+++ b/src/main/java/humaneval/buggy/ANTI_SHUFFLE.java\n@@ -14,13 +14,48 @@ anti_shuffle('hello') returns 'ehllo'\n anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor' */\n \n public class ANTI_SHUFFLE {\n-    public static String anti_shuffle(String s) {\n-        String result = \"\";\n-        for (String str : s.split(\" \")) {\n-            char[] chars = str.toCharArray();\n-            Arrays.sort(chars);\n-            result += new String(chars);\n+public static String anti_shuffle(String s) {\n+    String[] words = s.split(\" \");\n+    StringBuilder result = new StringBuilder();\n+\n+    for (String word : words) {\n+        char[] chars = word.toCharArray();\n+\n+        // Using quicksort algorithm instead of Arrays.sort()\n+        quickSort(chars, 0, chars.length-1);\n+\n+        result.append(chars);\n+        result.append(\" \");\n+    }\n+\n+    return result.toString().trim();\n+\n+}\n+\n+// Quicksort algorithm\n+public static void quickSort(char[] array, int low, int high) {\n+    if (low < high) {\n+        int pivotIndex = partition(array, low, high);\n+        quickSort(array, low, pivotIndex - 1);\n+        quickSort(array, pivotIndex + 1, high);\n+    }\n+}\n+\n+public static int partition(char[] array, int low, int high) {\n+    char pivot = array[high];\n+    int i = low - 1;\n+    for (int j = low; j < high; j++) {\n+        if (array[j] < pivot) {\n+            i++;\n+            char temp = array[i];\n+            array[i] = array[j];\n+            array[j] = temp;\n         }\n-        return result;\n     }\n+    char temp = array[i+1];\n+    array[i+1] = array[high];\n+    array[high] = temp;\n+\n+    return i+1;\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}