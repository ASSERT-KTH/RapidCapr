{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    long millis = iMillis;\n    boolean dateDependentFieldEncountered = false;\n    try {\n        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            Chronology chrono = savedField.iChrono;\n            DateTimeField field = savedField.iField;\n            int value = savedField.iValue;\n            if (resetFields || field.isSupported()) {\n                if (dateDependentFieldEncountered && field.isLenient()) {\n                    value = field.getMinimumValue();\n                }\n                millis = field.set(chrono.set(millis, iDefaultYear), value);\n                dateDependentFieldEncountered = isDateDependent(field);\n            }\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}\n\nprivate boolean isDateDependent(DateTimeField field) {\n    DurationField years = DurationFieldType.years().getField(field.getChronology());\n    DurationField months = DurationFieldType.months().getField(field.getChronology());\n    DurationField days = DurationFieldType.days().getField(field.getChronology());\n    if (compareReverse(field.getDurationField(), years) >= 0 ||\n            (compareReverse(field.getDurationField(), months) >= 0 &&\n                    compareReverse(field.getDurationField(), days) <= 0)) {\n        return true;\n    }\n    return false;\n}\n\nprivate int compareReverse(DurationField field1, DurationField field2) {\n    return field2.getUnitMillis() - field1.getUnitMillis();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e77dfaa3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,70 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    long millis = iMillis;\n+    boolean dateDependentFieldEncountered = false;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            Chronology chrono = savedField.iChrono;\n+            DateTimeField field = savedField.iField;\n+            int value = savedField.iValue;\n+            if (resetFields || field.isSupported()) {\n+                if (dateDependentFieldEncountered && field.isLenient()) {\n+                    value = field.getMinimumValue();\n+                }\n+                millis = field.set(chrono.set(millis, iDefaultYear), value);\n+                dateDependentFieldEncountered = isDateDependent(field);\n             }\n         }\n-\n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n                     \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n+\n+private boolean isDateDependent(DateTimeField field) {\n+    DurationField years = DurationFieldType.years().getField(field.getChronology());\n+    DurationField months = DurationFieldType.months().getField(field.getChronology());\n+    DurationField days = DurationFieldType.days().getField(field.getChronology());\n+    if (compareReverse(field.getDurationField(), years) >= 0 ||\n+            (compareReverse(field.getDurationField(), months) >= 0 &&\n+                    compareReverse(field.getDurationField(), days) <= 0)) {\n+        return true;\n+    }\n+    return false;\n+}\n+\n+private int compareReverse(DurationField field1, DurationField field2) {\n+    return field2.getUnitMillis() - field1.getUnitMillis();\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: method compareReverse(DurationField,DurationField) is already defined in class DateTimeParserBucket",
    "test_result": "ERROR"
}