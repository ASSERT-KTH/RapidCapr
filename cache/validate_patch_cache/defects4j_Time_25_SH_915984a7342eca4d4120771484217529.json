{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    // if we just return offsetAdjusted then the time is pushed\n    // back before the transition, whereas it should be\n    // on or after the transition\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted) {\n        // we found a transition, but there might be more because of the way we adjusted the time\n        int correctedOffset = getOffset(nextAdjusted);\n        for (long i = nextAdjusted + 1; i < nextLocal; i++) {\n            int tempOffset = getOffset(i);\n            if (tempOffset != correctedOffset) {\n                correctedOffset = offsetLocal;\n                break;\n            }\n        }\n        return correctedOffset;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..6420144b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    // if we just return offsetAdjusted then the time is pushed\n+    // back before the transition, whereas it should be\n+    // on or after the transition\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted) {\n+        // we found a transition, but there might be more because of the way we adjusted the time\n+        int correctedOffset = getOffset(nextAdjusted);\n+        for (long i = nextAdjusted + 1; i < nextLocal; i++) {\n+            int tempOffset = getOffset(i);\n+            if (tempOffset != correctedOffset) {\n+                correctedOffset = offsetLocal;\n+                break;\n+            }\n+        }\n+        return correctedOffset;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}