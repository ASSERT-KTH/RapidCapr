{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n        return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n        return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes and converts other values to string literals.\n    while (elem != null) {\n        boolean addedElem = false;\n        if (NodeUtil.isImmutableValue(elem) || NodeUtil.isEnumValue(elem)) {\n            if (sb.length() > 0) {\n                sb.append(joinString);\n            }\n            String value = NodeUtil.getStringValue(elem);\n            if (value != null) {\n                sb.append(value);\n                addedElem = true;\n            }\n        } else if (elem.isString()) {\n            if (sb.length() > 0) {\n                sb.append(joinString);\n            }\n            sb.append(elem.getString());\n            addedElem = true;\n        }\n        if (addedElem) {\n            foldedSize += sb.length();\n            sb.delete(0, sb.length());\n        } else {\n            foldedSize += InlineCostEstimator.getCost(elem);\n            arrayFoldedChildren.add(elem);\n        }\n        elem = elem.getNext();\n        if (elem != null) {\n            foldedSize += joinString.length(); //Add length for comma between elements\n        }\n    }\n\n    if (sb.length() > 0) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n        case 0:\n            Node emptyStringNode = Node.newString(\"\");\n            parent.replaceChild(n, emptyStringNode);\n            break;\n\n        case 1:\n            Node foldedStringNode = arrayFoldedChildren.remove(0);\n            if (foldedSize > originalSize) {\n                return;\n            }\n            arrayNode.detachChildren();\n            if (foldedStringNode.getType() != Token.STRING) {\n                // If the Node is not a string literal, ensure that\n                // it is coerced to a string.\n                foldedStringNode = new Node(\n                    Token.ADD, Node.newString(\"\"), foldedStringNode);\n            }\n            parent.replaceChild(n, foldedStringNode);\n            break;\n\n        default:\n            // No folding could actually be performed.\n            if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n                return;\n            }\n            int kJoinOverhead = \"[].join()\".length();\n            foldedSize += kJoinOverhead;\n            foldedSize += InlineCostEstimator.getCost(right);\n            if (foldedSize > originalSize) {\n                return;\n            }\n            arrayNode.detachChildren();\n            for (Node node : arrayFoldedChildren) {\n                arrayNode.addChildToBack(node);\n            }\n            break;\n    }\n    t.getCompiler().reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..c7b04cf7 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,18 +1458,16 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n+        return;\n     }\n \n     Node arrayNode = left.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n+    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n+        return;\n     }\n \n     String joinString = NodeUtil.getStringValue(right);\n@@ -1477,76 +1475,85 @@ class FoldConstants extends AbstractPostOrderCallback\n     StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n     Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n+    // Merges adjacent String nodes and converts other values to string literals.\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n+        boolean addedElem = false;\n+        if (NodeUtil.isImmutableValue(elem) || NodeUtil.isEnumValue(elem)) {\n+            if (sb.length() > 0) {\n+                sb.append(joinString);\n+            }\n+            String value = NodeUtil.getStringValue(elem);\n+            if (value != null) {\n+                sb.append(value);\n+                addedElem = true;\n+            }\n+        } else if (elem.isString()) {\n+            if (sb.length() > 0) {\n+                sb.append(joinString);\n+            }\n+            sb.append(elem.getString());\n+            addedElem = true;\n         }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+        if (addedElem) {\n+            foldedSize += sb.length();\n+            sb.delete(0, sb.length());\n+        } else {\n+            foldedSize += InlineCostEstimator.getCost(elem);\n+            arrayFoldedChildren.add(elem);\n+        }\n+        elem = elem.getNext();\n+        if (elem != null) {\n+            foldedSize += joinString.length(); //Add length for comma between elements\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      elem = elem.getNext();\n     }\n \n     if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+        // + 2 for the quotes.\n+        foldedSize += sb.length() + 2;\n+        arrayFoldedChildren.add(Node.newString(sb.toString()));\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n     int originalSize = InlineCostEstimator.getCost(n);\n     switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+        case 0:\n+            Node emptyStringNode = Node.newString(\"\");\n+            parent.replaceChild(n, emptyStringNode);\n+            break;\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+        case 1:\n+            Node foldedStringNode = arrayFoldedChildren.remove(0);\n+            if (foldedSize > originalSize) {\n+                return;\n+            }\n+            arrayNode.detachChildren();\n+            if (foldedStringNode.getType() != Token.STRING) {\n+                // If the Node is not a string literal, ensure that\n+                // it is coerced to a string.\n+                foldedStringNode = new Node(\n+                    Token.ADD, Node.newString(\"\"), foldedStringNode);\n+            }\n+            parent.replaceChild(n, foldedStringNode);\n+            break;\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+        default:\n+            // No folding could actually be performed.\n+            if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n+                return;\n+            }\n+            int kJoinOverhead = \"[].join()\".length();\n+            foldedSize += kJoinOverhead;\n+            foldedSize += InlineCostEstimator.getCost(right);\n+            if (foldedSize > originalSize) {\n+                return;\n+            }\n+            arrayNode.detachChildren();\n+            for (Node node : arrayFoldedChildren) {\n+                arrayNode.addChildToBack(node);\n+            }\n+            break;\n     }\n     t.getCompiler().reportCodeChange();\n-  }\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}