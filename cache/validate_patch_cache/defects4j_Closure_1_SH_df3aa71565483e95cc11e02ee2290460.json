{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n    \n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    \n    Node argList = getFunctionArgList(function);\n    Scope hoistScope = null;\n    if (NodeUtil.isInvocationTarget(function)) {\n      // We cannot safely remove parameters from applied methods, but if\n      // the applied method is actually invoked as a function we can.\n      Node functionNode = NodeUtil.getInvocationTarget(function);\n      if (functionNode != null) {\n        if (functionNode.isQualifiedName()) {\n          Var v = fnScope.getVar(functionNode.getQualifiedName());\n          if (v != null && v.getInitialValue() != null) {\n            hoistScope = SyntacticScopeCreator.makeAnonymousScope(functionNode, v.getInitialValue(), compiler);\n          }\n        } else if (functionNode.isFunction()) {\n          hoistScope = SyntacticScopeCreator.makeAnonymousScope(functionNode, functionNode, compiler);\n        } else if (functionNode.isThis()) {\n          hoistScope = fnScope.getClosestHoistScope();\n        }\n        if (hoistScope != null && hoistScope.getDepth() >= fnScope.getDepth()) {\n          hoistScope = null;\n        }\n      }\n    }\n\n    Node firstParam = argList.getFirstChild();\n\n    while (firstParam != null && !referenced.contains(fnScope.getVar(firstParam.getString()))) {\n      if (hoistScope != null) {\n        Node assignTarget = nameReference(function, firstParam.getString());\n        Node initialValue = varDeclarationValue(assignTarget, hoistScope);\n        Node assign = IR.assign(assignTarget, initialValue);\n        IR.replaceWith(firstParam, assign);\n        hoistScope.declare(assignTarget, new SyntacticScopeCreator.AliasVar(assign));\n      } else {\n        NodeUtil.removeChild(argList, firstParam);\n        compiler.reportCodeChange();\n      }\n      firstParam = argList.getFirstChild();\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1a8d3568 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,64 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    // Notice that removing unreferenced function args breaks\n+    // Function.prototype.length. In advanced mode, we don't really care\n+    // about this: we consider \"length\" the equivalent of reflecting on\n+    // the function's lexical source.\n+    //\n+    // Rather than create a new option for this, we assume that if the user\n+    // is removing globals, then it's OK to remove unused function args.\n+    //\n+    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    \n+    Node argList = getFunctionArgList(function);\n+    Scope hoistScope = null;\n+    if (NodeUtil.isInvocationTarget(function)) {\n+      // We cannot safely remove parameters from applied methods, but if\n+      // the applied method is actually invoked as a function we can.\n+      Node functionNode = NodeUtil.getInvocationTarget(function);\n+      if (functionNode != null) {\n+        if (functionNode.isQualifiedName()) {\n+          Var v = fnScope.getVar(functionNode.getQualifiedName());\n+          if (v != null && v.getInitialValue() != null) {\n+            hoistScope = SyntacticScopeCreator.makeAnonymousScope(functionNode, v.getInitialValue(), compiler);\n+          }\n+        } else if (functionNode.isFunction()) {\n+          hoistScope = SyntacticScopeCreator.makeAnonymousScope(functionNode, functionNode, compiler);\n+        } else if (functionNode.isThis()) {\n+          hoistScope = fnScope.getClosestHoistScope();\n+        }\n+        if (hoistScope != null && hoistScope.getDepth() >= fnScope.getDepth()) {\n+          hoistScope = null;\n+        }\n+      }\n+    }\n+\n+    Node firstParam = argList.getFirstChild();\n+\n+    while (firstParam != null && !referenced.contains(fnScope.getVar(firstParam.getString()))) {\n+      if (hoistScope != null) {\n+        Node assignTarget = nameReference(function, firstParam.getString());\n+        Node initialValue = varDeclarationValue(assignTarget, hoistScope);\n+        Node assign = IR.assign(assignTarget, initialValue);\n+        IR.replaceWith(firstParam, assign);\n+        hoistScope.declare(assignTarget, new SyntacticScopeCreator.AliasVar(assign));\n+      } else {\n+        NodeUtil.removeChild(argList, firstParam);\n+        compiler.reportCodeChange();\n+      }\n+      firstParam = argList.getFirstChild();\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}