{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN()) {\n            return newInstance(getField(), qnan);\n        }\n\n        Dfp result = newInstance(this);\n\n        result.exp = exp;\n        result.sign = sign;\n        result.ind = ind;\n\n        long xl = x & 0xffffffffL;\n        long carry = 0;\n\n        for (int i = 0; xl != 0 || i < mant.length; i++) {\n            long product = mant[i] * xl + carry;\n            carry = product >>> radixDigits;\n            result.mant[i] = (int) (product - (carry << radixDigits));\n            xl = xl >>> radixDigits;\n        }\n\n        result.round(0);\n\n        return dotrap(Dfp.TRAP_OVERFLOW, MULTIPLY_TRAP, result, result);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..449efbc84 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,29 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN()) {\n+            return newInstance(getField(), qnan);\n+        }\n+\n+        Dfp result = newInstance(this);\n+\n+        result.exp = exp;\n+        result.sign = sign;\n+        result.ind = ind;\n+\n+        long xl = x & 0xffffffffL;\n+        long carry = 0;\n+\n+        for (int i = 0; xl != 0 || i < mant.length; i++) {\n+            long product = mant[i] * xl + carry;\n+            carry = product >>> radixDigits;\n+            result.mant[i] = (int) (product - (carry << radixDigits));\n+            xl = xl >>> radixDigits;\n+        }\n+\n+        result.round(0);\n+\n+        return dotrap(Dfp.TRAP_OVERFLOW, MULTIPLY_TRAP, result, result);\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}