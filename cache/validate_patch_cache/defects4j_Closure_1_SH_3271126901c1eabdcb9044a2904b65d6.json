{
    "patch": "    Set<String> referencedNames = Sets.newHashSet();\n    for (Var v : referenced) {\n      referencedNames.add(v.getName());\n    }\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null && !referencedNames.contains(lastArg.getString())) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n        lastArg = argList.getLastChild();\n      }\n      Node arg = lastArg;\n      while (arg != null) {\n        Node prev = arg.getPrevious();\n        if (prev != null && !referencedNames.contains(prev.getString())) {\n          argList.removeChild(prev);\n          compiler.reportCodeChange();\n          continue;\n        }\n        arg = prev;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..fccacba6 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,28 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Set<String> referencedNames = Sets.newHashSet();\n+    for (Var v : referenced) {\n+      referencedNames.add(v.getName());\n+    }\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null && !referencedNames.contains(lastArg.getString())) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+        lastArg = argList.getLastChild();\n+      }\n+      Node arg = lastArg;\n+      while (arg != null) {\n+        Node prev = arg.getPrevious();\n+        if (prev != null && !referencedNames.contains(prev.getString())) {\n+          argList.removeChild(prev);\n+          compiler.reportCodeChange();\n+          continue;\n+        }\n+        arg = prev;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}