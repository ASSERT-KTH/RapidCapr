{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    //Adjust weekyear\n    int year = 0;\n    int weekyear = 0;\n    int dayOfWeek = 0;\n    int weekOfWeekyear = 0;\n    int millisOfDay = 0;\n    for (SavedField savedField : savedFields) {\n        if (savedField.iField == null) {\n            continue;\n        }\n        switch (savedField.iField.getType()) {\n            case year():\n                year = savedField.iValue;\n                break;\n            case weekyear():\n                weekyear = savedField.iValue;\n                break;\n            case dayOfWeek():\n                dayOfWeek = savedField.iValue;\n                break;\n            case weekOfWeekyear():\n                weekOfWeekyear = savedField.iValue;\n                break;\n            case millisOfDay():\n                millisOfDay = savedField.iValue;\n                break;\n            default:\n                break;\n        }\n    }\n    if (weekyear != 0) {\n        if (year == 0) {\n            year = iDefaultYear;\n        }\n        DateTimeFormatter dtf = new DateTimeFormatterBuilder().appendWeekyear(4, 4).appendLiteral('-').appendDayOfWeekShortText().toFormatter().withChronology(iChrono);\n        LocalDate date = dtf.parseLocalDate(weekyear + \"-\" + dayOfWeek);\n        int weeksInYear = date.getWeeksInWeekyear();\n        if (weeksInYear <= 1) {\n            year++;\n            date = new LocalDate(year, 1, 1).withWeekyear(weekyear).withDayOfWeek(dayOfWeek);\n        }\n        else {\n            date = date.withWeekyear(weekyear).withDayOfWeek(dayOfWeek);\n            if (weekOfWeekyear > 1) {\n                date = date.plusWeeks(weekOfWeekyear - 1);\n            }\n        }\n        millis = date.toDateTimeAtStartOfDay().getMillis();\n        millis += millisOfDay;\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..7c795699 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,105 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DurationField months = DurationFieldType.months().getField(iChrono);\n+        DurationField days = DurationFieldType.days().getField(iChrono);\n+        DurationField first = savedFields[0].iField.getDurationField();\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            saveField(DateTimeFieldType.year(), iDefaultYear);\n+            return computeMillis(resetFields, text);\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n+    }\n+\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n         }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n+                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n             if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n-            throw e;\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+    }\n+\n+    //Adjust weekyear\n+    int year = 0;\n+    int weekyear = 0;\n+    int dayOfWeek = 0;\n+    int weekOfWeekyear = 0;\n+    int millisOfDay = 0;\n+    for (SavedField savedField : savedFields) {\n+        if (savedField.iField == null) {\n+            continue;\n+        }\n+        switch (savedField.iField.getType()) {\n+            case year():\n+                year = savedField.iValue;\n+                break;\n+            case weekyear():\n+                weekyear = savedField.iValue;\n+                break;\n+            case dayOfWeek():\n+                dayOfWeek = savedField.iValue;\n+                break;\n+            case weekOfWeekyear():\n+                weekOfWeekyear = savedField.iValue;\n+                break;\n+            case millisOfDay():\n+                millisOfDay = savedField.iValue;\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+    if (weekyear != 0) {\n+        if (year == 0) {\n+            year = iDefaultYear;\n+        }\n+        DateTimeFormatter dtf = new DateTimeFormatterBuilder().appendWeekyear(4, 4).appendLiteral('-').appendDayOfWeekShortText().toFormatter().withChronology(iChrono);\n+        LocalDate date = dtf.parseLocalDate(weekyear + \"-\" + dayOfWeek);\n+        int weeksInYear = date.getWeeksInWeekyear();\n+        if (weeksInYear <= 1) {\n+            year++;\n+            date = new LocalDate(year, 1, 1).withWeekyear(weekyear).withDayOfWeek(dayOfWeek);\n+        }\n+        else {\n+            date = date.withWeekyear(weekyear).withDayOfWeek(dayOfWeek);\n+            if (weekOfWeekyear > 1) {\n+                date = date.plusWeeks(weekOfWeekyear - 1);\n             }\n         }\n-        \n-        return millis;\n+        millis = date.toDateTimeAtStartOfDay().getMillis();\n+        millis += millisOfDay;\n     }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}