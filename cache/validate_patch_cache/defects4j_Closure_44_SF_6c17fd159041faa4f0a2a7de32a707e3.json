{
    "patch": " void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.length() == 0) {\n      return;\n    }\n\n    char c = newcode.charAt(0);\n\n    if (getLastChar() == '/') {\n      if (c == '/') {\n        // Do not allow a forward slash to appear after a DIV.\n        // For example,\n        // REGEXP DIV REGEXP\n        // is valid and should print like\n        // / / /\n        append(\" \");\n      } else if (c == '*' && newcode.length() > 1 && newcode.charAt(1) == '/') {\n        // Avoid having a closing multi-line comment \"*/\" come right after opening \"/*\".\n        // This is necessary to avoid empty lines between the comment symbols.\n        // For example, \"/* One *//* Two */\" should print without empty lines like \"/* One *//* Two */\"\n        append(\" \");\n      }\n    } else {\n      if ((isWordChar(c) || c == '\\\\') && isWordChar(getLastChar())) {\n        // Need space to separate. This is not pretty printing.\n        // For example: \"return foo;\"\n        append(\" \");\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 47556652..6f4362cb 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -178,7 +178,7 @@ abstract class CodeConsumer {\n   void endCaseBody() {\n   }\n \n-  void add(String newcode) {\n+ void add(String newcode) {\n     maybeEndStatement();\n \n     if (newcode.length() == 0) {\n@@ -186,20 +186,27 @@ abstract class CodeConsumer {\n     }\n \n     char c = newcode.charAt(0);\n-    if ((isWordChar(c) || c == '\\\\') &&\n-        isWordChar(getLastChar())) {\n-      // need space to separate. This is not pretty printing.\n-      // For example: \"return foo;\"\n-      append(\" \");\n-      // Do not allow a forward slash to appear after a DIV.\n-      // For example,\n-      // REGEXP DIV REGEXP\n-      // is valid and should print like\n-      // / // / /\n-    }\n \n-    append(newcode);\n-  }\n+    if (getLastChar() == '/') {\n+      if (c == '/') {\n+        // Do not allow a forward slash to appear after a DIV.\n+        // For example,\n+        // REGEXP DIV REGEXP\n+        // is valid and should print like\n+        // / / /\n+        append(\" \");\n+      } else if (c == '*' && newcode.length() > 1 && newcode.charAt(1) == '/') {\n+        // Avoid having a closing multi-line comment \"*/\" come right after opening \"/*\".\n+        // This is necessary to avoid empty lines between the comment symbols.\n+        // For example, \"/* One *//* Two */\" should print without empty lines like \"/* One *//* Two */\"\n+        append(\" \");\n+      }\n+    } else {\n+      if ((isWordChar(c) || c == '\\\\') && isWordChar(getLastChar())) {\n+        // Need space to separate. This is not pretty printing.\n+        // For example: \"return foo;\"\n+        append(\" \");\n+      }\n \n   void appendOp(String op, boolean binOp) {\n     append(op);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}