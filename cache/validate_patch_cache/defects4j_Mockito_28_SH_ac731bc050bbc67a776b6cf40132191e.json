{
    "patch": "MockCandidate mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (mockCandidate.getMock() == null) {\n    continue;\n}\nif (mockCandidate.getMockClass().isInstance(fieldInstance)) {\n    mockCandidate.thenInject();\n    return;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..843bd7a85 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,17 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+MockCandidate mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (mockCandidate.getMock() == null) {\n+    continue;\n+}\n+if (mockCandidate.getMockClass().isInstance(fieldInstance)) {\n+    mockCandidate.thenInject();\n+    return;\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}