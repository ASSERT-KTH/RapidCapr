{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isObjectLitKey(parent, n) &&\n          NodeUtil.isGet(parent.getParent())) {\n        Node lhs = parent.getParent().getFirstChild();\n        Node obj = lhs.getFirstChild();\n        if (NodeUtil.isGet(obj)) {\n          Node lobj = obj.getFirstChild();\n          if (NodeUtil.isName(lobj) &&\n              \"prototype\".equals(lobj.getString()) &&\n              !NodeUtil.isVarOrSimpleAssignLhs(lhs.getParent())) {\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..54ef51b6 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,20 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isObjectLitKey(parent, n) &&\n+          NodeUtil.isGet(parent.getParent())) {\n+        Node lhs = parent.getParent().getFirstChild();\n+        Node obj = lhs.getFirstChild();\n+        if (NodeUtil.isGet(obj)) {\n+          Node lobj = obj.getFirstChild();\n+          if (NodeUtil.isName(lobj) &&\n+              \"prototype\".equals(lobj.getString()) &&\n+              !NodeUtil.isVarOrSimpleAssignLhs(lhs.getParent())) {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}