{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (maybeExpr.isExprResult()) {\n          // If EXPR_RESULT is a direct descendant of a FUNCTION, avoid folding. This is because\n          // functions in IE behave differently when their return value is an expression result vs.\n          // a non-expression result.\n          if (maybeExpr.getParent().isFunction()) {\n            return false;\n          }\n          Node maybeStatement = maybeExpr.getFirstChild();\n          if (maybeStatement != null\n              && maybeStatement.isReturn()\n              && !maybeStatement.hasChildren()) {\n            // This block only contains a return statement with no side effects, so it can be\n            // considered a foldable expression block.\n            return true;\n          }\n        } else if (NodeUtil.isExpressionNode(maybeExpr)) {\n          return true;\n        } else if (maybeExpr.isBlock()) {\n          return isFoldableExpressBlock(maybeExpr);\n        }\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..7dcbd437 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -520,17 +520,26 @@ public class PeepholeSubstituteAlternateSyntax\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+        if (maybeExpr.isExprResult()) {\n+          // If EXPR_RESULT is a direct descendant of a FUNCTION, avoid folding. This is because\n+          // functions in IE behave differently when their return value is an expression result vs.\n+          // a non-expression result.\n+          if (maybeExpr.getParent().isFunction()) {\n+            return false;\n+          }\n+          Node maybeStatement = maybeExpr.getFirstChild();\n+          if (maybeStatement != null\n+              && maybeStatement.isReturn()\n+              && !maybeStatement.hasChildren()) {\n+            // This block only contains a return statement with no side effects, so it can be\n+            // considered a foldable expression block.\n+            return true;\n+          }\n+        } else if (NodeUtil.isExpressionNode(maybeExpr)) {\n+          return true;\n+        } else if (maybeExpr.isBlock()) {\n+          return isFoldableExpressBlock(maybeExpr);\n+        }\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}