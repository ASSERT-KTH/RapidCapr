{
    "patch": "public static double regularizedGamma(double a, double x) {\n    final double EPSILON = 1e-15;\n    final double FPMIN = Double.MIN_VALUE / EPSILON;\n    if (a <= 0.0) {\n        throw new IllegalArgumentException(\"a must be positive.\");\n    }\n\n    if (x < 0.0) {\n        return 0.0;\n    } else if (x == 0.0) {\n        return 1.0;\n    } else {\n        double ap = a;\n        double sum = 1.0 / a;\n        double del = sum;\n        int n = 1;\n        while (n < 100) {\n            ++n;\n            ap += 1.0;\n            del *= x / ap;\n            sum += del;\n            if (Math.abs(del) < Math.abs(sum) * EPSILON) {\n                return sum * Math.exp(-x + a * Math.log(x) - org.apache.commons.math3.special.Gamma.logGamma(a));\n            }\n            if (Math.abs(del) < Math.abs(sum) * FPMIN) {\n                return sum * Math.exp(-x + a * Math.log(x) - org.apache.commons.math3.special.Gamma.logGamma(a));\n            }\n        }\n        throw new RuntimeException(\"Maximum number of iterations has been exceeded.\");\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..53f628444 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,37 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    final double EPSILON = 1e-15;\n+    final double FPMIN = Double.MIN_VALUE / EPSILON;\n+    if (a <= 0.0) {\n+        throw new IllegalArgumentException(\"a must be positive.\");\n+    }\n+\n+    if (x < 0.0) {\n+        return 0.0;\n+    } else if (x == 0.0) {\n+        return 1.0;\n+    } else {\n+        double ap = a;\n+        double sum = 1.0 / a;\n+        double del = sum;\n+        int n = 1;\n+        while (n < 100) {\n+            ++n;\n+            ap += 1.0;\n+            del *= x / ap;\n+            sum += del;\n+            if (Math.abs(del) < Math.abs(sum) * EPSILON) {\n+                return sum * Math.exp(-x + a * Math.log(x) - org.apache.commons.math3.special.Gamma.logGamma(a));\n+            }\n+            if (Math.abs(del) < Math.abs(sum) * FPMIN) {\n+                return sum * Math.exp(-x + a * Math.log(x) - org.apache.commons.math3.special.Gamma.logGamma(a));\n+            }\n+        }\n+        throw new RuntimeException(\"Maximum number of iterations has been exceeded.\");\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}