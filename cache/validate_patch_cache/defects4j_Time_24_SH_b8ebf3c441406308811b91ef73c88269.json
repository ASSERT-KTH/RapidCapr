{
    "patch": "            boolean droppedMillis = false;\n            for (int i = 0; i < count; i++) {\n                long newMillis = savedFields[i].set(millis, resetFields);\n                if (newMillis != millis) {\n                    if (!isStrict || i == 0) {\n                        droppedMillis = true;\n                    } else {\n                        throw new IllegalArgumentException(effectiveOffset) {\n                            @Override\n                            public String getMessage() {\n                                String s = \"The datetime \" + instantToLocalDateTime(millis).toString() +\n                                    \" was parsed but it resulted in a different instant in the merged TimeZones\";\n                                if (effectiveOffset != null) {\n                                    s += \" (original offset: \" + effectiveOffset + \" \";\n                                     s += \", new offset: \" + iZone.getOffsetFromLocal(newMillis) + \")\";\n                                }\n                                return s;\n                            }\n                        };\n                    }\n                }\n                millis = newMillis;\n            }\n\n            if (droppedMillis && isStrict) {\n                throw new IllegalArgumentException(\"Strict mode was specified, but no leap second could be inserted\");\n            }\n        } catch (IllegalFieldValueException e) {\n            if (isStrict) {\n                throw new IllegalArgumentException(\"Strict mode was specified, but \" + e.getMessage(), e);\n            }\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..237a63fb 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,42 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            boolean droppedMillis = false;\n+            for (int i = 0; i < count; i++) {\n+                long newMillis = savedFields[i].set(millis, resetFields);\n+                if (newMillis != millis) {\n+                    if (!isStrict || i == 0) {\n+                        droppedMillis = true;\n+                    } else {\n+                        throw new IllegalArgumentException(effectiveOffset) {\n+                            @Override\n+                            public String getMessage() {\n+                                String s = \"The datetime \" + instantToLocalDateTime(millis).toString() +\n+                                    \" was parsed but it resulted in a different instant in the merged TimeZones\";\n+                                if (effectiveOffset != null) {\n+                                    s += \" (original offset: \" + effectiveOffset + \" \";\n+                                     s += \", new offset: \" + iZone.getOffsetFromLocal(newMillis) + \")\";\n+                                }\n+                                return s;\n+                            }\n+                        };\n+                    }\n+                }\n+                millis = newMillis;\n+            }\n+\n+            if (droppedMillis && isStrict) {\n+                throw new IllegalArgumentException(\"Strict mode was specified, but no leap second could be inserted\");\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (isStrict) {\n+                throw new IllegalArgumentException(\"Strict mode was specified, but \" + e.getMessage(), e);\n+            }\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}