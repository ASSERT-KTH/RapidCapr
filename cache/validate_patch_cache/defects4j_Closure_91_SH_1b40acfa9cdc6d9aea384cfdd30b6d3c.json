{
    "patch": "      if (NodeUtil.isGet(parent.getParent()) &&\n          parent.getParent().getType() == Token.EXPR_RESULT) {\n        // When a property is assigned a function expression, that expression\n        // might not be a direct child of the assignee. E.g.,\n        //   x.y = function() {};\n        // We don't want to traverse such expressions, so we skip all\n        // function expressions that are not in an ASSIGN.\n        return false;\n      }\n\n      // Don't traverse functions that are inside another expression.\n      // E.g. (function(){})(), f(function(){}), !function(){}\n      if (!parent.isExprResult() &&\n          !parent.isReturn() &&\n          !parent.isThrow() &&\n          !(parent.isArrayLit() && n == parent.getLastChild())) {\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..365b1f3d 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,24 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent.getParent()) &&\n+          parent.getParent().getType() == Token.EXPR_RESULT) {\n+        // When a property is assigned a function expression, that expression\n+        // might not be a direct child of the assignee. E.g.,\n+        //   x.y = function() {};\n+        // We don't want to traverse such expressions, so we skip all\n+        // function expressions that are not in an ASSIGN.\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are inside another expression.\n+      // E.g. (function(){})(), f(function(){}), !function(){}\n+      if (!parent.isExprResult() &&\n+          !parent.isReturn() &&\n+          !parent.isThrow() &&\n+          !(parent.isArrayLit() && n == parent.getLastChild())) {\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}