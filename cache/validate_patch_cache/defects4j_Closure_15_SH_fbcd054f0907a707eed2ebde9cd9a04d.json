{
    "patch": "        // We care about calls to functions and function expressions that potentially modify\n        // dependent variables.\n        if (NodeUtil.isCallOrNew(n)) {\n          return NodeUtil.mayEffectMutableState(n);\n        }\n\n        // Handle the 'delete' operation\n        if (n.isDelProp()) {\n          return true;\n        }\n\n        // Recurse on child nodes\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (ControlFlowGraph.isEnteringNewCfgNode(c)) {\n            continue;\n          }\n\n          // Check if child node is a for-in loop\n          if (c.isForIn()) {\n            // If the variable being iterated over is a dependent variable, return true\n            Node iteratedVar = c.getFirstChild().getNext().getNext().getFirstChild();\n            if (DependencyTracker.isDependentExpression(iteratedVar)) {\n              return true;\n            }\n          }\n\n          // Recurse on child node\n          if (apply(c)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..f2cbfb08 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,34 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        // We care about calls to functions and function expressions that potentially modify\n+        // dependent variables.\n+        if (NodeUtil.isCallOrNew(n)) {\n+          return NodeUtil.mayEffectMutableState(n);\n+        }\n+\n+        // Handle the 'delete' operation\n+        if (n.isDelProp()) {\n+          return true;\n+        }\n+\n+        // Recurse on child nodes\n+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+          if (ControlFlowGraph.isEnteringNewCfgNode(c)) {\n+            continue;\n+          }\n+\n+          // Check if child node is a for-in loop\n+          if (c.isForIn()) {\n+            // If the variable being iterated over is a dependent variable, return true\n+            Node iteratedVar = c.getFirstChild().getNext().getNext().getFirstChild();\n+            if (DependencyTracker.isDependentExpression(iteratedVar)) {\n+              return true;\n+            }\n+          }\n+\n+          // Recurse on child node\n+          if (apply(c)) {\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}