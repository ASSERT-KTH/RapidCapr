{
    "patch": "    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                if (Character.isHighSurrogate(input.charAt(pos))) {\n                    if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {\n                        out.write(input.subSequence(pos, pos + 2).toString());\n                        pos += 2;\n                    } else {\n                        out.write(\"\\\\u\" + Integer.toHexString(Character.toCodePoint(input.charAt(pos), input.charAt(pos + 1))));\n                        pos += 2;\n                    }\n                } else if (Character.isLowSurrogate(input.charAt(pos))) {\n                    out.write(\"\\\\u\" + Integer.toHexString(Character.toCodePoint(input.charAt(pos - 1), input.charAt(pos))));\n                    pos++;\n                } else {\n                    out.write(input.charAt(pos));\n                    pos++;\n                }\n            }\n//          // contract with translators is that they have to understand codepoints \n//          // and they just took care of a surrogate pair\n            for (int pt = 0; pt < consumed; pt++) {\n                pos += Character.charCount(Character.codePointAt(input, pos));\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..01c876ce 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -84,10 +84,21 @@ public abstract class CharSequenceTranslator {\n         while (pos < len) {\n             int consumed = translate(input, pos, out);\n             if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n+                if (Character.isHighSurrogate(input.charAt(pos))) {\n+                    if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {\n+                        out.write(input.subSequence(pos, pos + 2).toString());\n+                        pos += 2;\n+                    } else {\n+                        out.write(\"\\\\u\" + Integer.toHexString(Character.toCodePoint(input.charAt(pos), input.charAt(pos + 1))));\n+                        pos += 2;\n+                    }\n+                } else if (Character.isLowSurrogate(input.charAt(pos))) {\n+                    out.write(\"\\\\u\" + Integer.toHexString(Character.toCodePoint(input.charAt(pos - 1), input.charAt(pos))));\n+                    pos++;\n+                } else {\n+                    out.write(input.charAt(pos));\n+                    pos++;\n+                }\n             }\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair",
    "result_reason": "java.lang.StringIndexOutOfBoundsException: String index out of range: 2",
    "test_result": "FAIL"
}