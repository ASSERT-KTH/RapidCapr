{
    "patch": "            case -2147483648:\n                if (val1 == 0) {\n                    return 0L;\n                }\n                // do not use Math.abs, it does not improve performance\n                if (val1 > 0) {\n                    return -val1;\n                } else {\n                    if (val1 == Integer.MIN_VALUE) {\n                        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                    } else {\n                        return -val1 * -val2;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java\nindex a0fe7e2d..d1a7d728 100644\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n@@ -135,6 +135,20 @@ public class FieldUtils {\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n+            case -2147483648:\n+                if (val1 == 0) {\n+                    return 0L;\n+                }\n+                // do not use Math.abs, it does not improve performance\n+                if (val1 > 0) {\n+                    return -val1;\n+                } else {\n+                    if (val1 == Integer.MIN_VALUE) {\n+                        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+                    } else {\n+                        return -val1 * -val2;\n+                    }\n+                }\n                 return -val1;\n             case 0:\n                 return 0L;",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}