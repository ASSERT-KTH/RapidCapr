{
    "patch": "                if (offsetLocal > offsetAdjusted) {\n                    int diff = offsetLocal - offsetAdjusted;\n                    long nextLocal = nextTransition(instantAdjusted + diff * 1000L);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted + diff * 1000L);\n                    if (nextLocal != nextAdjusted) {\n                        return offsetLocal;\n                    }\n                } else {\n                    int diff = offsetAdjusted - offsetLocal;\n                    long prevLocal = previousTransition(instantAdjusted + diff * 1000L);\n                    long prevAdjusted = previousTransition(instantLocal - offsetLocal + diff * 1000L);\n                    if (prevLocal == prevAdjusted) {\n                        return offsetAdjusted;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..a8e66930 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if (offsetLocal > offsetAdjusted) {\n+                    int diff = offsetLocal - offsetAdjusted;\n+                    long nextLocal = nextTransition(instantAdjusted + diff * 1000L);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted + diff * 1000L);\n+                    if (nextLocal != nextAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                } else {\n+                    int diff = offsetAdjusted - offsetLocal;\n+                    long prevLocal = previousTransition(instantAdjusted + diff * 1000L);\n+                    long prevAdjusted = previousTransition(instantLocal - offsetLocal + diff * 1000L);\n+                    if (prevLocal == prevAdjusted) {\n+                        return offsetAdjusted;\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-10-01T07:00:00.000",
    "test_result": "FAIL"
}