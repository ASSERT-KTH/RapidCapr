{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    if (parent == null || !parent.isVar()) {\n      continue;\n    }\n\n    Node lValue = n.getFirstChild();\n    Node rValue = lValue.getNext();\n    if (!rValue.isQualifiedName()) {\n      report(t, lValue, GOOG_SCOPE_NON_ALIAS_LOCAL, lValue.getString());\n      continue;\n    }\n\n    String name = lValue.getString();\n    Var aliasVar = scope.getVar(name);\n    if (aliasVar == null || aliasVar.getInitialValue() == null\n        || !aliasVar.getInitialValue().isQualifiedName()) {\n      report(t, lValue, GOOG_SCOPE_NON_ALIAS_LOCAL, lValue.getString());\n      continue;\n    }\n\n    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n    if (qualifiedName == null) {\n      report(t, lValue, GOOG_SCOPE_NON_ALIAS_LOCAL, lValue.getString());\n      continue;\n    }\n\n    String aliasName = rValue.getQualifiedName();\n    aliases.put(aliasName, aliasVar);\n    transformation.addAlias(aliasName, qualifiedName);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..c3432c6e 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,33 +269,42 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n-      }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    if (parent == null || !parent.isVar()) {\n+      continue;\n     }\n \n+    Node lValue = n.getFirstChild();\n+    Node rValue = lValue.getNext();\n+    if (!rValue.isQualifiedName()) {\n+      report(t, lValue, GOOG_SCOPE_NON_ALIAS_LOCAL, lValue.getString());\n+      continue;\n+    }\n+\n+    String name = lValue.getString();\n+    Var aliasVar = scope.getVar(name);\n+    if (aliasVar == null || aliasVar.getInitialValue() == null\n+        || !aliasVar.getInitialValue().isQualifiedName()) {\n+      report(t, lValue, GOOG_SCOPE_NON_ALIAS_LOCAL, lValue.getString());\n+      continue;\n+    }\n+\n+    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+    if (qualifiedName == null) {\n+      report(t, lValue, GOOG_SCOPE_NON_ALIAS_LOCAL, lValue.getString());\n+      continue;\n+    }\n+\n+    String aliasName = rValue.getQualifiedName();\n+    aliases.put(aliasName, aliasVar);\n+    transformation.addAlias(aliasName, qualifiedName);\n+  }\n+}\n+\n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {\n         preprocessorSymbolTable.addReference(n.getFirstChild());",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}