{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    long instantLocal = instantMillis + zone.getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    if (newPos >= 0) {\n        boolean offsetParsed = bucket.getOffsetInteger() != null;\n        boolean zoneParsed = bucket.getZone() != null;\n        \n        if (offsetParsed && zoneParsed) {\n            // offsets and zones cannot both be present, so prefer offset\n            zoneParsed = false;\n        }\n        \n        if (offsetParsed) {\n            // adjust the instant to the corresponding time in the parsed zone\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            \n            if (!zone.equals(parsedZone)) {\n                chrono = chrono.withZone(parsedZone);\n                zone = parsedZone;\n                instantLocal = instantMillis + parsedOffset;\n                bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, bucket.getPivotYear());\n                newPos = parser.parseInto(bucket, text, newPos);\n            }\n        } else if (zoneParsed) {\n            // set the zone of the instant to the parsed zone\n            chrono = chrono.withZone(bucket.getZone());\n            zone = bucket.getZone();\n            instantLocal = instantMillis + zone.getOffset(instantMillis);\n        }\n        \n        instant.setChronology(chrono);\n        instant.setZone(zone);\n        instant.setMillis(bucket.computeMillis(true, text));\n    }\n    \n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..46792c51 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,58 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    \n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+    long instantLocal = instantMillis + zone.getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+    \n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    \n+    if (newPos >= 0) {\n+        boolean offsetParsed = bucket.getOffsetInteger() != null;\n+        boolean zoneParsed = bucket.getZone() != null;\n         \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n+        if (offsetParsed && zoneParsed) {\n+            // offsets and zones cannot both be present, so prefer offset\n+            zoneParsed = false;\n+        }\n         \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        if (offsetParsed) {\n+            // adjust the instant to the corresponding time in the parsed zone\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n+            \n+            if (!zone.equals(parsedZone)) {\n+                chrono = chrono.withZone(parsedZone);\n+                zone = parsedZone;\n+                instantLocal = instantMillis + parsedOffset;\n+                bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, bucket.getPivotYear());\n+                newPos = parser.parseInto(bucket, text, newPos);\n+            }\n+        } else if (zoneParsed) {\n+            // set the zone of the instant to the parsed zone\n             chrono = chrono.withZone(bucket.getZone());\n+            zone = bucket.getZone();\n+            instantLocal = instantMillis + zone.getOffset(instantMillis);\n         }\n+        \n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+        instant.setZone(zone);\n+        instant.setMillis(bucket.computeMillis(true, text));\n     }\n+    \n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}