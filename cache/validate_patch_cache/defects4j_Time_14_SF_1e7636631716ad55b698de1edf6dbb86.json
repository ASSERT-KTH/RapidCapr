{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            // Fix for Joda-Time issue #97\n            // (https://github.com/JodaOrg/joda-time/issues/97)\n            while (valueToAdd != 0) {\n                int curMonth = values[DateTimeFieldType.monthOfYear().getRangeDurationType().getFieldIndex()];\n                int newMonth = CurMonths.add(curMonth, valueToAdd);\n                int[] newValues = Arrays.copyOf(values, values.length);\n                DateTimeField dayField = newValues[DateTimeFieldType.dayOfMonth().getRangeDurationType().getFieldIndex()];\n                int maxDay = dayField.getMaximumValue(newValues, newMonth);\n                int curDay = newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n                newValues[DateTimeFieldType.monthOfYear().getRangeDurationType().getFieldIndex()] = newMonth;\n                if (curDay >= maxDay) {\n                    newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = maxDay;\n                }\n                valueToAdd = valueToAdd < 0 ? valueToAdd + (curMonth - newMonth) : valueToAdd - (newMonth - curMonth);\n                values = newValues;\n            }\n            return values;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }\n\n    private static class CurMonths {\n        public static int add(int curMonth, int valueToAdd) {\n            int newMonth = (curMonth + valueToAdd) % 12;\n            if (newMonth <= 0) {\n                newMonth += 12;\n            }\n            return newMonth;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..12209c57 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,19 +206,40 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            // Fix for Joda-Time issue #97\n+            // (https://github.com/JodaOrg/joda-time/issues/97)\n+            while (valueToAdd != 0) {\n+                int curMonth = values[DateTimeFieldType.monthOfYear().getRangeDurationType().getFieldIndex()];\n+                int newMonth = CurMonths.add(curMonth, valueToAdd);\n+                int[] newValues = Arrays.copyOf(values, values.length);\n+                DateTimeField dayField = newValues[DateTimeFieldType.dayOfMonth().getRangeDurationType().getFieldIndex()];\n+                int maxDay = dayField.getMaximumValue(newValues, newMonth);\n+                int curDay = newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n+                newValues[DateTimeFieldType.monthOfYear().getRangeDurationType().getFieldIndex()] = newMonth;\n+                if (curDay >= maxDay) {\n+                    newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = maxDay;\n+                }\n+                valueToAdd = valueToAdd < 0 ? valueToAdd + (curMonth - newMonth) : valueToAdd - (newMonth - curMonth);\n+                values = newValues;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            return values;\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n     }\n \n+    private static class CurMonths {\n+        public static int add(int curMonth, int valueToAdd) {\n+            int newMonth = (curMonth + valueToAdd) % 12;\n+            if (newMonth <= 0) {\n+                newMonth += 12;\n+            }\n+            return newMonth;\n+        }\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}