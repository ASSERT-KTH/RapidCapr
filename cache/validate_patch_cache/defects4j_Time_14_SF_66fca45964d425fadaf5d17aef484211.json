{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        int year = values[0];\n        int month = values[1];\n        int day = values[2];\n\n        // adjust year and month to handle leap years\n        int adjustYear = (valueToAdd + month - 1) / 12;\n        year = FieldUtils.safeAdd(year, adjustYear);\n        month = ((month + valueToAdd) % 12 + 12) % 12 + 1;\n\n        // adjust day of month if it exceeds new month's maximum value\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.year().set(0, year).monthOfYear().set(0, month).millisOfDay().set(0, 0).getMillis());\n        if (day > maxDayOfMonth) {\n            day = maxDayOfMonth;\n        }\n\n        int[] newValues = new int[partial.size()];\n        newValues[0] = year;\n        newValues[1] = month;\n        newValues[2] = day;\n\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..e485a3ab 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,39 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int year = values[0];\n+        int month = values[1];\n+        int day = values[2];\n+\n+        // adjust year and month to handle leap years\n+        int adjustYear = (valueToAdd + month - 1) / 12;\n+        year = FieldUtils.safeAdd(year, adjustYear);\n+        month = ((month + valueToAdd) % 12 + 12) % 12 + 1;\n+\n+        // adjust day of month if it exceeds new month's maximum value\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.year().set(0, year).monthOfYear().set(0, month).millisOfDay().set(0, 0).getMillis());\n+        if (day > maxDayOfMonth) {\n+            day = maxDayOfMonth;\n         }\n+\n+        int[] newValues = new int[partial.size()];\n+        newValues[0] = year;\n+        newValues[1] = month;\n+        newValues[2] = day;\n+\n+        return newValues;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: long cannot be dereferenced",
    "test_result": "ERROR"
}