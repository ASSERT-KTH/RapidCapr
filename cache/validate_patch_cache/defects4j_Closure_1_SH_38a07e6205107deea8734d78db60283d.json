{
    "patch": "    List<Node> unusedArgs = new ArrayList<>();\n    for (Node arg : argList.children()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        unusedArgs.add(arg);\n      } else if (!unusedArgs.isEmpty()) {\n        // we found the 1st referenced param and there are\n        // now enough unused params pending deletion.\n        for (Node unused : unusedArgs) {\n          argList.removeChild(unused);\n          compiler.reportCodeChange();\n        }\n        unusedArgs.clear();\n      }\n    }\n    if (!unusedArgs.isEmpty()) {\n      // strip left-over unused params off the end of the parameter list.\n      for (Node unused : unusedArgs) {\n        argList.removeChild(unused);\n        compiler.reportCodeChange();\n      }\n    }\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8305cb0f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<Node> unusedArgs = new ArrayList<>();\n+    for (Node arg : argList.children()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        unusedArgs.add(arg);\n+      } else if (!unusedArgs.isEmpty()) {\n+        // we found the 1st referenced param and there are\n+        // now enough unused params pending deletion.\n+        for (Node unused : unusedArgs) {\n+          argList.removeChild(unused);\n+          compiler.reportCodeChange();\n+        }\n+        unusedArgs.clear();\n+      }\n+    }\n+    if (!unusedArgs.isEmpty()) {\n+      // strip left-over unused params off the end of the parameter list.\n+      for (Node unused : unusedArgs) {\n+        argList.removeChild(unused);\n+        compiler.reportCodeChange();\n+      }\n+    }\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}