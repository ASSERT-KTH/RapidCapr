{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n                (jsDoc.isConstructor() ||\n                        jsDoc.hasThisType() ||\n                        jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse functions unless their parent is:\n        // 1. An assignment where the lhs is a qualified name,\n        // 2. A property on an object literal,\n        // 3. A call to an object literal method, or\n        // 4. A call to a constructor or super constructor.\n        if (parent != null) {\n            int parentType = parent.getType();\n            if ((parentType == Token.ASSIGN && parent.getFirstChild().isQualifiedName()) ||\n                    parentType == Token.OBJECTLIT ||\n                    (parentType == Token.CALL && parent.getFirstChild().getType() == Token.GETPROP &&\n                            parent.getFirstChild().getLastChild().getType() == Token.STRING) ||\n                    (parentType == Token.NEW && parent.getFirstChild().isQualifiedName())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    if (parent != null) {\n        int parentType = parent.getType();\n        if (parentType == Token.ASSIGN) {\n            Node lhs = parent.getFirstChild();\n            Node rhs = lhs.getNext();\n\n            if (n == lhs) {\n                // Always traverse the left side of the assignment. To handle\n                // nested assignments properly (e.g., (a = this).property = c;),\n                // assignLhsChild should not be overridden.\n                if (assignLhsChild == null) {\n                    assignLhsChild = lhs;\n                }\n                return true;\n            } else if (rhs.getType() == Token.FUNCTION) {\n                // Only traverse the right side if it's not an assignment to a prototype\n                // property or subproperty.\n                if (lhs.getType() == Token.GETPROP &&\n                        lhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n                if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n                    return false;\n                }\n\n                // If the right side of the assignment is a function, and it's being assigned\n                // to a property of an object, make sure to traverse it so that we can extract\n                // annotations on its parameters.\n                Node maybeObjLit = lhs;\n                while (maybeObjLit.getType() == Token.GETPROP) {\n                    maybeObjLit = maybeObjLit.getFirstChild();\n                }\n                if (maybeObjLit.getType() == Token.OBJECTLIT ||\n                        (maybeObjLit.getType() == Token.CALL && maybeObjLit.getFirstChild().getType() == Token.GETPROP &&\n                                maybeObjLit.getFirstChild().getLastChild().getType() == Token.STRING)) {\n                    return true;\n                }\n                return false;\n            }\n        } else if (parentType == Token.CALL) {\n            Node callee = parent.getFirstChild();\n            if (callee.isQualifiedName()) {\n                JSDocInfo info = NodeUtil.getBestJSDocInfo(callee);\n                if (info != null && info.isConstructor()) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..482949ff 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,88 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null &&\n+                (jsDoc.isConstructor() ||\n+                        jsDoc.hasThisType() ||\n+                        jsDoc.isOverride())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n+        // Don't traverse functions unless their parent is:\n+        // 1. An assignment where the lhs is a qualified name,\n+        // 2. A property on an object literal,\n+        // 3. A call to an object literal method, or\n+        // 4. A call to a constructor or super constructor.\n+        if (parent != null) {\n+            int parentType = parent.getType();\n+            if ((parentType == Token.ASSIGN && parent.getFirstChild().isQualifiedName()) ||\n+                    parentType == Token.OBJECTLIT ||\n+                    (parentType == Token.CALL && parent.getFirstChild().getType() == Token.GETPROP &&\n+                            parent.getFirstChild().getLastChild().getType() == Token.STRING) ||\n+                    (parentType == Token.NEW && parent.getFirstChild().isQualifiedName())) {\n+                return true;\n+            }\n+        }\n         return false;\n-      }\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+    if (parent != null) {\n+        int parentType = parent.getType();\n+        if (parentType == Token.ASSIGN) {\n+            Node lhs = parent.getFirstChild();\n+            Node rhs = lhs.getNext();\n+\n+            if (n == lhs) {\n+                // Always traverse the left side of the assignment. To handle\n+                // nested assignments properly (e.g., (a = this).property = c;),\n+                // assignLhsChild should not be overridden.\n+                if (assignLhsChild == null) {\n+                    assignLhsChild = lhs;\n+                }\n+                return true;\n+            } else if (rhs.getType() == Token.FUNCTION) {\n+                // Only traverse the right side if it's not an assignment to a prototype\n+                // property or subproperty.\n+                if (lhs.getType() == Token.GETPROP &&\n+                        lhs.getLastChild().getString().equals(\"prototype\")) {\n+                    return false;\n+                }\n+                if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+                    return false;\n+                }\n+\n+                // If the right side of the assignment is a function, and it's being assigned\n+                // to a property of an object, make sure to traverse it so that we can extract\n+                // annotations on its parameters.\n+                Node maybeObjLit = lhs;\n+                while (maybeObjLit.getType() == Token.GETPROP) {\n+                    maybeObjLit = maybeObjLit.getFirstChild();\n+                }\n+                if (maybeObjLit.getType() == Token.OBJECTLIT ||\n+                        (maybeObjLit.getType() == Token.CALL && maybeObjLit.getFirstChild().getType() == Token.GETPROP &&\n+                                maybeObjLit.getFirstChild().getLastChild().getType() == Token.STRING)) {\n+                    return true;\n+                }\n+                return false;\n+            }\n+        } else if (parentType == Token.CALL) {\n+            Node callee = parent.getFirstChild();\n+            if (callee.isQualifiedName()) {\n+                JSDocInfo info = NodeUtil.getBestJSDocInfo(callee);\n+                if (info != null && info.isConstructor()) {\n+                    return true;\n+                }\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n     }\n \n     return true;\n-  }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}