{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final int n = m.getColumnDimension();\n    final double[] eigenvalues = d.getColumn(0);\n\n    // if all the eigenvalues are negative, return NaN matrix\n    boolean isPositiveSemiDefinite = true;\n    for (int i = 0; i < n; i++) {\n        if (eigenvalues[i] < 0) {\n            isPositiveSemiDefinite = false;\n            break;\n        }\n    }\n    if (!isPositiveSemiDefinite) {\n        return MatrixUtils.createRealMatrix(n, n).scalarMultiply(Double.NaN);\n    }\n\n    // take square root of the eigenvalues and create a diagonal matrix\n    double[] sqrtEigenvalues = new double[n];\n    for (int i = 0; i < n; i++) {\n        sqrtEigenvalues[i] = Math.sqrt(eigenvalues[i]);\n    }\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenvalues);\n\n    // compute the product of v, sqrtD, and v.transpose()\n    final RealMatrix vT = v.transpose();\n    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(vT);\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..29e3c0e26 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,36 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final int n = m.getColumnDimension();\n+    final double[] eigenvalues = d.getColumn(0);\n+\n+    // if all the eigenvalues are negative, return NaN matrix\n+    boolean isPositiveSemiDefinite = true;\n+    for (int i = 0; i < n; i++) {\n+        if (eigenvalues[i] < 0) {\n+            isPositiveSemiDefinite = false;\n+            break;\n+        }\n+    }\n+    if (!isPositiveSemiDefinite) {\n+        return MatrixUtils.createRealMatrix(n, n).scalarMultiply(Double.NaN);\n+    }\n+\n+    // take square root of the eigenvalues and create a diagonal matrix\n+    double[] sqrtEigenvalues = new double[n];\n+    for (int i = 0; i < n; i++) {\n+        sqrtEigenvalues[i] = Math.sqrt(eigenvalues[i]);\n     }\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenvalues);\n+\n+    // compute the product of v, sqrtD, and v.transpose()\n+    final RealMatrix vT = v.transpose();\n+    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(vT);\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.6357215104109237> but was:<1.9452074317534194>",
    "test_result": "FAIL"
}