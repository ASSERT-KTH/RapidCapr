{
    "patch": "    public TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException {\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        int p = 0, q = 0;\n        for (int i = 0; i < getItemCount(); i++) {\n            if (getDomainOrder().compare(getDataItem(i).getPeriod(), data.get(0).getPeriod()) < 0\n                    || getDomainOrder().compare(getDataItem(i).getPeriod(), data.get(data.size() - 1).getPeriod()) > 0) {\n                continue;\n            }\n            if (getDomainOrder().compare(getDataItem(i).getPeriod(), data.get(0).getPeriod()) >= 0\n                    && getDomainOrder().compare(getDataItem(i).getPeriod(), data.get(data.size() - 1).getPeriod()) <= 0) {\n                if (p == 0) {\n                    p = i;\n                }\n                q = i;\n            }\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n        if (this.data.size() > 0) {\n            for (int index = p; index <= q; index++) {\n                TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index - p + start);\n                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                try {\n                    copy.add(clone);\n                }\n                catch (SeriesException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return copy;\n    }",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..5e3fa88 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1045,31 +1045,44 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *\n      * @throws CloneNotSupportedException if there is a cloning problem.\n      */\n-    public TimeSeries createCopy(int start, int end)\n-            throws CloneNotSupportedException {\n-        if (start < 0) {\n-            throw new IllegalArgumentException(\"Requires start >= 0.\");\n-        }\n-        if (end < start) {\n-            throw new IllegalArgumentException(\"Requires start <= end.\");\n-        }\n-        TimeSeries copy = (TimeSeries) super.clone();\n-        copy.data = new java.util.ArrayList();\n-        if (this.data.size() > 0) {\n-            for (int index = start; index <= end; index++) {\n-                TimeSeriesDataItem item\n-                        = (TimeSeriesDataItem) this.data.get(index);\n-                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n-                try {\n-                    copy.add(clone);\n-                }\n-                catch (SeriesException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }\n-        return copy;\n-    }\n+    public TimeSeries createCopy(int start, int end)\n+            throws CloneNotSupportedException {\n+        if (start < 0) {\n+            throw new IllegalArgumentException(\"Requires start >= 0.\");\n+        }\n+        if (end < start) {\n+            throw new IllegalArgumentException(\"Requires start <= end.\");\n+        }\n+        int p = 0, q = 0;\n+        for (int i = 0; i < getItemCount(); i++) {\n+            if (getDomainOrder().compare(getDataItem(i).getPeriod(), data.get(0).getPeriod()) < 0\n+                    || getDomainOrder().compare(getDataItem(i).getPeriod(), data.get(data.size() - 1).getPeriod()) > 0) {\n+                continue;\n+            }\n+            if (getDomainOrder().compare(getDataItem(i).getPeriod(), data.get(0).getPeriod()) >= 0\n+                    && getDomainOrder().compare(getDataItem(i).getPeriod(), data.get(data.size() - 1).getPeriod()) <= 0) {\n+                if (p == 0) {\n+                    p = i;\n+                }\n+                q = i;\n+            }\n+        }\n+        TimeSeries copy = (TimeSeries) super.clone();\n+        copy.data = new java.util.ArrayList();\n+        if (this.data.size() > 0) {\n+            for (int index = p; index <= q; index++) {\n+                TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index - p + start);\n+                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+                try {\n+                    copy.add(clone);\n+                }\n+                catch (SeriesException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }\n+        return copy;\n+    }\n \n     /**\n      * Creates a new timeseries by copying a subset of the data in this time",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}