{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        long newMillis;\n        try {\n            newMillis = savedFields[i].set(millis, resetFields);\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        if (newMillis != millis) {\n            millis = newMillis;\n            for (int j = 0; j < i; j++) {\n                long localMillis = savedFields[j].set(millis, resetFields);\n                if (localMillis != savedFields[j].iMillis) {\n                    if (resetFields) {\n                        if (iSavedFieldsShared) {\n                            iSavedFields = (SavedField[]) iSavedFields.clone();\n                            iSavedFieldsShared = false;\n                        }\n                        System.arraycopy(savedFields, j, iSavedFields, j + 1, i - j);\n                        iSavedFields[j] = savedFields[i];\n                    }\n                    i = j + 1;\n                    count = i;\n                    break;\n                }\n            }\n        }\n    }\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        String message = \"Cannot parse \\\"\" + text  + '\"';\n        if (e.getMessage() != null && ! e.getMessage().isEmpty()) {\n            message = message + \": \" + e.getMessage();\n        }\n        throw new IllegalArgumentException(message);\n    } else {\n        throw e;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..ad74a2ac 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,48 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        long newMillis;\n+        try {\n+            newMillis = savedFields[i].set(millis, resetFields);\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n+        if (newMillis != millis) {\n+            millis = newMillis;\n+            for (int j = 0; j < i; j++) {\n+                long localMillis = savedFields[j].set(millis, resetFields);\n+                if (localMillis != savedFields[j].iMillis) {\n+                    if (resetFields) {\n+                        if (iSavedFieldsShared) {\n+                            iSavedFields = (SavedField[]) iSavedFields.clone();\n+                            iSavedFieldsShared = false;\n+                        }\n+                        System.arraycopy(savedFields, j, iSavedFields, j + 1, i - j);\n+                        iSavedFields[j] = savedFields[i];\n+                    }\n+                    i = j + 1;\n+                    count = i;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        String message = \"Cannot parse \\\"\" + text  + '\"';\n+        if (e.getMessage() != null && ! e.getMessage().isEmpty()) {\n+            message = message + \": \" + e.getMessage();\n+        }\n+        throw new IllegalArgumentException(message);\n+    } else {\n+        throw e;\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}