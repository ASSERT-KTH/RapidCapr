{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted) {\n        int beforeDstOffset = getOffset(nextAdjusted - 1);\n        int afterDstOffset = getOffset(nextAdjusted);\n        if (offsetLocal >= afterDstOffset && offsetLocal - afterDstOffset < (beforeDstOffset - afterDstOffset) / 2) {\n            return offsetLocal;\n        } else {\n            return getOffset(nextLocal - 1);\n        }\n    }\n} else if (offsetAdjusted > offsetLocal) {\n    // go forward from the instant until we hit a wall\n    long nextLocal = nextTransition(instantAdjusted);\n    int offsetNextLocal = getOffset(nextLocal);\n    if (offsetNextLocal > offsetLocal) {\n        long wall = nextLocal + offsetNextLocal;\n        long nextAdjusted = nextTransition(Math.max(instantLocal, wall));\n        int offsetNextAdjusted = getOffset(nextAdjusted);\n        if (offsetNextAdjusted > offsetLocal) {\n            return offsetLocal;\n        } else {\n            return offsetNextAdjusted;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3b7fceba 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,34 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted) {\n+        int beforeDstOffset = getOffset(nextAdjusted - 1);\n+        int afterDstOffset = getOffset(nextAdjusted);\n+        if (offsetLocal >= afterDstOffset && offsetLocal - afterDstOffset < (beforeDstOffset - afterDstOffset) / 2) {\n+            return offsetLocal;\n+        } else {\n+            return getOffset(nextLocal - 1);\n+        }\n+    }\n+} else if (offsetAdjusted > offsetLocal) {\n+    // go forward from the instant until we hit a wall\n+    long nextLocal = nextTransition(instantAdjusted);\n+    int offsetNextLocal = getOffset(nextLocal);\n+    if (offsetNextLocal > offsetLocal) {\n+        long wall = nextLocal + offsetNextLocal;\n+        long nextAdjusted = nextTransition(Math.max(instantLocal, wall));\n+        int offsetNextAdjusted = getOffset(nextAdjusted);\n+        if (offsetNextAdjusted > offsetLocal) {\n+            return offsetLocal;\n+        } else {\n+            return offsetNextAdjusted;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}