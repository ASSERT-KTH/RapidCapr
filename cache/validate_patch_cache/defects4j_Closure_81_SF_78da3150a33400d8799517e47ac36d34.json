{
    "patch": "private abstract static class TransformDispatcher implements TypeSafeDispatcher {\n  abstract Node processBlock(Block blockNode);\n  abstract Node processBreakStatement(BreakStatement statementNode);\n  abstract Node processCatchClause(CatchClause clauseNode);\n  abstract Node processConditionalExpression(ConditionalExpression exprNode);\n  abstract Node processContinueStatement(ContinueStatement statementNode);\n  abstract Node processDoLoop(DoLoop loopNode);\n  abstract Node processElementGet(ElementGet getNode);\n  abstract Node processEmptyExpression(EmptyExpression exprNode);\n  abstract Node processExpressionStatement(ExpressionStatement statementNode);\n  abstract Node processForInLoop(ForInLoop loopNode);\n  abstract Node processForLoop(ForLoop loopNode);\n  abstract Node processFunctionCall(FunctionCall callNode);\n  abstract Node processFunctionNode(FunctionNode functionNode);\n  abstract Node processIfStatement(IfStatement statementNode);\n  abstract Node processInfixExpression(InfixExpression exprNode);\n  abstract Node processKeywordLiteral(KeywordLiteral exprNode);\n  abstract Node processName(Name nameNode);\n  abstract Node processNewExpression(NewExpression exprNode);\n  abstract Node processNumberLiteral(NumberLiteral exprNode);\n  abstract Node processObjectLiteral(ObjectLiteral exprNode);\n  abstract Node processParenthesizedExpression(\n      ParenthesizedExpression exprNode);\n  abstract Node processPropertyGet(PropertyGet getNode);\n  abstract Node processReturnStatement(ReturnStatement statementNode);\n  abstract Node processStringLiteral(StringLiteral exprNode);\n  abstract Node processSwitchCase(SwitchCase caseNode);\n  abstract Node processSwitchStatement(SwitchStatement statementNode);\n  abstract Node processThrowStatement(ThrowStatement statementNode);\n  abstract Node processTryStatement(TryStatement statementNode);\n  abstract Node processUnaryExpression(UnaryExpression exprNode);\n  abstract Node processVariableDeclaration(VariableDeclaration decl);\n  abstract Node processVariableInitializer(VariableInitializer init);\n  abstract Node processWhileLoop(WhileLoop loopNode);\n  abstract Node processWithStatement(WithStatement statementNode);\n\n  @Override\n  public final Node process(Node node) {\n    switch (node.getType()) {\n      case Token.END:\n        return processEnd(node);\n\n      case Token.BLOCK:\n        return processBlock((Block) node);\n\n      case Token.BREAK:\n        return processBreakStatement((BreakStatement) node);\n\n      case Token.CATCH:\n        return processCatchClause((CatchClause) node);\n\n      case Token.COMMA:\n        return processCommaExpression((InfixExpression) node);\n\n      case Token.CONST:\n        return processVariableDeclaration((VariableDeclaration) node);\n\n      case Token.CONTINUE:\n        return processContinueStatement((ContinueStatement) node);\n\n      case Token.DEBUGGER:\n        return processDebuggerStatement(node);\n\n      case Token.DEFAULT:\n        return processSwitchCase((SwitchCase) node);\n\n      case Token.DO:\n        return processDoLoop((DoLoop) node);\n\n      case Token.EMPTY:\n        return processEmptyExpression((EmptyExpression) node);\n\n      case Token.EXPR_RESULT:\n        return processExpressionStatement((ExpressionStatement) node);\n\n      case Token.FOR:\n        if (node instanceof ForInLoop) {\n          return processForInLoop((ForInLoop) node);\n        } else {\n          return processForLoop((ForLoop) node);\n        }\n\n      case Token.FUNCTION:\n        if (node instanceof FunctionNode) {\n          return processFunctionNode((FunctionNode) node);\n        } else {\n          return processFunctionCall((FunctionCall) node);\n        }\n\n      case Token.IF:\n        return processIfStatement((IfStatement) node);\n\n      case Token.INSTANCEOF:\n      case Token.IN:\n      case Token.LE:\n      case Token.LT:\n      case Token.GE:\n      case Token.GT:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.LSH:\n    ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..25d762fd 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,181 +385,118 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n-\n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n-\n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n-\n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+private abstract static class TransformDispatcher implements TypeSafeDispatcher {\n+  abstract Node processBlock(Block blockNode);\n+  abstract Node processBreakStatement(BreakStatement statementNode);\n+  abstract Node processCatchClause(CatchClause clauseNode);\n+  abstract Node processConditionalExpression(ConditionalExpression exprNode);\n+  abstract Node processContinueStatement(ContinueStatement statementNode);\n+  abstract Node processDoLoop(DoLoop loopNode);\n+  abstract Node processElementGet(ElementGet getNode);\n+  abstract Node processEmptyExpression(EmptyExpression exprNode);\n+  abstract Node processExpressionStatement(ExpressionStatement statementNode);\n+  abstract Node processForInLoop(ForInLoop loopNode);\n+  abstract Node processForLoop(ForLoop loopNode);\n+  abstract Node processFunctionCall(FunctionCall callNode);\n+  abstract Node processFunctionNode(FunctionNode functionNode);\n+  abstract Node processIfStatement(IfStatement statementNode);\n+  abstract Node processInfixExpression(InfixExpression exprNode);\n+  abstract Node processKeywordLiteral(KeywordLiteral exprNode);\n+  abstract Node processName(Name nameNode);\n+  abstract Node processNewExpression(NewExpression exprNode);\n+  abstract Node processNumberLiteral(NumberLiteral exprNode);\n+  abstract Node processObjectLiteral(ObjectLiteral exprNode);\n+  abstract Node processParenthesizedExpression(\n+      ParenthesizedExpression exprNode);\n+  abstract Node processPropertyGet(PropertyGet getNode);\n+  abstract Node processReturnStatement(ReturnStatement statementNode);\n+  abstract Node processStringLiteral(StringLiteral exprNode);\n+  abstract Node processSwitchCase(SwitchCase caseNode);\n+  abstract Node processSwitchStatement(SwitchStatement statementNode);\n+  abstract Node processThrowStatement(ThrowStatement statementNode);\n+  abstract Node processTryStatement(TryStatement statementNode);\n+  abstract Node processUnaryExpression(UnaryExpression exprNode);\n+  abstract Node processVariableDeclaration(VariableDeclaration decl);\n+  abstract Node processVariableInitializer(VariableInitializer init);\n+  abstract Node processWhileLoop(WhileLoop loopNode);\n+  abstract Node processWithStatement(WithStatement statementNode);\n+\n+  @Override\n+  public final Node process(Node node) {\n+    switch (node.getType()) {\n+      case Token.END:\n+        return processEnd(node);\n+\n+      case Token.BLOCK:\n+        return processBlock((Block) node);\n+\n+      case Token.BREAK:\n+        return processBreakStatement((BreakStatement) node);\n+\n+      case Token.CATCH:\n+        return processCatchClause((CatchClause) node);\n+\n+      case Token.COMMA:\n+        return processCommaExpression((InfixExpression) node);\n+\n+      case Token.CONST:\n+        return processVariableDeclaration((VariableDeclaration) node);\n+\n+      case Token.CONTINUE:\n+        return processContinueStatement((ContinueStatement) node);\n+\n+      case Token.DEBUGGER:\n+        return processDebuggerStatement(node);\n+\n+      case Token.DEFAULT:\n+        return processSwitchCase((SwitchCase) node);\n+\n+      case Token.DO:\n+        return processDoLoop((DoLoop) node);\n+\n+      case Token.EMPTY:\n+        return processEmptyExpression((EmptyExpression) node);\n+\n+      case Token.EXPR_RESULT:\n+        return processExpressionStatement((ExpressionStatement) node);\n+\n+      case Token.FOR:\n+        if (node instanceof ForInLoop) {\n+          return processForInLoop((ForInLoop) node);\n+        } else {\n+          return processForLoop((ForLoop) node);\n+        }\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+      case Token.FUNCTION:\n+        if (node instanceof FunctionNode) {\n+          return processFunctionNode((FunctionNode) node);\n+        } else {\n+          return processFunctionCall((FunctionCall) node);\n+        }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n-    }\n+      case Token.IF:\n+        return processIfStatement((IfStatement) node);\n+\n+      case Token.INSTANCEOF:\n+      case Token.IN:\n+      case Token.LE:\n+      case Token.LT:\n+      case Token.GE:\n+      case Token.GT:\n+      case Token.EQ:\n+      case Token.NE:\n+      case Token.SHEQ:\n+      case Token.SHNE:\n+      case Token.ADD:\n+      case Token.SUB:\n+      case Token.MUL:\n+      case Token.DIV:\n+      case Token.MOD:\n+      case Token.BITAND:\n+      case Token.BITOR:\n+      case Token.BITXOR:\n+      case Token.LSH:\n+    \n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}