{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition eig = new EigenDecomposition(m);\n    RealMatrix sqrtD = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n    for (int i = 0; i < m.getRowDimension(); i++) {\n        double eigval = eig.getRealEigenvalue(i);\n        if (eigval < 0) {\n            throw new ArithmeticException(\"Matrix has negative eigenvalues\");\n        }\n        sqrtD.setEntry(i, i, Math.sqrt(eigval));\n    }\n    RealMatrix sqrtM = eig.getV().multiply(sqrtD).multiply(eig.getV().transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..e17b4c0e4 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,17 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition eig = new EigenDecomposition(m);\n+    RealMatrix sqrtD = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+    for (int i = 0; i < m.getRowDimension(); i++) {\n+        double eigval = eig.getRealEigenvalue(i);\n+        if (eigval < 0) {\n+            throw new ArithmeticException(\"Matrix has negative eigenvalues\");\n+        }\n+        sqrtD.setEntry(i, i, Math.sqrt(eigval));\n     }\n+    RealMatrix sqrtM = eig.getV().multiply(sqrtD).multiply(eig.getV().transpose());\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}