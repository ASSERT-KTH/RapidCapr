{
    "patch": "    if (left.getType() == Token.ARRAYLIT) {\n      Node elem = left.getFirstChild();\n      int numElems = 0;\n      while (elem != null) {\n        if (NodeUtil.isNullOrUndefined(elem)) {\n          ++numElems; // Undefined counts towards the number of elements.\n        } else if (NodeUtil.isNumericResult(elem)) {\n          double index = elem.getDouble();\n          int intIndex = (int) index;\n          if (intIndex != index) {\n            error(INVALID_GETELEM_INDEX_ERROR, elem);\n            return n;\n          }\n          // Negative indexes are checked below.\n          if (intIndex >= 0) {\n            ++numElems;\n          }\n        } else {\n          break;\n        }\n        elem = elem.getNext();\n      }\n      if (elem != null) {\n        // Complex expressions or strings are used to index into the array.\n        return n;\n      }\n\n      if (intIndex < 0 || intIndex >= numElems) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n\n      // Replace the entire GETELEM with the value.\n      Node value = left.getChildAtIndex(intIndex);\n      if (value == null || value.getType() == Token.EMPTY) {\n        value = Node.newString(\"\");\n      }\n      n.getParent().replaceChild(n, value);\n      reportCodeChange();\n      return value;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..aeb86034 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,47 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (left.getType() == Token.ARRAYLIT) {\n+      Node elem = left.getFirstChild();\n+      int numElems = 0;\n+      while (elem != null) {\n+        if (NodeUtil.isNullOrUndefined(elem)) {\n+          ++numElems; // Undefined counts towards the number of elements.\n+        } else if (NodeUtil.isNumericResult(elem)) {\n+          double index = elem.getDouble();\n+          int intIndex = (int) index;\n+          if (intIndex != index) {\n+            error(INVALID_GETELEM_INDEX_ERROR, elem);\n+            return n;\n+          }\n+          // Negative indexes are checked below.\n+          if (intIndex >= 0) {\n+            ++numElems;\n+          }\n+        } else {\n+          break;\n+        }\n+        elem = elem.getNext();\n+      }\n+      if (elem != null) {\n+        // Complex expressions or strings are used to index into the array.\n+        return n;\n+      }\n+\n+      if (intIndex < 0 || intIndex >= numElems) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n+\n+      // Replace the entire GETELEM with the value.\n+      Node value = left.getChildAtIndex(intIndex);\n+      if (value == null || value.getType() == Token.EMPTY) {\n+        value = Node.newString(\"\");\n+      }\n+      n.getParent().replaceChild(n, value);\n+      reportCodeChange();\n+      return value;\n+    }\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}