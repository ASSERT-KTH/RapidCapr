{
    "patch": "private void findCalledFunctions(Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    int type = node.getType();\n\n    // For each referenced function, add a new reference\n    if (type == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child != null && child.getType() == Token.NAME) {\n        changed.add(child.getString());\n      }\n    } else if (type == Token.NEW) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..449cac84 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,11 +770,17 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n+private void findCalledFunctions(Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n+    int type = node.getType();\n+\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n+    if (type == Token.CALL) {\n+      Node child = node.getFirstChild();\n+      if (child != null && child.getType() == Token.NAME) {\n+        changed.add(child.getString());\n+      }\n+    } else if (type == Token.NEW) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n         changed.add(child.getString());\n@@ -784,7 +790,7 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n       findCalledFunctions(c, changed);\n     }\n-  }\n+}\n \n   /**\n    * For any call-site that needs it, prepare the call-site for inlining",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}