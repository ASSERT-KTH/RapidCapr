{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n\n    // Check if we have an expression that can be folded\n    if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isCallOrNew(maybeExpr)) {\n      boolean containsIf = false;\n      boolean containsElif = false;\n      boolean containsElse = false;\n\n      for (Node child : maybeExpr.children()) {\n        if (child.getType() == Token.IF) {\n          if (child.getLastChild().getType() != Token.BLOCK) {\n            // If the \"if\" statement doesn't have a block body, then we can't fold\n            return false;\n          }\n          // Check if the IF statement has an ELSE or ELIF statement\n          if (child.getChildCount() > 2) {\n            containsElif = child.getChildCount() > 3;\n            containsElse = true;\n          }\n          containsIf = true;\n        } else if (child.getType() == Token.HOOK) {\n          // If we have any conditional expression, we can't fold\n          return false;\n        } else if (NodeUtil.isCallOrNew(child) || child.getType() == Token.COMMA) {\n          // If we have any call or comma, we can't fold\n          return false;\n        } else if (child.getType() != Token.EMPTY) {\n          // If there's any node besides an IF or an expression, we can't fold\n          return false;\n        }\n      }\n\n      // We can fold if there is only one \"if\" statement with a block body, and all other nodes\n      // within the expression are expressions or Boolean literals.\n      return containsIf && !containsElif && !containsElse;\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..0bf034e6 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,49 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+\n+    // Check if we have an expression that can be folded\n+    if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isCallOrNew(maybeExpr)) {\n+      boolean containsIf = false;\n+      boolean containsElif = false;\n+      boolean containsElse = false;\n+\n+      for (Node child : maybeExpr.children()) {\n+        if (child.getType() == Token.IF) {\n+          if (child.getLastChild().getType() != Token.BLOCK) {\n+            // If the \"if\" statement doesn't have a block body, then we can't fold\n+            return false;\n+          }\n+          // Check if the IF statement has an ELSE or ELIF statement\n+          if (child.getChildCount() > 2) {\n+            containsElif = child.getChildCount() > 3;\n+            containsElse = true;\n+          }\n+          containsIf = true;\n+        } else if (child.getType() == Token.HOOK) {\n+          // If we have any conditional expression, we can't fold\n+          return false;\n+        } else if (NodeUtil.isCallOrNew(child) || child.getType() == Token.COMMA) {\n+          // If we have any call or comma, we can't fold\n+          return false;\n+        } else if (child.getType() != Token.EMPTY) {\n+          // If there's any node besides an IF or an expression, we can't fold\n+          return false;\n+        }\n       }\n-    }\n \n-    return false;\n+      // We can fold if there is only one \"if\" statement with a block body, and all other nodes\n+      // within the expression are expressions or Boolean literals.\n+      return containsIf && !containsElif && !containsElse;\n+    }\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}