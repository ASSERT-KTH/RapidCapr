{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final int n = m.getColumnDimension();\n    final double[] sqrtEigenValues = new double[n];\n\n    // Compute the square root of the eigenvalues\n    for (int i = 0; i < n; i++) {\n        final double eigenValue = dec.getRealEigenvalue(i);\n        if (eigenValue < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        } else if (eigenValue == 0.0) {\n            sqrtEigenValues[i] = 0.0;\n        } else {\n            sqrtEigenValues[i] = Math.sqrt(eigenValue);\n        }\n    }\n\n    // Build a diagonal matrix of square root of the eigenvalues\n    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenValues);\n\n    // Compute the square root of the matrix by multiplying the matrices of eigenvectors and square root of the eigenvalues\n    RealMatrix v = dec.getV();\n    RealMatrix vT = v.transpose();\n    RealMatrix squareRootM = v.multiply(sqrtD).multiply(vT);\n\n    return squareRootM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2354b9530 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,31 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final int n = m.getColumnDimension();\n+    final double[] sqrtEigenValues = new double[n];\n+\n+    // Compute the square root of the eigenvalues\n+    for (int i = 0; i < n; i++) {\n+        final double eigenValue = dec.getRealEigenvalue(i);\n+        if (eigenValue < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        } else if (eigenValue == 0.0) {\n+            sqrtEigenValues[i] = 0.0;\n+        } else {\n+            sqrtEigenValues[i] = Math.sqrt(eigenValue);\n+        }\n     }\n+\n+    // Build a diagonal matrix of square root of the eigenvalues\n+    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenValues);\n+\n+    // Compute the square root of the matrix by multiplying the matrices of eigenvectors and square root of the eigenvalues\n+    RealMatrix v = dec.getV();\n+    RealMatrix vT = v.transpose();\n+    RealMatrix squareRootM = v.multiply(sqrtD).multiply(vT);\n+\n+    return squareRootM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}