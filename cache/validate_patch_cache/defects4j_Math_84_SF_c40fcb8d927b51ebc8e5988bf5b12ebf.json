{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the reflected point\n                simplex[0] = reflected;\n            }\n\n            return;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n            // accept the contracted simplex\n            simplex = contracted.getPoint() == original[0].getPoint() ? new RealPointValuePair[] {best} : new RealPointValuePair[] {best, contracted, original[1], original[0]};\n        } else {\n            // perform a reduction step\n            final RealPointValuePair[] reduced = contractInside(original, comparator);\n            if (reduced == original) {\n                // no reduction happened; just return\n                return;\n            }\n            simplex = reduced;\n        }\n    }\n}\n\nprivate RealPointValuePair[] contractInside(final RealPointValuePair[] original, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException {\n    final RealPointValuePair best = original[0];\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n    contractedSimplex[0] = best;\n    for (int i = 1; i < original.length; i++) {\n        final RealPointValuePair contracted = new RealPointValuePair(contractAroundCentroid(original, i), Double.NaN);\n        contractedSimplex[i] = contracted;\n    }\n    final RealPointValuePair[] sorted = contractedSimplex.clone();\n    Arrays.sort(sorted, comparator);\n    return sorted[0] == best ? contractedSimplex : contract(original, sorted[0]);\n}\n\nprivate double[] contractAroundCentroid(final RealPointValuePair[] original, final int ex) {\n    final int dim = original[0].getPoint().length;\n    final double[] xSmallest = original[0].getPoint();\n    final double[] vSum = new double[dim];\n    for (int i = 0; i < original.length; i++) {\n        final double[] x = original[i].getPoint();\n        if (i != ex) {\n            for (int j = 0; j < dim; j++) {\n                vSum[j] += x[j];\n            }\n        }\n    }\n    final double[] xNew = new double[dim];\n    for (int j = 0; j < dim; j++) {\n        xNew[j] = vSum[j] / (original.length - 1);\n    }\n    return xNew;\n}\n\nprivate RealPointValuePair[] contract(final RealPointValuePair[] original, final RealPointValuePair contracted) {\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n    for (int i = 0; i < original.length; i++) {\n        final RealPointValuePair p = original[i];\n        if (p == contracted) {\n            contractedSimplex[i] = contracted;\n        } else {\n            final double[] x = DoubleArray.copyOf(original[i].getPoint());\n            for (int j = 0; j < x.length; j++) {\n                x[j] = contracted.getPoint()[j] + getRho() * (x[j] - contracted.getPoint()[j]);\n            }\n            contractedSimplex[i] = new RealPointValuePair(x, Double.NaN);\n        }\n    }\n    return contractedSimplex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..721ed9829 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,101 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // accept the expanded simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // accept the reflected point\n+                simplex[0] = reflected;\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            return;\n+\n+        }\n \n-            // check convergence\n+        // compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n+            // accept the contracted simplex\n+            simplex = contracted.getPoint() == original[0].getPoint() ? new RealPointValuePair[] {best} : new RealPointValuePair[] {best, contracted, original[1], original[0]};\n+        } else {\n+            // perform a reduction step\n+            final RealPointValuePair[] reduced = contractInside(original, comparator);\n+            if (reduced == original) {\n+                // no reduction happened; just return\n                 return;\n             }\n+            simplex = reduced;\n+        }\n+    }\n+}\n+\n+private RealPointValuePair[] contractInside(final RealPointValuePair[] original, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException {\n+    final RealPointValuePair best = original[0];\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+    contractedSimplex[0] = best;\n+    for (int i = 1; i < original.length; i++) {\n+        final RealPointValuePair contracted = new RealPointValuePair(contractAroundCentroid(original, i), Double.NaN);\n+        contractedSimplex[i] = contracted;\n+    }\n+    final RealPointValuePair[] sorted = contractedSimplex.clone();\n+    Arrays.sort(sorted, comparator);\n+    return sorted[0] == best ? contractedSimplex : contract(original, sorted[0]);\n+}\n \n+private double[] contractAroundCentroid(final RealPointValuePair[] original, final int ex) {\n+    final int dim = original[0].getPoint().length;\n+    final double[] xSmallest = original[0].getPoint();\n+    final double[] vSum = new double[dim];\n+    for (int i = 0; i < original.length; i++) {\n+        final double[] x = original[i].getPoint();\n+        if (i != ex) {\n+            for (int j = 0; j < dim; j++) {\n+                vSum[j] += x[j];\n+            }\n         }\n+    }\n+    final double[] xNew = new double[dim];\n+    for (int j = 0; j < dim; j++) {\n+        xNew[j] = vSum[j] / (original.length - 1);\n+    }\n+    return xNew;\n+}\n \n+private RealPointValuePair[] contract(final RealPointValuePair[] original, final RealPointValuePair contracted) {\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+    for (int i = 0; i < original.length; i++) {\n+        final RealPointValuePair p = original[i];\n+        if (p == contracted) {\n+            contractedSimplex[i] = contracted;\n+        } else {\n+            final double[] x = DoubleArray.copyOf(original[i].getPoint());\n+            for (int j = 0; j < x.length; j++) {\n+                x[j] = contracted.getPoint()[j] + getRho() * (x[j] - contracted.getPoint()[j]);\n+            }\n+            contractedSimplex[i] = new RealPointValuePair(x, Double.NaN);\n+        }\n     }\n+    return contractedSimplex;\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}