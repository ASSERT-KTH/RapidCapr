{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // get the field type and chronology of the field we are adding to\n    DateTimeFieldType fieldType = partial.getFieldType(fieldIndex);\n    Chronology chronology = partial.getChronology();\n\n    // create a new values array to hold the new values\n    int[] newValues = Arrays.copyOf(values, values.length);\n\n    // add the value to the field while preserving the original value in case of overflow/underflow\n    int curValue = newValues[fieldIndex];\n    int newValue = curValue + valueToAdd;\n    int minValue = fieldType.getField(chronology).getMinimumValue();\n    int maxValue = fieldType.getField(chronology).getMaximumValue();\n    int overflowValue = (valueToAdd > 0) ? minValue + (newValue - maxValue - 1) % (maxValue - minValue + 1) : maxValue + (newValue - minValue + 1) % (maxValue - minValue + 1);\n    int underflowValue = (valueToAdd > 0) ? minValue + (newValue - maxValue) % (maxValue - minValue + 1) : maxValue + (newValue - minValue) % (maxValue - minValue + 1);\n    int wrappedValue = (valueToAdd > 0) ? minValue + (newValue - maxValue - 1) : maxValue + (newValue - minValue + 1);\n    if (newValue > maxValue) {\n        newValues[fieldIndex] = overflowValue;\n        int previousFieldIndex = (fieldIndex - 1 >= 0) ? fieldIndex - 1 : 0;\n        newValues = add(partial, previousFieldIndex, newValues, (valueToAdd > 0) ? 1 : -1);\n    } else if (newValue < minValue) {\n        newValues[fieldIndex] = underflowValue;\n        int previousFieldIndex = (fieldIndex - 1 >= 0) ? fieldIndex - 1 : 0;\n        newValues = add(partial, previousFieldIndex, newValues, (valueToAdd > 0) ? -1 : 1);\n    } else {\n        newValues[fieldIndex] = newValue;\n    }\n\n    // contiguous partial handling\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0;\n        for (int i = 0; i < partial.size(); i++) {\n            if (i == fieldIndex) {\n                instant = fieldType.getField(chronology).set(instant, newValues[i]);\n            } else {\n                instant = partial.getFieldType(i).getField(chronology).set(instant, values[i]);\n            }\n        }\n        instant = chronology.set(partial, instant);\n        return chronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..2589e33d 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,54 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // get the field type and chronology of the field we are adding to\n+    DateTimeFieldType fieldType = partial.getFieldType(fieldIndex);\n+    Chronology chronology = partial.getChronology();\n+\n+    // create a new values array to hold the new values\n+    int[] newValues = Arrays.copyOf(values, values.length);\n+\n+    // add the value to the field while preserving the original value in case of overflow/underflow\n+    int curValue = newValues[fieldIndex];\n+    int newValue = curValue + valueToAdd;\n+    int minValue = fieldType.getField(chronology).getMinimumValue();\n+    int maxValue = fieldType.getField(chronology).getMaximumValue();\n+    int overflowValue = (valueToAdd > 0) ? minValue + (newValue - maxValue - 1) % (maxValue - minValue + 1) : maxValue + (newValue - minValue + 1) % (maxValue - minValue + 1);\n+    int underflowValue = (valueToAdd > 0) ? minValue + (newValue - maxValue) % (maxValue - minValue + 1) : maxValue + (newValue - minValue) % (maxValue - minValue + 1);\n+    int wrappedValue = (valueToAdd > 0) ? minValue + (newValue - maxValue - 1) : maxValue + (newValue - minValue + 1);\n+    if (newValue > maxValue) {\n+        newValues[fieldIndex] = overflowValue;\n+        int previousFieldIndex = (fieldIndex - 1 >= 0) ? fieldIndex - 1 : 0;\n+        newValues = add(partial, previousFieldIndex, newValues, (valueToAdd > 0) ? 1 : -1);\n+    } else if (newValue < minValue) {\n+        newValues[fieldIndex] = underflowValue;\n+        int previousFieldIndex = (fieldIndex - 1 >= 0) ? fieldIndex - 1 : 0;\n+        newValues = add(partial, previousFieldIndex, newValues, (valueToAdd > 0) ? -1 : 1);\n+    } else {\n+        newValues[fieldIndex] = newValue;\n+    }\n+\n+    // contiguous partial handling\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0;\n+        for (int i = 0; i < partial.size(); i++) {\n+            if (i == fieldIndex) {\n+                instant = fieldType.getField(chronology).set(instant, newValues[i]);\n+            } else {\n+                instant = partial.getFieldType(i).getField(chronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        instant = chronology.set(partial, instant);\n+        return chronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}