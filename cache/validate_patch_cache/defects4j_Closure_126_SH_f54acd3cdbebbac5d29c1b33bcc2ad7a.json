{
    "patch": "      Node allFinallyNodes = NodeUtil.getFinallyBlock(n);\n      if (allFinallyNodes != null) {\n        Preconditions.checkState(allFinallyNodes.hasOneChild());\n        Node finallyNode = allFinallyNodes.getFirstChild();\n        Node finallyBlock = finallyNode.getLastChild();\n        tryMinimizeExits(finallyBlock, exitType, labelName);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..444841b6 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,12 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n+      Node allFinallyNodes = NodeUtil.getFinallyBlock(n);\n+      if (allFinallyNodes != null) {\n+        Preconditions.checkState(allFinallyNodes.hasOneChild());\n+        Node finallyNode = allFinallyNodes.getFirstChild();\n+        Node finallyBlock = finallyNode.getLastChild();\n         tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n     }\n \n     // Just a 'label'.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}