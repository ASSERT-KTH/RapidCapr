{
    "patch": "public static boolean monotonic(int[] l) {\n    int[] sorted = Arrays.copyOf(l, l.length);\n    int[] reverse_sorted = new int[l.length];\n\n    Arrays.sort(sorted);\n\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/MONOTONIC.java b/src/main/java/humaneval/buggy/MONOTONIC.java\nindex f56e3bd..bf8d0cf 100644\n--- a/src/main/java/humaneval/buggy/MONOTONIC.java\n+++ b/src/main/java/humaneval/buggy/MONOTONIC.java\n@@ -15,7 +15,19 @@ public class MONOTONIC {\n         int[] sorted = new int[l.length];\n         int[] reverse_sorted = new int[l.length];\n \n-        sorted = l;\n+public static boolean monotonic(int[] l) {\n+    int[] sorted = Arrays.copyOf(l, l.length);\n+    int[] reverse_sorted = new int[l.length];\n+\n+    Arrays.sort(sorted);\n+\n+    for (int i = 0; i < l.length; i += 1)\n+        reverse_sorted[i] = sorted[l.length - i - 1]; \n+        \n+    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n+        return true;\n+    return false;\n+}\n         \n         Arrays.sort(sorted);\n         ",
    "result_reason": " /tmp/humaneval-MONOTONIC/src/main/java/humaneval/buggy/MONOTONIC.java:[18,1] illegal start of expression",
    "test_result": "ERROR"
}