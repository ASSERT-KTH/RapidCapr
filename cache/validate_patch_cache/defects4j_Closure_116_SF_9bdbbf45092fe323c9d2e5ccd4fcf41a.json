{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node paramList = NodeUtil.getFunctionParameters(fnNode);\n  int numParams = paramList.getChildCount();\n  int numArgs = callNode.getChildCount() - 1;\n\n  if (numArgs > numParams) {\n    return CanInlineResult.NO;\n  }\n\n  Node curArg = callNode.getFirstChild().getNext();\n  Node curParam = paramList.getFirstChild();\n\n  while (curParam != null) {\n    // Handle case where functions are called via 'call' or 'apply',\n    // that have a this-object as the first parameter, which is not part of the\n    // called function's parameters.\n    if (curParam == paramList.getFirstChild() && !callNode.getFirstChild().isName()) {\n      curArg = curArg.getNext();\n      if (curArg == null) {\n        return CanInlineResult.NO;\n      }\n    }\n\n    // If there are more args than params, any extra ones must be undefined.\n    if (curParam.getNext() == null && curParam.isVarArgs()) {\n      if (curArg == null || NodeUtil.isUndefined(curArg)) {\n        return CanInlineResult.YES;\n      } else {\n        return CanInlineResult.NO;\n      }\n    }\n\n    if (curArg == null) {\n      return CanInlineResult.NO;\n    }\n\n    if (curParam.isName()\n        && !NodeUtil.isValidSimpleAssignmentTarget(curParam)\n        || !NodeUtil.isValidLHS(curParam, curArg)) {\n      return CanInlineResult.NO;\n    }\n\n    curArg = curArg.getNext();\n    curParam = curParam.getNext();\n  }\n\n  if (curArg != null) {\n    return CanInlineResult.NO;\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..ec0a4b4b 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,63 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node paramList = NodeUtil.getFunctionParameters(fnNode);\n+  int numParams = paramList.getChildCount();\n+  int numArgs = callNode.getChildCount() - 1;\n \n+  if (numArgs > numParams) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  Node curArg = callNode.getFirstChild().getNext();\n+  Node curParam = paramList.getFirstChild();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+  while (curParam != null) {\n+    // Handle case where functions are called via 'call' or 'apply',\n+    // that have a this-object as the first parameter, which is not part of the\n+    // called function's parameters.\n+    if (curParam == paramList.getFirstChild() && !callNode.getFirstChild().isName()) {\n+      curArg = curArg.getNext();\n+      if (curArg == null) {\n+        return CanInlineResult.NO;\n       }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+    // If there are more args than params, any extra ones must be undefined.\n+    if (curParam.getNext() == null && curParam.isVarArgs()) {\n+      if (curArg == null || NodeUtil.isUndefined(curArg)) {\n+        return CanInlineResult.YES;\n+      } else {\n+        return CanInlineResult.NO;\n       }\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+    if (curArg == null) {\n+      return CanInlineResult.NO;\n     }\n \n-    return CanInlineResult.YES;\n+    if (curParam.isName()\n+        && !NodeUtil.isValidSimpleAssignmentTarget(curParam)\n+        || !NodeUtil.isValidLHS(curParam, curArg)) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    curArg = curArg.getNext();\n+    curParam = curParam.getNext();\n+  }\n+\n+  if (curArg != null) {\n+    return CanInlineResult.NO;\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}