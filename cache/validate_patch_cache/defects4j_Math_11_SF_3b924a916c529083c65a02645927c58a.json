{
    "patch": "    public double density(final double[] vals) throws DimensionMismatchException {\n        final int dim = getDimension();\n\n        if (vals.length != dim) {\n            throw new DimensionMismatchException(vals.length, dim);\n        }\n\n        double norm = 1.0 / (FastMath.pow(2 * FastMath.PI, dim / 2.0) * FastMath.sqrt(Math.abs(covarianceMatrixDeterminant)));\n\n        return norm * getExponentTerm(vals);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..a5d7bed64 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -176,13 +176,14 @@ public class MultivariateNormalDistribution\n     /** {@inheritDoc} */\n     public double density(final double[] vals) throws DimensionMismatchException {\n         final int dim = getDimension();\n+\n         if (vals.length != dim) {\n             throw new DimensionMismatchException(vals.length, dim);\n         }\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+        double norm = 1.0 / (FastMath.pow(2 * FastMath.PI, dim / 2.0) * FastMath.sqrt(Math.abs(covarianceMatrixDeterminant)));\n+\n+        return norm * getExponentTerm(vals);\n     }\n \n     /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}