{
    "patch": "// We only want to match constraints on anonymous types.\n    if (!isNominalConstructor() && !isFunctionType()) {\n      return;\n    }\n\n    if (!constraintObj.isRecordType()) {\n      return;\n    }\n\n    // We want to modify the object literal to match the constraint, by\n    // taking each property on the constraint and trying to match the\n    // corresponding properties on this object.\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop) && !isObjectLiteral()) {\n          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..7e663e18 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,27 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+// We only want to match constraints on anonymous types.\n+    if (!isNominalConstructor() && !isFunctionType()) {\n+      return;\n+    }\n+\n+    if (!constraintObj.isRecordType()) {\n+      return;\n+    }\n+\n+    // We want to modify the object literal to match the constraint, by\n+    // taking each property on the constraint and trying to match the\n+    // corresponding properties on this object.\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer = propType;\n+        if (!hasProperty(prop) && !isObjectLiteral()) {\n+          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+              .getLeastSupertype(propType);\n+        }\n+        defineInferredProperty(prop, typeToInfer, null);\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}