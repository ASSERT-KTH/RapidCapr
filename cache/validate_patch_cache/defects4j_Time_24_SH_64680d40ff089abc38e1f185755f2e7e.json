{
    "patch": "            if (savedFields[i].isSaved()) {\n                long instant = savedFields[i].getInstant();\n                millis = savedFields[i].set(millis, resetFields);\n                if (millis != instant && (savedFields[i].isOptional() || !resetFields)) {\n                    throw new IllegalFieldValueException(savedFields[i].getFieldType(), savedFields[i].getValue(), \"Resolving chronology must specify a valid date\");\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c1730249 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,12 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].isSaved()) {\n+                long instant = savedFields[i].getInstant();\n+                millis = savedFields[i].set(millis, resetFields);\n+                if (millis != instant && (savedFields[i].isOptional() || !resetFields)) {\n+                    throw new IllegalFieldValueException(savedFields[i].getFieldType(), savedFields[i].getValue(), \"Resolving chronology must specify a valid date\");\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}