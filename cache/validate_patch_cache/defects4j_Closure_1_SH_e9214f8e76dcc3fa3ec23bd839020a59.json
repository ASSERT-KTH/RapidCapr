{
    "patch": "    // Get the function body\n    Node functionBody = NodeUtil.getFunctionBody(function);\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          // Remove unused parameters from the function body\n          int lastArgIndex = lastArg.getSiblingIndex();\n          for (Node child : functionBody.children()) {\n            if (child.isParamList()) {\n              continue;\n            }\n            for (Node arg : child.getArbitraryScopeDepthNodes()) {\n              if (arg.isParam() && arg.getSiblingIndex() >= lastArgIndex) {\n                child.removeChild(arg);\n                compiler.reportCodeChange();\n              }\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4a43c1c1 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,36 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Get the function body\n+    Node functionBody = NodeUtil.getFunctionBody(function);\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          // Remove unused parameters from the function body\n+          int lastArgIndex = lastArg.getSiblingIndex();\n+          for (Node child : functionBody.children()) {\n+            if (child.isParamList()) {\n+              continue;\n+            }\n+            for (Node arg : child.getArbitraryScopeDepthNodes()) {\n+              if (arg.isParam() && arg.getSiblingIndex() >= lastArgIndex) {\n+                child.removeChild(arg);\n+                compiler.reportCodeChange();\n+              }\n+            }\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}