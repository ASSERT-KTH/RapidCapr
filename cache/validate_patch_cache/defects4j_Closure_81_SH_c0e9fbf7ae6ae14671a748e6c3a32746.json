{
    "patch": "Name functionNameNode = functionNode.getFunctionName();\nNode newName = null;\nif (functionNameNode != null) {\n  // Only transform the function name if it's a valid identifier.\n  if (TokenStream.isJSIdentifier(functionNameNode.getIdentifier())) {\n    newName = transform(functionNameNode);\n  } else {\n    newName = newStringNode(\"\");\n    newName.setLineno(functionNode.getLineno());\n    newName.setCharno(position2charno(functionNode.getAbsolutePosition()));\n  }\n} else {\n  newName = newStringNode(\"\");\n  newName.setLineno(functionNode.getLineno());\n  newName.setCharno(position2charno(functionNode.getAbsolutePosition()));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..49072a6c 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,22 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+Name functionNameNode = functionNode.getFunctionName();\n+Node newName = null;\n+if (functionNameNode != null) {\n+  // Only transform the function name if it's a valid identifier.\n+  if (TokenStream.isJSIdentifier(functionNameNode.getIdentifier())) {\n+    newName = transform(functionNameNode);\n+  } else {\n+    newName = newStringNode(\"\");\n+    newName.setLineno(functionNode.getLineno());\n+    newName.setCharno(position2charno(functionNode.getAbsolutePosition()));\n+  }\n+} else {\n+  newName = newStringNode(\"\");\n+  newName.setLineno(functionNode.getLineno());\n+  newName.setCharno(position2charno(functionNode.getAbsolutePosition()));\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}