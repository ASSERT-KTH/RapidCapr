{
    "patch": "    mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).ifPresent(mock -> {\n        try {\n            field.setAccessible(true);\n            field.set(fieldInstance, mock);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"Could not inject mock into field: \" + field, e);\n        }\n    });",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..5c53e2352 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,17 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+    mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).ifPresent(mock -> {\n+        try {\n+            field.setAccessible(true);\n+            field.set(fieldInstance, mock);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"Could not inject mock into field: \" + field, e);\n+        }\n+    });\n         }\n     }\n ",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}