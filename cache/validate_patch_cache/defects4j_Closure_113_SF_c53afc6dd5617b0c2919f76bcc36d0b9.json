{
    "patch": "private void initializeModuleMap() {\n    providedNames = new HashMap<>();\n    for (JSModule module : modules) {\n      for (String provide : module.getProvides()) {\n        if (providedNames.containsKey(provide)) {\n          ProvidedName existing = providedNames.get(provide);\n          existing.explicitModule = module;\n          existing.isExplicitlyProvided = true;\n        } else {\n          providedNames.put(\n              provide, new ProvidedName(module, true /* isExplicitlyProvided */));\n        }\n      }\n      for (String provide : module.getLegacyNamespace()) {\n        if (providedNames.containsKey(provide)) {\n          ProvidedName existing = providedNames.get(provide);\n          existing.legacyModule = module;\n        } else {\n          providedNames.put(provide, new ProvidedName(module));\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..322aca24 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,43 +292,26 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n-    Node left = n.getFirstChild();\n-    Node arg = left.getNext();\n-    if (verifyLastArgumentIsString(t, left, arg)) {\n-      String ns = arg.getString();\n-      ProvidedName provided = providedNames.get(ns);\n-      if (provided == null || !provided.isExplicitlyProvided()) {\n-        unrecognizedRequires.add(\n-            new UnrecognizedRequire(n, ns, t.getSourceName()));\n-      } else {\n-        JSModule providedModule = provided.explicitModule;\n-\n-        // This must be non-null, because there was an explicit provide.\n-        Preconditions.checkNotNull(providedModule);\n-\n-        JSModule module = t.getModule();\n-        if (moduleGraph != null &&\n-            module != providedModule &&\n-            !moduleGraph.dependsOn(module, providedModule)) {\n-          compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n-                  providedModule.getName(),\n-                  module.getName()));\n+private void initializeModuleMap() {\n+    providedNames = new HashMap<>();\n+    for (JSModule module : modules) {\n+      for (String provide : module.getProvides()) {\n+        if (providedNames.containsKey(provide)) {\n+          ProvidedName existing = providedNames.get(provide);\n+          existing.explicitModule = module;\n+          existing.isExplicitlyProvided = true;\n+        } else {\n+          providedNames.put(\n+              provide, new ProvidedName(module, true /* isExplicitlyProvided */));\n         }\n       }\n-\n-      maybeAddToSymbolTable(left);\n-      maybeAddStringNodeToSymbolTable(arg);\n-\n-      // Requires should be removed before further processing.\n-      // Some clients run closure pass multiple times, first with\n-      // the checks for broken requires turned off. In these cases, we\n-      // allow broken requires to be preserved by the first run to\n-      // let them be caught in the subsequent run.\n-      if (provided != null) {\n-        parent.detachFromParent();\n-        compiler.reportCodeChange();\n+      for (String provide : module.getLegacyNamespace()) {\n+        if (providedNames.containsKey(provide)) {\n+          ProvidedName existing = providedNames.get(provide);\n+          existing.legacyModule = module;\n+        } else {\n+          providedNames.put(provide, new ProvidedName(module));\n+        }\n       }\n     }\n   }",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}