{
    "patch": "!!! original\n              !mayEffectMutableState(lhs)) {\n!!! replacement\n              if(!NodeUtil.mayHaveSideEffects(lhs) &&\n                 !NodeUtil.mayHaveSideEffects(elseOp.getNext())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..b9991fe3 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,11 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n+!!! original\n               !mayEffectMutableState(lhs)) {\n+!!! replacement\n+              if(!NodeUtil.mayHaveSideEffects(lhs) &&\n+                 !NodeUtil.mayHaveSideEffects(elseOp.getNext())) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}