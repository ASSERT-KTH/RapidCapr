{
    "patch": "        if (val.startsWith(\"+\")) {\n            val = val.substring(1);\n        }\n        if (val.startsWith(\"-+\")) {\n            val = \"-\" + val.substring(2);\n        }\n        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear \n            // to be in specification of class. OS X Java parses it to \n            // a wrong value.\n            return null;\n        }\n        if (val.startsWith(\"-\")) {\n            if (val.startsWith(\"-0x\") || val.startsWith(\"-0X\")) {\n                return createInteger(val);\n            } else {\n                Number number = createNumber(val.substring(1));\n                if (number == null) {\n                    return null;\n                } else if (number instanceof BigInteger) {\n                    return ((BigInteger) number).negate();\n                } else if (number instanceof BigDecimal) {\n                    return ((BigDecimal) number).negate();\n                } else if (number instanceof Long) {\n                    return Long.valueOf(-1L * number.longValue());\n                } else {\n                    return Integer.valueOf(-1 * number.intValue());\n                }\n            }\n        } else if (val.startsWith(\"0x\") || val.startsWith(\"0X\")) {\n            return createInteger(val);\n        } else {\n            int decPos = val.indexOf('.');\n            int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n            if (expPos > 0 && expPos < decPos) {\n                expPos = val.indexOf('e', expPos) + val.indexOf('E', expPos) + 1;\n            }\n            String exp;\n            if (expPos > 0) {\n                exp = val.substring(expPos);\n                val = val.substring(0, expPos);\n            } else {\n                exp = null;\n            }\n            String dec;\n            if (decPos > 0) {\n                dec = val.substring(decPos + 1);\n                val = val.substring(0, decPos);\n            } else {\n                dec = null;\n            }\n            try {\n                if (dec == null && exp == null) {\n                    // integer or long\n                    return createInteger(val);\n                } else if (exp != null) {\n                    // scientific notation\n                    BigDecimal bigDecimal = new BigDecimal(val + exp);\n                    if (dec != null) {\n                        int scale = dec.length() - exp.substring(1).replaceAll(\"-\", \"\").length();\n                        if (scale > 0) {\n                            bigDecimal = bigDecimal.setScale(scale, RoundingMode.HALF_EVEN);\n                        }\n                    }\n                    return bigDecimal;\n                } else {\n                    // decimal or double\n                    BigDecimal bigDecimal = new BigDecimal(val);\n                    if (dec != null) {\n                        int scale = dec.length();\n                        if (scale > 0) {\n                            bigDecimal = bigDecimal.add(new BigDecimal(\".\" + dec));\n                            bigDecimal = bigDecimal.setScale(scale, RoundingMode.HALF_EVEN);\n                        }\n                    }\n                    return bigDecimal;\n                }\n            } catch (NumberFormatException nfe) {\n                return null;",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..2229d6f6 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,86 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (val.startsWith(\"+\")) {\n+            val = val.substring(1);\n+        }\n+        if (val.startsWith(\"-+\")) {\n+            val = \"-\" + val.substring(2);\n+        }\n+        if (val.startsWith(\"--\")) {\n+            // this is protection for poorness in java.lang.BigDecimal.\n+            // it accepts this as a legal value, but it does not appear \n+            // to be in specification of class. OS X Java parses it to \n+            // a wrong value.\n+            return null;\n+        }\n+        if (val.startsWith(\"-\")) {\n+            if (val.startsWith(\"-0x\") || val.startsWith(\"-0X\")) {\n+                return createInteger(val);\n+            } else {\n+                Number number = createNumber(val.substring(1));\n+                if (number == null) {\n+                    return null;\n+                } else if (number instanceof BigInteger) {\n+                    return ((BigInteger) number).negate();\n+                } else if (number instanceof BigDecimal) {\n+                    return ((BigDecimal) number).negate();\n+                } else if (number instanceof Long) {\n+                    return Long.valueOf(-1L * number.longValue());\n+                } else {\n+                    return Integer.valueOf(-1 * number.intValue());\n+                }\n+            }\n+        } else if (val.startsWith(\"0x\") || val.startsWith(\"0X\")) {\n+            return createInteger(val);\n+        } else {\n+            int decPos = val.indexOf('.');\n+            int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n+            if (expPos > 0 && expPos < decPos) {\n+                expPos = val.indexOf('e', expPos) + val.indexOf('E', expPos) + 1;\n+            }\n+            String exp;\n+            if (expPos > 0) {\n+                exp = val.substring(expPos);\n+                val = val.substring(0, expPos);\n+            } else {\n+                exp = null;\n+            }\n+            String dec;\n+            if (decPos > 0) {\n+                dec = val.substring(decPos + 1);\n+                val = val.substring(0, decPos);\n+            } else {\n+                dec = null;\n+            }\n+            try {\n+                if (dec == null && exp == null) {\n+                    // integer or long\n+                    return createInteger(val);\n+                } else if (exp != null) {\n+                    // scientific notation\n+                    BigDecimal bigDecimal = new BigDecimal(val + exp);\n+                    if (dec != null) {\n+                        int scale = dec.length() - exp.substring(1).replaceAll(\"-\", \"\").length();\n+                        if (scale > 0) {\n+                            bigDecimal = bigDecimal.setScale(scale, RoundingMode.HALF_EVEN);\n+                        }\n+                    }\n+                    return bigDecimal;\n+                } else {\n+                    // decimal or double\n+                    BigDecimal bigDecimal = new BigDecimal(val);\n+                    if (dec != null) {\n+                        int scale = dec.length();\n+                        if (scale > 0) {\n+                            bigDecimal = bigDecimal.add(new BigDecimal(\".\" + dec));\n+                            bigDecimal = bigDecimal.setScale(scale, RoundingMode.HALF_EVEN);\n+                        }\n+                    }\n+                    return bigDecimal;\n+                }\n+            } catch (NumberFormatException nfe) {\n+                return null;\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}