{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    List<Character> specialChars = Arrays.asList('\\\\', '[', ']', '(', ')', '{', '}', '|', '*', '+', '?', '.', '^', '$');\n    boolean escaped = false;\n    boolean inLiteral = false;\n    char literalChar = 0;\n\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n        if (inLiteral && c != literalChar) {\n            // character is part of a literal string, add it without escaping\n            regex.append(c);\n            continue;\n        }\n        if (c == literalChar) {\n            // character is the closing quote of a literal string, add it and exit literal\n            regex.append(literalChar);\n            inLiteral = false;\n            continue;\n        }\n        if (Character.isWhitespace(c)) {\n            if (!inLiteral) {\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n        if (specialChars.contains(c)) {\n            regex.append('\\\\');\n            escaped = true;\n            if (c == '(' && !inLiteral && i < value.length() - 1 && value.charAt(i + 1) == '?') {\n                // avoid excessive backslashes when opening a non-capturing group\n                regex.append(':');\n                escaped = false;\n            }\n        } else if (c == '\\'' || c == '\\\"') {\n            regex.append(c);\n            inLiteral = true;\n            literalChar = c;\n            continue;\n        } else {\n            escaped = false;\n        }\n        regex.append(c);\n    }\n    if (escaped) {\n        // Check that the last character wasn't a backslash\n        regex.append(\"\\\\b\");\n    }\n    if (inLiteral) {\n        // unclosed quotes, close them\n        regex.append(literalChar);\n    }\n    if (unquote) {\n        // Strip quotes around simple date format patterns\n        String pattern = regex.toString();\n        if (pattern.startsWith(\"'\") && pattern.endsWith(\"'\")) {\n            regex = new StringBuilder(pattern.substring(1, pattern.length() - 1));\n        }\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..cb0d0947 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,66 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    List<Character> specialChars = Arrays.asList('\\\\', '[', ']', '(', ')', '{', '}', '|', '*', '+', '?', '.', '^', '$');\n+    boolean escaped = false;\n+    boolean inLiteral = false;\n+    char literalChar = 0;\n+\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+        if (inLiteral && c != literalChar) {\n+            // character is part of a literal string, add it without escaping\n+            regex.append(c);\n+            continue;\n+        }\n+        if (c == literalChar) {\n+            // character is the closing quote of a literal string, add it and exit literal\n+            regex.append(literalChar);\n+            inLiteral = false;\n+            continue;\n+        }\n+        if (Character.isWhitespace(c)) {\n+            if (!inLiteral) {\n+                regex.append(\"\\\\s*+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+            continue;\n+        }\n+        if (specialChars.contains(c)) {\n+            regex.append('\\\\');\n+            escaped = true;\n+            if (c == '(' && !inLiteral && i < value.length() - 1 && value.charAt(i + 1) == '?') {\n+                // avoid excessive backslashes when opening a non-capturing group\n+                regex.append(':');\n+                escaped = false;\n             }\n+        } else if (c == '\\'' || c == '\\\"') {\n             regex.append(c);\n+            inLiteral = true;\n+            literalChar = c;\n+            continue;\n+        } else {\n+            escaped = false;\n         }\n-        return regex;\n+        regex.append(c);\n     }\n+    if (escaped) {\n+        // Check that the last character wasn't a backslash\n+        regex.append(\"\\\\b\");\n+    }\n+    if (inLiteral) {\n+        // unclosed quotes, close them\n+        regex.append(literalChar);\n+    }\n+    if (unquote) {\n+        // Strip quotes around simple date format patterns\n+        String pattern = regex.toString();\n+        if (pattern.startsWith(\"'\") && pattern.endsWith(\"'\")) {\n+            regex = new StringBuilder(pattern.substring(1, pattern.length() - 1));\n+        }\n+    }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: Locale bg failed with GGGG/yyyy/MMMM/dddd/hhhh/aaaa/EEEE/ZZZZ era BC",
    "test_result": "FAIL"
}