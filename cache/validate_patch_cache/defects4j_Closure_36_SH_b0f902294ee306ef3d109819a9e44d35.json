{
    "patch": "if (value.isFunction() &&\n          reference.getParent().isCall()) {\n        Node callNode = reference.getParent();\n        if (callNode.getParent().isExprResult()\n            && callNode.getChildCount() == 2\n            && callNode.getSecondChild() == reference.getNode()) {\n          Node lhs = callNode.getFirstChild();\n          if (lhs.isAssign() && lhs.getFirstChild().isQualifiedName()) {\n            Node qualifier = lhs.getFirstChild().getFirstChild();\n            if (!qualifier.isThis()\n                && !qualifier.matchesQualifiedName(classPrototype)) {\n              return false;\n            }\n          }\n          return canInlineFunctionCall(value);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..d5acb48b 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,21 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+if (value.isFunction() &&\n+          reference.getParent().isCall()) {\n+        Node callNode = reference.getParent();\n+        if (callNode.getParent().isExprResult()\n+            && callNode.getChildCount() == 2\n+            && callNode.getSecondChild() == reference.getNode()) {\n+          Node lhs = callNode.getFirstChild();\n+          if (lhs.isAssign() && lhs.getFirstChild().isQualifiedName()) {\n+            Node qualifier = lhs.getFirstChild().getFirstChild();\n+            if (!qualifier.isThis()\n+                && !qualifier.matchesQualifiedName(classPrototype)) {\n+              return false;\n+            }\n+          }\n+          return canInlineFunctionCall(value);\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}