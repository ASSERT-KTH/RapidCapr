{
    "patch": "if (thenOp.getType() == elseOp.getType()\n          && areNodesEqualForInlining(lhs, elseOp.getFirstChild())) {\n        if (NodeUtil.mayHaveSideEffects(lhs)) {\n          return n;\n        } else {\n          n.removeChild(cond);\n          Node assignName = thenOp.removeFirstChild();\n          Node thenExpr = thenOp.removeFirstChild();\n          Node elseExpr = elseOp.getLastChild().detachFromParent();\n          Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n          Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                              .srcref(thenOp);\n          Node expr = NodeUtil.newExpr(assign);\n          parent.replaceChild(n, expr);\n          reportCodeChange();\n\n          return expr;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..bfb43018 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,23 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+if (thenOp.getType() == elseOp.getType()\n+          && areNodesEqualForInlining(lhs, elseOp.getFirstChild())) {\n+        if (NodeUtil.mayHaveSideEffects(lhs)) {\n+          return n;\n+        } else {\n+          n.removeChild(cond);\n+          Node assignName = thenOp.removeFirstChild();\n+          Node thenExpr = thenOp.removeFirstChild();\n+          Node elseExpr = elseOp.getLastChild().detachFromParent();\n+          Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+          Node assign = new Node(thenOp.getType(), assignName, hookNode)\n+                              .srcref(thenOp);\n+          Node expr = NodeUtil.newExpr(assign);\n+          parent.replaceChild(n, expr);\n+          reportCodeChange();\n+\n+          return expr;\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}