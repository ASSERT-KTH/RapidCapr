{
    "patch": "    boolean varArgs = false;\n    while (parameters.hasNext()) {\n      // If there are no parameters left in the list, then the while loop\n      // above implies that this must be a var_args function.\n      if (!arguments.hasNext()) {\n        varArgs = true;\n        break;\n      }\n      parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    while (arguments.hasNext()) {\n      if (!varArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                null, String.valueOf(functionType.getMinArguments()),\n                String.valueOf(functionType.getMaxArguments()));\n        return;\n      }\n      argument = arguments.next();\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), functionType.getRestType(), call, ordinal++);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || (maxArgs < numArgs && !varArgs)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..ee772667 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,20 +1396,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n+    boolean varArgs = false;\n+    while (parameters.hasNext()) {\n       // If there are no parameters left in the list, then the while loop\n       // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+      if (!arguments.hasNext()) {\n+        varArgs = true;\n+        break;\n+      }\n+      parameter = parameters.next();\n       argument = arguments.next();\n       ordinal++;\n \n@@ -1417,17 +1412,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n           getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n+    while (arguments.hasNext()) {\n+      if (!varArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                null, String.valueOf(functionType.getMinArguments()),\n+                String.valueOf(functionType.getMaxArguments()));\n+        return;\n+      }\n+      argument = arguments.next();\n+      validator.expectArgumentMatchesParameter(t, argument,\n+          getJSType(argument), functionType.getRestType(), call, ordinal++);\n+    }\n+\n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n-  }\n+    if (minArgs > numArgs || (maxArgs < numArgs && !varArgs)) {\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}