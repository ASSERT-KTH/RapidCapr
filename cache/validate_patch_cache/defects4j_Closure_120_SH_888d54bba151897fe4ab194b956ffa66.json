{
    "patch": "if (ref == null) {\n  return false;\n}\nBasicBlock refBlock = ref.getBasicBlock();\nfor (BasicBlock block = refBlock; block != null; block = block.getParent()) {\n  if (block.equals(refBlock) && block.isLoop) {\n    continue;\n  } else if (block.isFunction) {\n    return false;\n  } else if (block.isLoop) {\n    return false;\n  }\n}\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..32f8edb3 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (ref == null) {\n+  return false;\n+}\n+BasicBlock refBlock = ref.getBasicBlock();\n+for (BasicBlock block = refBlock; block != null; block = block.getParent()) {\n+  if (block.equals(refBlock) && block.isLoop) {\n+    continue;\n+  } else if (block.isFunction) {\n+    return false;\n+  } else if (block.isLoop) {\n+    return false;\n+  }\n+}\n+return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}