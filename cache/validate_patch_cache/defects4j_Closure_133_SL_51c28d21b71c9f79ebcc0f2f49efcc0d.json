{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    if (result == null) {\n      return null;\n    }\n    Pair<ParseResult, WarningSet> parsedJSDoc = jsdocParser.parse(result);\n    ParseResult parseResult = parsedJSDoc.a;\n    WarningSet warningSet = parsedJSDoc.b;\n    if (parseResult.hasErrors()) {\n      throw new IllegalStateException(\"JS Doc comment contains parse errors\");\n    }\n    // Handle any warnings within the WarningSet\n    handleWarnings(warningSet);\n    return parseResult.getDescription().trim();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..645c30af 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,21 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    String result = stream.getRemainingJSDocLine();\n+    if (result == null) {\n+      return null;\n+    }\n+    Pair<ParseResult, WarningSet> parsedJSDoc = jsdocParser.parse(result);\n+    ParseResult parseResult = parsedJSDoc.a;\n+    WarningSet warningSet = parsedJSDoc.b;\n+    if (parseResult.hasErrors()) {\n+      throw new IllegalStateException(\"JS Doc comment contains parse errors\");\n+    }\n+    // Handle any warnings within the WarningSet\n+    handleWarnings(warningSet);\n+    return parseResult.getDescription().trim();\n+  }\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}