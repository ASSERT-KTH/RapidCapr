{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException {\n    if (year < 0) {\n        throw new IllegalArgumentException(\"Year must be a positive integer\");\n    }\n    if (monthOfYear < 1 || monthOfYear > 12) {\n        throw new IllegalArgumentException(\"MonthOfYear must be between 1 and 12\");\n    }\n    if (dayOfMonth < 1 || dayOfMonth > 31) {\n        throw new IllegalArgumentException(\"DayOfMonth must be between 1 and 31\");\n    }\n    if (hourOfDay < 0 || hourOfDay > 23) {\n        throw new IllegalArgumentException(\"HourOfDay must be between 0 and 23\");\n    }\n    if (minuteOfHour < 0 || minuteOfHour > 59) {\n        throw new IllegalArgumentException(\"MinuteOfHour must be between 0 and 59\");\n    }\n    if (secondOfMinute < 0 || secondOfMinute > 59) {\n        throw new IllegalArgumentException(\"SecondOfMinute must be between 0 and 59\");\n    }\n    if (millisOfSecond < 0 || millisOfSecond > 999) {\n        throw new IllegalArgumentException(\"MillisOfSecond must be between 0 and 999\");\n    }\n\n    // Try using the current chronology\n    Chronology chronology = getChronology();\n    try {\n        return chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } catch (IllegalFieldValueException e) {\n        // The current chronology doesn't support this date, so we need to find the right chronology\n        if (year >= 1582) {\n            // After the introduction of the Gregorian calendar\n            chronology = GJChronology.getInstanceUTC();\n        } else if (year == 1582 && monthOfYear >= 10) {\n            // The cutover occurred on October 4th 1582\n            chronology = GJChronology.getInstanceUTC();\n        } else {\n            chronology = JulianChronology.getInstanceUTC();\n        }\n        return chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..dd6a8bb6 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,35 +347,52 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        }\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+                              int hourOfDay, int minuteOfHour,\n+                              int secondOfMinute, int millisOfSecond)\n+        throws IllegalArgumentException {\n+    if (year < 0) {\n+        throw new IllegalArgumentException(\"Year must be a positive integer\");\n+    }\n+    if (monthOfYear < 1 || monthOfYear > 12) {\n+        throw new IllegalArgumentException(\"MonthOfYear must be between 1 and 12\");\n+    }\n+    if (dayOfMonth < 1 || dayOfMonth > 31) {\n+        throw new IllegalArgumentException(\"DayOfMonth must be between 1 and 31\");\n+    }\n+    if (hourOfDay < 0 || hourOfDay > 23) {\n+        throw new IllegalArgumentException(\"HourOfDay must be between 0 and 23\");\n+    }\n+    if (minuteOfHour < 0 || minuteOfHour > 59) {\n+        throw new IllegalArgumentException(\"MinuteOfHour must be between 0 and 59\");\n+    }\n+    if (secondOfMinute < 0 || secondOfMinute > 59) {\n+        throw new IllegalArgumentException(\"SecondOfMinute must be between 0 and 59\");\n+    }\n+    if (millisOfSecond < 0 || millisOfSecond > 999) {\n+        throw new IllegalArgumentException(\"MillisOfSecond must be between 0 and 999\");\n+    }\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n-            }\n+    // Try using the current chronology\n+    Chronology chronology = getChronology();\n+    try {\n+        return chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    } catch (IllegalFieldValueException e) {\n+        // The current chronology doesn't support this date, so we need to find the right chronology\n+        if (year >= 1582) {\n+            // After the introduction of the Gregorian calendar\n+            chronology = GJChronology.getInstanceUTC();\n+        } else if (year == 1582 && monthOfYear >= 10) {\n+            // The cutover occurred on October 4th 1582\n+            chronology = GJChronology.getInstanceUTC();\n+        } else {\n+            chronology = JulianChronology.getInstanceUTC();\n         }\n-        return instant;\n+        return chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n     }\n+}\n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}