{
    "patch": "        if (block.isFunction) {\n          // check if the assignment block is inside a try-catch block\n          List<DiGraphEdge<BasicBlock, Branch>> edgesIn = cfg.getInEdges(block);\n          for (DiGraphEdge<BasicBlock, Branch> edge : edgesIn) {\n            if (edge.getValue() == Branch.ON_EX) {\n              return false;\n            }\n          }\n          break;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..05ef73c2 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          // check if the assignment block is inside a try-catch block\n+          List<DiGraphEdge<BasicBlock, Branch>> edgesIn = cfg.getInEdges(block);\n+          for (DiGraphEdge<BasicBlock, Branch> edge : edgesIn) {\n+            if (edge.getValue() == Branch.ON_EX) {\n+              return false;\n+            }\n+          }\n+          break;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}