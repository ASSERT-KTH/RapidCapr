{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n      Node child = n.getFirstChild();\n      if (child.getType() == Token.READ\n          && child.getChildCount() == 2\n          && child.getFirstChild().getType() == Token.NAME\n          && child.getFirstChild().getString().equals(\"$wnd\")\n          && child.getLastChild().getType() == Token.STRING\n          && child.getLastChild().getString().equals(\"eventGetKeyCode\")) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..6ed09fb1 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -517,23 +517,18 @@ public class PeepholeSubstituteAlternateSyntax\n    *     an expression.\n    */\n   private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+      Node child = n.getFirstChild();\n+      if (child.getType() == Token.READ\n+          && child.getChildCount() == 2\n+          && child.getFirstChild().getType() == Token.NAME\n+          && child.getFirstChild().getString().equals(\"$wnd\")\n+          && child.getLastChild().getType() == Token.STRING\n+          && child.getLastChild().getString().equals(\"eventGetKeyCode\")) {\n+        return false;\n       }\n+      return true;\n     }\n-\n     return false;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}