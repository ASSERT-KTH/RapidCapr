{
    "patch": "int codePoint = Character.codePointAt(input, pos);\nint charCount = Character.charCount(codePoint);\nif (charCount == 2) {\n    // The character at \"pos\" is part of a surrogate pair\n    char[] surrogatePair = Character.toChars(codePoint);\n    translate(new String(surrogatePair), out);\n\n    // Check if there are additional surrogate pairs in the input sequence\n    int newPos = pos + 2;\n    while (newPos < len) {\n        int newCodePoint = Character.codePointAt(input, newPos);\n        if (Character.isSurrogatePair(surrogatePair[0], (char) newCodePoint)) {\n            surrogatePair = Character.toChars(newCodePoint);\n            translate(new String(surrogatePair), out);\n            newPos += 2;\n        } else {\n            break;\n        }\n    }\n    pos = newPos;\n} else {\n    // The character at \"pos\" is not part of a surrogate pair\n    translate(Character.toString((char) codePoint), out);\n    pos++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..ee0db267 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,31 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+int codePoint = Character.codePointAt(input, pos);\n+int charCount = Character.charCount(codePoint);\n+if (charCount == 2) {\n+    // The character at \"pos\" is part of a surrogate pair\n+    char[] surrogatePair = Character.toChars(codePoint);\n+    translate(new String(surrogatePair), out);\n+\n+    // Check if there are additional surrogate pairs in the input sequence\n+    int newPos = pos + 2;\n+    while (newPos < len) {\n+        int newCodePoint = Character.codePointAt(input, newPos);\n+        if (Character.isSurrogatePair(surrogatePair[0], (char) newCodePoint)) {\n+            surrogatePair = Character.toChars(newCodePoint);\n+            translate(new String(surrogatePair), out);\n+            newPos += 2;\n+        } else {\n+            break;\n+        }\n+    }\n+    pos = newPos;\n+} else {\n+    // The character at \"pos\" is not part of a surrogate pair\n+    translate(Character.toString((char) codePoint), out);\n+    pos++;\n+}\n             }\n         }\n     }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}