{
    "patch": "public static double getTypedPercent(String json) {\n    double typedCount = 0.0;\n    double totalCount = 0.0;\n    try {\n        JSONParser parser = new JSONParser();\n        JSONObject obj = (JSONObject) parser.parse(json);\n        for (Object key : obj.keySet()) {\n            String type = (String) key;\n            JSONArray arr = (JSONArray) obj.get(key);\n            for (int i = 0; i < arr.size(); i++) {\n                JSONObject person = (JSONObject) arr.get(i);\n                if (person.containsKey(\"typed\") && (Boolean) person.get(\"typed\")) {\n                    typedCount++;\n                }\n                totalCount++;\n            }\n        }\n    } catch (ParseException e) {\n        e.printStackTrace();\n    }\n    return 100.0 * typedCount / totalCount;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..33123f8d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    double typedCount = 0.0;\n+    double totalCount = 0.0;\n+    try {\n+        JSONParser parser = new JSONParser();\n+        JSONObject obj = (JSONObject) parser.parse(json);\n+        for (Object key : obj.keySet()) {\n+            String type = (String) key;\n+            JSONArray arr = (JSONArray) obj.get(key);\n+            for (int i = 0; i < arr.size(); i++) {\n+                JSONObject person = (JSONObject) arr.get(i);\n+                if (person.containsKey(\"typed\") && (Boolean) person.get(\"typed\")) {\n+                    typedCount++;\n+                }\n+                totalCount++;\n+            }\n+        }\n+    } catch (ParseException e) {\n+        e.printStackTrace();\n+    }\n+    return 100.0 * typedCount / totalCount;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}