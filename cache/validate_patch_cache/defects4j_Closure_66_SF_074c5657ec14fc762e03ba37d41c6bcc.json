{
    "patch": "public double getTypedPercent(JSONObject json) {\n    int total = 0;\n    int typed = 0;\n    Iterator<?> keys = json.keys();\n\n    while (keys.hasNext()) {\n        String key = (String) keys.next();\n        JSONObject obj = json.getJSONObject(key);\n        total += obj.getInt(\"total\");\n        typed += obj.getInt(\"typed\");\n    }\n\n    if (total == 0) {\n        return 0.0;\n    }\n\n    double percent = (100.0 * typed) / total;\n    return round(percent, 1);\n}\n\nprivate double round(double value, int places) {\n    if (places < 0) {\n        throw new IllegalArgumentException();\n    }\n\n    long factor = (long) Math.pow(10, places);\n    value = value * factor;\n    long tmp = Math.round(value);\n    return (double) tmp / factor;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..86bb6ff5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,36 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(JSONObject json) {\n+    int total = 0;\n+    int typed = 0;\n+    Iterator<?> keys = json.keys();\n+\n+    while (keys.hasNext()) {\n+        String key = (String) keys.next();\n+        JSONObject obj = json.getJSONObject(key);\n+        total += obj.getInt(\"total\");\n+        typed += obj.getInt(\"typed\");\n+    }\n+\n+    if (total == 0) {\n+        return 0.0;\n+    }\n+\n+    double percent = (100.0 * typed) / total;\n+    return round(percent, 1);\n+}\n+\n+private double round(double value, int places) {\n+    if (places < 0) {\n+        throw new IllegalArgumentException();\n+    }\n+\n+    long factor = (long) Math.pow(10, places);\n+    value = value * factor;\n+    long tmp = Math.round(value);\n+    return (double) tmp / factor;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}