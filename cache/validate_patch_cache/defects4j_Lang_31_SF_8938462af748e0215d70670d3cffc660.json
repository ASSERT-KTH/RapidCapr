{
    "patch": "public class StringUtils {\n\n    public static boolean containsAny(final char[] str, final char[] searchChars) {\n        if (searchChars == null || str == null) {\n            return false;\n        }\n        \n        for (final char searchChar : searchChars) {\n            for (final int offset : getCharOffsets(str, Character.codePointAt(new char[] { searchChar }, 0))) {\n                if (offset >= 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    \n    private static int[] getCharOffsets(final char[] str, final int searchChar) {\n        final int[] offsets = new int[str.length];\n        int count = 0;\n        \n        for (int i = 0; i < str.length; ) {\n            final int codepoint = Character.codePointAt(str, i);\n            offsets[count++] = (codepoint == searchChar) ? i : -1;\n            i += Character.charCount(codepoint);\n        }\n        \n        return Arrays.copyOfRange(offsets, 0, count);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..375fb67a 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,36 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+\n+    public static boolean containsAny(final char[] str, final char[] searchChars) {\n+        if (searchChars == null || str == null) {\n+            return false;\n+        }\n+        \n+        for (final char searchChar : searchChars) {\n+            for (final int offset : getCharOffsets(str, Character.codePointAt(new char[] { searchChar }, 0))) {\n+                if (offset >= 0) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    private static int[] getCharOffsets(final char[] str, final int searchChar) {\n+        final int[] offsets = new int[str.length];\n+        int count = 0;\n+        \n+        for (int i = 0; i < str.length; ) {\n+            final int codepoint = Character.codePointAt(str, i);\n+            offsets[count++] = (codepoint == searchChar) ? i : -1;\n+            i += Character.charCount(codepoint);\n+        }\n+        \n+        return Arrays.copyOfRange(offsets, 0, count);\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}