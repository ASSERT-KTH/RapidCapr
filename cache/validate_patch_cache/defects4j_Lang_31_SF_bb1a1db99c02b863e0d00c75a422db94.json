{
    "patch": "public static boolean containsAny(CharSequence sequence, char[] searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int strLength = sequence.length();\n    int searchLength = searchChars.length;\n    int minSearchLength = 2;\n    if (searchLength <= CharUtils.SINGLE_QUOTE) {\n        for (int i = 0; i < strLength; i++) {\n            char ch = sequence.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    } else if (minSearchLength <= searchLength) {\n        int maxCodePoint = Character.MAX_CODE_POINT;\n        int[] searchCodePoints = toCodePoints(searchChars);\n        int[][] searchRanges = toRanges(searchCodePoints);\n        for (int i = 0; i < strLength;) {\n            int codePoint = codePointAt(sequence, i);\n            if (codePoint < maxCodePoint) {\n                for (int[] searchRange : searchRanges) {\n                    if (searchRange[0] <= codePoint && codePoint <= searchRange[1]) {\n                        return true;\n                    }\n                }\n            }\n            i += Character.charCount(codePoint);\n        }\n        return false;\n    } else {\n        throw new IllegalArgumentException(\"Invalid searchChars length: \" + searchLength);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..70bb09a7 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,43 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence sequence, char[] searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int strLength = sequence.length();\n+    int searchLength = searchChars.length;\n+    int minSearchLength = 2;\n+    if (searchLength <= CharUtils.SINGLE_QUOTE) {\n+        for (int i = 0; i < strLength; i++) {\n+            char ch = sequence.charAt(i);\n+            for (int j = 0; j < searchLength; j++) {\n+                if (searchChars[j] == ch) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    } else if (minSearchLength <= searchLength) {\n+        int maxCodePoint = Character.MAX_CODE_POINT;\n+        int[] searchCodePoints = toCodePoints(searchChars);\n+        int[][] searchRanges = toRanges(searchCodePoints);\n+        for (int i = 0; i < strLength;) {\n+            int codePoint = codePointAt(sequence, i);\n+            if (codePoint < maxCodePoint) {\n+                for (int[] searchRange : searchRanges) {\n+                    if (searchRange[0] <= codePoint && codePoint <= searchRange[1]) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            i += Character.charCount(codePoint);\n+        }\n+        return false;\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid searchChars length: \" + searchLength);\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}