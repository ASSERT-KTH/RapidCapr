{
    "patch": "        Object initializedSpy = null;\n        try {\n            Class<?> clazz = mock.getClass();\n            Constructor<?> constructor = clazz.getDeclaredConstructors()[0];\n            constructor.setAccessible(true);\n            Object[] arguments = new Object[mockArgs.length];\n            for (int i = 0; i < mockArgs.length; i++) {\n                arguments[i] = mockArgs[i];\n            }\n            initializedSpy = constructor.newInstance(arguments);\n            initializedSpy = Mockito.spy(initializedSpy);\n        } catch(Exception e) {\n            e.printStackTrace();\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..a7557cd78 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,23 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        Object initializedSpy = null;\n+        try {\n+            Class<?> clazz = mock.getClass();\n+            Constructor<?> constructor = clazz.getDeclaredConstructors()[0];\n+            constructor.setAccessible(true);\n+            Object[] arguments = new Object[mockArgs.length];\n+            for (int i = 0; i < mockArgs.length; i++) {\n+                arguments[i] = mockArgs[i];\n+            }\n+            initializedSpy = constructor.newInstance(arguments);\n+            initializedSpy = Mockito.spy(initializedSpy);\n+        } catch(Exception e) {\n+            e.printStackTrace();\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}