{
    "patch": "public class IRFactory extends Parser {\n  private static final Set<String> ALLOWED_DIRECTIVES = ImmutableSet.of(\"use strict\");\n\n  private final ErrorReporter errorReporter;\n\n  public IRFactory(ErrorReporter errorReporter) {\n    this.errorReporter = errorReporter;\n  }\n\n  private boolean isDirective(Node n) {\n    if (n == null) return false;\n\n    int nType = n.getType();\n    return nType == Token.EXPR_RESULT &&\n        n.getFirstChild().isString() &&\n        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n  }\n\n  @Override\n  protected Node transform(AstNode node) {\n    return new TransformDispatcher().process(node);\n  }\n\n  class TransformDispatcher extends IRFactory.TransformDispatcher {\n    public Node process(AstNode node) {\n      return node.accept(this);\n    }\n\n    @Override\n    Node processBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n\n    @Override\n    Node processBreakStatement(BreakStatement statementNode) {\n      Node node = newNode(Token.BREAK);\n      if (statementNode.getBreakLabel() != null) {\n        Node labelName = transform(statementNode.getBreakLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    Node processCatchClause(CatchClause clauseNode) {\n      AstNode catchVar = clauseNode.getVarName();\n      Node node = newNode(Token.CATCH, transform(catchVar));\n      if (clauseNode.getCatchCondition() != null) {\n        errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n      }\n      node.addChildToBack(transformBlock(clauseNode.getBody()));\n      return node;\n    }\n\n    @Override\n    Node processConditionalExpression(ConditionalExpression exprNode) {\n      return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));\n    }\n\n    @Override\n    Node processContinueStatement(ContinueStatement statementNode) {\n      Node node = newNode(Token.CONTINUE);\n      if (statementNode.getLabel() != null) {\n        Node labelName = transform(statementNode.getLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    Node processDoLoop(DoLoop loopNode) {\n      return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));\n    }\n\n    @Override\n    Node processElementGet(ElementGet getNode) {\n      return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));\n    }\n\n    @Override\n    Node processEmptyExpression(EmptyExpression exprNode) {\n      Node node = newNode(Token.EMPTY);\n      return node;\n    }\n\n    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node = newNode(Token.EXPR_RESULT);\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n\n    @Override\n    Node processForInLoop(ForInLoop loopNode) {\n      AstNode iterator = loopNode.getIterator();\n      AstNode iteratedObject = loopNode.getIteratedObject();\n\n      if (iterator instanceof VariableDeclaration) {\n        errorReporter.error(\n            \"For-in loops are not supported\",\n            sourceName,\n            loopNode.getLineno(), \"\", 0);\n      }\n\n      return newNode(\n          Token.FOR,\n          transform(iterator),\n          transform(iteratedObject),\n          transformBlock(loopNode.getBody()));\n    }\n\n    @Override\n    Node processForLoop(ForLoop loopNode) {\n      return newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()),\n          transformBlock(loopNode.getBody()));\n    }\n\n    @Override\n    Node processFunctionCall(FunctionCall callNode) {\n      Node n = newNode(Token.CALL, transform(callNode.getTarget()));\n      for (AstNode arg : callNode.getArguments()) {\n        n.addChildToBack(transform(arg));\n      }\n      return n;\n    }\n\n    // ... other methods omitted for brevity\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..04912368 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,13 +473,32 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+public class IRFactory extends Parser {\n+  private static final Set<String> ALLOWED_DIRECTIVES = ImmutableSet.of(\"use strict\");\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  private final ErrorReporter errorReporter;\n+\n+  public IRFactory(ErrorReporter errorReporter) {\n+    this.errorReporter = errorReporter;\n+  }\n+\n+  private boolean isDirective(Node n) {\n+    if (n == null) return false;\n+\n+    int nType = n.getType();\n+    return nType == Token.EXPR_RESULT &&\n+        n.getFirstChild().isString() &&\n+        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  }\n+\n+  @Override\n+  protected Node transform(AstNode node) {\n+    return new TransformDispatcher().process(node);\n+  }\n+\n+  class TransformDispatcher extends IRFactory.TransformDispatcher {\n+    public Node process(AstNode node) {\n+      return node.accept(this);\n     }\n \n     @Override\n@@ -558,22 +577,53 @@ class IRFactory {\n \n     @Override\n     Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n+      Node node = newNode(Token.EXPR_RESULT);\n       node.addChildToBack(transform(statementNode.getExpression()));\n       return node;\n     }\n \n     @Override\n     Node processForInLoop(ForInLoop loopNode) {\n+      AstNode iterator = loopNode.getIterator();\n+      AstNode iteratedObject = loopNode.getIteratedObject();\n+\n+      if (iterator instanceof VariableDeclaration) {\n+        errorReporter.error(\n+            \"For-in loops are not supported\",\n+            sourceName,\n+            loopNode.getLineno(), \"\", 0);\n+      }\n+\n+      return newNode(\n+          Token.FOR,\n+          transform(iterator),\n+          transform(iteratedObject),\n+          transformBlock(loopNode.getBody()));\n+    }\n \n-        // Return the bare minimum to put the AST in a valid state.\n+    @Override\n+    Node processForLoop(ForLoop loopNode) {\n       return newNode(\n           Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n+          transform(loopNode.getInitializer()),\n+          transform(loopNode.getCondition()),\n+          transform(loopNode.getIncrement()),\n           transformBlock(loopNode.getBody()));\n     }\n \n+    @Override\n+    Node processFunctionCall(FunctionCall callNode) {\n+      Node n = newNode(Token.CALL, transform(callNode.getTarget()));\n+      for (AstNode arg : callNode.getArguments()) {\n+        n.addChildToBack(transform(arg));\n+      }\n+      return n;\n+    }\n+\n+    // ... other methods omitted for brevity\n+  }\n+}\n+\n     @Override\n     Node processForLoop(ForLoop loopNode) {\n       Node node = newNode(",
    "result_reason": "error: class IRFactory is already defined in package com.google.javascript.jscomp.parsing",
    "test_result": "ERROR"
}