{
    "patch": "    List<Node> args = NodeUtil.getFunctionParameters(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      int idx = args.size() - 1;\n      while (idx >= 0) {\n        Node arg = args.get(idx);\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          if (!arg.hasChildren()) {\n            arg.detach();\n          } else {\n            Node defaultValue = arg.getFirstChild();\n            defaultValue.detach();\n            arg.replaceWith(defaultValue);\n          }\n          compiler.reportCodeChange();\n        }\n        idx--;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9006fea6 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<Node> args = NodeUtil.getFunctionParameters(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      int idx = args.size() - 1;\n+      while (idx >= 0) {\n+        Node arg = args.get(idx);\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          if (!arg.hasChildren()) {\n+            arg.detach();\n+          } else {\n+            Node defaultValue = arg.getFirstChild();\n+            defaultValue.detach();\n+            arg.replaceWith(defaultValue);\n+          }\n+          compiler.reportCodeChange();\n+        }\n+        idx--;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}