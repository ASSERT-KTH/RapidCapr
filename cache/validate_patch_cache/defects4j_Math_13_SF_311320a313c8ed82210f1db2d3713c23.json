{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final double epsilon = 1e-10;\n    final double tolerance = 1e-6;\n\n    if (n < 100) { // use EigenDecomposition for small matrices\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    } else { // use iterative algorithm for large matrices\n        RealMatrix x = MatrixUtils.createRealIdentityMatrix(n);\n        RealMatrix y = m;\n\n        while (true) {\n            RealMatrix xNew = 0.5 * (x.add(y.inverse()));\n            RealMatrix yNew = 0.5 * (x.multiply(2 * m).add(y));\n\n            if (xNew.subtract(x).getFrobeniusNorm() < epsilon) {\n                return xNew;\n            }\n\n            if (yNew.subtract(y).getFrobeniusNorm() < epsilon) {\n                return yNew;\n            }\n\n            x = xNew;\n            y = yNew;\n\n            if (x.getFrobeniusNorm() > 1 / tolerance || y.getFrobeniusNorm() > 1 / tolerance) {\n                throw new RuntimeException(\"matrix is not positive definite\");\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f788ed5c0 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,37 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final double epsilon = 1e-10;\n+    final double tolerance = 1e-6;\n+\n+    if (n < 100) { // use EigenDecomposition for small matrices\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n+    } else { // use iterative algorithm for large matrices\n+        RealMatrix x = MatrixUtils.createRealIdentityMatrix(n);\n+        RealMatrix y = m;\n+\n+        while (true) {\n+            RealMatrix xNew = 0.5 * (x.add(y.inverse()));\n+            RealMatrix yNew = 0.5 * (x.multiply(2 * m).add(y));\n+\n+            if (xNew.subtract(x).getFrobeniusNorm() < epsilon) {\n+                return xNew;\n+            }\n+\n+            if (yNew.subtract(y).getFrobeniusNorm() < epsilon) {\n+                return yNew;\n+            }\n+\n+            x = xNew;\n+            y = yNew;\n+\n+            if (x.getFrobeniusNorm() > 1 / tolerance || y.getFrobeniusNorm() > 1 / tolerance) {\n+                throw new RuntimeException(\"matrix is not positive definite\");\n+            }\n+        }\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}