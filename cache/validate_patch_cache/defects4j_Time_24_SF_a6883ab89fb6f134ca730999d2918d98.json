{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DateTimeFieldType firstType = savedFields[0].iField.getType();\n        DurationField months = firstType.getField(iChrono).getDurationField();\n        DurationField days = firstType.getField(iChrono).getRangeDurationField();\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    int savedYear = iDefaultYear;\n    try {\n        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            DurationField fieldToSet = savedField.iField.getDurationField();\n            if (fieldToSet.equals(DurationFieldType.months().getField(iChrono))) {\n                // Month field is 'out of range', adjust year accordingly\n                int currentMonth = savedField.iValue;\n                if (currentMonth == 12) {\n                    // If current month is December, it means the year is next year\n                    savedYear++;\n                }\n                LocalDateTime currentDateTime = new LocalDateTime(savedYear, currentMonth, 1, 0, 0, 0, 0);\n                Chronology currentChrono = currentDateTime.getChronology();\n                int maxDayOfMonth = currentChrono.dayOfMonth().getMaximumValue(currentDateTime);\n                int currentDayOfMonth = Math.min(savedField.iIntValue, maxDayOfMonth);\n\n                // set to beginning of new month, DateTimeField will change it\n                long instant = iChrono.year().set(currentDateTime, savedYear);\n                instant = iChrono.monthOfYear().set(instant, currentMonth);\n                instant = iChrono.dayOfMonth().set(instant, currentDayOfMonth);\n\n                millis = instant + (savedField.iMillis - currentDateTime.toDateTime().getMillis());\n            } else {\n                millis = savedField.set(millis, resetFields);\n            }\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..84fd4566 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,78 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DateTimeFieldType firstType = savedFields[0].iField.getType();\n+        DurationField months = firstType.getField(iChrono).getDurationField();\n+        DurationField days = firstType.getField(iChrono).getRangeDurationField();\n+        DurationField first = savedFields[0].iField.getDurationField();\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            saveField(DateTimeFieldType.year(), iDefaultYear);\n+            return computeMillis(resetFields, text);\n         }\n+    }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    long millis = iMillis;\n+    int savedYear = iDefaultYear;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            DurationField fieldToSet = savedField.iField.getDurationField();\n+            if (fieldToSet.equals(DurationFieldType.months().getField(iChrono))) {\n+                // Month field is 'out of range', adjust year accordingly\n+                int currentMonth = savedField.iValue;\n+                if (currentMonth == 12) {\n+                    // If current month is December, it means the year is next year\n+                    savedYear++;\n+                }\n+                LocalDateTime currentDateTime = new LocalDateTime(savedYear, currentMonth, 1, 0, 0, 0, 0);\n+                Chronology currentChrono = currentDateTime.getChronology();\n+                int maxDayOfMonth = currentChrono.dayOfMonth().getMaximumValue(currentDateTime);\n+                int currentDayOfMonth = Math.min(savedField.iIntValue, maxDayOfMonth);\n+\n+                // set to beginning of new month, DateTimeField will change it\n+                long instant = iChrono.year().set(currentDateTime, savedYear);\n+                instant = iChrono.monthOfYear().set(instant, currentMonth);\n+                instant = iChrono.dayOfMonth().set(instant, currentDayOfMonth);\n+\n+                millis = instant + (savedField.iMillis - currentDateTime.toDateTime().getMillis());\n+            } else {\n+                millis = savedField.set(millis, resetFields);\n             }\n-            throw e;\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n                     \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}