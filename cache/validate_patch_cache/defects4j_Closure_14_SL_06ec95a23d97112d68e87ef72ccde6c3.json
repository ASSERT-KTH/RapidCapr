{
    "patch": "if (cfa != null) {\n  Node finallyParent = finallyNode.getParent();\n  Node nextNode = finallyNode.getNext();\n\n  // Check if finally block is the last block in the parent block.\n  if (finallyParent.isBlock() && nextNode == null) {\n    // Since this is the last block in the parent block, control needs to be\n    // transferred up the AST.\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, finallyParent, cfa));\n  } else {\n    // Finally is not the last block.\n    Node followNode = nextNode;\n    // Skip function declarations because control won't pass through them.\n    while (followNode != null && followNode.isFunction()) {\n      followNode = followNode.getNext();\n    }\n    // If there is no more sibling after finally node, control needs to be\n    // transferred up the AST.\n    if (followNode == null) {\n      followNode = computeFollowNode(fromNode, finallyParent, cfa);\n    }\n    // Create edges with finally block.\n    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n    cfa.createEdge(finallyNode, Branch.UNCOND, followNode);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..f8017cc1 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,32 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  Node finallyParent = finallyNode.getParent();\n+  Node nextNode = finallyNode.getNext();\n+\n+  // Check if finally block is the last block in the parent block.\n+  if (finallyParent.isBlock() && nextNode == null) {\n+    // Since this is the last block in the parent block, control needs to be\n+    // transferred up the AST.\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, finallyParent, cfa));\n+  } else {\n+    // Finally is not the last block.\n+    Node followNode = nextNode;\n+    // Skip function declarations because control won't pass through them.\n+    while (followNode != null && followNode.isFunction()) {\n+      followNode = followNode.getNext();\n+    }\n+    // If there is no more sibling after finally node, control needs to be\n+    // transferred up the AST.\n+    if (followNode == null) {\n+      followNode = computeFollowNode(fromNode, finallyParent, cfa);\n+    }\n+    // Create edges with finally block.\n+    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+    cfa.createEdge(finallyNode, Branch.UNCOND, followNode);\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}