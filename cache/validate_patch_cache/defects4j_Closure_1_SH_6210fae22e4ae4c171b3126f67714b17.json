{
    "patch": "    // Strip unreferenced args off the end of the function declaration.\n    Node lastName = null;\n    boolean lastRemoved = false;\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      lastName = lastName == null ? lastArg : lastName.getNext();\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(lastArg);\n        lastName = lastName.getPrevious();\n        lastRemoved = true;\n        compiler.reportCodeChange();\n      } else {\n        lastRemoved = false;\n      }\n    }\n\n    // Check if last argument removed was optional\n    Node functionNode = fnScope.getRootNode();\n    if (lastRemoved && lastName.isDefaultValue()) {\n      NodeUtil.deleteNode(lastName.getFirstChild());\n      NodeUtil.deleteNode(lastName);\n      compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ab075f6e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastName = null;\n+    boolean lastRemoved = false;\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      lastName = lastName == null ? lastArg : lastName.getNext();\n+      Var var = fnScope.getVar(lastArg.getString());\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(lastArg);\n+        lastName = lastName.getPrevious();\n+        lastRemoved = true;\n+        compiler.reportCodeChange();\n+      } else {\n+        lastRemoved = false;\n+      }\n+    }\n+\n+    // Check if last argument removed was optional\n+    Node functionNode = fnScope.getRootNode();\n+    if (lastRemoved && lastName.isDefaultValue()) {\n+      NodeUtil.deleteNode(lastName.getFirstChild());\n+      NodeUtil.deleteNode(lastName);\n+      compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}