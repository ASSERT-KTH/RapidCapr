{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] actualTypeArguments = new Type[0];\n    if (typeVariable.getGenericDeclaration() instanceof Class) {\n        actualTypeArguments = ((Class<?>) typeVariable.getGenericDeclaration()).getTypeParameters();\n    } else if (typeVariable.getGenericDeclaration() instanceof Method) {\n        actualTypeArguments = ((Method) typeVariable.getGenericDeclaration()).getTypeParameters();\n    }\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        if (actualTypeArguments[i].equals(typeVariable)) {\n            if (typeVariable instanceof TypeVariableImpl) {\n                return ((TypeVariableImpl<?>) typeVariable).getActualTypeArguments()[i];\n            } else {\n                return Object.class;\n            }\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..3777ba704 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,25 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] actualTypeArguments = new Type[0];\n+    if (typeVariable.getGenericDeclaration() instanceof Class) {\n+        actualTypeArguments = ((Class<?>) typeVariable.getGenericDeclaration()).getTypeParameters();\n+    } else if (typeVariable.getGenericDeclaration() instanceof Method) {\n+        actualTypeArguments = ((Method) typeVariable.getGenericDeclaration()).getTypeParameters();\n+    }\n+    for (int i = 0; i < actualTypeArguments.length; i++) {\n+        if (actualTypeArguments[i].equals(typeVariable)) {\n+            if (typeVariable instanceof TypeVariableImpl) {\n+                return ((TypeVariableImpl<?>) typeVariable).getActualTypeArguments()[i];\n+            } else {\n+                return Object.class;\n+            }\n+        }\n+    }\n+    return null;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}