{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid input arguments in regularizedGammaP\");\n    }\n\n    double ig_term = 1 / (a + G + 0.5);\n    ig_term -= ig_term_power_series(a, x);\n\n    double gp_term = Math.exp(-x + a * Math.log(x) - logGamma(a));\n    gp_term *= continued_fraction(a, x);\n\n    if (x > a + 1) {\n        return gp_term * ig_term;\n    } else {\n        return 1 - (gp_term * ig_term);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..d0c2fe097 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,23 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid input arguments in regularizedGammaP\");\n+    }\n+\n+    double ig_term = 1 / (a + G + 0.5);\n+    ig_term -= ig_term_power_series(a, x);\n+\n+    double gp_term = Math.exp(-x + a * Math.log(x) - logGamma(a));\n+    gp_term *= continued_fraction(a, x);\n+\n+    if (x > a + 1) {\n+        return gp_term * ig_term;\n+    } else {\n+        return 1 - (gp_term * ig_term);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}