{
    "patch": "        if (ref.isParameter()) {\n          // Parameters can be reassigned by the caller.\n          return false;\n        } else if (ref.isCatchVariable()) {\n          // Catch variables can be reassigned.\n          return false;\n        } else if (ref.isThis()) {\n          // 'this' can be reassigned.\n          return false;\n        } else if (block.isFunction || block.isLoop || !block.equals(ref.getBasicBlock())) {\n          // If the block is a function, loop, or not the one containing the assignment,\n          // the variable may be modified elsewhere.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..03067c9b 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (ref.isParameter()) {\n+          // Parameters can be reassigned by the caller.\n+          return false;\n+        } else if (ref.isCatchVariable()) {\n+          // Catch variables can be reassigned.\n+          return false;\n+        } else if (ref.isThis()) {\n+          // 'this' can be reassigned.\n+          return false;\n+        } else if (block.isFunction || block.isLoop || !block.equals(ref.getBasicBlock())) {\n+          // If the block is a function, loop, or not the one containing the assignment,\n+          // the variable may be modified elsewhere.\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}