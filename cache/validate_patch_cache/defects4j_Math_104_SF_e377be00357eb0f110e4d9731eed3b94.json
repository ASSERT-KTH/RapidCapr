{
    "patch": "public class GammaFunction {\n    public static double regularizedGamma(double a, double x) {\n        double eps = 10e-15;\n        double sum = 0;\n        double term = 1;\n        int n = 1;\n        while (Math.abs(term) > eps) {\n            term = x * Math.pow(a, n) / (GammaFunction.factorial(n) * (a + n));\n            sum += term;\n            n++;\n        }\n        return Math.exp(-x + a * Math.log(x) - GammaFunction.logGamma(a)) * sum;\n    }\n\n    private static double factorial(double n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * GammaFunction.factorial(n - 1);\n        }\n    }\n\n    private static double logGamma(double x) {\n        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n        double sum = 1.0/ 30.0 * Math.pow(tmp, 2) + 6.0/ 1320.0 * Math.pow(tmp, 4) - 1.0/ 2160.0 * Math.pow(tmp, 5) - 1.0/ 9360.0 * Math.pow(tmp, 6) + 1.0/ 48960.0 * Math.pow(tmp, 7);\n        return sum - Math.log(Math.sqrt(2 * Math.PI) * x) ;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..8d8242993 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,34 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public class GammaFunction {\n+    public static double regularizedGamma(double a, double x) {\n+        double eps = 10e-15;\n+        double sum = 0;\n+        double term = 1;\n+        int n = 1;\n+        while (Math.abs(term) > eps) {\n+            term = x * Math.pow(a, n) / (GammaFunction.factorial(n) * (a + n));\n+            sum += term;\n+            n++;\n+        }\n+        return Math.exp(-x + a * Math.log(x) - GammaFunction.logGamma(a)) * sum;\n+    }\n+\n+    private static double factorial(double n) {\n+        if (n == 0) {\n+            return 1;\n+        } else {\n+            return n * GammaFunction.factorial(n - 1);\n+        }\n+    }\n+\n+    private static double logGamma(double x) {\n+        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+        double sum = 1.0/ 30.0 * Math.pow(tmp, 2) + 6.0/ 1320.0 * Math.pow(tmp, 4) - 1.0/ 2160.0 * Math.pow(tmp, 5) - 1.0/ 9360.0 * Math.pow(tmp, 6) + 1.0/ 48960.0 * Math.pow(tmp, 7);\n+        return sum - Math.log(Math.sqrt(2 * Math.PI) * x) ;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}