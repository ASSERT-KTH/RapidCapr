{
    "patch": "        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n          // Check if the underlying expression is a call to an event handler function\n          Node expr = maybeExpr.getFirstChild();\n          if (expr.getType() == Token.CALL) {\n            Node callee = expr.getFirstChild();\n            if (callee.getType() == Token.GETPROP) {\n              Node obj = callee.getFirstChild();\n              Node prop = obj.getNext();\n              if (obj.isName() && obj.getString().equals(\"window\")\n                  && \"addEventListener\".equals(prop.getString())) {\n                return false; // not foldable\n              }\n            }\n          }\n        }\n        return NodeUtil.isExpressionNode(maybeExpr);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..6c0f0f06 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,22 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n-\n-    return false;\n-  }\n+        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+          // Check if the underlying expression is a call to an event handler function\n+          Node expr = maybeExpr.getFirstChild();\n+          if (expr.getType() == Token.CALL) {\n+            Node callee = expr.getFirstChild();\n+            if (callee.getType() == Token.GETPROP) {\n+              Node obj = callee.getFirstChild();\n+              Node prop = obj.getNext();\n+              if (obj.isName() && obj.getString().equals(\"window\")\n+                  && \"addEventListener\".equals(prop.getString())) {\n+                return false; // not foldable\n+              }\n+            }\n+          }\n+        }\n+        return NodeUtil.isExpressionNode(maybeExpr);\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}