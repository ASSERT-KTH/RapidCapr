{
    "patch": "          // Check if there are any other assignments to this variable.\n          int count = 0;\n          for (BasicBlock innerBlock = ref.getBasicBlock().getNext();\n               innerBlock != null;\n               innerBlock = innerBlock.getNext()) {\n            if (innerBlock.containsBackwardCfgEdge()) {\n              break;\n            }\n            for (Reference innerRef : innerBlock.getReferences()) {\n              if (innerRef.isDeclaration()) {\n                break;\n              } else if (innerRef.getSymbol().getIdentifier().equals(symbol.getIdentifier())) {\n                count++;\n              }\n            }\n\n            if (count > 1) {\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..70854026 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,26 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Check if there are any other assignments to this variable.\n+          int count = 0;\n+          for (BasicBlock innerBlock = ref.getBasicBlock().getNext();\n+               innerBlock != null;\n+               innerBlock = innerBlock.getNext()) {\n+            if (innerBlock.containsBackwardCfgEdge()) {\n+              break;\n+            }\n+            for (Reference innerRef : innerBlock.getReferences()) {\n+              if (innerRef.isDeclaration()) {\n+                break;\n+              } else if (innerRef.getSymbol().getIdentifier().equals(symbol.getIdentifier())) {\n+                count++;\n+              }\n+            }\n+\n+            if (count > 1) {\n+              return false;\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}