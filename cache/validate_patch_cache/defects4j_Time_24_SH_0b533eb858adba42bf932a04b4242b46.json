{
    "patch": "        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            } else if (savedFields[0].iField.getType() == DateTimeFieldType.weekyear()) {\n                int i = 0;\n                try {\n                    millis = savedFields[i].set(millis, resetFields);\n                } catch (IllegalFieldValueException e) {\n                    i++;\n                    while (i < count && savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {\n                        i++;\n                    }\n                    if (i >= count) {\n                        throw e;\n                    }\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            } else {\n                for (int i = 0; i < count; i++) {\n                    SavedField savedField = savedFields[i];\n                    try {\n                        millis = savedField.set(millis, resetFields);\n                    } catch (IllegalFieldValueException e) {\n                        if (text != null) {\n                            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                        }\n                        throw e;\n                    }\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..0e4b9761 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,42 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        if (count > 0) {\n+            // alter base year for parsing if first field is month or day\n+            DurationField months = DurationFieldType.months().getField(iChrono);\n+            DurationField days = DurationFieldType.days().getField(iChrono);\n+            DurationField first = savedFields[0].iField.getDurationField();\n+            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+                saveField(DateTimeFieldType.year(), iDefaultYear);\n+                return computeMillis(resetFields, text);\n+            } else if (savedFields[0].iField.getType() == DateTimeFieldType.weekyear()) {\n+                int i = 0;\n+                try {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } catch (IllegalFieldValueException e) {\n+                    i++;\n+                    while (i < count && savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {\n+                        i++;\n+                    }\n+                    if (i >= count) {\n+                        throw e;\n+                    }\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+            } else {\n+                for (int i = 0; i < count; i++) {\n+                    SavedField savedField = savedFields[i];\n+                    try {\n+                        millis = savedField.set(millis, resetFields);\n+                    } catch (IllegalFieldValueException e) {\n+                        if (text != null) {\n+                            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                        }\n+                        throw e;\n+                    }\n+                }\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1086710400000> but was:<1072627200000>",
    "test_result": "FAIL"
}