{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      attachLiteralTypes(n);\n\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent != null && parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.LP:\n          if (parent.getType() == Token.EXPR_RESULT && \n              parent.getFirstChild().getType() == Token.GETPROP && \n              parent.getFirstChild().getLastChild().getString().equals(\"stub\")) {\n            handleFunctionInputs(n.getNext());\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..5a2ee2b3 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1443,19 +1443,22 @@ final class TypedScopeCreator implements ScopeCreator {\n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n       if (n == scope.getRootNode()) return;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n       attachLiteralTypes(n);\n+\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+          if (parent != null && parent.getType() == Token.NAME) {\n             return;\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n+        case Token.LP:\n+          if (parent.getType() == Token.EXPR_RESULT && \n+              parent.getFirstChild().getType() == Token.GETPROP && \n+              parent.getFirstChild().getLastChild().getString().equals(\"stub\")) {\n+            handleFunctionInputs(n.getNext());\n+          }\n+          break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}