{
    "patch": "protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    options.setCodingConvention(new ClosureCodingConvention());\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n\n    // Fix: if process_closure_primitives flag is enabled and the CompilationLevel is not ADVANCED_OPTIMIZATIONS\n    // then set the closurePass to true, else set it to false\n    if (flags.process_closure_primitives && level != CompilationLevel.ADVANCED_OPTIMIZATIONS) {\n        options.closurePass = true;\n    } else {\n        options.closurePass = false;\n    }\n\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex bdf55921..5d4555bb 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -416,27 +416,32 @@ public class CommandLineRunner extends\n   }\n \n   @Override\n-  protected CompilerOptions createOptions() {\n+protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n-    options.setCodingConvention(new ClosureCodingConvention());\n     CompilationLevel level = flags.compilation_level;\n     level.setOptionsForCompilationLevel(options);\n-    if (flags.debug) {\n-      level.setDebugOptionsForCompilationLevel(options);\n-    }\n-\n     WarningLevel wLevel = flags.warning_level;\n     wLevel.setOptionsForWarningLevel(options);\n+    options.setCodingConvention(new ClosureCodingConvention());\n     for (FormattingOption formattingOption : flags.formatting) {\n-      formattingOption.applyToOptions(options);\n+        formattingOption.applyToOptions(options);\n+    }\n+\n+    // Fix: if process_closure_primitives flag is enabled and the CompilationLevel is not ADVANCED_OPTIMIZATIONS\n+    // then set the closurePass to true, else set it to false\n+    if (flags.process_closure_primitives && level != CompilationLevel.ADVANCED_OPTIMIZATIONS) {\n+        options.closurePass = true;\n+    } else {\n+        options.closurePass = false;\n     }\n-    if (flags.process_closure_primitives) {\n-      options.closurePass = true;\n+\n+    if (flags.debug) {\n+        level.setDebugOptionsForCompilationLevel(options);\n     }\n \n     initOptionsFromFlags(options);\n     return options;\n-  }\n+}\n \n   @Override\n   protected Compiler createCompiler() {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}