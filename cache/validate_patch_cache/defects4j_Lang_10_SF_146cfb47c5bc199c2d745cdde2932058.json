{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    if (regex == null) {\n        regex = new StringBuilder(value.length());\n    } else {\n        regex.setLength(0);\n    }\n\n    boolean wasWhite = false;\n    int i = 0;\n    while (i < value.length()) {\n        char c = value.charAt(i);\n\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*\");\n            }\n        } else {\n            wasWhite = false;\n\n            if (c == '\\'') {\n                if (unquote) {\n                    i++;\n                    if (i >= value.length()) {\n                        break;\n                    }\n                    c = value.charAt(i);\n                }\n            } else {\n                switch (c) {\n                    case '?':\n                    case '[':\n                    case ']':\n                    case '(':\n                    case ')':\n                    case '{':\n                    case '}':\n                    case '\\\\':\n                    case '|':\n                    case '*':\n                    case '+':\n                    case '^':\n                    case '$':\n                    case '.':\n                        regex.append('\\\\').append(c);\n                        i++;\n                        continue;\n                }\n            }\n\n            regex.append(c);\n        }\n        i++;\n    }\n\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..90c33edf 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,48 +300,64 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    if (regex == null) {\n+        regex = new StringBuilder(value.length());\n+    } else {\n+        regex.setLength(0);\n+    }\n+\n+    boolean wasWhite = false;\n+    int i = 0;\n+    while (i < value.length()) {\n+        char c = value.charAt(i);\n+\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+        } else {\n+            wasWhite = false;\n+\n+            if (c == '\\'') {\n+                if (unquote) {\n+                    i++;\n+                    if (i >= value.length()) {\n+                        break;\n                     }\n-                    c= value.charAt(i);\n+                    c = value.charAt(i);\n+                }\n+            } else {\n+                switch (c) {\n+                    case '?':\n+                    case '[':\n+                    case ']':\n+                    case '(':\n+                    case ')':\n+                    case '{':\n+                    case '}':\n+                    case '\\\\':\n+                    case '|':\n+                    case '*':\n+                    case '+':\n+                    case '^':\n+                    case '$':\n+                    case '.':\n+                        regex.append('\\\\').append(c);\n+                        i++;\n+                        continue;\n                 }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n             }\n+\n             regex.append(c);\n         }\n-        return regex;\n+        i++;\n     }\n \n+    return regex;\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}