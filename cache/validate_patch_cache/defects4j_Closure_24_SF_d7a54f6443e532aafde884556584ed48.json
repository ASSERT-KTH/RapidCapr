{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (n == null || (!n.isName() && !n.isStringKey())) {\n      continue;\n    }\n\n    Node parent = n.getParent();\n    if (parent == null || (!parent.isVar() && !parent.isFunction())) {\n      continue;\n    }\n\n    Node grandparent = parent.getParent();\n    if (grandparent == null ||\n        (!grandparent.isScript() && !grandparent.isCall() && !grandparent.isBlock())) {\n      continue;\n    }\n\n    if (isNestedFunction(parent, grandparent)) {\n      // Skip alias definitions nested within a function scope\n      continue;\n    }\n\n    Node targetNode;\n    if (n.isName() && n.hasChildren()) {\n      targetNode = n.getFirstChild();\n    } else {\n      targetNode = n;\n    }\n\n    if (!targetNode.isQualifiedName()) {\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, targetNode.getString());\n      continue;\n    }\n\n    String name = targetNode.getQualifiedName();\n    Var aliasVar = scope.getVar(name);\n    if (aliasVar == null || aliasVar.getInitialValue() == null) {\n      continue;\n    }\n\n    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n    aliases.put(name, aliasVar);\n    transformation.addAlias(name, qualifiedName);\n  }\n}\n\nprivate boolean isNestedFunction(Node functionNode, Node parent) {\n  if (parent.isFunction()) {\n    return true;\n  }\n  Node grandparent = parent.getParent();\n  while (grandparent != null) {\n    if (grandparent.isFunction() && grandparent != functionNode) {\n      return true;\n    }\n    grandparent = grandparent.getParent();\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..3fce1b1c 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,33 +269,68 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n-      }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (n == null || (!n.isName() && !n.isStringKey())) {\n+      continue;\n     }\n \n+    Node parent = n.getParent();\n+    if (parent == null || (!parent.isVar() && !parent.isFunction())) {\n+      continue;\n+    }\n+\n+    Node grandparent = parent.getParent();\n+    if (grandparent == null ||\n+        (!grandparent.isScript() && !grandparent.isCall() && !grandparent.isBlock())) {\n+      continue;\n+    }\n+\n+    if (isNestedFunction(parent, grandparent)) {\n+      // Skip alias definitions nested within a function scope\n+      continue;\n+    }\n+\n+    Node targetNode;\n+    if (n.isName() && n.hasChildren()) {\n+      targetNode = n.getFirstChild();\n+    } else {\n+      targetNode = n;\n+    }\n+\n+    if (!targetNode.isQualifiedName()) {\n+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, targetNode.getString());\n+      continue;\n+    }\n+\n+    String name = targetNode.getQualifiedName();\n+    Var aliasVar = scope.getVar(name);\n+    if (aliasVar == null || aliasVar.getInitialValue() == null) {\n+      continue;\n+    }\n+\n+    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+    aliases.put(name, aliasVar);\n+    transformation.addAlias(name, qualifiedName);\n+  }\n+}\n+\n+private boolean isNestedFunction(Node functionNode, Node parent) {\n+  if (parent.isFunction()) {\n+    return true;\n+  }\n+  Node grandparent = parent.getParent();\n+  while (grandparent != null) {\n+    if (grandparent.isFunction() && grandparent != functionNode) {\n+      return true;\n+    }\n+    grandparent = grandparent.getParent();\n+  }\n+  return false;\n+}\n+\n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {\n         preprocessorSymbolTable.addReference(n.getFirstChild());",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}