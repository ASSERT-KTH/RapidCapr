{
    "patch": "    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        if (!modifyCallers && !NodeUtil.isFunctionExpression(function)) {\n          // Preserve function length in forward declarations\n          if (\"length\".equals(lastArg.getString())) {\n            if (argList.getChildCount() == 1) {\n              lastArg.setString(\" \");\n            } else {\n              lastArg.detachFromParent();\n              Node lastBeforeDetach = argList.getLastChild();\n              if (lastBeforeDetach.isString()) {\n                argList.removeChild(lastBeforeDetach);\n                argList.addChildToBack(\n                    IR.name(\"\").useSourceInfoIfMissingFrom(lastBeforeDetach));\n              }\n            }\n          } else {\n            argList.removeChild(lastArg);\n          }\n        } else {\n          argList.removeChild(lastArg);\n        }\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4ccc32ed 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,38 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      Var var = fnScope.getVar(lastArg.getString());\n+      if (!referenced.contains(var)) {\n+        if (!modifyCallers && !NodeUtil.isFunctionExpression(function)) {\n+          // Preserve function length in forward declarations\n+          if (\"length\".equals(lastArg.getString())) {\n+            if (argList.getChildCount() == 1) {\n+              lastArg.setString(\" \");\n+            } else {\n+              lastArg.detachFromParent();\n+              Node lastBeforeDetach = argList.getLastChild();\n+              if (lastBeforeDetach.isString()) {\n+                argList.removeChild(lastBeforeDetach);\n+                argList.addChildToBack(\n+                    IR.name(\"\").useSourceInfoIfMissingFrom(lastBeforeDetach));\n+              }\n+            }\n+          } else {\n+            argList.removeChild(lastArg);\n+          }\n+        } else {\n+          argList.removeChild(lastArg);\n+        }\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+    }\n+\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}