{
    "patch": "Node function = fnScope.getRootNode();\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n}\nNode argList = getFunctionArgList(function);\n\nif (argList.hasChildren()) {\n    // Skip the first argument or any other argument if it does not\n    // have a declared type or constant value.\n    Node firstArg = argList.getFirstChild();\n    if (!firstArg.isDefaultValue() || !firstArg.getFirstChild().hasDeclaredTypes() || !firstArg.getFirstChild().getDeclaredTypes().hasType(Token.NAME)) {\n        firstArg = firstArg.getNext();\n    }\n    if (firstArg == null) {\n        return;\n    }\n    Node lastArg = argList.getLastChild();\n    while (lastArg != firstArg) {\n        if (!lastArg.isDefaultValue() || !lastArg.getFirstChild().hasDeclaredTypes() || !lastArg.getFirstChild().getDeclaredTypes().hasType(Token.NAME)) {\n            break;\n        }\n        lastArg = lastArg.getPrevious();\n    }\n    for (Node currArg = lastArg; currArg != firstArg; currArg = currArg.getPrevious()) {\n        // Remove arguments between \"firstArg\" and \"lastArg\" that have no references.\n        if (!referenced.contains(fnScope.getVar(currArg.getString()))) {\n            argList.removeChild(currArg);\n            compiler.reportCodeChange();\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d6b0a55a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,38 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+}\n+Node argList = getFunctionArgList(function);\n+\n+if (argList.hasChildren()) {\n+    // Skip the first argument or any other argument if it does not\n+    // have a declared type or constant value.\n+    Node firstArg = argList.getFirstChild();\n+    if (!firstArg.isDefaultValue() || !firstArg.getFirstChild().hasDeclaredTypes() || !firstArg.getFirstChild().getDeclaredTypes().hasType(Token.NAME)) {\n+        firstArg = firstArg.getNext();\n+    }\n+    if (firstArg == null) {\n+        return;\n+    }\n+    Node lastArg = argList.getLastChild();\n+    while (lastArg != firstArg) {\n+        if (!lastArg.isDefaultValue() || !lastArg.getFirstChild().hasDeclaredTypes() || !lastArg.getFirstChild().getDeclaredTypes().hasType(Token.NAME)) {\n+            break;\n+        }\n+        lastArg = lastArg.getPrevious();\n+    }\n+    for (Node currArg = lastArg; currArg != firstArg; currArg = currArg.getPrevious()) {\n+        // Remove arguments between \"firstArg\" and \"lastArg\" that have no references.\n+        if (!referenced.contains(fnScope.getVar(currArg.getString()))) {\n+            argList.removeChild(currArg);\n+            compiler.reportCodeChange();\n+        }\n+    }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}