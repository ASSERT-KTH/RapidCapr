{
    "patch": "public static double getTypedPercent(String js) {\n    int jsLength = js.length();\n    int numTyped = 0;\n    for (int i = 0; i < jsLength; i++) {\n        char c = js.charAt(i);\n        // Only count characters that are letters or digits\n        if (Character.isLetterOrDigit(c)) {\n            numTyped++;\n        }\n    }\n    // Calculate percentage of typed characters\n    double percentTyped = ((double) numTyped / jsLength) * 100;\n    return percentTyped;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..b6e32161 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    int jsLength = js.length();\n+    int numTyped = 0;\n+    for (int i = 0; i < jsLength; i++) {\n+        char c = js.charAt(i);\n+        // Only count characters that are letters or digits\n+        if (Character.isLetterOrDigit(c)) {\n+            numTyped++;\n+        }\n+    }\n+    // Calculate percentage of typed characters\n+    double percentTyped = ((double) numTyped / jsLength) * 100;\n+    return percentTyped;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}