{
    "patch": "                // additional check for invalid values\n                if (millis == Long.MIN_VALUE) {\n                    throw new IllegalFieldValueException(savedFields[i].iField.getType(),\n                            \"Value is too low: \" + savedFields[i].getSaveText(), savedFields[i].getSaveText());\n                } else if (millis == Long.MAX_VALUE) {\n                    throw new IllegalFieldValueException(savedFields[i].iField.getType(),\n                            \"Value is too high: \" + savedFields[i].getSaveText(), savedFields[i].getSaveText());",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..1abd7f90 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,13 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                // additional check for invalid values\n+                if (millis == Long.MIN_VALUE) {\n+                    throw new IllegalFieldValueException(savedFields[i].iField.getType(),\n+                            \"Value is too low: \" + savedFields[i].getSaveText(), savedFields[i].getSaveText());\n+                } else if (millis == Long.MAX_VALUE) {\n+                    throw new IllegalFieldValueException(savedFields[i].iField.getType(),\n+                            \"Value is too high: \" + savedFields[i].getSaveText(), savedFields[i].getSaveText());\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}