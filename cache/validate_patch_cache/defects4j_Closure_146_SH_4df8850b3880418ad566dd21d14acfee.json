{
    "patch": "  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    Equality inequality = this.testForInequality(that);\n    switch (inequality) {\n      case TRUE:\n        return new TypePair(getNativeType(JSTypeNative.BOOLEAN_TYPE), null);\n\n      case FALSE:\n        return new TypePair(null, null);\n\n      case UNKNOWN:\n        if (this.isSubtypeOf(that)) {\n          return new TypePair(null, null);\n        }\n\n        if (this.isNominalType()) {\n          ObjectType ownerThis =\n              (ObjectType) ObjectType.cast(this).getNominalType().getOwnerFunction();\n          if (ownerThis != null) {\n            ownerThis.getGlobalTypeInfo().setStructuralTypingEnabled(true);\n            FunctionType ownerThatFn =\n                that.autobox().getFunTypeIfSingletonObj().withTypeOfThis(ownerThis);\n            ownerThis.getGlobalTypeInfo().setStructuralTypingEnabled(false);\n            if (ownerThatFn == null) {\n              return new TypePair(null, that);\n            }\n            FunctionType ownerThisFn =\n                ObjectType.cast(this.autobox().getContent()).getFunTypeIfSingletonObj()\n                    .withTypeOfThis(ownerThis);\n            if (!ownerThisFn.canOverrideFunction(ownerThatFn)) {\n              return new TypePair(null, that);\n            }\n          }\n        }\n        return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException(\"Unexpected inequality value: \" + inequality);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..85386f22 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,8 +703,53 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n+  public TypePair getTypesUnderInequality(JSType that) {\n+    // unions types\n+    if (that instanceof UnionType) {\n+      TypePair p = that.getTypesUnderInequality(this);\n+      return new TypePair(p.typeB, p.typeA);\n+    }\n+\n+    // other types\n+    Equality inequality = this.testForInequality(that);\n+    switch (inequality) {\n+      case TRUE:\n+        return new TypePair(getNativeType(JSTypeNative.BOOLEAN_TYPE), null);\n+\n+      case FALSE:\n         return new TypePair(null, null);\n \n+      case UNKNOWN:\n+        if (this.isSubtypeOf(that)) {\n+          return new TypePair(null, null);\n+        }\n+\n+        if (this.isNominalType()) {\n+          ObjectType ownerThis =\n+              (ObjectType) ObjectType.cast(this).getNominalType().getOwnerFunction();\n+          if (ownerThis != null) {\n+            ownerThis.getGlobalTypeInfo().setStructuralTypingEnabled(true);\n+            FunctionType ownerThatFn =\n+                that.autobox().getFunTypeIfSingletonObj().withTypeOfThis(ownerThis);\n+            ownerThis.getGlobalTypeInfo().setStructuralTypingEnabled(false);\n+            if (ownerThatFn == null) {\n+              return new TypePair(null, that);\n+            }\n+            FunctionType ownerThisFn =\n+                ObjectType.cast(this.autobox().getContent()).getFunTypeIfSingletonObj()\n+                    .withTypeOfThis(ownerThis);\n+            if (!ownerThisFn.canOverrideFunction(ownerThatFn)) {\n+              return new TypePair(null, that);\n+            }\n+          }\n+        }\n+        return new TypePair(this, that);\n+    }\n+\n+    // switch case is exhaustive\n+    throw new IllegalStateException(\"Unexpected inequality value: \" + inequality);\n+  }\n+\n       case FALSE:\n       case UNKNOWN:\n         return new TypePair(this, that);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}