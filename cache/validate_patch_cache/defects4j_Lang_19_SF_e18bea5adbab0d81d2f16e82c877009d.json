{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (index >= seqEnd - 1 || input.charAt(index) != '&') {\n        return 0;\n    }\n\n    if (input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n          start++;\n          isHex = true;\n        }\n\n        int end = start;\n        while (end < seqEnd) {\n          char ch = input.charAt(end);\n          if (!((ch >= '0' && ch <= '9') || (isHex && ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))) || ch == ';')) {\n            break;\n          }\n          end++;\n        }\n\n        // Check if an incomplete or ill-formed entity was found\n        if (end == start || (end == seqEnd && input.charAt(end - 1) != ';') || (input.charAt(end - 1) == '\"' && input.charAt(start - 1) != '&')) {\n          return 0;\n        }\n\n        int entityValue;\n        try {\n            String valueString = input.subSequence(start, end).toString();\n            if(isHex) {\n                entityValue = Integer.parseInt(valueString, 16);\n            } else {\n                entityValue = Integer.parseInt(valueString, 10);\n            }\n        } catch(NumberFormatException nfe) {\n            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n            return 0;\n        }\n\n        // Check for surrogate pairs\n        if (entityValue >= 0xD800 && entityValue <= 0xDFFF) {\n            if (entityValue <= 0xDBFF && end < seqEnd && input.charAt(end) == '&' && input.charAt(end + 1) == '#' && input.charAt(end + 2) == 'x') {\n                int start2 = end + 3;\n                int end2 = start2;\n                while (end2 < seqEnd) {\n                    char ch = input.charAt(end2);\n                    if (!((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))) {\n                        break;\n                    }\n                    end2++;\n                }\n\n                // Check if an incomplete or ill-formed entity was found\n                if (end2 == start2 || end2 == seqEnd || input.charAt(end2) != ';') {\n                    return 0;\n                }\n\n                int entityValue2;\n                try {\n                    String valueString2 = input.subSequence(start2, end2).toString();\n                    entityValue2 = Integer.parseInt(valueString2, 16);\n                } catch (NumberFormatException nfe) {\n                    return 0;\n                }\n\n                if (entityValue2 < 0xDC00 || entityValue2 > 0xDFFF) {\n                    return 0;\n                }\n\n                entityValue = 0x10000 + ((entityValue - 0xD800) << 10) + (entityValue2 - 0xDC00);\n                end = end2 + 1;\n            } else {\n                return 0;\n            }\n        }\n\n        out.write(entityValue);\n\n        // Return the length of the matched entity including the ampersand(&) and ending semicolon(;)\n        return end - index;\n    }\n    // Hexadecimal entities\n    else if (input.charAt(index + 1) == 'x' || input.charAt(index + 1) == 'X') {\n        int start = index + 2;\n        int end = start;\n        while (end < seqEnd) {\n            char ch = input.charAt(end);\n            if (!((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))) {\n                break;\n            }\n            end++;\n        }\n\n        // Check if an incomplete or ill-formed entity was found\n        if (end == start || end == seqEnd || input.charAt(end) != ';') {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String valueString = input.subSequence(start, end).toString();\n            entityValue = Integer.parseInt(valueString, 16);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        out.write(entityValue);\n\n        // Return the length of the matched entity including the ampersand(&) and ending semicolon(;)\n        return end - index + 1;\n    }\n\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..4d979889 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,121 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if (index >= seqEnd - 1 || input.charAt(index) != '&') {\n+        return 0;\n+    }\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n+    if (input.charAt(index + 1) == '#') {\n+        int start = index + 2;\n+        boolean isHex = false;\n+\n+        if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n+          start++;\n+          isHex = true;\n+        }\n+\n+        int end = start;\n+        while (end < seqEnd) {\n+          char ch = input.charAt(end);\n+          if (!((ch >= '0' && ch <= '9') || (isHex && ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))) || ch == ';')) {\n+            break;\n+          }\n+          end++;\n+        }\n+\n+        // Check if an incomplete or ill-formed entity was found\n+        if (end == start || (end == seqEnd && input.charAt(end - 1) != ';') || (input.charAt(end - 1) == '\"' && input.charAt(start - 1) != '&')) {\n+          return 0;\n+        }\n+\n+        int entityValue;\n+        try {\n+            String valueString = input.subSequence(start, end).toString();\n+            if(isHex) {\n+                entityValue = Integer.parseInt(valueString, 16);\n+            } else {\n+                entityValue = Integer.parseInt(valueString, 10);\n             }\n+        } catch(NumberFormatException nfe) {\n+            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+            return 0;\n+        }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n+        // Check for surrogate pairs\n+        if (entityValue >= 0xD800 && entityValue <= 0xDFFF) {\n+            if (entityValue <= 0xDBFF && end < seqEnd && input.charAt(end) == '&' && input.charAt(end + 1) == '#' && input.charAt(end + 2) == 'x') {\n+                int start2 = end + 3;\n+                int end2 = start2;\n+                while (end2 < seqEnd) {\n+                    char ch = input.charAt(end2);\n+                    if (!((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))) {\n+                        break;\n+                    }\n+                    end2++;\n                 }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+\n+                // Check if an incomplete or ill-formed entity was found\n+                if (end2 == start2 || end2 == seqEnd || input.charAt(end2) != ';') {\n+                    return 0;\n+                }\n+\n+                int entityValue2;\n+                try {\n+                    String valueString2 = input.subSequence(start2, end2).toString();\n+                    entityValue2 = Integer.parseInt(valueString2, 16);\n+                } catch (NumberFormatException nfe) {\n+                    return 0;\n+                }\n+\n+                if (entityValue2 < 0xDC00 || entityValue2 > 0xDFFF) {\n+                    return 0;\n+                }\n+\n+                entityValue = 0x10000 + ((entityValue - 0xD800) << 10) + (entityValue2 - 0xDC00);\n+                end = end2 + 1;\n+            } else {\n                 return 0;\n             }\n+        }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n+        out.write(entityValue);\n+\n+        // Return the length of the matched entity including the ampersand(&) and ending semicolon(;)\n+        return end - index;\n+    }\n+    // Hexadecimal entities\n+    else if (input.charAt(index + 1) == 'x' || input.charAt(index + 1) == 'X') {\n+        int start = index + 2;\n+        int end = start;\n+        while (end < seqEnd) {\n+            char ch = input.charAt(end);\n+            if (!((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))) {\n+                break;\n             }\n+            end++;\n+        }\n \n+        // Check if an incomplete or ill-formed entity was found\n+        if (end == start || end == seqEnd || input.charAt(end) != ';') {\n+            return 0;\n+        }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        int entityValue;\n+        try {\n+            String valueString = input.subSequence(start, end).toString();\n+            entityValue = Integer.parseInt(valueString, 16);\n+        } catch (NumberFormatException nfe) {\n+            return 0;\n         }\n-        return 0;\n+\n+        out.write(entityValue);\n+\n+        // Return the length of the matched entity including the ampersand(&) and ending semicolon(;)\n+        return end - index + 1;\n     }\n+\n+    return 0;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape expected:<[\u0080\u009f]> but was:<[&#x80;&#x9F;]>",
    "test_result": "FAIL"
}