{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  try {\n    if (t.inGlobalScope()) {\n      if (n.isVar() || NodeUtil.isClassDeclaration(n)) {\n        NameInformation ns = createNameInformation(t, n, parent);\n        if (ns != null && ns.name != null) {\n          recordSet(ns.name, n);\n        }\n      } else if (NodeUtil.isFunctionDeclaration(n)) {\n        Node nameNode = n.getFirstChild();\n        if (nameNode.isName()) {\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          if (ns != null) {\n            JsName nameInfo = getName(nameNode.getString(), true);\n            if (nameInfo != null && nameInfo.name != null) {\n              recordSet(nameInfo.name, nameNode);\n            }\n          }\n        }\n      } else if (NodeUtil.isObjectLitKey(n, parent)) {\n        NameInformation ns = createNameInformation(t, n, parent);\n        if (ns != null && ns.name != null) {\n          recordSet(ns.name, n);\n        }\n      }\n    }\n\n    if (n.isAssign()) {\n      Node nameNode = n.getFirstChild();\n      if (nameNode.isName()) {\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null && ns.name != null) {\n          if ((ns.isPrototype && ns.prototypeClass != null && ns.prototypeProperty != null) || NodeUtil.isClassExpression(parent)) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n    } else if (n.isCall()) {\n      Node nameNode = n.getFirstChild();\n      if (nameNode.isName()) {\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null && ns.name != null && ns.onlyAffectsClassDef) {\n          JsName name = getName(ns.name, false);\n          if (name != null) {\n            refNodes.add(new ClassDefiningFunctionNode(name, n, parent, parent.getParent()));\n          }\n        }\n      }\n    }\n  } catch (Exception e) {\n    e.printStackTrace();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..5cfea54d 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,61 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  try {\n+    if (t.inGlobalScope()) {\n+      if (n.isVar() || NodeUtil.isClassDeclaration(n)) {\n+        NameInformation ns = createNameInformation(t, n, parent);\n+        if (ns != null && ns.name != null) {\n           recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n+        }\n+      } else if (NodeUtil.isFunctionDeclaration(n)) {\n+        Node nameNode = n.getFirstChild();\n+        if (nameNode.isName()) {\n           NameInformation ns = createNameInformation(t, nameNode, n);\n           if (ns != null) {\n             JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n+            if (nameInfo != null && nameInfo.name != null) {\n+              recordSet(nameInfo.name, nameNode);\n+            }\n           }\n         }\n+      } else if (NodeUtil.isObjectLitKey(n, parent)) {\n+        NameInformation ns = createNameInformation(t, n, parent);\n+        if (ns != null && ns.name != null) {\n+          recordSet(ns.name, n);\n+        }\n       }\n+    }\n \n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n-\n+    if (n.isAssign()) {\n+      Node nameNode = n.getFirstChild();\n+      if (nameNode.isName()) {\n         NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n+        if (ns != null && ns.name != null) {\n+          if ((ns.isPrototype && ns.prototypeClass != null && ns.prototypeProperty != null) || NodeUtil.isClassExpression(parent)) {\n             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n           } else {\n-            recordSet(ns.name, nameNode);\n+            recordSet(ns.name, n);\n           }\n         }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n+      }\n+    } else if (n.isCall()) {\n+      Node nameNode = n.getFirstChild();\n+      if (nameNode.isName()) {\n         NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n+        if (ns != null && ns.name != null && ns.onlyAffectsClassDef) {\n           JsName name = getName(ns.name, false);\n           if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n+            refNodes.add(new ClassDefiningFunctionNode(name, n, parent, parent.getParent()));\n           }\n         }\n       }\n     }\n+  } catch (Exception e) {\n+    e.printStackTrace();\n+  }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}