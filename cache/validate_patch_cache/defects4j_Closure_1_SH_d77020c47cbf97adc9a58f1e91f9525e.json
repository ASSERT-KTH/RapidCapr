{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    Set<String> referencedArgs = new HashSet<>();\n    for (Var referVar : referenced) {\n      if (referVar.getParentNode().isParamList()) {\n        referencedArgs.add(referVar.getName());\n      }\n    }\n    if (!modifyCallers) {\n      boolean hasOptional = false;\n      boolean hasDefault = false;\n      while (argList.hasMoreThanOneChild()) {\n        Node arg = argList.getLastChild();\n        String argName = arg.getString();\n        Var argVar = fnScope.getVar(argName);\n        boolean isReferenced = referenced.contains(argVar);\n        checkState(arg.isName(), arg);\n        // Destructuring patterns or function rest parameters\n        // cannot have default values.\n        Node defaultValue = arg.getFirstChild();\n        boolean isOptional = NodeUtil.isOptionalParameter(arg) || !defaultValue.isEmpty();\n        boolean isDestructuringPattern = NodeUtil.isDestructuringPattern(arg);\n        boolean isFunctionRestParameter = NodeUtil.isFunctionRest(arg);\n        if (isOptional) {\n          hasOptional = true;\n        }\n        if (!defaultValue.isEmpty()) {\n          hasDefault = true;\n          if (!isReferenced && isOptional) {\n            // If it is an unused optional arg with a default value, we can just remove the default\n            defaultValue.detach();\n            compiler.reportCodeChange();\n          }\n        }\n        if (isReferenced || isOptional || isDestructuringPattern || isFunctionRestParameter\n            || (!hasDefault && !hasOptional)) {\n          break;\n        }\n        if (hasDefault) {\n          // We need to make sure we remove all defaults before removing arguments.\n          NodeUtil.deleteFunctionDefaults(arg);\n          hasDefault = false;\n        }\n        argList.removeChild(arg);\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced, referencedArgs);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f10edd2e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,64 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    Set<String> referencedArgs = new HashSet<>();\n+    for (Var referVar : referenced) {\n+      if (referVar.getParentNode().isParamList()) {\n+        referencedArgs.add(referVar.getName());\n+      }\n+    }\n+    if (!modifyCallers) {\n+      boolean hasOptional = false;\n+      boolean hasDefault = false;\n+      while (argList.hasMoreThanOneChild()) {\n+        Node arg = argList.getLastChild();\n+        String argName = arg.getString();\n+        Var argVar = fnScope.getVar(argName);\n+        boolean isReferenced = referenced.contains(argVar);\n+        checkState(arg.isName(), arg);\n+        // Destructuring patterns or function rest parameters\n+        // cannot have default values.\n+        Node defaultValue = arg.getFirstChild();\n+        boolean isOptional = NodeUtil.isOptionalParameter(arg) || !defaultValue.isEmpty();\n+        boolean isDestructuringPattern = NodeUtil.isDestructuringPattern(arg);\n+        boolean isFunctionRestParameter = NodeUtil.isFunctionRest(arg);\n+        if (isOptional) {\n+          hasOptional = true;\n+        }\n+        if (!defaultValue.isEmpty()) {\n+          hasDefault = true;\n+          if (!isReferenced && isOptional) {\n+            // If it is an unused optional arg with a default value, we can just remove the default\n+            defaultValue.detach();\n+            compiler.reportCodeChange();\n+          }\n+        }\n+        if (isReferenced || isOptional || isDestructuringPattern || isFunctionRestParameter\n+            || (!hasDefault && !hasOptional)) {\n+          break;\n+        }\n+        if (hasDefault) {\n+          // We need to make sure we remove all defaults before removing arguments.\n+          NodeUtil.deleteFunctionDefaults(arg);\n+          hasDefault = false;\n+        }\n+        argList.removeChild(arg);\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced, referencedArgs);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}