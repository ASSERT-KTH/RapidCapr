{
    "patch": "private static String unescapeAtSymbol(String s, boolean strict) {\n    boolean success = false;\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i ++) {\n        char ch = s.charAt(i);\n        if (ch == '@') {\n            if (i + 1 < s.length() && s.charAt(i + 1) == '@') {\n                sb.append(ch); // append one '@'\n                i ++;\n            } else if (strict) {\n                // Do nothing, strict checking turned on\n            } else {\n                success = true;\n            }\n        } else {\n            sb.append(ch);\n        }\n    }\n    assertTrue(\"One or more errors detected\", success || strict);\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}