{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n}catch (IllegalFieldValueException e) {\n    boolean hasFixedField = false;\n    for (int i = 0; i < count; i++) {\n        try {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n        catch (IllegalFieldValueException ex) {\n            if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n                // try to fix the year and set other fields \n                try {\n                    millis = savedFields[i].set(iDefaultYear, millis, resetFields);\n                    for (int j = 0; j < count; j++) {\n                        if (j == i) {\n                            continue;\n                        }\n                        millis = savedFields[j].set(millis, resetFields);\n                    }\n                    hasFixedField = true;\n                    break;\n                } catch (IllegalFieldValueException ex2) {\n                    // cannot fix year, continue to next field\n                }\n            }\n        }\n        if(hasFixedField) {\n            break;\n        }\n    }\n    if (!hasFixedField) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..36ab88c4 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,45 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+}catch (IllegalFieldValueException e) {\n+    boolean hasFixedField = false;\n+    for (int i = 0; i < count; i++) {\n+        try {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+        catch (IllegalFieldValueException ex) {\n+            if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n+                // try to fix the year and set other fields \n+                try {\n+                    millis = savedFields[i].set(iDefaultYear, millis, resetFields);\n+                    for (int j = 0; j < count; j++) {\n+                        if (j == i) {\n+                            continue;\n+                        }\n+                        millis = savedFields[j].set(millis, resetFields);\n+                    }\n+                    hasFixedField = true;\n+                    break;\n+                } catch (IllegalFieldValueException ex2) {\n+                    // cannot fix year, continue to next field\n+                }\n+            }\n+        }\n+        if(hasFixedField) {\n+            break;\n+        }\n+    }\n+    if (!hasFixedField) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: method set in class SavedField cannot be applied to given types;",
    "test_result": "ERROR"
}