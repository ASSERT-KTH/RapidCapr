{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n\n    // Proper var declaration with an alias name.\n    boolean properVar = n != null \n                        && n.hasChildren()\n                        && n.getFirstChild().isQualifiedName()\n                        && n.getParent().isVar()\n                        && n.getParent().getFirstChild().equals(n);\n\n    if (!properVar) {\n      continue;\n    }\n\n    Node rValue = n.getFirstChild().getNext();\n    boolean isAlias = rValue != null\n                      && rValue.isQualifiedName()\n                      && !rValue.equals(n.getFirstChild());\n\n    String name = n.getFirstChild().getQualifiedName();\n\n    if (isAlias) {\n      String qualifiedName = rValue.getQualifiedName();\n      Var aliasVar = scope.getVar(name);\n\n      aliases.put(name, aliasVar);\n      transformation.addAlias(name, qualifiedName);\n\n    } else if (scope.getVar(name) != null \n               && scope.getVar(name).getInitialValue() != null \n               && scope.getVar(name).getInitialValue().isQualifiedName()) {\n      // Invalid Alias Assignment\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..20475d80 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,44 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n-      }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+\n+    // Proper var declaration with an alias name.\n+    boolean properVar = n != null \n+                        && n.hasChildren()\n+                        && n.getFirstChild().isQualifiedName()\n+                        && n.getParent().isVar()\n+                        && n.getParent().getFirstChild().equals(n);\n+\n+    if (!properVar) {\n+      continue;\n+    }\n+\n+    Node rValue = n.getFirstChild().getNext();\n+    boolean isAlias = rValue != null\n+                      && rValue.isQualifiedName()\n+                      && !rValue.equals(n.getFirstChild());\n+\n+    String name = n.getFirstChild().getQualifiedName();\n+\n+    if (isAlias) {\n+      String qualifiedName = rValue.getQualifiedName();\n+      Var aliasVar = scope.getVar(name);\n+\n+      aliases.put(name, aliasVar);\n+      transformation.addAlias(name, qualifiedName);\n+\n+    } else if (scope.getVar(name) != null \n+               && scope.getVar(name).getInitialValue() != null \n+               && scope.getVar(name).getInitialValue().isQualifiedName()) {\n+      // Invalid Alias Assignment\n+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}