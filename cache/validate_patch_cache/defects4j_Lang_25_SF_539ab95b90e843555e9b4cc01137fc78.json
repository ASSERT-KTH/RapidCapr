{
    "patch": "public static String unescape(String s) {\n    int len = s.length();\n    StringBuilder sb = new StringBuilder(len);\n\n    for (int i = 0; i < len;) {\n        char c = s.charAt(i++);\n        if (c == '\\\\') {\n            char nextChar = (i < len) ? s.charAt(i++) : 0;\n            if (nextChar == 'u') {\n                // Unicode escape\n                int code = 0;\n                for (int j = 0; j < 4; j++) {\n                    if (i < len) {\n                        int digit = Character.digit(s.charAt(i++), 16);\n                        if (digit >= 0) {\n                            code = (code << 4) + digit;\n                        } else {\n                            throw new RuntimeException(\"Invalid Unicode escape: \" + s.substring(i - 2, i + 2));\n                        }\n                    } else {\n                        throw new RuntimeException(\"Invalid Unicode escape: \" + s.substring(i - 2));\n                    }\n                }\n                sb.append((char) code);\n            } else {\n                if (nextChar == 't') {\n                    nextChar = '\\t';\n                } else if (nextChar == 'r') {\n                    nextChar = '\\r';\n                } else if (nextChar == 'n') {\n                    nextChar = '\\n';\n                } else if (nextChar == 'f') {\n                    nextChar = '\\f';\n                }\n                sb.append(nextChar);\n            }\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..8a3f15fe 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,48 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String s) {\n+    int len = s.length();\n+    StringBuilder sb = new StringBuilder(len);\n+\n+    for (int i = 0; i < len;) {\n+        char c = s.charAt(i++);\n+        if (c == '\\\\') {\n+            char nextChar = (i < len) ? s.charAt(i++) : 0;\n+            if (nextChar == 'u') {\n+                // Unicode escape\n+                int code = 0;\n+                for (int j = 0; j < 4; j++) {\n+                    if (i < len) {\n+                        int digit = Character.digit(s.charAt(i++), 16);\n+                        if (digit >= 0) {\n+                            code = (code << 4) + digit;\n+                        } else {\n+                            throw new RuntimeException(\"Invalid Unicode escape: \" + s.substring(i - 2, i + 2));\n+                        }\n+                    } else {\n+                        throw new RuntimeException(\"Invalid Unicode escape: \" + s.substring(i - 2));\n+                    }\n+                }\n+                sb.append((char) code);\n+            } else {\n+                if (nextChar == 't') {\n+                    nextChar = '\\t';\n+                } else if (nextChar == 'r') {\n+                    nextChar = '\\r';\n+                } else if (nextChar == 'n') {\n+                    nextChar = '\\n';\n+                } else if (nextChar == 'f') {\n+                    nextChar = '\\f';\n+                }\n+                sb.append(nextChar);\n+            }\n+        } else {\n+            sb.append(c);\n+        }\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}