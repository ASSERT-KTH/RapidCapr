{
    "patch": "        } else if (offsetLocal >= 0) {\n            // if the offsets differ, we must be near a DST boundary\n            if (offsetLocal != offsetAdjusted) {\n                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    if (offsetLocal > 0) {\n                        return offsetLocal;\n                    } else {\n                        long prev = previousTransition(instantAdjusted);\n                        if (prev < instantAdjusted) {\n                            int offsetPrev = getOffset(prev);\n                            int diff = offsetPrev - offsetLocal;\n                            if (instantAdjusted - prev <= diff) {\n                                return offsetPrev;\n                            }\n                        }\n                    }\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..8ab66c1c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,29 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else if (offsetLocal >= 0) {\n+            // if the offsets differ, we must be near a DST boundary\n+            if (offsetLocal != offsetAdjusted) {\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    if (offsetLocal > 0) {\n+                        return offsetLocal;\n+                    } else {\n+                        long prev = previousTransition(instantAdjusted);\n+                        if (prev < instantAdjusted) {\n+                            int offsetPrev = getOffset(prev);\n+                            int diff = offsetPrev - offsetLocal;\n+                            if (instantAdjusted - prev <= diff) {\n+                                return offsetPrev;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}