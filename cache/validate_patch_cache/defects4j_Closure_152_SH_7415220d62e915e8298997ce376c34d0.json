{
    "patch": "    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis instanceof ObjectType\n          || (resolvedTypeOfThis != null && resolvedTypeOfThis.isNamedType()\n              && ((NamedType) resolvedTypeOfThis).getReferencedType() instanceof ObjectType)) {\n      typeOfThis = (ObjectType) (resolvedTypeOfThis instanceof ObjectType\n          ? resolvedTypeOfThis : ((NamedType) resolvedTypeOfThis).getReferencedType());\n    } else {\n    ",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..5bc11f83 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,14 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n+    if (resolvedTypeOfThis instanceof ObjectType\n+          || (resolvedTypeOfThis != null && resolvedTypeOfThis.isNamedType()\n+              && ((NamedType) resolvedTypeOfThis).getReferencedType() instanceof ObjectType)) {\n+      typeOfThis = (ObjectType) (resolvedTypeOfThis instanceof ObjectType\n+          ? resolvedTypeOfThis : ((NamedType) resolvedTypeOfThis).getReferencedType());\n+    } else {\n+    \n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}