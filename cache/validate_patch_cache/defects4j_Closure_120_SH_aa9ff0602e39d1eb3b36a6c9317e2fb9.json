{
    "patch": "        } else if (block.isLoop) {\n          return false;\n        }\n        if (block == ref.getBasicBlock()) {\n          int assignCount = 0;\n          List<Node> nodes = block.getNodes();\n          for (int i = 0; i < nodes.size(); i++) {\n            Node node = nodes.get(i);\n            assignCount += node.match(Preconditions.checkNotNull(getNodeMatch())).size();\n          }\n          if (assignCount > 1) {\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..6d30cca3 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,21 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+        if (block == ref.getBasicBlock()) {\n+          int assignCount = 0;\n+          List<Node> nodes = block.getNodes();\n+          for (int i = 0; i < nodes.size(); i++) {\n+            Node node = nodes.get(i);\n+            assignCount += node.match(Preconditions.checkNotNull(getNodeMatch())).size();\n+          }\n+          if (assignCount > 1) {\n+            return false;\n+          }\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}