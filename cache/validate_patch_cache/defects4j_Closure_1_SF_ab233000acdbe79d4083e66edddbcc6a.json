{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    boolean modifyCallers = modifyCallSites\n            && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node arg = argList.getFirstChild();\n\n        // Keep track of the index of the current argument for comparison with function length.\n        int index = 0;\n        while (arg != null) {\n            Node nextArg = arg.getNext();\n            Var var = fnScope.getVar(arg.getString());\n\n            // If the argument is not used in the function body and is not used in calls to the function,\n            // remove it from the function argument list.\n            if (!referenced.contains(var) && !callSiteOptimizer.isParameterUsedInCall(fnScope, index)) {\n                argList.removeChild(arg);\n                functionLength--;\n                compiler.reportCodeChange();\n            } else {\n                // Stop removing arguments once an argument is encountered that is used in the function body\n                // or is used in calls to the function.\n                break;\n            }\n\n            // Move to the next argument and update the current index.\n            arg = nextArg;\n            index++;\n        }\n\n        // Update the function length to match the new argument list length.\n        functionLength += argList.getChildCount();\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..88cbd9e6 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,53 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     Node function = fnScope.getRootNode();\n-\n     Preconditions.checkState(function.isFunction());\n+\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n+        // The parameters object literal setters can not be removed.\n+        return;\n     }\n \n     Node argList = getFunctionArgList(function);\n+\n     boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n+            && callSiteOptimizer.canModifyCallers(function);\n+\n     if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+        // Strip unreferenced args off the end of the function declaration.\n+        Node arg = argList.getFirstChild();\n+\n+        // Keep track of the index of the current argument for comparison with function length.\n+        int index = 0;\n+        while (arg != null) {\n+            Node nextArg = arg.getNext();\n+            Var var = fnScope.getVar(arg.getString());\n+\n+            // If the argument is not used in the function body and is not used in calls to the function,\n+            // remove it from the function argument list.\n+            if (!referenced.contains(var) && !callSiteOptimizer.isParameterUsedInCall(fnScope, index)) {\n+                argList.removeChild(arg);\n+                functionLength--;\n+                compiler.reportCodeChange();\n+            } else {\n+                // Stop removing arguments once an argument is encountered that is used in the function body\n+                // or is used in calls to the function.\n+                break;\n+            }\n+\n+            // Move to the next argument and update the current index.\n+            arg = nextArg;\n+            index++;\n         }\n-      }\n+\n+        // Update the function length to match the new argument list length.\n+        functionLength += argList.getChildCount();\n     } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+        callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}