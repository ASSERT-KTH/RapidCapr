{
    "patch": "      if (functionJSDocInfo != null && functionJSDocInfo.getParameterCount() > 0) {\n        Node parent = n.getParent();\n        boolean isGetPropOrElem =\n            parent.isGetProp() || parent.isGetElem() || NodeUtil.isObjectLitKey(parent);\n        Node grandParent = parent.getParent();\n        boolean isCallOrNew =\n            grandParent.isCall() || grandParent.isNew() || grandParent.isTaggedTemplateLit();\n        if (functionJSDocInfo.getThisType() != null && !isGetPropOrElem && !isCallOrNew) {\n          report(t, n, CALLBACK_WITHOUT_THIS, childType.toString());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..9e9dd6c3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionJSDocInfo != null && functionJSDocInfo.getParameterCount() > 0) {\n+        Node parent = n.getParent();\n+        boolean isGetPropOrElem =\n+            parent.isGetProp() || parent.isGetElem() || NodeUtil.isObjectLitKey(parent);\n+        Node grandParent = parent.getParent();\n+        boolean isCallOrNew =\n+            grandParent.isCall() || grandParent.isNew() || grandParent.isTaggedTemplateLit();\n+        if (functionJSDocInfo.getThisType() != null && !isGetPropOrElem && !isCallOrNew) {\n+          report(t, n, CALLBACK_WITHOUT_THIS, childType.toString());\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}