{
    "patch": "  private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    for (Var v : scope.getVarIterable()) {\n      Node n = v.getNode();\n      int type = n.getType();\n      Node parent = n.getParent();\n      if (parent.isCatch() || n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n          String name = n.getString();\n          Var aliasVar = scope.getVar(name);\n          if (aliasVar != null) {\n            aliases.put(name, aliasVar);\n\n            String qualifiedName =\n                aliasVar.getInitialValue().getQualifiedName();\n            transformation.addAlias(name, qualifiedName);\n          }\n      } else if (type == Token.FUNCTION) {\n          // Do nothing, bleeding functions already get a BAD_PARAMETERS error.\n      } else if (!parent.isFunction()) {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..c471c0cf 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,26 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+  private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    for (Var v : scope.getVarIterable()) {\n+      Node n = v.getNode();\n+      int type = n.getType();\n+      Node parent = n.getParent();\n+      if (parent.isCatch() || n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n           String name = n.getString();\n           Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n-      }\n-    }\n+          if (aliasVar != null) {\n+            aliases.put(name, aliasVar);\n+\n+            String qualifiedName =\n+                aliasVar.getInitialValue().getQualifiedName();\n+            transformation.addAlias(name, qualifiedName);\n+          }\n+      } else if (type == Token.FUNCTION) {\n+          // Do nothing, bleeding functions already get a BAD_PARAMETERS error.\n+      } else if (!parent.isFunction()) {\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}