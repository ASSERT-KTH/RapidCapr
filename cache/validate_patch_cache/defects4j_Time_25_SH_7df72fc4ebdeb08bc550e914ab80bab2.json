{
    "patch": "            // check if we are near a DST boundary\n            // if yes, return the correct offset\n            long prevTransition = previousTransition(instantAdjusted);\n            long nextTransition = nextTransition(instantAdjusted);\n            if (prevTransition == nextTransition) {\n                return offsetLocal;\n            }\n\n            // determine if we should use local or adjusted time for comparison\n            long transitionInstantLocal;\n            if (offsetLocal < 0) {\n                // if the local offset is negative, use the time after the local adjustment\n                transitionInstantLocal = instantAdjusted + offsetLocal; \n            } else {\n                // otherwise use the unadjusted time\n                transitionInstantLocal = instantAdjusted; \n            }\n\n            // calculate offsets before and after the transition\n            int offsetBeforeTransition = getOffset(prevTransition);\n            int offsetAfterTransition = getOffset(nextTransition);\n\n            // calculate difference between adjusted and local times before the transition\n            long diffBeforeTransition = nextTransition(prevTransition) - prevTransition;\n\n            // check if the transition corresponds to a gap\n            boolean gap = offsetAfterTransition > offsetBeforeTransition;\n\n            // determine the appropriate offset\n            if (gap) {\n                if (transitionInstantLocal < prevTransition + diffBeforeTransition) {\n                    return offsetBeforeTransition;\n                } else {\n                    return offsetAfterTransition;\n                }\n            } else { // overlap\n                if (transitionInstantLocal < prevTransition + diffBeforeTransition) {\n                    return offsetAfterTransition;\n                } else {\n                    return offsetBeforeTransition;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..07e252a4 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,48 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // check if we are near a DST boundary\n+            // if yes, return the correct offset\n+            long prevTransition = previousTransition(instantAdjusted);\n+            long nextTransition = nextTransition(instantAdjusted);\n+            if (prevTransition == nextTransition) {\n+                return offsetLocal;\n+            }\n+\n+            // determine if we should use local or adjusted time for comparison\n+            long transitionInstantLocal;\n+            if (offsetLocal < 0) {\n+                // if the local offset is negative, use the time after the local adjustment\n+                transitionInstantLocal = instantAdjusted + offsetLocal; \n+            } else {\n+                // otherwise use the unadjusted time\n+                transitionInstantLocal = instantAdjusted; \n+            }\n+\n+            // calculate offsets before and after the transition\n+            int offsetBeforeTransition = getOffset(prevTransition);\n+            int offsetAfterTransition = getOffset(nextTransition);\n+\n+            // calculate difference between adjusted and local times before the transition\n+            long diffBeforeTransition = nextTransition(prevTransition) - prevTransition;\n+\n+            // check if the transition corresponds to a gap\n+            boolean gap = offsetAfterTransition > offsetBeforeTransition;\n+\n+            // determine the appropriate offset\n+            if (gap) {\n+                if (transitionInstantLocal < prevTransition + diffBeforeTransition) {\n+                    return offsetBeforeTransition;\n+                } else {\n+                    return offsetAfterTransition;\n+                }\n+            } else { // overlap\n+                if (transitionInstantLocal < prevTransition + diffBeforeTransition) {\n+                    return offsetAfterTransition;\n+                } else {\n+                    return offsetBeforeTransition;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}