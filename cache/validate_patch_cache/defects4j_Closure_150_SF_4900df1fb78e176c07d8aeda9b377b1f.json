{
    "patch": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n == t.getScopeRoot()) {\n            this.currentScope = scopes.peek();\n        }\n\n        if (n.isFunction()) {\n            if (NodeUtil.isFunctionExpression(n)) {\n                defineDeclaredFunction(n, parent);\n            }\n            scopes.push(new Scope(n, this.currentScope));\n            attachLiteralTypes(n);\n        } else if (n.isBlock() && parent.isFunction()) {\n            scopes.pop();\n            this.currentScope = scopes.peek();\n        } else if (n.isCatch()) {\n            defineCatch(n, parent);\n            scopes.push(new Scope(n, this.currentScope));\n        } else if (n.isVar()) {\n            defineVar(n, parent);\n        } else if (n.isParamList() && (parent.isFunction() || parent.isArrowFunction())) {\n            handleFunctionInputs(parent);\n        } else {\n            attachLiteralTypes(n);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..9352eef6 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,31 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n == t.getScopeRoot()) {\n+            this.currentScope = scopes.peek();\n+        }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n-    }\n+        if (n.isFunction()) {\n+            if (NodeUtil.isFunctionExpression(n)) {\n+                defineDeclaredFunction(n, parent);\n+            }\n+            scopes.push(new Scope(n, this.currentScope));\n+            attachLiteralTypes(n);\n+        } else if (n.isBlock() && parent.isFunction()) {\n+            scopes.pop();\n+            this.currentScope = scopes.peek();\n+        } else if (n.isCatch()) {\n+            defineCatch(n, parent);\n+            scopes.push(new Scope(n, this.currentScope));\n+        } else if (n.isVar()) {\n+            defineVar(n, parent);\n+        } else if (n.isParamList() && (parent.isFunction() || parent.isArrowFunction())) {\n+            handleFunctionInputs(parent);\n+        } else {\n+            attachLiteralTypes(n);\n+        }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}