{
    "patch": "public Iterable<Integer> values(ReturnValues values) {\n    List<Integer> result = new ArrayList<>();\n    Object obj = values.returnValueFor(Iterable.class);\n    if(obj != null) {\n        for(Object o : (Iterable)obj) {\n            if(o instanceof Integer) {\n                result.add((Integer)o);\n            }\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..ef0e0649c 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,18 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public Iterable<Integer> values(ReturnValues values) {\n+    List<Integer> result = new ArrayList<>();\n+    Object obj = values.returnValueFor(Iterable.class);\n+    if(obj != null) {\n+        for(Object o : (Iterable)obj) {\n+            if(o instanceof Integer) {\n+                result.add((Integer)o);\n+            }\n+        }\n+    }\n+    return result;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}