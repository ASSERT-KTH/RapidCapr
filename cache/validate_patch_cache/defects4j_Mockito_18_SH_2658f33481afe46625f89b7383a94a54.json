{
    "patch": "public MethodInvocationRepair(RepairContext repairContext) {\n    super(repairContext);\n}\n\n@Override\npublic void repair() {\n    MethodInvocationExprAST rootNode = (MethodInvocationExprAST) repairContext.getNode();\n    String returnType = rootNode.getReturnType();\n    RepairResult values = evaluateArguments();\n\n    if (returnType == null || returnType.equals(Void.TYPE.getName())) {\n         return;  // return statement added\n    }\n\n    if (values.get(0).hasException()) {\n        return;\n    }\n\n    for (Constructor<?> constructor : getConstructors(returnType)) {\n        try {\n            Object obj = constructor.newInstance(values.getArguments().toArray());\n            values.setReturnValue(obj);\n            return;\n        } catch (Exception ex) {\n            //ignore and try next constructor\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}