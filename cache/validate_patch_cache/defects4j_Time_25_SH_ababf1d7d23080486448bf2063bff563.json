{
    "patch": "                // adjust instantLocal using the adjusted offset\n                final long instantLocalAdjusted = instantLocal - offsetAdjusted;\n                // recalculate the offset using the adjusted instant\n                int offsetCorrected = getOffset(instantLocalAdjusted);\n                // if the offsets still differ, we must be near a DST boundary\n                if (offsetAdjusted != offsetCorrected) {\n                    // we need to ensure that time is always after the DST gap\n                    // this happens naturally for positive offsets, but not for negative\n                    if ((offsetAdjusted - offsetCorrected) < 0) {\n                        // calculate the next transition after instantLocalAdjusted\n                        long nextLocal = nextTransition(instantLocalAdjusted);\n                        // calculate the next transition after instantLocal\n                        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                        if (nextLocal == nextAdjusted) {\n                            // offsetAdjusted is actually correct\n                            return offsetAdjusted;\n                        }\n                    }\n                    // if the previous check failed, offsetLocal is the correct offset\n                    return offsetLocal;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e1ba954c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // adjust instantLocal using the adjusted offset\n+                final long instantLocalAdjusted = instantLocal - offsetAdjusted;\n+                // recalculate the offset using the adjusted instant\n+                int offsetCorrected = getOffset(instantLocalAdjusted);\n+                // if the offsets still differ, we must be near a DST boundary\n+                if (offsetAdjusted != offsetCorrected) {\n+                    // we need to ensure that time is always after the DST gap\n+                    // this happens naturally for positive offsets, but not for negative\n+                    if ((offsetAdjusted - offsetCorrected) < 0) {\n+                        // calculate the next transition after instantLocalAdjusted\n+                        long nextLocal = nextTransition(instantLocalAdjusted);\n+                        // calculate the next transition after instantLocal\n+                        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                        if (nextLocal == nextAdjusted) {\n+                            // offsetAdjusted is actually correct\n+                            return offsetAdjusted;\n+                        }\n+                    }\n+                    // if the previous check failed, offsetLocal is the correct offset\n+                    return offsetLocal;\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}