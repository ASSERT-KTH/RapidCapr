{
    "patch": "try {\n    int numParsedFields = 0;\n    for (int i = 0; i < count; i++) {\n        try {\n            millis = savedFields[i].set(millis, resetFields);\n            numParsedFields++;\n        } catch (IllegalFieldValueException e) {\n            // if first field is a month or day, then assume default year and try again\n            DateTimeField firstField = savedFields[i].getField();\n            if (numParsedFields == 0 && (firstField.getDurationField().equals(DurationFieldType.months().getField(iChrono))\n                    || firstField.getDurationField().equals(DurationFieldType.days().getField(iChrono)))) {\n\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n    }\n    if (resetFields && numParsedFields < count) {\n        for (int j = 0; j < savedFields.length; j++) {\n            savedFields[j].getField().getDurationField().getField(getChronology()).getFieldValue(millis);\n            millis = savedFields[j].set(millis, true);\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..4e12dc6d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,39 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    int numParsedFields = 0;\n+    for (int i = 0; i < count; i++) {\n+        try {\n+            millis = savedFields[i].set(millis, resetFields);\n+            numParsedFields++;\n+        } catch (IllegalFieldValueException e) {\n+            // if first field is a month or day, then assume default year and try again\n+            DateTimeField firstField = savedFields[i].getField();\n+            if (numParsedFields == 0 && (firstField.getDurationField().equals(DurationFieldType.months().getField(iChrono))\n+                    || firstField.getDurationField().equals(DurationFieldType.days().getField(iChrono)))) {\n+\n+                saveField(DateTimeFieldType.year(), iDefaultYear);\n+                return computeMillis(resetFields, text);\n+            }\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n+    }\n+    if (resetFields && numParsedFields < count) {\n+        for (int j = 0; j < savedFields.length; j++) {\n+            savedFields[j].getField().getDurationField().getField(getChronology()).getFieldValue(millis);\n+            millis = savedFields[j].set(millis, true);\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}