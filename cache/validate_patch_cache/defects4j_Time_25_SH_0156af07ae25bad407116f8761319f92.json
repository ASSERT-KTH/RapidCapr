{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n\n                // We need to ensure that time is always after the DST gap. If the given local\n                // time is in the overlap/gap period then the offsetAdjusted would be incorrect.\n                // Clamping the local instant to the transition time will give us the correct offset.\n                long clamped = nextLocal - offsetLocal;\n                int nextAdjustment = getOffset(clamped);\n\n                if (nextAdjustment == offsetAdjusted) {\n                    return offsetAdjusted;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0702ee28 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+\n+                // We need to ensure that time is always after the DST gap. If the given local\n+                // time is in the overlap/gap period then the offsetAdjusted would be incorrect.\n+                // Clamping the local instant to the transition time will give us the correct offset.\n+                long clamped = nextLocal - offsetLocal;\n+                int nextAdjustment = getOffset(clamped);\n+\n+                if (nextAdjustment == offsetAdjusted) {\n+                    return offsetAdjusted;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}