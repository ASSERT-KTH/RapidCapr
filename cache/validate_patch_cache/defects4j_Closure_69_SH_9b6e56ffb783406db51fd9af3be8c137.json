{
    "patch": "      if (functionType.getParameterType(0) instanceof ObjectType &&\n          !NodeUtil.isGet(functionType.getParameterNode(0))) {\n        report(t, n, INVALID_THIS_TYPE, functionType.getParameterType(0).toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..4991f6d2 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,9 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getParameterType(0) instanceof ObjectType &&\n+          !NodeUtil.isGet(functionType.getParameterNode(0))) {\n+        report(t, n, INVALID_THIS_TYPE, functionType.getParameterType(0).toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}