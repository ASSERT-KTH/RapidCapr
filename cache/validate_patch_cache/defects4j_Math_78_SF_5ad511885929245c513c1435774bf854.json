{
    "patch": "public boolean evaluateStep(final StepInterpolator interpolator) throws DerivativeException, EventException, ConvergenceException {\n    try {\n        boolean signChanges = false;\n\n        // Initialize time interval and number of sub-intervals\n        final double t1 = interpolator.getCurrentTime();\n        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h = (t1 - t0) / n;\n\n        // Initialize time and function values at start of interval\n        double ta = t0;\n        double ga = g0;\n\n        // Start loop over sub-intervals\n        for (int i = 0; i < n; ++i) {\n            // Evaluate function value at end of sub-interval\n            final double tb = t0 + (i + 1) * h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // If signs are different, update flag and check for bracketing\n            if (g0Positive ^ (gb >= 0)) {\n                signChanges = true;\n                // Check for bracketing\n                if ((i > 0) && (Math.abs(ga) < Math.abs(gb))) {\n                    // Decreasing function\n                    final double root = solve(interpolator, ta, tb);\n                    return handleEvent(root);\n                } else if ((i < n - 1) && (Math.abs(ga) > Math.abs(gb))) {\n                    // Increasing function\n                    final double root = solve(interpolator, ta, tb);\n                    return handleEvent(root);\n                } else {\n                    // No sign change or bracketing yet, update time and function value\n                    ta = tb;\n                    ga = gb;\n                }\n            } else {\n                // No sign change yet, update time and function value\n                ta = tb;\n                ga = gb;\n            }\n        }\n\n        // No event detected in this step\n        if (signChanges) {\n            // Event occurred less than maxCheckInterval ago but G function did not change sign\n            pendingEvent = true;\n            pendingEventTime = Double.NaN;\n            return true;\n        } else {\n            // No event occurred in this step\n            pendingEvent = false;\n            pendingEventTime = Double.NaN;\n            return false;\n        }\n    } catch (FunctionEvaluationException e) {\n        throw new EventException(e);\n    }\n}\n\nprivate double solve(final StepInterpolator interpolator, final double tA, final double tB) throws FunctionEvaluationException {\n    final UnivariateRealFunction f = new UnivariateRealFunction() {\n        public double value(final double t) throws FunctionEvaluationException {\n            try {\n                interpolator.setInterpolatedTime(t);\n                return handler.g(t, interpolator.getInterpolatedState());\n            } catch (DerivativeException e) {\n                throw new FunctionEvaluationException(e, t);\n            } catch (EventException e) {\n                throw new FunctionEvaluationException(e, t);\n            }\n        }\n    };\n    final BrentSolver solver = new BrentSolver();\n    solver.setAbsoluteAccuracy(convergence);\n    solver.setMaximalIterationCount(maxIterationCount);\n    return solver.solve(f, tA, tB);\n}\n\nprivate boolean handleEvent(final double root) {\n    if ((pendingEvent && (Math.abs(root - pendingEventTime) <= convergence))\n            || (Math.abs(root - previousEventTime) <= convergence)) {\n        // Event already found in previous step or during this step\n        return false;\n    } else if (Double.isNaN(previousEventTime) || (Math.abs(root - previousEventTime) > convergence)) {\n        // New event found, save time and flag it\n        pendingEventTime = root;\n        pendingEvent = true;\n        return true;\n    } else {\n        // Event already found in previous step\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..d41a5b273 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,103 +164,101 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n-        throws DerivativeException, EventException, ConvergenceException {\n-\n-        try {\n-\n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n-\n-            double ta = t0;\n-            double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n-\n-                // evaluate handler value at the end of the substep\n-                tb += h;\n-                interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n-\n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n-                    // there is a sign change: an event is expected during this step\n-\n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n-                    // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n-\n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n-                        public double value(final double t) throws FunctionEvaluationException {\n-                            try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n-                            } catch (DerivativeException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            } catch (EventException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            }\n-                        }\n-                    };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n-                        }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n-                        pendingEvent = true;\n-                        return true;\n-                    }\n-\n+public boolean evaluateStep(final StepInterpolator interpolator) throws DerivativeException, EventException, ConvergenceException {\n+    try {\n+        boolean signChanges = false;\n+\n+        // Initialize time interval and number of sub-intervals\n+        final double t1 = interpolator.getCurrentTime();\n+        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n+        final double h = (t1 - t0) / n;\n+\n+        // Initialize time and function values at start of interval\n+        double ta = t0;\n+        double ga = g0;\n+\n+        // Start loop over sub-intervals\n+        for (int i = 0; i < n; ++i) {\n+            // Evaluate function value at end of sub-interval\n+            final double tb = t0 + (i + 1) * h;\n+            interpolator.setInterpolatedTime(tb);\n+            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n+\n+            // If signs are different, update flag and check for bracketing\n+            if (g0Positive ^ (gb >= 0)) {\n+                signChanges = true;\n+                // Check for bracketing\n+                if ((i > 0) && (Math.abs(ga) < Math.abs(gb))) {\n+                    // Decreasing function\n+                    final double root = solve(interpolator, ta, tb);\n+                    return handleEvent(root);\n+                } else if ((i < n - 1) && (Math.abs(ga) > Math.abs(gb))) {\n+                    // Increasing function\n+                    final double root = solve(interpolator, ta, tb);\n+                    return handleEvent(root);\n                 } else {\n-                    // no sign change: there is no event for now\n+                    // No sign change or bracketing yet, update time and function value\n                     ta = tb;\n                     ga = gb;\n                 }\n-\n+            } else {\n+                // No sign change yet, update time and function value\n+                ta = tb;\n+                ga = gb;\n             }\n+        }\n \n-            // no event during the whole step\n-            pendingEvent     = false;\n+        // No event detected in this step\n+        if (signChanges) {\n+            // Event occurred less than maxCheckInterval ago but G function did not change sign\n+            pendingEvent = true;\n+            pendingEventTime = Double.NaN;\n+            return true;\n+        } else {\n+            // No event occurred in this step\n+            pendingEvent = false;\n             pendingEventTime = Double.NaN;\n             return false;\n+        }\n+    } catch (FunctionEvaluationException e) {\n+        throw new EventException(e);\n+    }\n+}\n \n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n+private double solve(final StepInterpolator interpolator, final double tA, final double tB) throws FunctionEvaluationException {\n+    final UnivariateRealFunction f = new UnivariateRealFunction() {\n+        public double value(final double t) throws FunctionEvaluationException {\n+            try {\n+                interpolator.setInterpolatedTime(t);\n+                return handler.g(t, interpolator.getInterpolatedState());\n+            } catch (DerivativeException e) {\n+                throw new FunctionEvaluationException(e, t);\n+            } catch (EventException e) {\n+                throw new FunctionEvaluationException(e, t);\n             }\n-            throw new EventException(e);\n         }\n+    };\n+    final BrentSolver solver = new BrentSolver();\n+    solver.setAbsoluteAccuracy(convergence);\n+    solver.setMaximalIterationCount(maxIterationCount);\n+    return solver.solve(f, tA, tB);\n+}\n \n+private boolean handleEvent(final double root) {\n+    if ((pendingEvent && (Math.abs(root - pendingEventTime) <= convergence))\n+            || (Math.abs(root - previousEventTime) <= convergence)) {\n+        // Event already found in previous step or during this step\n+        return false;\n+    } else if (Double.isNaN(previousEventTime) || (Math.abs(root - previousEventTime) > convergence)) {\n+        // New event found, save time and flag it\n+        pendingEventTime = root;\n+        pendingEvent = true;\n+        return true;\n+    } else {\n+        // Event already found in previous step\n+        return false;\n     }\n+}\n \n     /** Get the occurrence time of the event triggered in the current\n      * step.",
    "result_reason": "error: unreported exception MaxIterationsExceededException; must be caught or declared to be thrown",
    "test_result": "ERROR"
}