{
    "patch": "    if (hasFiniteBounds) {\n        for (int i = 0; i < lB.length; i++) {\n            if (lB[i] == Double.NEGATIVE_INFINITY && uB[i] == Double.POSITIVE_INFINITY) {\n                throw new NumberIsTooLargeException(lB[i], uB[i], false);\n            }\n            if (lB[i] >= uB[i]) {\n                throw new NumberIsTooLargeException(lB[i], uB[i], true);\n            }\n        }\n        boundaries = new double[2][];\n        boundaries[0] = lB.clone();\n        boundaries[1] = uB.clone();\n\n        if (!isOverflowSafe()) {\n            for (int i = 0; i < init.length; i++) {\n                if (lB[i] == Double.NEGATIVE_INFINITY) {\n                    if (init[i] < 0) {\n                        throw new MathIllegalStateException(LocalizedFormats.OVERFLOW);\n                    }\n                } else if (uB[i] == Double.POSITIVE_INFINITY) {\n                    if (init[i] > 0) {\n                        throw new MathIllegalStateException(LocalizedFormats.OVERFLOW);\n                    }\n                } else {\n                    final double[] arr = {lB[i], uB[i]};\n                    if (!new ArrayRealVector(arr).isInRange(init[i])) {\n                        throw new MathIllegalStateException(LocalizedFormats.OUT_OF_BOUNDS);\n                    }\n                }\n            }\n        }\n    } else {\n        boundaries = null;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..134565c0e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,40 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+    if (hasFiniteBounds) {\n+        for (int i = 0; i < lB.length; i++) {\n+            if (lB[i] == Double.NEGATIVE_INFINITY && uB[i] == Double.POSITIVE_INFINITY) {\n+                throw new NumberIsTooLargeException(lB[i], uB[i], false);\n+            }\n+            if (lB[i] >= uB[i]) {\n+                throw new NumberIsTooLargeException(lB[i], uB[i], true);\n+            }\n+        }\n+        boundaries = new double[2][];\n+        boundaries[0] = lB.clone();\n+        boundaries[1] = uB.clone();\n+\n+        if (!isOverflowSafe()) {\n+            for (int i = 0; i < init.length; i++) {\n+                if (lB[i] == Double.NEGATIVE_INFINITY) {\n+                    if (init[i] < 0) {\n+                        throw new MathIllegalStateException(LocalizedFormats.OVERFLOW);\n+                    }\n+                } else if (uB[i] == Double.POSITIVE_INFINITY) {\n+                    if (init[i] > 0) {\n+                        throw new MathIllegalStateException(LocalizedFormats.OVERFLOW);\n+                    }\n+                } else {\n+                    final double[] arr = {lB[i], uB[i]};\n+                    if (!new ArrayRealVector(arr).isInRange(init[i])) {\n+                        throw new MathIllegalStateException(LocalizedFormats.OUT_OF_BOUNDS);\n+                    }\n+                }\n+            }\n+        }\n+    } else {\n+        boundaries = null;\n+    }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}