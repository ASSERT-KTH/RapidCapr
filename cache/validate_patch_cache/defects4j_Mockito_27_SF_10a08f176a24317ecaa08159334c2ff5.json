{
    "patch": "import net.bytebuddy.ByteBuddy;\nimport net.bytebuddy.implementation.MethodDelegation;\nimport net.bytebuddy.matcher.ElementMatchers;\nimport org.mockito.internal.creation.bytebuddy.MockAccess;\nimport org.mockito.internal.creation.bytebuddy.MockMethodInterceptor;\nimport org.mockito.internal.util.MockUtil;\nimport org.mockito.invocation.Invocation;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.listeners.InvocationListener;\nimport org.mockito.listeners.MethodInvocationReport;\nimport org.mockito.mock.MockCreationSettings;\n\nimport java.util.List;\n\npublic class MyClass {\n    public <T> void resetMock(T mock) {\n        MockUtil mockUtil = new MockUtil();\n        MockCreationSettings<T> mockSettings = mockUtil.getMockSettings(mock);\n        if (MockAccess.class.isAssignableFrom(mock.getClass())) {\n            MockAccess mockAccess = (MockAccess) mock;\n            Object mockitoInterceptor = mockAccess.getMockitoInterceptor();\n            if (mockitoInterceptor instanceof MockMethodInterceptor) {\n                List<InvocationListener> listeners = ((MockMethodInterceptor<?>) mockitoInterceptor).getListeners();\n                listeners.stream()\n                        .filter(listener -> listener instanceof InvocationListener)\n                        .findFirst()\n                        .ifPresent(listener -> listeners.remove(listener));\n            }\n        } else {\n            MockCreationSettings<T> mockCreationSettings = mockUtil.getMockSettings(mock);\n            MockMethodInterceptor<T> mockitoInterceptor = new MockMethodInterceptor<>(mockCreationSettings);\n            mockitoInterceptor.addListener(new InvocationListener() {\n                @Override\n                public void reportInvocation(MethodInvocationReport methodInvocationReport) {\n                    // Do nothing here for now.\n                }\n\n                @Override\n                public void beforeInvocation(InvocationOnMock invocationOnMock) {\n                    // Do nothing here for now.\n                }\n\n                @Override\n                public void afterInvocation(InvocationOnMock invocationOnMock, Object o) {\n                    // Do nothing here for now.\n                }\n\n                @Override\n                public void afterInvocation(InvocationOnMock invocationOnMock, Throwable throwable) {\n                    // Do nothing here for now.\n                }\n            });\n\n            Class<? extends T> mockClass = mockCreationSettings.getTypeToMock();\n            T newMock = new ByteBuddy().subclass(mockClass)\n                    .method(ElementMatchers.isDeclaredBy(mockClass))\n                    .intercept(MethodDelegation.to(mockitoInterceptor))\n                    .make()\n                    .load(mockClass.getClassLoader())\n                    .getLoaded();\n\n            mockUtil.copyState(mock, newMock);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..92a0babc2 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,72 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import net.bytebuddy.ByteBuddy;\n+import net.bytebuddy.implementation.MethodDelegation;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.mockito.internal.creation.bytebuddy.MockAccess;\n+import org.mockito.internal.creation.bytebuddy.MockMethodInterceptor;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.listeners.InvocationListener;\n+import org.mockito.listeners.MethodInvocationReport;\n+import org.mockito.mock.MockCreationSettings;\n+\n+import java.util.List;\n+\n+public class MyClass {\n+    public <T> void resetMock(T mock) {\n+        MockUtil mockUtil = new MockUtil();\n+        MockCreationSettings<T> mockSettings = mockUtil.getMockSettings(mock);\n+        if (MockAccess.class.isAssignableFrom(mock.getClass())) {\n+            MockAccess mockAccess = (MockAccess) mock;\n+            Object mockitoInterceptor = mockAccess.getMockitoInterceptor();\n+            if (mockitoInterceptor instanceof MockMethodInterceptor) {\n+                List<InvocationListener> listeners = ((MockMethodInterceptor<?>) mockitoInterceptor).getListeners();\n+                listeners.stream()\n+                        .filter(listener -> listener instanceof InvocationListener)\n+                        .findFirst()\n+                        .ifPresent(listener -> listeners.remove(listener));\n+            }\n+        } else {\n+            MockCreationSettings<T> mockCreationSettings = mockUtil.getMockSettings(mock);\n+            MockMethodInterceptor<T> mockitoInterceptor = new MockMethodInterceptor<>(mockCreationSettings);\n+            mockitoInterceptor.addListener(new InvocationListener() {\n+                @Override\n+                public void reportInvocation(MethodInvocationReport methodInvocationReport) {\n+                    // Do nothing here for now.\n+                }\n+\n+                @Override\n+                public void beforeInvocation(InvocationOnMock invocationOnMock) {\n+                    // Do nothing here for now.\n+                }\n+\n+                @Override\n+                public void afterInvocation(InvocationOnMock invocationOnMock, Object o) {\n+                    // Do nothing here for now.\n+                }\n+\n+                @Override\n+                public void afterInvocation(InvocationOnMock invocationOnMock, Throwable throwable) {\n+                    // Do nothing here for now.\n+                }\n+            });\n+\n+            Class<? extends T> mockClass = mockCreationSettings.getTypeToMock();\n+            T newMock = new ByteBuddy().subclass(mockClass)\n+                    .method(ElementMatchers.isDeclaredBy(mockClass))\n+                    .intercept(MethodDelegation.to(mockitoInterceptor))\n+                    .make()\n+                    .load(mockClass.getClassLoader())\n+                    .getLoaded();\n+\n+            mockUtil.copyState(mock, newMock);\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}