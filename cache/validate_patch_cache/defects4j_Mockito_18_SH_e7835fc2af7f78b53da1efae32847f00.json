{
    "patch": "public ReturnValue execute(Context ctx) throws Exception {\n    if (ctx.isMethodCall()) {\n        // extract the argument passed\n        Object[] args = ctx.getMethodCallArguments();\n\n        // check if argument is an iterable\n        for (Object arg : args) {       \n            if (arg instanceof Iterable) {\n                Iterator iterator = ((Iterable) arg).iterator();\n                // iterate through and validate all items\n                while (iterator.hasNext()) {\n                    Object item = iterator.next();\n                    if (!isValid(item)) {\n                        return new ReturnValue(false, item);\n                    }\n                }\n                // if all items are valid, return true\n                return new ReturnValue(true, null);\n            }\n        }\n    }\n    // if no iterable argument is found, return null\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}