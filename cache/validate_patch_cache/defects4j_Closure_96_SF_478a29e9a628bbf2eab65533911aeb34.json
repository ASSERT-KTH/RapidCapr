{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  while (arguments.hasNext() && parameters.hasNext()) {\n    parameter = parameters.next();\n    argument = arguments.next();\n    ordinal++;\n\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (!arguments.hasNext() && !parameters.hasNext()) {\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  } else if (arguments.hasNext() && !parameters.hasNext()) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs - ordinal), String.valueOf(minArgs - ordinal),\n            maxArgs != Integer.MAX_VALUE ?\n            \" and no more than \" + (maxArgs - ordinal) + \" argument(s)\" : \"\");\n  } else if (!arguments.hasNext() && parameters.hasNext()) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(ordinal), String.valueOf(minArgs),\n            maxArgs != Integer.MAX_VALUE ?\n            \" and no more than \" + (maxArgs - ordinal) + \" argument(s)\" : \"\");\n  } else if (arguments.hasNext() && parameters.hasNext()) {\n    int remainingArgs = 0;\n    while (arguments.hasNext()) {\n      arguments.next();\n      remainingArgs++;\n    }\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs - remainingArgs), String.valueOf(minArgs - remainingArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + (maxArgs - remainingArgs) + \" argument(s)\" : \"\");\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..b3f00862 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,30 +1396,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+private void visitParameterList(NodeTraversal t, Node call,\n+    FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  Node parameter = null;\n+  Node argument = null;\n+  while (arguments.hasNext() && parameters.hasNext()) {\n+    parameter = parameters.next();\n+    argument = arguments.next();\n+    ordinal++;\n+\n+    validator.expectArgumentMatchesParameter(t, argument,\n+        getJSType(argument), getJSType(parameter), call, ordinal);\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  if (!arguments.hasNext() && !parameters.hasNext()) {\n     if (minArgs > numArgs || maxArgs < numArgs) {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n@@ -1427,7 +1425,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n               maxArgs != Integer.MAX_VALUE ?\n               \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n     }\n+  } else if (arguments.hasNext() && !parameters.hasNext()) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs - ordinal), String.valueOf(minArgs - ordinal),\n+            maxArgs != Integer.MAX_VALUE ?\n+            \" and no more than \" + (maxArgs - ordinal) + \" argument(s)\" : \"\");\n+  } else if (!arguments.hasNext() && parameters.hasNext()) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(ordinal), String.valueOf(minArgs),\n+            maxArgs != Integer.MAX_VALUE ?\n+            \" and no more than \" + (maxArgs - ordinal) + \" argument(s)\" : \"\");\n+  } else if (arguments.hasNext() && parameters.hasNext()) {\n+    int remainingArgs = 0;\n+    while (arguments.hasNext()) {\n+      arguments.next();\n+      remainingArgs++;\n+    }\n+    if (minArgs > numArgs || maxArgs < numArgs) {\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(numArgs - remainingArgs), String.valueOf(minArgs - remainingArgs),\n+              maxArgs != Integer.MAX_VALUE ?\n+              \" and no more than \" + (maxArgs - remainingArgs) + \" argument(s)\" : \"\");\n+    }\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_WRONG_ARGUMENT_COUNT. Function Function: called with 0 argument(s). Function requires at least 0 argument(s). at testcode line 6 : 109 expected:<0> but was:<1>",
    "test_result": "FAIL"
}