{
    "patch": "public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n            throws NonSquareMatrixException,\n            NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        int order = matrix.getRowDimension();\n\n        // Throw NonSquareMatrixException if matrix is not square.\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                    matrix.getColumnDimension());\n        }\n\n        // Initialize local data structure with matrix data.\n        lTData = matrix.getData();\n\n        // Initialize cached matrices to null.\n        cachedL = null;\n        cachedLT = null;\n\n        boolean isPositiveDefinite = true;\n\n        // Check if matrix is positive definite before transformation.\n        for (int i = 0; i < order; ++i) {\n            double[] ltI = lTData[i];\n            if (ltI[i] <= 0) {\n                isPositiveDefinite = false;\n                throw new NotPositiveDefiniteMatrixException();\n            }\n            for (int j = i + 1; j < order; ++j) {\n                double[] ltJ = lTData[j];\n                double lIJ = ltI[j];\n                double lJI = ltJ[i];\n                double delta = relativeSymmetryThreshold *\n                        Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > delta) {\n                    isPositiveDefinite = false;\n                    throw new NotSymmetricMatrixException();\n                } else {\n                    ltJ[i] = 0.0;\n                }\n            }\n        }\n\n        // Transform the matrix if it is positive definite.\n        if (isPositiveDefinite) {\n            for (int i = 0; i < order; ++i) {\n                double[] ltI = lTData[i];\n                ltI[i] = Math.sqrt(ltI[i]);\n\n                double inverse = 1 / ltI[i];\n\n                for (int j = order - 1; j > i; --j) {\n                    double[] ltJ = lTData[j];\n                    ltJ[i] = ltJ[i] * inverse;\n                    for (int k = i + 1; k <= j; ++k) {\n                        ltJ[k] = ltJ[k] - ltI[i] * ltJ[j];\n                    }\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\nindex acd9222f6..4301896b9 100644\n--- a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n@@ -90,64 +90,68 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {\n      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n      */\n-    public CholeskyDecompositionImpl(final RealMatrix matrix,\n-                                     final double relativeSymmetryThreshold,\n-                                     final double absolutePositivityThreshold)\n-        throws NonSquareMatrixException,\n-               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n+public CholeskyDecompositionImpl(final RealMatrix matrix,\n+                                 final double relativeSymmetryThreshold,\n+                                 final double absolutePositivityThreshold)\n+            throws NonSquareMatrixException,\n+            NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n \n+        int order = matrix.getRowDimension();\n+\n+        // Throw NonSquareMatrixException if matrix is not square.\n         if (!matrix.isSquare()) {\n             throw new NonSquareMatrixException(matrix.getRowDimension(),\n-                                               matrix.getColumnDimension());\n+                    matrix.getColumnDimension());\n         }\n \n-        final int order = matrix.getRowDimension();\n-        lTData   = matrix.getData();\n-        cachedL  = null;\n-        cachedLT = null;\n+        // Initialize local data structure with matrix data.\n+        lTData = matrix.getData();\n \n-        // check the matrix before transformation\n-        for (int i = 0; i < order; ++i) {\n+        // Initialize cached matrices to null.\n+        cachedL = null;\n+        cachedLT = null;\n \n-            final double[] lI = lTData[i];\n+        boolean isPositiveDefinite = true;\n \n-            if (lTData[i][i] < absolutePositivityThreshold) {\n+        // Check if matrix is positive definite before transformation.\n+        for (int i = 0; i < order; ++i) {\n+            double[] ltI = lTData[i];\n+            if (ltI[i] <= 0) {\n+                isPositiveDefinite = false;\n                 throw new NotPositiveDefiniteMatrixException();\n             }\n-            // check off-diagonal elements (and reset them to 0)\n             for (int j = i + 1; j < order; ++j) {\n-                final double[] lJ = lTData[j];\n-                final double lIJ = lI[j];\n-                final double lJI = lJ[i];\n-                final double maxDelta =\n-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n-                if (Math.abs(lIJ - lJI) > maxDelta) {\n+                double[] ltJ = lTData[j];\n+                double lIJ = ltI[j];\n+                double lJI = ltJ[i];\n+                double delta = relativeSymmetryThreshold *\n+                        Math.max(Math.abs(lIJ), Math.abs(lJI));\n+                if (Math.abs(lIJ - lJI) > delta) {\n+                    isPositiveDefinite = false;\n                     throw new NotSymmetricMatrixException();\n+                } else {\n+                    ltJ[i] = 0.0;\n                 }\n-                lJ[i] = 0;\n-           }\n+            }\n         }\n \n-        // transform the matrix\n-        for (int i = 0; i < order; ++i) {\n-\n-            final double[] ltI = lTData[i];\n-\n-            // check diagonal element\n+        // Transform the matrix if it is positive definite.\n+        if (isPositiveDefinite) {\n+            for (int i = 0; i < order; ++i) {\n+                double[] ltI = lTData[i];\n+                ltI[i] = Math.sqrt(ltI[i]);\n \n-            ltI[i] = Math.sqrt(ltI[i]);\n-            final double inverse = 1.0 / ltI[i];\n+                double inverse = 1 / ltI[i];\n \n-            for (int q = order - 1; q > i; --q) {\n-                ltI[q] *= inverse;\n-                final double[] ltQ = lTData[q];\n-                for (int p = q; p < order; ++p) {\n-                    ltQ[p] -= ltI[q] * ltI[p];\n+                for (int j = order - 1; j > i; --j) {\n+                    double[] ltJ = lTData[j];\n+                    ltJ[i] = ltJ[i] * inverse;\n+                    for (int k = i + 1; k <= j; ++k) {\n+                        ltJ[k] = ltJ[k] - ltI[i] * ltJ[j];\n+                    }\n                 }\n             }\n-\n         }\n-\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<Infinity>",
    "test_result": "FAIL"
}