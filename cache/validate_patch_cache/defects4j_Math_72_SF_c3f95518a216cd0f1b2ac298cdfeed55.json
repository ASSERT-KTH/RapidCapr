{
    "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // return the initial guess if it is good enough\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // check if min or max are roots\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    } else if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // Bracket the root using the interval [a, b] and the initial point c\n    double a = min;\n    double b = max;\n    if (yMin * yMax >= 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    } else if (yMin == 0) {\n        setResult(min, 0);\n        return result;\n    } else if (yMax == 0) {\n        setResult(max, 0);\n        return result;\n    } else if (yInitial == 0) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    boolean inverted = false;\n    if (yMin > yMax) {\n        final double temp = min;\n        min = max;\n        max = temp;\n        inverted = true;\n        final double temp2 = yMin;\n        yMin = yMax;\n        yMax = temp2;\n    }\n\n    // Full Brent algorithm starting with the interval [a, b] and the initial point c\n    double c = a;\n    double yC = yMin;\n    double d = b;\n    double yD = yMax;\n    double oldY = yInitial;\n    double oldC = c;\n    while (getIterations() < maximalIterationCount) {\n        if (Math.abs(yC) < Math.abs(yD)) {\n            oldC = c;\n            c = d;\n            d = oldC;\n            oldY = yC;\n            yC = yD;\n            yD = oldY;\n            inverted = !inverted;\n        }\n\n        final double tol = functionValueAccuracy * 2 * Math.abs(c) + absoluteAccuracy;\n        final double m = (d - c) / 2;\n        if (Math.abs(m) <= tol ||\n                (Math.abs(yC) <= functionValueAccuracy && Math.abs(yD) <= functionValueAccuracy)) {\n            setResult(c, getIterations());\n            return result;\n        }\n\n        if (Math.abs(oldY) < Math.abs(yC) && Math.abs(oldY) < Math.abs(yD)) {\n            // Golden section step\n            double tol1 = tol;\n            if (c == oldC) {\n                tol1 = tol / 2;\n            }\n            final double x = c + goldenSection * (d - c);\n            if (Math.abs(m) >= tol1 || Math.abs(x - c) >= tol1) {\n                final double yX = f.value(x);\n                incrementIterationsCounter();\n                if (Double.isNaN(yX)) {\n                    throw new FunctionEvaluationException(x);\n                }\n                if (yX <= oldY) {\n                    d = c;\n                    yD = yC;\n                    c = x;\n                    yC = yX;\n                } else {\n                    a = x;\n                    yMin = yX;\n                }\n            } else {\n                c += inverted ? -tol1 : tol1;\n            }\n        } else {\n            // Quadratic interpolation step\n            final double numer = (yC - yD) * (c - d);\n            final double denom = (yC - oldY) * (c - oldC) * (yD - oldY) * (d - oldC);\n            final double q = denom > 0 ? numer / denom : 0;\n            final double xP = c + q * (d - c);\n            final double yPx = f.value(xP);\n            incrementIterationsCounter();\n            if (Double.isNaN(yPx)) {\n                throw new FunctionEvaluationException(xP);\n            }\n            if (q >= 0 && q <= 1 && Math.abs(xP - c) >= tol && Math.abs(xP - d) >= tol\n                    && Math.abs(yPx) < Math.abs(yC)) {\n                d = c;\n                yD = yC;\n                c = xP;\n                yC = yPx;\n            } else {\n                // Golden section step\n                double tol1 = tol;\n                if (c == oldC) {\n                    tol1 = tol / 2;\n                }\n                final double x = c + goldenSection * (d - c);\n                if (Math.abs(m) >= tol1 || Math.abs(x - c) >= tol1) {\n                    final double yX = f.value(x);\n                    incrementIterationsCounter();\n                    if (Double.isNaN(yX)) {\n                        throw new FunctionEvaluationException(x);\n                    }\n                    if (yX <= oldY) {\n                        d = c;\n                        yD = yC;\n                        c = x;\n                        yC = yX;\n                    } else {\n                        a = x;\n                        yMin = yX;\n                    }\n                } else {\n                    c += inverted ? -tol1 : tol1;\n                }\n            }\n        }\n    }\n\n\n    throw new MaxIterationsExceededException(maximalIterationCount);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..35535df9a 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,53 +95,159 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+    // return the initial guess if it is good enough\n+    double yInitial = f.value(initial);\n+    if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+    // check if min or max are roots\n+    if (Math.abs(yMin) <= functionValueAccuracy) {\n+        setResult(min, 0);\n+        return result;\n+    } else if (Math.abs(yMax) <= functionValueAccuracy) {\n+        setResult(max, 0);\n+        return result;\n+    }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n+    // Bracket the root using the interval [a, b] and the initial point c\n+    double a = min;\n+    double b = max;\n+    if (yMin * yMax >= 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+    } else if (yMin == 0) {\n+        setResult(min, 0);\n+        return result;\n+    } else if (yMax == 0) {\n+        setResult(max, 0);\n+        return result;\n+    } else if (yInitial == 0) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n+\n+    boolean inverted = false;\n+    if (yMin > yMax) {\n+        final double temp = min;\n+        min = max;\n+        max = temp;\n+        inverted = true;\n+        final double temp2 = yMin;\n+        yMin = yMax;\n+        yMax = temp2;\n+    }\n+\n+    // Full Brent algorithm starting with the interval [a, b] and the initial point c\n+    double c = a;\n+    double yC = yMin;\n+    double d = b;\n+    double yD = yMax;\n+    double oldY = yInitial;\n+    double oldC = c;\n+    while (getIterations() < maximalIterationCount) {\n+        if (Math.abs(yC) < Math.abs(yD)) {\n+            oldC = c;\n+            c = d;\n+            d = oldC;\n+            oldY = yC;\n+            yC = yD;\n+            yD = oldY;\n+            inverted = !inverted;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n+        final double tol = functionValueAccuracy * 2 * Math.abs(c) + absoluteAccuracy;\n+        final double m = (d - c) / 2;\n+        if (Math.abs(m) <= tol ||\n+                (Math.abs(yC) <= functionValueAccuracy && Math.abs(yD) <= functionValueAccuracy)) {\n+            setResult(c, getIterations());\n+            return result;\n         }\n \n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+        if (Math.abs(oldY) < Math.abs(yC) && Math.abs(oldY) < Math.abs(yD)) {\n+            // Golden section step\n+            double tol1 = tol;\n+            if (c == oldC) {\n+                tol1 = tol / 2;\n+            }\n+            final double x = c + goldenSection * (d - c);\n+            if (Math.abs(m) >= tol1 || Math.abs(x - c) >= tol1) {\n+                final double yX = f.value(x);\n+                incrementIterationsCounter();\n+                if (Double.isNaN(yX)) {\n+                    throw new FunctionEvaluationException(x);\n+                }\n+                if (yX <= oldY) {\n+                    d = c;\n+                    yD = yC;\n+                    c = x;\n+                    yC = yX;\n+                } else {\n+                    a = x;\n+                    yMin = yX;\n+                }\n+            } else {\n+                c += inverted ? -tol1 : tol1;\n+            }\n+        } else {\n+            // Quadratic interpolation step\n+            final double numer = (yC - yD) * (c - d);\n+            final double denom = (yC - oldY) * (c - oldC) * (yD - oldY) * (d - oldC);\n+            final double q = denom > 0 ? numer / denom : 0;\n+            final double xP = c + q * (d - c);\n+            final double yPx = f.value(xP);\n+            incrementIterationsCounter();\n+            if (Double.isNaN(yPx)) {\n+                throw new FunctionEvaluationException(xP);\n+            }\n+            if (q >= 0 && q <= 1 && Math.abs(xP - c) >= tol && Math.abs(xP - d) >= tol\n+                    && Math.abs(yPx) < Math.abs(yC)) {\n+                d = c;\n+                yD = yC;\n+                c = xP;\n+                yC = yPx;\n+            } else {\n+                // Golden section step\n+                double tol1 = tol;\n+                if (c == oldC) {\n+                    tol1 = tol / 2;\n+                }\n+                final double x = c + goldenSection * (d - c);\n+                if (Math.abs(m) >= tol1 || Math.abs(x - c) >= tol1) {\n+                    final double yX = f.value(x);\n+                    incrementIterationsCounter();\n+                    if (Double.isNaN(yX)) {\n+                        throw new FunctionEvaluationException(x);\n+                    }\n+                    if (yX <= oldY) {\n+                        d = c;\n+                        yD = yC;\n+                        c = x;\n+                        yC = yX;\n+                    } else {\n+                        a = x;\n+                        yMin = yX;\n+                    }\n+                } else {\n+                    c += inverted ? -tol1 : tol1;\n+                }\n+            }\n         }\n+    }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n-    }\n+    throw new MaxIterationsExceededException(maximalIterationCount);\n+}\n \n     /**\n      * Find a zero in the given interval.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}