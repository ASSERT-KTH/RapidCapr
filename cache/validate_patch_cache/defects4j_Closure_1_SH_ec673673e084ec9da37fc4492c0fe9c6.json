{
    "patch": "    Node argList = getFunctionArgList(function);  \n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    \n    // First, count the number of unreferenced args to remove.\n    int unusedCount = 0;\n    for (Node arg = argList.getFirstChild(); arg != null;) {\n      Node nextArg = arg.getNext();\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        unusedCount++;\n      } else {\n        // Any unused arguments before a used default value must be kept\n        // and should not count towards unusedCount.\n        if (arg.hasChildren() && arg.getFirstChild().isDefaultValue()) {\n          unusedCount--;\n        }\n      }\n      arg = nextArg;\n    }\n\n    if (unusedCount != 0) {\n      for (int i = 0; i < unusedCount; i++) {\n        argList.removeChild(argList.getLastChild());\n        compiler.reportCodeChange();\n      }\n      // Rewrite arguments object so it does not contain the removed arguments.\n      createArgumentsObject(fnScope, argList);\n    }\n    \n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a03813ba 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,37 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node argList = getFunctionArgList(function);  \n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    \n+    // First, count the number of unreferenced args to remove.\n+    int unusedCount = 0;\n+    for (Node arg = argList.getFirstChild(); arg != null;) {\n+      Node nextArg = arg.getNext();\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        unusedCount++;\n+      } else {\n+        // Any unused arguments before a used default value must be kept\n+        // and should not count towards unusedCount.\n+        if (arg.hasChildren() && arg.getFirstChild().isDefaultValue()) {\n+          unusedCount--;\n+        }\n+      }\n+      arg = nextArg;\n+    }\n+\n+    if (unusedCount != 0) {\n+      for (int i = 0; i < unusedCount; i++) {\n+        argList.removeChild(argList.getLastChild());\n+        compiler.reportCodeChange();\n+      }\n+      // Rewrite arguments object so it does not contain the removed arguments.\n+      createArgumentsObject(fnScope, argList);\n+    }\n+    \n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}