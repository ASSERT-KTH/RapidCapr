{
    "patch": "if (cfa != null && finallyNode != null) {\n    Node followNode = computeFollowNode(fromNode, finallyNode.getLastChild(), cfa);\n    if (followNode == null) {\n        followNode = computeFollowNode(finallyNode, finallyNode, cfa);\n    }else{\n        Node nextNode = followNode;\n        while(nextNode != null && nextNode != finallyNode){\n            //we want to make sure that we don't create a duplicated edge\n            if(nextNode.getParent() == parent){\n                //we found a node in the same level before the finallyNode\n                nextNode = null;\n                break;\n            }\n            nextNode = nextNode.getParent();\n        }\n        if(nextNode != null){\n            cfa.createEdge(nextNode, Branch.UNCOND, finallyNode);\n        }\n    }\n    if (followNode != null && followNode.getParent() != parent) {\n        cfa.createEdge(finallyNode, Branch.UNCOND, followNode);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..4c17fa0b 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,29 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null && finallyNode != null) {\n+    Node followNode = computeFollowNode(fromNode, finallyNode.getLastChild(), cfa);\n+    if (followNode == null) {\n+        followNode = computeFollowNode(finallyNode, finallyNode, cfa);\n+    }else{\n+        Node nextNode = followNode;\n+        while(nextNode != null && nextNode != finallyNode){\n+            //we want to make sure that we don't create a duplicated edge\n+            if(nextNode.getParent() == parent){\n+                //we found a node in the same level before the finallyNode\n+                nextNode = null;\n+                break;\n+            }\n+            nextNode = nextNode.getParent();\n+        }\n+        if(nextNode != null){\n+            cfa.createEdge(nextNode, Branch.UNCOND, finallyNode);\n+        }\n+    }\n+    if (followNode != null && followNode.getParent() != parent) {\n+        cfa.createEdge(finallyNode, Branch.UNCOND, followNode);\n+    }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "junit.framework.AssertionFailedError: No cross edges found",
    "test_result": "FAIL"
}