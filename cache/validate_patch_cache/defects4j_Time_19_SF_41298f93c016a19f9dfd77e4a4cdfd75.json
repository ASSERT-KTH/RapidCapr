{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int offsetLocal = getOffset(instantLocal);\n        // Next line modified to calculate the correct instant from the local time\n        long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        if (offsetLocal != offsetAdjusted) {\n            if (offsetLocal < 0) {\n                // Backward transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                if (nextLocal != nextAdjusted) {\n                    // There's a gap after the next transition; this is always legal\n                    return offsetLocal;\n                }\n            } else {\n                // Forward transition - skip over gap\n                long nextLocal = nextTransition(instantAdjusted - 1);\n                long nextAdjusted = nextTransition(instantLocal - offsetLocal - 1);\n                if (nextLocal <= instantAdjusted && nextAdjusted > instantLocal - offsetLocal) {\n                    instantAdjusted = nextLocal - 1;\n                }\n            }\n        } else if (offsetLocal >= 0) {\n            // Recent past or near transition point (TODO: simplify?)\n            long prevTransition = previousTransition(instantAdjusted);\n            long nextTransition = nextTransition(instantAdjusted);\n            int diff = offsetLocal - getOffset(prevTransition);\n            if (Math.abs(diff) < getStandardOffset(nextTransition) - offsetLocal) {\n                return offsetLocal;\n            }\n        } // Else we are near a gap before a transition\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..9347deba 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,35 +878,36 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n+        // Next line modified to calculate the correct instant from the local time\n+        long instantAdjusted = instantLocal - offsetLocal;\n         final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n         if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n+            if (offsetLocal < 0) {\n+                // Backward transition\n                 long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                 if (nextLocal != nextAdjusted) {\n+                    // There's a gap after the next transition; this is always legal\n                     return offsetLocal;\n                 }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n+            } else {\n+                // Forward transition - skip over gap\n+                long nextLocal = nextTransition(instantAdjusted - 1);\n+                long nextAdjusted = nextTransition(instantLocal - offsetLocal - 1);\n+                if (nextLocal <= instantAdjusted && nextAdjusted > instantLocal - offsetLocal) {\n+                    instantAdjusted = nextLocal - 1;\n                 }\n             }\n-        }\n+        } else if (offsetLocal >= 0) {\n+            // Recent past or near transition point (TODO: simplify?)\n+            long prevTransition = previousTransition(instantAdjusted);\n+            long nextTransition = nextTransition(instantAdjusted);\n+            int diff = offsetLocal - getOffset(prevTransition);\n+            if (Math.abs(diff) < getStandardOffset(nextTransition) - offsetLocal) {\n+                return offsetLocal;\n+            }\n+        } // Else we are near a gap before a transition\n         return offsetAdjusted;\n     }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...1-10-30T01:15:00.000[+01:00]> but was:<...1-10-30T01:15:00.000[Z]>",
    "test_result": "FAIL"
}