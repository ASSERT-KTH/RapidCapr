{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (NodeUtil.mayContainStatements(n)) {\n        // For labels with block children, we need to ensure that a\n        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n        // are skipped. \n        List<Node> children = n.children();\n        if (children.size() == 1) {\n            Node child = children.get(0);\n            if (child.getType() == Token.BLOCK) {\n                List<Node> blockChildren = child.children();\n                return (blockChildren.size() == 1 && (blockChildren.get(0).getType() == Token.FUNCTION || blockChildren.get(0).getType() == Token.DO));\n            }\n            return (child.getType() == Token.FUNCTION || child.getType() == Token.DO);\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..a3af21fe 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,23 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    if (NodeUtil.mayContainStatements(n)) {\n         // For labels with block children, we need to ensure that a\n         // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n         // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+        List<Node> children = n.children();\n+        if (children.size() == 1) {\n+            Node child = children.get(0);\n+            if (child.getType() == Token.BLOCK) {\n+                List<Node> blockChildren = child.children();\n+                return (blockChildren.size() == 1 && (blockChildren.get(0).getType() == Token.FUNCTION || blockChildren.get(0).getType() == Token.DO));\n+            }\n+            return (child.getType() == Token.FUNCTION || child.getType() == Token.DO);\n+        }\n+    }\n+    return false;\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}