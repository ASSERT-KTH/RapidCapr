{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        Node parent = maybeExpr.getParent();\n\n        // Not foldable if the child node is a function expression or if the enclosing\n        // expression is assigned to a variable\n        if (NodeUtil.isFunctionExpression(maybeExpr) || (parent != null && parent.getType() == Token.ASSIGN)) {\n            return false;\n        }\n\n        // Traverse through the child expression if it's a ternary expression or comma expression until we reach the\n        // final expression\n        while (maybeExpr.getType() == Token.HOOK || maybeExpr.getType() == Token.COMMA) {\n            Node firstChild = maybeExpr.getFirstChild();\n            maybeExpr = firstChild.getNext();\n        }\n\n        // Foldable only if the child expression is an expression statement and it does not have\n        // any side effects\n        if (maybeExpr.getType() == Token.EXPR_RESULT && !NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild())) {\n            Node maybeExprFirstChild = maybeExpr.getFirstChild();\n\n            // If the expression is an OR expression, check if one of its operands is `null` or `undefined`\n            if (maybeExprFirstChild.getType() == Token.OR) {\n                Node maybeExprFirstChildFirstChild = maybeExprFirstChild.getFirstChild();\n                Node maybeExprFirstChildSecondChild = maybeExprFirstChild.getLastChild();\n\n                boolean isNullOrUndefined1 = maybeExprFirstChildFirstChild.getType() == Token.NULL || maybeExprFirstChildFirstChild.getType() == Token.UNDEFINED;\n                boolean isNullOrUndefined2 = maybeExprFirstChildSecondChild.getType() == Token.NULL || maybeExprFirstChildSecondChild.getType() == Token.UNDEFINED;\n                return isNullOrUndefined1 || isNullOrUndefined2;\n            } else {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..46614bb0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,45 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n+        Node parent = maybeExpr.getParent();\n \n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n+        // Not foldable if the child node is a function expression or if the enclosing\n+        // expression is assigned to a variable\n+        if (NodeUtil.isFunctionExpression(maybeExpr) || (parent != null && parent.getType() == Token.ASSIGN)) {\n+            return false;\n+        }\n \n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+        // Traverse through the child expression if it's a ternary expression or comma expression until we reach the\n+        // final expression\n+        while (maybeExpr.getType() == Token.HOOK || maybeExpr.getType() == Token.COMMA) {\n+            Node firstChild = maybeExpr.getFirstChild();\n+            maybeExpr = firstChild.getNext();\n+        }\n+\n+        // Foldable only if the child expression is an expression statement and it does not have\n+        // any side effects\n+        if (maybeExpr.getType() == Token.EXPR_RESULT && !NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild())) {\n+            Node maybeExprFirstChild = maybeExpr.getFirstChild();\n+\n+            // If the expression is an OR expression, check if one of its operands is `null` or `undefined`\n+            if (maybeExprFirstChild.getType() == Token.OR) {\n+                Node maybeExprFirstChildFirstChild = maybeExprFirstChild.getFirstChild();\n+                Node maybeExprFirstChildSecondChild = maybeExprFirstChild.getLastChild();\n+\n+                boolean isNullOrUndefined1 = maybeExprFirstChildFirstChild.getType() == Token.NULL || maybeExprFirstChildFirstChild.getType() == Token.UNDEFINED;\n+                boolean isNullOrUndefined2 = maybeExprFirstChildSecondChild.getType() == Token.NULL || maybeExprFirstChildSecondChild.getType() == Token.UNDEFINED;\n+                return isNullOrUndefined1 || isNullOrUndefined2;\n+            } else {\n+                return true;\n+            }\n+        }\n     }\n \n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}