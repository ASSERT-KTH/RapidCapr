{
    "patch": "if (!block.equals(ref.getBasicBlock())) {\n    // Check if the reference is in an outer block.\n    boolean assignedInLoopOrFunction = false;\n    for (BasicBlock outer = ref.getBasicBlock(); outer != null; outer = outer.getParent()) {\n        if (outer.isFunction || outer.isLoop) {\n            assignedInLoopOrFunction = true;\n            break;\n        }\n    }\n    if (assignedInLoopOrFunction || !block.encloses(ref.getBasicBlock())) {\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..68a49c27 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (!block.equals(ref.getBasicBlock())) {\n+    // Check if the reference is in an outer block.\n+    boolean assignedInLoopOrFunction = false;\n+    for (BasicBlock outer = ref.getBasicBlock(); outer != null; outer = outer.getParent()) {\n+        if (outer.isFunction || outer.isLoop) {\n+            assignedInLoopOrFunction = true;\n+            break;\n+        }\n+    }\n+    if (assignedInLoopOrFunction || !block.encloses(ref.getBasicBlock())) {\n+        return false;\n+    }\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}