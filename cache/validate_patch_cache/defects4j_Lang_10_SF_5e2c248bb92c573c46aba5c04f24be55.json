{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    boolean inQuotes = false;\n    boolean escape = false;\n    for (int i = 0; i < value.length(); i++) {\n        char c = value.charAt(i);\n        switch (c) {\n            case '\\\\':\n                escape = !escape;\n                break;\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                if (!inQuotes && !escape) {\n                    regex.append(\"\\\\\\\\\"); // append backslash twice\n                }\n                escape = false;\n                break;\n            case '?':\n                if (inQuotes || escape) {\n                    regex.append(c);\n                    escape = false;\n                    break;\n                }\n                if (!wasWhite) {\n                    regex.append(\"\\\\s{0,1}\");\n                    wasWhite = true;\n                }\n                break;\n            case '\\'':\n                if (unquote) {\n                    if (++i == value.length()) {\n                        break;\n                    }\n                    c = value.charAt(i);\n                }\n                if (!escape) {\n                    if (!inQuotes) {\n                        regex.append(\"\\\\Q\");\n                    }\n                    else {\n                        regex.append(\"\\\\E\");\n                    }\n                }\n                inQuotes = !inQuotes;\n                escape = false;\n                break;\n            default:\n                escape = false;\n                if (Character.isWhitespace(c)) {\n                    if (!inQuotes && !wasWhite) {\n                        regex.append(\"\\\\s+\");\n                        wasWhite = true;\n                    }\n                }\n                else {\n                    regex.append(c);\n                    wasWhite = false;\n                }\n        }\n    }\n    if (inQuotes) {\n        regex.append(\"\\\\E\");\n    }\n    if (wasWhite || escape) {\n        regex.append(\"\\\\s+\");\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..7fac0051 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,84 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    boolean inQuotes = false;\n+    boolean escape = false;\n+    for (int i = 0; i < value.length(); i++) {\n+        char c = value.charAt(i);\n+        switch (c) {\n+            case '\\\\':\n+                escape = !escape;\n                 break;\n-            case '?':\n             case '[':\n             case ']':\n             case '(':\n             case ')':\n             case '{':\n             case '}':\n-            case '\\\\':\n             case '|':\n             case '*':\n             case '+':\n             case '^':\n             case '$':\n             case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                if (!inQuotes && !escape) {\n+                    regex.append(\"\\\\\\\\\"); // append backslash twice\n+                }\n+                escape = false;\n+                break;\n+            case '?':\n+                if (inQuotes || escape) {\n+                    regex.append(c);\n+                    escape = false;\n+                    break;\n+                }\n+                if (!wasWhite) {\n+                    regex.append(\"\\\\s{0,1}\");\n+                    wasWhite = true;\n+                }\n+                break;\n+            case '\\'':\n+                if (unquote) {\n+                    if (++i == value.length()) {\n+                        break;\n+                    }\n+                    c = value.charAt(i);\n+                }\n+                if (!escape) {\n+                    if (!inQuotes) {\n+                        regex.append(\"\\\\Q\");\n+                    }\n+                    else {\n+                        regex.append(\"\\\\E\");\n+                    }\n+                }\n+                inQuotes = !inQuotes;\n+                escape = false;\n+                break;\n+            default:\n+                escape = false;\n+                if (Character.isWhitespace(c)) {\n+                    if (!inQuotes && !wasWhite) {\n+                        regex.append(\"\\\\s+\");\n+                        wasWhite = true;\n+                    }\n+                }\n+                else {\n+                    regex.append(c);\n+                    wasWhite = false;\n+                }\n         }\n-        return regex;\n     }\n+    if (inQuotes) {\n+        regex.append(\"\\\\E\");\n+    }\n+    if (wasWhite || escape) {\n+        regex.append(\"\\\\s+\");\n+    }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}