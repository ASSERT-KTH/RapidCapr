{
    "patch": "        final EigenDecomposition dec = new EigenDecomposition(m);\n          \n        RealMatrix d = dec.getD();\n        int n = d.getRowDimension();\n        double[][] sqrtData = new double[n][n];\n        for (int i = 0; i < n; i++) {\n            Arrays.fill(sqrtData[i], 0.0);\n            sqrtData[i][i] = Math.sqrt(d.getEntry(i, i));\n        }\n        RealMatrix sqrt = dec.getV().multiply(MatrixUtils.createRealMatrix(sqrtData)).multiply(dec.getV().transpose());\n    \n        return sqrt;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..1dd9c822c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+          \n+        RealMatrix d = dec.getD();\n+        int n = d.getRowDimension();\n+        double[][] sqrtData = new double[n][n];\n+        for (int i = 0; i < n; i++) {\n+            Arrays.fill(sqrtData[i], 0.0);\n+            sqrtData[i][i] = Math.sqrt(d.getEntry(i, i));\n+        }\n+        RealMatrix sqrt = dec.getV().multiply(MatrixUtils.createRealMatrix(sqrtData)).multiply(dec.getV().transpose());\n+    \n+        return sqrt;\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}