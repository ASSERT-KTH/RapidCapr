{
    "patch": "    // [INFILL]\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    List<Node> unusedParams = new ArrayList<>();\n    if (!modifyCallers) {\n      // Find all unused args to remove when all references are collected.\n      for (Node currentArg : argList.children()) {\n        String functionName = NodeUtil.getNearestFunctionName(function);\n        boolean foundReference = NodeUtil.hasReferenceToName(currentArg, functionName);\n        if (!foundReference) {\n          unusedParams.add(currentArg);\n        }\n      }\n    }\n\n    if (!unusedParams.isEmpty()) {\n      for (Node unusedParam : unusedParams) {\n        argList.removeChild(unusedParam);\n        compiler.reportCodeChange();\n      }\n    } else if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ebbf36e7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,37 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // [INFILL]\n+\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    List<Node> unusedParams = new ArrayList<>();\n+    if (!modifyCallers) {\n+      // Find all unused args to remove when all references are collected.\n+      for (Node currentArg : argList.children()) {\n+        String functionName = NodeUtil.getNearestFunctionName(function);\n+        boolean foundReference = NodeUtil.hasReferenceToName(currentArg, functionName);\n+        if (!foundReference) {\n+          unusedParams.add(currentArg);\n+        }\n+      }\n+    }\n+\n+    if (!unusedParams.isEmpty()) {\n+      for (Node unusedParam : unusedParams) {\n+        argList.removeChild(unusedParam);\n+        compiler.reportCodeChange();\n+      }\n+    } else if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}