{
    "patch": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n\n    // Only fold calls to the String constructor.\n    if (callTarget != null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n      Node argument = callTarget.getNext();\n\n      // Only fold when there is one argument which is a primitive value.\n      if (argument != null && NodeUtil.isImmutableValue(argument) &&\n          !NodeUtil.mayHaveSideEffects(argument)) {\n        Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            argument.detachFromParent());\n        n.getParent().replaceChild(n, addition);\n        reportCodeChange();\n        return addition;\n      }\n    }\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..a76bd398 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -208,19 +208,18 @@ class PeepholeSubstituteAlternateSyntax\n   private Node tryFoldSimpleFunctionCall(Node n) {\n     Preconditions.checkState(n.isCall());\n     Node callTarget = n.getFirstChild();\n+\n+    // Only fold calls to the String constructor.\n     if (callTarget != null && callTarget.isName() &&\n-          callTarget.getString().equals(\"String\")) {\n-      // Fold String(a) to '' + (a) on immutable literals,\n-      // which allows further optimizations\n-      //\n-      // We can't do this in the general case, because String(a) has\n-      // slightly different semantics than '' + (a). See\n-      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n-      Node value = callTarget.getNext();\n-      if (value != null) {\n+        callTarget.getString().equals(\"String\")) {\n+      Node argument = callTarget.getNext();\n+\n+      // Only fold when there is one argument which is a primitive value.\n+      if (argument != null && NodeUtil.isImmutableValue(argument) &&\n+          !NodeUtil.mayHaveSideEffects(argument)) {\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n-            value.detachFromParent());\n+            argument.detachFromParent());\n         n.getParent().replaceChild(n, addition);\n         reportCodeChange();\n         return addition;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}