{
    "patch": "public int getWeeks() {\n    long millis = getMillis(); // get total milliseconds\n    millis -= getYears() * DateTimeConstants.MILLIS_PER_YEAR; // subtract years in milliseconds\n    millis -= getMonths() * DateTimeConstants.MILLIS_PER_MONTH; // subtract months in milliseconds\n    millis -= getDays() * DateTimeConstants.MILLIS_PER_DAY; // subtract days in milliseconds\n\n    // Calculate weeks and leftover days\n    long weekMillis = DateTimeConstants.MILLIS_PER_WEEK; // milliseconds in a week\n    int weeks = 0;\n    while (millis >= weekMillis) { // while there are more than a week's worth of milliseconds left\n        millis -= weekMillis; // subtract a week's worth of milliseconds\n        weeks++; // increment weeks counter\n    }\n\n    int leftoverDays = (int) millis / DateTimeConstants.MILLIS_PER_DAY; // leftover milliseconds converted to days\n    if (leftoverDays >= 4) { // if more than three and a half days left, it should be considered another week\n        weeks++;\n    }\n    return weeks;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..eae845c0 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,26 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+public int getWeeks() {\n+    long millis = getMillis(); // get total milliseconds\n+    millis -= getYears() * DateTimeConstants.MILLIS_PER_YEAR; // subtract years in milliseconds\n+    millis -= getMonths() * DateTimeConstants.MILLIS_PER_MONTH; // subtract months in milliseconds\n+    millis -= getDays() * DateTimeConstants.MILLIS_PER_DAY; // subtract days in milliseconds\n+\n+    // Calculate weeks and leftover days\n+    long weekMillis = DateTimeConstants.MILLIS_PER_WEEK; // milliseconds in a week\n+    int weeks = 0;\n+    while (millis >= weekMillis) { // while there are more than a week's worth of milliseconds left\n+        millis -= weekMillis; // subtract a week's worth of milliseconds\n+        weeks++; // increment weeks counter\n+    }\n+\n+    int leftoverDays = (int) millis / DateTimeConstants.MILLIS_PER_DAY; // leftover milliseconds converted to days\n+    if (leftoverDays >= 4) { // if more than three and a half days left, it should be considered another week\n+        weeks++;\n     }\n+    return weeks;\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}