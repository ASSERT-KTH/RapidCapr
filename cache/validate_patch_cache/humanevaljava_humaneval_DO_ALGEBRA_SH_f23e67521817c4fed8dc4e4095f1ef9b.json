{
    "patch": "package humaneval.buggy;\n\nimport javax.script.ScriptEngine;\nimport javax.script.ScriptEngineManager;\nimport javax.script.ScriptException;\n\npublic class DO_ALGEBRA {\n    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n        ScriptEngineManager mgr = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n        String expression = \"\";\n        for (int i = 0; i < operand.length; i += 1) {\n            expression += operand[i];\n            if (i != operand.length - 1) {\n                expression += operator[i];\n            }\n        }\n        return Double.parseDouble(engine.eval(expression).toString());\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/DO_ALGEBRA.java b/src/main/java/humaneval/buggy/DO_ALGEBRA.java\nindex 08aedcb..0c9bbc9 100644\n--- a/src/main/java/humaneval/buggy/DO_ALGEBRA.java\n+++ b/src/main/java/humaneval/buggy/DO_ALGEBRA.java\n@@ -26,13 +26,30 @@ import javax.script.ScriptException;\n //     Operand is a list of of non-negative integers.\n //     Operator list has at least one operator, and operand list has at least two operands.\n \n+public class DO_ALGEBRA {\n+    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n+        ScriptEngineManager mgr = new ScriptEngineManager();\n+        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n+package humaneval.buggy;\n+\n+import javax.script.ScriptEngine;\n+import javax.script.ScriptEngineManager;\n+import javax.script.ScriptException;\n+\n public class DO_ALGEBRA {\n     public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n         ScriptEngineManager mgr = new ScriptEngineManager();\n         ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n         String expression = \"\";\n         for (int i = 0; i < operand.length; i += 1) {\n-            expression += operator[i] + operand[i];\n+            expression += operand[i];\n+            if (i != operand.length - 1) {\n+                expression += operator[i];\n+            }\n+        }\n+        return Double.parseDouble(engine.eval(expression).toString());\n+    }\n+}\n         }\n         return Double.parseDouble(engine.eval(expression).toString());\n     }",
    "result_reason": " /tmp/humaneval-DO_ALGEBRA/src/main/java/humaneval/buggy/DO_ALGEBRA.java:[33,1] illegal start of expression",
    "test_result": "ERROR"
}