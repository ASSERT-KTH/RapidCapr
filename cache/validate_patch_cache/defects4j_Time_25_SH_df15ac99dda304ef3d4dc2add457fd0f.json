{
    "patch": "                final int minOffsetAdjusted = getOffset(instantLocal - 1L);\n                final int maxOffsetAdjusted = offsetAdjusted;\n                if (minOffsetAdjusted != maxOffsetAdjusted) {\n                    long prevTransition = previousTransition(instantAdjusted);\n                    if (prevTransition == instantAdjusted - 1L) {\n                        // a duplicate local time\n                        prevTransition = previousTransition(prevTransition);\n                    }\n                    if (prevTransition < instantLocal - 1L &&\n                            getOffset(prevTransition) == maxOffsetAdjusted) {\n                        // gap bridged\n                        return maxOffsetAdjusted;\n                    }\n                    else {\n                        return minOffsetAdjusted;\n                    }\n                } else {\n                    // Both offsets are the same, but they might still be wrong\n                    long prevTransition = previousTransition(instantAdjusted);\n                    if (isInDaylightTime(prevTransition) != isInDaylightTime(instantLocal - 1L)) {\n                        // There is a transition immediately before the instant\n                        // We use the offset before the transition\n                        return getOffset(prevTransition);\n                    }\n                    long nextTransition = nextTransition(instantAdjusted);\n                    if (isInDaylightTime(instantLocal) != isInDaylightTime(nextTransition - 1L)) {\n                        // There is a transition immediately after the instant\n                        // We use the offset after the transition\n                        return getOffset(nextTransition);\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..227216c5 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,36 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                final int minOffsetAdjusted = getOffset(instantLocal - 1L);\n+                final int maxOffsetAdjusted = offsetAdjusted;\n+                if (minOffsetAdjusted != maxOffsetAdjusted) {\n+                    long prevTransition = previousTransition(instantAdjusted);\n+                    if (prevTransition == instantAdjusted - 1L) {\n+                        // a duplicate local time\n+                        prevTransition = previousTransition(prevTransition);\n+                    }\n+                    if (prevTransition < instantLocal - 1L &&\n+                            getOffset(prevTransition) == maxOffsetAdjusted) {\n+                        // gap bridged\n+                        return maxOffsetAdjusted;\n+                    }\n+                    else {\n+                        return minOffsetAdjusted;\n+                    }\n+                } else {\n+                    // Both offsets are the same, but they might still be wrong\n+                    long prevTransition = previousTransition(instantAdjusted);\n+                    if (isInDaylightTime(prevTransition) != isInDaylightTime(instantLocal - 1L)) {\n+                        // There is a transition immediately before the instant\n+                        // We use the offset before the transition\n+                        return getOffset(prevTransition);\n+                    }\n+                    long nextTransition = nextTransition(instantAdjusted);\n+                    if (isInDaylightTime(instantLocal) != isInDaylightTime(nextTransition - 1L)) {\n+                        // There is a transition immediately after the instant\n+                        // We use the offset after the transition\n+                        return getOffset(nextTransition);\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}