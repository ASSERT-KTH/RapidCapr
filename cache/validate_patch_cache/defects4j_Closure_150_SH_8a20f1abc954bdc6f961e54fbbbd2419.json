{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n>>> [ INFILL ] <<<\n      // Call the specific handling methods for literal types\n      switch (n.getType()) {\n        case Token.NUMBER:\n          handleNumber(n);\n          break;\n        case Token.STRING:\n          handleString(n);\n          break;\n        case Token.OBJECTLIT:\n          handleObjectLiteral(n);\n          break;\n        case Token.ARRAYLIT:\n          handleArrayLiteral(n);\n          break;\n        default:\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..0ac45c35 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1463,6 +1463,24 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n+>>> [ INFILL ] <<<\n+      // Call the specific handling methods for literal types\n+      switch (n.getType()) {\n+        case Token.NUMBER:\n+          handleNumber(n);\n+          break;\n+        case Token.STRING:\n+          handleString(n);\n+          break;\n+        case Token.OBJECTLIT:\n+          handleObjectLiteral(n);\n+          break;\n+        case Token.ARRAYLIT:\n+          handleArrayLiteral(n);\n+          break;\n+        default:\n+          break;\n+      }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}