{
    "patch": "import org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\npublic class JSONUtils {\n    public static double getTypedPercent(JSONArray js) throws JSONException {\n        int typed = 0;\n        for (int i = 0; i < js.length(); i++) {\n            JSONObject obj = js.getJSONObject(i);\n            if (obj.optString(\"type\").equals(\"typed\")) {\n                typed++;\n            }\n        }\n        return (double) typed / js.length() * 100.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..9b403287 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class JSONUtils {\n+    public static double getTypedPercent(JSONArray js) throws JSONException {\n+        int typed = 0;\n+        for (int i = 0; i < js.length(); i++) {\n+            JSONObject obj = js.getJSONObject(i);\n+            if (obj.optString(\"type\").equals(\"typed\")) {\n+                typed++;\n+            }\n+        }\n+        return (double) typed / js.length() * 100.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}