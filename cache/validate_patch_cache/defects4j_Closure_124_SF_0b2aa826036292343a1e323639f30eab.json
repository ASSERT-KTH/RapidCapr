{
    "patch": "// Returns true if it is safe to replace node with replacement\nprivate boolean isSafeReplacement(Node node, Node replacement) {\n  if (node.isGetProp()) {\n    Node child = node.getFirstChild();\n    while (child != null) {\n      // Check if child is assigned to replacement\n      if (child.isName() && isNameAssignedTo(child.getString(), replacement)) {\n        return false;\n      }\n      // Recursively check child if it is a getprop node\n      if (!isSafeReplacement(child, replacement)) {\n        return false;\n      }\n      child = child.getNext();\n    }\n  }\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..1ed43257 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,21 +203,24 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n-    if (node.isName()) {\n-      return true;\n-    }\n-    Preconditions.checkArgument(node.isGetProp());\n-\n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n-      return false;\n+// Returns true if it is safe to replace node with replacement\n+private boolean isSafeReplacement(Node node, Node replacement) {\n+  if (node.isGetProp()) {\n+    Node child = node.getFirstChild();\n+    while (child != null) {\n+      // Check if child is assigned to replacement\n+      if (child.isName() && isNameAssignedTo(child.getString(), replacement)) {\n+        return false;\n+      }\n+      // Recursively check child if it is a getprop node\n+      if (!isSafeReplacement(child, replacement)) {\n+        return false;\n+      }\n+      child = child.getNext();\n     }\n-\n-    return true;\n   }\n+  return true;\n+}\n \n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n@@ -241,4 +244,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}