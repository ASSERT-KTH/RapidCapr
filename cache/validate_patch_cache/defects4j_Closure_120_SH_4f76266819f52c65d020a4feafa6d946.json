{
    "patch": "      if (ref == null || ref.getBasicBlock() == null) {\n        return false;\n      }\n\n      BasicBlock block = ref.getBasicBlock();\n      if (block.isFunction) {\n        return true;\n      } else if (block.isLoop) {\n        // Make sure the assignment is only present in the loop header.\n        // e.g. for (int i = 0; i < n; i++) { int a = ...; ... }\n        BasicBlock parent = block.getParent();\n        if (parent.getEntry().getJumps().size() == 1) {\n          Jump jump = parent.getEntry().getJumps().get(0);\n          if (jump.getSource() == parent.getEntry() && jump.getDestination() == block) {\n            return true;\n          }\n        }\n      }\n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e413f0ef 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,25 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (ref == null || ref.getBasicBlock() == null) {\n+        return false;\n+      }\n+\n+      BasicBlock block = ref.getBasicBlock();\n+      if (block.isFunction) {\n+        return true;\n+      } else if (block.isLoop) {\n+        // Make sure the assignment is only present in the loop header.\n+        // e.g. for (int i = 0; i < n; i++) { int a = ...; ... }\n+        BasicBlock parent = block.getParent();\n+        if (parent.getEntry().getJumps().size() == 1) {\n+          Jump jump = parent.getEntry().getJumps().get(0);\n+          if (jump.getSource() == parent.getEntry() && jump.getDestination() == block) {\n+            return true;\n+          }\n+        }\n+      }\n+      return false;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}