{
    "patch": "    attachLiteralTypes(n);\n    if (parent != null) {\n      switch (n.getType()) {\n        case Token.FUNCTION: {\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        }\n        case Token.NAME: {\n          if (NodeUtil.isFunctionExpression(n)) {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        }\n        case Token.CATCH: {\n          defineCatch(n, parent);\n          break;\n        }\n        case Token.VAR: {\n          defineVar(n, parent);\n          break;\n        }\n        case Token.LP: {\n          if (parent == scope.getRootNode()) {\n            handleFunctionInputs(parent);\n            return;\n          }\n          break;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..987d855e 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,37 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n+    attachLiteralTypes(n);\n+    if (parent != null) {\n       switch (n.getType()) {\n-        case Token.FUNCTION:\n+        case Token.FUNCTION: {\n           if (parent.getType() == Token.NAME) {\n             return;\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n-        case Token.CATCH:\n+        }\n+        case Token.NAME: {\n+          if (NodeUtil.isFunctionExpression(n)) {\n+            defineDeclaredFunction(n, parent);\n+          }\n+          break;\n+        }\n+        case Token.CATCH: {\n           defineCatch(n, parent);\n           break;\n-        case Token.VAR:\n+        }\n+        case Token.VAR: {\n           defineVar(n, parent);\n           break;\n-      }\n+        }\n+        case Token.LP: {\n+          if (parent == scope.getRootNode()) {\n+            handleFunctionInputs(parent);\n+            return;\n+          }\n+          break;\n+        }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}