{
    "patch": "        // Check if the actual type argument is a type variable with known context\n        } else if (actualTypeArgument instanceof TypeVariable && contextualActualTypeParameters.containsKey(actualTypeArgument)) {\n            Type resolvedType = this.contextualActualTypeParameters.get(actualTypeArgument);\n            if (resolvedType instanceof TypeVariable && resolvedType.equals(typeParameter)) {\n                // Resolved type variable refers back to this type parameter\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            } else {\n                // Resolved type variable with known context\n                contextualActualTypeParameters.put(typeParameter, resolvedType);\n            }\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..e49e772a3 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,19 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+        // Check if the actual type argument is a type variable with known context\n+        } else if (actualTypeArgument instanceof TypeVariable && contextualActualTypeParameters.containsKey(actualTypeArgument)) {\n+            Type resolvedType = this.contextualActualTypeParameters.get(actualTypeArgument);\n+            if (resolvedType instanceof TypeVariable && resolvedType.equals(typeParameter)) {\n+                // Resolved type variable refers back to this type parameter\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            } else {\n+                // Resolved type variable with known context\n+                contextualActualTypeParameters.put(typeParameter, resolvedType);\n+            }\n+        } else {\n+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+        }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}