{
    "patch": "public Line revert() {\n    final double epsilon = 1e-12;\n    Vector3D zero = Vector3D.ZERO;\n    Vector3D revertedDirection = direction.negate();\n    final double[] revertedDirectionArray = revertedDirection.toArray();\n    for (int i = 0; i < 3; i++) {\n        if (Math.abs(revertedDirectionArray[i]) < epsilon) {\n            revertedDirectionArray[i] = 0.0;\n        }\n    }\n    revertedDirection = new Vector3D(revertedDirectionArray);\n    return new Line(zero, revertedDirection);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..80e223f29 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,19 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+public Line revert() {\n+    final double epsilon = 1e-12;\n+    Vector3D zero = Vector3D.ZERO;\n+    Vector3D revertedDirection = direction.negate();\n+    final double[] revertedDirectionArray = revertedDirection.toArray();\n+    for (int i = 0; i < 3; i++) {\n+        if (Math.abs(revertedDirectionArray[i]) < epsilon) {\n+            revertedDirectionArray[i] = 0.0;\n+        }\n     }\n+    revertedDirection = new Vector3D(revertedDirectionArray);\n+    return new Line(zero, revertedDirection);\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "junit.framework.AssertionFailedError: arrays first differed at element [0]; expected:<0.028581782127907646> but was:<0.028581782127907653>",
    "test_result": "FAIL"
}