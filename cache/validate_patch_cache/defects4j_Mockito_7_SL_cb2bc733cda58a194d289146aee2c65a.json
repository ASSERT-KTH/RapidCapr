{
    "patch": "Type[] bounds = typeVariable.getBounds();\n\nif (bounds.length == 0) {\n    bounds = new Type[]{Object.class};\n}\n\nfor (Type type : bounds) {\n    registerTypeVariablesOn(type);\n}\n\nType actualType = getActualTypeArgumentFor(typeVariable);\n\nif (actualType != null && !actualType.equals(Object.class)) {\n    registerTypeVariablesOn(actualType);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..72ec7148d 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,26 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] bounds = typeVariable.getBounds();\n+\n+if (bounds.length == 0) {\n+    bounds = new Type[]{Object.class};\n+}\n+\n+for (Type type : bounds) {\n+    registerTypeVariablesOn(type);\n+}\n+\n+Type actualType = getActualTypeArgumentFor(typeVariable);\n+\n+if (actualType != null && !actualType.equals(Object.class)) {\n+    registerTypeVariablesOn(actualType);\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}