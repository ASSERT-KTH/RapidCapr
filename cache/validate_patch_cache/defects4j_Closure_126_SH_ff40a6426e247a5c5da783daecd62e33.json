{
    "patch": "// Recursive call on next sibling node if it exists.\nNode nextNode = n.getNext();\nif (nextNode != null) {\n  tryMinimizeExits(nextNode, exitType, labelName);\n} else if (!n.isBlock()) {\n  tryMinimizeExits(n.getParent(), exitType, labelName);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..1c3fb733 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,13 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n+// Recursive call on next sibling node if it exists.\n+Node nextNode = n.getNext();\n+if (nextNode != null) {\n+  tryMinimizeExits(nextNode, exitType, labelName);\n+} else if (!n.isBlock()) {\n+  tryMinimizeExits(n.getParent(), exitType, labelName);\n+}\n     }\n \n     // Just a 'label'.",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}