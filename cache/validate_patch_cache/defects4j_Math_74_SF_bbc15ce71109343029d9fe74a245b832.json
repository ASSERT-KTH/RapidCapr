{
    "patch": "public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0, final double t,\n                          final double[] y)\n            throws DerivativeException, IntegratorException {\n            \n    sanityChecks(equations, t0, y0, t, y);\n    setEquations(equations);\n    resetInternalState();\n    final boolean forward = t > t0;\n    stepStart = t0;\n\n    // set up an interpolator sharing the integrator arrays\n    AbstractStepInterpolator interpolator;\n    if (requiresDenseOutput() || (!eventsHandlersManager.isEmpty())) {\n        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n        rki.reinitialize(this, y, forward);\n        interpolator = rki;\n    } else {\n        interpolator = new DummyStepInterpolator(y, forward);\n    }\n    interpolator.storeTime(t0);\n\n    // set up integration control objects\n    double  hNew          = 0;\n    boolean firstTime     = true;\n    boolean last         = false;\n    boolean stepIsLast    = false;\n    boolean needToStop    = false;\n    final double[] yDot   = new double[y0.length];\n    final double[] yMidD0 = new double[y0.length];\n    final double[] yMidD1 = new double[y0.length];\n\n    for (StepHandler handler : stepHandlers) {\n      handler.reset();\n    }\n    final CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n\n    // loop over step\n    while (!last) {\n\n        interpolator.shift();\n\n        // first stage\n        if (firstTime) {\n            computeDerivatives(stepStart, y, yDot);\n        }\n        double error = 0;\n        if (vecAbsoluteTolerance == null) {\n            // scalar case\n            if (firstTime) {\n                final double scale = scalAbsoluteTolerance;\n                hNew = initializeStep(equations, forward, getOrder(),\n                                      new double[] { scale }, stepStart, y, yDot, y, yDot);\n            }\n\n            stepSize = hNew;\n            if ((stepStart + stepSize) > t) {\n                stepSize = t - stepStart;\n                last     = true;\n                stepIsLast = true;\n            }\n            OneDimensionnalSolver solver;\n            if ((stepSize >= minStep) && (stepSize <= maxStep)) {\n                solver = AdamsMoultonIntegrator.this;\n            } else {\n                solver = new FixedStepHandler(stepSize, this);\n            }\n            solver.integrate(equations, stepStart, y, stepStart + stepSize, y);\n            error = 0;\n        } else {\n            // vector case\n            if (firstTime) {\n                hNew = initializeStep(equations, forward, getOrder(), vecAbsoluteTolerance,\n                                      stepStart, y, yDot, y, yDot);\n            }\n\n            stepSize = hNew;\n            if ((stepStart + stepSize) > t) {\n                stepSize = t - stepStart;\n                last     = true;\n                stepIsLast = true;\n            }\n            rungeKuttaStep(new MidpointIntegrator(), y, yDot, stepStart, yMidD0);\n            rungeKuttaStep(new MidpointIntegrator(), yMidD0, yDot, stepStart + stepSize / 2, yMidD1);\n            rungeKuttaStep(new MidpointIntegrator(), yMidD1, yDot, stepStart + stepSize / 2, y, yDot);\n            error = computeError(y, yMidD0, yMidD1, y, stepSize);\n        }\n        firstTime = false;\n\n        // estimate the error at the end of the step\n        if (error == 0) {\n            error = 1.0e-10;\n        }\n        final double ratio  = FastMath.min(maxGrowth, FastMath.max(minReduction,\n                                                 safety * FastMath.pow(error, 1.0 / getOrder())));\n        final double adjustedStep = filterStep(FastMath.abs(stepSize * ratio), forward, stepIsLast);\n        if (error > 1.0) {\n            // reject the step\n            if (FastMath.abs(adjustedStep) < minStep) {\n\n                needToStop = true;\n\n            } else {\n\n                stepSize  = adjustedStep;\n                stepIsLast = false;\n                if (manager.evaluateStep(stepStart, y)) {\n                    // handle the events\n                    needToStop = true;\n                }\n            }\n        } else {\n\n            // accept the step\n            stepStart += stepSize;\n            System.arraycopy(y, 0, yDot, 0, y0.length);\n            interpolator.storeTime(stepStart);\n\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, last);\n            }\n            last = last || needToStop || manager.evaluateStepStep(interpolator);\n            if (last) {\n                interpolator.storeTime(t);\n            }\n\n            // prepare next step\n            double nextT = stepStart + adjustedStep;\n            if (forward ? (nextT >= t) : (nextT <= t)) {\n                nextT = t;\n                last  = true;\n            }\n            hNew = next",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 6f3e88358..ae988db68 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -189,174 +189,139 @@ public abstract class EmbeddedRungeKuttaIntegrator\n \n   /** {@inheritDoc} */\n   @Override\n-  public double integrate(final FirstOrderDifferentialEquations equations,\n-                          final double t0, final double[] y0,\n-                          final double t, final double[] y)\n-  throws DerivativeException, IntegratorException {\n-\n+public double integrate(final FirstOrderDifferentialEquations equations,\n+                          final double t0, final double[] y0, final double t,\n+                          final double[] y)\n+            throws DerivativeException, IntegratorException {\n+            \n     sanityChecks(equations, t0, y0, t, y);\n     setEquations(equations);\n-    resetEvaluations();\n+    resetInternalState();\n     final boolean forward = t > t0;\n-\n-    // create some internal working arrays\n-    final int stages = c.length + 1;\n-    if (y != y0) {\n-      System.arraycopy(y0, 0, y, 0, y0.length);\n-    }\n-    final double[][] yDotK = new double[stages][y0.length];\n-    final double[] yTmp = new double[y0.length];\n+    stepStart = t0;\n \n     // set up an interpolator sharing the integrator arrays\n     AbstractStepInterpolator interpolator;\n-    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n-      rki.reinitialize(this, yTmp, yDotK, forward);\n-      interpolator = rki;\n+    if (requiresDenseOutput() || (!eventsHandlersManager.isEmpty())) {\n+        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n+        rki.reinitialize(this, y, forward);\n+        interpolator = rki;\n     } else {\n-      interpolator = new DummyStepInterpolator(yTmp, forward);\n+        interpolator = new DummyStepInterpolator(y, forward);\n     }\n     interpolator.storeTime(t0);\n \n     // set up integration control objects\n-    stepStart         = t0;\n-    double  hNew      = 0;\n-    boolean firstTime = true;\n+    double  hNew          = 0;\n+    boolean firstTime     = true;\n+    boolean last         = false;\n+    boolean stepIsLast    = false;\n+    boolean needToStop    = false;\n+    final double[] yDot   = new double[y0.length];\n+    final double[] yMidD0 = new double[y0.length];\n+    final double[] yMidD1 = new double[y0.length];\n+\n     for (StepHandler handler : stepHandlers) {\n-        handler.reset();\n+      handler.reset();\n     }\n-    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n-    boolean lastStep = false;\n-\n-    // main integration loop\n-    while (!lastStep) {\n+    final CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n \n-      interpolator.shift();\n+    // loop over step\n+    while (!last) {\n \n-      double error = 0;\n-      for (boolean loop = true; loop;) {\n+        interpolator.shift();\n \n-        if (firstTime || !fsal) {\n-          // first stage\n-          computeDerivatives(stepStart, y, yDotK[0]);\n+        // first stage\n+        if (firstTime) {\n+            computeDerivatives(stepStart, y, yDot);\n         }\n+        double error = 0;\n+        if (vecAbsoluteTolerance == null) {\n+            // scalar case\n+            if (firstTime) {\n+                final double scale = scalAbsoluteTolerance;\n+                hNew = initializeStep(equations, forward, getOrder(),\n+                                      new double[] { scale }, stepStart, y, yDot, y, yDot);\n+            }\n \n-        if (firstTime) {\n-          final double[] scale;\n-          if (vecAbsoluteTolerance == null) {\n-              scale = new double[y0.length];\n-              java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n+            stepSize = hNew;\n+            if ((stepStart + stepSize) > t) {\n+                stepSize = t - stepStart;\n+                last     = true;\n+                stepIsLast = true;\n+            }\n+            OneDimensionnalSolver solver;\n+            if ((stepSize >= minStep) && (stepSize <= maxStep)) {\n+                solver = AdamsMoultonIntegrator.this;\n             } else {\n-              scale = vecAbsoluteTolerance;\n+                solver = new FixedStepHandler(stepSize, this);\n             }\n-          hNew = initializeStep(equations, forward, getOrder(), scale,\n-                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n-          firstTime = false;\n-        }\n-\n-        stepSize = hNew;\n-\n-        // next stages\n-        for (int k = 1; k < stages; ++k) {\n-\n-          for (int j = 0; j < y0.length; ++j) {\n-            double sum = a[k-1][0] * yDotK[0][j];\n-            for (int l = 1; l < k; ++l) {\n-              sum += a[k-1][l] * yDotK[l][j];\n+            solver.integrate(equations, stepStart, y, stepStart + stepSize, y);\n+            error = 0;\n+        } else {\n+            // vector case\n+            if (firstTime) {\n+                hNew = initializeStep(equations, forward, getOrder(), vecAbsoluteTolerance,\n+                                      stepStart, y, yDot, y, yDot);\n             }\n-            yTmp[j] = y[j] + stepSize * sum;\n-          }\n-\n-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n \n+            stepSize = hNew;\n+            if ((stepStart + stepSize) > t) {\n+                stepSize = t - stepStart;\n+                last     = true;\n+                stepIsLast = true;\n+            }\n+            rungeKuttaStep(new MidpointIntegrator(), y, yDot, stepStart, yMidD0);\n+            rungeKuttaStep(new MidpointIntegrator(), yMidD0, yDot, stepStart + stepSize / 2, yMidD1);\n+            rungeKuttaStep(new MidpointIntegrator(), yMidD1, yDot, stepStart + stepSize / 2, y, yDot);\n+            error = computeError(y, yMidD0, yMidD1, y, stepSize);\n         }\n+        firstTime = false;\n \n-        // estimate the state at the end of the step\n-        for (int j = 0; j < y0.length; ++j) {\n-          double sum    = b[0] * yDotK[0][j];\n-          for (int l = 1; l < stages; ++l) {\n-            sum    += b[l] * yDotK[l][j];\n-          }\n-          yTmp[j] = y[j] + stepSize * sum;\n+        // estimate the error at the end of the step\n+        if (error == 0) {\n+            error = 1.0e-10;\n         }\n+        final double ratio  = FastMath.min(maxGrowth, FastMath.max(minReduction,\n+                                                 safety * FastMath.pow(error, 1.0 / getOrder())));\n+        final double adjustedStep = filterStep(FastMath.abs(stepSize * ratio), forward, stepIsLast);\n+        if (error > 1.0) {\n+            // reject the step\n+            if (FastMath.abs(adjustedStep) < minStep) {\n \n-        // estimate the error at the end of the step\n-        error = estimateError(yDotK, y, yTmp, stepSize);\n-        if (error <= 1.0) {\n-\n-          // discrete events handling\n-          interpolator.storeTime(stepStart + stepSize);\n-          if (manager.evaluateStep(interpolator)) {\n-              final double dt = manager.getEventTime() - stepStart;\n-              if (Math.abs(dt) <= Math.ulp(stepStart)) {\n-                  // rejecting the step would lead to a too small next step, we accept it\n-                  loop = false;\n-              } else {\n-                  // reject the step to match exactly the next switch time\n-                  hNew = dt;\n-              }\n-          } else {\n-            // accept the step\n-            loop = false;\n-          }\n+                needToStop = true;\n \n-        } else {\n-          // reject the step and attempt to reduce error by stepsize control\n-          final double factor =\n-              Math.min(maxGrowth,\n-                       Math.max(minReduction, safety * Math.pow(error, exp)));\n-          hNew = filterStep(stepSize * factor, forward, false);\n-        }\n+            } else {\n \n-      }\n-\n-      // the step has been accepted\n-      final double nextStep = stepStart + stepSize;\n-      System.arraycopy(yTmp, 0, y, 0, y0.length);\n-      manager.stepAccepted(nextStep, y);\n-      lastStep = manager.stop();\n-\n-      // provide the step data to the step handler\n-      interpolator.storeTime(nextStep);\n-      for (StepHandler handler : stepHandlers) {\n-          handler.handleStep(interpolator, lastStep);\n-      }\n-      stepStart = nextStep;\n-\n-      if (fsal) {\n-        // save the last evaluation for the next step\n-        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n-      }\n-\n-      if (manager.reset(stepStart, y) && ! lastStep) {\n-        // some event handler has triggered changes that\n-        // invalidate the derivatives, we need to recompute them\n-        computeDerivatives(stepStart, y, yDotK[0]);\n-      }\n-\n-      if (! lastStep) {\n-        // in some rare cases we may get here with stepSize = 0, for example\n-        // when an event occurs at integration start, reducing the first step\n-        // to zero; we have to reset the step to some safe non zero value\n-          stepSize = filterStep(stepSize, forward, true);\n-\n-        // stepsize control for next step\n-        final double factor = Math.min(maxGrowth,\n-                                       Math.max(minReduction,\n-                                                safety * Math.pow(error, exp)));\n-        final double  scaledH    = stepSize * factor;\n-        final double  nextT      = stepStart + scaledH;\n-        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n-        hNew = filterStep(scaledH, forward, nextIsLast);\n-      }\n+                stepSize  = adjustedStep;\n+                stepIsLast = false;\n+                if (manager.evaluateStep(stepStart, y)) {\n+                    // handle the events\n+                    needToStop = true;\n+                }\n+            }\n+        } else {\n \n-    }\n+            // accept the step\n+            stepStart += stepSize;\n+            System.arraycopy(y, 0, yDot, 0, y0.length);\n+            interpolator.storeTime(stepStart);\n \n-    final double stopTime = stepStart;\n-    resetInternalState();\n-    return stopTime;\n+            for (StepHandler handler : stepHandlers) {\n+                handler.handleStep(interpolator, last);\n+            }\n+            last = last || needToStop || manager.evaluateStepStep(interpolator);\n+            if (last) {\n+                interpolator.storeTime(t);\n+            }\n \n-  }\n+            // prepare next step\n+            double nextT = stepStart + adjustedStep;\n+            if (forward ? (nextT >= t) : (nextT <= t)) {\n+                nextT = t;\n+                last  = true;\n+            }\n+            hNew = next\n \n   /** Get the minimal reduction factor for stepsize control.\n    * @return minimal reduction factor",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}