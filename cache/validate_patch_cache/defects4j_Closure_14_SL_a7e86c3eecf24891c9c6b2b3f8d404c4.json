{
    "patch": "if (cfa != null) {\n    if (finallyNode != null) {\n        Node follow = computeFollowNode(fromNode, finallyNode, cfa);\n        if (follow != null) {\n            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            for (Node finallyNext : cfa.getSuccessors(finallyNode)) {\n                cfa.createEdge(finallyNode, Branch.UNCOND, finallyNext);\n            }\n            cfa.createEdge(finallyNode, Branch.UNCOND, follow);\n        } else {\n            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            for (Node finallyNext : cfa.getSuccessors(finallyNode)) {\n                cfa.createEdge(finallyNode, Branch.UNCOND, finallyNext);\n            }\n        }\n    } else {\n        return computeFollowNode(fromNode, parent, cfa);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..210b89fb 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,25 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+    if (finallyNode != null) {\n+        Node follow = computeFollowNode(fromNode, finallyNode, cfa);\n+        if (follow != null) {\n+            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+            for (Node finallyNext : cfa.getSuccessors(finallyNode)) {\n+                cfa.createEdge(finallyNode, Branch.UNCOND, finallyNext);\n+            }\n+            cfa.createEdge(finallyNode, Branch.UNCOND, follow);\n+        } else {\n+            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+            for (Node finallyNext : cfa.getSuccessors(finallyNode)) {\n+                cfa.createEdge(finallyNode, Branch.UNCOND, finallyNext);\n+            }\n+        }\n+    } else {\n+        return computeFollowNode(fromNode, parent, cfa);\n+    }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}