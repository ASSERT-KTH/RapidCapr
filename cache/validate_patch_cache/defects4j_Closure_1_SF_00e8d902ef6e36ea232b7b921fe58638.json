{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    Set<String> referencedArgs = new HashSet<>();\n\n    if (!modifyCallers && argList.hasChildren()) {\n        // Iterate through all arguments, marking referenced ones and removing unreferenced ones.\n        for (Node arg : argList.children()) {\n            Var var = fnScope.getVar(arg.getString());\n            if (var != null && referenced.contains(var)) {\n                referencedArgs.add(arg.getString());\n            } else {\n                arg.detach();\n                compiler.reportCodeChange();\n            }\n        }\n\n        // If we removed any arguments, update the function name and \"arguments\" object accordingly.\n        if (argList.getChildCount() != referencedArgs.size()) {\n            updateFunctionNameAndArguments(function, argList, referencedArgs);\n        }\n\n    } else if (modifyCallers) {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}\n\nprivate void updateFunctionNameAndArguments(Node function, Node argList, Set<String> referencedArgs) {\n    Node name = function.getFirstChild();\n    if (name != null && name.isName()) {\n        // If the function has a name, update the name to reflect the new argument list.\n        String oldName = name.getString();\n        String newName = oldName + \"$$\" + referencedArgs.size();\n        name.setString(newName);\n\n        // Fix up calls to the function with the old name in the body of the function.\n        NodeTraversal.traverse(compiler, function.getLastChild(), new UpdateFunctionCallsWithNewName(oldName, newName));\n    }\n\n    Node arguments = function.getLastChild();\n    Preconditions.checkState(arguments.isParamList());\n    arguments.removeChildren();\n\n    // Re-add only the referenced arguments to the \"arguments\" object.\n    for (Node arg : argList.children()) {\n        if (referencedArgs.contains(arg.getString())) {\n            arguments.addChildToBack(new Node(Token.NAME, arg));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bbed0c28 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,64 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     Node function = fnScope.getRootNode();\n-\n     Preconditions.checkState(function.isFunction());\n+\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n+        // The parameters object literal setters can not be removed.\n+        return;\n     }\n \n     Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    Set<String> referencedArgs = new HashSet<>();\n+\n+    if (!modifyCallers && argList.hasChildren()) {\n+        // Iterate through all arguments, marking referenced ones and removing unreferenced ones.\n+        for (Node arg : argList.children()) {\n+            Var var = fnScope.getVar(arg.getString());\n+            if (var != null && referenced.contains(var)) {\n+                referencedArgs.add(arg.getString());\n+            } else {\n+                arg.detach();\n+                compiler.reportCodeChange();\n+            }\n         }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+\n+        // If we removed any arguments, update the function name and \"arguments\" object accordingly.\n+        if (argList.getChildCount() != referencedArgs.size()) {\n+            updateFunctionNameAndArguments(function, argList, referencedArgs);\n+        }\n+\n+    } else if (modifyCallers) {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+}\n+\n+private void updateFunctionNameAndArguments(Node function, Node argList, Set<String> referencedArgs) {\n+    Node name = function.getFirstChild();\n+    if (name != null && name.isName()) {\n+        // If the function has a name, update the name to reflect the new argument list.\n+        String oldName = name.getString();\n+        String newName = oldName + \"$$\" + referencedArgs.size();\n+        name.setString(newName);\n+\n+        // Fix up calls to the function with the old name in the body of the function.\n+        NodeTraversal.traverse(compiler, function.getLastChild(), new UpdateFunctionCallsWithNewName(oldName, newName));\n+    }\n+\n+    Node arguments = function.getLastChild();\n+    Preconditions.checkState(arguments.isParamList());\n+    arguments.removeChildren();\n+\n+    // Re-add only the referenced arguments to the \"arguments\" object.\n+    for (Node arg : argList.children()) {\n+        if (referencedArgs.contains(arg.getString())) {\n+            arguments.addChildToBack(new Node(Token.NAME, arg));\n+        }\n+    }\n+}\n \n \n   /**",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}