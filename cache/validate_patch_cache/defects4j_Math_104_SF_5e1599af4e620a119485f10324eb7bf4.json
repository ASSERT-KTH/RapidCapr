{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0) {\n        return Double.NaN;\n    }\n    if (x == 0) {\n        return 0;\n    }\n    if (x >= a + 1) {\n        double b = x + 1;\n        double c = 1 / (b * 9);\n        double d = x - a;\n        double f = c * d;\n        double g = f * d;\n        double h = g * d;\n        double i = h * d;\n        double j = i * d;\n        return normalisedIncompleteGamma(a, x) * Math.exp(-x + a * Math.log(x) - (gama.logGamma(a) + Math.log(b) + f - j));\n    } else {\n        double b = x + 1;\n        double p = b;\n        double c = p;\n        double d = 0;\n        double f = a;\n        int i;\n        for (i = 1; i <= 200; i++) {\n            double an = -i * (i - a);\n            b += 2;\n            d = an * d + b;\n            if (Math.abs(d) < Double.MIN_VALUE) {\n                d = Double.MIN_VALUE;\n            }\n            c = b + an / c;\n            if (Math.abs(c) < Double.MIN_VALUE) {\n                c = Double.MIN_VALUE;\n            }\n            d = 1 / d;\n            double del = d * c;\n            f *= del;\n            if (Math.abs(del - 1.0) < 1.9e-15) {\n                break;\n            }\n        }\n        return 1 - f * Math.exp(-x + a * Math.log(x) - gama.logGamma(a));\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..7a99b5fac 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,51 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0) {\n+        return 0;\n+    }\n+    if (x >= a + 1) {\n+        double b = x + 1;\n+        double c = 1 / (b * 9);\n+        double d = x - a;\n+        double f = c * d;\n+        double g = f * d;\n+        double h = g * d;\n+        double i = h * d;\n+        double j = i * d;\n+        return normalisedIncompleteGamma(a, x) * Math.exp(-x + a * Math.log(x) - (gama.logGamma(a) + Math.log(b) + f - j));\n+    } else {\n+        double b = x + 1;\n+        double p = b;\n+        double c = p;\n+        double d = 0;\n+        double f = a;\n+        int i;\n+        for (i = 1; i <= 200; i++) {\n+            double an = -i * (i - a);\n+            b += 2;\n+            d = an * d + b;\n+            if (Math.abs(d) < Double.MIN_VALUE) {\n+                d = Double.MIN_VALUE;\n+            }\n+            c = b + an / c;\n+            if (Math.abs(c) < Double.MIN_VALUE) {\n+                c = Double.MIN_VALUE;\n+            }\n+            d = 1 / d;\n+            double del = d * c;\n+            f *= del;\n+            if (Math.abs(del - 1.0) < 1.9e-15) {\n+                break;\n+            }\n+        }\n+        return 1 - f * Math.exp(-x + a * Math.log(x) - gama.logGamma(a));\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}