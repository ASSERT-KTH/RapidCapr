{
    "patch": "public double getTypedPercent(String js) {\n    int typedCount = 0;\n    int totalCount = 0;\n\n    for (char c : js.toCharArray()) {\n        if (c == '{' || c == '}') {\n            totalCount++;\n            if (c == '{') {\n                typedCount++;\n            }\n        }\n    }\n\n    if (totalCount == 0) {\n        return 0.0;\n    }\n\n    return (double) typedCount / totalCount * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..6a6fee60 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String js) {\n+    int typedCount = 0;\n+    int totalCount = 0;\n+\n+    for (char c : js.toCharArray()) {\n+        if (c == '{' || c == '}') {\n+            totalCount++;\n+            if (c == '{') {\n+                typedCount++;\n+            }\n+        }\n+    }\n+\n+    if (totalCount == 0) {\n+        return 0.0;\n+    }\n+\n+    return (double) typedCount / totalCount * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}