{
    "patch": "// Don't traverse functions that are getting lent to a prototype.\nif (parent != null && parent.getType() == Token.ASSIGN) {\n  Node lhs = parent.getFirstChild();\n  Node rhs = lhs.getNext();\n  if (lhs.getType() == Token.GETPROP) {\n    Node llhs = lhs.getFirstChild();\n    String propName = lhs.getLastChild().getString();\n    if (llhs.getType() == Token.NAME && llhs.getString().equals(\"Object\") &&\n        methodNameToString(lhs.getNext()) != null &&\n        (propName.equals(\"prototype\") ||\n         propName.equals(\"constructor\") ||\n         propName.equals(\"superClass_\"))) {\n      return false;\n    } else if (NodeUtil.isPrototypeProperty(lhs) ||\n               QName.create(lhs).isQualified() ||\n               rhs.getLastChild().getType() == Token.FUNCTION) {\n      // Don't traverse sub-properties of prototype assignments.\n      return false;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..3e810fc3 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,27 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+// Don't traverse functions that are getting lent to a prototype.\n+if (parent != null && parent.getType() == Token.ASSIGN) {\n+  Node lhs = parent.getFirstChild();\n+  Node rhs = lhs.getNext();\n+  if (lhs.getType() == Token.GETPROP) {\n+    Node llhs = lhs.getFirstChild();\n+    String propName = lhs.getLastChild().getString();\n+    if (llhs.getType() == Token.NAME && llhs.getString().equals(\"Object\") &&\n+        methodNameToString(lhs.getNext()) != null &&\n+        (propName.equals(\"prototype\") ||\n+         propName.equals(\"constructor\") ||\n+         propName.equals(\"superClass_\"))) {\n+      return false;\n+    } else if (NodeUtil.isPrototypeProperty(lhs) ||\n+               QName.create(lhs).isQualified() ||\n+               rhs.getLastChild().getType() == Token.FUNCTION) {\n+      // Don't traverse sub-properties of prototype assignments.\n+      return false;\n+    }\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}