{
    "patch": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n        case Token.ASSIGN:\n            return NodeUtil.isImmutableValue(value.getLastChild())\n                || (locals.test(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return Stream.of(value.getFirstChild(), value.getLastChild())\n                .allMatch(child -> evaluatesToLocalValue(child, locals));\n        case Token.HOOK:\n            return Stream.of(value.getFirstChild().getNext(), value.getLastChild())\n                .allMatch(child -> evaluatesToLocalValue(child, locals));\n        case Token.INC:\n        case Token.DEC:\n            return value.getBooleanProp(Node.INCRDECR_PROP)\n                ? evaluatesToLocalValue(value.getFirstChild(), locals)\n                : true;\n        case Token.THIS:\n            return locals.test(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.test(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            return locals.test(value);\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.test(value);\n        case Token.NEW:\n            return value.getFirstChild().getType() == Token.FUNCTION;\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            return true;\n        case Token.IN:\n            return true;\n        default:\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value +\n                \"\\n parent:\" + value.getParent());\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex dd78f900..8ad53019 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2421,72 +2421,51 @@ public final class NodeUtil {\n    * @return Whether the node is known to be a value that is not a reference\n    *     outside the expression scope.\n    */\n-  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n+static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n     switch (value.getType()) {\n-      case Token.ASSIGN:\n-        // A result that is aliased by a non-local name, is the effectively the\n-        // same as returning a non-local name, but this doesn't matter if the\n-        // value is immutable.\n-        return NodeUtil.isImmutableValue(value.getLastChild())\n-            || (locals.apply(value)\n-                && evaluatesToLocalValue(value.getLastChild(), locals));\n-      case Token.COMMA:\n-        return evaluatesToLocalValue(value.getLastChild(), locals);\n-      case Token.AND:\n-      case Token.OR:\n-        return evaluatesToLocalValue(value.getFirstChild(), locals)\n-           && evaluatesToLocalValue(value.getLastChild(), locals);\n-      case Token.HOOK:\n-        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n-           && evaluatesToLocalValue(value.getLastChild(), locals);\n-      case Token.INC:\n-      case Token.DEC:\n-        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n-          return evaluatesToLocalValue(value.getFirstChild(), locals);\n-        } else {\n-          return true;\n-        }\n-      case Token.THIS:\n-        return locals.apply(value);\n-      case Token.NAME:\n-        return isImmutableValue(value) || locals.apply(value);\n-      case Token.GETELEM:\n-      case Token.GETPROP:\n-        // There is no information about the locality of object properties.\n-        return locals.apply(value);\n-      case Token.CALL:\n-        return callHasLocalResult(value)\n-            || isToStringMethodCall(value)\n-            || locals.apply(value);\n-      case Token.NEW:\n-        // TODO(nicksantos): This needs to be changed so that it\n-        // returns true iff we're sure the value was never aliased from inside\n-        // the constructor (similar to callHasLocalResult)\n-        return true;\n-      case Token.FUNCTION:\n-      case Token.REGEXP:\n-      case Token.ARRAYLIT:\n-      case Token.OBJECTLIT:\n-        // Literals objects with non-literal children are allowed.\n-        return true;\n-      case Token.IN:\n-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n-        return true;\n-      default:\n-        // Other op force a local value:\n-        //  x = '' + g (x is now an local string)\n-        //  x -= g (x is now an local number)\n-        if (isAssignmentOp(value)\n-            || isSimpleOperator(value)\n-            || isImmutableValue(value)) {\n-          return true;\n-        }\n-\n-        throw new IllegalStateException(\n-            \"Unexpected expression node\" + value +\n-            \"\\n parent:\" + value.getParent());\n+        case Token.ASSIGN:\n+            return NodeUtil.isImmutableValue(value.getLastChild())\n+                || (locals.test(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n+        case Token.COMMA:\n+            return evaluatesToLocalValue(value.getLastChild(), locals);\n+        case Token.AND:\n+        case Token.OR:\n+            return Stream.of(value.getFirstChild(), value.getLastChild())\n+                .allMatch(child -> evaluatesToLocalValue(child, locals));\n+        case Token.HOOK:\n+            return Stream.of(value.getFirstChild().getNext(), value.getLastChild())\n+                .allMatch(child -> evaluatesToLocalValue(child, locals));\n+        case Token.INC:\n+        case Token.DEC:\n+            return value.getBooleanProp(Node.INCRDECR_PROP)\n+                ? evaluatesToLocalValue(value.getFirstChild(), locals)\n+                : true;\n+        case Token.THIS:\n+            return locals.test(value);\n+        case Token.NAME:\n+            return isImmutableValue(value) || locals.test(value);\n+        case Token.GETELEM:\n+        case Token.GETPROP:\n+            return locals.test(value);\n+        case Token.CALL:\n+            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.test(value);\n+        case Token.NEW:\n+            return value.getFirstChild().getType() == Token.FUNCTION;\n+        case Token.FUNCTION:\n+        case Token.REGEXP:\n+        case Token.ARRAYLIT:\n+        case Token.OBJECTLIT:\n+            return true;\n+        case Token.IN:\n+            return true;\n+        default:\n+            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n+                return true;\n+            }\n+            throw new IllegalStateException(\"Unexpected expression node\" + value +\n+                \"\\n parent:\" + value.getParent());\n     }\n-  }\n+}\n \n   /**\n    * Given the first sibling, this returns the nth",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}