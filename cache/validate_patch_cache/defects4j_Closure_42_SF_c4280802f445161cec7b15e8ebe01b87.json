{
    "patch": "class IRFactory {\n  private final String sourceName;\n  private final ErrorReporter errorReporter;\n\n  IRFactory(String sourceName, ErrorReporter errorReporter) {\n    this.sourceName = sourceName;\n    this.errorReporter = errorReporter;\n  }\n\n  Node transform(AstNode node) {\n    TransformDispatcher dispatcher = new TransformDispatcher();\n    return dispatcher.transform(node);\n  }\n\n  private class TransformDispatcher implements NodeVisitor {\n    @Override\n    public Node visit(AstNode node) {\n      return node.accept(this);\n    }\n\n    @Override\n    public Node visitArrayComprehension(ArrayComprehension node) {\n      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n    }\n\n    @Override\n    public Node visitArrayComprehensionLoop(ArrayComprehensionLoop node) {\n      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n    }\n\n    @Override\n    public Node visitBinaryExpr(BinaryExpression node) {\n      return newNode(\n          transformTokenType(node.getType()),\n          transform(node.getLeft()),\n          transform(node.getRight()));\n    }\n\n    @Override\n    public Node visitBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n\n    @Override\n    public Node visitBraceN(BraceN node) {\n      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n    }\n\n    @Override\n    public Node visitBreak(BreakStatement statementNode) {\n      Node node = newNode(Token.BREAK);\n      if (statementNode.getBreakLabel() != null) {\n        Node labelName = transform(statementNode.getBreakLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    public Node visitCatch(CatchClause clauseNode) {\n      AstNode catchVar = clauseNode.getCatchCondition();\n      Node node;\n      if (catchVar != null) {\n        throw new UnsupportedOperationException(\"Catch with condition not supported\");\n      }\n      AstNode catchBody = clauseNode.getBody();\n      AstNode catchIdentifier = clauseNode.getVarName();\n      node = newNode(Token.CATCH, transform(catchIdentifier), transform(catchBody));\n      return node;\n    }\n\n    @Override\n    public Node visitConditionalExpression(ConditionalExpression node) {\n      return newNode(\n          Token.HOOK,\n          transform(node.getTestExpression()),\n          transform(node.getTrueExpression()),\n          transform(node.getFalseExpression()));\n    }\n\n    @Override\n    public Node visitContinue(ContinueStatement statementNode) {\n      Node node = newNode(Token.CONTINUE);\n      if (statementNode.getLabel() != null) {\n        Node labelName = transform(statementNode.getLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    public Node visitDoLoop(DoLoop loopNode) {\n      return newNode(\n          Token.DO,\n          transform(loopNode.getBody()),\n          transform(loopNode.getCondition()),\n          null);\n    }\n\n    @Override\n    public Node visitElementGet(ElementGet getNode) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..50a739e1 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,22 +473,56 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+class IRFactory {\n+  private final String sourceName;\n+  private final ErrorReporter errorReporter;\n+\n+  IRFactory(String sourceName, ErrorReporter errorReporter) {\n+    this.sourceName = sourceName;\n+    this.errorReporter = errorReporter;\n+  }\n+\n+  Node transform(AstNode node) {\n+    TransformDispatcher dispatcher = new TransformDispatcher();\n+    return dispatcher.transform(node);\n+  }\n+\n+  private class TransformDispatcher implements NodeVisitor {\n+    @Override\n+    public Node visit(AstNode node) {\n+      return node.accept(this);\n+    }\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+    @Override\n+    public Node visitArrayComprehension(ArrayComprehension node) {\n+      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n+    }\n+\n+    @Override\n+    public Node visitArrayComprehensionLoop(ArrayComprehensionLoop node) {\n+      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n     }\n \n     @Override\n-    Node processBlock(Block blockNode) {\n+    public Node visitBinaryExpr(BinaryExpression node) {\n+      return newNode(\n+          transformTokenType(node.getType()),\n+          transform(node.getLeft()),\n+          transform(node.getRight()));\n+    }\n+\n+    @Override\n+    public Node visitBlock(Block blockNode) {\n       return processGeneric(blockNode);\n     }\n \n     @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n+    public Node visitBraceN(BraceN node) {\n+      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n+    }\n+\n+    @Override\n+    public Node visitBreak(BreakStatement statementNode) {\n       Node node = newNode(Token.BREAK);\n       if (statementNode.getBreakLabel() != null) {\n         Node labelName = transform(statementNode.getBreakLabel());\n@@ -500,30 +534,29 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+    public Node visitCatch(CatchClause clauseNode) {\n+      AstNode catchVar = clauseNode.getCatchCondition();\n+      Node node;\n+      if (catchVar != null) {\n+        throw new UnsupportedOperationException(\"Catch with condition not supported\");\n       }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n+      AstNode catchBody = clauseNode.getBody();\n+      AstNode catchIdentifier = clauseNode.getVarName();\n+      node = newNode(Token.CATCH, transform(catchIdentifier), transform(catchBody));\n       return node;\n     }\n \n     @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n+    public Node visitConditionalExpression(ConditionalExpression node) {\n       return newNode(\n           Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+          transform(node.getTestExpression()),\n+          transform(node.getTrueExpression()),\n+          transform(node.getFalseExpression()));\n     }\n \n     @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n+    public Node visitContinue(ContinueStatement statementNode) {\n       Node node = newNode(Token.CONTINUE);\n       if (statementNode.getLabel() != null) {\n         Node labelName = transform(statementNode.getLabel());\n@@ -535,44 +568,16 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processDoLoop(DoLoop loopNode) {\n+    public Node visitDoLoop(DoLoop loopNode) {\n       return newNode(\n           Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+          transform(loopNode.getBody()),\n+          transform(loopNode.getCondition()),\n+          null);\n     }\n \n     @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+    public Node visitElementGet(ElementGet getNode) {\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}