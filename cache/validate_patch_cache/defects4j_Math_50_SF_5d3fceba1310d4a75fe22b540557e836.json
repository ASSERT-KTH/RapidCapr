{
    "patch": "import org.apache.commons.math.analysis.DifferentiableUnivariateFunction;\nimport org.apache.commons.math.analysis.UnivariateFunction;\nimport org.apache.commons.math.exception.MathInternalError;\nimport org.apache.commons.math.exception.TooManyEvaluationsException;\nimport org.apache.commons.math.util.FastMath;\n\npublic class BracketingNthOrderBrentSolver\n    extends AbstractUnivariateSolver\n    implements BracketedUnivariateSolver<UnivariateFunction>,\n               DifferentiableUnivariateSolver {\n    /** Function value at the last computed point. */\n    private double f0;\n    /** Function value at the last computed point. */\n    private double f1;\n    /** Function value before last computed point. */\n    private double f2;\n    /** Function value previous to last computed point. */\n    private double f3;\n    /**\n     * If {@code true}, the last guess was \"to the left\" of the root, which implies\n     * that the successive root estimate returned the left endpoint of the bracketing\n     * interval.\n     */\n    private boolean isLastIntervalOnLeft;\n    // following are used in findPos()\n    /** Initial guess. */\n    private double x0;\n    /** Monotonicity of the function over the bracket. */\n    private boolean isStrictlyMonotonic;\n    /** Lower bound for bracketing. */\n    private double lowerBound;\n    /** Upper bound for bracketing. */\n    private double upperBound;\n    /** Difference between the last and the first guess. */\n    private double delta;\n    /** Absolute tolerance. */\n    private double absoluteAccuracy;\n    /** Relative tolerance. */\n    private double relativeAccuracy;\n\n    /**\n     * Construct a solver with default accuracy (1e-6).\n     */\n    public BracketingNthOrderBrentSolver() {\n        super(DEFAULT_ABSOLUTE_ACCURACY, Method.BRENT);\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param absoluteAccuracy Absolute accuracy.\n     */\n    public BracketingNthOrderBrentSolver(final double absoluteAccuracy) {\n        super(absoluteAccuracy, Method.BRENT);\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param relativeAccuracy Relative accuracy.\n     * @param absoluteAccuracy Absolute accuracy.\n     */\n    public BracketingNthOrderBrentSolver(final double relativeAccuracy,\n                                         final double absoluteAccuracy) {\n        super(relativeAccuracy, absoluteAccuracy, Method.BRENT);\n    }\n\n    /**\n     * Construct a solver with the given accuracy.\n     *\n     * @param relativeAccuracy Relative accuracy.\n     * @param absoluteAccuracy Absolute accuracy.\n     * @param functionValueAccuracy Maximum absolute error in function values.\n     */\n    public BracketingNthOrderBrentSolver(final double relativeAccuracy,\n                                         final double absoluteAccuracy,\n                                         final double functionValueAccuracy) {\n        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.BRENT);\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    protected double doSolve() {\n        double y0;\n        double y1;\n        double y2;\n        double y3;\n        double minTol;\n        double x1;\n        double x2;\n        double x3;\n        double root;\n\n        // Initialization of the protected variables\n        final double fMin = getFunctionValueAccuracy();\n        x0 = getMin();\n        x3 = getMax();\n        y0 = computeObjectiveValue(x0);\n        y3 = computeObjectiveValue(x3);\n\n        // Verify bracketing and determine the minimum tolerance.\n        verifyBracketing(x0, x3);\n        checkResultLimits();\n\n        // Save first function evaluation.\n        f0 = y0;\n\n        if (FastMath.abs(y0) <= fMin) {\n            // Solution found and it's exact.\n            return x0;\n        }\n        if (FastMath.abs(y3) <= fMin) {\n            // Solution found and it's exact.\n            return x3;\n        }\n\n        // Save second function evaluation.\n        x2 = x3;\n        x1 = x0;\n        y2 = y3;\n        y1 = y0;\n\n        final double mu = 0.5 * (1 + FastMath.sqrt(5));\n        final double mu2 = mu * mu;\n        final double d1 = 0.5 * (mu2 - mu);\n        final double d2 = d1 * d1;\n        boolean inverted = false;\n\n        // Outer loop.\n        while (true) {\n\n            // Decide on the extrapolation direction and check\n            // the minimum subinterval length to accept convergence.\n            final double delta2;\n            final double xmid;\n            if (FastMath.abs(y2 - y1) > FastMath.abs(y3 - y2)) {\n                // First case: extrapolation in the y1-y2 plane.\n                final double dx12 = x2 - x1;\n                final double dy12 = y2 - y1;\n                final double dx23 = x3 - x2;\n                final double dy23 = y3 - y2;\n                final double denom = dx12 * dy23 - dx23 * dy12;\n                if (denom == 0) {\n                    // Inverse slopes are equal.\n                    delta2 = Double.POSITIVE_INFINITY;\n                } else {\n                    final double d12 = x1 - x2;\n                    final double d23 = x2 - x3;\n                    final double a = d23 * dy12 / denom;\n                    final double b = d12 * dy23 / denom;\n                    delta2 = (b + a) * (b - a);\n                }\n                // x2 is the midpoint of the interval to subdivide.\n                xmid = x2 - delta2 * (y3 - y2) / (2 * (y3 - y1 - delta2 * (y2 - y1)));\n            } else {\n                // Second case: extrapolation in the y2-y3 plane.\n                final double dx12 = x2 - x1;\n                final double dy12 = y2 - y1;\n                final double dx23 = x3 - x2;\n                final double dy23 = y3 - y2;\n                final double denom = dx12 * dy23 - dx23 * dy12;\n                if (denom == 0) {\n                    // Inverse slopes are equal.\n                    delta2 = Double.POSITIVE_INFINITY;\n                } else {\n                    final double d12 = x1 - x2;\n                    final double d23 = x2 - x3;\n                    final double a = d23 * dy12 / denom;\n                    final double b = d12 * dy23 / denom;\n                    delta2 = (b + a) * (b - a);\n                }\n                // x2 is the midpoint of the interval to subdivide.\n                xmid = x2 + delta2 * (y2 - y1) / (2 * (y3 - y1 - delta2 * (y2 - y1)));\n            }\n\n            // Check for convergence.\n            final double tol1 = getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(x2), FastMath.abs(xmid));\n            if (FastMath.abs(xmid - x2) <= tol1) {\n                y2 = (FastMath.abs(y2) < FastMath.abs(y3)) ? y1 : y3;\n                xmid = 0.5 * (x1 + x3);\n                minTol = inverted ? getRelativeAccuracy() * FastMath.abs(x2 - x1) : tol1;\n                if ((xmid <= lowerBound) || (xmid >= upperBound)) {\n                    // Do a bisection instead of returning with NaN.\n                    inverted = false;\n                    xmid = 0.5d * (lowerBound + upperBound);\n                    if (FastMath.abs(upperBound - lowerBound) < minTol) {\n                        root = xmid;\n                        if (resultComputedUnchecked) {\n                            setResult(root, i);\n                        }\n                        return root;\n                    }\n                }\n                if (FastMath.abs(y2) <= fMin) {\n                    root = xmid;  // Simple zero found.\n                    if (resultComputedUnchecked) {\n                        setResult(root, i);\n                    }\n                    return root;\n                }\n            } else if (i >= getMaximalIterationCount()) {\n                throw new TooManyEvaluationsException(getMaximalIterationCount());\n            } else if (FastMath.abs(delta2) < getAbsoluteAccuracy()) {\n                minTol = inverted ? getRelativeAccuracy() * FastMath.abs(x2 - x1) : tol1;\n                if ((x2 <= lowerBound) || (x2 >= upperBound)) {\n                    // Do a bisection instead of returning with NaN.\n                    inverted = false;\n                    xmid = 0.5d * (lowerBound + upperBound);\n                    if (FastMath.abs(upperBound - lowerBound) < minTol) {\n                        root = xmid;\n                        if (resul",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..caba8ce11 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,132 +125,217 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n-\n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n+import org.apache.commons.math.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math.analysis.UnivariateFunction;\n+import org.apache.commons.math.exception.MathInternalError;\n+import org.apache.commons.math.exception.TooManyEvaluationsException;\n+import org.apache.commons.math.util.FastMath;\n+\n+public class BracketingNthOrderBrentSolver\n+    extends AbstractUnivariateSolver\n+    implements BracketedUnivariateSolver<UnivariateFunction>,\n+               DifferentiableUnivariateSolver {\n+    /** Function value at the last computed point. */\n+    private double f0;\n+    /** Function value at the last computed point. */\n+    private double f1;\n+    /** Function value before last computed point. */\n+    private double f2;\n+    /** Function value previous to last computed point. */\n+    private double f3;\n+    /**\n+     * If {@code true}, the last guess was \"to the left\" of the root, which implies\n+     * that the successive root estimate returned the left endpoint of the bracketing\n+     * interval.\n+     */\n+    private boolean isLastIntervalOnLeft;\n+    // following are used in findPos()\n+    /** Initial guess. */\n+    private double x0;\n+    /** Monotonicity of the function over the bracket. */\n+    private boolean isStrictlyMonotonic;\n+    /** Lower bound for bracketing. */\n+    private double lowerBound;\n+    /** Upper bound for bracketing. */\n+    private double upperBound;\n+    /** Difference between the last and the first guess. */\n+    private double delta;\n+    /** Absolute tolerance. */\n+    private double absoluteAccuracy;\n+    /** Relative tolerance. */\n+    private double relativeAccuracy;\n+\n+    /**\n+     * Construct a solver with default accuracy (1e-6).\n+     */\n+    public BracketingNthOrderBrentSolver() {\n+        super(DEFAULT_ABSOLUTE_ACCURACY, Method.BRENT);\n+    }\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param absoluteAccuracy Absolute accuracy.\n+     */\n+    public BracketingNthOrderBrentSolver(final double absoluteAccuracy) {\n+        super(absoluteAccuracy, Method.BRENT);\n+    }\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n+     */\n+    public BracketingNthOrderBrentSolver(final double relativeAccuracy,\n+                                         final double absoluteAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy, Method.BRENT);\n+    }\n+\n+    /**\n+     * Construct a solver with the given accuracy.\n+     *\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n+     * @param functionValueAccuracy Maximum absolute error in function values.\n+     */\n+    public BracketingNthOrderBrentSolver(final double relativeAccuracy,\n+                                         final double absoluteAccuracy,\n+                                         final double functionValueAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.BRENT);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    protected double doSolve() {\n+        double y0;\n+        double y1;\n+        double y2;\n+        double y3;\n+        double minTol;\n+        double x1;\n+        double x2;\n+        double x3;\n+        double root;\n+\n+        // Initialization of the protected variables\n+        final double fMin = getFunctionValueAccuracy();\n+        x0 = getMin();\n+        x3 = getMax();\n+        y0 = computeObjectiveValue(x0);\n+        y3 = computeObjectiveValue(x3);\n+\n+        // Verify bracketing and determine the minimum tolerance.\n+        verifyBracketing(x0, x3);\n+        checkResultLimits();\n+\n+        // Save first function evaluation.\n+        f0 = y0;\n+\n+        if (FastMath.abs(y0) <= fMin) {\n+            // Solution found and it's exact.\n             return x0;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n+        if (FastMath.abs(y3) <= fMin) {\n+            // Solution found and it's exact.\n+            return x3;\n         }\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+        // Save second function evaluation.\n+        x2 = x3;\n+        x1 = x0;\n+        y2 = y3;\n+        y1 = y0;\n \n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n-\n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n+        final double mu = 0.5 * (1 + FastMath.sqrt(5));\n+        final double mu2 = mu * mu;\n+        final double d1 = 0.5 * (mu2 - mu);\n+        final double d2 = d1 * d1;\n         boolean inverted = false;\n \n-        // Keep finding better approximations.\n+        // Outer loop.\n         while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n-\n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n-            }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n+            // Decide on the extrapolation direction and check\n+            // the minimum subinterval length to accept convergence.\n+            final double delta2;\n+            final double xmid;\n+            if (FastMath.abs(y2 - y1) > FastMath.abs(y3 - y2)) {\n+                // First case: extrapolation in the y1-y2 plane.\n+                final double dx12 = x2 - x1;\n+                final double dy12 = y2 - y1;\n+                final double dx23 = x3 - x2;\n+                final double dy23 = y3 - y2;\n+                final double denom = dx12 * dy23 - dx23 * dy12;\n+                if (denom == 0) {\n+                    // Inverse slopes are equal.\n+                    delta2 = Double.POSITIVE_INFINITY;\n+                } else {\n+                    final double d12 = x1 - x2;\n+                    final double d23 = x2 - x3;\n+                    final double a = d23 * dy12 / denom;\n+                    final double b = d12 * dy23 / denom;\n+                    delta2 = (b + a) * (b - a);\n+                }\n+                // x2 is the midpoint of the interval to subdivide.\n+                xmid = x2 - delta2 * (y3 - y2) / (2 * (y3 - y1 - delta2 * (y2 - y1)));\n             } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n-                    break;\n-                default:\n-                    // Should never happen.\n-                    throw new MathInternalError();\n+                // Second case: extrapolation in the y2-y3 plane.\n+                final double dx12 = x2 - x1;\n+                final double dy12 = y2 - y1;\n+                final double dx23 = x3 - x2;\n+                final double dy23 = y3 - y2;\n+                final double denom = dx12 * dy23 - dx23 * dy12;\n+                if (denom == 0) {\n+                    // Inverse slopes are equal.\n+                    delta2 = Double.POSITIVE_INFINITY;\n+                } else {\n+                    final double d12 = x1 - x2;\n+                    final double d23 = x2 - x3;\n+                    final double a = d23 * dy12 / denom;\n+                    final double b = d12 * dy23 / denom;\n+                    delta2 = (b + a) * (b - a);\n                 }\n+                // x2 is the midpoint of the interval to subdivide.\n+                xmid = x2 + delta2 * (y2 - y1) / (2 * (y3 - y1 - delta2 * (y2 - y1)));\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n-\n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n+\n+            // Check for convergence.\n+            final double tol1 = getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(x2), FastMath.abs(xmid));\n+            if (FastMath.abs(xmid - x2) <= tol1) {\n+                y2 = (FastMath.abs(y2) < FastMath.abs(y3)) ? y1 : y3;\n+                xmid = 0.5 * (x1 + x3);\n+                minTol = inverted ? getRelativeAccuracy() * FastMath.abs(x2 - x1) : tol1;\n+                if ((xmid <= lowerBound) || (xmid >= upperBound)) {\n+                    // Do a bisection instead of returning with NaN.\n+                    inverted = false;\n+                    xmid = 0.5d * (lowerBound + upperBound);\n+                    if (FastMath.abs(upperBound - lowerBound) < minTol) {\n+                        root = xmid;\n+                        if (resultComputedUnchecked) {\n+                            setResult(root, i);\n+                        }\n+                        return root;\n                     }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n                 }\n-            }\n-\n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n+                if (FastMath.abs(y2) <= fMin) {\n+                    root = xmid;  // Simple zero found.\n+                    if (resultComputedUnchecked) {\n+                        setResult(root, i);\n+                    }\n+                    return root;\n                 }\n-            }\n-        }\n-    }\n+            } else if (i >= getMaximalIterationCount()) {\n+                throw new TooManyEvaluationsException(getMaximalIterationCount());\n+            } else if (FastMath.abs(delta2) < getAbsoluteAccuracy()) {\n+                minTol = inverted ? getRelativeAccuracy() * FastMath.abs(x2 - x1) : tol1;\n+                if ((x2 <= lowerBound) || (x2 >= upperBound)) {\n+                    // Do a bisection instead of returning with NaN.\n+                    inverted = false;\n+                    xmid = 0.5d * (lowerBound + upperBound);\n+                    if (FastMath.abs(upperBound - lowerBound) < minTol) {\n+                        root = xmid;\n+                        if (resul\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}