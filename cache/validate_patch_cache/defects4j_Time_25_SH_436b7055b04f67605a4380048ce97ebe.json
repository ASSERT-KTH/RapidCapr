{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal == nextAdjusted) {\n        return offsetAdjusted;\n    } else {\n        int nextLocalOffset = getOffset(nextLocal);\n        int nextAdjustedOffset = getOffset(nextAdjusted);\n        if (nextLocalOffset == offsetAdjusted || nextAdjustedOffset == offsetLocal) {\n            return nextLocalOffset > nextAdjustedOffset ? offsetLocal : offsetAdjusted;\n        } else if (nextLocalOffset < nextAdjustedOffset) {\n            if (nextLocalOffset == offsetLocal) {\n                return offsetLocal;\n            } else {\n                long nextLocalStart = nextTransition(nextLocal);\n                long nextLocalStartAdjusted = nextTransition(nextAdjusted - offsetLocal);\n                if (nextLocalStart == nextLocalStartAdjusted) {\n                    return offsetLocal;\n                } else {\n                    return offsetAdjusted;\n                }\n            }\n        } else {\n            if (nextAdjustedOffset == offsetAdjusted) {\n                return offsetAdjusted;\n            } else {\n                long nextAdjustedStart = nextTransition(nextAdjusted - offsetAdjusted);\n                long nextAdjustedStartLocal = nextTransition(nextLocal);\n                if (nextAdjustedStart == nextAdjustedStartLocal) {\n                    return offsetAdjusted;\n                } else {\n                    return offsetLocal;\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e590f026 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,43 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal == nextAdjusted) {\n+        return offsetAdjusted;\n+    } else {\n+        int nextLocalOffset = getOffset(nextLocal);\n+        int nextAdjustedOffset = getOffset(nextAdjusted);\n+        if (nextLocalOffset == offsetAdjusted || nextAdjustedOffset == offsetLocal) {\n+            return nextLocalOffset > nextAdjustedOffset ? offsetLocal : offsetAdjusted;\n+        } else if (nextLocalOffset < nextAdjustedOffset) {\n+            if (nextLocalOffset == offsetLocal) {\n+                return offsetLocal;\n+            } else {\n+                long nextLocalStart = nextTransition(nextLocal);\n+                long nextLocalStartAdjusted = nextTransition(nextAdjusted - offsetLocal);\n+                if (nextLocalStart == nextLocalStartAdjusted) {\n+                    return offsetLocal;\n+                } else {\n+                    return offsetAdjusted;\n+                }\n+            }\n+        } else {\n+            if (nextAdjustedOffset == offsetAdjusted) {\n+                return offsetAdjusted;\n+            } else {\n+                long nextAdjustedStart = nextTransition(nextAdjusted - offsetAdjusted);\n+                long nextAdjustedStartLocal = nextTransition(nextLocal);\n+                if (nextAdjustedStart == nextAdjustedStartLocal) {\n+                    return offsetAdjusted;\n+                } else {\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}