{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    boolean localPositive = offsetLocal > 0;\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted && (localPositive || nextLocal <= instantLocal)) {\n        // normal case, just return the estimated offset\n        return offsetLocal;\n    }\n\n    boolean adjustPositive = offsetAdjusted > 0;\n    long prevLocal = previousTransition(instantAdjusted);\n    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n    if (prevLocal != prevAdjusted && (!localPositive || prevLocal >= instantLocal)) {\n        // normal case, just return the estimated offset\n        return offsetLocal;\n    }\n\n    if (nextLocal == nextAdjusted && localPositive != adjustPositive) {\n        // gap or overlap is less than one week, need to search a larger range\n        long start = instantAdjusted - (86400000L * 7);\n        long end = instantAdjusted + (86400000L * 7);\n        nextLocal = nextTransition(start);\n        nextAdjusted = nextTransition(start - offsetAdjusted);\n        while (nextAdjusted <= end && nextLocal != nextAdjusted) {\n            nextLocal = nextAdjusted;\n            nextAdjusted = nextTransition(nextLocal - offsetAdjusted);\n        }\n        if (nextLocal == nextAdjusted) {\n            // found the transition, return its offset\n            return getOffset(nextLocal);\n        }\n    }\n\n    if (prevLocal == prevAdjusted && localPositive != adjustPositive) {\n        // gap or overlap is less than one week, need to search a larger range\n        long start = instantAdjusted - (86400000L * 7);\n        long end = instantAdjusted + (86400000L * 7);\n        prevLocal = previousTransition(end);\n        prevAdjusted = previousTransition(end - offsetAdjusted);\n        while (prevAdjusted >= start && prevLocal != prevAdjusted) {\n            prevLocal = prevAdjusted;\n            prevAdjusted = previousTransition(prevLocal - offsetAdjusted);\n        }\n        if (prevLocal == prevAdjusted) {\n            // found the transition, return its offset\n            return getOffset(prevLocal);\n        }\n    }\n\n    // normal case, just return the adjusted offset\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0136f0d8 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,58 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    boolean localPositive = offsetLocal > 0;\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted && (localPositive || nextLocal <= instantLocal)) {\n+        // normal case, just return the estimated offset\n+        return offsetLocal;\n+    }\n+\n+    boolean adjustPositive = offsetAdjusted > 0;\n+    long prevLocal = previousTransition(instantAdjusted);\n+    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+    if (prevLocal != prevAdjusted && (!localPositive || prevLocal >= instantLocal)) {\n+        // normal case, just return the estimated offset\n+        return offsetLocal;\n+    }\n+\n+    if (nextLocal == nextAdjusted && localPositive != adjustPositive) {\n+        // gap or overlap is less than one week, need to search a larger range\n+        long start = instantAdjusted - (86400000L * 7);\n+        long end = instantAdjusted + (86400000L * 7);\n+        nextLocal = nextTransition(start);\n+        nextAdjusted = nextTransition(start - offsetAdjusted);\n+        while (nextAdjusted <= end && nextLocal != nextAdjusted) {\n+            nextLocal = nextAdjusted;\n+            nextAdjusted = nextTransition(nextLocal - offsetAdjusted);\n+        }\n+        if (nextLocal == nextAdjusted) {\n+            // found the transition, return its offset\n+            return getOffset(nextLocal);\n+        }\n+    }\n+\n+    if (prevLocal == prevAdjusted && localPositive != adjustPositive) {\n+        // gap or overlap is less than one week, need to search a larger range\n+        long start = instantAdjusted - (86400000L * 7);\n+        long end = instantAdjusted + (86400000L * 7);\n+        prevLocal = previousTransition(end);\n+        prevAdjusted = previousTransition(end - offsetAdjusted);\n+        while (prevAdjusted >= start && prevLocal != prevAdjusted) {\n+            prevLocal = prevAdjusted;\n+            prevAdjusted = previousTransition(prevLocal - offsetAdjusted);\n+        }\n+        if (prevLocal == prevAdjusted) {\n+            // found the transition, return its offset\n+            return getOffset(prevLocal);\n+        }\n+    }\n+\n+    // normal case, just return the adjusted offset\n+    return offsetAdjusted;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}