{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        \n        // check for invalid dates such as Feb 29 in non-leap years\n        if (bucket != null && bucket.getParsedField(DateTimeFieldType.dayOfMonth()) != null && \n                bucket.getParsedField(DateTimeFieldType.monthOfYear()) != null) {\n            int dayOfMonth = bucket.getParsedField(DateTimeFieldType.dayOfMonth()).getValue();\n            int monthOfYear = bucket.getParsedField(DateTimeFieldType.monthOfYear()).getValue();\n            int year = (bucket.getParsedField(DateTimeFieldType.year()) != null) ? \n                bucket.getParsedField(DateTimeFieldType.year()).getValue() : defaultYear;\n            if (dayOfMonth > chrono.dayOfMonth().getMaximumValue(year, monthOfYear)) {\n                throw new IllegalStateException(\"Invalid date format.\");\n            }\n        }\n        \n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..e3c2c97c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -702,16 +702,27 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n         int defaultYear = chrono.year().get(instantLocal);\n-        \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n+        \n+        // check for invalid dates such as Feb 29 in non-leap years\n+        if (bucket != null && bucket.getParsedField(DateTimeFieldType.dayOfMonth()) != null && \n+                bucket.getParsedField(DateTimeFieldType.monthOfYear()) != null) {\n+            int dayOfMonth = bucket.getParsedField(DateTimeFieldType.dayOfMonth()).getValue();\n+            int monthOfYear = bucket.getParsedField(DateTimeFieldType.monthOfYear()).getValue();\n+            int year = (bucket.getParsedField(DateTimeFieldType.year()) != null) ? \n+                bucket.getParsedField(DateTimeFieldType.year()).getValue() : defaultYear;\n+            if (dayOfMonth > chrono.dayOfMonth().getMaximumValue(year, monthOfYear)) {\n+                throw new IllegalStateException(\"Invalid date format.\");\n+            }\n+        }\n+        \n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}