{
    "patch": "        if (val.startsWith(\"+\")) {\n            val = val.substring(1); // Discard leading '+' sign\n            if (val.length() == 0) {\n            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\"); \n            }\n        }\n\n        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear \n            // to be in specification of class. OS X Java parses it to \n            // a wrong value.\n            return null;\n        }\n\n        if (val.startsWith(\"-\")) {\n            if (val.length() == 1) {  // Check whether negative sign is on its own\n                throw new NumberFormatException(\"\\\"\" + val + \"\\\" is not a valid number.\");\n            }\n            val = val.substring(1);\n        }\n\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }\n\n        char lastChar = val.charAt(val.length() - 1);\n        String mant;\n        String dec = null;\n        String exp = null;\n\n        // Find decimal point\n        int decPos = val.indexOf('.');\n        if (decPos > -1) {\n            mant = val.substring(0, decPos);\n            dec = val.substring(decPos + 1);\n        } else { // No decimal point\n            // Test if scientific notation\n            int expPos = val.indexOf(\"e\") + val.indexOf(\"E\") + 1;\n            if (expPos > 0) {\n                mant = val.substring(0, expPos - 1);\n                exp = val.substring(expPos);\n            } else {\n                mant = val;\n            }\n        }\n        validateMantissa(mant);\n\n\n        if (exp != null) {\n            validateExponent(exp);\n        }\n\n        if (!Character.isDigit(lastChar)) {\n            if (exp == null) {\n                validateInteger(mant + lastChar);\n            } else {\n                validateDecimal(mant, dec, exp, lastChar);\n            }\n            switch (lastChar) {\n                case 'l':\n                case 'L':\n                    return createLong(val);\n                case 'f':\n                case 'F':\n                    return createFloat(val);\n                case 'd':\n                case 'D':\n                    return createDouble(val);\n                default:\n                    throw new NumberFormatException(\"\\\"\" + val + \"\\\" is not a valid number.\");\n            }\n        } else {\n            if (exp == null) {\n                return createInteger(val);\n            } else {\n                validateDecimal(mant, dec, exp, lastChar);\n                return createBigDecimal(val);\n            }\n        }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..cdb65dd4 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,86 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (val.startsWith(\"+\")) {\n+            val = val.substring(1); // Discard leading '+' sign\n+            if (val.length() == 0) {\n+            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\"); \n+            }\n+        }\n+\n+        if (val.startsWith(\"--\")) {\n+            // this is protection for poorness in java.lang.BigDecimal.\n+            // it accepts this as a legal value, but it does not appear \n+            // to be in specification of class. OS X Java parses it to \n+            // a wrong value.\n+            return null;\n+        }\n+\n+        if (val.startsWith(\"-\")) {\n+            if (val.length() == 1) {  // Check whether negative sign is on its own\n+                throw new NumberFormatException(\"\\\"\" + val + \"\\\" is not a valid number.\");\n+            }\n+            val = val.substring(1);\n+        }\n+\n+        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+            return createInteger(val);\n+        }\n+\n+        char lastChar = val.charAt(val.length() - 1);\n+        String mant;\n+        String dec = null;\n+        String exp = null;\n+\n+        // Find decimal point\n+        int decPos = val.indexOf('.');\n+        if (decPos > -1) {\n+            mant = val.substring(0, decPos);\n+            dec = val.substring(decPos + 1);\n+        } else { // No decimal point\n+            // Test if scientific notation\n+            int expPos = val.indexOf(\"e\") + val.indexOf(\"E\") + 1;\n+            if (expPos > 0) {\n+                mant = val.substring(0, expPos - 1);\n+                exp = val.substring(expPos);\n+            } else {\n+                mant = val;\n+            }\n+        }\n+        validateMantissa(mant);\n+\n+\n+        if (exp != null) {\n+            validateExponent(exp);\n+        }\n+\n+        if (!Character.isDigit(lastChar)) {\n+            if (exp == null) {\n+                validateInteger(mant + lastChar);\n+            } else {\n+                validateDecimal(mant, dec, exp, lastChar);\n+            }\n+            switch (lastChar) {\n+                case 'l':\n+                case 'L':\n+                    return createLong(val);\n+                case 'f':\n+                case 'F':\n+                    return createFloat(val);\n+                case 'd':\n+                case 'D':\n+                    return createDouble(val);\n+                default:\n+                    throw new NumberFormatException(\"\\\"\" + val + \"\\\" is not a valid number.\");\n+            }\n+        } else {\n+            if (exp == null) {\n+                return createInteger(val);\n+            } else {\n+                validateDecimal(mant, dec, exp, lastChar);\n+                return createBigDecimal(val);\n+            }\n+        }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}