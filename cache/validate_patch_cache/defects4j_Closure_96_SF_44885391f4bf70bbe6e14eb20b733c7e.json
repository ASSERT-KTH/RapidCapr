{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  boolean remainingVarargs = false; // flag to determine if there are remaining varargs\n  while (arguments.hasNext() && parameters.hasNext()) {\n    parameter = parameters.next();\n    argument = arguments.next();\n    ordinal++; // keep track of the parameter number\n\n    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n        getJSType(parameter), call, ordinal);\n\n    // If the parameter is varargs, we mark it and stop\n    if (parameter.isVarArgs()) {\n      remainingVarargs = true;\n      break;\n    }\n  }\n\n  // Check if there are any remaining arguments\n  int numArgs = call.getChildCount() - 1; // exclude the callee node\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (arguments.hasNext()) {\n    // There were more arguments provided than expected\n    if (remainingVarargs || (maxArgs == Integer.MAX_VALUE && !parameters.hasNext())) {\n      // If function type specifies its arguments are all varargs, don't report an error\n      return;\n    }\n    int excessArgs = 0;\n    while (arguments.hasNext()) {\n      // count the remaining arguments\n      arguments.next();\n      excessArgs++;\n    }\n\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.format(\"more than %d argument(s)\", ordinal),\n        String.valueOf(minArgs),\n        maxArgs != Integer.MAX_VALUE ? \"and no more than \" + maxArgs + \" argument(s)\" : \"\"\n            + String.format(\"; found %d excess arguments\", excessArgs));\n  } else if (ordinal < minArgs) {\n    // There were not enough arguments provided\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(minArgs),\n        maxArgs != Integer.MAX_VALUE ? \"and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  } else if (remainingVarargs && numArgs < ordinal) {\n    // There were not enough arguments for a varargs function\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.format(\"at least %d argument(s)\", ordinal),\n        String.valueOf(minArgs),\n        maxArgs != Integer.MAX_VALUE ? \"and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..8e01d1d6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,69 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(NodeTraversal t, Node call,\n+    FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  Node parameter = null;\n+  Node argument = null;\n+  boolean remainingVarargs = false; // flag to determine if there are remaining varargs\n+  while (arguments.hasNext() && parameters.hasNext()) {\n+    parameter = parameters.next();\n+    argument = arguments.next();\n+    ordinal++; // keep track of the parameter number\n+\n+    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+        getJSType(parameter), call, ordinal);\n+\n+    // If the parameter is varargs, we mark it and stop\n+    if (parameter.isVarArgs()) {\n+      remainingVarargs = true;\n+      break;\n     }\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  // Check if there are any remaining arguments\n+  int numArgs = call.getChildCount() - 1; // exclude the callee node\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  if (arguments.hasNext()) {\n+    // There were more arguments provided than expected\n+    if (remainingVarargs || (maxArgs == Integer.MAX_VALUE && !parameters.hasNext())) {\n+      // If function type specifies its arguments are all varargs, don't report an error\n+      return;\n+    }\n+    int excessArgs = 0;\n+    while (arguments.hasNext()) {\n+      // count the remaining arguments\n+      arguments.next();\n+      excessArgs++;\n     }\n+\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.format(\"more than %d argument(s)\", ordinal),\n+        String.valueOf(minArgs),\n+        maxArgs != Integer.MAX_VALUE ? \"and no more than \" + maxArgs + \" argument(s)\" : \"\"\n+            + String.format(\"; found %d excess arguments\", excessArgs));\n+  } else if (ordinal < minArgs) {\n+    // There were not enough arguments provided\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), String.valueOf(minArgs),\n+        maxArgs != Integer.MAX_VALUE ? \"and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  } else if (remainingVarargs && numArgs < ordinal) {\n+    // There were not enough arguments for a varargs function\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.format(\"at least %d argument(s)\", ordinal),\n+        String.valueOf(minArgs),\n+        maxArgs != Integer.MAX_VALUE ? \"and no more than \" + maxArgs + \" argument(s)\" : \"\");\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...ractFn: called with [1 argument(s). Function requires at least 0 argument(s) ]and no more than 0 a...> but was:<...ractFn: called with [more than 0 argument(s) argument(s). Function requires at least 0 argument(s)]and no more than 0 a...>",
    "test_result": "FAIL"
}