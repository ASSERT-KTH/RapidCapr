{
    "patch": "Set<String> referenced = fnScope.getRenames();\n\nNode function = fnScope.getRootNode();\nPreconditions.checkState(NodeUtil.isFunctionDeclaration(function) || NodeUtil.isFunctionExpression(function) || NodeUtil.isArrowFunction(function) || NodeUtil.isLabeledStatement(function), function);\n\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\n\nNode argList = getFunctionArgList(function);\n\nboolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\nif (!modifyCallers) {\n  // Strip unreferenced args off the end of the function declaration.\n  Node lastArg;\n  while((lastArg = argList.getLastChild()) != null) {\n    String argName = lastArg.isDefaultValue() ? lastArg.getFirstChild().getQualifiedName() : lastArg.getQualifiedName();\n    Var var = fnScope.getVar(argName);\n\n    if (!referenced.contains(var.getFullName()) && !isExported(fnScope, var.getFullName())) {\n      argList.removeChild(lastArg);\n      compiler.reportCodeChange();\n    } else {\n      break;\n    }\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..97875022 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,37 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Set<String> referenced = fnScope.getRenames();\n+\n+Node function = fnScope.getRootNode();\n+Preconditions.checkState(NodeUtil.isFunctionDeclaration(function) || NodeUtil.isFunctionExpression(function) || NodeUtil.isArrowFunction(function) || NodeUtil.isLabeledStatement(function), function);\n+\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+\n+boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+if (!modifyCallers) {\n+  // Strip unreferenced args off the end of the function declaration.\n+  Node lastArg;\n+  while((lastArg = argList.getLastChild()) != null) {\n+    String argName = lastArg.isDefaultValue() ? lastArg.getFirstChild().getQualifiedName() : lastArg.getQualifiedName();\n+    Var var = fnScope.getVar(argName);\n+\n+    if (!referenced.contains(var.getFullName()) && !isExported(fnScope, var.getFullName())) {\n+      argList.removeChild(lastArg);\n+      compiler.reportCodeChange();\n+    } else {\n+      break;\n+    }\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}