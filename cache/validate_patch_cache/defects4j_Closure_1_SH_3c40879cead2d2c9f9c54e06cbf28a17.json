{
    "patch": "      // Strip unreferenced args off the end of the function declaration.\n      int numArgs = argList.getChildCount();\n      Node lastArg = argList.getLastChild();\n      for (int i = numArgs - 1; i >= 0 && lastArg != null; i--, lastArg = lastArg.getPrevious()) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          // Stop if we find a referenced argument.\n          break;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..444f980d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,19 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // Strip unreferenced args off the end of the function declaration.\n+      int numArgs = argList.getChildCount();\n+      Node lastArg = argList.getLastChild();\n+      for (int i = numArgs - 1; i >= 0 && lastArg != null; i--, lastArg = lastArg.getPrevious()) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          // Stop if we find a referenced argument.\n+          break;\n+        }\n+      }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}