{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Arguments must be positive.\");\n    }\n    \n    final double gamma = Gamma.gamma(a);\n    double igamma = Gamma.regularizedGammaP(a, x);\n    \n    double frac = igamma / gamma;\n    double term = Math.exp(-x + (a * Math.log(x)) - LogGamma.logGamma(a)) * frac;\n    double sum = term;\n    double eps = 1.0e-10;\n    int n = 1;\n    do {\n        term *= x / (a + n);\n        sum += term;\n        n++;\n    } while (Math.abs(term) > eps);\n\n    return sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..4b7247874 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,27 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Arguments must be positive.\");\n+    }\n+    \n+    final double gamma = Gamma.gamma(a);\n+    double igamma = Gamma.regularizedGammaP(a, x);\n+    \n+    double frac = igamma / gamma;\n+    double term = Math.exp(-x + (a * Math.log(x)) - LogGamma.logGamma(a)) * frac;\n+    double sum = term;\n+    double eps = 1.0e-10;\n+    int n = 1;\n+    do {\n+        term *= x / (a + n);\n+        sum += term;\n+        n++;\n+    } while (Math.abs(term) > eps);\n+\n+    return sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}