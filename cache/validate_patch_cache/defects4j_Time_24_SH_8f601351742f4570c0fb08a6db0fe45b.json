{
    "patch": "        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n            // Buggy Hunk\n            if (iStrict && count > 0) {\n                int year = 0;\n                SavedField first = null;\n                for (int i = 0; i < count; i++) {\n                    SavedField sf = savedFields[i];\n                    DateTimeField f = sf.iField;\n                    if (f == DateTimeFieldType.year()) {\n                        year = sf.iValue;\n                        first = sf;\n                        break;\n                    } else {\n                        if (sf.deriveValue(this, millis)) {\n                            first = new SavedField(f, sf.iValue);\n                            break;\n                        }\n                    }\n                }\n                if (first != null && first.iZone != null) { // Handle interval values correctly\n                    DurationField years = DurationFieldType.years().getField(iChrono);\n                    long instant = first.iZone.getDateTimeMillis(year,  \n                                                                  first.iValue, \n                                                                  years.add(first.iField.getDurationField().getType().getField(iChrono).roundFloor(millis), first.iValue) , \n                                                                  first.iValue == year ? 0 : 1);\n                    if (instant != millis) {\n                        throw new IllegalFieldValueException(first.iField.getType(), \"Strict mode rejected field \" + first.iField.getName());\n                    }\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..66848dad 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,45 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+            // Buggy Hunk\n+            if (iStrict && count > 0) {\n+                int year = 0;\n+                SavedField first = null;\n+                for (int i = 0; i < count; i++) {\n+                    SavedField sf = savedFields[i];\n+                    DateTimeField f = sf.iField;\n+                    if (f == DateTimeFieldType.year()) {\n+                        year = sf.iValue;\n+                        first = sf;\n+                        break;\n+                    } else {\n+                        if (sf.deriveValue(this, millis)) {\n+                            first = new SavedField(f, sf.iValue);\n+                            break;\n+                        }\n+                    }\n+                }\n+                if (first != null && first.iZone != null) { // Handle interval values correctly\n+                    DurationField years = DurationFieldType.years().getField(iChrono);\n+                    long instant = first.iZone.getDateTimeMillis(year,  \n+                                                                  first.iValue, \n+                                                                  years.add(first.iField.getDurationField().getType().getField(iChrono).roundFloor(millis), first.iValue) , \n+                                                                  first.iValue == year ? 0 : 1);\n+                    if (instant != millis) {\n+                        throw new IllegalFieldValueException(first.iField.getType(), \"Strict mode rejected field \" + first.iField.getName());\n+                    }\n+                }\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}