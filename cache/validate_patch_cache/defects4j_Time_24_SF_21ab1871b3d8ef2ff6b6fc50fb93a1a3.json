{
    "patch": "    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n\n        if (iZone != null) {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        // moved from before the zone adjustment, due to use by GJChronology\n        if (iChrono != null) {\n            int year = iChrono.year().get(millis);\n            if (iChrono.year().remainder(year) != 0) {\n                millis = iChrono.year().set(millis, iChrono.year().add(year, 1));\n            }\n        }\n        if (iZone == null) {\n            millis -= iOffset;\n        }\n        return millis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e97737bc 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -358,10 +358,8 @@ public class DateTimeParserBucket {\n             }\n             throw e;\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n+\n+        if (iZone != null) {\n             int offset = iZone.getOffsetFromLocal(millis);\n             millis -= offset;\n             if (offset != iZone.getOffset(millis)) {\n@@ -373,7 +371,16 @@ public class DateTimeParserBucket {\n                 throw new IllegalArgumentException(message);\n             }\n         }\n-        \n+        // moved from before the zone adjustment, due to use by GJChronology\n+        if (iChrono != null) {\n+            int year = iChrono.year().get(millis);\n+            if (iChrono.year().remainder(year) != 0) {\n+                millis = iChrono.year().set(millis, iChrono.year().add(year, 1));\n+            }\n+        }\n+        if (iZone == null) {\n+            millis -= iOffset;\n+        }\n         return millis;\n     }\n     ",
    "result_reason": "error: no suitable method found for set(long,long)",
    "test_result": "ERROR"
}