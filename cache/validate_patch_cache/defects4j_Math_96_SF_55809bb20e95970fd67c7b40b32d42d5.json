{
    "patch": "    public boolean equals(Object other) {\n        if (this == other) { \n            return true;\n        } \n        \n        if (other == null || getClass() != other.getClass()) {\n            return false;\n        } \n        \n        Complex rhs = (Complex) other;\n        \n        if (rhs.isNaN()) {\n            return this.isNaN();\n        } \n        \n        double eps = 1e-15;\n        return Math.abs(real - rhs.getReal()) < eps && Math.abs(imaginary - rhs.getImaginary()) < eps;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 3571567f8..113948aa4 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -243,27 +243,22 @@ public class Complex implements Serializable  {\n      * \n      */\n     public boolean equals(Object other) {\n-        boolean ret;\n-        \n         if (this == other) { \n-            ret = true;\n-        } else if (other == null) {\n-            ret = false;\n-        } else  {\n-            try {\n-                Complex rhs = (Complex)other;\n-                if (rhs.isNaN()) {\n-                    ret = this.isNaN();\n-                } else {\n-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n-                }\n-            } catch (ClassCastException ex) {\n-                // ignore exception\n-                ret = false;\n-            }\n-        }\n-      \n-        return ret;\n+            return true;\n+        } \n+        \n+        if (other == null || getClass() != other.getClass()) {\n+            return false;\n+        } \n+        \n+        Complex rhs = (Complex) other;\n+        \n+        if (rhs.isNaN()) {\n+            return this.isNaN();\n+        } \n+        \n+        double eps = 1e-15;\n+        return Math.abs(real - rhs.getReal()) < eps && Math.abs(imaginary - rhs.getImaginary()) < eps;\n     }\n     \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<org.apache.commons.math.complex.Complex@d6600000> but was:<org.apache.commons.math.complex.Complex@d6600000>",
    "test_result": "FAIL"
}