{
    "patch": "public static String decode(String input) {\n    if (input == null) {\n        return null;\n    }\n    ByteArrayOutputStream out = new ByteArrayOutputStream(input.length());\n    for (int i = 0; i < input.length(); i++) {\n        char c = input.charAt(i);\n        if (c == '+') {\n            out.write(' ');\n        } else if (c == '%') {\n            if (i == input.length() - 1) {\n                throw new IllegalArgumentException(\"Invalid encoded string: \" + input);\n            }\n            c = input.charAt(++i);\n            if (c == '%') {\n                out.write('%');\n            } else {\n                if (i == input.length() - 1) {\n                    throw new IllegalArgumentException(\"Invalid encoded string: \" + input);\n                }\n                c = (char) ((Character.digit(c, 16) << 4) + Character.digit(input.charAt(++i), 16));\n                out.write(c);\n            }\n        } else {\n            out.write(c);\n        }\n    }\n    return out.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..e4f2df5c 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,35 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String decode(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    ByteArrayOutputStream out = new ByteArrayOutputStream(input.length());\n+    for (int i = 0; i < input.length(); i++) {\n+        char c = input.charAt(i);\n+        if (c == '+') {\n+            out.write(' ');\n+        } else if (c == '%') {\n+            if (i == input.length() - 1) {\n+                throw new IllegalArgumentException(\"Invalid encoded string: \" + input);\n+            }\n+            c = input.charAt(++i);\n+            if (c == '%') {\n+                out.write('%');\n+            } else {\n+                if (i == input.length() - 1) {\n+                    throw new IllegalArgumentException(\"Invalid encoded string: \" + input);\n+                }\n+                c = (char) ((Character.digit(c, 16) << 4) + Character.digit(input.charAt(++i), 16));\n+                out.write(c);\n+            }\n+        } else {\n+            out.write(c);\n+        }\n+    }\n+    return out.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}