{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      double v1x = v1.getX();\n      double v1y = v1.getY();\n      double v1z = v1.getZ();\n      double v2x = v2.getX();\n      double v2y = v2.getY();\n      double v2z = v2.getZ();\n      double s1 = v1x * v1x + v1y * v1y + v1z * v1z;\n      double s2 = v2x * v2x + v2y * v2y + v2z * v2z;\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      double max = FastMath.max(s1, s2);\n      double rho = 0;\n      if (max == s2) {\n          double a11 = v2y / v2z;\n          double a12 = v2x / v2z;\n          double d   = v1z + v1x * a11 - v1y * a12;\n          rho = v1z / d;\n      } else if (max == s1) {\n          double a21 = v1y / v1z;\n          double a22 = v1x / v1z;\n          double d   = v2z + v2x * a21 - v2y * a22;\n          rho = -v2z / d;\n      }\n\n      double small = 1.0e-10 * max;\n      double[] c = new double[3];\n      if ((max < 1.0e-64) || (rho * rho * s1 < small) || (rho * rho * s2 < small)) {\n          // if the cross-product is small, or the vectors are\n          // almost linearly dependent, fall back to a numerically\n          // stable vector selection algorithm based on the largest\n          // component (see \"3D Game Engine Design\" by David H. Eberly,\n          // Morgan Kaufmann Publishers, 2001)\n          if (FastMath.abs(v1x) > FastMath.abs(v1y)) {\n              if (FastMath.abs(v1x) > FastMath.abs(v1z)) {\n                  c[0] = 0;\n                  c[1] = -v1z;\n                  c[2] = v1y;\n              } else {\n                  c[0] = -v1y;\n                  c[1] = v1x;\n                  c[2] = 0;\n              }\n          } else {\n              if (FastMath.abs(v1y) > FastMath.abs(v1z)) {\n                  c[0] = -v1z;\n                  c[1] = 0;\n                  c[2] = v1x;\n              } else {\n                  c[0] = -v1y;\n                  c[1] = v1x;\n                  c[2] = 0;\n              }\n          }\n      } else {\n          double v3x = v1x - rho * v2y * v2z;\n          double v3y = v1y + rho * v2x * v2z;\n          double v3z = v1z - rho * s2;\n          c[0] = v2y * v3z - v2z * v3y;\n          c[1] = v2z * v3x - v2x * v3z;\n          c[2] = v2x * v3y - v2y * v3x;\n      }\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      return new Vector3D(c[0], c[1], c[2]);\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..c3feee537 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -459,6 +459,14 @@ public class Vector3D implements Serializable {\n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n+      double v1x = v1.getX();\n+      double v1y = v1.getY();\n+      double v1z = v1.getZ();\n+      double v2x = v2.getX();\n+      double v2y = v2.getY();\n+      double v2z = v2.getZ();\n+      double s1 = v1x * v1x + v1y * v1y + v1z * v1z;\n+      double s2 = v2x * v2x + v2y * v2y + v2z * v2z;\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n@@ -467,10 +475,60 @@ public class Vector3D implements Serializable {\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n       // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+      double max = FastMath.max(s1, s2);\n+      double rho = 0;\n+      if (max == s2) {\n+          double a11 = v2y / v2z;\n+          double a12 = v2x / v2z;\n+          double d   = v1z + v1x * a11 - v1y * a12;\n+          rho = v1z / d;\n+      } else if (max == s1) {\n+          double a21 = v1y / v1z;\n+          double a22 = v1x / v1z;\n+          double d   = v2z + v2x * a21 - v2y * a22;\n+          rho = -v2z / d;\n+      }\n \n+      double small = 1.0e-10 * max;\n+      double[] c = new double[3];\n+      if ((max < 1.0e-64) || (rho * rho * s1 < small) || (rho * rho * s2 < small)) {\n+          // if the cross-product is small, or the vectors are\n+          // almost linearly dependent, fall back to a numerically\n+          // stable vector selection algorithm based on the largest\n+          // component (see \"3D Game Engine Design\" by David H. Eberly,\n+          // Morgan Kaufmann Publishers, 2001)\n+          if (FastMath.abs(v1x) > FastMath.abs(v1y)) {\n+              if (FastMath.abs(v1x) > FastMath.abs(v1z)) {\n+                  c[0] = 0;\n+                  c[1] = -v1z;\n+                  c[2] = v1y;\n+              } else {\n+                  c[0] = -v1y;\n+                  c[1] = v1x;\n+                  c[2] = 0;\n+              }\n+          } else {\n+              if (FastMath.abs(v1y) > FastMath.abs(v1z)) {\n+                  c[0] = -v1z;\n+                  c[1] = 0;\n+                  c[2] = v1x;\n+              } else {\n+                  c[0] = -v1y;\n+                  c[1] = v1x;\n+                  c[2] = 0;\n+              }\n+          }\n+      } else {\n+          double v3x = v1x - rho * v2y * v2z;\n+          double v3y = v1y + rho * v2x * v2z;\n+          double v3z = v1z - rho * s2;\n+          c[0] = v2y * v3z - v2z * v3y;\n+          c[1] = v2z * v3x - v2x * v3z;\n+          c[2] = v2x * v3y - v2y * v3x;\n+      }\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      return new Vector3D(c[0], c[1], c[2]);\n \n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}