{
    "patch": "public String[] getprop(String prop) {\n    try {\n        Process p = Runtime.getRuntime().exec(\"getprop \" + prop);\n        BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()), 1024);\n        int read;\n        char[] buffer = new char[1024];\n        StringBuffer output = new StringBuffer();\n        while ((read = br.read(buffer)) > 0) {\n            output.append(buffer, 0, read);\n        }\n        br.close();\n        p.destroy();\n        String[] lines = output.toString().split(\"\\n\");\n        for (int i = 0; i < lines.length; i++) {\n            lines[i] = lines[i].trim();\n        }\n        return lines;\n    } catch (IOException e) {\n        String[] error = {\"IOException: \" + e.getMessage()};\n        return error;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..01f69de6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String[] getprop(String prop) {\n+    try {\n+        Process p = Runtime.getRuntime().exec(\"getprop \" + prop);\n+        BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()), 1024);\n+        int read;\n+        char[] buffer = new char[1024];\n+        StringBuffer output = new StringBuffer();\n+        while ((read = br.read(buffer)) > 0) {\n+            output.append(buffer, 0, read);\n+        }\n+        br.close();\n+        p.destroy();\n+        String[] lines = output.toString().split(\"\\n\");\n+        for (int i = 0; i < lines.length; i++) {\n+            lines[i] = lines[i].trim();\n+        }\n+        return lines;\n+    } catch (IOException e) {\n+        String[] error = {\"IOException: \" + e.getMessage()};\n+        return error;\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}