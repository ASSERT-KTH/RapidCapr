{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        chrono = selectChronology(chrono);\n        DateTimeParserBucket bucket;\n        \n        if (iOffsetParsed) {\n            bucket = new DateTimeParserBucket(\n                instantMillis, chrono, iLocale, iPivotYear, iDefaultYear);\n        } else {\n            long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n            bucket = new DateTimeParserBucket(\n                instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        }\n        \n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(false, text));\n        \n        if (iOffsetParsed) {\n            if (bucket.getOffsetInteger() != null) {\n                DateTimeZone offsetZone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n                if (!offsetZone.equals(bucket.getZone())) {\n                    throw new IllegalArgumentException(\"DateTimeParserBucket.computeMillis\");\n                }\n                chrono = chrono.withZone(offsetZone);\n            }\n        } else {\n            if (bucket.getZone() != null) {\n                chrono = chrono.withZone(bucket.getZone());\n            }\n        }\n        \n        instant.setChronology(chrono);\n        \n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        \n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..5a1c008e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -702,24 +702,41 @@ public class DateTimeFormatter {\n         \n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n+        DateTimeParserBucket bucket;\n+        \n+        if (iOffsetParsed) {\n+            bucket = new DateTimeParserBucket(\n+                instantMillis, chrono, iLocale, iPivotYear, iDefaultYear);\n+        } else {\n+            long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+            bucket = new DateTimeParserBucket(\n+                instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        }\n         \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        \n+        if (iOffsetParsed) {\n+            if (bucket.getOffsetInteger() != null) {\n+                DateTimeZone offsetZone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n+                if (!offsetZone.equals(bucket.getZone())) {\n+                    throw new IllegalArgumentException(\"DateTimeParserBucket.computeMillis\");\n+                }\n+                chrono = chrono.withZone(offsetZone);\n+            }\n+        } else {\n+            if (bucket.getZone() != null) {\n+                chrono = chrono.withZone(bucket.getZone());\n+            }\n         }\n+        \n         instant.setChronology(chrono);\n+        \n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n+        \n         return newPos;\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2004-05-01T12:20:30.000+09:00> but was:<2000-05-01T12:20:30.000+09:00>",
    "test_result": "FAIL"
}