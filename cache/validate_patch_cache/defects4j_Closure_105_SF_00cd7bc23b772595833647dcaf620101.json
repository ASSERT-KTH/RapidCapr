{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isGetProp(left, \"join\") || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  if (!NodeUtil.isImmutableValue(arrayNode)) {\n    // We only support folding when the array is a literal (not a variable).\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  int originalSize = InlineCostEstimator.getCost(n);\n\n  if (arrayNode.getChildCount() == 0) {\n    // Special case for empty array.\n    parent.replaceChild(n, IR.string(\"\"));\n    return;\n  }\n\n  int totalSize = 0;\n  List<Node> newChildren = new ArrayList<>();\n  for (Node child = arrayNode.getFirstChild(); child != null; child = child.getNext()) {\n    // If the child is a non-empty string, append it to the accumulated string.\n    if (child.isString() && !child.getString().isEmpty()) {\n      totalSize += child.getString().length();\n      newChildren.add(child);\n    } else {\n      // Otherwise, append the join string and the child expression.\n      if (!newChildren.isEmpty()) {\n        totalSize += joinString.length() * (newChildren.size() - 1);\n        newChildren.add(IR.string(joinString));\n      }\n      newChildren.add(child.cloneTree());\n      totalSize += InlineCostEstimator.getCost(child);\n      newChildren.add(IR.string(\"\"));\n      totalSize += 2;\n    }\n  }\n\n  if (newChildren.isEmpty()) {\n    // Special case for array with only empty strings.\n    parent.replaceChild(n, IR.string(\"\"));\n    return;\n  }\n\n  totalSize += joinString.length() * (newChildren.size() - 1);\n\n  if (totalSize > originalSize) {\n    return;\n  }\n\n  Node newNode = IR.string(\"\");\n  for (Node child : newChildren) {\n    if (!child.isString()) {\n      child = IR.add(IR.string(\"\"), child);\n    }\n    newNode.addChildToBack(child);\n  }\n\n  parent.replaceChild(n, newNode);\n\n  t.getCompiler().reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..d1de4ae4 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,96 +1458,71 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+  if (!NodeUtil.isGetProp(left, \"join\") || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = left.getFirstChild();\n+  if (!NodeUtil.isImmutableValue(arrayNode)) {\n+    // We only support folding when the array is a literal (not a variable).\n+    return;\n+  }\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+  String joinString = NodeUtil.getStringValue(right);\n+  int originalSize = InlineCostEstimator.getCost(n);\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+  if (arrayNode.getChildCount() == 0) {\n+    // Special case for empty array.\n+    parent.replaceChild(n, IR.string(\"\"));\n+    return;\n+  }\n+\n+  int totalSize = 0;\n+  List<Node> newChildren = new ArrayList<>();\n+  for (Node child = arrayNode.getFirstChild(); child != null; child = child.getNext()) {\n+    // If the child is a non-empty string, append it to the accumulated string.\n+    if (child.isString() && !child.getString().isEmpty()) {\n+      totalSize += child.getString().length();\n+      newChildren.add(child);\n+    } else {\n+      // Otherwise, append the join string and the child expression.\n+      if (!newChildren.isEmpty()) {\n+        totalSize += joinString.length() * (newChildren.size() - 1);\n+        newChildren.add(IR.string(joinString));\n       }\n-      elem = elem.getNext();\n+      newChildren.add(child.cloneTree());\n+      totalSize += InlineCostEstimator.getCost(child);\n+      newChildren.add(IR.string(\"\"));\n+      totalSize += 2;\n     }\n+  }\n \n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+  if (newChildren.isEmpty()) {\n+    // Special case for array with only empty strings.\n+    parent.replaceChild(n, IR.string(\"\"));\n+    return;\n+  }\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+  totalSize += joinString.length() * (newChildren.size() - 1);\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  if (totalSize > originalSize) {\n+    return;\n+  }\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+  Node newNode = IR.string(\"\");\n+  for (Node child : newChildren) {\n+    if (!child.isString()) {\n+      child = IR.add(IR.string(\"\"), child);\n     }\n-    t.getCompiler().reportCodeChange();\n+    newNode.addChildToBack(child);\n   }\n \n+  parent.replaceChild(n, newNode);\n+\n+  t.getCompiler().reportCodeChange();\n+}\n+\n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */",
    "result_reason": "error: method isGetProp in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}