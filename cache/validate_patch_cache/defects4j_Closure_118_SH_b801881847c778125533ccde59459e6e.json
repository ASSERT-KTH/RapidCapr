{
    "patch": "if (child.isString()) {\n  // Property key is a string literal.\n  String name = child.getString();\n  T type = typeSystem.getType(getScope(), n, name);\n\n  Property prop = getProperty(name);\n  if (!prop.scheduleRenaming(child,\n                             processProperty(t, prop, type, null))) {\n    // TODO(user): It doesn't look like the user can do much in this\n    // case right now.\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(\n          t.getSourceName(), child, propertiesToErrorFor.get(name),\n          Warnings.INVALIDATION, name,\n          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n    }\n  }\n} else if (NodeUtil.isGet(child) || NodeUtil.isSet(child)) {\n  // Property key is a GET or SET access node.\n  handleAccessorLit(t, child);\n} else if (NodeUtil.isNumber(child)) {\n  // Property key is a numeric literal.\n  handleNumericLit(t, child);\n} else {\n  // Property key is a computed expression. This is not\n  // supported by the renaming pass.\n  compiler.report(\n      JSError.make(t.getSourceName(), child, Warnings.CANNOT_RENAME_KEYS));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..adfb5692 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,35 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+if (child.isString()) {\n+  // Property key is a string literal.\n+  String name = child.getString();\n+  T type = typeSystem.getType(getScope(), n, name);\n+\n+  Property prop = getProperty(name);\n+  if (!prop.scheduleRenaming(child,\n+                             processProperty(t, prop, type, null))) {\n+    // TODO(user): It doesn't look like the user can do much in this\n+    // case right now.\n+    if (propertiesToErrorFor.containsKey(name)) {\n+      compiler.report(JSError.make(\n+          t.getSourceName(), child, propertiesToErrorFor.get(name),\n+          Warnings.INVALIDATION, name,\n+          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+    }\n+  }\n+} else if (NodeUtil.isGet(child) || NodeUtil.isSet(child)) {\n+  // Property key is a GET or SET access node.\n+  handleAccessorLit(t, child);\n+} else if (NodeUtil.isNumber(child)) {\n+  // Property key is a numeric literal.\n+  handleNumericLit(t, child);\n+} else {\n+  // Property key is a computed expression. This is not\n+  // supported by the renaming pass.\n+  compiler.report(\n+      JSError.make(t.getSourceName(), child, Warnings.CANNOT_RENAME_KEYS));\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}