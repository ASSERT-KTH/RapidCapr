{
    "patch": "public static String unescape(String s) {\n    StringBuilder sb = new StringBuilder();\n    int i = 0;\n    while (i < s.length()) {\n        char c = s.charAt(i);\n        switch (c) {\n            case '\\\\':\n                if (i + 1 < s.length()) {\n                    char c2 = s.charAt(i + 1);\n                    switch (c2) {\n                        case 'r':\n                            sb.append('\\r');\n                            i += 2;\n                            break;\n                        case 'n':\n                            sb.append('\\n');\n                            i += 2;\n                            break;\n                        case 't':\n                            sb.append('\\t');\n                            i += 2;\n                            break;\n                        case 'f':\n                            sb.append('\\f');\n                            i += 2;\n                            break;\n                        case 'b':\n                            sb.append('\\b');\n                            i += 2;\n                            break;\n                        case '\"':\n                            sb.append('\"');\n                            i += 2;\n                            break;\n                        case '\\'':\n                            sb.append('\\'');\n                            i += 2;\n                            break;\n                        case '\\\\':\n                            sb.append('\\\\');\n                            i += 2;\n                            break;\n                        default:\n                            if (c2 >= '0' && c2 <= '9') {\n                                int octalValue = c2 - '0';\n                                for (int j = 2; j <= 3 && i + j < s.length(); j++) {\n                                    char c3 = s.charAt(i + j);\n                                    if (c3 >= '0' && c3 <= '9') {\n                                        octalValue = octalValue * 8 + (c3 - '0');\n                                    } else {\n                                        break;\n                                    }\n                                }\n                                sb.append((char) octalValue);\n                                i += 4;\n                            } else {\n                                sb.append(c);\n                                i++;\n                            }\n                    }\n                } else {\n                    sb.append(c);\n                    i++;\n                }\n                break;\n            default:\n                sb.append(c);\n                i++;\n                break;\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..b2d55d55 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,79 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String s) {\n+    StringBuilder sb = new StringBuilder();\n+    int i = 0;\n+    while (i < s.length()) {\n+        char c = s.charAt(i);\n+        switch (c) {\n+            case '\\\\':\n+                if (i + 1 < s.length()) {\n+                    char c2 = s.charAt(i + 1);\n+                    switch (c2) {\n+                        case 'r':\n+                            sb.append('\\r');\n+                            i += 2;\n+                            break;\n+                        case 'n':\n+                            sb.append('\\n');\n+                            i += 2;\n+                            break;\n+                        case 't':\n+                            sb.append('\\t');\n+                            i += 2;\n+                            break;\n+                        case 'f':\n+                            sb.append('\\f');\n+                            i += 2;\n+                            break;\n+                        case 'b':\n+                            sb.append('\\b');\n+                            i += 2;\n+                            break;\n+                        case '\"':\n+                            sb.append('\"');\n+                            i += 2;\n+                            break;\n+                        case '\\'':\n+                            sb.append('\\'');\n+                            i += 2;\n+                            break;\n+                        case '\\\\':\n+                            sb.append('\\\\');\n+                            i += 2;\n+                            break;\n+                        default:\n+                            if (c2 >= '0' && c2 <= '9') {\n+                                int octalValue = c2 - '0';\n+                                for (int j = 2; j <= 3 && i + j < s.length(); j++) {\n+                                    char c3 = s.charAt(i + j);\n+                                    if (c3 >= '0' && c3 <= '9') {\n+                                        octalValue = octalValue * 8 + (c3 - '0');\n+                                    } else {\n+                                        break;\n+                                    }\n+                                }\n+                                sb.append((char) octalValue);\n+                                i += 4;\n+                            } else {\n+                                sb.append(c);\n+                                i++;\n+                            }\n+                    }\n+                } else {\n+                    sb.append(c);\n+                    i++;\n+                }\n+                break;\n+            default:\n+                sb.append(c);\n+                i++;\n+                break;\n+        }\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}