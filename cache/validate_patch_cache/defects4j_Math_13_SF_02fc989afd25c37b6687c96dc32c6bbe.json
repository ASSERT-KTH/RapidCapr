{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition eig = new EigenDecomposition(m);\n    \n    // Check if the input matrix is positive definite\n    final double maxEigenvalue = Arrays.stream(eig.getRealEigenvalues()).max().getAsDouble();\n    if (maxEigenvalue <= 0) {\n        throw new IllegalArgumentException(\"Input matrix is not positive definite.\");\n    }\n\n    final RealMatrix v = eig.getV();\n    final RealMatrix d = eig.getD();\n\n    // Adjust eigenvalues to ensure numerical stability\n    final double[] adjustedEigenvalues = new double[n];\n    for (int i = 0; i < n; i++) {\n        double eigenvalue = d.getEntry(i, i);\n        if (eigenvalue < 0) {\n            adjustedEigenvalues[i] = 0;\n        } else {\n            adjustedEigenvalues[i] = eigenvalue;\n        }\n    }\n    final RealMatrix dAdjusted = MatrixUtils.createRealDiagonalMatrix(adjustedEigenvalues);\n\n    // Compute the matrix square root\n    final SingularValueDecomposition svd = new SingularValueDecomposition(dAdjusted);\n    final RealMatrix s = MatrixUtils.createRealDiagonalMatrix(svd.getS().getColumn(0));\n    final RealMatrix sqrtD = svd.getU().multiply(s).multiply(svd.getVT());\n    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..84fd3c978 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,36 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition eig = new EigenDecomposition(m);\n+    \n+    // Check if the input matrix is positive definite\n+    final double maxEigenvalue = Arrays.stream(eig.getRealEigenvalues()).max().getAsDouble();\n+    if (maxEigenvalue <= 0) {\n+        throw new IllegalArgumentException(\"Input matrix is not positive definite.\");\n     }\n+\n+    final RealMatrix v = eig.getV();\n+    final RealMatrix d = eig.getD();\n+\n+    // Adjust eigenvalues to ensure numerical stability\n+    final double[] adjustedEigenvalues = new double[n];\n+    for (int i = 0; i < n; i++) {\n+        double eigenvalue = d.getEntry(i, i);\n+        if (eigenvalue < 0) {\n+            adjustedEigenvalues[i] = 0;\n+        } else {\n+            adjustedEigenvalues[i] = eigenvalue;\n+        }\n+    }\n+    final RealMatrix dAdjusted = MatrixUtils.createRealDiagonalMatrix(adjustedEigenvalues);\n+\n+    // Compute the matrix square root\n+    final SingularValueDecomposition svd = new SingularValueDecomposition(dAdjusted);\n+    final RealMatrix s = MatrixUtils.createRealDiagonalMatrix(svd.getS().getColumn(0));\n+    final RealMatrix sqrtD = svd.getU().multiply(s).multiply(svd.getVT());\n+    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}