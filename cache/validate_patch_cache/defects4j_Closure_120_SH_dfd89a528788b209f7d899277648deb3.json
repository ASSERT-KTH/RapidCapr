{
    "patch": "  protected void generateBitmaps(DexEncodedMethod method, IRCode code) {\n    List<BasicBlock> blocksToRemove = new ArrayList<>();\n    for (BasicBlock block : code.blocks) {\n>>> [ INFILL ] <<<\n    }\n    // Remove blocks from the code.\n    for (BasicBlock block : blocksToRemove) {\n      code.removeBlock(block);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..140b4944 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+  protected void generateBitmaps(DexEncodedMethod method, IRCode code) {\n+    List<BasicBlock> blocksToRemove = new ArrayList<>();\n+    for (BasicBlock block : code.blocks) {\n+>>> [ INFILL ] <<<\n+    }\n+    // Remove blocks from the code.\n+    for (BasicBlock block : blocksToRemove) {\n+      code.removeBlock(block);\n+    }\n+  }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}