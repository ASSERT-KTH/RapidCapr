{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  final Set<String> validProperties = new HashSet<String>();\n  for (Reference ref : refs) {\n    final Node name = ref.getNode();\n    final Node parent = ref.getParent();\n    final Node gramps = ref.getGrandparent();\n    \n    if (parent.isGetProp()) {\n      // A call target may be using the object as a 'this' value.\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        return false;\n      }\n      final String propName = parent.getLastChild().getString();\n      if (!validProperties.contains(propName)) {\n        if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n          validProperties.add(propName);\n        } else {\n          return false;\n        }\n      }\n    } else {\n      if (!isVarOrAssignExprLhs(name)) {\n        return false;\n      }\n    }\n    final Node val = ref.getAssignedValue();\n    if (val == null || !val.isObjectLit()) {\n      continue;\n    }\n    final List<Node> children = new ArrayList<Node>();\n    boolean valid = true;\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isComputedProp()) {\n        return false;\n      }\n      if (child.isGetterDef() || child.isSetterDef()) {\n        // ES6 get/set not supported.\n        return false;\n      }\n      valid &= children.addAll(NodeUtil.getLhsNodesFromPattern(child));\n      valid &= hasNoSelfReference(name, child);\n      validProperties.add(child.getString());\n    }\n    if (valid) {\n      return true;\n    }\n  }\n  return false;\n}\n\nprivate boolean isVarOrAssignExprLhs(Node name) {\n  return NodeUtil.isNameDeclaration(name) || NodeUtil.isLhsByDestructuring(name);\n}\n\nprivate boolean hasNoSelfReference(Node name, Node objLit) {\n  final Node value = name.getFirstChild().getNext();\n  final List<Node> ancestors = new ArrayList<Node>();\n  for (Node ancestor = value.getParent(); ancestor != null; ancestor = ancestor.getParent()) {\n    ancestors.add(ancestor);\n  }\n  Collections.reverse(ancestors);\n  for (Node property = objLit.getFirstChild(); property != null; property = property.getNext()) {\n    if (property.getLastChild() == value) {\n      // Property has self-reference.\n      return false;\n    }\n  }\n  final boolean overlap = NodeUtil.doesNodeListOverlapAncestorScope(ancestors, name);\n  if (value.isObjectLit()) {\n    ancestors.add(value);\n    return !overlap && hasNoSelfReference(value, value);\n  }\n  return !overlap;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..9559bdee 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,105 +152,80 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      Set<String> validProperties = Sets.newHashSet();\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore most indirect references, like x.y (but not x.y(),\n-        // since the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target may be using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n-\n-          // Deleting a property has different semantics from deleting\n-          // a variable, so deleted properties should not be inlined.\n-\n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          String propName = parent.getLastChild().getString();\n-          if (!validProperties.contains(propName)) {\n-            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n-              validProperties.add(propName);\n-            } else {\n-              return false;\n-            }\n-          }\n-          continue;\n-        }\n-\n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n-\n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n-        }\n-\n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n+private boolean isInlinableObject(List<Reference> refs) {\n+  final Set<String> validProperties = new HashSet<String>();\n+  for (Reference ref : refs) {\n+    final Node name = ref.getNode();\n+    final Node parent = ref.getParent();\n+    final Node gramps = ref.getGrandparent();\n+    \n+    if (parent.isGetProp()) {\n+      // A call target may be using the object as a 'this' value.\n+      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n+        return false;\n+      }\n+      final String propName = parent.getLastChild().getString();\n+      if (!validProperties.contains(propName)) {\n+        if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n+          validProperties.add(propName);\n+        } else {\n           return false;\n         }\n+      }\n+    } else {\n+      if (!isVarOrAssignExprLhs(name)) {\n+        return false;\n+      }\n+    }\n+    final Node val = ref.getAssignedValue();\n+    if (val == null || !val.isObjectLit()) {\n+      continue;\n+    }\n+    final List<Node> children = new ArrayList<Node>();\n+    boolean valid = true;\n+    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n+      if (child.isComputedProp()) {\n+        return false;\n+      }\n+      if (child.isGetterDef() || child.isSetterDef()) {\n+        // ES6 get/set not supported.\n+        return false;\n+      }\n+      valid &= children.addAll(NodeUtil.getLhsNodesFromPattern(child));\n+      valid &= hasNoSelfReference(name, child);\n+      validProperties.add(child.getString());\n+    }\n+    if (valid) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n \n-        // Make sure that the value is not self-referential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n-\n-          validProperties.add(child.getString());\n-\n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n-          }\n-        }\n-\n+private boolean isVarOrAssignExprLhs(Node name) {\n+  return NodeUtil.isNameDeclaration(name) || NodeUtil.isLhsByDestructuring(name);\n+}\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n-      }\n-      return ret;\n+private boolean hasNoSelfReference(Node name, Node objLit) {\n+  final Node value = name.getFirstChild().getNext();\n+  final List<Node> ancestors = new ArrayList<Node>();\n+  for (Node ancestor = value.getParent(); ancestor != null; ancestor = ancestor.getParent()) {\n+    ancestors.add(ancestor);\n+  }\n+  Collections.reverse(ancestors);\n+  for (Node property = objLit.getFirstChild(); property != null; property = property.getNext()) {\n+    if (property.getLastChild() == value) {\n+      // Property has self-reference.\n+      return false;\n     }\n+  }\n+  final boolean overlap = NodeUtil.doesNodeListOverlapAncestorScope(ancestors, name);\n+  if (value.isObjectLit()) {\n+    ancestors.add(value);\n+    return !overlap && hasNoSelfReference(value, value);\n+  }\n+  return !overlap;\n+}\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: method isVarOrAssignExprLhs(Node) is already defined in class InlineObjectLiterals.InliningBehavior",
    "test_result": "ERROR"
}