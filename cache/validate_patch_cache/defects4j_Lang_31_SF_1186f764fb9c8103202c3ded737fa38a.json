{
    "patch": "public class StringUtils {\n\n    public static boolean containsAny(final char[] str, final char[] searchChars) {\n        if (searchChars == null || str == null) {\n            return false;\n        }\n        final int len = str.length;\n        final int searchLen = searchChars.length;\n        final int highStart = searchChars.length - 1;\n        final boolean[] chckd = new boolean[Character.MAX_VALUE + 1];\n\n        // Check for the presence of any search character in the given string\n        for (int i = 0; i < len; i++) {\n            final char ch = str[i];\n            if (ch < chckd.length && !chckd[ch]) {\n                for (int j = 0; j < searchLen; j++) {\n                    if (searchChars[j] == ch) {\n                        return true;\n                    }\n                }\n                if (i < highStart) {\n                    continue;\n                }\n                chckd[ch] = true;\n                for (int j = 0; j < searchLen; j++) {\n                    final char searchChar = searchChars[j];\n                    if (searchChar < chckd.length) {\n                        chckd[searchChar] = true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..7b9c1d0c 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,41 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+\n+    public static boolean containsAny(final char[] str, final char[] searchChars) {\n+        if (searchChars == null || str == null) {\n+            return false;\n+        }\n+        final int len = str.length;\n+        final int searchLen = searchChars.length;\n+        final int highStart = searchChars.length - 1;\n+        final boolean[] chckd = new boolean[Character.MAX_VALUE + 1];\n+\n+        // Check for the presence of any search character in the given string\n+        for (int i = 0; i < len; i++) {\n+            final char ch = str[i];\n+            if (ch < chckd.length && !chckd[ch]) {\n+                for (int j = 0; j < searchLen; j++) {\n+                    if (searchChars[j] == ch) {\n+                        return true;\n+                    }\n+                }\n+                if (i < highStart) {\n+                    continue;\n+                }\n+                chckd[ch] = true;\n+                for (int j = 0; j < searchLen; j++) {\n+                    final char searchChar = searchChars[j];\n+                    if (searchChar < chckd.length) {\n+                        chckd[searchChar] = true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}