{
    "patch": "            if (savedFields[i].isSaved() == false) {\n                break;\n            }\n            DurationField durationField = savedFields[i].iField.getDurationField();\n            long value = savedFields[i].getValue();\n            if (durationField == null || value == 0) {\n                continue;\n            }\n            millis = durationField.add(millis, value);\n            DurationField rangeField = savedFields[i].iField.getRangeDurationField();\n            if (rangeField == null) {\n                continue;\n            }\n            long boundValue = rangeField.getMinimumValue(millis);\n            if (value < boundValue || value > rangeField.getMaximumValue(millis)) {\n                String desc = savedFields[i].iField.getType().getName();\n                String name = savedFields[i].iText;\n                throw new IllegalFieldValueException(desc, name);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..dc29218d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,25 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].isSaved() == false) {\n+                break;\n+            }\n+            DurationField durationField = savedFields[i].iField.getDurationField();\n+            long value = savedFields[i].getValue();\n+            if (durationField == null || value == 0) {\n+                continue;\n+            }\n+            millis = durationField.add(millis, value);\n+            DurationField rangeField = savedFields[i].iField.getRangeDurationField();\n+            if (rangeField == null) {\n+                continue;\n+            }\n+            long boundValue = rangeField.getMinimumValue(millis);\n+            if (value < boundValue || value > rangeField.getMaximumValue(millis)) {\n+                String desc = savedFields[i].iField.getType().getName();\n+                String name = savedFields[i].iText;\n+                throw new IllegalFieldValueException(desc, name);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}