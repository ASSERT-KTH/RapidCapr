{
    "patch": "        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            try {\n                millis = savedField.set(millis, resetFields);\n                if (i + 1 < count) {\n                    DateTimeFieldType currentType = savedField.iField.getType();\n                    DateTimeFieldType nextType = savedFields[i + 1].iField.getType();\n                    if (compareReverse(currentType.getDurationType().getField(iChrono), nextType.getDurationType().getField(iChrono)) > 0) {\n                        throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentType.getName() + \" -> \" + nextType.getName());\n                    }\n                }\n            } catch (IllegalFieldValueException e) {\n                // Year is occasionally interpreted wrong due to Gregorian Reform\n                if (DateTimeFieldType.year().equals(savedFields[i].iField.getType())) {\n                    long instant = savedFields[i].iField.set(0L, iDefaultYear);\n                    millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n                } else if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                    throw e;\n                } else {\n                    throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..a0802275 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,27 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            try {\n+                millis = savedField.set(millis, resetFields);\n+                if (i + 1 < count) {\n+                    DateTimeFieldType currentType = savedField.iField.getType();\n+                    DateTimeFieldType nextType = savedFields[i + 1].iField.getType();\n+                    if (compareReverse(currentType.getDurationType().getField(iChrono), nextType.getDurationType().getField(iChrono)) > 0) {\n+                        throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentType.getName() + \" -> \" + nextType.getName());\n+                    }\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                // Year is occasionally interpreted wrong due to Gregorian Reform\n+                if (DateTimeFieldType.year().equals(savedFields[i].iField.getType())) {\n+                    long instant = savedFields[i].iField.set(0L, iDefaultYear);\n+                    millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n+                } else if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                    throw e;\n+                } else {\n+                    throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}