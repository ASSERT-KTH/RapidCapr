{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n            incrementIterationsCounter();\n            // save the original vertex\n            final RealPointValuePair[] original = simplex.clone();\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n                final RealPointValuePair[] reflectedSimplex = simplex.clone();\n                final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = evaluateNewSimplex(original, rho, comparator);\n                }\n            } else {\n                final RealPointValuePair contracted = evaluateNewSimplex(original, -sigma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    simplex = evaluateNewSimplex(original, sigma * psi, comparator);\n                } else {\n                    final RealPointValuePair[] shrinked = new RealPointValuePair[original.length];\n                    shrinked[0] = original[0];\n                    for (int i = 1; i < original.length; i++) {\n                        final double[] point = original[i].getPoint();\n                        final double[] shrunk = new double[point.length];\n                        for (int j = 0; j < point.length; j++) {\n                            shrunk[j] = best.getPoint()[j] + sigma * (point[j] - best.getPoint()[j]);\n                        }\n                        shrinked[i] = new RealPointValuePair(shrunk, Double.NaN);\n                    }\n                    simplex = shrinked;\n                }\n            }\n            // check convergence\n            if (checker != null && checker.converged(getIterations(), original, simplex)) {\n                return;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..7c8c1050c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,44 +58,48 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n-\n             incrementIterationsCounter();\n-\n             // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n+            final RealPointValuePair[] original = simplex.clone();\n             final RealPointValuePair best = original[0];\n \n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                final RealPointValuePair[] reflectedSimplex = simplex.clone();\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = evaluateNewSimplex(original, rho, comparator);\n+                }\n+            } else {\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, -sigma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    simplex = evaluateNewSimplex(original, sigma * psi, comparator);\n+                } else {\n+                    final RealPointValuePair[] shrinked = new RealPointValuePair[original.length];\n+                    shrinked[0] = original[0];\n+                    for (int i = 1; i < original.length; i++) {\n+                        final double[] point = original[i].getPoint();\n+                        final double[] shrunk = new double[point.length];\n+                        for (int j = 0; j < point.length; j++) {\n+                            shrunk[j] = best.getPoint()[j] + sigma * (point[j] - best.getPoint()[j]);\n+                        }\n+                        shrinked[i] = new RealPointValuePair(shrunk, Double.NaN);\n+                    }\n+                    simplex = shrinked;\n                 }\n-\n-                return;\n-\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n+            if (checker != null && checker.converged(getIterations(), original, simplex)) {\n                 return;\n             }\n-\n         }\n-\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}