{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        while (true) {\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expandedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n                return;\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted;\n            if (comparator.compare(reflected, original[getWorst()]) < 0) {\n                final RealPointValuePair[] contractedSimplex = evaluateNewSimplex(original, sigma, comparator);\n                if (comparator.compare(contractedSimplex[getWorst()], reflected) < 0) {\n                    simplex = contractedSimplex;\n                    return;\n                } else {\n                    contracted = contractedSimplex[getWorst()];\n                }\n            } else {\n                contracted = evaluateNewSimplex(original, -gamma, comparator)[getWorst()];\n                if (comparator.compare(contracted, best) < 0) {\n                    simplex = evaluateNewSimplex(original, -gamma, comparator);\n                    return;\n                }\n            }\n\n            // shrink the simplex\n            final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n            shrinkedSimplex[0] = best;\n            for (int i = 1; i < shrinkedSimplex.length; ++i) {\n                shrinkedSimplex[i] = new RealPointValuePair(\n                        original[i].getPoint().add(original[i].getPoint().subtract(best.getPoint())),\n                        Double.NaN,\n                        false);\n            }\n            evaluateSimplex(shrinkedSimplex, comparator);\n            simplex = shrinkedSimplex;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..e335d8caa 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,11 +58,9 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n         while (true) {\n-\n             incrementIterationsCounter();\n \n             // save the original vertex\n@@ -72,30 +70,49 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n-\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expandedSimplex;\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n-\n                 return;\n-\n             }\n \n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+            final RealPointValuePair contracted;\n+            if (comparator.compare(reflected, original[getWorst()]) < 0) {\n+                final RealPointValuePair[] contractedSimplex = evaluateNewSimplex(original, sigma, comparator);\n+                if (comparator.compare(contractedSimplex[getWorst()], reflected) < 0) {\n+                    simplex = contractedSimplex;\n+                    return;\n+                } else {\n+                    contracted = contractedSimplex[getWorst()];\n+                }\n+            } else {\n+                contracted = evaluateNewSimplex(original, -gamma, comparator)[getWorst()];\n+                if (comparator.compare(contracted, best) < 0) {\n+                    simplex = evaluateNewSimplex(original, -gamma, comparator);\n+                    return;\n+                }\n             }\n \n+            // shrink the simplex\n+            final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n+            shrinkedSimplex[0] = best;\n+            for (int i = 1; i < shrinkedSimplex.length; ++i) {\n+                shrinkedSimplex[i] = new RealPointValuePair(\n+                        original[i].getPoint().add(original[i].getPoint().subtract(best.getPoint())),\n+                        Double.NaN,\n+                        false);\n+            }\n+            evaluateSimplex(shrinkedSimplex, comparator);\n+            simplex = shrinkedSimplex;\n         }\n-\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}