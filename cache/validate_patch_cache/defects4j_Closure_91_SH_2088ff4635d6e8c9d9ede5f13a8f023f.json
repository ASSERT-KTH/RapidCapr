{
    "patch": "      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n          return true;\n        } else {\n          if (isFunctionPrototypeProperty(lhs)) {\n            return false;\n          }\n\n          if (NodeUtil.isGet(lhs)) {\n            if (lhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n            Node llhs = lhs.getFirstChild();\n            if (isFunctionPrototype(llhs)) {\n              return false;\n            }\n          }\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  private boolean isFunctionPrototype(Node n) {\n    return n.getType() == Token.GETPROP &&\n        n.getLastChild().getString().equals(\"prototype\") &&\n        isFunction(n.getFirstChild());\n  }\n\n  private boolean isFunctionPrototypeProperty(Node n) {\n    if (n.getType() == Token.GETPROP &&\n        n.getLastChild().getString().equals(\"prototype\")) {\n      Node nn = n.getFirstChild();\n      if (isFunction(nn)) {\n        return true;\n      }\n      Node parent = nn.getParent();\n      if (NodeUtil.isName(parent)) {\n        Scope.Var var = getScope().getVar(parent.getString());\n        if (var != null && isFunction(var.getNode())) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private boolean isFunction(Node n) {\n    if (n != null && n.getType() == Token.FUNCTION) {\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      return jsDoc == null || !jsDoc.isConstructor();\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..b1e26bc2 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,72 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+          return true;\n+        } else {\n+          if (isFunctionPrototypeProperty(lhs)) {\n+            return false;\n+          }\n+\n+          if (NodeUtil.isGet(lhs)) {\n+            if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+            Node llhs = lhs.getFirstChild();\n+            if (isFunctionPrototype(llhs)) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n+\n+      return true;\n+    }\n+\n+    return false;\n+  }\n+\n+  private boolean isFunctionPrototype(Node n) {\n+    return n.getType() == Token.GETPROP &&\n+        n.getLastChild().getString().equals(\"prototype\") &&\n+        isFunction(n.getFirstChild());\n+  }\n+\n+  private boolean isFunctionPrototypeProperty(Node n) {\n+    if (n.getType() == Token.GETPROP &&\n+        n.getLastChild().getString().equals(\"prototype\")) {\n+      Node nn = n.getFirstChild();\n+      if (isFunction(nn)) {\n+        return true;\n+      }\n+      Node parent = nn.getParent();\n+      if (NodeUtil.isName(parent)) {\n+        Scope.Var var = getScope().getVar(parent.getString());\n+        if (var != null && isFunction(var.getNode())) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  private boolean isFunction(Node n) {\n+    if (n != null && n.getType() == Token.FUNCTION) {\n+      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      return jsDoc == null || !jsDoc.isConstructor();\n+    }\n+    return false;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}