{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n    double gammaValue = Gamma.gamma(a);\n    double igfValue = incompleteGammaFraction(a, x);\n    return igfValue / gammaValue;\n}\n\nprivate static final double DEFAULT_EPSILON = 1E-14;\nprivate static final int DEFAULT_MAX_ITERATIONS = 1000;\n\nprivate static double incompleteGammaFraction(double a, double x) {\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    double fraction = 0.0;\n    double increment = 1.0 / a;\n    double prevFraction = fraction + increment;\n\n    int i = 1;\n    while (i <= DEFAULT_MAX_ITERATIONS && Math.abs(fraction - prevFraction) > DEFAULT_EPSILON * Math.abs(prevFraction)) {\n        prevFraction = fraction;\n        double numerator = Math.pow(x, a) * Math.exp(-x);\n        double denominator = Gamma.gamma(a + 1);\n        fraction += numerator / denominator;\n        increment *= x / (a + i);\n        i++;\n    }\n\n    return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * fraction;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c3178a290 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,39 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+    double gammaValue = Gamma.gamma(a);\n+    double igfValue = incompleteGammaFraction(a, x);\n+    return igfValue / gammaValue;\n+}\n+\n+private static final double DEFAULT_EPSILON = 1E-14;\n+private static final int DEFAULT_MAX_ITERATIONS = 1000;\n+\n+private static double incompleteGammaFraction(double a, double x) {\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    double fraction = 0.0;\n+    double increment = 1.0 / a;\n+    double prevFraction = fraction + increment;\n+\n+    int i = 1;\n+    while (i <= DEFAULT_MAX_ITERATIONS && Math.abs(fraction - prevFraction) > DEFAULT_EPSILON * Math.abs(prevFraction)) {\n+        prevFraction = fraction;\n+        double numerator = Math.pow(x, a) * Math.exp(-x);\n+        double denominator = Gamma.gamma(a + 1);\n+        fraction += numerator / denominator;\n+        increment *= x / (a + i);\n+        i++;\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * fraction;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}