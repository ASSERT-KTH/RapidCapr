{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n  if (n.getType() == Token.LABEL) {\n    if (n.getFirstChild().getType() == Token.EMPTY) {\n      n = n.getLastChild();\n    } else {\n      return false;\n    }\n  }\n  if (n.getType() == Token.BLOCK) {\n    // For labeled block children, recurse on the child.\n    if (NodeUtil.isLabeledBlock(n)) {\n      return isOneExactlyFunctionOrDo(n.getFirstChild());\n    }\n    // Otherwise, we just check if it has exactly one child that is a FUNCTION or DO.\n    return n.hasChildren() && n.getFirstChild().getNext() == null \n        && (n.getFirstChild().getType() == Token.FUNCTION || n.getFirstChild().getType() == Token.DO);\n  }\n  return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..3981586e 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,25 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+  if (n.getType() == Token.LABEL) {\n+    if (n.getFirstChild().getType() == Token.EMPTY) {\n+      n = n.getLastChild();\n+    } else {\n+      return false;\n+    }\n   }\n+  if (n.getType() == Token.BLOCK) {\n+    // For labeled block children, recurse on the child.\n+    if (NodeUtil.isLabeledBlock(n)) {\n+      return isOneExactlyFunctionOrDo(n.getFirstChild());\n+    }\n+    // Otherwise, we just check if it has exactly one child that is a FUNCTION or DO.\n+    return n.hasChildren() && n.getFirstChild().getNext() == null \n+        && (n.getFirstChild().getType() == Token.FUNCTION || n.getFirstChild().getType() == Token.DO);\n+  }\n+  return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}