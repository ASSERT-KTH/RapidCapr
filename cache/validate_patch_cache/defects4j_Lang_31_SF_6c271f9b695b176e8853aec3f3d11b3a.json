{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int len = str.length();\n    int searchLen = searchChars.length;\n    int startIndex = 0;\n    char[] chars = str.toCharArray();\n    boolean[] spanned = new boolean[Character.MAX_VALUE + 1];\n\n    for (int i = 0; i < searchLen; i++) {\n        if (spanned[searchChars[i]]) {\n            continue;\n        }\n        for (int j = 0; j < len; j++) {\n            if (searchChars[i] == chars[j]) {\n                if (Character.isHighSurrogate(chars[j])) {\n                    if (j + 1 < len && Character.isLowSurrogate(chars[j + 1])) {\n                        if (containsAny(chars[j] + \"\" + chars[j + 1], searchChars)) {\n                            return true;\n                        }\n                    }\n                } else {\n                    return true;\n                }\n            }\n        }\n        spanned[searchChars[i]] = true;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..42700db1 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,37 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int len = str.length();\n+    int searchLen = searchChars.length;\n+    int startIndex = 0;\n+    char[] chars = str.toCharArray();\n+    boolean[] spanned = new boolean[Character.MAX_VALUE + 1];\n+\n+    for (int i = 0; i < searchLen; i++) {\n+        if (spanned[searchChars[i]]) {\n+            continue;\n+        }\n+        for (int j = 0; j < len; j++) {\n+            if (searchChars[i] == chars[j]) {\n+                if (Character.isHighSurrogate(chars[j])) {\n+                    if (j + 1 < len && Character.isLowSurrogate(chars[j + 1])) {\n+                        if (containsAny(chars[j] + \"\" + chars[j + 1], searchChars)) {\n+                            return true;\n+                        }\n+                    }\n+                } else {\n+                    return true;\n+                }\n+            }\n+        }\n+        spanned[searchChars[i]] = true;\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}