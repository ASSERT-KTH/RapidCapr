{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n\n    if (type.isYearBased()) {\n        years = getEffectiveYears();\n\n        if (type.isSupported(DurationFieldType.months())) {\n            months = getEffectiveMonths();\n        } else if (months != 0 && type.isSupported(PeriodType.months())) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n        }\n    }\n\n    if (years != 0) {\n        result = result.withYears(years);\n    }\n    if (months != 0) {\n        result = result.withMonths(months);\n    }\n\n    return result.normalizedStandard();\n}\n\nprivate int getEffectiveYears() {\n    return getYears() + (getMonths() / 12) + (getWeeks() / 52);\n}\n\nprivate int getEffectiveMonths() {\n    return getMonths() % 12 + (getWeeks() % 52 * 4);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..ec958d14 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,46 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    int years = getYears();\n+    int months = getMonths();\n+\n+    if (type.isYearBased()) {\n+        years = getEffectiveYears();\n+\n+        if (type.isSupported(DurationFieldType.months())) {\n+            months = getEffectiveMonths();\n+        } else if (months != 0 && type.isSupported(PeriodType.months())) {\n             years = FieldUtils.safeAdd(years, months / 12);\n             months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n         }\n-        return result;\n     }\n \n+    if (years != 0) {\n+        result = result.withYears(years);\n+    }\n+    if (months != 0) {\n+        result = result.withMonths(months);\n+    }\n+\n+    return result.normalizedStandard();\n+}\n+\n+private int getEffectiveYears() {\n+    return getYears() + (getMonths() / 12) + (getWeeks() / 52);\n+}\n+\n+private int getEffectiveMonths() {\n+    return getMonths() % 12 + (getWeeks() % 52 * 4);\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}