{
    "patch": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    final double sqrtDet = FastMath.sqrt(FastMath.abs(covarianceMatrixDeterminant));\n    double factor = FastMath.pow(2 * FastMath.PI, -dim / 2.0) * sqrtDet;\n    if (Double.isNaN(factor) || Double.isInfinite(factor) || factor == 0) {\n        throw new MathArithmeticException(LocalizedFormats.ZERO_OR_NEGATIVE_VALUES_IN_DENSITY,\n                dim, covarianceMatrixDeterminant);\n    }\n    double[] centered = new double[dim];\n    final double[] arr$ = derivativeDistributor.center(vals);\n    final int len$ = arr$.length;\n    final double d = 1.0 / Arrays.stream(arr$).map(val -> {\n        return val - mean;\n    }).map(val -> {\n        return val / bandwidth;\n    }).map(Math::abs).reduce(0.0, (d1, d2) -> {\n        return d1 + Math.pow(d2, 2);\n    });\n\n    final double factor1 = dim > 1 ? (2 * dim - 5) * FastMath.pow((double) 4 / (dim + 2), (double) 2 / (dim + 4)) :\n            1;\n    final double factor2 = dim > 1 ? FastMath.pow(d, (double) 2 / (dim + 4)) : 1;\n    final double density = 1 / (len$ * bandwidth * FastMath.pow(factor1 * factor2, (double) 1 / (dim + 4))) * factor;\n\n    if (density <= 0.0) {\n        throw new MathArithmeticException(LocalizedFormats.ZERO_OR_NEGATIVE_VALUES_IN_DENSITY,\n                dim, covarianceMatrixDeterminant);\n    }\n    \n    return density;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..bea2f7d0f 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -174,16 +174,40 @@ public class MultivariateNormalDistribution\n     }\n \n     /** {@inheritDoc} */\n-    public double density(final double[] vals) throws DimensionMismatchException {\n-        final int dim = getDimension();\n-        if (vals.length != dim) {\n-            throw new DimensionMismatchException(vals.length, dim);\n-        }\n+public double density(final double[] vals) throws DimensionMismatchException {\n+    final int dim = getDimension();\n+    if (vals.length != dim) {\n+        throw new DimensionMismatchException(vals.length, dim);\n+    }\n+    final double sqrtDet = FastMath.sqrt(FastMath.abs(covarianceMatrixDeterminant));\n+    double factor = FastMath.pow(2 * FastMath.PI, -dim / 2.0) * sqrtDet;\n+    if (Double.isNaN(factor) || Double.isInfinite(factor) || factor == 0) {\n+        throw new MathArithmeticException(LocalizedFormats.ZERO_OR_NEGATIVE_VALUES_IN_DENSITY,\n+                dim, covarianceMatrixDeterminant);\n+    }\n+    double[] centered = new double[dim];\n+    final double[] arr$ = derivativeDistributor.center(vals);\n+    final int len$ = arr$.length;\n+    final double d = 1.0 / Arrays.stream(arr$).map(val -> {\n+        return val - mean;\n+    }).map(val -> {\n+        return val / bandwidth;\n+    }).map(Math::abs).reduce(0.0, (d1, d2) -> {\n+        return d1 + Math.pow(d2, 2);\n+    });\n+\n+    final double factor1 = dim > 1 ? (2 * dim - 5) * FastMath.pow((double) 4 / (dim + 2), (double) 2 / (dim + 4)) :\n+            1;\n+    final double factor2 = dim > 1 ? FastMath.pow(d, (double) 2 / (dim + 4)) : 1;\n+    final double density = 1 / (len$ * bandwidth * FastMath.pow(factor1 * factor2, (double) 1 / (dim + 4))) * factor;\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+    if (density <= 0.0) {\n+        throw new MathArithmeticException(LocalizedFormats.ZERO_OR_NEGATIVE_VALUES_IN_DENSITY,\n+                dim, covarianceMatrixDeterminant);\n     }\n+    \n+    return density;\n+}\n \n     /**\n      * Gets the square root of each element on the diagonal of the covariance",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}