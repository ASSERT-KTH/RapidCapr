{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      } else if (constructorType.isEnumType()) {\n        type = constructorType;\n      } else if (constructorType.isObjectType()) {\n        ObjectType objType = constructorType.toObjectType();\n        if (objType.hasReferenceName() && objType.getReferenceName().endsWith(\".prototype\")) {\n          type = traverse(objType.getConstructor().getParent(), scope).getType();\n        } else {\n          type = objType;\n        }\n      } else if (constructorType.isFunctionType() || constructorType.isInterface()) {\n        ObjectType instanceType = constructorType.toObjectType();\n        if (instanceType != null && instanceType.hasReferenceName()) {\n          String className = instanceType.getReferenceName();\n          ObjectType classType = findClassType(className, scope);\n          if (classType != null) {\n            type = classType;\n          }\n        }\n      } else {\n        type = constructorType;\n      }\n    }\n  }\n  n.setJSType(type);\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}\n\nprivate ObjectType findClassType(String className, FlowScope scope) {\n  Preconditions.checkArgument(className != null);\n  for (int i = scope.getStackDepth(); --i >= 0;) {\n    ObjectType objectType = scope.getVar(scope.getStackSlot(i)).getType().toObjectType();\n    if (objectType != null && className.equals(objectType.getReferenceName())) {\n      return objectType;\n    }\n  }\n  return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..d202b38f 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,59 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+  if (constructorType != null) {\n+    constructorType = constructorType.restrictByNotNullOrUndefined();\n+    if (constructorType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct != null && ct.isConstructor()) {\n+        type = ct.getInstanceType();\n+      } else if (constructorType.isEnumType()) {\n+        type = constructorType;\n+      } else if (constructorType.isObjectType()) {\n+        ObjectType objType = constructorType.toObjectType();\n+        if (objType.hasReferenceName() && objType.getReferenceName().endsWith(\".prototype\")) {\n+          type = traverse(objType.getConstructor().getParent(), scope).getType();\n+        } else {\n+          type = objType;\n         }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+      } else if (constructorType.isFunctionType() || constructorType.isInterface()) {\n+        ObjectType instanceType = constructorType.toObjectType();\n+        if (instanceType != null && instanceType.hasReferenceName()) {\n+          String className = instanceType.getReferenceName();\n+          ObjectType classType = findClassType(className, scope);\n+          if (classType != null) {\n+            type = classType;\n+          }\n         }\n+      } else {\n+        type = constructorType;\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+  }\n+  n.setJSType(type);\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n+  }\n+  return scope;\n+}\n+\n+private ObjectType findClassType(String className, FlowScope scope) {\n+  Preconditions.checkArgument(className != null);\n+  for (int i = scope.getStackDepth(); --i >= 0;) {\n+    ObjectType objectType = scope.getVar(scope.getStackSlot(i)).getType().toObjectType();\n+    if (objectType != null && className.equals(objectType.getReferenceName())) {\n+      return objectType;\n     }\n-    return scope;\n   }\n+  return null;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}