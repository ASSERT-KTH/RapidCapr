{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  JSType result;\n\n  // Try to resolve using the registry first\n  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n  if (resolvedViaRegistry) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    result = registry.isLastGeneration() ? getReferencedType() : this;\n  } else {\n    // Try to resolve using the properties\n    resolveViaProperties(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n      result = registry.isLastGeneration() ? getReferencedType() : this;\n    } else {\n      // If not resolved yet, check for implicit prototype cycle\n      if (detectImplicitPrototypeCycle()){\n        handleTypeCycle(t);\n      }\n      // Even if there was a cycle, the type may still resolve properly afterwards\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      result = registry.isLastGeneration() ? getReferencedType() : this;\n    }\n  }\n  return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..75856112 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,34 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  JSType result;\n \n+  // Try to resolve using the registry first\n+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+  if (resolvedViaRegistry) {\n     super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n+    result = registry.isLastGeneration() ? getReferencedType() : this;\n+  } else {\n+    // Try to resolve using the properties\n+    resolveViaProperties(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n+      result = registry.isLastGeneration() ? getReferencedType() : this;\n+    } else {\n+      // If not resolved yet, check for implicit prototype cycle\n+      if (detectImplicitPrototypeCycle()){\n+        handleTypeCycle(t);\n+      }\n+      // Even if there was a cycle, the type may still resolve properly afterwards\n+      super.resolveInternal(t, enclosing);\n+      finishPropertyContinuations();\n+      result = registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n+  return result;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}