{
    "patch": "    Node fnNode = fnScope.getRootNode();\n    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(fnNode);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(fnNode);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        String argName = lastArg.getString();\n        Var var = fnScope.getVar(argName);\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportChangeToChangeScope(lastArg);\n          compiler.addToPropertyChangeMap(\n                REFFED_FIELDS_CHANGE_MARK_NAME,\n                var.getName(),\n                ChangeScope.ANY);\n        } else {\n          break;\n        }\n        lastArg = argList.getLastChild();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..fdd6f977 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,31 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node fnNode = fnScope.getRootNode();\n+    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(fnNode);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(fnNode);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        String argName = lastArg.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportChangeToChangeScope(lastArg);\n+          compiler.addToPropertyChangeMap(\n+                REFFED_FIELDS_CHANGE_MARK_NAME,\n+                var.getName(),\n+                ChangeScope.ANY);\n+        } else {\n+          break;\n+        }\n+        lastArg = argList.getLastChild();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}