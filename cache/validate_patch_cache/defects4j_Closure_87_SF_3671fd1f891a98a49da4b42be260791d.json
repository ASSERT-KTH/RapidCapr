{
    "patch": "        if (maybeExpr.getType() != Token.EXPR_RESULT || !NodeUtil.isExpressionNode(maybeExpr.getFirstChild())) {\n          return false;\n        }\n        // Traverse up the tree to check for function calls that should not be folded\n        Node parent = maybeExpr.getParent();\n        while (parent != null) {\n          int parentType = parent.getType();\n          if (parentType == Token.CALL || parentType == Token.NEW || parentType == Token.OBJECTLIT) {\n            return false;\n          }\n          if (parentType == Token.IF && !isFoldableExpression(parent.getFirstChild())) {\n            return false;\n          }\n          parent = parent.getParent();\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private boolean isFoldableExpression(Node n) {\n    int type = n.getType();\n    return type == Token.NAME\n        || type == Token.THIS\n        || type == Token.NUMBER\n        || type == Token.STRING\n        || type == Token.NULL\n        || type == Token.TRUE\n        || type == Token.FALSE\n        || type == Token.REGEXP\n        || type == Token.ARRAYLIT\n        || type == Token.OBJECTLIT\n        || type == Token.GETPROP && isFoldableExpression(n.getFirstChild())\n        || type == Token.HOOK\n            && isFoldableExpression(n.getFirstChild())\n            && isFoldableExpression(n.getLastChild())\n        || type == Token.OR || type == Token.AND || type == Token.NOT || type == Token.BITNOT\n        || type == Token.INC || type == Token.DEC;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..76dd69bc 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,46 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+        if (maybeExpr.getType() != Token.EXPR_RESULT || !NodeUtil.isExpressionNode(maybeExpr.getFirstChild())) {\n+          return false;\n+        }\n+        // Traverse up the tree to check for function calls that should not be folded\n+        Node parent = maybeExpr.getParent();\n+        while (parent != null) {\n+          int parentType = parent.getType();\n+          if (parentType == Token.CALL || parentType == Token.NEW || parentType == Token.OBJECTLIT) {\n+            return false;\n+          }\n+          if (parentType == Token.IF && !isFoldableExpression(parent.getFirstChild())) {\n+            return false;\n+          }\n+          parent = parent.getParent();\n+        }\n+        return true;\n       }\n     }\n-\n     return false;\n   }\n \n+  private boolean isFoldableExpression(Node n) {\n+    int type = n.getType();\n+    return type == Token.NAME\n+        || type == Token.THIS\n+        || type == Token.NUMBER\n+        || type == Token.STRING\n+        || type == Token.NULL\n+        || type == Token.TRUE\n+        || type == Token.FALSE\n+        || type == Token.REGEXP\n+        || type == Token.ARRAYLIT\n+        || type == Token.OBJECTLIT\n+        || type == Token.GETPROP && isFoldableExpression(n.getFirstChild())\n+        || type == Token.HOOK\n+            && isFoldableExpression(n.getFirstChild())\n+            && isFoldableExpression(n.getLastChild())\n+        || type == Token.OR || type == Token.AND || type == Token.NOT || type == Token.BITNOT\n+        || type == Token.INC || type == Token.DEC;\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}