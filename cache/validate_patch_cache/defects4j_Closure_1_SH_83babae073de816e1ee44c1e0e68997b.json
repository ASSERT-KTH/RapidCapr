{
    "patch": "    \n    // For setter methods in object literals, don't remove parameters.\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      int numArgs = argList.getChildCount();\n      // iterate over a copy so we can safely remove the original children\n      List<Node> reverseChildList = Lists.newArrayList(argList.children());\n      Collections.reverse(reverseChildList);\n      for (Node arg : reverseChildList) {\n        // Skip any remaining args if we don't have any referenced args left to match them against.\n        if (referenced.isEmpty()) {\n          argList.removeChild(arg);\n          compiler.reportCodeChange();\n          continue;\n        }\n        Var var = fnScope.getVar(arg.getString());\n        if (var != null && referenced.contains(var)) {\n          referenced.remove(var);\n        } else {\n          // No more referenced ones left: remove this arg.\n          argList.removeChild(arg);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b3d4aa3f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,34 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    // For setter methods in object literals, don't remove parameters.\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      int numArgs = argList.getChildCount();\n+      // iterate over a copy so we can safely remove the original children\n+      List<Node> reverseChildList = Lists.newArrayList(argList.children());\n+      Collections.reverse(reverseChildList);\n+      for (Node arg : reverseChildList) {\n+        // Skip any remaining args if we don't have any referenced args left to match them against.\n+        if (referenced.isEmpty()) {\n+          argList.removeChild(arg);\n+          compiler.reportCodeChange();\n+          continue;\n+        }\n+        Var var = fnScope.getVar(arg.getString());\n+        if (var != null && referenced.contains(var)) {\n+          referenced.remove(var);\n+        } else {\n+          // No more referenced ones left: remove this arg.\n+          argList.removeChild(arg);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}