{
    "patch": "    attachLiteralTypes(n);\n    boolean isFunctionDeclOrExpr = NodeUtil.isFunctionDeclaration(n) || NodeUtil.isFunctionExpression(n);\n    if (isFunctionDeclOrExpr && NodeUtil.isStatement(n.getParent())) {\n      defineDeclaredFunction(n, n.getParent());\n      return;\n    }\n\n    switch (n.getType()) {\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      case Token.LET:\n      case Token.CONST:\n        defineLetConst(n, parent);\n        break;\n      default:\n        break;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..6546814c 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,27 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    attachLiteralTypes(n);\n+    boolean isFunctionDeclOrExpr = NodeUtil.isFunctionDeclaration(n) || NodeUtil.isFunctionExpression(n);\n+    if (isFunctionDeclOrExpr && NodeUtil.isStatement(n.getParent())) {\n+      defineDeclaredFunction(n, n.getParent());\n+      return;\n+    }\n+\n+    switch (n.getType()) {\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      case Token.LET:\n+      case Token.CONST:\n+        defineLetConst(n, parent);\n+        break;\n+      default:\n+        break;\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}