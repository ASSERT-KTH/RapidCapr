{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope globalScope = t.getGlobalScope();\n    for (Var v : globalScope.getVarIterable()) {\n        Node n = v.getNode();\n        if (!n.hasChildren()) {\n            continue;\n        }\n\n        Node parent = n.getParent();\n        if (!parent.isVar()) {\n            continue;\n        }\n\n        Node initializer = n.getFirstChild();\n        if (!initializer.isQualifiedName()) {\n            continue;\n        }\n\n        String name = n.getString();\n        // Get the alias variable from the local scope\n        Var localAliasVar = t.getScope().getVar(name);\n        if (localAliasVar == null) {\n            // This should never happen as any declaration without a local\n            // reference should have been caught by the check for qualified\n            // initializers above\n            continue;\n        }\n        aliases.put(name, localAliasVar);\n\n        Node value = localAliasVar.getInitialValue();\n        if (value == null || !value.isQualifiedName()) {\n            // If the initializer is not a qualified name, don't proceed\n            continue;\n        }\n\n        String qualifiedName = value.getQualifiedName();\n        if (qualifiedName == null) {\n            // If the qualified name is null, don't proceed\n            continue;\n        }\n        transformation.addAlias(name, qualifiedName);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..2cfde67b 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,49 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n+private void findAliases(NodeTraversal t) {\n+    Scope globalScope = t.getGlobalScope();\n+    for (Var v : globalScope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n+        if (!n.hasChildren()) {\n+            continue;\n+        }\n+\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        if (!parent.isVar()) {\n+            continue;\n         }\n+\n+        Node initializer = n.getFirstChild();\n+        if (!initializer.isQualifiedName()) {\n+            continue;\n         }\n-      }\n+\n+        String name = n.getString();\n+        // Get the alias variable from the local scope\n+        Var localAliasVar = t.getScope().getVar(name);\n+        if (localAliasVar == null) {\n+            // This should never happen as any declaration without a local\n+            // reference should have been caught by the check for qualified\n+            // initializers above\n+            continue;\n+        }\n+        aliases.put(name, localAliasVar);\n+\n+        Node value = localAliasVar.getInitialValue();\n+        if (value == null || !value.isQualifiedName()) {\n+            // If the initializer is not a qualified name, don't proceed\n+            continue;\n+        }\n+\n+        String qualifiedName = value.getQualifiedName();\n+        if (qualifiedName == null) {\n+            // If the qualified name is null, don't proceed\n+            continue;\n+        }\n+        transformation.addAlias(name, qualifiedName);\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}