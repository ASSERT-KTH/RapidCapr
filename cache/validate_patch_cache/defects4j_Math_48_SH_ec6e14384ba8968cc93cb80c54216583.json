{
    "patch": "                    double deltaX = Math.abs(x1 - x0);\n                    double epsMax = Math.max(Math.max(Math.abs(x1), Math.abs(x0)) * rtol, atol);\n                    if (deltaX < epsMax || FastMath.abs(fx) <= ftol) {\n                        switch (allowed) {\n                            case ANY_SIDE:\n                                return x;\n                            case LEFT_SIDE:\n                                return inverted ? x : getMin();\n                            case RIGHT_SIDE:\n                                return inverted ? getMax() : x;\n                            case BELOW_SIDE:\n                                return (fx <= 0) ? x : getMin();\n                            case ABOVE_SIDE:\n                                return (fx >= 0) ? x : getMax();\n                            default:\n                                throw new MathInternalError();\n                        }\n                    }\n\n                    // Update the bounds with the new approximation.\n                    if (f1 * fx < 0) {\n                        x0 = x1;\n                        f0 = f1;\n                        inverted = !inverted;\n                    } else {\n                        // Update weight-based estimate over interval for next guess.\n                        switch (method) {\n                            case ILLINOIS:\n                                f0 *= 0.5;\n                                break;\n                            case PEGASUS:\n                                double ff = (f1 - f0) / fx;\n                                double gg = calcGg(ff);\n                                if (gg <= 0) {\n                                    f0 = f1 * 0.5;\n                                } else {\n                                    f0 = f1 / (1.0 + gg);\n                                }\n                                break;\n                            case REGULA_FALSI:\n                                f0 = f1;\n                                break;\n                            default:\n                                // Should never happen.\n                                throw new MathInternalError();\n                        }\n                    }\n\n                    // Update from [x0, x1] to [x1, x].\n                    x1 = x;\n                    f1 = fx;\n                }\n\n                throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..983abff7d 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,60 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                    double deltaX = Math.abs(x1 - x0);\n+                    double epsMax = Math.max(Math.max(Math.abs(x1), Math.abs(x0)) * rtol, atol);\n+                    if (deltaX < epsMax || FastMath.abs(fx) <= ftol) {\n+                        switch (allowed) {\n+                            case ANY_SIDE:\n+                                return x;\n+                            case LEFT_SIDE:\n+                                return inverted ? x : getMin();\n+                            case RIGHT_SIDE:\n+                                return inverted ? getMax() : x;\n+                            case BELOW_SIDE:\n+                                return (fx <= 0) ? x : getMin();\n+                            case ABOVE_SIDE:\n+                                return (fx >= 0) ? x : getMax();\n+                            default:\n+                                throw new MathInternalError();\n+                        }\n+                    }\n+\n+                    // Update the bounds with the new approximation.\n+                    if (f1 * fx < 0) {\n+                        x0 = x1;\n+                        f0 = f1;\n+                        inverted = !inverted;\n+                    } else {\n+                        // Update weight-based estimate over interval for next guess.\n+                        switch (method) {\n+                            case ILLINOIS:\n+                                f0 *= 0.5;\n+                                break;\n+                            case PEGASUS:\n+                                double ff = (f1 - f0) / fx;\n+                                double gg = calcGg(ff);\n+                                if (gg <= 0) {\n+                                    f0 = f1 * 0.5;\n+                                } else {\n+                                    f0 = f1 / (1.0 + gg);\n+                                }\n+                                break;\n+                            case REGULA_FALSI:\n+                                f0 = f1;\n+                                break;\n+                            default:\n+                                // Should never happen.\n+                                throw new MathInternalError();\n+                        }\n+                    }\n+\n+                    // Update from [x0, x1] to [x1, x].\n+                    x1 = x;\n+                    f1 = fx;\n+                }\n+\n+                throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED);\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: orphaned default",
    "test_result": "ERROR"
}