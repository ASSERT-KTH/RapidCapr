{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    final int seqEnd = input.length();\n    int result = 0;\n    while (index < seqEnd) {\n        if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n            if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n                start++;\n                isHex = true;\n            }\n            int end = start;\n            while (end < seqEnd && input.charAt(end) != ';') {\n                end++;\n            }\n            if (end == seqEnd) {\n                if (isHex) {\n                    return result; // entity is not yet complete, wait for more data\n                } else {\n                    end = seqEnd;\n                }\n            }\n            int entityValue;\n            try {\n                if (isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch (NumberFormatException nfe) {\n                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n                return 0;\n            }\n            if (entityValue > 0xFFFF) { // write the surrogate pair\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n            result += 2 + (end - start) + (isHex ? 1 : 0); // only count the entity size and not the additional semicolon at the end.\n            index = end + 1;\n        } else if (input.charAt(index) == '&' && index < seqEnd - 3 && input.subSequence(index, index + 4).equals(\"&lt;\")) {\n            out.write(\"<\");\n            result += 1;\n            index += 4;\n        } else if (input.charAt(index) == '&' && index < seqEnd - 3 && input.subSequence(index, index + 4).equals(\"&gt;\")) {\n            out.write(\">\");\n            result += 1;\n            index += 4;\n        } else {\n            out.write(input.charAt(index));\n            result++;\n            index++;\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..71421cb4 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,62 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    final int seqEnd = input.length();\n+    int result = 0;\n+    while (index < seqEnd) {\n+        if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n+            if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n                 start++;\n                 isHex = true;\n-\n-                // Check there's more than just an x after the &#\n             }\n-\n             int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n+            while (end < seqEnd && input.charAt(end) != ';') {\n                 end++;\n             }\n-\n+            if (end == seqEnd) {\n+                if (isHex) {\n+                    return result; // entity is not yet complete, wait for more data\n+                } else {\n+                    end = seqEnd;\n+                }\n+            }\n             int entityValue;\n             try {\n-                if(isHex) {\n+                if (isHex) {\n                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                 } else {\n                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                 }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+            } catch (NumberFormatException nfe) {\n+                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n                 return 0;\n             }\n-\n-            if(entityValue > 0xFFFF) {\n+            if (entityValue > 0xFFFF) { // write the surrogate pair\n                 char[] chrs = Character.toChars(entityValue);\n                 out.write(chrs[0]);\n                 out.write(chrs[1]);\n             } else {\n                 out.write(entityValue);\n             }\n-\n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            result += 2 + (end - start) + (isHex ? 1 : 0); // only count the entity size and not the additional semicolon at the end.\n+            index = end + 1;\n+        } else if (input.charAt(index) == '&' && index < seqEnd - 3 && input.subSequence(index, index + 4).equals(\"&lt;\")) {\n+            out.write(\"<\");\n+            result += 1;\n+            index += 4;\n+        } else if (input.charAt(index) == '&' && index < seqEnd - 3 && input.subSequence(index, index + 4).equals(\"&gt;\")) {\n+            out.write(\">\");\n+            result += 1;\n+            index += 4;\n+        } else {\n+            out.write(input.charAt(index));\n+            result++;\n+            index++;\n         }\n-        return 0;\n     }\n+    return result;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<<P&O>[]> but was:<<P&O>[gt;]>",
    "test_result": "FAIL"
}