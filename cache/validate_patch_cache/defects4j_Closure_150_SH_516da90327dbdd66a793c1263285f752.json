{
    "patch": "  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.LP:\n      Node grandParent = parent.getParent();\n      if (grandParent.getType() != Token.EXPR_RESULT) {\n        if (NodeUtil.isFunctionExpression(parent)) {\n          handleFunctionInputs(parent);\n        } else if (grandParent.getType() == Token.ASSIGN ||\n                   grandParent.getType() == Token.VAR ||\n                   grandParent.getType() == Token.EXPR_RESULT) {\n          handleFunctionInputs(grandParent);\n        }\n      }\n      break;\n    case Token.NAME:\n      if (parent.getType() == Token.CATCH) {\n        defineCatch(n, parent);\n      } else if (parent.getType() == Token.EXPR_RESULT || \n                 parent.getType() == Token.VAR || \n                 parent.getType() == Token.ASSIGN) {\n        defineVar(n, parent);\n      }\n      break;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..09f3a56c 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,42 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+  attachLiteralTypes(n);\n+  switch (n.getType()) {\n+    case Token.FUNCTION:\n+      if (parent.getType() == Token.NAME) {\n+        return;\n       }\n+      defineDeclaredFunction(n, parent);\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.VAR:\n+      defineVar(n, parent);\n+      break;\n+    case Token.LP:\n+      Node grandParent = parent.getParent();\n+      if (grandParent.getType() != Token.EXPR_RESULT) {\n+        if (NodeUtil.isFunctionExpression(parent)) {\n+          handleFunctionInputs(parent);\n+        } else if (grandParent.getType() == Token.ASSIGN ||\n+                   grandParent.getType() == Token.VAR ||\n+                   grandParent.getType() == Token.EXPR_RESULT) {\n+          handleFunctionInputs(grandParent);\n+        }\n+      }\n+      break;\n+    case Token.NAME:\n+      if (parent.getType() == Token.CATCH) {\n+        defineCatch(n, parent);\n+      } else if (parent.getType() == Token.EXPR_RESULT || \n+                 parent.getType() == Token.VAR || \n+                 parent.getType() == Token.ASSIGN) {\n+        defineVar(n, parent);\n+      }\n+      break;\n+  }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}