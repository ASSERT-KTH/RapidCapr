{
    "patch": "    private static DateTimeFieldType[] concatTypes(DateTimeFieldType[] array, DateTimeFieldType fieldType) {\n        DateTimeFieldType[] temp = new DateTimeFieldType[array.length + 1];\n        System.arraycopy(array, 0, temp, 0, array.length);\n        temp[temp.length - 1] = fieldType;\n        return temp;\n    }\n\n    private static int[] concatValues(int[] array, int value) {\n        int[] temp = new int[array.length + 1];\n        System.arraycopy(array, 0, temp, 0, array.length);\n        temp[temp.length - 1] = value;\n        return temp;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..3492c94f 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,19 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+    private static DateTimeFieldType[] concatTypes(DateTimeFieldType[] array, DateTimeFieldType fieldType) {\n+        DateTimeFieldType[] temp = new DateTimeFieldType[array.length + 1];\n+        System.arraycopy(array, 0, temp, 0, array.length);\n+        temp[temp.length - 1] = fieldType;\n+        return temp;\n+    }\n+\n+    private static int[] concatValues(int[] array, int value) {\n+        int[] temp = new int[array.length + 1];\n+        System.arraycopy(array, 0, temp, 0, array.length);\n+        temp[temp.length - 1] = value;\n+        return temp;\n+    }\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}