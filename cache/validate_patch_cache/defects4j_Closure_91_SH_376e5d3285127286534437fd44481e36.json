{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isObjectLitKey(parent, n) || \n          ((NodeUtil.isGet(parent) || NodeUtil.isCall(parent)) && \n           parent.getLastChild() == n && \n           !parent.isQualifiedName())) {\n        return false;\n      }\n      Node nameNode = NodeUtil.getNameNode(parent);\n      Scope scope = t.getScope();\n      Var var = scope.getVar(nameNode.getString());\n      if (var != null && var.isGlobal() && var.getName().equals(\"this\") &&\n          !NodeUtil.doesFunctionReferenceOwnThis(t.getEnclosingScope(), parent)) {\n        t.report(n, JSError.make(JSC_USED_GLOBAL_THIS));\n        return false;\n      }\n      if (n.getParent() != null && NodeUtil.isPrototypePropertyDeclaration(n.getParent())) {\n        return false;\n      }\n      if (n.getParent() != null && n.getParent().getFirstChild() == n) {\n        // Don't traverse exported functions getting assigned to obj.prototype.method.\n        Node parentNode = parent.getParent();\n        if (NodeUtil.isGet(parentNode) &&\n            parentNode.getFirstChild().getQualifiedName().equals(\"prototype\")) {\n          if (NodeUtil.isGet(parentNode.getParent())) {\n            return false;\n          }\n        }\n      }\n      if (parent.getParent() != null\n          && NodeUtil.isPrototypeProperty(parent.getParent())) {\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..8339f495 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,38 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isObjectLitKey(parent, n) || \n+          ((NodeUtil.isGet(parent) || NodeUtil.isCall(parent)) && \n+           parent.getLastChild() == n && \n+           !parent.isQualifiedName())) {\n+        return false;\n+      }\n+      Node nameNode = NodeUtil.getNameNode(parent);\n+      Scope scope = t.getScope();\n+      Var var = scope.getVar(nameNode.getString());\n+      if (var != null && var.isGlobal() && var.getName().equals(\"this\") &&\n+          !NodeUtil.doesFunctionReferenceOwnThis(t.getEnclosingScope(), parent)) {\n+        t.report(n, JSError.make(JSC_USED_GLOBAL_THIS));\n+        return false;\n+      }\n+      if (n.getParent() != null && NodeUtil.isPrototypePropertyDeclaration(n.getParent())) {\n+        return false;\n+      }\n+      if (n.getParent() != null && n.getParent().getFirstChild() == n) {\n+        // Don't traverse exported functions getting assigned to obj.prototype.method.\n+        Node parentNode = parent.getParent();\n+        if (NodeUtil.isGet(parentNode) &&\n+            parentNode.getFirstChild().getQualifiedName().equals(\"prototype\")) {\n+          if (NodeUtil.isGet(parentNode.getParent())) {\n+            return false;\n+          }\n+        }\n+      }\n+      if (parent.getParent() != null\n+          && NodeUtil.isPrototypeProperty(parent.getParent())) {\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}