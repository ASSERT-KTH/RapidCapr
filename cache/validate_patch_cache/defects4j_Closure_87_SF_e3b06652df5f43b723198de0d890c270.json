{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        \n        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n          Node expr = maybeExpr.getFirstChild();\n          \n          while (expr.getType() != Token.NAME && expr.getType() != Token.GETPROP) {\n            if (expr.getType() == Token.ASSIGN) {\n              expr = expr.getLastChild();\n            } else if (expr.getType() == Token.CALL) {\n              return false;\n            } else if (expr.getType() == Token.NEW) {\n              expr = expr.getFirstChild();\n            } else if (expr.getType() == Token.HOOK) {\n              Node left = expr.getFirstChild();\n              Node right = left.getNext();\n              expr = isFoldableExpression(left) ? right : left;\n            } else {\n              return false;\n            }\n          }\n          \n          if (expr.getType() == Token.NAME) {\n            String name = expr.getString();\n            // check if the name is an event handler function\n            return !name.startsWith(\"event\");\n          } else {\n            return isFoldableExpression(expr);\n          }\n        }\n        \n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n    return false;\n  }\n  \n  private boolean isFoldableExpression(Node n) {\n    int type = n.getType();\n    return type == Token.NAME\n        || type == Token.THIS\n        || type == Token.NUMBER\n        || type == Token.STRING\n        || type == Token.TRUE\n        || type == Token.FALSE\n        || type == Token.NULL\n        || type == Token.OBJECTLIT\n        || type == Token.ARRAYLIT\n        || type == Token.REGEXP\n        || type == Token.GETPROP && isFoldableExpression(n.getFirstChild())\n        || type == Token.HOOK\n            && isFoldableExpression(n.getFirstChild())\n            && isFoldableExpression(n.getLastChild())\n        || type == Token.OR || type == Token.AND || type == Token.INC || type == Token.DEC;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..2cda1a07 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -520,22 +520,59 @@ public class PeepholeSubstituteAlternateSyntax\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+        \n+        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+          Node expr = maybeExpr.getFirstChild();\n+          \n+          while (expr.getType() != Token.NAME && expr.getType() != Token.GETPROP) {\n+            if (expr.getType() == Token.ASSIGN) {\n+              expr = expr.getLastChild();\n+            } else if (expr.getType() == Token.CALL) {\n+              return false;\n+            } else if (expr.getType() == Token.NEW) {\n+              expr = expr.getFirstChild();\n+            } else if (expr.getType() == Token.HOOK) {\n+              Node left = expr.getFirstChild();\n+              Node right = left.getNext();\n+              expr = isFoldableExpression(left) ? right : left;\n+            } else {\n+              return false;\n+            }\n+          }\n+          \n+          if (expr.getType() == Token.NAME) {\n+            String name = expr.getString();\n+            // check if the name is an event handler function\n+            return !name.startsWith(\"event\");\n+          } else {\n+            return isFoldableExpression(expr);\n+          }\n+        }\n+        \n+        return NodeUtil.isExpressionNode(maybeExpr);\n       }\n     }\n-\n     return false;\n   }\n+  \n+  private boolean isFoldableExpression(Node n) {\n+    int type = n.getType();\n+    return type == Token.NAME\n+        || type == Token.THIS\n+        || type == Token.NUMBER\n+        || type == Token.STRING\n+        || type == Token.TRUE\n+        || type == Token.FALSE\n+        || type == Token.NULL\n+        || type == Token.OBJECTLIT\n+        || type == Token.ARRAYLIT\n+        || type == Token.REGEXP\n+        || type == Token.GETPROP && isFoldableExpression(n.getFirstChild())\n+        || type == Token.HOOK\n+            && isFoldableExpression(n.getFirstChild())\n+            && isFoldableExpression(n.getLastChild())\n+        || type == Token.OR || type == Token.AND || type == Token.INC || type == Token.DEC;\n+  }\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}