{
    "patch": "private VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      // If a variable is being written in the left-hand side\n      // then it is not being read before being killed.\n      return VariableLiveness.KILL;\n    } else {\n      // If a variable is being read, but not being written,\n      // then it is not being killed before being read.\n      return VariableLiveness.READ;\n    }\n  }\n\n  // Recurse on the child nodes\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (ControlFlowGraph.isEnteringNewCfgNode(child)) {\n      // Entering a new function complicates control flow. The variable is potentially live.\n      return VariableLiveness.MAYBE_LIVE;\n    }\n    VariableLiveness state = isVariableReadBeforeKill(child, variable);\n    if (state == VariableLiveness.KILL) {\n      // If the variable is written in a different branch, it is no longer live.\n      return VariableLiveness.KILL;\n    } else if (state == VariableLiveness.READ) {\n      // If any child subtree reads the variable, the variable is not dead.\n      return VariableLiveness.READ;\n    }\n  }\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..bc72d537 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,35 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n-      } else {\n-        return VariableLiveness.READ;\n-      }\n+private VariableLiveness isVariableReadBeforeKill(\n+    Node n, String variable) {\n+  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n+    if (NodeUtil.isLhs(n, n.getParent())) {\n+      // If a variable is being written in the left-hand side\n+      // then it is not being read before being killed.\n+      return VariableLiveness.KILL;\n+    } else {\n+      // If a variable is being read, but not being written,\n+      // then it is not being killed before being read.\n+      return VariableLiveness.READ;\n     }\n+  }\n \n-    // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n-        }\n-      }\n+  // Recurse on the child nodes\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    if (ControlFlowGraph.isEnteringNewCfgNode(child)) {\n+      // Entering a new function complicates control flow. The variable is potentially live.\n+      return VariableLiveness.MAYBE_LIVE;\n+    }\n+    VariableLiveness state = isVariableReadBeforeKill(child, variable);\n+    if (state == VariableLiveness.KILL) {\n+      // If the variable is written in a different branch, it is no longer live.\n+      return VariableLiveness.KILL;\n+    } else if (state == VariableLiveness.READ) {\n+      // If any child subtree reads the variable, the variable is not dead.\n+      return VariableLiveness.READ;\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n   }\n+  return VariableLiveness.MAYBE_LIVE;\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}