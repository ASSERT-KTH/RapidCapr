{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    // alter base year for parsing if first field is month or day\n    DateTimeField first = savedFields[0].iField;\n    if (first.getType() == DateTimeFieldType.monthOfYear() || first.getType() == DateTimeFieldType.dayOfMonth()) {\n        saveField(DateTimeFieldType.year(), iDefaultYear);\n        return computeMillis(resetFields, text);\n    } else {\n        // alter base year for parsing if first field is year or weekyear\n        DurationField years = DurationFieldType.years().getField(iChrono);\n        if (compareReverse(first.getDurationField(), years) <= 0 || first.getType() == DateTimeFieldType.weekyear()\n            || first.getType() == DateTimeFieldType.weekyearOfCentury()) {\n            if (first.getType().equals(DateTimeFieldType.weekyear()) || first.getType().equals(DateTimeFieldType.weekyearOfCentury())) {\n                // calculate year from weekyear and week of weekyear\n                Integer year = estimateYearOfWeekyear(DateTimeFieldType.weekyear().getField(iChrono), \n                                                       DateTimeFieldType.weekOfWeekyear().getField(iChrono),\n                                                       millis,savedFields,count,resetFields);\n                if (year != null) {\n                    // we can set the correct year for this weekyear and continue parsing\n                    saveField(DateTimeFieldType.year(), year);\n                    millis = iChrono.year().set(millis, year);\n                    for (int i = 0; i < count; i++) {\n                        DateTimeField field = savedFields[i].iField;\n                        if (field.getType() != DateTimeFieldType.weekyear()) {\n                            millis = savedFields[i].set(millis, resetFields);\n                        }\n                    }\n                } else {\n                    // we can't set year from weekyear, throw the error\n                    throw e;\n                }\n            } else {\n                // for years, round down to nearest multiple of the duration of the first field\n                DurationField durationField = first.getDurationField();\n                millis = durationField.roundFloor(millis);\n                for (int i = 1; i < count; i++) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            }\n        } else {\n            throw e;\n        }\n    }\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n        throw new IllegalArgumentException(message, e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..1408751c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,62 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    // alter base year for parsing if first field is month or day\n+    DateTimeField first = savedFields[0].iField;\n+    if (first.getType() == DateTimeFieldType.monthOfYear() || first.getType() == DateTimeFieldType.dayOfMonth()) {\n+        saveField(DateTimeFieldType.year(), iDefaultYear);\n+        return computeMillis(resetFields, text);\n+    } else {\n+        // alter base year for parsing if first field is year or weekyear\n+        DurationField years = DurationFieldType.years().getField(iChrono);\n+        if (compareReverse(first.getDurationField(), years) <= 0 || first.getType() == DateTimeFieldType.weekyear()\n+            || first.getType() == DateTimeFieldType.weekyearOfCentury()) {\n+            if (first.getType().equals(DateTimeFieldType.weekyear()) || first.getType().equals(DateTimeFieldType.weekyearOfCentury())) {\n+                // calculate year from weekyear and week of weekyear\n+                Integer year = estimateYearOfWeekyear(DateTimeFieldType.weekyear().getField(iChrono), \n+                                                       DateTimeFieldType.weekOfWeekyear().getField(iChrono),\n+                                                       millis,savedFields,count,resetFields);\n+                if (year != null) {\n+                    // we can set the correct year for this weekyear and continue parsing\n+                    saveField(DateTimeFieldType.year(), year);\n+                    millis = iChrono.year().set(millis, year);\n+                    for (int i = 0; i < count; i++) {\n+                        DateTimeField field = savedFields[i].iField;\n+                        if (field.getType() != DateTimeFieldType.weekyear()) {\n+                            millis = savedFields[i].set(millis, resetFields);\n+                        }\n+                    }\n+                } else {\n+                    // we can't set year from weekyear, throw the error\n+                    throw e;\n+                }\n+            } else {\n+                // for years, round down to nearest multiple of the duration of the first field\n+                DurationField durationField = first.getDurationField();\n+                millis = durationField.roundFloor(millis);\n+                for (int i = 1; i < count; i++) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+            }\n+        } else {\n+            throw e;\n+        }\n+    }\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n+        throw new IllegalArgumentException(message, e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}