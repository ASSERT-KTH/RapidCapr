{
    "patch": "            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        int numIterations = 0;\n        final int maxIterations = getMaxIterations();\n        while (numIterations < maxIterations) {\n            numIterations++;\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            boolean reflectedIsBetter = comparator.compare(reflected, best) < 0;\n            RealPointValuePair replacement = reflected;\n\n            if (!reflectedIsBetter) {\n                // perform an outside contraction\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                boolean contractedIsBetter = comparator.compare(contracted, best) < 0;\n\n                if (!contractedIsBetter) {\n                    // perform an inside contraction\n                    final RealPointValuePair contractedInside = evaluateNewSimplex(original, -gamma, comparator);\n                    boolean contractedInsideIsBetter = comparator.compare(contractedInside, best) < 0;\n\n                    if (contractedInsideIsBetter) {\n                        replacement = contractedInside;\n                    } else {\n                        // perform a shrink\n                        while (simplex[0] == best) {\n                            shrink(comparator);\n                        }\n                        continue;\n                    }\n                } else {\n                    replacement = contracted;\n                }\n\n            }\n\n            // Replace the worst point with the new one\n            final RealPointValuePair worst = original[original.length - 1];\n            for (int i = 0; i < original.length; ++i) {\n                if (original[i] == worst) {\n                    simplex[i] = replacement;\n                    break;\n                }\n            }\n\n            // Check convergence\n            final RealPointValuePair[] current = simplex;\n            final double range = getConvergenceChecker().getRelativeThreshold() * (Math.abs(best.getValue()) + Math.abs(worst.getValue())) * 0.5;\n            boolean isConverged = true;\n            for (int i = 0; i < current.length; ++i) {\n                isConverged &= (FastMath.abs(current[i].getValue() - best.getValue()) <= range);\n            }\n            if (isConverged) {\n                return;\n            }\n        }\n\n        throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..00b00bb2f 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,10 +58,11 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+        int numIterations = 0;\n+        final int maxIterations = getMaxIterations();\n+        while (numIterations < maxIterations) {\n+            numIterations++;\n \n             incrementIterationsCounter();\n \n@@ -71,32 +72,56 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+            boolean reflectedIsBetter = comparator.compare(reflected, best) < 0;\n+            RealPointValuePair replacement = reflected;\n+\n+            if (!reflectedIsBetter) {\n+                // perform an outside contraction\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+                boolean contractedIsBetter = comparator.compare(contracted, best) < 0;\n+\n+                if (!contractedIsBetter) {\n+                    // perform an inside contraction\n+                    final RealPointValuePair contractedInside = evaluateNewSimplex(original, -gamma, comparator);\n+                    boolean contractedInsideIsBetter = comparator.compare(contractedInside, best) < 0;\n+\n+                    if (contractedInsideIsBetter) {\n+                        replacement = contractedInside;\n+                    } else {\n+                        // perform a shrink\n+                        while (simplex[0] == best) {\n+                            shrink(comparator);\n+                        }\n+                        continue;\n+                    }\n+                } else {\n+                    replacement = contracted;\n                 }\n \n-                return;\n-\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            // Replace the worst point with the new one\n+            final RealPointValuePair worst = original[original.length - 1];\n+            for (int i = 0; i < original.length; ++i) {\n+                if (original[i] == worst) {\n+                    simplex[i] = replacement;\n+                    break;\n+                }\n+            }\n \n-            // check convergence\n+            // Check convergence\n+            final RealPointValuePair[] current = simplex;\n+            final double range = getConvergenceChecker().getRelativeThreshold() * (Math.abs(best.getValue()) + Math.abs(worst.getValue())) * 0.5;\n+            boolean isConverged = true;\n+            for (int i = 0; i < current.length; ++i) {\n+                isConverged &= (FastMath.abs(current[i].getValue() - best.getValue()) <= range);\n+            }\n+            if (isConverged) {\n                 return;\n             }\n-\n         }\n \n-    }\n+        throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}