{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // Check if child node is an EXPR_RESULT\n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        Node expr = maybeExpr.getFirstChild();\n\n        // Check if child of EXPR_RESULT is an expression node\n        if (NodeUtil.isExpressionNode(expr)) {\n          return false;\n        } else if (expr.getType() == Token.HOOK) {\n          // Don't fold in a HOOK node that's a left operand of an AND or OR node.\n          Node parent = n.getParent();\n          if (parent.getType() == Token.AND || parent.getType() == Token.OR) {\n            Node firstChild = parent.getFirstChild();\n            if (firstChild == n) {\n              return false;\n            }\n          }\n        } \n      } else if (maybeExpr.getType() == Token.IF) {\n        Node condition = maybeExpr.getFirstChild();\n        Node thenBranch = condition.getNext();\n        Node elseBranch = thenBranch.getNext();\n        if (isExpressionNodeInConditional(thenBranch) || (elseBranch != null && isExpressionNodeInConditional(elseBranch))) {\n          return false;\n        }\n      } else {\n        // Check if child node is an expression node\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n  }\n  return false;\n}\n\nprivate boolean isExpressionNodeInConditional(Node conditional) {\n  int type = conditional.getType();\n  return type == Token.AND || type == Token.OR || type == Token.HOOK || type == Token.CALL || type == Token.OBJECTLIT || NodeUtil.isExpressionNode(conditional);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..8290c2de 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,48 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // Check if child node is an EXPR_RESULT\n+      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+        Node expr = maybeExpr.getFirstChild();\n+\n+        // Check if child of EXPR_RESULT is an expression node\n+        if (NodeUtil.isExpressionNode(expr)) {\n+          return false;\n+        } else if (expr.getType() == Token.HOOK) {\n+          // Don't fold in a HOOK node that's a left operand of an AND or OR node.\n+          Node parent = n.getParent();\n+          if (parent.getType() == Token.AND || parent.getType() == Token.OR) {\n+            Node firstChild = parent.getFirstChild();\n+            if (firstChild == n) {\n+              return false;\n+            }\n+          }\n+        } \n+      } else if (maybeExpr.getType() == Token.IF) {\n+        Node condition = maybeExpr.getFirstChild();\n+        Node thenBranch = condition.getNext();\n+        Node elseBranch = thenBranch.getNext();\n+        if (isExpressionNodeInConditional(thenBranch) || (elseBranch != null && isExpressionNodeInConditional(elseBranch))) {\n+          return false;\n+        }\n+      } else {\n+        // Check if child node is an expression node\n+        return NodeUtil.isExpressionNode(maybeExpr);\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n+\n+private boolean isExpressionNodeInConditional(Node conditional) {\n+  int type = conditional.getType();\n+  return type == Token.AND || type == Token.OR || type == Token.HOOK || type == Token.CALL || type == Token.OBJECTLIT || NodeUtil.isExpressionNode(conditional);\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}