{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n    return false;\n  }\n  \n  Node expr = n.getFirstChild();\n  \n  // If the expression is an IF statement and contains a single statement, return true.\n  if (expr.getType() == Token.IF && NodeUtil.getFunctionBody(expr).getChildCount() == 1) {\n    return true;\n  }\n  \n  // Otherwise, if the expression has no side effects, return true.\n  return !NodeUtil.mayHaveSideEffects(expr);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..e6b18800 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,21 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n-\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n     return false;\n   }\n+  \n+  Node expr = n.getFirstChild();\n+  \n+  // If the expression is an IF statement and contains a single statement, return true.\n+  if (expr.getType() == Token.IF && NodeUtil.getFunctionBody(expr).getChildCount() == 1) {\n+    return true;\n+  }\n+  \n+  // Otherwise, if the expression has no side effects, return true.\n+  return !NodeUtil.mayHaveSideEffects(expr);\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}