{
    "patch": "int last = 0;\nsuccess = true;\nMatcher matcher = pattern.matcher(decoded);\nwhile (matcher.find()) {\n    int ch = Integer.parseInt(matcher.group(1), 16);\n    if(ch > 0x7F && ch <= 0x9F && ch != 0x85) {\n        success = false;\n        break;\n    }\n    if (charset.contains(\"ISO-8859-1\")) {\n        // change the value of last to ch\n        last = ch;\n    } else {\n        stringBuilder.append((char) ch);\n    }\n}\nif (charset.contains(\"ISO-8859-1\") && success) {\n    // append the last value to the stringBuilder\n    stringBuilder.append((char) last);\n}\nassertTrue(\"One or more errors detected\", success);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}