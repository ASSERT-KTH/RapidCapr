{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        DateTimeZone zone = chrono.getZone();\n        long instantLocal = instantMillis + zone.getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        if (newPos >= 0) {\n            // We got a valid parsing result, use it to set the parsed fields\n            int i = 0;\n            while (i < bucket.usedFields()) {\n                DateTimeField field = bucket.getField(i++);\n                int value = bucket.getValue(field);\n                chrono = ((AbstractChronology) chrono).with(field);\n                instant = field.set(instant, value);\n            }\n            if (bucket.getZone() != null) {\n                zone = bucket.getZone();\n            }\n        }\n        instant.setChronology(chrono);\n        instant.setZone(zone);\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..2a76ed6c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -702,24 +702,28 @@ public class DateTimeFormatter {\n         \n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+        DateTimeZone zone = chrono.getZone();\n+        long instantLocal = instantMillis + zone.getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        if (newPos >= 0) {\n+            // We got a valid parsing result, use it to set the parsed fields\n+            int i = 0;\n+            while (i < bucket.usedFields()) {\n+                DateTimeField field = bucket.getField(i++);\n+                int value = bucket.getValue(field);\n+                chrono = ((AbstractChronology) chrono).with(field);\n+                instant = field.set(instant, value);\n+            }\n+            if (bucket.getZone() != null) {\n+                zone = bucket.getZone();\n+            }\n         }\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n+        instant.setZone(zone);\n         return newPos;\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}