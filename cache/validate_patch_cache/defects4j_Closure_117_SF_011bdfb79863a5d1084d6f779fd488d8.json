{
    "patch": "    ObjectType objectType = null;\n    String propName = null;\n\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      // Get the type of the object for GETPROP node\n      objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null && objectType.getConstructor().isInterface()) {\n          // Find the top-most constructor/interface defining the property\n          objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n        } else {\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            // climb the prototype chain to find the object property\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n\n        // Don't show complex function names or anonymous types\n        if (objectType != null) {\n          if (objectType.toObjectType() != null) {\n            // Show the object type with property name\n            return objectType.toString() + \".\" + propName;\n          } else if (objectType.isConstructor() && objectType.getDisplayName() != null) {\n            // Show the constructor type name with property name\n            return objectType.getDisplayName() + \".prototype.\" + propName;\n          }\n        }\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n\n    if (type.isFunctionPrototypeType() || (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {\n      // Show the type of a function prototype or constructor\n      return type.toString();\n    }\n\n    if (propName != null && type.isEnumType() && type.toMaybeObjectType().getPropertyType(propName) != null) {\n      // Show the enum property type\n      return type.toMaybeObjectType().getPropertyType(propName).toString();\n    }\n    if (type.isFunctionType()) {\n      // Don't show complex function names.\n      return \"function\";\n    }\n    // Show the type of the node\n    return type.toString();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..0fd91896 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -721,7 +721,8 @@ class TypeValidator {\n    * @param dereference If true, the type of the node will be dereferenced\n    *     to an Object type, if possible.\n    */\n-  String getReadableJSTypeName(Node n, boolean dereference) {\n+    ObjectType objectType = null;\n+    String propName = null;\n \n     // The best type name is the actual type name.\n \n@@ -729,26 +730,29 @@ class TypeValidator {\n     // prototype chain. So climb the prototype chain and find out where\n     // the property was originally defined.\n     if (n.isGetProp()) {\n-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n+      // Get the type of the object for GETPROP node\n+      objectType = getJSType(n.getFirstChild()).dereference();\n       if (objectType != null) {\n-        String propName = n.getLastChild().getString();\n-        if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n-          objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n+        propName = n.getLastChild().getString();\n+        if (objectType.getConstructor() != null && objectType.getConstructor().isInterface()) {\n+          // Find the top-most constructor/interface defining the property\n+          objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n         } else {\n-          // classes\n           while (objectType != null && !objectType.hasOwnProperty(propName)) {\n+            // climb the prototype chain to find the object property\n             objectType = objectType.getImplicitPrototype();\n           }\n         }\n \n-        // Don't show complex function names or anonymous types.\n-        // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n+        // Don't show complex function names or anonymous types\n+        if (objectType != null) {\n+          if (objectType.toObjectType() != null) {\n+            // Show the object type with property name\n+            return objectType.toString() + \".\" + propName;\n+          } else if (objectType.isConstructor() && objectType.getDisplayName() != null) {\n+            // Show the constructor type name with property name\n+            return objectType.getDisplayName() + \".prototype.\" + propName;\n+          }\n         }\n       }\n     }\n@@ -760,21 +764,22 @@ class TypeValidator {\n         type = dereferenced;\n       }\n     }\n-    if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n+\n+    if (type.isFunctionPrototypeType() || (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {\n+      // Show the type of a function prototype or constructor\n       return type.toString();\n     }\n-    String qualifiedName = n.getQualifiedName();\n-    if (qualifiedName != null) {\n-      return qualifiedName;\n-    } else if (type.isFunctionType()) {\n+\n+    if (propName != null && type.isEnumType() && type.toMaybeObjectType().getPropertyType(propName) != null) {\n+      // Show the enum property type\n+      return type.toMaybeObjectType().getPropertyType(propName).toString();\n+    }\n+    if (type.isFunctionType()) {\n       // Don't show complex function names.\n       return \"function\";\n-    } else {\n-      return type.toString();\n     }\n-  }\n+    // Show the type of the node\n+    return type.toString();\n \n   /**\n    * This method gets the JSType from the Node argument and verifies that it is",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}