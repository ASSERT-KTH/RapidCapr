{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                } else {\n                    // if the next transition after instantLocal-adjusted\n                    // is the same as nextTransition(instantAdjusted), then we need\n                    // to check whether instantLocal-adjusted is in a gap, and if\n                    // it is, we need to use the offset before the gap\n                    long nextGapStartLocal = nextTransition(nextLocal);\n                    if (nextGapStartLocal < (instantLocal - offsetAdjusted)) {\n                        return offsetLocal;\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..2468b7e3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                } else {\n+                    // if the next transition after instantLocal-adjusted\n+                    // is the same as nextTransition(instantAdjusted), then we need\n+                    // to check whether instantLocal-adjusted is in a gap, and if\n+                    // it is, we need to use the offset before the gap\n+                    long nextGapStartLocal = nextTransition(nextLocal);\n+                    if (nextGapStartLocal < (instantLocal - offsetAdjusted)) {\n+                        return offsetLocal;\n+                    }\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}