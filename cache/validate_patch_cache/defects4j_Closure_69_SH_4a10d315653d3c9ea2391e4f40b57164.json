{
    "patch": "if (childType.isFunctionType()) {\n    FunctionType functionType = childType.toMaybeFunctionType();\n\n    // Check whether the function requires a 'this' type.\n    ObjectType thisType = functionType.getTypeOfThis();\n    if (thisType != null) {\n        Node callerNode = n.getParent();\n        if (callerNode.isGetProp() || callerNode.isGetElem()) {\n            ensureTyped(t, callerNode.getFirstChild(), thisType);\n        } else {\n            report(t, n, INVALID_THIS_TYPE);\n            ensureTyped(t, n);\n            return;\n        }\n    }\n\n    visitParameterList(t, n, functionType);\n\n    // Check the return type and coerce it to null if necessary.\n    JSType returnType = functionType.getReturnType();\n    if (returnType == null) {\n        returnType = JSType.NULL;\n    }\n    ensureTyped(t, n, returnType);\n} else {\n    ensureTyped(t, n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..a78b2cac 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (childType.isFunctionType()) {\n+    FunctionType functionType = childType.toMaybeFunctionType();\n+\n+    // Check whether the function requires a 'this' type.\n+    ObjectType thisType = functionType.getTypeOfThis();\n+    if (thisType != null) {\n+        Node callerNode = n.getParent();\n+        if (callerNode.isGetProp() || callerNode.isGetElem()) {\n+            ensureTyped(t, callerNode.getFirstChild(), thisType);\n+        } else {\n+            report(t, n, INVALID_THIS_TYPE);\n+            ensureTyped(t, n);\n+            return;\n+        }\n+    }\n+\n+    visitParameterList(t, n, functionType);\n+\n+    // Check the return type and coerce it to null if necessary.\n+    JSType returnType = functionType.getReturnType();\n+    if (returnType == null) {\n+        returnType = JSType.NULL;\n+    }\n+    ensureTyped(t, n, returnType);\n+} else {\n+    ensureTyped(t, n);\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: variable functionType is already defined in method visitCall(NodeTraversal,Node)",
    "test_result": "ERROR"
}