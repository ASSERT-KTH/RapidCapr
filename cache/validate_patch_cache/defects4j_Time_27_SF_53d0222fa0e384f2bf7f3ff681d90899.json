{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    } \n\n    Object first = elementPairs.get(0);\n    if (size == 1 && (first instanceof PeriodPrinter || first instanceof PeriodParser)) {\n        // Single element that is either a PeriodPrinter or a PeriodParser\n        PeriodPrinter printer = notPrinter ? null : (PeriodPrinter) (first instanceof PeriodPrinter ? first : null);\n        PeriodParser parser = notParser ? null : (PeriodParser) (first instanceof PeriodParser ? first : null);\n        return new PeriodFormatter(printer, parser);\n    }\n\n    if (first instanceof Separator) {\n        // First element is a Separator, so recurse on the rest of the list\n        Separator sep = (Separator) first;\n        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n        PeriodPrinter p = notPrinter ? null : sep.finish(f.getPrinter(), f.getParser());\n        PeriodParser pp = notParser ? null : sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(p, pp);\n    }\n\n    // Otherwise, we have a list of element pairs that need to be combined\n    Object[] comp = createComposite(elementPairs);\n    PeriodPrinter p = notPrinter ? null : (PeriodPrinter) comp[0];\n    PeriodParser pp = notParser ? null : (PeriodParser) comp[1];\n    return new PeriodFormatter(p, pp);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..f6bb67fa 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,41 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    } \n+\n+    Object first = elementPairs.get(0);\n+    if (size == 1 && (first instanceof PeriodPrinter || first instanceof PeriodParser)) {\n+        // Single element that is either a PeriodPrinter or a PeriodParser\n+        PeriodPrinter printer = notPrinter ? null : (PeriodPrinter) (first instanceof PeriodPrinter ? first : null);\n+        PeriodParser parser = notParser ? null : (PeriodParser) (first instanceof PeriodParser ? first : null);\n+        return new PeriodFormatter(printer, parser);\n+    }\n+\n+    if (first instanceof Separator) {\n+        // First element is a Separator, so recurse on the rest of the list\n+        Separator sep = (Separator) first;\n+        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n+        PeriodPrinter p = notPrinter ? null : sep.finish(f.getPrinter(), f.getParser());\n+        PeriodParser pp = notParser ? null : sep.finish(f.getPrinter(), f.getParser());\n+        return new PeriodFormatter(p, pp);\n     }\n \n+    // Otherwise, we have a list of element pairs that need to be combined\n+    Object[] comp = createComposite(elementPairs);\n+    PeriodPrinter p = notPrinter ? null : (PeriodPrinter) comp[0];\n+    PeriodParser pp = notParser ? null : (PeriodParser) comp[1];\n+    return new PeriodFormatter(p, pp);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}