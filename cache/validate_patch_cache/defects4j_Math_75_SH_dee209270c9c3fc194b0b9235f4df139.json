{
    "patch": "public double getPct(Object v) {\n    if (v == null) {\n        return Double.NaN;\n    }\n    int count = count();\n    if (count == 0) {\n        return Double.NaN;\n    }\n    Comparable<?> obj = (Comparable<?>) v;\n    int index = Collections.binarySearch(Data, new Object[]{obj, null}, ItemComparator);\n    if (index < 0) {\n        index = -(index + 1);\n    }\n    if (index >= Data.size()) {\n        return 1.0;\n    }\n    if (index == 0) {\n        return 0.0;\n    }\n\n    Object object = Data.get(index - 1);\n    Object next = Data.get(index);\n\n    if (Objects.equals(next[COMPARABLE_INDEX], obj)) {\n        return (double) (index - 1 + sumFreq(0, index - 1)) / count;\n    }\n\n    Comparable<?> current = (Comparable<?>) object[COMPARABLE_INDEX];\n    Comparable<?> nextC = (Comparable<?>) next[COMPARABLE_INDEX];\n    if (current.compareTo(obj) >= 0) {\n        return (double) (index - 1 + sumFreq(0, index - 1)) / count;\n    } else if (nextC.compareTo(obj) <= 0) {\n        return (double) index + sumFreq(index, Data.size()) / count;\n    } else {\n        //the guess is between index - 1 and index\n        while (index - 2 >= 0\n                && ItemComparator.compare(new Object[]{obj, null}, Data.get(index - 2)) <= 0) {\n            --index;\n        }\n        return (double) (index - 1 + sumFreq(0, index - 1))\n                / count;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..658754d8a 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -300,7 +300,49 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+public double getPct(Object v) {\n+    if (v == null) {\n+        return Double.NaN;\n+    }\n+    int count = count();\n+    if (count == 0) {\n+        return Double.NaN;\n+    }\n+    Comparable<?> obj = (Comparable<?>) v;\n+    int index = Collections.binarySearch(Data, new Object[]{obj, null}, ItemComparator);\n+    if (index < 0) {\n+        index = -(index + 1);\n+    }\n+    if (index >= Data.size()) {\n+        return 1.0;\n+    }\n+    if (index == 0) {\n+        return 0.0;\n+    }\n+\n+    Object object = Data.get(index - 1);\n+    Object next = Data.get(index);\n+\n+    if (Objects.equals(next[COMPARABLE_INDEX], obj)) {\n+        return (double) (index - 1 + sumFreq(0, index - 1)) / count;\n+    }\n+\n+    Comparable<?> current = (Comparable<?>) object[COMPARABLE_INDEX];\n+    Comparable<?> nextC = (Comparable<?>) next[COMPARABLE_INDEX];\n+    if (current.compareTo(obj) >= 0) {\n+        return (double) (index - 1 + sumFreq(0, index - 1)) / count;\n+    } else if (nextC.compareTo(obj) <= 0) {\n+        return (double) index + sumFreq(index, Data.size()) / count;\n+    } else {\n+        //the guess is between index - 1 and index\n+        while (index - 2 >= 0\n+                && ItemComparator.compare(new Object[]{obj, null}, Data.get(index - 2)) <= 0) {\n+            --index;\n+        }\n+        return (double) (index - 1 + sumFreq(0, index - 1))\n+                / count;\n+    }\n+}\n     }\n \n     /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}