{
    "patch": "    return new Iterator<Chromosome>() {\n        private final List<Chromosome> list = new ArrayList<Chromosome>(chromosomes);\n        private int index = 0;\n\n        @Override\n        public boolean hasNext() {\n            return index < list.size();\n        }\n\n        @Override\n        public Chromosome next() {\n            if (!hasNext()) {\n                throw new NoSuchElementException();\n            }\n            return list.get(index++);\n        }\n\n        @Override\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n    };",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\nindex 1eb005316..c8cf2c1a0 100644\n--- a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n@@ -206,6 +206,27 @@ public abstract class ListPopulation implements Population {\n      * @return chromosome iterator\n      */\n     public Iterator<Chromosome> iterator() {\n-        return chromosomes.iterator();\n+    return new Iterator<Chromosome>() {\n+        private final List<Chromosome> list = new ArrayList<Chromosome>(chromosomes);\n+        private int index = 0;\n+\n+        @Override\n+        public boolean hasNext() {\n+            return index < list.size();\n+        }\n+\n+        @Override\n+        public Chromosome next() {\n+            if (!hasNext()) {\n+                throw new NoSuchElementException();\n+            }\n+            return list.get(index++);\n+        }\n+\n+        @Override\n+        public void remove() {\n+            throw new UnsupportedOperationException();\n+        }\n+    };\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}