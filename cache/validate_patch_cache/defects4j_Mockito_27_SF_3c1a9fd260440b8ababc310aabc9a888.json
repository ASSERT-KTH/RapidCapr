{
    "patch": "public <T> void resetMock(T mock) throws Exception {\n    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n    MockHandlerInterface<T> newHandler = new MockHandler<T>(oldHandler);\n\n    // Create a new invocation interceptor\n    InvocationInterceptor interceptor = new InvocationInterceptor() {\n        @Override\n        public Object intercept(Invocation invocation) throws Throwable {\n            Object result = invocation.callRealMethod();\n            invocationListener.reportInvocation(new MethodInvocationReport(invocation, result));\n            return result;\n        }\n    };\n\n    // Set the new interceptor on the mock object\n    ((Factory) mock).setCallback(0, new MethodInterceptorFilter(newHandler, interceptor));\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..7b321863d 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,24 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) throws Exception {\n+    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n+    MockHandlerInterface<T> newHandler = new MockHandler<T>(oldHandler);\n+\n+    // Create a new invocation interceptor\n+    InvocationInterceptor interceptor = new InvocationInterceptor() {\n+        @Override\n+        public Object intercept(Invocation invocation) throws Throwable {\n+            Object result = invocation.callRealMethod();\n+            invocationListener.reportInvocation(new MethodInvocationReport(invocation, result));\n+            return result;\n+        }\n+    };\n+\n+    // Set the new interceptor on the mock object\n+    ((Factory) mock).setCallback(0, new MethodInterceptorFilter(newHandler, interceptor));\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: unreported exception Exception; must be caught or declared to be thrown",
    "test_result": "ERROR"
}