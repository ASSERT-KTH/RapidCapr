{
    "patch": "            if (offsetLocal != offsetAdjusted) {\n                long nextLocal, nextAdjusted;\n                if (offsetLocal > offsetAdjusted) {\n                    nextLocal = previousTransition(instantAdjusted + DateTimeConstants.MILLIS_PER_HOUR);\n                    nextAdjusted = previousTransition(instantLocal - offsetAdjusted + DateTimeConstants.MILLIS_PER_HOUR);\n                } else {\n                    nextLocal = nextTransition(instantAdjusted);\n                    nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                }\n                if (nextLocal != nextAdjusted) {\n                    if (offsetLocal > offsetAdjusted) {\n                        long prevLocal = previousTransition(instantAdjusted);\n                        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                        if (prevLocal != prevAdjusted) {\n                            return offsetAdjusted;\n                        }\n                    } else {\n                        return offsetLocal;\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..51f8d68a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal != offsetAdjusted) {\n+                long nextLocal, nextAdjusted;\n+                if (offsetLocal > offsetAdjusted) {\n+                    nextLocal = previousTransition(instantAdjusted + DateTimeConstants.MILLIS_PER_HOUR);\n+                    nextAdjusted = previousTransition(instantLocal - offsetAdjusted + DateTimeConstants.MILLIS_PER_HOUR);\n+                } else {\n+                    nextLocal = nextTransition(instantAdjusted);\n+                    nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                }\n+                if (nextLocal != nextAdjusted) {\n+                    if (offsetLocal > offsetAdjusted) {\n+                        long prevLocal = previousTransition(instantAdjusted);\n+                        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                        if (prevLocal != prevAdjusted) {\n+                            return offsetAdjusted;\n+                        }\n+                    } else {\n+                        return offsetLocal;\n+                    }\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}