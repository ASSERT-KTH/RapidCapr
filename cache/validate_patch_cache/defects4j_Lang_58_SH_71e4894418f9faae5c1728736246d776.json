{
    "patch": "if (Character.isDigit(lastChar) || lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D') {\n    //Requesting a specific type..\n    String numeric = str.substring(0, str.length() - 1);\n    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    if ((numeric.startsWith(\"-\") && isDigits(numeric.substring(1)))\n            || isDigits(numeric)) {\n        if (numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) {\n            if (numeric.length() <= 18) {\n                return createLong(numeric);\n            }\n            return createBigInteger(numeric);\n        } else {\n            if (numeric.length() <= 9) {\n                return createInteger(numeric);\n            } else if (numeric.length() <= 18) {\n                return createLong(numeric);\n            } else {\n                return createBigInteger(numeric);\n            }\n        }\n    }\n    throw new NumberFormatException(str + \" is not a valid number.\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..e2f4e5c6 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,29 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+if (Character.isDigit(lastChar) || lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D') {\n+    //Requesting a specific type..\n+    String numeric = str.substring(0, str.length() - 1);\n+    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+    if ((numeric.startsWith(\"-\") && isDigits(numeric.substring(1)))\n+            || isDigits(numeric)) {\n+        if (numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) {\n+            if (numeric.length() <= 18) {\n+                return createLong(numeric);\n+            }\n+            return createBigInteger(numeric);\n+        } else {\n+            if (numeric.length() <= 9) {\n+                return createInteger(numeric);\n+            } else if (numeric.length() <= 18) {\n+                return createLong(numeric);\n+            } else {\n+                return createBigInteger(numeric);\n+            }\n+        }\n+    }\n+    throw new NumberFormatException(str + \" is not a valid number.\");\n+}\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}