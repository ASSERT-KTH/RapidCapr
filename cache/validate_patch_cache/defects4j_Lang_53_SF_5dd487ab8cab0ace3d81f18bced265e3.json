{
    "patch": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n    // see http://issues.apache.org/jira/browse/LANG-59\n    //\n    // Manually truncate milliseconds, seconds and minutes, rather than using\n    // Calendar methods.\n\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n\n    // truncate milliseconds\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (!round || millisecs < 500) {\n        time = time - millisecs;\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n    }\n\n    // truncate seconds\n    int seconds = val.get(Calendar.SECOND);\n    if (!done && (!round || seconds < 30)) {\n        time = time - (seconds * 1000L);\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n    }\n\n    // truncate minutes\n    int minutes = val.get(Calendar.MINUTE);\n    if (!done && (!round || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n\n    // reset time if necessary\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n\n    boolean roundUp = false;\n    int[][] fields = {\n            {Calendar.MILLISECOND},\n            {Calendar.SECOND},\n            {Calendar.MINUTE},\n            {Calendar.HOUR_OF_DAY, Calendar.HOUR},\n            {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM},\n            {Calendar.MONTH},\n            {Calendar.YEAR},\n            {Calendar.ERA}\n    };\n\n    int min = 0;\n    int max = fields.length;\n    while (min < max) {\n        int i = (min + max) / 2;\n        if (fields[i][0] < field) {\n            min = i + 1;\n        } else {\n            max = i;\n        }\n    }\n    if (min == fields.length) {\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }\n    int[] resolvedFields = fields[min];\n\n    // This is the maximum value that the field can have\n    int maxVal = val.getActualMaximum(field);\n\n    // Check if the field needs to be rounded up\n    if (round && (!val.isSet(resolvedFields[0]) || val.get(field) >= maxVal - (maxVal - val.getActualMinimum(field)) / 2)) {\n        if (field == Calendar.DAY_OF_MONTH) {\n            // special rounding rule for days, to handle end of month\n            int month = val.get(Calendar.MONTH);\n            if (month == Calendar.FEBRUARY) {\n                // check for leap year\n                int year = val.get(Calendar.YEAR);\n                if (val instanceof GregorianCalendar && ((GregorianCalendar) val).isLeapYear(year)) {\n                    // leap year, February has 29 days\n                    if (val.get(Calendar.DAY_OF_MONTH) == 28 && val.get(Calendar.HOUR_OF_DAY) == 23) {\n                        // need to round up to Mar 1 00:00:00.0\n                        val.set(Calendar.MONTH, Calendar.MARCH);\n                        val.set(Calendar.DAY_OF_MONTH, 1);\n                        val.set(Calendar.HOUR_OF_DAY, 0);\n                        val.set(Calendar.MINUTE, 0);\n                        val.set(Calendar.SECOND, 0);\n                        val.set(Calendar.MILLISECOND, 0);\n                        return;\n                    }\n                } else {\n                    // non-leap year, February has 28 days\n                    if (val.get(Calendar.DAY_OF_MONTH) >= 26 && val.get(Calendar.HOUR_OF_DAY) >= 23) {\n                        // need to round up to Mar 1 00:00:00.0\n                        val.set(Calendar.MONTH, Calendar.MARCH);\n                        val.set(Calendar.DAY_OF_MONTH, 1);\n                        val.set(Calendar.HOUR_OF_DAY, 0);\n                        val.set(Calendar.MINUTE, 0);\n                        val.set(Calendar.SECOND, 0);\n                        val.set(Calendar.MILLISECOND, 0);\n                        return;\n                    }\n                }\n            } else if (month == Calendar.JANUARY || month == Calendar.MARCH || month == Calendar.MAY || month == Calendar.JULY\n                    || month == Calendar.AUGUST || month == Calendar.OCTOBER || month == Calendar.DECEMBER) {\n                if (val.get(Calendar.DAY_OF_MONTH) == 30 && val.get(Calendar.HOUR_OF_DAY) == 23) {\n                    // need to round up to next month\n                    val.add(Calendar.DATE, 2);\n                    val.set(Calendar.HOUR_OF_DAY, 0);\n                    val.set(Calendar.MINUTE, 0);\n                    val.set(Calendar.SECOND, 0);\n                    val.set(Calendar.MILLISECOND, 0);\n                    return;\n                }\n            } else {\n                if (val.get(Calendar.DAY_OF_MONTH) == 29 && val.get(Calendar.HOUR_OF_DAY) == 23) {\n                    // need to round up to next month\n                    val.add(Calendar.DATE, 2);\n                    val.set(Calendar.HOUR_OF_DAY, 0);\n                    val.set(Calendar.MINUTE, 0);\n                    val.set(Calendar.SECOND, 0);\n                    val.set(Calendar.MILLISECOND, 0);\n                    return;\n                }\n            }\n        }\n\n        // round up by adding 1 to the smallest \"resolved\" field that is still larger than the given field\n        int carry = 0;\n        for (int i = resolvedFields.length - 1; i >= 0; i--) {\n            int cur = val.get(resolvedFields[i]) + carry;\n            carry = (cur >= val.getActualMaximum(resolvedFields[i])) ? 1 : 0;\n            val.set(resolvedFields[i], (cur % maxVal));\n            if (!carry) {\n                break;\n            }\n        }\n        if (carry > 0) {\n            // overflow: need to add a new field\n            switch (field) {\n                case Calendar.MONTH:\n                    val.set(Calendar.MONTH, Calendar.JANUARY);\n                    val.add(Calendar.YEAR, 1);\n                    break;\n                default:\n                    val.set(field, val.getActualMinimum(field));\n                    val.add(resolvedFields[0], carry);\n                    break;\n            }\n        }\n        roundUp = true;\n    } else if (field == Calendar.MONTH) {\n        // special rule to handle end-of-month rounding if truncating\n        int dom = val.get(Calendar.DAY_OF_MONTH);\n        if (dom > 28 && dom < maxVal) {\n            val.set(Calendar.DAY_OF_MONTH, maxVal);\n        }\n    }\n\n    // truncate fields lower than the given field\n    for (int i = 0; i < resolvedFields.length && resolvedFields[i] != field; i++) {\n        if (!val.isSet(resolvedFields[i])) {\n            val.set(resolvedFields[i], val.getActualMinimum(resolvedFields[i]));\n        }\n    }\n\n    if (roundUp) {\n        // reset fields lower than the given field to their minimum values\n        for (int i = 0; i < resolvedFields.length && resolvedFields[i] != field; i++) {\n            val.set(resolvedFields[i], val.getActualMinimum(resolvedFields[i]));\n        }\n\n        if (field == Calendar.MONTH) {\n            // special handling for months, to avoid running into end-of-month rules\n            val.set(Calendar.MONTH, Calendar.JANUARY);\n            val.add(Calendar.YEAR, 1);\n        } else {\n            val.set(field, val.getActualMinimum(field));\n            val.add(resolvedFields[0]",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex 0dd0dedc..43290382 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -617,132 +617,193 @@ public class DateUtils {\n      * @param round  true to round, false to truncate\n      * @throws ArithmeticException if the year is over 280 million\n      */\n-    private static void modify(Calendar val, int field, boolean round) {\n-        if (val.get(Calendar.YEAR) > 280000000) {\n-            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n-        }\n-        \n-        if (field == Calendar.MILLISECOND) {\n-            return;\n-        }\n-\n-        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n-        // see http://issues.apache.org/jira/browse/LANG-59\n-        //\n-        // Manually truncate milliseconds, seconds and minutes, rather than using\n-        // Calendar methods.\n+private static void modify(Calendar val, int field, boolean round) {\n+    if (val.get(Calendar.YEAR) > 280000000) {\n+        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n+    }\n+    if (field == Calendar.MILLISECOND) {\n+        return;\n+    }\n+    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n+    // see http://issues.apache.org/jira/browse/LANG-59\n+    //\n+    // Manually truncate milliseconds, seconds and minutes, rather than using\n+    // Calendar methods.\n \n-        Date date = val.getTime();\n-        long time = date.getTime();\n-        boolean done = false;\n+    Date date = val.getTime();\n+    long time = date.getTime();\n+    boolean done = false;\n \n-        // truncate milliseconds\n-        int millisecs = val.get(Calendar.MILLISECOND);\n-        if (!round || millisecs < 500) {\n-            time = time - millisecs;\n+    // truncate milliseconds\n+    int millisecs = val.get(Calendar.MILLISECOND);\n+    if (!round || millisecs < 500) {\n+        time = time - millisecs;\n         if (field == Calendar.SECOND) {\n             done = true;\n-            }\n         }\n+    }\n \n-        // truncate seconds\n-        int seconds = val.get(Calendar.SECOND);\n-        if (!done && (!round || seconds < 30)) {\n-            time = time - (seconds * 1000L);\n+    // truncate seconds\n+    int seconds = val.get(Calendar.SECOND);\n+    if (!done && (!round || seconds < 30)) {\n+        time = time - (seconds * 1000L);\n         if (field == Calendar.MINUTE) {\n             done = true;\n-            }\n         }\n+    }\n \n-        // truncate minutes\n-        int minutes = val.get(Calendar.MINUTE);\n-        if (!done && (!round || minutes < 30)) {\n-            time = time - (minutes * 60000L);\n-        }\n-\n-        // reset time\n-        if (date.getTime() != time) {\n-            date.setTime(time);\n-            val.setTime(date);\n-        }\n-        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n-\n-        boolean roundUp = false;\n-        for (int i = 0; i < fields.length; i++) {\n-            for (int j = 0; j < fields[i].length; j++) {\n-                if (fields[i][j] == field) {\n-                    //This is our field... we stop looping\n-                    if (round && roundUp) {\n-                        if (field == DateUtils.SEMI_MONTH) {\n-                            //This is a special case that's hard to generalize\n-                            //If the date is 1, we round up to 16, otherwise\n-                            //  we subtract 15 days and add 1 month\n-                            if (val.get(Calendar.DATE) == 1) {\n-                                val.add(Calendar.DATE, 15);\n-                            } else {\n-                                val.add(Calendar.DATE, -15);\n-                                val.add(Calendar.MONTH, 1);\n-                            }\n-                        } else {\n-                            //We need at add one to this field since the\n-                            //  last number causes us to round up\n-                            val.add(fields[i][0], 1);\n-                        }\n+    // truncate minutes\n+    int minutes = val.get(Calendar.MINUTE);\n+    if (!done && (!round || minutes < 30)) {\n+        time = time - (minutes * 60000L);\n+    }\n+\n+    // reset time if necessary\n+    if (date.getTime() != time) {\n+        date.setTime(time);\n+        val.setTime(date);\n+    }\n+\n+    boolean roundUp = false;\n+    int[][] fields = {\n+            {Calendar.MILLISECOND},\n+            {Calendar.SECOND},\n+            {Calendar.MINUTE},\n+            {Calendar.HOUR_OF_DAY, Calendar.HOUR},\n+            {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM},\n+            {Calendar.MONTH},\n+            {Calendar.YEAR},\n+            {Calendar.ERA}\n+    };\n+\n+    int min = 0;\n+    int max = fields.length;\n+    while (min < max) {\n+        int i = (min + max) / 2;\n+        if (fields[i][0] < field) {\n+            min = i + 1;\n+        } else {\n+            max = i;\n+        }\n+    }\n+    if (min == fields.length) {\n+        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n+    }\n+    int[] resolvedFields = fields[min];\n+\n+    // This is the maximum value that the field can have\n+    int maxVal = val.getActualMaximum(field);\n+\n+    // Check if the field needs to be rounded up\n+    if (round && (!val.isSet(resolvedFields[0]) || val.get(field) >= maxVal - (maxVal - val.getActualMinimum(field)) / 2)) {\n+        if (field == Calendar.DAY_OF_MONTH) {\n+            // special rounding rule for days, to handle end of month\n+            int month = val.get(Calendar.MONTH);\n+            if (month == Calendar.FEBRUARY) {\n+                // check for leap year\n+                int year = val.get(Calendar.YEAR);\n+                if (val instanceof GregorianCalendar && ((GregorianCalendar) val).isLeapYear(year)) {\n+                    // leap year, February has 29 days\n+                    if (val.get(Calendar.DAY_OF_MONTH) == 28 && val.get(Calendar.HOUR_OF_DAY) == 23) {\n+                        // need to round up to Mar 1 00:00:00.0\n+                        val.set(Calendar.MONTH, Calendar.MARCH);\n+                        val.set(Calendar.DAY_OF_MONTH, 1);\n+                        val.set(Calendar.HOUR_OF_DAY, 0);\n+                        val.set(Calendar.MINUTE, 0);\n+                        val.set(Calendar.SECOND, 0);\n+                        val.set(Calendar.MILLISECOND, 0);\n+                        return;\n+                    }\n+                } else {\n+                    // non-leap year, February has 28 days\n+                    if (val.get(Calendar.DAY_OF_MONTH) >= 26 && val.get(Calendar.HOUR_OF_DAY) >= 23) {\n+                        // need to round up to Mar 1 00:00:00.0\n+                        val.set(Calendar.MONTH, Calendar.MARCH);\n+                        val.set(Calendar.DAY_OF_MONTH, 1);\n+                        val.set(Calendar.HOUR_OF_DAY, 0);\n+                        val.set(Calendar.MINUTE, 0);\n+                        val.set(Calendar.SECOND, 0);\n+                        val.set(Calendar.MILLISECOND, 0);\n+                        return;\n                     }\n+                }\n+            } else if (month == Calendar.JANUARY || month == Calendar.MARCH || month == Calendar.MAY || month == Calendar.JULY\n+                    || month == Calendar.AUGUST || month == Calendar.OCTOBER || month == Calendar.DECEMBER) {\n+                if (val.get(Calendar.DAY_OF_MONTH) == 30 && val.get(Calendar.HOUR_OF_DAY) == 23) {\n+                    // need to round up to next month\n+                    val.add(Calendar.DATE, 2);\n+                    val.set(Calendar.HOUR_OF_DAY, 0);\n+                    val.set(Calendar.MINUTE, 0);\n+                    val.set(Calendar.SECOND, 0);\n+                    val.set(Calendar.MILLISECOND, 0);\n+                    return;\n+                }\n+            } else {\n+                if (val.get(Calendar.DAY_OF_MONTH) == 29 && val.get(Calendar.HOUR_OF_DAY) == 23) {\n+                    // need to round up to next month\n+                    val.add(Calendar.DATE, 2);\n+                    val.set(Calendar.HOUR_OF_DAY, 0);\n+                    val.set(Calendar.MINUTE, 0);\n+                    val.set(Calendar.SECOND, 0);\n+                    val.set(Calendar.MILLISECOND, 0);\n                     return;\n                 }\n             }\n-            //We have various fields that are not easy roundings\n-            int offset = 0;\n-            boolean offsetSet = false;\n-            //These are special types of fields that require different rounding rules\n+        }\n+\n+        // round up by adding 1 to the smallest \"resolved\" field that is still larger than the given field\n+        int carry = 0;\n+        for (int i = resolvedFields.length - 1; i >= 0; i--) {\n+            int cur = val.get(resolvedFields[i]) + carry;\n+            carry = (cur >= val.getActualMaximum(resolvedFields[i])) ? 1 : 0;\n+            val.set(resolvedFields[i], (cur % maxVal));\n+            if (!carry) {\n+                break;\n+            }\n+        }\n+        if (carry > 0) {\n+            // overflow: need to add a new field\n             switch (field) {\n-                case DateUtils.SEMI_MONTH:\n-                    if (fields[i][0] == Calendar.DATE) {\n-                        //If we're going to drop the DATE field's value,\n-                        //  we want to do this our own way.\n-                        //We need to subtrace 1 since the date has a minimum of 1\n-                        offset = val.get(Calendar.DATE) - 1;\n-                        //If we're above 15 days adjustment, that means we're in the\n-                        //  bottom half of the month and should stay accordingly.\n-                        if (offset >= 15) {\n-                            offset -= 15;\n-                        }\n-                        //Record whether we're in the top or bottom half of that range\n-                        roundUp = offset > 7;\n-                        offsetSet = true;\n-                    }\n+                case Calendar.MONTH:\n+                    val.set(Calendar.MONTH, Calendar.JANUARY);\n+                    val.add(Calendar.YEAR, 1);\n                     break;\n-                case Calendar.AM_PM:\n-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n-                        //If we're going to drop the HOUR field's value,\n-                        //  we want to do this our own way.\n-                        offset = val.get(Calendar.HOUR_OF_DAY);\n-                        if (offset >= 12) {\n-                            offset -= 12;\n-                        }\n-                        roundUp = offset > 6;\n-                        offsetSet = true;\n-                    }\n+                default:\n+                    val.set(field, val.getActualMinimum(field));\n+                    val.add(resolvedFields[0], carry);\n                     break;\n             }\n-            if (!offsetSet) {\n-                int min = val.getActualMinimum(fields[i][0]);\n-                int max = val.getActualMaximum(fields[i][0]);\n-                //Calculate the offset from the minimum allowed value\n-                offset = val.get(fields[i][0]) - min;\n-                //Set roundUp if this is more than half way between the minimum and maximum\n-                roundUp = offset > ((max - min) / 2);\n-            }\n-            //We need to remove this field\n-            if (offset != 0) {\n-                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n-            }\n         }\n-        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n+        roundUp = true;\n+    } else if (field == Calendar.MONTH) {\n+        // special rule to handle end-of-month rounding if truncating\n+        int dom = val.get(Calendar.DAY_OF_MONTH);\n+        if (dom > 28 && dom < maxVal) {\n+            val.set(Calendar.DAY_OF_MONTH, maxVal);\n+        }\n+    }\n \n+    // truncate fields lower than the given field\n+    for (int i = 0; i < resolvedFields.length && resolvedFields[i] != field; i++) {\n+        if (!val.isSet(resolvedFields[i])) {\n+            val.set(resolvedFields[i], val.getActualMinimum(resolvedFields[i]));\n+        }\n     }\n \n+    if (roundUp) {\n+        // reset fields lower than the given field to their minimum values\n+        for (int i = 0; i < resolvedFields.length && resolvedFields[i] != field; i++) {\n+            val.set(resolvedFields[i], val.getActualMinimum(resolvedFields[i]));\n+        }\n+\n+        if (field == Calendar.MONTH) {\n+            // special handling for months, to avoid running into end-of-month rules\n+            val.set(Calendar.MONTH, Calendar.JANUARY);\n+            val.add(Calendar.YEAR, 1);\n+        } else {\n+            val.set(field, val.getActualMinimum(field));\n+            val.add(resolvedFields[0]\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>This constructs an <code>Iterator</code> over each day in a date",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}