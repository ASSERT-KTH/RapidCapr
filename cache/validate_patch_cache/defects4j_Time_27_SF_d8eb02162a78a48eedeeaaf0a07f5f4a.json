{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    Object[] comp = createComposite(elementPairs);\n\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}\n\nprivate static Object[] createComposite(List<Object> elementPairs) {\n    List<PeriodPrinter> printers = new ArrayList<>();\n    List<PeriodParser> parsers = new ArrayList<>();\n\n    for (Object elementPair : elementPairs) {\n        PeriodPrinter printer;\n        PeriodParser parser;\n        if (elementPair instanceof Separator) {\n            Separator separator = (Separator) elementPair;\n            printer = separator;\n            parser = separator;\n        } else if (elementPair instanceof PeriodFormatterBuilder) {\n            PeriodFormatterBuilder builder = (PeriodFormatterBuilder) elementPair;\n            printer = builder.toPrinter();\n            parser = builder.toParser();\n        } else {\n            throw new IllegalArgumentException(\"Unknown element type: \" + elementPair.getClass());\n        }\n        printers.add(printer);\n        parsers.add(parser);\n    }\n\n    PeriodPrinter compositePrinter = new CompositePrinter(printers);\n    PeriodParser compositeParser = new CompositeParser(parsers);\n    return new Object[] {compositePrinter, compositeParser};\n}\n\nprivate static class CompositePrinter implements PeriodPrinter {\n    private final List<PeriodPrinter> printers;\n\n    public CompositePrinter(List<PeriodPrinter> printers) {\n        this.printers = printers;\n    }\n\n    public int estimatePrintedLength() {\n        int sum = 0;\n        for (PeriodPrinter printer : printers) {\n            sum += printer.estimatePrintedLength();\n        }\n        return sum;\n    }\n\n    public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n        for (PeriodPrinter printer : printers) {\n            printer.printTo(buf, period, locale);\n        }\n    }\n\n    public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {\n        for (PeriodPrinter printer : printers) {\n            printer.printTo(out, period, locale);\n        }\n    }\n}\n\nprivate static class CompositeParser implements PeriodParser {\n    private final List<PeriodParser> parsers;\n\n    public CompositeParser(List<PeriodParser> parsers) {\n        this.parsers = parsers;\n    }\n\n    public int parseInto(ReadWritablePeriod period, String text, int position, Locale locale) throws IllegalArgumentException {\n        int initialPosition = position;\n        for (PeriodParser parser : parsers) {\n            position = parser.parseInto(period, text, position, locale);\n            if (position < 0) {\n                break;\n            }\n        }\n        if (position == initialPosition || position > text.length()) {\n            throw new IllegalArgumentException(\"Invalid format: \\\"\" + text + \"\\\"\");\n        }\n        return position;\n    }\n\n    public int parseInto(ReadWritablePeriod period, String text, int position) {\n        return parseInto(period, text, position, null);\n    }\n\n    public boolean isSupported(PeriodType type) {\n        for (PeriodParser parser : parsers) {\n            if (!parser.isSupported(type)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..e3982fe4 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,111 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    Object[] comp = createComposite(elementPairs);\n+\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n+\n+private static Object[] createComposite(List<Object> elementPairs) {\n+    List<PeriodPrinter> printers = new ArrayList<>();\n+    List<PeriodParser> parsers = new ArrayList<>();\n+\n+    for (Object elementPair : elementPairs) {\n+        PeriodPrinter printer;\n+        PeriodParser parser;\n+        if (elementPair instanceof Separator) {\n+            Separator separator = (Separator) elementPair;\n+            printer = separator;\n+            parser = separator;\n+        } else if (elementPair instanceof PeriodFormatterBuilder) {\n+            PeriodFormatterBuilder builder = (PeriodFormatterBuilder) elementPair;\n+            printer = builder.toPrinter();\n+            parser = builder.toParser();\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            throw new IllegalArgumentException(\"Unknown element type: \" + elementPair.getClass());\n+        }\n+        printers.add(printer);\n+        parsers.add(parser);\n+    }\n+\n+    PeriodPrinter compositePrinter = new CompositePrinter(printers);\n+    PeriodParser compositeParser = new CompositeParser(parsers);\n+    return new Object[] {compositePrinter, compositeParser};\n+}\n+\n+private static class CompositePrinter implements PeriodPrinter {\n+    private final List<PeriodPrinter> printers;\n+\n+    public CompositePrinter(List<PeriodPrinter> printers) {\n+        this.printers = printers;\n+    }\n+\n+    public int estimatePrintedLength() {\n+        int sum = 0;\n+        for (PeriodPrinter printer : printers) {\n+            sum += printer.estimatePrintedLength();\n+        }\n+        return sum;\n+    }\n+\n+    public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n+        for (PeriodPrinter printer : printers) {\n+            printer.printTo(buf, period, locale);\n+        }\n+    }\n+\n+    public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {\n+        for (PeriodPrinter printer : printers) {\n+            printer.printTo(out, period, locale);\n         }\n     }\n+}\n+\n+private static class CompositeParser implements PeriodParser {\n+    private final List<PeriodParser> parsers;\n+\n+    public CompositeParser(List<PeriodParser> parsers) {\n+        this.parsers = parsers;\n+    }\n+\n+    public int parseInto(ReadWritablePeriod period, String text, int position, Locale locale) throws IllegalArgumentException {\n+        int initialPosition = position;\n+        for (PeriodParser parser : parsers) {\n+            position = parser.parseInto(period, text, position, locale);\n+            if (position < 0) {\n+                break;\n+            }\n+        }\n+        if (position == initialPosition || position > text.length()) {\n+            throw new IllegalArgumentException(\"Invalid format: \\\"\" + text + \"\\\"\");\n+        }\n+        return position;\n+    }\n+\n+    public int parseInto(ReadWritablePeriod period, String text, int position) {\n+        return parseInto(period, text, position, null);\n+    }\n+\n+    public boolean isSupported(PeriodType type) {\n+        for (PeriodParser parser : parsers) {\n+            if (!parser.isSupported(type)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}