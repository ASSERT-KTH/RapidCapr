{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                // compare the absolute values of the gaps on either side of the\n                // current instant. This ensures that we compare the gap following\n                // instantAdjusted with the gap following instantAdjusted - 1 hour,\n                // as it is possible that gap following instantAdjusted - 1 hour is\n                // smaller than the one following instantAdjusted and we want to avoid\n                // passing an instant between the two gaps.\n                long gapOne = Math.abs(nextLocal - instantAdjusted);\n                long gapTwo = Math.abs(nextAdjusted - (instantLocal - offsetAdjusted));\n                if (gapOne > gapTwo) {\n                    return offsetLocal;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..7aa1d33a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                // compare the absolute values of the gaps on either side of the\n+                // current instant. This ensures that we compare the gap following\n+                // instantAdjusted with the gap following instantAdjusted - 1 hour,\n+                // as it is possible that gap following instantAdjusted - 1 hour is\n+                // smaller than the one following instantAdjusted and we want to avoid\n+                // passing an instant between the two gaps.\n+                long gapOne = Math.abs(nextLocal - instantAdjusted);\n+                long gapTwo = Math.abs(nextAdjusted - (instantLocal - offsetAdjusted));\n+                if (gapOne > gapTwo) {\n+                    return offsetLocal;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}