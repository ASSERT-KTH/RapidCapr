{
    "patch": "  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n              conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (NodeUtil.isVar(lhs)) {\n            // for(var x in y) {...}\n            lhs = lhs.getLastChild();\n          }\n          addToSetIfLocal(lhs.getString(), kill);\n          addToSetIfLocal(lhs.getString(), gen);\n          computeGenKill(rhs, gen, kill, conditional);\n        }\n        return;\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            if (!conditional) {\n              addToSetIfLocal(c.getLastChild().getString(), kill);\n            }\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // May short circuit.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Assume both sides are conditional.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else {\n          addToSetIfLocal(n.getString(), gen);\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          Node lhs = n.getFirstChild();\n          if (!conditional) {\n            addToSetIfLocal(lhs.getString(), kill);\n          }\n          if (!NodeUtil.isAssign(n)) {\n            // assignments such as a += 1 reads a.\n            addToSetIfLocal(lhs.getString(), gen);\n          }\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n        } else {\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        break;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..2c5f3c04 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -203,8 +203,8 @@ class LiveVariablesAnalysis extends\n             // for(var x in y) {...}\n             lhs = lhs.getLastChild();\n           }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n+          addToSetIfLocal(lhs.getString(), kill);\n+          addToSetIfLocal(lhs.getString(), gen);\n           computeGenKill(rhs, gen, kill, conditional);\n         }\n         return;\n@@ -214,7 +214,7 @@ class LiveVariablesAnalysis extends\n           if (c.hasChildren()) {\n             computeGenKill(c.getFirstChild(), gen, kill, conditional);\n             if (!conditional) {\n-              addToSetIfLocal(c, kill);\n+              addToSetIfLocal(c.getLastChild().getString(), kill);\n             }\n           }\n         }\n@@ -238,7 +238,7 @@ class LiveVariablesAnalysis extends\n         if (isArgumentsName(n)) {\n           markAllParametersEscaped();\n         } else {\n-          addToSetIfLocal(n, gen);\n+          addToSetIfLocal(n.getString(), gen);\n         }\n         return;\n \n@@ -246,11 +246,11 @@ class LiveVariablesAnalysis extends\n         if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n           Node lhs = n.getFirstChild();\n           if (!conditional) {\n-            addToSetIfLocal(lhs, kill);\n+            addToSetIfLocal(lhs.getString(), kill);\n           }\n           if (!NodeUtil.isAssign(n)) {\n             // assignments such as a += 1 reads a.\n-            addToSetIfLocal(lhs, gen);\n+            addToSetIfLocal(lhs.getString(), gen);\n           }\n           computeGenKill(lhs.getNext(), gen, kill, conditional);\n         } else {\n@@ -258,7 +258,7 @@ class LiveVariablesAnalysis extends\n             computeGenKill(c, gen, kill, conditional);\n           }\n         }\n-        return;\n+        break;\n     }\n   }\n ",
    "result_reason": "error: method addToSetIfLocal in class LiveVariablesAnalysis cannot be applied to given types;",
    "test_result": "ERROR"
}