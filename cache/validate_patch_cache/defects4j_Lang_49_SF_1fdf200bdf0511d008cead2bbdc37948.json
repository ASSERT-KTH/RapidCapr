{
    "patch": "public Fraction reduce() {\n    // handle the case where the numerator is 0\n    if (numerator == 0) {\n        return new Fraction(0, 1);\n    }\n\n    // find the greatest common divisor (gcd) of the numerator and denominator using Euclid's algorithm\n    int gcd = getGcd(Math.abs(numerator), denominator);\n\n    // reduce the fraction by dividing the numerator and denominator by their gcd\n    int reducedNumerator = numerator / gcd;\n    int reducedDenominator = denominator / gcd;\n\n    // handle the case where the denominator is negative\n    if (reducedDenominator < 0) {\n        reducedNumerator = -reducedNumerator;\n        reducedDenominator = -reducedDenominator;\n    }\n\n    // return a new fraction with the reduced numerator and denominator\n    return new Fraction(reducedNumerator, reducedDenominator);\n}\n\n// Euclid's algorithm to find gcd recursively\nprivate static int getGcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return getGcd(b, a % b);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..f63936d4 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,14 +462,38 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    // handle the case where the numerator is 0\n+    if (numerator == 0) {\n+        return new Fraction(0, 1);\n+    }\n+\n+    // find the greatest common divisor (gcd) of the numerator and denominator using Euclid's algorithm\n+    int gcd = getGcd(Math.abs(numerator), denominator);\n+\n+    // reduce the fraction by dividing the numerator and denominator by their gcd\n+    int reducedNumerator = numerator / gcd;\n+    int reducedDenominator = denominator / gcd;\n+\n+    // handle the case where the denominator is negative\n+    if (reducedDenominator < 0) {\n+        reducedNumerator = -reducedNumerator;\n+        reducedDenominator = -reducedDenominator;\n     }\n \n+    // return a new fraction with the reduced numerator and denominator\n+    return new Fraction(reducedNumerator, reducedDenominator);\n+}\n+\n+// Euclid's algorithm to find gcd recursively\n+private static int getGcd(int a, int b) {\n+    if (b == 0) {\n+        return a;\n+    } else {\n+        return getGcd(b, a % b);\n+    }\n+}\n+\n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>\n      * ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<-2/3> was not:<-2/3>",
    "test_result": "FAIL"
}