{
    "patch": "            if (offsetLocal != offsetAdjusted) {\n                final boolean nextAdjustedIsMinOrMax = nextAdjusted == Long.MIN_VALUE || nextAdjusted == Long.MAX_VALUE;\n                if ((offsetLocal > 0 && offsetAdjusted < 0) ||\n                        (offsetLocal < 0 && offsetAdjusted > 0) ||\n                        nextAdjustedIsMinOrMax) {\n                    long prevLocal = previousTransition(instantAdjusted);\n                    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n                    if (prevAdjusted == Long.MIN_VALUE || prevAdjusted == Long.MAX_VALUE) {\n                        if (nextAdjustedIsMinOrMax || prevAdjusted != nextAdjusted) {\n                            return offsetLocal;\n                        }\n                    } else if (prevLocal != prevAdjusted) {\n                        if (nextAdjustedIsMinOrMax || prevAdjusted != nextAdjusted) {\n                            return offsetLocal;\n                        }\n                    }\n                    return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ae1d5c84 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,23 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal != offsetAdjusted) {\n+                final boolean nextAdjustedIsMinOrMax = nextAdjusted == Long.MIN_VALUE || nextAdjusted == Long.MAX_VALUE;\n+                if ((offsetLocal > 0 && offsetAdjusted < 0) ||\n+                        (offsetLocal < 0 && offsetAdjusted > 0) ||\n+                        nextAdjustedIsMinOrMax) {\n+                    long prevLocal = previousTransition(instantAdjusted);\n+                    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+                    if (prevAdjusted == Long.MIN_VALUE || prevAdjusted == Long.MAX_VALUE) {\n+                        if (nextAdjustedIsMinOrMax || prevAdjusted != nextAdjusted) {\n+                            return offsetLocal;\n+                        }\n+                    } else if (prevLocal != prevAdjusted) {\n+                        if (nextAdjustedIsMinOrMax || prevAdjusted != nextAdjusted) {\n+                            return offsetLocal;\n+                        }\n+                    }\n+                    return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}