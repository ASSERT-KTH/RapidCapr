{
    "patch": "if (provided == null || (provided.isExplicitlyProvided() && provided.explicitModule == null)) {\n    unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n    Node grandparent = parent.getParent();\n    if (grandparent != null && (grandparent.isScript() || NodeUtil.isBlockStatement(parent.getParent()))) {\n        grandparent.removeChild(parent);\n    } else {\n        parent.detachFromParent();\n    }\n    compiler.reportCodeChange();\n} else {\n    JSModule providedModule = provided.explicitModule;\n    Preconditions.checkNotNull(providedModule);\n    JSModule module = t.getModule();\n    if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName()));\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n    parent.detachFromParent();\n    compiler.reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..aa03f5fb 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,27 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+if (provided == null || (provided.isExplicitlyProvided() && provided.explicitModule == null)) {\n+    unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n+    Node grandparent = parent.getParent();\n+    if (grandparent != null && (grandparent.isScript() || NodeUtil.isBlockStatement(parent.getParent()))) {\n+        grandparent.removeChild(parent);\n+    } else {\n+        parent.detachFromParent();\n+    }\n+    compiler.reportCodeChange();\n+} else {\n+    JSModule providedModule = provided.explicitModule;\n+    Preconditions.checkNotNull(providedModule);\n+    JSModule module = t.getModule();\n+    if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {\n+        compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName()));\n+    }\n+    maybeAddToSymbolTable(left);\n+    maybeAddStringNodeToSymbolTable(arg);\n+    parent.detachFromParent();\n+    compiler.reportCodeChange();\n+}\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}