{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      // Check if the child node is an expression node or an expression result node with a non-empty child\n      if (NodeUtil.isExpressionNode(maybeExpr) || (maybeExpr.getType() == Token.EXPR_RESULT && maybeExpr.hasChildren())) {\n        // If the parent of the child node is a function that has an implicit \"this\" parameter, do not fold the child into the parent\n        Node parent = n.getParent();\n        if (parent != null && NodeUtil.isFunctionExpression(parent)) {\n          int numParams = parent.getChildAtIndex(1).getChildCount();\n          return numParams != 1 || !parent.getFirstChild().isGetProp();\n        } else {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..d7525c24 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,25 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      // Check if the child node is an expression node or an expression result node with a non-empty child\n+      if (NodeUtil.isExpressionNode(maybeExpr) || (maybeExpr.getType() == Token.EXPR_RESULT && maybeExpr.hasChildren())) {\n+        // If the parent of the child node is a function that has an implicit \"this\" parameter, do not fold the child into the parent\n+        Node parent = n.getParent();\n+        if (parent != null && NodeUtil.isFunctionExpression(parent)) {\n+          int numParams = parent.getChildAtIndex(1).getChildCount();\n+          return numParams != 1 || !parent.getFirstChild().isGetProp();\n+        } else {\n+          return true;\n+        }\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}