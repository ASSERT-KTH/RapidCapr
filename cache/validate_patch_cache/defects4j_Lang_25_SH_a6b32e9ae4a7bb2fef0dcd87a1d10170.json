{
    "patch": "StringBuffer out = new StringBuffer(in.length());\nfor(int i = 0; i < in.length(); ) {\n    char c = in.charAt(i);\n    if(c == '\\\\') {\n        i++;\n        if(i >= in.length())\n            System.err.println(\"unterminated escape sequence\");\n        else {\n            c = in.charAt(i);\n            switch(c) {\n                case 'n': out.append('\\n'); break;\n                case 'r': out.append('\\r'); break;\n                case 't': out.append('\\t'); break;\n                case 'b': out.append('\\b'); break;\n                case 'f': out.append('\\f'); break;\n                case '\\\"': out.append('\\\"'); break;\n                case '\\'': out.append('\\''); break;\n                case '\\\\': out.append('\\\\'); break;\n                case 'u': {\n                    if(i+4 >= in.length())\n                        System.err.println(\"illegal unicode escape sequence\");\n                    else {\n                        int code = Integer.parseInt(in.substring(i+1,i+5),16);\n                        out.append((char)code);\n                        i += 4;\n                    }\n                    break;\n                }\n                default: out.append(c); break;\n            }\n            i++;\n        }\n    } else {\n        out.append(c);\n        i++;\n    }\n}\nreturn out.toString();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}