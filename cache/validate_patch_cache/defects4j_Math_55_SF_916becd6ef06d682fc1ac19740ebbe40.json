{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    final double v1X = v1.getX();\n    final double v1Y = v1.getY();\n    final double v1Z = v1.getZ();\n    final double v2X = v2.getX();\n    final double v2Y = v2.getY();\n    final double v2Z = v2.getZ();\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double norm1 = v1.getNorm();\n    final double norm2 = v2.getNorm();\n    final double factor = FastMath.max(FastMath.max(FastMath.abs(v1X), FastMath.abs(v1Y)), FastMath.abs(v1Z));\n    final double scaledV1X = v1X / factor;\n    final double scaledV1Y = v1Y / factor;\n    final double scaledV1Z = v1Z / factor;\n    final double scaledV2X = v2X * norm1 / norm2 / factor;\n    final double scaledV2Y = v2Y * norm1 / norm2 / factor;\n    final double scaledV2Z = v2Z * norm1 / norm2 / factor;\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    final double rho = ((scaledV1X * scaledV2X + scaledV1Y * scaledV2Y) + scaledV1Z * scaledV2Z)\n            / ((scaledV2X * scaledV2X + scaledV2Y * scaledV2Y) + scaledV2Z * scaledV2Z);\n\n    // compute v3\n    final double v3X = scaledV1X - rho * scaledV2X;\n    final double v3Y = scaledV1Y - rho * scaledV2Y;\n    final double v3Z = scaledV1Z - rho * scaledV2Z;\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    final double x = v3Y * v2Z - v3Z * v2Y;\n    final double y = v3Z * v2X - v3X * v2Z;\n    final double z = v3X * v2Y - v3Y * v2X;\n\n    // rescale and normalize\n    final double norm = FastMath.sqrt(x * x + y * y + z * z);\n    final double scaledX = x / factor * norm / norm1 * norm2;\n    final double scaledY = y / factor * norm / norm1 * norm2;\n    final double scaledZ = z / factor * norm / norm1 * norm2;\n    return new Vector3D(scaledX, scaledY, scaledZ);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..c6d102543 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,54 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    final double v1X = v1.getX();\n+    final double v1Y = v1.getY();\n+    final double v1Z = v1.getZ();\n+    final double v2X = v2.getX();\n+    final double v2Y = v2.getY();\n+    final double v2Z = v2.getZ();\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double norm1 = v1.getNorm();\n+    final double norm2 = v2.getNorm();\n+    final double factor = FastMath.max(FastMath.max(FastMath.abs(v1X), FastMath.abs(v1Y)), FastMath.abs(v1Z));\n+    final double scaledV1X = v1X / factor;\n+    final double scaledV1Y = v1Y / factor;\n+    final double scaledV1Z = v1Z / factor;\n+    final double scaledV2X = v2X * norm1 / norm2 / factor;\n+    final double scaledV2Y = v2Y * norm1 / norm2 / factor;\n+    final double scaledV2Z = v2Z * norm1 / norm2 / factor;\n+\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    final double rho = ((scaledV1X * scaledV2X + scaledV1Y * scaledV2Y) + scaledV1Z * scaledV2Z)\n+            / ((scaledV2X * scaledV2X + scaledV2Y * scaledV2Y) + scaledV2Z * scaledV2Z);\n+\n+    // compute v3\n+    final double v3X = scaledV1X - rho * scaledV2X;\n+    final double v3Y = scaledV1Y - rho * scaledV2Y;\n+    final double v3Z = scaledV1Z - rho * scaledV2Z;\n+\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    final double x = v3Y * v2Z - v3Z * v2Y;\n+    final double y = v3Z * v2X - v3X * v2Z;\n+    final double z = v3X * v2Y - v3Y * v2X;\n+\n+    // rescale and normalize\n+    final double norm = FastMath.sqrt(x * x + y * y + z * z);\n+    final double scaledX = x / factor * norm / norm1 * norm2;\n+    final double scaledY = y / factor * norm / norm1 * norm2;\n+    final double scaledZ = z / factor * norm / norm1 * norm2;\n+    return new Vector3D(scaledX, scaledY, scaledZ);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.6734263658388999>",
    "test_result": "FAIL"
}