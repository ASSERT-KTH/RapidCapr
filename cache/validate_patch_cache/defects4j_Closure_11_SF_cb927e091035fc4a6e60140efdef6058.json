{
    "patch": "public void testGetprop4() {\n    String[] warnings = {};\n    Configuration config = new Configuration();\n    config.addResource(getTestFile(\"test-configuration.xml\"));\n\n    // Set the known value to null and verify we get a warning.\n    config.set(\"test.null.property\", null);\n    config.getProps();\n    warnings = config.getWarnings();\n    assertNotNull(warnings);\n    assertTrue(\"expected a warning\", warnings.length > 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..9242a546 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+    String[] warnings = {};\n+    Configuration config = new Configuration();\n+    config.addResource(getTestFile(\"test-configuration.xml\"));\n+\n+    // Set the known value to null and verify we get a warning.\n+    config.set(\"test.null.property\", null);\n+    config.getProps();\n+    warnings = config.getWarnings();\n+    assertNotNull(warnings);\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}