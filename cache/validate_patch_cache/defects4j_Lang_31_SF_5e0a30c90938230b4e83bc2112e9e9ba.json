{
    "patch": "public class StringUtils {\n\n    public static boolean containsAny(final CharSequence sequence, final char... searchChars) {\n        if (isEmpty(sequence) || searchChars == null || searchChars.length == 0) {\n            return false;\n        }\n\n        final int csLength = sequence.length();\n        final int searchLength = searchChars.length;\n        final int csLast = csLength - 1;\n        final int searchLast = searchLength - 1;\n\n        for (int i = 0; i < csLength; i++) {\n            final char ch = sequence.charAt(i);\n            // Check if the current character matches any of the search characters\n            for (int j = 0; j < searchLength; j++) {\n                final char searchChar = searchChars[j];\n                if (ch == searchChar) {\n                    // Found a match\n                    return true;\n                }\n                if (Character.isHighSurrogate(searchChar)) {\n                    if (j < searchLast && Character.isLowSurrogate(searchChars[j + 1])) {\n                        final int codePoint = Character.toCodePoint(searchChar, searchChars[j + 1]);\n                        if (StringUtils.contains(codePoint, sequence)) {\n                            return true;\n                        }\n                    } else {\n                        // Invalid surrogate pair\n                        throw new IllegalArgumentException(\"Invalid surrogate pair at index \" + j);\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private static boolean contains(final int codePoint, final CharSequence sequence) {\n        final int csLength = sequence.length();\n        for (int i = 0; i < csLength; ) {\n            final int codePointAtI = Character.codePointAt(sequence, i);\n            if (codePointAtI == codePoint) {\n                return true;\n            }\n            i += Character.charCount(codePointAtI);\n        }\n        return false;\n    }\n\n    private static boolean isEmpty(final CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..e00711f5 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,59 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+\n+    public static boolean containsAny(final CharSequence sequence, final char... searchChars) {\n+        if (isEmpty(sequence) || searchChars == null || searchChars.length == 0) {\n+            return false;\n+        }\n+\n+        final int csLength = sequence.length();\n+        final int searchLength = searchChars.length;\n+        final int csLast = csLength - 1;\n+        final int searchLast = searchLength - 1;\n+\n+        for (int i = 0; i < csLength; i++) {\n+            final char ch = sequence.charAt(i);\n+            // Check if the current character matches any of the search characters\n+            for (int j = 0; j < searchLength; j++) {\n+                final char searchChar = searchChars[j];\n+                if (ch == searchChar) {\n+                    // Found a match\n+                    return true;\n+                }\n+                if (Character.isHighSurrogate(searchChar)) {\n+                    if (j < searchLast && Character.isLowSurrogate(searchChars[j + 1])) {\n+                        final int codePoint = Character.toCodePoint(searchChar, searchChars[j + 1]);\n+                        if (StringUtils.contains(codePoint, sequence)) {\n+                            return true;\n+                        }\n+                    } else {\n+                        // Invalid surrogate pair\n+                        throw new IllegalArgumentException(\"Invalid surrogate pair at index \" + j);\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static boolean contains(final int codePoint, final CharSequence sequence) {\n+        final int csLength = sequence.length();\n+        for (int i = 0; i < csLength; ) {\n+            final int codePointAtI = Character.codePointAt(sequence, i);\n+            if (codePointAtI == codePoint) {\n+                return true;\n+            }\n+            i += Character.charCount(codePointAtI);\n+        }\n+        return false;\n+    }\n+\n+    private static boolean isEmpty(final CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}