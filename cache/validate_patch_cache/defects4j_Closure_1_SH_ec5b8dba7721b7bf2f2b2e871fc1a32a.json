{
    "patch": "    int argCount = NodeUtil.getFunctionParameters(function).getChildCount();\n    int lastIndex = argCount - 1;\n    if (!modifyCallers) {\n      for (int i = lastIndex; i >= 0; i--) {\n        Node arg = argList.getChildAtIndex(i);\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          arg.detach();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ab808a12 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,14 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    int argCount = NodeUtil.getFunctionParameters(function).getChildCount();\n+    int lastIndex = argCount - 1;\n+    if (!modifyCallers) {\n+      for (int i = lastIndex; i >= 0; i--) {\n+        Node arg = argList.getChildAtIndex(i);\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          arg.detach();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}