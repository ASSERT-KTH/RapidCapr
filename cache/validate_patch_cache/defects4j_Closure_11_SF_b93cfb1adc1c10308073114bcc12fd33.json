{
    "patch": "public String getprop(String propname) {\n    String[] cmd = {\"/system/bin/getprop\", propname};\n    try {\n        Process p = Runtime.getRuntime().exec(cmd);\n        BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));\n        String line = br.readLine();\n        if (line != null) {\n            return line;\n        } else {\n            return \"\";\n        }\n    } catch (IOException e) {\n        return \"\";\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..c6c4d775 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String propname) {\n+    String[] cmd = {\"/system/bin/getprop\", propname};\n+    try {\n+        Process p = Runtime.getRuntime().exec(cmd);\n+        BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));\n+        String line = br.readLine();\n+        if (line != null) {\n+            return line;\n+        } else {\n+            return \"\";\n+        }\n+    } catch (IOException e) {\n+        return \"\";\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}