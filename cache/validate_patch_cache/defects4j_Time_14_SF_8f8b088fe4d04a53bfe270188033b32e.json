{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        } else if (fieldIndex == DateTimeFieldType.monthOfYear().getIndex()) {\n            int month = (values[fieldIndex] - 1 + valueToAdd) % 12 + 1;\n            int year = (values[fieldIndex] - 1 + valueToAdd) / 12 + values[DateTimeFieldType.year().getIndex()];\n            try {\n                int day = Math.min(values[DateTimeFieldType.dayOfMonth().getIndex()], \n                                   ISOChronology.getInstance().dayOfMonth().getMaximumValue(year, month));\n                LocalDate date = new LocalDate(year, month, day, iChronology);\n                return date.getValues();\n            } catch (IllegalArgumentException e) {\n                // date is out of range, making a new try with a lower day\n                int day = ISOChronology.getInstance().dayOfMonth().getMaximumValue(year, month - 1);\n                LocalDate date = new LocalDate(year, month, day, iChronology);\n                return date.getValues();\n            }\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..f6c5809d 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -205,15 +205,20 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         // 2004-02-29 + 48 months -> 2008-02-29 type dates\n         if (valueToAdd == 0) {\n             return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        } else if (fieldIndex == DateTimeFieldType.monthOfYear().getIndex()) {\n+            int month = (values[fieldIndex] - 1 + valueToAdd) % 12 + 1;\n+            int year = (values[fieldIndex] - 1 + valueToAdd) / 12 + values[DateTimeFieldType.year().getIndex()];\n+            try {\n+                int day = Math.min(values[DateTimeFieldType.dayOfMonth().getIndex()], \n+                                   ISOChronology.getInstance().dayOfMonth().getMaximumValue(year, month));\n+                LocalDate date = new LocalDate(year, month, day, iChronology);\n+                return date.getValues();\n+            } catch (IllegalArgumentException e) {\n+                // date is out of range, making a new try with a lower day\n+                int day = ISOChronology.getInstance().dayOfMonth().getMaximumValue(year, month - 1);\n+                LocalDate date = new LocalDate(year, month, day, iChronology);\n+                return date.getValues();\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}