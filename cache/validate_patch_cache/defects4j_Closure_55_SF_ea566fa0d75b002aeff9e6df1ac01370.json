{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    return NodeUtil.isFunctionExpression(n)\n           || (NodeUtil.isCall(n) && NodeUtil.getFunctionName(n.getFirstChild()).isEmpty());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..10d6de81 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -113,9 +113,10 @@ class FunctionRewriter implements CompilerPass {\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n \n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n-  }\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    return NodeUtil.isFunctionExpression(n)\n+           || (NodeUtil.isCall(n) && NodeUtil.getFunctionName(n.getFirstChild()).isEmpty());\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}