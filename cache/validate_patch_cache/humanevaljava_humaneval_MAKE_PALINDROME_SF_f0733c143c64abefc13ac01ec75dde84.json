{
    "patch": "public static String make_palindrome(String str) {\n    if (str.length() == 0)\n        return \"\";\n\n    String suffix = \"\";\n    for (int i = str.length() - 1; i >= 0; i--) {\n        String temp = str.substring(0, i + 1);\n        if (is_palindrome(temp)) {\n            suffix = str.substring(i + 1);\n            break;\n        }\n    }\n\n    return str + new StringBuilder(suffix).reverse().toString();\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/MAKE_PALINDROME.java b/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\nindex 05f44d8..a10cfeb 100644\n--- a/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\n+++ b/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\n@@ -9,17 +9,19 @@ public class MAKE_PALINDROME {\n         return true;\n     }\n \n-    public static String make_palindrome(String str){\n-        if (str.length() == 0)\n-            return \"\";\n+public static String make_palindrome(String str) {\n+    if (str.length() == 0)\n+        return \"\";\n \n-        int beginning_of_suffix = 0;\n-        while (! is_palindrome(str.substring(beginning_of_suffix))){\n-            beginning_of_suffix += 1;\n+    String suffix = \"\";\n+    for (int i = str.length() - 1; i >= 0; i--) {\n+        String temp = str.substring(0, i + 1);\n+        if (is_palindrome(temp)) {\n+            suffix = str.substring(i + 1);\n+            break;\n         }\n-        \n-        String result = str;\n-        result += str.substring(0, beginning_of_suffix);\n-        return result;\n     }\n+\n+    return str + new StringBuilder(suffix).reverse().toString();\n+}\n }",
    "result_reason": "   TEST_MAKE_PALINDROME.test_2:23 expected:<xyz[zy]> but was:<xyz[yx]>",
    "test_result": "FAIL"
}