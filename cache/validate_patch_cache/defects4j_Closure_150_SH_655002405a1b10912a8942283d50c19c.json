{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n        case Token.CONST:\n          defineVar(n, parent);\n          break;\n        default:\n          break;\n      }\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        if (NodeUtil.getEnclosingType(n, Token.FUNCTION) != null) {\n          handleFunctionInputs(parent);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..a4ba8da8 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1454,15 +1454,23 @@ final class TypedScopeCreator implements ScopeCreator {\n           if (parent.getType() == Token.NAME) {\n             return;\n           }\n-          defineDeclaredFunction(n, parent);\n+          defineFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n+        case Token.CONST:\n           defineVar(n, parent);\n           break;\n+        default:\n+          break;\n       }\n+\n+      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+        if (NodeUtil.getEnclosingType(n, Token.FUNCTION) != null) {\n+          handleFunctionInputs(parent);\n+        }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}