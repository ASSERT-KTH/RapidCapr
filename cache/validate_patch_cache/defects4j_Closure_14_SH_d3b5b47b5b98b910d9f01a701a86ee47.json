{
    "patch": "              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n              if (cfa != null) {\n                List<DiGraphEdge<Node, Branch>> exitEdges = cfa.getEdges(finallyNode);\n                for (DiGraphEdge<Node, Branch> exitEdge : exitEdges) {\n                  if (exitEdge.getValue() == Branch.ON_EX) {\n                    Node postFinallyNode = exitEdge.getDestination();\n                    cfa.createEdge(postFinallyNode, Branch.UNCOND, followNode);\n                  }\n                }\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..db344867 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -765,6 +765,15 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              if (cfa != null) {\n+                List<DiGraphEdge<Node, Branch>> exitEdges = cfa.getEdges(finallyNode);\n+                for (DiGraphEdge<Node, Branch> exitEdge : exitEdges) {\n+                  if (exitEdge.getValue() == Branch.ON_EX) {\n+                    Node postFinallyNode = exitEdge.getDestination();\n+                    cfa.createEdge(postFinallyNode, Branch.UNCOND, followNode);\n+                  }\n+                }\n+              }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}