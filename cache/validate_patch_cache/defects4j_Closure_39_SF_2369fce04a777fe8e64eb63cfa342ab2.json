{
    "patch": "public boolean canBeCalled() {\n    if (isNativeObjectType()) {\n        return true;\n    } else {\n        return isFunctionType() || isConstructor() || isInterface();\n    }\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n        return getReferenceName();\n    } else if (prettyPrint) {\n        // Don't pretty print recursively.\n        prettyPrint = false;\n\n        Set<String> propertyNames = Sets.newTreeSet();\n        List<ObjectType> prototypes = Lists.newArrayList();\n        for (ObjectType current = this;\n             current != null && !current.isNativeObjectType() &&\n                     prototypes.size() <= MAX_PRETTY_PRINTED_PROTOTYPES;\n             current = current.getImplicitPrototype()) {\n            prototypes.add(current);\n            propertyNames.addAll(current.getOwnPropertyNames());\n        }\n\n        Map<String, JSType> propertyTypes = Maps.newLinkedHashMap();\n        for (ObjectType prototype : prototypes) {\n            for (String property : prototype.getOwnPropertyNames()) {\n                if (propertyTypes.containsKey(property)) {\n                    continue;\n                }\n                JSType propertyType = prototype.getPropertyType(property);\n                if (!propertyType.isEmptyType()) {\n                    propertyTypes.put(property, propertyType);\n                }\n            }\n        }\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n\n        int i = 0;\n        int mapSize = propertyTypes.size();\n        for (String property : propertyTypes.keySet()) {\n            if (i > 0) {\n                sb.append(\", \");\n            }\n\n            sb.append(property);\n            sb.append(\": \");\n            sb.append(propertyTypes.get(property));\n\n            ++i;\n            if (i == MAX_PRETTY_PRINTED_PROPERTIES && i != mapSize) {\n                sb.append(\", ...\");\n                break;\n            }\n        }\n\n        sb.append(\"}\");\n\n        prettyPrint = true;\n        return sb.toString();\n    } else {\n        return \"{...}\";\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..ebe30616 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,74 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+public boolean canBeCalled() {\n+    if (isNativeObjectType()) {\n+        return true;\n+    } else {\n+        return isFunctionType() || isConstructor() || isInterface();\n+    }\n+}\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n     if (hasReferenceName()) {\n-      return getReferenceName();\n+        return getReferenceName();\n     } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n-\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n-\n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+        // Don't pretty print recursively.\n+        prettyPrint = false;\n+\n+        Set<String> propertyNames = Sets.newTreeSet();\n+        List<ObjectType> prototypes = Lists.newArrayList();\n+        for (ObjectType current = this;\n+             current != null && !current.isNativeObjectType() &&\n+                     prototypes.size() <= MAX_PRETTY_PRINTED_PROTOTYPES;\n+             current = current.getImplicitPrototype()) {\n+            prototypes.add(current);\n+            propertyNames.addAll(current.getOwnPropertyNames());\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        Map<String, JSType> propertyTypes = Maps.newLinkedHashMap();\n+        for (ObjectType prototype : prototypes) {\n+            for (String property : prototype.getOwnPropertyNames()) {\n+                if (propertyTypes.containsKey(property)) {\n+                    continue;\n+                }\n+                JSType propertyType = prototype.getPropertyType(property);\n+                if (!propertyType.isEmptyType()) {\n+                    propertyTypes.put(property, propertyType);\n+                }\n+            }\n+        }\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"{\");\n+\n+        int i = 0;\n+        int mapSize = propertyTypes.size();\n+        for (String property : propertyTypes.keySet()) {\n+            if (i > 0) {\n+                sb.append(\", \");\n+            }\n+\n+            sb.append(property);\n+            sb.append(\": \");\n+            sb.append(propertyTypes.get(property));\n+\n+            ++i;\n+            if (i == MAX_PRETTY_PRINTED_PROPERTIES && i != mapSize) {\n+                sb.append(\", ...\");\n+                break;\n+            }\n         }\n-      }\n \n-      sb.append(\"}\");\n+        sb.append(\"}\");\n \n-      prettyPrint = true;\n-      return sb.toString();\n+        prettyPrint = true;\n+        return sb.toString();\n     } else {\n-      return \"{...}\";\n+        return \"{...}\";\n     }\n-  }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}