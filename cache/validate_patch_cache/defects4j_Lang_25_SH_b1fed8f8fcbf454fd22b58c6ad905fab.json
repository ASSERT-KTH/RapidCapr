{
    "patch": "public static String escape(String string) {\n    if (string == null) {\n        return null;\n    }\n    StringBuffer sb = new StringBuffer(string.length());\n    for (int i = 0; i < string.length(); i++) {\n        char ch = string.charAt(i);\n        if (ch > 0xFF) {\n            // We handle here only characters in range 0-255\n            sb.append(ch);\n        } else if (ch == '\\n') {\n            sb.append(\"\\\\n\");\n        } else if (ch == '\\r') {\n            sb.append(\"\\\\r\");\n        } else if (ch == '\\t') {\n            sb.append(\"\\\\t\");\n        } else if (ch == '\\\"') {\n            sb.append(\"\\\\\\\"\");\n        } else if (ch == '\\'') {\n            sb.append(\"\\\\'\");\n        } else if (ch == '\\\\') {\n            sb.append(\"\\\\\\\\\");\n        } else if (ch < 0x20) {\n            sb.append(\"\\\\u00\"); // --> BUGGY LINE\n            sb.append(hex[ch >> 4]);\n            sb.append(hex[ch & 0xF]);\n        } else if (ch < 0x80) {\n            sb.append(ch);\n        } else { // ch >= 0x80 && ch <= 0xFF\n            sb.append(\"\\\\u00\");\n            sb.append(hex[ch >> 4]);\n            sb.append(hex[ch & 0xF]);\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}