{
    "patch": "@Test\n  public void testLendsAnnotation3() {\n    setAcceptedLanguage(CompilerOptions.LanguageMode.ECMASCRIPT6);\n    testSame(\"/** @constructor */ function F() {}\" +\n             \"F.prototype.method = function() {\" +\n             \"  this.a = 1;\" +\n             \"};\\n\" +\n             \"var obj = {a: 0, b: function() {}};\\n\" +\n             \"obj.b = obj.a ? F.prototype.method : function() {};\\n\");\n    // Ensure that the assignment in obj.b is not modified.\n    assertThat(getLastCompiler().toSource(), not(containsString(\"undefined\")));\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..4ae3f16d 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,70 +79,17 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions that are getting lent to a prototype.\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-        }\n-      }\n-    }\n-\n-    return true;\n+@Test\n+  public void testLendsAnnotation3() {\n+    setAcceptedLanguage(CompilerOptions.LanguageMode.ECMASCRIPT6);\n+    testSame(\"/** @constructor */ function F() {}\" +\n+             \"F.prototype.method = function() {\" +\n+             \"  this.a = 1;\" +\n+             \"};\\n\" +\n+             \"var obj = {a: 0, b: function() {}};\\n\" +\n+             \"obj.b = obj.a ? F.prototype.method : function() {};\\n\");\n+    // Ensure that the assignment in obj.b is not modified.\n+    assertThat(getLastCompiler().toSource(), not(containsString(\"undefined\")));\n   }\n \n   public void visit(NodeTraversal t, Node n, Node parent) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}