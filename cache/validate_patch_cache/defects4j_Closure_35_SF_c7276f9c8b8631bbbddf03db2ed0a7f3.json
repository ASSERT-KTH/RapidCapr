{
    "patch": "  private void inferPropertiesFromConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType existingType = objType.hasProperty(prop) ? objType.getPropertyType(prop) : null;\n\n            if (existingType == null || existingType.isBottom()) {\n              objType.defineInferredProperty(prop, propType, null);\n            } else {\n              JSType typeToInfer = computeGreatestSubtype(existingType, propType);\n              objType.defineInferredProperty(prop, typeToInfer, null);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n    }\n    if (n.isGetProp()) {\n      Node objNode = n.getFirstChild();\n      ObjectType objType = ObjectType.cast(getJSType(objNode));\n      if (objType != null) {\n        String propName = n.getLastChild().getString();\n        inferPropertiesFromConstraint(objType, getNominalType(objNode));\n        JSType actualType = objType.getPropertyType(propName);\n        if (actualType != null) {\n          JSType narrowedType =\n              actualType.restrictByNotNullOrUndefined().getGreatestSubtype(getNativeType(ALL_TYPE));\n          if (!narrowedType.isBottom()) {\n            scope =\n                rewriteScopes.getScope(\n                    n, scope).withTypeInfo(\n                    registry, TypedScope.createWithScope(scope), n, narrowedType);\n          }\n        }\n      }\n    }\n    return scope;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..1d316295 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,6 +1111,7 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n+  private void inferPropertiesFromConstraint(\n       JSType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n@@ -1124,12 +1125,14 @@ class TypeInference\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            JSType existingType = objType.hasProperty(prop) ? objType.getPropertyType(prop) : null;\n+\n+            if (existingType == null || existingType.isBottom()) {\n+              objType.defineInferredProperty(prop, propType, null);\n+            } else {\n+              JSType typeToInfer = computeGreatestSubtype(existingType, propType);\n+              objType.defineInferredProperty(prop, typeToInfer, null);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n       }\n@@ -1148,6 +1151,27 @@ class TypeInference\n         scope = narrowScope(scope, n, narrowed);\n       }\n     }\n+    if (n.isGetProp()) {\n+      Node objNode = n.getFirstChild();\n+      ObjectType objType = ObjectType.cast(getJSType(objNode));\n+      if (objType != null) {\n+        String propName = n.getLastChild().getString();\n+        inferPropertiesFromConstraint(objType, getNominalType(objNode));\n+        JSType actualType = objType.getPropertyType(propName);\n+        if (actualType != null) {\n+          JSType narrowedType =\n+              actualType.restrictByNotNullOrUndefined().getGreatestSubtype(getNativeType(ALL_TYPE));\n+          if (!narrowedType.isBottom()) {\n+            scope =\n+                rewriteScopes.getScope(\n+                    n, scope).withTypeInfo(\n+                    registry, TypedScope.createWithScope(scope), n, narrowedType);\n+          }\n+        }\n+      }\n+    }\n+    return scope;\n+    }\n     return scope;\n   }\n ",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}