{
    "patch": "        boolean dateOverride = false;\n        for (int i = 0; i < count; i++) {\n            DateTimeField field = savedFields[i].iField.getDateTimeField();\n            int value = savedFields[i].iValue;\n            if (field.getType() == DateTimeFieldType.monthOfYear() && savedFields[i].iValue > 12) {\n                dateOverride = true;\n                value = 12;\n            }\n            if (field.getType() == DateTimeFieldType.dayOfYear() && savedFields[i].iValue > 59) {\n                dateOverride = true;\n                value = 59;\n            }\n            millis = field.set(millis, value);\n            if (dateOverride && field.getType() == DateTimeFieldType.year()) {\n                millis = field.set(millis, iDefaultYear);                        \n                dateOverride = false;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5c881cde 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,24 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        boolean dateOverride = false;\n+        for (int i = 0; i < count; i++) {\n+            DateTimeField field = savedFields[i].iField.getDateTimeField();\n+            int value = savedFields[i].iValue;\n+            if (field.getType() == DateTimeFieldType.monthOfYear() && savedFields[i].iValue > 12) {\n+                dateOverride = true;\n+                value = 12;\n+            }\n+            if (field.getType() == DateTimeFieldType.dayOfYear() && savedFields[i].iValue > 59) {\n+                dateOverride = true;\n+                value = 59;\n+            }\n+            millis = field.set(millis, value);\n+            if (dateOverride && field.getType() == DateTimeFieldType.year()) {\n+                millis = field.set(millis, iDefaultYear);                        \n+                dateOverride = false;\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}