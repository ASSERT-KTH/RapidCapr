{
    "patch": "private boolean isSafeReplacement(Node node, Node replacement) {\n  if (node.isName()) {\n    return true;\n  }\n  Preconditions.checkArgument(node.isGetProp());\n\n  Node leftChild = node.getFirstChild();\n  String propertyName = \"\";\n\n  while (leftChild.isGetProp()) {\n    if (leftChild.getLastChild().isString()) {\n      propertyName = \".\" + leftChild.getLastChild().getString() + propertyName;\n    } else if (leftChild.getLastChild().isName()) {\n      if (isNameAssignedTo(leftChild.getLastChild().getString(), replacement)) {\n        return false;\n      }\n      propertyName = \".\" + leftChild.getLastChild().getString() + propertyName;\n    } else {\n      return false;\n    }\n    leftChild = leftChild.getFirstChild();\n  }\n\n  // handle last child\n  if (leftChild.isName()) {\n    if (isNameAssignedTo(leftChild.getString() + propertyName, replacement)) {\n      return false;\n    }\n  } else if (leftChild.isString()) {\n    if (isNameAssignedTo(leftChild.getString() + propertyName, replacement)) {\n      return false;\n    }\n  } else {\n    return false;\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..4148100a 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,22 +203,45 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n-    if (node.isName()) {\n-      return true;\n-    }\n-    Preconditions.checkArgument(node.isGetProp());\n+private boolean isSafeReplacement(Node node, Node replacement) {\n+  if (node.isName()) {\n+    return true;\n+  }\n+  Preconditions.checkArgument(node.isGetProp());\n \n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n+  Node leftChild = node.getFirstChild();\n+  String propertyName = \"\";\n+\n+  while (leftChild.isGetProp()) {\n+    if (leftChild.getLastChild().isString()) {\n+      propertyName = \".\" + leftChild.getLastChild().getString() + propertyName;\n+    } else if (leftChild.getLastChild().isName()) {\n+      if (isNameAssignedTo(leftChild.getLastChild().getString(), replacement)) {\n+        return false;\n+      }\n+      propertyName = \".\" + leftChild.getLastChild().getString() + propertyName;\n+    } else {\n       return false;\n     }\n+    leftChild = leftChild.getFirstChild();\n+  }\n \n-    return true;\n+  // handle last child\n+  if (leftChild.isName()) {\n+    if (isNameAssignedTo(leftChild.getString() + propertyName, replacement)) {\n+      return false;\n+    }\n+  } else if (leftChild.isString()) {\n+    if (isNameAssignedTo(leftChild.getString() + propertyName, replacement)) {\n+      return false;\n+    }\n+  } else {\n+    return false;\n   }\n \n+  return true;\n+}\n+\n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n    */\n@@ -241,4 +264,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}