{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                // try to see if the next transition is close enough to the\n                // estimated transition instant that they are probably the\n                // same transition. If they are the same, use the new offset.\n                // This will fail if a zone has more than two transitions at\n                // the same instant.\n                // The maximum limit is the switch of a non-lenient Gregorian\n                // calendar to a lenient Julian calendar, which occurred in\n                // the British Empire on 1752-09-14.\n                long nextLocal = nextTransition(instantLocal);\n                if (nextLocal == instantLocal) {\n                    return offsetAdjusted;\n                }\n                long nextAdjusted = nextTransition(instantAdjusted);\n                if (nextLocal == nextAdjusted) {\n                    return offsetAdjusted;\n                }\n            }\n            // handle the case where the transition is right at the\n            // start of the interval being queried\n            long nextLocal = nextTransition(instantLocal);\n            if (nextLocal == instantLocal) {\n                return offsetAdjusted;\n            }\n            // we have a problem, so attempt to fix it\n            long nextAdjusted = nextTransition(instantAdjusted);\n            if (nextLocal == nextAdjusted) {\n                return offsetAdjusted;\n            }\n            // we need to fall back to the previous offset\n            return offset(getTransition(nextLocal - DateTimeConstants.MILLIS_PER_DAY)).getOffset();\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..06767e1a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -890,12 +890,36 @@ public abstract class DateTimeZone implements Serializable {\n                 // if we just return offsetAdjusted then the time is pushed\n                 // back before the transition, whereas it should be\n                 // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+                // try to see if the next transition is close enough to the\n+                // estimated transition instant that they are probably the\n+                // same transition. If they are the same, use the new offset.\n+                // This will fail if a zone has more than two transitions at\n+                // the same instant.\n+                // The maximum limit is the switch of a non-lenient Gregorian\n+                // calendar to a lenient Julian calendar, which occurred in\n+                // the British Empire on 1752-09-14.\n+                long nextLocal = nextTransition(instantLocal);\n+                if (nextLocal == instantLocal) {\n+                    return offsetAdjusted;\n+                }\n+                long nextAdjusted = nextTransition(instantAdjusted);\n+                if (nextLocal == nextAdjusted) {\n+                    return offsetAdjusted;\n                 }\n             }\n+            // handle the case where the transition is right at the\n+            // start of the interval being queried\n+            long nextLocal = nextTransition(instantLocal);\n+            if (nextLocal == instantLocal) {\n+                return offsetAdjusted;\n+            }\n+            // we have a problem, so attempt to fix it\n+            long nextAdjusted = nextTransition(instantAdjusted);\n+            if (nextLocal == nextAdjusted) {\n+                return offsetAdjusted;\n+            }\n+            // we need to fall back to the previous offset\n+            return offset(getTransition(nextLocal - DateTimeConstants.MILLIS_PER_DAY)).getOffset();\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}