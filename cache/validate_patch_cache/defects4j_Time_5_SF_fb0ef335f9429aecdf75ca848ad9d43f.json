{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        if (getWeeks() != 0) {\n            millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n            Period result = new Period(millis, type, ISOChronology.getInstanceUTC())\n                    .withDays(getDays());\n            int years = getYears();\n            int months = getMonths();\n            if (years != 0 || months != 0) {\n                years = FieldUtils.safeAdd(years, months / 12);\n                months = months % 12;\n                if (years != 0) {\n                    result = result.withYears(years);\n                }\n                if (months != 0) {\n                    result = result.withMonths(months);\n                }\n            }\n            return result;\n        } else {\n            millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n            Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n            int years = getYears();\n            int months = getMonths();\n            if (years != 0 || months != 0) {\n                years = FieldUtils.safeAdd(years, months / 12);\n                months = months % 12;\n                if (years != 0) {\n                    result = result.withYears(years);\n                }\n                if (months != 0) {\n                    result = result.withMonths(months);\n                }\n            }\n            return result;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..a42c161e 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1619,22 +1619,40 @@ public final class Period\n         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n+        if (getWeeks() != 0) {\n+            millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+            Period result = new Period(millis, type, ISOChronology.getInstanceUTC())\n+                    .withDays(getDays());\n+            int years = getYears();\n+            int months = getMonths();\n+            if (years != 0 || months != 0) {\n+                years = FieldUtils.safeAdd(years, months / 12);\n+                months = months % 12;\n+                if (years != 0) {\n+                    result = result.withYears(years);\n+                }\n+                if (months != 0) {\n+                    result = result.withMonths(months);\n+                }\n             }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+            return result;\n+        } else {\n+            millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+            Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+            int years = getYears();\n+            int months = getMonths();\n+            if (years != 0 || months != 0) {\n+                years = FieldUtils.safeAdd(years, months / 12);\n+                months = months % 12;\n+                if (years != 0) {\n+                    result = result.withYears(years);\n+                }\n+                if (months != 0) {\n+                    result = result.withMonths(months);\n+                }\n             }\n+            return result;\n         }\n-        return result;\n     }\n \n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P2W5D> but was:<P1W12D>",
    "test_result": "FAIL"
}