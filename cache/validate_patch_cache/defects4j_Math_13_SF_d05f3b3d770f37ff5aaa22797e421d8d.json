{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n       final EigenDecomposition dec = new EigenDecomposition(m, m.getRowDimension() - 1);\n       final RealMatrix sqrt = MatrixUtils.createRealDiagonalMatrix(\n               DoubleStream.of(dec.getRealEigenvalues())\n                       .map(Math::sqrt)\n                       .toArray()\n       );\n       final RealMatrix v = dec.getV();\n       final RealMatrix vT = v.transpose();\n       return v.multiply(sqrt).multiply(vT);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2c9fa81a1 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,15 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+       final EigenDecomposition dec = new EigenDecomposition(m, m.getRowDimension() - 1);\n+       final RealMatrix sqrt = MatrixUtils.createRealDiagonalMatrix(\n+               DoubleStream.of(dec.getRealEigenvalues())\n+                       .map(Math::sqrt)\n+                       .toArray()\n+       );\n+       final RealMatrix v = dec.getV();\n+       final RealMatrix vT = v.transpose();\n+       return v.multiply(sqrt).multiply(vT);\n+}\n }",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}