{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      if (name.localSets <= 1 && name.getDeclaration() != null && name.aliasingGets > 0) {\n        for (Ref ref : Lists.newArrayList(name.getRefs())) {\n          if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n              // If we've inlined an alias, we need to re-evaluate the conditions (b) and (c) for the\n              // current name since its localSets and aliasingGets properties may have changed.\n              if (name.localSets <= 1 && name.aliasingGets > 0 && name.getDeclaration() != null) {\n                workList.push(name);\n              }\n            }\n          }\n        }\n      }\n\n      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null) {\n        workList.addAll(name.props);\n      }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..c755da12 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,8 +158,7 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n+private void inlineAliases(GlobalNamespace namespace) {\n     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n     while (!workList.isEmpty()) {\n       Name name = workList.pop();\n@@ -169,32 +168,27 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n+      if (name.localSets <= 1 && name.getDeclaration() != null && name.aliasingGets > 0) {\n+        for (Ref ref : Lists.newArrayList(name.getRefs())) {\n+          if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n             if (inlineAliasIfPossible(ref, namespace)) {\n               name.removeRef(ref);\n+              // If we've inlined an alias, we need to re-evaluate the conditions (b) and (c) for the\n+              // current name since its localSets and aliasingGets properties may have changed.\n+              if (name.localSets <= 1 && name.aliasingGets > 0 && name.getDeclaration() != null) {\n+                workList.push(name);\n+              }\n             }\n           }\n         }\n       }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n+      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n           name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n         workList.addAll(name.props);\n       }\n     }\n-  }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}