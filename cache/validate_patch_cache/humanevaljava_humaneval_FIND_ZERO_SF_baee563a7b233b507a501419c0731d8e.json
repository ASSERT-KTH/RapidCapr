{
    "patch": "public static double find_zero(List<Double> xs) {\n    double begin = -1.0;\n    double end = 1.0;\n    double tolerance = 1e-10;\n\n    // handle special cases\n    if (poly(xs, begin) == 0.0) {\n        return begin;\n    } else if (poly(xs, end) == 0.0) {\n        return end;\n    }\n\n    // ensure sign change\n    double fBegin = poly(xs, begin);\n    double fEnd = poly(xs, end);\n\n    if (fBegin * fEnd > 0) {\n        int numIters = (int) Math.ceil(Math.log(Math.abs(begin) + Math.abs(end)) / Math.log(2)) + 10;\n        double step = (end - begin) / (double)(numIters - 1);\n\n        for (int i = 0; i < numIters; i++) {\n            double x = begin + i * step;\n            double fX = poly(xs, x);\n\n            if (fX == 0.0) {\n                return x;\n            } else if (fX * fBegin < 0) {\n                end = x;\n                fEnd = fX;\n            } else {\n                begin = x;\n                fBegin = fX;\n            }\n        }\n    }\n\n    // bisection method\n    while (Math.abs(end - begin) > tolerance) {\n        double mid = (begin + end) / 2.0;\n        double fMid = poly(xs, mid);\n\n        if (fMid == 0.0) {\n            return mid;\n        } else if (fBegin * fMid < 0) {\n            end = mid;\n        } else {\n            begin = mid;\n        }\n    }\n\n    return (begin + end) / 2.0;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/FIND_ZERO.java b/src/main/java/humaneval/buggy/FIND_ZERO.java\nindex 9e2c137..f44fa2a 100644\n--- a/src/main/java/humaneval/buggy/FIND_ZERO.java\n+++ b/src/main/java/humaneval/buggy/FIND_ZERO.java\n@@ -11,23 +11,56 @@ public class FIND_ZERO {\n         return sum;\n     }\n \n-    public static double find_zero(List<Double> xs){\n-        double begin = -1.;\n-        double end = 1.;\n+public static double find_zero(List<Double> xs) {\n+    double begin = -1.0;\n+    double end = 1.0;\n+    double tolerance = 1e-10;\n \n-        while (poly(xs, begin) * poly(xs, end) > 0) {\n-            begin *= 2.;\n-            end *= 2.;\n-        }\n-        while (end - begin > 1e-10) {\n-            double center = (begin + end) / 2.;\n-            \n-            if (poly(xs, begin) * poly(xs, end) < 0) {\n-                begin = center;\n+    // handle special cases\n+    if (poly(xs, begin) == 0.0) {\n+        return begin;\n+    } else if (poly(xs, end) == 0.0) {\n+        return end;\n+    }\n+\n+    // ensure sign change\n+    double fBegin = poly(xs, begin);\n+    double fEnd = poly(xs, end);\n+\n+    if (fBegin * fEnd > 0) {\n+        int numIters = (int) Math.ceil(Math.log(Math.abs(begin) + Math.abs(end)) / Math.log(2)) + 10;\n+        double step = (end - begin) / (double)(numIters - 1);\n+\n+        for (int i = 0; i < numIters; i++) {\n+            double x = begin + i * step;\n+            double fX = poly(xs, x);\n+\n+            if (fX == 0.0) {\n+                return x;\n+            } else if (fX * fBegin < 0) {\n+                end = x;\n+                fEnd = fX;\n             } else {\n-                end = center;\n+                begin = x;\n+                fBegin = fX;\n             }\n         }\n-        return begin;\n     }\n+\n+    // bisection method\n+    while (Math.abs(end - begin) > tolerance) {\n+        double mid = (begin + end) / 2.0;\n+        double fMid = poly(xs, mid);\n+\n+        if (fMid == 0.0) {\n+            return mid;\n+        } else if (fBegin * fMid < 0) {\n+            end = mid;\n+        } else {\n+            begin = mid;\n+        }\n+    }\n+\n+    return (begin + end) / 2.0;\n+}\n }",
    "result_reason": "   TEST_FIND_ZERO.test_3:39",
    "test_result": "FAIL"
}