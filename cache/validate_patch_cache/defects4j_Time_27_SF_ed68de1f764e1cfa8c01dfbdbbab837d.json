{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 1) {\n        Object obj = elementPairs.get(0);\n        if (obj instanceof PeriodPrinter) {\n            return new PeriodFormatter((PeriodPrinter) obj, null);\n        } else if (obj instanceof PeriodParser) {\n            return new PeriodFormatter(null, (PeriodParser) obj);\n        } else {\n            throw new IllegalArgumentException(\"Invalid element type: \" + obj.getClass());\n        }\n    } else if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(f.getPrinter(), sep);\n    } else {\n        Object[] comp = createComposite(elementPairs);\n        if (notParser) {\n            throw new IllegalStateException(\"Invalid state: Builder has created a printer but no parser\");\n        }\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}\n\nprivate static Object[] createComposite(List<Object> elementPairs) {\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n    \n    int size = elementPairs.size();\n    for (int i = 0; i < size; i += 2) {\n        Object element = elementPairs.get(i);\n        if (element instanceof PeriodPrinter) {\n            printer = composite(printer, (PeriodPrinter) element);\n        } else if (element instanceof PeriodParser) {\n            parser = composite(parser, (PeriodParser) element);\n        } else {\n            throw new IllegalArgumentException(\"Invalid element type: \" + element.getClass());\n        }\n    }\n    return new Object[] { printer, parser };\n}\n\nprivate static PeriodPrinter composite(PeriodPrinter a, PeriodPrinter b) {\n    return (a == null ? b : (b == null ? a : new CompositePrinter(new PeriodPrinter[] { a, b })));\n}\n\nprivate static PeriodParser composite(PeriodParser a, PeriodParser b) {\n    return (a == null ? b : (b == null ? a : new CompositeParser(new PeriodParser[] { a, b })));\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..97b7c539 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,59 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 1) {\n+        Object obj = elementPairs.get(0);\n+        if (obj instanceof PeriodPrinter) {\n+            return new PeriodFormatter((PeriodPrinter) obj, null);\n+        } else if (obj instanceof PeriodParser) {\n+            return new PeriodFormatter(null, (PeriodParser) obj);\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid element type: \" + obj.getClass());\n+        }\n+    } else if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        return new PeriodFormatter(f.getPrinter(), sep);\n+    } else {\n         Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+        if (notParser) {\n+            throw new IllegalStateException(\"Invalid state: Builder has created a printer but no parser\");\n+        }\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n+\n+private static Object[] createComposite(List<Object> elementPairs) {\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+    \n+    int size = elementPairs.size();\n+    for (int i = 0; i < size; i += 2) {\n+        Object element = elementPairs.get(i);\n+        if (element instanceof PeriodPrinter) {\n+            printer = composite(printer, (PeriodPrinter) element);\n+        } else if (element instanceof PeriodParser) {\n+            parser = composite(parser, (PeriodParser) element);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            throw new IllegalArgumentException(\"Invalid element type: \" + element.getClass());\n         }\n     }\n+    return new Object[] { printer, parser };\n+}\n+\n+private static PeriodPrinter composite(PeriodPrinter a, PeriodPrinter b) {\n+    return (a == null ? b : (b == null ? a : new CompositePrinter(new PeriodPrinter[] { a, b })));\n+}\n+\n+private static PeriodParser composite(PeriodParser a, PeriodParser b) {\n+    return (a == null ? b : (b == null ? a : new CompositeParser(new PeriodParser[] { a, b })));\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: method createComposite(List<Object>) is already defined in class PeriodFormatterBuilder",
    "test_result": "ERROR"
}