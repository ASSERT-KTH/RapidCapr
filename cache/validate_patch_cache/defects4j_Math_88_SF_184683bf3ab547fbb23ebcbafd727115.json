{
    "patch": "    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        boolean[] foundBasicRow = new boolean[getOriginalNumDecisionVariables()]; // to track basic rows for each variable\n\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            // if multiple variables can take a given value\n            // then we choose the first and set the rest equal to 0\n            coefficients[i] =\n                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                            (restrictToNonNegative ? 0 : mostNegative);\n            if (basicRow != null) {\n                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                    if (tableau.getEntry(basicRow, j) == 1) {\n                        coefficients[i] = 0;\n                        foundBasicRow[i] = true; // track that a basic row has been found for this variable\n                        break;\n                    }\n                }\n                if (!foundBasicRow[i] && tableau.getEntry(basicRow, i + getNumObjectiveFunctions()) == 1) {\n                   // if no basic row has been found yet for this variable, and the current basic row has a leading 1 for this variable\n                   // set all the coefficients to 0 for this variable\n                   for (int k = 0; k < getOriginalNumDecisionVariables(); k++) {\n                        if (k != i) {\n                            coefficients[k] = 0;\n                        }\n                   }\n                   foundBasicRow[i] = true;\n                }\n            }\n        }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..4986ab894 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -326,19 +326,33 @@ class SimplexTableau implements Serializable {\n         Integer basicRow =\n             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+        boolean[] foundBasicRow = new boolean[getOriginalNumDecisionVariables()]; // to track basic rows for each variable\n+\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n+            // if multiple variables can take a given value\n+            // then we choose the first and set the rest equal to 0\n+            coefficients[i] =\n                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n+                            (restrictToNonNegative ? 0 : mostNegative);\n             if (basicRow != null) {\n                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                     if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+                        coefficients[i] = 0;\n+                        foundBasicRow[i] = true; // track that a basic row has been found for this variable\n+                        break;\n                     }\n                 }\n+                if (!foundBasicRow[i] && tableau.getEntry(basicRow, i + getNumObjectiveFunctions()) == 1) {\n+                   // if no basic row has been found yet for this variable, and the current basic row has a leading 1 for this variable\n+                   // set all the coefficients to 0 for this variable\n+                   for (int k = 0; k < getOriginalNumDecisionVariables(); k++) {\n+                        if (k != i) {\n+                            coefficients[k] = 0;\n+                        }\n+                   }\n+                   foundBasicRow[i] = true;\n+                }\n             }\n         }\n         return new RealPointValuePair(coefficients, f.getValue(coefficients));",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2902.92783505155> but was:<0.0>",
    "test_result": "FAIL"
}