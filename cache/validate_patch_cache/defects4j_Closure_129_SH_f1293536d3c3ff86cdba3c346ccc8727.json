{
    "patch": "      Node callee = NodeUtil.getBestLValue(first);\n      if (callee != null && callee.isQualifiedName()) {\n        Var calleeVar = getScope().getVar(callee.getString());\n        if (calleeVar != null && calleeVar.isExtern()) {\n          n.putBooleanProp(Node.FREE_CALL, true);\n        }\n      } else if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..d76e5a8a 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,15 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      Node callee = NodeUtil.getBestLValue(first);\n+      if (callee != null && callee.isQualifiedName()) {\n+        Var calleeVar = getScope().getVar(callee.getString());\n+        if (calleeVar != null && calleeVar.isExtern()) {\n+          n.putBooleanProp(Node.FREE_CALL, true);\n+        }\n+      } else if (!NodeUtil.isGet(first)) {\n+        n.putBooleanProp(Node.FREE_CALL, true);\n+      }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}