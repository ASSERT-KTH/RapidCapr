{
    "patch": "        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            // check if partial contains leap year, and remember if it is\n            boolean containsLeapYear = false;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (partial.getFieldType(i).equals(DateTimeFieldType.year())) {\n                    int year = values[i];\n                    containsLeapYear = iChronology.isLeapYear(year);\n                    break;\n                }\n            }\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (containsLeapYear && partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n                    int month = values[i];\n                    // if it's a leap year and it contains a Feb, adjust the month\n                    if (month == DateTimeConstants.FEBRUARY) {\n                        int day = values[i+1];\n                        if (day == DateTimeConstants.LEAP_DAY) {\n                            // if it's a leap day, we can safely move to March 1st\n                            values[i+1] = 1;\n                            month++;\n                        } else {\n                            // if it's Feb 29th, move to Feb 28th\n                            int year = values[i-1];\n                            if (iChronology.isLeapYear(year)) {\n                                values[i+1] = 28;\n                            } else {\n                                values[i+1] = 27;\n                            }\n                            month++;\n                        }\n                    }\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, month + valueToAdd);\n                } else {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..708b5dd8 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,43 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n+            // check if partial contains leap year, and remember if it is\n+            boolean containsLeapYear = false;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                if (partial.getFieldType(i).equals(DateTimeFieldType.year())) {\n+                    int year = values[i];\n+                    containsLeapYear = iChronology.isLeapYear(year);\n+                    break;\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            long instant = 0L;\n+            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                if (containsLeapYear && partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n+                    int month = values[i];\n+                    // if it's a leap year and it contains a Feb, adjust the month\n+                    if (month == DateTimeConstants.FEBRUARY) {\n+                        int day = values[i+1];\n+                        if (day == DateTimeConstants.LEAP_DAY) {\n+                            // if it's a leap day, we can safely move to March 1st\n+                            values[i+1] = 1;\n+                            month++;\n+                        } else {\n+                            // if it's Feb 29th, move to Feb 28th\n+                            int year = values[i-1];\n+                            if (iChronology.isLeapYear(year)) {\n+                                values[i+1] = 28;\n+                            } else {\n+                                values[i+1] = 27;\n+                            }\n+                            month++;\n+                        }\n+                    }\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, month + valueToAdd);\n+                } else {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                }\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}