{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    final double v1X = v1.getX();\n    final double v1Y = v1.getY();\n    final double v1Z = v1.getZ();\n    final double v2X = v2.getX();\n    final double v2Y = v2.getY();\n    final double v2Z = v2.getZ();\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double ax = Math.abs(v1X);\n    final double ay = Math.abs(v1Y);\n    final double az = Math.abs(v1Z);\n    final double bx = Math.abs(v2X);\n    final double by = Math.abs(v2Y);\n    final double bz = Math.abs(v2Z);\n\n    double max = 0.0;\n    if (bx > max) {\n        max = bx;\n    }\n    if (by > max) {\n        max = by;\n    }\n    if (bz > max) {\n        max = bz;\n    }\n    if (ax > max) {\n        max = ax;\n    }\n    if (ay > max) {\n        max = ay;\n    }\n    if (az > max) {\n        max = az;\n    }\n\n    final double invMax = 1.0 / max;\n    final double v1XRescaled = v1X * invMax;\n    final double v1YRescaled = v1Y * invMax;\n    final double v1ZRescaled = v1Z * invMax;\n    final double v2XRescaled = v2X * invMax;\n    final double v2YRescaled = v2Y * invMax;\n    final double v2ZRescaled = v2Z * invMax;\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    final double dot00 = v1XRescaled * v1XRescaled + v1YRescaled * v1YRescaled + v1ZRescaled * v1ZRescaled;\n    final double dot01 = v1XRescaled * v2XRescaled + v1YRescaled * v2YRescaled + v1ZRescaled * v2ZRescaled;\n    final double dot11 = v2XRescaled * v2XRescaled + v2YRescaled * v2YRescaled + v2ZRescaled * v2ZRescaled;\n    final double d = dot00 * dot11 - dot01 * dot01;\n    final double invD = 1.0 / d;\n    final double v3X = (v1XRescaled * dot11 - v2XRescaled * dot01) * invD;\n    final double v3Y = (v1YRescaled * dot11 - v2YRescaled * dot01) * invD;\n    final double v3Z = (v1ZRescaled * dot11 - v2ZRescaled * dot01) * invD;\n    final Vector3D v3 = new Vector3D(v3X, v3Y, v3Z);\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v3.getY() * v2Z - v3.getZ() * v2Y, v3.getZ() * v2X - v3.getX() * v2Z, v3.getX() * v2Y - v3.getY() * v2X);\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..ead6dbf2d 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,72 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    final double v1X = v1.getX();\n+    final double v1Y = v1.getY();\n+    final double v1Z = v1.getZ();\n+    final double v2X = v2.getX();\n+    final double v2Y = v2.getY();\n+    final double v2Z = v2.getZ();\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double ax = Math.abs(v1X);\n+    final double ay = Math.abs(v1Y);\n+    final double az = Math.abs(v1Z);\n+    final double bx = Math.abs(v2X);\n+    final double by = Math.abs(v2Y);\n+    final double bz = Math.abs(v2Z);\n+\n+    double max = 0.0;\n+    if (bx > max) {\n+        max = bx;\n+    }\n+    if (by > max) {\n+        max = by;\n+    }\n+    if (bz > max) {\n+        max = bz;\n+    }\n+    if (ax > max) {\n+        max = ax;\n+    }\n+    if (ay > max) {\n+        max = ay;\n+    }\n+    if (az > max) {\n+        max = az;\n+    }\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    final double invMax = 1.0 / max;\n+    final double v1XRescaled = v1X * invMax;\n+    final double v1YRescaled = v1Y * invMax;\n+    final double v1ZRescaled = v1Z * invMax;\n+    final double v2XRescaled = v2X * invMax;\n+    final double v2YRescaled = v2Y * invMax;\n+    final double v2ZRescaled = v2Z * invMax;\n+\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+    final double dot00 = v1XRescaled * v1XRescaled + v1YRescaled * v1YRescaled + v1ZRescaled * v1ZRescaled;\n+    final double dot01 = v1XRescaled * v2XRescaled + v1YRescaled * v2YRescaled + v1ZRescaled * v2ZRescaled;\n+    final double dot11 = v2XRescaled * v2XRescaled + v2YRescaled * v2YRescaled + v2ZRescaled * v2ZRescaled;\n+    final double d = dot00 * dot11 - dot01 * dot01;\n+    final double invD = 1.0 / d;\n+    final double v3X = (v1XRescaled * dot11 - v2XRescaled * dot01) * invD;\n+    final double v3Y = (v1YRescaled * dot11 - v2YRescaled * dot01) * invD;\n+    final double v3Z = (v1ZRescaled * dot11 - v2ZRescaled * dot01) * invD;\n+    final Vector3D v3 = new Vector3D(v3X, v3Y, v3Z);\n+\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    return new Vector3D(v3.getY() * v2Z - v3.getZ() * v2Y, v3.getZ() * v2X - v3.getX() * v2Z, v3.getX() * v2Y - v3.getY() * v2X);\n \n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.15867908994759872>",
    "test_result": "FAIL"
}