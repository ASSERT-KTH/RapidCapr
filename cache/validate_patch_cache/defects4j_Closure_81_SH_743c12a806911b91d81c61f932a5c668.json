{
    "patch": "      AstNode catchVarName = clauseNode.getVarName();\n      Node catchVar = catchVarName != null ? transform(catchVarName) : null;\n      return newNode(Token.CATCH, catchVar, transformBlock(clauseNode.getBody()));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..9166d171 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,9 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      AstNode catchVarName = clauseNode.getVarName();\n+      Node catchVar = catchVarName != null ? transform(catchVarName) : null;\n+      return newNode(Token.CATCH, catchVar, transformBlock(clauseNode.getBody()));\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}