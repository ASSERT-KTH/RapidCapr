{
    "patch": "private void readTypeVariables() {\n    TypeVariable[] superTypeParams = null;\n    if (typeVariable.getGenericDeclaration() instanceof Class) {\n        Class superClass = (Class) typeVariable.getGenericDeclaration();\n        Type superType = superClass.getGenericSuperclass();\n        if (superType instanceof ParameterizedType) {\n            superTypeParams = ((Class) ((ParameterizedType) superType).getRawType()).getTypeParameters();\n        } else {\n            superTypeParams = superClass.getTypeParameters();\n        }\n    }\n\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof TypeVariable) {\n            TypeVariable typeVar = (TypeVariable) type;\n            if (superTypeParams != null) {\n                for (TypeVariable superTypeParam : superTypeParams) {\n                    if (superTypeParam.getName().equals(typeVar.getName())) {\n                        registerTypeVariablesOn(superTypeParam);\n                        break;\n                    }\n                }\n            }\n            readTypeVariables(typeVar);\n        } else if (type != Object.class) {\n            registerTypeVariablesOn(type);\n        }\n    }\n\n    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArg != null) {\n        registerTypeVariablesOn(actualTypeArg);\n    } else {\n        registerTypeVariablesOn(typeVariable);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..af3cdcdd9 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,43 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    TypeVariable[] superTypeParams = null;\n+    if (typeVariable.getGenericDeclaration() instanceof Class) {\n+        Class superClass = (Class) typeVariable.getGenericDeclaration();\n+        Type superType = superClass.getGenericSuperclass();\n+        if (superType instanceof ParameterizedType) {\n+            superTypeParams = ((Class) ((ParameterizedType) superType).getRawType()).getTypeParameters();\n+        } else {\n+            superTypeParams = superClass.getTypeParameters();\n+        }\n+    }\n+\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof TypeVariable) {\n+            TypeVariable typeVar = (TypeVariable) type;\n+            if (superTypeParams != null) {\n+                for (TypeVariable superTypeParam : superTypeParams) {\n+                    if (superTypeParam.getName().equals(typeVar.getName())) {\n+                        registerTypeVariablesOn(superTypeParam);\n+                        break;\n+                    }\n+                }\n+            }\n+            readTypeVariables(typeVar);\n+        } else if (type != Object.class) {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+\n+    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArg != null) {\n+        registerTypeVariablesOn(actualTypeArg);\n+    } else {\n+        registerTypeVariablesOn(typeVariable);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}