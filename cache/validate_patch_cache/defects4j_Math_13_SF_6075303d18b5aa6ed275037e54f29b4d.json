{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix sqrt = dec.getSquareRoot();\n\n    // check if the eigenvalues are non-negative within tolerance\n    final double[] eigenvalues = dec.getRealEigenvalues();\n    final double tolerance = 1e-10;\n    for (int i = 0; i < eigenvalues.length; i++) {\n        if (eigenvalues[i] < -tolerance ||\n                (FastMath.abs(eigenvalues[i]) <= tolerance && dec.getImagEigenvalue(i) != 0)) {\n            throw new IllegalArgumentException(\"Square root matrix has non-real or negative eigenvalues\");\n        } else if (eigenvalues[i] < 0) {\n            eigenvalues[i] = 0;\n        }\n    }\n\n    // check if the resulting matrix is symmetric within tolerance\n    final RealMatrix squareRoot = createSquareRootMatrix(sqrt, eigenvalues);\n    if (!isSymmetric(squareRoot, 1e-10)) {\n        throw new IllegalArgumentException(\"Square root matrix is not symmetric\");\n    }\n\n    return squareRoot;\n}\n\n// helper function to create the square root matrix from the eigen decomposition\nprivate RealMatrix createSquareRootMatrix(RealMatrix eigenVectors, double[] squareRootEigenValues) {\n    final int n = eigenVectors.getRowDimension();\n    final RealMatrix sqrtEigenValues = MatrixUtils.createRealDiagonalMatrix(squareRootEigenValues);\n    final RealMatrix sqrt = eigenVectors.multiply(sqrtEigenValues).multiply(eigenVectors.transpose());\n    // set the lower triangle to be the transpose of the upper triangle to ensure symmetry\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            sqrt.setEntry(j, i, sqrt.getEntry(i, j));\n        }\n    }\n    return sqrt;\n}\n\n// helper function to check if a matrix is symmetric within tolerance\nprivate boolean isSymmetric(RealMatrix m, double tolerance) {\n    final int n = m.getRowDimension();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            final double diff = m.getEntry(i, j) - m.getEntry(j, i);\n            if (FastMath.abs(diff) > tolerance) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..0031e07d5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,56 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix sqrt = dec.getSquareRoot();\n+\n+    // check if the eigenvalues are non-negative within tolerance\n+    final double[] eigenvalues = dec.getRealEigenvalues();\n+    final double tolerance = 1e-10;\n+    for (int i = 0; i < eigenvalues.length; i++) {\n+        if (eigenvalues[i] < -tolerance ||\n+                (FastMath.abs(eigenvalues[i]) <= tolerance && dec.getImagEigenvalue(i) != 0)) {\n+            throw new IllegalArgumentException(\"Square root matrix has non-real or negative eigenvalues\");\n+        } else if (eigenvalues[i] < 0) {\n+            eigenvalues[i] = 0;\n+        }\n+    }\n+\n+    // check if the resulting matrix is symmetric within tolerance\n+    final RealMatrix squareRoot = createSquareRootMatrix(sqrt, eigenvalues);\n+    if (!isSymmetric(squareRoot, 1e-10)) {\n+        throw new IllegalArgumentException(\"Square root matrix is not symmetric\");\n+    }\n+\n+    return squareRoot;\n+}\n+\n+// helper function to create the square root matrix from the eigen decomposition\n+private RealMatrix createSquareRootMatrix(RealMatrix eigenVectors, double[] squareRootEigenValues) {\n+    final int n = eigenVectors.getRowDimension();\n+    final RealMatrix sqrtEigenValues = MatrixUtils.createRealDiagonalMatrix(squareRootEigenValues);\n+    final RealMatrix sqrt = eigenVectors.multiply(sqrtEigenValues).multiply(eigenVectors.transpose());\n+    // set the lower triangle to be the transpose of the upper triangle to ensure symmetry\n+    for (int i = 0; i < n; i++) {\n+        for (int j = i + 1; j < n; j++) {\n+            sqrt.setEntry(j, i, sqrt.getEntry(i, j));\n+        }\n     }\n+    return sqrt;\n+}\n+\n+// helper function to check if a matrix is symmetric within tolerance\n+private boolean isSymmetric(RealMatrix m, double tolerance) {\n+    final int n = m.getRowDimension();\n+    for (int i = 0; i < n; i++) {\n+        for (int j = i + 1; j < n; j++) {\n+            final double diff = m.getEntry(i, j) - m.getEntry(j, i);\n+            if (FastMath.abs(diff) > tolerance) {\n+                return false;\n+            }\n+        }\n+    }\n+    return true;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}