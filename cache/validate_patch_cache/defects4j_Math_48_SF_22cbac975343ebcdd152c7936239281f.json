{
    "patch": "import org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\n\nprotected final double doSolve() throws TooManyEvaluationsException {\n    // Get initial solution.\n    double lo = getMin();\n    double hi = getMax();\n    double fLo = computeObjectiveValue(lo);\n    double fHi = computeObjectiveValue(hi);\n\n    // Check if one of the initial guesses is a root.\n    if (fLo == 0) {\n        return lo;\n    }\n    if (fHi == 0) {\n        return hi;\n    }\n\n    // Verify initial bracketing.\n    verifyBracketing(lo, hi);\n\n    // Apply the Regula Falsi method.\n    double mid = lo;\n    double fMid = fLo;\n    double s = hi;\n    double fS = fHi;\n    double previousMid = Double.POSITIVE_INFINITY;\n    int i;\n    for (i = 0; i < getMaxIterations(); ++i) {\n\n        // Compute the next midpoint candidate.\n        double delta = s - mid;\n        double fm = computeObjectiveValue(mid + delta / 2);\n        if (fm == 0) {\n            return mid + delta / 2;\n        }\n\n        // Update the bracket.\n        boolean sameBracket = false;\n        double nextMid;\n        double nextFmid;\n        if (fMid * fm < 0) {\n            nextFmid = fm;\n            nextMid = mid;\n            fS = fm;\n        } else if (fS * fm < 0) {\n            nextFmid = fm;\n            nextMid = s;\n            fMid = fm;\n        } else {\n            sameBracket = true;\n            nextMid = mid + delta / 2;\n            nextFmid = computeObjectiveValue(nextMid);\n            if (nextFmid == 0) {\n                return nextMid;\n            }\n\n            // Update the bracketing interval based on the sign of the last derivative inverse.\n            if (Double.isNaN(nextFmid) ||\n                    !((nextFmid >= 0) ^ (fMid < 0))) {\n                if (delta >= 0) {\n                    fMid /= 2;\n                } else {\n                    fS /= 2;\n                }\n            } else if (delta >= 0) {\n                fS = fMid / 2;\n            } else {\n                fMid = fS / 2;\n            }\n        }\n\n        // Check for convergence.\n        double nextDelta = s - nextMid;\n        boolean converged = Math.abs(nextDelta) <= getRelativeAccuracy() * Math.abs(nextMid) + getAbsoluteAccuracy();\n        if (converged || sameBracket) {\n            if (delta > 0) {\n                setFunctionValue((Math.abs(fMid) < Math.abs(fS)) ? fMid : fS);\n            } else {\n                setFunctionValue((Math.abs(fLo) < Math.abs(fHi)) ? fLo : fHi);\n            }\n            return converged ? nextMid : (fMid < 0) ? mid : s;\n        }\n\n        // Prepare the variables for the next loop iteration\n        if (sameBracket) {\n            previousMid = Double.POSITIVE_INFINITY;\n        } else if (delta > 0.0) {\n            previousMid = mid;\n        } else {\n            previousMid = s;\n        }\n        mid = nextMid;\n        fMid = nextFmid;\n        if (Math.abs(fMid) < FunctionEvaluations.EPSILON) {\n            return mid;\n        }\n        if (fMid * fLo < 0) {\n            s = hi;\n            fS = fHi;\n        } else if (Math.abs(fLo) < Math.abs(fHi)) {\n            lo = mid;\n            fLo = fMid;\n        } else {\n            s = mid;\n            fHi = fMid;\n        }\n\n        // Check for early termination.\n        if (i + 1 == getMaxIterations()) {\n            throw new TooManyEvaluationsException(getMaxIterations());\n        }\n    }\n\n    // The method has failed.\n    throw new TooManyEvaluationsException(i);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..cf8dd1d1b 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -126,130 +126,124 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.exception.util.LocalizedFormats;\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+protected final double doSolve() throws TooManyEvaluationsException {\n+    // Get initial solution.\n+    double lo = getMin();\n+    double hi = getMax();\n+    double fLo = computeObjectiveValue(lo);\n+    double fHi = computeObjectiveValue(hi);\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+    // Check if one of the initial guesses is a root.\n+    if (fLo == 0) {\n+        return lo;\n+    }\n+    if (fHi == 0) {\n+        return hi;\n+    }\n \n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+    // Verify initial bracketing.\n+    verifyBracketing(lo, hi);\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+    // Apply the Regula Falsi method.\n+    double mid = lo;\n+    double fMid = fLo;\n+    double s = hi;\n+    double fS = fHi;\n+    double previousMid = Double.POSITIVE_INFINITY;\n+    int i;\n+    for (i = 0; i < getMaxIterations(); ++i) {\n \n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+        // Compute the next midpoint candidate.\n+        double delta = s - mid;\n+        double fm = computeObjectiveValue(mid + delta / 2);\n+        if (fm == 0) {\n+            return mid + delta / 2;\n+        }\n \n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n+        // Update the bracket.\n+        boolean sameBracket = false;\n+        double nextMid;\n+        double nextFmid;\n+        if (fMid * fm < 0) {\n+            nextFmid = fm;\n+            nextMid = mid;\n+            fS = fm;\n+        } else if (fS * fm < 0) {\n+            nextFmid = fm;\n+            nextMid = s;\n+            fMid = fm;\n+        } else {\n+            sameBracket = true;\n+            nextMid = mid + delta / 2;\n+            nextFmid = computeObjectiveValue(nextMid);\n+            if (nextFmid == 0) {\n+                return nextMid;\n             }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n-            } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                case REGULA_FALSI:\n-                    // Detect early that algorithm is stuck, instead of waiting\n-                    // for the maximum number of iterations to be exceeded.\n-                    break;\n-                default:\n-                    // Should never happen.\n-                    throw new MathInternalError();\n+            // Update the bracketing interval based on the sign of the last derivative inverse.\n+            if (Double.isNaN(nextFmid) ||\n+                    !((nextFmid >= 0) ^ (fMid < 0))) {\n+                if (delta >= 0) {\n+                    fMid /= 2;\n+                } else {\n+                    fS /= 2;\n                 }\n+            } else if (delta >= 0) {\n+                fS = fMid / 2;\n+            } else {\n+                fMid = fS / 2;\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n+        }\n \n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+        // Check for convergence.\n+        double nextDelta = s - nextMid;\n+        boolean converged = Math.abs(nextDelta) <= getRelativeAccuracy() * Math.abs(nextMid) + getAbsoluteAccuracy();\n+        if (converged || sameBracket) {\n+            if (delta > 0) {\n+                setFunctionValue((Math.abs(fMid) < Math.abs(fS)) ? fMid : fS);\n+            } else {\n+                setFunctionValue((Math.abs(fLo) < Math.abs(fHi)) ? fLo : fHi);\n             }\n+            return converged ? nextMid : (fMid < 0) ? mid : s;\n+        }\n \n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n-                }\n-            }\n+        // Prepare the variables for the next loop iteration\n+        if (sameBracket) {\n+            previousMid = Double.POSITIVE_INFINITY;\n+        } else if (delta > 0.0) {\n+            previousMid = mid;\n+        } else {\n+            previousMid = s;\n+        }\n+        mid = nextMid;\n+        fMid = nextFmid;\n+        if (Math.abs(fMid) < FunctionEvaluations.EPSILON) {\n+            return mid;\n+        }\n+        if (fMid * fLo < 0) {\n+            s = hi;\n+            fS = fHi;\n+        } else if (Math.abs(fLo) < Math.abs(fHi)) {\n+            lo = mid;\n+            fLo = fMid;\n+        } else {\n+            s = mid;\n+            fHi = fMid;\n+        }\n+\n+        // Check for early termination.\n+        if (i + 1 == getMaxIterations()) {\n+            throw new TooManyEvaluationsException(getMaxIterations());\n         }\n     }\n \n+    // The method has failed.\n+    throw new TooManyEvaluationsException(i);\n+}\n+\n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}