{
    "patch": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class StringEscapeUtil {\n    public static String escapeString(String inputString) {\n\n        if(inputString == null) {\n            return null;\n        }\n\n        StringBuilder stringBuilder = new StringBuilder();\n        Pattern pattern = Pattern.compile(\"[\\n\\r\\\"\\'\\\\\\\\<>\\u0085\\u2028\\u2029]\");\n        Matcher matcher = pattern.matcher(inputString);\n\n        int i = 0;\n        boolean success = true;\n\n        while(matcher.find()) {\n            success = false;\n            stringBuilder.append(inputString.substring(i, matcher.start()));\n            i = matcher.end();\n            char ch = inputString.charAt(matcher.start());\n            switch(ch) {\n                case '\\n':\n                    stringBuilder.append(\"\\\\n\");\n                    break;\n                case '\\r':\n                    stringBuilder.append(\"\\\\r\");\n                    break;\n                case '\\\"':\n                    stringBuilder.append(\"\\\\\\\"\");\n                    break;\n                case '\\'':\n                    stringBuilder.append(\"\\\\'\");\n                    break;\n                case '\\\\':\n                    stringBuilder.append(\"\\\\\\\\\");\n                    break;\n                case '<':\n                    stringBuilder.append(\"&lt;\");\n                    break;\n                case '>':\n                    stringBuilder.append(\"&gt;\");\n                    break;\n                case '\\u0085':\n                    stringBuilder.append(\"\\\\u0085\");\n                    break;\n                case '\\u2028':\n                    stringBuilder.append(\"\\\\u2028\");\n                    break;\n                case '\\u2029':\n                    stringBuilder.append(\"\\\\u2029\");\n                    break;\n            }\n        }\n\n        if(success) {\n            return inputString;\n        }\n\n        stringBuilder.append(inputString.substring(i, inputString.length()));\n\n        return stringBuilder.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..7076130c 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,71 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class StringEscapeUtil {\n+    public static String escapeString(String inputString) {\n+\n+        if(inputString == null) {\n+            return null;\n+        }\n+\n+        StringBuilder stringBuilder = new StringBuilder();\n+        Pattern pattern = Pattern.compile(\"[\\n\\r\\\"\\'\\\\\\\\<>\\u0085\\u2028\\u2029]\");\n+        Matcher matcher = pattern.matcher(inputString);\n+\n+        int i = 0;\n+        boolean success = true;\n+\n+        while(matcher.find()) {\n+            success = false;\n+            stringBuilder.append(inputString.substring(i, matcher.start()));\n+            i = matcher.end();\n+            char ch = inputString.charAt(matcher.start());\n+            switch(ch) {\n+                case '\\n':\n+                    stringBuilder.append(\"\\\\n\");\n+                    break;\n+                case '\\r':\n+                    stringBuilder.append(\"\\\\r\");\n+                    break;\n+                case '\\\"':\n+                    stringBuilder.append(\"\\\\\\\"\");\n+                    break;\n+                case '\\'':\n+                    stringBuilder.append(\"\\\\'\");\n+                    break;\n+                case '\\\\':\n+                    stringBuilder.append(\"\\\\\\\\\");\n+                    break;\n+                case '<':\n+                    stringBuilder.append(\"&lt;\");\n+                    break;\n+                case '>':\n+                    stringBuilder.append(\"&gt;\");\n+                    break;\n+                case '\\u0085':\n+                    stringBuilder.append(\"\\\\u0085\");\n+                    break;\n+                case '\\u2028':\n+                    stringBuilder.append(\"\\\\u2028\");\n+                    break;\n+                case '\\u2029':\n+                    stringBuilder.append(\"\\\\u2029\");\n+                    break;\n+            }\n+        }\n+\n+        if(success) {\n+            return inputString;\n+        }\n+\n+        stringBuilder.append(inputString.substring(i, inputString.length()));\n+\n+        return stringBuilder.toString();\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}