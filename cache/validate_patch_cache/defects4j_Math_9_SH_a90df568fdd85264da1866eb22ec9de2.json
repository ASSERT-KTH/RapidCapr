{
    "patch": "final Vector3D zero = Vector3D.ZERO;\nfinal Vector3D revertedDirection = direction.scalarMultiply(-1);\nfinal double d = direction.dotProduct(zero);\nfinal Vector3D revertedOrigin = revertedDirection.scalarMultiply(2 * d / direction.dotProduct(revertedDirection)).subtract(zero);\nfinal Line reverted = new Line(revertedOrigin, revertedDirection);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..e0ba07d3c 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,7 +84,11 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n+final Vector3D zero = Vector3D.ZERO;\n+final Vector3D revertedDirection = direction.scalarMultiply(-1);\n+final double d = direction.dotProduct(zero);\n+final Vector3D revertedOrigin = revertedDirection.scalarMultiply(2 * d / direction.dotProduct(revertedDirection)).subtract(zero);\n+final Line reverted = new Line(revertedOrigin, revertedDirection);\n         return reverted;\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: arrays first differed at element [0]; expected:<0.028581782127907646> but was:<0.028581782127907653>",
    "test_result": "FAIL"
}