{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    \n    int defaultYear;\n    try {\n        // Attempt to parse the year from the input text\n        int year = Integer.parseInt(text.substring(position, position + 4));\n        defaultYear = year;\n    } catch (IndexOutOfBoundsException | NumberFormatException e) {\n        // If the year is not present in the input text, default to the year of the instant\n        defaultYear = chrono.year().get(instantLocal);\n    }\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis(false, text));\n    \n    // Set the chronology based on the parsed offset/zone, and validate the parsed values\n    if (bucket.getOffsetInteger() != null) {\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n        chrono = chrono.withZone(parsedZone);\n        instant.setChronology(chrono);\n        validateParsedValues(bucket);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n        instant.setChronology(chrono);\n        validateParsedValues(bucket);\n    } else {\n        // If no offset or zone was parsed, update only the instant's chronology\n        instant.setChronology(chrono);\n    }\n    \n    // Set the time zone if specified\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    \n    return newPos;\n}\n\nprivate void validateParsedValues(DateTimeParserBucket bucket) {\n    // Validate the day of month for February 29 on non-leap years\n    if (bucket.monthOfYear().isParsed() && bucket.monthOfYear().getValue() == DateTimeConstants.FEBRUARY &&\n            bucket.dayOfMonth().isParsed() && bucket.dayOfMonth().getValue() == 29 &&\n            !bucket.chronology().dayOfYear().isLeap(bucket.year().getValue())) {\n        throw new IllegalFieldValueException(DateTimeFieldType.dayOfMonth(), bucket.dayOfMonth().getValue(),\n                \"Value 29 for dayOfMonth must be in the range [1,28]\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..9e12e8dd 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,64 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    \n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    \n+    int defaultYear;\n+    try {\n+        // Attempt to parse the year from the input text\n+        int year = Integer.parseInt(text.substring(position, position + 4));\n+        defaultYear = year;\n+    } catch (IndexOutOfBoundsException | NumberFormatException e) {\n+        // If the year is not present in the input text, default to the year of the instant\n+        defaultYear = chrono.year().get(instantLocal);\n+    }\n+    \n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    instant.setMillis(bucket.computeMillis(false, text));\n+    \n+    // Set the chronology based on the parsed offset/zone, and validate the parsed values\n+    if (bucket.getOffsetInteger() != null) {\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n+        chrono = chrono.withZone(parsedZone);\n+        instant.setChronology(chrono);\n+        validateParsedValues(bucket);\n+    } else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+        instant.setChronology(chrono);\n+        validateParsedValues(bucket);\n+    } else {\n+        // If no offset or zone was parsed, update only the instant's chronology\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n     }\n+    \n+    // Set the time zone if specified\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    \n+    return newPos;\n+}\n+\n+private void validateParsedValues(DateTimeParserBucket bucket) {\n+    // Validate the day of month for February 29 on non-leap years\n+    if (bucket.monthOfYear().isParsed() && bucket.monthOfYear().getValue() == DateTimeConstants.FEBRUARY &&\n+            bucket.dayOfMonth().isParsed() && bucket.dayOfMonth().getValue() == 29 &&\n+            !bucket.chronology().dayOfYear().isLeap(bucket.year().getValue())) {\n+        throw new IllegalFieldValueException(DateTimeFieldType.dayOfMonth(), bucket.dayOfMonth().getValue(),\n+                \"Value 29 for dayOfMonth must be in the range [1,28]\");\n+    }\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}