{
    "patch": "    public Dfp multiply(final Dfp x) {\n        if (x.field.getRadixDigits() != field.getRadixDigits()) {\n            // this is not a well-defined operation so avoid it\n            return newInstance(getZero());\n        }\n\n        final Dfp result = newInstance();\n        for (int i = 0; i < field.getArraySize(); i++) {\n            result.array[i] = 0;\n        }\n\n        boolean negativeProduct = sign != x.sign;\n        for (int i = 1; i < field.getArraySize(); i++) {\n            long rh = 0;\n            for (int j = 1; j < field.getArraySize() - i + 1; j++) {\n                long product = ((long) array[field.getArraySize() - j] & LONG_MASK) * ((long) x.array[field.getArraySize() - i - j + 2] & LONG_MASK) + (rh & LONG_MASK);\n                rh = product >>> 32;\n                product += array[field.getArraySize() - i - j + 1] * (long) x.array[field.getArraySize() - j + 1];\n                rh += (product >>> 32);\n                rh += result.array[field.getArraySize() - i - j + 1];\n                result.array[field.getArraySize() - i - j + 1] = (int) (rh & LONG_MASK);\n                rh = (rh >>> 32) & LONG_MASK;\n            }\n            rh += result.array[field.getArraySize() - i - field.getOffset()] + (negativeProduct ? -1L : 0L);\n            result.array[field.getArraySize() - i - field.getOffset()] = (int) (rh & LONG_MASK);\n        }\n\n        result.sign = (result.array[field.getOffset()] & SIGN_BIT_MASK) != 0;\n        result.rescale();\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f84218ebd..8f0cf785a 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -593,8 +593,36 @@ public class Fraction\n      *\n      * @return the fraction percentage as a <tt>double</tt>.\n      */\n-    public double percentageValue() {\n-        return multiply(100).doubleValue();\n+    public Dfp multiply(final Dfp x) {\n+        if (x.field.getRadixDigits() != field.getRadixDigits()) {\n+            // this is not a well-defined operation so avoid it\n+            return newInstance(getZero());\n+        }\n+\n+        final Dfp result = newInstance();\n+        for (int i = 0; i < field.getArraySize(); i++) {\n+            result.array[i] = 0;\n+        }\n+\n+        boolean negativeProduct = sign != x.sign;\n+        for (int i = 1; i < field.getArraySize(); i++) {\n+            long rh = 0;\n+            for (int j = 1; j < field.getArraySize() - i + 1; j++) {\n+                long product = ((long) array[field.getArraySize() - j] & LONG_MASK) * ((long) x.array[field.getArraySize() - i - j + 2] & LONG_MASK) + (rh & LONG_MASK);\n+                rh = product >>> 32;\n+                product += array[field.getArraySize() - i - j + 1] * (long) x.array[field.getArraySize() - j + 1];\n+                rh += (product >>> 32);\n+                rh += result.array[field.getArraySize() - i - j + 1];\n+                result.array[field.getArraySize() - i - j + 1] = (int) (rh & LONG_MASK);\n+                rh = (rh >>> 32) & LONG_MASK;\n+            }\n+            rh += result.array[field.getArraySize() - i - field.getOffset()] + (negativeProduct ? -1L : 0L);\n+            result.array[field.getArraySize() - i - field.getOffset()] = (int) (rh & LONG_MASK);\n+        }\n+\n+        result.sign = (result.array[field.getOffset()] & SIGN_BIT_MASK) != 0;\n+        result.rescale();\n+        return result;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}