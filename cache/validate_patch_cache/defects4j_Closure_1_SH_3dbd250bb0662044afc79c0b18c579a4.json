{
    "patch": "// Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        // Remove the argument from the function declaration.\n        argList.removeChild(lastArg);\n\n        // Also remove the corresponding parameter from the function node.\n        Node paramNode = NodeUtil.getFunctionParameters(function).getLastChild();\n        Preconditions.checkState(paramNode.isParam());\n        Preconditions.checkState(paramNode.getString().equals(lastArg.getString()));\n        function.removeChild(paramNode);\n\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b19a6413 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,24 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      Var var = fnScope.getVar(lastArg.getString());\n+      if (!referenced.contains(var)) {\n+        // Remove the argument from the function declaration.\n+        argList.removeChild(lastArg);\n+\n+        // Also remove the corresponding parameter from the function node.\n+        Node paramNode = NodeUtil.getFunctionParameters(function).getLastChild();\n+        Preconditions.checkState(paramNode.isParam());\n+        Preconditions.checkState(paramNode.getString().equals(lastArg.getString()));\n+        function.removeChild(paramNode);\n+\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}