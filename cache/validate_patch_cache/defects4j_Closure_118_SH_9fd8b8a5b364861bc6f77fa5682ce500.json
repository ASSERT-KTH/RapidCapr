{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  Set<String> stringPropNames = new HashSet<>();\n  Set<String> propNames = new HashSet<>();\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    String name = child.getString();\n    T type = typeSystem.getType(getScope(), n, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n      propNames.add(name);\n      if (propertiesToErrorFor.containsKey(name)) {\n        if (child.isQuotedString()) {\n          stringPropNames.add(name);\n        } else {\n          compiler.report(JSError.make(\n              t.getSourceName(),\n              child,\n              propertiesToErrorFor.get(name),\n              Warnings.INVALIDATION,\n              name,\n              (type == null ? \"null\" : type.toString()),\n              n.toString(),\n              \"\"));\n        }\n      }\n    }\n  }\n  // Check that all properties with error messages are either all strings or all not strings.\n  if (!stringPropNames.isEmpty() && !propNames.equals(stringPropNames)) {\n    String firstError = propertiesToErrorFor.get(stringPropNames.iterator().next());\n    compiler.report(\n        JSError.make(\n            t.getSourceName(),\n            n,\n            firstError,\n            Warnings.INVALIDATION_MIXED_STRING_TYPES));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..193086db 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,43 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  Set<String> stringPropNames = new HashSet<>();\n+  Set<String> propNames = new HashSet<>();\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    String name = child.getString();\n+    T type = typeSystem.getType(getScope(), n, name);\n+    Property prop = getProperty(name);\n+    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+      propNames.add(name);\n+      if (propertiesToErrorFor.containsKey(name)) {\n+        if (child.isQuotedString()) {\n+          stringPropNames.add(name);\n+        } else {\n+          compiler.report(JSError.make(\n+              t.getSourceName(),\n+              child,\n+              propertiesToErrorFor.get(name),\n+              Warnings.INVALIDATION,\n+              name,\n+              (type == null ? \"null\" : type.toString()),\n+              n.toString(),\n+              \"\"));\n+        }\n+      }\n+    }\n+  }\n+  // Check that all properties with error messages are either all strings or all not strings.\n+  if (!stringPropNames.isEmpty() && !propNames.equals(stringPropNames)) {\n+    String firstError = propertiesToErrorFor.get(stringPropNames.iterator().next());\n+    compiler.report(\n+        JSError.make(\n+            t.getSourceName(),\n+            n,\n+            firstError,\n+            Warnings.INVALIDATION_MIXED_STRING_TYPES));\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}