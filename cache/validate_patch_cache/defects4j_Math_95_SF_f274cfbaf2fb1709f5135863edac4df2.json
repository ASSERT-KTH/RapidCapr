{
    "patch": "    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n        // check for small degrees of freedom\n        if (d < 2.0) {\n            double dp1 = d + 1.0;\n            double t = FastMath.tan(p * FastMath.PI / 2.0);\n            ret = t * FastMath.sqrt(dp1) - dp1;\n        } else {\n            // use mean\n            ret = d / (d - 2.0);\n        }\n        return ret;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97aef..218709e58 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -143,8 +143,15 @@ public class FDistributionImpl\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n+        // check for small degrees of freedom\n+        if (d < 2.0) {\n+            double dp1 = d + 1.0;\n+            double t = FastMath.tan(p * FastMath.PI / 2.0);\n+            ret = t * FastMath.sqrt(dp1) - dp1;\n+        } else {\n             // use mean\n             ret = d / (d - 2.0);\n+        }\n         return ret;\n     }\n     ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}