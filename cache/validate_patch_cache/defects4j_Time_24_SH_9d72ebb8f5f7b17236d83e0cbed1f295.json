{
    "patch": "        } catch (IllegalFieldValueException e) {\n            SavedField field = e.getSavedField();\n            int index = findIndex(savedFields, count, field);\n            if (index >= 0) {\n                for (int j = index + 1; j < count; j++) {\n                    savedFields[j].reset();\n                    millis = savedFields[j].set(millis, false);\n                }\n                count = index;\n                if (count > 0) {\n                    sort(savedFields, count);\n                    DurationField months = DurationFieldType.months().getField(iChrono);\n                    DurationField days = DurationFieldType.days().getField(iChrono);\n                    DurationField first = savedFields[0].iField.getDurationField();\n                    if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                        saveField(DateTimeFieldType.year(), iDefaultYear);\n                        return computeMillis(resetFields, text);\n                    }\n                }\n            }\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..b14524b9 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,31 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            SavedField field = e.getSavedField();\n+            int index = findIndex(savedFields, count, field);\n+            if (index >= 0) {\n+                for (int j = index + 1; j < count; j++) {\n+                    savedFields[j].reset();\n+                    millis = savedFields[j].set(millis, false);\n+                }\n+                count = index;\n+                if (count > 0) {\n+                    sort(savedFields, count);\n+                    DurationField months = DurationFieldType.months().getField(iChrono);\n+                    DurationField days = DurationFieldType.days().getField(iChrono);\n+                    DurationField first = savedFields[0].iField.getDurationField();\n+                    if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+                        saveField(DateTimeFieldType.year(), iDefaultYear);\n+                        return computeMillis(resetFields, text);\n+                    }\n+                }\n+            }\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}