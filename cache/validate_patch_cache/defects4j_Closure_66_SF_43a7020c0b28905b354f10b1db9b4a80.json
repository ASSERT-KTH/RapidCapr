{
    "patch": "public static double getTypedPercent(final String jsonStr) throws JSONException {\n    final JSONObject obj = new JSONObject(jsonStr);\n    final JSONArray arr = obj.getJSONArray(\"list\");\n    int count = 0;\n    for (int i = 0; i < arr.length(); i++) {\n        final JSONObject item = arr.getJSONObject(i);\n        final String type = item.getString(\"type\");\n        if (type != null && type.equals(\"typed\")) {\n            count++;\n        }\n    }\n    return (double)count / arr.length() * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..83bc3075 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(final String jsonStr) throws JSONException {\n+    final JSONObject obj = new JSONObject(jsonStr);\n+    final JSONArray arr = obj.getJSONArray(\"list\");\n+    int count = 0;\n+    for (int i = 0; i < arr.length(); i++) {\n+        final JSONObject item = arr.getJSONObject(i);\n+        final String type = item.getString(\"type\");\n+        if (type != null && type.equals(\"typed\")) {\n+            count++;\n+        }\n+    }\n+    return (double)count / arr.length() * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}