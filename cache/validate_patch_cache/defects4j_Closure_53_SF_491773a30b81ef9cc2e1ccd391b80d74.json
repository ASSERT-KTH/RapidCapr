{
    "patch": "    private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap) {\n      // Compute all of the assignments necessary\n      List<Node> nodes = Lists.newArrayList();\n      Node val = ref.getAssignedValue();\n      blacklistVarReferencesInTree(val, v.scope);\n      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n      for (Node key = val.getFirstChild(); key != null;\n           key = key.getNext()) {\n        String var = key.getString();\n        Node value = key.removeFirstChild();\n        // TODO(user): Copy type information.\n        nodes.add(new Node(Token.ASSIGN,\n                            Node.newString(Token.NAME, varmap.get(var)), value));\n        all.remove(var);\n      }\n\n      // TODO(user): Better source information.\n      for (String var : all) {\n        nodes.add(new Node(Token.ASSIGN, Node.newString(Token.NAME, varmap.get(var)),\n                            NodeUtil.newUndefinedNode(null)));\n      }\n\n      Node replacement;\n      if (nodes.isEmpty()) {\n        replacement = NodeUtil.newUndefinedNode(null);\n      } else if (nodes.size() == 1) {\n        replacement = nodes.get(0);\n      } else {\n        // Join these using COMMA.  A COMMA node must have 2 children, so we\n        // create a tree. In the tree the first child be the COMMA to match\n        // the parser, otherwise tree equality tests fail.\n        //\n        // Create the right-associative tree with a cascade of comma expressions\n        // (a, b, c) --> (a, (b, c)) --> ((a, b), c) being careful to have each comma\n        // with two elided children except the head of the cascade.\n        Node root = new Node(Token.COMMA);\n        root.addChildToFront(nodes.remove(nodes.size() - 1));\n        while (!nodes.isEmpty()) {\n          Node child = nodes.remove(nodes.size() - 1);\n          Node newRoot = new Node(Token.COMMA, NodeUtil.newUndefinedNode(null), child);\n          newRoot.setLength(2);\n          newRoot.setLineno(root.getLineno());\n          newRoot.setCharno(root.getCharno());\n          root.replaceChild(root.getFirstChild(), newRoot);\n          root = newRoot;\n        }\n        replacement = root;\n      }\n\n      Node replace = ref.getParent();\n      replacement.copyInformationFromForTree(replace);\n\n      if (replace.getType() == Token.VAR) {\n        replace.getParent().replaceChild(\n            replace, NodeUtil.newExpr(replacement));\n      } else {\n        replace.getParent().replaceChild(replace, replacement);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9061925d..519ecb20 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -313,40 +313,43 @@ class InlineObjectLiterals implements CompilerPass {\n         String var = key.getString();\n         Node value = key.removeFirstChild();\n         // TODO(user): Copy type information.\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)), value));\n+        nodes.add(new Node(Token.ASSIGN,\n+                            Node.newString(Token.NAME, varmap.get(var)), value));\n         all.remove(var);\n       }\n \n       // TODO(user): Better source information.\n       for (String var : all) {\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)),\n-                   NodeUtil.newUndefinedNode(null)));\n+        nodes.add(new Node(Token.ASSIGN, Node.newString(Token.NAME, varmap.get(var)),\n+                            NodeUtil.newUndefinedNode(null)));\n       }\n \n       Node replacement;\n-        // All assignments evaluate to true, so make sure that the\n-        // expr statement evaluates to true in case it matters.\n-        nodes.add(new Node(Token.TRUE));\n-\n+      if (nodes.isEmpty()) {\n+        replacement = NodeUtil.newUndefinedNode(null);\n+      } else if (nodes.size() == 1) {\n+        replacement = nodes.get(0);\n+      } else {\n         // Join these using COMMA.  A COMMA node must have 2 children, so we\n         // create a tree. In the tree the first child be the COMMA to match\n         // the parser, otherwise tree equality tests fail.\n-        nodes = Lists.reverse(nodes);\n-        replacement = new Node(Token.COMMA);\n-        Node cur = replacement;\n-        int i;\n-        for (i = 0; i < nodes.size() - 2; i++) {\n-          cur.addChildToFront(nodes.get(i));\n-          Node t = new Node(Token.COMMA);\n-          cur.addChildToFront(t);\n-          cur = t;\n+        //\n+        // Create the right-associative tree with a cascade of comma expressions\n+        // (a, b, c) --> (a, (b, c)) --> ((a, b), c) being careful to have each comma\n+        // with two elided children except the head of the cascade.\n+        Node root = new Node(Token.COMMA);\n+        root.addChildToFront(nodes.remove(nodes.size() - 1));\n+        while (!nodes.isEmpty()) {\n+          Node child = nodes.remove(nodes.size() - 1);\n+          Node newRoot = new Node(Token.COMMA, NodeUtil.newUndefinedNode(null), child);\n+          newRoot.setLength(2);\n+          newRoot.setLineno(root.getLineno());\n+          newRoot.setCharno(root.getCharno());\n+          root.replaceChild(root.getFirstChild(), newRoot);\n+          root = newRoot;\n         }\n-        cur.addChildToFront(nodes.get(i));\n-        cur.addChildToFront(nodes.get(i + 1));\n+        replacement = root;\n+      }\n \n       Node replace = ref.getParent();\n       replacement.copyInformationFromForTree(replace);",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}