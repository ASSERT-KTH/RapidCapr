{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n\n  Node right = callTarget.getNext();\n  if (right != null && !NodeUtil.isImmutableValue(right)) {\n    return n; // join(...) only works on immutable values\n  }\n\n  Node arrayNode = callTarget.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return n; // this is not a call to [].join()\n  }\n\n  String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = new ArrayList<>();\n  StringBuilder sb = new StringBuilder();\n  int foldedSize = 0;\n  int numOfImmutables = 0;\n  List<Node> immutables = new ArrayList<>();\n  Node elem = arrayNode.getFirstChild();\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n      if (!sb.isEmpty()) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getArrayElementStringValue(elem));\n      numOfImmutables++;\n      immutables.add(elem);\n    } else { // mutable element\n      if (numOfImmutables > 0) { // there are already some immutables to join\n        Node strNode = Node.newString(sb.toString());\n        foldedSize += strNode.getLength();\n        arrayFoldedChildren.add(strNode);\n        for (Node immutable : immutables) {\n          arrayFoldedChildren.add(immutable.cloneTree());\n        }\n        sb.setLength(0);\n        numOfImmutables = 0;\n        immutables.clear();\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n    elem = elem.getNext();\n  }\n\n  if (numOfImmutables > 0) { // join remaining immutable string values\n    Node strNode = Node.newString(sb.toString());\n    foldedSize += strNode.getLength();\n    arrayFoldedChildren.add(strNode);\n    for (Node immutable : immutables) {\n      arrayFoldedChildren.add(immutable.cloneTree());\n    }\n  }\n\n  // replace original nodes with folded nodes if it helps us cut down JS size\n  if (arrayFoldedChildren.size() < arrayNode.getChildCount()) {\n    int kJoinOverhead = \"[].join()\".length();\n    foldedSize += kJoinOverhead;\n    foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (foldedSize < originalSize) {\n      int sizeBefore = n.getLength();\n      arrayNode.detachChildren();\n      Node joinedNode = NodeUtil.joinArrayOfNodes(arrayFoldedChildren, joinString)\n          .copyInformationFrom(callTarget);\n      n.getParent().replaceChild(n, joinedNode);\n      reportCodeChange();\n      if (sizeBefore != joinedNode.getLength()) {\n        n.getParent().getAstRoot().setChangeMark();\n      }\n      return joinedNode;\n    }\n  }\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..a71598b5 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,116 +364,89 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n-    Node callTarget = n.getFirstChild();\n+private Node tryFoldArrayJoin(Node n) {\n+  Node callTarget = n.getFirstChild();\n \n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n-    }\n+  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n+    return n;\n+  }\n \n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n-    }\n+  Node right = callTarget.getNext();\n+  if (right != null && !NodeUtil.isImmutableValue(right)) {\n+    return n; // join(...) only works on immutable values\n+  }\n \n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = callTarget.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n-    }\n+  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n+      !functionName.getString().equals(\"join\")) {\n+    return n; // this is not a call to [].join()\n+  }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+  String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n+  List<Node> arrayFoldedChildren = new ArrayList<>();\n+  StringBuilder sb = new StringBuilder();\n+  int foldedSize = 0;\n+  int numOfImmutables = 0;\n+  List<Node> immutables = new ArrayList<>();\n+  Node elem = arrayNode.getFirstChild();\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n+      if (!sb.isEmpty()) {\n+        sb.append(joinString);\n+      }\n+      sb.append(NodeUtil.getArrayElementStringValue(elem));\n+      numOfImmutables++;\n+      immutables.add(elem);\n+    } else { // mutable element\n+      if (numOfImmutables > 0) { // there are already some immutables to join\n+        Node strNode = Node.newString(sb.toString());\n+        foldedSize += strNode.getLength();\n+        arrayFoldedChildren.add(strNode);\n+        for (Node immutable : immutables) {\n+          arrayFoldedChildren.add(immutable.cloneTree());\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+        sb.setLength(0);\n+        numOfImmutables = 0;\n+        immutables.clear();\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n+      foldedSize += InlineCostEstimator.getCost(elem);\n+      arrayFoldedChildren.add(elem);\n     }\n+    elem = elem.getNext();\n+  }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+  if (numOfImmutables > 0) { // join remaining immutable string values\n+    Node strNode = Node.newString(sb.toString());\n+    foldedSize += strNode.getLength();\n+    arrayFoldedChildren.add(strNode);\n+    for (Node immutable : immutables) {\n+      arrayFoldedChildren.add(immutable.cloneTree());\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+  }\n \n+  // replace original nodes with folded nodes if it helps us cut down JS size\n+  if (arrayFoldedChildren.size() < arrayNode.getChildCount()) {\n+    int kJoinOverhead = \"[].join()\".length();\n+    foldedSize += kJoinOverhead;\n+    foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n     int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+    if (foldedSize < originalSize) {\n+      int sizeBefore = n.getLength();\n+      arrayNode.detachChildren();\n+      Node joinedNode = NodeUtil.joinArrayOfNodes(arrayFoldedChildren, joinString)\n+          .copyInformationFrom(callTarget);\n+      n.getParent().replaceChild(n, joinedNode);\n+      reportCodeChange();\n+      if (sizeBefore != joinedNode.getLength()) {\n+        n.getParent().getAstRoot().setChangeMark();\n+      }\n+      return joinedNode;\n     }\n-\n-    return n;\n   }\n+  return n;\n+}\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +615,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}