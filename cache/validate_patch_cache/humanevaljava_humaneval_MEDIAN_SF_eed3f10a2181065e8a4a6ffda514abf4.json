{
    "patch": "public static double median(int[] list) {\n    if (list == null || list.length == 0) {\n        throw new IllegalArgumentException(\"List cannot be null or empty\");\n    }\n\n    int n = list.length;\n    List<Integer> sortedList = Arrays.stream(list).boxed().sorted().collect(Collectors.toList());\n    int middleIndex = n / ",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/MEDIAN.java b/src/main/java/humaneval/buggy/MEDIAN.java\nindex 6ba9604..c3c86dc 100644\n--- a/src/main/java/humaneval/buggy/MEDIAN.java\n+++ b/src/main/java/humaneval/buggy/MEDIAN.java\n@@ -9,13 +9,12 @@ import java.util.Arrays;\n 15.0 */\n \n public class MEDIAN {\n-    public static double median(int[] list) {\n-        Arrays.sort(list);\n-\n-        if (list.length % 2 == 1) {\n-            return list[(int) (list.length / 2)];\n-        } else {\n-            return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n-        }\n+public static double median(int[] list) {\n+    if (list == null || list.length == 0) {\n+        throw new IllegalArgumentException(\"List cannot be null or empty\");\n     }\n+\n+    int n = list.length;\n+    List<Integer> sortedList = Arrays.stream(list).boxed().sorted().collect(Collectors.toList());\n+    int middleIndex = n / \n }",
    "result_reason": " /tmp/humaneval-MEDIAN/src/main/java/humaneval/buggy/MEDIAN.java:[20,1] illegal start of expression",
    "test_result": "ERROR"
}