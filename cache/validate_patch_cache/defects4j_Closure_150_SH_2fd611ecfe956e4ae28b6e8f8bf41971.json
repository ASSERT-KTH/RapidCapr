{
    "patch": "attachLiteralTypes(n);\nswitch (n.getType()) {\n    case Token.FUNCTION:\n        if (NodeUtil.isFunctionExpression(parent)) {\n            if (!NodeUtil.isStatement(parent.getParent())) {\n                defineVar(n.getFirstChild(), parent.getParent());\n            }\n        } else if (parent.getType() != Token.NAME) {\n            defineDeclaredFunction(n, parent);\n        }\n        break;\n    case Token.LP:\n        if (parent.getType() == Token.CALL || parent.getType() == Token.FUNCTION) {\n            if (!n.hasChildren()) {\n                // function without a name, in a call \"()\" or in a function \"function () {}()\"\n                handleFunctionInputs(parent);\n                return;\n            }\n        } else if (parent == scope.getRootNode()) {\n            if (!n.hasChildren()) {\n                // anonymous function as script\n                defineFunctionName(n, makeName(ANONYMOUS_FUN_PREFIX, getAnonFunctionId()));\n            }\n            handleFunctionInputs(parent);\n            return;\n        }\n        break;\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    case Token.VAR:\n    case Token.NAME:\n        defineVar(n, parent);\n        break;\n    default:\n        break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..41504e10 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,43 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+attachLiteralTypes(n);\n+switch (n.getType()) {\n+    case Token.FUNCTION:\n+        if (NodeUtil.isFunctionExpression(parent)) {\n+            if (!NodeUtil.isStatement(parent.getParent())) {\n+                defineVar(n.getFirstChild(), parent.getParent());\n+            }\n+        } else if (parent.getType() != Token.NAME) {\n+            defineDeclaredFunction(n, parent);\n+        }\n+        break;\n+    case Token.LP:\n+        if (parent.getType() == Token.CALL || parent.getType() == Token.FUNCTION) {\n+            if (!n.hasChildren()) {\n+                // function without a name, in a call \"()\" or in a function \"function () {}()\"\n+                handleFunctionInputs(parent);\n+                return;\n+            }\n+        } else if (parent == scope.getRootNode()) {\n+            if (!n.hasChildren()) {\n+                // anonymous function as script\n+                defineFunctionName(n, makeName(ANONYMOUS_FUN_PREFIX, getAnonFunctionId()));\n+            }\n+            handleFunctionInputs(parent);\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        break;\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    case Token.VAR:\n+    case Token.NAME:\n+        defineVar(n, parent);\n+        break;\n+    default:\n+        break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}