{
    "patch": "public static String trim(String s) {\n    if (s == null || s.isEmpty()) { // Checks if string is null or empty\n        return s;\n    } else {\n        char[] chars = s.toCharArray(); // Converts string to character array\n        int start = 0;\n        int end = chars.length - 1;\n\n        // Loops over string from both sides and removes leading/trailing spaces\n        while (start <= end && chars[start] <= ' ') {\n            start++;\n        }\n        while (end >= 0 && chars[end] <= ' ') {\n            end--;\n        }\n        return (start > end) ? \"\" : ((start == 0 && end == chars.length - 1) ? s : new String(chars, start, end - start + 1));\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..1e28ba899 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,24 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static String trim(String s) {\n+    if (s == null || s.isEmpty()) { // Checks if string is null or empty\n+        return s;\n+    } else {\n+        char[] chars = s.toCharArray(); // Converts string to character array\n+        int start = 0;\n+        int end = chars.length - 1;\n+\n+        // Loops over string from both sides and removes leading/trailing spaces\n+        while (start <= end && chars[start] <= ' ') {\n+            start++;\n+        }\n+        while (end >= 0 && chars[end] <= ' ') {\n+            end--;\n+        }\n+        return (start > end) ? \"\" : ((start == 0 && end == chars.length - 1) ? s : new String(chars, start, end - start + 1));\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}