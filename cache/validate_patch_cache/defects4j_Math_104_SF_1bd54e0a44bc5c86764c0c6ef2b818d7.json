{
    "patch": "/**\n * Returns the regularized gamma function P(a, x)\n *\n * @param a the first parameter of the gamma function, must be positive\n * @param x the second parameter of the gamma function, must be non-negative\n * @return the regularized gamma function P(a, x)\n * @throws IllegalArgumentException if either a is non-positive or x is negative\n */\npublic static double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid argument for Gamma function\");\n    }\n\n    final double epsilon = 1e-15;\n    double term = 1 / a;\n    double sum = term;\n    int i = 1;\n    while (Math.abs(term) > Math.abs(sum) * epsilon) {\n        term *= x / (a + i);\n        sum += term;\n        i++;\n        if (i > 1000) {\n            break;\n        }\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\n/**\n * Returns the natural logarithm of the gamma function\n *\n * @param x the parameter of the gamma function, must be positive\n * @return the natural logarithm of the gamma function\n * @throws IllegalArgumentException if x is non-positive\n */\npublic static double logGamma(double x) {\n    if (x <= 0) {\n        throw new IllegalArgumentException(\"Invalid argument for Gamma function\");\n    }\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double sum = 1.000000000190015\n            + 76.18009172947146 / (x + 1)\n            - 86.50532032941677 / (x + 2)\n            + 24.01409824083091 / (x + 3)\n            - 1.231739572450155 / (x + 4)\n            + 0.001208650973866179 / (x + 5)\n            - 0.000005395239384953 / (x + 6);\n    return tmp + Math.log(sum * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c590d9265 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,55 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+/**\n+ * Returns the regularized gamma function P(a, x)\n+ *\n+ * @param a the first parameter of the gamma function, must be positive\n+ * @param x the second parameter of the gamma function, must be non-negative\n+ * @return the regularized gamma function P(a, x)\n+ * @throws IllegalArgumentException if either a is non-positive or x is negative\n+ */\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid argument for Gamma function\");\n+    }\n+\n+    final double epsilon = 1e-15;\n+    double term = 1 / a;\n+    double sum = term;\n+    int i = 1;\n+    while (Math.abs(term) > Math.abs(sum) * epsilon) {\n+        term *= x / (a + i);\n+        sum += term;\n+        i++;\n+        if (i > 1000) {\n+            break;\n+        }\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+/**\n+ * Returns the natural logarithm of the gamma function\n+ *\n+ * @param x the parameter of the gamma function, must be positive\n+ * @return the natural logarithm of the gamma function\n+ * @throws IllegalArgumentException if x is non-positive\n+ */\n+public static double logGamma(double x) {\n+    if (x <= 0) {\n+        throw new IllegalArgumentException(\"Invalid argument for Gamma function\");\n+    }\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double sum = 1.000000000190015\n+            + 76.18009172947146 / (x + 1)\n+            - 86.50532032941677 / (x + 2)\n+            + 24.01409824083091 / (x + 3)\n+            - 1.231739572450155 / (x + 4)\n+            + 0.001208650973866179 / (x + 5)\n+            - 0.000005395239384953 / (x + 6);\n+    return tmp + Math.log(sum * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}