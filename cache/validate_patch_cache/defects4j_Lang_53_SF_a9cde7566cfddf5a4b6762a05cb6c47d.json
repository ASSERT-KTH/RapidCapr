{
    "patch": "    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n\n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // -------------- Fix for LANG-59 -------------- START --------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n            if (field == Calendar.SECOND) {\n                done = true;\n            }\n        }\n\n        // truncate seconds\n        int seconds = val.get(Calendar.SECOND);\n        if (!done && (!round || seconds < 30)) {\n            time = time - (seconds * 1000L);\n            if (field == Calendar.MINUTE) {\n                done = true;\n            }\n        }\n\n        // truncate minutes\n        int minutes = val.get(Calendar.MINUTE);\n        if (!done && (!round || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // -------------- Fix for LANG-59 -------------- END -----------------\n\n        boolean roundUp = false;\n        for (int[] fields : roundingRules) {\n            for (int i = 0; i < fields.length; i++) {\n                if (fields[i] == field) {\n                    if (round && roundUp) {\n                        // We need to remove this field\n                        val.add(field, 1);\n                    }\n                    return;\n                }\n                int offset = 0;\n                switch (fields[i]) {\n                // handle all the other fields.\n                case Calendar.AM_PM:\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset >= 6;\n                    break;\n                case Calendar.HOUR_OF_DAY:\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    roundUp = offset >= 12;\n                    break;\n                case Calendar.HOUR:\n                    offset = val.get(Calendar.HOUR);\n                    roundUp = offset >= 6;\n                    break;\n                case Calendar.DATE:\n                case Calendar.DAY_OF_MONTH:\n                case Calendar.APRIL:\n                case Calendar.JUNE:\n                case Calendar.SEPTEMBER:\n                case Calendar.NOVEMBER:\n                    offset = val.get(Calendar.DATE);\n                    roundUp = offset >= 16;\n                    break;\n                case Calendar.WEEK_OF_MONTH:\n                    offset = val.get(Calendar.WEEK_OF_MONTH);\n                    roundUp = offset >= 4;\n                    break;\n                case Calendar.DAY_OF_YEAR:\n                    offset = val.get(Calendar.DAY_OF_YEAR);\n                    roundUp = offset >= 183;\n                    break;\n                case Calendar.MONTH:\n                    offset = val.get(Calendar.MONTH);\n                    roundUp = offset >= Calendar.JUNE;\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n                }\n                if (offset != 0) {\n                    val.set(fields[i], val.get(fields[i]) - offset);\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex 0dd0dedc..997f6802 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -621,12 +621,12 @@ public class DateUtils {\n         if (val.get(Calendar.YEAR) > 280000000) {\n             throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n         }\n-        \n+\n         if (field == Calendar.MILLISECOND) {\n             return;\n         }\n \n-        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n+        // -------------- Fix for LANG-59 -------------- START --------------\n         // see http://issues.apache.org/jira/browse/LANG-59\n         //\n         // Manually truncate milliseconds, seconds and minutes, rather than using\n@@ -640,8 +640,8 @@ public class DateUtils {\n         int millisecs = val.get(Calendar.MILLISECOND);\n         if (!round || millisecs < 500) {\n             time = time - millisecs;\n-        if (field == Calendar.SECOND) {\n-            done = true;\n+            if (field == Calendar.SECOND) {\n+                done = true;\n             }\n         }\n \n@@ -649,8 +649,8 @@ public class DateUtils {\n         int seconds = val.get(Calendar.SECOND);\n         if (!done && (!round || seconds < 30)) {\n             time = time - (seconds * 1000L);\n-        if (field == Calendar.MINUTE) {\n-            done = true;\n+            if (field == Calendar.MINUTE) {\n+                done = true;\n             }\n         }\n \n@@ -665,82 +665,65 @@ public class DateUtils {\n             date.setTime(time);\n             val.setTime(date);\n         }\n-        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n+        // -------------- Fix for LANG-59 -------------- END -----------------\n \n         boolean roundUp = false;\n-        for (int i = 0; i < fields.length; i++) {\n-            for (int j = 0; j < fields[i].length; j++) {\n-                if (fields[i][j] == field) {\n-                    //This is our field... we stop looping\n+        for (int[] fields : roundingRules) {\n+            for (int i = 0; i < fields.length; i++) {\n+                if (fields[i] == field) {\n                     if (round && roundUp) {\n-                        if (field == DateUtils.SEMI_MONTH) {\n-                            //This is a special case that's hard to generalize\n-                            //If the date is 1, we round up to 16, otherwise\n-                            //  we subtract 15 days and add 1 month\n-                            if (val.get(Calendar.DATE) == 1) {\n-                                val.add(Calendar.DATE, 15);\n-                            } else {\n-                                val.add(Calendar.DATE, -15);\n-                                val.add(Calendar.MONTH, 1);\n-                            }\n-                        } else {\n-                            //We need at add one to this field since the\n-                            //  last number causes us to round up\n-                            val.add(fields[i][0], 1);\n-                        }\n+                        // We need to remove this field\n+                        val.add(field, 1);\n                     }\n                     return;\n                 }\n-            }\n-            //We have various fields that are not easy roundings\n-            int offset = 0;\n-            boolean offsetSet = false;\n-            //These are special types of fields that require different rounding rules\n-            switch (field) {\n-                case DateUtils.SEMI_MONTH:\n-                    if (fields[i][0] == Calendar.DATE) {\n-                        //If we're going to drop the DATE field's value,\n-                        //  we want to do this our own way.\n-                        //We need to subtrace 1 since the date has a minimum of 1\n-                        offset = val.get(Calendar.DATE) - 1;\n-                        //If we're above 15 days adjustment, that means we're in the\n-                        //  bottom half of the month and should stay accordingly.\n-                        if (offset >= 15) {\n-                            offset -= 15;\n-                        }\n-                        //Record whether we're in the top or bottom half of that range\n-                        roundUp = offset > 7;\n-                        offsetSet = true;\n-                    }\n-                    break;\n+                int offset = 0;\n+                switch (fields[i]) {\n+                // handle all the other fields.\n                 case Calendar.AM_PM:\n-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n-                        //If we're going to drop the HOUR field's value,\n-                        //  we want to do this our own way.\n-                        offset = val.get(Calendar.HOUR_OF_DAY);\n-                        if (offset >= 12) {\n-                            offset -= 12;\n-                        }\n-                        roundUp = offset > 6;\n-                        offsetSet = true;\n+                    offset = val.get(Calendar.HOUR_OF_DAY);\n+                    if (offset >= 12) {\n+                        offset -= 12;\n                     }\n+                    roundUp = offset >= 6;\n                     break;\n-            }\n-            if (!offsetSet) {\n-                int min = val.getActualMinimum(fields[i][0]);\n-                int max = val.getActualMaximum(fields[i][0]);\n-                //Calculate the offset from the minimum allowed value\n-                offset = val.get(fields[i][0]) - min;\n-                //Set roundUp if this is more than half way between the minimum and maximum\n-                roundUp = offset > ((max - min) / 2);\n-            }\n-            //We need to remove this field\n-            if (offset != 0) {\n-                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n+                case Calendar.HOUR_OF_DAY:\n+                    offset = val.get(Calendar.HOUR_OF_DAY);\n+                    roundUp = offset >= 12;\n+                    break;\n+                case Calendar.HOUR:\n+                    offset = val.get(Calendar.HOUR);\n+                    roundUp = offset >= 6;\n+                    break;\n+                case Calendar.DATE:\n+                case Calendar.DAY_OF_MONTH:\n+                case Calendar.APRIL:\n+                case Calendar.JUNE:\n+                case Calendar.SEPTEMBER:\n+                case Calendar.NOVEMBER:\n+                    offset = val.get(Calendar.DATE);\n+                    roundUp = offset >= 16;\n+                    break;\n+                case Calendar.WEEK_OF_MONTH:\n+                    offset = val.get(Calendar.WEEK_OF_MONTH);\n+                    roundUp = offset >= 4;\n+                    break;\n+                case Calendar.DAY_OF_YEAR:\n+                    offset = val.get(Calendar.DAY_OF_YEAR);\n+                    roundUp = offset >= 183;\n+                    break;\n+                case Calendar.MONTH:\n+                    offset = val.get(Calendar.MONTH);\n+                    roundUp = offset >= Calendar.JUNE;\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n+                }\n+                if (offset != 0) {\n+                    val.set(fields[i], val.get(fields[i]) - offset);\n+                }\n             }\n         }\n-        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n-\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: for-each loops are not supported in -source 1.3",
    "test_result": "ERROR"
}