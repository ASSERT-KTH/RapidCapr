{
    "patch": "public static String unEscape(String input) {\n  StringBuilder sb = new StringBuilder();\n  for (int i = 0; i < input.length(); i++) {\n    char c = input.charAt(i);\n    if (c == '\\\\') {\n      if (i + 1 < input.length()) {\n        i++;\n        char next = input.charAt(i);\n        switch (next) {\n          case 'n':\n            sb.append('\\n');\n            break;\n          case 't':\n            sb.append('\\t');\n            break;\n          case 'r':\n            sb.append('\\r');\n            break;\n          case 'f':\n            sb.append('\\f');\n            break;\n          case 'b':\n            sb.append('\\b');\n            break;\n          case '\\\\':\n            sb.append('\\\\');\n            break;\n          case '\\\"':\n            sb.append('\\\"');\n            break;\n          case '\\'':\n            sb.append('\\'');\n            break;\n          default:\n            sb.append(\"\\\\\").append(next);\n            break;\n        }\n      } else {\n        sb.append(c); // append the last character as it is\n      }\n    } else {\n      sb.append(c);\n    }\n  }\n  return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..2e3bec57 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,52 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unEscape(String input) {\n+  StringBuilder sb = new StringBuilder();\n+  for (int i = 0; i < input.length(); i++) {\n+    char c = input.charAt(i);\n+    if (c == '\\\\') {\n+      if (i + 1 < input.length()) {\n+        i++;\n+        char next = input.charAt(i);\n+        switch (next) {\n+          case 'n':\n+            sb.append('\\n');\n+            break;\n+          case 't':\n+            sb.append('\\t');\n+            break;\n+          case 'r':\n+            sb.append('\\r');\n+            break;\n+          case 'f':\n+            sb.append('\\f');\n+            break;\n+          case 'b':\n+            sb.append('\\b');\n+            break;\n+          case '\\\\':\n+            sb.append('\\\\');\n+            break;\n+          case '\\\"':\n+            sb.append('\\\"');\n+            break;\n+          case '\\'':\n+            sb.append('\\'');\n+            break;\n+          default:\n+            sb.append(\"\\\\\").append(next);\n+            break;\n+        }\n+      } else {\n+        sb.append(c); // append the last character as it is\n+      }\n+    } else {\n+      sb.append(c);\n+    }\n+  }\n+  return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}