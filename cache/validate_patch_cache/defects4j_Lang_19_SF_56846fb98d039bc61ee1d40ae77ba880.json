{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n\n    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n\n        int start = index + 2;\n        boolean isHex = false;\n        if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        int end = start;\n        while (end < seqEnd && input.charAt(end) != ';') {\n            boolean isDigit = input.charAt(end) >= '0' && input.charAt(end) <= '9';\n            boolean isHexDigit = input.charAt(end) >= 'a' && input.charAt(end) <= 'f'\n                    || input.charAt(end) >= 'A' && input.charAt(end) <= 'F';\n            if (isHexDigit || isDigit) {\n                end++;\n            } else {\n                return 0;\n            }\n        }\n\n        if (end >= seqEnd) {\n            return 0;\n        }\n\n        int entityValue = 0;\n        try {\n            if (isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        if (isInvalidCodePoint(entityValue)) {\n            return 0;\n        }\n\n        if (Character.isSupplementaryCodePoint(entityValue)) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs);\n        } else {\n            out.write(entityValue);\n        }\n\n        return end - index + 1;\n    }\n    return 0;\n}\n\nprivate static boolean isInvalidCodePoint(int codePoint) {\n    return codePoint == 0 || codePoint == 0xFFFE || codePoint == 0xFFFF\n            || (codePoint >= 0xD800 && codePoint <= 0xDFFF)\n            || codePoint > 0x10FFFF;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..629ae8c8 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,64 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n+    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n \n-                // Check there's more than just an x after the &#\n-            }\n+        int start = index + 2;\n+        boolean isHex = false;\n+        if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n+            start++;\n+            isHex = true;\n+        }\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n+        int end = start;\n+        while (end < seqEnd && input.charAt(end) != ';') {\n+            boolean isDigit = input.charAt(end) >= '0' && input.charAt(end) <= '9';\n+            boolean isHexDigit = input.charAt(end) >= 'a' && input.charAt(end) <= 'f'\n+                    || input.charAt(end) >= 'A' && input.charAt(end) <= 'F';\n+            if (isHexDigit || isDigit) {\n                 end++;\n-            }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+            } else {\n                 return 0;\n             }\n+        }\n+\n+        if (end >= seqEnd) {\n+            return 0;\n+        }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+        int entityValue = 0;\n+        try {\n+            if (isHex) {\n+                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n             } else {\n-                out.write(entityValue);\n+                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n             }\n+        } catch (NumberFormatException nfe) {\n+            return 0;\n+        }\n \n+        if (isInvalidCodePoint(entityValue)) {\n+            return 0;\n+        }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        if (Character.isSupplementaryCodePoint(entityValue)) {\n+            char[] chrs = Character.toChars(entityValue);\n+            out.write(chrs);\n+        } else {\n+            out.write(entityValue);\n         }\n-        return 0;\n+\n+        return end - index + 1;\n     }\n+    return 0;\n+}\n+\n+private static boolean isInvalidCodePoint(int codePoint) {\n+    return codePoint == 0 || codePoint == 0xFFFE || codePoint == 0xFFFF\n+            || (codePoint >= 0xD800 && codePoint <= 0xDFFF)\n+            || codePoint > 0x10FFFF;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape index 0 expected:<[]\u0001> but was:<[&#x0;]\u0001>",
    "test_result": "FAIL"
}