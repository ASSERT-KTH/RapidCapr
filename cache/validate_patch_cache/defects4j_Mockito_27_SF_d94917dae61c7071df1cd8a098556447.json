{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    if (mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        try {\n            factory.getCallback(0);\n            factory.setCallback(0, newFilter);\n        } catch (IllegalArgumentException e) {\n            factory.setCallback(new Callback[] { newFilter });\n        }\n    } else {\n        ((MockAccess) mock).getMockitoInterceptor().setHandler(newFilter.mockitoHandler);\n    }\n    MockUtil.removeMockFromThreadLocal(mock);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..f7351d1b6 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,24 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    if (mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        try {\n+            factory.getCallback(0);\n+            factory.setCallback(0, newFilter);\n+        } catch (IllegalArgumentException e) {\n+            factory.setCallback(new Callback[] { newFilter });\n+        }\n+    } else {\n+        ((MockAccess) mock).getMockitoInterceptor().setHandler(newFilter.mockitoHandler);\n+    }\n+    MockUtil.removeMockFromThreadLocal(mock);\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: method setCallback in interface Factory cannot be applied to given types;",
    "test_result": "ERROR"
}