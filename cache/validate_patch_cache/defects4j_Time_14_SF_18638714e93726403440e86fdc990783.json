{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    int[] newValues = Arrays.copyOf(values, values.length);\n    int maxIndex = newValues.length - 1;\n    int index = fieldIndex;\n\n    while (valueToAdd != 0) {\n        int currentValue = newValues[index];\n        int newValue = DateTimeUtils.safeAdd(currentValue, valueToAdd);\n\n        if (index == 0) { // year\n            int monthValue = newValues.length > 1 ? newValues[1] : 1;\n            int maxDay = iChronology.dayOfMonth().getMaximumValue(newValue, monthValue);\n\n            if (newValues.length > 2) { // day\n                int dayValue = newValues[2];\n                newValues[2] = Math.min(dayValue, maxDay);\n            }\n\n            newValue = iChronology.year().set(newValue, currentValue);\n            newValues[0] = newValue;\n        } else if (index == 1) { // month\n            if (newValues.length > 2) { // day\n                int dayValue = newValues[2];\n                int maxDay = iChronology.dayOfMonth().getMaximumValue(newValues[0], newValue);\n                newValues[2] = Math.min(dayValue, maxDay);\n            }\n\n            newValues[1] = newValue;\n        } else if (index == 2) { // day\n            int maxDay = iChronology.dayOfMonth().getMaximumValue(newValues[0], newValues[1]);\n            newValues[2] = Math.min(newValue, maxDay);\n        } else {\n            throw new IllegalStateException(\"Invalid index: \" + index);\n        }\n\n        valueToAdd = DateTimeUtils.safeSubtract(newValue, currentValue);\n        index = index < maxIndex ? index + 1 : 0;\n    }\n\n    return newValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..15ae3c40 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,54 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    int[] newValues = Arrays.copyOf(values, values.length);\n+    int maxIndex = newValues.length - 1;\n+    int index = fieldIndex;\n+\n+    while (valueToAdd != 0) {\n+        int currentValue = newValues[index];\n+        int newValue = DateTimeUtils.safeAdd(currentValue, valueToAdd);\n+\n+        if (index == 0) { // year\n+            int monthValue = newValues.length > 1 ? newValues[1] : 1;\n+            int maxDay = iChronology.dayOfMonth().getMaximumValue(newValue, monthValue);\n+\n+            if (newValues.length > 2) { // day\n+                int dayValue = newValues[2];\n+                newValues[2] = Math.min(dayValue, maxDay);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+\n+            newValue = iChronology.year().set(newValue, currentValue);\n+            newValues[0] = newValue;\n+        } else if (index == 1) { // month\n+            if (newValues.length > 2) { // day\n+                int dayValue = newValues[2];\n+                int maxDay = iChronology.dayOfMonth().getMaximumValue(newValues[0], newValue);\n+                newValues[2] = Math.min(dayValue, maxDay);\n+            }\n+\n+            newValues[1] = newValue;\n+        } else if (index == 2) { // day\n+            int maxDay = iChronology.dayOfMonth().getMaximumValue(newValues[0], newValues[1]);\n+            newValues[2] = Math.min(newValue, maxDay);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            throw new IllegalStateException(\"Invalid index: \" + index);\n         }\n+\n+        valueToAdd = DateTimeUtils.safeSubtract(newValue, currentValue);\n+        index = index < maxIndex ? index + 1 : 0;\n     }\n \n+    return newValues;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}