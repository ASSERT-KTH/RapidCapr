{
    "patch": "public double density(final double[] vals) throws DimensionMismatchException {\n  final int dim = getDimension();\n  if (vals.length != dim) {\n    throw new DimensionMismatchException(vals.length, dim);\n  }\n\n  return 1 / (FastMath.pow(2 * FastMath.PI, dim / 2.0) * FastMath.sqrt(Math.abs(covarianceMatrixDeterminant))) *\n    FastMath.exp(-0.5 * new ArrayRealVector(getMean()).subtract(new ArrayRealVector(vals)).dotProduct(new LUDecomposition(getCovarianceMatrix()).getSolver().getInverse().operate(new ArrayRealVector(getMean()).subtract(new ArrayRealVector(vals)))));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..aacabac34 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -174,16 +174,15 @@ public class MultivariateNormalDistribution\n     }\n \n     /** {@inheritDoc} */\n-    public double density(final double[] vals) throws DimensionMismatchException {\n-        final int dim = getDimension();\n-        if (vals.length != dim) {\n-            throw new DimensionMismatchException(vals.length, dim);\n-        }\n-\n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n-    }\n+public double density(final double[] vals) throws DimensionMismatchException {\n+  final int dim = getDimension();\n+  if (vals.length != dim) {\n+    throw new DimensionMismatchException(vals.length, dim);\n+  }\n+\n+  return 1 / (FastMath.pow(2 * FastMath.PI, dim / 2.0) * FastMath.sqrt(Math.abs(covarianceMatrixDeterminant))) *\n+    FastMath.exp(-0.5 * new ArrayRealVector(getMean()).subtract(new ArrayRealVector(vals)).dotProduct(new LUDecomposition(getCovarianceMatrix()).getSolver().getInverse().operate(new ArrayRealVector(getMean()).subtract(new ArrayRealVector(vals)))));\n+}\n \n     /**\n      * Gets the square root of each element on the diagonal of the covariance",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}