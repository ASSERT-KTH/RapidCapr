{
    "patch": "public double getTypedPercent(JSONObject json) {\n    try {\n        double correctlyTyped = json.getDouble(\"correctlyTyped\");\n        double totalTyped = json.getDouble(\"totalTyped\");\n        double percent = (correctlyTyped/totalTyped) * 100;\n        return round(percent, 1);\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n    return -1;\n}\n\npublic static double round(double value, int places) {\n    if (places < 0) throw new IllegalArgumentException();\n    BigDecimal bd = BigDecimal.valueOf(value);\n    bd = bd.setScale(places, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..40418817 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(JSONObject json) {\n+    try {\n+        double correctlyTyped = json.getDouble(\"correctlyTyped\");\n+        double totalTyped = json.getDouble(\"totalTyped\");\n+        double percent = (correctlyTyped/totalTyped) * 100;\n+        return round(percent, 1);\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+    return -1;\n+}\n+\n+public static double round(double value, int places) {\n+    if (places < 0) throw new IllegalArgumentException();\n+    BigDecimal bd = BigDecimal.valueOf(value);\n+    bd = bd.setScale(places, RoundingMode.HALF_UP);\n+    return bd.doubleValue();\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}