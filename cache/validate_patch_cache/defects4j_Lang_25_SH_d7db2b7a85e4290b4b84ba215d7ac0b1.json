{
    "patch": "public static String unescape(String input) {\n    if (input == null) {\n        return null;\n    }\n    int len = input.length();\n    StringBuffer output = new StringBuffer(len);\n    boolean hadSlash = false;\n    for (int i = 0; i < len; i++) {\n        char ch = input.charAt(i);\n        if (hadSlash) {\n            hadSlash = false;\n            switch (ch) {\n                case '\\\\':\n                    output.append('\\\\');\n                    break;\n                case '\\'':\n                    output.append('\\'');\n                    break;\n                case '\\\"':\n                    output.append('\"');\n                    break;\n                case 'r':\n                    output.append('\\r');\n                    break;\n                case 'f':\n                    output.append('\\f');\n                    break;\n                case 't':\n                    output.append('\\t');\n                    break;\n                case 'n':\n                    output.append('\\n');\n                    break;\n                case 'b':\n                    output.append('\\b');\n                    break;\n                case 'u':\n                    if (i + 4 >= len) {\n                        output.append(\"\\\\u\");\n                    } else {\n                        char uni = input.charAt(i + 1);\n                        if (uni == 'u') {\n                            output.append(\"\\\\u\");\n                        } else {\n                            try {\n                                output.append((char) Integer.parseInt(input.substring(i + 1, i + 5), 16));\n                            } catch (NumberFormatException nfe) {\n                                // do something\n                            }\n                            i += 4;\n                        }\n                    }\n                    break;\n                default:\n                    output.append(ch);\n                    break;\n            }\n        } else if (ch == '\\\\') {\n            hadSlash = true;\n        } else {\n            output.append(ch);\n        }\n    }\n    if (hadSlash) {\n        output.append('\\\\');\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}