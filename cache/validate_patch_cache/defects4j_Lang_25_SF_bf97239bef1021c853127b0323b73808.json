{
    "patch": "public static String unescapeURL(String s, String enc) {\n    if (s == null)\n        return null;\n\n    int i = 0;\n    int j = s.indexOf('%');\n    if (j == -1)\n        return s;\n\n    StringBuffer sb = new StringBuffer();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    do {\n        try {\n            // convert hex to byte\n            baos.write(Character.digit(s.charAt(j + 1), 16) << 4 |\n                       Character.digit(s.charAt(j + 2), 16));\n        } catch (Exception e) {\n            throw new RuntimeException(\"invalid URL encoding: \" + s, e);\n        }\n        if (j > i) {\n            // copy characters up to the % sign\n            try {\n                sb.append(URLDecoder.decode(s.substring(i, j), enc));\n            } catch (Exception e) {\n                throw new RuntimeException(\"invalid URL encoding: \" + s, e);\n            }\n        }\n        i = j + 3;\n        j = s.indexOf('%', i);\n    } while (j >= 0);\n\n    if (i < s.length()) {\n        try {\n            sb.append(URLDecoder.decode(s.substring(i), enc));\n        } catch (Exception e) {\n            throw new RuntimeException(\"invalid URL encoding: \" + s, e);\n        }\n    }\n\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..1be5a589 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,47 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeURL(String s, String enc) {\n+    if (s == null)\n+        return null;\n+\n+    int i = 0;\n+    int j = s.indexOf('%');\n+    if (j == -1)\n+        return s;\n+\n+    StringBuffer sb = new StringBuffer();\n+    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    do {\n+        try {\n+            // convert hex to byte\n+            baos.write(Character.digit(s.charAt(j + 1), 16) << 4 |\n+                       Character.digit(s.charAt(j + 2), 16));\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"invalid URL encoding: \" + s, e);\n+        }\n+        if (j > i) {\n+            // copy characters up to the % sign\n+            try {\n+                sb.append(URLDecoder.decode(s.substring(i, j), enc));\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"invalid URL encoding: \" + s, e);\n+            }\n+        }\n+        i = j + 3;\n+        j = s.indexOf('%', i);\n+    } while (j >= 0);\n+\n+    if (i < s.length()) {\n+        try {\n+            sb.append(URLDecoder.decode(s.substring(i), enc));\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"invalid URL encoding: \" + s, e);\n+        }\n+    }\n+\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}