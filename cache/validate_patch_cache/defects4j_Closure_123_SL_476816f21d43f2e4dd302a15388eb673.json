{
    "patch": "        if (rhsNode instanceof ArrayAccessExpr) {\n            ArrayAccessExpr arrayAccessExpr = (ArrayAccessExpr) rhsNode;\n            Object rhs = new Object() {\n                int rhsArrayIndex = -1;\n                String rhsName = null;\n\n                {\n                    arrayAccessExpr.getIndex().accept(this);\n                    rhsName = arrayAccessExpr.getName().toString();\n                }\n\n                public void visit(IntegerLiteralExpr n, Object arg) {\n                    rhsArrayIndex = n.asInt();\n                }\n            };\n            String infixExpr = String.format(\"%s[%d] %s %s\", rhs.rhsName, rhs.rhsArrayIndex, operatorSymbol, lhsName);\n            node.replace(infixExpr);\n        } else {\n            String infixExpr = String.format(\"%s %s %s\", rhsNode.toString(), operatorSymbol, lhsName);\n            node.replace(infixExpr);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}