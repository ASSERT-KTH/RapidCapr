{
    "patch": "import org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\npublic class JSONUtils {\n\n    public static double getTypedPercent(JSONArray arr) throws JSONException {\n        int total = arr.length();\n        int count = 0;\n        for (int i = 0; i < total; i++) {\n            JSONObject obj = arr.getJSONObject(i);\n            if (obj.getString(\"type\").equals(\"typed\")) {\n                count++;\n            }\n        }\n        double percentage = (double)count / total * 100;\n        return Math.round(percentage * 10) / 10.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..f3856613 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class JSONUtils {\n+\n+    public static double getTypedPercent(JSONArray arr) throws JSONException {\n+        int total = arr.length();\n+        int count = 0;\n+        for (int i = 0; i < total; i++) {\n+            JSONObject obj = arr.getJSONObject(i);\n+            if (obj.getString(\"type\").equals(\"typed\")) {\n+                count++;\n+            }\n+        }\n+        double percentage = (double)count / total * 100;\n+        return Math.round(percentage * 10) / 10.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}