{
    "patch": "      attachLiteralTypes(n);\n      if (n.getType() == Token.FUNCTION || n.getType() == Token.CATCH || n.getType() == Token.VAR) {\n        switch (n.getType()) {\n          case Token.FUNCTION:\n            if (parent.getType() == Token.NAME) {\n              return;\n            }\n            defineDeclaredFunction(n, parent);\n            break;\n          case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n          case Token.VAR:\n            defineVar(n, parent);\n            break;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..2ac27a6d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1449,19 +1449,21 @@ final class TypedScopeCreator implements ScopeCreator {\n       }\n \n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+      if (n.getType() == Token.FUNCTION || n.getType() == Token.CATCH || n.getType() == Token.VAR) {\n+        switch (n.getType()) {\n+          case Token.FUNCTION:\n+            if (parent.getType() == Token.NAME) {\n+              return;\n+            }\n+            defineDeclaredFunction(n, parent);\n+            break;\n+          case Token.CATCH:\n+            defineCatch(n, parent);\n+            break;\n+          case Token.VAR:\n+            defineVar(n, parent);\n+            break;\n+        }\n       }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}