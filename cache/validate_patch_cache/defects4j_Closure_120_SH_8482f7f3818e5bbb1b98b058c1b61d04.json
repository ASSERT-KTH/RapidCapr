{
    "patch": "        for (BasicBlock block = ref.getBasicBlock();\n             block != null; block = block.getParent()) {\n          if (block.isFunction) {\n            break;\n          } else if (block.isLoop) {\n            for (Reference writeRef : referenceCollectors.getWriteRefs(block)) {\n              if (!writeRef.isDeclaration() && !writeRef.equals(ref)) {\n                return false;\n              }\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..10d9a4d2 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        for (BasicBlock block = ref.getBasicBlock();\n+             block != null; block = block.getParent()) {\n+          if (block.isFunction) {\n+            break;\n+          } else if (block.isLoop) {\n+            for (Reference writeRef : referenceCollectors.getWriteRefs(block)) {\n+              if (!writeRef.isDeclaration() && !writeRef.equals(ref)) {\n+                return false;\n+              }\n+            }\n+          }\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}