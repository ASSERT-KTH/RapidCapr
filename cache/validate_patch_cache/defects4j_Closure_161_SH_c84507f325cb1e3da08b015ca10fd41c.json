{
    "patch": "if (left.getType() == Token.ARRAYLIT && left.getFirstChild() == null) {\n  if (parent.getType() == Token.ASSIGN) {\n    return n;\n  } else {\n    Node undefined = NodeUtil.newUndefinedNode(n);\n    parent.replaceChild(n, undefined);\n    reportCodeChange();\n    return undefined;\n  }\n} else if (left.getType() == Token.ARRAYLIT && right.getType() == Token.NUMBER) {\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n\n  if (intIndex < 0 || intIndex >= left.getChildCount()) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  Node elem = left.getChildAtIndex(intIndex);\n  if (elem.getType() == Token.EMPTY) {\n    elem = NodeUtil.newUndefinedNode(elem);\n  } else {\n    left.removeChildAt(intIndex);\n  }\n\n  // Replace the entire GETELEM with the value\n  parent.replaceChild(n, elem);\n  reportCodeChange();\n  return elem;\n} else if (left.getType() == Token.ARRAYLIT) {\n  // Non-constant index into array literal\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..402b5232 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,43 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+if (left.getType() == Token.ARRAYLIT && left.getFirstChild() == null) {\n+  if (parent.getType() == Token.ASSIGN) {\n+    return n;\n+  } else {\n+    Node undefined = NodeUtil.newUndefinedNode(n);\n+    parent.replaceChild(n, undefined);\n+    reportCodeChange();\n+    return undefined;\n+  }\n+} else if (left.getType() == Token.ARRAYLIT && right.getType() == Token.NUMBER) {\n+  double index = right.getDouble();\n+  int intIndex = (int) index;\n+  if (intIndex != index) {\n+    error(INVALID_GETELEM_INDEX_ERROR, right);\n+    return n;\n+  }\n+\n+  if (intIndex < 0 || intIndex >= left.getChildCount()) {\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n+\n+  Node elem = left.getChildAtIndex(intIndex);\n+  if (elem.getType() == Token.EMPTY) {\n+    elem = NodeUtil.newUndefinedNode(elem);\n+  } else {\n+    left.removeChildAt(intIndex);\n+  }\n+\n+  // Replace the entire GETELEM with the value\n+  parent.replaceChild(n, elem);\n+  reportCodeChange();\n+  return elem;\n+} else if (left.getType() == Token.ARRAYLIT) {\n+  // Non-constant index into array literal\n+  return n;\n+}\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}