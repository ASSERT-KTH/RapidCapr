{
    "patch": "public String fixCode(String code) {\n    if (code.contains(\"for\")) {\n        code = code.replaceAll(\"for\\\\s*\\\\([^;]*;[^;]*;[^\\\\)]*\\\\)\", match -> {\n            String matchStr = match.group();\n            // Replace \"in\" operator with \"!=\" operator\n            matchStr = matchStr.replaceAll(\"\\\\b(\\\\w+)\\\\s+in\\\\s+(\\\\w+)\\\\b\", \"$2.indexOf($1) != -1\");\n            return matchStr;\n        });\n    }\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..d45e6c9d 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,17 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    if (code.contains(\"for\")) {\n+        code = code.replaceAll(\"for\\\\s*\\\\([^;]*;[^;]*;[^\\\\)]*\\\\)\", match -> {\n+            String matchStr = match.group();\n+            // Replace \"in\" operator with \"!=\" operator\n+            matchStr = matchStr.replaceAll(\"\\\\b(\\\\w+)\\\\s+in\\\\s+(\\\\w+)\\\\b\", \"$2.indexOf($1) != -1\");\n+            return matchStr;\n+        });\n+    }\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}