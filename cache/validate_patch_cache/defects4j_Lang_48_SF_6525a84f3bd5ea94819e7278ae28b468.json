{
    "patch": "public class EqualsBuilder {\n    private boolean isEquals = true;\n\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n\n        Class lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            // If the objects are BigDecimal, compare them using compareTo method\n            if (lhs instanceof BigDecimal && rhs instanceof BigDecimal) {\n                isEquals = ((BigDecimal) lhs).compareTo((BigDecimal) rhs) == 0;\n            } else {\n                // The simple case, not an array, just test the element\n                isEquals = lhs.equals(rhs);\n            }\n        } else if (lhsClass != rhs.getClass()) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n            this.setEquals(false);\n        } else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Not an array of primitives. If the type is not an array of primitives, revert to using\n            // reflection to determine the value of each element of the array\n            Object[] lhsArray = (Object[]) lhs;\n            Object[] rhsArray = (Object[]) rhs;\n            if (lhsArray.length != rhsArray.length) {\n                this.setEquals(false);\n                return this;\n            }\n            for (int i = 0; i < lhsArray.length && isEquals; ++i) {\n                append(lhsArray[i], rhsArray[i]);\n            }\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(long lhs, long rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(int lhs, int rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(short lhs, short rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(char lhs, char rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(byte lhs, byte rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(double lhs, double rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Double.doubleToLongBits(lhs) == Double.doubleToLongBits(rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(float lhs, float rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Float.floatToIntBits(lhs) == Float.floatToIntBits(rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(boolean lhs, boolean rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(long[] lhs, long[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(int[] lhs, int[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(short[] lhs, short[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(char[] lhs, char[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(byte[] lhs, byte[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(double[] lhs, double[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(float[] lhs, float[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(boolean[] lhs, boolean[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length && isEquals; ++i) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }\n\n    public boolean isEquals() {\n        return isEquals;\n    }\n\n    protected void setEquals(boolean isEquals) {\n        this.isEquals = isEquals;\n    }\n\n    public boolean build() {\n        return isEquals();\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..95191c06 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,6 +364,9 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+public class EqualsBuilder {\n+    private boolean isEquals = true;\n+\n     public EqualsBuilder append(Object lhs, Object rhs) {\n         if (isEquals == false) {\n             return this;\n@@ -375,17 +378,20 @@ public class EqualsBuilder {\n             this.setEquals(false);\n             return this;\n         }\n+\n         Class lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n+            // If the objects are BigDecimal, compare them using compareTo method\n+            if (lhs instanceof BigDecimal && rhs instanceof BigDecimal) {\n+                isEquals = ((BigDecimal) lhs).compareTo((BigDecimal) rhs) == 0;\n+            } else {\n                 // The simple case, not an array, just test the element\n                 isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+            }\n+        } else if (lhsClass != rhs.getClass()) {\n+            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n             this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n+        } else if (lhs instanceof long[]) {\n             append((long[]) lhs, (long[]) rhs);\n         } else if (lhs instanceof int[]) {\n             append((int[]) lhs, (int[]) rhs);\n@@ -402,12 +408,266 @@ public class EqualsBuilder {\n         } else if (lhs instanceof boolean[]) {\n             append((boolean[]) lhs, (boolean[]) rhs);\n         } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            // Not an array of primitives. If the type is not an array of primitives, revert to using\n+            // reflection to determine the value of each element of the array\n+            Object[] lhsArray = (Object[]) lhs;\n+            Object[] rhsArray = (Object[]) rhs;\n+            if (lhsArray.length != rhsArray.length) {\n+                this.setEquals(false);\n+                return this;\n+            }\n+            for (int i = 0; i < lhsArray.length && isEquals; ++i) {\n+                append(lhsArray[i], rhsArray[i]);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(long lhs, long rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(int lhs, int rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(short lhs, short rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(char lhs, char rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(byte lhs, byte rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(double lhs, double rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Double.doubleToLongBits(lhs) == Double.doubleToLongBits(rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(float lhs, float rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Float.floatToIntBits(lhs) == Float.floatToIntBits(rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(boolean lhs, boolean rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(long[] lhs, long[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals; ++i) {\n+            append(lhs[i], rhs[i]);\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(int[] lhs, int[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals; ++i) {\n+            append(lhs[i], rhs[i]);\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(short[] lhs, short[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals; ++i) {\n+            append(lhs[i], rhs[i]);\n         }\n         return this;\n     }\n \n+    public EqualsBuilder append(char[] lhs, char[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals; ++i) {\n+            append(lhs[i], rhs[i]);\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(byte[] lhs, byte[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals; ++i) {\n+            append(lhs[i], rhs[i]);\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(double[] lhs, double[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals; ++i) {\n+            append(lhs[i], rhs[i]);\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(float[] lhs, float[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals; ++i) {\n+            append(lhs[i], rhs[i]);\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(boolean[] lhs, boolean[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals; ++i) {\n+            append(lhs[i], rhs[i]);\n+        }\n+        return this;\n+    }\n+\n+    public boolean isEquals() {\n+        return isEquals;\n+    }\n+\n+    protected void setEquals(boolean isEquals) {\n+        this.isEquals = isEquals;\n+    }\n+\n+    public boolean build() {\n+        return isEquals();\n+    }\n+}\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: class EqualsBuilder is already defined in package org.apache.commons.lang.builder",
    "test_result": "ERROR"
}