{
    "patch": "Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\nif (actualTypeArg != null) {\n    if (actualTypeArg instanceof Class) {\n        registerTypeVariablesOn(actualTypeArg);\n    } else {\n        for (Type bound : ((WildcardType) actualTypeArg).getUpperBounds()) {\n            if (bound instanceof Class) {\n                registerTypeVariablesOn(bound);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..a44f871e9 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,23 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n+if (actualTypeArg != null) {\n+    if (actualTypeArg instanceof Class) {\n+        registerTypeVariablesOn(actualTypeArg);\n+    } else {\n+        for (Type bound : ((WildcardType) actualTypeArg).getUpperBounds()) {\n+            if (bound instanceof Class) {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "java.lang.ClassCastException: org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVarBoundedType cannot be cast to java.lang.reflect.WildcardType",
    "test_result": "FAIL"
}