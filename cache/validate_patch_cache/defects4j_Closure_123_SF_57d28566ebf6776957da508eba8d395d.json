{
    "patch": "public static String fixCode(String codeWithBug) {\n    String pattern = \"for\\\\s*\\\\(((.*)\\\\)|(.*)\\\\)\\\\s*\\\\{[\\\\n\\\\s]*([\\\\w\\\\W]*?)[\\\\n\\\\s]*\\\\}\";\n    String replacement = \"for ($1$3) { $4 }\";\n    String fixedCode = codeWithBug.replaceAll(pattern, replacement);\n  \n    String[] lines = fixedCode.split(\"\\\\r?\\\\n\");\n    for (int i = 0; i < lines.length; i++) {\n        if (lines[i].trim().startsWith(\"for (\") && !lines[i-1].trim().endsWith(\"{\")) {\n            lines[i] = \"{\" + lines[i];\n            int indent = lines[i].indexOf(\"for\");\n            int j = i+1;\n            while (j < lines.length && lines[j].trim().equals(\"\")) {\n                j++;\n            }\n            lines[j-1] = StringUtils.repeat(\" \", indent) + lines[j-1];\n            lines[lines.length-1] += \"}\";\n            break;\n        }\n    }\n    return String.join(\"\\n\", lines);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..62a8a9bd 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,27 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String codeWithBug) {\n+    String pattern = \"for\\\\s*\\\\(((.*)\\\\)|(.*)\\\\)\\\\s*\\\\{[\\\\n\\\\s]*([\\\\w\\\\W]*?)[\\\\n\\\\s]*\\\\}\";\n+    String replacement = \"for ($1$3) { $4 }\";\n+    String fixedCode = codeWithBug.replaceAll(pattern, replacement);\n+  \n+    String[] lines = fixedCode.split(\"\\\\r?\\\\n\");\n+    for (int i = 0; i < lines.length; i++) {\n+        if (lines[i].trim().startsWith(\"for (\") && !lines[i-1].trim().endsWith(\"{\")) {\n+            lines[i] = \"{\" + lines[i];\n+            int indent = lines[i].indexOf(\"for\");\n+            int j = i+1;\n+            while (j < lines.length && lines[j].trim().equals(\"\")) {\n+                j++;\n+            }\n+            lines[j-1] = StringUtils.repeat(\" \", indent) + lines[j-1];\n+            lines[lines.length-1] += \"}\";\n+            break;\n+        }\n+    }\n+    return String.join(\"\\n\", lines);\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}