{
    "patch": "      if (NodeUtil.isGet(parent)) {\n        // Don't traverse the right side of the assignment if it's an\n        // assignment to a prototype property or subproperty.\n        Node lp = parent.getFirstChild();\n        if (lp.getType() == Token.GETPROP &&\n            lp.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n        boolean isPrototypeAssignment = NodeUtil.isPrototypeAssignment(lhs);\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n          return true;\n        } else if (isPrototypeAssignment ||\n                   NodeUtil.referencesOwnReceiver(lhs)) {\n          // Only traverse the right side of the assignment if it's not an\n          // assignment to a prototype property or subproperty, and if it does\n          // not reference own receiver (e.g., this.foo = function() {this.foo();}).\n          return false;\n        } else {\n          // Only traverse the right side of the assignment once.\n          return n == rhs;\n        }\n      }\n\n      if (NodeUtil.referencesOwnReceiver(n)) {\n        // If this is a function that references its own receiver\n        // (i.e. with a `this` keyword in the actual function body\n        // and not only in the parameter list) then we must also prevent traversing\n        // the parent function node itself.\n        return false;\n      }\n\n      if (NodeUtil.isObjectLitKey(parent, n)) {\n        // Don't traverse function expressions in object literals.\n        if (n.getParent().getType() != Token.CATCH) {\n          return false;\n        }\n      } else if (NodeUtil.isFunctionDeclaration(n)) {\n        // Don't traverse function declarations.\n        return false;\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..cb53835e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,59 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        // Don't traverse the right side of the assignment if it's an\n+        // assignment to a prototype property or subproperty.\n+        Node lp = parent.getFirstChild();\n+        if (lp.getType() == Token.GETPROP &&\n+            lp.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+      }\n+\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        boolean isPrototypeAssignment = NodeUtil.isPrototypeAssignment(lhs);\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+          return true;\n+        } else if (isPrototypeAssignment ||\n+                   NodeUtil.referencesOwnReceiver(lhs)) {\n+          // Only traverse the right side of the assignment if it's not an\n+          // assignment to a prototype property or subproperty, and if it does\n+          // not reference own receiver (e.g., this.foo = function() {this.foo();}).\n+          return false;\n+        } else {\n+          // Only traverse the right side of the assignment once.\n+          return n == rhs;\n+        }\n+      }\n+\n+      if (NodeUtil.referencesOwnReceiver(n)) {\n+        // If this is a function that references its own receiver\n+        // (i.e. with a `this` keyword in the actual function body\n+        // and not only in the parameter list) then we must also prevent traversing\n+        // the parent function node itself.\n+        return false;\n+      }\n+\n+      if (NodeUtil.isObjectLitKey(parent, n)) {\n+        // Don't traverse function expressions in object literals.\n+        if (n.getParent().getType() != Token.CATCH) {\n+          return false;\n+        }\n+      } else if (NodeUtil.isFunctionDeclaration(n)) {\n+        // Don't traverse function declarations.\n+        return false;\n+      }\n+\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}