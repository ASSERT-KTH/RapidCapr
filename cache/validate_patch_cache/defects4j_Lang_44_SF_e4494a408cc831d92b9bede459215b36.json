{
    "patch": "    public static Number createNumber(String val) throws NumberFormatException {\n        if (val == null) {\n            return null;\n        }\n        if (val.length() == 0) {\n            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n        }\n        if (val.startsWith(\"+\")) {\n            val = val.substring(1);\n        }\n        if (val.startsWith(\"--\")) {\n            return null;\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }\n        char lastChar = val.charAt(val.length() - 1);\n        int decPos = val.indexOf('.');\n        int expPos = indexOfExponent(val);\n        if (isAllZeros(val)) {\n            switch (lastChar) {\n                case 'x':\n                case 'X':\n                    return createInteger(val);\n                case 'l':\n                case 'L':\n                    if (decPos == -1 && expPos == -1) {\n                        try {\n                            return createLong(val);\n                        } catch (NumberFormatException nfe) {\n                            // empty catch statement\n                        }\n                        return createBigInteger(val);\n\n                    }\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                case 'f':\n                case 'F':\n                    try {\n                        Float f = NumberUtils.createFloat(val);\n                        if (!(f.isInfinite() || f.floatValue() == 0.0F)) {\n                            return f;\n                        }\n                    } catch (NumberFormatException e) {\n                        // empty catch statement\n                    }\n                    // fall through\n                case 'd':\n                case 'D':\n                    try {\n                        Double d = NumberUtils.createDouble(val);\n                        if (!(d.isInfinite() || d.doubleValue() == 0.0D)) {\n                            return d;\n                        }\n                    } catch (NumberFormatException e) {\n                        // empty catch statement\n                    }\n\n                    return createBigDecimal(val);\n                default:\n                    break;\n            }\n        } else {\n            if (expPos == -1) {\n                if (decPos == -1) {\n                    return createInteger(val);\n                }\n                if (lastChar == 'f' || lastChar == 'F') {\n                    try {\n                        Float f = NumberUtils.createFloat(val);\n                        if (!f.isInfinite()) {\n                            return f;\n                        }\n                    } catch (NumberFormatException e) {\n                        // empty catch statement\n                    }\n                } else {\n                    try {\n                        Double d = NumberUtils.createDouble(val);\n                        if (!d.isInfinite()) {\n                            return d;\n                        }\n\n                    } catch (NumberFormatException e) {\n                        // empty catch statement\n                    }\n                }\n                return createBigDecimal(val);\n\n            } else {\n                // Exponent handling\n                String exp = val.substring(expPos + 1);\n                String pre = val.substring(0, expPos);\n                boolean allZeros = isAllZeros(pre) && isAllZeros(exp);\n                try {\n                    Float f = NumberUtils.createFloat(val);\n                    if (!f.isInfinite() && !(f.floatValue() == 0.0F && !allZeros)) {\n                        return f;\n                    }\n                } catch (NumberFormatException e) {\n                    // empty catch statement\n                }\n                try {\n                    Double d = NumberUtils.createDouble(val);\n                    if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !allZeros)) {\n                        return d;\n                    }\n                } catch (NumberFormatException e) {\n                    // empty catch statement\n                }\n                return createBigDecimal(val);\n\n            }\n        }\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n\n    private static int indexOfExponent(String val) {\n        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n        if (expPos == 0) {\n            return -1;\n        }\n        if (expPos < val.length() && (val.charAt(expPos) == '+' || val.charAt(expPos) == '-')) {\n            expPos++;\n        }\n        try {\n            Integer.parseInt(val.substring(expPos));\n            return expPos;\n        } catch (NumberFormatException e) {\n            // empty catch statement\n        }\n        return -1;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..1852ad8e 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,147 +142,131 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (val.startsWith(\"+\")) {\n+            val = val.substring(1);\n+        }\n         if (val.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n             return null;\n         }\n         if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n             return createInteger(val);\n-        }   \n+        }\n         char lastChar = val.charAt(val.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n         int decPos = val.indexOf('.');\n-        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n-\n-        if (decPos > -1) {\n-\n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n-                }\n-                dec = val.substring(decPos + 1, expPos);\n-            } else {\n-                dec = val.substring(decPos + 1);\n-            }\n-            mant = val.substring(0, decPos);\n-        } else {\n-            if (expPos > -1) {\n-                mant = val.substring(0, expPos);\n-            } else {\n-                mant = val;\n-            }\n-            dec = null;\n-        }\n-        if (!Character.isDigit(lastChar)) {\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            String numeric = val.substring(0, val.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+        int expPos = indexOfExponent(val);\n+        if (isAllZeros(val)) {\n             switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n+                case 'x':\n+                case 'X':\n+                    return createInteger(val);\n+                case 'l':\n+                case 'L':\n+                    if (decPos == -1 && expPos == -1) {\n                         try {\n-                            return createLong(numeric);\n+                            return createLong(val);\n                         } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n+                            // empty catch statement\n                         }\n-                        return createBigInteger(numeric);\n+                        return createBigInteger(val);\n \n                     }\n                     throw new NumberFormatException(val + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n+                case 'f':\n+                case 'F':\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n+                        Float f = NumberUtils.createFloat(val);\n+                        if (!(f.isInfinite() || f.floatValue() == 0.0F)) {\n                             return f;\n                         }\n-\n                     } catch (NumberFormatException e) {\n-                        // ignore the bad number\n+                        // empty catch statement\n                     }\n-                    //Fall through\n-                case 'd' :\n-                case 'D' :\n+                    // fall through\n+                case 'd':\n+                case 'D':\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n+                        Double d = NumberUtils.createDouble(val);\n+                        if (!(d.isInfinite() || d.doubleValue() == 0.0D)) {\n                             return d;\n                         }\n-                    } catch (NumberFormatException nfe) {\n-                        // empty catch\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n                     } catch (NumberFormatException e) {\n-                        // empty catch\n+                        // empty catch statement\n                     }\n-                    //Fall through\n-                default :\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n \n+                    return createBigDecimal(val);\n+                default:\n+                    break;\n             }\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length());\n-            } else {\n-                exp = null;\n-            }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n+            if (expPos == -1) {\n+                if (decPos == -1) {\n                     return createInteger(val);\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n                 }\n-                try {\n-                    return createLong(val);\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n+                if (lastChar == 'f' || lastChar == 'F') {\n+                    try {\n+                        Float f = NumberUtils.createFloat(val);\n+                        if (!f.isInfinite()) {\n+                            return f;\n+                        }\n+                    } catch (NumberFormatException e) {\n+                        // empty catch statement\n+                    }\n+                } else {\n+                    try {\n+                        Double d = NumberUtils.createDouble(val);\n+                        if (!d.isInfinite()) {\n+                            return d;\n+                        }\n+\n+                    } catch (NumberFormatException e) {\n+                        // empty catch statement\n+                    }\n                 }\n-                return createBigInteger(val);\n+                return createBigDecimal(val);\n \n             } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+                // Exponent handling\n+                String exp = val.substring(expPos + 1);\n+                String pre = val.substring(0, expPos);\n+                boolean allZeros = isAllZeros(pre) && isAllZeros(exp);\n                 try {\n-                    Float f = createFloat(val);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                    Float f = NumberUtils.createFloat(val);\n+                    if (!f.isInfinite() && !(f.floatValue() == 0.0F && !allZeros)) {\n                         return f;\n                     }\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n+                } catch (NumberFormatException e) {\n+                    // empty catch statement\n                 }\n                 try {\n-                    Double d = createDouble(val);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                    Double d = NumberUtils.createDouble(val);\n+                    if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !allZeros)) {\n                         return d;\n                     }\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n+                } catch (NumberFormatException e) {\n+                    // empty catch statement\n                 }\n-\n                 return createBigDecimal(val);\n \n             }\n+        }\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n \n+    private static int indexOfExponent(String val) {\n+        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n+        if (expPos == 0) {\n+            return -1;\n+        }\n+        if (expPos < val.length() && (val.charAt(expPos) == '+' || val.charAt(expPos) == '-')) {\n+            expPos++;\n+        }\n+        try {\n+            Integer.parseInt(val.substring(expPos));\n+            return expPos;\n+        } catch (NumberFormatException e) {\n+            // empty catch statement\n         }\n+        return -1;\n     }\n \n     /**",
    "result_reason": "java.lang.StringIndexOutOfBoundsException: String index out of range: -1",
    "test_result": "FAIL"
}