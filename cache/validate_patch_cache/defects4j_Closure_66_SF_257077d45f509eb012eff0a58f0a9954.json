{
    "patch": "public static double getTypedPercent(JSONArray js) {\n    int numberOfTypedObjects = 0, totalObjects = 0;\n    for (int i = 0; i < js.length(); i++) {\n        if (js.get(i) instanceof JSONObject) {\n            totalObjects++;\n            if (((JSONObject) js.get(i)).has(\"type\") && !((JSONObject) js.get(i)).getString(\"type\").isEmpty()) {\n                numberOfTypedObjects++;\n            }\n        }\n    }\n    if (totalObjects == 0) {\n        return 0.0;\n    } else {\n        return Math.round(numberOfTypedObjects * 1000.0 / totalObjects) / 10.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..620a9821 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONArray js) {\n+    int numberOfTypedObjects = 0, totalObjects = 0;\n+    for (int i = 0; i < js.length(); i++) {\n+        if (js.get(i) instanceof JSONObject) {\n+            totalObjects++;\n+            if (((JSONObject) js.get(i)).has(\"type\") && !((JSONObject) js.get(i)).getString(\"type\").isEmpty()) {\n+                numberOfTypedObjects++;\n+            }\n+        }\n+    }\n+    if (totalObjects == 0) {\n+        return 0.0;\n+    } else {\n+        return Math.round(numberOfTypedObjects * 1000.0 / totalObjects) / 10.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}