{
    "patch": "String functionName = \"\";\nboolean shouldSetFunctionName = true;\nname = functionNode.getFunctionName();\nif (name != null) {\n  // Retrieve the name of the named function.\n  functionName = name.getIdentifier();\n  shouldSetFunctionName = false;\n} else if (isDirective(functionNode.getParent())) {\n  // If the function is an expression and is a directive, then the function name needs to be set\n  // to \"use strict\".\n  functionName = \"use strict\";\n  shouldSetFunctionName = false;\n}\n\nname = new Name();\nname.setIdentifier(functionName);\nNode newName = transform(name);\nif (shouldSetFunctionName) {\n  // The function name node will have the line number of the function declaration.\n  newName.setLineno(functionNode.getLineno());\n  newName.setCharno(position2charno(functionNode.getAbsolutePosition()));\n}\n",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..4d0d3357 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,29 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+String functionName = \"\";\n+boolean shouldSetFunctionName = true;\n+name = functionNode.getFunctionName();\n+if (name != null) {\n+  // Retrieve the name of the named function.\n+  functionName = name.getIdentifier();\n+  shouldSetFunctionName = false;\n+} else if (isDirective(functionNode.getParent())) {\n+  // If the function is an expression and is a directive, then the function name needs to be set\n+  // to \"use strict\".\n+  functionName = \"use strict\";\n+  shouldSetFunctionName = false;\n+}\n+\n+name = new Name();\n+name.setIdentifier(functionName);\n+Node newName = transform(name);\n+if (shouldSetFunctionName) {\n+  // The function name node will have the line number of the function declaration.\n+  newName.setLineno(functionNode.getLineno());\n+  newName.setCharno(position2charno(functionNode.getAbsolutePosition()));\n+}\n+\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: method isDirective in class IRFactory.TransformDispatcher cannot be applied to given types;",
    "test_result": "ERROR"
}