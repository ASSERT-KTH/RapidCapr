{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean isLeapYear = false;\n        int monthIndex = -1;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n                monthIndex = i;\n            }\n            if (partial.getFieldType(i) == DateTimeFieldType.year()) {\n                if (iChronology.isLeapYear(values[i])) {\n                    isLeapYear = true;\n                }\n            }\n        }\n        \n        if (monthIndex < 0) {\n            throw new IllegalArgumentException(\"No valid month in partial\");\n        }\n        \n        int month = iChronology.monthOfYear().get(instant);\n        int year = iChronology.year().get(instant);\n        int day = iChronology.dayOfMonth().get(instant);\n        int newMonth = (month + valueToAdd) % 12;\n        int newYear = year + ((month + valueToAdd) / 12);\n        \n        if (newMonth < 0) {\n            newMonth += 12;\n            newYear--;\n        }\n        \n        if (isLeapYear && month == 2 && day == 29) {\n            // Adjust date to last day of February before adding months\n            instant = iChronology.dayOfMonth().set(instant, 28);\n        }\n        \n        instant = iChronology.year().set(instant, newYear);\n        instant = iChronology.monthOfYear().set(instant, newMonth + 1);\n        \n        if (isLeapYear && newMonth == 2 && iChronology.dayOfMonth().get(instant) == 28) {\n            // If the result is on 28th Feb, adjust it to 29th Feb\n            instant = iChronology.dayOfMonth().set(instant, 29);\n        }\n        \n        return iChronology.get((ReadableInstant) null, instant);\n    } \n    \n    return super.add(partial, fieldIndex, values, valueToAdd);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..71408249 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,63 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    \n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean isLeapYear = false;\n+        int monthIndex = -1;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n+                monthIndex = i;\n+            }\n+            if (partial.getFieldType(i) == DateTimeFieldType.year()) {\n+                if (iChronology.isLeapYear(values[i])) {\n+                    isLeapYear = true;\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n-    }\n+        \n+        if (monthIndex < 0) {\n+            throw new IllegalArgumentException(\"No valid month in partial\");\n+        }\n+        \n+        int month = iChronology.monthOfYear().get(instant);\n+        int year = iChronology.year().get(instant);\n+        int day = iChronology.dayOfMonth().get(instant);\n+        int newMonth = (month + valueToAdd) % 12;\n+        int newYear = year + ((month + valueToAdd) / 12);\n+        \n+        if (newMonth < 0) {\n+            newMonth += 12;\n+            newYear--;\n+        }\n+        \n+        if (isLeapYear && month == 2 && day == 29) {\n+            // Adjust date to last day of February before adding months\n+            instant = iChronology.dayOfMonth().set(instant, 28);\n+        }\n+        \n+        instant = iChronology.year().set(instant, newYear);\n+        instant = iChronology.monthOfYear().set(instant, newMonth + 1);\n+        \n+        if (isLeapYear && newMonth == 2 && iChronology.dayOfMonth().get(instant) == 28) {\n+            // If the result is on 28th Feb, adjust it to 29th Feb\n+            instant = iChronology.dayOfMonth().set(instant, 29);\n+        }\n+        \n+        return iChronology.get((ReadableInstant) null, instant);\n+    } \n+    \n+    return super.add(partial, fieldIndex, values, valueToAdd);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}