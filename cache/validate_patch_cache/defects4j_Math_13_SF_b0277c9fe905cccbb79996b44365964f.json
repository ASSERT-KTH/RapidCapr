{
    "patch": "import org.apache.commons.math3.linear.*;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    // Use the iterative method to compute matrix square root\n    RealMatrix x = m.copy();\n    int n = m.getRowDimension();\n    RealMatrix eye = MatrixUtils.createRealIdentityMatrix(n);\n    RealMatrix y = eye;\n\n    for (int i = 0; i < 10; i++) {\n        y = 0.5 * (y + x.inverse());\n        x = 0.5 * (x + y);\n    }\n\n    return x;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..e3a056f33 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.*;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    // Use the iterative method to compute matrix square root\n+    RealMatrix x = m.copy();\n+    int n = m.getRowDimension();\n+    RealMatrix eye = MatrixUtils.createRealIdentityMatrix(n);\n+    RealMatrix y = eye;\n+\n+    for (int i = 0; i < 10; i++) {\n+        y = 0.5 * (y + x.inverse());\n+        x = 0.5 * (x + y);\n     }\n+\n+    return x;\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}