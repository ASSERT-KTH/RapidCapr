{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean monthChanged = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex) {\n                int oldMonth = iChronology.monthOfYear().get(instant);\n                instant = iChronology.monthOfYear().add(iChronology.dayOfMonth()\n                        .set(partial.getFieldType(i).getField(iChronology).set(instant, values[i]), 1), \n                        valueToAdd);\n                monthChanged = iChronology.monthOfYear().get(instant) != oldMonth;\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        if (monthChanged) {\n            int lastDay = iChronology.dayOfMonth().getMaximumValue(instant);\n            instant = iChronology.dayOfMonth().set(instant, lastDay);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..9bd9aacd 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,36 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean monthChanged = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex) {\n+                int oldMonth = iChronology.monthOfYear().get(instant);\n+                instant = iChronology.monthOfYear().add(iChronology.dayOfMonth()\n+                        .set(partial.getFieldType(i).getField(iChronology).set(instant, values[i]), 1), \n+                        valueToAdd);\n+                monthChanged = iChronology.monthOfYear().get(instant) != oldMonth;\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        if (monthChanged) {\n+            int lastDay = iChronology.dayOfMonth().getMaximumValue(instant);\n+            instant = iChronology.dayOfMonth().set(instant, lastDay);\n+        }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<--08-05> but was:<--08-31>",
    "test_result": "FAIL"
}