{
    "patch": "        } else {\n          Node rhs = n.getLastChild();\n          if (rhs.isCall()) {\n            // The rhs of the assignment is a function call, so don't associate it with the lhs.\n            // This fixes the specific case where the assignment is the caller expression, but it could be\n            // nested deeper in the caller and we would still get a bug.\n            // See testAssignWithCall2 for an example of this.\n            return;\n          }\n          recordDepScope(recordNode, ns);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..9965516c 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -576,6 +576,16 @@ final class NameAnalyzer implements CompilerPass {\n             recordDepScope(nameNode, ns);\n           }\n         } else {\n+          Node rhs = n.getLastChild();\n+          if (rhs.isCall()) {\n+            // The rhs of the assignment is a function call, so don't associate it with the lhs.\n+            // This fixes the specific case where the assignment is the caller expression, but it could be\n+            // nested deeper in the caller and we would still get a bug.\n+            // See testAssignWithCall2 for an example of this.\n+            return;\n+          }\n+          recordDepScope(recordNode, ns);\n+        }\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}