{
    "patch": "public void testOverrideMeanWithMathClass() {\n    double[] scores = new double[]{-1, 1, 3, Double.NaN, 3, Double.NaN, 3};\n    SummaryStatistics stats = new SummaryStatistics(new GeometricMean(),\n            new Variance(true),\n            new Mean(),\n            new Sum(),\n            new SumOfSquares(),\n            new Min(),\n            new Max(),\n            new SumOfLogs(),\n            new SecondMoment(new FirstMoment()));\n\n    for (double score : scores) {\n        stats.addValue(score);\n    }\n\n    double expectedMean = Arrays.stream(scores).filter(Double::isFinite).average().getAsDouble();\n    double expectedVariance = new Variance(true).evaluate(scores);\n\n    assertEquals(expectedMean, stats.getMean(), 1e-12);\n    assertEquals(Math.sqrt(expectedVariance), stats.getStandardDeviation(), 1e-12);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..b1ba4860b 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,28 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n-        }\n-        n++;\n-    }\n+public void testOverrideMeanWithMathClass() {\n+    double[] scores = new double[]{-1, 1, 3, Double.NaN, 3, Double.NaN, 3};\n+    SummaryStatistics stats = new SummaryStatistics(new GeometricMean(),\n+            new Variance(true),\n+            new Mean(),\n+            new Sum(),\n+            new SumOfSquares(),\n+            new Min(),\n+            new Max(),\n+            new SumOfLogs(),\n+            new SecondMoment(new FirstMoment()));\n+\n+    for (double score : scores) {\n+        stats.addValue(score);\n+    }\n+\n+    double expectedMean = Arrays.stream(scores).filter(Double::isFinite).average().getAsDouble();\n+    double expectedVariance = new Variance(true).evaluate(scores);\n+\n+    assertEquals(expectedMean, stats.getMean(), 1e-12);\n+    assertEquals(Math.sqrt(expectedVariance), stats.getStandardDeviation(), 1e-12);\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}