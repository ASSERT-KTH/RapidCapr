{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      List<Node> argsToRemove = new ArrayList<>();\n      for (Node arg : argList.children()) {\n        if (arg.isName()) {\n          Var var = fnScope.getVar(arg.getString());\n          if (var != null && !referenced.contains(var)) {\n            argsToRemove.add(arg);\n          } else {\n            referenced.add(var);\n          }\n        }\n      }\n      for (Node argToRemove : argsToRemove) {\n        argList.removeChild(argToRemove);\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..2587aff3 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,35 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      List<Node> argsToRemove = new ArrayList<>();\n+      for (Node arg : argList.children()) {\n+        if (arg.isName()) {\n+          Var var = fnScope.getVar(arg.getString());\n+          if (var != null && !referenced.contains(var)) {\n+            argsToRemove.add(arg);\n+          } else {\n+            referenced.add(var);\n+          }\n+        }\n+      }\n+      for (Node argToRemove : argsToRemove) {\n+        argList.removeChild(argToRemove);\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}