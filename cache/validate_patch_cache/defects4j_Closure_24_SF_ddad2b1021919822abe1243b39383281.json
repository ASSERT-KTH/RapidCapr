{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  int functionCountInScope = 0;\n  \n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    int type = n.getType();\n    Node parent = n.getParent();\n\n    if (type == Token.FUNCTION || type == Token.LP) {\n      functionCountInScope++;\n    }\n\n    if (parent.isVar()) {\n      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        aliases.put(name, aliasVar);\n\n        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        }\n        // Bleeding functions already get a BAD_PARAMETERS error, so just\n        // do nothing.\n        // Parameters of the scope function also get a BAD_PARAMETERS\n        // error.\n      } else {\n        // TODO(robbyw): Support using locals for private variables.\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      }\n    }\n  }\n\n  // Ensure that there is only one function in the scope.\n  // Anonymous functions are Ok, as are both (1) functions with a name,\n  // and (2) named function expressions, since the name is locally scoped.\n  if (functionCountInScope > 1) {\n    report(t, null, MULTIPLE_SYNTHETIC_BLOCK_FUNCTIONS);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..341a7a71 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,47 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  int functionCountInScope = 0;\n+  \n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    int type = n.getType();\n+    Node parent = n.getParent();\n+\n+    if (type == Token.FUNCTION || type == Token.LP) {\n+      functionCountInScope++;\n+    }\n+\n+    if (parent.isVar()) {\n+      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+        String name = n.getString();\n+        Var aliasVar = scope.getVar(name);\n+        aliases.put(name, aliasVar);\n+\n+        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n         }\n+        // Bleeding functions already get a BAD_PARAMETERS error, so just\n+        // do nothing.\n+        // Parameters of the scope function also get a BAD_PARAMETERS\n+        // error.\n+      } else {\n+        // TODO(robbyw): Support using locals for private variables.\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n       }\n     }\n+  }\n+\n+  // Ensure that there is only one function in the scope.\n+  // Anonymous functions are Ok, as are both (1) functions with a name,\n+  // and (2) named function expressions, since the name is locally scoped.\n+  if (functionCountInScope > 1) {\n+    report(t, null, MULTIPLE_SYNTHETIC_BLOCK_FUNCTIONS);\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}