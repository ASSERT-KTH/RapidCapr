{
    "patch": "public Line revert() {\n    final Vector2D negDirection = direction.negate();\n    final double[] startCoords = { \n        Math.round(zero.getX() * 1e6) / 1e6, \n        Math.round(zero.getY() * 1e6) / 1e6 \n    };\n    final double[] endCoords = { \n        Math.round(negDirection.getX() * 1e6) / 1e6, \n        Math.round(negDirection.getY() * 1e6) / 1e6 \n    };\n    return new Line(new Vector2D(startCoords), new Vector2D(endCoords));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..0e643ad8d 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,18 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+    final Vector2D negDirection = direction.negate();\n+    final double[] startCoords = { \n+        Math.round(zero.getX() * 1e6) / 1e6, \n+        Math.round(zero.getY() * 1e6) / 1e6 \n+    };\n+    final double[] endCoords = { \n+        Math.round(negDirection.getX() * 1e6) / 1e6, \n+        Math.round(negDirection.getY() * 1e6) / 1e6 \n+    };\n+    return new Line(new Vector2D(startCoords), new Vector2D(endCoords));\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}