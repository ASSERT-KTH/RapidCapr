{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    final int length = input.length();\n    for (int index = 0; index < length; ) {\n        int codepoint = Character.codePointAt(input, index);\n        if (codepoint > Character.MAX_VALUE || Character.isSurrogate((char) codepoint)) {\n            out.write('\\\\');\n            out.write('u');\n            out.write(String.format(\"%04x\", codepoint));\n        } else {\n            out.write(codepoint);\n        }\n        index += Character.charCount(codepoint);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..913ce82f 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,26 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-            }\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    final int length = input.length();\n+    for (int index = 0; index < length; ) {\n+        int codepoint = Character.codePointAt(input, index);\n+        if (codepoint > Character.MAX_VALUE || Character.isSurrogate((char) codepoint)) {\n+            out.write('\\\\');\n+            out.write('u');\n+            out.write(String.format(\"%04x\", codepoint));\n+        } else {\n+            out.write(codepoint);\n         }\n+        index += Character.charCount(codepoint);\n     }\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}