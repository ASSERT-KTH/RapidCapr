{
    "patch": "        // calculate the midpoint of the interval\n        double m = 0.5 * (min + max);\n\n        // check for convergence\n        final double delta = Math.max(relativeAccuracy * Math.abs(m), absoluteAccuracy);\n        if (Math.abs(max - min) < delta) {\n            setResult(m, 1);\n            return result;\n        }\n\n        // evaluate the function at the midpoint\n        final double yMid = f.value(m);\n\n        // if midpoint is the root, return it and exit\n        if (Math.abs(yMid) <= functionValueAccuracy) {\n            setResult(m, 1);\n            return result;\n        }\n\n        // update bracketing interval\n        if (yMid * yMin < 0) {\n            return solve(f, min, yMin, m, yMid, initial, yInitial);\n        } else if (yMid * yMax < 0) {\n            return solve(f, m, yMid, max, yMax, initial, yInitial);\n        } else {\n            throw new IllegalArgumentException(\"Function is not bracketed in the interval [\" + min + \",\" + max + \"]\");",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..fab0bf09c 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,32 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // calculate the midpoint of the interval\n+        double m = 0.5 * (min + max);\n+\n+        // check for convergence\n+        final double delta = Math.max(relativeAccuracy * Math.abs(m), absoluteAccuracy);\n+        if (Math.abs(max - min) < delta) {\n+            setResult(m, 1);\n+            return result;\n+        }\n+\n+        // evaluate the function at the midpoint\n+        final double yMid = f.value(m);\n+\n+        // if midpoint is the root, return it and exit\n+        if (Math.abs(yMid) <= functionValueAccuracy) {\n+            setResult(m, 1);\n+            return result;\n+        }\n+\n+        // update bracketing interval\n+        if (yMid * yMin < 0) {\n+            return solve(f, min, yMin, m, yMid, initial, yInitial);\n+        } else if (yMid * yMax < 0) {\n+            return solve(f, m, yMid, max, yMax, initial, yInitial);\n+        } else {\n+            throw new IllegalArgumentException(\"Function is not bracketed in the interval [\" + min + \",\" + max + \"]\");\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}