{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter, argument;\n\n    while (parameters.hasNext()) {\n        parameter = parameters.next();\n        if (parameter.isVarArgs()) {\n            // Handle varargs.\n            JSType varArgType = parameter.getDeclaredType().getElementsType();\n            while (arguments.hasNext()) {\n                argument = arguments.next();\n                ordinal++;\n                validator.expectArgumentMatchesParameter(t, argument,\n                  getJSType(argument), varArgType, call, ordinal);\n            }\n            break;\n        }\n\n        if (!arguments.hasNext()) {\n            if (parameter.isOptionalArg()) {\n                return;\n            } else {\n                report(t, call, WRONG_ARGUMENT_COUNT,\n                        validator.getReadableJSTypeName(call.getFirstChild(), false),\n                        String.format(\"%d\", ordinal),\n                        String.format(\"%s is undefined\", parameter.getString()),\n                        \"\");\n                return;\n            }\n        }\n\n        argument = arguments.next();\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(t, argument,\n                getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    if (arguments.hasNext()) {\n        if (functionType.getMaxArguments() == -1) {\n            // the function takes a variable number of arguments\n            return;\n        }\n\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.format(\"%d\", ordinal),\n                String.format(\"Function takes no more than %d argument(s)\", functionType.getMaxArguments()),\n                \"\");\n        return;\n    }\n\n    if (!parameters.hasNext()) {\n        return;\n    }\n\n    while (parameters.hasNext()) {\n        parameter = parameters.next();\n        if (!parameter.isOptionalArg()) {\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n                    null,\n                    String.format(\"Missing required argument %s at position %d\",\n                            parameter.getString(), ordinal + 1),\n                    \"\");\n            return;\n        }\n    }\n\n    return;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..35f9e14a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,81 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    Node parameter, argument;\n+\n+    while (parameters.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+        if (parameter.isVarArgs()) {\n+            // Handle varargs.\n+            JSType varArgType = parameter.getDeclaredType().getElementsType();\n+            while (arguments.hasNext()) {\n+                argument = arguments.next();\n+                ordinal++;\n+                validator.expectArgumentMatchesParameter(t, argument,\n+                  getJSType(argument), varArgType, call, ordinal);\n+            }\n+            break;\n+        }\n+\n+        if (!arguments.hasNext()) {\n+            if (parameter.isOptionalArg()) {\n+                return;\n+            } else {\n+                report(t, call, WRONG_ARGUMENT_COUNT,\n+                        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                        String.format(\"%d\", ordinal),\n+                        String.format(\"%s is undefined\", parameter.getString()),\n+                        \"\");\n+                return;\n+            }\n+        }\n+\n+        argument = arguments.next();\n+        ordinal++;\n+\n+        validator.expectArgumentMatchesParameter(t, argument,\n+                getJSType(argument), getJSType(parameter), call, ordinal);\n+    }\n+\n+    if (arguments.hasNext()) {\n+        if (functionType.getMaxArguments() == -1) {\n+            // the function takes a variable number of arguments\n+            return;\n+        }\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.format(\"%d\", ordinal),\n+                String.format(\"Function takes no more than %d argument(s)\", functionType.getMaxArguments()),\n+                \"\");\n+        return;\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (!parameters.hasNext()) {\n+        return;\n     }\n-  }\n+\n+    while (parameters.hasNext()) {\n+        parameter = parameters.next();\n+        if (!parameter.isOptionalArg()) {\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                    null,\n+                    String.format(\"Missing required argument %s at position %d\",\n+                            parameter.getString(), ordinal + 1),\n+                    \"\");\n+            return;\n+        }\n+    }\n+\n+    return;\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}