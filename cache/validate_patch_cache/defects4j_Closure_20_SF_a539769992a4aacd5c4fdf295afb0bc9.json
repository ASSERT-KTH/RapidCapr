{
    "patch": "private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget == null || !callTarget.isName()) {\n        return n;\n    }\n    String targetName = callTarget.getString();\n    Node value = callTarget.getNext();\n    if (value == null || !NodeUtil.isImmutableValue(value)) {\n        return n;\n    }\n    switch (targetName) {\n        case \"String\":\n            // Fold String(a) to '' + (a) on immutable literals,\n            // which allows further optimizations\n            //\n            // We can't do this in the general case, because String(a) has\n            // slightly different semantics than '' + (a). See\n            // http://code.google.com/p/closure-compiler/issues/detail?id=759\n            Node addition = IR.add(IR.string(\"\").srcref(callTarget), value.detachFromParent());\n            n.getParent().replaceChild(n, addition);\n            reportCodeChange();\n            return addition;\n        case \"Number\":\n            double numValue = NodeUtil.getNumberValue(value);\n            if (!Double.isNaN(numValue)) {\n                Node numNode = IR.number(numValue).srcref(n);\n                n.getParent().replaceChild(n, numNode);\n                reportCodeChange();\n                return numNode;\n            }\n            break;\n        case \"Boolean\":\n            boolean boolValue = NodeUtil.getBooleanValue(value);\n            if (boolValue) {\n                Node trueNode = IR.trueNode().srcref(n);\n                n.getParent().replaceChild(n, trueNode);\n                reportCodeChange();\n                return trueNode;\n            } else {\n                Node falseNode = IR.falseNode().srcref(n);\n                n.getParent().replaceChild(n, falseNode);\n                reportCodeChange();\n                return falseNode;\n            }\n        case \"RegExp\":\n            String pattern = NodeUtil.getRegExpValue(value);\n            if (pattern != null) {\n                Node regexNode = IR.regex(pattern, \"\").srcref(n);\n                n.getParent().replaceChild(n, regexNode);\n                reportCodeChange();\n                return regexNode;\n            }\n            break;\n        default:\n            break;\n    }\n    return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..4f55c940 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -205,29 +205,65 @@ class PeepholeSubstituteAlternateSyntax\n     }\n   }\n \n-  private Node tryFoldSimpleFunctionCall(Node n) {\n+private Node tryFoldSimpleFunctionCall(Node n) {\n     Preconditions.checkState(n.isCall());\n     Node callTarget = n.getFirstChild();\n-    if (callTarget != null && callTarget.isName() &&\n-          callTarget.getString().equals(\"String\")) {\n-      // Fold String(a) to '' + (a) on immutable literals,\n-      // which allows further optimizations\n-      //\n-      // We can't do this in the general case, because String(a) has\n-      // slightly different semantics than '' + (a). See\n-      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n-      Node value = callTarget.getNext();\n-      if (value != null) {\n-        Node addition = IR.add(\n-            IR.string(\"\").srcref(callTarget),\n-            value.detachFromParent());\n-        n.getParent().replaceChild(n, addition);\n-        reportCodeChange();\n-        return addition;\n-      }\n+    if (callTarget == null || !callTarget.isName()) {\n+        return n;\n+    }\n+    String targetName = callTarget.getString();\n+    Node value = callTarget.getNext();\n+    if (value == null || !NodeUtil.isImmutableValue(value)) {\n+        return n;\n+    }\n+    switch (targetName) {\n+        case \"String\":\n+            // Fold String(a) to '' + (a) on immutable literals,\n+            // which allows further optimizations\n+            //\n+            // We can't do this in the general case, because String(a) has\n+            // slightly different semantics than '' + (a). See\n+            // http://code.google.com/p/closure-compiler/issues/detail?id=759\n+            Node addition = IR.add(IR.string(\"\").srcref(callTarget), value.detachFromParent());\n+            n.getParent().replaceChild(n, addition);\n+            reportCodeChange();\n+            return addition;\n+        case \"Number\":\n+            double numValue = NodeUtil.getNumberValue(value);\n+            if (!Double.isNaN(numValue)) {\n+                Node numNode = IR.number(numValue).srcref(n);\n+                n.getParent().replaceChild(n, numNode);\n+                reportCodeChange();\n+                return numNode;\n+            }\n+            break;\n+        case \"Boolean\":\n+            boolean boolValue = NodeUtil.getBooleanValue(value);\n+            if (boolValue) {\n+                Node trueNode = IR.trueNode().srcref(n);\n+                n.getParent().replaceChild(n, trueNode);\n+                reportCodeChange();\n+                return trueNode;\n+            } else {\n+                Node falseNode = IR.falseNode().srcref(n);\n+                n.getParent().replaceChild(n, falseNode);\n+                reportCodeChange();\n+                return falseNode;\n+            }\n+        case \"RegExp\":\n+            String pattern = NodeUtil.getRegExpValue(value);\n+            if (pattern != null) {\n+                Node regexNode = IR.regex(pattern, \"\").srcref(n);\n+                n.getParent().replaceChild(n, regexNode);\n+                reportCodeChange();\n+                return regexNode;\n+            }\n+            break;\n+        default:\n+            break;\n     }\n     return n;\n-  }\n+}\n \n   private Node tryFoldImmediateCallToBoundFunction(Node n) {\n     // Rewriting \"(fn.bind(a,b))()\" to \"fn.call(a,b)\" makes it inlinable",
    "result_reason": "error: strings in switch are not supported in -source 1.6",
    "test_result": "ERROR"
}