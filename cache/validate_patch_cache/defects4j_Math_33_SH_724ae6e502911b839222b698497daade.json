{
    "patch": "    protected void dropPhase1Objective() {\n        if (getNumObjectiveFunctions() == 1) {\n            return;\n        }\n\n        List<Integer> columnsToDrop = new ArrayList<Integer>();\n        columnsToDrop.add(0);\n\n        // positive cost non-artificial variables\n        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n            final double entry = tableau.getEntry(0, i);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                columnsToDrop.add(i);\n            }\n        }\n\n        // non-basic artificial variables\n        for (int i = 0; i < getNumArtificialVariables(); i++) {\n          int col = i + getArtificialVariableOffset();\n          if (getBasicRow(col) == null) {\n            columnsToDrop.add(col);\n          }\n        }\n\n        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n        for (int i = 1; i < getHeight(); i++) {\n            int col = 0;\n            for (int j = 0; j < getWidth(); j++) {\n                if (!columnsToDrop.contains(j)) {\n                    matrix[i - 1][col++] = tableau.getEntry(i, j);\n                }\n            }\n        }\n\n        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n            columnLabels.remove((int) columnsToDrop.get(i));\n        }\n\n        this.tableau = new Array2DRowRealMatrix(matrix);\n        this.numArtificialVariables = 0;\n\n        // adjust coefficients\n      for (int i = getNumObjectiveFunctions()-1; i >= 0; i--) {\n          int basicRow = getBasicRow(i);\n          if (basicRow == -1) {\n              continue;\n          }\n          BasicSlice slice = getBasicSlice(i, basicRow);\n          if (Precision.compareTo(slice.coefficients[0], 1d, maxUlps) != 0) {\n              // phase 1 may have left a non-unity coefficient\n              divideRow(slice, slice.coefficients[0]);\n          }\n          for (int j = 1; j < getWidth(); j++) {\n              if (j != i) {\n                  subtractRow(slice, j, tableau.getEntry(basicRow, j));\n              }\n          }\n      }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..e756d70c1 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -332,6 +332,17 @@ class SimplexTableau implements Serializable {\n         List<Integer> columnsToDrop = new ArrayList<Integer>();\n         columnsToDrop.add(0);\n \n+        // positive cost non-artificial variables\n+        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n+            final double entry = tableau.getEntry(0, i);\n+    protected void dropPhase1Objective() {\n+        if (getNumObjectiveFunctions() == 1) {\n+            return;\n+        }\n+\n+        List<Integer> columnsToDrop = new ArrayList<Integer>();\n+        columnsToDrop.add(0);\n+\n         // positive cost non-artificial variables\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n@@ -348,6 +359,54 @@ class SimplexTableau implements Serializable {\n           }\n         }\n \n+        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n+        for (int i = 1; i < getHeight(); i++) {\n+            int col = 0;\n+            for (int j = 0; j < getWidth(); j++) {\n+                if (!columnsToDrop.contains(j)) {\n+                    matrix[i - 1][col++] = tableau.getEntry(i, j);\n+                }\n+            }\n+        }\n+\n+        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n+            columnLabels.remove((int) columnsToDrop.get(i));\n+        }\n+\n+        this.tableau = new Array2DRowRealMatrix(matrix);\n+        this.numArtificialVariables = 0;\n+\n+        // adjust coefficients\n+      for (int i = getNumObjectiveFunctions()-1; i >= 0; i--) {\n+          int basicRow = getBasicRow(i);\n+          if (basicRow == -1) {\n+              continue;\n+          }\n+          BasicSlice slice = getBasicSlice(i, basicRow);\n+          if (Precision.compareTo(slice.coefficients[0], 1d, maxUlps) != 0) {\n+              // phase 1 may have left a non-unity coefficient\n+              divideRow(slice, slice.coefficients[0]);\n+          }\n+          for (int j = 1; j < getWidth(); j++) {\n+              if (j != i) {\n+                  subtractRow(slice, j, tableau.getEntry(basicRow, j));\n+              }\n+          }\n+      }\n+\n+    }\n+                columnsToDrop.add(i);\n+            }\n+        }\n+\n+        // non-basic artificial variables\n+        for (int i = 0; i < getNumArtificialVariables(); i++) {\n+          int col = i + getArtificialVariableOffset();\n+          if (getBasicRow(col) == null) {\n+            columnsToDrop.add(col);\n+          }\n+        }\n+\n         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n         for (int i = 1; i < getHeight(); i++) {\n           int col = 0;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}