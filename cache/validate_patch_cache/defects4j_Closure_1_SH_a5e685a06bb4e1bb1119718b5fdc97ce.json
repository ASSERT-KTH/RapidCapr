{
    "patch": "    ImmutableList<Node> args = getFunctionParameters(function);\n    List<Node> unreferencedArgs = new ArrayList<>();\n\n    for (Node arg : args) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        unreferencedArgs.add(arg);\n      }\n    }\n\n    if (!unreferencedArgs.isEmpty()) {\n      int lengthToRemove = unreferencedArgs.size();\n      Node lastArgToRemove = unreferencedArgs.get(lengthToRemove - 1);\n      Node parent = lastArgToRemove.getParent();\n\n      // The parameters object literal setters can not be removed.\n      // Only look at the immediate parent because we may be removing the last\n      // parameter, and we do not want to check the parents past the callee.\n      if (!NodeUtil.isGetOrSetKey(parent.getParent())) {\n        // Remove nodes from the AST. Do this backwards for efficiency.\n        for (int i = lengthToRemove - 1; i >= 0; i--) {\n          Node arg = unreferencedArgs.get(i);\n          parent.removeChild(arg);\n        }\n        compiler.reportCodeChange();\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ba20de2b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,33 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    ImmutableList<Node> args = getFunctionParameters(function);\n+    List<Node> unreferencedArgs = new ArrayList<>();\n+\n+    for (Node arg : args) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        unreferencedArgs.add(arg);\n+      }\n+    }\n+\n+    if (!unreferencedArgs.isEmpty()) {\n+      int lengthToRemove = unreferencedArgs.size();\n+      Node lastArgToRemove = unreferencedArgs.get(lengthToRemove - 1);\n+      Node parent = lastArgToRemove.getParent();\n+\n+      // The parameters object literal setters can not be removed.\n+      // Only look at the immediate parent because we may be removing the last\n+      // parameter, and we do not want to check the parents past the callee.\n+      if (!NodeUtil.isGetOrSetKey(parent.getParent())) {\n+        // Remove nodes from the AST. Do this backwards for efficiency.\n+        for (int i = lengthToRemove - 1; i >= 0; i--) {\n+          Node arg = unreferencedArgs.get(i);\n+          parent.removeChild(arg);\n+        }\n+        compiler.reportCodeChange();\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}