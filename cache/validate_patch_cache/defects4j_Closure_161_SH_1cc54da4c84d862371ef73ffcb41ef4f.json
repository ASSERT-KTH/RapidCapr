{
    "patch": "// Check if the array access is used as an assignment target or in a compound assignment\nif (NodeUtil.isAssignmentTarget(n) || NodeUtil.isCompoundAssignmentTarget(n)) {\n  return n;\n} else if (parent != null && parent.getType() == Token.ASSIGN && parent.getFirstChild().isEquivalentTo(n)) {\n  Node grandParent = parent.getParent();\n  if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n    return n;\n  }\n  Nod",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..7e6bddaf 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,15 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check if the array access is used as an assignment target or in a compound assignment\n+if (NodeUtil.isAssignmentTarget(n) || NodeUtil.isCompoundAssignmentTarget(n)) {\n+  return n;\n+} else if (parent != null && parent.getType() == Token.ASSIGN && parent.getFirstChild().isEquivalentTo(n)) {\n+  Node grandParent = parent.getParent();\n+  if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n+    return n;\n+  }\n+  Nod\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}