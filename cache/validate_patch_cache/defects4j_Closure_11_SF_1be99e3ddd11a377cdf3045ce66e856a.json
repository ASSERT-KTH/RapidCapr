{
    "patch": "public class MyClass {\n    public static String getprop(String propName) {\n        String[] warnings = {\"warning1\", \"warning2\"};\n        String result = null;\n        if (warnings.length > 0) {\n            result = \"Property \" + propName + \" has warnings:\";\n            for (int i=0; i<warnings.length; i++) {\n                result += \"\\n - \" + warnings[i];\n            }\n        }\n        return result;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..78115fd9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public class MyClass {\n+    public static String getprop(String propName) {\n+        String[] warnings = {\"warning1\", \"warning2\"};\n+        String result = null;\n+        if (warnings.length > 0) {\n+            result = \"Property \" + propName + \" has warnings:\";\n+            for (int i=0; i<warnings.length; i++) {\n+                result += \"\\n - \" + warnings[i];\n+            }\n+        }\n+        return result;\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}