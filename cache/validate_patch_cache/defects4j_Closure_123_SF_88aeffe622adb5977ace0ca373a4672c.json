{
    "patch": "public static String fixCode(String code) {\n    String regex = \"for\\\\((.*?);(.*?);(.*?)\\\\)\";\n    Pattern pattern = Pattern.compile(regex);\n    Matcher matcher = pattern.matcher(code);\n    StringBuffer stringBuffer = new StringBuffer();\n\n    while (matcher.find()) {\n        String operator = matcher.group(2);\n        if (operator.trim().endsWith(\"in\")) {\n            String replacement = \"\";\n            String condition = matcher.group(1) + matcher.group(3);\n            String[] parts = operator.split(\" \");\n            String variable = parts[0];\n            String collection = parts[2];\n            if (collection.indexOf('.') != -1 || collection.indexOf('[') != -1) {\n                replacement = variable + \"=\" + collection + \";\" + variable + \".forEach(function(\"\n                        + variable + (condition.equals(\"\") ? \"\" : \",\") + condition + \"){\";\n            } else {\n                replacement = \"for(\" + variable + \"=0;\" + variable + \"<\" + collection\n                        + \".length;\" + variable + \"++){\" + variable + \"=\" + collection\n                        + \"[\" + variable + \"];\";\n                if (!condition.equals(\"\")) {\n                    replacement += \"if(\" + condition + \"){\";\n                }\n            }\n            matcher.appendReplacement(stringBuffer, replacement);\n        }\n    }\n    matcher.appendTail(stringBuffer);\n    return stringBuffer.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..64a8c299 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,37 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String regex = \"for\\\\((.*?);(.*?);(.*?)\\\\)\";\n+    Pattern pattern = Pattern.compile(regex);\n+    Matcher matcher = pattern.matcher(code);\n+    StringBuffer stringBuffer = new StringBuffer();\n+\n+    while (matcher.find()) {\n+        String operator = matcher.group(2);\n+        if (operator.trim().endsWith(\"in\")) {\n+            String replacement = \"\";\n+            String condition = matcher.group(1) + matcher.group(3);\n+            String[] parts = operator.split(\" \");\n+            String variable = parts[0];\n+            String collection = parts[2];\n+            if (collection.indexOf('.') != -1 || collection.indexOf('[') != -1) {\n+                replacement = variable + \"=\" + collection + \";\" + variable + \".forEach(function(\"\n+                        + variable + (condition.equals(\"\") ? \"\" : \",\") + condition + \"){\";\n+            } else {\n+                replacement = \"for(\" + variable + \"=0;\" + variable + \"<\" + collection\n+                        + \".length;\" + variable + \"++){\" + variable + \"=\" + collection\n+                        + \"[\" + variable + \"];\";\n+                if (!condition.equals(\"\")) {\n+                    replacement += \"if(\" + condition + \"){\";\n+                }\n+            }\n+            matcher.appendReplacement(stringBuffer, replacement);\n+        }\n+    }\n+    matcher.appendTail(stringBuffer);\n+    return stringBuffer.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}