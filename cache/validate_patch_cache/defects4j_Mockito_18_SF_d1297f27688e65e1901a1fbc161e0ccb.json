{
    "patch": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Values values = new Values();\n        values.putValue(List.class, Arrays.asList(1, 2, 3, 4));\n\n        List<Integer> list = getValues(values);\n        System.out.println(list);\n    }\n\n    public static List<Integer> getValues(Values values) {\n        List<Integer> result = new ArrayList<>();\n        Object value = values.returnValueFor(List.class);\n        if (value instanceof List) {\n            List<?> list = (List<?>) value;\n            for (Object element : list) {\n                if (element instanceof Integer) {\n                    result.add((Integer) element);\n                }\n            }\n        }\n        return result;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..0c2605df2 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,34 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+        Values values = new Values();\n+        values.putValue(List.class, Arrays.asList(1, 2, 3, 4));\n+\n+        List<Integer> list = getValues(values);\n+        System.out.println(list);\n+    }\n+\n+    public static List<Integer> getValues(Values values) {\n+        List<Integer> result = new ArrayList<>();\n+        Object value = values.returnValueFor(List.class);\n+        if (value instanceof List) {\n+            List<?> list = (List<?>) value;\n+            for (Object element : list) {\n+                if (element instanceof Integer) {\n+                    result.add((Integer) element);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}