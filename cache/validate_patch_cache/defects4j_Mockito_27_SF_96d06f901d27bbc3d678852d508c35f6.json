{
    "patch": "public <T> void resetMock(T mock) {\n    if (!MockUtil.isMock(mock)) {\n        return;\n    }\n    MockHandlerInterface<T> oldHandler = MockUtil.getMockHandler(mock);\n    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n    MockSettingsImpl settings = new MockSettingsImpl();\n    settings.defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n    settings.spiedInstance(mock);\n    ((MockitoMock) mock).setMockitoInterceptor(null);\n    newHandler.setInterceptors(Mockito.withSettings().getMockInterceptor());\n    ((MockitoMock) mock).setMockitoInterceptor(new MockMethodInterceptorFilter(newHandler, settings));\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..1d05ee80b 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,20 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (!MockUtil.isMock(mock)) {\n+        return;\n+    }\n+    MockHandlerInterface<T> oldHandler = MockUtil.getMockHandler(mock);\n+    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n+    MockSettingsImpl settings = new MockSettingsImpl();\n+    settings.defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n+    settings.spiedInstance(mock);\n+    ((MockitoMock) mock).setMockitoInterceptor(null);\n+    newHandler.setInterceptors(Mockito.withSettings().getMockInterceptor());\n+    ((MockitoMock) mock).setMockitoInterceptor(new MockMethodInterceptorFilter(newHandler, settings));\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: non-static method isMock(Object) cannot be referenced from a static context",
    "test_result": "ERROR"
}