{
    "patch": "        int count = 0;\n        while (count++ < getMaxIterations()) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n                // If the reflected point is better than the best point so far\n\n                // compute the expanded simplex\n                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // If the expanded point is even better\n\n                    // replace the worst point with the expanded point\n                    simplex[simplex.length - 1] = expanded;\n                } else {\n                    // If the reflected point is better than the expanded point\n\n                    // replace the worst point with the reflected point\n                    simplex[simplex.length - 1] = reflected;\n                }\n            } else {\n                // If the reflected point is not better than the best point so far\n\n                final RealPointValuePair reflectedWorst = simplex[simplex.length - 1];\n                if (comparator.compare(reflected, reflectedWorst) < 0) {\n                    // If the reflected point is better than the worst point but not better than the best\n\n                    // replace the worst point with the reflected point\n                    simplex[simplex.length - 1] = reflected;\n                    continue;\n                }\n\n                // If the reflected point is not better than the worst point\n\n                // Perform a contraction step\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, reflectedWorst) < 0) {\n                    // If the contracted point is better than the worst point\n\n                    // replace the worst point with the contracted point\n                    simplex[simplex.length - 1] = contracted;\n                    continue;\n                }\n\n                // If the contracted point is not better than the worst point\n\n                // Perform a reduction step\n                final RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];\n                newSimplex[0] = best;\n                for (int i = 1; i < newSimplex.length; i++) {\n                    newSimplex[i] = new RealPointValuePair(original[i - 1].getPoint(), original[i - 1].getValue());\n                    for (int j = 0; j < original[i - 1].getPointRef().length; j++) {\n                        newSimplex[i].getPointRef()[j] = best.getPoint()[j] + sigma * (original[i - 1].getPoint()[j] - best.getPoint()[j]);\n                    }\n                    newSimplex[i] = new RealPointValuePair(newSimplex[i].getPoint(), computeObjectiveValue(newSimplex[i].getPoint()));\n                }\n\n                simplex = newSimplex;\n            }\n\n            // Check for convergence\n            double max = 0;\n            for (int i = 1; i < simplex.length; i++) {\n                double[] x = simplex[i].getPoint();\n                double[] y = simplex[0].getPoint();\n                double dist = 0;\n                for (int j = 0; j < x.length; j++) {\n                    dist += FastMath.pow(x[j] - y[j], 2.0);\n                }\n                max = FastMath.max(max, dist);\n            }\n            if (FastMath.sqrt(max) <= getSimplexSizeTolerance()) {\n                return;\n            }\n        }\n\n        throw new OptimizationException(\"Maximum number of iterations has been exceeded\");",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..ce9ce05ec 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,10 +58,8 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n+        int count = 0;\n+        while (count++ < getMaxIterations()) {\n \n             incrementIterationsCounter();\n \n@@ -72,31 +70,78 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n+                // If the reflected point is better than the best point so far\n \n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // If the expanded point is even better\n+\n+                    // replace the worst point with the expanded point\n+                    simplex[simplex.length - 1] = expanded;\n+                } else {\n+                    // If the reflected point is better than the expanded point\n+\n+                    // replace the worst point with the reflected point\n+                    simplex[simplex.length - 1] = reflected;\n                 }\n+            } else {\n+                // If the reflected point is not better than the best point so far\n \n-                return;\n+                final RealPointValuePair reflectedWorst = simplex[simplex.length - 1];\n+                if (comparator.compare(reflected, reflectedWorst) < 0) {\n+                    // If the reflected point is better than the worst point but not better than the best\n \n-            }\n+                    // replace the worst point with the reflected point\n+                    simplex[simplex.length - 1] = reflected;\n+                    continue;\n+                }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                // If the reflected point is not better than the worst point\n \n-            // check convergence\n-                return;\n+                // Perform a contraction step\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, reflectedWorst) < 0) {\n+                    // If the contracted point is better than the worst point\n+\n+                    // replace the worst point with the contracted point\n+                    simplex[simplex.length - 1] = contracted;\n+                    continue;\n+                }\n+\n+                // If the contracted point is not better than the worst point\n+\n+                // Perform a reduction step\n+                final RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];\n+                newSimplex[0] = best;\n+                for (int i = 1; i < newSimplex.length; i++) {\n+                    newSimplex[i] = new RealPointValuePair(original[i - 1].getPoint(), original[i - 1].getValue());\n+                    for (int j = 0; j < original[i - 1].getPointRef().length; j++) {\n+                        newSimplex[i].getPointRef()[j] = best.getPoint()[j] + sigma * (original[i - 1].getPoint()[j] - best.getPoint()[j]);\n+                    }\n+                    newSimplex[i] = new RealPointValuePair(newSimplex[i].getPoint(), computeObjectiveValue(newSimplex[i].getPoint()));\n+                }\n+\n+                simplex = newSimplex;\n             }\n \n+            // Check for convergence\n+            double max = 0;\n+            for (int i = 1; i < simplex.length; i++) {\n+                double[] x = simplex[i].getPoint();\n+                double[] y = simplex[0].getPoint();\n+                double dist = 0;\n+                for (int j = 0; j < x.length; j++) {\n+                    dist += FastMath.pow(x[j] - y[j], 2.0);\n+                }\n+                max = FastMath.max(max, dist);\n+            }\n+            if (FastMath.sqrt(max) <= getSimplexSizeTolerance()) {\n+                return;\n+            }\n         }\n \n-    }\n+        throw new OptimizationException(\"Maximum number of iterations has been exceeded\");\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}