{
    "patch": "return (NodeUtil.isFunctionExpression(n) || NodeUtil.isFunctionDeclaration(n))\n        && NodeUtil.getFunctionName(n) != null\n        && !(n.getParent() instanceof Node) // not a call or new expression\n        && !NodeUtil.isFunctionInvocation(n.getParent()); // not a call to the function",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..b53e6054 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,10 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+return (NodeUtil.isFunctionExpression(n) || NodeUtil.isFunctionDeclaration(n))\n+        && NodeUtil.getFunctionName(n) != null\n+        && !(n.getParent() instanceof Node) // not a call or new expression\n+        && !NodeUtil.isFunctionInvocation(n.getParent()); // not a call to the function\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}