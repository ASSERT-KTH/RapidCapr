{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n    double[] realEigenvalues = dec.getRealEigenvalues();\n    RealMatrix v = dec.getV();\n    for (int i = 0; i < n; i++) {\n        double realEigenvalue = realEigenvalues[i];\n        if (realEigenvalue < 0) {\n            throw new IllegalArgumentException(\"Input matrix is not positive definite\");\n        }\n        double sqrtEigenvalue = Math.sqrt(realEigenvalue);\n        RealVector eigenvector = v.getColumnVector(i);\n        RealVector sqrtEigenvector = eigenvector.mapMultiply(1/sqrtEigenvalue);\n        sqrt.setColumnVector(i, sqrtEigenvector);\n    }\n    return sqrt.multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..50133720f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n+    double[] realEigenvalues = dec.getRealEigenvalues();\n+    RealMatrix v = dec.getV();\n+    for (int i = 0; i < n; i++) {\n+        double realEigenvalue = realEigenvalues[i];\n+        if (realEigenvalue < 0) {\n+            throw new IllegalArgumentException(\"Input matrix is not positive definite\");\n+        }\n+        double sqrtEigenvalue = Math.sqrt(realEigenvalue);\n+        RealVector eigenvector = v.getColumnVector(i);\n+        RealVector sqrtEigenvector = eigenvector.mapMultiply(1/sqrtEigenvalue);\n+        sqrt.setColumnVector(i, sqrtEigenvector);\n     }\n+    return sqrt.multiply(v.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}