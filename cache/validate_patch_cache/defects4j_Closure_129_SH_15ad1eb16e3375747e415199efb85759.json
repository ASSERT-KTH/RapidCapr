{
    "patch": "      Node maybeCast = null;\n      Node arg = first.getNext();\n      if (arg != null && NodeUtil.isCast(arg)) {\n        maybeCast = arg;\n        arg = arg.getNext();\n      }\n\n      if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n      \n      if (arg == null && maybeCast == null) {\n        return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..c89544f6 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,19 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      Node maybeCast = null;\n+      Node arg = first.getNext();\n+      if (arg != null && NodeUtil.isCast(arg)) {\n+        maybeCast = arg;\n+        arg = arg.getNext();\n+      }\n+\n+      if (!NodeUtil.isGet(first)) {\n+        n.putBooleanProp(Node.FREE_CALL, true);\n+      }\n+      \n+      if (arg == null && maybeCast == null) {\n+        return;\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}