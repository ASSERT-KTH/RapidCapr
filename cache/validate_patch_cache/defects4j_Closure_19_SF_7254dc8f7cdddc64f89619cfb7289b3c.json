{
    "patch": "  protected void declareNameInScope(FlowScope scope, Node node, JSType type) {\n    switch (node.getToken()) {\n      case NAME:\n        scope.inferSlotType(node.getString(), type);\n        break;\n\n      case GETPROP:\n        String qualifiedName = node.getQualifiedName();\n        if (qualifiedName == null) {\n          throw new IllegalArgumentException(\"Invalid qualified name: \" + node);\n        }\n\n        JSType origType = node.getJSType();\n        origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;\n        scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n        break;\n\n      case THIS:\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"Node cannot be refined. \\n\" + node);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0345c855..d8c0ac96 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -155,25 +155,27 @@ public abstract class ChainableReverseAbstractInterpreter\n    * the given scope, as determined by {@link #getTypeIfRefinable}.\n    */\n   protected void declareNameInScope(FlowScope scope, Node node, JSType type) {\n-    switch (node.getType()) {\n-      case Token.NAME:\n+    switch (node.getToken()) {\n+      case NAME:\n         scope.inferSlotType(node.getString(), type);\n         break;\n \n-      case Token.GETPROP:\n+      case GETPROP:\n         String qualifiedName = node.getQualifiedName();\n-        Preconditions.checkNotNull(qualifiedName);\n+        if (qualifiedName == null) {\n+          throw new IllegalArgumentException(\"Invalid qualified name: \" + node);\n+        }\n \n         JSType origType = node.getJSType();\n         origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;\n         scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n         break;\n \n-        // \"this\" references aren't currently modeled in the CFG.\n+      case THIS:\n+        break;\n \n       default:\n-        throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n-            node.toStringTree());\n+        throw new IllegalArgumentException(\"Node cannot be refined. \\n\" + node);\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}