{
    "patch": "      if (NodeUtil.isObjectLitKey(parent, n) ||\n          NodeUtil.isObjectLitKey(parent.getParent(), parent) ||\n          NodeUtil.isCtorInit(parent)) {\n        return true;\n      }\n\n      boolean isMethod = NodeUtil.isMethodDeclaration(n);\n      Node returnAnnotation = null;\n      if (jsDoc != null) {\n        // Get the return type from the JSDoc.\n        isMethod |= jsDoc.isConstructor();\n        returnAnnotation = jsDoc.getReturnType();\n      }\n\n      if (isMethod || NodeUtil.referencesThis(n) || NodeUtil.hasAnyAnnotation(n) ||\n          isLendedFunction(n) || isLendedMethod(n)) {\n        return true;\n      }\n\n      if (returnAnnotation == null) {\n>>> [ INFILL ] <<<\n      }\n\n      return isSimpleFunction(parent) &&\n          countVars(parent.getFirstChild()) == 1;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..cea70e05 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,31 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isObjectLitKey(parent, n) ||\n+          NodeUtil.isObjectLitKey(parent.getParent(), parent) ||\n+          NodeUtil.isCtorInit(parent)) {\n+        return true;\n+      }\n+\n+      boolean isMethod = NodeUtil.isMethodDeclaration(n);\n+      Node returnAnnotation = null;\n+      if (jsDoc != null) {\n+        // Get the return type from the JSDoc.\n+        isMethod |= jsDoc.isConstructor();\n+        returnAnnotation = jsDoc.getReturnType();\n+      }\n+\n+      if (isMethod || NodeUtil.referencesThis(n) || NodeUtil.hasAnyAnnotation(n) ||\n+          isLendedFunction(n) || isLendedMethod(n)) {\n+        return true;\n+      }\n+\n+      if (returnAnnotation == null) {\n+>>> [ INFILL ] <<<\n+      }\n+\n+      return isSimpleFunction(parent) &&\n+          countVars(parent.getFirstChild()) == 1;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}