{
    "patch": "result = stream.getRemainingJSDocLine();\nwhile (result != null && (result.trim().isEmpty() || result.trim().startsWith(\"*\"))) {\n    result = stream.getRemainingJSDocLine();\n}\nif (result == null) {\n    throw new IllegalStateException(\"Unable to get remaining JSDoc line\");\n}\n\nresult = result.replaceAll(\"\\\\{T\\\\}\", \"\");\n// Check for JSC_TYPE_PARSE_ERROR warnings\nif (result.contains(\"JSC_TYPE_PARSE_ERROR\")) {\n    throw new IllegalStateException(\"JSC_TYPE_PARSE_ERROR. Bad type annotation. Unknown type T at externs line \" + stream.getLine() + \":\" + stream.getColumn());\n}\nresult = result.trim();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..08253351 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,20 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+result = stream.getRemainingJSDocLine();\n+while (result != null && (result.trim().isEmpty() || result.trim().startsWith(\"*\"))) {\n+    result = stream.getRemainingJSDocLine();\n+}\n+if (result == null) {\n+    throw new IllegalStateException(\"Unable to get remaining JSDoc line\");\n+}\n+\n+result = result.replaceAll(\"\\\\{T\\\\}\", \"\");\n+// Check for JSC_TYPE_PARSE_ERROR warnings\n+if (result.contains(\"JSC_TYPE_PARSE_ERROR\")) {\n+    throw new IllegalStateException(\"JSC_TYPE_PARSE_ERROR. Bad type annotation. Unknown type T at externs line \" + stream.getLine() + \":\" + stream.getColumn());\n+}\n+result = result.trim();\n     return result;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}