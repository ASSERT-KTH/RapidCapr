{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if (offsetLocal > offsetAdjusted) {\n            // search for the next DST boundary to incorporate any further\n            // DST changes\n            long nextLocalTransition = nextTransition(instantAdjusted);\n            if (nextLocalTransition <= instantLocal) {\n                // Next transition is further back, expand search\n                nextLocalTransition = nextTransition(instantLocal - 1);\n            }\n            if (nextLocalTransition > Long.MIN_VALUE + offsetLocal) {\n                int dstOffset = getOffset(nextLocalTransition - offsetLocal);\n                if (offsetLocal > dstOffset) {\n                    return offsetLocal;\n                }\n            }\n        }\n\n        // ensure that time is always after the gap\n        if (offsetAdjusted != offsetLocal) {\n            long nextTransition = nextTransition(instantLocal - offsetAdjusted);\n            if (nextTransition < instantAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..c2a68575 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,46 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int offsetLocal = getOffset(instantLocal);\n+\n+    // adjust instantLocal using the estimate and recalc the offset\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    // if the offsets differ, we must be near a DST boundary\n+    if (offsetLocal != offsetAdjusted) {\n+\n+        // we need to ensure that time is always after the DST gap\n+        // this happens naturally for positive offsets, but not for negative\n+        if (offsetLocal > offsetAdjusted) {\n+            // search for the next DST boundary to incorporate any further\n+            // DST changes\n+            long nextLocalTransition = nextTransition(instantAdjusted);\n+            if (nextLocalTransition <= instantLocal) {\n+                // Next transition is further back, expand search\n+                nextLocalTransition = nextTransition(instantLocal - 1);\n+            }\n+            if (nextLocalTransition > Long.MIN_VALUE + offsetLocal) {\n+                int dstOffset = getOffset(nextLocalTransition - offsetLocal);\n+                if (offsetLocal > dstOffset) {\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n+\n+        // ensure that time is always after the gap\n+        if (offsetAdjusted != offsetLocal) {\n+            long nextTransition = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextTransition < instantAdjusted) {\n+                return offsetLocal;\n+            }\n+        }\n+    }\n+\n+    return offsetAdjusted;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}