{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int maxTries = 5;\n    int tries = 0;\n    boolean outOfMemory = false;\n    RealMatrix sqrt = null;\n\n    // loop until either the max number of tries is reached or the square root is successfully computed\n    while (tries < maxTries && sqrt == null) {\n        try {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            sqrt = dec.getSquareRoot();\n            // Round small values to zero to reduce memory usage\n            final double epsilon = 1e-16;\n            int dim = sqrt.getRowDimension();\n            for (int i = 0; i < dim; i++) {\n                for (int j = 0; j < dim; j++) {\n                    if (FastMath.abs(sqrt.getEntry(i, j)) < epsilon) {\n                        sqrt.setEntry(i, j, 0.0);\n                    }\n                }\n            }\n        } catch (OutOfMemoryError e) {\n            // if out of memory is encountered on the first try, set the outOfMemory flag and try a few more times\n            if (tries == 0) {\n                System.err.println(\"Out of memory error: \" + e.getMessage() + \". Retrying up to \" + maxTries + \" more times.\");\n                outOfMemory = true;\n            } else {\n                System.err.println(\"Out of memory error: \" + e.getMessage() + \". Retrying...\");\n            }\n            tries++;\n            // wait for a bit before trying again\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException ex) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n\n    // if out of memory was initially encountered but we were still not able to compute the square root,\n    // log an error message and return the input matrix\n    if (outOfMemory && sqrt == null) {\n        System.err.println(\"Could not compute square root after \" + maxTries + \" attempts due to out-of-memory errors. Returning input matrix.\");\n        return m;\n    }\n\n    // if the square root was not computed successfully, simply return the input matrix\n    if (sqrt == null) {\n        return m;\n    }\n\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c3e2a4883 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,57 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int maxTries = 5;\n+    int tries = 0;\n+    boolean outOfMemory = false;\n+    RealMatrix sqrt = null;\n+\n+    // loop until either the max number of tries is reached or the square root is successfully computed\n+    while (tries < maxTries && sqrt == null) {\n+        try {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+            sqrt = dec.getSquareRoot();\n+            // Round small values to zero to reduce memory usage\n+            final double epsilon = 1e-16;\n+            int dim = sqrt.getRowDimension();\n+            for (int i = 0; i < dim; i++) {\n+                for (int j = 0; j < dim; j++) {\n+                    if (FastMath.abs(sqrt.getEntry(i, j)) < epsilon) {\n+                        sqrt.setEntry(i, j, 0.0);\n+                    }\n+                }\n+            }\n+        } catch (OutOfMemoryError e) {\n+            // if out of memory is encountered on the first try, set the outOfMemory flag and try a few more times\n+            if (tries == 0) {\n+                System.err.println(\"Out of memory error: \" + e.getMessage() + \". Retrying up to \" + maxTries + \" more times.\");\n+                outOfMemory = true;\n+            } else {\n+                System.err.println(\"Out of memory error: \" + e.getMessage() + \". Retrying...\");\n+            }\n+            tries++;\n+            // wait for a bit before trying again\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException ex) {\n+                Thread.currentThread().interrupt();\n+            }\n+        }\n+    }\n+\n+    // if out of memory was initially encountered but we were still not able to compute the square root,\n+    // log an error message and return the input matrix\n+    if (outOfMemory && sqrt == null) {\n+        System.err.println(\"Could not compute square root after \" + maxTries + \" attempts due to out-of-memory errors. Returning input matrix.\");\n+        return m;\n+    }\n+\n+    // if the square root was not computed successfully, simply return the input matrix\n+    if (sqrt == null) {\n+        return m;\n     }\n+\n+    return sqrt;\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}