{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  boolean isFoldable = false;\n\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node child = n.getFirstChild();\n\n    if (NodeUtil.isExpressionNode(child) || NodeUtil.isNameDeclaration(child) ||\n        (NodeUtil.isTypedVar(child) && NodeUtil.hasOneChild(child))) {\n      for (Node node = child; node != null; node = NodeUtil.getNextNode(n, node)) {\n        if (!NodeUtil.isExpressionNode(node) && !NodeUtil.isNameDeclaration(node) &&\n            !(NodeUtil.isTypedVar(node) && NodeUtil.hasOneChild(node)) && !NodeUtil.isEmpty(node)) {\n          return false;\n        }\n      }\n\n      isFoldable = true;\n    }\n  }\n\n  return isFoldable;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..3301303f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,28 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  boolean isFoldable = false;\n+\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node child = n.getFirstChild();\n+\n+    if (NodeUtil.isExpressionNode(child) || NodeUtil.isNameDeclaration(child) ||\n+        (NodeUtil.isTypedVar(child) && NodeUtil.hasOneChild(child))) {\n+      for (Node node = child; node != null; node = NodeUtil.getNextNode(n, node)) {\n+        if (!NodeUtil.isExpressionNode(node) && !NodeUtil.isNameDeclaration(node) &&\n+            !(NodeUtil.isTypedVar(node) && NodeUtil.hasOneChild(node)) && !NodeUtil.isEmpty(node)) {\n+          return false;\n+        }\n       }\n-    }\n \n-    return false;\n+      isFoldable = true;\n+    }\n   }\n \n+  return isFoldable;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}