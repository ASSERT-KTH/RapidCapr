{
    "patch": "Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n\n      // Identify the index of the last referenced parameter.\n      // Parameters after that index can be safely removed.\n      int lastUsedIndex = -1;\n      int i = 0;\n      for (Node child = argList.getFirstChild(); child != null; child = child.getNext()) {\n        if (referenced.contains(fnScope.getVar(child.getString()))) {\n          lastUsedIndex = i;\n        } else if (lastUsedIndex >= 0) {\n          // Parameter after the last used one found, which means we can remove it.\n          argList.removeChild(child);\n          compiler.reportCodeChange();\n        }\n        i++;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b064dcc2 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,32 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+\n+      // Identify the index of the last referenced parameter.\n+      // Parameters after that index can be safely removed.\n+      int lastUsedIndex = -1;\n+      int i = 0;\n+      for (Node child = argList.getFirstChild(); child != null; child = child.getNext()) {\n+        if (referenced.contains(fnScope.getVar(child.getString()))) {\n+          lastUsedIndex = i;\n+        } else if (lastUsedIndex >= 0) {\n+          // Parameter after the last used one found, which means we can remove it.\n+          argList.removeChild(child);\n+          compiler.reportCodeChange();\n+        }\n+        i++;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}