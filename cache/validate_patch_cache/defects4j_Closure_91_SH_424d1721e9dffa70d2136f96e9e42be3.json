{
    "patch": "      if (NodeUtil.isFunctionDeclaration(n)) {\n        // don't traverse function declarations that are getting assigned to an object field\n        return NodeUtil.getParentOf(n).isScript();\n      } else if (NodeUtil.isNameDeclaration(n) || NodeUtil.isClassDeclaration(n)) {\n        // don't traverse declarations that aren't top-level\n        return NodeUtil.getEnclosingType(n, Token.SCRIPT) != null;\n      } else {\n        // traverse function expressions and arrow functions\n        return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..3fe9c0b9 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,15 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isFunctionDeclaration(n)) {\n+        // don't traverse function declarations that are getting assigned to an object field\n+        return NodeUtil.getParentOf(n).isScript();\n+      } else if (NodeUtil.isNameDeclaration(n) || NodeUtil.isClassDeclaration(n)) {\n+        // don't traverse declarations that aren't top-level\n+        return NodeUtil.getEnclosingType(n, Token.SCRIPT) != null;\n+      } else {\n+        // traverse function expressions and arrow functions\n+        return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}