{
    "patch": "public static String getProperty(String key) throws IOException {\n    String propFileName = \"config.properties\";\n    InputStream inputStream = ConfigurationManager.class.getClassLoader().getResourceAsStream(propFileName);\n    if (inputStream != null) {\n        Properties properties = new Properties();\n        properties.load(inputStream);\n        return properties.getProperty(key);\n    } else {\n        throw new IOException(\"property file '\" + propFileName + \"' not found in the classpath\");\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2f1282ed 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getProperty(String key) throws IOException {\n+    String propFileName = \"config.properties\";\n+    InputStream inputStream = ConfigurationManager.class.getClassLoader().getResourceAsStream(propFileName);\n+    if (inputStream != null) {\n+        Properties properties = new Properties();\n+        properties.load(inputStream);\n+        return properties.getProperty(key);\n+    } else {\n+        throw new IOException(\"property file '\" + propFileName + \"' not found in the classpath\");\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}