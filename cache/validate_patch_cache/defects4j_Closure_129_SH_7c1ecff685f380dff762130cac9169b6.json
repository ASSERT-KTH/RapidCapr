{
    "patch": "    if (NodeUtil.isGet(first) && NodeUtil.isTypeof(first.getFirstChild())) {\n      n.putBooleanProp(Node.FREE_CALL, true);\n    } else if (!NodeUtil.isGet(first)) {\n      n.putBooleanProp(Node.FREE_CALL, true);\n    }\n\n    // Keep track of the context in which eval is called. It is important\n    // to distinguish between \"(0, eval)()\" and \"eval()\".\n    if (first.isName() &&\n        \"eval\".equals(first.getString())) {\n      first.putBooleanProp(Node.DIRECT_EVAL, true);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..27a605e5 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,17 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+    if (NodeUtil.isGet(first) && NodeUtil.isTypeof(first.getFirstChild())) {\n+      n.putBooleanProp(Node.FREE_CALL, true);\n+    } else if (!NodeUtil.isGet(first)) {\n+      n.putBooleanProp(Node.FREE_CALL, true);\n+    }\n+\n+    // Keep track of the context in which eval is called. It is important\n+    // to distinguish between \"(0, eval)()\" and \"eval()\".\n+    if (first.isName() &&\n+        \"eval\".equals(first.getString())) {\n+      first.putBooleanProp(Node.DIRECT_EVAL, true);\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}