{
    "patch": "public static Object getReturnValue(String methodName, Class<?>[] paramTypes, Object[] args) throws Throwable {\n    try {\n        Method method = Class.forName(\"com.mycompany.MyClass\").getMethod(methodName, paramTypes);\n        Object object = method.invoke(null, args);\n        return object;\n    } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | ClassNotFoundException ex) {\n        throw new Throwable(ex);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..3bac2cd9c 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,15 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Object getReturnValue(String methodName, Class<?>[] paramTypes, Object[] args) throws Throwable {\n+    try {\n+        Method method = Class.forName(\"com.mycompany.MyClass\").getMethod(methodName, paramTypes);\n+        Object object = method.invoke(null, args);\n+        return object;\n+    } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | ClassNotFoundException ex) {\n+        throw new Throwable(ex);\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}