{
    "patch": "public Fraction reduce() {\n    int numerator = this.numerator;\n    int denominator = this.denominator;\n    if (numerator == 0) {\n        return new Fraction(0, 1);\n    }\n    int sign = 1;\n    if (numerator < 0) {\n        sign = -sign;\n        numerator = -numerator;\n    }\n    if (denominator < 0) {\n        sign = -sign;\n        denominator = -denominator;\n    }\n    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n    numerator /= gcd;\n    denominator /= gcd;\n    numerator *= sign;\n    return new Fraction(numerator, denominator);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..5d4046c7 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,13 +462,27 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n-    }\n+public Fraction reduce() {\n+    int numerator = this.numerator;\n+    int denominator = this.denominator;\n+    if (numerator == 0) {\n+        return new Fraction(0, 1);\n+    }\n+    int sign = 1;\n+    if (numerator < 0) {\n+        sign = -sign;\n+        numerator = -numerator;\n+    }\n+    if (denominator < 0) {\n+        sign = -sign;\n+        denominator = -denominator;\n+    }\n+    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n+    numerator /= gcd;\n+    denominator /= gcd;\n+    numerator *= sign;\n+    return new Fraction(numerator, denominator);\n+}\n \n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<-2/3> was not:<-2/3>",
    "test_result": "FAIL"
}