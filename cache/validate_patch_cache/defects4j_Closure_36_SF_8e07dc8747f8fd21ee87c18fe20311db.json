{
    "patch": "private boolean canMoveModerately(Reference initialization, Reference reference) {\n  Node value = initialization.getAssignedValue();\n  if (NodeUtil.isControlStructureCodeBlock(reference.getScopeRoot())) {\n    return false;\n  }\n\n  if (!value.isCommutative()) {\n    Node currentValueParent = getCurrentValueParent(reference.getNode(), reference.getScopeRoot());\n    if (currentValueParent == null || !NodeUtil.isExpressionNode(currentValueParent)) {\n      return false;\n    }\n  }\n\n  if (!NodeUtil.mayBeString(value) && !value.isNumber() && !NodeUtil.isObjectLitKey(value)\n      && !NodeUtil.isImmutableValue(value)) {\n    return false;\n  }\n\n  if (value.isObjectLit() && reference.getParent().isGetElem()) {\n    return false;\n  }\n\n  if (initialization.getParent().isFor()\n      && initialization.getParent().getFirstChild() == initialization.getNode()\n      && reference.getNode() == reference.getGrandparent().getLastChild()) {\n    return false;\n  }\n\n  return true;\n}\n\n/** \n * Gets the current parent node of a given reference of an inlineable variable.\n * This is either the statement node of the reference, or the closest ancestor\n * that is an expression.\n * \n * @param referenceNode The node being inlined.\n * @param scopeRoot The root of the scope containing the reference.\n * @return The node that is the current parent of the reference during inlining.\n */\nprivate Node getCurrentValueParent(Node referenceNode, Node scopeRoot) {\n  Node currentValueParent = referenceNode;\n  while (true) {\n    Node parent = currentValueParent.getParent();\n    if (parent == null || NodeUtil.isStatementBlock(parent)) {\n      break;\n    }\n\n    if (NodeUtil.isControlStructure(parent) && !parent.isSwitch()) {\n      if (parent.getFirstChild() == currentValueParent) {\n        currentValueParent = parent;\n      } else {\n        break;\n      }\n    } else if (parent.isLabel()) {\n      if (parent.getFirstChild() == currentValueParent) {\n        currentValueParent = parent;\n      } else {\n        break;\n      }\n    } else if (parent.isTry()) {\n      Node catchNode = parent.getLastChild();\n      if (catchNode != null && catchNode.hasChildren()\n          && catchNode.getFirstChild().isBlock()\n          && catchNode.getFirstChild().getFirstChild() == currentValueParent) {\n        currentValueParent = catchNode.getFirstChild();\n      } else {\n        break;\n      }\n    } else if (currentValueParent.isCatch()) {\n      break;\n    } else if (parent.isExprResult()) {\n      if (parent.getParent() == scopeRoot\n          && parent.getFirstChild() == currentValueParent) {\n        // We are currently inlining an expression statement, so remove it.\n        // e.g. `var x = 42;` is being inlined into `foo(x);`, where `foo(x);`\n        // is the current node.\n        // We want to inline `42` directly.\n        currentValueParent = parent;\n      } else {\n        break;\n      }\n    } else if (NodeUtil.isExpressionNode(parent)) {\n      currentValueParent = parent;\n    } else {\n      break;\n    }\n  }\n\n  return currentValueParent;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..e42bfc0d 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -516,68 +516,97 @@ class InlineVariables implements CompilerPass {\n      * @return true if the provided reference and declaration can be safely\n      *         inlined according to our criteria\n      */\n-    private boolean canInline(\n-        Reference declaration,\n-        Reference initialization,\n-        Reference reference) {\n-      if (!isValidDeclaration(declaration)\n-          || !isValidInitialization(initialization)\n-          || !isValidReference(reference)) {\n-        return false;\n-      }\n+private boolean canMoveModerately(Reference initialization, Reference reference) {\n+  Node value = initialization.getAssignedValue();\n+  if (NodeUtil.isControlStructureCodeBlock(reference.getScopeRoot())) {\n+    return false;\n+  }\n \n-      // If the value is read more than once, skip it.\n-      // VAR declarations and EXPR_RESULT don't need the value, but other\n-      // ASSIGN expressions parents do.\n-      if (declaration != initialization &&\n-          !initialization.getGrandparent().isExprResult()) {\n-        return false;\n-      }\n+  if (!value.isCommutative()) {\n+    Node currentValueParent = getCurrentValueParent(reference.getNode(), reference.getScopeRoot());\n+    if (currentValueParent == null || !NodeUtil.isExpressionNode(currentValueParent)) {\n+      return false;\n+    }\n+  }\n \n-      // Be very conservative and do no cross control structures or\n-      // scope boundaries\n-      if (declaration.getBasicBlock() != initialization.getBasicBlock()\n-          || declaration.getBasicBlock() != reference.getBasicBlock()) {\n-        return false;\n-      }\n+  if (!NodeUtil.mayBeString(value) && !value.isNumber() && !NodeUtil.isObjectLitKey(value)\n+      && !NodeUtil.isImmutableValue(value)) {\n+    return false;\n+  }\n \n-      // Do not inline into a call node. This would change\n-      // the context in which it was being called. For example,\n-      //   var a = b.c;\n-      //   a();\n-      // should not be inlined, because it calls a in the context of b\n-      // rather than the context of the window.\n-      //   var a = b.c;\n-      //   f(a)\n-      // is ok.\n-      Node value = initialization.getAssignedValue();\n-      Preconditions.checkState(value != null);\n-      if (value.isGetProp()\n-          && reference.getParent().isCall()\n-          && reference.getParent().getFirstChild() == reference.getNode()) {\n-        return false;\n-      }\n+  if (value.isObjectLit() && reference.getParent().isGetElem()) {\n+    return false;\n+  }\n \n-      if (value.isFunction()) {\n-        Node callNode = reference.getParent();\n-        if (reference.getParent().isCall()) {\n-          CodingConvention convention = compiler.getCodingConvention();\n-          // Bug 2388531: Don't inline subclass definitions into class defining\n-          // calls as this confused class removing logic.\n-          SubclassRelationship relationship =\n-              convention.getClassesDefinedByCall(callNode);\n-          if (relationship != null) {\n-            return false;\n-          }\n+  if (initialization.getParent().isFor()\n+      && initialization.getParent().getFirstChild() == initialization.getNode()\n+      && reference.getNode() == reference.getGrandparent().getLastChild()) {\n+    return false;\n+  }\n \n-          // issue 668: Don't inline singleton getter methods\n-          // calls as this confused class removing logic.\n-        }\n-      }\n+  return true;\n+}\n \n-      return canMoveAggressively(value) ||\n-          canMoveModerately(initialization, reference);\n+/** \n+ * Gets the current parent node of a given reference of an inlineable variable.\n+ * This is either the statement node of the reference, or the closest ancestor\n+ * that is an expression.\n+ * \n+ * @param referenceNode The node being inlined.\n+ * @param scopeRoot The root of the scope containing the reference.\n+ * @return The node that is the current parent of the reference during inlining.\n+ */\n+private Node getCurrentValueParent(Node referenceNode, Node scopeRoot) {\n+  Node currentValueParent = referenceNode;\n+  while (true) {\n+    Node parent = currentValueParent.getParent();\n+    if (parent == null || NodeUtil.isStatementBlock(parent)) {\n+      break;\n+    }\n+\n+    if (NodeUtil.isControlStructure(parent) && !parent.isSwitch()) {\n+      if (parent.getFirstChild() == currentValueParent) {\n+        currentValueParent = parent;\n+      } else {\n+        break;\n+      }\n+    } else if (parent.isLabel()) {\n+      if (parent.getFirstChild() == currentValueParent) {\n+        currentValueParent = parent;\n+      } else {\n+        break;\n+      }\n+    } else if (parent.isTry()) {\n+      Node catchNode = parent.getLastChild();\n+      if (catchNode != null && catchNode.hasChildren()\n+          && catchNode.getFirstChild().isBlock()\n+          && catchNode.getFirstChild().getFirstChild() == currentValueParent) {\n+        currentValueParent = catchNode.getFirstChild();\n+      } else {\n+        break;\n+      }\n+    } else if (currentValueParent.isCatch()) {\n+      break;\n+    } else if (parent.isExprResult()) {\n+      if (parent.getParent() == scopeRoot\n+          && parent.getFirstChild() == currentValueParent) {\n+        // We are currently inlining an expression statement, so remove it.\n+        // e.g. `var x = 42;` is being inlined into `foo(x);`, where `foo(x);`\n+        // is the current node.\n+        // We want to inline `42` directly.\n+        currentValueParent = parent;\n+      } else {\n+        break;\n+      }\n+    } else if (NodeUtil.isExpressionNode(parent)) {\n+      currentValueParent = parent;\n+    } else {\n+      break;\n     }\n+  }\n+\n+  return currentValueParent;\n+}\n \n     /**\n      * If the value is a literal, we can cross more boundaries to inline it.",
    "result_reason": "error: method canMoveModerately(Reference,Reference) is already defined in class InlineVariables.InliningBehavior",
    "test_result": "ERROR"
}