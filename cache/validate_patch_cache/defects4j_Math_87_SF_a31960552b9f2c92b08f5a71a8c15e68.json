{
    "patch": "    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        double firstVal = Double.NaN;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            double entry = getEntry(i, col);\n            if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                if (row == null) {\n                    row = i;\n                    firstVal = entry;\n                } else {\n                    if (MathUtils.compareTo(firstVal, entry, epsilon) == 0) {\n                        return null;\n                    }\n                }\n            }\n        }\n        return row;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 0ab790cd6..b8ec5c29b 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -271,12 +271,17 @@ class SimplexTableau implements Serializable {\n      */\n     private Integer getBasicRow(final int col) {\n         Integer row = null;\n+        double firstVal = Double.NaN;\n         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n+            double entry = getEntry(i, col);\n+            if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                 if (row == null) {\n-                row = i;\n+                    row = i;\n+                    firstVal = entry;\n                 } else {\n-                return null;\n+                    if (MathUtils.compareTo(firstVal, entry, epsilon) == 0) {\n+                        return null;\n+                    }\n                 }\n             }\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<4415726.625429548>",
    "test_result": "FAIL"
}