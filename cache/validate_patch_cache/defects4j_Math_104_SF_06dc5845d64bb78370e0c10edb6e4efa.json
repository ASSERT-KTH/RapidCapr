{
    "patch": "public class GammaFunction {\n    public static double regularizedGammaP(double a, double x) {\n        if (Double.isNaN(a) || Double.isNaN(x))\n            return Double.NaN;\n\n        if (a <= 0 || x < 0)\n            return Double.NaN;\n\n        if (x == 0)\n            return 0;\n\n        if (x >= a + 1)\n            return 1 - regularizedGammaQ(a, x);\n\n        double c = 1, ans = 1, q = a + c, term = 0;\n        while (Math.abs(c / ans) > Double.MIN_NORMAL) {\n            double i = term + 1;\n            c *= x / i;\n            ans += c;\n            term = i;\n        }\n        return Math.exp(a * Math.log(x) - x - logGamma(a)) * ans;\n    }\n\n    public static double regularizedGammaQ(double a, double x) {\n        if (Double.isNaN(a) || Double.isNaN(x))\n            return Double.NaN;\n\n        if (a <= 0 || x < 0)\n            return Double.NaN;\n\n        if (x == 0)\n            return 1;\n\n        if (x < a + 1)\n            return 1 - regularizedGammaP(a, x);\n\n        double b = x + 1 - a, c = 1 / Double.MIN_NORMAL, d = 1 / b, h = d, i, ans;\n        for (i = 1; Math.abs(d / c) > Double.MIN_NORMAL; i++) {\n            ans = -i * (i - a);\n            b += 2;\n            d = ans * d + b;\n            c = b + ans / c;\n            d = 1 / d;\n            h *= d * c;\n        }\n        return h * Math.exp(a * Math.log(x) - x - logGamma(a));\n    }\n\n    public static double logGamma(double x) {\n        double[] c = { 1.0 / 12.0, -1.0 / 360.0, 1.0 / 1260.0, -1.0 / 1680.0, 1.0 / 1188.0, -691.0 / 360360.0,\n                1.0 / 156.0, -3617.0 / 122400.0 };\n        double z, sum;\n        double series = 0.0;\n        double j = 0.0;\n        double logSqrt2Pi = 0.9189385332046727;\n\n        if (x <= 0.0) {\n            return Double.NaN;\n        }\n\n        z = x;\n\n        while (z < 7.0) {\n            j = j + 1.0;\n            z = z + 1.0;\n        }\n        sum = c[7];\n        for (int i = 6; i >= 0; i--) {\n            sum *= z;\n            sum += c[i];\n        }\n        series = sum / z;\n\n        double halfLog2Pi = 0.5 * Math.log(2 * Math.PI);\n\n        return ((x - 0.5) * Math.log(x) - x + logSqrt2Pi + series) * Math.log(x);\n    }\n}\n",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..70b9b391e 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,86 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public class GammaFunction {\n+    public static double regularizedGammaP(double a, double x) {\n+        if (Double.isNaN(a) || Double.isNaN(x))\n+            return Double.NaN;\n+\n+        if (a <= 0 || x < 0)\n+            return Double.NaN;\n+\n+        if (x == 0)\n+            return 0;\n+\n+        if (x >= a + 1)\n+            return 1 - regularizedGammaQ(a, x);\n+\n+        double c = 1, ans = 1, q = a + c, term = 0;\n+        while (Math.abs(c / ans) > Double.MIN_NORMAL) {\n+            double i = term + 1;\n+            c *= x / i;\n+            ans += c;\n+            term = i;\n+        }\n+        return Math.exp(a * Math.log(x) - x - logGamma(a)) * ans;\n+    }\n+\n+    public static double regularizedGammaQ(double a, double x) {\n+        if (Double.isNaN(a) || Double.isNaN(x))\n+            return Double.NaN;\n+\n+        if (a <= 0 || x < 0)\n+            return Double.NaN;\n+\n+        if (x == 0)\n+            return 1;\n+\n+        if (x < a + 1)\n+            return 1 - regularizedGammaP(a, x);\n+\n+        double b = x + 1 - a, c = 1 / Double.MIN_NORMAL, d = 1 / b, h = d, i, ans;\n+        for (i = 1; Math.abs(d / c) > Double.MIN_NORMAL; i++) {\n+            ans = -i * (i - a);\n+            b += 2;\n+            d = ans * d + b;\n+            c = b + ans / c;\n+            d = 1 / d;\n+            h *= d * c;\n+        }\n+        return h * Math.exp(a * Math.log(x) - x - logGamma(a));\n+    }\n+\n+    public static double logGamma(double x) {\n+        double[] c = { 1.0 / 12.0, -1.0 / 360.0, 1.0 / 1260.0, -1.0 / 1680.0, 1.0 / 1188.0, -691.0 / 360360.0,\n+                1.0 / 156.0, -3617.0 / 122400.0 };\n+        double z, sum;\n+        double series = 0.0;\n+        double j = 0.0;\n+        double logSqrt2Pi = 0.9189385332046727;\n+\n+        if (x <= 0.0) {\n+            return Double.NaN;\n+        }\n+\n+        z = x;\n+\n+        while (z < 7.0) {\n+            j = j + 1.0;\n+            z = z + 1.0;\n+        }\n+        sum = c[7];\n+        for (int i = 6; i >= 0; i--) {\n+            sum *= z;\n+            sum += c[i];\n+        }\n+        series = sum / z;\n+\n+        double halfLog2Pi = 0.5 * Math.log(2 * Math.PI);\n+\n+        return ((x - 0.5) * Math.log(x) - x + logSqrt2Pi + series) * Math.log(x);\n+    }\n+}\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}