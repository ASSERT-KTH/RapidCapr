{
    "patch": "      if (n.isTry()) {\n        Node tryBlock = n.getFirstChild();\n        tryMinimizeExits(tryBlock, exitType, labelName);\n        Node allCatchNodes = NodeUtil.getCatchBlock(n);\n        if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n          Preconditions.checkState(allCatchNodes.hasOneChild());\n          Node catchNode = allCatchNodes.getFirstChild();\n          Node catchCodeBlock = catchNode.getLastChild();\n          tryMinimizeExits(catchCodeBlock, exitType, labelName);\n        }\n        Node finallyNode = NodeUtil.getFinallyBlock(n);\n        if (finallyNode != null) {\n          tryMinimizeExits(finallyNode, exitType, labelName);\n        }\n        return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..d89dc83b 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,21 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n+      if (n.isTry()) {\n+        Node tryBlock = n.getFirstChild();\n+        tryMinimizeExits(tryBlock, exitType, labelName);\n+        Node allCatchNodes = NodeUtil.getCatchBlock(n);\n+        if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n+          Preconditions.checkState(allCatchNodes.hasOneChild());\n+          Node catchNode = allCatchNodes.getFirstChild();\n+          Node catchCodeBlock = catchNode.getLastChild();\n+          tryMinimizeExits(catchCodeBlock, exitType, labelName);\n+        }\n+        Node finallyNode = NodeUtil.getFinallyBlock(n);\n+        if (finallyNode != null) {\n+          tryMinimizeExits(finallyNode, exitType, labelName);\n+        }\n+        return;\n     }\n \n     // Just a 'label'.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}