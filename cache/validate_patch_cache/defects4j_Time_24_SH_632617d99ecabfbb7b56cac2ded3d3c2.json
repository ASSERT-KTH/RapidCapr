{
    "patch": "            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                boolean override = false;\n                for (int i = 0; i < count; i++) {\n                    if (savedFields[i].isSaved()) {\n                        override = true;\n                        DurationField field = savedFields[i].iField.getDurationField();\n                        if (field == null || !field.isSupported()) {\n                            throw e;\n                        }\n                        savedFields[i].iValue = field.add(savedFields[i].iValue, 1);\n                        for (int j = i + 1; j < count; j++) {\n                            if (savedFields[i].equals(savedFields[j])) {\n                                savedFields[j].iValue = savedFields[i].iValue;\n                                savedFields[j].iSaved = false;\n                            }\n                        }\n                        break;\n                    }\n                }\n                if (override) {\n                    continue;\n                }\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..2125d8d7 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,32 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                boolean override = false;\n+                for (int i = 0; i < count; i++) {\n+                    if (savedFields[i].isSaved()) {\n+                        override = true;\n+                        DurationField field = savedFields[i].iField.getDurationField();\n+                        if (field == null || !field.isSupported()) {\n+                            throw e;\n+                        }\n+                        savedFields[i].iValue = field.add(savedFields[i].iValue, 1);\n+                        for (int j = i + 1; j < count; j++) {\n+                            if (savedFields[i].equals(savedFields[j])) {\n+                                savedFields[j].iValue = savedFields[i].iValue;\n+                                savedFields[j].iSaved = false;\n+                            }\n+                        }\n+                        break;\n+                    }\n+                }\n+                if (override) {\n+                    continue;\n+                }\n+                throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}