{
    "patch": "if (childType.isFunctionType()) {\n  if (child.getParent().isGetProp()) {\n    visitParameterList(t, n, functionType);\n    ensureTyped(t, n, functionType.getReturnType());\n  } else if (child.getParent().isGetElem()) {\n    report(t, n, FUNCTION_CALL_BAD_SIGNATURE, childType.toString());\n  } else {\n    boolean isConstructor = childType.isConstructor() && !childType.isNativeObjectType();\n    boolean hasExplicitThis = childType.isInstanceType()\n          && ((ObjectType) childType).hasProperty(\"this\", false);\n    boolean isConstructorWithReturnType = isConstructor\n          && !functionType.getReturnType().isVoidType()\n          && !functionType.getReturnType().isUnknownType();\n\n    if (isConstructor && !isConstructorWithReturnType) {\n      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n    } else if (hasExplicitThis) {\n      report(t, n, INSTANCE_METHOD_CALL_WITH_NON_INSTANCE, childType.toString());\n    } else {\n      // regular function call\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    }\n  }\n} else if (!childType.canBeCalled()) {\n  report(t, n, NOT_CALLABLE, childType.toString());\n  ensureTyped(t, n);\n} else {\n  ensureTyped(t, n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..3a426f01 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,36 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (childType.isFunctionType()) {\n+  if (child.getParent().isGetProp()) {\n+    visitParameterList(t, n, functionType);\n+    ensureTyped(t, n, functionType.getReturnType());\n+  } else if (child.getParent().isGetElem()) {\n+    report(t, n, FUNCTION_CALL_BAD_SIGNATURE, childType.toString());\n+  } else {\n+    boolean isConstructor = childType.isConstructor() && !childType.isNativeObjectType();\n+    boolean hasExplicitThis = childType.isInstanceType()\n+          && ((ObjectType) childType).hasProperty(\"this\", false);\n+    boolean isConstructorWithReturnType = isConstructor\n+          && !functionType.getReturnType().isVoidType()\n+          && !functionType.getReturnType().isUnknownType();\n+\n+    if (isConstructor && !isConstructorWithReturnType) {\n+      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+    } else if (hasExplicitThis) {\n+      report(t, n, INSTANCE_METHOD_CALL_WITH_NON_INSTANCE, childType.toString());\n+    } else {\n+      // regular function call\n+      visitParameterList(t, n, functionType);\n+      ensureTyped(t, n, functionType.getReturnType());\n+    }\n+  }\n+} else if (!childType.canBeCalled()) {\n+  report(t, n, NOT_CALLABLE, childType.toString());\n+  ensureTyped(t, n);\n+} else {\n+  ensureTyped(t, n);\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}