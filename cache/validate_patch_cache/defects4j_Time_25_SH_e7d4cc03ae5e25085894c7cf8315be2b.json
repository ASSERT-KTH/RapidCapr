{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we must be near a DST boundary\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal == nextAdjusted) {\n        return offsetAdjusted;\n    }\n    // Ensure that next transition is on or after current instant\n    if (nextLocal < instantLocal) {\n        nextLocal = nextTransition(nextLocal);\n    }\n    if (nextLocal <= instantAdjusted) {\n        return offsetLocal;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f7d50ad4 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // we must be near a DST boundary\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal == nextAdjusted) {\n+        return offsetAdjusted;\n+    }\n+    // Ensure that next transition is on or after current instant\n+    if (nextLocal < instantLocal) {\n+        nextLocal = nextTransition(nextLocal);\n+    }\n+    if (nextLocal <= instantAdjusted) {\n+        return offsetLocal;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-10-01T07:00:00.000",
    "test_result": "FAIL"
}