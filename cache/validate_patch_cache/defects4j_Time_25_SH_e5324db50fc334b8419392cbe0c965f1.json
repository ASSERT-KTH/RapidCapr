{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n                // Additional check to handle the case when\n                // nextLocal == nextAdjusted\n                // and the offset for nextLocal is wrong\n                // We need to check the offset at nextLocal + 1 minute\n                // If it differs from nextLocal offset, then we return the offsetAdjusted\n                if (nextLocal != Long.MAX_VALUE) {\n                    long nextLocalPlus1 = nextTransition(nextLocal + DateTimeConstants.MILLIS_PER_MINUTE);\n                    if (nextLocalPlus1 != nextLocal && nextLocalPlus1 != nextAdjusted) {\n                        return offsetLocal;\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b223260d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                // Additional check to handle the case when\n+                // nextLocal == nextAdjusted\n+                // and the offset for nextLocal is wrong\n+                // We need to check the offset at nextLocal + 1 minute\n+                // If it differs from nextLocal offset, then we return the offsetAdjusted\n+                if (nextLocal != Long.MAX_VALUE) {\n+                    long nextLocalPlus1 = nextTransition(nextLocal + DateTimeConstants.MILLIS_PER_MINUTE);\n+                    if (nextLocalPlus1 != nextLocal && nextLocalPlus1 != nextAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}