{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n            // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n\n            int oldYear = iChronology.getYear(instant);\n            int oldMonthOfYear = iChronology.getMonthOfYear(instant, oldYear);\n            int newYear = oldYear + ((oldMonthOfYear + valueToAdd - 1) / DateTimeConstants.MONTHS_PER_YEAR);\n            int newMonthOfYear = ((oldMonthOfYear + valueToAdd) % DateTimeConstants.MONTHS_PER_YEAR + DateTimeConstants.MONTHS_PER_YEAR) % DateTimeConstants.MONTHS_PER_YEAR + 1;\n            int newDayOfMonth = Math.min(iChronology.getDaysInYearMonth(newYear, newMonthOfYear), iChronology.getDayOfMonth(instant));\n            \n            instant = iChronology.getDateTimeMillis(newYear, newMonthOfYear, newDayOfMonth, \n                                                    iChronology.getMillisOfDay(instant));\n            \n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..be12f44b 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,7 +200,7 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n         // overridden as superclass algorithm can't handle\n         // 2004-02-29 + 48 months -> 2008-02-29 type dates\n         if (valueToAdd == 0) {\n@@ -212,7 +212,16 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n+\n+            int oldYear = iChronology.getYear(instant);\n+            int oldMonthOfYear = iChronology.getMonthOfYear(instant, oldYear);\n+            int newYear = oldYear + ((oldMonthOfYear + valueToAdd - 1) / DateTimeConstants.MONTHS_PER_YEAR);\n+            int newMonthOfYear = ((oldMonthOfYear + valueToAdd) % DateTimeConstants.MONTHS_PER_YEAR + DateTimeConstants.MONTHS_PER_YEAR) % DateTimeConstants.MONTHS_PER_YEAR + 1;\n+            int newDayOfMonth = Math.min(iChronology.getDaysInYearMonth(newYear, newMonthOfYear), iChronology.getDayOfMonth(instant));\n+            \n+            instant = iChronology.getDateTimeMillis(newYear, newMonthOfYear, newDayOfMonth, \n+                                                    iChronology.getMillisOfDay(instant));\n+            \n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}