{
    "patch": "protected BasePeriod(long duration) {\n    super();\n    iPeriodType = PeriodType.standard();\n    // set values here, to avoid issues with order of initialisation\n    iValues = new int[PeriodType.standard().size()];\n    Duration dur = Duration.standardDurationOf(duration);\n    iValues[DurationFieldType.years().getIndex()] = dur.getStandardYears();\n    iValues[DurationFieldType.months().getIndex()] = dur.getStandardMonths() % 12;\n    iValues[DurationFieldType.weeks().getIndex()] = Weeks.weeksBetween(\n        new DateTime(0L, ISOChronology.getInstanceUTC()),\n        new DateTime(duration, ISOChronology.getInstanceUTC())\n    ).getWeeks() % 52;\n    iValues[DurationFieldType.days().getIndex()] = dur.getStandardDays() % 7;\n    setPeriod(deriveFields());\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..590e7e22 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,21 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+protected BasePeriod(long duration) {\n+    super();\n+    iPeriodType = PeriodType.standard();\n+    // set values here, to avoid issues with order of initialisation\n+    iValues = new int[PeriodType.standard().size()];\n+    Duration dur = Duration.standardDurationOf(duration);\n+    iValues[DurationFieldType.years().getIndex()] = dur.getStandardYears();\n+    iValues[DurationFieldType.months().getIndex()] = dur.getStandardMonths() % 12;\n+    iValues[DurationFieldType.weeks().getIndex()] = Weeks.weeksBetween(\n+        new DateTime(0L, ISOChronology.getInstanceUTC()),\n+        new DateTime(duration, ISOChronology.getInstanceUTC())\n+    ).getWeeks() % 52;\n+    iValues[DurationFieldType.days().getIndex()] = dur.getStandardDays() % 7;\n+    setPeriod(deriveFields());\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}