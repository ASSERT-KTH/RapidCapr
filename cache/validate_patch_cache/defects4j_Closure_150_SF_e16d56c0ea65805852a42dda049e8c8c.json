{
    "patch": "      if (n.isParamList()) {\n        handleFunctionInputs(n);\n        return;\n      }\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (NodeUtil.isFunctionDeclaration(n)) {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..feca4345 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,21 +1440,16 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+      if (n.isParamList()) {\n+        handleFunctionInputs(n);\n         return;\n       }\n-\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          if (NodeUtil.isFunctionDeclaration(n)) {\n+            defineDeclaredFunction(n, parent);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n@@ -1462,8 +1457,8 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n-      }\n-    }\n+        default:\n+          break;\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}