{
    "patch": "if (cfa != null) {\n  // Create edge from fromNode to finallyNode\n  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n  // Create edge from finallyNode to immediate sibling or parent\n  if (finallyNode.getNext() != null) {\n      cfa.createEdge(finallyNode, Branch.UNCOND, computeFollowNode(fromNode, finallyNode.getNext(), cfa));\n  } else {\n      cfa.createEdge(finallyNode, Branch.UNCOND, computeFollowNode(fromNode, finallyNode.getParent(), cfa));\n  }\n} else {\n  return computeFollowNode(fromNode, parent.getLastChild(), cfa);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..8e7f6b1d 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,18 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  // Create edge from fromNode to finallyNode\n+  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+  // Create edge from finallyNode to immediate sibling or parent\n+  if (finallyNode.getNext() != null) {\n+      cfa.createEdge(finallyNode, Branch.UNCOND, computeFollowNode(fromNode, finallyNode.getNext(), cfa));\n+  } else {\n+      cfa.createEdge(finallyNode, Branch.UNCOND, computeFollowNode(fromNode, finallyNode.getParent(), cfa));\n+  }\n+} else {\n+  return computeFollowNode(fromNode, parent.getLastChild(), cfa);\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}