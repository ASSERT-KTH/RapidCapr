{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1) {\n        return 1 - regularizedGammaQ(a, x);\n    }\n    double n = 0;\n    double m = 1;\n    double d = x / a + 1;\n    double c = 1 / d;\n    double sum = c;\n    while (c / sum > Math.pow(10, -15)) {\n        ++n;\n        m *= x / (a + n);\n        c = m / (a + n);\n        sum += c;\n    }\n    return Math.exp(-x + a * Math.log(x) - gamma.logGamma(a)) * sum / a;\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1) {\n        return 1 - regularizedGammaP(a, x);\n    }\n    ContinuedFraction fraction = new ContinuedFraction() {\n        @Override\n        protected double getB(int n, double x) {\n            if (n % 2 == 0) {\n                return n * (b + n - a) * x / ((a + 2 * n - 1) * (a + 2 * n));\n            } else {\n                return -(a + n) * (a + b + n) * x / ((a + 2 * n) * (a + 2 * n + 1));\n            }\n        }\n        \n        @Override\n        protected double getA(int n, double x) {\n            return 1.0;\n        }\n    };\n    return 1 / fraction.evaluate(a, x, MathUtils.EPSILON, Integer.MAX_VALUE);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..f24dab88c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,57 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1) {\n+        return 1 - regularizedGammaQ(a, x);\n+    }\n+    double n = 0;\n+    double m = 1;\n+    double d = x / a + 1;\n+    double c = 1 / d;\n+    double sum = c;\n+    while (c / sum > Math.pow(10, -15)) {\n+        ++n;\n+        m *= x / (a + n);\n+        c = m / (a + n);\n+        sum += c;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - gamma.logGamma(a)) * sum / a;\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1) {\n+        return 1 - regularizedGammaP(a, x);\n+    }\n+    ContinuedFraction fraction = new ContinuedFraction() {\n+        @Override\n+        protected double getB(int n, double x) {\n+            if (n % 2 == 0) {\n+                return n * (b + n - a) * x / ((a + 2 * n - 1) * (a + 2 * n));\n+            } else {\n+                return -(a + n) * (a + b + n) * x / ((a + 2 * n) * (a + 2 * n + 1));\n+            }\n+        }\n+        \n+        @Override\n+        protected double getA(int n, double x) {\n+            return 1.0;\n+        }\n+    };\n+    return 1 / fraction.evaluate(a, x, MathUtils.EPSILON, Integer.MAX_VALUE);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}