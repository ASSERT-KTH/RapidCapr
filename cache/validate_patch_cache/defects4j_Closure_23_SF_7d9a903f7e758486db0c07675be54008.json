{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n\n    // Check if index is a non-negative integer\n    double index = right.getDouble();\n    if (index < 0 || Math.floor(index) != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n\n    // Check if index is within bounds of the array\n    int intIndex = (int) index;\n    if (left.isArrayLit()) {\n        if (intIndex >= left.getChildCount()) {\n            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n            return n;\n        }\n        Node elem = left.getChildAtIndex(intIndex);\n        if (elem.isEmpty()) {\n            return NodeUtil.newUndefinedNode(elem);\n        }\n        left.removeChild(elem);\n        n.getParent().replaceChild(n, elem);\n        reportCodeChange();\n        return elem;\n    } else if (left.isName()) {\n        String name = left.getString();\n        Scope hoistScope = getHoistScope(parent);\n        Var var = hoistScope.getVar(name);\n        if (var == null && !hoistScope.isDeclared(name, false)) {\n            error(REFERENCE_BEFORE_DECLARE_ERROR, left);\n            return n;\n        }\n        return n; // Name-based access can't be folded\n    } else {\n        // Unknown form of array access\n        return n;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..4835eb09 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,56 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n     if (isAssignmentTarget(n)) {\n-      return n;\n+        return n;\n     }\n-\n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+        // Sometimes people like to use complex expressions to index into\n+        // arrays, or strings to index into array methods.\n+        return n;\n     }\n \n+    // Check if index is a non-negative integer\n     double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    if (index < 0 || Math.floor(index) != index) {\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+    // Check if index is within bounds of the array\n+    int intIndex = (int) index;\n+    if (left.isArrayLit()) {\n+        if (intIndex >= left.getChildCount()) {\n+            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+            return n;\n+        }\n+        Node elem = left.getChildAtIndex(intIndex);\n+        if (elem.isEmpty()) {\n+            return NodeUtil.newUndefinedNode(elem);\n+        }\n+        left.removeChild(elem);\n+        n.getParent().replaceChild(n, elem);\n+        reportCodeChange();\n+        return elem;\n+    } else if (left.isName()) {\n+        String name = left.getString();\n+        Scope hoistScope = getHoistScope(parent);\n+        Var var = hoistScope.getVar(name);\n+        if (var == null && !hoistScope.isDeclared(name, false)) {\n+            error(REFERENCE_BEFORE_DECLARE_ERROR, left);\n+            return n;\n+        }\n+        return n; // Name-based access can't be folded\n     } else {\n-      left.removeChild(elem);\n+        // Unknown form of array access\n+        return n;\n     }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n-  }\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}