{
    "patch": "        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (lower > str.length()) {\n            return str + (appendToEnd != null ? appendToEnd : \"\");\n        }\n        if (upper < lower) {\n            upper = lower;\n        }\n        if (upper > str.length()) {\n            upper = str.length();\n        }\n        if (lower == upper) {\n            return str.substring(0, lower) + (appendToEnd != null ? appendToEnd : \"\");\n        }\n        StringBuilder result = new StringBuilder();\n        int index = StringUtils.indexOf(str, \" \", lower);\n        if (index == -1 || index > upper) {\n            result.append(str.substring(0, upper));\n            result.append(StringUtils.defaultString(appendToEnd));\n        } else {\n            result.append(str.substring(0, index));\n            result.append(StringUtils.defaultString(appendToEnd));\n            while (index < upper && index != -1) {\n                index = StringUtils.indexOf(str, \" \", index + 1);\n                if (index == -1 || index > upper) {\n                    result.append(str.substring(result.length(), upper));\n                    result.append(StringUtils.defaultString(appendToEnd));\n                } else {\n                    result.append(str.charAt(index));\n                    if (index < upper - appendToEnd.length()) {\n                        result.append(StringUtils.SPACE);\n                    }\n                }\n            }\n        }\n        return result.toString();",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..1d71ab60 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -613,6 +613,44 @@ public class WordUtils {\n \n         // if the lower value is greater than the length of the string,\n         // set to the length of the string\n+        // initial parameter checks\n+        if (str == null) {\n+            return null;\n+        }\n+        if (lower > str.length()) {\n+            return str + (appendToEnd != null ? appendToEnd : \"\");\n+        }\n+        if (upper < lower) {\n+            upper = lower;\n+        }\n+        if (upper > str.length()) {\n+            upper = str.length();\n+        }\n+        if (lower == upper) {\n+            return str.substring(0, lower) + (appendToEnd != null ? appendToEnd : \"\");\n+        }\n+        StringBuilder result = new StringBuilder();\n+        int index = StringUtils.indexOf(str, \" \", lower);\n+        if (index == -1 || index > upper) {\n+            result.append(str.substring(0, upper));\n+            result.append(StringUtils.defaultString(appendToEnd));\n+        } else {\n+            result.append(str.substring(0, index));\n+            result.append(StringUtils.defaultString(appendToEnd));\n+            while (index < upper && index != -1) {\n+                index = StringUtils.indexOf(str, \" \", index + 1);\n+                if (index == -1 || index > upper) {\n+                    result.append(str.substring(result.length(), upper));\n+                    result.append(StringUtils.defaultString(appendToEnd));\n+                } else {\n+                    result.append(str.charAt(index));\n+                    if (index < upper - appendToEnd.length()) {\n+                        result.append(StringUtils.SPACE);\n+                    }\n+                }\n+            }\n+        }\n+        return result.toString();\n         // if the upper value is -1 (i.e. no limit) or is greater\n         // than the length of the string, set to the length of the string\n         if (upper == -1 || upper > str.length()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}