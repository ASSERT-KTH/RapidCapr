{
    "patch": "            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n            incrementIterationsCounter();\n\n            final RealPointValuePair best = simplex[0];\n            final RealPointValuePair secondBest = simplex[n];\n            final RealPointValuePair worst = simplex[n + 1];\n\n            if (comparator.compare(best, secondBest) == 0 && comparator.compare(best, worst) == 0) {\n                // All points in the simplex are the same\n                return;\n            }\n\n            final double center[] = new double[n];\n            for (int i = 0; i < n; i++) {\n                double sum = 0;\n                for (int j = 0; j <= n; j++) {\n                    sum += simplex[j].getPoint()[i];\n                }\n                center[i] = sum / (n + 1);\n            }\n\n            // --- Reflection ---\n            final double[] reflected = new double[n];\n            for (int i = 0; i < n; i++) {\n                reflected[i] = center[i] * (1 + alpha) - alpha * worst.getPoint()[i];\n            }\n            final RealPointValuePair reflectedVertex = new RealPointValuePair(reflected, Double.NaN);\n\n            if (comparator.compare(best, reflectedVertex) <= 0\n                    && comparator.compare(reflectedVertex, secondBest) < 0) {\n                // Success: reflected vertex is better than the 2nd worst but not better than\n                // the best vertex\n                simplex[n + 1] = reflectedVertex;\n            }\n            // --- Expansion ---\n            else if (comparator.compare(reflectedVertex, best) < 0) {\n                final double[] expanded = new double[n];\n                for (int i = 0; i < n; i++) {\n                    expanded[i] = center[i] * (1 - gamma) + gamma * reflected[i];\n                }\n                simplex[n + 1] = new RealPointValuePair(expanded, Double.NaN);\n            }\n            // --- Contraction ---\n            else {\n                final double[] contracted = new double[n];\n                for (int i = 0; i < n; i++) {\n                    contracted[i] = center[i] * (1 - rho) + rho * worst.getPoint()[i];\n                }\n                if (comparator.compare(new RealPointValuePair(contracted, Double.NaN), worst) < 0) {\n                    simplex[n + 1] = new RealPointValuePair(contracted, Double.NaN);\n                } else {\n                    // --- Shrink ---\n                    for (int i = 1; i <= n; i++) {\n                        final double[] shrinked = new double[n];\n                        for (int j = 0; j < n; j++) {\n                            shrinked[j] = best.getPoint()[j] + sigma * (simplex[i].getPoint()[j] - best.getPoint()[j]);\n                        }\n                        simplex[i] = new RealPointValuePair(shrinked,\n                                Double.NaN);\n                    }\n                }\n            }\n\n            // Sort search interval\n            Arrays.sort(simplex, comparator);\n\n            // Check for convergence\n            final double[] bestPoint = simplex[0].getPoint();\n            final double[] secondBestPoint = simplex[1].getPoint();\n            final double maxDiff = FastMath.max(FastMath.abs(bestPoint[0] - secondBestPoint[0]),\n                    FastMath.abs(bestPoint[1] - secondBestPoint[1]));\n            if (maxDiff <= ftol) {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..d4fec983b 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,80 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n-\n             incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            final RealPointValuePair best = simplex[0];\n+            final RealPointValuePair secondBest = simplex[n];\n+            final RealPointValuePair worst = simplex[n + 1];\n \n+            if (comparator.compare(best, secondBest) == 0 && comparator.compare(best, worst) == 0) {\n+                // All points in the simplex are the same\n                 return;\n+            }\n \n+            final double center[] = new double[n];\n+            for (int i = 0; i < n; i++) {\n+                double sum = 0;\n+                for (int j = 0; j <= n; j++) {\n+                    sum += simplex[j].getPoint()[i];\n+                }\n+                center[i] = sum / (n + 1);\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            // --- Reflection ---\n+            final double[] reflected = new double[n];\n+            for (int i = 0; i < n; i++) {\n+                reflected[i] = center[i] * (1 + alpha) - alpha * worst.getPoint()[i];\n+            }\n+            final RealPointValuePair reflectedVertex = new RealPointValuePair(reflected, Double.NaN);\n \n-            // check convergence\n-                return;\n+            if (comparator.compare(best, reflectedVertex) <= 0\n+                    && comparator.compare(reflectedVertex, secondBest) < 0) {\n+                // Success: reflected vertex is better than the 2nd worst but not better than\n+                // the best vertex\n+                simplex[n + 1] = reflectedVertex;\n+            }\n+            // --- Expansion ---\n+            else if (comparator.compare(reflectedVertex, best) < 0) {\n+                final double[] expanded = new double[n];\n+                for (int i = 0; i < n; i++) {\n+                    expanded[i] = center[i] * (1 - gamma) + gamma * reflected[i];\n+                }\n+                simplex[n + 1] = new RealPointValuePair(expanded, Double.NaN);\n+            }\n+            // --- Contraction ---\n+            else {\n+                final double[] contracted = new double[n];\n+                for (int i = 0; i < n; i++) {\n+                    contracted[i] = center[i] * (1 - rho) + rho * worst.getPoint()[i];\n+                }\n+                if (comparator.compare(new RealPointValuePair(contracted, Double.NaN), worst) < 0) {\n+                    simplex[n + 1] = new RealPointValuePair(contracted, Double.NaN);\n+                } else {\n+                    // --- Shrink ---\n+                    for (int i = 1; i <= n; i++) {\n+                        final double[] shrinked = new double[n];\n+                        for (int j = 0; j < n; j++) {\n+                            shrinked[j] = best.getPoint()[j] + sigma * (simplex[i].getPoint()[j] - best.getPoint()[j]);\n+                        }\n+                        simplex[i] = new RealPointValuePair(shrinked,\n+                                Double.NaN);\n+                    }\n+                }\n             }\n \n-        }\n+            // Sort search interval\n+            Arrays.sort(simplex, comparator);\n \n-    }\n+            // Check for convergence\n+            final double[] bestPoint = simplex[0].getPoint();\n+            final double[] secondBestPoint = simplex[1].getPoint();\n+            final double maxDiff = FastMath.max(FastMath.abs(bestPoint[0] - secondBestPoint[0]),\n+                    FastMath.abs(bestPoint[1] - secondBestPoint[1]));\n+            if (maxDiff <= ftol) {\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}