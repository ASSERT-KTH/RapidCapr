{
    "patch": "            try {\n                boolean extended = (savedFields[0].iField.getType() == DateTimeFieldType.weekyear());\n                long endMillis = computeMillis(resetFields, text);\n                if (extended) {\n                    LocalDate date = new LocalDate(endMillis, iChrono);\n                    int year = savedFields[0].iValue;\n                    LocalDate newDate = iChrono.date().withWeekyear(date, year);\n                    if (newDate.getYear() != year) {\n                        throw new IllegalFieldValueException\n                            (DateTimeFieldType.weekyear(), Integer.valueOf(year), null, null);\n                    }\n                    endMillis = newDate.getLocalMillis();\n                }\n                return new LocalDate(endMillis, iChrono);\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..0b5573b7 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,26 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            try {\n+                boolean extended = (savedFields[0].iField.getType() == DateTimeFieldType.weekyear());\n+                long endMillis = computeMillis(resetFields, text);\n+                if (extended) {\n+                    LocalDate date = new LocalDate(endMillis, iChrono);\n+                    int year = savedFields[0].iValue;\n+                    LocalDate newDate = iChrono.date().withWeekyear(date, year);\n+                    if (newDate.getYear() != year) {\n+                        throw new IllegalFieldValueException\n+                            (DateTimeFieldType.weekyear(), Integer.valueOf(year), null, null);\n+                    }\n+                    endMillis = newDate.getLocalMillis();\n+                }\n+                return new LocalDate(endMillis, iChrono);\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}