{
    "patch": "  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent != null && parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.LP:\n      if (parent != null && parent.getType() == Token.EXPR_RESULT && parent.getParent().getType() != Token.FOR) {\n        Node grandparent = parent.getParent();\n        if (grandparent.getType() == Token.VAR && grandparent.getChildCount() > 1) {\n          defineVar(parent, grandparent);\n        }\n        handleFunctionInputs(parent);\n      }\n      break;\n    default:\n      break;\n  }\n  if (NodeUtil.isFunctionExpression(parent)) {\n      handleFunctionInputs(parent);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..10b00e86 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,35 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+  attachLiteralTypes(n);\n+  switch (n.getType()) {\n+    case Token.FUNCTION:\n+      if (parent != null && parent.getType() == Token.NAME) {\n+        return;\n       }\n+      defineDeclaredFunction(n, parent);\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.VAR:\n+      defineVar(n, parent);\n+      break;\n+    case Token.LP:\n+      if (parent != null && parent.getType() == Token.EXPR_RESULT && parent.getParent().getType() != Token.FOR) {\n+        Node grandparent = parent.getParent();\n+        if (grandparent.getType() == Token.VAR && grandparent.getChildCount() > 1) {\n+          defineVar(parent, grandparent);\n+        }\n+        handleFunctionInputs(parent);\n+      }\n+      break;\n+    default:\n+      break;\n+  }\n+  if (NodeUtil.isFunctionExpression(parent)) {\n+      handleFunctionInputs(parent);\n+  }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_DUP_VAR_DECLARATION. variable p redefined with type number, original definition at testcode:7 with type number at testcode line 7 : 27 expected:<0> but was:<1>",
    "test_result": "FAIL"
}