{
    "patch": "    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        return false;\n      }\n\n      int count = 0;\n      BasicBlock currentBlock = ref.getBasicBlock();\n\n      while (currentBlock != null) {\n        List<Node> blockStatements = currentBlock.getStatements();\n\n        int startIndex = 0;\n\n        // For the first block that we consider, we should skip any assignments before the one\n        // that assigns the variable for the first time.\n        if (currentBlock == ref.getBasicBlock()) {\n          for (int i = 0; i < blockStatements.size(); i++) {\n            if (blockStatements.get(i).getJSType() != null) {\n              startIndex = i;\n              break;\n            }\n          }\n        }\n\n        for (int i = startIndex; i < blockStatements.size(); i++) {\n          Node statement = blockStatements.get(i);\n          if (NodeUtil.isExpressionStatement(statement)) {\n            Node expr = statement.getFirstChild();\n            if (expr.isAssign() && expr.getFirstChild().matchesName(name)) {\n              count++;\n              if (count > 1) {\n                return false;\n              }\n            }\n          }\n        }\n\n        List<BasicBlock> successors = currentBlock.getSuccessors();\n        currentBlock = successors.size() == 1 ? successors.get(0) : null;\n      }\n      return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..49581bc1 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,53 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+    /**\n+     * @return Whether the variable is only assigned a value once for its\n+     *     lifetime.\n+     */\n+    boolean isAssignedOnceInLifetime() {\n+      Reference ref = getOneAndOnlyAssignment();\n+      if (ref == null) {\n+        return false;\n+      }\n+\n+      int count = 0;\n+      BasicBlock currentBlock = ref.getBasicBlock();\n+\n+      while (currentBlock != null) {\n+        List<Node> blockStatements = currentBlock.getStatements();\n+\n+        int startIndex = 0;\n+\n+        // For the first block that we consider, we should skip any assignments before the one\n+        // that assigns the variable for the first time.\n+        if (currentBlock == ref.getBasicBlock()) {\n+          for (int i = 0; i < blockStatements.size(); i++) {\n+            if (blockStatements.get(i).getJSType() != null) {\n+              startIndex = i;\n+              break;\n+            }\n+          }\n+        }\n+\n+        for (int i = startIndex; i < blockStatements.size(); i++) {\n+          Node statement = blockStatements.get(i);\n+          if (NodeUtil.isExpressionStatement(statement)) {\n+            Node expr = statement.getFirstChild();\n+            if (expr.isAssign() && expr.getFirstChild().matchesName(name)) {\n+              count++;\n+              if (count > 1) {\n+                return false;\n+              }\n+            }\n+          }\n+        }\n+\n+        List<BasicBlock> successors = currentBlock.getSuccessors();\n+        currentBlock = successors.size() == 1 ? successors.get(0) : null;\n+      }\n+      return true;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}