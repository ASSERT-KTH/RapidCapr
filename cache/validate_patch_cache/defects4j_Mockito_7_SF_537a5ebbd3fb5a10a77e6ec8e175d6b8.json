{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n\n    if (bounds.length == 0) {\n        return;\n    }\n\n    for (Type bound : bounds) {\n        registerTypeVariablesOn(bound);\n    }\n\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    } else {\n        Type genericSuperClass = getClass().getGenericSuperclass();\n\n        if (genericSuperClass instanceof ParameterizedType) {\n            ParameterizedType paramType = (ParameterizedType) genericSuperClass;\n            Type[] actualTypeArguments = paramType.getActualTypeArguments();\n\n            for (int i = 0; i < actualTypeArguments.length; i++) {\n                Type genericType = actualTypeArguments[i];\n\n                if (genericType instanceof TypeVariable) {\n                    TypeVariable<?> typeVar = (TypeVariable<?>) genericType;\n\n                    if (typeVar.getName().equals(typeVariable.getName())) {\n                        Type superClassBound = paramType.getRawType();\n                        Type[] superClassTypes = ((Class<?>) superClassBound).getTypeParameters();\n\n                        int index = Arrays.asList(superClassTypes).indexOf(typeVar);\n\n                        if (index >= 0) {\n                            readTypeVariablesOn(actualTypeArguments[index]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..ad7132ff7 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,50 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+\n+    if (bounds.length == 0) {\n+        return;\n+    }\n+\n+    for (Type bound : bounds) {\n+        registerTypeVariablesOn(bound);\n+    }\n+\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    } else {\n+        Type genericSuperClass = getClass().getGenericSuperclass();\n+\n+        if (genericSuperClass instanceof ParameterizedType) {\n+            ParameterizedType paramType = (ParameterizedType) genericSuperClass;\n+            Type[] actualTypeArguments = paramType.getActualTypeArguments();\n+\n+            for (int i = 0; i < actualTypeArguments.length; i++) {\n+                Type genericType = actualTypeArguments[i];\n+\n+                if (genericType instanceof TypeVariable) {\n+                    TypeVariable<?> typeVar = (TypeVariable<?>) genericType;\n+\n+                    if (typeVar.getName().equals(typeVariable.getName())) {\n+                        Type superClassBound = paramType.getRawType();\n+                        Type[] superClassTypes = ((Class<?>) superClassBound).getTypeParameters();\n+\n+                        int index = Arrays.asList(superClassTypes).indexOf(typeVar);\n+\n+                        if (index >= 0) {\n+                            readTypeVariablesOn(actualTypeArguments[index]);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}