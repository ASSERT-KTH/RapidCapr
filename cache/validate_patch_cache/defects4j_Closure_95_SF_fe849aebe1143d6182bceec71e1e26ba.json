{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n    Preconditions.checkArgument(inferred || type != null);\n\n    boolean shouldDeclareOnGlobalThis = false;\n    if (n.getType() == Token.NAME) {\n        Preconditions.checkArgument(\n                parent.getType() == Token.FUNCTION ||\n                parent.getType() == Token.VAR ||\n                parent.getType() == Token.LP ||\n                parent.getType() == Token.CATCH);\n        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n                (parent.getType() == Token.VAR ||\n                        parent.getType() == Token.FUNCTION);\n    } else {\n        Preconditions.checkArgument(\n                n.getType() == Token.GETPROP &&\n                        (parent.getType() == Token.ASSIGN ||\n                                parent.getType() == Token.EXPR_RESULT));\n    }\n    String variableName = n.getQualifiedName();\n    if (variableName == null) {\n        variableName = n.getString();\n    }\n    Preconditions.checkArgument(variableName != null && !variableName.isEmpty());\n\n    Scope scopeToDeclareIn = scope;\n    if (parent != null && parent.getType() == Token.GETELEM) {\n        if (scopeToDeclareIn.isDeclared(variableName, false)) {\n            // The variable has already been declared in the current scope,\n            // so we can just return.\n            return;\n        } else if (!inferred) {\n            // If the variable has not been declared yet, and it is not inferred,\n            // we need to defer type checking until it is actually declared.\n            setDeferredType(n, type);\n            return;\n        }\n    }\n\n    CompilerInput input = compiler.getInput(sourceName);\n    if (inferred && type == null) {\n        // If the type is inferred, but has not yet been determined, we cannot declare\n        // the variable yet. Instead, we need to defer type checking until the type is inferred.\n        if (n.getType() == Token.NAME) {\n            scopeToDeclareIn.declare(variableName, n, unknownType, input, true);\n            setDeferredType(n, unknownType);\n        } else {\n            setDeferredType(n, unknownType);\n        }\n        return;\n    }\n\n    Var oldVar = scopeToDeclareIn.getVar(variableName);\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        // If the variable has already been declared in the current scope,\n        // but with a different type, we need to report an error.\n        if (!oldVar.getType().equals(type)) {\n            validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n            return;\n        }\n        // If the variable has already been declared in the current scope,\n        // with the same type as the one we want to declare it with, we can just return.\n        return;\n    }\n\n    if (!inferred) {\n        setDeferredType(n, type);\n    }\n\n    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n    if (shouldDeclareOnGlobalThis) {\n        ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n        boolean isExtern = input.isExtern();\n        if (inferred) {\n            globalThis.defineInferredProperty(variableName,\n                    type == null ?\n                            getNativeType(JSTypeNative.NO_TYPE) :\n                            type,\n                    isExtern);\n        } else {\n            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n        }\n    }\n\n    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n        FunctionType fnType = (FunctionType) type;\n        if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                    fnType.getPrototype(), input,\n                    superClassCtor == null ||\n                            superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..1fac99bd 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,102 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+    Preconditions.checkArgument(inferred || type != null);\n \n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n+    boolean shouldDeclareOnGlobalThis = false;\n+    if (n.getType() == Token.NAME) {\n         Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n+                parent.getType() == Token.FUNCTION ||\n+                parent.getType() == Token.VAR ||\n+                parent.getType() == Token.LP ||\n+                parent.getType() == Token.CATCH);\n         shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n+                (parent.getType() == Token.VAR ||\n+                        parent.getType() == Token.FUNCTION);\n+    } else {\n         Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n-      }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n+                n.getType() == Token.GETPROP &&\n+                        (parent.getType() == Token.ASSIGN ||\n+                                parent.getType() == Token.EXPR_RESULT));\n+    }\n+    String variableName = n.getQualifiedName();\n+    if (variableName == null) {\n+        variableName = n.getString();\n+    }\n+    Preconditions.checkArgument(variableName != null && !variableName.isEmpty());\n+\n+    Scope scopeToDeclareIn = scope;\n+    if (parent != null && parent.getType() == Token.GETELEM) {\n+        if (scopeToDeclareIn.isDeclared(variableName, false)) {\n+            // The variable has already been declared in the current scope,\n+            // so we can just return.\n+            return;\n+        } else if (!inferred) {\n+            // If the variable has not been declared yet, and it is not inferred,\n+            // we need to defer type checking until it is actually declared.\n+            setDeferredType(n, type);\n+            return;\n+        }\n+    }\n+\n+    CompilerInput input = compiler.getInput(sourceName);\n+    if (inferred && type == null) {\n+        // If the type is inferred, but has not yet been determined, we cannot declare\n+        // the variable yet. Instead, we need to defer type checking until the type is inferred.\n+        if (n.getType() == Token.NAME) {\n+            scopeToDeclareIn.declare(variableName, n, unknownType, input, true);\n+            setDeferredType(n, unknownType);\n+        } else {\n+            setDeferredType(n, unknownType);\n         }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n+        return;\n+    }\n+\n+    Var oldVar = scopeToDeclareIn.getVar(variableName);\n+    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n+        // If the variable has already been declared in the current scope,\n+        // but with a different type, we need to report an error.\n+        if (!oldVar.getType().equals(type)) {\n+            validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n+            return;\n+        }\n+        // If the variable has already been declared in the current scope,\n+        // with the same type as the one we want to declare it with, we can just return.\n+        return;\n+    }\n+\n+    if (!inferred) {\n+        setDeferredType(n, type);\n+    }\n+\n+    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+\n+    if (shouldDeclareOnGlobalThis) {\n+        ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+        boolean isExtern = input.isExtern();\n+        if (inferred) {\n             globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n+                    type == null ?\n+                            getNativeType(JSTypeNative.NO_TYPE) :\n+                            type,\n+                    isExtern);\n+        } else {\n             globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n         }\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n+    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n+        FunctionType fnType = (FunctionType) type;\n+        if (fnType.isConstructor() || fnType.isInterface()) {\n             FunctionType superClassCtor = fnType.getSuperClassConstructor();\n             scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n+                    fnType.getPrototype(), input,\n+                    superClassCtor == null ||\n+                            superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n         }\n-      }\n     }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}