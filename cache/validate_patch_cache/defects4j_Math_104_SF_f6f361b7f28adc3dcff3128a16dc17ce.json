{
    "patch": "public static double regularizedGamma(double a, double x) {\n    final double EPSILON = 1e-15;\n    final double MAX_ITERATIONS = 1000.0;\n\n    double ans = 0.0;\n    double gln = Gamma.logGamma(a);\n\n    if (x > 0.0) {\n        double a1 = a - 1.0;\n        double lng = Gamma.logGamma(a1);\n        double a2 = x + a1 + 0.5;\n        double a3 = (a1 + 0.5) * Math.log(a2) - a2;\n        double a4 = Math.log(EPSILON);\n\n        ans = Math.exp(a3 + gln - lng);\n\n        if ((x / a) > 1.0 && ans > a4) {\n            ans = 1.0 - regularizedGamma(a, 1.0 - x);\n        }\n\n    } else if (x == 0.0) {\n        ans = 0.0;\n    } else {\n        ans = Double.NaN;\n    }\n\n    return ans;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..3a5ea0cb8 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,34 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    final double EPSILON = 1e-15;\n+    final double MAX_ITERATIONS = 1000.0;\n+\n+    double ans = 0.0;\n+    double gln = Gamma.logGamma(a);\n+\n+    if (x > 0.0) {\n+        double a1 = a - 1.0;\n+        double lng = Gamma.logGamma(a1);\n+        double a2 = x + a1 + 0.5;\n+        double a3 = (a1 + 0.5) * Math.log(a2) - a2;\n+        double a4 = Math.log(EPSILON);\n+\n+        ans = Math.exp(a3 + gln - lng);\n+\n+        if ((x / a) > 1.0 && ans > a4) {\n+            ans = 1.0 - regularizedGamma(a, 1.0 - x);\n+        }\n+\n+    } else if (x == 0.0) {\n+        ans = 0.0;\n+    } else {\n+        ans = Double.NaN;\n+    }\n+\n+    return ans;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}