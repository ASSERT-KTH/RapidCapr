{
    "patch": "public static String strongest_extension(String class_name, String[] extensions) {\n    if (extensions == null || extensions.length == 0) {\n        return null; // or throw an IllegalArgumentException\n    }\n    String strongest = extensions[0];\n    int maxDifference = Math.abs(getNumCaseChanges(strongest));\n    for (int i = 1; i < extensions.length; i++) {\n        String ex = extensions[i];\n        int diff = Math.abs(getNumCaseChanges(ex));\n        if (diff > maxDifference) {\n            maxDifference = diff;\n            strongest = ex;\n        }\n    }\n    return class_name + \".\" + strongest;\n}\n\nprivate static int getNumCaseChanges(String extension) {\n    int numChanges = 0;\n    boolean isFirstCharLower = Character.isLowerCase(extension.charAt(0));\n    for (int i = 1; i < extension.length(); i++) {\n        char c = extension.charAt(i);\n        boolean isLower = Character.isLowerCase(c);\n        if (isFirstCharLower && !isLower || !isFirstCharLower && isLower) {\n            numChanges++;\n        }\n        isFirstCharLower = isLower;\n    }\n    return numChanges;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/STRONGEST_EXTENSION.java b/src/main/java/humaneval/buggy/STRONGEST_EXTENSION.java\nindex 7ff1563..6851483 100644\n--- a/src/main/java/humaneval/buggy/STRONGEST_EXTENSION.java\n+++ b/src/main/java/humaneval/buggy/STRONGEST_EXTENSION.java\n@@ -17,20 +17,34 @@ package humaneval.buggy;\n // for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n \n public class STRONGEST_EXTENSION {\n-    public static String strongest_extension(String class_name, String[] extensions) {\n-        String strong = null;\n-        int val = Integer.MIN_VALUE;\n+public static String strongest_extension(String class_name, String[] extensions) {\n+    if (extensions == null || extensions.length == 0) {\n+        return null; // or throw an IllegalArgumentException\n+    }\n+    String strongest = extensions[0];\n+    int maxDifference = Math.abs(getNumCaseChanges(strongest));\n+    for (int i = 1; i < extensions.length; i++) {\n+        String ex = extensions[i];\n+        int diff = Math.abs(getNumCaseChanges(ex));\n+        if (diff > maxDifference) {\n+            maxDifference = diff;\n+            strongest = ex;\n+        }\n+    }\n+    return class_name + \".\" + strongest;\n+}\n \n-        for (String s : extensions) {\n-            int CAP = 0;\n-            int SM = 0;\n-            for (char c : s.toCharArray()) {\n-                if (Character.toUpperCase(c) == c) SM += 1;\n-                if (Character.toLowerCase(c) == c) CAP += 1;\n-            }\n-            val = CAP - SM;\n-            strong = s;\n+private static int getNumCaseChanges(String extension) {\n+    int numChanges = 0;\n+    boolean isFirstCharLower = Character.isLowerCase(extension.charAt(0));\n+    for (int i = 1; i < extension.length(); i++) {\n+        char c = extension.charAt(i);\n+        boolean isLower = Character.isLowerCase(c);\n+        if (isFirstCharLower && !isLower || !isFirstCharLower && isLower) {\n+            numChanges++;\n         }\n-        return class_name + \".\" + strong;\n+        isFirstCharLower = isLower;\n     }\n+    return numChanges;\n+}\n }",
    "result_reason": "   TEST_STRONGEST_EXTENSION.test_3:39 expected:<K.[t234An]> but was:<K.[TAR]>",
    "test_result": "FAIL"
}