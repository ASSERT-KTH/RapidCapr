{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    Chronology chrono = instant.getChronology();\n    long instantMillis = instant.getMillis();\n    int offset = chrono.getZone().getOffset(instantMillis);\n    long offsetMillis = FieldUtils.safeMultiply(offset, MILLIS_PER_SECOND);\n    long fixedInstantMillis = FieldUtils.safeAdd(instantMillis, offsetMillis);\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        fixedInstantMillis, chrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos >= 0) {\n        long newInstantMillis = bucket.computeMillis(true, text);\n        long newOffsetMillis = bucket.getZone() != null ? bucket.getZone().getOffset(newInstantMillis) : 0;\n        long actualMillis = FieldUtils.safeSubtract(newInstantMillis, newOffsetMillis);\n        instant.setMillis(actualMillis);\n        chrono = bucket.getChronology();\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            chrono = chrono.withZone(DateTimeZone.forOffsetMillis(parsedOffset));\n        }\n        instant.setChronology(chrono);\n    } else {\n        instant.setMillis(instantMillis);\n        newPos = ~newPos;\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..14366f6d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -694,34 +694,40 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    Chronology chrono = instant.getChronology();\n+    long instantMillis = instant.getMillis();\n+    int offset = chrono.getZone().getOffset(instantMillis);\n+    long offsetMillis = FieldUtils.safeMultiply(offset, MILLIS_PER_SECOND);\n+    long fixedInstantMillis = FieldUtils.safeAdd(instantMillis, offsetMillis);\n+    chrono = selectChronology(chrono);\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        fixedInstantMillis, chrono, iLocale, iPivotYear, iDefaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos >= 0) {\n+        long newInstantMillis = bucket.computeMillis(true, text);\n+        long newOffsetMillis = bucket.getZone() != null ? bucket.getZone().getOffset(newInstantMillis) : 0;\n+        long actualMillis = FieldUtils.safeSubtract(newInstantMillis, newOffsetMillis);\n+        instant.setMillis(actualMillis);\n+        chrono = bucket.getChronology();\n+        if (iZone != null) {\n+            instant.setZone(iZone);\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+            chrono = chrono.withZone(DateTimeZone.forOffsetMillis(parsedOffset));\n         }\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+    } else {\n+        instant.setMillis(instantMillis);\n+        newPos = ~newPos;\n     }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}