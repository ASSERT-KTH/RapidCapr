{
    "patch": "int idx = 0;\nint sum = 0;\nwhile (sum + idx <= index) {\n    sum += idx;\n    ++idx;\n}\n\n--idx;\nsum += idx;\n\nfor (int i = last - 1; i >= 0; i--) {\n    final int offset = uniCounterOffset[i];\n    indices[i] = sum / offset;\n    sum -= indices[i] * offset;\n}\n\nindices[last - 1] -= (sum == index ? 1 : 0);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..e89629220 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,23 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n-        }\n-        --idx;\n-        indices[last] = idx;\n+int idx = 0;\n+int sum = 0;\n+while (sum + idx <= index) {\n+    sum += idx;\n+    ++idx;\n+}\n+\n+--idx;\n+sum += idx;\n+\n+for (int i = last - 1; i >= 0; i--) {\n+    final int offset = uniCounterOffset[i];\n+    indices[i] = sum / offset;\n+    sum -= indices[i] * offset;\n+}\n+\n+indices[last - 1] -= (sum == index ? 1 : 0);\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [0][1] expected:<0> but was:<-1>",
    "test_result": "FAIL"
}