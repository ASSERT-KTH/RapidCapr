{
    "patch": "      Map<BasicBlock, BasicBlock> loopEnds = ControlFlowGraph.getLoopEnds(scriptRoot);\n      // Make sure this assignment is not in a loop.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          // The block has a loop statement; any change to this variable might\n          // be repeated in subsequent iterations.\n          // The variable must be assigned before the loop boundaries.\n          if (references.indexOf(ref) >= references.indexOf(loopEnds.get(block))) {\n            return false;\n          }\n        } else if (block.isExceptionHandler()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..64fab75b 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      Map<BasicBlock, BasicBlock> loopEnds = ControlFlowGraph.getLoopEnds(scriptRoot);\n+      // Make sure this assignment is not in a loop.\n+      for (BasicBlock block = ref.getBasicBlock();\n+           block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          // The block has a loop statement; any change to this variable might\n+          // be repeated in subsequent iterations.\n+          // The variable must be assigned before the loop boundaries.\n+          if (references.indexOf(ref) >= references.indexOf(loopEnds.get(block))) {\n+            return false;\n+          }\n+        } else if (block.isExceptionHandler()) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}