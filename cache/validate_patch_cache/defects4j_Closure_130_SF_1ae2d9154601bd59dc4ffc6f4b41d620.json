{
    "patch": "import com.google.common.collect.Lists;\nimport java.util.ArrayDeque;\nimport java.util.Deque;\nimport java.util.List;\nimport com.google.javascript.jscomp.AbstractCompiler;\nimport com.google.javascript.jscomp.GlobalNamespace;\nimport com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.jscomp.Ref;\nimport com.google.javascript.rhino.JSDocInfo;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.TypeI;\n\nprivate void inlineAliases(GlobalNamespace namespace) {\n  // Invariant: All the names in the worklist meet condition (a).\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n\n    // Don't attempt to inline a getter or setter property as a variable.\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n\n    if ((name.globalSets == 1 || name.aliasingGets > 0) && name.localSets == 0 && name.getDeclaration() != null &&\n        !name.isModuleExport() && name.canEliminate()) {\n      Ref decl = name.getDeclaration();\n      JSDocInfo info = NodeUtil.getBestJSDocInfo(decl.getNode());\n      if (info != null && info.isConstant()) {\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n    }\n\n    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n        name.aliasingGets == 0 && name.props != null) {\n      workList.addAll(name.props);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..b1d070df 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,51 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n-    while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n-      }\n+import com.google.common.collect.Lists;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+import com.google.javascript.jscomp.AbstractCompiler;\n+import com.google.javascript.jscomp.GlobalNamespace;\n+import com.google.javascript.jscomp.NodeUtil;\n+import com.google.javascript.jscomp.Ref;\n+import com.google.javascript.rhino.JSDocInfo;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.TypeI;\n+\n+private void inlineAliases(GlobalNamespace namespace) {\n+  // Invariant: All the names in the worklist meet condition (a).\n+  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+  while (!workList.isEmpty()) {\n+    Name name = workList.pop();\n+\n+    // Don't attempt to inline a getter or setter property as a variable.\n+    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+      continue;\n+    }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n+    if ((name.globalSets == 1 || name.aliasingGets > 0) && name.localSets == 0 && name.getDeclaration() != null &&\n+        !name.isModuleExport() && name.canEliminate()) {\n+      Ref decl = name.getDeclaration();\n+      JSDocInfo info = NodeUtil.getBestJSDocInfo(decl.getNode());\n+      if (info != null && info.isConstant()) {\n         List<Ref> refs = Lists.newArrayList(name.getRefs());\n         for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n+          if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n             if (inlineAliasIfPossible(ref, namespace)) {\n               name.removeRef(ref);\n             }\n           }\n         }\n       }\n+    }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n+    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n+        name.aliasingGets == 0 && name.props != null) {\n+      workList.addAll(name.props);\n     }\n   }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}