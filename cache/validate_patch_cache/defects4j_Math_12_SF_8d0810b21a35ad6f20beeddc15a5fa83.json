{
    "patch": "public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n    double[][] tb = new double[D + 1][M];\n    double[][] te = new double[D + 1][M];\n    tb[0][0] = 1;\n    double stateProb;\n\n    for (int i = 1; i <= D; i++) {\n        for (int j = 0; j < M; j++) {\n            stateProb = genotypeProbabilities[j];\n\n            for (int k = 0; k <= i; k++) {\n\n                if (k <= populationCount(j)) {\n                    tb[i][j] += stateProb * te[i - k][j] * binomialCoeff(populationCount(j), k) * binomialCoeff(M - populationCount(j), i - k) / binomialCoeff(M, i);\n                }\n            }\n        }\n\n        for (int j = 0; j < M; j++) {\n            te[i][j] = tb[i][j];\n        }\n    }\n\n    double[] result = new double[N + 1];\n\n    for (int i = 0; i < M; i++) {\n        int count = populationCount(i);\n        result[count] += tb[D][i];\n    }\n\n    int pow = (int) Math.pow(M, D);\n\n    for (int i = 0; i <= N; i++) {\n        result[i] /= pow;\n    }\n\n    return result;\n}\n\nprivate int populationCount(int i) {\n    int count = 0;\n\n    while (i > 0) {\n        count += i % 2;\n        i /= 2;\n    }\n\n    return count;\n}\n\nprivate double binomialCoeff(int n, int k) {\n    double res = 1;\n\n    if (k > n - k) {\n        k = n - k;\n    }\n\n    for (int i = 0; i < k; ++i) {\n        res *= (n - i);\n        res /= (i + 1);\n    }\n\n    return res;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}