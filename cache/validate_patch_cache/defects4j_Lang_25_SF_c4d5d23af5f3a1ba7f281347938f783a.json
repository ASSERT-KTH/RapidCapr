{
    "patch": "public static String unescape(String input) {\n    char[] buffer = input.toCharArray();\n    int len = buffer.length;\n    int outBufferPos = 0;\n    boolean success = true;\n    for (int inBufferPos = 0; inBufferPos < len; ) {\n        char c = buffer[inBufferPos++];\n        if (c == '\\\\') {\n            if (inBufferPos < len) {\n                c = buffer[inBufferPos++];\n                if (c == 'n') {\n                    buffer[outBufferPos++] = '\\n';\n                } else if (c == 'r') {\n                    buffer[outBufferPos++] = '\\r';\n                } else if (c == 't') {\n                    buffer[outBufferPos++] = '\\t';\n                } else if (c == '\"') {\n                    buffer[outBufferPos++] = '\"';\n                } else if (c == '\\'') {\n                    buffer[outBufferPos++] = '\\'';\n                } else if (c == '\\\\') {\n                    buffer[outBufferPos++] = '\\\\';\n                } else if (isOctalDigit(c)) {\n                    int octalPos = inBufferPos - 1;\n                    int octalVal = getOctalValue(c);\n                    if (inBufferPos < len && isOctalDigit(buffer[inBufferPos])) {\n                        c = buffer[inBufferPos++];\n                        octalVal = (octalVal << 3) + getOctalValue(c);\n                        if (inBufferPos < len && isOctalDigit(buffer[inBufferPos])) {\n                            c = buffer[inBufferPos++];\n                            octalVal = (octalVal << 3) + getOctalValue(c);\n                        }\n                    }\n                    buffer[outBufferPos++] = (char) octalVal;\n                } else if (c == 'u') {\n                    if (inBufferPos + 4 < len) {\n                        String hexDigits = new String(buffer, inBufferPos, 4);\n                        try {\n                            int unicodeVal = Integer.parseInt(hexDigits, 16);\n                            buffer[outBufferPos++] = (char) unicodeVal;\n                            inBufferPos += 4;\n                        } catch (NumberFormatException e) {\n                            success = false;\n                            break;\n                        }\n                    } else {\n                        success = false;\n                        break;\n                    }\n                } else {\n                    success = false;\n                    break;\n                }\n            } else {\n                success = false;\n                break;\n            }\n        } else {\n            buffer[outBufferPos++] = c;\n        }\n    }\n    return success ? new String(buffer, 0, outBufferPos) : null;\n}\n\nprivate static boolean isOctalDigit(char c) {\n    return c >= '0' && c <= '7';\n}\n\nprivate static int getOctalValue(char c) {\n    return (int) c - '0';\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..58888d10 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,77 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String input) {\n+    char[] buffer = input.toCharArray();\n+    int len = buffer.length;\n+    int outBufferPos = 0;\n+    boolean success = true;\n+    for (int inBufferPos = 0; inBufferPos < len; ) {\n+        char c = buffer[inBufferPos++];\n+        if (c == '\\\\') {\n+            if (inBufferPos < len) {\n+                c = buffer[inBufferPos++];\n+                if (c == 'n') {\n+                    buffer[outBufferPos++] = '\\n';\n+                } else if (c == 'r') {\n+                    buffer[outBufferPos++] = '\\r';\n+                } else if (c == 't') {\n+                    buffer[outBufferPos++] = '\\t';\n+                } else if (c == '\"') {\n+                    buffer[outBufferPos++] = '\"';\n+                } else if (c == '\\'') {\n+                    buffer[outBufferPos++] = '\\'';\n+                } else if (c == '\\\\') {\n+                    buffer[outBufferPos++] = '\\\\';\n+                } else if (isOctalDigit(c)) {\n+                    int octalPos = inBufferPos - 1;\n+                    int octalVal = getOctalValue(c);\n+                    if (inBufferPos < len && isOctalDigit(buffer[inBufferPos])) {\n+                        c = buffer[inBufferPos++];\n+                        octalVal = (octalVal << 3) + getOctalValue(c);\n+                        if (inBufferPos < len && isOctalDigit(buffer[inBufferPos])) {\n+                            c = buffer[inBufferPos++];\n+                            octalVal = (octalVal << 3) + getOctalValue(c);\n+                        }\n+                    }\n+                    buffer[outBufferPos++] = (char) octalVal;\n+                } else if (c == 'u') {\n+                    if (inBufferPos + 4 < len) {\n+                        String hexDigits = new String(buffer, inBufferPos, 4);\n+                        try {\n+                            int unicodeVal = Integer.parseInt(hexDigits, 16);\n+                            buffer[outBufferPos++] = (char) unicodeVal;\n+                            inBufferPos += 4;\n+                        } catch (NumberFormatException e) {\n+                            success = false;\n+                            break;\n+                        }\n+                    } else {\n+                        success = false;\n+                        break;\n+                    }\n+                } else {\n+                    success = false;\n+                    break;\n+                }\n+            } else {\n+                success = false;\n+                break;\n+            }\n+        } else {\n+            buffer[outBufferPos++] = c;\n+        }\n+    }\n+    return success ? new String(buffer, 0, outBufferPos) : null;\n+}\n+\n+private static boolean isOctalDigit(char c) {\n+    return c >= '0' && c <= '7';\n+}\n+\n+private static int getOctalValue(char c) {\n+    return (int) c - '0';\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}