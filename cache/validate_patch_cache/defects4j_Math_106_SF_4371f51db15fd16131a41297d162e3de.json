{
    "patch": "public Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n    \n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse numerator\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // minus signs should be leading, invalid expression\n    boolean minusInNum = checkForMinusSign(source, num, pos, true);\n    if (minusInNum) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // parse '/'\n    int startIndex = pos.getIndex();\n    parseNextCharacter(source, pos);\n    char c = source.charAt(pos.getIndex() - 1);\n    if (c != '/') {\n        // invalid '/'\n        // set index back to initial, error index should be the last\n        // character examined.\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(pos.getIndex() - 1);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse denominator\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // minus signs must be leading, invalid\n    boolean minusInDen = checkForMinusSign(source, den, pos, true);\n    if (minusInDen) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    int w = whole.intValue();\n    int n = num.intValue();\n    int d = den.intValue();\n    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n}\n\nprivate boolean checkForMinusSign(String source, Number value, ParsePosition pos, boolean leading) {\n    if (value instanceof Long || value instanceof Integer || value instanceof Short || value instanceof Byte) {\n        long v = value.longValue();\n        if (v == Long.MIN_VALUE) {\n            // long value too small to negate\n            return false;\n        } else {\n            v = -v;\n            String expected = String.valueOf(v);\n            int index = pos.getIndex() - expected.length();\n            if (index >= 0) {\n                String actual = source.substring(index, pos.getIndex());\n                if (!actual.equals(expected)) {\n                    return false;\n                }\n                if (leading && index > 0 && !Character.isWhitespace(source.charAt(index - 1))) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    } else {\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\nindex df2713da8..561fac0f0 100644\n--- a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n+++ b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n@@ -127,83 +127,112 @@ public class ProperFractionFormat extends FractionFormat {\n      * @param pos input/ouput parsing parameter.\n      * @return the parsed {@link Fraction} object.\n      */\n-    public Fraction parse(String source, ParsePosition pos) {\n-        // try to parse improper fraction\n-        Fraction ret = super.parse(source, pos);\n-        if (ret != null) {\n-            return ret;\n-        }\n-        \n-        int initialIndex = pos.getIndex();\n-\n-        // parse whitespace\n-        parseAndIgnoreWhitespace(source, pos);\n-\n-        // parse whole\n-        Number whole = getWholeFormat().parse(source, pos);\n-        if (whole == null) {\n-            // invalid integer number\n-            // set index back to initial, error index should already be set\n-            // character examined.\n-            pos.setIndex(initialIndex);\n-            return null;\n-        }\n-\n-        // parse whitespace\n-        parseAndIgnoreWhitespace(source, pos);\n-        \n-        // parse numerator\n-        Number num = getNumeratorFormat().parse(source, pos);\n-        if (num == null) {\n-            // invalid integer number\n-            // set index back to initial, error index should already be set\n-            // character examined.\n-            pos.setIndex(initialIndex);\n-            return null;\n-        }\n-        \n-            // minus signs should be leading, invalid expression\n-\n-        // parse '/'\n-        int startIndex = pos.getIndex();\n-        char c = parseNextCharacter(source, pos);\n-        switch (c) {\n-        case 0 :\n-            // no '/'\n-            // return num as a fraction\n-            return new Fraction(num.intValue(), 1);\n-        case '/' :\n-            // found '/', continue parsing denominator\n-            break;\n-        default :\n-            // invalid '/'\n-            // set index back to initial, error index should be the last\n-            // character examined.\n-            pos.setIndex(initialIndex);\n-            pos.setErrorIndex(startIndex);\n-            return null;\n-        }\n-\n-        // parse whitespace\n-        parseAndIgnoreWhitespace(source, pos);\n-\n-        // parse denominator\n-        Number den = getDenominatorFormat().parse(source, pos);\n-        if (den == null) {\n-            // invalid integer number\n-            // set index back to initial, error index should already be set\n-            // character examined.\n-            pos.setIndex(initialIndex);\n-            return null;\n-        }\n-        \n-            // minus signs must be leading, invalid\n-\n-        int w = whole.intValue();\n-        int n = num.intValue();\n-        int d = den.intValue();\n-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n-    }\n+public Fraction parse(String source, ParsePosition pos) {\n+    // try to parse improper fraction\n+    Fraction ret = super.parse(source, pos);\n+    if (ret != null) {\n+        return ret;\n+    }\n+    \n+    int initialIndex = pos.getIndex();\n+\n+    // parse whitespace\n+    parseAndIgnoreWhitespace(source, pos);\n+\n+    // parse whole\n+    Number whole = getWholeFormat().parse(source, pos);\n+    if (whole == null) {\n+        // invalid integer number\n+        // set index back to initial, error index should already be set\n+        // character examined.\n+        pos.setIndex(initialIndex);\n+        return null;\n+    }\n+\n+    // parse whitespace\n+    parseAndIgnoreWhitespace(source, pos);\n+\n+    // parse numerator\n+    Number num = getNumeratorFormat().parse(source, pos);\n+    if (num == null) {\n+        // invalid integer number\n+        // set index back to initial, error index should already be set\n+        // character examined.\n+        pos.setIndex(initialIndex);\n+        return null;\n+    }\n+\n+    // minus signs should be leading, invalid expression\n+    boolean minusInNum = checkForMinusSign(source, num, pos, true);\n+    if (minusInNum) {\n+        pos.setIndex(initialIndex);\n+        return null;\n+    }\n+\n+    // parse '/'\n+    int startIndex = pos.getIndex();\n+    parseNextCharacter(source, pos);\n+    char c = source.charAt(pos.getIndex() - 1);\n+    if (c != '/') {\n+        // invalid '/'\n+        // set index back to initial, error index should be the last\n+        // character examined.\n+        pos.setIndex(initialIndex);\n+        pos.setErrorIndex(pos.getIndex() - 1);\n+        return null;\n+    }\n+\n+    // parse whitespace\n+    parseAndIgnoreWhitespace(source, pos);\n+\n+    // parse denominator\n+    Number den = getDenominatorFormat().parse(source, pos);\n+    if (den == null) {\n+        // invalid integer number\n+        // set index back to initial, error index should already be set\n+        // character examined.\n+        pos.setIndex(initialIndex);\n+        return null;\n+    }\n+\n+    // minus signs must be leading, invalid\n+    boolean minusInDen = checkForMinusSign(source, den, pos, true);\n+    if (minusInDen) {\n+        pos.setIndex(initialIndex);\n+        return null;\n+    }\n+\n+    int w = whole.intValue();\n+    int n = num.intValue();\n+    int d = den.intValue();\n+    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n+}\n+\n+private boolean checkForMinusSign(String source, Number value, ParsePosition pos, boolean leading) {\n+    if (value instanceof Long || value instanceof Integer || value instanceof Short || value instanceof Byte) {\n+        long v = value.longValue();\n+        if (v == Long.MIN_VALUE) {\n+            // long value too small to negate\n+            return false;\n+        } else {\n+            v = -v;\n+            String expected = String.valueOf(v);\n+            int index = pos.getIndex() - expected.length();\n+            if (index >= 0) {\n+                String actual = source.substring(index, pos.getIndex());\n+                if (!actual.equals(expected)) {\n+                    return false;\n+                }\n+                if (leading && index > 0 && !Character.isWhitespace(source.charAt(index - 1))) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+    } else {\n+        return false;\n+    }\n+}\n     \n     /**\n      * Modify the whole format.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}