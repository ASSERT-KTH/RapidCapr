{
    "patch": "      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          // If the assignment is within a nested function, then we don't know\n          // whether it will actually be executed and thus assigned.\n          return false;\n        } else if (block.isLoop) {\n          // If the assignment is within a loop, then it may be executed\n          // multiple times, so the variable is not assigned only once in its\n          // lifetime.\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..0f3fb483 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      for (BasicBlock block = ref.getBasicBlock();\n+           block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          // If the assignment is within a nested function, then we don't know\n+          // whether it will actually be executed and thus assigned.\n+          return false;\n+        } else if (block.isLoop) {\n+          // If the assignment is within a loop, then it may be executed\n+          // multiple times, so the variable is not assigned only once in its\n+          // lifetime.\n+          return false;\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}