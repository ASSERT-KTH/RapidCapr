{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (n.getFirstChild().getType() == Token.NAME\n          && n.getParent().getType() == Token.EXPR_RESULT\n          && n.getGrandparent().getType() == Token.BLOCK) {\n        Node parentBlock = n.getGrandparent();\n        if (parentBlock.getParent().getType() == Token.SCRIPT) {\n          Node enclosingScript = parentBlock.getParent();\n          if (NodeUtil.isPrototypePropertyDecl(n, parentBlock)) {\n            Node leftChild = n.getFirstChild();\n            String propertyName = leftChild.getString();\n            Set<String> names = propertyLendingFunctions.get(propertyName);\n            if (names != null && names.contains(enclosingScript.getFirstChild().getString())) {\n              return false;\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..57d1b2bb 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,23 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getFirstChild().getType() == Token.NAME\n+          && n.getParent().getType() == Token.EXPR_RESULT\n+          && n.getGrandparent().getType() == Token.BLOCK) {\n+        Node parentBlock = n.getGrandparent();\n+        if (parentBlock.getParent().getType() == Token.SCRIPT) {\n+          Node enclosingScript = parentBlock.getParent();\n+          if (NodeUtil.isPrototypePropertyDecl(n, parentBlock)) {\n+            Node leftChild = n.getFirstChild();\n+            String propertyName = leftChild.getString();\n+            Set<String> names = propertyLendingFunctions.get(propertyName);\n+            if (names != null && names.contains(enclosingScript.getFirstChild().getString())) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}