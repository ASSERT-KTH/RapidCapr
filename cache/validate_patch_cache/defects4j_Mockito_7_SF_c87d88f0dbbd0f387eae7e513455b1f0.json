{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    for (Type boundType : typeVariable.getBounds()) {\n        if (boundType instanceof TypeVariable) {\n            TypeVariable<?> boundTypeVariable = (TypeVariable<?>) boundType;\n            if (!typeVariable.getName().equals(boundTypeVariable.getName())) {\n                readTypeVariablesOn(boundTypeVariable);\n            }\n        } else if (boundType instanceof ParameterizedType) {\n            readTypeVariablesOn((ParameterizedType) boundType);\n        } else {\n            registerTypeVariablesOn(boundType);\n        }\n    }\n    ParameterizedType actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null && !actualTypeArgument.equals(typeVariable)) {\n        readTypeVariablesOn(actualTypeArgument);\n    }\n}\n\nprivate void readTypeVariablesOn(ParameterizedType parameterizedType) {\n    registerTypeVariablesOn(parameterizedType.getRawType());\n    for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n        if (actualTypeArgument instanceof TypeVariable) {\n            TypeVariable<?> actualTypeArgumentVariable = (TypeVariable<?>) actualTypeArgument;\n            if (!typeVariable.getName().equals(actualTypeArgumentVariable.getName())) {\n                readTypeVariablesOn((TypeVariable<?>) actualTypeArgument);\n            }\n        } else if (actualTypeArgument instanceof ParameterizedType) {\n            readTypeVariablesOn((ParameterizedType) actualTypeArgument);\n        } else {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}\n\nprivate void readTypeVariablesOn(TypeVariable<?> typeVariable) {\n    for (Type boundType : typeVariable.getBounds()) {\n        if (boundType instanceof TypeVariable) {\n            TypeVariable<?> boundTypeVariable = (TypeVariable<?>) boundType;\n            if (!typeVariable.getName().equals(boundTypeVariable.getName())) {\n                readTypeVariablesOn(boundTypeVariable);\n            }\n        } else if (boundType instanceof ParameterizedType) {\n            readTypeVariablesOn((ParameterizedType) boundType);\n        } else {\n            registerTypeVariablesOn(boundType);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..84d18d500 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,59 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    for (Type boundType : typeVariable.getBounds()) {\n+        if (boundType instanceof TypeVariable) {\n+            TypeVariable<?> boundTypeVariable = (TypeVariable<?>) boundType;\n+            if (!typeVariable.getName().equals(boundTypeVariable.getName())) {\n+                readTypeVariablesOn(boundTypeVariable);\n+            }\n+        } else if (boundType instanceof ParameterizedType) {\n+            readTypeVariablesOn((ParameterizedType) boundType);\n+        } else {\n+            registerTypeVariablesOn(boundType);\n+        }\n+    }\n+    ParameterizedType actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null && !actualTypeArgument.equals(typeVariable)) {\n+        readTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n+\n+private void readTypeVariablesOn(ParameterizedType parameterizedType) {\n+    registerTypeVariablesOn(parameterizedType.getRawType());\n+    for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n+        if (actualTypeArgument instanceof TypeVariable) {\n+            TypeVariable<?> actualTypeArgumentVariable = (TypeVariable<?>) actualTypeArgument;\n+            if (!typeVariable.getName().equals(actualTypeArgumentVariable.getName())) {\n+                readTypeVariablesOn((TypeVariable<?>) actualTypeArgument);\n+            }\n+        } else if (actualTypeArgument instanceof ParameterizedType) {\n+            readTypeVariablesOn((ParameterizedType) actualTypeArgument);\n+        } else {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n+\n+private void readTypeVariablesOn(TypeVariable<?> typeVariable) {\n+    for (Type boundType : typeVariable.getBounds()) {\n+        if (boundType instanceof TypeVariable) {\n+            TypeVariable<?> boundTypeVariable = (TypeVariable<?>) boundType;\n+            if (!typeVariable.getName().equals(boundTypeVariable.getName())) {\n+                readTypeVariablesOn(boundTypeVariable);\n+            }\n+        } else if (boundType instanceof ParameterizedType) {\n+            readTypeVariablesOn((ParameterizedType) boundType);\n+        } else {\n+            registerTypeVariablesOn(boundType);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: incompatible types: Type cannot be converted to ParameterizedType",
    "test_result": "ERROR"
}