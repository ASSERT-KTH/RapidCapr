{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean backwards = (valueToAdd < 0);\n        int[] newValues = null;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            int value = values[i];\n            if ((i == fieldIndex && backwards)) {\n                value = getField(partial.getFieldType(i)).getMinimumValue(valueToAdd + value);\n            } else if ((i == fieldIndex && !backwards)) {\n                value = getField(partial.getFieldType(i)).getMaximumValue(valueToAdd + value);\n            }\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, value);\n            if (i == fieldIndex) {\n                newValues = partial.getChronology().get(partial, instant);\n                if (newValues[i] != value) {\n                    break;\n                }\n            }\n        }\n        if (newValues != null) {\n            int maxIndex = newValues.length - 1;\n            for (int i = maxIndex; i >= 0; i--) {\n                int newValue = newValues[i];\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n                if (i != fieldIndex && newValue != values[i]) {\n                    // Overflow.\n                    if (backwards) {\n                        instant = getField(partial.getFieldType(i)).addWrapField(instant, -1);\n                    } else {\n                        instant = getField(partial.getFieldType(i)).addWrapField(instant, 1);\n                    }\n                }\n            }\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..5f8489e4 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,53 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean backwards = (valueToAdd < 0);\n+        int[] newValues = null;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            int value = values[i];\n+            if ((i == fieldIndex && backwards)) {\n+                value = getField(partial.getFieldType(i)).getMinimumValue(valueToAdd + value);\n+            } else if ((i == fieldIndex && !backwards)) {\n+                value = getField(partial.getFieldType(i)).getMaximumValue(valueToAdd + value);\n+            }\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, value);\n+            if (i == fieldIndex) {\n+                newValues = partial.getChronology().get(partial, instant);\n+                if (newValues[i] != value) {\n+                    break;\n+                }\n+            }\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        if (newValues != null) {\n+            int maxIndex = newValues.length - 1;\n+            for (int i = maxIndex; i >= 0; i--) {\n+                int newValue = newValues[i];\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n+                if (i != fieldIndex && newValue != values[i]) {\n+                    // Overflow.\n+                    if (backwards) {\n+                        instant = getField(partial.getFieldType(i)).addWrapField(instant, -1);\n+                    } else {\n+                        instant = getField(partial.getFieldType(i)).addWrapField(instant, 1);\n+                    }\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        instant = add(instant, valueToAdd);\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}