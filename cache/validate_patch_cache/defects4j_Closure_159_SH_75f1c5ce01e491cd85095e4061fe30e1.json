{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n      }\n    }\n  }\n\n  for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..9042a116 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -780,6 +780,14 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n         changed.add(child.getString());\n       }\n     }\n+  }\n+\n+  for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+    findCalledFunctions(c, changed);\n+  }\n+}\n+      }\n+    }\n \n     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n       findCalledFunctions(c, changed);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}