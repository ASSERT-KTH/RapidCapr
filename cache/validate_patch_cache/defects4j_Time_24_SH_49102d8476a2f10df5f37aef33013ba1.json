{
    "patch": "// adjust year based on weekyear if first field is a weekyear\nSavedField firstField = savedFields[0];\nif (firstField.iField.getType() == DateTimeFieldType.weekyear()) {\n    int wYear = firstField.iField.getDurationField().getRangeDurationField().\n                getField(iChrono).get(firstField.getValue());\n    int year = iChrono.weekyear().roundCeiling(iDefaultYear);\n    int diff = Math.abs(wYear - year);\n    if (diff > 1) {\n        if (wYear < year) {\n            year--;\n        } else if (wYear > year) {\n            year++;\n        }\n    }\n    iDefaultYear = year;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..db854801 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,22 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+// adjust year based on weekyear if first field is a weekyear\n+SavedField firstField = savedFields[0];\n+if (firstField.iField.getType() == DateTimeFieldType.weekyear()) {\n+    int wYear = firstField.iField.getDurationField().getRangeDurationField().\n+                getField(iChrono).get(firstField.getValue());\n+    int year = iChrono.weekyear().roundCeiling(iDefaultYear);\n+    int diff = Math.abs(wYear - year);\n+    if (diff > 1) {\n+        if (wYear < year) {\n+            year--;\n+        } else if (wYear > year) {\n+            year++;\n+        }\n+    }\n+    iDefaultYear = year;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}