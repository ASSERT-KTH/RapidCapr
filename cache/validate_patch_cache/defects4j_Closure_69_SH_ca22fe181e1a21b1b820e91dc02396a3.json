{
    "patch": "if (functionType.isConstructor() &&\n    !functionType.isNativeObjectType() &&\n    (functionType.getReturnType().isUnknownType() ||\n     functionType.getReturnType().isVoidType() ||\n     !isExtern)) {\n  report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n  ensureTyped(t, n);\n  return;\n}\n\n// Functions with explicit 'this' types must be called in a GETPROP or GETELEM,\n// except for FunctionExpressions and class methods, because `this` in that case is actually a variable.\n// We also perform this check for call expressions, since they can also affect the object `this` value.\nif ((functionType.getTypeOfThis() instanceof ObjectType) &&\n    !(\n        NodeUtil.isGet(child.getParent()) || \n        NodeUtil.isFunctionExpression(child) || \n        NodeUtil.isName(child) ||\n        (NodeUtil.isCall(child) && NodeUtil.isName(child.getFirstChild()))\n     )) {\n  report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());\n  ensureTyped(t, n);\n  return;\n}\n\nvisitParameterList(t, n, functionType);\nensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..977b461e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.isConstructor() &&\n+    !functionType.isNativeObjectType() &&\n+    (functionType.getReturnType().isUnknownType() ||\n+     functionType.getReturnType().isVoidType() ||\n+     !isExtern)) {\n+  report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+  ensureTyped(t, n);\n+  return;\n+}\n+\n+// Functions with explicit 'this' types must be called in a GETPROP or GETELEM,\n+// except for FunctionExpressions and class methods, because `this` in that case is actually a variable.\n+// We also perform this check for call expressions, since they can also affect the object `this` value.\n+if ((functionType.getTypeOfThis() instanceof ObjectType) &&\n+    !(\n+        NodeUtil.isGet(child.getParent()) || \n+        NodeUtil.isFunctionExpression(child) || \n+        NodeUtil.isName(child) ||\n+        (NodeUtil.isCall(child) && NodeUtil.isName(child.getFirstChild()))\n+     )) {\n+  report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());\n+  ensureTyped(t, n);\n+  return;\n+}\n+\n+visitParameterList(t, n, functionType);\n+ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_FUNCTION_MASKS_VARIABLE. function function (this:Bar): string masks variable (IE bug) at testcode line 1 : 164 expected:<0> but was:<1>",
    "test_result": "FAIL"
}