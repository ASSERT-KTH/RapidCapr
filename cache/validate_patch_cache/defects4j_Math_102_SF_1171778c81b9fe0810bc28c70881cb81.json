{
    "patch": "public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n    if (expected.length < 2 || expected.length != observed.length) {\n        throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n    }\n    if (!isPositive(expected) || !isNonNegative(observed)) {\n        throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be positive\");\n    }\n    \n    double sumObserved = 0.0;\n    double sumExpected = 0.0;\n    int numNonZeroExpected = 0;\n    double[] threshold = new double[2];\n    \n    for (int i = 0; i < expected.length; i++) {\n        sumObserved += observed[i];\n        sumExpected += expected[i];\n        if (expected[i] != 0) {\n            numNonZeroExpected++;\n            if (expected[i] > sumObserved / sumExpected) {\n                threshold[0] += observed[i] - expected[i] / 2;\n                threshold[1] += observed[i] + expected[i] / 2;\n            } else {\n                threshold[0] += observed[i] + expected[i] / 2;\n                threshold[1] += observed[i] - expected[i] / 2;\n            }\n        }\n    }\n    \n    double chiSquare = 0.0;\n    if (numNonZeroExpected >= 1) {\n        for (int i = 0; i < observed.length; i++) {\n            if (expected[i] != 0.0) {\n                double expectedValue = expected[i] * sumObserved / sumExpected;\n                if (expectedValue < threshold[0]) {\n                    expectedValue = threshold[0];\n                } else if (expectedValue > threshold[1]) {\n                    expectedValue = threshold[1];\n                }\n                double deviation = observed[i] - expectedValue;\n                chiSquare += deviation * deviation / expectedValue;\n            }\n        }\n    }\n    \n    return chiSquare;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..dc8bf35c2 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,24 +61,53 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n-        }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n+public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n+    if (expected.length < 2 || expected.length != observed.length) {\n+        throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n+    }\n+    if (!isPositive(expected) || !isNonNegative(observed)) {\n+        throw new IllegalArgumentException(\n+                \"observed counts must be non-negative and expected counts must be positive\");\n+    }\n+    \n+    double sumObserved = 0.0;\n+    double sumExpected = 0.0;\n+    int numNonZeroExpected = 0;\n+    double[] threshold = new double[2];\n+    \n+    for (int i = 0; i < expected.length; i++) {\n+        sumObserved += observed[i];\n+        sumExpected += expected[i];\n+        if (expected[i] != 0) {\n+            numNonZeroExpected++;\n+            if (expected[i] > sumObserved / sumExpected) {\n+                threshold[0] += observed[i] - expected[i] / 2;\n+                threshold[1] += observed[i] + expected[i] / 2;\n+            } else {\n+                threshold[0] += observed[i] + expected[i] / 2;\n+                threshold[1] += observed[i] - expected[i] / 2;\n+            }\n         }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n+    }\n+    \n+    double chiSquare = 0.0;\n+    if (numNonZeroExpected >= 1) {\n         for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n+            if (expected[i] != 0.0) {\n+                double expectedValue = expected[i] * sumObserved / sumExpected;\n+                if (expectedValue < threshold[0]) {\n+                    expectedValue = threshold[0];\n+                } else if (expectedValue > threshold[1]) {\n+                    expectedValue = threshold[1];\n+                }\n+                double deviation = observed[i] - expectedValue;\n+                chiSquare += deviation * deviation / expectedValue;\n+            }\n         }\n-        return sumSq;\n     }\n+    \n+    return chiSquare;\n+}\n \n     /**\n      * {@inheritDoc}",
    "result_reason": "junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<4.5428365718899444E7>",
    "test_result": "FAIL"
}