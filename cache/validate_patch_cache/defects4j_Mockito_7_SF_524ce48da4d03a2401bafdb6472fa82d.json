{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    TypeVariable<?>[] typeParameters;\n    int index = -1;\n\n    if (bounds.length == 0) {\n        Type genericDeclaration = typeVariable.getGenericDeclaration();\n        if (!(genericDeclaration instanceof Class)) {\n            return;\n        }\n\n        Class<?> declaringClass = (Class<?>) genericDeclaration;\n        typeParameters = declaringClass.getTypeParameters();\n        index = Arrays.asList(typeParameters).indexOf(typeVariable);\n        if (index == -1) {\n            return;\n        }\n\n        Type superclassType = getClass().getGenericSuperclass();\n        if (!(superclassType instanceof ParameterizedType)) {\n            return;\n        }\n\n        Type actualTypeArgument = ((ParameterizedType) superclassType).getActualTypeArguments()[index];\n        if (actualTypeArgument instanceof TypeVariable) {\n            bounds = ((TypeVariable<?>) actualTypeArgument).getBounds();\n        } else {\n            registerTypeVariablesOn(actualTypeArgument);\n            return;\n        }\n    }\n\n    for (Type bound : bounds) {\n        if (bound instanceof TypeVariable) {\n            TypeVariable<?> typeVariable = (TypeVariable<?>) bound;\n            if (typeVariable.getBounds().length == 0 &&\n                    typeVariable.getGenericDeclaration() instanceof Class &&\n                    index != -1) {\n                Type superclassType = getClass().getGenericSuperclass();\n                if (superclassType instanceof ParameterizedType) {\n                    Type[] actualTypeArguments = ((ParameterizedType) superclassType).getActualTypeArguments();\n                    Type actualTypeArgument = actualTypeArguments[index];\n                    if (actualTypeArgument instanceof TypeVariable) {\n                        registerTypeVariablesOn(bounds);\n                        continue;\n                    } else {\n                        bound = actualTypeArgument;\n                    }\n                }\n            } else {\n                readTypeVariablesOn(typeVariable);\n                continue;\n            }\n        }\n        registerTypeVariablesOn(bound);\n    }        \n}\n\nprivate void readTypeVariablesOn(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length == 0) {\n        return;\n    }\n\n    for (Type bound : bounds) {\n        if (bound instanceof TypeVariable) {\n            readTypeVariablesOn((TypeVariable<?>) bound);\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..25df39a5a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,79 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    TypeVariable<?>[] typeParameters;\n+    int index = -1;\n+\n+    if (bounds.length == 0) {\n+        Type genericDeclaration = typeVariable.getGenericDeclaration();\n+        if (!(genericDeclaration instanceof Class)) {\n+            return;\n+        }\n+\n+        Class<?> declaringClass = (Class<?>) genericDeclaration;\n+        typeParameters = declaringClass.getTypeParameters();\n+        index = Arrays.asList(typeParameters).indexOf(typeVariable);\n+        if (index == -1) {\n+            return;\n+        }\n+\n+        Type superclassType = getClass().getGenericSuperclass();\n+        if (!(superclassType instanceof ParameterizedType)) {\n+            return;\n+        }\n+\n+        Type actualTypeArgument = ((ParameterizedType) superclassType).getActualTypeArguments()[index];\n+        if (actualTypeArgument instanceof TypeVariable) {\n+            bounds = ((TypeVariable<?>) actualTypeArgument).getBounds();\n+        } else {\n+            registerTypeVariablesOn(actualTypeArgument);\n+            return;\n+        }\n+    }\n+\n+    for (Type bound : bounds) {\n+        if (bound instanceof TypeVariable) {\n+            TypeVariable<?> typeVariable = (TypeVariable<?>) bound;\n+            if (typeVariable.getBounds().length == 0 &&\n+                    typeVariable.getGenericDeclaration() instanceof Class &&\n+                    index != -1) {\n+                Type superclassType = getClass().getGenericSuperclass();\n+                if (superclassType instanceof ParameterizedType) {\n+                    Type[] actualTypeArguments = ((ParameterizedType) superclassType).getActualTypeArguments();\n+                    Type actualTypeArgument = actualTypeArguments[index];\n+                    if (actualTypeArgument instanceof TypeVariable) {\n+                        registerTypeVariablesOn(bounds);\n+                        continue;\n+                    } else {\n+                        bound = actualTypeArgument;\n+                    }\n+                }\n+            } else {\n+                readTypeVariablesOn(typeVariable);\n+                continue;\n+            }\n+        }\n+        registerTypeVariablesOn(bound);\n+    }        \n+}\n+\n+private void readTypeVariablesOn(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length == 0) {\n+        return;\n+    }\n+\n+    for (Type bound : bounds) {\n+        if (bound instanceof TypeVariable) {\n+            readTypeVariablesOn((TypeVariable<?>) bound);\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: incompatible types: GenericDeclaration cannot be converted to Type",
    "test_result": "ERROR"
}