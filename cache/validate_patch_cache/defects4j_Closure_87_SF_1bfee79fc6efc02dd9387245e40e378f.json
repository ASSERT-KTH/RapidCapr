{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node onlyChild = n.getFirstChild();\n\n      if (n.getParent() != null && (\n          n.getParent().getType() == Token.FUNCTION ||\n          n.getParent().getType() == Token.LABEL ||\n          n.getParent().getType() == Token.EXPR_VOID ||\n          n.getParent().getType() == Token.FOR ||\n          n.getParent().getType() == Token.WITH ||\n          n.getParent().getType() == Token.IF)) {\n        // If the parent is a function, label, void operation, or statement that doesn't\n        // accept an expression, don't fold.\n        return false;\n      }\n\n      if (onlyChild.getType() == Token.EXPR_RESULT) {\n        Node grandChild = onlyChild.getFirstChild();\n        if (grandChild.getType() == Token.HOOK || grandChild.getType() == Token.IF) {\n          // If the child is a HOOK or IF, don't fold.\n          return false;\n        }\n      }\n\n      // Do not fold expression node child of WITH, catch or finally blocks\n      if (onlyChild.getType() == Token.EXPRESSION) {\n        Node greatGrandParent = n.getParent().getParent();\n        if (greatGrandParent != null && (\n            greatGrandParent.getType() == Token.CATCH ||\n            greatGrandParent.getType() == Token.FINALLY ||\n            greatGrandParent.getType() == Token.WITH)) {\n          return false;\n        }\n      }\n\n      return NodeUtil.isExpressionNode(onlyChild);\n    } else if (n.getFirstChild().getType() == Token.FUNCTION) {\n      // If the block has a single FUNCTION child, don't fold.\n      return false;\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..69829509 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,52 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node onlyChild = n.getFirstChild();\n+\n+      if (n.getParent() != null && (\n+          n.getParent().getType() == Token.FUNCTION ||\n+          n.getParent().getType() == Token.LABEL ||\n+          n.getParent().getType() == Token.EXPR_VOID ||\n+          n.getParent().getType() == Token.FOR ||\n+          n.getParent().getType() == Token.WITH ||\n+          n.getParent().getType() == Token.IF)) {\n+        // If the parent is a function, label, void operation, or statement that doesn't\n+        // accept an expression, don't fold.\n+        return false;\n       }\n-    }\n \n-    return false;\n+      if (onlyChild.getType() == Token.EXPR_RESULT) {\n+        Node grandChild = onlyChild.getFirstChild();\n+        if (grandChild.getType() == Token.HOOK || grandChild.getType() == Token.IF) {\n+          // If the child is a HOOK or IF, don't fold.\n+          return false;\n+        }\n+      }\n+\n+      // Do not fold expression node child of WITH, catch or finally blocks\n+      if (onlyChild.getType() == Token.EXPRESSION) {\n+        Node greatGrandParent = n.getParent().getParent();\n+        if (greatGrandParent != null && (\n+            greatGrandParent.getType() == Token.CATCH ||\n+            greatGrandParent.getType() == Token.FINALLY ||\n+            greatGrandParent.getType() == Token.WITH)) {\n+          return false;\n+        }\n+      }\n+\n+      return NodeUtil.isExpressionNode(onlyChild);\n+    } else if (n.getFirstChild().getType() == Token.FUNCTION) {\n+      // If the block has a single FUNCTION child, don't fold.\n+      return false;\n+    }\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}