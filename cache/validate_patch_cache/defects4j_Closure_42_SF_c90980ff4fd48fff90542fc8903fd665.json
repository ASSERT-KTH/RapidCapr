{
    "patch": "class IRFactory {\n\n    private final ErrorReporter errorReporter;\n\n    IRFactory(ErrorReporter errorReporter) {\n        this.errorReporter = errorReporter;\n    }\n\n    Node transform(AstNode node) {\n        if (node instanceof Block) {\n            return processBlock((Block) node);\n        } else if (node instanceof BreakStatement) {\n            return processBreakStatement((BreakStatement) node);\n        } else if (node instanceof CatchClause) {\n            return processCatchClause((CatchClause) node);\n        } else if (node instanceof ConditionalExpression) {\n            return processConditionalExpression((ConditionalExpression) node);\n        } else if (node instanceof ContinueStatement) {\n            return processContinueStatement((ContinueStatement) node);\n        } else if (node instanceof DoLoop) {\n            return processDoLoop((DoLoop) node);\n        } else if (node instanceof ElementGet) {\n            return processElementGet((ElementGet) node);\n        } else if (node instanceof EmptyExpression) {\n            return processEmptyExpression((EmptyExpression) node);\n        } else if (node instanceof ExpressionStatement) {\n            return processExpressionStatement((ExpressionStatement) node);\n        } else if (node instanceof ForInLoop) {\n            return processForInLoop((ForInLoop) node);\n        }\n\n        throw new IllegalArgumentException(\"Unsupported node type: \" + node.getClass().getSimpleName());\n    }\n\n    private boolean isDirective(Node n) {\n        if (n == null) {\n            return false;\n        }\n\n        int nType = n.getType();\n        return nType == Token.EXPR_RESULT &&\n                n.getFirstChild().isString() &&\n                ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n\n    Node processBlock(Block blockNode) {\n        return processGeneric(blockNode);\n    }\n\n    Node processBreakStatement(BreakStatement statementNode) {\n        Node node = newNode(Token.BREAK);\n        if (statementNode.getBreakLabel() != null) {\n            Node labelName = transform(statementNode.getBreakLabel());\n            // Change the NAME to LABEL_NAME\n            labelName.setType(Token.LABEL_NAME);\n            node.addChildToBack(labelName);\n        }\n        return node;\n    }\n\n    Node processCatchClause(CatchClause clauseNode) {\n        AstNode catchVar = clauseNode.getVarName();\n        Node node = newNode(Token.CATCH, transform(catchVar));\n        if (clauseNode.getCatchCondition() != null) {\n            errorReporter.error(\n                    \"Catch clauses are not supported\",\n                    sourceName,\n                    clauseNode.getCatchCondition().getLineno(), \"\", 0);\n        }\n        node.addChildToBack(transformBlock(clauseNode.getBody()));\n        return node;\n    }\n\n    Node processConditionalExpression(ConditionalExpression exprNode) {\n        return newNode(\n                Token.HOOK,\n                transform(exprNode.getTestExpression()),\n                transform(exprNode.getTrueExpression()),\n                transform(exprNode.getFalseExpression()));\n    }\n\n    Node processContinueStatement(ContinueStatement statementNode) {\n        Node node = newNode(Token.CONTINUE);\n        if (statementNode.getLabel() != null) {\n            Node labelName = transform(statementNode.getLabel());\n            // Change the NAME to LABEL_NAME\n            labelName.setType(Token.LABEL_NAME);\n            node.addChildToBack(labelName);\n        }\n        return node;\n    }\n\n    Node processDoLoop(DoLoop loopNode) {\n        return newNode(\n                Token.DO,\n                transformBlock(loopNode.getBody()),\n                transform(loopNode.getCondition()));\n    }\n\n    Node processElementGet(ElementGet getNode) {\n        return newNode(\n                Token.GETELEM,\n                transform(getNode.getTarget()),\n                transform(getNode.getElement()));\n    }\n\n    Node processEmptyExpression(EmptyExpression exprNode) {\n        return newNode(Token.EMPTY);\n    }\n\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n        Node node = newNode(transformTokenType(statementNode.getType()));\n        node.addChildToBack(transform(statementNode.getExpression()));\n        return node;\n    }\n\n    Node processForInLoop(ForInLoop loopNode) {\n        return newNode(\n                Token.FOR,\n                newNode(Token.VAR, transform(loopNode.getIterator())),\n                transform(loopNode.getIteratedObject()),\n                transformBlock(loopNode.getBody())\n        );\n    }\n\n    private Node processGeneric(AstNode node) {\n        if (node instanceof Scope) {\n            Node n = newNode(Token.SCRIPT);\n            visitScope((Scope) node, n);\n            return n;\n        } else {\n            Node n = newNode(Token.BLOCK);\n            for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n                n.addChildToBack(transform(c));\n            }\n            return n;\n        }\n    }\n\n    private void visitScope(Scope scopeNode, Node blockNode) {\n        for (Scope s = scopeNode; s != null; s = s.getParentScope()) {\n            for (Symbol symbol : s.getSymbols()) {\n                Node name = createNameNode(symbol.getName());\n                if (symbol.getDeclType() == Token.FUNCTION) {\n                    name.addChildToFront(transform(symbol.getNode()));\n                }\n                blockNode.addChildToBack(name);\n            }\n        }\n\n        blockNode.addChildrenToBack(transformAll(scopeNode.getBody()));\n    }\n\n    private List<Node> transformAll(List<? extends AstNode> list) {\n        return list.stream()\n                .map(this::transform)\n                .collect(Collectors.toList());\n    }\n\n    private Node transformBlock(AstNode node) {\n        if (node == null) {\n            return newNode(Token.EMPTY);\n        }\n        if (node instanceof Block) {\n            return processBlock((Block) node);\n        } else {\n            Node n = processGeneric(node);\n            if (n.getType() == Token.BLOCK && n.getFirstChild() == null) {\n                n.setType(Token.EMPTY);\n            }\n            return n;\n        }\n    }\n\n    private Node createNameNode(String name) {\n        return new Node(Token.NAME, new Node(Token.STRING, name));\n    }\n\n    private Node newNode(int type, Node... children) {\n        Node node = new Node(type);\n        for (Node child : children) {\n            if (child != null) {\n                node.addChildToBack(child);\n            }\n        }\n        return node;\n    }\n\n    private int transformTokenType(int javaScriptTokenType) {\n        switch (javaScriptTokenType) {\n            case Token.EXPR_VOID:\n                return Token.VOID;\n            case Token.EXPR_TRUE:\n                return Token.TRUE;\n            case Token.EXPR_FALSE:\n                return Token.FALSE;\n            case Token.EXPR_NULL:\n                return Token.NULL;\n            default:\n                return javaScriptTokenType;\n        }\n    }\n\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..e9b59b07 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,107 +473,211 @@ class IRFactory {\n       }\n     }\n \n+class IRFactory {\n+\n+    private final ErrorReporter errorReporter;\n+\n+    IRFactory(ErrorReporter errorReporter) {\n+        this.errorReporter = errorReporter;\n+    }\n+\n+    Node transform(AstNode node) {\n+        if (node instanceof Block) {\n+            return processBlock((Block) node);\n+        } else if (node instanceof BreakStatement) {\n+            return processBreakStatement((BreakStatement) node);\n+        } else if (node instanceof CatchClause) {\n+            return processCatchClause((CatchClause) node);\n+        } else if (node instanceof ConditionalExpression) {\n+            return processConditionalExpression((ConditionalExpression) node);\n+        } else if (node instanceof ContinueStatement) {\n+            return processContinueStatement((ContinueStatement) node);\n+        } else if (node instanceof DoLoop) {\n+            return processDoLoop((DoLoop) node);\n+        } else if (node instanceof ElementGet) {\n+            return processElementGet((ElementGet) node);\n+        } else if (node instanceof EmptyExpression) {\n+            return processEmptyExpression((EmptyExpression) node);\n+        } else if (node instanceof ExpressionStatement) {\n+            return processExpressionStatement((ExpressionStatement) node);\n+        } else if (node instanceof ForInLoop) {\n+            return processForInLoop((ForInLoop) node);\n+        }\n+\n+        throw new IllegalArgumentException(\"Unsupported node type: \" + node.getClass().getSimpleName());\n+    }\n+\n     private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+        if (n == null) {\n+            return false;\n+        }\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+        int nType = n.getType();\n+        return nType == Token.EXPR_RESULT &&\n+                n.getFirstChild().isString() &&\n+                ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n     }\n \n-    @Override\n     Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+        return processGeneric(blockNode);\n     }\n \n-    @Override\n     Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+        Node node = newNode(Token.BREAK);\n+        if (statementNode.getBreakLabel() != null) {\n+            Node labelName = transform(statementNode.getBreakLabel());\n+            // Change the NAME to LABEL_NAME\n+            labelName.setType(Token.LABEL_NAME);\n+            node.addChildToBack(labelName);\n+        }\n+        return node;\n     }\n \n-    @Override\n     Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+        AstNode catchVar = clauseNode.getVarName();\n+        Node node = newNode(Token.CATCH, transform(catchVar));\n+        if (clauseNode.getCatchCondition() != null) {\n+            errorReporter.error(\n+                    \"Catch clauses are not supported\",\n+                    sourceName,\n+                    clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+        }\n+        node.addChildToBack(transformBlock(clauseNode.getBody()));\n+        return node;\n     }\n \n-    @Override\n     Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+        return newNode(\n+                Token.HOOK,\n+                transform(exprNode.getTestExpression()),\n+                transform(exprNode.getTrueExpression()),\n+                transform(exprNode.getFalseExpression()));\n     }\n \n-    @Override\n     Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+        Node node = newNode(Token.CONTINUE);\n+        if (statementNode.getLabel() != null) {\n+            Node labelName = transform(statementNode.getLabel());\n+            // Change the NAME to LABEL_NAME\n+            labelName.setType(Token.LABEL_NAME);\n+            node.addChildToBack(labelName);\n+        }\n+        return node;\n     }\n \n-    @Override\n     Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+        return newNode(\n+                Token.DO,\n+                transformBlock(loopNode.getBody()),\n+                transform(loopNode.getCondition()));\n     }\n \n-    @Override\n     Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+        return newNode(\n+                Token.GETELEM,\n+                transform(getNode.getTarget()),\n+                transform(getNode.getElement()));\n     }\n \n-    @Override\n     Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+        return newNode(Token.EMPTY);\n     }\n \n-    @Override\n     Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+        Node node = newNode(transformTokenType(statementNode.getType()));\n+        node.addChildToBack(transform(statementNode.getExpression()));\n+        return node;\n     }\n \n-    @Override\n     Node processForInLoop(ForInLoop loopNode) {\n+        return newNode(\n+                Token.FOR,\n+                newNode(Token.VAR, transform(loopNode.getIterator())),\n+                transform(loopNode.getIteratedObject()),\n+                transformBlock(loopNode.getBody())\n+        );\n+    }\n+\n+    private Node processGeneric(AstNode node) {\n+        if (node instanceof Scope) {\n+            Node n = newNode(Token.SCRIPT);\n+            visitScope((Scope) node, n);\n+            return n;\n+        } else {\n+            Node n = newNode(Token.BLOCK);\n+            for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+                n.addChildToBack(transform(c));\n+            }\n+            return n;\n+        }\n+    }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+    private void visitScope(Scope scopeNode, Node blockNode) {\n+        for (Scope s = scopeNode; s != null; s = s.getParentScope()) {\n+            for (Symbol symbol : s.getSymbols()) {\n+                Node name = createNameNode(symbol.getName());\n+                if (symbol.getDeclType() == Token.FUNCTION) {\n+                    name.addChildToFront(transform(symbol.getNode()));\n+                }\n+                blockNode.addChildToBack(name);\n+            }\n+        }\n+\n+        blockNode.addChildrenToBack(transformAll(scopeNode.getBody()));\n+    }\n+\n+    private List<Node> transformAll(List<? extends AstNode> list) {\n+        return list.stream()\n+                .map(this::transform)\n+                .collect(Collectors.toList());\n     }\n \n+    private Node transformBlock(AstNode node) {\n+        if (node == null) {\n+            return newNode(Token.EMPTY);\n+        }\n+        if (node instanceof Block) {\n+            return processBlock((Block) node);\n+        } else {\n+            Node n = processGeneric(node);\n+            if (n.getType() == Token.BLOCK && n.getFirstChild() == null) {\n+                n.setType(Token.EMPTY);\n+            }\n+            return n;\n+        }\n+    }\n+\n+    private Node createNameNode(String name) {\n+        return new Node(Token.NAME, new Node(Token.STRING, name));\n+    }\n+\n+    private Node newNode(int type, Node... children) {\n+        Node node = new Node(type);\n+        for (Node child : children) {\n+            if (child != null) {\n+                node.addChildToBack(child);\n+            }\n+        }\n+        return node;\n+    }\n+\n+    private int transformTokenType(int javaScriptTokenType) {\n+        switch (javaScriptTokenType) {\n+            case Token.EXPR_VOID:\n+                return Token.VOID;\n+            case Token.EXPR_TRUE:\n+                return Token.TRUE;\n+            case Token.EXPR_FALSE:\n+                return Token.FALSE;\n+            case Token.EXPR_NULL:\n+                return Token.NULL;\n+            default:\n+                return javaScriptTokenType;\n+        }\n+    }\n+\n+}\n+\n     @Override\n     Node processForLoop(ForLoop loopNode) {\n       Node node = newNode(",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}