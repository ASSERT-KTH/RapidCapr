{
    "patch": "      if (n == scope.getRootNode()) {\n        return;\n      }\n\n      if (n.getType() == Token.CATCH) {\n        defineCatch(n, parent);\n        return;\n      }\n\n      if (n.getType() == Token.VAR) {\n        defineVar(n, parent);\n        return;\n      }\n\n      if (n.getType() == Token.SCRIPT) {\n        defineScript(n);\n        return;\n      }\n\n      attachLiteralTypes(n);\n\n      if (n.getType() == Token.FUNCTION && parent.getType() != Token.ASSIGN && parent.getType() != Token.NAME) {\n        defineDeclaredFunction(n, parent);\n        return;\n      }\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode() && parent.getFirstChild().getType() == Token.SCRIPT) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..74c43656 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,33 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+      if (n == scope.getRootNode()) {\n+        return;\n+      }\n+\n+      if (n.getType() == Token.CATCH) {\n+        defineCatch(n, parent);\n+        return;\n+      }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+      if (n.getType() == Token.VAR) {\n+        defineVar(n, parent);\n+        return;\n+      }\n+\n+      if (n.getType() == Token.SCRIPT) {\n+        defineScript(n);\n         return;\n       }\n \n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+\n+      if (n.getType() == Token.FUNCTION && parent.getType() != Token.ASSIGN && parent.getType() != Token.NAME) {\n+        defineDeclaredFunction(n, parent);\n+        return;\n       }\n-    }\n+\n+      if (n.getType() == Token.LP && parent == scope.getRootNode() && parent.getFirstChild().getType() == Token.SCRIPT) {\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}