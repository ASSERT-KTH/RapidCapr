{
    "patch": "public static String unescapeJava(String str) {\n    if (str == null) {\n        return null;\n    }\n    int length = str.length();\n    StringBuffer sb = new StringBuffer(length);\n    for (int i = 0; i < length; i++) {\n        char ch = str.charAt(i);\n        if (ch == '\\\\') {\n            i++;\n            if (i >= length) {\n                throw new IllegalArgumentException(\"Invalid escaped character in input string\");\n            }\n            ch = str.charAt(i);\n            if (ch == 'n') {\n                sb.append('\\n');\n            } else if (ch == 'r') {\n                sb.append('\\r');\n            } else if (ch == 't') {\n                sb.append('\\t');\n            } else if (ch == 'b') {\n                sb.append('\\b');\n            } else if (ch == 'f') {\n                sb.append('\\f');\n            } else if (ch == '\\'') {\n                sb.append('\\'');\n            } else if (ch == '\\\"') {\n                sb.append('\\\"');\n            } else if (ch == '\\\\') {\n                sb.append('\\\\');\n            } else if (ch >= '0' && ch <= '7') {\n                // Octal escape\n                int octValue = ch - '0';\n                if (i + 1 < length && str.charAt(i + 1) >= '0' && str.charAt(i + 1) <= '7') {\n                    i++;\n                    octValue = (octValue << 3) + (str.charAt(i) - '0');\n                    if (i + 1 < length && str.charAt(i + 1) >= '0' && str.charAt(i + 1) <= '7') {\n                        i++;\n                        octValue = (octValue << 3) + (str.charAt(i) - '0');\n                    }\n                }\n                sb.append((char) octValue);\n            } else if (ch == 'u') {\n                if (i + 4 >= length) {\n                    throw new IllegalArgumentException(\"Invalid unicode escape in input string\");\n                }\n                StringBuilder hex = new StringBuilder(4);\n                ascii_only:\n                for (int j = 0; j < 4; j++) {\n                    ch = str.charAt(++i);\n                    switch (ch) {\n                    case '0': case '1': case '2': case '3':\n                    case '4': case '5': case '6': case '7':\n                    case '8': case '9': case 'a': case 'b':\n                    case 'c': case 'd': case 'e': case 'f':\n                    case 'A': case 'B': case 'C': case 'D':\n                    case 'E': case 'F':\n                        hex.append(ch);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Invalid unicode escape in input string\");\n                    }\n                    if (j == 3) {\n                        break ascii_only;\n                    }\n                }\n                sb.append((char) Integer.parseInt(hex.toString(), 16));\n            } else {\n                throw new IllegalArgumentException(\"Invalid escaped character in input string\");\n            }\n        } else {\n            sb.append(ch);\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}