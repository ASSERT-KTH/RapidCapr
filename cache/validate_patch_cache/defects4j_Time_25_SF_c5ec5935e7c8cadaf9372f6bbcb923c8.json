{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Check if there is a transition at the given instant\n    int initialOffset = getOffset(instantLocal);\n    int prevOffset = getOffset(instantLocal - 1);\n    int nextOffset = getOffset(instantLocal + 1);\n    long nextTransition = nextTransition(instantLocal);\n    long prevTransition = previousTransition(instantLocal);\n\n    if (prevOffset == nextOffset) { // no transition\n        return initialOffset;\n    } else if (initialOffset == prevOffset) { // spring transition (gap)\n        if (instantLocal < prevTransition + initialOffset) { // before the gap\n            return initialOffset;\n        } else if (instantLocal == prevTransition + initialOffset) { // at the gap\n            return nextOffset;\n        } else { // after the gap\n            return nextOffset;\n        }\n    } else if (initialOffset == nextOffset) { // autumn transition (overlap)\n        if (instantLocal < nextTransition - initialOffset) { // before the overlap\n            return prevOffset;\n        } else if (instantLocal == nextTransition - initialOffset) { // at the overlap\n            return initialOffset;\n        } else { // after the overlap\n            return initialOffset;\n        }\n    } else { // gap or overlap boundaries (rare)\n        long diffPrev = instantLocal - prevTransition;\n        long diffNext = nextTransition - instantLocal;\n        int offsetPrev = getOffset(prevTransition);\n        int offsetNext = getOffset(nextTransition);\n\n        if (offsetPrev > offsetNext) { // gap boundaries\n            if (diffPrev < diffNext) { // before the gap\n                return initialOffset;\n            } else { // after the gap\n                return nextOffset;\n            }\n        } else { // overlap boundaries\n            if (diffPrev < diffNext) { // before the overlap\n                return prevOffset;\n            } else { // after the overlap\n                return initialOffset;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..38239c92 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,53 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Check if there is a transition at the given instant\n+    int initialOffset = getOffset(instantLocal);\n+    int prevOffset = getOffset(instantLocal - 1);\n+    int nextOffset = getOffset(instantLocal + 1);\n+    long nextTransition = nextTransition(instantLocal);\n+    long prevTransition = previousTransition(instantLocal);\n+\n+    if (prevOffset == nextOffset) { // no transition\n+        return initialOffset;\n+    } else if (initialOffset == prevOffset) { // spring transition (gap)\n+        if (instantLocal < prevTransition + initialOffset) { // before the gap\n+            return initialOffset;\n+        } else if (instantLocal == prevTransition + initialOffset) { // at the gap\n+            return nextOffset;\n+        } else { // after the gap\n+            return nextOffset;\n+        }\n+    } else if (initialOffset == nextOffset) { // autumn transition (overlap)\n+        if (instantLocal < nextTransition - initialOffset) { // before the overlap\n+            return prevOffset;\n+        } else if (instantLocal == nextTransition - initialOffset) { // at the overlap\n+            return initialOffset;\n+        } else { // after the overlap\n+            return initialOffset;\n+        }\n+    } else { // gap or overlap boundaries (rare)\n+        long diffPrev = instantLocal - prevTransition;\n+        long diffNext = nextTransition - instantLocal;\n+        int offsetPrev = getOffset(prevTransition);\n+        int offsetNext = getOffset(nextTransition);\n+\n+        if (offsetPrev > offsetNext) { // gap boundaries\n+            if (diffPrev < diffNext) { // before the gap\n+                return initialOffset;\n+            } else { // after the gap\n+                return nextOffset;\n+            }\n+        } else { // overlap boundaries\n+            if (diffPrev < diffNext) { // before the overlap\n+                return prevOffset;\n+            } else { // after the overlap\n+                return initialOffset;\n             }\n         }\n-        return offsetAdjusted;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}