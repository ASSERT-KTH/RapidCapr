{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Map<String, Node> argsToRemove = new LinkedHashMap<>();\n\n      // Collect args to remove but don't remove them yet.\n\n      // If there are no var args, then the formal count is accurate.  But if\n      // there are, then there may be un-removable args on the end that\n      // must be counted.\n      \n      int formalCount = function.getFirstChild().getChildCount();\n      // Determine if there is a var_args node.\n      Node arg = argList.getFirstChild();\n      while (arg != null && !arg.isName()) {\n        arg = arg.getNext();\n      }\n      if (arg != null) {\n       formalCount = Math.max(formalCount, arg.getIntProp(Node.VARARGS));\n      }\n\n      int position = 0;\n      // Position of function expression name in arguments list\n      if (NodeUtil.isFunctionExpression(function) && !function.getFirstChild().getString().isEmpty()) {\n        argsToRemove.put(function.getFirstChild().getString(), null);\n        position++;\n      }\n      for (Node argNode : argList.children()) {\n        if (argNode.isName()) {\n          String argName = argNode.getString();\n          Var var = fnScope.getVar(argName);\n          if (!referenced.contains(var) && !compiler.getCodingConvention().isExported(argName) && position < formalCount ) {\n            argsToRemove.put(argName, argNode);\n          }\n          position++;\n        }\n      }\n      for (Node argNode : argsToRemove.values()) {\n        if (argNode != null) {\n          argList.removeChild(argNode);\n        }\n        compiler.reportCodeChange();\n      }\n\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5166fa02 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,62 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      Map<String, Node> argsToRemove = new LinkedHashMap<>();\n+\n+      // Collect args to remove but don't remove them yet.\n+\n+      // If there are no var args, then the formal count is accurate.  But if\n+      // there are, then there may be un-removable args on the end that\n+      // must be counted.\n+      \n+      int formalCount = function.getFirstChild().getChildCount();\n+      // Determine if there is a var_args node.\n+      Node arg = argList.getFirstChild();\n+      while (arg != null && !arg.isName()) {\n+        arg = arg.getNext();\n+      }\n+      if (arg != null) {\n+       formalCount = Math.max(formalCount, arg.getIntProp(Node.VARARGS));\n+      }\n+\n+      int position = 0;\n+      // Position of function expression name in arguments list\n+      if (NodeUtil.isFunctionExpression(function) && !function.getFirstChild().getString().isEmpty()) {\n+        argsToRemove.put(function.getFirstChild().getString(), null);\n+        position++;\n+      }\n+      for (Node argNode : argList.children()) {\n+        if (argNode.isName()) {\n+          String argName = argNode.getString();\n+          Var var = fnScope.getVar(argName);\n+          if (!referenced.contains(var) && !compiler.getCodingConvention().isExported(argName) && position < formalCount ) {\n+            argsToRemove.put(argName, argNode);\n+          }\n+          position++;\n+        }\n+      }\n+      for (Node argNode : argsToRemove.values()) {\n+        if (argNode != null) {\n+          argList.removeChild(argNode);\n+        }\n+        compiler.reportCodeChange();\n+      }\n+\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}