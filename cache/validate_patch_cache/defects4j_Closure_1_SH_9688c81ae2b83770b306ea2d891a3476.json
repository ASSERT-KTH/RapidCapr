{
    "patch": "            && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      while (argList.hasChildren()) {\n        Node param = argList.getFirstChild();\n\n        Var var = fnScope.getVar(param.getString());\n\n        if (!referenced.contains(var)) {\n          argList.removeChild(param);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f7fddf3b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,17 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+            && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      while (argList.hasChildren()) {\n+        Node param = argList.getFirstChild();\n+\n+        Var var = fnScope.getVar(param.getString());\n+\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(param);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}