{
    "patch": "            Matcher varargMatcher = matchers.get(indexOfVararg);\n            Object[] varargValues = (Object[]) invocation.getArguments()[indexOfVararg];\n            int expectedValuesCount = invocation.getArguments().length - indexOfVararg - 1;\n            if (varargValues.length == expectedValuesCount) {\n                for (int i = 0; i < expectedValuesCount; i++) {\n                    ((CapturesArguments) varargMatcher).captureFrom(varargValues[i]);\n                }\n            } else {\n                throw new UnsupportedOperationException();\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..de59d12c1 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,16 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Matcher varargMatcher = matchers.get(indexOfVararg);\n+            Object[] varargValues = (Object[]) invocation.getArguments()[indexOfVararg];\n+            int expectedValuesCount = invocation.getArguments().length - indexOfVararg - 1;\n+            if (varargValues.length == expectedValuesCount) {\n+                for (int i = 0; i < expectedValuesCount; i++) {\n+                    ((CapturesArguments) varargMatcher).captureFrom(varargValues[i]);\n+                }\n+            } else {\n+                throw new UnsupportedOperationException();\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 0",
    "test_result": "FAIL"
}