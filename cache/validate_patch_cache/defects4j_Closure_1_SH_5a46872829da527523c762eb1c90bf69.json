{
    "patch": "Node function = fnScope.getRootNode();\n\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\n\nNode argList = getFunctionArgList(function);\nSet<String> argsToRemove = new HashSet<>();\nboolean modifyCallers = modifyCallSites\n    && callSiteOptimizer.canModifyCallers(function);\nif (!modifyCallers) {\n  // Collect unreferenced args.\n  for (Node arg : argList.children()) {\n    Var var = fnScope.getVar(arg.getString());\n    if (!referenced.contains(var)) {\n      argsToRemove.add(arg.getString());\n    } else if (!argsToRemove.isEmpty()) {\n      // If an argument has already been marked for removal and a\n      // referenced argument has been encountered then the marked\n      // argument can't be removed.\n      argsToRemove.remove(arg.getString());\n    }\n  }\n  // Strip unreferenced args.\n  for (String argName : argsToRemove) {\n    Node arg = argList.getFirstChild();\n    while (!arg.getString().equals(argName)) {\n      arg = arg.getNext();\n    }\n    arg.detach();\n    compiler.reportCodeChange();\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..36c5d1d7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,43 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+Set<String> argsToRemove = new HashSet<>();\n+boolean modifyCallers = modifyCallSites\n+    && callSiteOptimizer.canModifyCallers(function);\n+if (!modifyCallers) {\n+  // Collect unreferenced args.\n+  for (Node arg : argList.children()) {\n+    Var var = fnScope.getVar(arg.getString());\n+    if (!referenced.contains(var)) {\n+      argsToRemove.add(arg.getString());\n+    } else if (!argsToRemove.isEmpty()) {\n+      // If an argument has already been marked for removal and a\n+      // referenced argument has been encountered then the marked\n+      // argument can't be removed.\n+      argsToRemove.remove(arg.getString());\n+    }\n+  }\n+  // Strip unreferenced args.\n+  for (String argName : argsToRemove) {\n+    Node arg = argList.getFirstChild();\n+    while (!arg.getString().equals(argName)) {\n+      arg = arg.getNext();\n+    }\n+    arg.detach();\n+    compiler.reportCodeChange();\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}