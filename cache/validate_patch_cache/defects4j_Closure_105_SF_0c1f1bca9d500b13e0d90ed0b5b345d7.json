{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  StringBuilder sb = new StringBuilder();\n  int foldedSize = 0;\n  Node elem = arrayNode.getFirstChild();\n\n  // Merges adjacent String nodes.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (sb.length() > 0) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n    } else {\n      if (sb.length() > 0) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      sb.setLength(0);\n      break;\n    }\n    elem = elem.getNext();\n  }\n\n  while (elem != null) {\n    Node nextElem = elem.getNext();\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (sb.length() > 0) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n    } else {\n      if (sb.length() > 0) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayNode.removeChild(elem);\n      Node newNode = Node.newString(sb.toString());\n      arrayNode.addChildToBack(newNode);\n      arrayNode.addChildToBack(elem);\n      elem = newNode;\n      sb.setLength(0);\n    }\n    elem = nextElem;\n  }\n\n  if (sb.length() > 0) {\n    // + 2 for the quotes.\n    foldedSize += sb.length() + 2;\n    arrayNode.addChildToBack(Node.newString(sb.toString()));\n  }\n\n  foldedSize += (arrayNode.getChildCount() - 1) * joinString.length();\n  // + 2 for the quotes, + 2 for empty array, + 9 for \".join()\".\n  if (foldedSize + 13 > InlineCostEstimator.getCost(n)) {\n    return;\n  }\n\n  if (arrayNode.getChildCount() == 0) {\n    parent.replaceChild(n, Node.newString(\"\"));\n  } else if (arrayNode.getChildCount() == 1) {\n    Node foldedStringNode = arrayNode.removeFirstChild();\n    if (foldedSize <= InlineCostEstimator.getCost(foldedStringNode)) {\n      if (foldedStringNode.getType() != Token.STRING) {\n        // If the Node is not a string literal, ensure that\n        // it is coerced to a string.\n        Node replacement = new Node(Token.ADD,\n          Node.newString(\"\"), foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      parent.replaceChild(n, foldedStringNode);\n    }\n  } else {\n    Node stringJoinCall = new Node(Token.CALL);\n    Node callee = new Node(Token.GETPROP,\n      Node.newString(\"\"), Node.newString(\"join\"));\n    stringJoinCall.addChildToBack(callee);\n    stringJoinCall.addChildToBack(arrayNode);\n    if (foldedSize <= InlineCostEstimator.getCost(stringJoinCall)) {\n      parent.replaceChild(n, stringJoinCall);\n    }\n  }\n\n  t.getCompiler().reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..ee16e5e9 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,96 +1458,105 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = left.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+  if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+  String joinString = NodeUtil.getStringValue(right);\n+  StringBuilder sb = new StringBuilder();\n+  int foldedSize = 0;\n+  Node elem = arrayNode.getFirstChild();\n+\n+  // Merges adjacent String nodes.\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      if (sb.length() > 0) {\n+        sb.append(joinString);\n       }\n-      elem = elem.getNext();\n+      sb.append(NodeUtil.getStringValue(elem));\n+    } else {\n+      if (sb.length() > 0) {\n+        // + 2 for the quotes.\n+        foldedSize += sb.length() + 2;\n+      }\n+      foldedSize += InlineCostEstimator.getCost(elem);\n+      sb.setLength(0);\n+      break;\n     }\n+    elem = elem.getNext();\n+  }\n \n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+  while (elem != null) {\n+    Node nextElem = elem.getNext();\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      if (sb.length() > 0) {\n+        sb.append(joinString);\n+      }\n+      sb.append(NodeUtil.getStringValue(elem));\n+    } else {\n+      if (sb.length() > 0) {\n+        // + 2 for the quotes.\n+        foldedSize += sb.length() + 2;\n+      }\n+      foldedSize += InlineCostEstimator.getCost(elem);\n+      arrayNode.removeChild(elem);\n+      Node newNode = Node.newString(sb.toString());\n+      arrayNode.addChildToBack(newNode);\n+      arrayNode.addChildToBack(elem);\n+      elem = newNode;\n+      sb.setLength(0);\n+    }\n+    elem = nextElem;\n+  }\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+  if (sb.length() > 0) {\n+    // + 2 for the quotes.\n+    foldedSize += sb.length() + 2;\n+    arrayNode.addChildToBack(Node.newString(sb.toString()));\n+  }\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  foldedSize += (arrayNode.getChildCount() - 1) * joinString.length();\n+  // + 2 for the quotes, + 2 for empty array, + 9 for \".join()\".\n+  if (foldedSize + 13 > InlineCostEstimator.getCost(n)) {\n+    return;\n+  }\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+  if (arrayNode.getChildCount() == 0) {\n+    parent.replaceChild(n, Node.newString(\"\"));\n+  } else if (arrayNode.getChildCount() == 1) {\n+    Node foldedStringNode = arrayNode.removeFirstChild();\n+    if (foldedSize <= InlineCostEstimator.getCost(foldedStringNode)) {\n+      if (foldedStringNode.getType() != Token.STRING) {\n+        // If the Node is not a string literal, ensure that\n+        // it is coerced to a string.\n+        Node replacement = new Node(Token.ADD,\n+          Node.newString(\"\"), foldedStringNode);\n+        foldedStringNode = replacement;\n+      }\n+      parent.replaceChild(n, foldedStringNode);\n+    }\n+  } else {\n+    Node stringJoinCall = new Node(Token.CALL);\n+    Node callee = new Node(Token.GETPROP,\n+      Node.newString(\"\"), Node.newString(\"join\"));\n+    stringJoinCall.addChildToBack(callee);\n+    stringJoinCall.addChildToBack(arrayNode);\n+    if (foldedSize <= InlineCostEstimator.getCost(stringJoinCall)) {\n+      parent.replaceChild(n, stringJoinCall);\n     }\n-    t.getCompiler().reportCodeChange();\n   }\n \n+  t.getCompiler().reportCodeChange();\n+}\n+\n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}