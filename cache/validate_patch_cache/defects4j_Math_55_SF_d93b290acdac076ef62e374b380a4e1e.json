{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      final double v1x = v1.x;\n      final double v1y = v1.y;\n      final double v1z = v1.z;\n      final double v2x = v2.x;\n      final double v2y = v2.y;\n      final double v2z = v2.z;\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      final double ax = Math.abs(v1x);\n      final double ay = Math.abs(v1y);\n      final double az = Math.abs(v1z);\n      final double bx = Math.abs(v2x);\n      final double by = Math.abs(v2y);\n      final double bz = Math.abs(v2z);\n      final int maxIndex = (ax > ay ?\n                            (ax > az ? 0 : 2) :\n                            (ay > az ? 1 : 2));\n      final double compX = maxIndex == 0 ? v1x : (maxIndex == 1 ? v1y : v1z);\n      final double compY = maxIndex == 0 ? v2x : (maxIndex == 1 ? v2y : v2z);\n      final double c1 = compY / compX;\n      final double c2 = c1 * c1;\n      final double d1 = ax * ax + ay * ay + az * az;\n      final double d2 = bx * bx + by * by + bz * bz;\n      final double rho = FastMath.sqrt(d1 / d2) * c1;\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      final double v3x = v1x - rho * v2x;\n      final double v3y = v1y - rho * v2y;\n      final double v3z = v1z - rho * v2z;\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      return new Vector3D(v3y * v2z - v3z * v2y,\n                          v3z * v2x - v3x * v2z,\n                          v3x * v2y - v3y * v2x);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..e886dfbff 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,11 +454,33 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+      final double v1x = v1.x;\n+      final double v1y = v1.y;\n+      final double v1z = v1.z;\n+      final double v2x = v2.x;\n+      final double v2y = v2.y;\n+      final double v2z = v2.z;\n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n+      final double ax = Math.abs(v1x);\n+      final double ay = Math.abs(v1y);\n+      final double az = Math.abs(v1z);\n+      final double bx = Math.abs(v2x);\n+      final double by = Math.abs(v2y);\n+      final double bz = Math.abs(v2z);\n+      final int maxIndex = (ax > ay ?\n+                            (ax > az ? 0 : 2) :\n+                            (ay > az ? 1 : 2));\n+      final double compX = maxIndex == 0 ? v1x : (maxIndex == 1 ? v1y : v1z);\n+      final double compY = maxIndex == 0 ? v2x : (maxIndex == 1 ? v2y : v2z);\n+      final double c1 = compY / compX;\n+      final double c2 = c1 * c1;\n+      final double d1 = ax * ax + ay * ay + az * az;\n+      final double d2 = bx * bx + by * by + bz * bz;\n+      final double rho = FastMath.sqrt(d1 / d2) * c1;\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n@@ -466,13 +488,14 @@ public class Vector3D implements Serializable {\n       // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+      final double v3x = v1x - rho * v2x;\n+      final double v3y = v1y - rho * v2y;\n+      final double v3z = v1z - rho * v2z;\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+      return new Vector3D(v3y * v2z - v3z * v2y,\n+                          v3z * v2x - v3x * v2z,\n+                          v3x * v2y - v3y * v2x);\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}