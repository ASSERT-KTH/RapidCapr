{
    "patch": "  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    if (arrayNode == null || arrayNode.getType() != Token.ARRAYLIT) {\n      return n;\n    }\n\n    Node secondArg = callTarget.getNext();\n    boolean hasSeparator = false;\n    String separator = \",\";\n    if (secondArg != null) {\n      if (!NodeUtil.isImmutableValue(secondArg)) {\n        return n;\n      }\n      hasSeparator = true;\n      separator = NodeUtil.getStringValue(secondArg);\n    }\n\n    List<Node> arrayFoldedChildren = new ArrayList<>();\n    StringBuilder currentString = new StringBuilder();\n    boolean moreThanOne = false;\n    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n      if (elem.getType() == Token.EMPTY) {\n        continue;\n      }\n      if (NodeUtil.isImmutableValue(elem)) {\n        String str = NodeUtil.getArrayElementStringValue(elem);\n        if (!str.isEmpty()) {\n          currentString.append(str);\n        }\n      } else {\n        if (currentString.length() > 0) {\n          arrayFoldedChildren.add(Node.newString(currentString.toString()).copyInformationFrom(elem));\n          currentString = new StringBuilder();\n          moreThanOne = true;\n        }\n        arrayFoldedChildren.add(elem);\n      }\n    }\n\n    if (currentString.length() > 0) {\n      arrayFoldedChildren.add(Node.newString(currentString.toString()));\n      moreThanOne = true;\n    }\n\n    if (arrayFoldedChildren.size() == 0) {\n      Node emptyStringNode = Node.newString(\"\").copyInformationFrom(n);\n      n.getParent().replaceChild(n, emptyStringNode);\n      reportCodeChange();\n      return emptyStringNode;\n    }\n\n    String separatorRegex = Pattern.quote(separator);\n    String joinedString;\n    if (moreThanOne) {\n      joinedString = \"\\\"\" + String.join(separator, arrayFoldedChildren.stream()\n          .map(NodeUtil::getArrayElementStringValue)\n          .collect(Collectors.toList())) + \"\\\"\";\n    } else {\n      joinedString = NodeUtil.getArrayElementStringValue(arrayFoldedChildren.get(0));\n    }\n\n    Node stringNode = Node.newString(joinedString).copyInformationFrom(n);\n    if (NodeUtil.isImmutableValue(n)) {\n      return stringNode;\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    int foldedSize = InlineCostEstimator.getCost(stringNode);\n\n    if (hasSeparator) {\n      foldedSize += inlineCostEstimator(stringNode.getString()) -\n          inlineCostEstimator(separatorRegex) * (arrayFoldedChildren.size() - 1);\n    }\n\n    if (foldedSize <= originalSize) {\n      n.getParent().replaceChild(n, stringNode);\n      reportCodeChange();\n      return stringNode;\n    }\n\n    return n;\n  }\n  \n  private int inlineCostEstimator(String str) {\n    return str.length() * CostEstimate.BASE_CHAR_COST - (str.length() - 1) * CostEstimate.BASE_STRING_LENGTH_OFFSET;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..331f9412 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -366,114 +366,95 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n    */\n   private Node tryFoldArrayJoin(Node n) {\n     Node callTarget = n.getFirstChild();\n-\n     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n       return n;\n     }\n \n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n-    }\n-\n     Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n-\n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+    if (arrayNode == null || arrayNode.getType() != Token.ARRAYLIT) {\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    Node secondArg = callTarget.getNext();\n+    boolean hasSeparator = false;\n+    String separator = \",\";\n+    if (secondArg != null) {\n+      if (!NodeUtil.isImmutableValue(secondArg)) {\n+        return n;\n+      }\n+      hasSeparator = true;\n+      separator = NodeUtil.getStringValue(secondArg);\n+    }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n+    List<Node> arrayFoldedChildren = new ArrayList<>();\n+    StringBuilder currentString = new StringBuilder();\n+    boolean moreThanOne = false;\n+    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n+      if (elem.getType() == Token.EMPTY) {\n+        continue;\n+      }\n+      if (NodeUtil.isImmutableValue(elem)) {\n+        String str = NodeUtil.getArrayElementStringValue(elem);\n+        if (!str.isEmpty()) {\n+          currentString.append(str);\n         }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n       } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+        if (currentString.length() > 0) {\n+          arrayFoldedChildren.add(Node.newString(currentString.toString()).copyInformationFrom(elem));\n+          currentString = new StringBuilder();\n+          moreThanOne = true;\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n     }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+    if (currentString.length() > 0) {\n+      arrayFoldedChildren.add(Node.newString(currentString.toString()));\n+      moreThanOne = true;\n+    }\n+\n+    if (arrayFoldedChildren.size() == 0) {\n+      Node emptyStringNode = Node.newString(\"\").copyInformationFrom(n);\n+      n.getParent().replaceChild(n, emptyStringNode);\n+      reportCodeChange();\n+      return emptyStringNode;\n+    }\n+\n+    String separatorRegex = Pattern.quote(separator);\n+    String joinedString;\n+    if (moreThanOne) {\n+      joinedString = \"\\\"\" + String.join(separator, arrayFoldedChildren.stream()\n+          .map(NodeUtil::getArrayElementStringValue)\n+          .collect(Collectors.toList())) + \"\\\"\";\n+    } else {\n+      joinedString = NodeUtil.getArrayElementStringValue(arrayFoldedChildren.get(0));\n+    }\n+\n+    Node stringNode = Node.newString(joinedString).copyInformationFrom(n);\n+    if (NodeUtil.isImmutableValue(n)) {\n+      return stringNode;\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n     int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+    int foldedSize = InlineCostEstimator.getCost(stringNode);\n+\n+    if (hasSeparator) {\n+      foldedSize += inlineCostEstimator(stringNode.getString()) -\n+          inlineCostEstimator(separatorRegex) * (arrayFoldedChildren.size() - 1);\n+    }\n+\n+    if (foldedSize <= originalSize) {\n+      n.getParent().replaceChild(n, stringNode);\n+      reportCodeChange();\n+      return stringNode;\n     }\n \n     return n;\n   }\n+  \n+  private int inlineCostEstimator(String str) {\n+    return str.length() * CostEstimate.BASE_CHAR_COST - (str.length() - 1) * CostEstimate.BASE_STRING_LENGTH_OFFSET;\n+  }\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +623,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}