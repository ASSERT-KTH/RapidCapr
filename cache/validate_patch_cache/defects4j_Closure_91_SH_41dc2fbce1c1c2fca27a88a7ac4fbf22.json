{
    "patch": "      if (n.getJSDocInfo() != null &&\n          (n.getJSDocInfo().hasThisType() ||\n           n.getJSDocInfo().isOverride() ||\n           n.getJSDocInfo().isConstructor() ||\n           n.getJSDocInfo().isInterface())) {\n        return false;\n      }\n\n      boolean isPrototypeProperty = false;\n      Node current = parent;\n      while (current != null && !isPrototypeProperty) {\n        if (NodeUtil.isGet(current)) {\n          Node getTarget = current.getFirstChild();\n          if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n            isPrototypeProperty = true;\n          }\n        }\n        current = current.getParent();\n      }\n      if (isPrototypeProperty) {\n        return false;\n      }\n\n      if (parent != null && parent.getType() == Token.VAR) {\n        Node grandparent = parent.getParent();\n        if (grandparent != null && grandparent.getType() == Token.FOR_OF) {\n          return false;\n        }\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..ab3c5bcb 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,37 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getJSDocInfo() != null &&\n+          (n.getJSDocInfo().hasThisType() ||\n+           n.getJSDocInfo().isOverride() ||\n+           n.getJSDocInfo().isConstructor() ||\n+           n.getJSDocInfo().isInterface())) {\n+        return false;\n+      }\n+\n+      boolean isPrototypeProperty = false;\n+      Node current = parent;\n+      while (current != null && !isPrototypeProperty) {\n+        if (NodeUtil.isGet(current)) {\n+          Node getTarget = current.getFirstChild();\n+          if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n+            isPrototypeProperty = true;\n+          }\n+        }\n+        current = current.getParent();\n+      }\n+      if (isPrototypeProperty) {\n+        return false;\n+      }\n+\n+      if (parent != null && parent.getType() == Token.VAR) {\n+        Node grandparent = parent.getParent();\n+        if (grandparent != null && grandparent.getType() == Token.FOR_OF) {\n+          return false;\n+        }\n+      }\n+\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}