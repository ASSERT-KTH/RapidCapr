{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int offsetLocal = getOffset(instantLocal);\n        final long instantAdjusted = instantLocal - offsetLocal;\n\n        final int offsetBefore = getOffset(instantAdjusted - 1);\n        final int offsetAfter = getOffset(instantAdjusted + 1);\n\n        if (offsetBefore == offsetAfter) {\n            return offsetBefore;\n        }\n\n        if (offsetLocal >= Math.max(offsetBefore, offsetAfter)) {\n            return offsetLocal;\n        }\n\n        if (offsetLocal < Math.min(offsetBefore, offsetAfter)) {\n            if (offsetBefore < offsetAfter) {\n                return offsetBefore;\n            }\n            return offsetAfter;\n        }\n\n        if (offsetBefore < offsetAfter) {\n            final long nextTransition = nextTransition(instantAdjusted);\n            if (nextTransition == instantLocal - offsetLocal) {\n                return offsetLocal;\n            }\n            return getOffset(nextTransition);\n        }\n\n        final long prevTransition = previousTransition(instantAdjusted);\n        if (instantAdjusted - prevTransition > MAX_MILLIS_BETWEEN_TRANSITIONS) {\n            return offsetBefore;\n        }\n\n        if (prevTransition == instantLocal - offsetLocal) {\n            return offsetLocal;\n        }\n\n        return getOffset(prevTransition);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..e36fef95 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,45 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n         final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+\n+        final int offsetBefore = getOffset(instantAdjusted - 1);\n+        final int offsetAfter = getOffset(instantAdjusted + 1);\n+\n+        if (offsetBefore == offsetAfter) {\n+            return offsetBefore;\n+        }\n+\n+        if (offsetLocal >= Math.max(offsetBefore, offsetAfter)) {\n+            return offsetLocal;\n+        }\n+\n+        if (offsetLocal < Math.min(offsetBefore, offsetAfter)) {\n+            if (offsetBefore < offsetAfter) {\n+                return offsetBefore;\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+            return offsetAfter;\n+        }\n+\n+        if (offsetBefore < offsetAfter) {\n+            final long nextTransition = nextTransition(instantAdjusted);\n+            if (nextTransition == instantLocal - offsetLocal) {\n+                return offsetLocal;\n             }\n+            return getOffset(nextTransition);\n         }\n-        return offsetAdjusted;\n+\n+        final long prevTransition = previousTransition(instantAdjusted);\n+        if (instantAdjusted - prevTransition > MAX_MILLIS_BETWEEN_TRANSITIONS) {\n+            return offsetBefore;\n+        }\n+\n+        if (prevTransition == instantLocal - offsetLocal) {\n+            return offsetLocal;\n+        }\n+\n+        return getOffset(prevTransition);\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}