{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.autobox().restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct != null && (ct.isConstructor() || ct.isInterface())) {\n        if (ct.isInterface()) {\n          Set<JSType> implementedTypes = ct.getImplementedInterfaces();\n          if (implementedTypes.size() == 1) {\n            JSType implementedType = implementedTypes.iterator().next();\n            if (implementedType.isFunctionType()) {\n              ct = implementedType.toMaybeFunctionType();\n            }\n          }\n        }\n        if (ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      } else if (constructorType.isFunctionType()) {\n        JSType returnType = constructorType.toMaybeFunctionType().getReturnType();\n        if (returnType != null && !returnType.isUnknownType()) {\n          type = returnType.autobox().restrictByNotNullOrUndefined();\n        }\n      }\n    }\n  }\n  if (type == null) {\n    type = getNativeType(JSTypeNative.OBJECT_TYPE);\n  }\n  n.setJSType(type);\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..1f1efac6 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,47 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+  if (constructorType != null) {\n+    constructorType = constructorType.autobox().restrictByNotNullOrUndefined();\n+    if (constructorType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct != null && (ct.isConstructor() || ct.isInterface())) {\n+        if (ct.isInterface()) {\n+          Set<JSType> implementedTypes = ct.getImplementedInterfaces();\n+          if (implementedTypes.size() == 1) {\n+            JSType implementedType = implementedTypes.iterator().next();\n+            if (implementedType.isFunctionType()) {\n+              ct = implementedType.toMaybeFunctionType();\n+            }\n+          }\n         }\n-        if (ct != null && ct.isConstructor()) {\n+        if (ct.isConstructor()) {\n           type = ct.getInstanceType();\n         }\n+      } else if (constructorType.isFunctionType()) {\n+        JSType returnType = constructorType.toMaybeFunctionType().getReturnType();\n+        if (returnType != null && !returnType.isUnknownType()) {\n+          type = returnType.autobox().restrictByNotNullOrUndefined();\n+        }\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n-    return scope;\n   }\n+  if (type == null) {\n+    type = getNativeType(JSTypeNative.OBJECT_TYPE);\n+  }\n+  n.setJSType(type);\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n+  }\n+  return scope;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}