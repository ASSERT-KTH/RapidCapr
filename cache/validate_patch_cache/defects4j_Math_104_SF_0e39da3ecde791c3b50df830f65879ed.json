{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    \n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    double d = 1.0 / x;\n    double s = Math.exp(-a * Math.log(x) - Gamma.logGamma(a)) * Math.pow(x, a);\n\n    double gammaA = Gamma.gamma(a);\n    double gln = Gamma.logGamma(a);\n\n    int maxIterations = 100;\n    double epsilon = 10e-15;\n    \n    double sum = 1.0 / a;\n    double ap = a;\n\n    for (int n = 1; n <= maxIterations; n++) {\n        ap += 1.0;\n        sum += ap * d;\n        \n        if (Math.abs(ap * d) < epsilon) {\n            break;\n        }\n    }\n    \n    return s * sum / gammaA;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..62909adec 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,38 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    \n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    double d = 1.0 / x;\n+    double s = Math.exp(-a * Math.log(x) - Gamma.logGamma(a)) * Math.pow(x, a);\n+\n+    double gammaA = Gamma.gamma(a);\n+    double gln = Gamma.logGamma(a);\n+\n+    int maxIterations = 100;\n+    double epsilon = 10e-15;\n+    \n+    double sum = 1.0 / a;\n+    double ap = a;\n+\n+    for (int n = 1; n <= maxIterations; n++) {\n+        ap += 1.0;\n+        sum += ap * d;\n+        \n+        if (Math.abs(ap * d) < epsilon) {\n+            break;\n+        }\n+    }\n+    \n+    return s * sum / gammaA;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}