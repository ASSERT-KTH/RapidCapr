{
    "patch": "    Node body = NodeUtil.getFunctionBody(function);\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      boolean foundArgRef = false;\n      while (lastArg != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        Node nextArg = lastArg.getPrevious();\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n        } else {\n          foundArgRef = true;\n        }\n        lastArg = nextArg;\n      }\n\n      // Rename all referenced arguments to the shortest names.\n      if (foundArgRef) {\n        FunctionArgumentInjector functionArgumentInjector =\n            new FunctionArgumentInjector(compiler);\n        functionArgumentInjector.process(fnScope, argList.getParent());\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n\n    // Handle optional arguments\n    Node functionNode = fnScope.getRootNode();\n    if (!compiler.getCodingConvention().isOptionalParameterInjectionOn\n        (functionNode, compiler.getOptions())) {\n      return;\n    }\n    int numDefaultValues = 0;\n    int maybeValuesLen = 0;\n    for (Node argNode : argList.children()) {\n      if (argNode.isDefaultValue()) {\n        numDefaultValues++;\n      } else if (argNode.isOptionalArg()) {\n        maybeValuesLen++;\n      }\n    }\n    if (maybeValuesLen > 0) {\n      optionalArgToVarTransformer.processArguments(body, argList, maybeValuesLen);\n    }\n    if (numDefaultValues > 0) {\n      defaultArgToParamTransformer.processArguments(body, argList);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..789f663d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,62 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node body = NodeUtil.getFunctionBody(function);\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      boolean foundArgRef = false;\n+      while (lastArg != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        Node nextArg = lastArg.getPrevious();\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+        } else {\n+          foundArgRef = true;\n+        }\n+        lastArg = nextArg;\n+      }\n+\n+      // Rename all referenced arguments to the shortest names.\n+      if (foundArgRef) {\n+        FunctionArgumentInjector functionArgumentInjector =\n+            new FunctionArgumentInjector(compiler);\n+        functionArgumentInjector.process(fnScope, argList.getParent());\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+\n+    // Handle optional arguments\n+    Node functionNode = fnScope.getRootNode();\n+    if (!compiler.getCodingConvention().isOptionalParameterInjectionOn\n+        (functionNode, compiler.getOptions())) {\n+      return;\n+    }\n+    int numDefaultValues = 0;\n+    int maybeValuesLen = 0;\n+    for (Node argNode : argList.children()) {\n+      if (argNode.isDefaultValue()) {\n+        numDefaultValues++;\n+      } else if (argNode.isOptionalArg()) {\n+        maybeValuesLen++;\n+      }\n+    }\n+    if (maybeValuesLen > 0) {\n+      optionalArgToVarTransformer.processArguments(body, argList, maybeValuesLen);\n+    }\n+    if (numDefaultValues > 0) {\n+      defaultArgToParamTransformer.processArguments(body, argList);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}