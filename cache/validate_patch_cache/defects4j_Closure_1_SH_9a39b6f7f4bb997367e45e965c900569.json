{
    "patch": "    \n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Find the first unreferenced parameter and remove all following unreferenced parameters.\n    boolean foundUnreferenced = false;\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        foundUnreferenced = true;\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else if (foundUnreferenced) {\n        break;\n      }\n    }\n\n    // Remove leading arguments by adding to a new parameter list.\n    if (modifyCallers && foundUnreferenced) {\n      Node newArgList = new Node(Token.LP);\n      Node currentArg = argList.getFirstChild();\n      while (!newArgList.hasOneChild() || currentArg != null) {\n        Var var = fnScope.getVar(currentArg.getString());\n        if (referenced.contains(var)) {\n          newArgList.addChildToBack(currentArg.cloneTree());\n        }\n        currentArg = currentArg.getNext();\n      }\n      if (newArgList.getFirstChild() == null) {\n        newArgList.addChildToBack(new Node(Token.EMPTY));\n      }\n      function.replaceChild(argList, newArgList.useSourceInfoIfMissingFrom(argList));\n      compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..68f278f1 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,41 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Find the first unreferenced parameter and remove all following unreferenced parameters.\n+    boolean foundUnreferenced = false;\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      Var var = fnScope.getVar(lastArg.getString());\n+      if (!referenced.contains(var)) {\n+        foundUnreferenced = true;\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      } else if (foundUnreferenced) {\n+        break;\n+      }\n+    }\n+\n+    // Remove leading arguments by adding to a new parameter list.\n+    if (modifyCallers && foundUnreferenced) {\n+      Node newArgList = new Node(Token.LP);\n+      Node currentArg = argList.getFirstChild();\n+      while (!newArgList.hasOneChild() || currentArg != null) {\n+        Var var = fnScope.getVar(currentArg.getString());\n+        if (referenced.contains(var)) {\n+          newArgList.addChildToBack(currentArg.cloneTree());\n+        }\n+        currentArg = currentArg.getNext();\n+      }\n+      if (newArgList.getFirstChild() == null) {\n+        newArgList.addChildToBack(new Node(Token.EMPTY));\n+      }\n+      function.replaceChild(argList, newArgList.useSourceInfoIfMissingFrom(argList));\n+      compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}