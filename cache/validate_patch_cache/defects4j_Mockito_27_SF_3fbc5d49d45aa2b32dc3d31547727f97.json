{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MockitoFramework.Filter newFilter = MockitoFramework.Filter.INLINE_ACCEPTED;\n    Object instance = mock;\n    while (Proxy.isProxyClass(instance.getClass())) {\n        instance = MockUtil.getInvocationHandler(instance);\n    }\n    ((MockitoFramework) instance).setMockitoInterceptor(newFilter, newMockHandler.getInterceptor());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..a1075bb5b 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,17 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MockitoFramework.Filter newFilter = MockitoFramework.Filter.INLINE_ACCEPTED;\n+    Object instance = mock;\n+    while (Proxy.isProxyClass(instance.getClass())) {\n+        instance = MockUtil.getInvocationHandler(instance);\n+    }\n+    ((MockitoFramework) instance).setMockitoInterceptor(newFilter, newMockHandler.getInterceptor());\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: package MockitoFramework does not exist",
    "test_result": "ERROR"
}