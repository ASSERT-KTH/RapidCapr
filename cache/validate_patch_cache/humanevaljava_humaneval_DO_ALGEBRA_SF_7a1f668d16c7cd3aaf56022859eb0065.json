{
    "patch": "public static double do_algebra(String[] operator, int[] operand) throws ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i++) {\n        if (operator[i].equals(\"^\")) {\n            expression += \"Math.pow(\" + operand[i] + \",\" + operand[i+1] + \")\";\n            if (i != operand.length - 2) {\n                expression += operator[i+1];\n            }\n            i++;\n        } else {\n            expression += operand[i];\n            if (i != operand.length - 1) {\n                expression += operator[i];\n            }\n        }\n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/DO_ALGEBRA.java b/src/main/java/humaneval/buggy/DO_ALGEBRA.java\nindex 08aedcb..4cb5365 100644\n--- a/src/main/java/humaneval/buggy/DO_ALGEBRA.java\n+++ b/src/main/java/humaneval/buggy/DO_ALGEBRA.java\n@@ -27,13 +27,24 @@ import javax.script.ScriptException;\n //     Operator list has at least one operator, and operand list has at least two operands.\n \n public class DO_ALGEBRA {\n-    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n-        ScriptEngineManager mgr = new ScriptEngineManager();\n-        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n-        String expression = \"\";\n-        for (int i = 0; i < operand.length; i += 1) {\n-            expression += operator[i] + operand[i];\n+public static double do_algebra(String[] operator, int[] operand) throws ScriptException {\n+    ScriptEngineManager mgr = new ScriptEngineManager();\n+    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n+    String expression = \"\";\n+    for (int i = 0; i < operand.length; i++) {\n+        if (operator[i].equals(\"^\")) {\n+            expression += \"Math.pow(\" + operand[i] + \",\" + operand[i+1] + \")\";\n+            if (i != operand.length - 2) {\n+                expression += operator[i+1];\n+            }\n+            i++;\n+        } else {\n+            expression += operand[i];\n+            if (i != operand.length - 1) {\n+                expression += operator[i];\n+            }\n         }\n-        return Double.parseDouble(engine.eval(expression).toString());\n     }\n+    return Double.parseDouble(engine.eval(expression).toString());\n+}\n }",
    "result_reason": "",
    "test_result": "FAIL"
}