{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        int year = values[0];\n        int month = values[1] + valueToAdd;\n        int dayOfMonth = values[2];\n        if (month > 12) {\n            int yearsToAdd = (month - 1) / 12;\n            year += yearsToAdd;\n            month -= (12 * yearsToAdd);\n        } else if (month < 1) {\n            int yearsToSubtract = Math.abs(month) / 12 + 1;\n            year -= yearsToSubtract;\n            month += (12 * yearsToSubtract);\n        }\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(new LocalDate(year, month, 1).toDateTimeAtStartOfDay().getMillis());\n        if (dayOfMonth > maxDayOfMonth) {\n            dayOfMonth = maxDayOfMonth;\n        }\n        int[] newValues = {year, month - 1, dayOfMonth};\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..57e509bd 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,36 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int year = values[0];\n+        int month = values[1] + valueToAdd;\n+        int dayOfMonth = values[2];\n+        if (month > 12) {\n+            int yearsToAdd = (month - 1) / 12;\n+            year += yearsToAdd;\n+            month -= (12 * yearsToAdd);\n+        } else if (month < 1) {\n+            int yearsToSubtract = Math.abs(month) / 12 + 1;\n+            year -= yearsToSubtract;\n+            month += (12 * yearsToSubtract);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(new LocalDate(year, month, 1).toDateTimeAtStartOfDay().getMillis());\n+        if (dayOfMonth > maxDayOfMonth) {\n+            dayOfMonth = maxDayOfMonth;\n         }\n+        int[] newValues = {year, month - 1, dayOfMonth};\n+        return newValues;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}