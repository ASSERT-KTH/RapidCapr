{
    "patch": "/**\n * @return Whether the variable is only assigned a value once for its\n *     lifetime.\n */\nboolean isAssignedOnceInLifetime() {\n  int size = references.size();\n  Reference initRef = getInitializingReference();\n  boolean seenAssignments = false;\n\n  if (initRef == null) {\n    return false;\n  }\n\n  for (int i = 0; i < size; i++) {\n    Reference r = references.get(i);\n\n    if (r.isSimpleAssignmentToName()) {\n      if (seenAssignments || !r.getBasicBlock().belongsToSameFunction(initRef.getBasicBlock())) {\n        return false;\n      }\n      \n      seenAssignments = true;\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..318796a7 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,33 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+/**\n+ * @return Whether the variable is only assigned a value once for its\n+ *     lifetime.\n+ */\n+boolean isAssignedOnceInLifetime() {\n+  int size = references.size();\n+  Reference initRef = getInitializingReference();\n+  boolean seenAssignments = false;\n+\n+  if (initRef == null) {\n+    return false;\n+  }\n+\n+  for (int i = 0; i < size; i++) {\n+    Reference r = references.get(i);\n+\n+    if (r.isSimpleAssignmentToName()) {\n+      if (seenAssignments || !r.getBasicBlock().belongsToSameFunction(initRef.getBasicBlock())) {\n+        return false;\n+      }\n+      \n+      seenAssignments = true;\n+    }\n+  }\n+\n+  return true;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}