{
    "patch": "import org.apache.commons.math.MathInternalError;\nimport org.apache.commons.math.exception.TooManyEvaluationsException;\nimport org.apache.commons.math.util.FastMath;\n\npublic class BrentSolver extends AbstractUnivariateSolver {\n\n    /**\n     * The maximum age of cached values.\n     */\n    private static final int MAXIMAL_AGING = 2;\n\n    /**\n     * The default value of the {@link #setReductionFactor(double) reduction factor}.\n     */\n    private static final double DEFAULT_REDUCTION_FACTOR = 1 / 1024d;\n\n    /**\n     * An arbitrary high iteration count for supporting termination on function value.\n     */\n    private static final int MAXIMAL_ITERATIONS_COUNT = 1000000;\n\n    /**\n     * The values.\n     */\n    private double[] f;\n\n    /**\n     * The point with the smallest value.\n     */\n    private int lastIntervalIndex;\n\n    /**\n     * Index of the top of the stack.\n     */\n    private int topIndex;\n\n    /**\n     * Abscissae.\n     */\n    private double[] x;\n\n    /**\n     * Constructor for solver.\n     *\n     * @param relativeAccuracy Maximum relative error.\n     * @param absoluteAccuracy Maximum absolute error.\n     */\n    public BrentSolver(final double relativeAccuracy,\n                       final double absoluteAccuracy) {\n        super(relativeAccuracy, absoluteAccuracy, FunctionEvaluation.MAX_EVALuations);\n    }\n\n    /**\n     * Constructor using default values for relative and absolute accuracies.\n     */\n    public BrentSolver() {\n        super(DEFAULT_RELATIVE_ACCURACY, DEFAULT_ABSOLUTE_ACCURACY, FunctionEvaluation.MAX_EVALuations);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected double doSolve() throws TooManyEvaluationsException {\n\n        // Initialization\n        double a = getMin();\n        double b = getMax();\n        double c = Double.NaN;\n        double d = Double.NaN;\n        double e = Double.NaN;\n        double minbrackdist = getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(a), FastMath.abs(b));\n        double eps = getRelativeAccuracy();\n        int maxintervalcount = getMaximalIterationCount();\n\n        // Function evaluations\n        double fa = computeObjectiveValue(a);\n        double fb = computeObjectiveValue(b);\n        double fc = fb;\n\n        // Check for zeros before verifying bracketing\n        if (FastMath.abs(fa) <= 0) {\n            return a;\n        }\n        if (FastMath.abs(fb) <= 0) {\n            return b;\n        }\n\n        // Verify bracketing\n        verifyBracketing(a, b);\n\n        // Initialization of iteration variables\n        boolean isBrent = false;\n        double s = Double.NaN;\n        double fs = Double.NaN;\n        double d1 = Double.NaN;\n        double d2 = Double.NaN;\n        while (getEvaluations() < FunctionEvaluation.MAX_EVALUATIONS.getValue()) {\n            c = fa;\n            fc = fa;\n            double delta = 0;\n            if (fb * fc > 0) {\n                c = b;\n                fc = fb;\n                delta = d - b;\n                e = a;\n                d1 = c - a;\n                d2 = delta;\n            }\n            if (FastMath.abs(fc) < FastMath.abs(fb)) {\n                a = b;\n                b = c;\n                c = a;\n                fa = fb;\n                fb = fc;\n                fc = fa;\n            }\n            final double tolB = getFunctionValueAccuracy() + eps * FastMath.abs(b);\n            final double m = 0.5 * (c - b);\n            if (FastMath.abs(m) <= tolB || fb == 0) {\n                // Bisection is needed\n                isBrent = true;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\nindex 93dd3bbdd..e6f9cc977 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\n@@ -140,209 +140,128 @@ public class BracketingNthOrderBrentSolver\n      * {@inheritDoc}\n      */\n     @Override\n-    protected double doSolve() {\n-\n-        // prepare arrays with the first points\n-        final double[] x = new double[maximalOrder + 1];\n-        final double[] y = new double[maximalOrder + 1];\n-        x[0] = getMin();\n-        x[1] = getStartValue();\n-        x[2] = getMax();\n-        verifySequence(x[0], x[1], x[2]);\n-\n-        // evaluate initial guess\n-        y[1] = computeObjectiveValue(x[1]);\n-        if (Precision.equals(y[1], 0.0, 1)) {\n-            // return the initial guess if it is a perfect root.\n-            return x[1];\n-        }\n-\n-        // evaluate first  endpoint\n-        y[0] = computeObjectiveValue(x[0]);\n-        if (Precision.equals(y[0], 0.0, 1)) {\n-            // return the first endpoint if it is a perfect root.\n-            return x[0];\n-        }\n-\n-        int nbPoints;\n-        int signChangeIndex;\n-        if (y[0] * y[1] < 0) {\n-\n-            // reduce interval if it brackets the root\n-            nbPoints        = 2;\n-            signChangeIndex = 1;\n-\n-        } else {\n-\n-            // evaluate second endpoint\n-            y[2] = computeObjectiveValue(x[2]);\n-            if (Precision.equals(y[2], 0.0, 1)) {\n-                // return the second endpoint if it is a perfect root.\n-                return x[2];\n-            }\n+import org.apache.commons.math.MathInternalError;\n+import org.apache.commons.math.exception.TooManyEvaluationsException;\n+import org.apache.commons.math.util.FastMath;\n \n-            if (y[1] * y[2] < 0) {\n-                // use all computed point as a start sampling array for solving\n-                nbPoints        = 3;\n-                signChangeIndex = 2;\n-            } else {\n-                throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n-            }\n+public class BrentSolver extends AbstractUnivariateSolver {\n \n-        }\n+    /**\n+     * The maximum age of cached values.\n+     */\n+    private static final int MAXIMAL_AGING = 2;\n \n-        // prepare a work array for inverse polynomial interpolation\n-        final double[] tmpX = new double[x.length];\n-\n-        // current tightest bracketing of the root\n-        double xA    = x[signChangeIndex - 1];\n-        double yA    = y[signChangeIndex - 1];\n-        double absYA = FastMath.abs(yA);\n-        int agingA   = 0;\n-        double xB    = x[signChangeIndex];\n-        double yB    = y[signChangeIndex];\n-        double absYB = FastMath.abs(yB);\n-        int agingB   = 0;\n-\n-        // search loop\n-        while (true) {\n-\n-            // check convergence of bracketing interval\n-            final double xTol = getAbsoluteAccuracy() +\n-                                getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n-            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n-                switch (allowed) {\n-                case ANY_SIDE :\n-                    return absYA < absYB ? xA : xB;\n-                case LEFT_SIDE :\n-                    return xA;\n-                case RIGHT_SIDE :\n-                    return xB;\n-                case BELOW_SIDE :\n-                    return (yA <= 0) ? xA : xB;\n-                case ABOVE_SIDE :\n-                    return (yA <  0) ? xB : xA;\n-                default :\n-                    // this should never happen\n-                    throw new MathInternalError(null);\n-                }\n-            }\n+    /**\n+     * The default value of the {@link #setReductionFactor(double) reduction factor}.\n+     */\n+    private static final double DEFAULT_REDUCTION_FACTOR = 1 / 1024d;\n \n-            // target for the next evaluation point\n-            double targetY;\n-            if (agingA >= MAXIMAL_AGING) {\n-                // we keep updating the high bracket, try to compensate this\n-                targetY = -REDUCTION_FACTOR * yB;\n-            } else if (agingB >= MAXIMAL_AGING) {\n-                // we keep updating the low bracket, try to compensate this\n-                targetY = -REDUCTION_FACTOR * yA;\n-            } else {\n-                // bracketing is balanced, try to find the root itself\n-                targetY = 0;\n-            }\n+    /**\n+     * An arbitrary high iteration count for supporting termination on function value.\n+     */\n+    private static final int MAXIMAL_ITERATIONS_COUNT = 1000000;\n \n-            // make a few attempts to guess a root,\n-            double nextX;\n-            int start = 0;\n-            int end   = nbPoints;\n-            do {\n-\n-                // guess a value for current target, using inverse polynomial interpolation\n-                System.arraycopy(x, start, tmpX, start, end - start);\n-                nextX = guessX(targetY, tmpX, y, start, end);\n-\n-                if (!((nextX > xA) && (nextX < xB))) {\n-                    // the guessed root is not strictly inside of the tightest bracketing interval\n-\n-                    // the guessed root is either not strictly inside the interval or it\n-                    // is a NaN (which occurs when some sampling points share the same y)\n-                    // we try again with a lower interpolation order\n-                    if (signChangeIndex - start >= end - signChangeIndex) {\n-                        // we have more points before the sign change, drop the lowest point\n-                        ++start;\n-                    } else {\n-                        // we have more points after sign change, drop the highest point\n-                        --end;\n-                    }\n-\n-                    // we need to do one more attempt\n-                    nextX = Double.NaN;\n-\n-                }\n-\n-            } while (Double.isNaN(nextX) && (end - start > 1));\n-\n-            if (Double.isNaN(nextX)) {\n-                // fall back to bisection\n-                nextX = xA + 0.5 * (xB - xA);\n-                start = signChangeIndex - 1;\n-                end   = signChangeIndex;\n-            }\n+    /**\n+     * The values.\n+     */\n+    private double[] f;\n \n-            // evaluate the function at the guessed root\n-            final double nextY = computeObjectiveValue(nextX);\n-            if (Precision.equals(nextY, 0.0, 1)) {\n-                // we have found an exact root, since it is not an approximation\n-                // we don't need to bother about the allowed solutions setting\n-                return nextX;\n-            }\n+    /**\n+     * The point with the smallest value.\n+     */\n+    private int lastIntervalIndex;\n \n-            if ((nbPoints > 2) && (end - start != nbPoints)) {\n+    /**\n+     * Index of the top of the stack.\n+     */\n+    private int topIndex;\n \n-                // we have been forced to ignore some points to keep bracketing,\n-                // they are probably too far from the root, drop them from now on\n-                nbPoints = end - start;\n-                System.arraycopy(x, start, x, 0, nbPoints);\n-                System.arraycopy(y, start, y, 0, nbPoints);\n-                signChangeIndex -= start;\n+    /**\n+     * Abscissae.\n+     */\n+    private double[] x;\n \n-            } else  if (nbPoints == x.length) {\n+    /**\n+     * Constructor for solver.\n+     *\n+     * @param relativeAccuracy Maximum relative error.\n+     * @param absoluteAccuracy Maximum absolute error.\n+     */\n+    public BrentSolver(final double relativeAccuracy,\n+                       final double absoluteAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy, FunctionEvaluation.MAX_EVALuations);\n+    }\n \n-                // we have to drop one point in order to insert the new one\n-                nbPoints--;\n+    /**\n+     * Constructor using default values for relative and absolute accuracies.\n+     */\n+    public BrentSolver() {\n+        super(DEFAULT_RELATIVE_ACCURACY, DEFAULT_ABSOLUTE_ACCURACY, FunctionEvaluation.MAX_EVALuations);\n+    }\n \n-                // keep the tightest bracketing interval as centered as possible\n-                if (signChangeIndex >= (x.length + 1) / 2) {\n-                    // we drop the lowest point, we have to shift the arrays and the index\n-                    System.arraycopy(x, 1, x, 0, nbPoints);\n-                    System.arraycopy(y, 1, y, 0, nbPoints);\n-                    --signChangeIndex;\n-                }\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected double doSolve() throws TooManyEvaluationsException {\n+\n+        // Initialization\n+        double a = getMin();\n+        double b = getMax();\n+        double c = Double.NaN;\n+        double d = Double.NaN;\n+        double e = Double.NaN;\n+        double minbrackdist = getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(a), FastMath.abs(b));\n+        double eps = getRelativeAccuracy();\n+        int maxintervalcount = getMaximalIterationCount();\n+\n+        // Function evaluations\n+        double fa = computeObjectiveValue(a);\n+        double fb = computeObjectiveValue(b);\n+        double fc = fb;\n+\n+        // Check for zeros before verifying bracketing\n+        if (FastMath.abs(fa) <= 0) {\n+            return a;\n+        }\n+        if (FastMath.abs(fb) <= 0) {\n+            return b;\n+        }\n \n+        // Verify bracketing\n+        verifyBracketing(a, b);\n+\n+        // Initialization of iteration variables\n+        boolean isBrent = false;\n+        double s = Double.NaN;\n+        double fs = Double.NaN;\n+        double d1 = Double.NaN;\n+        double d2 = Double.NaN;\n+        while (getEvaluations() < FunctionEvaluation.MAX_EVALUATIONS.getValue()) {\n+            c = fa;\n+            fc = fa;\n+            double delta = 0;\n+            if (fb * fc > 0) {\n+                c = b;\n+                fc = fb;\n+                delta = d - b;\n+                e = a;\n+                d1 = c - a;\n+                d2 = delta;\n             }\n-\n-            // insert the last computed point\n-            //(by construction, we know it lies inside the tightest bracketing interval)\n-            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n-            x[signChangeIndex] = nextX;\n-            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n-            y[signChangeIndex] = nextY;\n-            ++nbPoints;\n-\n-            // update the bracketing interval\n-            if (nextY * yA <= 0) {\n-                // the sign change occurs before the inserted point\n-                xB = nextX;\n-                yB = nextY;\n-                absYB = FastMath.abs(yB);\n-                ++agingA;\n-                agingB = 0;\n-            } else {\n-                // the sign change occurs after the inserted point\n-                xA = nextX;\n-                yA = nextY;\n-                absYA = FastMath.abs(yA);\n-                agingA = 0;\n-                ++agingB;\n-\n-                // update the sign change index\n-                signChangeIndex++;\n-\n+            if (FastMath.abs(fc) < FastMath.abs(fb)) {\n+                a = b;\n+                b = c;\n+                c = a;\n+                fa = fb;\n+                fb = fc;\n+                fc = fa;\n             }\n-\n-        }\n-\n-    }\n+            final double tolB = getFunctionValueAccuracy() + eps * FastMath.abs(b);\n+            final double m = 0.5 * (c - b);\n+            if (FastMath.abs(m) <= tolB || fb == 0) {\n+                // Bisection is needed\n+                isBrent = true;\n \n     /** Guess an x value by n<sup>th</sup> order inverse polynomial interpolation.\n      * <p>",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}