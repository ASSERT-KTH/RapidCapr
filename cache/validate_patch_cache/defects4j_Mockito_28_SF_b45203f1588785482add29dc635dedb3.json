{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    Field[] fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n\n    // Iterate through fields in the class hierarchy\n    for (Field field : fields) {\n        Class<?> candidateClass = field.getType();\n        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n\n        // If a valid candidate was found for the field, attempt to inject it\n        if (candidate != null && candidateClass.isAssignableFrom(candidate.getClass())) {\n            try {\n                field.setAccessible(true);\n                field.set(fieldInstance, candidate);\n            } catch (IllegalAccessException e) {\n                throw new IllegalArgumentException(\"Could not set field value\", e);\n            }\n\n            // Recurse to inject any relevant candidate fields in the candidate object\n            injectMockCandidate(candidateClass, mocks, candidate);\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..a4598c7f5 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,30 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    Field[] fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n+\n+    // Iterate through fields in the class hierarchy\n+    for (Field field : fields) {\n+        Class<?> candidateClass = field.getType();\n+        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+\n+        // If a valid candidate was found for the field, attempt to inject it\n+        if (candidate != null && candidateClass.isAssignableFrom(candidate.getClass())) {\n+            try {\n+                field.setAccessible(true);\n+                field.set(fieldInstance, candidate);\n+            } catch (IllegalAccessException e) {\n+                throw new IllegalArgumentException(\"Could not set field value\", e);\n+            }\n+\n+            // Recurse to inject any relevant candidate fields in the candidate object\n+            injectMockCandidate(candidateClass, mocks, candidate);\n+            return;\n+        }\n+    }\n+}\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}