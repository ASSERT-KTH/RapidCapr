{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN()) {\n            return newInstance(getField(), q, getZero());\n        }\n        final Dfp result = newInstance(this);\n        if (x == 0) {\n            result.q[0] = getZero();\n            result.q[1] = getZero();\n            result.q[2] = getZero();\n            result.ind = (byte) ((ind == 0) ? 0 : 1);\n            return dotrap(DfpTrap.INEXACT, \"multiply\", result, result);\n        }\n        if (x == 1) {\n            return result;\n        }\n        int xh;\n        int xl;\n        int x0;\n        int x1;\n        int x2;\n        int x3;\n        int rh;\n        int rl;\n        int r0;\n        int r1;\n        int r2;\n        int r3;\n        int i = 0;\n        final int[] product = new int[6];\n        final int xSign = (x < 0) ? -1 : 1;\n        x3 = Math.abs(x) / 1000;\n        x2 = (Math.abs(x) - x3 * 1000) / 100;\n        x1 = (Math.abs(x) - x3 * 1000 - x2 * 100) / 10;\n        x0 = Math.abs(x) - x3 * 1000 - x2 * 100 - x1 * 10;\n        if (x3 != 0) {\n            i = 3;\n            product[3] = 0;\n        }\n        if (x2 != 0) {\n            i = 2;\n            product[2] = 0;\n        }\n        if (x1 != 0) {\n            i = 1;\n            product[1] = 0;\n        }\n        if (x0 != 0) {\n            i = 0;\n            product[0] = 0;\n        }\n        xh = x2 * 10 + x3;\n        xl = x0 * 10 + x1;\n        r3 = ((int) q[2] * xh) / 10000;\n        r2 = (((int) q[1] * xh) + ((int) q[2] * xl)) / 10000;\n        r1 = (((int) q[0] * xh) + ((int) q[1] * xl)) / 10000;\n        r0 = ((int) q[0] * xl) / 10000;\n        product[i + 0] = r0;\n        product[i + 1] = r1;\n        product[i + 2] = r2;\n        product[i + 3] = r3;\n        i--;\n        while ((i >= 0) && (product[i] == 0)) {\n            i--;\n        }\n        if (i < 0) {\n            result.q[0] = getZero();\n            result.q[1] = getZero();\n            result.q[2] = getZero();\n            result.ind = POS;\n            return dotrap(DfpTrap.INEXACT, \"multiply\", result, result);\n        }\n        rh = product[i];\n        while ((i >= 0) && (product[i] == 0)) {\n            i--;\n        }\n        if (i >= 0) {\n            rl = product[i];\n        } else {\n            rl = 0;\n        }\n        if (((rh & 0x80000000) == 0) || ((rl & 0x80000000) == 0)) {\n            /* positive */\n            if (((rh & 0x80000000) == 0) && ((rl & 0x80000000) == 0)) {\n                if (((rh & 0x40000000) != 0) || ((rl & 0x40000000) != 0)) {\n                    setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n                    rh += 0x80000000;\n                }\n            }\n            /* negative */\n        } else {\n            if (((rh & 0x40000000) == 0) || ((rl & 0x40000000) == 0)) {\n                setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n                rh += 0x80000000;\n            }\n        }\n        if (xSign < 0) {\n            rh = -rh;\n            rl = -rl;\n        }\n        result.q[0] = rl;\n        result.q[1] = rh;\n        result.q[2] = q[2];\n        if ((result.q[1] != 0) || (result.q[0] != 0)) {\n            result.ind = (byte) ((ind == 0) ? 0 : 1);\n        } else {\n            result.ind = POS;\n        }\n        return dotrap(DfpTrap.INEXACT, \"multiply\", result, result);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..f42c6f4db 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,113 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN()) {\n+            return newInstance(getField(), q, getZero());\n+        }\n+        final Dfp result = newInstance(this);\n+        if (x == 0) {\n+            result.q[0] = getZero();\n+            result.q[1] = getZero();\n+            result.q[2] = getZero();\n+            result.ind = (byte) ((ind == 0) ? 0 : 1);\n+            return dotrap(DfpTrap.INEXACT, \"multiply\", result, result);\n+        }\n+        if (x == 1) {\n+            return result;\n+        }\n+        int xh;\n+        int xl;\n+        int x0;\n+        int x1;\n+        int x2;\n+        int x3;\n+        int rh;\n+        int rl;\n+        int r0;\n+        int r1;\n+        int r2;\n+        int r3;\n+        int i = 0;\n+        final int[] product = new int[6];\n+        final int xSign = (x < 0) ? -1 : 1;\n+        x3 = Math.abs(x) / 1000;\n+        x2 = (Math.abs(x) - x3 * 1000) / 100;\n+        x1 = (Math.abs(x) - x3 * 1000 - x2 * 100) / 10;\n+        x0 = Math.abs(x) - x3 * 1000 - x2 * 100 - x1 * 10;\n+        if (x3 != 0) {\n+            i = 3;\n+            product[3] = 0;\n+        }\n+        if (x2 != 0) {\n+            i = 2;\n+            product[2] = 0;\n+        }\n+        if (x1 != 0) {\n+            i = 1;\n+            product[1] = 0;\n+        }\n+        if (x0 != 0) {\n+            i = 0;\n+            product[0] = 0;\n+        }\n+        xh = x2 * 10 + x3;\n+        xl = x0 * 10 + x1;\n+        r3 = ((int) q[2] * xh) / 10000;\n+        r2 = (((int) q[1] * xh) + ((int) q[2] * xl)) / 10000;\n+        r1 = (((int) q[0] * xh) + ((int) q[1] * xl)) / 10000;\n+        r0 = ((int) q[0] * xl) / 10000;\n+        product[i + 0] = r0;\n+        product[i + 1] = r1;\n+        product[i + 2] = r2;\n+        product[i + 3] = r3;\n+        i--;\n+        while ((i >= 0) && (product[i] == 0)) {\n+            i--;\n+        }\n+        if (i < 0) {\n+            result.q[0] = getZero();\n+            result.q[1] = getZero();\n+            result.q[2] = getZero();\n+            result.ind = POS;\n+            return dotrap(DfpTrap.INEXACT, \"multiply\", result, result);\n+        }\n+        rh = product[i];\n+        while ((i >= 0) && (product[i] == 0)) {\n+            i--;\n+        }\n+        if (i >= 0) {\n+            rl = product[i];\n+        } else {\n+            rl = 0;\n+        }\n+        if (((rh & 0x80000000) == 0) || ((rl & 0x80000000) == 0)) {\n+            /* positive */\n+            if (((rh & 0x80000000) == 0) && ((rl & 0x80000000) == 0)) {\n+                if (((rh & 0x40000000) != 0) || ((rl & 0x40000000) != 0)) {\n+                    setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n+                    rh += 0x80000000;\n+                }\n+            }\n+            /* negative */\n+        } else {\n+            if (((rh & 0x40000000) == 0) || ((rl & 0x40000000) == 0)) {\n+                setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n+                rh += 0x80000000;\n+            }\n+        }\n+        if (xSign < 0) {\n+            rh = -rh;\n+            rl = -rl;\n+        }\n+        result.q[0] = rl;\n+        result.q[1] = rh;\n+        result.q[2] = q[2];\n+        if ((result.q[1] != 0) || (result.q[0] != 0)) {\n+            result.ind = (byte) ((ind == 0) ? 0 : 1);\n+        } else {\n+            result.ind = POS;\n+        }\n+        return dotrap(DfpTrap.INEXACT, \"multiply\", result, result);\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}