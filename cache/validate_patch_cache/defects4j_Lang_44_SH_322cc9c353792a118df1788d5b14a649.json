{
    "patch": "        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        }\n        if (val.startsWith(\"0b\") || val.startsWith(\"-0b\")) {\n            return createInteger(val);\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }\n\n        // Handle plus sign\n        boolean positive = true;\n        int index = 0;\n        char firstChar = val.charAt(0);\n        if (firstChar == '+') {\n            index++;\n        } else if (firstChar == '-') {\n            index++;\n            positive = false;\n        }\n\n        // Handle decimal and exponent separator\n        int length = val.length();\n        int decimalIndex = -1;\n        int exponentIndex = -1;\n        for (int i = index; i < length; i++) {\n            char ch = val.charAt(i);\n            if (ch == '.') {\n                if(decimalIndex != -1 || exponentIndex != -1) {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                decimalIndex = i;\n            } else if (ch == 'e' || ch == 'E') {\n                if(exponentIndex != -1) {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                exponentIndex = i;\n                if(i + 1 < length && (val.charAt(i + 1) == '+' || val.charAt(i + 1) == '-')) {\n                    i++;\n                }\n            } else if (!Character.isDigit(ch)) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n        }\n\n        // Parse number\n        if (exponentIndex != -1) {\n            int decimalPlaces = decimalIndex == -1 ? 0 : decimalIndex - index;\n            int exponent = Integer.parseInt(val.substring(exponentIndex + 1));\n            if (positive) {\n                return createNumber(val.substring(index, exponentIndex))\n                        .multiply(BigDecimal.TEN.pow(decimalPlaces))\n                        .multiply(BigDecimal.TEN.pow(exponent));\n            } else {\n                return createNumber(val.substring(index, exponentIndex))\n                        .multiply(BigDecimal.TEN.pow(decimalPlaces))\n                        .multiply(BigDecimal.TEN.pow(exponent))\n                        .negate();\n            }\n        } else if (decimalIndex != -1) {\n            if (positive) {\n                return new BigDecimal(val);\n            } else {\n                return new BigDecimal(val).negate();\n            }\n        } else {\n            if (positive) {\n                return createInteger(val);\n            } else {\n                return createInteger(val).negate();\n            }\n        }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..f9891c93 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,82 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (val.startsWith(\"--\")) {\n+            // this is protection for poorness in java.lang.BigDecimal.\n+            // it accepts this as a legal value, but it does not appear\n+            // to be in specification of class. OS X Java parses it to\n+            // a wrong value.\n+            return null;\n+        }\n+        if (val.startsWith(\"0b\") || val.startsWith(\"-0b\")) {\n+            return createInteger(val);\n+        }\n+        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+            return createInteger(val);\n+        }\n+\n+        // Handle plus sign\n+        boolean positive = true;\n+        int index = 0;\n+        char firstChar = val.charAt(0);\n+        if (firstChar == '+') {\n+            index++;\n+        } else if (firstChar == '-') {\n+            index++;\n+            positive = false;\n+        }\n+\n+        // Handle decimal and exponent separator\n+        int length = val.length();\n+        int decimalIndex = -1;\n+        int exponentIndex = -1;\n+        for (int i = index; i < length; i++) {\n+            char ch = val.charAt(i);\n+            if (ch == '.') {\n+                if(decimalIndex != -1 || exponentIndex != -1) {\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                }\n+                decimalIndex = i;\n+            } else if (ch == 'e' || ch == 'E') {\n+                if(exponentIndex != -1) {\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                }\n+                exponentIndex = i;\n+                if(i + 1 < length && (val.charAt(i + 1) == '+' || val.charAt(i + 1) == '-')) {\n+                    i++;\n+                }\n+            } else if (!Character.isDigit(ch)) {\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n+            }\n+        }\n+\n+        // Parse number\n+        if (exponentIndex != -1) {\n+            int decimalPlaces = decimalIndex == -1 ? 0 : decimalIndex - index;\n+            int exponent = Integer.parseInt(val.substring(exponentIndex + 1));\n+            if (positive) {\n+                return createNumber(val.substring(index, exponentIndex))\n+                        .multiply(BigDecimal.TEN.pow(decimalPlaces))\n+                        .multiply(BigDecimal.TEN.pow(exponent));\n+            } else {\n+                return createNumber(val.substring(index, exponentIndex))\n+                        .multiply(BigDecimal.TEN.pow(decimalPlaces))\n+                        .multiply(BigDecimal.TEN.pow(exponent))\n+                        .negate();\n+            }\n+        } else if (decimalIndex != -1) {\n+            if (positive) {\n+                return new BigDecimal(val);\n+            } else {\n+                return new BigDecimal(val).negate();\n+            }\n+        } else {\n+            if (positive) {\n+                return createInteger(val);\n+            } else {\n+                return createInteger(val).negate();\n+            }\n+        }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}