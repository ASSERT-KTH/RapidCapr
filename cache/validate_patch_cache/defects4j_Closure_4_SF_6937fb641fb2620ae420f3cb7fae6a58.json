{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  // If we have already resolved the type, return it.\n  if (isResolved()) {\n    if (registry != null && registry.isLastGeneration()) {\n      return getReferencedType();\n    }\n    return this;\n  }\n\n  // Variables to keep track of whether the type has been resolved yet.\n  boolean resolvedViaRegistry = false;\n  boolean resolvedViaProperties = false;\n\n  // Detect implicit prototype cycles\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n  }\n\n  // Try to resolve type via the registry\n  resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n\n  // If the type was not resolved via registry, try to resolve it via properties\n  if (!resolvedViaRegistry) {\n    resolveViaProperties(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    resolvedViaProperties = isResolved();\n  }\n\n  // If type is resolved and has property continuations, process them\n  if (isResolved()) {\n    if (propertyContinuations() != null) {\n      propertyContinuations().resolve(t, enclosing, this);\n    }\n  }\n\n  // Call super.resolveInternal()\n  super.resolveInternal(t, enclosing);\n\n  // If the type was resolved, process remaining property continuations\n  if (isResolved()) {\n    finishPropertyContinuations();\n  }\n\n  // If the type is resolved and belongs to the last generation, return the referenced type.\n  if (isResolved() && registry != null && registry.isLastGeneration()) {\n    return getReferencedType();\n  }\n\n  // If the type is resolved, return it. Otherwise return this.\n  if (isResolved()) {\n    return this;\n  } else {\n    return getRegistry().createObjectType(this);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..b30f95b6 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,64 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  // If we have already resolved the type, return it.\n+  if (isResolved()) {\n+    if (registry != null && registry.isLastGeneration()) {\n+      return getReferencedType();\n     }\n+    return this;\n+  }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+  // Variables to keep track of whether the type has been resolved yet.\n+  boolean resolvedViaRegistry = false;\n+  boolean resolvedViaProperties = false;\n \n+  // Detect implicit prototype cycles\n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(t);\n+  }\n+\n+  // Try to resolve type via the registry\n+  resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+\n+  // If the type was not resolved via registry, try to resolve it via properties\n+  if (!resolvedViaRegistry) {\n     resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n+    resolvedViaProperties = isResolved();\n+  }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+  // If type is resolved and has property continuations, process them\n+  if (isResolved()) {\n+    if (propertyContinuations() != null) {\n+      propertyContinuations().resolve(t, enclosing, this);\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n \n+  // Call super.resolveInternal()\n+  super.resolveInternal(t, enclosing);\n+\n+  // If the type was resolved, process remaining property continuations\n+  if (isResolved()) {\n+    finishPropertyContinuations();\n+  }\n+\n+  // If the type is resolved and belongs to the last generation, return the referenced type.\n+  if (isResolved() && registry != null && registry.isLastGeneration()) {\n+    return getReferencedType();\n+  }\n+\n+  // If the type is resolved, return it. Otherwise return this.\n+  if (isResolved()) {\n+    return this;\n+  } else {\n+    return getRegistry().createObjectType(this);\n+  }\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}