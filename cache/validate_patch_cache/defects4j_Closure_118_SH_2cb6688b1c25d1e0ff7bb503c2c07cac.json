{
    "patch": "      boolean sawNumber = false;\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n>>> if (child.isNumber()) {\n>>>   if (sawNumber) {\n>>>     compiler.report(JSError.make(\n>>>         t.getSourceName(), child,\n>>>         Warnings.MIXED_NUMERIC_PROPERTY_NAME_IN_OBJECT_LIT));\n>>>   }\n>>>   sawNumber = true;\n>>>   continue;\n>>> } <<<",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..1f9d35af 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,20 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+      boolean sawNumber = false;\n+      for (Node child = n.getFirstChild();\n+          child != null;\n+          child = child.getNext()) {\n+        // Maybe STRING, GET, SET\n+>>> if (child.isNumber()) {\n+>>>   if (sawNumber) {\n+>>>     compiler.report(JSError.make(\n+>>>         t.getSourceName(), child,\n+>>>         Warnings.MIXED_NUMERIC_PROPERTY_NAME_IN_OBJECT_LIT));\n+>>>   }\n+>>>   sawNumber = true;\n+>>>   continue;\n+>>> } <<<\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}