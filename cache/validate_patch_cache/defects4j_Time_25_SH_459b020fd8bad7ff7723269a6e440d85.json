{
    "patch": "                // if the offsets still differ, use the one with the largest absolute value\n                if (Math.abs(offsetLocal - offsetAdjusted) > 1) {\n                    int maxOffset = Math.max(offsetLocal, offsetAdjusted);\n                    int minOffset = Math.min(offsetLocal, offsetAdjusted);\n                    if (offsetLocal < offsetAdjusted) {\n                        return (getOffset(nextTransition(instantAdjusted)) == maxOffset) ? maxOffset : minOffset;\n                    } else {\n                        return (getOffset(previousTransition(instantAdjusted)) == maxOffset) ? maxOffset : minOffset;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..cc59e135 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,16 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // if the offsets still differ, use the one with the largest absolute value\n+                if (Math.abs(offsetLocal - offsetAdjusted) > 1) {\n+                    int maxOffset = Math.max(offsetLocal, offsetAdjusted);\n+                    int minOffset = Math.min(offsetLocal, offsetAdjusted);\n+                    if (offsetLocal < offsetAdjusted) {\n+                        return (getOffset(nextTransition(instantAdjusted)) == maxOffset) ? maxOffset : minOffset;\n+                    } else {\n+                        return (getOffset(previousTransition(instantAdjusted)) == maxOffset) ? maxOffset : minOffset;\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}