{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType() && type.isNominalConstructor()) {\n      FunctionType funType = type.toMaybeFunctionType();\n      if (funType != null && funType.isNominalConstructor()) {\n        ObjectType objType = ObjectType.cast(funType.getInstanceType());\n        if (objType != null) {\n          for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {\n              objType.defineInferredProperty(prop, propType, null);\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..2b4e851c 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,21 +1118,18 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+    if (constraintObj != null && constraintObj.isRecordType() && type.isNominalConstructor()) {\n+      FunctionType funType = type.toMaybeFunctionType();\n+      if (funType != null && funType.isNominalConstructor()) {\n+        ObjectType objType = ObjectType.cast(funType.getInstanceType());\n+        if (objType != null) {\n+          for (String prop : constraintObj.getOwnPropertyNames()) {\n+            JSType propType = constraintObj.getPropertyType(prop);\n+            if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {\n+              objType.defineInferredProperty(prop, propType, null);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}