{
    "patch": "public String getprop(String propName) throws IOException {\n    final Process process = new ProcessBuilder(\"getprop\", propName).start();\n    final InputStream inputStream = process.getInputStream();\n    final byte[] bytes = new byte[1024];\n    final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n    while (inputStream.read(bytes) > 0)\n        byteArrayOutputStream.write(bytes, 0, bytes.length);\n    final String output = byteArrayOutputStream.toString(\"UTF-8\").trim();\n    try {\n        process.waitFor();\n    } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n    }\n    final int exitValue = process.exitValue();\n    if (exitValue != 0)\n        throw new AssertionError(String.format(\"Command '%s' returned exit code %s: %s\", \"getprop \" + propName, exitValue, output));\n    return output;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..667dff8d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String propName) throws IOException {\n+    final Process process = new ProcessBuilder(\"getprop\", propName).start();\n+    final InputStream inputStream = process.getInputStream();\n+    final byte[] bytes = new byte[1024];\n+    final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+    while (inputStream.read(bytes) > 0)\n+        byteArrayOutputStream.write(bytes, 0, bytes.length);\n+    final String output = byteArrayOutputStream.toString(\"UTF-8\").trim();\n+    try {\n+        process.waitFor();\n+    } catch (InterruptedException e) {\n+        Thread.currentThread().interrupt();\n+    }\n+    final int exitValue = process.exitValue();\n+    if (exitValue != 0)\n+        throw new AssertionError(String.format(\"Command '%s' returned exit code %s: %s\", \"getprop \" + propName, exitValue, output));\n+    return output;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}