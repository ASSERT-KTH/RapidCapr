{
    "patch": "      JSDocInfo jsDocInfo = getBestJSDocInfo(n);\n      if (jsDocInfo != null && jsDocInfo.hasLendsName()) {\n        Node lValue = parent.getFirstChild();\n        if (NodeUtil.isGet(lValue) && !NodeUtil.isLValue(n)) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..d32895bc 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,12 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      JSDocInfo jsDocInfo = getBestJSDocInfo(n);\n+      if (jsDocInfo != null && jsDocInfo.hasLendsName()) {\n+        Node lValue = parent.getFirstChild();\n+        if (NodeUtil.isGet(lValue) && !NodeUtil.isLValue(n)) {\n+          return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}