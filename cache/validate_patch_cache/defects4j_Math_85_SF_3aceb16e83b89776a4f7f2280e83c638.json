{
    "patch": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound,\n    double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n    \n    // Check function argument\n    if (function == null) {\n        throw new IllegalArgumentException(\"Function must not be null\");\n    }\n    \n    // Check maximum iterations argument\n    if (maximumIterations <= 0) {\n        throw new IllegalArgumentException(\"Bad value for maximum iterations number: \" + maximumIterations);\n    }\n\n    // Check bracketing arguments\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw new IllegalArgumentException(\"Invalid bracketing parameters: lowerBound=\" + lowerBound +\n            \", initial=\" + initial + \", upperBound=\" + upperBound);\n    }\n\n    // Initialize variables\n    double a = initial;\n    double b = initial;\n    double fa = function.value(a);\n    double fb = fa;\n\n    // Check initial value argument\n    if (Double.isNaN(fa)) {\n        throw new ConvergenceException(\"Initial value returned NaN\");\n    }\n\n    // Find initial bracket\n    while (fa * fb >= 0) {\n        // Update bracket\n        double range = b - a;\n        if (a - range <= lowerBound) {\n            b = b + range;\n        } else if (b + range >= upperBound) {\n            a = a - range;\n        } else {\n            a = Math.max(lowerBound, a - range);\n            b = Math.min(upperBound, b + range);\n        }\n\n        // Update function values\n        fa = function.value(a);\n        fb = function.value(b);\n\n        // Check for convergence\n        if (Double.isNaN(fa) || Double.isNaN(fb)) {\n            throw new ConvergenceException(\"Function returned NaN during bracket search\");\n        } else if (fa * fb < 0) {\n            break;\n        } else {\n            maximumIterations -= 1;\n            if (maximumIterations == 0) {\n                throw new ConvergenceException(\"Number of iterations exceeded maximum for bracket search\");\n            }\n        }\n    }\n\n    return new double[]{a, b};\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..657029424 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,51 +162,69 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n-        }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n-        }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n+public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound,\n+    double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n     \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+    // Check function argument\n+    if (function == null) {\n+        throw new IllegalArgumentException(\"Function must not be null\");\n+    }\n+    \n+    // Check maximum iterations argument\n+    if (maximumIterations <= 0) {\n+        throw new IllegalArgumentException(\"Bad value for maximum iterations number: \" + maximumIterations);\n+    }\n+\n+    // Check bracketing arguments\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw new IllegalArgumentException(\"Invalid bracketing parameters: lowerBound=\" + lowerBound +\n+            \", initial=\" + initial + \", upperBound=\" + upperBound);\n+    }\n+\n+    // Initialize variables\n+    double a = initial;\n+    double b = initial;\n+    double fa = function.value(a);\n+    double fb = fa;\n+\n+    // Check initial value argument\n+    if (Double.isNaN(fa)) {\n+        throw new ConvergenceException(\"Initial value returned NaN\");\n+    }\n+\n+    // Find initial bracket\n+    while (fa * fb >= 0) {\n+        // Update bracket\n+        double range = b - a;\n+        if (a - range <= lowerBound) {\n+            b = b + range;\n+        } else if (b + range >= upperBound) {\n+            a = a - range;\n+        } else {\n+            a = Math.max(lowerBound, a - range);\n+            b = Math.min(upperBound, b + range);\n+        }\n+\n+        // Update function values\n+        fa = function.value(a);\n+        fb = function.value(b);\n+\n+        // Check for convergence\n+        if (Double.isNaN(fa) || Double.isNaN(fb)) {\n+            throw new ConvergenceException(\"Function returned NaN during bracket search\");\n+        } else if (fa * fb < 0) {\n+            break;\n+        } else {\n+            maximumIterations -= 1;\n+            if (maximumIterations == 0) {\n+                throw new ConvergenceException(\"Number of iterations exceeded maximum for bracket search\");\n+            }\n         }\n-        \n-        return new double[]{a, b};\n     }\n \n+    return new double[]{a, b};\n+}\n+\n     /**\n      * Compute the midpoint of two values.\n      * ",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}