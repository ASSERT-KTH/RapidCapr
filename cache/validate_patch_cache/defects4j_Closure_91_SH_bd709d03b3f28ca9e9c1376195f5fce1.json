{
    "patch": "      if (parent.getType() == Token.EXPR_RESULT && parent.getParent().getType() == Token.BLOCK &&\n          NodeUtil.isGet(parent.getFirstChild().getFirstFirstChild())) {\n        String propertyName = parent.getFirstChild().getFirstFirstChild().getLastChild().getString();\n        if (propertyName.equals(\"call\") || propertyName.equals(\"apply\")) {\n          Node obj = parent.getFirstChild().getFirstFirstChild().getFirstChild();\n          if (obj.getType() == Token.NAME && obj.getString().equals(\"Function\")) {\n            return false;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..865bef06 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,15 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.EXPR_RESULT && parent.getParent().getType() == Token.BLOCK &&\n+          NodeUtil.isGet(parent.getFirstChild().getFirstFirstChild())) {\n+        String propertyName = parent.getFirstChild().getFirstFirstChild().getLastChild().getString();\n+        if (propertyName.equals(\"call\") || propertyName.equals(\"apply\")) {\n+          Node obj = parent.getFirstChild().getFirstFirstChild().getFirstChild();\n+          if (obj.getType() == Token.NAME && obj.getString().equals(\"Function\")) {\n+            return false;\n+          }\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}