{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      if (NodeUtil.isStatementBlock(maybeExpr)) {\n        return false;\n      }\n      if (NodeUtil.isExpressionNode(maybeExpr)) {\n        // It is an expression statement.\n        return true;\n      } else if (maybeExpr.getType() == Token.RETURN\n          && maybeExpr.hasOneChild()\n          && NodeUtil.isExpressionNode(maybeExpr.getFirstChild())) {\n        // It is a return statement with an expression.\n        return !NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild());\n      } else if (maybeExpr.getType() == Token.IF) {\n        Node ifBlock = maybeExpr.getLastChild();\n        Node elseBlock = ifBlock.getNext();\n        return isFoldableExpressBlock(ifBlock) && (elseBlock == null || isFoldableExpressBlock(elseBlock));\n      } else if (maybeExpr.getType() == Token.WHILE || maybeExpr.getType() == Token.DO) {\n        Node whileBlock = maybeExpr.getLastChild();\n        return isFoldableExpressBlock(whileBlock);\n      } else if (maybeExpr.getType() == Token.FOR) {\n        Node forBlock = maybeExpr.getLastChild();\n        return isFoldableExpressBlock(forBlock);\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..0b8fab4a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,36 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      if (NodeUtil.isStatementBlock(maybeExpr)) {\n+        return false;\n+      }\n+      if (NodeUtil.isExpressionNode(maybeExpr)) {\n+        // It is an expression statement.\n+        return true;\n+      } else if (maybeExpr.getType() == Token.RETURN\n+          && maybeExpr.hasOneChild()\n+          && NodeUtil.isExpressionNode(maybeExpr.getFirstChild())) {\n+        // It is a return statement with an expression.\n+        return !NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild());\n+      } else if (maybeExpr.getType() == Token.IF) {\n+        Node ifBlock = maybeExpr.getLastChild();\n+        Node elseBlock = ifBlock.getNext();\n+        return isFoldableExpressBlock(ifBlock) && (elseBlock == null || isFoldableExpressBlock(elseBlock));\n+      } else if (maybeExpr.getType() == Token.WHILE || maybeExpr.getType() == Token.DO) {\n+        Node whileBlock = maybeExpr.getLastChild();\n+        return isFoldableExpressBlock(whileBlock);\n+      } else if (maybeExpr.getType() == Token.FOR) {\n+        Node forBlock = maybeExpr.getLastChild();\n+        return isFoldableExpressBlock(forBlock);\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}