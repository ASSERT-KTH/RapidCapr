{
    "patch": "public static String unescapeISO8859_1(String input) {\n  StringBuilder sb = new StringBuilder();\n  Matcher matcher = ISO8859_1_ESCAPE_PATTERN.matcher(input);\n  int start = 0;\n  while (matcher.find()) {\n    sb.append(input.substring(start, matcher.start()));\n    String match = matcher.group(1);\n    if (match.equals(\"&\")) {\n      sb.append(\"&\");\n    } else if (match.equals(\"<\")) {\n      sb.append(\"<\");\n    } else if (match.equals(\">\")) {\n      sb.append(\">\");\n    } else if (match.equals(\"\\\"\")) {\n      sb.append(\"\\\"\");\n    } else if (match.equals(\"'\")) {\n      sb.append(\"'\");\n    } else {\n      // Match must be a hex escape of the form &#xHH;.\n      int codePoint = Integer.parseInt(match, 16);\n      sb.append((char) codePoint);\n    }\n    start = matcher.end();\n  }\n  sb.append(input.substring(start));\n  return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..05478322 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,33 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeISO8859_1(String input) {\n+  StringBuilder sb = new StringBuilder();\n+  Matcher matcher = ISO8859_1_ESCAPE_PATTERN.matcher(input);\n+  int start = 0;\n+  while (matcher.find()) {\n+    sb.append(input.substring(start, matcher.start()));\n+    String match = matcher.group(1);\n+    if (match.equals(\"&\")) {\n+      sb.append(\"&\");\n+    } else if (match.equals(\"<\")) {\n+      sb.append(\"<\");\n+    } else if (match.equals(\">\")) {\n+      sb.append(\">\");\n+    } else if (match.equals(\"\\\"\")) {\n+      sb.append(\"\\\"\");\n+    } else if (match.equals(\"'\")) {\n+      sb.append(\"'\");\n+    } else {\n+      // Match must be a hex escape of the form &#xHH;.\n+      int codePoint = Integer.parseInt(match, 16);\n+      sb.append((char) codePoint);\n+    }\n+    start = matcher.end();\n+  }\n+  sb.append(input.substring(start));\n+  return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}