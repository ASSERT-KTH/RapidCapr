{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.Pair;\nimport org.apache.commons.math3.stat.inference.TestUtils;\nimport org.apache.commons.math3.stat.descriptive.StatisticalSummary;\n\npublic class GammaTest {\n\n    public static double regularizedGamma(double a, double x) {\n        double epsilon = 10e-15;\n        double sum = 0.0;\n        double term = 1.0 / a;\n        double n = 1.0;\n        while (FastMath.abs(term) > epsilon) {\n            sum += term;\n            term *= (x / (a + n));\n            n += 1.0;\n        }\n        return (FastMath.exp(-x) * FastMath.pow(x, a) * sum);\n    }\n\n    public static void main(String[] args) {\n        // Perform tests on the Regularized Gamma Function\n        double a;\n        double x;\n        double expected;\n        double tolerance = 10e-15;\n        double actual;\n\n        // First Test: Test function for a = 1 and a = 2.  Calculate values then compare to known results.\n        x = 5;\n        expected = 1 - FastMath.exp(-5);\n        actual = Gamma.regularizedGammaQ(1, x);\n        TestUtils.assertEquals(expected, actual, tolerance);\n        expected = 1 - (FastMath.exp(-5) + 5 * FastMath.exp(-5) * FastMath.pow(5, 1.0)/2);\n        actual = Gamma.regularizedGammaQ(2, x);\n        TestUtils.assertEquals(expected, actual, tolerance);\n\n        //Second  Test: Test on standard values of a for values of x in the interval [0, 10]\n        for (a = 0.5; a <= 25.5; a += 1.0) {\n            for (x = 0; x <= 10; x += 0.5) {\n                expected = regularizedGamma(a, x);\n                actual = Gamma.regularizedGammaQ(a, x);\n                TestUtils.assertEquals(expected, actual, tolerance);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..155fe5c9a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,55 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.MathUtils;\n+import org.apache.commons.math3.util.Pair;\n+import org.apache.commons.math3.stat.inference.TestUtils;\n+import org.apache.commons.math3.stat.descriptive.StatisticalSummary;\n+\n+public class GammaTest {\n+\n+    public static double regularizedGamma(double a, double x) {\n+        double epsilon = 10e-15;\n+        double sum = 0.0;\n+        double term = 1.0 / a;\n+        double n = 1.0;\n+        while (FastMath.abs(term) > epsilon) {\n+            sum += term;\n+            term *= (x / (a + n));\n+            n += 1.0;\n+        }\n+        return (FastMath.exp(-x) * FastMath.pow(x, a) * sum);\n+    }\n+\n+    public static void main(String[] args) {\n+        // Perform tests on the Regularized Gamma Function\n+        double a;\n+        double x;\n+        double expected;\n+        double tolerance = 10e-15;\n+        double actual;\n+\n+        // First Test: Test function for a = 1 and a = 2.  Calculate values then compare to known results.\n+        x = 5;\n+        expected = 1 - FastMath.exp(-5);\n+        actual = Gamma.regularizedGammaQ(1, x);\n+        TestUtils.assertEquals(expected, actual, tolerance);\n+        expected = 1 - (FastMath.exp(-5) + 5 * FastMath.exp(-5) * FastMath.pow(5, 1.0)/2);\n+        actual = Gamma.regularizedGammaQ(2, x);\n+        TestUtils.assertEquals(expected, actual, tolerance);\n+\n+        //Second  Test: Test on standard values of a for values of x in the interval [0, 10]\n+        for (a = 0.5; a <= 25.5; a += 1.0) {\n+            for (x = 0; x <= 10; x += 0.5) {\n+                expected = regularizedGamma(a, x);\n+                actual = Gamma.regularizedGammaQ(a, x);\n+                TestUtils.assertEquals(expected, actual, tolerance);\n+            }\n+        }\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}