{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int initialOffset = getOffset(instantLocal);\n    long nextTransition = nextTransition(instantLocal);\n    int nextOffset = getOffset(nextTransition);\n    if (initialOffset != nextOffset) {\n        long prevTransition = previousTransition(instantLocal);\n        int prevOffset = getOffset(prevTransition);\n        if (prevOffset == nextOffset) {\n            // there is a gap in the local time line that corresponds\n            // to a DST transition, so we should return the offset after\n            // the gap (which is the later offset) to ensure that the\n            // local time is always after the transition\n            return nextOffset;\n        } else {\n            // we are within a DST overlap, so we need to determine\n            // whether the local time is within the overlap period or\n            // not in order to determine which offset to use.\n            long overlapStart = nextTransition - (nextOffset - initialOffset);\n            if (instantLocal >= overlapStart) {\n                // the local time is within the overlap period, so we\n                // should use the earlier offset (which is the offset at\n                // the previous transition) to ensure that the local time\n                // is always before the transition\n                return prevOffset;\n            } else {\n                // the local time is before the overlap period, so we\n                // should use the later offset (which is the offset at\n                // the next transition) to ensure that the local time is\n                // always after the transition\n                return nextOffset;\n            }\n        }\n    } else if (isInDaylightSavingOverlap(instantLocal)) {\n        // During DST overlaps, there are two valid offsets for a given\n        // local time, but the initial offset is used to disambiguate the\n        // transition. If the given local time is within an overlap and\n        // the initial offset matches the later offset, then a transition\n        // must have already occurred and we should use the earlier offset\n        // instead to ensure that the local time is before the transition.\n        long overlapEnd = nextTransition - (nextOffset - initialOffset);\n        if (instantLocal >= overlapEnd) {\n            return prevOffset;\n        } else {\n            return initialOffset;\n        }\n    } else {\n        // there is no DST transition at the given local time, so the\n        // initial offset is correct\n        return initialOffset;\n    }\n}\n\nprivate boolean isInDaylightSavingOverlap(long instantLocal) {\n    // Check if the given instant is within a DST overlap\n    int initialOffset = getOffset(instantLocal);\n    long nextTransition = nextTransition(instantLocal);\n    int nextOffset = getOffset(nextTransition);\n    if (initialOffset < nextOffset) {\n        long overlapStart = nextTransition - (nextOffset - initialOffset);\n        if (instantLocal >= overlapStart) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..6cb79475 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,71 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int initialOffset = getOffset(instantLocal);\n+    long nextTransition = nextTransition(instantLocal);\n+    int nextOffset = getOffset(nextTransition);\n+    if (initialOffset != nextOffset) {\n+        long prevTransition = previousTransition(instantLocal);\n+        int prevOffset = getOffset(prevTransition);\n+        if (prevOffset == nextOffset) {\n+            // there is a gap in the local time line that corresponds\n+            // to a DST transition, so we should return the offset after\n+            // the gap (which is the later offset) to ensure that the\n+            // local time is always after the transition\n+            return nextOffset;\n+        } else {\n+            // we are within a DST overlap, so we need to determine\n+            // whether the local time is within the overlap period or\n+            // not in order to determine which offset to use.\n+            long overlapStart = nextTransition - (nextOffset - initialOffset);\n+            if (instantLocal >= overlapStart) {\n+                // the local time is within the overlap period, so we\n+                // should use the earlier offset (which is the offset at\n+                // the previous transition) to ensure that the local time\n+                // is always before the transition\n+                return prevOffset;\n+            } else {\n+                // the local time is before the overlap period, so we\n+                // should use the later offset (which is the offset at\n+                // the next transition) to ensure that the local time is\n+                // always after the transition\n+                return nextOffset;\n             }\n         }\n-        return offsetAdjusted;\n+    } else if (isInDaylightSavingOverlap(instantLocal)) {\n+        // During DST overlaps, there are two valid offsets for a given\n+        // local time, but the initial offset is used to disambiguate the\n+        // transition. If the given local time is within an overlap and\n+        // the initial offset matches the later offset, then a transition\n+        // must have already occurred and we should use the earlier offset\n+        // instead to ensure that the local time is before the transition.\n+        long overlapEnd = nextTransition - (nextOffset - initialOffset);\n+        if (instantLocal >= overlapEnd) {\n+            return prevOffset;\n+        } else {\n+            return initialOffset;\n+        }\n+    } else {\n+        // there is no DST transition at the given local time, so the\n+        // initial offset is correct\n+        return initialOffset;\n     }\n+}\n+\n+private boolean isInDaylightSavingOverlap(long instantLocal) {\n+    // Check if the given instant is within a DST overlap\n+    int initialOffset = getOffset(instantLocal);\n+    long nextTransition = nextTransition(instantLocal);\n+    int nextOffset = getOffset(nextTransition);\n+    if (initialOffset < nextOffset) {\n+        long overlapStart = nextTransition - (nextOffset - initialOffset);\n+        if (instantLocal >= overlapStart) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}