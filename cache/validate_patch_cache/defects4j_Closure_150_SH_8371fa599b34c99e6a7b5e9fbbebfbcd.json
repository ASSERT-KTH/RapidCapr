{
    "patch": "if (n.getType() == Token.FUNCTION) {\n  if (NodeUtil.isFunctionDeclaration(n)) {\n    defineDeclaredFunction(n, parent);\n    return;\n  } else {\n    Node grandparent = n.getParent().getParent();\n    if (NodeUtil.isFunctionExpression(n)) {\n      grandparent = grandparent.getParent();\n    }\n    if (parent.getType() == Token.EXPR_RESULT && grandparent.getType() == Token.BLOCK) {\n      defineDeclaredFunction(n, grandparent);\n      return;\n    }\n  }\n}\n\nswitch (n.getType()) {\n  case Token.CATCH:\n    defineCatch(n, parent);\n    break;\n  case Token.VAR:\n    defineVar(n, parent);\n    break;\n  case Token.LP:\n    if (parent.getType() == Token.EXPR_RESULT && parent.getFirstChild() != null && parent.getFirstChild().getType() == Token.FUNCTION) {\n      handleFunctionInputs(parent.getFirstChild());\n    }\n    break;\n}\n\nattachLiteralTypes(n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e98c3120 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,37 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+if (n.getType() == Token.FUNCTION) {\n+  if (NodeUtil.isFunctionDeclaration(n)) {\n+    defineDeclaredFunction(n, parent);\n+    return;\n+  } else {\n+    Node grandparent = n.getParent().getParent();\n+    if (NodeUtil.isFunctionExpression(n)) {\n+      grandparent = grandparent.getParent();\n+    }\n+    if (parent.getType() == Token.EXPR_RESULT && grandparent.getType() == Token.BLOCK) {\n+      defineDeclaredFunction(n, grandparent);\n+      return;\n+    }\n+  }\n+}\n+\n+switch (n.getType()) {\n+  case Token.CATCH:\n+    defineCatch(n, parent);\n+    break;\n+  case Token.VAR:\n+    defineVar(n, parent);\n+    break;\n+  case Token.LP:\n+    if (parent.getType() == Token.EXPR_RESULT && parent.getFirstChild() != null && parent.getFirstChild().getType() == Token.FUNCTION) {\n+      handleFunctionInputs(parent.getFirstChild());\n+    }\n+    break;\n+}\n+\n+attachLiteralTypes(n);\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}