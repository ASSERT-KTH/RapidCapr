{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      \n      if (NodeUtil.isExpressionNode(maybeExpr)) {\n        // check if it's inside a FOR/WHILE block\n        Node parent = n.getParent();\n        boolean insideLoop = false;\n        \n        while (parent != null && parent.getType() != Token.SCRIPT) {\n          int pType = parent.getType();\n          if (pType == Token.FOR || pType == Token.FOR_IN || pType == Token.WHILE || pType == Token.DO) {\n            insideLoop = true;\n            break;\n          }\n          parent = parent.getParent();\n        }\n        \n        if (!insideLoop) {\n          // check if the parent node is already an expression statement\n          Node grandparent = n.getParent().getParent();\n          boolean parentIsExprStmt = false;\n          \n          if (grandparent != null && grandparent.getType() == Token.EXPR_RESULT) {\n            parentIsExprStmt = true;\n            grandparent = grandparent.getParent();\n          }\n          \n          // If the parent is a block and it has only one child, \n          // or a parent is an expression statement with only one child,\n          // then the nested expression can be folded\n          if (grandparent != null &&\n            (grandparent.getType() == Token.BLOCK && grandparent.hasOneChild() || parentIsExprStmt)) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..124b6a29 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,48 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      \n+      if (NodeUtil.isExpressionNode(maybeExpr)) {\n+        // check if it's inside a FOR/WHILE block\n+        Node parent = n.getParent();\n+        boolean insideLoop = false;\n+        \n+        while (parent != null && parent.getType() != Token.SCRIPT) {\n+          int pType = parent.getType();\n+          if (pType == Token.FOR || pType == Token.FOR_IN || pType == Token.WHILE || pType == Token.DO) {\n+            insideLoop = true;\n+            break;\n+          }\n+          parent = parent.getParent();\n+        }\n+        \n+        if (!insideLoop) {\n+          // check if the parent node is already an expression statement\n+          Node grandparent = n.getParent().getParent();\n+          boolean parentIsExprStmt = false;\n+          \n+          if (grandparent != null && grandparent.getType() == Token.EXPR_RESULT) {\n+            parentIsExprStmt = true;\n+            grandparent = grandparent.getParent();\n+          }\n+          \n+          // If the parent is a block and it has only one child, \n+          // or a parent is an expression statement with only one child,\n+          // then the nested expression can be folded\n+          if (grandparent != null &&\n+            (grandparent.getType() == Token.BLOCK && grandparent.hasOneChild() || parentIsExprStmt)) {\n+            return true;\n+          }\n+        }\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}