{
    "patch": "import java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Arrays;\n\npublic class StringUtil {\n\n    public static String escapeString(String str) {\n        StringBuilder builder = new StringBuilder();\n        for (char c : str.toCharArray()) {\n            if (c <= 0x1f) {\n                builder.append(\"\\\\u\")\n                        .append(String.format(\"%04x\", (int) c));\n            } else if (c >= 0x7f || c == '\"' || c == '\\\\') {\n                byte[] bytes = String.valueOf(c).getBytes(StandardCharsets.UTF_8);\n                for (byte b : bytes) {\n                    builder.append(String.format(\"\\\\x%02x\", b & 0xff));\n                }\n            } else {\n                builder.append(c);\n            }\n        }\n        return builder.toString();\n    }\n\n    public static String unescapeString(String str) {\n        StringBuilder builder = new StringBuilder();\n        int i = 0;\n        while (i < str.length()) {\n            char c = str.charAt(i);\n\n            if (c == '\\\\' && i < str.length() - 1) {\n                char nextChar = str.charAt(i + 1);\n                if (nextChar == 'u' && i < str.length() - 5) {\n                    String unicodeStr = str.substring(i + 2, i + 6);\n                    char unicodeChar = (char) Integer.parseInt(unicodeStr, 16);\n                    builder.append(unicodeChar);\n                    i += 6;\n                } else if (nextChar == 'x' && i < str.length() - 3) {\n                    String hexStr = str.substring(i + 2, i + 4);\n                    char hexChar = (char) Integer.parseInt(hexStr, 16);\n                    builder.append(hexChar);\n                    i += 4;\n                } else {\n                    builder.append(nextChar);\n                    i++;\n                }\n            } else {\n                builder.append(c);\n            }\n            i++;\n        }\n        return builder.toString();\n    }\n\n    public static void main(String[] args) {\n        \n        String str = \"This is a \\n test string with \\\"special\\\" characters \\\\ and unicode \\u0661.\\r\\n\";\n\n        String encoded = StringUtil.escapeString(str);\n        System.out.println(\"Encoded string: \" + encoded);\n\n        String decoded = StringUtil.unescapeString(encoded);\n        System.out.println(\"Decoded string: \" + decoded);\n\n        boolean success = Arrays.equals(str.getBytes(Charset.forName(\"UTF-8\")), decoded.getBytes(Charset.forName(\"UTF-8\")));\n        assertTrue(\"One or more errors detected\",success);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..0e077cea 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,74 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+\n+public class StringUtil {\n+\n+    public static String escapeString(String str) {\n+        StringBuilder builder = new StringBuilder();\n+        for (char c : str.toCharArray()) {\n+            if (c <= 0x1f) {\n+                builder.append(\"\\\\u\")\n+                        .append(String.format(\"%04x\", (int) c));\n+            } else if (c >= 0x7f || c == '\"' || c == '\\\\') {\n+                byte[] bytes = String.valueOf(c).getBytes(StandardCharsets.UTF_8);\n+                for (byte b : bytes) {\n+                    builder.append(String.format(\"\\\\x%02x\", b & 0xff));\n+                }\n+            } else {\n+                builder.append(c);\n+            }\n+        }\n+        return builder.toString();\n+    }\n+\n+    public static String unescapeString(String str) {\n+        StringBuilder builder = new StringBuilder();\n+        int i = 0;\n+        while (i < str.length()) {\n+            char c = str.charAt(i);\n+\n+            if (c == '\\\\' && i < str.length() - 1) {\n+                char nextChar = str.charAt(i + 1);\n+                if (nextChar == 'u' && i < str.length() - 5) {\n+                    String unicodeStr = str.substring(i + 2, i + 6);\n+                    char unicodeChar = (char) Integer.parseInt(unicodeStr, 16);\n+                    builder.append(unicodeChar);\n+                    i += 6;\n+                } else if (nextChar == 'x' && i < str.length() - 3) {\n+                    String hexStr = str.substring(i + 2, i + 4);\n+                    char hexChar = (char) Integer.parseInt(hexStr, 16);\n+                    builder.append(hexChar);\n+                    i += 4;\n+                } else {\n+                    builder.append(nextChar);\n+                    i++;\n+                }\n+            } else {\n+                builder.append(c);\n+            }\n+            i++;\n+        }\n+        return builder.toString();\n+    }\n+\n+    public static void main(String[] args) {\n+        \n+        String str = \"This is a \\n test string with \\\"special\\\" characters \\\\ and unicode \\u0661.\\r\\n\";\n+\n+        String encoded = StringUtil.escapeString(str);\n+        System.out.println(\"Encoded string: \" + encoded);\n+\n+        String decoded = StringUtil.unescapeString(encoded);\n+        System.out.println(\"Decoded string: \" + decoded);\n+\n+        boolean success = Arrays.equals(str.getBytes(Charset.forName(\"UTF-8\")), decoded.getBytes(Charset.forName(\"UTF-8\")));\n+        assertTrue(\"One or more errors detected\",success);\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}