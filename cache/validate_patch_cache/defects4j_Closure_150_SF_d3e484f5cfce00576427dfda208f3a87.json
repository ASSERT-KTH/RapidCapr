{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    try {\n        if (n == scope.getRootNode()) return;\n\n        if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n            Node next = n.getNext();\n            if (next != null && NodeUtil.isFunctionExpression(next)) {\n                defineDeclaredFunction(next.getFirstChild(), next);\n            } else {\n                handleFunctionInputs(n.getNext());\n            }\n            return;\n        }\n\n        attachLiteralTypes(n);\n        switch (n.getType()) {\n            case Token.FUNCTION:\n                if (parent.getType() == Token.NAME) {\n                    return;\n                }\n                defineDeclaredFunction(n, parent);\n                break;\n            case Token.CATCH:\n                defineCatch(n, parent);\n                break;\n            case Token.VAR:\n                defineVar(n, parent);\n                break;\n        }\n    } catch (RuntimeException e) {\n        System.err.println(\"Exception caught during traversal: \" + e.getMessage());\n        e.printStackTrace();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..3937bf05 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,41 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    try {\n+        if (n == scope.getRootNode()) return;\n+\n+        if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+            Node next = n.getNext();\n+            if (next != null && NodeUtil.isFunctionExpression(next)) {\n+                defineDeclaredFunction(next.getFirstChild(), next);\n+            } else {\n+                handleFunctionInputs(n.getNext());\n+            }\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+\n+        attachLiteralTypes(n);\n+        switch (n.getType()) {\n+            case Token.FUNCTION:\n+                if (parent.getType() == Token.NAME) {\n+                    return;\n+                }\n+                defineDeclaredFunction(n, parent);\n+                break;\n+            case Token.CATCH:\n+                defineCatch(n, parent);\n+                break;\n+            case Token.VAR:\n+                defineVar(n, parent);\n+                break;\n+        }\n+    } catch (RuntimeException e) {\n+        System.err.println(\"Exception caught during traversal: \" + e.getMessage());\n+        e.printStackTrace();\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}