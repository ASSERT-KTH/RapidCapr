{
    "patch": "if (offsetLocal < 0 && offsetAdjusted >= 0) {\n    final long nextLocal = nextTransition(instantAdjusted);\n    final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted) {\n        return offsetLocal;\n    }\n} else if (offsetLocal >= 0 && offsetAdjusted < 0) {\n    final long nextLocal = previousTransition(instantAdjusted);\n    final long nextAdjusted = previousTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted) {\n        return getOffset(nextLocal);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..61170f2a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal < 0 && offsetAdjusted >= 0) {\n+    final long nextLocal = nextTransition(instantAdjusted);\n+    final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted) {\n+        return offsetLocal;\n+    }\n+} else if (offsetLocal >= 0 && offsetAdjusted < 0) {\n+    final long nextLocal = previousTransition(instantAdjusted);\n+    final long nextAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted) {\n+        return getOffset(nextLocal);\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}