{
    "patch": "      final double tolerance = 1e-12;\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      final double norm1 = v1.getNorm();\n      final double norm2 = v2.getNorm();\n\n      if (norm1 < tolerance || norm2 < tolerance) {\n          throw new IllegalArgumentException(\"zero norm\");\n      }\n\n      final Vector3D v3 = v1.normalize().scalarMultiply(v2.getNorm());\n\n      final double norm3 = v3.getNorm();\n      final double rho  = (v2.dotProduct(v3)) / (norm3 * norm2);\n\n      final double absRho = FastMath.abs(rho);\n      if (absRho > 0.99 && absRho < 1.01) {\n          final Vector3D tmp = v2.normalize().scalarMultiply(norm1);\n          return crossProduct(tmp, v1.normalize());\n      }\n\n      final Vector3D w = v3.add(v2.scalarMultiply(-rho)).normalize();\n      final double   normW         = w.getNorm();\n      final double   twiceArea     = normW * norm2;\n      final Vector3D crossProduct = new Vector3D(w.getX() * twiceArea,\n                                                  w.getY() * twiceArea,\n                                                  w.getZ() * twiceArea);\n\n      return crossProduct;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..948e23577 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,8 +454,7 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n+      final double tolerance = 1e-12;\n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n@@ -466,13 +465,32 @@ public class Vector3D implements Serializable {\n       // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+      final double norm1 = v1.getNorm();\n+      final double norm2 = v2.getNorm();\n+\n+      if (norm1 < tolerance || norm2 < tolerance) {\n+          throw new IllegalArgumentException(\"zero norm\");\n+      }\n \n+      final Vector3D v3 = v1.normalize().scalarMultiply(v2.getNorm());\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      final double norm3 = v3.getNorm();\n+      final double rho  = (v2.dotProduct(v3)) / (norm3 * norm2);\n \n-  }\n+      final double absRho = FastMath.abs(rho);\n+      if (absRho > 0.99 && absRho < 1.01) {\n+          final Vector3D tmp = v2.normalize().scalarMultiply(norm1);\n+          return crossProduct(tmp, v1.normalize());\n+      }\n+\n+      final Vector3D w = v3.add(v2.scalarMultiply(-rho)).normalize();\n+      final double   normW         = w.getNorm();\n+      final double   twiceArea     = normW * norm2;\n+      final Vector3D crossProduct = new Vector3D(w.getX() * twiceArea,\n+                                                  w.getY() * twiceArea,\n+                                                  w.getZ() * twiceArea);\n+\n+      return crossProduct;\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}