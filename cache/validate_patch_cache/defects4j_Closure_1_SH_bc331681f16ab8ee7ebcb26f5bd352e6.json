{
    "patch": "            && callSiteOptimizer.canModifyCallers(function);\n    if (referenced.size() == argList.getChildCount()) {\n      // all args are referenced, there is nothing to remove\n      return;\n    }\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      String argName = lastArg.getString();\n      Var var = fnScope.getVar(argName);\n      if (var.isExtern()) {\n        // Do not remove declaration nodes of externs. See https://github.com/google/closure-compiler/issues/2566\n        break;\n      }\n      if (!referenced.contains(var)) {\n        argList.removeChild(lastArg);\n        NodeUtil.markFunctionsDeleted(lastArg, compiler);\n        compiler.reportCodeChange();\n        // Functions could delegate to this function via apply/call, in which case it isn't\n        // safe to remove any arguments.\n        if (NodeUtil.referencesFunctionArgs(function)) {\n          return;\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4090c162 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,35 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+            && callSiteOptimizer.canModifyCallers(function);\n+    if (referenced.size() == argList.getChildCount()) {\n+      // all args are referenced, there is nothing to remove\n+      return;\n+    }\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      String argName = lastArg.getString();\n+      Var var = fnScope.getVar(argName);\n+      if (var.isExtern()) {\n+        // Do not remove declaration nodes of externs. See https://github.com/google/closure-compiler/issues/2566\n+        break;\n+      }\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(lastArg);\n+        NodeUtil.markFunctionsDeleted(lastArg, compiler);\n+        compiler.reportCodeChange();\n+        // Functions could delegate to this function via apply/call, in which case it isn't\n+        // safe to remove any arguments.\n+        if (NodeUtil.referencesFunctionArgs(function)) {\n+          return;\n+        }\n+      } else {\n+        break;\n+      }\n+    }\n+\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}