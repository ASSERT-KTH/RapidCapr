{
    "patch": "protected final double doSolve() throws TooManyEvaluationsException {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it. Since these are\n    // not under-approximations or over-approximations, we can return them\n    // regardless of the allowed solutions.\n    if (f0 == 0.0) {\n        return x0;\n    } else if (f1 == 0.0) {\n        return x1;\n    } else if (f0 * f1 > 0.0) {\n        throw new NoBracketingException(x0, x1, f0, f1);\n    }\n\n    // Get accuracies.\n    final double functionValueAccuracy = getFunctionValueAccuracy();\n    final double absoluteAccuracy = getAbsoluteAccuracy();\n    final double relativeAccuracy = getRelativeAccuracy();\n    final double functionValueAccuracy2 = 2.0 * functionValueAccuracy;\n\n    double x = x1;\n    double fx = f1;\n    double dx = x1 - x0;\n    double dfx = f1 - f0;\n    int numIterations = 0;\n    while (++numIterations <= getMaxIterations()) {\n\n        // calculate the new approximation\n        final double newx = x - fx * dx / dfx;\n        final double newfx = computeObjectiveValue(newx);\n\n        // if the approximate solution is the exact solution, return it\n        if (newfx == 0.0) {\n            return newx;\n        }\n\n        // Check for convergence.\n        if (FastMath.abs(newx - x) <= FastMath.max(relativeAccuracy * FastMath.abs(x), absoluteAccuracy)) {\n            return newx;\n        }\n\n        // Replace old point with new point.\n        dx = x - x0;\n        dfx = newfx - f0;\n        if (dfx * fx < 0) {\n            x0 = x;\n            f0 = fx;\n            dx = newx - x0;\n            dfx = newfx - f0;\n        }\n        x = newx;\n        fx = newfx;\n\n        // Check for convergence.\n        if (FastMath.abs(dx) < FastMath.max(relativeAccuracy * FastMath.abs(x), absoluteAccuracy)) {\n            return x;\n        }\n        if (FastMath.abs(fx) < functionValueAccuracy2) {\n            return x;\n        }\n\n        // Update which point is the newest\n        if (FastMath.abs(f0) < FastMath.abs(fx)) {\n            final double tmp = x0;\n            x0 = x;\n            x = tmp;\n            final double tmp2 = f0;\n            f0 = fx;\n            fx = tmp2;\n        }\n\n        // check for early termination\n        final double delta = dx * (fx / (fx - f0));\n        if (FastMath.abs(delta) < FastMath.max(relativeAccuracy * FastMath.abs(x), absoluteAccuracy)) {\n            return x + ((delta >= 0) ? absoluteAccuracy : -absoluteAccuracy);\n        }\n\n        // if we have hit the maximum number of iterations, throw an exception\n        if (numIterations == getMaxIterations()) {\n            throw new MaxIterationsExceededException(getMaxIterations());\n        }\n    }\n\n    // Should never get here.\n    throw new MathInternalError();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..d132a7cf5 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,127 +125,97 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+protected final double doSolve() throws TooManyEvaluationsException {\n+    // Get initial solution\n+    double x0 = getMin();\n+    double x1 = getMax();\n+    double f0 = computeObjectiveValue(x0);\n+    double f1 = computeObjectiveValue(x1);\n+\n+    // If one of the bounds is the exact root, return it. Since these are\n+    // not under-approximations or over-approximations, we can return them\n+    // regardless of the allowed solutions.\n+    if (f0 == 0.0) {\n+        return x0;\n+    } else if (f1 == 0.0) {\n+        return x1;\n+    } else if (f0 * f1 > 0.0) {\n+        throw new NoBracketingException(x0, x1, f0, f1);\n+    }\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n+    // Get accuracies.\n+    final double functionValueAccuracy = getFunctionValueAccuracy();\n+    final double absoluteAccuracy = getAbsoluteAccuracy();\n+    final double relativeAccuracy = getRelativeAccuracy();\n+    final double functionValueAccuracy2 = 2.0 * functionValueAccuracy;\n+\n+    double x = x1;\n+    double fx = f1;\n+    double dx = x1 - x0;\n+    double dfx = f1 - f0;\n+    int numIterations = 0;\n+    while (++numIterations <= getMaxIterations()) {\n+\n+        // calculate the new approximation\n+        final double newx = x - fx * dx / dfx;\n+        final double newfx = computeObjectiveValue(newx);\n+\n+        // if the approximate solution is the exact solution, return it\n+        if (newfx == 0.0) {\n+            return newx;\n         }\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n-\n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n-\n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+        // Check for convergence.\n+        if (FastMath.abs(newx - x) <= FastMath.max(relativeAccuracy * FastMath.abs(x), absoluteAccuracy)) {\n+            return newx;\n+        }\n \n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+        // Replace old point with new point.\n+        dx = x - x0;\n+        dfx = newfx - f0;\n+        if (dfx * fx < 0) {\n+            x0 = x;\n+            f0 = fx;\n+            dx = newx - x0;\n+            dfx = newfx - f0;\n+        }\n+        x = newx;\n+        fx = newfx;\n \n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n-            }\n+        // Check for convergence.\n+        if (FastMath.abs(dx) < FastMath.max(relativeAccuracy * FastMath.abs(x), absoluteAccuracy)) {\n+            return x;\n+        }\n+        if (FastMath.abs(fx) < functionValueAccuracy2) {\n+            return x;\n+        }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n-            } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n-                }\n-            }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n+        // Update which point is the newest\n+        if (FastMath.abs(f0) < FastMath.abs(fx)) {\n+            final double tmp = x0;\n+            x0 = x;\n+            x = tmp;\n+            final double tmp2 = f0;\n+            f0 = fx;\n+            fx = tmp2;\n+        }\n \n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n-                }\n-            }\n+        // check for early termination\n+        final double delta = dx * (fx / (fx - f0));\n+        if (FastMath.abs(delta) < FastMath.max(relativeAccuracy * FastMath.abs(x), absoluteAccuracy)) {\n+            return x + ((delta >= 0) ? absoluteAccuracy : -absoluteAccuracy);\n+        }\n \n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n-                }\n-            }\n+        // if we have hit the maximum number of iterations, throw an exception\n+        if (numIterations == getMaxIterations()) {\n+            throw new MaxIterationsExceededException(getMaxIterations());\n         }\n     }\n \n+    // Should never get here.\n+    throw new MathInternalError();\n+}\n+\n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}