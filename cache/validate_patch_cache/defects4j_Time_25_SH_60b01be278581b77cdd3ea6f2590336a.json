{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // if the instant is within a DST gap in the local time-line, return the previous offset\n    boolean gap = (offsetLocal > offsetAdjusted);\n    long transition;\n    if (gap) {\n        transition = previousTransition(instantAdjusted);\n    } else {\n        transition = nextTransition(instantAdjusted);\n    }\n    if (transition > instantLocal) {\n        // current DST gap\n        return offsetLocal;\n    }\n\n    // find previous and next transitions\n    long nextTransition;\n    long prevTransition;\n    if (gap) {\n        nextTransition = nextTransition(instantLocal - offsetAdjusted);\n        prevTransition = previousTransition(instantAdjusted);\n    } else {\n        nextTransition = nextTransition(instantAdjusted);\n        prevTransition = previousTransition(instantLocal - offsetAdjusted);\n    }\n\n    // compare the instants before and after the gap and if they are on different sides of the gap, return the offset after the gap\n    if (prevTransition == nextTransition) {\n        // only one transition in the vicinity, can't use it\n        return offsetAdjusted;\n    }\n    int offsetBefore = getOffset(prevTransition);\n    int offsetAfter = getOffset(nextTransition);\n    if (offsetBefore == offsetAfter || nextTransition <= instantLocal || prevTransition >= instantAdjusted) {\n        return offsetAdjusted;\n    } else if (gap && offsetAfter > offsetBefore) {\n        return offsetAfter;\n    } else if (!gap && offsetBefore > offsetAfter) {\n        return offsetBefore;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..a08c2b6b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,47 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // if the instant is within a DST gap in the local time-line, return the previous offset\n+    boolean gap = (offsetLocal > offsetAdjusted);\n+    long transition;\n+    if (gap) {\n+        transition = previousTransition(instantAdjusted);\n+    } else {\n+        transition = nextTransition(instantAdjusted);\n+    }\n+    if (transition > instantLocal) {\n+        // current DST gap\n+        return offsetLocal;\n+    }\n+\n+    // find previous and next transitions\n+    long nextTransition;\n+    long prevTransition;\n+    if (gap) {\n+        nextTransition = nextTransition(instantLocal - offsetAdjusted);\n+        prevTransition = previousTransition(instantAdjusted);\n+    } else {\n+        nextTransition = nextTransition(instantAdjusted);\n+        prevTransition = previousTransition(instantLocal - offsetAdjusted);\n+    }\n+\n+    // compare the instants before and after the gap and if they are on different sides of the gap, return the offset after the gap\n+    if (prevTransition == nextTransition) {\n+        // only one transition in the vicinity, can't use it\n+        return offsetAdjusted;\n+    }\n+    int offsetBefore = getOffset(prevTransition);\n+    int offsetAfter = getOffset(nextTransition);\n+    if (offsetBefore == offsetAfter || nextTransition <= instantLocal || prevTransition >= instantAdjusted) {\n+        return offsetAdjusted;\n+    } else if (gap && offsetAfter > offsetBefore) {\n+        return offsetAfter;\n+    } else if (!gap && offsetBefore > offsetAfter) {\n+        return offsetBefore;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}