{
    "patch": "public static String unescape(String s) {\n    if (s == null)\n        return null;\n    StringBuffer result = new StringBuffer();\n    int resultPos = 0;\n    int inputPos = 0;\n    while (inputPos < s.length()) {\n        char ch = s.charAt(inputPos++);\n        if (ch == '\\\\') {\n            if (inputPos == s.length()) {\n                result.append(ch);\n                break;\n            }\n            ch = s.charAt(inputPos++);\n            switch (ch) {\n                case '\\\\':\n                    result.append('\\\\');\n                    break;\n                case '\\'':\n                    result.append('\\'');\n                    break;\n                case '\\\"':\n                    result.append('\"');\n                    break;\n                case 'r':\n                    result.append('\\r');\n                    break;\n                case 'f':\n                    result.append('\\f');\n                    break;\n                case 't':\n                    result.append('\\t');\n                    break;\n                case 'n':\n                    result.append('\\n');\n                    break;\n                case 'b':\n                    result.append('\\b');\n                    break;\n                case 'u':\n                    if (inputPos+4 > s.length()) {\n                        result.append(\"\\\\u\");\n                        break;\n                    }\n                    try {\n                        result.append((char)Integer.parseInt(s.substring(inputPos,inputPos+4),16));\n                        inputPos += 4;\n                    } catch (NumberFormatException nfe) {\n                        result.append(\"\\\\u\");\n                    }\n                    break;\n                default:\n                    if (ch >= '0' && ch <= '7') {\n                        int number = Character.digit(ch, 8);\n                        while (inputPos < s.length()) {\n                            ch = s.charAt(inputPos);\n                            if (ch < '0' || ch > '7')\n                                break;\n                            number = number * 8 + Character.digit(ch, 8);\n                            ++inputPos;\n                        }\n                        result.append((char)number);\n                    } else {\n                        result.append(\"\\\\\" + ch);\n                    }\n                    break;\n            }\n        } else {\n            result.append(ch);\n        }\n        resultPos++;\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}