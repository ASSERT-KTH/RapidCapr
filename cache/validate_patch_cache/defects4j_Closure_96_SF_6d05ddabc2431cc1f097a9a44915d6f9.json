{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n\n  boolean varArgs = functionType.getMaxArguments() == Integer.MAX_VALUE;\n\n  while (parameters.hasNext()) {\n    parameter = parameters.next();\n\n    if (!arguments.hasNext() && !varArgs) {\n      // There are no more arguments left to process but the function\n      // expected more parameters (not varargs).\n      reportIncorrectArgumentCount(t, call, functionType, ordinal);\n      return;\n    }\n\n    if (!parameters.hasNext() && varArgs) {\n      // Only a varargs parameter is left.\n      Node varArgsNode = parametersVarargsNode(call);\n      while (arguments.hasNext()) {\n        argument = arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t,\n            argument, getJSType(argument), getJSType(varArgsNode), call, ordinal);\n      }\n      break;\n    }\n\n    argument = arguments.next();\n    ordinal++;\n    validator.expectArgumentMatchesParameter(t,\n        argument, getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  // There are more arguments left, but the function\n  // hasn't expected more (excluding varargs).\n  if (arguments.hasNext() && !varArgs) {\n    reportIncorrectArgumentCount(t, call, functionType, ordinal);\n    return;\n  }\n\n  if (ordinal < functionType.getMinArguments()) {\n    // Too few arguments passed to the function.\n    reportIncorrectArgumentCount(t, call, functionType, ordinal);\n    return;\n  }\n\n  if (!varArgs) {\n    // The number of arguments is either exact or capped.\n    if (ordinal > functionType.getMaxArguments()) {\n      reportIncorrectArgumentCount(t, call, functionType, ordinal);\n      return;\n    }\n  } else {\n    // The number of arguments is exact or can be infinite\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n      validator.expectArgumentMatchesParameter(t,\n          argument, getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n  }\n}\n\nprivate Node parametersVarargsNode(Node call) {\n  Node function = call.getFirstChild();\n  return function.getLastChild();\n}\n\nprivate void reportIncorrectArgumentCount(NodeTraversal t, Node call, FunctionType functionType, int ordinal) {\n  report(t, call, WRONG_ARGUMENT_COUNT,\n      validator.getReadableJSTypeName(call.getFirstChild(), false),\n      String.valueOf(ordinal),\n      String.valueOf(functionType.getMinArguments()),\n      formalArgumentCountDescription(functionType));\n}\n\nprivate String formalArgumentCountDescription(FunctionType functionType) {\n  int maxArgs = functionType.getMaxArguments();\n  return maxArgs == Integer.MAX_VALUE ? \" and an arbitrary number of arguments\" :\n         maxArgs > functionType.getMinArguments() ? \" between \" + functionType.getMinArguments() + \" and \" + maxArgs + \" arguments\" :\n         maxArgs == functionType.getMinArguments() ? \" \" + maxArgs + \" argument(s)\" :\n         \"\";\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..35b9f6fa 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,39 +1396,97 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+\n+  int ordinal = 0;\n+  Node parameter = null;\n+  Node argument = null;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+  boolean varArgs = functionType.getMaxArguments() == Integer.MAX_VALUE;\n+\n+  while (parameters.hasNext()) {\n+    parameter = parameters.next();\n+\n+    if (!arguments.hasNext() && !varArgs) {\n+      // There are no more arguments left to process but the function\n+      // expected more parameters (not varargs).\n+      reportIncorrectArgumentCount(t, call, functionType, ordinal);\n+      return;\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (!parameters.hasNext() && varArgs) {\n+      // Only a varargs parameter is left.\n+      Node varArgsNode = parametersVarargsNode(call);\n+      while (arguments.hasNext()) {\n+        argument = arguments.next();\n+        ordinal++;\n+        validator.expectArgumentMatchesParameter(t,\n+            argument, getJSType(argument), getJSType(varArgsNode), call, ordinal);\n+      }\n+      break;\n     }\n+\n+    argument = arguments.next();\n+    ordinal++;\n+    validator.expectArgumentMatchesParameter(t,\n+        argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+  }\n+\n+  // There are more arguments left, but the function\n+  // hasn't expected more (excluding varargs).\n+  if (arguments.hasNext() && !varArgs) {\n+    reportIncorrectArgumentCount(t, call, functionType, ordinal);\n+    return;\n   }\n \n+  if (ordinal < functionType.getMinArguments()) {\n+    // Too few arguments passed to the function.\n+    reportIncorrectArgumentCount(t, call, functionType, ordinal);\n+    return;\n+  }\n+\n+  if (!varArgs) {\n+    // The number of arguments is either exact or capped.\n+    if (ordinal > functionType.getMaxArguments()) {\n+      reportIncorrectArgumentCount(t, call, functionType, ordinal);\n+      return;\n+    }\n+  } else {\n+    // The number of arguments is exact or can be infinite\n+    while (arguments.hasNext()) {\n+      argument = arguments.next();\n+      ordinal++;\n+      validator.expectArgumentMatchesParameter(t,\n+          argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+    }\n+  }\n+}\n+\n+private Node parametersVarargsNode(Node call) {\n+  Node function = call.getFirstChild();\n+  return function.getLastChild();\n+}\n+\n+private void reportIncorrectArgumentCount(NodeTraversal t, Node call, FunctionType functionType, int ordinal) {\n+  report(t, call, WRONG_ARGUMENT_COUNT,\n+      validator.getReadableJSTypeName(call.getFirstChild(), false),\n+      String.valueOf(ordinal),\n+      String.valueOf(functionType.getMinArguments()),\n+      formalArgumentCountDescription(functionType));\n+}\n+\n+private String formalArgumentCountDescription(FunctionType functionType) {\n+  int maxArgs = functionType.getMaxArguments();\n+  return maxArgs == Integer.MAX_VALUE ? \" and an arbitrary number of arguments\" :\n+         maxArgs > functionType.getMinArguments() ? \" between \" + functionType.getMinArguments() + \" and \" + maxArgs + \" arguments\" :\n+         maxArgs == functionType.getMinArguments() ? \" \" + maxArgs + \" argument(s)\" :\n+         \"\";\n+}\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warnings(s):",
    "test_result": "FAIL"
}