{
    "patch": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Assume date is Gregorian.\n        long instant;\n        try {\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException ex) {\n            if (dayOfMonth == 29 && monthOfYear == 2) {\n                return iJulianChronology.getDateTimeMillis\n                    (year, monthOfYear, 28,\n                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            }\n            throw ex;\n        }\n        \n        if (instant < iCutoverMillis) {\n            // Maybe it's Julian.\n            instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                // Okay, it's in the illegal cutover gap.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n\n        return instant;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..df25881c 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -361,9 +361,19 @@ public final class GJChronology extends AssembledChronology {\n \n         // Assume date is Gregorian.\n         long instant;\n+        try {\n             instant = iGregorianChronology.getDateTimeMillis\n                 (year, monthOfYear, dayOfMonth,\n                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        } catch (IllegalArgumentException ex) {\n+            if (dayOfMonth == 29 && monthOfYear == 2) {\n+                return iJulianChronology.getDateTimeMillis\n+                    (year, monthOfYear, 28,\n+                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            }\n+            throw ex;\n+        }\n+        \n         if (instant < iCutoverMillis) {\n             // Maybe it's Julian.\n             instant = iJulianChronology.getDateTimeMillis\n@@ -374,6 +384,7 @@ public final class GJChronology extends AssembledChronology {\n                 throw new IllegalArgumentException(\"Specified date does not exist\");\n             }\n         }\n+\n         return instant;\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<28> but was:<29>",
    "test_result": "FAIL"
}