{
    "patch": "    \n    Node args = getFunctionArgList(function);\n    \n    // remove unreferenced args from the beginning of the list\n    while (args.hasChildren()) {\n      Node arg = args.getFirstChild();\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        args.removeChild(arg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n\n    // remove unreferenced args from the end of the list\n    while (args.hasChildren()) {\n      Node arg = args.getLastChild();\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        args.removeChild(arg);\n        compiler.reportCodeChange();\n      } else {\n        break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ee3dacfc 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,30 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    Node args = getFunctionArgList(function);\n+    \n+    // remove unreferenced args from the beginning of the list\n+    while (args.hasChildren()) {\n+      Node arg = args.getFirstChild();\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        args.removeChild(arg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+    }\n+\n+    // remove unreferenced args from the end of the list\n+    while (args.hasChildren()) {\n+      Node arg = args.getLastChild();\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        args.removeChild(arg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}