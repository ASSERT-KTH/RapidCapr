{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n\n    final int len = str.length();\n    final char ch0 = str.charAt(0);\n\n    if (ch0 == '_') {\n        // This is a variant-only locale, e.g. \"_FOOBAR\"\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final int variantStart = 1;\n        final int variantEnd = len;\n        final String variant = str.substring(variantStart, variantEnd);\n        if (!isValidCode(variant)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(\"\", \"\", variant);\n    }\n\n    String language = \"\";\n    String country = \"\";\n    String variant = \"\";\n\n    int pos1 = 0;\n    int pos2 = -1;\n\n    // Extract language\n    pos2 = str.indexOf('_', pos1);\n    if (pos2 == -1) {\n        if (!isValidCode(str)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        language = str;\n        return new Locale(language);\n    } else {\n        language = str.substring(pos1, pos2);\n        if (!isValidCode(language)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    }\n\n    // Extract country\n    pos1 = pos2 + 1;\n    pos2 = str.indexOf('_', pos1);\n    if (pos2 == -1) {\n        if (!isValidCode(str.substring(pos1))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        country = str.substring(pos1);\n        return new Locale(language, country);\n    } else {\n        country = str.substring(pos1, pos2);\n        if (!isValidCode(country)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    }\n\n    // Extract variant\n    pos1 = pos2 + 1;\n    pos2 = str.length();\n    variant = str.substring(pos1, pos2);\n    if (!isValidVariant(variant)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isValidCode(final String code) {\n    final int len = code.length();\n\n    if (len == 0 || len > 8) {\n        return false;\n    }\n\n    for (int i = 0; i < len; i++) {\n        final char ch = code.charAt(i);\n        if (!Character.isLowerCase(ch)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nprivate static boolean isValidVariant(final String variant) {\n    final int len = variant.length();\n\n    if (len == 0 || len > 8) {\n        return false;\n    }\n\n    for (int i = 0; i < len; i++) {\n        final char ch = variant.charAt(i);\n        if (!Character.isLetterOrDigit(ch) && ch != '-' && ch != '_' && ch != '@') {\n            return false;\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..48032a72 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,111 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+\n+    final int len = str.length();\n+    final char ch0 = str.charAt(0);\n+\n+    if (ch0 == '_') {\n+        // This is a variant-only locale, e.g. \"_FOOBAR\"\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        final int variantStart = 1;\n+        final int variantEnd = len;\n+        final String variant = str.substring(variantStart, variantEnd);\n+        if (!isValidCode(variant)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        return new Locale(\"\", \"\", variant);\n+    }\n+\n+    String language = \"\";\n+    String country = \"\";\n+    String variant = \"\";\n+\n+    int pos1 = 0;\n+    int pos2 = -1;\n+\n+    // Extract language\n+    pos2 = str.indexOf('_', pos1);\n+    if (pos2 == -1) {\n+        if (!isValidCode(str)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        language = str;\n+        return new Locale(language);\n+    } else {\n+        language = str.substring(pos1, pos2);\n+        if (!isValidCode(language)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n     }\n \n+    // Extract country\n+    pos1 = pos2 + 1;\n+    pos2 = str.indexOf('_', pos1);\n+    if (pos2 == -1) {\n+        if (!isValidCode(str.substring(pos1))) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        country = str.substring(pos1);\n+        return new Locale(language, country);\n+    } else {\n+        country = str.substring(pos1, pos2);\n+        if (!isValidCode(country)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+    }\n+\n+    // Extract variant\n+    pos1 = pos2 + 1;\n+    pos2 = str.length();\n+    variant = str.substring(pos1, pos2);\n+    if (!isValidVariant(variant)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isValidCode(final String code) {\n+    final int len = code.length();\n+\n+    if (len == 0 || len > 8) {\n+        return false;\n+    }\n+\n+    for (int i = 0; i < len; i++) {\n+        final char ch = code.charAt(i);\n+        if (!Character.isLowerCase(ch)) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+private static boolean isValidVariant(final String variant) {\n+    final int len = variant.length();\n+\n+    if (len == 0 || len > 8) {\n+        return false;\n+    }\n+\n+    for (int i = 0; i < len; i++) {\n+        final char ch = variant.charAt(i);\n+        if (!Character.isLetterOrDigit(ch) && ch != '-' && ch != '_' && ch != '@') {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: fr__P",
    "test_result": "FAIL"
}