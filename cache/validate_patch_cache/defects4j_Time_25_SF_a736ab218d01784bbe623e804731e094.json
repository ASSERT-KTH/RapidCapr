{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int[] offsets = getOffset(instantLocal);\n        final long instantAdjusted = instantLocal - offsets[0];\n        final int[] adjustedOffsets = getOffset(instantAdjusted);\n        if (offsets[0] != adjustedOffsets[0] && offsets[1] == adjustedOffsets[1]) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsets[0]);\n            if (nextLocal != nextAdjusted) {\n                return offsets[0];\n            }\n        }\n        return offsets[0] + offsets[1];\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d22c6a98 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,27 +877,17 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+        final int[] offsets = getOffset(instantLocal);\n+        final long instantAdjusted = instantLocal - offsets[0];\n+        final int[] adjustedOffsets = getOffset(instantAdjusted);\n+        if (offsets[0] != adjustedOffsets[0] && offsets[1] == adjustedOffsets[1]) {\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsets[0]);\n+            if (nextLocal != nextAdjusted) {\n+                return offsets[0];\n             }\n         }\n-        return offsetAdjusted;\n+        return offsets[0] + offsets[1];\n     }\n \n     /**",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}