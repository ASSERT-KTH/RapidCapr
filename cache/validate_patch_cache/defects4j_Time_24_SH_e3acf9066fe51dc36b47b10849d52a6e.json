{
    "patch": "boolean adjusted = false;\ntry {\n    for (int i = 0; i < count; i++) {\n        long newMillis = savedFields[i].set(millis, resetFields);\n        if (millis > 0 && newMillis < 0) {\n            throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n        } else if (millis < 0 && newMillis > 0) {\n            throw new IllegalArgumentException(\"The datetime is too small to be represented\");\n        } else if (newMillis != millis && !adjusted && i == 0 && iSavedFields[0].iField.getDurationField().getType() == DateTimeFieldType.monthOfYear()) {\n            // alter base year for parsing if first field is month or day\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n        if (!adjusted && millis != newMillis) {\n            adjusted = true;\n        }\n        millis = newMillis;\n    }\n\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..24dc2f2d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,31 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+boolean adjusted = false;\n+try {\n+    for (int i = 0; i < count; i++) {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+        if (millis > 0 && newMillis < 0) {\n+            throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n+        } else if (millis < 0 && newMillis > 0) {\n+            throw new IllegalArgumentException(\"The datetime is too small to be represented\");\n+        } else if (newMillis != millis && !adjusted && i == 0 && iSavedFields[0].iField.getDurationField().getType() == DateTimeFieldType.monthOfYear()) {\n+            // alter base year for parsing if first field is month or day\n+            saveField(DateTimeFieldType.year(), iDefaultYear);\n+            return computeMillis(resetFields, text);\n+        }\n+        if (!adjusted && millis != newMillis) {\n+            adjusted = true;\n+        }\n+        millis = newMillis;\n+    }\n+\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: incomparable types: DurationFieldType and DateTimeFieldType",
    "test_result": "ERROR"
}