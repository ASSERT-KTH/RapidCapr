{
    "patch": "  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    Equality inequality = this.testForEquality(that);\n    if (inequality == Equality.TRUE) {\n      return new TypePair(null, null);\n    } else if (inequality == Equality.FALSE || inequality == Equality.UNKNOWN) {\n      TypePair typePair = new TypePair(this, that);\n      typePair = typePair.restrictByNotNullOrUndefined();\n      if (typePair.typeA.isUnknown() && typePair.typeB.isUnknown()) {\n        typePair = new TypePair(null, null);\n      }\n      return typePair;\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..4430ad6e 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -701,13 +701,16 @@ public abstract class JSType implements Serializable {\n     }\n \n     // other types\n-    switch (this.testForEquality(that)) {\n-      case TRUE:\n-        return new TypePair(null, null);\n-\n-      case FALSE:\n-      case UNKNOWN:\n-        return new TypePair(this, that);\n+    Equality inequality = this.testForEquality(that);\n+    if (inequality == Equality.TRUE) {\n+      return new TypePair(null, null);\n+    } else if (inequality == Equality.FALSE || inequality == Equality.UNKNOWN) {\n+      TypePair typePair = new TypePair(this, that);\n+      typePair = typePair.restrictByNotNullOrUndefined();\n+      if (typePair.typeA.isUnknown() && typePair.typeB.isUnknown()) {\n+        typePair = new TypePair(null, null);\n+      }\n+      return typePair;\n     }\n \n     // switch case is exhaustive",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}