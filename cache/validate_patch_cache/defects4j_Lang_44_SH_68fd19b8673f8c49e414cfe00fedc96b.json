{
    "patch": "        if (val == null) {\n            return null;\n        }\n        if (val.length() == 0) {\n            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n        }\n        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        }\n        char lastChar = val.charAt(val.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = val.indexOf('.');\n        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n\n        // Treat possible sign.\n        int startPos = 0;\n        if (val.startsWith(\"+\")) {\n            startPos = 1;\n        } else if (val.startsWith(\"-\")) {\n            startPos = 1;\n        }\n        boolean allZeros = true;\n        if (decPos > -1) {\n            if (expPos > -1) {\n                if (expPos < decPos) {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                dec = val.substring(decPos + 1, expPos);\n            } else {\n                dec = val.substring(decPos + 1);\n            }\n            mant = val.substring(startPos, decPos);\n            allZeros = isAllZeros(mant) && isAllZeros(dec);\n        } else {\n            if (expPos > -1) {\n                mant = val.substring(startPos, expPos);\n            } else {\n                mant = val.substring(startPos);\n            }\n            dec = null;\n            allZeros = isAllZeros(mant);\n        }\n        if (expPos > -1) {\n            exp = val.substring(expPos + 1, val.length());\n            if (exp.startsWith(\"+\")) {\n                exp = exp.substring(1);\n            }\n        } else {\n            exp = null;\n        }\n        return createNumber(val, mant, dec, exp, allZeros, lastChar);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..e406d0b5 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,63 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (val == null) {\n+            return null;\n+        }\n+        if (val.length() == 0) {\n+            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n+        }\n+        if (val.startsWith(\"--\")) {\n+            // this is protection for poorness in java.lang.BigDecimal.\n+            // it accepts this as a legal value, but it does not appear\n+            // to be in specification of class. OS X Java parses it to\n+            // a wrong value.\n+            return null;\n+        }\n+        char lastChar = val.charAt(val.length() - 1);\n+        String mant;\n+        String dec;\n+        String exp;\n+        int decPos = val.indexOf('.');\n+        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n+\n+        // Treat possible sign.\n+        int startPos = 0;\n+        if (val.startsWith(\"+\")) {\n+            startPos = 1;\n+        } else if (val.startsWith(\"-\")) {\n+            startPos = 1;\n+        }\n+        boolean allZeros = true;\n+        if (decPos > -1) {\n+            if (expPos > -1) {\n+                if (expPos < decPos) {\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                }\n+                dec = val.substring(decPos + 1, expPos);\n+            } else {\n+                dec = val.substring(decPos + 1);\n+            }\n+            mant = val.substring(startPos, decPos);\n+            allZeros = isAllZeros(mant) && isAllZeros(dec);\n+        } else {\n+            if (expPos > -1) {\n+                mant = val.substring(startPos, expPos);\n+            } else {\n+                mant = val.substring(startPos);\n+            }\n+            dec = null;\n+            allZeros = isAllZeros(mant);\n+        }\n+        if (expPos > -1) {\n+            exp = val.substring(expPos + 1, val.length());\n+            if (exp.startsWith(\"+\")) {\n+                exp = exp.substring(1);\n+            }\n+        } else {\n+            exp = null;\n+        }\n+        return createNumber(val, mant, dec, exp, allZeros, lastChar);\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: method createNumber in class NumberUtils cannot be applied to given types;",
    "test_result": "ERROR"
}