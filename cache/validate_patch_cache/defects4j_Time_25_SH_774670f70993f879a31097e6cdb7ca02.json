{
    "patch": "                if ((offsetLocal - offsetAdjusted) < 0) {\n                    // if they are less than 0, the current offset is smaller\n                    // than the true offset or the next offset\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal == nextAdjusted) {\n                        // if next transition is the same, we are near it\n                        return offsetAdjusted;\n                    } else {\n                        // we are between transitions, choose the largest\n                        // or if equal, the current\n                        return Math.max(offsetLocal, offsetAdjusted);\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d13c598f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    // if they are less than 0, the current offset is smaller\n+                    // than the true offset or the next offset\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal == nextAdjusted) {\n+                        // if next transition is the same, we are near it\n+                        return offsetAdjusted;\n+                    } else {\n+                        // we are between transitions, choose the largest\n+                        // or if equal, the current\n+                        return Math.max(offsetLocal, offsetAdjusted);\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}