{
    "patch": "        Vector3D revertedDirection = direction.negate();\n        Vector3D revertedPoint = direction.scalarMultiply(-1);\n        Line reverted = new Line(revertedPoint, revertedDirection, tolerance);\n        double[] directionArray = revertedDirection.toArray();\n        double[] pointArray = revertedPoint.toArray();\n        Assert.assertTrue(Precision.equals(pointArray[0], 0.0, tolerance));\n        Assert.assertTrue(Precision.compareTo(directionArray[0], 0.0, tolerance) == 0);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..d71e0ee92 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,7 +84,13 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n+        Vector3D revertedDirection = direction.negate();\n+        Vector3D revertedPoint = direction.scalarMultiply(-1);\n+        Line reverted = new Line(revertedPoint, revertedDirection, tolerance);\n+        double[] directionArray = revertedDirection.toArray();\n+        double[] pointArray = revertedPoint.toArray();\n+        Assert.assertTrue(Precision.equals(pointArray[0], 0.0, tolerance));\n+        Assert.assertTrue(Precision.compareTo(directionArray[0], 0.0, tolerance) == 0);\n         return reverted;\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}