{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n    Node child = n.getFirstChild();\n    if (child.getType() == Token.EXPR_RESULT) {\n      return false;\n    }\n    Node parent = n.getParent();\n    if (parent != null && (parent.getType() == Token.CALL || parent.getType() == Token.NEW)) {\n      return false;\n    }\n    if (NodeUtil.isFunctionExpression(child)) {\n      // Don't fold if the child is a function expression, as folding it would change the \"this\" binding.\n      return false;\n    }\n    if (child.isCall()) {\n      // Don't fold if the callee of the expression is a function.\n      Node callee = child.getFirstChild();\n      if (callee.isFunction()) {\n        return false;\n      }\n    }\n    if (NodeUtil.referencesThis(child) || NodeUtil.referencesSuper(child)) {\n      // Don't fold if the child references \"this\" or \"super\".\n      return false;\n    }\n    if (child.isString()) {\n      // Don't fold string literals.\n      return false;\n    }\n    if (parent != null && !NodeUtil.isValidStatementParent(parent) && NodeUtil.isExpressionNode(parent)) {\n      // Don't fold if the parent is not a valid statement parent (e.g. inside an array initializer) and not a statement itself.\n      return false;\n    }\n    return !NodeUtil.mayHaveSideEffects(child);\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..00411c1c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,43 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n+    Node child = n.getFirstChild();\n+    if (child.getType() == Token.EXPR_RESULT) {\n+      return false;\n+    }\n+    Node parent = n.getParent();\n+    if (parent != null && (parent.getType() == Token.CALL || parent.getType() == Token.NEW)) {\n+      return false;\n+    }\n+    if (NodeUtil.isFunctionExpression(child)) {\n+      // Don't fold if the child is a function expression, as folding it would change the \"this\" binding.\n+      return false;\n+    }\n+    if (child.isCall()) {\n+      // Don't fold if the callee of the expression is a function.\n+      Node callee = child.getFirstChild();\n+      if (callee.isFunction()) {\n+        return false;\n       }\n     }\n-\n-    return false;\n+    if (NodeUtil.referencesThis(child) || NodeUtil.referencesSuper(child)) {\n+      // Don't fold if the child references \"this\" or \"super\".\n+      return false;\n+    }\n+    if (child.isString()) {\n+      // Don't fold string literals.\n+      return false;\n+    }\n+    if (parent != null && !NodeUtil.isValidStatementParent(parent) && NodeUtil.isExpressionNode(parent)) {\n+      // Don't fold if the parent is not a valid statement parent (e.g. inside an array initializer) and not a statement itself.\n+      return false;\n+    }\n+    return !NodeUtil.mayHaveSideEffects(child);\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}