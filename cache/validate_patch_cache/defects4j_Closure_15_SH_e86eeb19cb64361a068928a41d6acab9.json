{
    "patch": "public boolean apply(Node n) {\n  if (n == null) {\n    return false;\n  }\n\n  // TODO(user): We only care about calls to functions that\n  // passes one of the dependent variable to a non-side-effect free\n  // function.\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n\n  // Check for delete operation that can remove properties off an object.\n  if (n.isDelProp()) {\n    return true;\n  }\n\n  // Traverse only the relevant branches that can satisfy the specified criteria.\n  if (n.isIf()) {\n    Node condition = n.getFirstChild();\n    if (apply(condition.getNext())) {\n      return true;\n    }\n    return apply(condition.getNext().getNext());\n  } else if (n.isHook()) {\n    return apply(n.getFirstChild().getNext()) || apply(n.getFirstChild().getNext().getNext());\n  } else if (n.isAssign()) {\n    return apply(n.getLastChild());\n  } else if (n.isSwitch()) {\n    Node caseNode = n.getFirstChild().getNext();\n    while (caseNode != null) {\n      if (apply(caseNode.getFirstChild().getNext())) {\n        return true;\n      }\n      caseNode = caseNode.getNext();\n    }\n  } else if (n.isName() && n.getString().equals(dependency)) {\n    // Do not traverse the parent nodes if we have found a reference to\n    // the dependent variable.\n    return false;\n  }\n\n  // Traverse other relevant branches of the current node.\n  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    if (apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..06e49be3 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,60 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+public boolean apply(Node n) {\n+  if (n == null) {\n+    return false;\n+  }\n+\n+  // TODO(user): We only care about calls to functions that\n+  // passes one of the dependent variable to a non-side-effect free\n+  // function.\n+  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n+    return true;\n+  }\n+\n+  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+    return true;\n+  }\n+\n+  // Check for delete operation that can remove properties off an object.\n+  if (n.isDelProp()) {\n+    return true;\n+  }\n+\n+  // Traverse only the relevant branches that can satisfy the specified criteria.\n+  if (n.isIf()) {\n+    Node condition = n.getFirstChild();\n+    if (apply(condition.getNext())) {\n+      return true;\n+    }\n+    return apply(condition.getNext().getNext());\n+  } else if (n.isHook()) {\n+    return apply(n.getFirstChild().getNext()) || apply(n.getFirstChild().getNext().getNext());\n+  } else if (n.isAssign()) {\n+    return apply(n.getLastChild());\n+  } else if (n.isSwitch()) {\n+    Node caseNode = n.getFirstChild().getNext();\n+    while (caseNode != null) {\n+      if (apply(caseNode.getFirstChild().getNext())) {\n+        return true;\n+      }\n+      caseNode = caseNode.getNext();\n+    }\n+  } else if (n.isName() && n.getString().equals(dependency)) {\n+    // Do not traverse the parent nodes if we have found a reference to\n+    // the dependent variable.\n+    return false;\n+  }\n+\n+  // Traverse other relevant branches of the current node.\n+  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+    if (apply(c)) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}