{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // Positive offset change implies a gap in spring\n    // which clocks in local time move forward\n    if (offsetLocal > offsetAdjusted) {\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n        if (prevLocal != prevAdjusted) {\n            return offsetLocal;\n        } else {\n            int beforeDiff = offsetLocal - getOffset(prevLocal + 1);\n            int afterDiff = getOffset(prevAdjusted + 1) - offsetAdjusted;\n            if (beforeDiff > afterDiff) {\n                return offsetLocal;\n            }\n        }\n    } else {\n        // Negative offset change implies an overlap in autumn\n        // which clocks in local time move backward\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            int beforeDiff = getOffset(nextLocal - 1) - offsetLocal;\n            int afterDiff = offsetAdjusted - getOffset(nextAdjusted - 1);\n            if (beforeDiff >= afterDiff) {\n                return offsetLocal;\n            }\n        } else {\n            long prevLocal = previousTransition(instantAdjusted);\n            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n            int beforeDiff = offsetLocal - getOffset(prevLocal + 1);\n            int afterDiff = getOffset(prevAdjusted + 1) - offsetAdjusted;\n            if (beforeDiff > afterDiff) {\n                return offsetLocal;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..c2958ec6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,43 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // Positive offset change implies a gap in spring\n+    // which clocks in local time move forward\n+    if (offsetLocal > offsetAdjusted) {\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+        if (prevLocal != prevAdjusted) {\n+            return offsetLocal;\n+        } else {\n+            int beforeDiff = offsetLocal - getOffset(prevLocal + 1);\n+            int afterDiff = getOffset(prevAdjusted + 1) - offsetAdjusted;\n+            if (beforeDiff > afterDiff) {\n+                return offsetLocal;\n+            }\n+        }\n+    } else {\n+        // Negative offset change implies an overlap in autumn\n+        // which clocks in local time move backward\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            int beforeDiff = getOffset(nextLocal - 1) - offsetLocal;\n+            int afterDiff = offsetAdjusted - getOffset(nextAdjusted - 1);\n+            if (beforeDiff >= afterDiff) {\n+                return offsetLocal;\n+            }\n+        } else {\n+            long prevLocal = previousTransition(instantAdjusted);\n+            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+            int beforeDiff = offsetLocal - getOffset(prevLocal + 1);\n+            int afterDiff = getOffset(prevAdjusted + 1) - offsetAdjusted;\n+            if (beforeDiff > afterDiff) {\n+                return offsetLocal;\n+            }\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}