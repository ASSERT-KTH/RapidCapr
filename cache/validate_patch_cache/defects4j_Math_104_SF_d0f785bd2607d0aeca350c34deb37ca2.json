{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x)) {\n        return Double.NaN;\n    }\n\n    if ((a <= 0.0) || (x < 0.0)) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n\n    double r = a;\n    double c = 1.0;\n    double ans = 1.0;\n\n    while (true) {\n        double nextTerm = c * x / (r + 1.0);\n        ans += nextTerm;\n        if (Math.abs(nextTerm / ans) < 1.0E-15) {\n            break;\n        }\n        r += 1.0;\n        c = nextTerm / (r - a);\n    }\n\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * ans;\n}\n\npublic static double regularizedGammaQ(final double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x)) {\n        return Double.NaN;\n    }\n\n    if ((a <= 0.0) || (x < 0.0)) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 1.0;\n    }\n\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n\n    double b0 = 0.0;\n    double b1 = 1.0;\n    double p0 = 1.0;\n    double p1 = x;\n    double q0 = 0.0;\n    double q1 = 1.0;\n    double ans = Double.NaN;\n\n    while (Double.isNaN(ans) || (Math.abs(ans / b1 - 1.0) > 1.0E-15)) {\n        double c = -b0 + (x + a + 1.0) * b1 / (a + 2.0);\n        p0 = b1;\n        b1 = c * b1 - p0;\n        p1 = x * b1 + c * p0;\n        q0 = q1;\n        q1 = c * q1 - p0;\n        ans = p1 / q1;\n        b0 = p0 / q1;\n    }\n\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * ans;\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0) -\n            1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n    return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b00290363 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,85 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+\n+    if ((a <= 0.0) || (x < 0.0)) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+\n+    double r = a;\n+    double c = 1.0;\n+    double ans = 1.0;\n+\n+    while (true) {\n+        double nextTerm = c * x / (r + 1.0);\n+        ans += nextTerm;\n+        if (Math.abs(nextTerm / ans) < 1.0E-15) {\n+            break;\n+        }\n+        r += 1.0;\n+        c = nextTerm / (r - a);\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * ans;\n+}\n+\n+public static double regularizedGammaQ(final double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+\n+    if ((a <= 0.0) || (x < 0.0)) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+\n+    double b0 = 0.0;\n+    double b1 = 1.0;\n+    double p0 = 1.0;\n+    double p1 = x;\n+    double q0 = 0.0;\n+    double q1 = 1.0;\n+    double ans = Double.NaN;\n+\n+    while (Double.isNaN(ans) || (Math.abs(ans / b1 - 1.0) > 1.0E-15)) {\n+        double c = -b0 + (x + a + 1.0) * b1 / (a + 2.0);\n+        p0 = b1;\n+        b1 = c * b1 - p0;\n+        p1 = x * b1 + c * p0;\n+        q0 = q1;\n+        q1 = c * q1 - p0;\n+        ans = p1 / q1;\n+        b0 = p0 / q1;\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * ans;\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0) -\n+            1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n+    return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}