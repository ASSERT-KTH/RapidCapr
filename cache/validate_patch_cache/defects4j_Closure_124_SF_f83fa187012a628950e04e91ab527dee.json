{
    "patch": "private boolean isSafeReplacement(Node node, Node replacement) {\n  if (!node.isGetProp()) {\n    // For simple names, just return true\n    return true;\n  }\n\n  Node current = node;\n  while (current.isGetProp()) {\n    // For each getprop node, if the first child is a name assigned to replacement, it is not safe to replace\n    Node child = current.getFirstChild();\n    if (child.isName() && isNameAssignedTo(child.getString(), replacement)) {\n      return false;\n    }\n    // Otherwise, recursively check the child node\n    if (!isSafeReplacement(child, replacement)) {\n      return false;\n    }\n    current = child;\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..26a94e3c 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,22 +203,29 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n-    if (node.isName()) {\n-      return true;\n-    }\n-    Preconditions.checkArgument(node.isGetProp());\n+private boolean isSafeReplacement(Node node, Node replacement) {\n+  if (!node.isGetProp()) {\n+    // For simple names, just return true\n+    return true;\n+  }\n \n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n+  Node current = node;\n+  while (current.isGetProp()) {\n+    // For each getprop node, if the first child is a name assigned to replacement, it is not safe to replace\n+    Node child = current.getFirstChild();\n+    if (child.isName() && isNameAssignedTo(child.getString(), replacement)) {\n       return false;\n     }\n-\n-    return true;\n+    // Otherwise, recursively check the child node\n+    if (!isSafeReplacement(child, replacement)) {\n+      return false;\n+    }\n+    current = child;\n   }\n \n+  return true;\n+}\n+\n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n    */\n@@ -241,4 +248,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}