{
    "patch": "                SavedField field = savedFields[i];\n                if (millis < 0 && field.getType().equals(DateTimeFieldType.year())) {\n                    // Special handling for negative years\n                    int value = field.getDurationField().getDuration().getFieldType().getField(iChrono).getMaximumValue();\n                    millis = field.set(millis + value, resetFields);\n                } else {\n                    millis = field.set(millis, resetFields);\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..2ba022cb 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,14 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                SavedField field = savedFields[i];\n+                if (millis < 0 && field.getType().equals(DateTimeFieldType.year())) {\n+                    // Special handling for negative years\n+                    int value = field.getDurationField().getDuration().getFieldType().getField(iChrono).getMaximumValue();\n+                    millis = field.set(millis + value, resetFields);\n+                } else {\n+                    millis = field.set(millis, resetFields);\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}