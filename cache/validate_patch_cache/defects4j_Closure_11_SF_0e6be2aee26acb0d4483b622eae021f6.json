{
    "patch": "public String[] getprop(String property) {\n  String[] command = {\"getprop\", property};\n  try {\n    Process p = Runtime.getRuntime().exec(command);\n    InputStream is = p.getInputStream();\n    InputStreamReader isr = new InputStreamReader(is);\n    BufferedReader br = new BufferedReader(isr);\n    String line;\n    List<String> outputList = new ArrayList<String>();\n    while ((line = br.readLine()) != null) {\n      outputList.add(line);\n    }\n    return outputList.toArray(new String[outputList.size()]);\n  } catch (IOException e) {\n    // If an IOException occurs, return an empty array.\n    return new String[0];\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..5b268c79 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String[] getprop(String property) {\n+  String[] command = {\"getprop\", property};\n+  try {\n+    Process p = Runtime.getRuntime().exec(command);\n+    InputStream is = p.getInputStream();\n+    InputStreamReader isr = new InputStreamReader(is);\n+    BufferedReader br = new BufferedReader(isr);\n+    String line;\n+    List<String> outputList = new ArrayList<String>();\n+    while ((line = br.readLine()) != null) {\n+      outputList.add(line);\n+    }\n+    return outputList.toArray(new String[outputList.size()]);\n+  } catch (IOException e) {\n+    // If an IOException occurs, return an empty array.\n+    return new String[0];\n+  }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}