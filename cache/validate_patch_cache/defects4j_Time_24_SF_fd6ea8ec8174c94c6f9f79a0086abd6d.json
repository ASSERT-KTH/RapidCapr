{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n\n    // sort saved fields by largest duration first\n    int order[] = new int[count];\n    for (int i = 0; i < count; i++) {\n        order[i] = i;\n    }\n    int limit = count;\n    while (--limit >= 0) {\n        int previous = -1;\n        for (int i = 0; i < limit; i++) {\n            int ai = order[i];\n            int bi = order[i + 1];\n            if (savedFields[ai].compare(savedFields[bi]) < 0) {\n                order[i] = bi;\n                order[i + 1] = ai;\n                previous = i;\n            }\n        }\n        if (previous == -1) {\n            break;\n        }\n        limit = previous;\n    }\n\n    // determine if any supported field wraps\n    boolean isSupported = true;\n    for (int i = 0; i < count; i++) {\n        if (!savedFields[order[i]].isSupported()) {\n            isSupported = false;\n            break;\n        }\n    }\n    \n    // calculate date or time\n    long millis;\n    if (isSupported) {\n        millis = 0L;\n        try {\n            for (int i = 0; i < count; i++) {\n                int index = order[i];\n                millis = savedFields[index].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n    } else {\n        Chronology chrono = getChronology();\n        millis = chrono.getDateTimeMillis(iYear, iMonthOfYear, iDayOfMonth,\n                iMillisOfDay);\n        for (int i = 0; i < count; i++) {\n            int index = order[i];\n            DurationField field = savedFields[index].getField();\n            millis = field.add(millis, savedFields[index].getValue());\n        }\n    }\n    \n    // update millis for time zone\n    if (iZone != null) {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    } else {\n        millis -= iOffset;\n    }\n    \n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..06148576 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,29 +328,54 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+\n+    // sort saved fields by largest duration first\n+    int order[] = new int[count];\n+    for (int i = 0; i < count; i++) {\n+        order[i] = i;\n+    }\n+    int limit = count;\n+    while (--limit >= 0) {\n+        int previous = -1;\n+        for (int i = 0; i < limit; i++) {\n+            int ai = order[i];\n+            int bi = order[i + 1];\n+            if (savedFields[ai].compare(savedFields[bi]) < 0) {\n+                order[i] = bi;\n+                order[i + 1] = ai;\n+                previous = i;\n             }\n         }\n+        if (previous == -1) {\n+            break;\n+        }\n+        limit = previous;\n+    }\n \n-        long millis = iMillis;\n+    // determine if any supported field wraps\n+    boolean isSupported = true;\n+    for (int i = 0; i < count; i++) {\n+        if (!savedFields[order[i]].isSupported()) {\n+            isSupported = false;\n+            break;\n+        }\n+    }\n+    \n+    // calculate date or time\n+    long millis;\n+    if (isSupported) {\n+        millis = 0L;\n         try {\n             for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n+                int index = order[i];\n+                millis = savedFields[index].set(millis, resetFields);\n             }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n@@ -358,25 +383,36 @@ public class DateTimeParserBucket {\n             }\n             throw e;\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n+    } else {\n+        Chronology chrono = getChronology();\n+        millis = chrono.getDateTimeMillis(iYear, iMonthOfYear, iDayOfMonth,\n+                iMillisOfDay);\n+        for (int i = 0; i < count; i++) {\n+            int index = order[i];\n+            DurationField field = savedFields[index].getField();\n+            millis = field.add(millis, savedFields[index].getValue());\n+        }\n+    }\n+    \n+    // update millis for time zone\n+    if (iZone != null) {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n                     \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n+    } else {\n+        millis -= iOffset;\n     }\n     \n+    return millis;\n+}\n+    \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right\n      * choice since it always creates an internal copy of the array, even if it",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}