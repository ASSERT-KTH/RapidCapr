{
    "patch": "private double calculateAsymptoticPValue(final double Umin, final int n1, final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n    final double mu = ((double) n1 * (double) n2) / 2.0;\n    final double sigma = Math.sqrt((double) n1 * (double) n2 * (n1 + n2 + 1.0) / 12.0);\n\n    if (sigma == 0) {\n        return Double.NaN;\n    }\n\n    final double z = Math.abs((Umin - mu) / sigma);\n    final NormalDistribution standardNormal = new NormalDistribution();\n\n    return 2.0 * (1.0 - standardNormal.cumulativeProbability(z));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\nindex ce694ce8f..f36483436 100644\n--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n@@ -165,23 +165,20 @@ public class MannWhitneyUTest {\n      * @throws MaxCountExceededException if the maximum number of\n      * iterations is exceeded\n      */\n-    private double calculateAsymptoticPValue(final double Umin,\n-                                             final int n1,\n-                                             final int n2)\n+private double calculateAsymptoticPValue(final double Umin, final int n1, final int n2)\n         throws ConvergenceException, MaxCountExceededException {\n+    final double mu = ((double) n1 * (double) n2) / 2.0;\n+    final double sigma = Math.sqrt((double) n1 * (double) n2 * (n1 + n2 + 1.0) / 12.0);\n \n-        final int n1n2prod = n1 * n2;\n-\n-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n-        final double EU = n1n2prod / 2.0;\n-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n-\n-        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n+    if (sigma == 0) {\n+        return Double.NaN;\n+    }\n \n-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n+    final double z = Math.abs((Umin - mu) / sigma);\n+    final NormalDistribution standardNormal = new NormalDistribution();\n \n-        return 2 * standardNormal.cumulativeProbability(z);\n-    }\n+    return 2.0 * (1.0 - standardNormal.cumulativeProbability(z));\n+}\n \n     /**\n      * Returns the asymptotic <i>observed significance level</i>, or <a href=",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}