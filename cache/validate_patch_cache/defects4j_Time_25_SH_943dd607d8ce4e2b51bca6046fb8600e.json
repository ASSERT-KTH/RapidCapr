{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    long nextTransitionInstant = nextTransition(instantAdjusted);\n    long adjNextTransitionInstant = nextTransition(instantLocal - offsetAdjusted);\n    if (adjNextTransitionInstant != nextTransitionInstant) {\n        if (getOffset(nextTransitionInstant - 1) >= getOffset(nextTransitionInstant)) {\n            return getOffset(nextTransitionInstant) + (offsetLocal - getOffset(nextTransitionInstant));\n        }\n        return offsetLocal;\n    } else if (adjNextTransitionInstant == instantLocal) {\n        return offsetAdjusted;\n    } else {\n        long prevTransitionInstant = previousTransition(adjNextTransitionInstant);\n        if (prevTransitionInstant == instantAdjusted) {\n            return offsetAdjusted;\n        } else {\n            int offsetPrev = getOffset(prevTransitionInstant);\n            int offsetBeforePrev;\n            long beforePrevTransitionInstant;\n            if (offsetPrev < offsetAdjusted && prevTransitionInstant > instantAdjusted - DateTimeConstants.MILLIS_PER_HOUR * 3) {\n                beforePrevTransitionInstant = previousTransition(prevTransitionInstant);\n                offsetBeforePrev = getOffset(beforePrevTransitionInstant);\n            } else {\n                offsetBeforePrev = offsetAdjusted;\n                beforePrevTransitionInstant = prevTransitionInstant;\n            }\n            int offsetToUse = offsetAdjusted;\n            if (offsetLocal > offsetAdjusted && adjNextTransitionInstant < instantLocal - DateTimeConstants.MILLIS_PER_HOUR * 12) {\n                offsetToUse = offsetLocal;\n            } else if (offsetAdjusted > offsetBeforePrev && instantAdjusted < beforePrevTransitionInstant + DateTimeConstants.MILLIS_PER_HOUR * 12) {\n                offsetToUse = offsetBeforePrev;\n            }\n            int offsetAfter = getOffset(nextTransitionInstant - 1);\n            if (offsetToUse < offsetAfter) {\n                return offsetToUse;\n            } else if (offsetToUse > offsetAdjusted && adjNextTransitionInstant > instantLocal - DateTimeConstants.MILLIS_PER_HOUR * 24) {\n                if (offsetPrev > offsetAdjusted) {\n                    return offsetPrev;\n                } else {\n                    return offsetAdjusted;\n                }\n            } else {\n                return offsetAdjusted;\n            }\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5c66bbef 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,53 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    long nextTransitionInstant = nextTransition(instantAdjusted);\n+    long adjNextTransitionInstant = nextTransition(instantLocal - offsetAdjusted);\n+    if (adjNextTransitionInstant != nextTransitionInstant) {\n+        if (getOffset(nextTransitionInstant - 1) >= getOffset(nextTransitionInstant)) {\n+            return getOffset(nextTransitionInstant) + (offsetLocal - getOffset(nextTransitionInstant));\n+        }\n+        return offsetLocal;\n+    } else if (adjNextTransitionInstant == instantLocal) {\n+        return offsetAdjusted;\n+    } else {\n+        long prevTransitionInstant = previousTransition(adjNextTransitionInstant);\n+        if (prevTransitionInstant == instantAdjusted) {\n+            return offsetAdjusted;\n+        } else {\n+            int offsetPrev = getOffset(prevTransitionInstant);\n+            int offsetBeforePrev;\n+            long beforePrevTransitionInstant;\n+            if (offsetPrev < offsetAdjusted && prevTransitionInstant > instantAdjusted - DateTimeConstants.MILLIS_PER_HOUR * 3) {\n+                beforePrevTransitionInstant = previousTransition(prevTransitionInstant);\n+                offsetBeforePrev = getOffset(beforePrevTransitionInstant);\n+            } else {\n+                offsetBeforePrev = offsetAdjusted;\n+                beforePrevTransitionInstant = prevTransitionInstant;\n+            }\n+            int offsetToUse = offsetAdjusted;\n+            if (offsetLocal > offsetAdjusted && adjNextTransitionInstant < instantLocal - DateTimeConstants.MILLIS_PER_HOUR * 12) {\n+                offsetToUse = offsetLocal;\n+            } else if (offsetAdjusted > offsetBeforePrev && instantAdjusted < beforePrevTransitionInstant + DateTimeConstants.MILLIS_PER_HOUR * 12) {\n+                offsetToUse = offsetBeforePrev;\n+            }\n+            int offsetAfter = getOffset(nextTransitionInstant - 1);\n+            if (offsetToUse < offsetAfter) {\n+                return offsetToUse;\n+            } else if (offsetToUse > offsetAdjusted && adjNextTransitionInstant > instantLocal - DateTimeConstants.MILLIS_PER_HOUR * 24) {\n+                if (offsetPrev > offsetAdjusted) {\n+                    return offsetPrev;\n+                } else {\n+                    return offsetAdjusted;\n+                }\n+            } else {\n+                return offsetAdjusted;\n+            }\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}