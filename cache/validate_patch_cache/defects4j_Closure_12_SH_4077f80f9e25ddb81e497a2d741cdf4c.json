{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    NodeList<Block> blocks = cfgNode.blocks();\n    for (Block block : blocks) {\n        for (Node blockNode : block.getNodes()) {\n            if (blockNode instanceof FunctionCall) {\n                FunctionCall functionCall = (FunctionCall) blockNode;\n                if (functionCall.getTarget().isIdentifier()) {\n                    String functionName = ((Identifier) functionCall.getTarget()).getName();\n                    if (functionName.startsWith(\"_\")) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..14fd7822 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,23 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    NodeList<Block> blocks = cfgNode.blocks();\n+    for (Block block : blocks) {\n+        for (Node blockNode : block.getNodes()) {\n+            if (blockNode instanceof FunctionCall) {\n+                FunctionCall functionCall = (FunctionCall) blockNode;\n+                if (functionCall.getTarget().isIdentifier()) {\n+                    String functionName = ((Identifier) functionCall.getTarget()).getName();\n+                    if (functionName.startsWith(\"_\")) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}