{
    "patch": "public static String unescape(String str) {\n    Matcher matcher = Pattern.compile(\"\\\\\\\\([\\\\\\\\\\\"'tnr]|u[0-9a-fA-F]{4})\").matcher(str);\n    StringBuffer sb = new StringBuffer();\n    boolean success = true;\n    while (matcher.find()) {\n        String code = matcher.group(1);\n        switch (code.charAt(0)) {\n            case 'u':\n                char ch = (char) Integer.parseInt(code.substring(1), 16);\n                matcher.appendReplacement(sb, \"\");\n                sb.append(ch);\n                break;\n            case '\\\\':\n                matcher.appendReplacement(sb, \"\\\\\\\\\");\n                break;\n            case '\\\"':\n                matcher.appendReplacement(sb, \"\\\"\");\n                break;\n            case '\\'':\n                matcher.appendReplacement(sb, \"\\'\");\n                break;\n            case 't':\n                matcher.appendReplacement(sb, \"\\t\");\n                break;\n            case 'n':\n                matcher.appendReplacement(sb, \"\\n\");\n                break;\n            case 'r':\n                matcher.appendReplacement(sb, \"\\r\");\n                break;\n            default:\n                success = false;\n                break;\n        }\n    }\n    matcher.appendTail(sb);\n    if (!success) {\n        throw new IllegalArgumentException(\"Invalid escape sequence in input\");\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..44abad72 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,47 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String str) {\n+    Matcher matcher = Pattern.compile(\"\\\\\\\\([\\\\\\\\\\\"'tnr]|u[0-9a-fA-F]{4})\").matcher(str);\n+    StringBuffer sb = new StringBuffer();\n+    boolean success = true;\n+    while (matcher.find()) {\n+        String code = matcher.group(1);\n+        switch (code.charAt(0)) {\n+            case 'u':\n+                char ch = (char) Integer.parseInt(code.substring(1), 16);\n+                matcher.appendReplacement(sb, \"\");\n+                sb.append(ch);\n+                break;\n+            case '\\\\':\n+                matcher.appendReplacement(sb, \"\\\\\\\\\");\n+                break;\n+            case '\\\"':\n+                matcher.appendReplacement(sb, \"\\\"\");\n+                break;\n+            case '\\'':\n+                matcher.appendReplacement(sb, \"\\'\");\n+                break;\n+            case 't':\n+                matcher.appendReplacement(sb, \"\\t\");\n+                break;\n+            case 'n':\n+                matcher.appendReplacement(sb, \"\\n\");\n+                break;\n+            case 'r':\n+                matcher.appendReplacement(sb, \"\\r\");\n+                break;\n+            default:\n+                success = false;\n+                break;\n+        }\n+    }\n+    matcher.appendTail(sb);\n+    if (!success) {\n+        throw new IllegalArgumentException(\"Invalid escape sequence in input\");\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}