{
    "patch": "        // check for small degrees of freedom\n        if (d < 2.0) {\n            double dp1 = d + 1.0;\n            double t = FastMath.tan(p * FastMath.PI / 2.0);\n            ret = t * FastMath.sqrt(dp1) - dp1;\n        } else {\n            // use mean\n            ret = d / (d - 2.0);\n        }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97aef..dd80995bb 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -140,13 +140,15 @@ public class FDistributionImpl\n      * @param p the desired probability for the critical value\n      * @return initial domain value\n      */\n-    protected double getInitialDomain(double p) {\n-        double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+        // check for small degrees of freedom\n+        if (d < 2.0) {\n+            double dp1 = d + 1.0;\n+            double t = FastMath.tan(p * FastMath.PI / 2.0);\n+            ret = t * FastMath.sqrt(dp1) - dp1;\n+        } else {\n             // use mean\n             ret = d / (d - 2.0);\n-        return ret;\n-    }\n+        }\n     \n     /**\n      * Modify the numerator degrees of freedom.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}