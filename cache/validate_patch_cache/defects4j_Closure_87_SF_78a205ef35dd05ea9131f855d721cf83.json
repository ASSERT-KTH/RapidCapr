{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node child = n.getFirstChild();\n        Node parent = n.getParent();\n        \n        if (child.getType() == Token.IF) {\n            // cannot fold an if statement\n            return false;\n        }\n\n        // cannot fold functions or calls to functions\n        if (NodeUtil.isFunction(child) || NodeUtil.isCallToFunction(child)) {\n            return false;\n        }\n\n        // cannot fold member expressions or calls to member expressions\n        if (NodeUtil.isGet(child) || NodeUtil.isCallToGet(child)) {\n            return false;\n        }\n\n        // cannot fold strings, nested EXPR_RESULTs, or EXPR_RESULTs with an if statement parent\n        if (child.getType() == Token.STRING || \n            (parent != null && parent.getType() == Token.EXPR_RESULT \n                             && (parent.getParent().getType() == Token.EXPR_RESULT || parent.getParent().getType() == Token.IF))) {\n            return false;\n        }\n\n        // cannot fold hooks or short-circuit operators\n        if (child.getType() == Token.HOOK || child.getType() == Token.AND || child.getType() == Token.OR) {\n            return false;\n        }\n\n        // cannot fold assignments or looping constructs\n        if (NodeUtil.isLoopStructure(child) || child.getType() == Token.ASSIGN) {\n            return false;\n        }\n\n        // cannot fold a node with side effects\n        return !NodeUtil.mayHaveSideEffects(child);\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..407e73b1 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,48 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+        Node child = n.getFirstChild();\n+        Node parent = n.getParent();\n+        \n+        if (child.getType() == Token.IF) {\n+            // cannot fold an if statement\n+            return false;\n+        }\n+\n+        // cannot fold functions or calls to functions\n+        if (NodeUtil.isFunction(child) || NodeUtil.isCallToFunction(child)) {\n+            return false;\n+        }\n+\n+        // cannot fold member expressions or calls to member expressions\n+        if (NodeUtil.isGet(child) || NodeUtil.isCallToGet(child)) {\n+            return false;\n+        }\n \n+        // cannot fold strings, nested EXPR_RESULTs, or EXPR_RESULTs with an if statement parent\n+        if (child.getType() == Token.STRING || \n+            (parent != null && parent.getType() == Token.EXPR_RESULT \n+                             && (parent.getParent().getType() == Token.EXPR_RESULT || parent.getParent().getType() == Token.IF))) {\n+            return false;\n+        }\n+\n+        // cannot fold hooks or short-circuit operators\n+        if (child.getType() == Token.HOOK || child.getType() == Token.AND || child.getType() == Token.OR) {\n+            return false;\n+        }\n+\n+        // cannot fold assignments or looping constructs\n+        if (NodeUtil.isLoopStructure(child) || child.getType() == Token.ASSIGN) {\n+            return false;\n+        }\n+\n+        // cannot fold a node with side effects\n+        return !NodeUtil.mayHaveSideEffects(child);\n+    }\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}