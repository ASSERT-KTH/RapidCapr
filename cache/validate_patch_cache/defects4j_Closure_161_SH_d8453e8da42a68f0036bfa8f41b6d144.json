{
    "patch": "    if (left.getType() != Token.ARRAYLIT) {\n      return n;\n    }\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    Node[] elems = new Node[left.getChildCount()];\n    for (int i = 0; i < left.getChildCount(); i++) {\n      elems[i] = left.getChildAtIndex(i);\n    }\n\n    if (intIndex < 0 || intIndex >= elems.length) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = elems[intIndex];",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..6e56487a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,34 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (left.getType() != Token.ARRAYLIT) {\n+      return n;\n+    }\n+\n+    if (right.getType() != Token.NUMBER) {\n+      // Sometimes people like to use complex expressions to index into\n+      // arrays, or strings to index into array methods.\n+      return n;\n+    }\n+\n+    double index = right.getDouble();\n+    int intIndex = (int) index;\n+    if (intIndex != index) {\n+      error(INVALID_GETELEM_INDEX_ERROR, right);\n+      return n;\n+    }\n+\n+    Node[] elems = new Node[left.getChildCount()];\n+    for (int i = 0; i < left.getChildCount(); i++) {\n+      elems[i] = left.getChildAtIndex(i);\n+    }\n+\n+    if (intIndex < 0 || intIndex >= elems.length) {\n+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+      return n;\n+    }\n+\n+    Node elem = elems[intIndex];\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: variable index is already defined in method tryFoldArrayAccess(Node,Node,Node)",
    "test_result": "ERROR"
}