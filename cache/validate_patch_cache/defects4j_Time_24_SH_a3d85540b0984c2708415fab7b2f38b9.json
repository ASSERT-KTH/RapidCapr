{
    "patch": "                try {\n                    millis = savedFields[i].set(millis, resetFields);\n                } catch (IllegalFieldValueException e) {\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                    }\n                    throw e;\n                }\n                if (millis < iMillis) {\n                    throw new IllegalFieldValueException(\n                        savedFields[i].iField.getType(),\n                        \"The parsed date '\" + this + \"' cannot be represented\" +\n                        \" as instant \" + millis +\n                        \", as it is before the instant representing\" +\n                        \" this minumum/maximum value of this type\");\n                }\n                if (millis > iMaxMillis) {\n                    throw new IllegalFieldValueException(\n                        savedFields[i].iField.getType(),\n                        \"The parsed date '\" + this + \"' cannot be represented\" +\n                        \" as instant \" + millis +\n                        \", as it is after the instant representing\" +\n                        \" this minumum/maximum value of this type\");",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e600d63f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,29 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                try {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } catch (IllegalFieldValueException e) {\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                    }\n+                    throw e;\n+                }\n+                if (millis < iMillis) {\n+                    throw new IllegalFieldValueException(\n+                        savedFields[i].iField.getType(),\n+                        \"The parsed date '\" + this + \"' cannot be represented\" +\n+                        \" as instant \" + millis +\n+                        \", as it is before the instant representing\" +\n+                        \" this minumum/maximum value of this type\");\n+                }\n+                if (millis > iMaxMillis) {\n+                    throw new IllegalFieldValueException(\n+                        savedFields[i].iField.getType(),\n+                        \"The parsed date '\" + this + \"' cannot be represented\" +\n+                        \" as instant \" + millis +\n+                        \", as it is after the instant representing\" +\n+                        \" this minumum/maximum value of this type\");\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}