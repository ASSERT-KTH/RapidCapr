{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n                //handle DST overlap\n                int hoursDiff = getStandardOffset(nextLocal) - getOffset(nextLocal);\n                if(hoursDiff == 1) {\n                    long nextLocalWall = nextTransition(nextLocal + DateTimeConstants.MILLIS_PER_HOUR);\n                    if(nextLocalWall != nextLocal) {\n                        return offsetLocal + 1;\n                    }\n                } else if (hoursDiff == -1) {\n                    long nextLocalWall = previousTransition(nextLocal + DateTimeConstants.MILLIS_PER_HOUR);\n                    if(nextLocalWall != nextLocal) {\n                        return offsetLocal;\n                    }\n                }\n            } else {\n                long nextLocal = previousTransition(instantAdjusted);\n                long nextAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3acbc267 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,32 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                //handle DST overlap\n+                int hoursDiff = getStandardOffset(nextLocal) - getOffset(nextLocal);\n+                if(hoursDiff == 1) {\n+                    long nextLocalWall = nextTransition(nextLocal + DateTimeConstants.MILLIS_PER_HOUR);\n+                    if(nextLocalWall != nextLocal) {\n+                        return offsetLocal + 1;\n+                    }\n+                } else if (hoursDiff == -1) {\n+                    long nextLocalWall = previousTransition(nextLocal + DateTimeConstants.MILLIS_PER_HOUR);\n+                    if(nextLocalWall != nextLocal) {\n+                        return offsetLocal;\n+                    }\n+                }\n+            } else {\n+                long nextLocal = previousTransition(instantAdjusted);\n+                long nextAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}