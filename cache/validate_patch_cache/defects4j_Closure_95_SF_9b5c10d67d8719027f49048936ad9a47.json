{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  boolean shouldDeclareOnGlobalThis = false;\n  boolean isSimpleName = false;\n\n  if (n.getType() == Token.NAME) {\n    Preconditions.checkArgument(parent != null);\n\n    String variableName = n.getString();\n    Preconditions.checkArgument(!variableName.isEmpty());\n\n    isSimpleName = true;\n\n    int parentType = parent.getType();\n    if (parentType == Token.FUNCTION) {\n      // Function declaration\n      shouldDeclareOnGlobalThis = scope.isGlobal();\n      if (parent.getFirstChild() == n) {\n        // Name node is the function name\n        scope.declare(variableName, n, type, compiler.getInput(sourceName), !inferred);\n      } else {\n        // Name node is a function parameter or inferred variable\n        scope.declare(variableName, n, type, compiler.getInput(sourceName), inferred);\n      }\n    } else if (parentType == Token.VAR) {\n      // Variable declaration\n      shouldDeclareOnGlobalThis = scope.isGlobal();\n      scope.declare(variableName, n, type, compiler.getInput(sourceName), true);\n    } else if (parentType == Token.LP || parentType == Token.CATCH) {\n      // Function parameter or catch variable\n      scope.declare(variableName, n, type, compiler.getInput(sourceName), true);\n    } else {\n      throw new IllegalArgumentException(\"Invalid parent node: \" + parent.toStringTree());\n    }\n  } else if (n.getType() == Token.GETPROP) {\n    // Qualified name\n    Preconditions.checkNotNull(parent);\n    Preconditions.checkArgument(parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT);\n\n    String variableName = n.getLastChild().getString();\n    Preconditions.checkArgument(!variableName.isEmpty());\n\n    shouldDeclareOnGlobalThis = scope.isGlobal();\n    scope.declare(variableName, n, type, compiler.getInput(sourceName), true);\n  } else {\n    throw new IllegalArgumentException(\"Invalid node type: \" + n.toStringTree());\n  }\n\n  if (shouldDeclareOnGlobalThis) {\n    ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n    CompilerInput input = compiler.getInput(sourceName);\n    boolean isExtern = input.isExtern();\n    if (isSimpleName) {\n      String variableName = n.getString();\n      if (inferred) {\n        globalThis.defineInferredProperty(variableName,\n            type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n            isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    } else {\n      String variableName = n.getLastChild().getString();\n      String propertyPath = n.getFirstChild().getQualifiedName();\n      if (inferred) {\n        globalThis.defineInferredProperty(variableName,\n            type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n            propertyPath, isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, propertyPath, isExtern);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..81bed3f2 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,79 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  boolean shouldDeclareOnGlobalThis = false;\n+  boolean isSimpleName = false;\n+\n+  if (n.getType() == Token.NAME) {\n+    Preconditions.checkArgument(parent != null);\n+\n+    String variableName = n.getString();\n+    Preconditions.checkArgument(!variableName.isEmpty());\n+\n+    isSimpleName = true;\n+\n+    int parentType = parent.getType();\n+    if (parentType == Token.FUNCTION) {\n+      // Function declaration\n+      shouldDeclareOnGlobalThis = scope.isGlobal();\n+      if (parent.getFirstChild() == n) {\n+        // Name node is the function name\n+        scope.declare(variableName, n, type, compiler.getInput(sourceName), !inferred);\n       } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+        // Name node is a function parameter or inferred variable\n+        scope.declare(variableName, n, type, compiler.getInput(sourceName), inferred);\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n+    } else if (parentType == Token.VAR) {\n+      // Variable declaration\n+      shouldDeclareOnGlobalThis = scope.isGlobal();\n+      scope.declare(variableName, n, type, compiler.getInput(sourceName), true);\n+    } else if (parentType == Token.LP || parentType == Token.CATCH) {\n+      // Function parameter or catch variable\n+      scope.declare(variableName, n, type, compiler.getInput(sourceName), true);\n+    } else {\n+      throw new IllegalArgumentException(\"Invalid parent node: \" + parent.toStringTree());\n+    }\n+  } else if (n.getType() == Token.GETPROP) {\n+    // Qualified name\n+    Preconditions.checkNotNull(parent);\n+    Preconditions.checkArgument(parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT);\n+\n+    String variableName = n.getLastChild().getString();\n+    Preconditions.checkArgument(!variableName.isEmpty());\n+\n+    shouldDeclareOnGlobalThis = scope.isGlobal();\n+    scope.declare(variableName, n, type, compiler.getInput(sourceName), true);\n+  } else {\n+    throw new IllegalArgumentException(\"Invalid node type: \" + n.toStringTree());\n+  }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n+  if (shouldDeclareOnGlobalThis) {\n+    ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+    CompilerInput input = compiler.getInput(sourceName);\n+    boolean isExtern = input.isExtern();\n+    if (isSimpleName) {\n+      String variableName = n.getString();\n+      if (inferred) {\n+        globalThis.defineInferredProperty(variableName,\n+            type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n+            isExtern);\n+      } else {\n+        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n+      }\n+    } else {\n+      String variableName = n.getLastChild().getString();\n+      String propertyPath = n.getFirstChild().getQualifiedName();\n+      if (inferred) {\n+        globalThis.defineInferredProperty(variableName,\n+            type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n+            propertyPath, isExtern);\n+      } else {\n+        globalThis.defineDeclaredProperty(variableName, type, propertyPath, isExtern);\n       }\n     }\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: method defineInferredProperty in class ObjectType cannot be applied to given types;",
    "test_result": "ERROR"
}