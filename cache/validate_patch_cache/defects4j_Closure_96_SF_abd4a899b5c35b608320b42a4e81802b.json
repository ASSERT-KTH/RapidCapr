{
    "patch": "private void visitParameterList(\n        NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    int ordinal = 0;\n    Node parameter;\n    Node argument;\n\n    while (parameters.hasNext()) {\n        parameter = parameters.next();\n        if (arguments.hasNext()) {\n            argument = arguments.next();\n            ordinal++;\n            validator.expectArgumentMatchesParameter(t, argument,\n                getJSType(argument), getJSType(parameter), call, ordinal);\n        } else {\n            if (!parameter.isOptional()) {\n                // too few arguments\n                reportWrongArgumentCount(t, call, functionType, numArgs);\n                return;\n            }\n        }\n    }\n\n    if (arguments.hasNext()) {\n        // too many arguments\n        reportWrongArgumentCount(t, call, functionType, numArgs);\n        return;\n    }\n\n    // correct number of arguments\n    return;\n}\n\nprivate void reportWrongArgumentCount(\n        NodeTraversal t, Node call, FunctionType functionType, int numArgs) {\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    String functionName = validator.getReadableJSTypeName(call.getFirstChild(), false);\n    String errorMsg = \"Function \" + functionName + \"[\";\n    if (numArgs == 1) {\n        errorMsg += \" is called with \" + numArgs + \" argument(s).\";\n    } else {\n        errorMsg += \" is called with \" + numArgs + \" argument(s).\";\n    }\n    if (minArgs == maxArgs) {\n        if (minArgs == 1) {\n            errorMsg += \" Function requires \" + minArgs + \" argument.\";\n        } else {\n            errorMsg += \" Function requires \" + minArgs + \" arguments.\";\n        }\n    } else {\n        if (maxArgs == Integer.MAX_VALUE) {\n            errorMsg += \" Function requires at least \" + minArgs + \" argument(s).\";\n        } else {\n            if (minArgs == 0) {\n                errorMsg += \" Function requires no more than \" + maxArgs + \" argument(s).\";\n            } else {\n                errorMsg += \" Function requires at least \" + minArgs +\n                        \" and no more than \" + maxArgs + \" argument(s).\";\n            }\n        }\n    }\n    if (numArgs < minArgs) {\n        int numMissingArgs = minArgs - numArgs;\n        if (numMissingArgs == 1) {\n            errorMsg += \" \" + numMissingArgs + \" argument is missing.\";\n        } else {\n            errorMsg += \" \" + numMissingArgs + \" arguments are missing.\";\n        }\n    } else if (numArgs > maxArgs) {\n        int numExtraArgs = numArgs - maxArgs;\n        if (numExtraArgs == 1) {\n            errorMsg += \" \" + numExtraArgs + \" argument is too many.\";\n        } else {\n            errorMsg += \" \" + numExtraArgs + \" arguments are too many.\";\n        }\n    }\n    errorMsg += \"]\";\n    report(t, call, WRONG_ARGUMENT_COUNT, errorMsg);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..52083494 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,92 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(\n+        NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n+    int numArgs = call.getChildCount() - 1;\n+    int minArgs = functionType.getMinArguments();\n+    int maxArgs = functionType.getMaxArguments();\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    Node parameter;\n+    Node argument;\n+\n+    while (parameters.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+        if (arguments.hasNext()) {\n+            argument = arguments.next();\n+            ordinal++;\n+            validator.expectArgumentMatchesParameter(t, argument,\n+                getJSType(argument), getJSType(parameter), call, ordinal);\n+        } else {\n+            if (!parameter.isOptional()) {\n+                // too few arguments\n+                reportWrongArgumentCount(t, call, functionType, numArgs);\n+                return;\n+            }\n+        }\n+    }\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    if (arguments.hasNext()) {\n+        // too many arguments\n+        reportWrongArgumentCount(t, call, functionType, numArgs);\n+        return;\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n+    // correct number of arguments\n+    return;\n+}\n+\n+private void reportWrongArgumentCount(\n+        NodeTraversal t, Node call, FunctionType functionType, int numArgs) {\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    String functionName = validator.getReadableJSTypeName(call.getFirstChild(), false);\n+    String errorMsg = \"Function \" + functionName + \"[\";\n+    if (numArgs == 1) {\n+        errorMsg += \" is called with \" + numArgs + \" argument(s).\";\n+    } else {\n+        errorMsg += \" is called with \" + numArgs + \" argument(s).\";\n     }\n-  }\n+    if (minArgs == maxArgs) {\n+        if (minArgs == 1) {\n+            errorMsg += \" Function requires \" + minArgs + \" argument.\";\n+        } else {\n+            errorMsg += \" Function requires \" + minArgs + \" arguments.\";\n+        }\n+    } else {\n+        if (maxArgs == Integer.MAX_VALUE) {\n+            errorMsg += \" Function requires at least \" + minArgs + \" argument(s).\";\n+        } else {\n+            if (minArgs == 0) {\n+                errorMsg += \" Function requires no more than \" + maxArgs + \" argument(s).\";\n+            } else {\n+                errorMsg += \" Function requires at least \" + minArgs +\n+                        \" and no more than \" + maxArgs + \" argument(s).\";\n+            }\n+        }\n+    }\n+    if (numArgs < minArgs) {\n+        int numMissingArgs = minArgs - numArgs;\n+        if (numMissingArgs == 1) {\n+            errorMsg += \" \" + numMissingArgs + \" argument is missing.\";\n+        } else {\n+            errorMsg += \" \" + numMissingArgs + \" arguments are missing.\";\n+        }\n+    } else if (numArgs > maxArgs) {\n+        int numExtraArgs = numArgs - maxArgs;\n+        if (numExtraArgs == 1) {\n+            errorMsg += \" \" + numExtraArgs + \" argument is too many.\";\n+        } else {\n+            errorMsg += \" \" + numExtraArgs + \" arguments are too many.\";\n+        }\n+    }\n+    errorMsg += \"]\";\n+    report(t, call, WRONG_ARGUMENT_COUNT, errorMsg);\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}