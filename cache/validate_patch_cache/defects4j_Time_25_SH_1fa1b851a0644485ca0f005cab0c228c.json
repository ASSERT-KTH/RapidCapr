{
    "patch": "        if (offsetLocal != offsetAdjusted) {\n            long nextTransitionInstant;\n            boolean forwardTransition = false;\n\n            if (offsetLocal < offsetAdjusted) {\n                nextTransitionInstant = nextTransition(instantAdjusted);\n                forwardTransition = true;\n            } else {\n                nextTransitionInstant = previousTransition(instantAdjusted);\n            }\n\n            if (nextTransitionInstant == instantLocal || (forwardTransition && nextTransitionInstant == instantLocal - offsetLocal)) {\n                // We're exactly on a DST boundary, return the later offset\n                return offsetAdjusted;\n            } else if (nextTransitionInstant > instantLocal && nextTransitionInstant <= instantAdjusted + DateTimeConstants.MILLIS_PER_HOUR) {\n                // We're too close to a DST boundary, revert to less precise approach\n                int offsetBefore = getOffset(instantAdjusted - 1);\n                int offsetAfter = getOffset(instantAdjusted + 1);\n\n                if (offsetBefore == offsetAfter) {\n                    return offsetBefore;\n                } else if (forwardTransition) {\n                    return offsetAfter;\n                } else {\n                    return offsetBefore;\n                }\n            }\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..543a98d5 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,35 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        if (offsetLocal != offsetAdjusted) {\n+            long nextTransitionInstant;\n+            boolean forwardTransition = false;\n+\n+            if (offsetLocal < offsetAdjusted) {\n+                nextTransitionInstant = nextTransition(instantAdjusted);\n+                forwardTransition = true;\n+            } else {\n+                nextTransitionInstant = previousTransition(instantAdjusted);\n+            }\n+\n+            if (nextTransitionInstant == instantLocal || (forwardTransition && nextTransitionInstant == instantLocal - offsetLocal)) {\n+                // We're exactly on a DST boundary, return the later offset\n+                return offsetAdjusted;\n+            } else if (nextTransitionInstant > instantLocal && nextTransitionInstant <= instantAdjusted + DateTimeConstants.MILLIS_PER_HOUR) {\n+                // We're too close to a DST boundary, revert to less precise approach\n+                int offsetBefore = getOffset(instantAdjusted - 1);\n+                int offsetAfter = getOffset(instantAdjusted + 1);\n+\n+                if (offsetBefore == offsetAfter) {\n+                    return offsetBefore;\n+                } else if (forwardTransition) {\n+                    return offsetAfter;\n+                } else {\n+                    return offsetBefore;\n+                }\n+            }\n+        }\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-11-04T01:00:00.000-05:00 expected:<2007-11-04T0[2]:00:00.000-05:00> but was:<2007-11-04T0[1]:00:00.000-05:00>",
    "test_result": "FAIL"
}