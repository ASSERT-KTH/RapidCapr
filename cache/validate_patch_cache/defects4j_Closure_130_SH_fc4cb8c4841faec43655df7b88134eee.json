{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets == 0 && name.getDeclaration().isFunction()) {\n        // {@code name} meets condition (a).\n        FunctionType ownerFunction = name.getTopQualifiedName().getLeft().getFunctionScope();\n        if (ownerFunction == null || !ownerFunction.isCrossModuleExport()) {\n          inlineFunctionAliasIfPossible(name, namespace);\n        }\n      } else if (name.globalSets == 1 && name.localSets == 0 &&\n                 name.type == Name.Type.UNDEFINED &&\n                 name.inExterns()) {\n        inlineConstantAliasIfPossible(name, namespace);\n      } else if (name.isVar() && name.aliasingGets == 0) {\n        // {@code name} meets condition (b).\n        if (inlineVariableAliasIfPossible(name, namespace)) {\n          // Inline succeeded, start over with the worklist since locals\n          // may have changed.\n          workList.clear();\n          workList.addAll(namespace.getNameForest());\n        }\n      } else if (name.globalSets == 1 &&\n                 name.localSets == 0 &&\n                 name.aliasingGets > 0) {\n        // {@code name} meets condition (c).\n        inlineAliasingGetIfPossible(name, namespace);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..e4ad7fb6 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -170,6 +170,30 @@ class CollapseProperties implements CompilerPass {\n       }\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets == 0 && name.getDeclaration().isFunction()) {\n+        // {@code name} meets condition (a).\n+        FunctionType ownerFunction = name.getTopQualifiedName().getLeft().getFunctionScope();\n+        if (ownerFunction == null || !ownerFunction.isCrossModuleExport()) {\n+          inlineFunctionAliasIfPossible(name, namespace);\n+        }\n+      } else if (name.globalSets == 1 && name.localSets == 0 &&\n+                 name.type == Name.Type.UNDEFINED &&\n+                 name.inExterns()) {\n+        inlineConstantAliasIfPossible(name, namespace);\n+      } else if (name.isVar() && name.aliasingGets == 0) {\n+        // {@code name} meets condition (b).\n+        if (inlineVariableAliasIfPossible(name, namespace)) {\n+          // Inline succeeded, start over with the worklist since locals\n+          // may have changed.\n+          workList.clear();\n+          workList.addAll(namespace.getNameForest());\n+        }\n+      } else if (name.globalSets == 1 &&\n+                 name.localSets == 0 &&\n+                 name.aliasingGets > 0) {\n+        // {@code name} meets condition (c).\n+        inlineAliasingGetIfPossible(name, namespace);\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}