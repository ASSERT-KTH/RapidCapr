{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        try {\n            return dec.getSquareRoot();\n        } catch (OutOfMemoryError e) {\n            System.gc();\n            System.runFinalization();\n            final long heapSize = Runtime.getRuntime().maxMemory();\n            if (heapSize == Long.MAX_VALUE) {\n                throw e;\n            }\n            final long newHeapSize = Math.min(heapSize * 2, Long.MAX_VALUE);\n            final String newHeapSizeString = newHeapSize + \"B\";\n            final StringBuilder command = new StringBuilder(\"java -Xmx\").append(newHeapSizeString);\n            for (String jvmArg : ManagementFactory.getRuntimeMXBean().getInputArguments()) {\n                if (!jvmArg.startsWith(\"-Xmx\")) {\n                    command.append(' ').append(jvmArg);\n                }\n            }\n            command.append(' ').append(ManagementFactory.getRuntimeMXBean().getClassPath());\n            command.append(' ').append(ManagementFactory.getRuntimeMXBean().getName());\n            command.append(' ').append(RealMatrix.class.getName()).append(\"getSquareRoot\");\n            final ProcessBuilder pb = new ProcessBuilder(command.toString().split(\"\\\\s+\"));\n            try {\n                final Process process = pb.start();\n                process.waitFor();\n                final StreamGobbler stdout = new StreamGobbler(process.getInputStream(), System.out::println);\n                new Thread(stdout).start();\n                final StreamGobbler stderr = new StreamGobbler(process.getErrorStream(), System.err::println);\n                new Thread(stderr).start();\n            } catch (IOException | InterruptedException ie) {\n                throw new RuntimeException(ie);\n            }\n            return dec.getSquareRoot();\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a102c0ede 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,39 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        try {\n             return dec.getSquareRoot();\n+        } catch (OutOfMemoryError e) {\n+            System.gc();\n+            System.runFinalization();\n+            final long heapSize = Runtime.getRuntime().maxMemory();\n+            if (heapSize == Long.MAX_VALUE) {\n+                throw e;\n+            }\n+            final long newHeapSize = Math.min(heapSize * 2, Long.MAX_VALUE);\n+            final String newHeapSizeString = newHeapSize + \"B\";\n+            final StringBuilder command = new StringBuilder(\"java -Xmx\").append(newHeapSizeString);\n+            for (String jvmArg : ManagementFactory.getRuntimeMXBean().getInputArguments()) {\n+                if (!jvmArg.startsWith(\"-Xmx\")) {\n+                    command.append(' ').append(jvmArg);\n+                }\n+            }\n+            command.append(' ').append(ManagementFactory.getRuntimeMXBean().getClassPath());\n+            command.append(' ').append(ManagementFactory.getRuntimeMXBean().getName());\n+            command.append(' ').append(RealMatrix.class.getName()).append(\"getSquareRoot\");\n+            final ProcessBuilder pb = new ProcessBuilder(command.toString().split(\"\\\\s+\"));\n+            try {\n+                final Process process = pb.start();\n+                process.waitFor();\n+                final StreamGobbler stdout = new StreamGobbler(process.getInputStream(), System.out::println);\n+                new Thread(stdout).start();\n+                final StreamGobbler stderr = new StreamGobbler(process.getErrorStream(), System.err::println);\n+                new Thread(stderr).start();\n+            } catch (IOException | InterruptedException ie) {\n+                throw new RuntimeException(ie);\n+            }\n+            return dec.getSquareRoot();\n+        }\n     }\n }",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}