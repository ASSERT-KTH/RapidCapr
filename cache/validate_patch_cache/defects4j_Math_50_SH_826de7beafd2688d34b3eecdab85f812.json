{
    "patch": "if (FastMath.abs(x - x1) < FastMath.min(rtol * FastMath.abs(x1), atol)) {\n    // If the new approximation is very close to the previous one, we can't make\n    // further progress and an exception is thrown.\n    throw new TooManyEvaluationsException(getMaximalIterationCount());\n}\nif (f1 * fx < 0) {\n    x0 = x1;\n    f0 = f1;\n    inverted = !inverted;\n} else {\n    switch (method) {\n    case ILLINOIS:\n        f0 *= 0.5;\n        break;\n    case PEGASUS:\n        f0 *= f1 / (f1 + fx);\n        break;\n    case REGULA_FALSI:\n        // Nothing.\n        break;\n    default:\n        throw new MathInternalError();\n    }\n}\nif (fx == 0.0) {\n    // The new approximation is the exact root.\n    return x;\n} else if (f1 == 0.0 || FastMath.abs(x1 - x0) < FastMath.min(rtol * FastMath.abs(x1), atol)) {\n    if (FastMath.abs(f1) < FastMath.abs(f0)) {\n        // The new approximation is closer to the right bound.\n        return x1;\n    } else {\n        // Try to continue the search on the left.\n        return solveLeft(x0, x1, f0, f1, inverted, ftol, atol, rtol);\n    }\n} else {\n    x1 = x;\n    f1 = fx;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..71aa85152 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,10 +184,45 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+if (FastMath.abs(x - x1) < FastMath.min(rtol * FastMath.abs(x1), atol)) {\n+    // If the new approximation is very close to the previous one, we can't make\n+    // further progress and an exception is thrown.\n+    throw new TooManyEvaluationsException(getMaximalIterationCount());\n+}\n+if (f1 * fx < 0) {\n+    x0 = x1;\n+    f0 = f1;\n+    inverted = !inverted;\n+} else {\n+    switch (method) {\n+    case ILLINOIS:\n+        f0 *= 0.5;\n+        break;\n+    case PEGASUS:\n+        f0 *= f1 / (f1 + fx);\n+        break;\n+    case REGULA_FALSI:\n+        // Nothing.\n+        break;\n+    default:\n+        throw new MathInternalError();\n+    }\n+}\n+if (fx == 0.0) {\n+    // The new approximation is the exact root.\n+    return x;\n+} else if (f1 == 0.0 || FastMath.abs(x1 - x0) < FastMath.min(rtol * FastMath.abs(x1), atol)) {\n+    if (FastMath.abs(f1) < FastMath.abs(f0)) {\n+        // The new approximation is closer to the right bound.\n+        return x1;\n+    } else {\n+        // Try to continue the search on the left.\n+        return solveLeft(x0, x1, f0, f1, inverted, ftol, atol, rtol);\n+    }\n+} else {\n+    x1 = x;\n+    f1 = fx;\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}