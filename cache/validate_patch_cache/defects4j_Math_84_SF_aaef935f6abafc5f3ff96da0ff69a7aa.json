{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n\tthrows FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n\twhile (true) {\n\n\t\tincrementIterationsCounter();\n\n\t\t// save the original vertex\n\t\tfinal RealPointValuePair[] original = simplex;\n\t\tfinal RealPointValuePair best = original[0];\n\n\t\t// perform a reflection step\n\t\tfinal RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n\t\tif (comparator.compare(reflected, best) < 0) {\n\n\t\t\t// compute the expanded simplex\n\t\t\tfinal RealPointValuePair[] reflectedSimplex = simplex;\n\t\t\tfinal RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n\t\t\tif (comparator.compare(reflected, expanded) <= 0) {\n\t\t\t\t// accept the reflected simplex\n\t\t\t\tsimplex = reflectedSimplex;\n\t\t\t} else {\n\t\t\t\t// accept the expanded simplex\n\t\t\t\tsimplex = expand(reflectedSimplex, gamma, comparator);\n\t\t\t}\n\t\t\treturn;\n\n\t\t}\n\n\t\t// compute the contracted simplex\n\t\tfinal RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n\t\tif (comparator.compare(contracted, best) < 0) {\n\t\t\t// accept the contracted simplex\n\t\t\tsimplex = contracted;\n\t\t} else {\n\t\t\t// perform a shrinking step\n\t\t\tsimplex = shrink(original, comparator);\n\t\t}\n\n\t\t// check convergence\n\t\tfinal boolean isConverged = isConverged(comparator);\n\t\tif (isConverged) {\n\t\t\treturn;\n\t\t}\n\n\t}\n\n}\n\nprivate boolean isConverged(final Comparator<RealPointValuePair> comparator) {\n\tfinal RealPointValuePair best = simplex[0];\n\tfinal RealPointValuePair worst = simplex[simplex.length - 1];\n\tfinal double bestVal = best.getValue();\n\tfinal double worstVal = worst.getValue();\n\tfinal double rtol = getRelativeThreshold();\n\tfinal double atol = getAbsoluteThreshold();\n\tfinal double max = Math.max(Math.abs(worstVal), Math.abs(bestVal));\n\treturn comparator.compare(Math.abs(worstVal - bestVal), atol + rtol * max) < 0;\n}\n",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..c0afbbd69 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,66 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+\tthrows FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+\n+\twhile (true) {\n+\n+\t\tincrementIterationsCounter();\n+\n+\t\t// save the original vertex\n+\t\tfinal RealPointValuePair[] original = simplex;\n+\t\tfinal RealPointValuePair best = original[0];\n+\n+\t\t// perform a reflection step\n+\t\tfinal RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+\t\tif (comparator.compare(reflected, best) < 0) {\n+\n+\t\t\t// compute the expanded simplex\n+\t\t\tfinal RealPointValuePair[] reflectedSimplex = simplex;\n+\t\t\tfinal RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+\t\t\tif (comparator.compare(reflected, expanded) <= 0) {\n+\t\t\t\t// accept the reflected simplex\n+\t\t\t\tsimplex = reflectedSimplex;\n+\t\t\t} else {\n+\t\t\t\t// accept the expanded simplex\n+\t\t\t\tsimplex = expand(reflectedSimplex, gamma, comparator);\n+\t\t\t}\n+\t\t\treturn;\n+\n+\t\t}\n+\n+\t\t// compute the contracted simplex\n+\t\tfinal RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+\t\tif (comparator.compare(contracted, best) < 0) {\n+\t\t\t// accept the contracted simplex\n+\t\t\tsimplex = contracted;\n+\t\t} else {\n+\t\t\t// perform a shrinking step\n+\t\t\tsimplex = shrink(original, comparator);\n+\t\t}\n+\n+\t\t// check convergence\n+\t\tfinal boolean isConverged = isConverged(comparator);\n+\t\tif (isConverged) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t}\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n+}\n \n-        }\n+private boolean isConverged(final Comparator<RealPointValuePair> comparator) {\n+\tfinal RealPointValuePair best = simplex[0];\n+\tfinal RealPointValuePair worst = simplex[simplex.length - 1];\n+\tfinal double bestVal = best.getValue();\n+\tfinal double worstVal = worst.getValue();\n+\tfinal double rtol = getRelativeThreshold();\n+\tfinal double atol = getAbsoluteThreshold();\n+\tfinal double max = Math.max(Math.abs(worstVal), Math.abs(bestVal));\n+\treturn comparator.compare(Math.abs(worstVal - bestVal), atol + rtol * max) < 0;\n+}\n \n-    }\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}