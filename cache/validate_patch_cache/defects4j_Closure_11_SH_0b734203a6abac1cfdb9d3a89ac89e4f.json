{
    "patch": "  private static final Set<String> UNSAFE_PROPS = ImmutableSet.of(\n      \"innerHTML\",\n      \"outerHTML\"\n  );\n\n  @Override\npublic void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    String propName = n.getLastChild().getString();\n    if (UNSAFE_PROPS.contains(propName)) {\n      String msg = \"Accessing '\" + propName + \"' is not allowed, as it can lead to XSS vulnerabilities.\";\n      JSError warning = JSError.make(t.getInputName(), n, VarCheck.NOT_ALLOWED_PROP_ACCESS, msg);\n      t.getCompiler().report(warning);\n      return;\n    }\n\n    JSType type = n.getJSType();\n    if (type == null) {\n      return;\n    }\n\n    // Only warn if the property access is not part of an assignment operation.\n    if (!parent.isAssign() || parent.getFirstChild() != n) {\n      String msg = \"Using '\" + propName + \"' is not allowed, as it can lead to XSS vulnerabilities.\";\n      JSError warning = JSError.make(t.getInputName(), n, VarCheck.NOT_ALLOWED_PROP_ACCESS, msg);\n      t.getCompiler().report(warning);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}