{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    double result;\n\n    if (Double.isNaN(x)) {\n        // Handle NaN values\n        result = Double.NaN;\n    } else if (x == Double.NEGATIVE_INFINITY) {\n        // Handle negative infinity\n        result = 0.0;\n    } else if (x == Double.POSITIVE_INFINITY) {\n        // Handle positive infinity\n        result = 1.0;\n    } else if (x < mean - 20 * standardDeviation) {\n        // Handle extreme negative values\n        result = 0.0;\n    } else if (x > mean + 20 * standardDeviation) {\n        // Handle extreme positive values\n        result = 1.0;\n    } else {\n        // Calculate the cumulative probability using Erf.erf()\n        result = 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..fead24cb8 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,31 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    double result;\n+\n+    if (Double.isNaN(x)) {\n+        // Handle NaN values\n+        result = Double.NaN;\n+    } else if (x == Double.NEGATIVE_INFINITY) {\n+        // Handle negative infinity\n+        result = 0.0;\n+    } else if (x == Double.POSITIVE_INFINITY) {\n+        // Handle positive infinity\n+        result = 1.0;\n+    } else if (x < mean - 20 * standardDeviation) {\n+        // Handle extreme negative values\n+        result = 0.0;\n+    } else if (x > mean + 20 * standardDeviation) {\n+        // Handle extreme positive values\n+        result = 1.0;\n+    } else {\n+        // Calculate the cumulative probability using Erf.erf()\n+        result = 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));\n     }\n+\n+    return result;\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}