{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    regex = new StringBuilder();\n    boolean wasWhite = false;\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n        if (c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r') {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n        wasWhite = false;\n        switch (c) {\n            case '\\'':\n                if (unquote) {\n                    if (++i == value.length()) {\n                        return regex;\n                    }\n                    c = value.charAt(i);\n                }\n                break;\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                regex.append('\\\\');\n            default:\n                regex.append(c);\n        }\n    }\n    return regex;\n}\n\nstatic class FormatCache {\n    private final ConcurrentMap<Locale, SimpleDateFormat> cInstanceCache = new ConcurrentHashMap<>();\n    private final ConcurrentMap<PatternAndLocale, Pattern> cPatternCache = new ConcurrentHashMap<>();\n\n    private static class PatternAndLocale {\n        private final Locale locale;\n        private final String pattern;\n\n        public PatternAndLocale(Locale locale, String pattern) {\n            this.locale = locale;\n            this.pattern = pattern;\n        }\n\n        @Override\n        public int hashCode() {\n            return locale.hashCode() ^ pattern.hashCode();\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (!(obj instanceof PatternAndLocale)) {\n                return false;\n            }\n            PatternAndLocale other = (PatternAndLocale) obj;\n            return locale.equals(other.locale) && pattern.equals(other.pattern);\n        }\n    }\n\n    public SimpleDateFormat getInstance(String pattern, Locale locale) {\n        SimpleDateFormat instance = cInstanceCache.get(locale);\n        if (instance == null) {\n            try {\n                instance = new SimpleDateFormat(pattern, locale);\n            } catch (IllegalArgumentException iae) { // catch the exception and ignore it\n            }\n            cInstanceCache.putIfAbsent(locale, instance);\n        }\n        return instance;\n    }\n\n    public Pattern getPattern(String regex, int flags, Locale locale) {\n        PatternAndLocale key = new PatternAndLocale(locale, regex);\n        Pattern pattern = cPatternCache.get(key);\n        if (pattern == null) {\n            pattern = Pattern.compile(regex, flags);\n            cPatternCache.putIfAbsent(key, pattern);\n        }\n        return pattern;\n    }\n\n    public void clear() {\n        cInstanceCache.clear();\n        cPatternCache.clear();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..f79067c7 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,25 +300,26 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    regex = new StringBuilder();\n+    boolean wasWhite = false;\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+        if (c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r') {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n+            continue;\n+        }\n+        wasWhite = false;\n+        switch (c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n+                if (unquote) {\n+                    if (++i == value.length()) {\n                         return regex;\n                     }\n-                    c= value.charAt(i);\n+                    c = value.charAt(i);\n                 }\n                 break;\n             case '?':\n@@ -336,12 +337,69 @@ public class FastDateParser implements DateParser, Serializable {\n             case '$':\n             case '.':\n                 regex.append('\\\\');\n+            default:\n+                regex.append(c);\n+        }\n+    }\n+    return regex;\n+}\n+\n+static class FormatCache {\n+    private final ConcurrentMap<Locale, SimpleDateFormat> cInstanceCache = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<PatternAndLocale, Pattern> cPatternCache = new ConcurrentHashMap<>();\n+\n+    private static class PatternAndLocale {\n+        private final Locale locale;\n+        private final String pattern;\n+\n+        public PatternAndLocale(Locale locale, String pattern) {\n+            this.locale = locale;\n+            this.pattern = pattern;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return locale.hashCode() ^ pattern.hashCode();\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (!(obj instanceof PatternAndLocale)) {\n+                return false;\n             }\n-            regex.append(c);\n+            PatternAndLocale other = (PatternAndLocale) obj;\n+            return locale.equals(other.locale) && pattern.equals(other.pattern);\n         }\n-        return regex;\n     }\n \n+    public SimpleDateFormat getInstance(String pattern, Locale locale) {\n+        SimpleDateFormat instance = cInstanceCache.get(locale);\n+        if (instance == null) {\n+            try {\n+                instance = new SimpleDateFormat(pattern, locale);\n+            } catch (IllegalArgumentException iae) { // catch the exception and ignore it\n+            }\n+            cInstanceCache.putIfAbsent(locale, instance);\n+        }\n+        return instance;\n+    }\n+\n+    public Pattern getPattern(String regex, int flags, Locale locale) {\n+        PatternAndLocale key = new PatternAndLocale(locale, regex);\n+        Pattern pattern = cPatternCache.get(key);\n+        if (pattern == null) {\n+            pattern = Pattern.compile(regex, flags);\n+            cPatternCache.putIfAbsent(key, pattern);\n+        }\n+        return pattern;\n+    }\n+\n+    public void clear() {\n+        cInstanceCache.clear();\n+        cPatternCache.clear();\n+    }\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}