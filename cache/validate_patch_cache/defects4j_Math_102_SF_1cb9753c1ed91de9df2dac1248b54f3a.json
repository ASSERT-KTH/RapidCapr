{
    "patch": "public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n    if (expected.length < 2 || expected.length != observed.length) {\n        throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n    }\n    \n    double totalObserved = 0.0;\n    double totalExpected = 0.0;\n    for (int i = 0; i < expected.length; i++) {\n        if (expected[i] < 0 || observed[i] < 0) {\n            throw new IllegalArgumentException(\"observed counts must be non-negative and expected counts must be positive\");\n        }\n        totalObserved += observed[i];\n        totalExpected += expected[i];\n    }\n\n    if (totalExpected == 0.0) {\n        return 0.0;\n    }\n    \n    double chiSqStat = 0.0;\n    for (int i = 0; i < observed.length; i++) {\n        double dev = (observed[i] - expected[i] * totalObserved / totalExpected);\n        chiSqStat += dev * dev / (expected[i] * totalObserved / totalExpected);\n    }\n    \n    return chiSqStat;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..d161d4715 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,24 +61,33 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n-        }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n-        }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n-        for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n+public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n+    if (expected.length < 2 || expected.length != observed.length) {\n+        throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n+    }\n+    \n+    double totalObserved = 0.0;\n+    double totalExpected = 0.0;\n+    for (int i = 0; i < expected.length; i++) {\n+        if (expected[i] < 0 || observed[i] < 0) {\n+            throw new IllegalArgumentException(\"observed counts must be non-negative and expected counts must be positive\");\n         }\n-        return sumSq;\n+        totalObserved += observed[i];\n+        totalExpected += expected[i];\n+    }\n+\n+    if (totalExpected == 0.0) {\n+        return 0.0;\n     }\n+    \n+    double chiSqStat = 0.0;\n+    for (int i = 0; i < observed.length; i++) {\n+        double dev = (observed[i] - expected[i] * totalObserved / totalExpected);\n+        chiSqStat += dev * dev / (expected[i] * totalObserved / totalExpected);\n+    }\n+    \n+    return chiSqStat;\n+}\n \n     /**\n      * {@inheritDoc}",
    "result_reason": "junit.framework.AssertionFailedError: bad expected count, IllegalArgumentException expected",
    "test_result": "FAIL"
}