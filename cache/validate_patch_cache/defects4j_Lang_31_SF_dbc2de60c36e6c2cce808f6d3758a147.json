{
    "patch": "public static boolean containsAny(CharSequence sequence, char[] searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int minSupplementaryCodePoint = Character.MIN_SUPPLEMENTARY_CODE_POINT;\n    if (sequence instanceof String) {\n        int strLength = sequence.length();\n        for (int i = 0; i < strLength; ) {\n            int codePoint = sequence.charAt(i);\n            if (codePoint >= minSupplementaryCodePoint) {\n                codePoint = Character.codePointAt(sequence, i);\n            }\n            for (int j = 0, len = searchChars.length; j < len; ) {\n                if (searchChars[j++] == codePoint || (j < len && searchChars[j++] == codePoint)) {\n                    return true;\n                }\n            }\n            i += Character.charCount(codePoint);\n        }\n    } else {\n        int strLength = sequence.length();\n        for (int i = 0; i < strLength; ) {\n            int codePoint = Character.codePointAt(sequence, i);\n            for (int j = 0, len = searchChars.length; j < len; ) {\n                if (searchChars[j++] == codePoint || (j < len && searchChars[j++] == codePoint)) {\n                    return true;\n                }\n            }\n            i += Character.charCount(codePoint);\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..5b7c83b3 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,39 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence sequence, char[] searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int minSupplementaryCodePoint = Character.MIN_SUPPLEMENTARY_CODE_POINT;\n+    if (sequence instanceof String) {\n+        int strLength = sequence.length();\n+        for (int i = 0; i < strLength; ) {\n+            int codePoint = sequence.charAt(i);\n+            if (codePoint >= minSupplementaryCodePoint) {\n+                codePoint = Character.codePointAt(sequence, i);\n+            }\n+            for (int j = 0, len = searchChars.length; j < len; ) {\n+                if (searchChars[j++] == codePoint || (j < len && searchChars[j++] == codePoint)) {\n+                    return true;\n+                }\n+            }\n+            i += Character.charCount(codePoint);\n+        }\n+    } else {\n+        int strLength = sequence.length();\n+        for (int i = 0; i < strLength; ) {\n+            int codePoint = Character.codePointAt(sequence, i);\n+            for (int j = 0, len = searchChars.length; j < len; ) {\n+                if (searchChars[j++] == codePoint || (j < len && searchChars[j++] == codePoint)) {\n+                    return true;\n+                }\n+            }\n+            i += Character.charCount(codePoint);\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}