{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {\n        return false;\n    }\n    int strLength = str.length();\n    int searchLength = searchChars.length;\n    int strLast = strLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < strLength; i++) {\n        char ch = str.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch)) { // check if the current character is the first part of a surrogate pair\n                    if (j == searchLast) { // if it is, check if the next character in the searchChars array is the second part of the surrogate pair\n                        return false;\n                    } else {\n                        if (i < strLast && searchChars[j+1] == str.charAt(i+1)) {\n                            return true;\n                        }\n                    }\n                } else if (Character.isLowSurrogate(ch)) { // check if the current character is the second part of a surrogate pair\n                    if (j > 0 && Character.isHighSurrogate(searchChars[j-1])) { // if it is, check if the previous character in the searchChars array is the first part of the surrogate pair\n                        return true;\n                    }\n                } else {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..082cec12 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,38 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {\n+        return false;\n+    }\n+    int strLength = str.length();\n+    int searchLength = searchChars.length;\n+    int strLast = strLength - 1;\n+    int searchLast = searchLength - 1;\n+    for (int i = 0; i < strLength; i++) {\n+        char ch = str.charAt(i);\n+        for (int j = 0; j < searchLength; j++) {\n+            if (searchChars[j] == ch) {\n+                if (Character.isHighSurrogate(ch)) { // check if the current character is the first part of a surrogate pair\n+                    if (j == searchLast) { // if it is, check if the next character in the searchChars array is the second part of the surrogate pair\n+                        return false;\n+                    } else {\n+                        if (i < strLast && searchChars[j+1] == str.charAt(i+1)) {\n+                            return true;\n+                        }\n+                    }\n+                } else if (Character.isLowSurrogate(ch)) { // check if the current character is the second part of a surrogate pair\n+                    if (j > 0 && Character.isHighSurrogate(searchChars[j-1])) { // if it is, check if the previous character in the searchChars array is the first part of the surrogate pair\n+                        return true;\n+                    }\n+                } else {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}