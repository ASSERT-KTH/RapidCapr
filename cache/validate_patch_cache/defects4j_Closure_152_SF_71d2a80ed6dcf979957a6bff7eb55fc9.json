{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n  // Warning about typeOfThis if it doesn't resolve to an ObjectType\n  // is handled further upstream.\n  // TODO(nicksantos): Handle this correctly if we have a UnionType.\n  if (typeOfThis instanceof ObjectType) {\n    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n  } else {\n    t.report(JSError.make(this.getSourceFileName(), this.getLhs().getLineno(),\n        WRONG_PARAMETER_TYPE, \"TypeOfThis must resolve to an ObjectType.\"));\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface != iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n\n  return super.resolveInternal(t, scope);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..bc8222a0 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -859,38 +859,43 @@ public class FunctionType extends PrototypeObjectType {\n   }\n \n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n-    setResolvedTypeInternal(this);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n+  setResolvedTypeInternal(this);\n \n-    call = (ArrowType) safeResolve(call, t, scope);\n-    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n+  call = (ArrowType) safeResolve(call, t, scope);\n+  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n \n-    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n-    // is handled further upstream.\n-    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n+  // Warning about typeOfThis if it doesn't resolve to an ObjectType\n+  // is handled further upstream.\n+  // TODO(nicksantos): Handle this correctly if we have a UnionType.\n+  if (typeOfThis instanceof ObjectType) {\n     typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+  } else {\n+    t.report(JSError.make(this.getSourceFileName(), this.getLhs().getLineno(),\n+        WRONG_PARAMETER_TYPE, \"TypeOfThis must resolve to an ObjectType.\"));\n+  }\n \n-    boolean changed = false;\n-    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n-        ImmutableList.builder();\n-    for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n-      resolvedInterfaces.add(resolvedIface);\n-      changed |= (resolvedIface != iface);\n-    }\n-    if (changed) {\n-      implementedInterfaces = resolvedInterfaces.build();\n-    }\n+  boolean changed = false;\n+  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n+      ImmutableList.builder();\n+  for (ObjectType iface : implementedInterfaces) {\n+    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n+    resolvedInterfaces.add(resolvedIface);\n+    changed |= (resolvedIface != iface);\n+  }\n+  if (changed) {\n+    implementedInterfaces = resolvedInterfaces.build();\n+  }\n \n-    if (subTypes != null) {\n-      for (int i = 0; i < subTypes.size(); i++) {\n-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n-      }\n+  if (subTypes != null) {\n+    for (int i = 0; i < subTypes.size(); i++) {\n+      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n     }\n-\n-    return super.resolveInternal(t, scope);\n   }\n \n+  return super.resolveInternal(t, scope);\n+}\n+\n   @Override\n   public String toDebugHashCodeString() {\n     if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}