{
    "patch": "public double integrate(final FirstOrderDifferentialEquations equations,\n                      final double t0, final double[] y0,\n                      final double t, final double[] y)\n      throws DerivativeException, IntegratorException {\n\n    // Perform sanity checks.\n    sanityChecks(equations, t0, y0, t, y);\n\n    // Set up the equations and reset the evaluations counter.\n    setEquations(equations);\n    resetEvaluations();\n\n    // Determine if the integration is forward or backward.\n    final boolean forward = t > t0;\n\n    // Create arrays to store the internal working variables.\n    final int stages = c.length + 1;\n    if (y != y0) {\n        System.arraycopy(y0, 0, y, 0, y0.length);\n    }\n    final double[][] yDotK = new double[stages][y0.length];\n    final double[] yTmp = new double[y0.length];\n\n    // Set up an interpolator or a dummy step interpolator if necessary.\n    AbstractStepInterpolator interpolator;\n    if (requiresDenseOutput() || (!eventsHandlersManager.isEmpty())) {\n        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n        rki.reinitialize(this, yTmp, yDotK, forward);\n        interpolator = rki;\n    } else {\n        interpolator = new DummyStepInterpolator(yTmp, forward);\n    }\n    interpolator.storeTime(t0);\n\n    // Set up integration control objects.\n    stepStart = t0;\n    double hNew = 0;\n    boolean firstTime = true;\n    for (final StepHandler handler : stepHandlers) {\n        handler.reset();\n    }\n    final CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n    boolean lastStep = false;\n\n    // Begin main integration loop.\n    while (!lastStep) {\n\n        interpolator.shift();\n\n        double error = 0;\n        for (boolean loop = true; loop;) {\n\n            // Compute the derivatives for the first stage unless using FSAL.\n            if (firstTime || !fsal) {\n                computeDerivatives(stepStart, y, yDotK[0]);\n            }\n\n            // Determine the scale and initialize the step size.\n            if (firstTime) {\n                final double[] scale;\n                if (vecAbsoluteTolerance == null) {\n                    scale = new double[y0.length];\n                    java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n                } else {\n                    scale = vecAbsoluteTolerance;\n                }\n                hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]);\n                firstTime = false;\n            }\n\n            // Set the step size.\n            stepSize = hNew;\n\n            // Perform the next stages.\n            for (int k = 1; k < stages; ++k) {\n\n                // Compute yTmp for each stage.\n                for (int j = 0; j < y0.length; ++j) {\n                    double sum = a[k - 1][0] * yDotK[0][j];\n                    for (int l = 1; l < k; ++l) {\n                        sum += a[k - 1][l] * yDotK[l][j];\n                    }\n                    yTmp[j] = y[j] + stepSize * sum;\n                }\n\n                // Compute derivatives for the stages.\n                computeDerivatives(stepStart + c[k - 1] * stepSize, yTmp, yDotK[k]);\n\n            }\n\n            // Estimate the state at the end of the step.\n            for (int j = 0; j < y0.length; ++j) {\n                double sum = b[0] * yDotK[0][j];\n                for (int l = 1; l < stages; ++l) {\n                    sum += b[l] * yDotK[l][j];\n                }\n                yTmp[j] = y[j] + stepSize * sum;\n            }\n\n            // Estimate the error at the end of the step.\n            error = estimateError(yDotK, y, yTmp, stepSize);\n            if (error <= 1.0) {\n\n                // Handle discrete events.\n                interpolator.storeTime(stepStart + stepSize);\n                if (manager.evaluateStep(interpolator)) {\n                    final double dt = manager.getEventTime() - stepStart;\n                    if (Math.abs(dt) <= Math.ulp(stepStart)) {\n                        loop = false;\n                    } else {\n                        hNew = dt;\n                    }\n                } else {\n                    loop = false;\n                }\n\n            } else {\n\n                // Reduce the step size in an attempt to reduce error.\n                final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));\n                hNew = filterStep(stepSize * factor, forward, false);\n\n            }\n\n        }\n\n        // The step has been accepted.\n        final double nextStep = stepStart + stepSize;\n        System.arraycopy(yTmp, 0, y, 0, y0.length);\n        manager.stepAccepted(nextStep, y);\n        lastStep = manager.stop();\n\n        // Provide the step data to the step handler.\n        interpolator.storeTime(nextStep);\n        for (final StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, lastStep);\n        }\n        stepStart = nextStep;\n\n        if (fsal) {\n            System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n        }\n\n        if (manager.reset(stepStart, y) && !lastStep) {\n            computeDerivatives(stepStart, y, yDotK[0]);\n        }\n\n        if (!lastStep) {\n            // In some rare cases, stepSize may become zero.\n            stepSize = filterStep(stepSize, forward, true);\n\n            // Step size control for the next step.\n            final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));\n            final double scaledH = stepSize * factor;\n            final double nextT = stepStart + scaledH;\n            final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n            hNew = filterStep(scaledH, forward, nextIsLast);\n\n        }\n\n    }\n\n    // Return the stop time and reset the internal state.\n    final double stopTime = stepStart;\n    resetInternalState();\n    return stopTime;\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 6f3e88358..2a36403c8 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -189,174 +189,174 @@ public abstract class EmbeddedRungeKuttaIntegrator\n \n   /** {@inheritDoc} */\n   @Override\n-  public double integrate(final FirstOrderDifferentialEquations equations,\n-                          final double t0, final double[] y0,\n-                          final double t, final double[] y)\n-  throws DerivativeException, IntegratorException {\n+public double integrate(final FirstOrderDifferentialEquations equations,\n+                      final double t0, final double[] y0,\n+                      final double t, final double[] y)\n+      throws DerivativeException, IntegratorException {\n \n+    // Perform sanity checks.\n     sanityChecks(equations, t0, y0, t, y);\n+\n+    // Set up the equations and reset the evaluations counter.\n     setEquations(equations);\n     resetEvaluations();\n+\n+    // Determine if the integration is forward or backward.\n     final boolean forward = t > t0;\n \n-    // create some internal working arrays\n+    // Create arrays to store the internal working variables.\n     final int stages = c.length + 1;\n     if (y != y0) {\n-      System.arraycopy(y0, 0, y, 0, y0.length);\n+        System.arraycopy(y0, 0, y, 0, y0.length);\n     }\n     final double[][] yDotK = new double[stages][y0.length];\n     final double[] yTmp = new double[y0.length];\n \n-    // set up an interpolator sharing the integrator arrays\n+    // Set up an interpolator or a dummy step interpolator if necessary.\n     AbstractStepInterpolator interpolator;\n-    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n-      rki.reinitialize(this, yTmp, yDotK, forward);\n-      interpolator = rki;\n+    if (requiresDenseOutput() || (!eventsHandlersManager.isEmpty())) {\n+        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n+        rki.reinitialize(this, yTmp, yDotK, forward);\n+        interpolator = rki;\n     } else {\n-      interpolator = new DummyStepInterpolator(yTmp, forward);\n+        interpolator = new DummyStepInterpolator(yTmp, forward);\n     }\n     interpolator.storeTime(t0);\n \n-    // set up integration control objects\n-    stepStart         = t0;\n-    double  hNew      = 0;\n+    // Set up integration control objects.\n+    stepStart = t0;\n+    double hNew = 0;\n     boolean firstTime = true;\n-    for (StepHandler handler : stepHandlers) {\n+    for (final StepHandler handler : stepHandlers) {\n         handler.reset();\n     }\n-    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n+    final CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n     boolean lastStep = false;\n \n-    // main integration loop\n+    // Begin main integration loop.\n     while (!lastStep) {\n \n-      interpolator.shift();\n+        interpolator.shift();\n \n-      double error = 0;\n-      for (boolean loop = true; loop;) {\n+        double error = 0;\n+        for (boolean loop = true; loop;) {\n \n-        if (firstTime || !fsal) {\n-          // first stage\n-          computeDerivatives(stepStart, y, yDotK[0]);\n-        }\n+            // Compute the derivatives for the first stage unless using FSAL.\n+            if (firstTime || !fsal) {\n+                computeDerivatives(stepStart, y, yDotK[0]);\n+            }\n \n-        if (firstTime) {\n-          final double[] scale;\n-          if (vecAbsoluteTolerance == null) {\n-              scale = new double[y0.length];\n-              java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n-            } else {\n-              scale = vecAbsoluteTolerance;\n+            // Determine the scale and initialize the step size.\n+            if (firstTime) {\n+                final double[] scale;\n+                if (vecAbsoluteTolerance == null) {\n+                    scale = new double[y0.length];\n+                    java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n+                } else {\n+                    scale = vecAbsoluteTolerance;\n+                }\n+                hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]);\n+                firstTime = false;\n             }\n-          hNew = initializeStep(equations, forward, getOrder(), scale,\n-                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n-          firstTime = false;\n-        }\n \n-        stepSize = hNew;\n+            // Set the step size.\n+            stepSize = hNew;\n \n-        // next stages\n-        for (int k = 1; k < stages; ++k) {\n+            // Perform the next stages.\n+            for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n-            double sum = a[k-1][0] * yDotK[0][j];\n-            for (int l = 1; l < k; ++l) {\n-              sum += a[k-1][l] * yDotK[l][j];\n+                // Compute yTmp for each stage.\n+                for (int j = 0; j < y0.length; ++j) {\n+                    double sum = a[k - 1][0] * yDotK[0][j];\n+                    for (int l = 1; l < k; ++l) {\n+                        sum += a[k - 1][l] * yDotK[l][j];\n+                    }\n+                    yTmp[j] = y[j] + stepSize * sum;\n+                }\n+\n+                // Compute derivatives for the stages.\n+                computeDerivatives(stepStart + c[k - 1] * stepSize, yTmp, yDotK[k]);\n+\n+            }\n+\n+            // Estimate the state at the end of the step.\n+            for (int j = 0; j < y0.length; ++j) {\n+                double sum = b[0] * yDotK[0][j];\n+                for (int l = 1; l < stages; ++l) {\n+                    sum += b[l] * yDotK[l][j];\n+                }\n+                yTmp[j] = y[j] + stepSize * sum;\n             }\n-            yTmp[j] = y[j] + stepSize * sum;\n-          }\n \n-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n+            // Estimate the error at the end of the step.\n+            error = estimateError(yDotK, y, yTmp, stepSize);\n+            if (error <= 1.0) {\n+\n+                // Handle discrete events.\n+                interpolator.storeTime(stepStart + stepSize);\n+                if (manager.evaluateStep(interpolator)) {\n+                    final double dt = manager.getEventTime() - stepStart;\n+                    if (Math.abs(dt) <= Math.ulp(stepStart)) {\n+                        loop = false;\n+                    } else {\n+                        hNew = dt;\n+                    }\n+                } else {\n+                    loop = false;\n+                }\n+\n+            } else {\n \n+                // Reduce the step size in an attempt to reduce error.\n+                final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));\n+                hNew = filterStep(stepSize * factor, forward, false);\n+\n+            }\n+\n+        }\n+\n+        // The step has been accepted.\n+        final double nextStep = stepStart + stepSize;\n+        System.arraycopy(yTmp, 0, y, 0, y0.length);\n+        manager.stepAccepted(nextStep, y);\n+        lastStep = manager.stop();\n+\n+        // Provide the step data to the step handler.\n+        interpolator.storeTime(nextStep);\n+        for (final StepHandler handler : stepHandlers) {\n+            handler.handleStep(interpolator, lastStep);\n         }\n+        stepStart = nextStep;\n \n-        // estimate the state at the end of the step\n-        for (int j = 0; j < y0.length; ++j) {\n-          double sum    = b[0] * yDotK[0][j];\n-          for (int l = 1; l < stages; ++l) {\n-            sum    += b[l] * yDotK[l][j];\n-          }\n-          yTmp[j] = y[j] + stepSize * sum;\n+        if (fsal) {\n+            System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n         }\n \n-        // estimate the error at the end of the step\n-        error = estimateError(yDotK, y, yTmp, stepSize);\n-        if (error <= 1.0) {\n-\n-          // discrete events handling\n-          interpolator.storeTime(stepStart + stepSize);\n-          if (manager.evaluateStep(interpolator)) {\n-              final double dt = manager.getEventTime() - stepStart;\n-              if (Math.abs(dt) <= Math.ulp(stepStart)) {\n-                  // rejecting the step would lead to a too small next step, we accept it\n-                  loop = false;\n-              } else {\n-                  // reject the step to match exactly the next switch time\n-                  hNew = dt;\n-              }\n-          } else {\n-            // accept the step\n-            loop = false;\n-          }\n-\n-        } else {\n-          // reject the step and attempt to reduce error by stepsize control\n-          final double factor =\n-              Math.min(maxGrowth,\n-                       Math.max(minReduction, safety * Math.pow(error, exp)));\n-          hNew = filterStep(stepSize * factor, forward, false);\n+        if (manager.reset(stepStart, y) && !lastStep) {\n+            computeDerivatives(stepStart, y, yDotK[0]);\n         }\n \n-      }\n-\n-      // the step has been accepted\n-      final double nextStep = stepStart + stepSize;\n-      System.arraycopy(yTmp, 0, y, 0, y0.length);\n-      manager.stepAccepted(nextStep, y);\n-      lastStep = manager.stop();\n-\n-      // provide the step data to the step handler\n-      interpolator.storeTime(nextStep);\n-      for (StepHandler handler : stepHandlers) {\n-          handler.handleStep(interpolator, lastStep);\n-      }\n-      stepStart = nextStep;\n-\n-      if (fsal) {\n-        // save the last evaluation for the next step\n-        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n-      }\n-\n-      if (manager.reset(stepStart, y) && ! lastStep) {\n-        // some event handler has triggered changes that\n-        // invalidate the derivatives, we need to recompute them\n-        computeDerivatives(stepStart, y, yDotK[0]);\n-      }\n-\n-      if (! lastStep) {\n-        // in some rare cases we may get here with stepSize = 0, for example\n-        // when an event occurs at integration start, reducing the first step\n-        // to zero; we have to reset the step to some safe non zero value\n-          stepSize = filterStep(stepSize, forward, true);\n-\n-        // stepsize control for next step\n-        final double factor = Math.min(maxGrowth,\n-                                       Math.max(minReduction,\n-                                                safety * Math.pow(error, exp)));\n-        final double  scaledH    = stepSize * factor;\n-        final double  nextT      = stepStart + scaledH;\n-        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n-        hNew = filterStep(scaledH, forward, nextIsLast);\n-      }\n+        if (!lastStep) {\n+            // In some rare cases, stepSize may become zero.\n+            stepSize = filterStep(stepSize, forward, true);\n+\n+            // Step size control for the next step.\n+            final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));\n+            final double scaledH = stepSize * factor;\n+            final double nextT = stepStart + scaledH;\n+            final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+            hNew = filterStep(scaledH, forward, nextIsLast);\n+\n+        }\n \n     }\n \n+    // Return the stop time and reset the internal state.\n     final double stopTime = stepStart;\n     resetInternalState();\n     return stopTime;\n \n-  }\n+}\n \n   /** Get the minimal reduction factor for stepsize control.\n    * @return minimal reduction factor",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}