{
    "patch": "Pattern p = Pattern.compile(\"\\\\\\\\([0-7]{1,3}|[\\\\\\\\\\\"'ntbrf]|u[0-9a-fA-F]{4})\");\nMatcher m = p.matcher(input);\nStringBuffer sb = new StringBuffer();\nsuccess = true;\nwhile (m.find()) {\n    switch (m.group(1).charAt(0)) {\n        case '\\\\':\n            m.appendReplacement(sb, \"\\\\\\\\\");\n            break;\n        case '\\\"':\n            m.appendReplacement(sb, \"\\\\\\\"\");\n            break;\n        case '\\'':\n            m.appendReplacement(sb, \"\\\\\\'\");\n            break;\n        case 'n':\n            m.appendReplacement(sb, \"\\\\n\");\n            break;\n        case 't':\n            m.appendReplacement(sb, \"\\\\t\");\n            break;\n        case 'b':\n            m.appendReplacement(sb, \"\\\\b\");\n            break;\n        case 'r':\n            m.appendReplacement(sb, \"\\\\r\");\n            break;\n        case 'f':\n            m.appendReplacement(sb, \"\\\\f\");\n            break;\n        case 'u':\n            int codePoint = Integer.parseInt(m.group(1).substring(1), 16);\n            String unicode = new String(Character.toChars(codePoint));\n            m.appendReplacement(sb, unicode);\n            break;\n        default: // the value is an octal value\n            int octalValue = Integer.parseInt(m.group(1), 8);\n            m.appendReplacement(sb, \"\" + (char) octalValue);\n    }\n}\nm.appendTail(sb);\nresult = sb.toString();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}