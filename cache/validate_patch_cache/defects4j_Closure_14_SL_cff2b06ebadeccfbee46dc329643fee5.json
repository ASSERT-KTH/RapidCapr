{
    "patch": "if (cfa != null && finallyNode != null && !finallyNode.getNext().isFunction()) {\n  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode.getNext());\n} else {\n  Node followNode = computeFollowNode(fromNode, finallyNode, cfa);\n  if (followNode != null) {\n    cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..0b73b2a3 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,14 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null && finallyNode != null && !finallyNode.getNext().isFunction()) {\n+  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode.getNext());\n+} else {\n+  Node followNode = computeFollowNode(fromNode, finallyNode, cfa);\n+  if (followNode != null) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}