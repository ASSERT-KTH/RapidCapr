{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n        \n    // Check if the partial is contiguous\n    if (DateTimeUtils.isContiguous(partial)) {\n        int[] newValues = Arrays.copyOf(values, values.length);\n        // Add the valueToAdd to the corresponding field value in the array\n        newValues[fieldIndex] += valueToAdd;\n        boolean isMonthField = partial.getFieldType(fieldIndex).equals(DateTimeFieldType.monthOfYear());\n        if (isMonthField) {\n            int newMonthValue = newValues[fieldIndex];\n            int year = partial.get(DateTimeFieldType.year());\n            int yearMonthValue = (year * 12) + newMonthValue - 1;\n            int newYear = yearMonthValue / 12;\n            newMonthValue = yearMonthValue % 12 + 1;\n            int maxDayOfMonth = new LocalDate(newYear, newMonthValue, 1).dayOfMonth().getMaximumValue();\n                \n            // If the month value has changed and the new day of month is greater than the maximum value for that\n            // month, set the dayOfMonth to the maximum value\n            int dayIndex = -1;\n            DateTimeFieldType dayFieldType = DateTimeFieldType.dayOfMonth();\n            for (int i = 0; i < partial.size(); i++) {\n                DateTimeFieldType fieldType = partial.getFieldType(i);\n                if (fieldType.equals(dayFieldType)) {\n                    dayIndex = i;\n                    break;\n                }\n            }\n            if (dayIndex != -1 && newMonthValue != values[fieldIndex] && newValues[dayIndex] > maxDayOfMonth) {\n                newValues[dayIndex] = maxDayOfMonth;\n            }\n        }\n        return partial.getChronology().get(partial, newValues);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..de0985e6 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,45 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+        \n+    // Check if the partial is contiguous\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int[] newValues = Arrays.copyOf(values, values.length);\n+        // Add the valueToAdd to the corresponding field value in the array\n+        newValues[fieldIndex] += valueToAdd;\n+        boolean isMonthField = partial.getFieldType(fieldIndex).equals(DateTimeFieldType.monthOfYear());\n+        if (isMonthField) {\n+            int newMonthValue = newValues[fieldIndex];\n+            int year = partial.get(DateTimeFieldType.year());\n+            int yearMonthValue = (year * 12) + newMonthValue - 1;\n+            int newYear = yearMonthValue / 12;\n+            newMonthValue = yearMonthValue % 12 + 1;\n+            int maxDayOfMonth = new LocalDate(newYear, newMonthValue, 1).dayOfMonth().getMaximumValue();\n+                \n+            // If the month value has changed and the new day of month is greater than the maximum value for that\n+            // month, set the dayOfMonth to the maximum value\n+            int dayIndex = -1;\n+            DateTimeFieldType dayFieldType = DateTimeFieldType.dayOfMonth();\n+            for (int i = 0; i < partial.size(); i++) {\n+                DateTimeFieldType fieldType = partial.getFieldType(i);\n+                if (fieldType.equals(dayFieldType)) {\n+                    dayIndex = i;\n+                    break;\n+                }\n+            }\n+            if (dayIndex != -1 && newMonthValue != values[fieldIndex] && newValues[dayIndex] > maxDayOfMonth) {\n+                newValues[dayIndex] = maxDayOfMonth;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return partial.getChronology().get(partial, newValues);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}