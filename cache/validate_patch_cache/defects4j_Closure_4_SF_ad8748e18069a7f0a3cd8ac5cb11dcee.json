{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n  boolean cycleDetected = detectImplicitPrototypeCycle();\n\n  if (resolvedViaRegistry && !cycleDetected) {\n    if (isResolved()) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // If the type is unresolved, try resolving via properties\n    resolveViaProperties(t, enclosing);\n    cycleDetected = detectImplicitPrototypeCycle();\n    if (cycleDetected) {\n      handleTypeCycle(t);\n    }\n  } else if (cycleDetected) {\n    // If we couldn't resolve via registry or a cycle is detected, try resolving via properties\n    resolveViaProperties(t, enclosing);\n    cycleDetected = detectImplicitPrototypeCycle();\n    if (cycleDetected) {\n      handleTypeCycle(t);\n    }\n  }\n\n  if (isResolved()) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..fac2d4cd 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,41 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+  boolean cycleDetected = detectImplicitPrototypeCycle();\n \n-    if (resolved) {\n+  if (resolvedViaRegistry && !cycleDetected) {\n+    if (isResolved()) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n \n+    // If the type is unresolved, try resolving via properties\n+    resolveViaProperties(t, enclosing);\n+    cycleDetected = detectImplicitPrototypeCycle();\n+    if (cycleDetected) {\n+      handleTypeCycle(t);\n+    }\n+  } else if (cycleDetected) {\n+    // If we couldn't resolve via registry or a cycle is detected, try resolving via properties\n     resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+    cycleDetected = detectImplicitPrototypeCycle();\n+    if (cycleDetected) {\n       handleTypeCycle(t);\n     }\n+  }\n \n+  if (isResolved()) {\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n   }\n \n+  return null;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "junit.framework.AssertionFailedError: Expected exactly one warning or error Errors:",
    "test_result": "FAIL"
}