{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Resolve via registry first to avoid triggering warnings.\n    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n    \n    // Resolve via properties.\n    resolveViaProperties(t, enclosing);\n    \n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n    }\n    \n    // Resolved via registry and fully resolved, so use registry.\n    if (resolvedViaRegistry && isResolved()) {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n    \n    super.resolveInternal(t, enclosing);\n    \n    if (isResolved()) {\n        finishPropertyContinuations();\n    }\n    \n    return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..f65cad4d 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,32 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    // Resolve via registry first to avoid triggering warnings.\n+    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+    \n+    // Resolve via properties.\n     resolveViaProperties(t, enclosing);\n+    \n     if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+        handleTypeCycle(t);\n     }\n-\n+    \n+    // Resolved via registry and fully resolved, so use registry.\n+    if (resolvedViaRegistry && isResolved()) {\n+        super.resolveInternal(t, enclosing);\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration() ? getReferencedType() : this;\n+    }\n+    \n     super.resolveInternal(t, enclosing);\n+    \n     if (isResolved()) {\n-      finishPropertyContinuations();\n+        finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    \n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_TYPE_PARSE_ERROR. Bad type annotation. Unknown type g.Late at testcode line 2 : 10 expected:<0> but was:<1>",
    "test_result": "FAIL"
}