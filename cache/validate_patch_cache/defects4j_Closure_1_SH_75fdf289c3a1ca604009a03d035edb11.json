{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Set<String> unreferencedVarNames = new HashSet<>();\n      // Collect all unreferenced arguments in this function.\n      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n          unreferencedVarNames.add(arg.getString());\n        }\n      }\n      if (unreferencedVarNames.isEmpty()) {\n        return;\n      }\n      // Remove all unreferenced arguments in this function.\n      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n        if (unreferencedVarNames.contains(arg.getString())) {\n          arg.detach();\n          compiler.reportCodeChange();\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..14bf37d7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,35 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      Set<String> unreferencedVarNames = new HashSet<>();\n+      // Collect all unreferenced arguments in this function.\n+      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+          unreferencedVarNames.add(arg.getString());\n+        }\n+      }\n+      if (unreferencedVarNames.isEmpty()) {\n+        return;\n+      }\n+      // Remove all unreferenced arguments in this function.\n+      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+        if (unreferencedVarNames.contains(arg.getString())) {\n+          arg.detach();\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}