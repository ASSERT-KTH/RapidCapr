{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n            // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            try {\n                return iChronology.get(partial, instant);\n            } catch (IllegalFieldValueException ex) {\n                // day of month is illegal, so try to preserve it by moving\n                // to the end of month instead\n                if (ex.getFieldName().equals(\"dayOfMonth\")) {\n                    int year = values[partial.indexOf(DateTimeFieldType.year())];\n                    int monthOfYear = values[partial.indexOf(DateTimeFieldType.monthOfYear())];\n                    int lastDay = iChronology.dayOfMonth().getMaximumValue(year, monthOfYear);\n                    int dayOfMonth = values[partial.indexOf(DateTimeFieldType.dayOfMonth())];\n                    if (dayOfMonth > lastDay) {\n                        dayOfMonth = lastDay;\n                    }\n                    instant = iChronology.monthOfYear().set(instant, monthOfYear);\n                    instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n                    return iChronology.get(partial, instant);\n                } else {\n                    // re-throw the exception\n                    throw ex;\n                }\n            }\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..dd16fb9d 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -213,7 +213,27 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            try {\n+                return iChronology.get(partial, instant);\n+            } catch (IllegalFieldValueException ex) {\n+                // day of month is illegal, so try to preserve it by moving\n+                // to the end of month instead\n+                if (ex.getFieldName().equals(\"dayOfMonth\")) {\n+                    int year = values[partial.indexOf(DateTimeFieldType.year())];\n+                    int monthOfYear = values[partial.indexOf(DateTimeFieldType.monthOfYear())];\n+                    int lastDay = iChronology.dayOfMonth().getMaximumValue(year, monthOfYear);\n+                    int dayOfMonth = values[partial.indexOf(DateTimeFieldType.dayOfMonth())];\n+                    if (dayOfMonth > lastDay) {\n+                        dayOfMonth = lastDay;\n+                    }\n+                    instant = iChronology.monthOfYear().set(instant, monthOfYear);\n+                    instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n+                    return iChronology.get(partial, instant);\n+                } else {\n+                    // re-throw the exception\n+                    throw ex;\n+                }\n+            }\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}