{
    "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<>();\n    \n    List<Integer> thirds = new ArrayList<>();\n    int i = 2;\n    while(i < l.size()) {\n        thirds.add(l.get(i));\n        i += 3;\n    }\n\n    Collections.sort(thirds);\n    \n    int j = 0;\n    int k = 0;\n    while (j < thirds.size()) {\n        int t = thirds.get(j);\n        while (k < l.size() && (k % 3 != 2 || l.get(k) > t)) {\n            result.add(l.get(k));\n            k++;\n        }\n        if (k < l.size() && l.get(k) <= t) {\n            result.add(t);\n            j++;\n        } else {\n            thirds.remove(j);\n        }\n    }\n    \n    while (k < l.size()) {\n        result.add(l.get(k));\n        k++;\n    }\n    \n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/SORT_THIRD.java b/src/main/java/humaneval/buggy/SORT_THIRD.java\nindex e57d2bb..40add97 100644\n--- a/src/main/java/humaneval/buggy/SORT_THIRD.java\n+++ b/src/main/java/humaneval/buggy/SORT_THIRD.java\n@@ -5,22 +5,39 @@ import java.util.Collections;\n import java.util.List;\n \n public class SORT_THIRD {\n-    public static List<Integer> sort_third(List<Integer> l) {\n-        List<Integer> result = new ArrayList<Integer>();\n+public static List<Integer> sort_third(List<Integer> l) {\n+    List<Integer> result = new ArrayList<>();\n+    \n+    List<Integer> thirds = new ArrayList<>();\n+    int i = 2;\n+    while(i < l.size()) {\n+        thirds.add(l.get(i));\n+        i += 3;\n+    }\n \n-        List<Integer> thirds = new ArrayList<Integer>();\n-        for (int i = 0; i < l.size(); i += 3){\n-            thirds.add(l.get(i));\n+    Collections.sort(thirds);\n+    \n+    int j = 0;\n+    int k = 0;\n+    while (j < thirds.size()) {\n+        int t = thirds.get(j);\n+        while (k < l.size() && (k % 3 != 2 || l.get(k) > t)) {\n+            result.add(l.get(k));\n+            k++;\n         }\n-        Collections.sort(thirds);\n-\n-        for (int i = 0; i < l.size(); i += 1){\n-            if (i % 3 == 0){\n-                result.add(thirds.get(i));\n-            } else{\n-                result.add(l.get(i));\n-            }\n+        if (k < l.size() && l.get(k) <= t) {\n+            result.add(t);\n+            j++;\n+        } else {\n+            thirds.remove(j);\n         }\n-        return result;\n     }\n+    \n+    while (k < l.size()) {\n+        result.add(l.get(k));\n+        k++;\n+    }\n+    \n+    return result;\n+}\n }",
    "result_reason": "   TEST_SORT_THIRD.test_0:13 array lengths differed, expected.length=4 actual.length=3; arrays first differed at element [3]; expected:<3> but was:<end of array>",
    "test_result": "FAIL"
}