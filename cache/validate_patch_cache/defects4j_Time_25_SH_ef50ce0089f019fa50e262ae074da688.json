{
    "patch": "if (offsetLocal == offsetAdjusted) {\n    return offsetAdjusted;\n} else {\n    long prevLocal = previousTransition(instantAdjusted);\n    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n    boolean gap = (nextAdjusted > prevAdjusted) && (nextLocal > prevLocal);\n    boolean overlap = (nextAdjusted < prevAdjusted) && (nextLocal < prevLocal);\n    if (gap) {\n        if (offsetLocal > offsetAdjusted) {\n            // fall back to standard time\n            return offsetLocal;\n        } else {\n            long prevOffsetAdjusted = getOffset(prevAdjusted);\n            if (offsetLocal < prevOffsetAdjusted) {\n                return prevOffsetAdjusted;\n            } else {\n                return offsetAdjusted;\n            }\n        }\n    } else if (overlap) {\n        long prevOffsetAdjusted = getOffset(prevAdjusted);\n        if (offsetLocal == prevOffsetAdjusted) {\n            return offsetLocal;\n        } else {\n            // in the overlap period\n            if (offsetLocal < offsetAdjusted) {\n                int standardOffset = getStandardOffset(instantAdjusted);\n                int actualOffset = getOffset(instantAdjusted);\n                if (standardOffset > actualOffset) {\n                    return standardOffset;\n                }\n            }\n            return offsetAdjusted;\n        }\n    } else {\n        return offsetLocal;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..05369eb1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,46 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal == offsetAdjusted) {\n+    return offsetAdjusted;\n+} else {\n+    long prevLocal = previousTransition(instantAdjusted);\n+    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n+    boolean gap = (nextAdjusted > prevAdjusted) && (nextLocal > prevLocal);\n+    boolean overlap = (nextAdjusted < prevAdjusted) && (nextLocal < prevLocal);\n+    if (gap) {\n+        if (offsetLocal > offsetAdjusted) {\n+            // fall back to standard time\n+            return offsetLocal;\n+        } else {\n+            long prevOffsetAdjusted = getOffset(prevAdjusted);\n+            if (offsetLocal < prevOffsetAdjusted) {\n+                return prevOffsetAdjusted;\n+            } else {\n+                return offsetAdjusted;\n+            }\n+        }\n+    } else if (overlap) {\n+        long prevOffsetAdjusted = getOffset(prevAdjusted);\n+        if (offsetLocal == prevOffsetAdjusted) {\n+            return offsetLocal;\n+        } else {\n+            // in the overlap period\n+            if (offsetLocal < offsetAdjusted) {\n+                int standardOffset = getStandardOffset(instantAdjusted);\n+                int actualOffset = getOffset(instantAdjusted);\n+                if (standardOffset > actualOffset) {\n+                    return standardOffset;\n+                }\n+            }\n+            return offsetAdjusted;\n+        }\n+    } else {\n+        return offsetLocal;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}