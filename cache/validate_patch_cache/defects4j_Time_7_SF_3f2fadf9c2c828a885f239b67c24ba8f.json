{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = (iZone != null) ? iZone : chrono.getZone();\n\n    // use a sliding window to allow parsing of feb 29 on non-leap years\n    if(text.regionMatches(position, \"24:\", 0, 3)) {\n        text = text.substring(0, position + 3) + '0' + text.substring(position + 3);\n    }\n    \n    long instantMillis = instant.getMillis() + zone.getOffset(instant.getMillis());\n    chrono = selectChronology(chrono.withZone(zone));\n    int defaultYear = chrono.year().get(instantMillis);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis(false, text)); \n    if (bucket.getOffsetInteger() != null) {\n        zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n        chrono = chrono.withZone(zone);\n        instant.setChronology(chrono);\n    } else if (bucket.getZone() != null && !bucket.getZone().equals(zone)) {\n        zone = bucket.getZone();\n        chrono = chrono.withZone(zone);\n        instant.setChronology(chrono);\n    } else {\n        instant.setChronology(chrono);\n        instant.setZone(zone);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..b2a3ecd8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,42 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = (iZone != null) ? iZone : chrono.getZone();\n+\n+    // use a sliding window to allow parsing of feb 29 on non-leap years\n+    if(text.regionMatches(position, \"24:\", 0, 3)) {\n+        text = text.substring(0, position + 3) + '0' + text.substring(position + 3);\n+    }\n+    \n+    long instantMillis = instant.getMillis() + zone.getOffset(instant.getMillis());\n+    chrono = selectChronology(chrono.withZone(zone));\n+    int defaultYear = chrono.year().get(instantMillis);\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            instantMillis, chrono, iLocale, iPivotYear, defaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    instant.setMillis(bucket.computeMillis(false, text)); \n+    if (bucket.getOffsetInteger() != null) {\n+        zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n+        chrono = chrono.withZone(zone);\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+    } else if (bucket.getZone() != null && !bucket.getZone().equals(zone)) {\n+        zone = bucket.getZone();\n+        chrono = chrono.withZone(zone);\n+        instant.setChronology(chrono);\n+    } else {\n+        instant.setChronology(chrono);\n+        instant.setZone(zone);\n     }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2004-06-09T12:20:30.000+02:00> but was:<2004-06-09T10:20:30.000Z>",
    "test_result": "FAIL"
}