{
    "patch": "public Object clone() throws CloneNotSupportedException {\n    TimeSeries clone = (TimeSeries) super.clone();\n    clone.timePeriodClass = timePeriodClass;\n    clone.data = new java.util.ArrayList<>();\n    int lastIndex = getItemCount() - 1;\n    int endIndex = Math.max(lastIndex >= 0 ? lastIndex : 0, 0);\n    try {\n        clone.data = new java.util.ArrayList<TimeSeriesDataItem>(this.data.subList(0, endIndex + 1));\n    } catch (IllegalArgumentException ex) {\n        // sublist failed, create a new list with non-failing data\n        for (int i = 0; i <= endIndex; i++) {\n            TimeSeriesDataItem item = (TimeSeriesDataItem) getDataItem(i).clone();\n            try {\n                clone.data.add(item);\n            } catch (SeriesException e) {\n                // ignore failing data item\n            }\n        }\n    }\n    return clone;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex ffd1dff..cacd8d2 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -854,7 +854,27 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *         subclasses may differ.\n      */\n     public Object clone() throws CloneNotSupportedException {\n-        Object clone = createCopy(0, getItemCount() - 1);\n+public Object clone() throws CloneNotSupportedException {\n+    TimeSeries clone = (TimeSeries) super.clone();\n+    clone.timePeriodClass = timePeriodClass;\n+    clone.data = new java.util.ArrayList<>();\n+    int lastIndex = getItemCount() - 1;\n+    int endIndex = Math.max(lastIndex >= 0 ? lastIndex : 0, 0);\n+    try {\n+        clone.data = new java.util.ArrayList<TimeSeriesDataItem>(this.data.subList(0, endIndex + 1));\n+    } catch (IllegalArgumentException ex) {\n+        // sublist failed, create a new list with non-failing data\n+        for (int i = 0; i <= endIndex; i++) {\n+            TimeSeriesDataItem item = (TimeSeriesDataItem) getDataItem(i).clone();\n+            try {\n+                clone.data.add(item);\n+            } catch (SeriesException e) {\n+                // ignore failing data item\n+            }\n+        }\n+    }\n+    return clone;\n+}\n         return clone;\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}