{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    if (intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    int childCount = left.getChildCount();\n    if (intIndex >= childCount) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    Node current = left.getFirstChild();\n    for (int i = 0; i < intIndex; i++) {\n        current = current.getNext();\n    }\n    if (current.isEmpty()) {\n        Node undefinedNode = NodeUtil.newUndefinedNode(n);\n        parent.replaceChild(n, undefinedNode);\n        Node emptyChild = current;\n        if (childCount == 1) {\n            // If the array has only one element, remove the array\n            parent.replaceChild(left, undefinedNode);\n        } else if (current == left.getFirstChild()) {\n            left.removeChild(current);\n        } else {\n            Node prev = current.getPrevious();\n            left.removeChild(current);\n            // Workaround to fix IllegalArgumentException:\n            // Create an empty node and put it before the \"previous\" node\n            // before replacing the new node with the \"previous\" node\n            Node emptyNode = IR.empty().srcref(current);\n            left.addChildBefore(emptyNode, prev);\n            left.replaceChild(emptyNode, emptyChild);\n            left.replaceChild(prev, undefinedNode);\n            left.removeChild(emptyNode);\n        }\n        reportCodeChange();\n        return undefinedNode;\n    }\n    // Replace array access with the element\n    parent.replaceChild(n, current.detach());\n    reportCodeChange();\n    if (childCount == 1) {\n        // If the array has only one element, remove the array\n        parent.replaceChild(left, current.detach());\n    }\n    return current.detach();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..93ad21be 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,66 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n     if (isAssignmentTarget(n)) {\n-      return n;\n+        return n;\n     }\n-\n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+        return n;\n     }\n-\n     double index = right.getDouble();\n     int intIndex = (int) index;\n     if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n     }\n-\n     if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    int childCount = left.getChildCount();\n+    if (intIndex >= childCount) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n-\n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+    Node current = left.getFirstChild();\n+    for (int i = 0; i < intIndex; i++) {\n+        current = current.getNext();\n+    }\n+    if (current.isEmpty()) {\n+        Node undefinedNode = NodeUtil.newUndefinedNode(n);\n+        parent.replaceChild(n, undefinedNode);\n+        Node emptyChild = current;\n+        if (childCount == 1) {\n+            // If the array has only one element, remove the array\n+            parent.replaceChild(left, undefinedNode);\n+        } else if (current == left.getFirstChild()) {\n+            left.removeChild(current);\n+        } else {\n+            Node prev = current.getPrevious();\n+            left.removeChild(current);\n+            // Workaround to fix IllegalArgumentException:\n+            // Create an empty node and put it before the \"previous\" node\n+            // before replacing the new node with the \"previous\" node\n+            Node emptyNode = IR.empty().srcref(current);\n+            left.addChildBefore(emptyNode, prev);\n+            left.replaceChild(emptyNode, emptyChild);\n+            left.replaceChild(prev, undefinedNode);\n+            left.removeChild(emptyNode);\n+        }\n+        reportCodeChange();\n+        return undefinedNode;\n     }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    // Replace array access with the element\n+    parent.replaceChild(n, current.detach());\n     reportCodeChange();\n-    return elem;\n-  }\n+    if (childCount == 1) {\n+        // If the array has only one element, remove the array\n+        parent.replaceChild(left, current.detach());\n+    }\n+    return current.detach();\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}