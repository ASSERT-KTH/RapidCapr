{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n    field.setAccessible(true);\n    try {\n        if (field.getType().isPrimitive()) {\n            if (field.getType().equals(int.class)) {\n                field.setInt(fieldInstance, ((Number) candidate).intValue());\n            } else if (field.getType().equals(long.class)) {\n                field.setLong(fieldInstance, ((Number) candidate).longValue());\n            } else if (field.getType().equals(short.class)) {\n                field.setShort(fieldInstance, ((Number) candidate).shortValue());\n            } else if (field.getType().equals(byte.class)) {\n                field.setByte(fieldInstance, ((Number) candidate).byteValue());\n            } else if (field.getType().equals(float.class)) {\n                field.setFloat(fieldInstance, ((Number) candidate).floatValue());\n            } else if (field.getType().equals(double.class)) {\n                field.setDouble(fieldInstance, ((Number) candidate).doubleValue());\n            } else if (field.getType().equals(boolean.class)) {\n                field.setBoolean(fieldInstance, (Boolean) candidate);\n            } else if (field.getType().equals(char.class)) {\n                field.setChar(fieldInstance, ((String) candidate).charAt(0));\n            } \n        } else {\n            field.set(fieldInstance, field.getType().cast(candidate));\n        }\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..e401826ab 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,38 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n+    field.setAccessible(true);\n+    try {\n+        if (field.getType().isPrimitive()) {\n+            if (field.getType().equals(int.class)) {\n+                field.setInt(fieldInstance, ((Number) candidate).intValue());\n+            } else if (field.getType().equals(long.class)) {\n+                field.setLong(fieldInstance, ((Number) candidate).longValue());\n+            } else if (field.getType().equals(short.class)) {\n+                field.setShort(fieldInstance, ((Number) candidate).shortValue());\n+            } else if (field.getType().equals(byte.class)) {\n+                field.setByte(fieldInstance, ((Number) candidate).byteValue());\n+            } else if (field.getType().equals(float.class)) {\n+                field.setFloat(fieldInstance, ((Number) candidate).floatValue());\n+            } else if (field.getType().equals(double.class)) {\n+                field.setDouble(fieldInstance, ((Number) candidate).doubleValue());\n+            } else if (field.getType().equals(boolean.class)) {\n+                field.setBoolean(fieldInstance, (Boolean) candidate);\n+            } else if (field.getType().equals(char.class)) {\n+                field.setChar(fieldInstance, ((String) candidate).charAt(0));\n+            } \n+        } else {\n+            field.set(fieldInstance, field.getType().cast(candidate));\n+        }\n+    } catch (IllegalAccessException e) {\n+        e.printStackTrace();\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}