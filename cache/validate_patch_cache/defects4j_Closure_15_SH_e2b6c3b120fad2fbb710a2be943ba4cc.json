{
    "patch": "        // We only care about calls and delprop.\n        if (n.isCall() || n.isDelProp()) {\n          return NodeUtil.mayEffectMutableState(n);\n        }\n\n        // Handle dynamic property access.\n        if (n.isGetElem() && n.getLastChild().isString()) {\n          return NodeUtil.mayEffectMutableState(n);\n        }\n\n        // Recurse on child nodes.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..7f86decf 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,17 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        // We only care about calls and delprop.\n+        if (n.isCall() || n.isDelProp()) {\n+          return NodeUtil.mayEffectMutableState(n);\n+        }\n+\n+        // Handle dynamic property access.\n+        if (n.isGetElem() && n.getLastChild().isString()) {\n+          return NodeUtil.mayEffectMutableState(n);\n+        }\n+\n+        // Recurse on child nodes.\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}