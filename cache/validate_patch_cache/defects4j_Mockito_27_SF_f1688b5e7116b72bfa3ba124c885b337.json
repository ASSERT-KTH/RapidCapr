{
    "patch": "public <T> void resetMock(T mock) {\n    if (mock == null) {\n        return;\n    }\n    \n    if (!(mock instanceof Factory)) {\n        return;\n    }\n\n    Object currentCallback = ((Factory) mock).getCallback(0);\n    if (!(currentCallback instanceof MethodInterceptorFilter)) {\n        return;\n    }\n\n    MethodInterceptorFilter currentFilter = (MethodInterceptorFilter) currentCallback;\n    MockHandler<T> oldHandler = (MockHandler<T>) currentFilter.getHandler();\n\n    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newHandler, new MockSettingsImpl());\n    ((Factory) mock).setCallback(0, newFilter);\n\n    try {\n        // Attempt to recalculate the hash code of the mock object to update the cached hash\n        Method hashCodeMethod = mock.getClass().getMethod(\"hashCode\");\n        ReflectionUtils.makeAccessible(hashCodeMethod);\n        hashCodeMethod.invoke(mock);\n    } catch (Exception e) {\n        // Ignore exception if mock object does not support hashCode()\n    }\n\n    // Reset the mock object if it was a spy\n    if (Mockito.mockingDetails(mock).isSpy()) {\n        Mockito.reset(mock);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..a2a9703f1 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,43 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (mock == null) {\n+        return;\n+    }\n+    \n+    if (!(mock instanceof Factory)) {\n+        return;\n+    }\n+\n+    Object currentCallback = ((Factory) mock).getCallback(0);\n+    if (!(currentCallback instanceof MethodInterceptorFilter)) {\n+        return;\n+    }\n+\n+    MethodInterceptorFilter currentFilter = (MethodInterceptorFilter) currentCallback;\n+    MockHandler<T> oldHandler = (MockHandler<T>) currentFilter.getHandler();\n+\n+    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n+\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newHandler, new MockSettingsImpl());\n+    ((Factory) mock).setCallback(0, newFilter);\n+\n+    try {\n+        // Attempt to recalculate the hash code of the mock object to update the cached hash\n+        Method hashCodeMethod = mock.getClass().getMethod(\"hashCode\");\n+        ReflectionUtils.makeAccessible(hashCodeMethod);\n+        hashCodeMethod.invoke(mock);\n+    } catch (Exception e) {\n+        // Ignore exception if mock object does not support hashCode()\n+    }\n+\n+    // Reset the mock object if it was a spy\n+    if (Mockito.mockingDetails(mock).isSpy()) {\n+        Mockito.reset(mock);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}