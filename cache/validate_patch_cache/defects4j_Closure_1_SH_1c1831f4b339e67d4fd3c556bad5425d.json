{
    "patch": "// Remove any unreferenced formal parameters from functions.\nprivate void removeUnreferencedFunctionArgs(\n  Scope fnScope, \n  Set<AstFunctionCall> referencedDefs\n) {\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n  \n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites\n      && callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers) {\n    List<Node> params = Lists.newArrayList(argList.children());\n    for (int i = params.size() - 1; i >= 0; i--) {\n      Node param = params.get(i);\n      if (!NodeUtil.isVarArgs(param)) {\n        Var var = fnScope.getVar(param.getString());\n        if (var != null && !referencedDefs.contains(new AstFunctionCall(var))) {\n          argList.removeChild(param);\n          compiler.reportCodeChange();\n        }\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referencedDefs);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4de360ef 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,38 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Remove any unreferenced formal parameters from functions.\n+private void removeUnreferencedFunctionArgs(\n+  Scope fnScope, \n+  Set<AstFunctionCall> referencedDefs\n+) {\n+  Node function = fnScope.getRootNode();\n+  Preconditions.checkState(function.isFunction());\n+  \n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers = modifyCallSites\n+      && callSiteOptimizer.canModifyCallers(function);\n+  if (!modifyCallers) {\n+    List<Node> params = Lists.newArrayList(argList.children());\n+    for (int i = params.size() - 1; i >= 0; i--) {\n+      Node param = params.get(i);\n+      if (!NodeUtil.isVarArgs(param)) {\n+        Var var = fnScope.getVar(param.getString());\n+        if (var != null && !referencedDefs.contains(new AstFunctionCall(var))) {\n+          argList.removeChild(param);\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referencedDefs);\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}