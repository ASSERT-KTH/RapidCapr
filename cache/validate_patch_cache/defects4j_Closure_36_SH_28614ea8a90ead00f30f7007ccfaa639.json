{
    "patch": "CodingConvention convention = compiler.getCodingConvention();\n\nif (reference.getParent().isGetProp()) {\n  String className = convention.getSingletonGetterClassName(\n      reference.getParent().getFirstChild());\n\n  if (className != null) {\n    return false;\n  }\n} else {\n  Node callNode = reference.getParent();\n  if (callNode.isCall()) {\n    String className = convention.getSingletonGetterClassName(callNode);\n    if (className != null) {\n      return false;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..f1cb5bc6 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,24 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+CodingConvention convention = compiler.getCodingConvention();\n+\n+if (reference.getParent().isGetProp()) {\n+  String className = convention.getSingletonGetterClassName(\n+      reference.getParent().getFirstChild());\n+\n+  if (className != null) {\n+    return false;\n+  }\n+} else {\n+  Node callNode = reference.getParent();\n+  if (callNode.isCall()) {\n+    String className = convention.getSingletonGetterClassName(callNode);\n+    if (className != null) {\n+      return false;\n+    }\n+  }\n+}\n         }\n       }\n ",
    "result_reason": "error: variable convention is already defined in method canInline(Reference,Reference,Reference)",
    "test_result": "ERROR"
}