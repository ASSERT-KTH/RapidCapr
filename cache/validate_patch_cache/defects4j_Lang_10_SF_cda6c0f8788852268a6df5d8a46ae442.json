{
    "patch": "import java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class DateParser {\n    \n    private static SimpleDateFormat SDF = new SimpleDateFormat(\"yyyy/MM/dd\");\n    private static SimpleDateFormat DSDF = new SimpleDateFormat(\"dd/MMM/yyyy\");\n    \n    public static Date parseDate(String dateStr) {\n        Date date;\n        try {\n            date = SDF.parse(dateStr);\n        } catch (ParseException e) {\n            try {\n                date = DSDF.parse(dateStr);\n            } catch (ParseException e1) {\n                date = null;\n            }\n        }\n        return date;\n    }\n\n    public static void main(String[] args) {\n        String dateStr = \"1970/03/02\";\n        Date dsdf = null;\n        try {\n            dsdf = SDF.parse(dateStr);\n        } catch (ParseException e) {\n            System.out.println(\"Exception: \" + e.getMessage());\n        }\n        String dfdpStr = \"02/Mar/1970\";\n        Date dfdp = DateParser.parseDate(dfdpStr);\n        System.out.println(dsdf);\n        System.out.println(dfdp);\n        assert(dsdf.equals(dfdp));\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..fb73e4df 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,48 +300,46 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+public class DateParser {\n+    \n+    private static SimpleDateFormat SDF = new SimpleDateFormat(\"yyyy/MM/dd\");\n+    private static SimpleDateFormat DSDF = new SimpleDateFormat(\"dd/MMM/yyyy\");\n+    \n+    public static Date parseDate(String dateStr) {\n+        Date date;\n+        try {\n+            date = SDF.parse(dateStr);\n+        } catch (ParseException e) {\n+            try {\n+                date = DSDF.parse(dateStr);\n+            } catch (ParseException e1) {\n+                date = null;\n             }\n-            regex.append(c);\n         }\n-        return regex;\n+        return date;\n+    }\n+\n+    public static void main(String[] args) {\n+        String dateStr = \"1970/03/02\";\n+        Date dsdf = null;\n+        try {\n+            dsdf = SDF.parse(dateStr);\n+        } catch (ParseException e) {\n+            System.out.println(\"Exception: \" + e.getMessage());\n+        }\n+        String dfdpStr = \"02/Mar/1970\";\n+        Date dfdp = DateParser.parseDate(dfdpStr);\n+        System.out.println(dsdf);\n+        System.out.println(dfdp);\n+        assert(dsdf.equals(dfdp));\n     }\n \n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}