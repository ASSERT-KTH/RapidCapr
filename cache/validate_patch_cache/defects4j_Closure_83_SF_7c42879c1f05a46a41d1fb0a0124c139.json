{
    "patch": "        String param = null;\n        try {\n            param = params.getParameter(0);\n        } catch (CmdLineException e) {\n            // if no parameter is provided, set default value as true\n            setter.addValue(true);\n            return 0;\n        }\n\n        if (param == null) {\n          // if parameter is null, set default value as true\n          setter.addValue(true);\n          return 0;\n        } else {\n          String lowerParam = param.toLowerCase();\n          if (TRUES.contains(lowerParam)) {\n            setter.addValue(true);\n          } else if (FALSES.contains(lowerParam)) {\n            setter.addValue(false);\n          } else {\n            // if parameter has invalid value, set default value as true\n            setter.addValue(true);\n            return 0;\n          }\n          return 1;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex f146b0e4..d32146f2 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -330,10 +330,17 @@ public class CommandLineRunner extends\n       }\n \n       @Override\n-      public int parseArguments(Parameters params) throws CmdLineException {\n-        String param = params.getParameter(0);\n+        String param = null;\n+        try {\n+            param = params.getParameter(0);\n+        } catch (CmdLineException e) {\n+            // if no parameter is provided, set default value as true\n+            setter.addValue(true);\n+            return 0;\n+        }\n \n         if (param == null) {\n+          // if parameter is null, set default value as true\n           setter.addValue(true);\n           return 0;\n         } else {\n@@ -343,12 +350,12 @@ public class CommandLineRunner extends\n           } else if (FALSES.contains(lowerParam)) {\n             setter.addValue(false);\n           } else {\n+            // if parameter has invalid value, set default value as true\n             setter.addValue(true);\n             return 0;\n           }\n           return 1;\n         }\n-      }\n \n       @Override\n       public String getDefaultMetaVariable() {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}