{
    "patch": "    if (parent != null && parent.getType() == Token.CATCH) {\n      defineCatch(n, parent);\n      return;\n    }\n\n    attachLiteralTypes(n);\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (parent.getType() == Token.NAME) {\n          return;\n        } else if (NodeUtil.isExpressionResultUsed(n, parent)) { // add this line\n          defineFunctionExpressionInExpressionContext(n, parent);\n        } else {\n          defineDeclaredFunction(n, parent);\n        }\n\n        break;\n      case Token.CALL:\n        enterCallNode(n, parent);\n        break;\n      case Token.NAME:\n        if (NodeUtil.isFunctionDeclaration(n) && !NodeUtil.isStatement(parent)) {\n          defineDeclaredFunction(n, parent);\n        }\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      case Token.LP:\n        if (NodeUtil.isFunctionExpression(parent)) {\n          handleFunctionInputs(n); // modified this line\n        }\n        break;\n      default:\n        break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..efd42d7e 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,41 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n+    if (parent != null && parent.getType() == Token.CATCH) {\n+      defineCatch(n, parent);\n+      return;\n+    }\n+\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        if (parent.getType() == Token.NAME) {\n+          return;\n+        } else if (NodeUtil.isExpressionResultUsed(n, parent)) { // add this line\n+          defineFunctionExpressionInExpressionContext(n, parent);\n+        } else {\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+\n+        break;\n+      case Token.CALL:\n+        enterCallNode(n, parent);\n+        break;\n+      case Token.NAME:\n+        if (NodeUtil.isFunctionDeclaration(n) && !NodeUtil.isStatement(parent)) {\n+          defineDeclaredFunction(n, parent);\n+        }\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      case Token.LP:\n+        if (NodeUtil.isFunctionExpression(parent)) {\n+          handleFunctionInputs(n); // modified this line\n+        }\n+        break;\n+      default:\n+        break;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}