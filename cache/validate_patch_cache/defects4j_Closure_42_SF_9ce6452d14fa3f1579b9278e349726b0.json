{
    "patch": "import org.mozilla.javascript.ErrorReporter;\nimport org.mozilla.javascript.NodeTransformer;\nimport org.mozilla.javascript.ast.*;\n\npublic class MyIRFactory extends NodeTransformer implements ErrorReporter, TypeSafeDispatcher {\n\n    // fields and constructor\n\n    @Override\n    public Node processBreakStatement(BreakStatement statementNode) {\n        Node node = new Node(Token.BREAK);\n        if (statementNode.getBreakLabel() != null) {\n            Node labelName = transform(statementNode.getBreakLabel());\n            // Change the NAME to LABEL_NAME\n            labelName.setType(Token.LABEL_NAME);\n            node.addChildToBack(labelName);\n        }\n        return node;\n    }\n\n    @Override\n    public Node processCatchClause(CatchClause clauseNode) {\n        AstNode catchVar = clauseNode.getVarName();\n        Node node = new Node(Token.CATCH, transform(catchVar));\n        if (clauseNode.getCatchCondition() != null) {\n            error(\n                    \"Catch clauses are not supported\",\n                    sourceName,\n                    clauseNode.getCatchCondition().getLineno(), \"\", 0);\n        }\n        node.addChildToBack(transformBlock(clauseNode.getBody()));\n        return node;\n    }\n\n    @Override\n    public Node processConditionalExpression(ConditionalExpression exprNode) {\n        return new Node(\n                Token.HOOK,\n                transform(exprNode.getTestExpression()),\n                transform(exprNode.getTrueExpression()),\n                transform(exprNode.getFalseExpression()));\n    }\n\n    @Override\n    public Node processContinueStatement(ContinueStatement statementNode) {\n        Node node = new Node(Token.CONTINUE);\n        if (statementNode.getLabel() != null) {\n            Node labelName = transform(statementNode.getLabel());\n            // Change the NAME to LABEL_NAME\n            labelName.setType(Token.LABEL_NAME);\n            node.addChildToBack(labelName);\n        }\n        return node;\n    }\n\n    @Override\n    public Node processDoLoop(DoLoop loopNode) {\n        return new Node(\n                Token.DO,\n                transformBlock(loopNode.getBody()),\n                transform(loopNode.getCondition()));\n    }\n\n    @Override\n    public Node processElementGet(ElementGet getNode) {\n        return new Node(\n                Token.GETELEM,\n                transform(getNode.getTarget()),\n                transform(getNode.getElement()));\n    }\n\n    @Override\n    public Node processEmptyExpression(EmptyExpression exprNode) {\n        Node node = new Node(Token.EMPTY);\n        return node;\n    }\n\n    @Override\n    public Node processExpressionStatement(ExpressionStatement statementNode) {\n        Node node = new Node(transformTokenType(statementNode.getType()));\n        node.addChildToBack(transform(statementNode.getExpression()));\n        return node;\n    }\n\n    @Override\n    public Node processForInLoop(ForInLoop loopNode) {\n        // Return the bare minimum to put the AST in a valid state.\n        return new Node(\n                Token.FOR,\n                transform(loopNode.getIterator()),\n                transform(loopNode.getIteratedObject()),\n                transformBlock(loopNode.getBody()));\n    }\n\n    // other methods\n\n    @Override\n    public boolean isDirective(Node n) {\n        if (n == null) return false;\n\n        int nType = n.getType();\n        return nType == Token.EXPR_RESULT &&\n                n.getFirstChild().isString() &&\n                ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n\n    @Override\n    public boolean hasSideEffects(AstNode node) {\n        return super.hasSideEffects(node);\n    }\n\n    @Override\n    public int transformCall(Node node, int index, CallI callI) {\n        // Transform the call expression by calling `transform` on the arguments.\n        for (int i = 0; i < callI.getArgs().size(); ++i) {\n            callI.getArgs().set(i, transform(callI.getArgs().get(i)));\n        }\n        return index;\n    }\n\n    @Override\n    public int transformArrayLiteral(Node node, int index, ArrayLiteralI arrayLiteralI) {\n        // Transform the elements by calling `transform` on each element.\n        for (int i = 0; i < arrayLiteralI.getElements().size(); ++i) {\n            arrayLiteralI.getElements().set(i, transform(arrayLiteralI.getElements().get(i)));\n        }\n        return index;\n    }\n\n    @Override\n    public int transformCatch(Node node, int index, CatchI catchI) {\n        // Transform the statements in the `catch` block by calling `transform` on them.\n        if (catchI.getBlock() != null) {\n            catchI.setBlock((Block) transform(catchI.getBlock()));\n        }\n        return index;\n    }\n\n    @Override\n    public int transformFunction(Node node, int index, FunctionI functionI) {\n        // Transform the statements in the function body by calling `transform` on them.\n        if (functionI.getBody() != null) {\n            functionI.setBody((AstNode) transform(functionI.getBody()));\n        }\n        // Transform the parameters by calling `transform` on them.\n        for (int i = 0; i < functionI.getParams().size(); ++i) {\n            functionI.getParams().set(i, transform(functionI.getParams().get(i)));\n        }\n        return index;\n    }\n\n    @Override\n    public int transformName(Node node, int index, NameI nameI) {\n        return index;\n    }\n\n    @Override\n    public int transformNew(Node node, int index, NewI newI) {\n        // Transform the call expression by calling `transform` on the arguments.\n        for (int i = 0; i < newI.getArguments().size(); ++i) {\n            newI.getArguments().set(i, transform(newI.getArguments().get(i)));\n        }\n        return index;\n    }\n\n    @Override\n    public int transformObjectLiteral(Node node, int index, ObjectLiteralI objectLiteralI) {\n        // Transform the keys and values in each property by calling `transform` on them.\n        for (ObjectProperty property : objectLiteralI.getElements()) {\n            ((AstNode) property.getLeft()).setParent(null);\n            ((AstNode) property.getRight()).setParent(null);\n            property.setLeft(transform((AstNode) property.getLeft()));\n            property.setRight(transform((AstNode) property.getRight()));\n            ((AstNode) property.getLeft()).setParent(property);\n            ((AstNode) property.getRight()).setParent(property);\n        }\n        return index;\n    }\n\n    @Override\n    public int transformPropertyGet(Node node, int index, PropertyGetI propertyGetI) {\n        propertyGetI.setTarget(transform(propertyGetI.getTarget()));\n        return index;\n    }\n\n    @Override\n    public int transformVariable(Node node, int index, VariableI variableI) {\n        // Transform the initializer by calling `transform` on it.\n        if (variableI.getInitializer() != null) {\n            variableI.setInitializer(transform(variableI.getInitializer()));\n        }\n        return index;\n    }\n\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..7692feef 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,107 +473,202 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+import org.mozilla.javascript.ErrorReporter;\n+import org.mozilla.javascript.NodeTransformer;\n+import org.mozilla.javascript.ast.*;\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+public class MyIRFactory extends NodeTransformer implements ErrorReporter, TypeSafeDispatcher {\n+\n+    // fields and constructor\n+\n+    @Override\n+    public Node processBreakStatement(BreakStatement statementNode) {\n+        Node node = new Node(Token.BREAK);\n+        if (statementNode.getBreakLabel() != null) {\n+            Node labelName = transform(statementNode.getBreakLabel());\n+            // Change the NAME to LABEL_NAME\n+            labelName.setType(Token.LABEL_NAME);\n+            node.addChildToBack(labelName);\n+        }\n+        return node;\n     }\n \n     @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+    public Node processCatchClause(CatchClause clauseNode) {\n+        AstNode catchVar = clauseNode.getVarName();\n+        Node node = new Node(Token.CATCH, transform(catchVar));\n+        if (clauseNode.getCatchCondition() != null) {\n+            error(\n+                    \"Catch clauses are not supported\",\n+                    sourceName,\n+                    clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+        }\n+        node.addChildToBack(transformBlock(clauseNode.getBody()));\n+        return node;\n     }\n \n     @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    public Node processConditionalExpression(ConditionalExpression exprNode) {\n+        return new Node(\n+                Token.HOOK,\n+                transform(exprNode.getTestExpression()),\n+                transform(exprNode.getTrueExpression()),\n+                transform(exprNode.getFalseExpression()));\n     }\n \n     @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+    public Node processContinueStatement(ContinueStatement statementNode) {\n+        Node node = new Node(Token.CONTINUE);\n+        if (statementNode.getLabel() != null) {\n+            Node labelName = transform(statementNode.getLabel());\n+            // Change the NAME to LABEL_NAME\n+            labelName.setType(Token.LABEL_NAME);\n+            node.addChildToBack(labelName);\n+        }\n+        return node;\n     }\n \n     @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+    public Node processDoLoop(DoLoop loopNode) {\n+        return new Node(\n+                Token.DO,\n+                transformBlock(loopNode.getBody()),\n+                transform(loopNode.getCondition()));\n     }\n \n     @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    public Node processElementGet(ElementGet getNode) {\n+        return new Node(\n+                Token.GETELEM,\n+                transform(getNode.getTarget()),\n+                transform(getNode.getElement()));\n     }\n \n     @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+    public Node processEmptyExpression(EmptyExpression exprNode) {\n+        Node node = new Node(Token.EMPTY);\n+        return node;\n     }\n \n     @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+    public Node processExpressionStatement(ExpressionStatement statementNode) {\n+        Node node = new Node(transformTokenType(statementNode.getType()));\n+        node.addChildToBack(transform(statementNode.getExpression()));\n+        return node;\n     }\n \n     @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+    public Node processForInLoop(ForInLoop loopNode) {\n+        // Return the bare minimum to put the AST in a valid state.\n+        return new Node(\n+                Token.FOR,\n+                transform(loopNode.getIterator()),\n+                transform(loopNode.getIteratedObject()),\n+                transformBlock(loopNode.getBody()));\n     }\n \n+    // other methods\n+\n     @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+    public boolean isDirective(Node n) {\n+        if (n == null) return false;\n+\n+        int nType = n.getType();\n+        return nType == Token.EXPR_RESULT &&\n+                n.getFirstChild().isString() &&\n+                ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n     }\n \n     @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+    public boolean hasSideEffects(AstNode node) {\n+        return super.hasSideEffects(node);\n+    }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+    @Override\n+    public int transformCall(Node node, int index, CallI callI) {\n+        // Transform the call expression by calling `transform` on the arguments.\n+        for (int i = 0; i < callI.getArgs().size(); ++i) {\n+            callI.getArgs().set(i, transform(callI.getArgs().get(i)));\n+        }\n+        return index;\n     }\n \n+    @Override\n+    public int transformArrayLiteral(Node node, int index, ArrayLiteralI arrayLiteralI) {\n+        // Transform the elements by calling `transform` on each element.\n+        for (int i = 0; i < arrayLiteralI.getElements().size(); ++i) {\n+            arrayLiteralI.getElements().set(i, transform(arrayLiteralI.getElements().get(i)));\n+        }\n+        return index;\n+    }\n+\n+    @Override\n+    public int transformCatch(Node node, int index, CatchI catchI) {\n+        // Transform the statements in the `catch` block by calling `transform` on them.\n+        if (catchI.getBlock() != null) {\n+            catchI.setBlock((Block) transform(catchI.getBlock()));\n+        }\n+        return index;\n+    }\n+\n+    @Override\n+    public int transformFunction(Node node, int index, FunctionI functionI) {\n+        // Transform the statements in the function body by calling `transform` on them.\n+        if (functionI.getBody() != null) {\n+            functionI.setBody((AstNode) transform(functionI.getBody()));\n+        }\n+        // Transform the parameters by calling `transform` on them.\n+        for (int i = 0; i < functionI.getParams().size(); ++i) {\n+            functionI.getParams().set(i, transform(functionI.getParams().get(i)));\n+        }\n+        return index;\n+    }\n+\n+    @Override\n+    public int transformName(Node node, int index, NameI nameI) {\n+        return index;\n+    }\n+\n+    @Override\n+    public int transformNew(Node node, int index, NewI newI) {\n+        // Transform the call expression by calling `transform` on the arguments.\n+        for (int i = 0; i < newI.getArguments().size(); ++i) {\n+            newI.getArguments().set(i, transform(newI.getArguments().get(i)));\n+        }\n+        return index;\n+    }\n+\n+    @Override\n+    public int transformObjectLiteral(Node node, int index, ObjectLiteralI objectLiteralI) {\n+        // Transform the keys and values in each property by calling `transform` on them.\n+        for (ObjectProperty property : objectLiteralI.getElements()) {\n+            ((AstNode) property.getLeft()).setParent(null);\n+            ((AstNode) property.getRight()).setParent(null);\n+            property.setLeft(transform((AstNode) property.getLeft()));\n+            property.setRight(transform((AstNode) property.getRight()));\n+            ((AstNode) property.getLeft()).setParent(property);\n+            ((AstNode) property.getRight()).setParent(property);\n+        }\n+        return index;\n+    }\n+\n+    @Override\n+    public int transformPropertyGet(Node node, int index, PropertyGetI propertyGetI) {\n+        propertyGetI.setTarget(transform(propertyGetI.getTarget()));\n+        return index;\n+    }\n+\n+    @Override\n+    public int transformVariable(Node node, int index, VariableI variableI) {\n+        // Transform the initializer by calling `transform` on it.\n+        if (variableI.getInitializer() != null) {\n+            variableI.setInitializer(transform(variableI.getInitializer()));\n+        }\n+        return index;\n+    }\n+\n+}\n+\n     @Override\n     Node processForLoop(ForLoop loopNode) {\n       Node node = newNode(",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}