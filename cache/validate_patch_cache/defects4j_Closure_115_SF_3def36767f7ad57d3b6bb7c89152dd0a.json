{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(\n          Node callNode, Node fnNode) {\n      if (!isDirectCallNodeReplacementPossible(fnNode)) {\n          return CanInlineResult.NO;\n      }\n\n      Node block = fnNode.getLastChild();\n      boolean hasSideEffects = false;\n\n      if (block.hasChildren()) {\n          Preconditions.checkState(block.hasOneChild());\n          Node stmt = block.getFirstChild();\n          if (stmt.isReturn()) {\n              hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(),\n                      compiler);\n          }\n      }\n      // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n      Node cArg = callNode.getFirstChild().getNext();\n\n      // FUNCTIONS CALLED VIA 'call' AND 'apply' HAVE A THIS-OBJECT AS\n      // THE FIRST PARAMETER, BUT THIS IS NOT PART OF THE CALLED FUNCTION'S\n      // PARAMETER LIST.\n      if (!callNode.getFirstChild().isName()) {\n          if (NodeUtil.isFunctionObjectCall(callNode)) {\n              // TODO(johnlenz): Support replace this with a value.\n              if (cArg == null || !cArg.isThis()) {\n                  return CanInlineResult.NO;\n              }\n              cArg = cArg.getNext();\n          } else {\n              // \".apply\" call should be filtered before this.\n              Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n          }\n      }\n\n      // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n      Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n      while (cArg != null || fnParam != null) {\n          // IF we go over all of the function parameters and there are more arguments,\n          // then the Args object is being used instead of the defined parameters.\n          if (fnParam == null) {\n              return CanInlineResult.NO;\n          }\n\n          if (cArg != null) {\n              if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n                  return CanInlineResult.NO;\n              }\n\n              if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n                  return CanInlineResult.NO;\n              }\n\n              if (isAnyParameterMutated(fnParam, cArg)) {\n                  return CanInlineResult.NO;\n              }\n\n              cArg = cArg.getNext();\n          }\n\n          // Move to the next name.\n          fnParam = fnParam.getNext();\n      }\n\n      return CanInlineResult.YES;\n  }\n\n  private boolean isAnyParameterMutated(Node fnParam, Node cArg) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return true;\n      }\n\n      if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n          if (isEnclosedInLoop(fnParam)) {\n              return true;\n          }\n\n          Node block = getParentControlStructure(fnParam);\n          if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n              return true;\n          }\n      }\n\n      return false;\n  }\n\n  // Get the control structure that encloses the given variable definition\n  private Node getParentControlStructure(Node node) {\n      while (node != null) {\n          Node parent = node.getParent();\n          if (parent == null) {\n              break;\n          }\n          if (NodeUtil.isControlStructure(parent)) {\n              return parent;\n          } else {\n              node = parent;\n          }\n      }\n\n      return null;\n  }\n\n  // Check that the variable declaration is in the loop.\n  private boolean isEnclosedInLoop(Node node) {\n      while (node != null) {\n          Node parent = node.getParent();\n          if (parent == null) {\n              break;\n          }\n          if (NodeUtil.isLoopStructure(parent)) {\n              return true;\n          } else if (parent.isFunction()) {\n              break;\n          } else {\n              node = parent;\n          }\n      }\n\n      return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..243b0319 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -687,74 +687,126 @@ class FunctionInjector {\n    * </pre>\n    */\n   private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+          Node callNode, Node fnNode) {\n+      if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+          return CanInlineResult.NO;\n+      }\n \n-    Node block = fnNode.getLastChild();\n+      Node block = fnNode.getLastChild();\n+      boolean hasSideEffects = false;\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n+      if (block.hasChildren()) {\n+          Preconditions.checkState(block.hasOneChild());\n+          Node stmt = block.getFirstChild();\n+          if (stmt.isReturn()) {\n+              hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(),\n+                      compiler);\n+          }\n+      }\n+      // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+      Node cArg = callNode.getFirstChild().getNext();\n+\n+      // FUNCTIONS CALLED VIA 'call' AND 'apply' HAVE A THIS-OBJECT AS\n+      // THE FIRST PARAMETER, BUT THIS IS NOT PART OF THE CALLED FUNCTION'S\n+      // PARAMETER LIST.\n+      if (!callNode.getFirstChild().isName()) {\n+          if (NodeUtil.isFunctionObjectCall(callNode)) {\n+              // TODO(johnlenz): Support replace this with a value.\n+              if (cArg == null || !cArg.isThis()) {\n+                  return CanInlineResult.NO;\n+              }\n+              cArg = cArg.getNext();\n+          } else {\n+              // \".apply\" call should be filtered before this.\n+              Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+          }\n       }\n-    }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+      // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+      Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+      while (cArg != null || fnParam != null) {\n+          // IF we go over all of the function parameters and there are more arguments,\n+          // then the Args object is being used instead of the defined parameters.\n+          if (fnParam == null) {\n+              return CanInlineResult.NO;\n+          }\n+\n+          if (cArg != null) {\n+              if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n+                  return CanInlineResult.NO;\n+              }\n+\n+              if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+                  return CanInlineResult.NO;\n+              }\n+\n+              if (isAnyParameterMutated(fnParam, cArg)) {\n+                  return CanInlineResult.NO;\n+              }\n+\n+              cArg = cArg.getNext();\n+          }\n+\n+          // Move to the next name.\n+          fnParam = fnParam.getNext();\n       }\n-    }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n+      return CanInlineResult.YES;\n+  }\n+\n+  private boolean isAnyParameterMutated(Node fnParam, Node cArg) {\n+      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+          return true;\n+      }\n+\n+      if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n+          if (isEnclosedInLoop(fnParam)) {\n+              return true;\n           }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n+\n+          Node block = getParentControlStructure(fnParam);\n+          if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n+              return true;\n           }\n-        }\n+      }\n+\n+      return false;\n+  }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+  // Get the control structure that encloses the given variable definition\n+  private Node getParentControlStructure(Node node) {\n+      while (node != null) {\n+          Node parent = node.getParent();\n+          if (parent == null) {\n+              break;\n+          }\n+          if (NodeUtil.isControlStructure(parent)) {\n+              return parent;\n+          } else {\n+              node = parent;\n+          }\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+      return null;\n+  }\n+\n+  // Check that the variable declaration is in the loop.\n+  private boolean isEnclosedInLoop(Node node) {\n+      while (node != null) {\n+          Node parent = node.getParent();\n+          if (parent == null) {\n+              break;\n+          }\n+          if (NodeUtil.isLoopStructure(parent)) {\n+              return true;\n+          } else if (parent.isFunction()) {\n+              break;\n+          } else {\n+              node = parent;\n+          }\n       }\n-    }\n \n-    return CanInlineResult.YES;\n+      return false;\n   }\n \n   /**",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}