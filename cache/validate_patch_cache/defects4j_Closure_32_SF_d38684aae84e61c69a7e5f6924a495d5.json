{
    "patch": "private void tagsValidToExtractionTestImpl(boolean enableTypeParsing) {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT_NEXT);\n    options.setLanguageOut(LanguageMode.ECMASCRIPT_NEXT);\n    options.setWarningLevel(DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.OFF);\n\n    Compiler compiler = new Compiler();\n    compiler.disableThreads();\n    compiler.initOptions(options);\n    JsDocParser parser = new JsDocParser(compiler);\n    parser.setProcessInlineTags(true);\n    parser.setTypeParserEnabled(enableTypeParsing);\n    DiagnosticType[] warningTypes = {DiagnosticType.JSC_HIDDEN_SUPERCLASS_PROPERTY};\n\n    String jsdoc = \"param bar\";\n    String code = \"\"\n            + \"class Foo {}\\n\"\n            + \"/** @extends Foo\\n\" \n            + \"  * @param {number} bar\\n\"\n            + \"  */\\n\"\n            + \"class Baz extends Foo { }\\n\"\n            + \"\"\n            + \"var x = new Baz();\\n\"\n            + \"x.bar = 123;\\n\"\n            + \"alert(x.bar);\\n\";\n\n    List<SourceFile> inputs = ImmutableList.of(SourceFile.fromCode(\"testcode\", code));\n\n    CompilerOptions compilerOptions = createCompilerOptions();\n    for (DiagnosticType warningType : warningTypes) {\n        compilerOptions.setWarningLevel(warningType.diagnosticGroup, CheckLevel.OFF);\n    }\n\n    Result result = compiler.compile(inputs, ImmutableList.of(), compilerOptions);\n    assertFalse(result.errors.length > 0);\n\n    // If the type parser is enabled, then we want to validate that the code was properly typed.\n    if (enableTypeParsing) {\n        JSTypeRegistry registry = compiler.getTypeRegistry();\n        JSType expectedType = registry.getNativeType(NUMBER_TYPE);\n\n        Node scriptNode = compiler.parse(inputs.get(0));\n        Node barNode = NodeUtil.getFirstPropMatchingKey(\n                NodeUtil.getFunctionParameters(scriptNode.getFirstChild()), \"bar\");\n        assertNotNull(barNode);\n        assertEquals(expectedType, barNode.getJSType());\n    }\n\n    String lastCompiledCode = compiler.toSource();\n    assertFalse(Pattern.compile(\"throw _.+ ;\").matcher(lastCompiledCode).find());\n\n    // Suppress the warning message before checking the compile result.\n    @SuppressWarnings(\"JSC_HIDDEN_SUPERCLASS_PROPERTY\")\n    Result compare = new CommandLineRunner.Builder()\n            .withSourceInputs(inputs)\n            .build()\n            .compareWithExpected(Collections.singletonList(lastCompiledCode), null, null, null, null, null);\n    assertEquals(compare.globalMessage, Collections.emptyList(), compare.errors);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..fa27364f 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,107 +1326,65 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n-\n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n+private void tagsValidToExtractionTestImpl(boolean enableTypeParsing) {\n+    CompilerOptions options = createCompilerOptions();\n+    options.setLanguageIn(LanguageMode.ECMASCRIPT_NEXT);\n+    options.setLanguageOut(LanguageMode.ECMASCRIPT_NEXT);\n+    options.setWarningLevel(DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.OFF);\n+\n+    Compiler compiler = new Compiler();\n+    compiler.disableThreads();\n+    compiler.initOptions(options);\n+    JsDocParser parser = new JsDocParser(compiler);\n+    parser.setProcessInlineTags(true);\n+    parser.setTypeParserEnabled(enableTypeParsing);\n+    DiagnosticType[] warningTypes = {DiagnosticType.JSC_HIDDEN_SUPERCLASS_PROPERTY};\n+\n+    String jsdoc = \"param bar\";\n+    String code = \"\"\n+            + \"class Foo {}\\n\"\n+            + \"/** @extends Foo\\n\" \n+            + \"  * @param {number} bar\\n\"\n+            + \"  */\\n\"\n+            + \"class Baz extends Foo { }\\n\"\n+            + \"\"\n+            + \"var x = new Baz();\\n\"\n+            + \"x.bar = 123;\\n\"\n+            + \"alert(x.bar);\\n\";\n+\n+    List<SourceFile> inputs = ImmutableList.of(SourceFile.fromCode(\"testcode\", code));\n+\n+    CompilerOptions compilerOptions = createCompilerOptions();\n+    for (DiagnosticType warningType : warningTypes) {\n+        compilerOptions.setWarningLevel(warningType.diagnosticGroup, CheckLevel.OFF);\n     }\n \n-    stream.update();\n-    int startLineno = stream.getLineno();\n-    int startCharno = stream.getCharno() + 1;\n-\n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n-    if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n-    }\n-\n-    StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n-\n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n-\n-    boolean ignoreStar = false;\n-\n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n-\n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n-\n-            builder.append('*');\n-          }\n-\n-          token = next();\n-          continue;\n+    Result result = compiler.compile(inputs, ImmutableList.of(), compilerOptions);\n+    assertFalse(result.errors.length > 0);\n \n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n+    // If the type parser is enabled, then we want to validate that the code was properly typed.\n+    if (enableTypeParsing) {\n+        JSTypeRegistry registry = compiler.getTypeRegistry();\n+        JSType expectedType = registry.getNativeType(NUMBER_TYPE);\n \n-          ignoreStar = true;\n-          token = next();\n-          continue;\n-\n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n-\n-              // All tokens must be separated by a space.\n-\n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n-\n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n-\n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n-\n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n-\n-            return new ExtractionInfo(multilineText, token);\n-          }\n-\n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n-\n-          line = stream.getRemainingJSDocLine();\n+        Node scriptNode = compiler.parse(inputs.get(0));\n+        Node barNode = NodeUtil.getFirstPropMatchingKey(\n+                NodeUtil.getFunctionParameters(scriptNode.getFirstChild()), \"bar\");\n+        assertNotNull(barNode);\n+        assertEquals(expectedType, barNode.getJSType());\n+    }\n \n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n+    String lastCompiledCode = compiler.toSource();\n+    assertFalse(Pattern.compile(\"throw _.+ ;\").matcher(lastCompiledCode).find());\n \n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n-  }\n+    // Suppress the warning message before checking the compile result.\n+    @SuppressWarnings(\"JSC_HIDDEN_SUPERCLASS_PROPERTY\")\n+    Result compare = new CommandLineRunner.Builder()\n+            .withSourceInputs(inputs)\n+            .build()\n+            .compareWithExpected(Collections.singletonList(lastCompiledCode), null, null, null, null, null);\n+    assertEquals(compare.globalMessage, Collections.emptyList(), compare.errors);\n+}\n \n \n   /**",
    "result_reason": "error: method extractMultilineTextualBlock in class JsDocInfoParser cannot be applied to given types;",
    "test_result": "ERROR"
}