{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n    for (Field field : fields) {\n        try {\n            Object fieldValue = field.get(fieldInstance);\n            if (fieldValue != null && fieldValue.getClass().equals(field.getType())) {\n                // skip when field is already set with the same type\n                continue;\n            }\n            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n            if (mockCandidate != null) {\n                field.setAccessible(true);\n                field.set(fieldInstance, mockCandidate);\n            }\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"Could not access field \" + field.getName(), e);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..77e1a69d6 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,26 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n+    for (Field field : fields) {\n+        try {\n+            Object fieldValue = field.get(fieldInstance);\n+            if (fieldValue != null && fieldValue.getClass().equals(field.getType())) {\n+                // skip when field is already set with the same type\n+                continue;\n+            }\n+            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            if (mockCandidate != null) {\n+                field.setAccessible(true);\n+                field.set(fieldInstance, mockCandidate);\n+            }\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"Could not access field \" + field.getName(), e);\n+        }\n+    }\n+}\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}