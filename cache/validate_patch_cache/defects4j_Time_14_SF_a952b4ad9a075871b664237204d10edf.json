{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        try {\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } catch (IllegalFieldValueException e) {\n            // The following handles the issue with Feb 29th\n            if (DateTimeFieldType.monthOfYear().getField(iChronology).get(instant) == 2 && \n                DateTimeFieldType.dayOfMonth().getField(iChronology).get(instant) == 29 && \n                DateTimeFieldType.monthOfYear().getField(iChronology).add(instant, 1) == instant + 1) {\n                instant = iChronology.monthOfYear().set(instant, 3);\n                instant = iChronology.dayOfMonth().set(instant, 1);\n                instant = add(instant, (valueToAdd < 0 ? valueToAdd + 1 : valueToAdd));\n                instant = iChronology.dayOfMonth().add(instant, -1);\n                return iChronology.get(partial, instant);\n            } else {\n                throw e;\n            }\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..d1a5286b 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,39 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n+        try {\n             instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        } catch (IllegalFieldValueException e) {\n+            // The following handles the issue with Feb 29th\n+            if (DateTimeFieldType.monthOfYear().getField(iChronology).get(instant) == 2 && \n+                DateTimeFieldType.dayOfMonth().getField(iChronology).get(instant) == 29 && \n+                DateTimeFieldType.monthOfYear().getField(iChronology).add(instant, 1) == instant + 1) {\n+                instant = iChronology.monthOfYear().set(instant, 3);\n+                instant = iChronology.dayOfMonth().set(instant, 1);\n+                instant = add(instant, (valueToAdd < 0 ? valueToAdd + 1 : valueToAdd));\n+                instant = iChronology.dayOfMonth().add(instant, -1);\n+                return iChronology.get(partial, instant);\n+            } else {\n+                throw e;\n+            }\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}