{
    "patch": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CharacterCounter {\n\n    public static Map<String, Integer> countChars(String input) {\n        Map<String, Integer> result = new HashMap<>();\n        if (input == null || input.isEmpty()) {\n            return result;\n        }\n        for (int i = 0; i < input.length(); i++) {\n            String c = String.valueOf(input.charAt(i));\n            result.put(c, result.getOrDefault(c, 0) + 1);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Tests\n        String input = \"hello\";\n        Map<String, Integer> counts = countChars(input);\n        System.out.println(\"Input: \" + input);\n        System.out.println(\"Counts: \" + counts);\n        System.out.println(\"Expected: {h=1, e=1, l=2, o=1}\\n\");\n\n        input = \"world\";\n        counts = countChars(input);\n        System.out.println(\"Input: \" + input);\n        System.out.println(\"Counts: \" + counts);\n        System.out.println(\"Expected: {w=1, o=1, r=1, l=1, d=1}\\n\");\n\n        input = \"\";\n        counts = countChars(input);\n        System.out.println(\"Input: \" + input);\n        System.out.println(\"Counts: \" + counts);\n        System.out.println(\"Expected: {}\\n\");\n\n        input = null;\n        counts = countChars(input);\n        System.out.println(\"Input: \" + input);\n        System.out.println(\"Counts: \" + counts);\n        System.out.println(\"Expected: {}\\n\");\n    }\n\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..809b03c0f 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,51 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CharacterCounter {\n+\n+    public static Map<String, Integer> countChars(String input) {\n+        Map<String, Integer> result = new HashMap<>();\n+        if (input == null || input.isEmpty()) {\n+            return result;\n+        }\n+        for (int i = 0; i < input.length(); i++) {\n+            String c = String.valueOf(input.charAt(i));\n+            result.put(c, result.getOrDefault(c, 0) + 1);\n+        }\n+        return result;\n+    }\n+\n+    public static void main(String[] args) {\n+        // Tests\n+        String input = \"hello\";\n+        Map<String, Integer> counts = countChars(input);\n+        System.out.println(\"Input: \" + input);\n+        System.out.println(\"Counts: \" + counts);\n+        System.out.println(\"Expected: {h=1, e=1, l=2, o=1}\\n\");\n+\n+        input = \"world\";\n+        counts = countChars(input);\n+        System.out.println(\"Input: \" + input);\n+        System.out.println(\"Counts: \" + counts);\n+        System.out.println(\"Expected: {w=1, o=1, r=1, l=1, d=1}\\n\");\n+\n+        input = \"\";\n+        counts = countChars(input);\n+        System.out.println(\"Input: \" + input);\n+        System.out.println(\"Counts: \" + counts);\n+        System.out.println(\"Expected: {}\\n\");\n+\n+        input = null;\n+        counts = countChars(input);\n+        System.out.println(\"Input: \" + input);\n+        System.out.println(\"Counts: \" + counts);\n+        System.out.println(\"Expected: {}\\n\");\n+    }\n+\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}