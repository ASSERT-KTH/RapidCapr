{
    "patch": "/**\n * Returns the value of the specified system property.\n * If the property is not set, returns the specified default value.\n * If there was an error getting the property, returns null.\n */\npublic static String getprop(String key, String def) {\n    try {\n        String val = System.getProperty(key);\n        if (val == null) {\n            val = def;\n        }\n        return val;\n    } catch (RuntimeException ex) {\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..c7a70701 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+/**\n+ * Returns the value of the specified system property.\n+ * If the property is not set, returns the specified default value.\n+ * If there was an error getting the property, returns null.\n+ */\n+public static String getprop(String key, String def) {\n+    try {\n+        String val = System.getProperty(key);\n+        if (val == null) {\n+            val = def;\n+        }\n+        return val;\n+    } catch (RuntimeException ex) {\n+        return null;\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}