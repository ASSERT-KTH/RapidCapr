{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    if (meanImpl != null) {\n        meanImpl.increment(value);\n        if (meanImpl instanceof Mean) {\n            ((Mean) meanImpl).evaluate();\n        }\n    } else {\n        meanImpl = new Mean();\n        meanImpl.increment(value);\n    }\n\n    if (varianceImpl != null) {\n        varianceImpl.increment(value);\n        if (varianceImpl instanceof Variance) {\n            ((Variance) varianceImpl).evaluate();\n        }\n    } else {\n        varianceImpl = new Variance();\n        varianceImpl.increment(value);\n    }\n\n    if (geoMeanImpl != null) {\n        if (n == 0) {\n            geoMeanImpl = new GeometricMean();\n            n = 1;\n        }\n        geoMeanImpl.increment(value);\n        if (geoMeanImpl instanceof GeometricMean) {\n            try {\n                ((GeometricMean) geoMeanImpl).evaluate();\n            } catch (NullArgumentException e) {\n                double[] values = new double[n];\n                values[0] = geoMeanImpl.getResult();\n                geoMeanImpl = new GeometricMean();\n                geoMeanImpl.incrementAll(values);\n            }\n        }\n    } else {\n        geoMeanImpl = new GeometricMean();\n        geoMeanImpl.increment(value);\n    }\n\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..665760c0f 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,58 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    if (meanImpl != null) {\n+        meanImpl.increment(value);\n+        if (meanImpl instanceof Mean) {\n+            ((Mean) meanImpl).evaluate();\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+    } else {\n+        meanImpl = new Mean();\n+        meanImpl.increment(value);\n+    }\n+\n+    if (varianceImpl != null) {\n+        varianceImpl.increment(value);\n+        if (varianceImpl instanceof Variance) {\n+            ((Variance) varianceImpl).evaluate();\n+        }\n+    } else {\n+        varianceImpl = new Variance();\n+        varianceImpl.increment(value);\n+    }\n+\n+    if (geoMeanImpl != null) {\n+        if (n == 0) {\n+            geoMeanImpl = new GeometricMean();\n+            n = 1;\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+        geoMeanImpl.increment(value);\n+        if (geoMeanImpl instanceof GeometricMean) {\n+            try {\n+                ((GeometricMean) geoMeanImpl).evaluate();\n+            } catch (NullArgumentException e) {\n+                double[] values = new double[n];\n+                values[0] = geoMeanImpl.getResult();\n+                geoMeanImpl = new GeometricMean();\n+                geoMeanImpl.incrementAll(values);\n+            }\n         }\n-        n++;\n+    } else {\n+        geoMeanImpl = new GeometricMean();\n+        geoMeanImpl.increment(value);\n     }\n \n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}