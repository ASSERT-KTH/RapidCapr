{
    "patch": "ObjectType thisType = functionType.getTypeOfThis();\nif (thisType != null) {\n    Node callerNode = n.getParent();\n    if (callerNode.isGetProp() || callerNode.isGetElem()) {\n        ensureTyped(t, callerNode.getFirstChild(), thisType);\n    } else {\n        report(t, n, INVALID_THIS_TYPE);\n        ensureTyped(t, n);\n        return;\n    }\n}\n\nvisitParameterList(t, n, functionType);\n\n// Check the return type and coerce it to null if necessary.\nJSType returnType = functionType.getReturnType();\nif (returnType == null) {\n    returnType = getNativeType(VOID_TYPE).restrictByNotNullOrUndefined();\n} else if (returnType.isUnknownType()) {\n    returnType = getNativeType(NULL_TYPE);\n}\nensureTyped(t, n, returnType);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..8ac83e6a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+ObjectType thisType = functionType.getTypeOfThis();\n+if (thisType != null) {\n+    Node callerNode = n.getParent();\n+    if (callerNode.isGetProp() || callerNode.isGetElem()) {\n+        ensureTyped(t, callerNode.getFirstChild(), thisType);\n+    } else {\n+        report(t, n, INVALID_THIS_TYPE);\n+        ensureTyped(t, n);\n+        return;\n+    }\n+}\n+\n+visitParameterList(t, n, functionType);\n+\n+// Check the return type and coerce it to null if necessary.\n+JSType returnType = functionType.getReturnType();\n+if (returnType == null) {\n+    returnType = getNativeType(VOID_TYPE).restrictByNotNullOrUndefined();\n+} else if (returnType.isUnknownType()) {\n+    returnType = getNativeType(NULL_TYPE);\n+}\n+ensureTyped(t, n, returnType);\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}