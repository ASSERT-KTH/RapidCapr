{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lValue = parent.getFirstChild();\n        if (NodeUtil.isGet(lValue) && lValue.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        if (NodeUtil.isObjectLitKey(lValue, n) &&\n            NodeUtil.isGet(parent.getParent())) {\n          Node getProp = parent.getParent();\n          if (NodeUtil.isGet(getProp.getFirstChild()) &&\n              getProp.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n        if (NodeUtil.isObjectLitKey(lValue, n) &&\n            parent.getParent().getType() == Token.VAR &&\n            parent.getGrandparent() != null &&\n            parent.getGrandparent().getType() == Token.ASSIGN &&\n            NodeUtil.isGet(parent.getGrandparent().getFirstChild()) &&\n            parent.getGrandparent().getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..1c7fb48e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,29 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lValue = parent.getFirstChild();\n+        if (NodeUtil.isGet(lValue) && lValue.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        if (NodeUtil.isObjectLitKey(lValue, n) &&\n+            NodeUtil.isGet(parent.getParent())) {\n+          Node getProp = parent.getParent();\n+          if (NodeUtil.isGet(getProp.getFirstChild()) &&\n+              getProp.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+        if (NodeUtil.isObjectLitKey(lValue, n) &&\n+            parent.getParent().getType() == Token.VAR &&\n+            parent.getGrandparent() != null &&\n+            parent.getGrandparent().getType() == Token.ASSIGN &&\n+            NodeUtil.isGet(parent.getGrandparent().getFirstChild()) &&\n+            parent.getGrandparent().getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}