{
    "patch": "      return;\n    }\n\n    // Handle the case where the constraint object is a function type.\n    // function f(/** function(string) */ constraintObj) {}\n    // f(function(s) { return s; });\n    if (constraintObj.isFunctionType()) {\n      FunctionType functionType = (FunctionType) constraintObj;\n      Node paramNode = getFirstChild();\n      Node argNode = functionType.getSourceNode().getFirstChild().getNext();\n      while (paramNode != null && argNode != null) {\n        if (paramNode.isName()) {\n          String paramName = paramNode.getString();\n          defineInferredProperty(paramName,\n              getNativeType(JSTypeNative.UNKNOWN_TYPE),\n              null);\n          inferPropertyInArgumentList(paramName, argNode);\n        }\n        paramNode = paramNode.getNext();\n        argNode = argNode.getNext();\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..5c520882 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,29 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+      return;\n+    }\n+\n+    // Handle the case where the constraint object is a function type.\n+    // function f(/** function(string) */ constraintObj) {}\n+    // f(function(s) { return s; });\n+    if (constraintObj.isFunctionType()) {\n+      FunctionType functionType = (FunctionType) constraintObj;\n+      Node paramNode = getFirstChild();\n+      Node argNode = functionType.getSourceNode().getFirstChild().getNext();\n+      while (paramNode != null && argNode != null) {\n+        if (paramNode.isName()) {\n+          String paramName = paramNode.getString();\n+          defineInferredProperty(paramName,\n+              getNativeType(JSTypeNative.UNKNOWN_TYPE),\n+              null);\n+          inferPropertyInArgumentList(paramName, argNode);\n+        }\n+        paramNode = paramNode.getNext();\n+        argNode = argNode.getNext();\n+      }\n+    }\n+  }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}