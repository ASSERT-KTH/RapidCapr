{
    "patch": "        } else if (block.isLoop) {\n          return false;\n        }\n      }\n\n      Reference initializingRef = getInitializingReference();\n      if (initializingRef == null) {\n        return true;\n      }\n\n      // Make sure there are no other assignments in any block executed between\n      // the initializing assignment and the assignment we're checking.\n      // We also stop at loops since we don't want to look at assignments inside\n      // loops: we only want to count the number of times the variable is\n      // assigned within the loop and consider that each of those assignments\n      // happens within the loop (even if they are 'earlier' chronologically\n      // than the loop in the CFG).\n      for (BasicBlock block : mScope.getBasicBlocks()) {\n        if (block.isUnreachable()) {\n          continue;\n        }\n        if (block.isAfter(initializingRef.getBasicBlock())) {\n          break;\n        }\n        if (block.isLoop) {\n          continue;\n        }\n\n        for (int i = block.getFirstElementIndex(); i < block.getElements().size(); i++) {\n          JSElement el = block.getElements().get(i);\n          if (el instanceof JSExpressionStatement) {\n            JSExpression expr = ((JSExpressionStatement)el).getExpression();\n            if (expr instanceof JSAssignment || expr instanceof JSPostfixExpression) {\n              JSTargetElement target = null;\n              if (expr instanceof JSAssignment) {\n                target = ((JSAssignment)expr).getTarget();\n              } else /*if (expr instanceof JSPostfixExpression)*/ {\n                target = ((JSPostfixExpression)expr).getOperand();\n              }\n              if (target instanceof JSImportClause) {\n                continue;\n              }\n              if (target instanceof JSNameRef) {\n                JSNameRef targetNameRef = (JSNameRef)target;\n                if (targetNameRef.getName().equals(mName)) {\n                  Reference ref = getReference(el.getSourcePosition().getOffset());\n                  if (ref == initializingRef) {\n                    break;\n                  }\n                  return false;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..612adc64 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,64 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+      }\n+\n+      Reference initializingRef = getInitializingReference();\n+      if (initializingRef == null) {\n+        return true;\n+      }\n+\n+      // Make sure there are no other assignments in any block executed between\n+      // the initializing assignment and the assignment we're checking.\n+      // We also stop at loops since we don't want to look at assignments inside\n+      // loops: we only want to count the number of times the variable is\n+      // assigned within the loop and consider that each of those assignments\n+      // happens within the loop (even if they are 'earlier' chronologically\n+      // than the loop in the CFG).\n+      for (BasicBlock block : mScope.getBasicBlocks()) {\n+        if (block.isUnreachable()) {\n+          continue;\n+        }\n+        if (block.isAfter(initializingRef.getBasicBlock())) {\n+          break;\n+        }\n+        if (block.isLoop) {\n+          continue;\n+        }\n+\n+        for (int i = block.getFirstElementIndex(); i < block.getElements().size(); i++) {\n+          JSElement el = block.getElements().get(i);\n+          if (el instanceof JSExpressionStatement) {\n+            JSExpression expr = ((JSExpressionStatement)el).getExpression();\n+            if (expr instanceof JSAssignment || expr instanceof JSPostfixExpression) {\n+              JSTargetElement target = null;\n+              if (expr instanceof JSAssignment) {\n+                target = ((JSAssignment)expr).getTarget();\n+              } else /*if (expr instanceof JSPostfixExpression)*/ {\n+                target = ((JSPostfixExpression)expr).getOperand();\n+              }\n+              if (target instanceof JSImportClause) {\n+                continue;\n+              }\n+              if (target instanceof JSNameRef) {\n+                JSNameRef targetNameRef = (JSNameRef)target;\n+                if (targetNameRef.getName().equals(mName)) {\n+                  Reference ref = getReference(el.getSourcePosition().getOffset());\n+                  if (ref == initializingRef) {\n+                    break;\n+                  }\n+                  return false;\n+                }\n+              }\n+            }\n+          }\n+        }\n+      }\n+\n+      return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}