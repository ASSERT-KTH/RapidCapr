{
    "patch": "String ns = arg.getString();\nProvidedName provided = providedNames.get(ns);\nif (provided != null && provided.isExplicitlyProvided()) {\n  JSModule providedModule = provided.explicitModule;\n\n  // This must be non-null, because there was an explicit provide.\n  Preconditions.checkNotNull(providedModule);\n\n  JSModule module = t.getModule();\n  if (moduleGraph != null &&\n      module != providedModule &&\n      !moduleGraph.dependsOn(module, providedModule)) {\n    compiler.report(\n        t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n            providedModule.getName(),\n            module.getName()));\n  }\n} else {\n  unrecognizedRequires.add(\n      new UnrecognizedRequire(n, ns, t.getSourceName()));\n  compiler.report(\n      t.makeError(n, MISSING_NAMESPACE_ERROR, ns, t.getSourceName()));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..4783a1f7 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,29 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+String ns = arg.getString();\n+ProvidedName provided = providedNames.get(ns);\n+if (provided != null && provided.isExplicitlyProvided()) {\n+  JSModule providedModule = provided.explicitModule;\n+\n+  // This must be non-null, because there was an explicit provide.\n+  Preconditions.checkNotNull(providedModule);\n+\n+  JSModule module = t.getModule();\n+  if (moduleGraph != null &&\n+      module != providedModule &&\n+      !moduleGraph.dependsOn(module, providedModule)) {\n+    compiler.report(\n+        t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+            providedModule.getName(),\n+            module.getName()));\n+  }\n+} else {\n+  unrecognizedRequires.add(\n+      new UnrecognizedRequire(n, ns, t.getSourceName()));\n+  compiler.report(\n+      t.makeError(n, MISSING_NAMESPACE_ERROR, ns, t.getSourceName()));\n+}\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}