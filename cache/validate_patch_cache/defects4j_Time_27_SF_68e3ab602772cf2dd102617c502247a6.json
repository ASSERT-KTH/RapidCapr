{
    "patch": "            Object type;\n            List<Object> list;\n            if (size == 2) {\n                type = elementPairs.get(1);\n                if (type instanceof PeriodFormatterBuilder) {\n                    PeriodFormatter subFormatter = ((PeriodFormatterBuilder) type).toFormatter();\n                    return new PeriodFormatter(sep, sep, subFormatter.getPrinter(), subFormatter.getParser());\n                } else {\n                    throw new IllegalArgumentException(\"Invalid builder configuration\");\n                }\n            } else {\n                list = elementPairs.subList(1, size);\n                type = list.get(0);\n\n                if (type instanceof PeriodFormatterBuilder) {\n                    PeriodFormatter subFormatter = ((PeriodFormatterBuilder) type).toFormatter();\n                    int i = 1;\n                    while (i < list.size() && list.get(i) instanceof Separator) {\n                        i++;\n                    }\n                    List<Object> subList = list.subList(i, list.size());\n                    if (subList.isEmpty()) {\n                        return new PeriodFormatter(sep, sep, subFormatter.getPrinter(), subFormatter.getParser());\n                    } else {\n                        PeriodFormatter subFormatter2 = toFormatter(subList, false, true);\n                        return new PeriodFormatter(sep, sep.finish(subFormatter.getPrinter(), subFormatter.getParser()), subFormatter2.getPrinter(), subFormatter2.getParser());\n                    }\n                } else {\n                    throw new IllegalArgumentException(\"Invalid builder configuration\");\n                }\n            }\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..fa38453a 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,46 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            Object type;\n+            List<Object> list;\n+            if (size == 2) {\n+                type = elementPairs.get(1);\n+                if (type instanceof PeriodFormatterBuilder) {\n+                    PeriodFormatter subFormatter = ((PeriodFormatterBuilder) type).toFormatter();\n+                    return new PeriodFormatter(sep, sep, subFormatter.getPrinter(), subFormatter.getParser());\n+                } else {\n+                    throw new IllegalArgumentException(\"Invalid builder configuration\");\n+                }\n+            } else {\n+                list = elementPairs.subList(1, size);\n+                type = list.get(0);\n+\n+                if (type instanceof PeriodFormatterBuilder) {\n+                    PeriodFormatter subFormatter = ((PeriodFormatterBuilder) type).toFormatter();\n+                    int i = 1;\n+                    while (i < list.size() && list.get(i) instanceof Separator) {\n+                        i++;\n+                    }\n+                    List<Object> subList = list.subList(i, list.size());\n+                    if (subList.isEmpty()) {\n+                        return new PeriodFormatter(sep, sep, subFormatter.getPrinter(), subFormatter.getParser());\n+                    } else {\n+                        PeriodFormatter subFormatter2 = toFormatter(subList, false, true);\n+                        return new PeriodFormatter(sep, sep.finish(subFormatter.getPrinter(), subFormatter.getParser()), subFormatter2.getPrinter(), subFormatter2.getParser());\n+                    }\n+                } else {\n+                    throw new IllegalArgumentException(\"Invalid builder configuration\");\n+                }\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n-    }\n+            Object[] comp = createComposite(elementPairs);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}