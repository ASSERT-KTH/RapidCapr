{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int numRows = m.getRowDimension();\n    final int numCols = m.getColumnDimension();\n    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(numRows);\n    final double norm = m.getFrobeniusNorm();\n    final double eps = 1e-9 * norm;\n    RealMatrix sqrt = new LUDecomposition(m.add(identity.scalarMultiply(eps))).getSolver().getInverse();\n    sqrt = sqrt.scalarMultiply(1 / Math.sqrt(1 + eps));\n    for (int i = 0; i < 10; i++) {\n        final RealMatrix tmp = m.multiply(sqrt);\n        sqrt = sqrt.add(identity).multiply(0.5);\n        sqrt = new LUDecomposition(tmp.add(sqrt.scalarMultiply(eps))).getSolver().getInverse();\n        sqrt = sqrt.scalarMultiply(1 / Math.sqrt(1 + eps));\n    }\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d576d2dd6 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int numRows = m.getRowDimension();\n+    final int numCols = m.getColumnDimension();\n+    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(numRows);\n+    final double norm = m.getFrobeniusNorm();\n+    final double eps = 1e-9 * norm;\n+    RealMatrix sqrt = new LUDecomposition(m.add(identity.scalarMultiply(eps))).getSolver().getInverse();\n+    sqrt = sqrt.scalarMultiply(1 / Math.sqrt(1 + eps));\n+    for (int i = 0; i < 10; i++) {\n+        final RealMatrix tmp = m.multiply(sqrt);\n+        sqrt = sqrt.add(identity).multiply(0.5);\n+        sqrt = new LUDecomposition(tmp.add(sqrt.scalarMultiply(eps))).getSolver().getInverse();\n+        sqrt = sqrt.scalarMultiply(1 / Math.sqrt(1 + eps));\n     }\n+    return sqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}