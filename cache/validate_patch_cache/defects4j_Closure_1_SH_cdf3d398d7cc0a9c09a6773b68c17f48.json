{
    "patch": "      boolean removeArgs = true;\n      for (Node currentArg = argList.getFirstChild(); currentArg != null;\n           currentArg = currentArg.getNext()) {\n        Var var = fnScope.getVar(currentArg.getString());\n        if (referenced.contains(var)) {\n          removeArgs = false;\n        } else if (removeArgs) {\n          argList.removeChild(currentArg);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bb45cacd 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,14 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      boolean removeArgs = true;\n+      for (Node currentArg = argList.getFirstChild(); currentArg != null;\n+           currentArg = currentArg.getNext()) {\n+        Var var = fnScope.getVar(currentArg.getString());\n+        if (referenced.contains(var)) {\n+          removeArgs = false;\n+        } else if (removeArgs) {\n+          argList.removeChild(currentArg);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}