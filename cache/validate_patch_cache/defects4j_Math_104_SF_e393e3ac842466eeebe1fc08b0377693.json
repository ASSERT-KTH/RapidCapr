{
    "patch": "public static double gamma(double x) {\n    double[] p = {\n            0.99999999999980993227684700473478,\n            676.520368121885098567009190444019,\n            -1259.13921672240287047156078755283,\n            771.3234287776530788486528258894,\n            -176.61502916214059906584551354,\n            12.507343278686904814458936853,\n            -0.13857109526572011689554707,\n            9.984369578019570859563e-6,\n            1.50563273514931155834e-7\n    };\n    int g = 7;\n    if (x < 0.5)\n        return Math.PI / (Math.sin(Math.PI * x) * gamma(1 - x));\n    x -= 1;\n    double a = p[0];\n    double t = x + g + 0.5;\n    for (int i = 1; i < p.length; i++) {\n        a += p[i] / (x + i);\n    }\n    return Math.sqrt(2 * Math.PI) * Math.pow(t, x + 0.5) * Math.exp(-t) * a;\n}\n\npublic static double regularizedGamma(double a, double x) {\n    double gammaA = gamma(a);\n    double sum = 0;\n    double term = 1 / gammaA;\n    int i = 1;\n    while (term / gammaA > 1e-15) {\n        sum += term;\n        term *= x / (a + i);\n        i++;\n    }\n    return Math.exp(-x + a * Math.log(x) - Math.log(gammaA)) * sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..612ac3256 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,42 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double gamma(double x) {\n+    double[] p = {\n+            0.99999999999980993227684700473478,\n+            676.520368121885098567009190444019,\n+            -1259.13921672240287047156078755283,\n+            771.3234287776530788486528258894,\n+            -176.61502916214059906584551354,\n+            12.507343278686904814458936853,\n+            -0.13857109526572011689554707,\n+            9.984369578019570859563e-6,\n+            1.50563273514931155834e-7\n+    };\n+    int g = 7;\n+    if (x < 0.5)\n+        return Math.PI / (Math.sin(Math.PI * x) * gamma(1 - x));\n+    x -= 1;\n+    double a = p[0];\n+    double t = x + g + 0.5;\n+    for (int i = 1; i < p.length; i++) {\n+        a += p[i] / (x + i);\n+    }\n+    return Math.sqrt(2 * Math.PI) * Math.pow(t, x + 0.5) * Math.exp(-t) * a;\n+}\n+\n+public static double regularizedGamma(double a, double x) {\n+    double gammaA = gamma(a);\n+    double sum = 0;\n+    double term = 1 / gammaA;\n+    int i = 1;\n+    while (term / gammaA > 1e-15) {\n+        sum += term;\n+        term *= x / (a + i);\n+        i++;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - Math.log(gammaA)) * sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}