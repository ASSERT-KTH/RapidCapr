{
    "patch": "// try to parse the type expression\nNode typeExpression = parseTypeExpression(token);\n\n// If type expression parsing fails and parsing the type name is also unsuccessful, throw an exception\nif (typeExpression == null) {\n    typeExpression = parseTypeName(token);\n    if (typeExpression == null) {\n        throw new RuntimeException(\"Bad type annotation. type not recognized due to syntax error\");\n    }\n}\n\nreturn typeExpression;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..8b55954a 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,18 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+// try to parse the type expression\n+Node typeExpression = parseTypeExpression(token);\n+\n+// If type expression parsing fails and parsing the type name is also unsuccessful, throw an exception\n+if (typeExpression == null) {\n+    typeExpression = parseTypeName(token);\n+    if (typeExpression == null) {\n+        throw new RuntimeException(\"Bad type annotation. type not recognized due to syntax error\");\n+    }\n+}\n+\n+return typeExpression;\n   }\n \n   /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}