{
    "patch": "import org.apache.commons.math3.analysis.UnivariateFunction;\nimport org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\n\npublic class MatrixUtils {\n    \n    public static RealMatrix squareRoot(RealMatrix m) {\n        EigenDecomposition dec = new EigenDecomposition(m);\n        RealMatrix sqrt = dec.getSquareRoot();\n        RealMatrix result = new Array2DRowRealMatrix(m.getRowDimension(), m.getColumnDimension());\n        for (int i = 0; i < m.getRowDimension(); i++) {\n            for (int j = 0; j < m.getColumnDimension(); j++) {\n                double value = sqrt.getEntry(i, j);\n                result.setEntry(i, j, sqrt(value));\n            }\n        }\n        return result;\n    }\n    \n    private static double sqrt(double x) {\n        if (x < 0) {\n            throw new IllegalArgumentException(\"Input must be non-negative.\");\n        }\n        if (x == 0) {\n            return 0;\n        }\n        UnivariateFunction f = t -> t * t - x;\n        NewtonRaphsonSolver solver = new NewtonRaphsonSolver();\n        double root = solver.solve(1000, f, 0, Math.sqrt(x));\n        return root;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..7469dcaef 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,37 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver;\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.RealMatrix;\n+\n+public class MatrixUtils {\n+    \n+    public static RealMatrix squareRoot(RealMatrix m) {\n+        EigenDecomposition dec = new EigenDecomposition(m);\n+        RealMatrix sqrt = dec.getSquareRoot();\n+        RealMatrix result = new Array2DRowRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+        for (int i = 0; i < m.getRowDimension(); i++) {\n+            for (int j = 0; j < m.getColumnDimension(); j++) {\n+                double value = sqrt.getEntry(i, j);\n+                result.setEntry(i, j, sqrt(value));\n+            }\n+        }\n+        return result;\n     }\n+    \n+    private static double sqrt(double x) {\n+        if (x < 0) {\n+            throw new IllegalArgumentException(\"Input must be non-negative.\");\n+        }\n+        if (x == 0) {\n+            return 0;\n+        }\n+        UnivariateFunction f = t -> t * t - x;\n+        NewtonRaphsonSolver solver = new NewtonRaphsonSolver();\n+        double root = solver.solve(1000, f, 0, Math.sqrt(x));\n+        return root;\n+    }\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}