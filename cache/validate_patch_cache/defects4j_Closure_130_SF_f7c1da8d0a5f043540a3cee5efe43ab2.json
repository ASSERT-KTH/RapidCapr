{
    "patch": "  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      if (name.type == Name.Type.FUNCTION) {\n        continue;\n      }\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      if (name.localSets <= 1 && name.globalSets == 1 && name.aliasingGets == 0) {\n        // {@code name} meets condition (b).\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal() && ref.getNode() != null) {\n            // {@code name} meets condition (c).\n            Ref getPropRef = null;\n            for (Ref ref2 : name.getRefs()) {\n              if (ref2.type == Type.GETPROP && ref2.getNode() != null && ref2.getNode().getParent() == ref.getNode().getParent() &&\n                  NodeUtil.isLValue(ref2.getNode())) {\n                getPropRef = ref2;\n                break;\n              }\n            }\n\n            if (getPropRef != null && inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(getPropRef);\n            } else if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if (name.type == Name.Type.OBJECTLIT && \n          name.aliasingGets == 0 && \n          name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..4e8dc639 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -164,20 +164,33 @@ class CollapseProperties implements CompilerPass {\n     while (!workList.isEmpty()) {\n       Name name = workList.pop();\n \n+      if (name.type == Name.Type.FUNCTION) {\n+        continue;\n+      }\n+\n       // Don't attempt to inline a getter or setter property as a variable.\n       if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n+      if (name.localSets <= 1 && name.globalSets == 1 && name.aliasingGets == 0) {\n+        // {@code name} meets condition (b).\n         List<Ref> refs = Lists.newArrayList(name.getRefs());\n         for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n+          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal() && ref.getNode() != null) {\n+            // {@code name} meets condition (c).\n+            Ref getPropRef = null;\n+            for (Ref ref2 : name.getRefs()) {\n+              if (ref2.type == Type.GETPROP && ref2.getNode() != null && ref2.getNode().getParent() == ref.getNode().getParent() &&\n+                  NodeUtil.isLValue(ref2.getNode())) {\n+                getPropRef = ref2;\n+                break;\n+              }\n+            }\n+\n+            if (getPropRef != null && inlineAliasIfPossible(ref, namespace)) {\n+              name.removeRef(getPropRef);\n+            } else if (inlineAliasIfPossible(ref, namespace)) {\n               name.removeRef(ref);\n             }\n           }\n@@ -186,9 +199,9 @@ class CollapseProperties implements CompilerPass {\n \n       // Check if {@code name} has any aliases left after the\n       // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n+      if (name.type == Name.Type.OBJECTLIT && \n+          name.aliasingGets == 0 && \n+          name.props != null) {\n         // All of {@code name}'s children meet condition (a), so they can be\n         // added to the worklist.\n         workList.addAll(name.props);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}