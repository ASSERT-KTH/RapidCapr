{
    "patch": "   attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.EXPRESSION_RESULT:\n          if (n.getFirstChild().getType() == Token.ASSIGN) {\n            Node lhs = n.getFirstChild().getFirstChild();\n            String name = lhs.getQualifiedName();\n            JSType rhsType = getJSType(lhs.getNext().getType());\n            TypedVar var = scope.getVar(name);\n            if (var != null) {\n              var.type = rhsType;\n            }\n          }\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..1ee08a22 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,7 +1448,7 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n+   attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n@@ -1462,7 +1462,17 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n-      }\n+        case Token.EXPRESSION_RESULT:\n+          if (n.getFirstChild().getType() == Token.ASSIGN) {\n+            Node lhs = n.getFirstChild().getFirstChild();\n+            String name = lhs.getQualifiedName();\n+            JSType rhsType = getJSType(lhs.getNext().getType());\n+            TypedVar var = scope.getVar(name);\n+            if (var != null) {\n+              var.type = rhsType;\n+            }\n+          }\n+          break;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}