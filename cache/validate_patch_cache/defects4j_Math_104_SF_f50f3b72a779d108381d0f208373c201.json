{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic class RegularizedGamma {\n\n    public static double regularizedGammaP(double a, double x, double epsilon) {\n        double term = 1 / a;\n        double sum = term;\n        double n = 1;\n        while (Math.abs(term) > epsilon && n < 1000) {\n            term *= x / (a + n);\n            sum += term;\n            n++;\n        }\n        return 1 - Math.pow(x / a, a) * Math.exp(-x) * sum;\n    }\n\n    public static double regularizedGammaQ(double a, double x, double epsilon) {\n        double term = Math.exp(-x) * Math.pow(x, a) / Gamma.gamma(a);\n        double sum = term;\n        double n = 1;\n        while (Math.abs(term) > epsilon && n < 1000) {\n            term *= (a + n - 1) / x;\n            sum += term;\n            n++;\n        }\n        return sum;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..5cf4752c1 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,34 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class RegularizedGamma {\n+\n+    public static double regularizedGammaP(double a, double x, double epsilon) {\n+        double term = 1 / a;\n+        double sum = term;\n+        double n = 1;\n+        while (Math.abs(term) > epsilon && n < 1000) {\n+            term *= x / (a + n);\n+            sum += term;\n+            n++;\n+        }\n+        return 1 - Math.pow(x / a, a) * Math.exp(-x) * sum;\n+    }\n+\n+    public static double regularizedGammaQ(double a, double x, double epsilon) {\n+        double term = Math.exp(-x) * Math.pow(x, a) / Gamma.gamma(a);\n+        double sum = term;\n+        double n = 1;\n+        while (Math.abs(term) > epsilon && n < 1000) {\n+            term *= (a + n - 1) / x;\n+            sum += term;\n+            n++;\n+        }\n+        return sum;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}