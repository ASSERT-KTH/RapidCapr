{
    "patch": "          // Make sure this is the only assignment.\n          boolean foundAssignment = false;\n          for (Reference reference : references) {\n            if (reference.isAssignment() && !reference.isUninitializedDeclaration()) {\n              if (foundAssignment) {\n                return false;\n              } else {\n                foundAssignment = true;\n              }\n            }\n          }\n          return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..effb7e62 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Make sure this is the only assignment.\n+          boolean foundAssignment = false;\n+          for (Reference reference : references) {\n+            if (reference.isAssignment() && !reference.isUninitializedDeclaration()) {\n+              if (foundAssignment) {\n+                return false;\n+              } else {\n+                foundAssignment = true;\n+              }\n+            }\n+          }\n+          return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}