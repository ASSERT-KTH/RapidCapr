{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(n.getParent());\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineVarOrConst(n, parent);\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineVarOrConst(n, parent);\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n        case Token.CONST:\n          defineVarOrConst(n, parent);\n          break;\n      }\n    }\n\n    private void defineVarOrConst(Node n, Node parent) {\n      checkState(n.isVar() || n.isConst(), n);\n      if (parent.isFor()) {\n        VarChecker.checkLoopVariable(n, parent);\n      }\n      for (Node child = n.getFirstChild(); child != null;\n       child = child.getNext()) {\n        Node nameNode = child.getFirstChild();\n        String name = nameNode.getString();\n        if (NodeUtil.isNameDeclaration(child)) {\n          if (parent.isFunction() && name.equals(\"arguments\")) {\n            report(n, JSError.make(\"msg.CannotShadowBuiltin\", \"arguments\"));\n          }\n        }\n        Token declType = n.getToken();\n        Var var = scope.getVar(name);\n        if (var == null) {\n          // define the variable\n          var = scope.declare(name, nameNode, null, declType, false);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..f9c3eaba 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1444,7 +1444,7 @@ final class TypedScopeCreator implements ScopeCreator {\n       if (n == scope.getRootNode()) return;\n \n       if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+        handleFunctionInputs(n.getParent());\n         return;\n       }\n \n@@ -1454,17 +1454,43 @@ final class TypedScopeCreator implements ScopeCreator {\n           if (parent.getType() == Token.NAME) {\n             return;\n           }\n+          defineVarOrConst(n, parent);\n           defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n+          defineVarOrConst(n, parent);\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n-          defineVar(n, parent);\n+        case Token.CONST:\n+          defineVarOrConst(n, parent);\n           break;\n       }\n     }\n \n+    private void defineVarOrConst(Node n, Node parent) {\n+      checkState(n.isVar() || n.isConst(), n);\n+      if (parent.isFor()) {\n+        VarChecker.checkLoopVariable(n, parent);\n+      }\n+      for (Node child = n.getFirstChild(); child != null;\n+       child = child.getNext()) {\n+        Node nameNode = child.getFirstChild();\n+        String name = nameNode.getString();\n+        if (NodeUtil.isNameDeclaration(child)) {\n+          if (parent.isFunction() && name.equals(\"arguments\")) {\n+            report(n, JSError.make(\"msg.CannotShadowBuiltin\", \"arguments\"));\n+          }\n+        }\n+        Token declType = n.getToken();\n+        Var var = scope.getVar(name);\n+        if (var == null) {\n+          // define the variable\n+          var = scope.declare(name, nameNode, null, declType, false);\n+        }\n+      }\n+    }\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}