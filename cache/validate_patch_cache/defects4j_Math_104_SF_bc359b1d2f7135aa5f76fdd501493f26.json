{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.Precision;\nimport org.apache.commons.math3.stat.inference.ChiSquaredTest;\nimport org.apache.commons.math3.stat.inference.TTest;\nimport org.apache.commons.math3.stat.inference.TestUtils;\nimport java.util.ArrayList;\n\npublic class StatUtils {\n\n    public static double normalCDF(double x, double mu, double sigma) {\n        double z = (x - mu) / sigma;\n        return (1.0 + erf(z / Math.sqrt(2.0))) / 2.0;\n    }\n\n    public static double erf(double z) {\n        double t = 1.0 / (1.0 + 0.5 * Math.abs(z));\n        double ans = 1 - t * Math.exp(-z * z - 1.26551223 +\n                t * (1.00002368 +\n                t * (0.37409196 +\n                t * (0.09678418 +\n                t * (-0.18628806 +\n                t * (0.27886807 +\n                t * (-1.13520398 +\n                t * (1.48851587 +\n                t * (-0.82215223 +\n                t * (0.17087277))))))))));\n        if (z >= 0) {\n            return ans;\n        } else {\n            return -ans;\n        }\n    }\n\n    public static double chiSquareDistribution(double x, int degreesOfFreedom) {\n        return Gamma.regularizedGammaQ(degreesOfFreedom / 2.0, x / 2.0);\n    }\n    \n    public static double tDistribution(double x, int degreesOfFreedom) {\n        return (1 / Math.sqrt(degreesOfFreedom)) * Gamma.gamma((degreesOfFreedom + 1) / 2) /\n                (Math.sqrt(Math.PI) * Gamma.gamma(degreesOfFreedom / 2)) * \n                Math.pow(1 + ((x*x) / degreesOfFreedom), -((degreesOfFreedom + 1) / 2));\n    }\n\n    public static void main(String[] args) {\n        double expected = 0.632120558828558;\n        double actualP = normalCDF(0.5, 0, 1);\n        TestUtils.assertEquals(expected, actualP, 10e-15);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..8f3901758 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,55 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.Precision;\n+import org.apache.commons.math3.stat.inference.ChiSquaredTest;\n+import org.apache.commons.math3.stat.inference.TTest;\n+import org.apache.commons.math3.stat.inference.TestUtils;\n+import java.util.ArrayList;\n+\n+public class StatUtils {\n+\n+    public static double normalCDF(double x, double mu, double sigma) {\n+        double z = (x - mu) / sigma;\n+        return (1.0 + erf(z / Math.sqrt(2.0))) / 2.0;\n+    }\n+\n+    public static double erf(double z) {\n+        double t = 1.0 / (1.0 + 0.5 * Math.abs(z));\n+        double ans = 1 - t * Math.exp(-z * z - 1.26551223 +\n+                t * (1.00002368 +\n+                t * (0.37409196 +\n+                t * (0.09678418 +\n+                t * (-0.18628806 +\n+                t * (0.27886807 +\n+                t * (-1.13520398 +\n+                t * (1.48851587 +\n+                t * (-0.82215223 +\n+                t * (0.17087277))))))))));\n+        if (z >= 0) {\n+            return ans;\n+        } else {\n+            return -ans;\n+        }\n+    }\n+\n+    public static double chiSquareDistribution(double x, int degreesOfFreedom) {\n+        return Gamma.regularizedGammaQ(degreesOfFreedom / 2.0, x / 2.0);\n+    }\n+    \n+    public static double tDistribution(double x, int degreesOfFreedom) {\n+        return (1 / Math.sqrt(degreesOfFreedom)) * Gamma.gamma((degreesOfFreedom + 1) / 2) /\n+                (Math.sqrt(Math.PI) * Gamma.gamma(degreesOfFreedom / 2)) * \n+                Math.pow(1 + ((x*x) / degreesOfFreedom), -((degreesOfFreedom + 1) / 2));\n+    }\n+\n+    public static void main(String[] args) {\n+        double expected = 0.632120558828558;\n+        double actualP = normalCDF(0.5, 0, 1);\n+        TestUtils.assertEquals(expected, actualP, 10e-15);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}