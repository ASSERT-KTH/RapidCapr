{
    "patch": "public double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid arguments for Gamma function\");\n    }\n\n    double eps = 1e-15;\n    double maxIterations = 1000;\n\n    double sum = 0;\n    double term = 1 / a;\n    for (int n = 1; n <= maxIterations; n++) {\n        sum += term;\n        term *= x / (a + n);\n        if (Math.abs(term) < eps * Math.abs(sum)) {\n            return Math.exp(-x) * Math.pow(x, a) * sum;\n        }\n    }\n\n    throw new RuntimeException(\"Failed to converge to a solution\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..7b778ebe4 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,26 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public double regularizedGammaP(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid arguments for Gamma function\");\n+    }\n+\n+    double eps = 1e-15;\n+    double maxIterations = 1000;\n+\n+    double sum = 0;\n+    double term = 1 / a;\n+    for (int n = 1; n <= maxIterations; n++) {\n+        sum += term;\n+        term *= x / (a + n);\n+        if (Math.abs(term) < eps * Math.abs(sum)) {\n+            return Math.exp(-x) * Math.pow(x, a) * sum;\n+        }\n+    }\n+\n+    throw new RuntimeException(\"Failed to converge to a solution\");\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}