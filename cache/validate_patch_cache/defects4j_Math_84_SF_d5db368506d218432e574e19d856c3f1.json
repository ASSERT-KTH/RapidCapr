{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        int numIter = 0;\n        while (numIter < maxIterations) {  // Introduce a limit for max iterations\n            numIter++;\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = shrink(original, comparator);\n                }\n            } else {\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    simplex = contracted;\n                } else {\n                    simplex = shrink(original, comparator);\n                }\n            }\n\n            // Additional convergence criterion - check if min and max points are close enough\n            final double[] centroid = getCentroid(simplex);\n            final RealPointValuePair worst = original[n];\n            final double maxVertDist = distance(worst.getPoint(), centroid);\n            final RealPointValuePair nextWorst = getClosest(simplex, worst, comparator);\n            final double nextWorstDist = distance(nextWorst.getPoint(), centroid);\n            \n            if (maxVertDist < relThreshold && nextWorstDist < relThreshold) {\n                return;\n            }\n        }\n        throw new OptimizationException(\"Maximum iteration count exceeded\");\n    }\n    \n    private RealPointValuePair[] shrink(final RealPointValuePair[] original, final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair best = original[0];\n        final RealPointValuePair[] simplex = new RealPointValuePair[n + 1];\n        simplex[0] = best;\n\n        for (int i = 1; i < simplex.length; i++) {\n            final double[] originalI = original[i].getPoint();\n            final double[] bestArray = best.getPoint();\n            final double[] contracted = new double[n];\n            for (int j = 0; j < n; j++) {\n                contracted[j] = contractionCoeff * (bestArray[j] - originalI[j]) + originalI[j];\n            }\n            simplex[i] = new RealPointValuePair(contracted, Double.NaN);\n        }\n\n        // sort the simplex, evaluate the function at the vertices, and\n        // return the simplex\n        Arrays.sort(simplex, comparator);\n        evaluateSimplex(simplex, comparator, false);\n        return simplex;\n    }\n\n    private double distance(final double[] p1, final double[] p2) {\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    private double[] getCentroid(final RealPointValuePair[] simplex) {\n        final double[] center = new double[n];\n        for (int i = 0; i < n; i++) {\n            double sum = 0;\n            for (int j = 0; j < simplex.length; j++) {\n                sum += simplex[j].getPoint()[i];\n            }\n            center[i] = sum / n;\n        }\n        return center;\n    }\n\n    private RealPointValuePair getClosest(final RealPointValuePair[] simplex, final RealPointValuePair p, final Comparator<RealPointValuePair> comparator) {\n        RealPointValuePair closest = simplex[0];\n        double closestDist = distance(closest.getPoint(), p.getPoint());\n        for (int i = 1; i < n + 1; i++) {\n            final double dist = distance(simplex[i].getPoint(), p.getPoint());\n            if (dist < closestDist) {\n                closestDist = dist;\n                closest = simplex[i];\n            }\n        }\n        return closest;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..a7107b2d0 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -60,9 +60,9 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n+        int numIter = 0;\n+        while (numIter < maxIterations) {  // Introduce a limit for max iterations\n+            numIter++;\n             incrementIterationsCounter();\n \n             // save the original vertex\n@@ -79,23 +79,85 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = shrink(original, comparator);\n+                }\n+            } else {\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    simplex = contracted;\n+                } else {\n+                    simplex = shrink(original, comparator);\n                 }\n+            }\n \n+            // Additional convergence criterion - check if min and max points are close enough\n+            final double[] centroid = getCentroid(simplex);\n+            final RealPointValuePair worst = original[n];\n+            final double maxVertDist = distance(worst.getPoint(), centroid);\n+            final RealPointValuePair nextWorst = getClosest(simplex, worst, comparator);\n+            final double nextWorstDist = distance(nextWorst.getPoint(), centroid);\n+            \n+            if (maxVertDist < relThreshold && nextWorstDist < relThreshold) {\n                 return;\n-\n             }\n+        }\n+        throw new OptimizationException(\"Maximum iteration count exceeded\");\n+    }\n+    \n+    private RealPointValuePair[] shrink(final RealPointValuePair[] original, final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair best = original[0];\n+        final RealPointValuePair[] simplex = new RealPointValuePair[n + 1];\n+        simplex[0] = best;\n+\n+        for (int i = 1; i < simplex.length; i++) {\n+            final double[] originalI = original[i].getPoint();\n+            final double[] bestArray = best.getPoint();\n+            final double[] contracted = new double[n];\n+            for (int j = 0; j < n; j++) {\n+                contracted[j] = contractionCoeff * (bestArray[j] - originalI[j]) + originalI[j];\n+            }\n+            simplex[i] = new RealPointValuePair(contracted, Double.NaN);\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        // sort the simplex, evaluate the function at the vertices, and\n+        // return the simplex\n+        Arrays.sort(simplex, comparator);\n+        evaluateSimplex(simplex, comparator, false);\n+        return simplex;\n+    }\n \n-            // check convergence\n-                return;\n-            }\n+    private double distance(final double[] p1, final double[] p2) {\n+        double sum = 0;\n+        for (int i = 0; i < p1.length; i++) {\n+            sum += Math.pow(p1[i] - p2[i], 2);\n+        }\n+        return Math.sqrt(sum);\n+    }\n \n+    private double[] getCentroid(final RealPointValuePair[] simplex) {\n+        final double[] center = new double[n];\n+        for (int i = 0; i < n; i++) {\n+            double sum = 0;\n+            for (int j = 0; j < simplex.length; j++) {\n+                sum += simplex[j].getPoint()[i];\n+            }\n+            center[i] = sum / n;\n         }\n+        return center;\n+    }\n \n+    private RealPointValuePair getClosest(final RealPointValuePair[] simplex, final RealPointValuePair p, final Comparator<RealPointValuePair> comparator) {\n+        RealPointValuePair closest = simplex[0];\n+        double closestDist = distance(closest.getPoint(), p.getPoint());\n+        for (int i = 1; i < n + 1; i++) {\n+            final double dist = distance(simplex[i].getPoint(), p.getPoint());\n+            if (dist < closestDist) {\n+                closestDist = dist;\n+                closest = simplex[i];\n+            }\n+        }\n+        return closest;\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: maxIterations has private access in DirectSearchOptimizer",
    "test_result": "ERROR"
}