{
    "patch": "public static String escapeString(final String input) {\n    if (input == null) {\n        return null;\n    }\n    int len = input.length();\n    StringBuilder result = new StringBuilder(len + 4);\n    for (int i = 0; i < len; i++) {\n        char c = input.charAt(i);\n        switch (c) {\n            case '\\b':\n                result.append('\\\\');\n                result.append('b');\n                break;\n            case '\\t':\n                result.append('\\\\');\n                result.append('t');\n                break;\n            case '\\n':\n                result.append('\\\\');\n                result.append('n');\n                break;\n            case '\\f':\n                result.append('\\\\');\n                result.append('f');\n                break;\n            case '\\r':\n                result.append('\\\\');\n                result.append('r');\n                break;\n            case '\\\"':\n                result.append('\\\\');\n                result.append('\\\"');\n                break;\n            case '\\'':\n                result.append('\\\\');\n                result.append('\\'');\n                break;\n            case '\\\\':\n                result.append('\\\\');\n                result.append('\\\\');\n                break;\n            default:\n                if ((c < 0x0020) || (c > 0x007e)) {\n                    result.append('\\\\');\n                    result.append('u');\n                    result.append(toHex((c >> 12) & 0xF));\n                    result.append(toHex((c >> 8) & 0xF));\n                    result.append(toHex((c >> 4) & 0xF));\n                    result.append(toHex((c >> 0) & 0xF));\n                } else {\n                    result.append(c);\n                }\n        }\n    }\n    return result.toString();\n}\n\nprivate static char toHex(int nibble) {\n    return hexDigit[(nibble & 0xF)];\n}\n\n/** A table of hex digits */\nprivate static final char[] hexDigit = {\n    '0', '1', '2', '3', '4', '5', '6', '7',\n    '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'\n};",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..84f6df02 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,72 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escapeString(final String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    int len = input.length();\n+    StringBuilder result = new StringBuilder(len + 4);\n+    for (int i = 0; i < len; i++) {\n+        char c = input.charAt(i);\n+        switch (c) {\n+            case '\\b':\n+                result.append('\\\\');\n+                result.append('b');\n+                break;\n+            case '\\t':\n+                result.append('\\\\');\n+                result.append('t');\n+                break;\n+            case '\\n':\n+                result.append('\\\\');\n+                result.append('n');\n+                break;\n+            case '\\f':\n+                result.append('\\\\');\n+                result.append('f');\n+                break;\n+            case '\\r':\n+                result.append('\\\\');\n+                result.append('r');\n+                break;\n+            case '\\\"':\n+                result.append('\\\\');\n+                result.append('\\\"');\n+                break;\n+            case '\\'':\n+                result.append('\\\\');\n+                result.append('\\'');\n+                break;\n+            case '\\\\':\n+                result.append('\\\\');\n+                result.append('\\\\');\n+                break;\n+            default:\n+                if ((c < 0x0020) || (c > 0x007e)) {\n+                    result.append('\\\\');\n+                    result.append('u');\n+                    result.append(toHex((c >> 12) & 0xF));\n+                    result.append(toHex((c >> 8) & 0xF));\n+                    result.append(toHex((c >> 4) & 0xF));\n+                    result.append(toHex((c >> 0) & 0xF));\n+                } else {\n+                    result.append(c);\n+                }\n+        }\n+    }\n+    return result.toString();\n+}\n+\n+private static char toHex(int nibble) {\n+    return hexDigit[(nibble & 0xF)];\n+}\n+\n+/** A table of hex digits */\n+private static final char[] hexDigit = {\n+    '0', '1', '2', '3', '4', '5', '6', '7',\n+    '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'\n+};\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}