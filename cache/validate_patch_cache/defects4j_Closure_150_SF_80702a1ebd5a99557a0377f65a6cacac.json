{
    "patch": "    private boolean isFunctionExpression(Node n) {\n      return n.getType() == Token.FUNCTION && n.getParent().getType() != Token.ASSIGN && n.getParent().getType() != Token.NAME;\n    } \n\n    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      attachLiteralTypes(n);\n      \n      if (n.getType() == Token.VAR) {\n        defineVar(n, parent);\n        return;\n      }\n\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (isFunctionExpression(n)) {\n            defineDeclaredFunction(n, parent);\n            handleFunctionInputs(n);\n          } else if (parent.getType() == Token.EXPR_RESULT) {\n            defineDeclaredFunction(n, parent);\n          } else if (n.getFirstChild().getType() == Token.NAME) {\n            defineDeclaredFunction(n.getFirstChild(), n);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        default:\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..ba5a46e8 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,27 +1440,35 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n+    private boolean isFunctionExpression(Node n) {\n+      return n.getType() == Token.FUNCTION && n.getParent().getType() != Token.ASSIGN && n.getParent().getType() != Token.NAME;\n+    } \n+\n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n       if (n == scope.getRootNode()) return;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+      attachLiteralTypes(n);\n+      \n+      if (n.getType() == Token.VAR) {\n+        defineVar(n, parent);\n         return;\n       }\n \n-      attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          if (isFunctionExpression(n)) {\n+            defineDeclaredFunction(n, parent);\n+            handleFunctionInputs(n);\n+          } else if (parent.getType() == Token.EXPR_RESULT) {\n+            defineDeclaredFunction(n, parent);\n+          } else if (n.getFirstChild().getType() == Token.NAME) {\n+            defineDeclaredFunction(n.getFirstChild(), n);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n+        default:\n           break;\n       }\n     }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}