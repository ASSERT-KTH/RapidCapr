{
    "patch": "Set<Var> referenced = new HashSet<>();\nNodeTraversal.traverse(compiler, function, new AbstractPostOrderCallback() {\n  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isName() || n.isGetProp()) {\n      Var var = fnScope.getVar(n.getString());\n      if (var != null) {\n        referenced.add(var);\n      }\n    }\n  }\n});\n\nif (!modifyCallers) {\n  // Strip unreferenced args off the end of the function declaration.\n  Node argList = getFunctionArgList(function);\n  while (!argList.isFirstChildOf(function)) {\n    Node lastArg = argList.getLastChild();\n    Var var = fnScope.getVar(lastArg.getString());\n    if (!referenced.contains(var)) {\n      argList.removeChild(lastArg);\n      compiler.reportCodeChange();\n    } else {\n      break;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c0b5b972 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,33 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Set<Var> referenced = new HashSet<>();\n+NodeTraversal.traverse(compiler, function, new AbstractPostOrderCallback() {\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.isName() || n.isGetProp()) {\n+      Var var = fnScope.getVar(n.getString());\n+      if (var != null) {\n+        referenced.add(var);\n+      }\n+    }\n+  }\n+});\n+\n+if (!modifyCallers) {\n+  // Strip unreferenced args off the end of the function declaration.\n+  Node argList = getFunctionArgList(function);\n+  while (!argList.isFirstChildOf(function)) {\n+    Node lastArg = argList.getLastChild();\n+    Var var = fnScope.getVar(lastArg.getString());\n+    if (!referenced.contains(var)) {\n+      argList.removeChild(lastArg);\n+      compiler.reportCodeChange();\n+    } else {\n+      break;\n+    }\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}