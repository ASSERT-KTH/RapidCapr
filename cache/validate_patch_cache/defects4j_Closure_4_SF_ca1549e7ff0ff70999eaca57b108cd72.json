{
    "patch": "    boolean resolvedViaProp = false;\n    if (!resolved) {\n      resolvedViaProp = resolveViaProperties(t, enclosing);\n      if (!resolvedViaProp &&\n          !isConstructor() && isTopLevel()) {\n        // We didn't recognize the name, so it must be a typo.\n        t.report(createTypoWarning());\n      }\n    }\n    finishResolution(t);\n    if (resolvedViaProp && !resolved) {\n      resolved = true;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..786e570c 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,18 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+    boolean resolvedViaProp = false;\n+    if (!resolved) {\n+      resolvedViaProp = resolveViaProperties(t, enclosing);\n+      if (!resolvedViaProp &&\n+          !isConstructor() && isTopLevel()) {\n+        // We didn't recognize the name, so it must be a typo.\n+        t.report(createTypoWarning());\n+      }\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    finishResolution(t);\n+    if (resolvedViaProp && !resolved) {\n+      resolved = true;\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}