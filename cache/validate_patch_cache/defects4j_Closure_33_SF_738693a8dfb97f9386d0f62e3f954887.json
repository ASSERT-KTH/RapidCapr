{
    "patch": "    // We only want to match contraints on anonymous types and nominal types.\n    if (constraintObj.isFunctionType()) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    } else if (constraintObj.isNominalConstructor()) {\n      // Handle the case where the constraint object is a nominal type\n      // To match such a constraint, we infer the type of the current object\n      // to be the same as the nominal type in the constraint.\n      String referenceName = constraintObj.getReferenceName();\n      if (referenceName == null || referenceName.isEmpty() || hasNominalType(referenceName)) {\n        return;\n      }\n      NominalType nt = registry.getDeclaredType(referenceName);\n      if (nt == null) {\n        return;\n      }\n      JSType targetType = getRegistry().createConstructorType(nt);\n      // Inherit the template types of the nominal type, e.g.,\n      // we need to create a new type if the nominal type is parameterized.\n      JSType inferredType = targetType.instantiateGenerics(map => getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      setType(inferredType);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..7cefd76b 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,8 +552,10 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n+    // We only want to match contraints on anonymous types and nominal types.\n+    if (constraintObj.isFunctionType()) {\n+      return;\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //\n@@ -571,11 +573,26 @@ class PrototypeObjectType extends ObjectType {\n           JSType typeToInfer = propType;\n           if (!hasProperty(prop)) {\n             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n+              .getLeastSupertype(propType);\n           }\n           defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n-    }\n-  }\n+    } else if (constraintObj.isNominalConstructor()) {\n+      // Handle the case where the constraint object is a nominal type\n+      // To match such a constraint, we infer the type of the current object\n+      // to be the same as the nominal type in the constraint.\n+      String referenceName = constraintObj.getReferenceName();\n+      if (referenceName == null || referenceName.isEmpty() || hasNominalType(referenceName)) {\n+        return;\n+      }\n+      NominalType nt = registry.getDeclaredType(referenceName);\n+      if (nt == null) {\n+        return;\n+      }\n+      JSType targetType = getRegistry().createConstructorType(nt);\n+      // Inherit the template types of the nominal type, e.g.,\n+      // we need to create a new type if the nominal type is parameterized.\n+      JSType inferredType = targetType.instantiateGenerics(map => getNativeType(JSTypeNative.UNKNOWN_TYPE));\n+      setType(inferredType);\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}