{
    "patch": "private Node parseContextTypeExpression(JsDocToken token) {\n    if(token.getTokenType() == JsDocToken.Type.LEFT_CURLY_BRACE) {\n        return parseStructTypeExpression(token);\n    } else if(token.getTokenType() == JsDocToken.Type.LEFT_SQUARE_BRACKET) {\n        return parseArrayTypeExpression(token);\n    } else {\n        return parseTypeName(token);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..f8587d55 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,15 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+private Node parseContextTypeExpression(JsDocToken token) {\n+    if(token.getTokenType() == JsDocToken.Type.LEFT_CURLY_BRACE) {\n+        return parseStructTypeExpression(token);\n+    } else if(token.getTokenType() == JsDocToken.Type.LEFT_SQUARE_BRACKET) {\n+        return parseArrayTypeExpression(token);\n+    } else {\n+        return parseTypeName(token);\n+    }\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}