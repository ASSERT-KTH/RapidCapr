{
    "patch": "      // The parameters object literals can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      Node nodeBeforeLastArg = null;\n      while (lastArg != null) {\n        nodeBeforeLastArg = lastArg.getPrevious();\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n        lastArg = nodeBeforeLastArg;\n      }\n      // Now that we've stripped off the end, check the front for\n      // unreferenced args because these are more likely to stay constant\n      // across multiple calls.\n      for (Node child = argList.getFirstChild(); child != null; ) {\n        Node nextSibling = child.getNext();\n        Var var = fnScope.getVar(child.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(child);\n          compiler.reportCodeChange();\n        }\n        child = nextSibling;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8f32338a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // The parameters object literals can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      Node nodeBeforeLastArg = null;\n+      while (lastArg != null) {\n+        nodeBeforeLastArg = lastArg.getPrevious();\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+        lastArg = nodeBeforeLastArg;\n+      }\n+      // Now that we've stripped off the end, check the front for\n+      // unreferenced args because these are more likely to stay constant\n+      // across multiple calls.\n+      for (Node child = argList.getFirstChild(); child != null; ) {\n+        Node nextSibling = child.getNext();\n+        Var var = fnScope.getVar(child.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(child);\n+          compiler.reportCodeChange();\n+        }\n+        child = nextSibling;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}