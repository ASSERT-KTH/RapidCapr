{
    "patch": "public static double getTypedPercent(String json) {\n    ObjectMapper objectMapper = new ObjectMapper();\n    try {\n        JsonNode node = objectMapper.readTree(json);\n        double totalNum = node.get(\"totalCount\").asDouble();\n        double typedNum = node.get(\"typedCount\").asDouble();\n        if (totalNum == 0) {\n            return 0.0;\n        }\n        return (typedNum * 100.0) / totalNum;\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n    return 0.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..d4779e5d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    ObjectMapper objectMapper = new ObjectMapper();\n+    try {\n+        JsonNode node = objectMapper.readTree(json);\n+        double totalNum = node.get(\"totalCount\").asDouble();\n+        double typedNum = node.get(\"typedCount\").asDouble();\n+        if (totalNum == 0) {\n+            return 0.0;\n+        }\n+        return (typedNum * 100.0) / totalNum;\n+    } catch (JsonProcessingException e) {\n+        e.printStackTrace();\n+    }\n+    return 0.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}