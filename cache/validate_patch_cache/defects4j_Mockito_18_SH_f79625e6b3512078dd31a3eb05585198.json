{
    "patch": "public ReturnValue handle(ExecutionContext context, Callable callable) throws Throwable {\n    MethodInvocation invocation = (MethodInvocation) callable;\n    mock = context.getMock(invocation.getMockName());\n    Method calledMethod = invocation.getMethod();\n    ReturnValue values = mock.getReturnValueForMethod(calledMethod);\n\n    //checking if there are any events fired\n    if (values.hasEventSubscription()) {\n        for (EventSubscription eventSubscription : values.getEventSubscriptions()) {\n            context.registerEventSubscription(eventSubscription, mock);\n        }\n    }\n\n    return values;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}