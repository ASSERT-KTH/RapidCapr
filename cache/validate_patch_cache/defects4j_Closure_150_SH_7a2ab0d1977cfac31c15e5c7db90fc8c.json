{
    "patch": "attachLiteralTypes(n);\nswitch (n.getType()) {\n    case Token.FUNCTION: {\n        if (parent.isFunction()) {\n            // Function expression or declaration as a function input. Don't\n            // define it as a variable.\n            return;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n    }\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    case Token.VAR:\n        defineVar(n, parent);\n        break;\n    case Token.LP:\n        if (parent.getParent() != null\n                && parent.getParent().isCall()) {\n            // If FIRST_CHILD is a qualified name, we can assume it's a type:\n            // i.e. goog.bind(fn, obj) can never have a type as fn, because it\n            // was already resolved as a qualified name.\n            Node maybeMethodName = parent.getFirstChild();\n            if (maybeMethodName.isUnscopedQualifiedName()) {\n                return;\n            }\n\n            handleFunctionInputs(parent);\n        }\n        break;\n    default:\n        break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..ab5bafbb 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,40 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+attachLiteralTypes(n);\n+switch (n.getType()) {\n+    case Token.FUNCTION: {\n+        if (parent.isFunction()) {\n+            // Function expression or declaration as a function input. Don't\n+            // define it as a variable.\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+    }\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+    case Token.LP:\n+        if (parent.getParent() != null\n+                && parent.getParent().isCall()) {\n+            // If FIRST_CHILD is a qualified name, we can assume it's a type:\n+            // i.e. goog.bind(fn, obj) can never have a type as fn, because it\n+            // was already resolved as a qualified name.\n+            Node maybeMethodName = parent.getFirstChild();\n+            if (maybeMethodName.isUnscopedQualifiedName()) {\n+                return;\n+            }\n+\n+            handleFunctionInputs(parent);\n+        }\n+        break;\n+    default:\n+        break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}