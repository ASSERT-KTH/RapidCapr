{
    "patch": "@Override\npublic <T> ReturnValue<T> handle(Invocation invocation, Class<T> clazz) throws Throwable {\n    MethodInvocation methodInvocation = (MethodInvocation) invocation;\n    if (clazz == Iterable.class) {\n        Iterable iterable = (Iterable) methodInvocation.proceed();\n        if (iteratorHasNext(iterable.iterator())) {\n            return new ReturnValue<>(Collections.singletonList(iterable.iterator().next()), true);\n        } else {\n            return new ReturnValue<>(Collections.emptyList(), true);\n        }\n    } else {\n        return new ReturnValue<>(methodInvocation.proceed(), false);\n    }\n}\n\nprivate boolean iteratorHasNext(Iterator iterator) {\n    return iterator != null && iterator.hasNext();\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}