{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid argument: a=\" + a + \", x=\" + x);\n    }\n\n    double eps = 10e-15;\n    double g = incompleteGamma(a, x);\n    double q = gamma(a);\n\n    if (Math.abs(g) < eps) {\n        return 0;\n    } else if (Math.abs(1 - g) < eps) {\n        return 1;\n    } else {\n        return g / q;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..271a12fd1 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,23 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid argument: a=\" + a + \", x=\" + x);\n+    }\n+\n+    double eps = 10e-15;\n+    double g = incompleteGamma(a, x);\n+    double q = gamma(a);\n+\n+    if (Math.abs(g) < eps) {\n+        return 0;\n+    } else if (Math.abs(1 - g) < eps) {\n+        return 1;\n+    } else {\n+        return g / q;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}