{
    "patch": "if (!constraintObj.isNominalConstructor() || constraintObj.hasReferenceName()) {\n      return;\n    }\n\n    // We only want to match contraints on anonymous types (e.g. `function({x: string}) {}`).\n    if (constraintObj.isConstructor() && !constraintObj.isInterface()) {\n      ObjectType instance = constraintObj.getPrototypeObject();\n      if (!instance.isOrHasTemplatedType()\n          || (instance.getTemplatedTypes().size() == 1\n              && instance.getConstructor().getTemplateTypes().size() == 1)) {\n        return;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..c47b1d55 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,17 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (!constraintObj.isNominalConstructor() || constraintObj.hasReferenceName()) {\n+      return;\n+    }\n+\n+    // We only want to match contraints on anonymous types (e.g. `function({x: string}) {}`).\n+    if (constraintObj.isConstructor() && !constraintObj.isInterface()) {\n+      ObjectType instance = constraintObj.getPrototypeObject();\n+      if (!instance.isOrHasTemplatedType()\n+          || (instance.getTemplatedTypes().size() == 1\n+              && instance.getConstructor().getTemplateTypes().size() == 1)) {\n+        return;\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}