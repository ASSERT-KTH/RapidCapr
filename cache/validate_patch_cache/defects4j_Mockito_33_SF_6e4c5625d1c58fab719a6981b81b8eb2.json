{
    "patch": "    public boolean hasSameMethod(Invocation candidate) {        \n        //not using method.equals() for 1 good reason:\n        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n        Method m1 = invocation.getMethod();\n        Method m2 = candidate.getMethod();\n        \n        if(m1.getName().equals(m2.getName())){\n            Class<?>[] params1 = m1.getParameterTypes();\n            Class<?>[] params2 = m2.getParameterTypes();\n            if(params1.length == params2.length){\n                boolean paramsMatch = true;\n                for(int i = 0; i < params1.length; i++){\n                    if(!params1[i].equals(params2[i])){\n                        paramsMatch = false;\n                        break;\n                    }\n                }\n                if(paramsMatch && m1.getReturnType().equals(m2.getReturnType())){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 203413fc9..1574ebbfe 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -95,8 +95,23 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n         Method m1 = invocation.getMethod();\n         Method m2 = candidate.getMethod();\n         \n-        \t/* Avoid unnecessary cloning */\n-        return m1.equals(m2);\n+        if(m1.getName().equals(m2.getName())){\n+            Class<?>[] params1 = m1.getParameterTypes();\n+            Class<?>[] params2 = m2.getParameterTypes();\n+            if(params1.length == params2.length){\n+                boolean paramsMatch = true;\n+                for(int i = 0; i < params1.length; i++){\n+                    if(!params1[i].equals(params2[i])){\n+                        paramsMatch = false;\n+                        break;\n+                    }\n+                }\n+                if(paramsMatch && m1.getReturnType().equals(m2.getReturnType())){\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n     }\n     \n     public Location getLocation() {\n@@ -126,4 +141,4 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n \n         return out;\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}