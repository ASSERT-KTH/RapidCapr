{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  List<Node> args = Lists.newArrayList(arguments);\n  int numArgs = args.size();\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  boolean hasVarArgs = functionType.hasRestFormals();\n  boolean hasVarArgsAfterOptional = false;\n\n  // Determine the number of required and optional arguments\n  int numRequiredParams = 0;\n  int numOptionalParams = 0;\n  for (Node parameter : functionType.getParameters()) {\n    if (parameter.isDefaultValue()) {\n      numOptionalParams++;\n    } else if (parameter.isRest()) {\n      // Varargs are optional but cannot appear before required parameters\n      hasVarArgsAfterOptional = true;\n    } else if (!hasVarArgsAfterOptional) {\n      numRequiredParams++;\n    } else { // we have finished with non-varargs options, and found varargs\n      hasVarArgs = true;\n    }\n  }\n\n  // Check each argument against its corresponding parameter\n  int numRequiredArgs = Math.min(numArgs, numRequiredParams);\n  for (int i = 0; i < numRequiredArgs; i++) {\n    Node argument = args.get(i);\n    Node parameter = functionType.getParameter(i);\n    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, i);\n  }\n\n  // Find the minimum number of optional parameters to match remaining arguments\n  int numOptionalParamsToMatch = Math.min(numArgs - numRequiredParams, numOptionalParams);\n  int numTotalParamsToMatch = numRequiredParams + numOptionalParamsToMatch;\n\n  // Check each remaining argument against its corresponding (optional) parameter\n  for (int i = numRequiredArgs; i < numTotalParamsToMatch; i++) {\n    Node argument = args.get(i);\n    Node parameter = functionType.getParameter(i);\n    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, i);\n  }\n\n  // Check remaining arguments against the varargs parameter\n  if (hasVarArgs) {\n    JSType parameterType = getJSType(functionType.getParameter(numTotalParamsToMatch));\n    for (int i = numTotalParamsToMatch; i < numArgs; i++) {\n      Node argument = args.get(i);\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), parameterType, call, i);\n    }\n  }\n\n  // Report an error if there are too few or too many arguments\n  if (numArgs < numRequiredParams) {\n    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(numRequiredParams), \"\");\n  } else if (!hasVarArgs && numArgs > numTotalParamsToMatch) {\n    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(numTotalParamsToMatch), \"\");\n  } else if (hasVarArgs && numArgs < numTotalParamsToMatch) {\n    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(numRequiredParams), \" and at least one more\");\n  } else if (hasVarArgs && numArgs > numTotalParamsToMatch + 1) {\n    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(numRequiredParams), \" and at most one more\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..07f5d53a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,39 +1396,77 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  List<Node> args = Lists.newArrayList(arguments);\n+  int numArgs = args.size();\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  boolean hasVarArgs = functionType.hasRestFormals();\n+  boolean hasVarArgsAfterOptional = false;\n+\n+  // Determine the number of required and optional arguments\n+  int numRequiredParams = 0;\n+  int numOptionalParams = 0;\n+  for (Node parameter : functionType.getParameters()) {\n+    if (parameter.isDefaultValue()) {\n+      numOptionalParams++;\n+    } else if (parameter.isRest()) {\n+      // Varargs are optional but cannot appear before required parameters\n+      hasVarArgsAfterOptional = true;\n+    } else if (!hasVarArgsAfterOptional) {\n+      numRequiredParams++;\n+    } else { // we have finished with non-varargs options, and found varargs\n+      hasVarArgs = true;\n     }\n+  }\n+\n+  // Check each argument against its corresponding parameter\n+  int numRequiredArgs = Math.min(numArgs, numRequiredParams);\n+  for (int i = 0; i < numRequiredArgs; i++) {\n+    Node argument = args.get(i);\n+    Node parameter = functionType.getParameter(i);\n+    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, i);\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  // Find the minimum number of optional parameters to match remaining arguments\n+  int numOptionalParamsToMatch = Math.min(numArgs - numRequiredParams, numOptionalParams);\n+  int numTotalParamsToMatch = numRequiredParams + numOptionalParamsToMatch;\n+\n+  // Check each remaining argument against its corresponding (optional) parameter\n+  for (int i = numRequiredArgs; i < numTotalParamsToMatch; i++) {\n+    Node argument = args.get(i);\n+    Node parameter = functionType.getParameter(i);\n+    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, i);\n+  }\n+\n+  // Check remaining arguments against the varargs parameter\n+  if (hasVarArgs) {\n+    JSType parameterType = getJSType(functionType.getParameter(numTotalParamsToMatch));\n+    for (int i = numTotalParamsToMatch; i < numArgs; i++) {\n+      Node argument = args.get(i);\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), parameterType, call, i);\n     }\n   }\n \n+  // Report an error if there are too few or too many arguments\n+  if (numArgs < numRequiredParams) {\n+    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), String.valueOf(numRequiredParams), \"\");\n+  } else if (!hasVarArgs && numArgs > numTotalParamsToMatch) {\n+    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), String.valueOf(numTotalParamsToMatch), \"\");\n+  } else if (hasVarArgs && numArgs < numTotalParamsToMatch) {\n+    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), String.valueOf(numRequiredParams), \" and at least one more\");\n+  } else if (hasVarArgs && numArgs > numTotalParamsToMatch + 1) {\n+    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), String.valueOf(numRequiredParams), \" and at most one more\");\n+  }\n+}\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}