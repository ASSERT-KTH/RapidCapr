{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // A map for arguments that are being referenced by some value\n    Map<String, Node> referencedArgs = new HashMap<String, Node>();\n\n    // Traverse the AST to find all references to variables in the scope of the function\n    NodeTraversal.traverse(compiler, function, new NodeTraversal.Callback() {\n      @Override\n      public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n        // Do not enter into sub-functions or sub-expressions\n        return !n.isFunction() && !n.isScript()\n            && !parent.isFunction() && !parent.isScript();\n      }\n\n      @Override\n      public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n        // Add all references to function arguments to the list of referenced arguments\n        if (n.isName() && n.getBooleanProp(Node.IS_REFERENCE_NAME)) {\n          String name = n.getString();\n          if (fnScope.isDeclared(name, false)) {\n            Var var = fnScope.getVar(name);\n            if (referenced.contains(var) && var.getParentNode() == argList) {\n              referencedArgs.put(name, var.getParentNode());\n            }\n          }\n        }\n      }\n    });\n\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      String argName = lastArg.getString();\n      Var var = fnScope.getVar(argName);\n      if (!referenced.contains(var)) {\n        if (!modifyCallers && !referencedArgs.containsKey(argName)) {\n          // If the current argument is not referenced by any sub-expression\n          // in the function as well as any calling functions, then it can\n          // be safely removed\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    // If we are optimizing callers, then do this last\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f49be014 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,67 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // A map for arguments that are being referenced by some value\n+    Map<String, Node> referencedArgs = new HashMap<String, Node>();\n+\n+    // Traverse the AST to find all references to variables in the scope of the function\n+    NodeTraversal.traverse(compiler, function, new NodeTraversal.Callback() {\n+      @Override\n+      public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+        // Do not enter into sub-functions or sub-expressions\n+        return !n.isFunction() && !n.isScript()\n+            && !parent.isFunction() && !parent.isScript();\n+      }\n+\n+      @Override\n+      public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n+        // Add all references to function arguments to the list of referenced arguments\n+        if (n.isName() && n.getBooleanProp(Node.IS_REFERENCE_NAME)) {\n+          String name = n.getString();\n+          if (fnScope.isDeclared(name, false)) {\n+            Var var = fnScope.getVar(name);\n+            if (referenced.contains(var) && var.getParentNode() == argList) {\n+              referencedArgs.put(name, var.getParentNode());\n+            }\n+          }\n+        }\n+      }\n+    });\n+\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      String argName = lastArg.getString();\n+      Var var = fnScope.getVar(argName);\n+      if (!referenced.contains(var)) {\n+        if (!modifyCallers && !referencedArgs.containsKey(argName)) {\n+          // If the current argument is not referenced by any sub-expression\n+          // in the function as well as any calling functions, then it can\n+          // be safely removed\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      } else {\n+        break;\n+      }\n+    }\n+    // If we are optimizing callers, then do this last\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}