{
    "patch": "import com.google.javascript.jscomp.*;\nimport java.util.*;\n \n...\n \nprivate static final DiagnosticType UNDEFINED_VARIABLE_WARNING =\n     DiagnosticType.warning(\n         \"JSC_UNDEFINED_VARIABLE\",\n         \"undefined variable(s) {0}\");\n\nprivate void checkUndefinedVariables(AbstractCompiler compiler, NodeTraversal t) {\n  List<JSError> warnings = new ArrayList<>();\n  Node root = compiler.getJsRoot();\n \n  NodeTraversal.traverse(compiler, root, new NodeTraversal.Callback() {\n\n    @Override\n    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n      return true;\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      // Check for undefined variables\n      if (n.isName() && !NodeUtil.isVarDeclaration(n.getParent())) {\n        String name = n.getString();\n\n        // Ignore the \"undefined\" variable name\n        if (!\"undefined\".equals(name)) {\n          // Handle special cases where the built-in function handles the variable\n          if (\"require\".equals(name)\n              || \"module\".equals(name)\n              || \"exports\".equals(name)\n              || \"window\".equals(name)\n              || \"global\".equals(name)) {\n            return;\n          } else if (n.isGetProp() && n.getNext() != null && \"split\".equals(n.getNext().getString())) {\n            // Do nothing and let the built-in split handle it\n            return;\n          } else if (n.getJSType() != null && NodeUtil.isAssignmentOp(parent)) {\n            // Do nothing and let the assignment handle it\n            return;\n          } else {\n            warnings.add(JSError.make(n, UNDEFINED_VARIABLE_WARNING, input));\n          }\n        }\n      }\n    }\n  });\n\n  for (JSError warning : warnings) {\n    compiler.report(warning);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}