{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n\n      if (n.getType() == Token.OBJECTLIT && parent.getType() == Token.ASSIGN) {\n        ObjectType objectType = ObjectType.fromFunctionNode(n, scope);\n        if (objectType != null) {\n          ObjectType.ObjectLiteralCast objectLiteral =\n              ObjectType.ObjectLiteralCast.checkType(parseContext.getScope(), objectType);\n          JSType rightHandType =\n              ObjectType.castObjectToClosure(parseContext.getScope(), objectLiteral);\n          Node rvalue = parent.getLastChild();\n          if (rvalue.getType() == Token.OBJECTLIT) {\n            JSTypeInferrer inferencer = new JSTypeInferrer(parseContext);\n            JSType type = inferencer.inferObjectType(rvalue);\n            rightHandType = type;\n          } else if (rvalue.getType() == Token.NAME) {\n            String varName = rvalue.getString();\n            Var var = scope.getVar(varName);\n            if (var != null) {\n              rightHandType = var.getType();\n            }\n          } else if (rvalue.isFunction()) {\n            rightHandType = FunctionType.normalizedFunction(parseContext.getScope(), n);\n          }\n          setObjectLiteralCastType(parent, objectType, rightHandType);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..3bf5cc50 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1463,6 +1463,31 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n+\n+      if (n.getType() == Token.OBJECTLIT && parent.getType() == Token.ASSIGN) {\n+        ObjectType objectType = ObjectType.fromFunctionNode(n, scope);\n+        if (objectType != null) {\n+          ObjectType.ObjectLiteralCast objectLiteral =\n+              ObjectType.ObjectLiteralCast.checkType(parseContext.getScope(), objectType);\n+          JSType rightHandType =\n+              ObjectType.castObjectToClosure(parseContext.getScope(), objectLiteral);\n+          Node rvalue = parent.getLastChild();\n+          if (rvalue.getType() == Token.OBJECTLIT) {\n+            JSTypeInferrer inferencer = new JSTypeInferrer(parseContext);\n+            JSType type = inferencer.inferObjectType(rvalue);\n+            rightHandType = type;\n+          } else if (rvalue.getType() == Token.NAME) {\n+            String varName = rvalue.getString();\n+            Var var = scope.getVar(varName);\n+            if (var != null) {\n+              rightHandType = var.getType();\n+            }\n+          } else if (rvalue.isFunction()) {\n+            rightHandType = FunctionType.normalizedFunction(parseContext.getScope(), n);\n+          }\n+          setObjectLiteralCastType(parent, objectType, rightHandType);\n+        }\n+      }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}