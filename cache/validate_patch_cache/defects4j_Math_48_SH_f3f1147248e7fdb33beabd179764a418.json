{
    "patch": "                    // Detect early that algorithm is stuck, instead of waiting for\n                    // the maximum number of iterations to be exceeded.\n                    final double delta = FastMath.max(rtol * FastMath.abs(x1),\n                                                      atol);\n                    if (FastMath.abs(x - x1) < 0.5 * delta ||\n                        FastMath.abs(f1) <= ftol) {\n                        if (FastMath.abs(f1) < FastMath.abs(f0)) {\n                            x0 = x1;\n                            f0 = f1;\n                        }\n                        return x1;\n                    }\n\n                    // If the current interval is too small, given the accuracy,\n                    // then terminate as too small\n                    if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                              atol)) {\n                        throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED,\n                                                       x1, x0, f1, f0);\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..666004825 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,26 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                    // Detect early that algorithm is stuck, instead of waiting for\n+                    // the maximum number of iterations to be exceeded.\n+                    final double delta = FastMath.max(rtol * FastMath.abs(x1),\n+                                                      atol);\n+                    if (FastMath.abs(x - x1) < 0.5 * delta ||\n+                        FastMath.abs(f1) <= ftol) {\n+                        if (FastMath.abs(f1) < FastMath.abs(f0)) {\n+                            x0 = x1;\n+                            f0 = f1;\n+                        }\n+                        return x1;\n+                    }\n+\n+                    // If the current interval is too small, given the accuracy,\n+                    // then terminate as too small\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n+                                                              atol)) {\n+                        throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED,\n+                                                       x1, x0, f1, f0);\n+                    }\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}