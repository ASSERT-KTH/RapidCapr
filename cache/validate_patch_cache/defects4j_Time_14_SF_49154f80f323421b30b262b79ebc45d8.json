{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return Arrays.copyOf(values, values.length);\n    }\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        try {\n            return iChronology.get(partial, instant);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Resulting date is invalid\", e);\n        }\n    }\n\n    int[] newValues = Arrays.copyOf(values, values.length);\n\n    // Calculate new values for year, month, and day fields\n    if (fieldIndex == DateTimeFieldType.year().getFieldIndex()) {\n        newValues[DateTimeFieldType.year().getFieldIndex()] = FieldUtils.safeToInt(FieldUtils.safeAdd(values[fieldIndex], valueToAdd));\n    } else if (fieldIndex == DateTimeFieldType.monthOfYear().getFieldIndex()) {\n        int newMonth = FieldUtils.safeAdd(values[fieldIndex], valueToAdd);\n        int year = iChronology.year().get(partial, iChronology.currentTimeMillis());\n        while (newMonth < 1) {\n            newMonth = newMonth + 12;\n            year = iChronology.year().add(year, -1);\n        }\n        while (newMonth > 12) {\n            newMonth = newMonth - 12;\n            year = iChronology.year().add(year, 1);\n        }\n        int maxDay = iChronology.monthOfYear().withMaximumValue().getMaximumValue();\n        int dayIndex = DateTimeFieldType.dayOfMonth().getFieldIndex();\n        if (dayIndex < values.length && newValues[dayIndex] > maxDay) {\n            newValues[dayIndex] = maxDay;\n        }\n        newValues[DateTimeFieldType.year().getFieldIndex()] = year;\n        newValues[DateTimeFieldType.monthOfYear().getFieldIndex()] = newMonth;\n    } else if (fieldIndex == DateTimeFieldType.dayOfMonth().getFieldIndex()) {\n        int dayOfTheMonth = FieldUtils.safeAdd(values[fieldIndex], valueToAdd);\n        int year = values[DateTimeFieldType.year().getFieldIndex()];\n        int month = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n        int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);\n        if (dayOfTheMonth < 1) {\n            int monthDiff = (int)Math.ceil((float)dayOfTheMonth / maxDay);\n            dayOfTheMonth = dayOfTheMonth - (monthDiff * maxDay);\n            month = iChronology.monthOfYear().add(month, monthDiff - 1);\n            while (dayOfTheMonth < 1) {\n                dayOfTheMonth = dayOfTheMonth + iChronology.dayOfMonth().getMaximumValue(year, month);\n                month = iChronology.monthOfYear().add(month, -1);\n            }\n            year = iChronology.year().get(partial, iChronology.currentTimeMillis());\n            while (month < 1) {\n                month = month + 12;\n                year = iChronology.year().add(year, -1);\n            }\n            while (month > 12) {\n                month = month - 12;\n                year = iChronology.year().add(year, 1);\n            }\n            newValues[DateTimeFieldType.year().getFieldIndex()] = year;\n            newValues[DateTimeFieldType.monthOfYear().getFieldIndex()] = month;\n        } else if (dayOfTheMonth <= maxDay) {\n            newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = dayOfTheMonth;\n        } else {\n            int monthDiff = (int)Math.floor((float)dayOfTheMonth / maxDay);\n            dayOfTheMonth = dayOfTheMonth - (monthDiff * maxDay);\n            month = iChronology.monthOfYear().add(month, monthDiff - 1);\n            while (dayOfTheMonth > maxDay) {\n                dayOfTheMonth = dayOfTheMonth - iChronology.dayOfMonth().getMaximumValue(year, month);\n                month = iChronology.monthOfYear().add(month, 1);\n            }\n            year = iChronology.year().get(partial, iChronology.currentTimeMillis());\n            while (month < 1) {\n                month = month + 12;\n                year = iChronology.year().add(year, -1);\n            }\n            while (month > 12) {\n                month = month - 12;\n                year = iChronology.year().add(year, 1);\n            }\n            newValues[DateTimeFieldType.year().getFieldIndex()] = year;\n            newValues[DateTimeFieldType.monthOfYear().getFieldIndex()] = month;\n            newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = dayOfTheMonth;\n        }\n    }\n    return newValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..a1f97ff4 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,99 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return Arrays.copyOf(values, values.length);\n+    }\n+\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n+        instant = add(instant, valueToAdd);\n+        try {\n             return iChronology.get(partial, instant);\n+        } catch (IllegalArgumentException e) {\n+            throw new IllegalArgumentException(\"Resulting date is invalid\", e);\n+        }\n+    }\n+\n+    int[] newValues = Arrays.copyOf(values, values.length);\n+\n+    // Calculate new values for year, month, and day fields\n+    if (fieldIndex == DateTimeFieldType.year().getFieldIndex()) {\n+        newValues[DateTimeFieldType.year().getFieldIndex()] = FieldUtils.safeToInt(FieldUtils.safeAdd(values[fieldIndex], valueToAdd));\n+    } else if (fieldIndex == DateTimeFieldType.monthOfYear().getFieldIndex()) {\n+        int newMonth = FieldUtils.safeAdd(values[fieldIndex], valueToAdd);\n+        int year = iChronology.year().get(partial, iChronology.currentTimeMillis());\n+        while (newMonth < 1) {\n+            newMonth = newMonth + 12;\n+            year = iChronology.year().add(year, -1);\n+        }\n+        while (newMonth > 12) {\n+            newMonth = newMonth - 12;\n+            year = iChronology.year().add(year, 1);\n+        }\n+        int maxDay = iChronology.monthOfYear().withMaximumValue().getMaximumValue();\n+        int dayIndex = DateTimeFieldType.dayOfMonth().getFieldIndex();\n+        if (dayIndex < values.length && newValues[dayIndex] > maxDay) {\n+            newValues[dayIndex] = maxDay;\n+        }\n+        newValues[DateTimeFieldType.year().getFieldIndex()] = year;\n+        newValues[DateTimeFieldType.monthOfYear().getFieldIndex()] = newMonth;\n+    } else if (fieldIndex == DateTimeFieldType.dayOfMonth().getFieldIndex()) {\n+        int dayOfTheMonth = FieldUtils.safeAdd(values[fieldIndex], valueToAdd);\n+        int year = values[DateTimeFieldType.year().getFieldIndex()];\n+        int month = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+        int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);\n+        if (dayOfTheMonth < 1) {\n+            int monthDiff = (int)Math.ceil((float)dayOfTheMonth / maxDay);\n+            dayOfTheMonth = dayOfTheMonth - (monthDiff * maxDay);\n+            month = iChronology.monthOfYear().add(month, monthDiff - 1);\n+            while (dayOfTheMonth < 1) {\n+                dayOfTheMonth = dayOfTheMonth + iChronology.dayOfMonth().getMaximumValue(year, month);\n+                month = iChronology.monthOfYear().add(month, -1);\n+            }\n+            year = iChronology.year().get(partial, iChronology.currentTimeMillis());\n+            while (month < 1) {\n+                month = month + 12;\n+                year = iChronology.year().add(year, -1);\n+            }\n+            while (month > 12) {\n+                month = month - 12;\n+                year = iChronology.year().add(year, 1);\n+            }\n+            newValues[DateTimeFieldType.year().getFieldIndex()] = year;\n+            newValues[DateTimeFieldType.monthOfYear().getFieldIndex()] = month;\n+        } else if (dayOfTheMonth <= maxDay) {\n+            newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = dayOfTheMonth;\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            int monthDiff = (int)Math.floor((float)dayOfTheMonth / maxDay);\n+            dayOfTheMonth = dayOfTheMonth - (monthDiff * maxDay);\n+            month = iChronology.monthOfYear().add(month, monthDiff - 1);\n+            while (dayOfTheMonth > maxDay) {\n+                dayOfTheMonth = dayOfTheMonth - iChronology.dayOfMonth().getMaximumValue(year, month);\n+                month = iChronology.monthOfYear().add(month, 1);\n+            }\n+            year = iChronology.year().get(partial, iChronology.currentTimeMillis());\n+            while (month < 1) {\n+                month = month + 12;\n+                year = iChronology.year().add(year, -1);\n+            }\n+            while (month > 12) {\n+                month = month - 12;\n+                year = iChronology.year().add(year, 1);\n+            }\n+            newValues[DateTimeFieldType.year().getFieldIndex()] = year;\n+            newValues[DateTimeFieldType.monthOfYear().getFieldIndex()] = month;\n+            newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = dayOfTheMonth;\n         }\n     }\n+    return newValues;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}