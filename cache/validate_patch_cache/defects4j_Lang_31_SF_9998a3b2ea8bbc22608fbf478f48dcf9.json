{
    "patch": "public static boolean containsAny(String str, char[] chars) {\n    if (str != null && chars != null) {\n        if (StringUtils.hasSurrogateChars(str) || StringUtils.hasSurrogateChars(chars)) {\n            for (int i = 0; i < str.length(); i++) {\n                if (StringUtils.isSurrogate(str.charAt(i)) && i < str.length() - 1) {\n                    char high = str.charAt(i);\n                    char low = str.charAt(i + 1);\n                    int codepoint = StringUtils.toCodePoint(high, low);\n                    if (containsAnyCodePoint(codepoint, chars)) {\n                        return true;\n                    }\n                    i++;\n                } else {\n                    char c = str.charAt(i);\n                    if (containsAnyChar(c, chars)) {\n                        return true;\n                    }\n                }\n            }\n        } else {\n            for (char c : chars) {\n                if (str.indexOf(c) != -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean containsAnyChar(char c, char[] chars) {\n    for (char ch : chars) {\n        if (ch == c) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate static boolean containsAnyCodePoint(int codepoint, char[] chars) {\n    for (char c : chars) {\n        if (StringUtils.isSurrogate(c)) {\n            continue;\n        }\n        if (codepoint == (int) c) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..9ad02b37 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,56 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] chars) {\n+    if (str != null && chars != null) {\n+        if (StringUtils.hasSurrogateChars(str) || StringUtils.hasSurrogateChars(chars)) {\n+            for (int i = 0; i < str.length(); i++) {\n+                if (StringUtils.isSurrogate(str.charAt(i)) && i < str.length() - 1) {\n+                    char high = str.charAt(i);\n+                    char low = str.charAt(i + 1);\n+                    int codepoint = StringUtils.toCodePoint(high, low);\n+                    if (containsAnyCodePoint(codepoint, chars)) {\n+                        return true;\n+                    }\n+                    i++;\n+                } else {\n+                    char c = str.charAt(i);\n+                    if (containsAnyChar(c, chars)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        } else {\n+            for (char c : chars) {\n+                if (str.indexOf(c) != -1) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean containsAnyChar(char c, char[] chars) {\n+    for (char ch : chars) {\n+        if (ch == c) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean containsAnyCodePoint(int codepoint, char[] chars) {\n+    for (char c : chars) {\n+        if (StringUtils.isSurrogate(c)) {\n+            continue;\n+        }\n+        if (codepoint == (int) c) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}