{
    "patch": "public static double regularizedGammaP(double a, double x)\n{\n    if (Double.isNaN(a)\n            || Double.isNaN(x)\n            || a <= 0.0\n            || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n\n    // Calculate series\n    double n = 0.0;\n    double sum = 1.0 / a;\n    double term = sum;\n    while (Math.abs(term / sum) > 10e-15 && n < 1000.0) {\n        n += 1.0;\n        term *= x / (a + n);\n        sum += term;\n    }\n\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\npublic static double regularizedGammaQ(final double a, final double x) {\n\n    final double EPSILON = 10e-15;\n\n    if (Double.isNaN(a)\n            || Double.isNaN(x)\n            || a <= 0.0\n            || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n\n    // Continued fraction\n    double f = 0.0;\n    double C = 1.0;\n    double D = x + 1.0 - a;\n    double a1 = D;\n    double h = a1;\n    double n = 1.0;\n    while (Math.abs(a1 / f) > EPSILON && n < 1000.0) {\n        double b1 = n * (a - n);\n        double c1 = x + n + 1.0 - a;\n        double d1 = 1.0 / (b1 + c1 / D);\n        f = a1 * d1;\n        C *= d1;\n        D = b1 + c1 / D;\n        a1 = D * f - a1;\n        n += 1.0;\n    }\n\n    return C * Math.exp(-x + a * Math.log(x) - logGamma(a)) / regularizedGammaP(a, x);\n}\n",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..93476973e 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,72 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x)\n+{\n+    if (Double.isNaN(a)\n+            || Double.isNaN(x)\n+            || a <= 0.0\n+            || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+\n+    // Calculate series\n+    double n = 0.0;\n+    double sum = 1.0 / a;\n+    double term = sum;\n+    while (Math.abs(term / sum) > 10e-15 && n < 1000.0) {\n+        n += 1.0;\n+        term *= x / (a + n);\n+        sum += term;\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+public static double regularizedGammaQ(final double a, final double x) {\n+\n+    final double EPSILON = 10e-15;\n+\n+    if (Double.isNaN(a)\n+            || Double.isNaN(x)\n+            || a <= 0.0\n+            || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+\n+    // Continued fraction\n+    double f = 0.0;\n+    double C = 1.0;\n+    double D = x + 1.0 - a;\n+    double a1 = D;\n+    double h = a1;\n+    double n = 1.0;\n+    while (Math.abs(a1 / f) > EPSILON && n < 1000.0) {\n+        double b1 = n * (a - n);\n+        double c1 = x + n + 1.0 - a;\n+        double d1 = 1.0 / (b1 + c1 / D);\n+        f = a1 * d1;\n+        C *= d1;\n+        D = b1 + c1 / D;\n+        a1 = D * f - a1;\n+        n += 1.0;\n+    }\n+\n+    return C * Math.exp(-x + a * Math.log(x) - logGamma(a)) / regularizedGammaP(a, x);\n+}\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}