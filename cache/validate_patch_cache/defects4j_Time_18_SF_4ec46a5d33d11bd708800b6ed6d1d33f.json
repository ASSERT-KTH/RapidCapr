{
    "patch": "        long instant = 0;\n        try {\n            instant = iGregorianChronology.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalFieldValueException e) {\n            if (e.getErrorCode() != DateTimeFieldType.dayOfMonth().getField(ISOChronology.getInstanceUTC()).getRangeDurationField().getType()) {\n                throw e;\n            } else {\n                // Maybe it's Julian.\n                instant = iJulianChronology.getDateTimeMillis\n                        (year, monthOfYear, dayOfMonth,\n                                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                if (instant >= iCutoverMillis) {\n                    // Okay, it's in the illegal cutover gap.\n                    throw new IllegalArgumentException(\"Specified date does not exist\");\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..a7d5518c 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,35 +347,23 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        }\n-\n-        // Assume date is Gregorian.\n-        long instant;\n+        long instant = 0;\n+        try {\n             instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n-            }\n-        }\n-        return instant;\n-    }\n+                    (year, monthOfYear, dayOfMonth,\n+                            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        } catch (IllegalFieldValueException e) {\n+            if (e.getErrorCode() != DateTimeFieldType.dayOfMonth().getField(ISOChronology.getInstanceUTC()).getRangeDurationField().getType()) {\n+                throw e;\n+            } else {\n+                // Maybe it's Julian.\n+                instant = iJulianChronology.getDateTimeMillis\n+                        (year, monthOfYear, dayOfMonth,\n+                                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+                if (instant >= iCutoverMillis) {\n+                    // Okay, it's in the illegal cutover gap.\n+                    throw new IllegalArgumentException(\"Specified date does not exist\");\n+                }\n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}