{
    "patch": "        // property or subproperty or the global this object.\n        if (NodeUtil.isGet(lhs)) {\n          if ((lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) ||\n              (lhs.getType() == Token.NAME &&\n              lhs.getString().equals(\"this\") &&\n              t.getInput().getVarNames().contains(\"this\"))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..974c1f0a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,13 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+        // property or subproperty or the global this object.\n+        if (NodeUtil.isGet(lhs)) {\n+          if ((lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) ||\n+              (lhs.getType() == Token.NAME &&\n+              lhs.getString().equals(\"this\") &&\n+              t.getInput().getVarNames().contains(\"this\"))) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}