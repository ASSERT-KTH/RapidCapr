{
    "patch": "public static Number createNumber(String val) throws NumberFormatException {\n    if (val == null) {\n        return null;\n    }\n    if (val.trim().length() == 0) {\n        throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n    }\n    if (val.startsWith(\"--\")) {\n        // this is protection for poorness in java.lang.BigDecimal.\n        // it accepts this as a legal value, but it does not appear\n        // to be in specification of class. OS X Java parses it to\n        // a wrong value.\n        return null;\n    }\n\n    // Deal with underscores, which are allowed as of Java 7\n    val = val.replaceAll(\"_\", \"\");\n\n    // See if it's hex, octal, or binary\n    boolean hex = false;\n    boolean binary = false;\n    boolean octal = false;\n\n    if (val.startsWith(\"-\")) {\n        val = val.substring(1);\n    }\n    int radix = 10;\n    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n        hex = true;\n        radix = 16;\n        if (val.startsWith(\"-\")) {\n            val = val.substring(3);\n        } else {\n            val = val.substring(2);\n        }\n    } else if (val.startsWith(\"0b\") || val.startsWith(\"-0b\")) {\n        binary = true;\n        radix = 2;\n        if (val.startsWith(\"-\")) {\n            val = val.substring(3);\n        } else {\n            val = val.substring(2);\n        }\n    } else {\n        // Check for octal\n        int i = 0;\n        while (i < val.length()) {\n            char ch = val.charAt(i);\n            if (ch < '0' || ch > '7') {\n                break;\n            }\n            i++;\n        }\n        if (i == val.length()) {\n            // All characters are in [0-7], so it's octal\n            octal = true;\n            radix = 8;\n            if (val.startsWith(\"-\")) {\n                val = val.substring(1);\n            }\n        }\n    }\n\n    if (hex) {\n        val = parseBigInteger(val, 16).toString();\n    } else if (binary) {\n        val = parseBigInteger(val, 2).toString();\n    } else if (octal) {\n        val = parseBigInteger(val, 8).toString();\n    }\n\n    int decimalPointIndex = val.indexOf('.');\n    if (decimalPointIndex == -1) {\n        String mant = val;\n        String dec = null;\n        String exp = null;\n\n        int eIndex = val.toLowerCase(Locale.ROOT).indexOf('e');\n        if (eIndex > -1) {\n            mant = val.substring(0, eIndex);\n            exp = val.substring(eIndex + 1);\n        }\n        return createNumber(mant, dec, exp);\n    } else {\n        String mant = val.substring(0, decimalPointIndex);\n        String dec = val.substring(decimalPointIndex + 1);\n        String exp = null;\n\n        int eIndex = dec.toLowerCase(Locale.ROOT).indexOf('e');\n        if (eIndex > -1) {\n            exp = dec.substring(eIndex + 1);\n            dec = dec.substring(0, eIndex);\n        }\n\n        if (mant.isEmpty() && dec.isEmpty()) {\n            return createNumber(\"0\", dec, exp);\n        }\n        return createNumber(mant, dec, exp);\n    }\n}\n\nprivate static Number createNumber(String mant, String dec, String exp) throws NumberFormatException {\n    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    if (mant == null && dec == null) {\n        throw new NumberFormatException(\"A null string is not a valid number\");\n    }\n    if (dec != null) {\n        // make sure it's not a BigDecimal with a lot of trailing zeros\n        dec = dec + \"00000000000000000000000000000000000000000000000000000000000000000000000000\";\n        dec = dec.substring(0, dec.indexOf('.'));\n    }\n    if (mant == null || mant.isEmpty()) {\n        if (exp == null) {\n            return createBigDecimal(\"0\");\n        }\n        return createBigDecimal(\"0\").doubleValue() == 0 ? createBigDecimal(\"0\") : createBigDecimal(\"1e\" + exp);\n    }\n    if (exp == null) {\n        if (dec == null) {\n            try {\n                return createInteger(mant);\n            } catch (NumberFormatException nfe) {\n                // empty catch\n            }\n            try {\n                return createLong(mant);\n            } catch (NumberFormatException nfe) {\n                // empty catch\n            }\n            return createBigInteger(mant);\n        }\n        // special case for \".decimal\"\n        if (isAllZeros(mant) && mant.length() == 1) {\n            mant += dec.charAt(0);\n            dec = dec.substring(1);\n        }\n        try {\n            if (mant.charAt(0) == '-' && isDigits(mant.substring(1))) {\n                mant = mant.substring(1);\n                dec = \"-\" + dec;\n            }\n            BigInteger bi = (dec == null) ? parseBigInteger(mant) : parseBigInteger(mant + dec);\n            if (bi.bitLength() <= 31) {\n                return bi.intValue();\n            } else if (bi.bitLength() <= 63) {\n                return bi.longValue();\n            } else {\n                return bi;\n            }\n        } catch (NumberFormatException e) {\n            // Empty catch\n        }\n        return createBigDecimal(mant + \".\" + dec);\n    } else {\n        return createBigDecimal(mant + \".\" + dec).multiply(createBigDecimal(\"1e\" + exp));\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..1d3822cd 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -135,155 +135,163 @@ public final class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String val) throws NumberFormatException {\n-        if (val == null) {\n-            return null;\n-        }\n-        if (val.length() == 0) {\n-            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n-        }\n-        if (val.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n-        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n-            return createInteger(val);\n-        }   \n-        char lastChar = val.charAt(val.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = val.indexOf('.');\n-        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n+public static Number createNumber(String val) throws NumberFormatException {\n+    if (val == null) {\n+        return null;\n+    }\n+    if (val.trim().length() == 0) {\n+        throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n+    }\n+    if (val.startsWith(\"--\")) {\n+        // this is protection for poorness in java.lang.BigDecimal.\n+        // it accepts this as a legal value, but it does not appear\n+        // to be in specification of class. OS X Java parses it to\n+        // a wrong value.\n+        return null;\n+    }\n \n-        if (decPos > -1) {\n+    // Deal with underscores, which are allowed as of Java 7\n+    val = val.replaceAll(\"_\", \"\");\n \n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n-                }\n-                dec = val.substring(decPos + 1, expPos);\n-            } else {\n-                dec = val.substring(decPos + 1);\n-            }\n-            mant = val.substring(0, decPos);\n+    // See if it's hex, octal, or binary\n+    boolean hex = false;\n+    boolean binary = false;\n+    boolean octal = false;\n+\n+    if (val.startsWith(\"-\")) {\n+        val = val.substring(1);\n+    }\n+    int radix = 10;\n+    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+        hex = true;\n+        radix = 16;\n+        if (val.startsWith(\"-\")) {\n+            val = val.substring(3);\n         } else {\n-            if (expPos > -1) {\n-                mant = val.substring(0, expPos);\n-            } else {\n-                mant = val;\n+            val = val.substring(2);\n+        }\n+    } else if (val.startsWith(\"0b\") || val.startsWith(\"-0b\")) {\n+        binary = true;\n+        radix = 2;\n+        if (val.startsWith(\"-\")) {\n+            val = val.substring(3);\n+        } else {\n+            val = val.substring(2);\n+        }\n+    } else {\n+        // Check for octal\n+        int i = 0;\n+        while (i < val.length()) {\n+            char ch = val.charAt(i);\n+            if (ch < '0' || ch > '7') {\n+                break;\n             }\n-            dec = null;\n+            i++;\n         }\n-        if (!Character.isDigit(lastChar)) {\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length() - 1);\n-            } else {\n-                exp = null;\n+        if (i == val.length()) {\n+            // All characters are in [0-7], so it's octal\n+            octal = true;\n+            radix = 8;\n+            if (val.startsWith(\"-\")) {\n+                val = val.substring(1);\n             }\n-            //Requesting a specific type..\n-            String numeric = val.substring(0, val.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n+        }\n+    }\n \n-                    }\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n+    if (hex) {\n+        val = parseBigInteger(val, 16).toString();\n+    } else if (binary) {\n+        val = parseBigInteger(val, 2).toString();\n+    } else if (octal) {\n+        val = parseBigInteger(val, 8).toString();\n+    }\n \n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n-                    }\n-                    //Fall through\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // empty catch\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // empty catch\n-                    }\n-                    //Fall through\n-                default :\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n+    int decimalPointIndex = val.indexOf('.');\n+    if (decimalPointIndex == -1) {\n+        String mant = val;\n+        String dec = null;\n+        String exp = null;\n \n-            }\n-        } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length());\n-            } else {\n-                exp = null;\n-            }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(val);\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n-                try {\n-                    return createLong(val);\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n-                return createBigInteger(val);\n+        int eIndex = val.toLowerCase(Locale.ROOT).indexOf('e');\n+        if (eIndex > -1) {\n+            mant = val.substring(0, eIndex);\n+            exp = val.substring(eIndex + 1);\n+        }\n+        return createNumber(mant, dec, exp);\n+    } else {\n+        String mant = val.substring(0, decimalPointIndex);\n+        String dec = val.substring(decimalPointIndex + 1);\n+        String exp = null;\n \n-            } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-                try {\n-                    Float f = createFloat(val);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n-                try {\n-                    Double d = createDouble(val);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n+        int eIndex = dec.toLowerCase(Locale.ROOT).indexOf('e');\n+        if (eIndex > -1) {\n+            exp = dec.substring(eIndex + 1);\n+            dec = dec.substring(0, eIndex);\n+        }\n \n-                return createBigDecimal(val);\n+        if (mant.isEmpty() && dec.isEmpty()) {\n+            return createNumber(\"0\", dec, exp);\n+        }\n+        return createNumber(mant, dec, exp);\n+    }\n+}\n \n+private static Number createNumber(String mant, String dec, String exp) throws NumberFormatException {\n+    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+    if (mant == null && dec == null) {\n+        throw new NumberFormatException(\"A null string is not a valid number\");\n+    }\n+    if (dec != null) {\n+        // make sure it's not a BigDecimal with a lot of trailing zeros\n+        dec = dec + \"00000000000000000000000000000000000000000000000000000000000000000000000000\";\n+        dec = dec.substring(0, dec.indexOf('.'));\n+    }\n+    if (mant == null || mant.isEmpty()) {\n+        if (exp == null) {\n+            return createBigDecimal(\"0\");\n+        }\n+        return createBigDecimal(\"0\").doubleValue() == 0 ? createBigDecimal(\"0\") : createBigDecimal(\"1e\" + exp);\n+    }\n+    if (exp == null) {\n+        if (dec == null) {\n+            try {\n+                return createInteger(mant);\n+            } catch (NumberFormatException nfe) {\n+                // empty catch\n             }\n-\n+            try {\n+                return createLong(mant);\n+            } catch (NumberFormatException nfe) {\n+                // empty catch\n+            }\n+            return createBigInteger(mant);\n+        }\n+        // special case for \".decimal\"\n+        if (isAllZeros(mant) && mant.length() == 1) {\n+            mant += dec.charAt(0);\n+            dec = dec.substring(1);\n         }\n+        try {\n+            if (mant.charAt(0) == '-' && isDigits(mant.substring(1))) {\n+                mant = mant.substring(1);\n+                dec = \"-\" + dec;\n+            }\n+            BigInteger bi = (dec == null) ? parseBigInteger(mant) : parseBigInteger(mant + dec);\n+            if (bi.bitLength() <= 31) {\n+                return bi.intValue();\n+            } else if (bi.bitLength() <= 63) {\n+                return bi.longValue();\n+            } else {\n+                return bi;\n+            }\n+        } catch (NumberFormatException e) {\n+            // Empty catch\n+        }\n+        return createBigDecimal(mant + \".\" + dec);\n+    } else {\n+        return createBigDecimal(mant + \".\" + dec).multiply(createBigDecimal(\"1e\" + exp));\n     }\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}