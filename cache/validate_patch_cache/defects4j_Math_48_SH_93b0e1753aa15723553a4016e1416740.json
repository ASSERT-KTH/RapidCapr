{
    "patch": "                    if (i >= (getMaximalIterationCount() - 1)){\n                        throw new ConvergenceException(\n                            \"Maximum number of iterations exceeded. \" +\n                            \"Iterations: \" + getMaximalIterationCount() +\n                            \", function evaluations: \" + getEvaluations());\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..cc8f841d1 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,12 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                    if (i >= (getMaximalIterationCount() - 1)){\n+                        throw new ConvergenceException(\n+                            \"Maximum number of iterations exceeded. \" +\n+                            \"Iterations: \" + getMaximalIterationCount() +\n+                            \", function evaluations: \" + getEvaluations());\n+                    }\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}