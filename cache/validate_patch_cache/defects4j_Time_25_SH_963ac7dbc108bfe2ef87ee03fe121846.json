{
    "patch": "final int delta = offsetLocal - offsetAdjusted;\nif (delta >= 0) {\n    // next transition after instantAdjusted\n    final long nextTransition = nextTransition(instantAdjusted);\n    // when using the current adjustment, get the next transition after instantLocal\n    final long adjNext = nextTransition(instantLocal - offsetAdjusted);\n    if (adjNext != nextTransition) {\n        // compare the offset before and after the current adjustment, if they are the same we know the adjustment is correct\n        if (getOffset(nextTransition - 1) >= getOffset(nextTransition)) {\n            return getOffset(nextTransition) + delta;\n        }\n        // the next transition is before the calculated time for an adjustment, so the adjustment is incorrect, return the standard offset\n        return offsetLocal;\n    } else {\n        // the adjustment is correct, return the adjusted offset from instantLocal\n        return offsetAdjusted;\n    }\n} else {\n    // the adjustment goes back in time, so the next transition before instantLocal needs to be found\n    long lastTransition = previousTransition(instantLocal - offsetAdjusted);\n    // the next transition before instantAdjusted needs to be found\n    final long lastAdj = previousTransition(instantAdjusted);\n    final int offsetLast = getOffset(lastTransition);\n    // if the original offsetLast is lower than the adjusted offset, we need to use the lastAdj as the last transition\n    if (offsetLast < offsetAdjusted) {\n        lastTransition = previousTransition(lastAdj);\n    }\n    final int offsetBeforeLast = getOffset(lastTransition);\n\n    // check that the adjusted offset is lower than the standard offset before returning the adjusted offset\n    if (offsetBeforeLast >= offsetAdjusted) {\n        return offsetLocal;\n    }\n\n    // calculate the minimum and maximum values and use it to determine the correct offset\n    final int minDelta = Math.min(delta, 0);\n    final int maxDelta = Math.max(delta, 0);\n\n    // the offset before the last transition is lower than the adjusted offset, so we need to use it as the new offset\n    if (offsetBeforeLast < offsetLocal + minDelta) {\n        // find the transition before the last transition to determine the correct offset\n        final long prevTransition = previousTransition(lastAdj);\n        final int offsetPrev = getOffset(prevTransition);\n\n        // if the offset before this transition is higher than the adjusted offset, use it as the new offset\n        if (offsetPrev >= offsetAdjusted && offsetPrev < offsetLocal + minDelta) {\n            return offsetPrev;\n        }\n\n        // otherwise, just use the offset before the last transition as the new offset\n        return offsetBeforeLast;\n    } else {\n        // the adjusted offset is within range of the standard offset\n        final long nextTransition = nextTransition(lastAdj) + offsetAdjusted;\n        final int offsetNext = getOffset(nextTransition);\n\n        // the offset after the next transition is within range of the adjusted offset, so use the upper-bound as the new offset\n        if (offsetNext <= offsetLocal + maxDelta) {\n            return offsetNext;\n        }\n\n        // otherwise, just use the adjusted offset as the new offset\n        return offsetAdjusted;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1128334c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,71 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+final int delta = offsetLocal - offsetAdjusted;\n+if (delta >= 0) {\n+    // next transition after instantAdjusted\n+    final long nextTransition = nextTransition(instantAdjusted);\n+    // when using the current adjustment, get the next transition after instantLocal\n+    final long adjNext = nextTransition(instantLocal - offsetAdjusted);\n+    if (adjNext != nextTransition) {\n+        // compare the offset before and after the current adjustment, if they are the same we know the adjustment is correct\n+        if (getOffset(nextTransition - 1) >= getOffset(nextTransition)) {\n+            return getOffset(nextTransition) + delta;\n+        }\n+        // the next transition is before the calculated time for an adjustment, so the adjustment is incorrect, return the standard offset\n+        return offsetLocal;\n+    } else {\n+        // the adjustment is correct, return the adjusted offset from instantLocal\n+        return offsetAdjusted;\n+    }\n+} else {\n+    // the adjustment goes back in time, so the next transition before instantLocal needs to be found\n+    long lastTransition = previousTransition(instantLocal - offsetAdjusted);\n+    // the next transition before instantAdjusted needs to be found\n+    final long lastAdj = previousTransition(instantAdjusted);\n+    final int offsetLast = getOffset(lastTransition);\n+    // if the original offsetLast is lower than the adjusted offset, we need to use the lastAdj as the last transition\n+    if (offsetLast < offsetAdjusted) {\n+        lastTransition = previousTransition(lastAdj);\n+    }\n+    final int offsetBeforeLast = getOffset(lastTransition);\n+\n+    // check that the adjusted offset is lower than the standard offset before returning the adjusted offset\n+    if (offsetBeforeLast >= offsetAdjusted) {\n+        return offsetLocal;\n+    }\n+\n+    // calculate the minimum and maximum values and use it to determine the correct offset\n+    final int minDelta = Math.min(delta, 0);\n+    final int maxDelta = Math.max(delta, 0);\n+\n+    // the offset before the last transition is lower than the adjusted offset, so we need to use it as the new offset\n+    if (offsetBeforeLast < offsetLocal + minDelta) {\n+        // find the transition before the last transition to determine the correct offset\n+        final long prevTransition = previousTransition(lastAdj);\n+        final int offsetPrev = getOffset(prevTransition);\n+\n+        // if the offset before this transition is higher than the adjusted offset, use it as the new offset\n+        if (offsetPrev >= offsetAdjusted && offsetPrev < offsetLocal + minDelta) {\n+            return offsetPrev;\n+        }\n+\n+        // otherwise, just use the offset before the last transition as the new offset\n+        return offsetBeforeLast;\n+    } else {\n+        // the adjusted offset is within range of the standard offset\n+        final long nextTransition = nextTransition(lastAdj) + offsetAdjusted;\n+        final int offsetNext = getOffset(nextTransition);\n+\n+        // the offset after the next transition is within range of the adjusted offset, so use the upper-bound as the new offset\n+        if (offsetNext <= offsetLocal + maxDelta) {\n+            return offsetNext;\n+        }\n+\n+        // otherwise, just use the adjusted offset as the new offset\n+        return offsetAdjusted;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}