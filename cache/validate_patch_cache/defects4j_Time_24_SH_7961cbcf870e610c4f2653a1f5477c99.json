{
    "patch": "            if (savedFields[i].getValue() == null) {\n                DurationFieldType fieldType = savedFields[i].getType().getDurationType().getField(iChrono);\n                String fieldValue = Integer.toString(iDefaultYear);\n                if (fieldType instanceof DateTimeFieldType) {\n                    DateTimeFormatter formatter = ((DateTimeFieldType) fieldType).getDateTimeFormatter();\n                    fieldValue = formatter.withLocale(iLocale).print(iDefaultYear);\n                }\n                throw new IllegalArgumentException(\n                        \"Cannot parse \\\"\"+text+\"\\\": \"+fieldType.getName()+\" is not supported. Cannot parse \\\"\"+fieldValue+\"\\\"\");\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..53cf8114 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,16 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].getValue() == null) {\n+                DurationFieldType fieldType = savedFields[i].getType().getDurationType().getField(iChrono);\n+                String fieldValue = Integer.toString(iDefaultYear);\n+                if (fieldType instanceof DateTimeFieldType) {\n+                    DateTimeFormatter formatter = ((DateTimeFieldType) fieldType).getDateTimeFormatter();\n+                    fieldValue = formatter.withLocale(iLocale).print(iDefaultYear);\n+                }\n+                throw new IllegalArgumentException(\n+                        \"Cannot parse \\\"\"+text+\"\\\": \"+fieldType.getName()+\" is not supported. Cannot parse \\\"\"+fieldValue+\"\\\"\");\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}