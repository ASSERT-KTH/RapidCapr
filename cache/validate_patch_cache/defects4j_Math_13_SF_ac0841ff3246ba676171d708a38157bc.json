{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    RealMatrix sqrt;\n    if(m.getColumnDimension() == 1) {\n        sqrt = MatrixUtils.createRealMatrix(new double[][]{ { Math.sqrt(m.getEntry(0,0))} });\n    } else {\n        int n = m.getColumnDimension();\n        EigenDecomposition dec = new EigenDecomposition(m);\n        RealMatrix D = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n        RealMatrix V = dec.getV();\n        RealMatrix U = V.getSubMatrix(0,n-1,0,n-2);\n        RealMatrix s = V.getColumnMatrix(n-1);\n        RealMatrix T = (U.multiply(D)).multiply(U.transpose());\n        sqrt = MatrixUtils.createRealMatrix(n,n);\n        for(int i=0;i<n-1;i++) {\n            for(int j=i;j<n-1;j++) { \n                double rij = T.getEntry(i,j);\n                double sisi = s.getEntry(i,0);\n                double sj = s.getEntry(j,0);\n                double tau = 2 * FastMath.signum(rij) / ((sisi * sj));\n                double c = FastMath.sqrt(0.5 * (1+1/FastMath.sqrt(1+tau*tau)));\n                double sij = FastMath.sqrt(0.5 * (1-1/FastMath.sqrt(1+tau*tau))) * FastMath.signum(rij);\n                sqrt.setEntry(i,j, sij);\n                sqrt.setEntry(j,i, sij);\n                s.setEntry(i, 0, c * sisi - sij * sj);\n                s.setEntry(j, 0, c * sj - sij * sisi);\n            }\n        }\n        sqrt.setEntry(n-1, n-1, s.getEntry(n-1, 0));\n    }\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..46dd4467c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,35 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    RealMatrix sqrt;\n+    if(m.getColumnDimension() == 1) {\n+        sqrt = MatrixUtils.createRealMatrix(new double[][]{ { Math.sqrt(m.getEntry(0,0))} });\n+    } else {\n+        int n = m.getColumnDimension();\n+        EigenDecomposition dec = new EigenDecomposition(m);\n+        RealMatrix D = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n+        RealMatrix V = dec.getV();\n+        RealMatrix U = V.getSubMatrix(0,n-1,0,n-2);\n+        RealMatrix s = V.getColumnMatrix(n-1);\n+        RealMatrix T = (U.multiply(D)).multiply(U.transpose());\n+        sqrt = MatrixUtils.createRealMatrix(n,n);\n+        for(int i=0;i<n-1;i++) {\n+            for(int j=i;j<n-1;j++) { \n+                double rij = T.getEntry(i,j);\n+                double sisi = s.getEntry(i,0);\n+                double sj = s.getEntry(j,0);\n+                double tau = 2 * FastMath.signum(rij) / ((sisi * sj));\n+                double c = FastMath.sqrt(0.5 * (1+1/FastMath.sqrt(1+tau*tau)));\n+                double sij = FastMath.sqrt(0.5 * (1-1/FastMath.sqrt(1+tau*tau))) * FastMath.signum(rij);\n+                sqrt.setEntry(i,j, sij);\n+                sqrt.setEntry(j,i, sij);\n+                s.setEntry(i, 0, c * sisi - sij * sj);\n+                s.setEntry(j, 0, c * sj - sij * sisi);\n+            }\n+        }\n+        sqrt.setEntry(n-1, n-1, s.getEntry(n-1, 0));\n     }\n+    return sqrt;\n+}\n }",
    "result_reason": "org.apache.commons.math3.exception.DimensionMismatchException: 3 != 4",
    "test_result": "FAIL"
}