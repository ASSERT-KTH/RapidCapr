{
    "patch": "        // We care about calls to functions and expressions that could potentially modify dependent variables,\n        // as well as delete operations and non-string property access.\n        if (n.isCall() || n.isNew() || n.isDelProp() ||\n                (n.isGetElem() && n.getFirstChild().getType() != Token.STRING)) {\n            return NodeUtil.mayEffectMutableState(n);\n        }\n\n        // Recurse on child nodes\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n                return true;\n            }\n        }\n        return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..cd7b8c06 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,20 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        // We care about calls to functions and expressions that could potentially modify dependent variables,\n+        // as well as delete operations and non-string property access.\n+        if (n.isCall() || n.isNew() || n.isDelProp() ||\n+                (n.isGetElem() && n.getFirstChild().getType() != Token.STRING)) {\n+            return NodeUtil.mayEffectMutableState(n);\n+        }\n+\n+        // Recurse on child nodes\n+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+                return true;\n+            }\n+        }\n+        return false;\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}