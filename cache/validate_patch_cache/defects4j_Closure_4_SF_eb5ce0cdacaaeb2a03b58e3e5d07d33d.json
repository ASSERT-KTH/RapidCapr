{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  // Attempt to resolve the type via registry.\n  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n  \n  // Check for implicit prototype cycle if the resolution failed.\n  if (!resolvedViaRegistry) {\n    boolean cycleDetected = detectImplicitPrototypeCycle();\n    if (cycleDetected) {\n      handleTypeCycle(t);\n    }\n    \n    // If the cycle is detected or the resolution failed, attempt to resolve the type via properties.\n    if (cycleDetected || !isResolved()) {\n      resolveViaProperties(t, enclosing);\n    }\n  }\n  \n  // If the type is resolved, finish the property continuations.\n  if (isResolved()) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n  }\n  \n  // Return the referenced type if possible, otherwise return this.\n  if (registry.isLastGeneration()) {\n    JSType referencedType = getReferencedType();\n    if (referencedType.isUnknownType()) {\n      // If the referenced type is unknown, it means we failed to resolve the type.\n      // Emit an error to indicate the failure.\n      t.error(getTypeMismatchErrorMessage());\n    }\n    return referencedType;\n  }\n  return this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..67ca11ba 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,41 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  // Attempt to resolve the type via registry.\n+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+  \n+  // Check for implicit prototype cycle if the resolution failed.\n+  if (!resolvedViaRegistry) {\n+    boolean cycleDetected = detectImplicitPrototypeCycle();\n+    if (cycleDetected) {\n       handleTypeCycle(t);\n     }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    \n+    // If the cycle is detected or the resolution failed, attempt to resolve the type via properties.\n+    if (cycleDetected || !isResolved()) {\n+      resolveViaProperties(t, enclosing);\n     }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n+  }\n+  \n+  // If the type is resolved, finish the property continuations.\n+  if (isResolved()) {\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+    finishPropertyContinuations();\n+  }\n+  \n+  // Return the referenced type if possible, otherwise return this.\n+  if (registry.isLastGeneration()) {\n+    JSType referencedType = getReferencedType();\n+    if (referencedType.isUnknownType()) {\n+      // If the referenced type is unknown, it means we failed to resolve the type.\n+      // Emit an error to indicate the failure.\n+      t.error(getTypeMismatchErrorMessage());\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    return referencedType;\n   }\n+  return this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}