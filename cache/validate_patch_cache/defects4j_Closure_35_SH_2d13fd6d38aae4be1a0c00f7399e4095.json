{
    "patch": "// Infilled hunk\nif (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.hasProperty(prop)) {\n                if (propType.isUnknownType()) {\n                    // Handle unknown type case\n                    JSType typeToInfer = getNativeType(UNKNOWN_TYPE).getLeastSupertype(objType.getImplicitPrototype());\n                    objType.defineInferredProperty(prop, typeToInfer, null);\n                } else {\n                    // Handle known type case\n                    objType.defineDeclaredProperty(prop, propType, null);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..62acf199 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,21 +1118,25 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n+// Infilled hunk\n+if (constraintObj != null && constraintObj.isRecordType()) {\n+    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+    if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n+            JSType propType = constraintObj.getPropertyType(prop);\n             if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+                if (propType.isUnknownType()) {\n+                    // Handle unknown type case\n+                    JSType typeToInfer = getNativeType(UNKNOWN_TYPE).getLeastSupertype(objType.getImplicitPrototype());\n+                    objType.defineInferredProperty(prop, typeToInfer, null);\n+                } else {\n+                    // Handle known type case\n+                    objType.defineDeclaredProperty(prop, propType, null);\n+                }\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n         }\n-      }\n+    }\n+}\n     }\n   }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}