{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    double eps = 10e-15;\n    int maxIterations = 1000;\n\n    double sum = 1.0 / a;\n    double term = sum;\n\n    for (int k = 1; k <= maxIterations && Math.abs(term) > eps * Math.abs(sum); k++) {\n        term *= x / (a + k);\n        sum += term;\n    }\n\n    double gammaValue = Gamma.gamma(a);\n    double pValue = sum * Math.exp(-x + a * Math.log(x) - gammaValue);\n\n    return pValue;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..d681f4f73 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,23 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    double eps = 10e-15;\n+    int maxIterations = 1000;\n+\n+    double sum = 1.0 / a;\n+    double term = sum;\n+\n+    for (int k = 1; k <= maxIterations && Math.abs(term) > eps * Math.abs(sum); k++) {\n+        term *= x / (a + k);\n+        sum += term;\n+    }\n+\n+    double gammaValue = Gamma.gamma(a);\n+    double pValue = sum * Math.exp(-x + a * Math.log(x) - gammaValue);\n+\n+    return pValue;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}