{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    int numRows = m.getRowDimension();\n    int numCols = m.getColumnDimension();\n    // check if the matrix is too large, and if so, partition it\n    if (numRows * numCols > Integer.MAX_VALUE / 2) {\n        int partitionSize = (int) Math.sqrt(Integer.MAX_VALUE / 2);\n        int numPartitions = (int) Math.ceil((double) numRows / partitionSize);\n        List<RealMatrix> partitions = new ArrayList<>(numPartitions);\n        for (int i = 0; i < numPartitions; i++) {\n            int startRow = i * partitionSize;\n            int endRow = Math.min(startRow + partitionSize, numRows);\n            RealMatrix partition = m.getSubMatrix(startRow, endRow - 1, 0, numCols - 1);\n            partitions.add(squareRoot(partition));\n        }\n        return blockDiagonal(partitions);\n    }\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    return dec.getSquareRoot();\n}\n\nprivate RealMatrix blockDiagonal(List<RealMatrix> matrices) {\n    int numRows = matrices.stream().mapToInt(MatrixUtils::safeToInt).sum();\n    int numCols = matrices.stream().mapToInt(m -> m.getColumnDimension()).sum();\n    RealMatrix result = MatrixUtils.createRealMatrix(numRows, numCols);\n    int iRow = 0, iCol = 0;\n    for (RealMatrix m : matrices) {\n        int nRows = m.getRowDimension();\n        int nCols = m.getColumnDimension();\n        result.setSubMatrix(m.getData(), iRow, iCol);\n        iRow += nRows;\n        iCol += nCols;\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d2ec127b0 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,38 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    int numRows = m.getRowDimension();\n+    int numCols = m.getColumnDimension();\n+    // check if the matrix is too large, and if so, partition it\n+    if (numRows * numCols > Integer.MAX_VALUE / 2) {\n+        int partitionSize = (int) Math.sqrt(Integer.MAX_VALUE / 2);\n+        int numPartitions = (int) Math.ceil((double) numRows / partitionSize);\n+        List<RealMatrix> partitions = new ArrayList<>(numPartitions);\n+        for (int i = 0; i < numPartitions; i++) {\n+            int startRow = i * partitionSize;\n+            int endRow = Math.min(startRow + partitionSize, numRows);\n+            RealMatrix partition = m.getSubMatrix(startRow, endRow - 1, 0, numCols - 1);\n+            partitions.add(squareRoot(partition));\n+        }\n+        return blockDiagonal(partitions);\n     }\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    return dec.getSquareRoot();\n+}\n+\n+private RealMatrix blockDiagonal(List<RealMatrix> matrices) {\n+    int numRows = matrices.stream().mapToInt(MatrixUtils::safeToInt).sum();\n+    int numCols = matrices.stream().mapToInt(m -> m.getColumnDimension()).sum();\n+    RealMatrix result = MatrixUtils.createRealMatrix(numRows, numCols);\n+    int iRow = 0, iCol = 0;\n+    for (RealMatrix m : matrices) {\n+        int nRows = m.getRowDimension();\n+        int nCols = m.getColumnDimension();\n+        result.setSubMatrix(m.getData(), iRow, iCol);\n+        iRow += nRows;\n+        iCol += nCols;\n+    }\n+    return result;\n+}\n }",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}