{
    "patch": "public double toDouble() {\n    if (!isFinite()) {\n        if (lessThan(getZero())) {\n            return Double.NEGATIVE_INFINITY;\n        } else {\n            return Double.POSITIVE_INFINITY;\n        }\n    }\n\n    if (isNaN()) {\n        return Double.NaN;\n    }\n\n    Dfp y = this;\n    boolean negate = false;\n\n    if (lessThan(getZero())) {\n        negate = true;\n        y = y.negate();\n    }\n\n    int exponent = (int) (Math.log10(y.toDouble()) * 3.321928094887362);\n\n    y = y.divide(DfpMath.pow(getTen(), exponent));\n\n    while (y.toDouble() < 1 && y.toDouble() != 0) {\n        y = y.multiply(2);\n        exponent--;\n    }\n\n    while (y.toDouble() >= 10) {\n        y = y.divide(2);\n        exponent++;\n    }\n\n    long l = y.multiply(DfpMath.pow(getTwo(), 54)).floor().longValue();\n    l &= 0x003FFFFFFFFFFFFFL;\n\n    if (exponent + 1023 <= 0) {\n        l = 0;\n        exponent = -1022;\n    } else if (exponent + 1023 >= 2047) {\n        l = 0;\n        exponent = 2046 - 1023;\n    } else {\n        exponent += 1023;\n    }\n\n    long bits = (negate ? 0x8000000000000000L : 0L) | (exponent << 52) | l;\n\n    return Double.longBitsToDouble(bits);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/dfp/Dfp.java b/src/main/java/org/apache/commons/math/dfp/Dfp.java\nindex 73f1ea3e8..9c181b539 100644\n--- a/src/main/java/org/apache/commons/math/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math/dfp/Dfp.java\n@@ -253,88 +253,58 @@ public class Dfp implements FieldElement<Dfp> {\n      * @param field field to which this instance belongs\n      * @param x value to convert to an instance\n      */\n-    protected Dfp(final DfpField field, double x) {\n-\n-        // initialize as if 0\n-        mant = new int[field.getRadixDigits()];\n-        sign = 1;\n-        exp = 0;\n-        nans = FINITE;\n-        this.field = field;\n-\n-        long bits = Double.doubleToLongBits(x);\n-        long mantissa = bits & 0x000fffffffffffffL;\n-        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;\n-\n-        if (exponent == -1023) {\n-            // Zero or sub-normal\n-            if (x == 0) {\n-                // make sure 0 has the right sign\n-                return;\n-            }\n+public double toDouble() {\n+    if (!isFinite()) {\n+        if (lessThan(getZero())) {\n+            return Double.NEGATIVE_INFINITY;\n+        } else {\n+            return Double.POSITIVE_INFINITY;\n+        }\n+    }\n \n-            exponent++;\n+    if (isNaN()) {\n+        return Double.NaN;\n+    }\n \n-            // Normalize the subnormal number\n-            while ( (mantissa & 0x0010000000000000L) == 0) {\n-                exponent--;\n-                mantissa <<= 1;\n-            }\n-            mantissa &= 0x000fffffffffffffL;\n-        }\n+    Dfp y = this;\n+    boolean negate = false;\n \n-        if (exponent == 1024) {\n-            // infinity or NAN\n-            if (x != x) {\n-                sign = (byte) 1;\n-                nans = QNAN;\n-            } else if (x < 0) {\n-                sign = (byte) -1;\n-                nans = INFINITE;\n-            } else {\n-                sign = (byte) 1;\n-                nans = INFINITE;\n-            }\n-            return;\n-        }\n+    if (lessThan(getZero())) {\n+        negate = true;\n+        y = y.negate();\n+    }\n \n-        Dfp xdfp = new Dfp(field, mantissa);\n-        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one\n-        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));\n+    int exponent = (int) (Math.log10(y.toDouble()) * 3.321928094887362);\n \n-        if ((bits & 0x8000000000000000L) != 0) {\n-            xdfp = xdfp.negate();\n-        }\n+    y = y.divide(DfpMath.pow(getTen(), exponent));\n \n-        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);\n-        sign = xdfp.sign;\n-        exp  = xdfp.exp;\n-        nans = xdfp.nans;\n+    while (y.toDouble() < 1 && y.toDouble() != 0) {\n+        y = y.multiply(2);\n+        exponent--;\n+    }\n \n+    while (y.toDouble() >= 10) {\n+        y = y.divide(2);\n+        exponent++;\n     }\n \n-    /** Copy constructor.\n-     * @param d instance to copy\n-     */\n-    public Dfp(final Dfp d) {\n-        mant  = d.mant.clone();\n-        sign  = d.sign;\n-        exp   = d.exp;\n-        nans  = d.nans;\n-        field = d.field;\n+    long l = y.multiply(DfpMath.pow(getTwo(), 54)).floor().longValue();\n+    l &= 0x003FFFFFFFFFFFFFL;\n+\n+    if (exponent + 1023 <= 0) {\n+        l = 0;\n+        exponent = -1022;\n+    } else if (exponent + 1023 >= 2047) {\n+        l = 0;\n+        exponent = 2046 - 1023;\n+    } else {\n+        exponent += 1023;\n     }\n \n-    /** Create an instance from a String representation.\n-     * @param field field to which this instance belongs\n-     * @param s string representation of the instance\n-     */\n-    protected Dfp(final DfpField field, final String s) {\n+    long bits = (negate ? 0x8000000000000000L : 0L) | (exponent << 52) | l;\n \n-        // initialize as if 0\n-        mant = new int[field.getRadixDigits()];\n-        sign = 1;\n-        exp = 0;\n-        nans = FINITE;\n+    return Double.longBitsToDouble(bits);\n+}\n         this.field = field;\n \n         boolean decimalFound = false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}