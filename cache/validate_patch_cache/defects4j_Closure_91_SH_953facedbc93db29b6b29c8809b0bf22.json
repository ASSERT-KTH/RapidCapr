{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      Node parentParent = NodeUtil.getEnclosingNonArrowFunction(parent.getParent());\n      if (NodeUtil.isPrototypeProperty(parentParent)) {\n        return false;\n      }\n\n      if (jsDoc != null && jsDoc.isConstructor()) {\n        if (!NodeUtil.isNew(parent)) {\n          // Don't traverse constructor functions unless they are being called with the new keyword.\n          return false;\n        }\n        if (NodeUtil.isGet(parent.getParent())) {\n          Node callee = parent.getFirstChild();\n          if (NodeUtil.isPrototypeProperty(callee)) {\n            return false;\n          }\n        }\n      }\n\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n        } else {\n          // Only traverse the right side if it's not an assignment to a prototype\n          // property or subproperty.\n          if (NodeUtil.isGet(lhs) && rhs != null) {\n            if (NodeUtil.isPrototypeProperty(lhs)) {\n              return false;\n            }\n          }\n        }\n      }\n\n      // Don't traverse object literal keys\n      if (NodeUtil.isObjectLitKey(parent, n)) {\n        return false;\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..5d1df83c 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,53 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      Node parentParent = NodeUtil.getEnclosingNonArrowFunction(parent.getParent());\n+      if (NodeUtil.isPrototypeProperty(parentParent)) {\n+        return false;\n+      }\n+\n+      if (jsDoc != null && jsDoc.isConstructor()) {\n+        if (!NodeUtil.isNew(parent)) {\n+          // Don't traverse constructor functions unless they are being called with the new keyword.\n+          return false;\n+        }\n+        if (NodeUtil.isGet(parent.getParent())) {\n+          Node callee = parent.getFirstChild();\n+          if (NodeUtil.isPrototypeProperty(callee)) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+        } else {\n+          // Only traverse the right side if it's not an assignment to a prototype\n+          // property or subproperty.\n+          if (NodeUtil.isGet(lhs) && rhs != null) {\n+            if (NodeUtil.isPrototypeProperty(lhs)) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n+\n+      // Don't traverse object literal keys\n+      if (NodeUtil.isObjectLitKey(parent, n)) {\n+        return false;\n+      }\n+\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}