{
    "patch": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ShapeList)) {\n            return false;\n        }\n\n        ShapeList other = (ShapeList) obj;\n        if (size() != other.size()) {\n            return false;\n        }\n\n        Iterator<Shape> it1 = iterator();\n        Iterator<Shape> it2 = other.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n            Shape shape1 = it1.next();\n            Shape shape2 = it2.next();\n            if (!ShapeUtilities.equal(shape1, shape2)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "patch_diff": "diff --git a/source/org/jfree/chart/util/ShapeList.java b/source/org/jfree/chart/util/ShapeList.java\nindex 85f1c81..165eb50 100644\n--- a/source/org/jfree/chart/util/ShapeList.java\n+++ b/source/org/jfree/chart/util/ShapeList.java\n@@ -108,7 +108,30 @@ public class ShapeList extends AbstractObjectList {\n         if (!(obj instanceof ShapeList)) {\n             return false;\n         }\n-        return super.equals(obj);\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (!(obj instanceof ShapeList)) {\n+            return false;\n+        }\n+\n+        ShapeList other = (ShapeList) obj;\n+        if (size() != other.size()) {\n+            return false;\n+        }\n+\n+        Iterator<Shape> it1 = iterator();\n+        Iterator<Shape> it2 = other.iterator();\n+        while (it1.hasNext() && it2.hasNext()) {\n+            Shape shape1 = it1.next();\n+            Shape shape2 = it2.next();\n+            if (!ShapeUtilities.equal(shape1, shape2)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n \n     }\n \n@@ -169,4 +192,3 @@ public class ShapeList extends AbstractObjectList {\n     }\n \n }\n-",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}