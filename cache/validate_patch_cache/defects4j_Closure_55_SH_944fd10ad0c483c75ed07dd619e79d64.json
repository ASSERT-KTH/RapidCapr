{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  if (!NodeUtil.isFunctionExpression(n)) {\n    return false;\n  }\n  if (NodeUtil.getFunctionName(n) == null) {\n    Node parent = n.getParent();\n    if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.ASSIGN ||\n        parent.getType() == Token.VAR ||\n        (parent.getType() == Token.BLOCK && parent.getParent().getType() == Token.FUNCTION)) {\n      return true;\n    }\n    return false;\n  }\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..d3bf6ba4 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,21 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  if (!NodeUtil.isFunctionExpression(n)) {\n+    return false;\n+  }\n+  if (NodeUtil.getFunctionName(n) == null) {\n+    Node parent = n.getParent();\n+    if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.ASSIGN ||\n+        parent.getType() == Token.VAR ||\n+        (parent.getType() == Token.BLOCK && parent.getParent().getType() == Token.FUNCTION)) {\n+      return true;\n+    }\n+    return false;\n+  }\n+  return true;\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}