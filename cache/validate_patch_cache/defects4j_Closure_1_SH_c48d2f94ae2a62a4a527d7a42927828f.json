{
    "patch": "      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        String argName = lastArg.getString();\n        Var var = fnScope.getVar(argName);\n        if (!referenced.contains(var)) {\n          Node argToBeRemoved = lastArg;\n          lastArg = lastArg.getPrevious();\n          argList.removeChild(argToBeRemoved);\n          canRemoveArgsOutsideDeclaration = true;\n          compiler.reportCodeChange();\n        } else {\n          if (canRemoveArgsOutsideDeclaration) {\n            Node current = argList.getFirstChild();\n            while (current != null && !current.equals(lastArg)) {\n              Node argToBeRemoved = current;\n              current = current.getNext();\n              compiler.reportChangeToEnclosingScope(argToBeRemoved);\n              argList.removeChild(argToBeRemoved);\n            }\n          }\n          canRemoveArgsOutsideDeclaration = false;\n          lastArg = lastArg.getPrevious();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bbaf7548 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,28 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        String argName = lastArg.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (!referenced.contains(var)) {\n+          Node argToBeRemoved = lastArg;\n+          lastArg = lastArg.getPrevious();\n+          argList.removeChild(argToBeRemoved);\n+          canRemoveArgsOutsideDeclaration = true;\n+          compiler.reportCodeChange();\n+        } else {\n+          if (canRemoveArgsOutsideDeclaration) {\n+            Node current = argList.getFirstChild();\n+            while (current != null && !current.equals(lastArg)) {\n+              Node argToBeRemoved = current;\n+              current = current.getNext();\n+              compiler.reportChangeToEnclosingScope(argToBeRemoved);\n+              argList.removeChild(argToBeRemoved);\n+            }\n+          }\n+          canRemoveArgsOutsideDeclaration = false;\n+          lastArg = lastArg.getPrevious();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}