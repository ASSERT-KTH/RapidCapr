{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    if (argList == null) {\n        // Arrow functions and setter functions can have empty param lists.\n        return;\n    }\n\n    boolean modifyCallers =\n            modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node lastArg;\n        while ((lastArg = argList.getLastChild()) != null) {\n            if (lastArg.isDefaultValue() || lastArg.isRest()) {\n                // Arguments with default values or rest parameters can't be removed.\n                break;\n            }\n            Var var = fnScope.getVar(lastArg.getString());\n            if (!referenced.contains(var)) {\n                argList.removeChild(lastArg);\n            } else {\n                break;\n            }\n        }\n        compiler.reportCodeChange();\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n\n    if (function.isArrowFunction()) {\n        // If there's only one parameter and it's being removed it needs to be replaced so a\n        // valid arrow function is created.\n        if (argList.getChildCount() == 1 && argList.getFirstChild().getNext() == null) {\n            Node param = argList.getFirstChild();\n            Node newParamName = IR.name(\"\");\n            param.replaceWith(newParamName);\n            argList.addChildToFront(IR.rest(IR.name(\"unused\")));\n        }\n        // If there are no parameters left, add an empty parameter list.\n        if (argList.getChildCount() == 0 &&\n                (function.getParent().isFunction() || function.getParent().isClassMembers())) {\n            Node nameNode =\n                    function.getParent().isFunction() ? function.getParent().getFirstChild() : function.getParent().getParent();\n            nameNode.replaceChild(function, IR.function(IR.name(\"\"), IR.paramList(), IR.block()));\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..57d01891 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,59 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+        // The parameters object literal setters can not be removed.\n+        return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    if (argList == null) {\n+        // Arrow functions and setter functions can have empty param lists.\n+        return;\n+    }\n+\n+    boolean modifyCallers =\n+            modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        Node lastArg;\n+        while ((lastArg = argList.getLastChild()) != null) {\n+            if (lastArg.isDefaultValue() || lastArg.isRest()) {\n+                // Arguments with default values or rest parameters can't be removed.\n+                break;\n+            }\n+            Var var = fnScope.getVar(lastArg.getString());\n+            if (!referenced.contains(var)) {\n+                argList.removeChild(lastArg);\n+            } else {\n+                break;\n+            }\n+        }\n+        compiler.reportCodeChange();\n+    } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+\n+    if (function.isArrowFunction()) {\n+        // If there's only one parameter and it's being removed it needs to be replaced so a\n+        // valid arrow function is created.\n+        if (argList.getChildCount() == 1 && argList.getFirstChild().getNext() == null) {\n+            Node param = argList.getFirstChild();\n+            Node newParamName = IR.name(\"\");\n+            param.replaceWith(newParamName);\n+            argList.addChildToFront(IR.rest(IR.name(\"unused\")));\n+        }\n+        // If there are no parameters left, add an empty parameter list.\n+        if (argList.getChildCount() == 0 &&\n+                (function.getParent().isFunction() || function.getParent().isClassMembers())) {\n+            Node nameNode =\n+                    function.getParent().isFunction() ? function.getParent().getFirstChild() : function.getParent().getParent();\n+            nameNode.replaceChild(function, IR.function(IR.name(\"\"), IR.paramList(), IR.block()));\n+        }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}