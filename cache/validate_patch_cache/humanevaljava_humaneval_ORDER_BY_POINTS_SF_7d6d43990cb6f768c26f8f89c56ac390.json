{
    "patch": "import java.util.Arrays;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Comparator;\n\npublic class Solution {\n\n    public static Integer[] order_by_points(Integer[] nums) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, List<Integer>> digits_number = new HashMap<>();\n\n        for (int i = 0; i < nums.length; i++) {\n            int absNum = Math.abs(nums[i]);\n            int digit = 0;\n            if (absNum != 0) {\n                digit = (int) Math.log10(absNum) + 1;\n            }\n            if (nums[i] < 0) {\n                digit = digit * -1;\n            }\n            if (!digits_number.containsKey(digit)) {\n                digits_number.put(digit, new ArrayList<>());\n            }\n            digits_number.get(digit).add(nums[i]);\n        }\n\n        List<Integer> sortedKeys = new ArrayList<>(digits_number.keySet());\n        sortedKeys.sort(new Comparator<Integer>() {\n            public int compare(Integer a, Integer b) {\n                return a.compareTo(b);\n            }\n        });\n\n        for (Integer key : sortedKeys) {\n            List<Integer> list = digits_number.get(key);\n            list.sort(new Comparator<Integer>() {\n                public int compare(Integer a, Integer b) {\n                    return Integer.compare(Math.abs(a), Math.abs(b));\n                }\n            });\n            result.addAll(list);\n        }\n\n        Integer[] outputArray = new Integer[result.size()];\n        outputArray = result.toArray(outputArray);\n        return outputArray;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java b/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java\nindex 4e6cd94..78911ed 100644\n--- a/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java\n+++ b/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java\n@@ -14,32 +14,54 @@ For example:\n >>> order_by_points([]) == [] */\n \n public class ORDER_BY_POINTS {\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+\n+public class Solution {\n+\n     public static Integer[] order_by_points(Integer[] nums) {\n-        ArrayList<Integer> digits = new ArrayList<Integer>();\n-        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n-\n-        for (int i = 0; i < nums.length; i += 1){\n-            int neg = 1;\n-            int n = nums[i];\n-            if (n < 0) {\n-                n = -1 * n;\n-                neg = -1;\n-            }\n+        List<Integer> result = new ArrayList<>();\n+        Map<Integer, List<Integer>> digits_number = new HashMap<>();\n+\n+        for (int i = 0; i < nums.length; i++) {\n+            int absNum = Math.abs(nums[i]);\n             int digit = 0;\n-            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n-                digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n+            if (absNum != 0) {\n+                digit = (int) Math.log10(absNum) + 1;\n+            }\n+            if (nums[i] < 0) {\n+                digit = digit * -1;\n+            }\n+            if (!digits_number.containsKey(digit)) {\n+                digits_number.put(digit, new ArrayList<>());\n             }\n-            digits.add(digit);\n-            if (! digits_number.containsKey(digit))\n-                digits_number.put(digit, new ArrayList<Integer>());\n             digits_number.get(digit).add(nums[i]);\n         }\n-        Collections.sort(digits);\n-        \n-        ArrayList<Integer> result = new ArrayList<Integer>();\n-        for (int i = 0; i < digits.size(); i += 1) {\n-            result.addAll(digits_number.get(digits.get(i)));\n+\n+        List<Integer> sortedKeys = new ArrayList<>(digits_number.keySet());\n+        sortedKeys.sort(new Comparator<Integer>() {\n+            public int compare(Integer a, Integer b) {\n+                return a.compareTo(b);\n+            }\n+        });\n+\n+        for (Integer key : sortedKeys) {\n+            List<Integer> list = digits_number.get(key);\n+            list.sort(new Comparator<Integer>() {\n+                public int compare(Integer a, Integer b) {\n+                    return Integer.compare(Math.abs(a), Math.abs(b));\n+                }\n+            });\n+            result.addAll(list);\n         }\n-        return result.toArray(new Integer[] {});\n+\n+        Integer[] outputArray = new Integer[result.size()];\n+        outputArray = result.toArray(outputArray);\n+        return outputArray;\n     }\n }\n+}",
    "result_reason": " /tmp/humaneval-ORDER_BY_POINTS/src/main/java/humaneval/buggy/ORDER_BY_POINTS.java:[17,1] illegal start of type",
    "test_result": "ERROR"
}