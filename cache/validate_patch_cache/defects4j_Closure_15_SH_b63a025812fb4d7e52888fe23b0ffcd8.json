{
    "patch": "        if (NodeUtil.isFunctionDeclaration(n) \n            || NodeUtil.isFunctionExpression(n)) {\n          if (n.getLastChild().isBlock()) {\n            if (apply(n.getLastChild())) {\n              return true;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..784bdb92 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,12 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        if (NodeUtil.isFunctionDeclaration(n) \n+            || NodeUtil.isFunctionExpression(n)) {\n+          if (n.getLastChild().isBlock()) {\n+            if (apply(n.getLastChild())) {\n+              return true;\n+            }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}