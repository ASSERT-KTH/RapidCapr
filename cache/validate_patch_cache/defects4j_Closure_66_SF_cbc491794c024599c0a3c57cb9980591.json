{
    "patch": "public static double getTypedPercent(String[] jsonStrings) {\n    int typed = 0;\n    int total = jsonStrings.length;\n    for (String jsonString : jsonStrings) {\n        if (jsonString != null && !jsonString.trim().isEmpty()) {\n            JSONObject jsonObject = new JSONObject(jsonString);\n            if (jsonObject.has(\"type\") && !\"null\".equals(jsonObject.getString(\"type\"))) {\n                typed++;\n            }\n        }\n    }\n    return (double) typed * 100.0 / total;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..08ebf510 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String[] jsonStrings) {\n+    int typed = 0;\n+    int total = jsonStrings.length;\n+    for (String jsonString : jsonStrings) {\n+        if (jsonString != null && !jsonString.trim().isEmpty()) {\n+            JSONObject jsonObject = new JSONObject(jsonString);\n+            if (jsonObject.has(\"type\") && !\"null\".equals(jsonObject.getString(\"type\"))) {\n+                typed++;\n+            }\n+        }\n+    }\n+    return (double) typed * 100.0 / total;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}