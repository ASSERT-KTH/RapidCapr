{
    "patch": "public boolean getprop(String key) {\n    Runtime rt = Runtime.getRuntime();\n    try {\n        String[] commands = {\"/system/bin/getprop\", key};\n        Process proc = rt.exec(commands);\n        Reader reader = new InputStreamReader(proc.getInputStream());\n        char[] buffer = new char[4096];\n        int n = reader.read(buffer);\n        if (n > 0) {\n            String prop = new String(buffer, 0, n);\n            return prop.equals(\"1\");\n        }\n    } catch (IOException e) {\n        System.err.println(\"IOException: \" + e.getMessage());\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..d375f7d1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public boolean getprop(String key) {\n+    Runtime rt = Runtime.getRuntime();\n+    try {\n+        String[] commands = {\"/system/bin/getprop\", key};\n+        Process proc = rt.exec(commands);\n+        Reader reader = new InputStreamReader(proc.getInputStream());\n+        char[] buffer = new char[4096];\n+        int n = reader.read(buffer);\n+        if (n > 0) {\n+            String prop = new String(buffer, 0, n);\n+            return prop.equals(\"1\");\n+        }\n+    } catch (IOException e) {\n+        System.err.println(\"IOException: \" + e.getMessage());\n+    }\n+    return false;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}