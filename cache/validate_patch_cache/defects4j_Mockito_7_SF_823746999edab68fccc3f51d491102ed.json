{
    "patch": "private void readTypeVariables() {\n    if (typeVariable != null) {\n        for (Type boundType : typeVariable.getBounds()) {\n            if (boundType instanceof TypeVariable<?>) {\n                readTypeVariables((TypeVariable<?>) boundType);\n            } else if (boundType != null) {\n                registerTypeVariablesOn(boundType);\n            }\n        }\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument != null) {\n            if (actualTypeArgument instanceof TypeVariable<?>) {\n                readTypeVariables((TypeVariable<?>) actualTypeArgument);\n            } else {\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..7b32e420c 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,26 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable != null) {\n+        for (Type boundType : typeVariable.getBounds()) {\n+            if (boundType instanceof TypeVariable<?>) {\n+                readTypeVariables((TypeVariable<?>) boundType);\n+            } else if (boundType != null) {\n+                registerTypeVariablesOn(boundType);\n+            }\n+        }\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument != null) {\n+            if (actualTypeArgument instanceof TypeVariable<?>) {\n+                readTypeVariables((TypeVariable<?>) actualTypeArgument);\n+            } else {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}