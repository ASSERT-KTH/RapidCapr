{
    "patch": "        // property or subproperty, and it's not a FunctionExpression or ArrowFunctionExpression.\n        if ((rhs.getType() == Token.OBJECTLIT || rhs.getType() == Token.FUNCTION ||\n             rhs.getType() == Token.ARROW_FUNCTION) &&\n            NodeUtil.isGet(lhs) && lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        Node llhs = lhs.getLastChild();\n        if (NodeUtil.isGet(lhs) && llhs.getType() == Token.STRING &&\n            llhs.getString().startsWith(\"prototype.\")) {\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..1e46dcec 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,16 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+        // property or subproperty, and it's not a FunctionExpression or ArrowFunctionExpression.\n+        if ((rhs.getType() == Token.OBJECTLIT || rhs.getType() == Token.FUNCTION ||\n+             rhs.getType() == Token.ARROW_FUNCTION) &&\n+            NodeUtil.isGet(lhs) && lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        Node llhs = lhs.getLastChild();\n+        if (NodeUtil.isGet(lhs) && llhs.getType() == Token.STRING &&\n+            llhs.getString().startsWith(\"prototype.\")) {\n+          return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}