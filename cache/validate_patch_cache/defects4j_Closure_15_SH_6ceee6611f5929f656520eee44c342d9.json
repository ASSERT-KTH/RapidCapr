{
    "patch": "        if (n.isName()\n            && !NodeUtil.isVarDeclaration(n)\n            && !n.getString().startsWith(\"$jscomp$\")\n            && !n.getBooleanProp(Node.ANALYZED_INSTANCE_PROPS)) {\n          if (n.getBooleanProp(Node.IS_NAMESPACE)) {\n            if (apply(n.getFirstChild())) {\n              return true;\n            }\n          } else if (apply(NodeUtil.getRValueOfLValue(n))) {\n            return true;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..ebacbd95 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,18 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        if (n.isName()\n+            && !NodeUtil.isVarDeclaration(n)\n+            && !n.getString().startsWith(\"$jscomp$\")\n+            && !n.getBooleanProp(Node.ANALYZED_INSTANCE_PROPS)) {\n+          if (n.getBooleanProp(Node.IS_NAMESPACE)) {\n+            if (apply(n.getFirstChild())) {\n+              return true;\n+            }\n+          } else if (apply(NodeUtil.getRValueOfLValue(n))) {\n+            return true;\n+          }\n+        }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}