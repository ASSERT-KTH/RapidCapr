{
    "patch": "if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n}\n\n// CheckGlobalThisLevel is off by default, so only change anything if\n// it's not off.\nif (options.checkGlobalThisLevel != CheckLevel.OFF) {\n  options.setWarningLevel(\n      DiagnosticGroups.GLOBAL_THIS,\n      options.checkGlobalThisLevel);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..1f2d5266 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,23 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+if (!options.checkTypes) {\n+      // If DiagnosticGroups did not override the plain checkTypes\n+      // option, and checkTypes is enabled, then turn off the\n+      // parser type warnings.\n+      options.setWarningLevel(\n+          DiagnosticGroup.forType(\n+              RhinoErrorReporter.TYPE_PARSE_ERROR),\n+          CheckLevel.OFF);\n+}\n+\n+// CheckGlobalThisLevel is off by default, so only change anything if\n+// it's not off.\n+if (options.checkGlobalThisLevel != CheckLevel.OFF) {\n+  options.setWarningLevel(\n+      DiagnosticGroups.GLOBAL_THIS,\n+      options.checkGlobalThisLevel);\n+}\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}