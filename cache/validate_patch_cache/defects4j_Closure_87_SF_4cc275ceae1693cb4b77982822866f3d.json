{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // Check if child node is an EXPR_RESULT\n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        maybeExpr = maybeExpr.getFirstChild();\n\n        // Check if child of EXPR_RESULT is an expression node\n        if (NodeUtil.isExpressionNode(maybeExpr)) {\n          Node parent = n.getParent();\n\n          // Check if parent node is HOOK, AND, or OR\n          if (parent != null &&\n              (parent.getType() == Token.HOOK ||\n               parent.getType() == Token.AND ||\n               parent.getType() == Token.OR)) {\n            return false;\n          }\n\n          boolean isInCondition = NodeUtil.isConditionalIf(parent);\n\n          // If parent node is an IF statement, check if expression is in condition\n          if (parent != null && !isInCondition && parent.getType() == Token.IF) {\n            Node condition = parent.getFirstChild();\n            isInCondition = (condition != null && condition.getNext() == maybeExpr);\n          }\n\n          // If parent node is a loop, check if expression is in the condition\n          if (parent != null && !isInCondition && NodeUtil.isLoopStructure(parent)) {\n            Node condition = NodeUtil.getConditionExpression(parent);\n            isInCondition = (condition != null && condition.getNext() == maybeExpr);\n          }\n\n          return !isInCondition && !NodeUtil.mayHaveSideEffects(maybeExpr);\n        }\n      } else {\n        // Check if child node is an expression node\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..834d0e36 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,51 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // Check if child node is an EXPR_RESULT\n+      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+        maybeExpr = maybeExpr.getFirstChild();\n+\n+        // Check if child of EXPR_RESULT is an expression node\n+        if (NodeUtil.isExpressionNode(maybeExpr)) {\n+          Node parent = n.getParent();\n+\n+          // Check if parent node is HOOK, AND, or OR\n+          if (parent != null &&\n+              (parent.getType() == Token.HOOK ||\n+               parent.getType() == Token.AND ||\n+               parent.getType() == Token.OR)) {\n+            return false;\n+          }\n+\n+          boolean isInCondition = NodeUtil.isConditionalIf(parent);\n+\n+          // If parent node is an IF statement, check if expression is in condition\n+          if (parent != null && !isInCondition && parent.getType() == Token.IF) {\n+            Node condition = parent.getFirstChild();\n+            isInCondition = (condition != null && condition.getNext() == maybeExpr);\n+          }\n+\n+          // If parent node is a loop, check if expression is in the condition\n+          if (parent != null && !isInCondition && NodeUtil.isLoopStructure(parent)) {\n+            Node condition = NodeUtil.getConditionExpression(parent);\n+            isInCondition = (condition != null && condition.getNext() == maybeExpr);\n+          }\n+\n+          return !isInCondition && !NodeUtil.mayHaveSideEffects(maybeExpr);\n+        }\n+      } else {\n+        // Check if child node is an expression node\n+        return NodeUtil.isExpressionNode(maybeExpr);\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}