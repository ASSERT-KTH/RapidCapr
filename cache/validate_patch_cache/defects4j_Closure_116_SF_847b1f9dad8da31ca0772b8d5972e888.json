{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // Get the arguments of the function call.\n  List<Node> callArgs = new ArrayList<>();\n  for (Node arg = callNode.getFirstChild().getNext(); arg != null; arg = arg.getNext()) {\n    if (arg.isSpread()) {\n      callArgs.addAll(NodeUtil.getSpreadArgumentNodes(arg.getFirstChild()));\n    } else {\n      callArgs.add(arg);\n    }\n  }\n\n  // If the function has no parameters and there are no arguments, it's safe to inline.\n  if (NodeUtil.getFunctionParameters(fnNode).getChildCount() == 0 && callArgs.isEmpty()) {\n    return CanInlineResult.YES;\n  }\n\n  List<Node> formalArgs = NodeUtil.getFunctionParameters(fnNode).children();\n\n  // Check if the number of arguments matches the number of formal parameters.\n  if (callArgs.size() != formalArgs.size()) {\n    return CanInlineResult.NO;\n  }\n\n  // Match the function arguments to the formal parameters.\n  Map<Node, Node> mapping = new HashMap<>();\n  for (int i = 0; i < formalArgs.size(); i++) {\n    Node formalArg = formalArgs.get(i);\n    Node callArg = callArgs.get(i);\n\n    // Check for arguments that are evaluated more than once.\n    if (NodeUtil.mayEffectMutableState(callArg, compiler)\n        && NodeUtil.getNameReferenceCount(block, formalArg.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n\n    mapping.put(formalArg, callArg);\n  }\n\n  // Check for side effects in all arguments.\n  for (Node arg : callArgs) {\n    if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n      return CanInlineResult.NO;\n    }\n  }\n\n  // If all checks pass, it is safe to inline the function.\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..410cf8ab 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,61 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node block = fnNode.getLastChild();\n \n+  // Get the arguments of the function call.\n+  List<Node> callArgs = new ArrayList<>();\n+  for (Node arg = callNode.getFirstChild().getNext(); arg != null; arg = arg.getNext()) {\n+    if (arg.isSpread()) {\n+      callArgs.addAll(NodeUtil.getSpreadArgumentNodes(arg.getFirstChild()));\n+    } else {\n+      callArgs.add(arg);\n+    }\n+  }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  // If the function has no parameters and there are no arguments, it's safe to inline.\n+  if (NodeUtil.getFunctionParameters(fnNode).getChildCount() == 0 && callArgs.isEmpty()) {\n+    return CanInlineResult.YES;\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n+  List<Node> formalArgs = NodeUtil.getFunctionParameters(fnNode).children();\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+  // Check if the number of arguments matches the number of formal parameters.\n+  if (callArgs.size() != formalArgs.size()) {\n+    return CanInlineResult.NO;\n+  }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+  // Match the function arguments to the formal parameters.\n+  Map<Node, Node> mapping = new HashMap<>();\n+  for (int i = 0; i < formalArgs.size(); i++) {\n+    Node formalArg = formalArgs.get(i);\n+    Node callArg = callArgs.get(i);\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+    // Check for arguments that are evaluated more than once.\n+    if (NodeUtil.mayEffectMutableState(callArg, compiler)\n+        && NodeUtil.getNameReferenceCount(block, formalArg.getString()) > 1) {\n+      return CanInlineResult.NO;\n     }\n \n-    return CanInlineResult.YES;\n+    mapping.put(formalArg, callArg);\n   }\n \n+  // Check for side effects in all arguments.\n+  for (Node arg : callArgs) {\n+    if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n+      return CanInlineResult.NO;\n+    }\n+  }\n+\n+  // If all checks pass, it is safe to inline the function.\n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}