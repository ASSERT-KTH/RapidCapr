{
    "patch": "  private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent) {\n    ObjectType objectType =\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      // Is this a normal property access, or are we trying to override\n      // an existing property?\n      boolean isOverride = t.inGlobalScope() &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop;\n\n      // Find the lowest property defined on a class with visibility\n      // information.\n      if (isOverride) {\n        objectType = objectType.getImplicitPrototype();\n      }\n      JSDocInfo docInfo = null;\n      for (; objectType != null;\n           objectType = objectType.getImplicitPrototype()) {\n        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n        if (docInfo != null &&\n            docInfo.getVisibility() != Visibility.INHERITED) {\n          break;\n        }\n      }\n\n      if (objectType == null) {\n        // We couldn't find a visibility modifier; assume it's public.\n        return;\n      }\n\n      boolean sameFile =\n          t.getInput().getName().equals(docInfo.getSourceName());\n      // Get the visibility of the property.\n      Visibility propertyVisibility = docInfo.getVisibility();\n      // Get the owner type of the property (the class that defines the property).\n      JSType ownerType = normalizeClassType(objectType);\n\n      if (isOverride) {\n        // Check an ASSIGN statement that's trying to override a property\n        // on a superclass.\n        JSDocInfo overridingInfo = parent.getJSDocInfo();\n        Visibility overridingVisibility = overridingInfo == null ?\n            Visibility.INHERITED : overridingInfo.getVisibility();\n\n        // Check that (a) the property *can* be overridden, and\n        // (b) that the visibility of the override is the same as the\n        // visibility of the original property.\n        if (propertyVisibility == Visibility.PRIVATE && !sameFile) {\n          compiler.report(\n              t.makeError(getprop, PRIVATE_OVERRIDE,\n                  objectType.toString()));\n        } else if (overridingVisibility != Visibility.INHERITED &&\n            overridingVisibility != propertyVisibility) {\n          compiler.report(\n              t.makeError(getprop, VISIBILITY_MISMATCH,\n                  propertyVisibility.name(), objectType.toString(),\n                  overridingVisibility.name()));\n        }\n\n      } else {\n        // Check if the access to the property is valid.\n        if (sameFile || propertyVisibility == Visibility.PUBLIC) {\n          // Access is always allowed from the same file and for public properties.\n          return;\n        } else if (propertyVisibility == Visibility.PRIVATE) {\n          if (docInfo.isConstructor() &&\n              isValidPrivateConstructorAccess(parent)) {\n            return;\n          }\n          // Private access is only allowed in the same file and in the same class.\n          if (currentClass == null || !ownerType.equals(currentClass)) {\n            compiler.report(\n              t.makeError(getprop,\n                  BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n          } \n        } else if (propertyVisibility == Visibility.PROTECTED) {\n          // Protected access is only allowed in subclasses of the defining class.\n          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n            compiler.report(\n              t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n          }\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..a4648a68 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -437,10 +437,13 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n         return;\n       }\n \n-      boolean sameInput =\n+      boolean sameFile =\n           t.getInput().getName().equals(docInfo.getSourceName());\n-      Visibility visibility = docInfo.getVisibility();\n+      // Get the visibility of the property.\n+      Visibility propertyVisibility = docInfo.getVisibility();\n+      // Get the owner type of the property (the class that defines the property).\n       JSType ownerType = normalizeClassType(objectType);\n+\n       if (isOverride) {\n         // Check an ASSIGN statement that's trying to override a property\n         // on a superclass.\n@@ -451,48 +454,45 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n         // Check that (a) the property *can* be overridden, and\n         // (b) that the visibility of the override is the same as the\n         // visibility of the original property.\n-        if (visibility == Visibility.PRIVATE && !sameInput) {\n+        if (propertyVisibility == Visibility.PRIVATE && !sameFile) {\n           compiler.report(\n               t.makeError(getprop, PRIVATE_OVERRIDE,\n                   objectType.toString()));\n         } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n+            overridingVisibility != propertyVisibility) {\n           compiler.report(\n               t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n+                  propertyVisibility.name(), objectType.toString(),\n                   overridingVisibility.name()));\n         }\n+\n       } else {\n-        if (sameInput) {\n-          // private access is always allowed in the same file.\n+        // Check if the access to the property is valid.\n+        if (sameFile || propertyVisibility == Visibility.PUBLIC) {\n+          // Access is always allowed from the same file and for public properties.\n           return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n+        } else if (propertyVisibility == Visibility.PRIVATE) {\n           if (docInfo.isConstructor() &&\n               isValidPrivateConstructorAccess(parent)) {\n             return;\n           }\n-\n-          // private access is not allowed outside the file from a different\n-          // enclosing class.\n-          compiler.report(\n+          // Private access is only allowed in the same file and in the same class.\n+          if (currentClass == null || !ownerType.equals(currentClass)) {\n+            compiler.report(\n               t.makeError(getprop,\n                   BAD_PRIVATE_PROPERTY_ACCESS,\n                   propertyName,\n                   validator.getReadableJSTypeName(\n                       getprop.getFirstChild(), true)));\n-        } else if (visibility == Visibility.PROTECTED) {\n-          // There are 3 types of legal accesses of a protected property:\n-          // 1) Accesses in the same file\n-          // 2) Overriding the property in a subclass\n-          // 3) Accessing the property from inside a subclass\n-          // The first two have already been checked for.\n+          } \n+        } else if (propertyVisibility == Visibility.PROTECTED) {\n+          // Protected access is only allowed in subclasses of the defining class.\n           if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n             compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n-                    propertyName,\n-                    validator.getReadableJSTypeName(\n-                        getprop.getFirstChild(), true)));\n+              t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n+                  propertyName,\n+                  validator.getReadableJSTypeName(\n+                      getprop.getFirstChild(), true)));\n           }\n         }\n       }",
    "result_reason": "junit.framework.AssertionFailedError: Overriding private property of Foo.prototype.",
    "test_result": "FAIL"
}