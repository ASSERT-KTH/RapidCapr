{
    "patch": "    } else if (n.getJSType() == null || parent == null || !parent.isAssign()) {\n      scope.getRootNode().getGlobalScope().declare(varName, n, globalName, false);\n    } else {\n      // We have a direct assignment.\n      if (n.getJSType().isFunctionType()) {\n        // Function expressions can have a name, which we treat separately.\n        String fnName = null;\n        if (n.getFirstChild().isName()) {\n          fnName = n.getFirstChild().getString();\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          fnName = n.getFirstChild().getString();\n        }\n        if (fnName != null) {\n          scope.declareVarWithoutAssignment(varName, n, fnName, false);\n          return;\n        }\n      }\n      return;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}