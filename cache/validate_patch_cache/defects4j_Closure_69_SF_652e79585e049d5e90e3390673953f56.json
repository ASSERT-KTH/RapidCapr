{
    "patch": "private void visitCall(NodeTraversal t, Node n) {\n    Node callee = n.getFirstChild();\n    JSType calleeType = getJSType(callee).restrictByNotNullOrUndefined();\n\n    if (!calleeType.canBeCalled()) {\n      report(t, callee, NOT_CALLABLE, calleeType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (calleeType.isFunctionType()) {\n      // Get the function type and JSDocInfo.\n      FunctionType functionType = calleeType.toMaybeFunctionType();\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = NodeUtil.getBestJSDocInfo(callee);\n      if (functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceFileName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n              functionType.getReturnType().isVoidType() ||\n              !isExtern)) {\n        report(t, callee, CONSTRUCTOR_NOT_CALLABLE);\n        return;\n      }\n\n      // Check whether the function has an explicit 'this' type\n      // before checking whether it is being called in a GETPROP\n      // or GETELEM.\n      if (functionType.hasThisType()) {\n        report(t, callee, EXPLICIT_THIS, calleeType.toString());\n        return;\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      Node parent = n.getParent();\n      if (parent != null &&\n          functionType.requiresThisContext() &&\n          !NodeUtil.isGet(parent)) {\n        report(t, callee, THIS_IS_REQUIRED);\n        return;\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..d556ccb0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1541,25 +1541,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * scope chain to use in name lookups as well as error reporting.\n    * @param n The node being visited.\n    */\n-  private void visitCall(NodeTraversal t, Node n) {\n-    Node child = n.getFirstChild();\n-    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n+private void visitCall(NodeTraversal t, Node n) {\n+    Node callee = n.getFirstChild();\n+    JSType calleeType = getJSType(callee).restrictByNotNullOrUndefined();\n \n-    if (!childType.canBeCalled()) {\n-      report(t, n, NOT_CALLABLE, childType.toString());\n+    if (!calleeType.canBeCalled()) {\n+      report(t, callee, NOT_CALLABLE, calleeType.toString());\n       ensureTyped(t, n);\n       return;\n     }\n \n     // A couple of types can be called as if they were functions.\n     // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-      FunctionType functionType = (FunctionType) childType;\n-\n+    if (calleeType.isFunctionType()) {\n+      // Get the function type and JSDocInfo.\n+      FunctionType functionType = calleeType.toMaybeFunctionType();\n       boolean isExtern = false;\n-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n+      JSDocInfo functionJSDocInfo = NodeUtil.getBestJSDocInfo(callee);\n+      if (functionJSDocInfo != null) {\n+        String sourceName = functionJSDocInfo.getSourceFileName();\n         CompilerInput functionSource = compiler.getInput(sourceName);\n         isExtern = functionSource.isExtern();\n       }\n@@ -1570,13 +1570,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n       if (functionType.isConstructor() &&\n           !functionType.isNativeObjectType() &&\n           (functionType.getReturnType().isUnknownType() ||\n-           functionType.getReturnType().isVoidType() ||\n-           !isExtern)) {\n-        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+              functionType.getReturnType().isVoidType() ||\n+              !isExtern)) {\n+        report(t, callee, CONSTRUCTOR_NOT_CALLABLE);\n+        return;\n+      }\n+\n+      // Check whether the function has an explicit 'this' type\n+      // before checking whether it is being called in a GETPROP\n+      // or GETELEM.\n+      if (functionType.hasThisType()) {\n+        report(t, callee, EXPLICIT_THIS, calleeType.toString());\n+        return;\n       }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n+      // Functions with explicit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      Node parent = n.getParent();\n+      if (parent != null &&\n+          functionType.requiresThisContext() &&\n+          !NodeUtil.isGet(parent)) {\n+        report(t, callee, THIS_IS_REQUIRED);\n+        return;\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}