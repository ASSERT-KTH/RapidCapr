{
    "patch": "      Node fnNameNode = n.getFirstChild();\n      if (fnNameNode != null && fnNameNode.getType() == Token.NAME) {\n        Node parentOfFunction = parent.getParent();\n        if (parentOfFunction != null) {\n          int parentType = parentOfFunction.getType();\n          if (parentType == Token.ASSIGN &&\n              NodeUtil.isObjectLiteral(parentOfFunction)) {\n            Node assignTarget = parentOfFunction.getFirstFirstChild();\n            if (assignTarget.isGetProp()) {\n              String propName = assignTarget.getLastChild().getString();\n              if (\"prototype\".equals(propName)) {\n                return false;\n              }\n              // See whether the property is defined on an object borrowed from\n              // an externs file.\n              if (!t.getScope().isDeclared(propName, false)) {\n                Node obj = assignTarget.getFirstChild();\n                Node typeNode = t.getScope().getDeclaredTypeOf(obj.getQualifiedName());\n                if (typeNode != null && typeNode.isFromExterns()) {\n                  return false;\n                }\n              }\n            } else if (assignTarget.getType() == Token.NAME) {\n              // Cannot be a constructor, with or without borrowing. See example:\n              // my.Class.prototype.method = function() { this.foo(); };\n              return false;\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..27904f86 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,36 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node fnNameNode = n.getFirstChild();\n+      if (fnNameNode != null && fnNameNode.getType() == Token.NAME) {\n+        Node parentOfFunction = parent.getParent();\n+        if (parentOfFunction != null) {\n+          int parentType = parentOfFunction.getType();\n+          if (parentType == Token.ASSIGN &&\n+              NodeUtil.isObjectLiteral(parentOfFunction)) {\n+            Node assignTarget = parentOfFunction.getFirstFirstChild();\n+            if (assignTarget.isGetProp()) {\n+              String propName = assignTarget.getLastChild().getString();\n+              if (\"prototype\".equals(propName)) {\n+                return false;\n+              }\n+              // See whether the property is defined on an object borrowed from\n+              // an externs file.\n+              if (!t.getScope().isDeclared(propName, false)) {\n+                Node obj = assignTarget.getFirstChild();\n+                Node typeNode = t.getScope().getDeclaredTypeOf(obj.getQualifiedName());\n+                if (typeNode != null && typeNode.isFromExterns()) {\n+                  return false;\n+                }\n+              }\n+            } else if (assignTarget.getType() == Token.NAME) {\n+              // Cannot be a constructor, with or without borrowing. See example:\n+              // my.Class.prototype.method = function() { this.foo(); };\n+              return false;\n+            }\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}