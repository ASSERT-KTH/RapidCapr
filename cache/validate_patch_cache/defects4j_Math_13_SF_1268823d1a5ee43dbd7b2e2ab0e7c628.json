{
    "patch": "        try {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        } catch (OutOfMemoryError e) {\n            // double the heap space\n            final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / (1024 * 1024));\n            final int newMemory = Math.max(maxMemory * 2, 1);\n            System.out.println(\"Doubling heap space to \" + newMemory + \" MB\");\n            System.setProperty(\"java.rmi.server.maxVMMemory\", newMemory + \"m\");\n            return squareRoot(m);\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..95bbc3c53 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,15 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n+        try {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n-    }\n+        } catch (OutOfMemoryError e) {\n+            // double the heap space\n+            final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / (1024 * 1024));\n+            final int newMemory = Math.max(maxMemory * 2, 1);\n+            System.out.println(\"Doubling heap space to \" + newMemory + \" MB\");\n+            System.setProperty(\"java.rmi.server.maxVMMemory\", newMemory + \"m\");\n+            return squareRoot(m);\n+        }\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}