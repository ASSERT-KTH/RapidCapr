{
    "patch": "    if(this.isNominalConstructor()) {\n      return;\n    }\n\n    // handle the case where the constraint object is not a record type\n    if(!constraintObj.isRecordType()) {\n      return;\n    }\n\n    if (this.isNamedType()) {\n      // if this type is a named type, then we make sure that the constraints object is also a named type.\n      // We only match object properties on anonymous types\n      if (!constraintObj.isNamedType()) {\n        return;\n      }\n    }\n\n    // Update the actual object to match the properties of the constraint object,\n    // and to infer properties that are missing\n    for (String prop : constraintObj.getOwnPropertyNames()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..a0276d3b 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,26 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    if(this.isNominalConstructor()) {\n+      return;\n+    }\n+\n+    // handle the case where the constraint object is not a record type\n+    if(!constraintObj.isRecordType()) {\n+      return;\n+    }\n+\n+    if (this.isNamedType()) {\n+      // if this type is a named type, then we make sure that the constraints object is also a named type.\n+      // We only match object properties on anonymous types\n+      if (!constraintObj.isNamedType()) {\n+        return;\n+      }\n+    }\n+\n+    // Update the actual object to match the properties of the constraint object,\n+    // and to infer properties that are missing\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}