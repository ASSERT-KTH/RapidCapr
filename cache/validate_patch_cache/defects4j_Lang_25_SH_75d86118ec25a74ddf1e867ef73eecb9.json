{
    "patch": "public static String unescape(String str) {\n    StringBuffer buf = new StringBuffer(str.length());\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        if (ch == '\\\\') {\n            if (++i >= str.length()) {\n                throw new IllegalArgumentException(\"Invalid escape sequence on position \" + i + \": \" + str);\n            }\n            ch = str.charAt(i);\n            if (ch == 't') {\n                ch = '\\t';\n            } else if (ch == 'r') {\n                ch = '\\r';\n            } else if (ch == 'n') {\n                ch = '\\n';\n            } else if (ch == 'f') {\n                ch = '\\f';\n            } else if (ch == 'b') {\n                ch = '\\b';\n            } else if (ch == 'u') {\n                if (i + 4 >= str.length()) {\n                    throw new IllegalArgumentException(\"Invalid unicode escape sequence on position \" + i + \": \" + str);\n                }\n                ch = (char) Integer.parseInt(str.substring(i + 1, i + 5), 16);\n                i += 4;\n            } else if (ch == 'v') {\n                ch = '\\u000b';\n            } else if (\"\\'\\\"\\\\()\".indexOf(ch) != -1) {\n                // Do nothing: these characters are escaped with a backslash (e.g. \\' or \\\")\n            } else {\n                throw new IllegalArgumentException(\"Invalid escape sequence on position \" + i + \": \" + str);\n            }\n        }\n        buf.append(ch);\n    }\n    return buf.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}