{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        int maxDayOfMonth = partial.withFieldValue(fieldIndex, 1)\n                .plusMonths(valueToAdd)\n                .dayOfMonth().getMaximumValue();\n        int newValue = values[fieldIndex] + valueToAdd;\n        // if the new day value is greater than the maximum day value, overflow into the next month\n        if (newValue > maxDayOfMonth) {\n            newValue -= maxDayOfMonth;\n            instant = add(instant, 1); // add 1 month\n        } else {\n            // if the new day value is less than 1, underflow into the previous month\n            int minDayOfMonth = partial.withFieldValue(fieldIndex, 1)\n                    .plusMonths(valueToAdd)\n                    .dayOfMonth().getMinimumValue();\n            if (newValue < minDayOfMonth) {\n                newValue += minDayOfMonth - 1;\n                instant = add(instant, -1); // subtract 1 month\n            }\n        }\n        instant = partial.getFieldType(fieldIndex).getField(iChronology).set(instant, newValue);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..b1c90c77 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,41 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+        int maxDayOfMonth = partial.withFieldValue(fieldIndex, 1)\n+                .plusMonths(valueToAdd)\n+                .dayOfMonth().getMaximumValue();\n+        int newValue = values[fieldIndex] + valueToAdd;\n+        // if the new day value is greater than the maximum day value, overflow into the next month\n+        if (newValue > maxDayOfMonth) {\n+            newValue -= maxDayOfMonth;\n+            instant = add(instant, 1); // add 1 month\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            // if the new day value is less than 1, underflow into the previous month\n+            int minDayOfMonth = partial.withFieldValue(fieldIndex, 1)\n+                    .plusMonths(valueToAdd)\n+                    .dayOfMonth().getMinimumValue();\n+            if (newValue < minDayOfMonth) {\n+                newValue += minDayOfMonth - 1;\n+                instant = add(instant, -1); // subtract 1 month\n+            }\n         }\n+        instant = partial.getFieldType(fieldIndex).getField(iChronology).set(instant, newValue);\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}