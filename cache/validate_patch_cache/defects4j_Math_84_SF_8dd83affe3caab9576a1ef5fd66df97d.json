{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflectedSimplex[reflectedSimplex.length - 2]) < 0) {\n                    // accept the expanded simplex\n                    simplex = expanded.getPointRef() == original[0].getPointRef() ? original : expandedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contracted.getPointRef() == original[0].getPointRef() ? original : replaceWorstPoint(original, contracted);\n            } else {\n                // check convergence\n                final RealPointValuePair contractedAfterNewMidpoint = evaluateNewSimplex(original, sigma, comparator);\n                if (comparator.compare(contractedAfterNewMidpoint, best) < 0) {\n                    // accept the contracted simplex after a new midpoint\n                    simplex = contractedAfterNewMidpoint.getPointRef() == original[0].getPointRef() ? original : replaceWorstPoint(original, contractedAfterNewMidpoint);\n                } else {\n                    // perform a shrink\n                    final RealPointValuePair[] shrinked = shrink(original, comparator);\n                    simplex = shrinked[0].getPointRef() == original[0].getPointRef() ? original : shrinked;\n                }\n            }\n\n        }\n\n    }\n    \n    private RealPointValuePair[] shrink(final RealPointValuePair[] original, final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] shrinked = new RealPointValuePair[original.length];\n        final RealPointValuePair best = original[0];\n        for (int i = 1; i < original.length; i++) {\n            final double[] point = original[i].getPoint();\n            final double[] shrunk = new double[point.length];\n            for (int j = 0; j < point.length; j++) {\n                shrunk[j] = best.getPoint()[j] + sigma * (point[j] - best.getPoint()[j]);\n            }\n            shrinked[i] = new RealPointValuePair(shrunk, Double.NaN);\n        }\n        Arrays.sort(shrinked, comparator);\n        return shrinked;\n    }\n    \n    private RealPointValuePair replaceWorstPoint(final RealPointValuePair[] original, final RealPointValuePair replacement) {\n        final RealPointValuePair[] copy = Arrays.copyOf(original, original.length);\n        Arrays.sort(copy, Comparator.reverseOrder());\n        copy[copy.length - 1] = replacement;\n        Arrays.sort(copy, Comparator.naturalOrder());\n        return copy[0].getPointRef() == original[0].getPointRef() ? original[0] : copy;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..f500720bc 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -76,7 +76,10 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                if (comparator.compare(expanded, reflectedSimplex[reflectedSimplex.length - 2]) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expanded.getPointRef() == original[0].getPointRef() ? original : expandedSimplex;\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n@@ -89,14 +92,46 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = contracted.getPointRef() == original[0].getPointRef() ? original : replaceWorstPoint(original, contracted);\n+            } else {\n+                // check convergence\n+                final RealPointValuePair contractedAfterNewMidpoint = evaluateNewSimplex(original, sigma, comparator);\n+                if (comparator.compare(contractedAfterNewMidpoint, best) < 0) {\n+                    // accept the contracted simplex after a new midpoint\n+                    simplex = contractedAfterNewMidpoint.getPointRef() == original[0].getPointRef() ? original : replaceWorstPoint(original, contractedAfterNewMidpoint);\n+                } else {\n+                    // perform a shrink\n+                    final RealPointValuePair[] shrinked = shrink(original, comparator);\n+                    simplex = shrinked[0].getPointRef() == original[0].getPointRef() ? original : shrinked;\n+                }\n             }\n \n         }\n \n     }\n+    \n+    private RealPointValuePair[] shrink(final RealPointValuePair[] original, final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] shrinked = new RealPointValuePair[original.length];\n+        final RealPointValuePair best = original[0];\n+        for (int i = 1; i < original.length; i++) {\n+            final double[] point = original[i].getPoint();\n+            final double[] shrunk = new double[point.length];\n+            for (int j = 0; j < point.length; j++) {\n+                shrunk[j] = best.getPoint()[j] + sigma * (point[j] - best.getPoint()[j]);\n+            }\n+            shrinked[i] = new RealPointValuePair(shrunk, Double.NaN);\n+        }\n+        Arrays.sort(shrinked, comparator);\n+        return shrinked;\n+    }\n+    \n+    private RealPointValuePair replaceWorstPoint(final RealPointValuePair[] original, final RealPointValuePair replacement) {\n+        final RealPointValuePair[] copy = Arrays.copyOf(original, original.length);\n+        Arrays.sort(copy, Comparator.reverseOrder());\n+        copy[copy.length - 1] = replacement;\n+        Arrays.sort(copy, Comparator.naturalOrder());\n+        return copy[0].getPointRef() == original[0].getPointRef() ? original[0] : copy;\n+    }\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}