{
    "patch": "if (len < 2 || len > 10) {\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n} else if (!Character.isLowerCase(str.charAt(0)) || !Character.isLowerCase(str.charAt(1))) {\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n} else if (len > 2){\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len > 5 && str.charAt(5) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 3) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String country = \"\";\n    String variant = \"\";\n    if (len >= 5 && !Character.isUpperCase(str.charAt(3))) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len >= 5) {\n        country = str.substring(3, 5);\n    }\n    if (len > 6) {\n        if (!Character.isUpperCase(str.charAt(6))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 7) {\n            variant = str.substring(6);\n        } else if (len >= 8){\n            if (str.charAt(7) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            variant = str.substring(8);\n            if (!variant.matches(\"[a-zA-Z0-9]+(_[a-zA-Z0-9]+)*\")) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n        }\n    }\n    return new Locale(str.substring(0, 2), country, variant);\n} else {\n    return new Locale(str, \"\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..b7627b13 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -111,6 +111,48 @@ public class LocaleUtils {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             char ch3 = str.charAt(3);\n+if (len < 2 || len > 10) {\n+    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+} else if (!Character.isLowerCase(str.charAt(0)) || !Character.isLowerCase(str.charAt(1))) {\n+    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+} else if (len > 2){\n+    if (str.charAt(2) != '_') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (len > 5 && str.charAt(5) != '_') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (len == 3) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    String country = \"\";\n+    String variant = \"\";\n+    if (len >= 5 && !Character.isUpperCase(str.charAt(3))) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (len >= 5) {\n+        country = str.substring(3, 5);\n+    }\n+    if (len > 6) {\n+        if (!Character.isUpperCase(str.charAt(6))) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        if (len == 7) {\n+            variant = str.substring(6);\n+        } else if (len >= 8){\n+            if (str.charAt(7) != '_') {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            variant = str.substring(8);\n+            if (!variant.matches(\"[a-zA-Z0-9]+(_[a-zA-Z0-9]+)*\")) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+        }\n+    }\n+    return new Locale(str.substring(0, 2), country, variant);\n+} else {\n+    return new Locale(str, \"\");\n+}\n             char ch4 = str.charAt(4);\n             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}