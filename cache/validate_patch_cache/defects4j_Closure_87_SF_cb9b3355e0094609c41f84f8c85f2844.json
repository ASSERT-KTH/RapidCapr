{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node maybeExpression = n.getFirstChild();\n\n        if (NodeUtil.isExpressionNode(maybeExpression) &&\n            !NodeUtil.isFunctionExpression(maybeExpression) &&\n            maybeExpression.getType() != Token.OBJECTLIT &&\n            maybeExpression.getType() != Token.FUNCTION &&\n            maybeExpression.getType() != Token.REGEXP) {\n\n            if (n.getParent().getType() == Token.EXPR_RESULT) {\n                Node parent = n.getParent();\n                Node grandParent = parent.getParent();\n\n                if (grandParent.getType() == Token.IF || grandParent.getType() == Token.WHILE ||\n                    grandParent.getType() == Token.FOR || grandParent.getType() == Token.HOOK) {\n\n                    if (grandParent.getType() == Token.IF) {\n                        Node elseBlock = grandParent.getLastChild();\n\n                        if (elseBlock == null || elseBlock.isEmpty() || elseBlock.getType() != Token.BLOCK) {\n                            return true;\n                        }\n\n                        Node returnNode = NodeUtil.getConditionExpression(elseBlock.getFirstChild());\n                        if (returnNode == null || returnNode.getType() != Token.RETURN) {\n                            return true;\n                        }\n\n                        Node returnValue = returnNode.getFirstChild();\n                        if (returnValue != null && returnValue.getType() == Token.FALSE) {\n                            return true;\n                        }\n                    } else {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..900f829a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,50 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+        Node maybeExpression = n.getFirstChild();\n+\n+        if (NodeUtil.isExpressionNode(maybeExpression) &&\n+            !NodeUtil.isFunctionExpression(maybeExpression) &&\n+            maybeExpression.getType() != Token.OBJECTLIT &&\n+            maybeExpression.getType() != Token.FUNCTION &&\n+            maybeExpression.getType() != Token.REGEXP) {\n+\n+            if (n.getParent().getType() == Token.EXPR_RESULT) {\n+                Node parent = n.getParent();\n+                Node grandParent = parent.getParent();\n+\n+                if (grandParent.getType() == Token.IF || grandParent.getType() == Token.WHILE ||\n+                    grandParent.getType() == Token.FOR || grandParent.getType() == Token.HOOK) {\n+\n+                    if (grandParent.getType() == Token.IF) {\n+                        Node elseBlock = grandParent.getLastChild();\n+\n+                        if (elseBlock == null || elseBlock.isEmpty() || elseBlock.getType() != Token.BLOCK) {\n+                            return true;\n+                        }\n+\n+                        Node returnNode = NodeUtil.getConditionExpression(elseBlock.getFirstChild());\n+                        if (returnNode == null || returnNode.getType() != Token.RETURN) {\n+                            return true;\n+                        }\n+\n+                        Node returnValue = returnNode.getFirstChild();\n+                        if (returnValue != null && returnValue.getType() == Token.FALSE) {\n+                            return true;\n+                        }\n+                    } else {\n+                        return true;\n+                    }\n+                }\n+                return false;\n+            }\n+            return true;\n+        }\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}