{
    "patch": "      JSDocInfo fnJSDocInfo = child.getJSDocInfo();\n      if (fnJSDocInfo != null && fnJSDocInfo.hasThisType() &&\n          (n.getParent().isGetElem() || n.getParent().isGetProp())) {\n        JSType thisType = fnJSDocInfo.getThisType().evaluate(scope, registry);\n        if (thisType != null && !thisType.isUnknownType()) {\n          JSType recvType = scope.getReceiverType();\n          if (recvType == null || !thisType.isSubtypeOf(recvType)) {\n            report(t, n, CTOR_IN_DIFFERENT_SCOPE, thisType.toString());\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..95df42cd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSDocInfo fnJSDocInfo = child.getJSDocInfo();\n+      if (fnJSDocInfo != null && fnJSDocInfo.hasThisType() &&\n+          (n.getParent().isGetElem() || n.getParent().isGetProp())) {\n+        JSType thisType = fnJSDocInfo.getThisType().evaluate(scope, registry);\n+        if (thisType != null && !thisType.isUnknownType()) {\n+          JSType recvType = scope.getReceiverType();\n+          if (recvType == null || !thisType.isSubtypeOf(recvType)) {\n+            report(t, n, CTOR_IN_DIFFERENT_SCOPE, thisType.toString());\n+          }\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}