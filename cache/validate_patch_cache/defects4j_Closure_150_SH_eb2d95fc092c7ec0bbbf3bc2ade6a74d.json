{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        // attachLiteralTypes() is called here in the new hunk, so it should be added in the original hunk too\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n      if (parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..b4936eb8 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1450,6 +1450,7 @@ final class TypedScopeCreator implements ScopeCreator {\n \n       attachLiteralTypes(n);\n       switch (n.getType()) {\n+        // attachLiteralTypes() is called here in the new hunk, so it should be added in the original hunk too\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n             return;\n@@ -1463,6 +1464,9 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n+      if (parent == scope.getRootNode()) {\n+        handleFunctionInputs(parent);\n+      }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_DUP_VAR_DECLARATION. variable x redefined with type (Foo|null), original definition at testcode:13 with type (Foo|null) at testcode line 13 : 33",
    "test_result": "FAIL"
}