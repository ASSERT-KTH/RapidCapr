{
    "patch": "                } else {\n                    // accept the expanded simplex\n                    simplex = evaluateNewSimplex(original, gamma, comparator);\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, -rho, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                final RealPointValuePair[] contractedSimplex = evaluateNewSimplex(original, sigma, comparator);\n                simplex = contractedSimplex;\n            } else if (comparator.compare(contracted, simplex[simplex.length - 1]) >= 0) {\n                // perform a shrink\n                final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[simplex.length];\n                shrunkSimplex[0] = simplex[0];\n                for (int i = 1; i < simplex.length; i++) {\n                    shrunkSimplex[i] = evaluateNewSimplex(original, psi * (i - 1), comparator);\n                }\n                simplex = shrunkSimplex;\n            } else {\n                // check convergence",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..27ab50afb 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,27 +58,9 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                } else {\n+                    // accept the expanded simplex\n+                    simplex = evaluateNewSimplex(original, gamma, comparator);\n                 }\n \n                 return;\n@@ -86,17 +68,21 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             }\n \n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, -rho, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n-\n-        }\n-\n-    }\n+                final RealPointValuePair[] contractedSimplex = evaluateNewSimplex(original, sigma, comparator);\n+                simplex = contractedSimplex;\n+            } else if (comparator.compare(contracted, simplex[simplex.length - 1]) >= 0) {\n+                // perform a shrink\n+                final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[simplex.length];\n+                shrunkSimplex[0] = simplex[0];\n+                for (int i = 1; i < simplex.length; i++) {\n+                    shrunkSimplex[i] = evaluateNewSimplex(original, psi * (i - 1), comparator);\n+                }\n+                simplex = shrunkSimplex;\n+            } else {\n+                // check convergence\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}