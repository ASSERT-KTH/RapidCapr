{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix vInverse = new LUDecomposition(v).getSolver().getInverse();\n    final RealMatrix d = dec.getD();\n    final int n = m.getRowDimension();\n    double[] eigenvalues = d.getColumn(0);\n    for (int i = 0; i < n; i++) {\n        double sqrtAbs = Math.sqrt(Math.abs(eigenvalues[i]));\n        if (eigenvalues[i] < 0) {\n            sqrtAbs = -sqrtAbs;\n        }\n        eigenvalues[i] = sqrtAbs;\n    }\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(eigenvalues);\n    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(vInverse);\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..1a3643de3 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix vInverse = new LUDecomposition(v).getSolver().getInverse();\n+    final RealMatrix d = dec.getD();\n+    final int n = m.getRowDimension();\n+    double[] eigenvalues = d.getColumn(0);\n+    for (int i = 0; i < n; i++) {\n+        double sqrtAbs = Math.sqrt(Math.abs(eigenvalues[i]));\n+        if (eigenvalues[i] < 0) {\n+            sqrtAbs = -sqrtAbs;\n+        }\n+        eigenvalues[i] = sqrtAbs;\n     }\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(eigenvalues);\n+    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(vInverse);\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}