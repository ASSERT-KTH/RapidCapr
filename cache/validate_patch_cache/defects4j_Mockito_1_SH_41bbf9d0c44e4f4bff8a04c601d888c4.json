{
    "patch": "        Object[] args = invocation.getRawArguments();\n        for(int i=0; i < args.length; i++) {\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    if (m instanceof VarargMatcher && i >= (args.length - 1)) {\n                        ((CapturesArguments) m).captureFrom(args[args.length - 1]);\n                    } else if (position == i) {\n                        ((CapturesArguments) m).captureFrom(args[i]);\n                    }\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..637d5a559 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,20 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+        Object[] args = invocation.getRawArguments();\n+        for(int i=0; i < args.length; i++) {\n+            for (int position = 0; position < matchers.size(); position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof CapturesArguments) {\n+                    if (m instanceof VarargMatcher && i >= (args.length - 1)) {\n+                        ((CapturesArguments) m).captureFrom(args[args.length - 1]);\n+                    } else if (position == i) {\n+                        ((CapturesArguments) m).captureFrom(args[i]);\n+                    }\n+                }\n+            }\n+        }\n+    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}