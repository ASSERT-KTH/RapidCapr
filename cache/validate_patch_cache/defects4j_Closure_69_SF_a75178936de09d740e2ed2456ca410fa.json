{
    "patch": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child);\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType.isFunctionType()) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if (functionJSDocInfo != null) {\n        String fnName = NodeUtil.getBestLValueName(NodeUtil.getBestLValue(child));\n        Node scriptNode = functionJSDocInfo.getScopeRoot();\n        isExtern = compiler.getCodingConvention().isExported(ts, scriptNode, fnName, child);\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      if (functionType.getTypeOfThis() != null) {\n        Node parent = n.getParent();\n        if (parent == null || parent.getType() != Token.GETPROP && parent.getType() != Token.GETELEM) {\n          report(t, n, INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..2d95084c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1541,9 +1541,9 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * scope chain to use in name lookups as well as error reporting.\n    * @param n The node being visited.\n    */\n-  private void visitCall(NodeTraversal t, Node n) {\n+private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n-    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n+    JSType childType = getJSType(child);\n \n     if (!childType.canBeCalled()) {\n       report(t, n, NOT_CALLABLE, childType.toString());\n@@ -1553,15 +1553,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n     // A couple of types can be called as if they were functions.\n     // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n+    if (childType.isFunctionType()) {\n       FunctionType functionType = (FunctionType) childType;\n \n       boolean isExtern = false;\n       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n-        CompilerInput functionSource = compiler.getInput(sourceName);\n-        isExtern = functionSource.isExtern();\n+      if (functionJSDocInfo != null) {\n+        String fnName = NodeUtil.getBestLValueName(NodeUtil.getBestLValue(child));\n+        Node scriptNode = functionJSDocInfo.getScopeRoot();\n+        isExtern = compiler.getCodingConvention().isExported(ts, scriptNode, fnName, child);\n       }\n \n       // Non-native constructors should not be called directly\n@@ -1575,19 +1575,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n       }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n+      // Functions with explicit 'this' types must be called in a GETPROP\n       // or GETELEM.\n-\n-      visitParameterList(t, n, functionType);\n-      ensureTyped(t, n, functionType.getReturnType());\n-    } else {\n-      ensureTyped(t, n);\n-    }\n-\n-    // TODO: Add something to check for calls of RegExp objects, which is not\n-    // supported by IE.  Either say something about the return type or warn\n-    // about the non-portability of the call or both.\n-  }\n+      if (functionType.getTypeOfThis() != null) {\n+        Node parent = n.getParent();\n+        if (parent == null || parent.getType() != Token.GETPROP && parent.getType() != Token.GETELEM) {\n+          report(t, n, INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n+        }\n \n   /**\n    * Visits the parameters of a CALL or a NEW node.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}