{
    "patch": "public static String getprop(String key) {\n    try {\n        Process process = Runtime.getRuntime().exec(\"getprop \" + key);\n        InputStream inputStream = process.getInputStream();\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n        String line = bufferedReader.readLine();\n        bufferedReader.close();\n        inputStream.close();\n        return line;\n    } catch (IOException e) {\n        return \"\";\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..4f6c9d09 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String key) {\n+    try {\n+        Process process = Runtime.getRuntime().exec(\"getprop \" + key);\n+        InputStream inputStream = process.getInputStream();\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n+        String line = bufferedReader.readLine();\n+        bufferedReader.close();\n+        inputStream.close();\n+        return line;\n+    } catch (IOException e) {\n+        return \"\";\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}