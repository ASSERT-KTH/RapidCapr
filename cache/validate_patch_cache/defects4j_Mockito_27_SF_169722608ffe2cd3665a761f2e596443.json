{
    "patch": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n        InvocationHandler invocationHandler = Proxy.getInvocationHandler(mock);\n        if (invocationHandler instanceof InterceptedInvocation) {\n            InterceptedInvocation interceptedInvocation = (InterceptedInvocation) invocationHandler;\n            List<Callback> callbacks = interceptedInvocation.getCallbacks();\n            for (int i = 0; i < callbacks.size(); i++) {\n                Callback callback = callbacks.get(i);\n                if (callback instanceof MethodInterceptorFilter) {\n                    callbacks.set(i, newFilter);\n                }\n            }\n        } else {\n            throw new IllegalArgumentException(\"The mock object is not supported.\");\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..0f28bae90 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,26 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+        InvocationHandler invocationHandler = Proxy.getInvocationHandler(mock);\n+        if (invocationHandler instanceof InterceptedInvocation) {\n+            InterceptedInvocation interceptedInvocation = (InterceptedInvocation) invocationHandler;\n+            List<Callback> callbacks = interceptedInvocation.getCallbacks();\n+            for (int i = 0; i < callbacks.size(); i++) {\n+                Callback callback = callbacks.get(i);\n+                if (callback instanceof MethodInterceptorFilter) {\n+                    callbacks.set(i, newFilter);\n+                }\n+            }\n+        } else {\n+            throw new IllegalArgumentException(\"The mock object is not supported.\");\n+        }\n+    }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}