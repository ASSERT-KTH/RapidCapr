{
    "patch": "public static List<Integer> removeDuplicates(List<Integer> numbers){\n    List<Integer> uniqueNumbers = new ArrayList<>();\n\n    for(Integer number : numbers){\n        if(!uniqueNumbers.contains(number)){\n            uniqueNumbers.add(number);\n        }\n    }\n\n    return uniqueNumbers;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..1de2bbfa5 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,17 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static List<Integer> removeDuplicates(List<Integer> numbers){\n+    List<Integer> uniqueNumbers = new ArrayList<>();\n+\n+    for(Integer number : numbers){\n+        if(!uniqueNumbers.contains(number)){\n+            uniqueNumbers.add(number);\n+        }\n+    }\n+\n+    return uniqueNumbers;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}