{
    "patch": "    private static synchronized String getConvertedId(String id) {\n        Map<String, String> map = cZoneIdConversion;\n        if (map == null) {\n            // Backwards compatibility with TimeZone.\n            map = new HashMap<String, String>();\n            map.put(\"GMT\", \"Etc/GMT\");\n            map.put(\"MIT\", \"Pacific/Apia\");\n            map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n            map.put(\"AST\", \"America/Anchorage\");\n            map.put(\"PST\", \"America/Los_Angeles\");\n            map.put(\"MST\", \"America/Denver\");  // JDK 1.1 compatible\n            map.put(\"PNT\", \"America/Phoenix\");\n            map.put(\"CST\", \"America/Chicago\");\n            map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\n            map.put(\"IET\", \"America/Indianapolis\");\n            map.put(\"PRT\", \"America/Puerto_Rico\");\n            map.put(\"CNT\", \"America/St_Johns\");\n            map.put(\"AGT\", \"America/Buenos_Aires\");\n            map.put(\"BET\", \"America/Sao_Paulo\");\n            map.put(\"WET\", \"Europe/London\");\n            map.put(\"ECT\", \"Europe/Paris\");\n            map.put(\"ART\", \"Africa/Cairo\");\n            map.put(\"CAT\", \"Africa/Harare\");\n            map.put(\"EET\", \"Europe/Bucharest\");\n            map.put(\"EAT\", \"Africa/Addis_Ababa\");\n            map.put(\"MET\", \"Asia/Tehran\");\n            map.put(\"NET\", \"Asia/Yerevan\");\n            map.put(\"PLT\", \"Asia/Karachi\");\n            map.put(\"IST\", \"Asia/Calcutta\");\n            map.put(\"BST\", \"Asia/Dhaka\");\n            map.put(\"VST\", \"Asia/Saigon\");\n            map.put(\"CTT\", \"Asia/Shanghai\");\n            map.put(\"JST\", \"Asia/Tokyo\");\n            map.put(\"ACT\", \"Australia/Darwin\");\n            map.put(\"AET\", \"Australia/Sydney\");\n            map.put(\"SST\", \"Pacific/Guadalcanal\");\n            map.put(\"NST\", \"Pacific/Auckland\");\n            cZoneIdConversion = map;\n        }\n\n        String zoneId = map.get(id);\n        if (zoneId == null && id.startsWith(\"GMT\")) {\n            // Support GMT+-H:MM and GMT\u00b1H:MM\n            int length = id.length();\n            if (length > 3 && id.charAt(3) == '+') {\n                int hours = parseNumber(id.substring(4));\n                int minutes = 0;\n                if (length > 6) {\n                    minutes = parseNumber(id.substring(5));\n                }\n                int offset = (hours * DateTimeConstants.MILLIS_PER_HOUR) + (minutes * DateTimeConstants.MILLIS_PER_MINUTE);\n                offset *= -1;\n                zoneId = DateTimeZone.forOffsetMillis(offset).getID();\n            } else if (length > 3 && id.charAt(3) == '-') {\n                int hours = parseNumber(id.substring(4));\n                int minutes = 0;\n                if (length > 6) {\n                    minutes = parseNumber(id.substring(5));\n                }\n                int offset = (hours * DateTimeConstants.MILLIS_PER_HOUR) + (minutes * DateTimeConstants.MILLIS_PER_MINUTE);\n                zoneId = DateTimeZone.forOffsetMillis(offset).getID();\n            } else {\n                zoneId = \"Etc/GMT\" + id.substring(3);\n            }\n        }\n        return zoneId;\n    }\n    \n    private static int parseNumber(String value) {\n        int length = value.length();\n        if (length > 9) {\n            throw new IllegalArgumentException();\n        }\n        int result = 0;\n        for (int i = 0; i < length; i++) {\n            char c = value.charAt(i);\n            if (c < '0' || c > '9') {\n                throw new IllegalArgumentException();\n            }\n            result = (result * 10) + (c - '0');\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 5d89e34b..dfde11de 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -560,7 +560,7 @@ public abstract class DateTimeZone implements Serializable {\n         if (map == null) {\n             // Backwards compatibility with TimeZone.\n             map = new HashMap<String, String>();\n-            map.put(\"GMT\", \"UTC\");\n+            map.put(\"GMT\", \"Etc/GMT\");\n             map.put(\"MIT\", \"Pacific/Apia\");\n             map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n             map.put(\"AST\", \"America/Anchorage\");\n@@ -594,7 +594,49 @@ public abstract class DateTimeZone implements Serializable {\n             map.put(\"NST\", \"Pacific/Auckland\");\n             cZoneIdConversion = map;\n         }\n-        return map.get(id);\n+\n+        String zoneId = map.get(id);\n+        if (zoneId == null && id.startsWith(\"GMT\")) {\n+            // Support GMT+-H:MM and GMT\u00b1H:MM\n+            int length = id.length();\n+            if (length > 3 && id.charAt(3) == '+') {\n+                int hours = parseNumber(id.substring(4));\n+                int minutes = 0;\n+                if (length > 6) {\n+                    minutes = parseNumber(id.substring(5));\n+                }\n+                int offset = (hours * DateTimeConstants.MILLIS_PER_HOUR) + (minutes * DateTimeConstants.MILLIS_PER_MINUTE);\n+                offset *= -1;\n+                zoneId = DateTimeZone.forOffsetMillis(offset).getID();\n+            } else if (length > 3 && id.charAt(3) == '-') {\n+                int hours = parseNumber(id.substring(4));\n+                int minutes = 0;\n+                if (length > 6) {\n+                    minutes = parseNumber(id.substring(5));\n+                }\n+                int offset = (hours * DateTimeConstants.MILLIS_PER_HOUR) + (minutes * DateTimeConstants.MILLIS_PER_MINUTE);\n+                zoneId = DateTimeZone.forOffsetMillis(offset).getID();\n+            } else {\n+                zoneId = \"Etc/GMT\" + id.substring(3);\n+            }\n+        }\n+        return zoneId;\n+    }\n+    \n+    private static int parseNumber(String value) {\n+        int length = value.length();\n+        if (length > 9) {\n+            throw new IllegalArgumentException();\n+        }\n+        int result = 0;\n+        for (int i = 0; i < length; i++) {\n+            char c = value.charAt(i);\n+            if (c < '0' || c > '9') {\n+                throw new IllegalArgumentException();\n+            }\n+            result = (result * 10) + (c - '0');\n+        }\n+        return result;\n     }\n \n     private static int parseOffset(String str) {",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[UTC]> but was:<[Etc/GMT]>",
    "test_result": "FAIL"
}