{
    "patch": "public int[] add(ReadablePartial partial, int[] values, int fieldIndex, int valueToAdd) {\n\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is largest field and being added to, such as month-day\n    if (fieldIndex == 1) {\n        int currentMonth = values[0];\n        int currentDayOfMonth = values[1];\n        int daysInMonth = iChronology.monthOfYear().getMaximumValue(currentMonth);\n        int maxDayOfMonth = (currentDayOfMonth > daysInMonth) ? daysInMonth : currentDayOfMonth;\n\n        long instant = 0L;\n        int newMonth = iChronology.monthOfYear().add(currentMonth, valueToAdd);\n        int newYear = values[2];\n\n        if (newMonth < currentMonth) {\n            LocalDate currentLocalDate = new LocalDate(values[2], currentMonth, maxDayOfMonth, iChronology);\n            LocalDate newLocalDate = currentLocalDate.plusMonths(valueToAdd);\n            newMonth = newLocalDate.getMonthOfYear();\n            newYear = newLocalDate.getYear();\n            maxDayOfMonth = newLocalDate.dayOfMonth().getMaximumValue();\n        }\n\n        instant = iChronology.year().set(instant, newYear);\n        instant = iChronology.monthOfYear().set(instant, newMonth);\n        instant = iChronology.dayOfMonth().set(instant, maxDayOfMonth);\n\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..c060c58e 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,40 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+public int[] add(ReadablePartial partial, int[] values, int fieldIndex, int valueToAdd) {\n+\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // month is largest field and being added to, such as month-day\n+    if (fieldIndex == 1) {\n+        int currentMonth = values[0];\n+        int currentDayOfMonth = values[1];\n+        int daysInMonth = iChronology.monthOfYear().getMaximumValue(currentMonth);\n+        int maxDayOfMonth = (currentDayOfMonth > daysInMonth) ? daysInMonth : currentDayOfMonth;\n+\n+        long instant = 0L;\n+        int newMonth = iChronology.monthOfYear().add(currentMonth, valueToAdd);\n+        int newYear = values[2];\n+\n+        if (newMonth < currentMonth) {\n+            LocalDate currentLocalDate = new LocalDate(values[2], currentMonth, maxDayOfMonth, iChronology);\n+            LocalDate newLocalDate = currentLocalDate.plusMonths(valueToAdd);\n+            newMonth = newLocalDate.getMonthOfYear();\n+            newYear = newLocalDate.getYear();\n+            maxDayOfMonth = newLocalDate.dayOfMonth().getMaximumValue();\n         }\n+\n+        instant = iChronology.year().set(instant, newYear);\n+        instant = iChronology.monthOfYear().set(instant, newMonth);\n+        instant = iChronology.dayOfMonth().set(instant, maxDayOfMonth);\n+\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}