{
    "patch": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) {\n    // check hours offset is within range (-23 to 23)\n    if (hoursOffset > 23 || hoursOffset < -23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n\n    // calculate the equivalent offset in minutes\n    int totalMinutes = hoursOffset * 60 + minutesOffset;\n\n    // check total minutes is within range (-23:59 to 23:59)\n    if (totalMinutes > 23 * 60 + 59 || totalMinutes < -23 * 60 - 59) {\n        throw new IllegalArgumentException(\"Values out of range: hours=\" + hoursOffset + \", minutes=\" + minutesOffset);\n    }\n\n    // check combination of hours and minutes do not exceed 23:59 or -23:-59\n    if (hoursOffset == 23 && minutesOffset > 0) {\n        throw new IllegalArgumentException(\"Values out of range: hours=23, minutes=\" + minutesOffset);\n    }\n    if (hoursOffset == -23 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Values out of range: hours=-23, minutes=\" + minutesOffset);\n    }\n\n    // calculate offset in milliseconds and return DateTimeZone\n    long offsetMillis = totalMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n    return DateTimeZone.forOffsetMillis((int) offsetMillis);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 7d1719bc..88c49dda 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -269,31 +269,33 @@ public abstract class DateTimeZone implements Serializable {\n      * @throws IllegalArgumentException if any value is out of range, the minutes are negative\n      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000\n      */\n-    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n-        if (hoursOffset == 0 && minutesOffset == 0) {\n-            return DateTimeZone.UTC;\n-        }\n-        if (hoursOffset < -23 || hoursOffset > 23) {\n-            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n-        }\n-        if (minutesOffset < 0 || minutesOffset > 59) {\n-            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n-        }\n-        int offset = 0;\n-        try {\n-            int hoursInMinutes = hoursOffset * 60;\n-            if (hoursInMinutes < 0) {\n-                minutesOffset = hoursInMinutes - minutesOffset;\n-            } else {\n-                minutesOffset = hoursInMinutes + minutesOffset;\n-            }\n-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n-        } catch (ArithmeticException ex) {\n-            throw new IllegalArgumentException(\"Offset is too large\");\n-        }\n-        return forOffsetMillis(offset);\n+public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) {\n+    // check hours offset is within range (-23 to 23)\n+    if (hoursOffset > 23 || hoursOffset < -23) {\n+        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n     }\n \n+    // calculate the equivalent offset in minutes\n+    int totalMinutes = hoursOffset * 60 + minutesOffset;\n+\n+    // check total minutes is within range (-23:59 to 23:59)\n+    if (totalMinutes > 23 * 60 + 59 || totalMinutes < -23 * 60 - 59) {\n+        throw new IllegalArgumentException(\"Values out of range: hours=\" + hoursOffset + \", minutes=\" + minutesOffset);\n+    }\n+\n+    // check combination of hours and minutes do not exceed 23:59 or -23:-59\n+    if (hoursOffset == 23 && minutesOffset > 0) {\n+        throw new IllegalArgumentException(\"Values out of range: hours=23, minutes=\" + minutesOffset);\n+    }\n+    if (hoursOffset == -23 && minutesOffset < 0) {\n+        throw new IllegalArgumentException(\"Values out of range: hours=-23, minutes=\" + minutesOffset);\n+    }\n+\n+    // calculate offset in milliseconds and return DateTimeZone\n+    long offsetMillis = totalMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n+    return DateTimeZone.forOffsetMillis((int) offsetMillis);\n+}\n+\n     /**\n      * Gets a time zone instance for the specified offset to UTC in milliseconds.\n      *",
    "result_reason": "java.lang.IllegalArgumentException: Values out of range: hours=23, minutes=59",
    "test_result": "FAIL"
}