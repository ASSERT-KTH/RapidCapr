{
    "patch": "if (m == null && arg == null) {\n    return true;\n} else if (m == null || arg == null) {\n    return false;\n} else {\n    try {\n        String expected = StringDescription.toString(m);\n        String actual = arg.toString();\n        if (expected.equals(actual)) {\n            return true;\n        }\n        if (m.pattern().equals(WildcardPattern.matcher(actual).pattern())) {\n            return WildcardPattern.matcher(actual).matches(StringDescription.toString(m));\n        }\n        return false;\n    } catch (NullPointerException e) {\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\nindex 671fbc539..4ececa5af 100644\n--- a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n+++ b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n@@ -44,7 +44,26 @@ public class ArgumentMatchingTool {\n         }\n     }\n \n+\n     private boolean toStringEquals(Matcher m, Object arg) {\n-        return StringDescription.toString(m).equals(arg.toString());\n+if (m == null && arg == null) {\n+    return true;\n+} else if (m == null || arg == null) {\n+    return false;\n+} else {\n+    try {\n+        String expected = StringDescription.toString(m);\n+        String actual = arg.toString();\n+        if (expected.equals(actual)) {\n+            return true;\n+        }\n+        if (m.pattern().equals(WildcardPattern.matcher(actual).pattern())) {\n+            return WildcardPattern.matcher(actual).matches(StringDescription.toString(m));\n+        }\n+        return false;\n+    } catch (NullPointerException e) {\n+        return false;\n+    }\n+}\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}