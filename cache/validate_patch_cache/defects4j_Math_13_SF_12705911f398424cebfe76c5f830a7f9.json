{
    "patch": "            double totalMemory = Runtime.getRuntime().totalMemory();\n            double maxMemory = 0.9 * Runtime.getRuntime().maxMemory();\n            double freeMemory = Runtime.getRuntime().freeMemory();\n            double usedMemory = totalMemory - freeMemory;\n            if (usedMemory >= maxMemory * 0.8) {\n                System.gc();\n                System.runFinalization();\n            }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b7a3427e2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,12 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+            double totalMemory = Runtime.getRuntime().totalMemory();\n+            double maxMemory = 0.9 * Runtime.getRuntime().maxMemory();\n+            double freeMemory = Runtime.getRuntime().freeMemory();\n+            double usedMemory = totalMemory - freeMemory;\n+            if (usedMemory >= maxMemory * 0.8) {\n+                System.gc();\n+                System.runFinalization();\n+            }\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}