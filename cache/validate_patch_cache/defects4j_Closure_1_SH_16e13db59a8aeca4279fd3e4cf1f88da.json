{
    "patch": "// Remove any unreferenced parameters from the function declaration\nNode function = fnScope.getRootNode();\nif (!function.isFunction()) {\n    return;\n}\n\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean shouldModifyCallers = modifyCallSites\n    && callSiteOptimizer.canModifyCallers(function);\nif (!shouldModifyCallers) {\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n        if (lastArg.isDefaultValue()) {\n            lastArg = lastArg.getFirstChild();\n        }\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n        } else {\n            break;\n        }\n    }\n} else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4f56a54d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,37 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Remove any unreferenced parameters from the function declaration\n+Node function = fnScope.getRootNode();\n+if (!function.isFunction()) {\n+    return;\n+}\n+\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean shouldModifyCallers = modifyCallSites\n+    && callSiteOptimizer.canModifyCallers(function);\n+if (!shouldModifyCallers) {\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+        if (lastArg.isDefaultValue()) {\n+            lastArg = lastArg.getFirstChild();\n+        }\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+        } else {\n+            break;\n+        }\n+    }\n+} else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}