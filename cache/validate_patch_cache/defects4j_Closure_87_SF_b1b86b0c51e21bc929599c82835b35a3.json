{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  // Check if the node is a block with only one child node\n  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n    return false;\n  }\n\n  Node maybeExpr = n.getFirstChild();\n\n  // Don't fold expressions that have side effects\n  if (NodeUtil.mayHaveSideEffects(maybeExpr)) {\n    return false;\n  }\n\n  // Don't fold expressions that are the argument of a call or new\n  Node parent = maybeExpr.getParent();\n  if (parent != null && (parent.getType() == Token.CALL || parent.getType() == Token.NEW)) {\n    return false;\n  }\n\n  // Don't fold expressions within an EXPR_RESULT parent\n  if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n    return false;\n  }\n\n  // Don't fold map keys that are classNames or used in a JS compiler annotation\n  if (NodeUtil.isObjectLitKey(maybeExpr)) {\n    Node grandparent = parent.getParent();\n    if (grandparent != null && grandparent.getType() == Token.OBJECTLIT && grandparent.getParent() != null) {\n      Node greatGrandparent = grandparent.getParent();\n      if (greatGrandparent.getType() == Token.CALL\n          && greatGrandparent.getFirstChild().getType() == Token.NAME\n          && \"goog.object\".equals(greatGrandparent.getFirstChild().getString())) {\n        return false;\n      }\n      if (greatGrandparent.getType() == Token.ASSIGN && grandparent == greatGrandparent.getLastChild() && grandparent.getType() == Token.OBJECTLIT) {\n        Node target = greatGrandparent.getFirstChild();\n        if (target != null && target.getType() == Token.GETPROP\n            && \"prototype\".equals(target.getLastChild().getString())) {\n          return false;\n        }\n        if (target != null && target.getType() == Token.OBJECTLIT\n            && \"prototype\".equals(grandparent.getParent().getLastChild().getString())) {\n          return false;\n        }\n      }\n    }\n\n    if (NodeUtil.isGoogModuleDecl(maybeExpr.getGrandparent())) {\n      return false;\n    }\n  }\n\n  // Don't fold expressions within an IF block\n  if (parent != null && parent.getType() == Token.IF) {\n    Node thenBlock = parent.getChildAtIndex(1);\n    if (thenBlock.getChildCount() > 1 || NodeUtil.mayHaveSideEffects(thenBlock.getFirstChild())) {\n      return false;\n    }\n  }\n\n  // Ignore `case` conditions in the SwitchStatement\n  if (parent != null && parent.getType() == Token.CASE && parent.getFirstChild() != maybeExpr) {\n    return false;\n  }\n\n  // Ignore `default` blocks in the SwitchStatement\n  if (parent != null && parent.getType() == Token.DEFAULT_CASE) {\n    return false;\n  }\n\n  return NodeUtil.isExpressionNode(maybeExpr);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..bd434462 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,79 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  // Check if the node is a block with only one child node\n+  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n+    return false;\n+  }\n+\n+  Node maybeExpr = n.getFirstChild();\n+\n+  // Don't fold expressions that have side effects\n+  if (NodeUtil.mayHaveSideEffects(maybeExpr)) {\n+    return false;\n+  }\n+\n+  // Don't fold expressions that are the argument of a call or new\n+  Node parent = maybeExpr.getParent();\n+  if (parent != null && (parent.getType() == Token.CALL || parent.getType() == Token.NEW)) {\n+    return false;\n+  }\n+\n+  // Don't fold expressions within an EXPR_RESULT parent\n+  if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+    return false;\n+  }\n+\n+  // Don't fold map keys that are classNames or used in a JS compiler annotation\n+  if (NodeUtil.isObjectLitKey(maybeExpr)) {\n+    Node grandparent = parent.getParent();\n+    if (grandparent != null && grandparent.getType() == Token.OBJECTLIT && grandparent.getParent() != null) {\n+      Node greatGrandparent = grandparent.getParent();\n+      if (greatGrandparent.getType() == Token.CALL\n+          && greatGrandparent.getFirstChild().getType() == Token.NAME\n+          && \"goog.object\".equals(greatGrandparent.getFirstChild().getString())) {\n+        return false;\n+      }\n+      if (greatGrandparent.getType() == Token.ASSIGN && grandparent == greatGrandparent.getLastChild() && grandparent.getType() == Token.OBJECTLIT) {\n+        Node target = greatGrandparent.getFirstChild();\n+        if (target != null && target.getType() == Token.GETPROP\n+            && \"prototype\".equals(target.getLastChild().getString())) {\n+          return false;\n+        }\n+        if (target != null && target.getType() == Token.OBJECTLIT\n+            && \"prototype\".equals(grandparent.getParent().getLastChild().getString())) {\n+          return false;\n+        }\n       }\n     }\n \n+    if (NodeUtil.isGoogModuleDecl(maybeExpr.getGrandparent())) {\n+      return false;\n+    }\n+  }\n+\n+  // Don't fold expressions within an IF block\n+  if (parent != null && parent.getType() == Token.IF) {\n+    Node thenBlock = parent.getChildAtIndex(1);\n+    if (thenBlock.getChildCount() > 1 || NodeUtil.mayHaveSideEffects(thenBlock.getFirstChild())) {\n+      return false;\n+    }\n+  }\n+\n+  // Ignore `case` conditions in the SwitchStatement\n+  if (parent != null && parent.getType() == Token.CASE && parent.getFirstChild() != maybeExpr) {\n     return false;\n   }\n \n+  // Ignore `default` blocks in the SwitchStatement\n+  if (parent != null && parent.getType() == Token.DEFAULT_CASE) {\n+    return false;\n+  }\n+\n+  return NodeUtil.isExpressionNode(maybeExpr);\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: method isObjectLitKey in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}