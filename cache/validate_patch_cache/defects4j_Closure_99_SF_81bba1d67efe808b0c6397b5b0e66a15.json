{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.isFunction()) {\n    // Don't traverse functions that are Class or Constructor\n    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() || jsDoc.isClass())) {\n      return false;\n    }\n\n    // Don't traverse function expressions\n    if (NodeUtil.isFunctionExpression(n)) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally be:\n    // 1. able to have a `this` annotation associated with them, or\n    // 2. are the top level function in a chain.\n    if (parent == null || parent == currentScope.getRootNode()) {\n      // top-level function definition.\n      return true;\n    } else if (parent.isAssign() && parent.getFirstChild() == n) {\n      // Left-hand side of an assignment (e.g. `a = function() {};`)\n      return true;\n    } else if (parent.isExprResult() && parent.getParent() == currentScope.getRootNode() &&\n        NodeUtil.isTopLevelAssign(parent.getFirstChild())) {\n      // Top-level function expression statement (e.g. `foo(function() {})`)\n      return true;\n    } else if (parent.isObjectLit() || parent.isClass() || parent.isExtends()) {\n      // Object literal property value or class body function\n      return true;\n    } else if (parent.isStringKey() && parent.getParent().isObjectLit()) {\n      // Object literal with quoted key name\n      return true;\n    } else if (NodeUtil.isTopLevelFunctionDeclaration(n, parent)) {\n      // Top level function declaration\n      return true;\n    }\n\n    // None of the above cases, do not traverse.\n    return false;\n  } else if (parent != null && parent.isAssign()) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n    // Always traverse the left side of the assignment.\n    // Do not traverse the right side if it's an assignment\n    // to a prototype property or subproperty.\n    if (n == lhs) {\n      return true;\n    } else if (lhs.isGetProp() &&\n        lhs.getLastChild().getString().equals(\"prototype\")) {\n      return false;\n    } else if (lhs.getQualifiedName() != null &&\n        lhs.getQualifiedName().contains(\".prototype.\")) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..0571fb67 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,60 +81,68 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  if (n.isFunction()) {\n+    // Don't traverse functions that are Class or Constructor\n+    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+    if (jsDoc != null &&\n+        (jsDoc.isConstructor() || jsDoc.isClass())) {\n+      return false;\n+    }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+    // Don't traverse function expressions\n+    if (NodeUtil.isFunctionExpression(n)) {\n+      return false;\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n+    // Don't traverse functions unless they would normally be:\n+    // 1. able to have a `this` annotation associated with them, or\n+    // 2. are the top level function in a chain.\n+    if (parent == null || parent == currentScope.getRootNode()) {\n+      // top-level function definition.\n+      return true;\n+    } else if (parent.isAssign() && parent.getFirstChild() == n) {\n+      // Left-hand side of an assignment (e.g. `a = function() {};`)\n+      return true;\n+    } else if (parent.isExprResult() && parent.getParent() == currentScope.getRootNode() &&\n+        NodeUtil.isTopLevelAssign(parent.getFirstChild())) {\n+      // Top-level function expression statement (e.g. `foo(function() {})`)\n+      return true;\n+    } else if (parent.isObjectLit() || parent.isClass() || parent.isExtends()) {\n+      // Object literal property value or class body function\n+      return true;\n+    } else if (parent.isStringKey() && parent.getParent().isObjectLit()) {\n+      // Object literal with quoted key name\n+      return true;\n+    } else if (NodeUtil.isTopLevelFunctionDeclaration(n, parent)) {\n+      // Top level function declaration\n+      return true;\n     }\n \n-    return true;\n+    // None of the above cases, do not traverse.\n+    return false;\n+  } else if (parent != null && parent.isAssign()) {\n+    Node lhs = parent.getFirstChild();\n+    Node rhs = lhs.getNext();\n+    // Always traverse the left side of the assignment.\n+    // Do not traverse the right side if it's an assignment\n+    // to a prototype property or subproperty.\n+    if (n == lhs) {\n+      return true;\n+    } else if (lhs.isGetProp() &&\n+        lhs.getLastChild().getString().equals(\"prototype\")) {\n+      return false;\n+    } else if (lhs.getQualifiedName() != null &&\n+        lhs.getQualifiedName().contains(\".prototype.\")) {\n+      return false;\n+    } else {\n+      return true;\n+    }\n   }\n \n+  return true;\n+}\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}