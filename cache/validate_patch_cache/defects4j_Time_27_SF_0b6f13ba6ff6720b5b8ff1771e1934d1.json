{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n    // Find the first non-Separator element.\n    int startIndex = -1;\n    for (int i = 0; i < size; i++) {\n        if (!(elementPairs.get(i) instanceof Separator)) {\n            startIndex = i;\n            break;\n        }\n    }\n    // If all elements are Separator, return a formatter with the initial Separator.\n    if (startIndex == -1) {\n        Separator sep = (Separator) elementPairs.get(0);\n        return new PeriodFormatter(sep, sep);\n    }\n    // If only one non-Separator element, create a formatter from it.\n    if (startIndex == size - 1) {\n        Object[] comp = createComposite(Collections.singletonList(elementPairs.get(startIndex)));\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n    // Otherwise, create a formatter from the non-Separator elements and finish the initial Separator.\n    List<Object> nonSepElements = elementPairs.subList(startIndex, size);\n    Object[] comp = createComposite(nonSepElements);\n    PeriodFormatter f = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    Separator sep = (Separator) elementPairs.get(startIndex - 1);\n    sep = sep.finish(f.getPrinter(), f.getParser());\n    return new PeriodFormatter(sep, sep);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..2b4fc181 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,18 +791,30 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    // Find the first non-Separator element.\n+    int startIndex = -1;\n+    for (int i = 0; i < size; i++) {\n+        if (!(elementPairs.get(i) instanceof Separator)) {\n+            startIndex = i;\n+            break;\n+        }\n+    }\n+    // If all elements are Separator, return a formatter with the initial Separator.\n+    if (startIndex == -1) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        return new PeriodFormatter(sep, sep);\n+    }\n+    // If only one non-Separator element, create a formatter from it.\n+    if (startIndex == size - 1) {\n+        Object[] comp = createComposite(Collections.singletonList(elementPairs.get(startIndex)));\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n         } else if (notParser) {\n@@ -811,6 +823,14 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+    // Otherwise, create a formatter from the non-Separator elements and finish the initial Separator.\n+    List<Object> nonSepElements = elementPairs.subList(startIndex, size);\n+    Object[] comp = createComposite(nonSepElements);\n+    PeriodFormatter f = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    Separator sep = (Separator) elementPairs.get(startIndex - 1);\n+    sep = sep.finish(f.getPrinter(), f.getParser());\n+    return new PeriodFormatter(sep, sep);\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[1 year, 2 months, 3 weeks, 4 days, 5 hours, 6 minutes, ]7 seconds and 8 mill...> but was:<[]7 seconds and 8 mill...>",
    "test_result": "FAIL"
}