{
    "patch": "private void init() {\n    thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n\n    nameValues = new ConcurrentHashMap<Integer, KeyValue[]>();\n\n    StringBuilder regex = new StringBuilder();\n    List<Strategy> collector = new ArrayList<Strategy>();\n\n    Matcher patternMatcher = formatPattern.matcher(pattern);\n    int lastEnd = 0;\n    while (patternMatcher.find()) {\n        if (lastEnd != patternMatcher.start()) {\n            regex.append(Pattern.quote(pattern.substring(lastEnd, patternMatcher.start())));\n        }\n\n        String currentFormatField = patternMatcher.group();\n        Strategy currentStrategy = getStrategy(currentFormatField);\n        if (currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n\n        lastEnd = patternMatcher.end();\n    }\n\n    if (lastEnd != pattern.length()) {\n        regex.append(Pattern.quote(pattern.substring(lastEnd)));\n    }\n\n    if (regex.length() == 0) {\n        // This means the pattern consists only of static text\n        regex.append(\".*\");\n    }\n\n    strategies = collector.toArray(new Strategy[0]);\n    parsePattern = Pattern.compile(\"(\" + regex + \")\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..23504526 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -112,43 +112,43 @@ public class FastDateParser implements DateParser, Serializable {\n      * Initialize derived fields from defining fields.\n      * This is called from constructor and from readObject (de-serialization)\n      */\n-    private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+private void init() {\n+    thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n \n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n+    nameValues = new ConcurrentHashMap<Integer, KeyValue[]>();\n \n-        StringBuilder regex= new StringBuilder();\n-        List<Strategy> collector = new ArrayList<Strategy>();\n+    StringBuilder regex = new StringBuilder();\n+    List<Strategy> collector = new ArrayList<Strategy>();\n \n-        Matcher patternMatcher= formatPattern.matcher(pattern);\n-        if(!patternMatcher.lookingAt()) {\n-            throw new IllegalArgumentException(\"Invalid pattern\");\n+    Matcher patternMatcher = formatPattern.matcher(pattern);\n+    int lastEnd = 0;\n+    while (patternMatcher.find()) {\n+        if (lastEnd != patternMatcher.start()) {\n+            regex.append(Pattern.quote(pattern.substring(lastEnd, patternMatcher.start())));\n         }\n \n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n-            }\n-            String nextFormatField= patternMatcher.group();\n-            nextStrategy = getStrategy(nextFormatField);\n-            if(currentStrategy.addRegex(this, regex)) {\n-                collector.add(currentStrategy);\n-            }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n-        }\n-        if(currentStrategy.addRegex(this, regex)) {\n+        String currentFormatField = patternMatcher.group();\n+        Strategy currentStrategy = getStrategy(currentFormatField);\n+        if (currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n+\n+        lastEnd = patternMatcher.end();\n     }\n \n+    if (lastEnd != pattern.length()) {\n+        regex.append(Pattern.quote(pattern.substring(lastEnd)));\n+    }\n+\n+    if (regex.length() == 0) {\n+        // This means the pattern consists only of static text\n+        regex.append(\".*\");\n+    }\n+\n+    strategies = collector.toArray(new Strategy[0]);\n+    parsePattern = Pattern.compile(\"(\" + regex + \")\");\n+}\n+\n     // Accessors\n     //-----------------------------------------------------------------------\n     /* (non-Javadoc)",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}