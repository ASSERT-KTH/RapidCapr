{
    "patch": "private void defineSlot(Node nameNode, Node scopeRoot, JSTypeDeclaration decl, boolean isMutable) {\n  Var declaredVar = scope.getOwnSlot(nameNode.getString());\n  if (declaredVar != null && declaredVar.isVar() && !declaredVar.isLet() && !declaredVar.isConst()) {\n    JSError error = JSError.make(\n        DUPLICATE_VARIABLE_DECLARATION,\n        nameNode,\n        declaredVar.getNode().getSourceFileName(),\n        declaredVar.getNode().getLineno(),\n        declaredVar.getName());\n    compiler.report(error);\n    return;\n  }\n  // the rest of the method implementation\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..4e11e260 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1742,7 +1742,20 @@ final class TypedScopeCreator implements ScopeCreator {\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n               defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n+private void defineSlot(Node nameNode, Node scopeRoot, JSTypeDeclaration decl, boolean isMutable) {\n+  Var declaredVar = scope.getOwnSlot(nameNode.getString());\n+  if (declaredVar != null && declaredVar.isVar() && !declaredVar.isLet() && !declaredVar.isConst()) {\n+    JSError error = JSError.make(\n+        DUPLICATE_VARIABLE_DECLARATION,\n+        nameNode,\n+        declaredVar.getNode().getSourceFileName(),\n+        declaredVar.getNode().getLineno(),\n+        declaredVar.getName());\n+    compiler.report(error);\n+    return;\n+  }\n+  // the rest of the method implementation\n+}\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}