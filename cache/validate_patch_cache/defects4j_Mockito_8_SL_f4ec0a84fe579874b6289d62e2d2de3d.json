{
    "patch": "    private Type resolveTypeVariable(TypeVariable typeVariable, Map<TypeVariable, Type> context) {\n        Type resolvedType = context.get(typeVariable);\n        if (resolvedType == null) {\n            resolvedType = typeVariable;\n        }\n        if (resolvedType instanceof TypeVariable) {\n            resolvedType = resolveTypeVariable((TypeVariable) resolvedType, context);\n        }\n        return resolvedType;\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..c396ffe3c 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,16 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+    private Type resolveTypeVariable(TypeVariable typeVariable, Map<TypeVariable, Type> context) {\n+        Type resolvedType = context.get(typeVariable);\n+        if (resolvedType == null) {\n+            resolvedType = typeVariable;\n+        }\n+        if (resolvedType instanceof TypeVariable) {\n+            resolvedType = resolveTypeVariable((TypeVariable) resolvedType, context);\n+        }\n+        return resolvedType;\n+    }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}