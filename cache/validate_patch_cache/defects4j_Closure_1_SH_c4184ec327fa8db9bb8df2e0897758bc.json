{
    "patch": "// Remove the parameters that are not referenced\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      int argCount = argList.getChildCount();\n      Set<String> referencedParams = new HashSet<>();\n\n      // Collect the names of parameters that are actually referenced\n      NodeTraversal.traverse(compiler, function, new NodeTraversal.Callback() {\n        @Override\n        public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n          if (n.isParamList()) {\n            return true;\n          } else if (NodeUtil.isNameDeclaration(n, parent)) {\n            Var var = fnScope.getVar(n.getString());\n            referencedParams.add(var.getName());\n          }\n          return true;\n        }\n\n        @Override\n        public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n        }\n      });\n\n      // Remove the unused parameters\n      List<Node> unusedParams = new ArrayList<>();\n      for (int i = 0; i < argCount; i++) {\n        Node arg = argList.getChildAtIndex(i);\n        String argName = arg.getString();\n        if (!referencedParams.contains(argName)) {\n          unusedParams.add(arg);\n        } else if (!unusedParams.isEmpty()) {\n          // Move the unused parameters to the end of the parameter list\n          for (Node unusedParam : unusedParams) {\n            argList.removeChild(unusedParam);\n            argList.addChildToBack(unusedParam);\n          }\n          unusedParams.clear();\n        }\n      }\n      // Remove the unused parameters at the end of the list\n      for (Node unusedParam : unusedParams) {\n        argList.removeChild(unusedParam);\n      }\n      compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..98ebf3b6 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,61 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Remove the parameters that are not referenced\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      int argCount = argList.getChildCount();\n+      Set<String> referencedParams = new HashSet<>();\n+\n+      // Collect the names of parameters that are actually referenced\n+      NodeTraversal.traverse(compiler, function, new NodeTraversal.Callback() {\n+        @Override\n+        public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+          if (n.isParamList()) {\n+            return true;\n+          } else if (NodeUtil.isNameDeclaration(n, parent)) {\n+            Var var = fnScope.getVar(n.getString());\n+            referencedParams.add(var.getName());\n+          }\n+          return true;\n+        }\n+\n+        @Override\n+        public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n+        }\n+      });\n+\n+      // Remove the unused parameters\n+      List<Node> unusedParams = new ArrayList<>();\n+      for (int i = 0; i < argCount; i++) {\n+        Node arg = argList.getChildAtIndex(i);\n+        String argName = arg.getString();\n+        if (!referencedParams.contains(argName)) {\n+          unusedParams.add(arg);\n+        } else if (!unusedParams.isEmpty()) {\n+          // Move the unused parameters to the end of the parameter list\n+          for (Node unusedParam : unusedParams) {\n+            argList.removeChild(unusedParam);\n+            argList.addChildToBack(unusedParam);\n+          }\n+          unusedParams.clear();\n+        }\n+      }\n+      // Remove the unused parameters at the end of the list\n+      for (Node unusedParam : unusedParams) {\n+        argList.removeChild(unusedParam);\n+      }\n+      compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}