{
    "patch": "  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n    // We need to check if the property is a global.\n    Node propNode = node.getLastChild();\n    if (propNode.isString()) {\n      Var var = getScope().getVar(propNode.getString());\n      if (var != null && var.isGlobal()) {\n        return true;\n      }\n    }\n    // Otherwise, we need to make sure the name is not assigned to the replacement.\n    node = node.getFirstChild(); // the GETPROP's object node\n    if (node.isName() && isNameAssignedTo(node.getString(), replacement)) {\n      return false;\n    }\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..6e7163ca 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -209,13 +209,19 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n       return true;\n     }\n     Preconditions.checkArgument(node.isGetProp());\n-\n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n+    // We need to check if the property is a global.\n+    Node propNode = node.getLastChild();\n+    if (propNode.isString()) {\n+      Var var = getScope().getVar(propNode.getString());\n+      if (var != null && var.isGlobal()) {\n+        return true;\n+      }\n+    }\n+    // Otherwise, we need to make sure the name is not assigned to the replacement.\n+    node = node.getFirstChild(); // the GETPROP's object node\n+    if (node.isName() && isNameAssignedTo(node.getString(), replacement)) {\n       return false;\n     }\n-\n     return true;\n   }\n \n@@ -241,4 +247,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}