{
    "patch": "    List<Node> referencedParams = Lists.newLinkedList();\n    List<Var> referenced = findReferencedVars(fnScope, referencedParams);\n\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(NodeUtil.isFunction(function));\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = NodeUtil.getFunctionParameters(function);\n\n    if (modifyCallSites\n        && callSiteOptimizer != null\n        && callSiteOptimizer.canModifyCallers(function)) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    } else {\n      // Strip unreferenced args off the end of the function declaration.\n      if (NodeUtil.isFunctionExpression(function)) {\n        Node innerFunction = NodeUtil.getFunctionBody(function).getFirstChild();\n        if (innerFunction != null && NodeUtil.isFunction(innerFunction)) {\n          Node innerArgList = NodeUtil.getFunctionParameters(innerFunction);\n          for (int i = 0; i < innerArgList.getChildCount(); i++) {\n            if (referencedParams.size() > i && referenced.contains(referencedParams.get(i))) {\n              Var var = fnScope.getVar(innerArgList.getChildAtIndex(i).getString());\n              if (!referenced.contains(var)) {\n                referenced.add(var);\n              }\n            }\n          }\n        }\n      }\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n          lastArg = argList.getLastChild();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ac96ed1c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,46 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<Node> referencedParams = Lists.newLinkedList();\n+    List<Var> referenced = findReferencedVars(fnScope, referencedParams);\n \n     Node function = fnScope.getRootNode();\n+    Preconditions.checkState(NodeUtil.isFunction(function));\n \n-    Preconditions.checkState(function.isFunction());\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n       // The parameters object literal setters can not be removed.\n       return;\n     }\n \n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n+    Node argList = NodeUtil.getFunctionParameters(function);\n+\n+    if (modifyCallSites\n+        && callSiteOptimizer != null\n+        && callSiteOptimizer.canModifyCallers(function)) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    } else {\n       // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n+      if (NodeUtil.isFunctionExpression(function)) {\n+        Node innerFunction = NodeUtil.getFunctionBody(function).getFirstChild();\n+        if (innerFunction != null && NodeUtil.isFunction(innerFunction)) {\n+          Node innerArgList = NodeUtil.getFunctionParameters(innerFunction);\n+          for (int i = 0; i < innerArgList.getChildCount(); i++) {\n+            if (referencedParams.size() > i && referenced.contains(referencedParams.get(i))) {\n+              Var var = fnScope.getVar(innerArgList.getChildAtIndex(i).getString());\n+              if (!referenced.contains(var)) {\n+                referenced.add(var);\n+              }\n+            }\n+          }\n+        }\n+      }\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n         Var var = fnScope.getVar(lastArg.getString());\n         if (!referenced.contains(var)) {\n           argList.removeChild(lastArg);\n           compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n-    }\n-  }\n+          lastArg = argList.getLastChild();\n \n \n   /**",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}