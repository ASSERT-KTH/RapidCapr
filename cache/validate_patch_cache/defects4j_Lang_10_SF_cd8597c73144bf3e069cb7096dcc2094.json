{
    "patch": "    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n        boolean wasWhite= false;\n        for(int i= 0; i<value.length(); ++i) {\n            char c= value.charAt(i);\n            if(Character.isWhitespace(c)) {\n                if(!wasWhite) {\n                    wasWhite= true;\n                    regex.append(\"\\\\s*+\");\n                }\n                continue;\n            }\n            wasWhite= false;\n            switch(c) {\n                case '\\'':\n                    if(unquote) {\n                        if(++i == value.length()) {\n                            return regex;\n                        }\n                        c = value.charAt(i);\n                    }\n                    break;\n                case 'G':\n                    regex.append(\"\\\\G\");\n                    break;\n                case 'y':\n                    regex.append(\"\\\\d{1,4}\");\n                    break;\n                case 'Y':\n                    regex.append(\"\\\\p{Nd}{1,}\");\n                    break;\n                case 'M':\n                    regex.append(\"\\\\p{L}+?\");\n                    break;\n                case 'w':\n                    regex.append(\"\\\\d{1,2}\");\n                    break;\n                case 'W':\n                    regex.append(\"\\\\d{1,2}\");\n                    break;\n                case 'D':\n                case 'd':\n                    regex.append(\"\\\\d{1,2}\");\n                    break;\n                case 'F':\n                case 'E':\n                    regex.append(\"\\\\p{L}+?\");\n                    break;\n                case 'u':\n                    regex.append(\"\\\\p{Nd}{1}\");\n                    break;\n                case 'a':\n                    regex.append(\"((?:AM)|(?:PM))\");\n                    break;\n                case 'H':\n                case 'k':\n                    regex.append(\"\\\\d{1,2}\");\n                    break;\n                case 'h':\n                case 'K':\n                    regex.append(\"\\\\d{1,2}\");\n                    break;\n                case 'm':\n                    regex.append(\"\\\\d{1,2}\");\n                    break;\n                case 's':\n                    regex.append(\"\\\\d{1,2}\");\n                    break;\n                case 'S':\n                case 'A':\n                case 'z':\n                case 'Z':\n                    regex.append(\"\\\\S*?\");\n                    break;\n                case 'X':\n                    regex.append(\"[+-]\\\\d{4}\");\n                    break;\n                default:\n                    regex.append(\"\\\\Q\").append(c).append(\"\\\\E\");\n                    break;\n            }\n        }\n        return regex;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..80de3082 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -313,31 +313,73 @@ public class FastDateParser implements DateParser, Serializable {\n             }\n             wasWhite= false;\n             switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+                case '\\'':\n+                    if(unquote) {\n+                        if(++i == value.length()) {\n+                            return regex;\n+                        }\n+                        c = value.charAt(i);\n                     }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+                    break;\n+                case 'G':\n+                    regex.append(\"\\\\G\");\n+                    break;\n+                case 'y':\n+                    regex.append(\"\\\\d{1,4}\");\n+                    break;\n+                case 'Y':\n+                    regex.append(\"\\\\p{Nd}{1,}\");\n+                    break;\n+                case 'M':\n+                    regex.append(\"\\\\p{L}+?\");\n+                    break;\n+                case 'w':\n+                    regex.append(\"\\\\d{1,2}\");\n+                    break;\n+                case 'W':\n+                    regex.append(\"\\\\d{1,2}\");\n+                    break;\n+                case 'D':\n+                case 'd':\n+                    regex.append(\"\\\\d{1,2}\");\n+                    break;\n+                case 'F':\n+                case 'E':\n+                    regex.append(\"\\\\p{L}+?\");\n+                    break;\n+                case 'u':\n+                    regex.append(\"\\\\p{Nd}{1}\");\n+                    break;\n+                case 'a':\n+                    regex.append(\"((?:AM)|(?:PM))\");\n+                    break;\n+                case 'H':\n+                case 'k':\n+                    regex.append(\"\\\\d{1,2}\");\n+                    break;\n+                case 'h':\n+                case 'K':\n+                    regex.append(\"\\\\d{1,2}\");\n+                    break;\n+                case 'm':\n+                    regex.append(\"\\\\d{1,2}\");\n+                    break;\n+                case 's':\n+                    regex.append(\"\\\\d{1,2}\");\n+                    break;\n+                case 'S':\n+                case 'A':\n+                case 'z':\n+                case 'Z':\n+                    regex.append(\"\\\\S*?\");\n+                    break;\n+                case 'X':\n+                    regex.append(\"[+-]\\\\d{4}\");\n+                    break;\n+                default:\n+                    regex.append(\"\\\\Q\").append(c).append(\"\\\\E\");\n+                    break;\n             }\n-            regex.append(c);\n         }\n         return regex;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Locale failed with GGGG/yyyy/MMMM/dddd/hhhh/aaaa/EEEE/ZZZZ era BC",
    "test_result": "FAIL"
}