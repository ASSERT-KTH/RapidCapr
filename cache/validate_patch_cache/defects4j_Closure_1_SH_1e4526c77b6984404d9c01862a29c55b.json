{
    "patch": "    // Compute the number of unused parameters using the referenced list\n    int unusedParamsCount = 0;\n    Node currentParam = argList.getFirstChild();\n    for (int i = 0; i < argList.getChildCount() && !referenced.isEmpty(); i++) {\n      Var var = fnScope.getVar(currentParam.getString());\n      if (!referenced.contains(var)) {\n        unusedParamsCount++;\n      } else {\n        referenced.remove(var);\n      }\n      currentParam = currentParam.getNext();\n    }\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (unusedParamsCount > 0) {\n          argList.removeChild(lastArg);\n          unusedParamsCount--;\n          compiler.reportCodeChange();\n        } else if (!referenced.contains(var)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a97beea3 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,28 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Compute the number of unused parameters using the referenced list\n+    int unusedParamsCount = 0;\n+    Node currentParam = argList.getFirstChild();\n+    for (int i = 0; i < argList.getChildCount() && !referenced.isEmpty(); i++) {\n+      Var var = fnScope.getVar(currentParam.getString());\n+      if (!referenced.contains(var)) {\n+        unusedParamsCount++;\n+      } else {\n+        referenced.remove(var);\n+      }\n+      currentParam = currentParam.getNext();\n+    }\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (unusedParamsCount > 0) {\n+          argList.removeChild(lastArg);\n+          unusedParamsCount--;\n+          compiler.reportCodeChange();\n+        } else if (!referenced.contains(var)) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}