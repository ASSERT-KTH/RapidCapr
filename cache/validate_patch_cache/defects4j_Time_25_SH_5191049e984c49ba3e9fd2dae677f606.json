{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantAdjusted - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    // try moving slowly forward\n                    long prevAdjusted = previousTransition(instantAdjusted - offsetAdjusted);\n                    if (prevAdjusted < instantAdjusted - offsetAdjusted) {\n                        int offsetPrev = getOffset(prevAdjusted);\n                        if (offsetPrev > offsetLocal) {\n                            return offsetPrev;\n                        }\n                    }\n                    return offsetLocal;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0d5395e1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantAdjusted - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    // try moving slowly forward\n+                    long prevAdjusted = previousTransition(instantAdjusted - offsetAdjusted);\n+                    if (prevAdjusted < instantAdjusted - offsetAdjusted) {\n+                        int offsetPrev = getOffset(prevAdjusted);\n+                        if (offsetPrev > offsetLocal) {\n+                            return offsetPrev;\n+                        }\n+                    }\n+                    return offsetLocal;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}