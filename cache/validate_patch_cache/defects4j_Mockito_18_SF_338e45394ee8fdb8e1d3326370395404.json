{
    "patch": "public static ReturnValueWithException<Iterable<Integer>, Exception> valuesSmallerThanThreshold(int[] input, int threshold) {\n    List<Integer> outputList = new ArrayList<Integer>();\n    for (int value : input) {\n        if (value < threshold) {\n            outputList.add(value);\n        }\n    }\n    return ReturnValueWithException.create(new Iterable<Integer>() {\n        @Override\n        public Iterator<Integer> iterator() {\n            return outputList.iterator();\n        }\n    });\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..7254dcf23 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,20 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static ReturnValueWithException<Iterable<Integer>, Exception> valuesSmallerThanThreshold(int[] input, int threshold) {\n+    List<Integer> outputList = new ArrayList<Integer>();\n+    for (int value : input) {\n+        if (value < threshold) {\n+            outputList.add(value);\n+        }\n+    }\n+    return ReturnValueWithException.create(new Iterable<Integer>() {\n+        @Override\n+        public Iterator<Integer> iterator() {\n+            return outputList.iterator();\n+        }\n+    });\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}