{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n  // Invariant: All the names in the worklist meet condition (a).\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    \n    if (name.type == Name.Type.EXPORT) {\n      continue;\n    }\n  \n    // Don't attempt to inline a getter or setter property as a variable.\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n  \n    if (name.aliasingGets > 0) {\n      List<Ref> refs = Lists.newArrayList(name.getRefs());\n      for (Ref ref : refs) {\n        if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n          if (inlineAliasIfPossible(ref, namespace)) {\n            name.removeRef(ref);\n          }\n        }\n      }\n    }\n  \n    if ((name.globalSets == 1 || name.aliasingGets > 0) && name.localSets == 0 && name.getDeclaration() != null) {\n      Ref decl = name.getDeclaration();\n      Node declNode = decl.getNode();\n      JSDocInfo info = NodeUtil.getJSDocInfo(declNode);\n  \n      if (info != null && info.isConstant()) {\n        Node rhsNode = NodeUtil.getRValueOfLValue(declNode);\n        if (rhsNode == null || rhsNode.isFunction()) {\n          continue;\n        }\n        if (rhsNode.isQualifiedName()) {\n          boolean isAlias = false;\n          for (Ref nref : namespace.getNameRefs(rhsNode.getQualifiedName())) {\n            Name nrefName = nref.getName();\n            if (nrefName != name && (nrefName.globalSets > 1 || nrefName.localSets > 0)) {\n              isAlias = true;\n              break;\n            }\n          }\n          if (isAlias) {\n            continue;\n          }\n        }\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if ((ref.type == Ref.Type.SET_FROM_GLOBAL || ref.type == Ref.Type.DECLARATION) &&\n              ref.scope.isLocal()) {\n            Node lValue = ref.getNode();\n            Node rValue = lValue.getNext();\n            Preconditions.checkState(rValue != null);\n            // Only inline the expression if the l-value and r-value are simple\n            // enough.\n            if (NodeUtil.isSimpleAssign(lValue.getParent()) &&\n                NodeUtil.isSimpleName(lValue)) {\n              Node newNode = rhsNode.cloneTree();\n              newNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n              newNode.setJSDocInfo(info);\n              // Ensure that the new node has the same type as the old one.\n              newNode.srcrefTree(lValue);\n  \n              NodeUtil.copyNameAnnotations(lValue, newNode);\n              Node parent = lValue.getParent();\n              parent.replaceChild(lValue, newNode);\n              compiler.reportChangeToEnclosingScope(parent);\n            }\n          }\n        }\n      }\n    }\n  \n    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n        name.aliasingGets == 0 && name.props != null) {\n      workList.addAll(name.props);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..c4f2a9fb 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,88 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n-    while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n+private void inlineAliases(GlobalNamespace namespace) {\n+  // Invariant: All the names in the worklist meet condition (a).\n+  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+  while (!workList.isEmpty()) {\n+    Name name = workList.pop();\n+    \n+    if (name.type == Name.Type.EXPORT) {\n+      continue;\n+    }\n+  \n+    // Don't attempt to inline a getter or setter property as a variable.\n+    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+      continue;\n+    }\n+  \n+    if (name.aliasingGets > 0) {\n+      List<Ref> refs = Lists.newArrayList(name.getRefs());\n+      for (Ref ref : refs) {\n+        if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n+          if (inlineAliasIfPossible(ref, namespace)) {\n+            name.removeRef(ref);\n+          }\n+        }\n       }\n-\n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n+    }\n+  \n+    if ((name.globalSets == 1 || name.aliasingGets > 0) && name.localSets == 0 && name.getDeclaration() != null) {\n+      Ref decl = name.getDeclaration();\n+      Node declNode = decl.getNode();\n+      JSDocInfo info = NodeUtil.getJSDocInfo(declNode);\n+  \n+      if (info != null && info.isConstant()) {\n+        Node rhsNode = NodeUtil.getRValueOfLValue(declNode);\n+        if (rhsNode == null || rhsNode.isFunction()) {\n+          continue;\n+        }\n+        if (rhsNode.isQualifiedName()) {\n+          boolean isAlias = false;\n+          for (Ref nref : namespace.getNameRefs(rhsNode.getQualifiedName())) {\n+            Name nrefName = nref.getName();\n+            if (nrefName != name && (nrefName.globalSets > 1 || nrefName.localSets > 0)) {\n+              isAlias = true;\n+              break;\n+            }\n+          }\n+          if (isAlias) {\n+            continue;\n+          }\n+        }\n         List<Ref> refs = Lists.newArrayList(name.getRefs());\n         for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+          if ((ref.type == Ref.Type.SET_FROM_GLOBAL || ref.type == Ref.Type.DECLARATION) &&\n+              ref.scope.isLocal()) {\n+            Node lValue = ref.getNode();\n+            Node rValue = lValue.getNext();\n+            Preconditions.checkState(rValue != null);\n+            // Only inline the expression if the l-value and r-value are simple\n+            // enough.\n+            if (NodeUtil.isSimpleAssign(lValue.getParent()) &&\n+                NodeUtil.isSimpleName(lValue)) {\n+              Node newNode = rhsNode.cloneTree();\n+              newNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n+              newNode.setJSDocInfo(info);\n+              // Ensure that the new node has the same type as the old one.\n+              newNode.srcrefTree(lValue);\n+  \n+              NodeUtil.copyNameAnnotations(lValue, newNode);\n+              Node parent = lValue.getParent();\n+              parent.replaceChild(lValue, newNode);\n+              compiler.reportChangeToEnclosingScope(parent);\n             }\n           }\n         }\n       }\n-\n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n+    }\n+  \n+    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n+        name.aliasingGets == 0 && name.props != null) {\n+      workList.addAll(name.props);\n     }\n   }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}