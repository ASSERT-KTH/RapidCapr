{
    "patch": "      boolean unnamed = name == null;\n      Node node = newNode(Token.FUNCTION);\n      Node newName;\n\n      if (unnamed) {\n        newName = newNode(Token.NAME, \"\");\n      } else {\n        newName = transform(name);\n      }\n\n      node.addChildToBack(newName);\n      Node params = newNode(Token.PARAM_LIST);\n      for (AstNode param : functionNode.getParams()) {\n        params.addChildToBack(transform(param));\n      }\n      node.addChildToBack(params);\n      node.addChildToBack(transform(functionNode.getBody()));\n      return node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..ece52114 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,24 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      boolean unnamed = name == null;\n+      Node node = newNode(Token.FUNCTION);\n+      Node newName;\n+\n+      if (unnamed) {\n+        newName = newNode(Token.NAME, \"\");\n+      } else {\n+        newName = transform(name);\n+      }\n+\n+      node.addChildToBack(newName);\n+      Node params = newNode(Token.PARAM_LIST);\n+      for (AstNode param : functionNode.getParams()) {\n+        params.addChildToBack(transform(param));\n+      }\n+      node.addChildToBack(params);\n+      node.addChildToBack(transform(functionNode.getBody()));\n+      return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: no suitable method found for newNode(int,String)",
    "test_result": "ERROR"
}