{
    "patch": "public Class<?> getGenericType(Field field) {\n    Type fieldType = field.getGenericType();\n    if (fieldType instanceof ParameterizedType) {\n        Type[] actualTypeArguments = ((ParameterizedType) fieldType).getActualTypeArguments();\n        if (actualTypeArguments.length != 0) {\n            Type rawType = actualTypeArguments[0];\n            while (rawType instanceof ParameterizedType) {\n                rawType = ((ParameterizedType) rawType).getRawType();\n            }\n            if (rawType instanceof Class) {\n                return (Class<?>) rawType;\n            }\n        }\n    }\n    return Object.class;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..562c3f77b 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,20 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+public Class<?> getGenericType(Field field) {\n+    Type fieldType = field.getGenericType();\n+    if (fieldType instanceof ParameterizedType) {\n+        Type[] actualTypeArguments = ((ParameterizedType) fieldType).getActualTypeArguments();\n+        if (actualTypeArguments.length != 0) {\n+            Type rawType = actualTypeArguments[0];\n+            while (rawType instanceof ParameterizedType) {\n+                rawType = ((ParameterizedType) rawType).getRawType();\n+            }\n+            if (rawType instanceof Class) {\n+                return (Class<?>) rawType;\n+            }\n+        }\n+    }\n+    return Object.class;\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}