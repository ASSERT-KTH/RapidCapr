{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node function = fnScope.getRootNode();\n\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n  // If unused parameters are removed, then we also need to update\n  // any callers of the function to remove the excess arguments.\n  if (modifyCallers) {\n    callSiteOptimizer.optimize(fnScope, referenced);\n    return;\n  }\n\n  // Scan from the end of the list, removing unused parameters.\n  for (int i = argList.getChildCount() - 1; i >= 0; i--) {\n    Node arg = argList.getChildAtIndex(i);\n    Var var = fnScope.getVar(arg.getString());\n\n    if (var != null && referenced.contains(var)) {\n      // This parameter is referenced, so we're done.\n      return;\n    }\n\n    // This parameter is unreferenced, so we can remove it from the list.\n    arg.detach();\n    compiler.reportCodeChange();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d4ec97ef 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,40 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  Node function = fnScope.getRootNode();\n+\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+  // If unused parameters are removed, then we also need to update\n+  // any callers of the function to remove the excess arguments.\n+  if (modifyCallers) {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+    return;\n+  }\n+\n+  // Scan from the end of the list, removing unused parameters.\n+  for (int i = argList.getChildCount() - 1; i >= 0; i--) {\n+    Node arg = argList.getChildAtIndex(i);\n+    Var var = fnScope.getVar(arg.getString());\n+\n+    if (var != null && referenced.contains(var)) {\n+      // This parameter is referenced, so we're done.\n       return;\n     }\n \n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n-    }\n+    // This parameter is unreferenced, so we can remove it from the list.\n+    arg.detach();\n+    compiler.reportCodeChange();\n   }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}