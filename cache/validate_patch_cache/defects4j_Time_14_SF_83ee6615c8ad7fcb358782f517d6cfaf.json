{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    long instant = 0L;\n    for (int i = 0; i < partial.size(); i++) {\n        instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n    }\n\n    int[] newValues = iChronology.add(partial, fieldIndex, values, valueToAdd);\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        // Check if month and day have changed, and if so, adjust day value\n        int curMonth = iChronology.monthOfYear().get(instant);\n        int curDay = iChronology.dayOfMonth().get(instant);\n        int newMonth = newValues[fieldIndex - 1];\n        int newDay = newValues[fieldIndex];\n        if (curMonth != newMonth || curDay != newDay) {\n            newDay = Math.min(newDay, iChronology.dayOfMonth().getMaximumValue(instant.withMonthOfYear(newMonth)));\n            instant = iChronology.dayOfMonth().set(instant.withMonthOfYear(newMonth), newDay);\n            newValues = iChronology.get(partial, instant);\n        }\n    }\n\n    return newValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..eba70c84 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,34 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    long instant = 0L;\n+    for (int i = 0; i < partial.size(); i++) {\n+        instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+    }\n+\n+    int[] newValues = iChronology.add(partial, fieldIndex, values, valueToAdd);\n+\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        // Check if month and day have changed, and if so, adjust day value\n+        int curMonth = iChronology.monthOfYear().get(instant);\n+        int curDay = iChronology.dayOfMonth().get(instant);\n+        int newMonth = newValues[fieldIndex - 1];\n+        int newDay = newValues[fieldIndex];\n+        if (curMonth != newMonth || curDay != newDay) {\n+            newDay = Math.min(newDay, iChronology.dayOfMonth().getMaximumValue(instant.withMonthOfYear(newMonth)));\n+            instant = iChronology.dayOfMonth().set(instant.withMonthOfYear(newMonth), newDay);\n+            newValues = iChronology.get(partial, instant);\n         }\n     }\n \n+    return newValues;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: no suitable method found for add(ReadablePartial,int,int[],int)",
    "test_result": "ERROR"
}