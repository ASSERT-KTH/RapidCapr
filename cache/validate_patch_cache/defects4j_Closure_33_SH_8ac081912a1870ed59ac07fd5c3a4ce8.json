{
    "patch": "// Do nothing if the constraint object is not anonymous.\nif (constraintObj.isNominalType() || constraintObj.isFunctionPrototypeType()) {\n    return;\n}\n\n// Handle the case where the constraint object is a record type.\n//\n// param constraintObj {{prop: (number|undefined)}}\n// function f(constraintObj) {}\n// f({});\n//\n// We want to modify the object literal to match the constraint, by\n// taking each property on the record and trying to match properties on this object.\nif (constraintObj.isRecordType()) {\n    if (this.isTemplateType()) {\n        ObjectType thisTemplate = this.getTypeOfThisWithTemplate();\n        if (thisTemplate.isTemplateType()) {\n            thisTemplate.matchConstraint(constraintObj);\n        }\n    }\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        if (prop.startsWith(\"[\") && prop.endsWith(\"]\")) {\n            int endIndex = prop.lastIndexOf(\"[\");\n            if (endIndex != -1) {\n                String slice = prop.substring(0, endIndex);\n                if (!this.isDeclared(slice, false)) {\n                    this.defineInferredProperty(slice, getNativeArrayType();\n                }\n            }\n        }\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..408e2aff 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,46 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+// Do nothing if the constraint object is not anonymous.\n+if (constraintObj.isNominalType() || constraintObj.isFunctionPrototypeType()) {\n+    return;\n+}\n+\n+// Handle the case where the constraint object is a record type.\n+//\n+// param constraintObj {{prop: (number|undefined)}}\n+// function f(constraintObj) {}\n+// f({});\n+//\n+// We want to modify the object literal to match the constraint, by\n+// taking each property on the record and trying to match properties on this object.\n+if (constraintObj.isRecordType()) {\n+    if (this.isTemplateType()) {\n+        ObjectType thisTemplate = this.getTypeOfThisWithTemplate();\n+        if (thisTemplate.isTemplateType()) {\n+            thisTemplate.matchConstraint(constraintObj);\n+        }\n+    }\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+        if (prop.startsWith(\"[\") && prop.endsWith(\"]\")) {\n+            int endIndex = prop.lastIndexOf(\"[\");\n+            if (endIndex != -1) {\n+                String slice = prop.substring(0, endIndex);\n+                if (!this.isDeclared(slice, false)) {\n+                    this.defineInferredProperty(slice, getNativeArrayType();\n+                }\n+            }\n+        }\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        if (!isPropertyTypeDeclared(prop)) {\n+            JSType typeToInfer = propType;\n+            if (!hasProperty(prop)) {\n+                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n+            }\n+            defineInferredProperty(prop, typeToInfer, null);\n+        }\n+    }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}