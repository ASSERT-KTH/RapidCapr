{
    "patch": "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The calendars must not be null\");\n    }\n    if (cal1.getTimeInMillis() == cal2.getTimeInMillis()) {\n        return true;\n    }\n    boolean sameYear = cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR);\n    boolean sameDayOfYear = cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR);\n    boolean sameEra = cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA);\n    boolean sameHourOfDay = cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY);\n    boolean sameMinute = cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE);\n    boolean sameSecond = cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND);\n    boolean sameMillisecond = cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND);\n    boolean sameClass = cal1.getClass() == cal2.getClass();\n    return sameYear && sameDayOfYear && sameEra && sameHourOfDay && sameMinute && sameSecond &&\n            sameMillisecond && sameClass;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/DateUtils.java b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\nindex 9a24c00f..f2ab419d 100644\n--- a/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n@@ -255,19 +255,24 @@ public class DateUtils {\n      * @throws IllegalArgumentException if either date is <code>null</code>\n      * @since 2.1\n      */\n-    public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n-        if (cal1 == null || cal2 == null) {\n-            throw new IllegalArgumentException(\"The date must not be null\");\n-        }\n-        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n-                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n-                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n-                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n-                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n-                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n-                cal1.getClass() == cal2.getClass());\n+public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n+    if (cal1 == null || cal2 == null) {\n+        throw new IllegalArgumentException(\"The calendars must not be null\");\n+    }\n+    if (cal1.getTimeInMillis() == cal2.getTimeInMillis()) {\n+        return true;\n     }\n+    boolean sameYear = cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR);\n+    boolean sameDayOfYear = cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR);\n+    boolean sameEra = cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA);\n+    boolean sameHourOfDay = cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY);\n+    boolean sameMinute = cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE);\n+    boolean sameSecond = cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND);\n+    boolean sameMillisecond = cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND);\n+    boolean sameClass = cal1.getClass() == cal2.getClass();\n+    return sameYear && sameDayOfYear && sameEra && sameHourOfDay && sameMinute && sameSecond &&\n+            sameMillisecond && sameClass;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}