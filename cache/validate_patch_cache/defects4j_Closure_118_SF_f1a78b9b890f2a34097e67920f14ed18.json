{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        String name = \"\";\n        if (child.isGetProp()) {\n          Node propNameNode = child.getLastChild();\n          if (propNameNode.isString()) {\n            name = propNameNode.getString();\n          } else {\n            name = propNameNode.toString(false, true);\n          }\n        } else {\n          name = child.getString();\n        }\n\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..cc1a5dc0 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -488,20 +488,23 @@ class DisambiguateProperties<T> implements CompilerPass {\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        String name = \"\";\n+        if (child.isGetProp()) {\n+          Node propNameNode = child.getLastChild();\n+          if (propNameNode.isString()) {\n+            name = propNameNode.getString();\n+          } else {\n+            name = propNameNode.toString(false, true);\n+          }\n+        } else {\n+          name = child.getString();\n+        }\n \n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n         T type = typeSystem.getType(getScope(), n, name);\n \n         Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n+        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n           if (propertiesToErrorFor.containsKey(name)) {\n             compiler.report(JSError.make(\n                 t.getSourceName(), child, propertiesToErrorFor.get(name),",
    "result_reason": "error: no suitable method found for toString(boolean,boolean)",
    "test_result": "ERROR"
}