{
    "patch": "public static String unescape(final String string) {\n    final StringBuilder sb = new StringBuilder(string.length());\n    final int length = string.length();\n    for (int i = 0; i < length; i++) {\n        final char c = string.charAt(i);\n        if(c == '\\\\') {\n            if (i + 4 < length && string.charAt(i + 1) == 'u' && isHexDigit(string.charAt(i + 2))\n                    && isHexDigit(string.charAt(i + 3)) && isHexDigit(string.charAt(i + 4))) {\n                sb.append((char) Integer.parseInt(string.substring(i + 1, i + 5), 16));\n                i += 4;\n            } else if (i + 2 < length && Character.isDigit(string.charAt(i + 1)) && Character.isDigit(string.charAt(i + 2))) {\n                final char octal = (char) ((string.charAt(i + 1) - '0') * 8 + string.charAt(i + 2) - '0');\n                sb.append(octal);\n                i += 2;\n            } else if (i + 1 < length) {\n                i++;\n                final char unescaped = unescapeMap.get(string.charAt(i));\n                sb.append(unescaped);\n            }\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n\nprivate static boolean isHexDigit(char c) {\n    if (c >= '0' && c <= '9') {\n        return true;\n    }\n    if (c >= 'a' && c <= 'f') {\n        return true;\n    }\n    if (c >= 'A' && c <= 'F') {\n        return true;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..be0fcbb4 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,44 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(final String string) {\n+    final StringBuilder sb = new StringBuilder(string.length());\n+    final int length = string.length();\n+    for (int i = 0; i < length; i++) {\n+        final char c = string.charAt(i);\n+        if(c == '\\\\') {\n+            if (i + 4 < length && string.charAt(i + 1) == 'u' && isHexDigit(string.charAt(i + 2))\n+                    && isHexDigit(string.charAt(i + 3)) && isHexDigit(string.charAt(i + 4))) {\n+                sb.append((char) Integer.parseInt(string.substring(i + 1, i + 5), 16));\n+                i += 4;\n+            } else if (i + 2 < length && Character.isDigit(string.charAt(i + 1)) && Character.isDigit(string.charAt(i + 2))) {\n+                final char octal = (char) ((string.charAt(i + 1) - '0') * 8 + string.charAt(i + 2) - '0');\n+                sb.append(octal);\n+                i += 2;\n+            } else if (i + 1 < length) {\n+                i++;\n+                final char unescaped = unescapeMap.get(string.charAt(i));\n+                sb.append(unescaped);\n+            }\n+        } else {\n+            sb.append(c);\n+        }\n+    }\n+    return sb.toString();\n+}\n+\n+private static boolean isHexDigit(char c) {\n+    if (c >= '0' && c <= '9') {\n+        return true;\n+    }\n+    if (c >= 'a' && c <= 'f') {\n+        return true;\n+    }\n+    if (c >= 'A' && c <= 'F') {\n+        return true;\n+    }\n+    return false;\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}