{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // if we have a local time on a transition, compute the correct offset to use (moving forward)\n    if (offsetLocal == getOffset(instantAdjusted - 1) && offsetAdjusted == getOffset(instantLocal + 1)) {\n        long prev = previousTransition(instantAdjusted);\n        long next = nextTransition(instantAdjusted);\n        if (next == prev) { // there is no next transition\n            return offsetLocal;\n        } else if (next == instantLocal + 1 && prev < instantAdjusted - 1) {\n            return getOffset(prev + 1);\n        } else if (prev == instantAdjusted - 1 && next > instantLocal + 1) {\n            return getOffset(next - 1);\n        }\n    }\n    // handle negative offsets\n    if (offsetLocal < 0) {\n        long prev = previousTransition(instantAdjusted);\n        long next = nextTransition(instantAdjusted);\n        if (next == prev) { // there is no next transition, use local time\n            return offsetLocal;\n        }\n        int nextOffset = getOffset(next - 1);\n        if (nextOffset <= offsetLocal) {\n            return offsetLocal;\n        }\n        if (next > instantLocal + offsetLocal) {\n            return nextOffset;\n        }\n        long prev2 = previousTransition(instantLocal + offsetLocal + 1);\n        if (prev2 < prev) {\n            prev = prev2;\n        }\n        int prevOffset = getOffset(prev + 1);\n        if (prevOffset >= nextOffset) {\n            return offsetLocal;\n        }\n        if (prev >= instantAdjusted) {\n            return prevOffset;\n        }\n        return getOffset(next - 1);\n    }\n    // handle positive offsets\n    long prev = previousTransition(instantAdjusted);\n    long next = nextTransition(instantAdjusted);\n    if (next == prev) { // there is no next transition, use local time\n        return offsetLocal;\n    }\n    int nextOffset = getOffset(next - 1);\n    if (nextOffset >= offsetLocal) {\n        return offsetLocal;\n    }\n    if (next > instantLocal + offsetLocal) {\n        return nextOffset;\n    }\n    long prev2 = previousTransition(instantLocal + offsetLocal + 1);\n    if (prev2 < prev) {\n        prev = prev2;\n    }\n    int prevOffset = getOffset(prev + 1);\n    if (prevOffset <= nextOffset) {\n        return offsetLocal;\n    }\n    if (prev >= instantAdjusted) {\n        return prevOffset;\n    }\n    return nextOffset;\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..de839974 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,73 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // if we have a local time on a transition, compute the correct offset to use (moving forward)\n+    if (offsetLocal == getOffset(instantAdjusted - 1) && offsetAdjusted == getOffset(instantLocal + 1)) {\n+        long prev = previousTransition(instantAdjusted);\n+        long next = nextTransition(instantAdjusted);\n+        if (next == prev) { // there is no next transition\n+            return offsetLocal;\n+        } else if (next == instantLocal + 1 && prev < instantAdjusted - 1) {\n+            return getOffset(prev + 1);\n+        } else if (prev == instantAdjusted - 1 && next > instantLocal + 1) {\n+            return getOffset(next - 1);\n+        }\n+    }\n+    // handle negative offsets\n+    if (offsetLocal < 0) {\n+        long prev = previousTransition(instantAdjusted);\n+        long next = nextTransition(instantAdjusted);\n+        if (next == prev) { // there is no next transition, use local time\n+            return offsetLocal;\n+        }\n+        int nextOffset = getOffset(next - 1);\n+        if (nextOffset <= offsetLocal) {\n+            return offsetLocal;\n+        }\n+        if (next > instantLocal + offsetLocal) {\n+            return nextOffset;\n+        }\n+        long prev2 = previousTransition(instantLocal + offsetLocal + 1);\n+        if (prev2 < prev) {\n+            prev = prev2;\n+        }\n+        int prevOffset = getOffset(prev + 1);\n+        if (prevOffset >= nextOffset) {\n+            return offsetLocal;\n+        }\n+        if (prev >= instantAdjusted) {\n+            return prevOffset;\n+        }\n+        return getOffset(next - 1);\n+    }\n+    // handle positive offsets\n+    long prev = previousTransition(instantAdjusted);\n+    long next = nextTransition(instantAdjusted);\n+    if (next == prev) { // there is no next transition, use local time\n+        return offsetLocal;\n+    }\n+    int nextOffset = getOffset(next - 1);\n+    if (nextOffset >= offsetLocal) {\n+        return offsetLocal;\n+    }\n+    if (next > instantLocal + offsetLocal) {\n+        return nextOffset;\n+    }\n+    long prev2 = previousTransition(instantLocal + offsetLocal + 1);\n+    if (prev2 < prev) {\n+        prev = prev2;\n+    }\n+    int prevOffset = getOffset(prev + 1);\n+    if (prevOffset <= nextOffset) {\n+        return offsetLocal;\n+    }\n+    if (prev >= instantAdjusted) {\n+        return prevOffset;\n+    }\n+    return nextOffset;\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}