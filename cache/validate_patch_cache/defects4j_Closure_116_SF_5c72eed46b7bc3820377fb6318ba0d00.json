{
    "patch": "private static CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    final Node block = fnNode.getLastChild();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    Node cArg = callNode.getFirstChild().getNext();\n    Node fnParam = fnNode.getSecondChild();\n    while (fnParam != null) {\n      if (fnParam.isParamList()) {\n        break;\n      }\n      fnParam = fnParam.getNext();\n    }\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    int i = 0;\n    while (cArg != null || fnParam != null) {\n      boolean hasMatch = false;\n      if (fnParam != null) {\n        // skip any unnamed parameters in the function node\n        while (fnParam != null && !fnParam.isName()) {\n          fnParam = fnParam.getNext();\n        }\n\n        if (fnParam != null) {\n          if (cArg != null) {\n\n            // Check for arguments that are evaluated more than once.\n            // Note: Unlike block inlining, there it is not possible that a\n            // parameter reference will be in a loop.\n            if (NodeUtil.mayEffectMutableState(cArg, compiler)\n                && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n              return CanInlineResult.NO;\n            }\n            hasMatch = true;\n          } else if (fnParam.getBooleanProp(Node.IS_DestructuringParam)) {\n            // If the function parameter is a destructuring parameter without a matching argument,\n            // it's ok to skip it\n            fnParam = fnParam.getNext();\n            continue;\n          }\n          i++;\n          fnParam = fnParam.getNext();\n        }\n      }\n\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n\n      if (hasMatch && cArg == null && fnParam != null) {\n        return CanInlineResult.NO;\n      }\n    }\n\n    Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n    int numParams = countParameters(fnParams);\n    if (i != numParams) {\n      return CanInlineResult.NO;\n    }\n\n    return CanInlineResult.YES;\n  }\n\n  /**\n   * Returns the number of parameters in the given parameter list.\n   * @param node the first parameter node\n   * @return the number of parameters\n   */\n  private static int countParameters(Node node) {\n    int count = 0;\n    while (node != null) {\n      if (node.isName()) {\n        count++;\n      }\n      node = node.getNext();\n    }\n    return count;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..598c3ec0 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,104 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n+private static CanInlineResult canInlineReferenceDirectly(\n       Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n-\n-\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+    final Node block = fnNode.getLastChild();\n \n     // Functions called via 'call' and 'apply' have a this-object as\n     // the first parameter, but this is not part of the called function's\n     // parameter list.\n+    Node cArg = callNode.getFirstChild().getNext();\n+    Node fnParam = fnNode.getSecondChild();\n+    while (fnParam != null) {\n+      if (fnParam.isParamList()) {\n+        break;\n+      }\n+      fnParam = fnParam.getNext();\n+    }\n     if (!callNode.getFirstChild().isName()) {\n       if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n         if (cArg == null || !cArg.isThis()) {\n           return CanInlineResult.NO;\n         }\n         cArg = cArg.getNext();\n       } else {\n-        // \".apply\" call should be filtered before this.\n         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n       }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+    int i = 0;\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n+      boolean hasMatch = false;\n       if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n+        // skip any unnamed parameters in the function node\n+        while (fnParam != null && !fnParam.isName()) {\n+          fnParam = fnParam.getNext();\n         }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+        if (fnParam != null) {\n+          if (cArg != null) {\n+\n+            // Check for arguments that are evaluated more than once.\n+            // Note: Unlike block inlining, there it is not possible that a\n+            // parameter reference will be in a loop.\n+            if (NodeUtil.mayEffectMutableState(cArg, compiler)\n+                && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n+              return CanInlineResult.NO;\n+            }\n+            hasMatch = true;\n+          } else if (fnParam.getBooleanProp(Node.IS_DestructuringParam)) {\n+            // If the function parameter is a destructuring parameter without a matching argument,\n+            // it's ok to skip it\n+            fnParam = fnParam.getNext();\n+            continue;\n+          }\n+          i++;\n+          fnParam = fnParam.getNext();\n+        }\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n       if (cArg != null) {\n         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           return CanInlineResult.NO;\n         }\n         cArg = cArg.getNext();\n       }\n+\n+      if (hasMatch && cArg == null && fnParam != null) {\n+        return CanInlineResult.NO;\n+      }\n+    }\n+\n+    Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n+    int numParams = countParameters(fnParams);\n+    if (i != numParams) {\n+      return CanInlineResult.NO;\n     }\n \n     return CanInlineResult.YES;\n   }\n \n+  /**\n+   * Returns the number of parameters in the given parameter list.\n+   * @param node the first parameter node\n+   * @return the number of parameters\n+   */\n+  private static int countParameters(Node node) {\n+    int count = 0;\n+    while (node != null) {\n+      if (node.isName()) {\n+        count++;\n+      }\n+      node = node.getNext();\n+    }\n+    return count;\n+  }\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: non-static method isDirectCallNodeReplacementPossible(Node) cannot be referenced from a static context",
    "test_result": "ERROR"
}