{
    "patch": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Need to deal with all possible hex prefixes here\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for(final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen += pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) { // we have a hex number\n        final int hexDigits = str.length() - pfxLen;\n        if (hexDigits > 16) { // too many for Long\n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) { // too many for an int\n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n    // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n\n    int numDecimals = 0; // Check required precision (LANG-693)\n    if (decPos > -1) { // there is a decimal point\n\n        if (expPos > -1) { // there is an exponent\n            if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        //Requesting a specific type..\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                if (dec == null\n                    && exp == null\n                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // Too big for a long\n                    }\n                    return createBigInteger(numeric);\n\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f' :\n            case 'F' :\n                try {\n                    final Float f = NumberUtils.createFloat(numeric);\n                    // We want to ensure that the precise decimal value remains after the conversion to `float` format.\n                    boolean isValidFloat = isValidFloatingPointNumber(f, allZeros, mant, dec, numDecimals);\n                    if (isValidFloat) {\n                        return f;\n                    }\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                //$FALL-THROUGH$\n            case 'd' :\n            case 'D' :\n                try {\n                    final Double d = NumberUtils.createDouble(numeric);\n                    // We want to ensure that the precise decimal value remains after the conversion to `double` format.\n                    boolean isValidDouble = isValidFloatingPointNumber(d, allZeros, mant, dec, numDecimals);\n                    if (isValidDouble) {\n                        return d;\n                    }\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException e) { // NOPMD\n                    // ignore the bad number\n                }\n                //$FALL-THROUGH$\n            default :\n                throw new NumberFormatException(str + \" is not a valid number.\");\n\n        }\n    }\n    //User doesn't have a preference on the return type, so let's start\n    //small and go from there...\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    if (dec == null && exp == null) { // no decimal point and no exponent\n        //Must be an Integer, Long, Biginteger\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        return createBigInteger(str);\n    }\n\n    //Must be a Float, Double, BigDecimal\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    try {\n        final Float f = createFloat(str);\n        // We want to ensure that the precise decimal value remains after the conversion to `float` format.\n        boolean isValidFloat = isValidFloatingPointNumber(f, allZeros, mant, dec, numDecimals);\n        if (isValidFloat) {\n            return f;\n        }\n    } catch (final NumberFormatException nfe) { // NOPMD\n        // ignore the bad number\n    }\n    try {\n        final Double d = createDouble(str);\n        // We want to ensure that the precise decimal value remains after the conversion to `double` format.\n        boolean isValidDouble = isValidFloatingPointNumber(d, allZeros, mant, dec, numDecimals);\n        if (isValidDouble) {\n            return d;\n        }\n    } catch (final NumberFormatException nfe) { // NOPMD\n        // ignore the bad number\n    }\n\n    return createBigDecimal(str);\n}\n\n/**\n * Determines whether the specified floating point number is valid with respect to the specified mantissa, decimal values,\n * and whether all digits are zeros.\n *\n * @param f the floating point number\n * @param allZeros whether all digits in the mantissa and exponent are zeros; used to determine whether the result is a loss of precision\n * @param mant the mantissa as a string\n * @param dec the decimal values as a string or null if not present\n * @param numDecimals the number of decimal places in the number string\n * @return {@code true} if the floating point number is valid\n */\npublic static boolean isValidFloatingPointNumber(final Number f, final boolean allZeros, final String mant, final String dec, final int numDecimals) {\n    if (f == null) {\n        return false;\n    }\n    if (allZeros && mant.equals(\"0\")) {\n        return true;\n    }\n    final String floatingPointStr = String.valueOf(f);\n    final int decimalPointIndex = floatingPointStr.indexOf('.');\n    final String mantissa = decimalPointIndex == -1 ? floatingPointStr : floatingPointStr.substring(0, decimalPointIndex);\n    final String decimals = decimalPointIndex == -1 ? \"\" : floatingPointStr.substring(decimalPointIndex + 1);\n    if (mantissa.length() > mant.length() || !mant.startsWith(mantissa)) {\n        return false;\n    }\n    if (dec != null) {\n        final int indexOfDecimalStr = floatingPointStr.indexOf('.');\n        String decimalStr = floatingPointStr;\n        if (indexOfDecimalStr != -1) {\n            decimalStr = decimalStr.substring(indexOfDecimalStr + 1);\n        }\n        if (!decimals.equals(dec)) {\n            return false;\n        }\n        if (!\"0\".equals(decimalStr) && decimals.length() < numDecimals) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex c5840215..e73ce234 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -447,168 +447,214 @@ public class NumberUtils {\n      * @return Number created from the string (or null if the input is null)\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(final String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n+public static Number createNumber(final String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+    // Need to deal with all possible hex prefixes here\n+    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n+    int pfxLen = 0;\n+    for(final String pfx : hex_prefixes) {\n+        if (str.startsWith(pfx)) {\n+            pfxLen += pfx.length();\n+            break;\n         }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+    if (pfxLen > 0) { // we have a hex number\n+        final int hexDigits = str.length() - pfxLen;\n+        if (hexDigits > 16) { // too many for Long\n+            return createBigInteger(str);\n         }\n-        // Need to deal with all possible hex prefixes here\n-        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n-        int pfxLen = 0;\n-        for(final String pfx : hex_prefixes) {\n-            if (str.startsWith(pfx)) {\n-                pfxLen += pfx.length();\n-                break;\n-            }\n+        if (hexDigits > 8) { // too many for an int\n+            return createLong(str);\n         }\n-        if (pfxLen > 0) { // we have a hex number\n-            final int hexDigits = str.length() - pfxLen;\n-            if (hexDigits > 16) { // too many for Long\n-                return createBigInteger(str);\n+        return createInteger(str);\n+    }\n+    final char lastChar = str.charAt(str.length() - 1);\n+    String mant;\n+    String dec;\n+    String exp;\n+    final int decPos = str.indexOf('.');\n+    final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n+    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n+    // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n+\n+    int numDecimals = 0; // Check required precision (LANG-693)\n+    if (decPos > -1) { // there is a decimal point\n+\n+        if (expPos > -1) { // there is an exponent\n+            if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n+            dec = str.substring(decPos + 1, expPos);\n+        } else {\n+            dec = str.substring(decPos + 1);\n+        }\n+        mant = str.substring(0, decPos);\n+        numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n+    } else {\n+        if (expPos > -1) {\n+            if (expPos > str.length()) { // prevents double exponent causing IOOBE\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n-            return createInteger(str);\n+            mant = str.substring(0, expPos);\n+        } else {\n+            mant = str;\n         }\n-        final char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        final int decPos = str.indexOf('.');\n-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n-\n-        int numDecimals = 0; // Check required precision (LANG-693)\n-        if (decPos > -1) { // there is a decimal point\n-\n-            if (expPos > -1) { // there is an exponent\n-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n+        dec = null;\n+    }\n+    if (!Character.isDigit(lastChar) && lastChar != '.') {\n+        if (expPos > -1 && expPos < str.length() - 1) {\n+            exp = str.substring(expPos + 1, str.length() - 1);\n         } else {\n-            if (expPos > -1) {\n-                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n+            exp = null;\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            final String numeric = str.substring(0, str.length() - 1);\n-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (final NumberFormatException nfe) { // NOPMD\n-                            // Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n+        //Requesting a specific type..\n+        final String numeric = str.substring(0, str.length() - 1);\n+        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+        switch (lastChar) {\n+            case 'l' :\n+            case 'L' :\n+                if (dec == null\n+                    && exp == null\n+                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                     try {\n-                        final Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n+                        return createLong(numeric);\n                     } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n+                        // Too big for a long\n                     }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        final Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n+                    return createBigInteger(numeric);\n+\n+                }\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+            case 'f' :\n+            case 'F' :\n+                try {\n+                    final Float f = NumberUtils.createFloat(numeric);\n+                    // We want to ensure that the precise decimal value remains after the conversion to `float` format.\n+                    boolean isValidFloat = isValidFloatingPointNumber(f, allZeros, mant, dec, numDecimals);\n+                    if (isValidFloat) {\n+                        return f;\n                     }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (final NumberFormatException e) { // NOPMD\n-                        // ignore the bad number\n+                } catch (final NumberFormatException nfe) { // NOPMD\n+                    // ignore the bad number\n+                }\n+                //$FALL-THROUGH$\n+            case 'd' :\n+            case 'D' :\n+                try {\n+                    final Double d = NumberUtils.createDouble(numeric);\n+                    // We want to ensure that the precise decimal value remains after the conversion to `double` format.\n+                    boolean isValidDouble = isValidFloatingPointNumber(d, allZeros, mant, dec, numDecimals);\n+                    if (isValidDouble) {\n+                        return d;\n                     }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                } catch (final NumberFormatException nfe) { // NOPMD\n+                    // ignore the bad number\n+                }\n+                try {\n+                    return createBigDecimal(numeric);\n+                } catch (final NumberFormatException e) { // NOPMD\n+                    // ignore the bad number\n+                }\n+                //$FALL-THROUGH$\n+            default :\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n \n-            }\n-        }\n-        //User doesn't have a preference on the return type, so let's start\n-        //small and go from there...\n-        if (expPos > -1 && expPos < str.length() - 1) {\n-            exp = str.substring(expPos + 1, str.length());\n-        } else {\n-            exp = null;\n-        }\n-        if (dec == null && exp == null) { // no decimal point and no exponent\n-            //Must be an Integer, Long, Biginteger\n-            try {\n-                return createInteger(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            try {\n-                return createLong(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            return createBigInteger(str);\n         }\n-\n-        //Must be a Float, Double, BigDecimal\n-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+    }\n+    //User doesn't have a preference on the return type, so let's start\n+    //small and go from there...\n+    if (expPos > -1 && expPos < str.length() - 1) {\n+        exp = str.substring(expPos + 1, str.length());\n+    } else {\n+        exp = null;\n+    }\n+    if (dec == null && exp == null) { // no decimal point and no exponent\n+        //Must be an Integer, Long, Biginteger\n         try {\n-                final Float f = createFloat(str);\n-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                    return f;\n-                }\n+            return createInteger(str);\n         } catch (final NumberFormatException nfe) { // NOPMD\n             // ignore the bad number\n         }\n         try {\n-                final Double d = createDouble(str);\n-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                    return d;\n-                }\n+            return createLong(str);\n         } catch (final NumberFormatException nfe) { // NOPMD\n             // ignore the bad number\n         }\n+        return createBigInteger(str);\n+    }\n \n-        return createBigDecimal(str);\n+    //Must be a Float, Double, BigDecimal\n+    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+    try {\n+        final Float f = createFloat(str);\n+        // We want to ensure that the precise decimal value remains after the conversion to `float` format.\n+        boolean isValidFloat = isValidFloatingPointNumber(f, allZeros, mant, dec, numDecimals);\n+        if (isValidFloat) {\n+            return f;\n+        }\n+    } catch (final NumberFormatException nfe) { // NOPMD\n+        // ignore the bad number\n+    }\n+    try {\n+        final Double d = createDouble(str);\n+        // We want to ensure that the precise decimal value remains after the conversion to `double` format.\n+        boolean isValidDouble = isValidFloatingPointNumber(d, allZeros, mant, dec, numDecimals);\n+        if (isValidDouble) {\n+            return d;\n+        }\n+    } catch (final NumberFormatException nfe) { // NOPMD\n+        // ignore the bad number\n     }\n \n+    return createBigDecimal(str);\n+}\n+\n+/**\n+ * Determines whether the specified floating point number is valid with respect to the specified mantissa, decimal values,\n+ * and whether all digits are zeros.\n+ *\n+ * @param f the floating point number\n+ * @param allZeros whether all digits in the mantissa and exponent are zeros; used to determine whether the result is a loss of precision\n+ * @param mant the mantissa as a string\n+ * @param dec the decimal values as a string or null if not present\n+ * @param numDecimals the number of decimal places in the number string\n+ * @return {@code true} if the floating point number is valid\n+ */\n+public static boolean isValidFloatingPointNumber(final Number f, final boolean allZeros, final String mant, final String dec, final int numDecimals) {\n+    if (f == null) {\n+        return false;\n+    }\n+    if (allZeros && mant.equals(\"0\")) {\n+        return true;\n+    }\n+    final String floatingPointStr = String.valueOf(f);\n+    final int decimalPointIndex = floatingPointStr.indexOf('.');\n+    final String mantissa = decimalPointIndex == -1 ? floatingPointStr : floatingPointStr.substring(0, decimalPointIndex);\n+    final String decimals = decimalPointIndex == -1 ? \"\" : floatingPointStr.substring(decimalPointIndex + 1);\n+    if (mantissa.length() > mant.length() || !mant.startsWith(mantissa)) {\n+        return false;\n+    }\n+    if (dec != null) {\n+        final int indexOfDecimalStr = floatingPointStr.indexOf('.');\n+        String decimalStr = floatingPointStr;\n+        if (indexOfDecimalStr != -1) {\n+            decimalStr = decimalStr.substring(indexOfDecimalStr + 1);\n+        }\n+        if (!decimals.equals(dec)) {\n+            return false;\n+        }\n+        if (!\"0\".equals(decimalStr) && decimals.length() < numDecimals) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>\n      *",
    "result_reason": "junit.framework.AssertionFailedError: createNumber(String) 3 failed expected: java.lang.Double<1234.5> but was: java.math.BigDecimal<1234.5>",
    "test_result": "FAIL"
}