{
    "patch": "import java.util.Arrays;\nimport java.util.Random;\n\npublic class Distribution {\n    private final Random random;\n    private final int[] values;\n\n    public Distribution(int[] freqs, long seed) {\n        random = new Random(seed);\n        int total = Arrays.stream(freqs).sum();\n        values = Arrays.copyOf(freqs, freqs.length);\n        for (int i = 0; i < values.length; i++) {\n            values[i] *= Integer.MAX_VALUE / (double) total;\n        }\n    }\n\n    public int nextInt() {\n        int r = random.nextInt(Integer.MAX_VALUE);\n        for (int i = 0; i < values.length; i++) {\n            r -= values[i];\n            if (r < 0) {\n                return i;\n            }\n        }\n        return values.length - 1;\n    }\n\n    public static void main(String[] args) {\n        int[] freqs = { 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 };\n        int n = 10000000;\n\n        Distribution dist = new Distribution(freqs, 123456789L);\n\n        int[] counts = new int[freqs.length];\n        for (int i = 0; i < n; i++) {\n            counts[dist.nextInt()]++;\n        }\n\n        double[] expected = Arrays.stream(freqs).asDoubleStream().map(f -> f / (double) Arrays.stream(freqs).sum() * n).toArray();\n        double[] actual = Arrays.stream(counts).asDoubleStream().map(c -> c / (double) n).toArray();\n        double s1 = Arrays.stream(expected).map(e -> e * e).sum();\n        double s2 = Arrays.stream(expected).zipWith(Arrays.stream(actual), (e, a) -> (e - a) * (e - a)).sum();\n        Assert.assertEquals(s1, s2, 0.05d);\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}