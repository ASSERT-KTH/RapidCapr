{
    "patch": "boolean isAssignedOnceInLifetime() {\n  List<BasicBlock> visitedBlocks = new ArrayList<>();\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n\n  // Traverse the basic blocks in a depth-first fashion starting at the block\n  // containing the initialization reference while only following successor\n  // edges that are not back-edges.\n  Deque<ControlFlowGraph.Branch> dfsStack = new ArrayDeque<>();\n  dfsStack.push(ref.getBasicBlock().getFirstBranch());\n  while (!dfsStack.isEmpty()) {\n    ControlFlowGraph.Branch branch = dfsStack.peek();\n    BasicBlock block = branch.target;\n    if (!visitedBlocks.contains(block)) {\n      visitedBlocks.add(block);\n      for (ControlFlowGraph.Branch succ : block.getExitBranches()) {\n        if (!visitedBlocks.contains(succ.target) &&\n            !dfsStack.contains(succ) &&\n            !dominates(ref.getBasicBlock(), succ.target)) {\n          dfsStack.push(succ);\n        }\n      }\n    } else {\n      dfsStack.pop();\n    }\n  }\n\n  // Calculate the number of assignments within this block-set.\n  int numAssignments = 0;\n  for (BasicBlock block : visitedBlocks) {\n    for (Instruction inst : block.getInstructions()) {\n      if (inst instanceof AstNode &&\n          ((AstNode) inst).isAssignment() &&\n          ((Assignment) inst).getTarget().isReferenceTo(ref.getNode())) {\n        numAssignments++;\n      }\n    }\n  }\n\n  return (numAssignments == 1);\n}\n\n/**\n * Return whether dominator dominates block. We use BasicBlock index to speed\n * up the comparison.\n */\nprivate boolean dominates(BasicBlock dominator, BasicBlock block) {\n  while (block.getIndex() > dominator.getIndex()) {\n    block = block.getDominator();\n  }\n  return dominator == block;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c0186ed8 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -371,71 +371,60 @@ class ReferenceCollectingCallback implements ScopedCallback,\n      * follow a variable declaration that itself does not initialize the\n      * variable.\n      */\n-    private boolean isInitializingAssignmentAt(int index) {\n-      if (index < references.size() && index > 0) {\n-        Reference maybeDecl = references.get(index - 1);\n-        if (maybeDecl.isVarDeclaration()) {\n-          Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n-          Reference maybeInit = references.get(index);\n-          if (maybeInit.isSimpleAssignmentToName()) {\n-            return true;\n-          }\n-        }\n-      }\n-      return false;\n-    }\n-\n-    /**\n-     * @return The reference that provides the value for the variable at the\n-     * time of the first read, if known, otherwise null.\n-     *\n-     * This is either the variable declaration (\"var a = ...\") or first\n-     * reference following the declaration if it is an assignment.\n-     */\n-    Reference getInitializingReference() {\n-      if (isInitializingDeclarationAt(0)) {\n-        return references.get(0);\n-      } else if (isInitializingAssignmentAt(1)) {\n-        return references.get(1);\n-      }\n-      return null;\n-    }\n+boolean isAssignedOnceInLifetime() {\n+  List<BasicBlock> visitedBlocks = new ArrayList<>();\n+  Reference ref = getOneAndOnlyAssignment();\n+  if (ref == null) {\n+    return false;\n+  }\n \n-    /**\n-     * Constants are allowed to be defined after their first use.\n-     */\n-    Reference getInitializingReferenceForConstants() {\n-      int size = references.size();\n-      for (int i = 0; i < size; i++) {\n-        if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n-          return references.get(i);\n+  // Traverse the basic blocks in a depth-first fashion starting at the block\n+  // containing the initialization reference while only following successor\n+  // edges that are not back-edges.\n+  Deque<ControlFlowGraph.Branch> dfsStack = new ArrayDeque<>();\n+  dfsStack.push(ref.getBasicBlock().getFirstBranch());\n+  while (!dfsStack.isEmpty()) {\n+    ControlFlowGraph.Branch branch = dfsStack.peek();\n+    BasicBlock block = branch.target;\n+    if (!visitedBlocks.contains(block)) {\n+      visitedBlocks.add(block);\n+      for (ControlFlowGraph.Branch succ : block.getExitBranches()) {\n+        if (!visitedBlocks.contains(succ.target) &&\n+            !dfsStack.contains(succ) &&\n+            !dominates(ref.getBasicBlock(), succ.target)) {\n+          dfsStack.push(succ);\n         }\n       }\n-      return null;\n+    } else {\n+      dfsStack.pop();\n     }\n+  }\n \n-    /**\n-     * @return Whether the variable is only assigned a value once for its\n-     *     lifetime.\n-     */\n-    boolean isAssignedOnceInLifetime() {\n-      Reference ref = getOneAndOnlyAssignment();\n-      if (ref == null) {\n-        return false;\n+  // Calculate the number of assignments within this block-set.\n+  int numAssignments = 0;\n+  for (BasicBlock block : visitedBlocks) {\n+    for (Instruction inst : block.getInstructions()) {\n+      if (inst instanceof AstNode &&\n+          ((AstNode) inst).isAssignment() &&\n+          ((Assignment) inst).getTarget().isReferenceTo(ref.getNode())) {\n+        numAssignments++;\n       }\n+    }\n+  }\n \n-      // Make sure this assignment is not in a loop.\n-      for (BasicBlock block = ref.getBasicBlock();\n-           block != null; block = block.getParent()) {\n-        if (block.isFunction) {\n-          break;\n-        } else if (block.isLoop) {\n-          return false;\n-        }\n-      }\n+  return (numAssignments == 1);\n+}\n \n-      return true;\n-    }\n+/**\n+ * Return whether dominator dominates block. We use BasicBlock index to speed\n+ * up the comparison.\n+ */\n+private boolean dominates(BasicBlock dominator, BasicBlock block) {\n+  while (block.getIndex() > dominator.getIndex()) {\n+    block = block.getDominator();\n+  }\n+  return dominator == block;\n+}\n \n     /**\n      * @return The one and only assignment. Returns if there are 0 or 2+",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}