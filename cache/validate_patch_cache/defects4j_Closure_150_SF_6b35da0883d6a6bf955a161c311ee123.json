{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n        return;\n    }\n\n    if (parent != null) {\n        // Handle function inputs.\n        if (parent.getType() == Token.CALL || parent.getType() == Token.NEW ||\n                (parent.getType() == Token.ASSIGN && parent.getParent().getType() != Token.EXPR_RESULT) ||\n                (parent.getType() == Token.EXPR_RESULT && n.getType() == Token.FUNCTION)) {\n            handleFunctionInputs(n);\n            return;\n        }\n        // Handle variable declarations.\n        if (n.getType() == Token.VAR) {\n            defineVar(n, parent);\n            return;\n        }\n        // Handle function declarations.\n        if (n.getType() == Token.FUNCTION && parent.getType() != Token.NAME) {\n            defineDeclaredFunction(n, parent);\n            return;\n        }\n        // Handle catch blocks.\n        if (n.getType() == Token.CATCH) {\n            defineCatch(n, parent);\n            return;\n        }\n        // Handle name nodes.\n        if (n.getType() == Token.NAME) {\n            Node grandParent = parent.getParent();\n            if (grandParent != null) {\n                int grandParentType = grandParent.getType();\n                if (grandParentType == Token.VAR || grandParentType == Token.CATCH ||\n                        (grandParentType == Token.EXPR_RESULT && n.getFirstChild() != null &&\n                         n.getFirstChild().getType() == Token.FUNCTION)) {\n                    attachLiteralTypes(n);\n                    return;\n                }\n            }\n        }\n    }\n\n    // Handle literals and other nodes.\n    attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..a5fb5ef4 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,54 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+    if (parent != null) {\n+        // Handle function inputs.\n+        if (parent.getType() == Token.CALL || parent.getType() == Token.NEW ||\n+                (parent.getType() == Token.ASSIGN && parent.getParent().getType() != Token.EXPR_RESULT) ||\n+                (parent.getType() == Token.EXPR_RESULT && n.getType() == Token.FUNCTION)) {\n+            handleFunctionInputs(n);\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        // Handle variable declarations.\n+        if (n.getType() == Token.VAR) {\n+            defineVar(n, parent);\n+            return;\n+        }\n+        // Handle function declarations.\n+        if (n.getType() == Token.FUNCTION && parent.getType() != Token.NAME) {\n+            defineDeclaredFunction(n, parent);\n+            return;\n+        }\n+        // Handle catch blocks.\n+        if (n.getType() == Token.CATCH) {\n+            defineCatch(n, parent);\n+            return;\n+        }\n+        // Handle name nodes.\n+        if (n.getType() == Token.NAME) {\n+            Node grandParent = parent.getParent();\n+            if (grandParent != null) {\n+                int grandParentType = grandParent.getType();\n+                if (grandParentType == Token.VAR || grandParentType == Token.CATCH ||\n+                        (grandParentType == Token.EXPR_RESULT && n.getFirstChild() != null &&\n+                         n.getFirstChild().getType() == Token.FUNCTION)) {\n+                    attachLiteralTypes(n);\n+                    return;\n+                }\n+            }\n+        }\n     }\n \n+    // Handle literals and other nodes.\n+    attachLiteralTypes(n);\n+}\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}