{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex = replaceWorstPoint(original, expanded);\n            } else {\n                // accept the reflected simplex\n                simplex = replaceWorstPoint(original, reflected);\n            }\n\n            return;\n\n        }\n\n        // Compute the contracted simplex\n        RealPointValuePair contracted = evaluateNewSimplex(original, 0.5, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = replaceWorstPoint(original, contracted);\n            continue;\n        }\n\n        // Compute the two-point contraction\n        RealPointValuePair nextWorst = original[original.length - 1];\n        if (comparator.compare(reflected, nextWorst) > 0) {\n            contracted = evaluateNewSimplex(original, 0.5, comparator);\n            if (comparator.compare(contracted, nextWorst) < 0) {\n                // Accept the contracted simplex\n                simplex = replaceWorstPoint(original, contracted);\n                continue;\n            }\n        }\n\n        // Shrink the simplex around the best point\n        simplex = shrinkSimplex(original, comparator);\n\n    }\n}\n\nprivate RealPointValuePair[] shrinkSimplex(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException {\n    final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n    final RealPointValuePair best = original[0];\n    shrinkedSimplex[0] = best;\n\n    for (int i = 1; i < original.length; i++) {\n        RealPointValuePair point = original[i];\n        shrinkedSimplex[i] = new RealPointValuePair(\n            best.getPoint().add(point.getPoint().subtract(best.getPoint()).mapMultiply(0.5)),\n            Double.NaN,\n            false);\n    }\n\n    evaluateSimplex(shrinkedSimplex, comparator);\n\n    return shrinkedSimplex;\n}\n\nprivate RealPointValuePair[] replaceWorstPoint(RealPointValuePair[] original, RealPointValuePair newPoint) {\n    RealPointValuePair[] newSimplex = Arrays.copyOf(original, original.length);\n    newSimplex[newSimplex.length - 1] = newPoint;\n    Arrays.sort(newSimplex, getPointValuePairComparator());\n    return newSimplex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..940ae5c13 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,86 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            // compute the expanded simplex\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // accept the expanded simplex\n+                simplex = replaceWorstPoint(original, expanded);\n+            } else {\n+                // accept the reflected simplex\n+                simplex = replaceWorstPoint(original, reflected);\n+            }\n \n-                return;\n+            return;\n \n-            }\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        // Compute the contracted simplex\n+        RealPointValuePair contracted = evaluateNewSimplex(original, 0.5, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            simplex = replaceWorstPoint(original, contracted);\n+            continue;\n+        }\n \n-            // check convergence\n-                return;\n+        // Compute the two-point contraction\n+        RealPointValuePair nextWorst = original[original.length - 1];\n+        if (comparator.compare(reflected, nextWorst) > 0) {\n+            contracted = evaluateNewSimplex(original, 0.5, comparator);\n+            if (comparator.compare(contracted, nextWorst) < 0) {\n+                // Accept the contracted simplex\n+                simplex = replaceWorstPoint(original, contracted);\n+                continue;\n             }\n-\n         }\n \n+        // Shrink the simplex around the best point\n+        simplex = shrinkSimplex(original, comparator);\n+\n+    }\n+}\n+\n+private RealPointValuePair[] shrinkSimplex(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException {\n+    final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n+    final RealPointValuePair best = original[0];\n+    shrinkedSimplex[0] = best;\n+\n+    for (int i = 1; i < original.length; i++) {\n+        RealPointValuePair point = original[i];\n+        shrinkedSimplex[i] = new RealPointValuePair(\n+            best.getPoint().add(point.getPoint().subtract(best.getPoint()).mapMultiply(0.5)),\n+            Double.NaN,\n+            false);\n     }\n \n+    evaluateSimplex(shrinkedSimplex, comparator);\n+\n+    return shrinkedSimplex;\n+}\n+\n+private RealPointValuePair[] replaceWorstPoint(RealPointValuePair[] original, RealPointValuePair newPoint) {\n+    RealPointValuePair[] newSimplex = Arrays.copyOf(original, original.length);\n+    newSimplex[newSimplex.length - 1] = newPoint;\n+    Arrays.sort(newSimplex, getPointValuePairComparator());\n+    return newSimplex;\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}