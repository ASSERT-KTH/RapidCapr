{
    "patch": "    public void captureArgumentsFrom(Invocation invocation) {\n        Object[] args = invocation.getRawArguments();\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                if (m instanceof VarargMatcher) {\n                    Object[] varargArray = Arrays.copyOfRange(args, position, args.length);\n                    ((CapturesArguments) m).captureFrom(varargArray);\n                    break;\n                } else if(position < args.length) {\n                    ((CapturesArguments) m).captureFrom(args[position]);\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..624e6f8b3 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,21 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    public void captureArgumentsFrom(Invocation invocation) {\n+        Object[] args = invocation.getRawArguments();\n+        for (int position = 0; position < matchers.size(); position++) {\n+            Matcher m = matchers.get(position);\n+            if (m instanceof CapturesArguments) {\n+                if (m instanceof VarargMatcher) {\n+                    Object[] varargArray = Arrays.copyOfRange(args, position, args.length);\n+                    ((CapturesArguments) m).captureFrom(varargArray);\n+                    break;\n+                } else if(position < args.length) {\n+                    ((CapturesArguments) m).captureFrom(args[position]);\n+                }\n+            }\n+        }\n+    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}