{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    Duration dur = toDurationFrom(null); \n    long days = dur.getStandardDays();\n    if (days == 0) {\n        return new Period(getMillis(), type);\n    }\n    long millisPerDay = DateTimeConstants.MILLIS_PER_DAY;\n    int weeks = (int) (days / 7);\n    int remainDays = (int) (days % 7);\n    long millis = getMillis() + dur.getMillis() % millisPerDay;\n    int seconds = getSeconds();\n    int minutes = getMinutes();\n    int hours = getHours();\n    if (Math.abs(millis) >= millisPerDay) {\n        millis = millis < 0 ? millis + millisPerDay : millis - millisPerDay;\n        remainDays += millis < 0 ? -1 : 1;\n    }\n    while (remainDays < 0) {\n        remainDays += 7;\n        weeks--;\n    }\n    if (seconds == 60) {\n        seconds = 0;\n        minutes++;\n    }\n    if (minutes == 60) {\n        minutes = 0;\n        hours++;\n    }\n    if (hours == 24) {\n        hours = 0;\n        remainDays++;\n    }\n    if (remainDays == 7) {\n        remainDays = 0;\n        weeks++;\n    }\n    Period result = new Period(hours, minutes, seconds, getMillis(), remainDays, weeks, 0, 0, type);\n    if (getYears() != 0 || getMonths() != 0) {\n        result = result.withYears(getYears())\n                       .withMonths(getMonths());\n    }\n    return result.normalizedStandard(type);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..1c8f4657 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,50 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    Duration dur = toDurationFrom(null); \n+    long days = dur.getStandardDays();\n+    if (days == 0) {\n+        return new Period(getMillis(), type);\n+    }\n+    long millisPerDay = DateTimeConstants.MILLIS_PER_DAY;\n+    int weeks = (int) (days / 7);\n+    int remainDays = (int) (days % 7);\n+    long millis = getMillis() + dur.getMillis() % millisPerDay;\n+    int seconds = getSeconds();\n+    int minutes = getMinutes();\n+    int hours = getHours();\n+    if (Math.abs(millis) >= millisPerDay) {\n+        millis = millis < 0 ? millis + millisPerDay : millis - millisPerDay;\n+        remainDays += millis < 0 ? -1 : 1;\n+    }\n+    while (remainDays < 0) {\n+        remainDays += 7;\n+        weeks--;\n+    }\n+    if (seconds == 60) {\n+        seconds = 0;\n+        minutes++;\n+    }\n+    if (minutes == 60) {\n+        minutes = 0;\n+        hours++;\n+    }\n+    if (hours == 24) {\n+        hours = 0;\n+        remainDays++;\n+    }\n+    if (remainDays == 7) {\n+        remainDays = 0;\n+        weeks++;\n+    }\n+    Period result = new Period(hours, minutes, seconds, getMillis(), remainDays, weeks, 0, 0, type);\n+    if (getYears() != 0 || getMonths() != 0) {\n+        result = result.withYears(getYears())\n+                       .withMonths(getMonths());\n+    }\n+    return result.normalizedStandard(type);\n+}\n \n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P2W5D> but was:<PT0S>",
    "test_result": "FAIL"
}