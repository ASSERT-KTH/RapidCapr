{
    "patch": "        \n    Set<String> referencedArguments = new HashSet<String>();\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          referencedArguments.add(lastArg.getString());\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n      for (Node arg : argList.children()) {\n        referencedArguments.add(arg.getString());\n      }\n    }\n    \n    for (Node child : function.children()) {\n      if (child.isParamList()) {\n        continue;\n      }\n      NodeTraversal.traverse(compiler, child,\n          new RemoveUnreferencedVars(referenced, referencedArguments));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9ad34792 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,34 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        \n+    Set<String> referencedArguments = new HashSet<String>();\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          referencedArguments.add(lastArg.getString());\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+      for (Node arg : argList.children()) {\n+        referencedArguments.add(arg.getString());\n+      }\n+    }\n+    \n+    for (Node child : function.children()) {\n+      if (child.isParamList()) {\n+        continue;\n+      }\n+      NodeTraversal.traverse(compiler, child,\n+          new RemoveUnreferencedVars(referenced, referencedArguments));\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}