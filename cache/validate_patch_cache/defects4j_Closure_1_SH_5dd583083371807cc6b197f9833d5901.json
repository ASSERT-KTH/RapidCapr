{
    "patch": "-     Node lastArg;\n-     while ((lastArg = argList.getLastChild()) != null) {\n-       Var var = fnScope.getVar(lastArg.getString());\n-       if (!referenced.contains(var)) {\n-         argList.removeChild(lastArg);\n-         compiler.reportCodeChange();\n+     Node firstDeletedArg = null;\n+     for (Node arg : argList.children()) {\n+       if (!arg.isName()) {\n+         continue;\n+       }\n+       Var var = fnScope.getVar(arg.getString());\n+       if (!referenced.contains(var)) {\n+         if (firstDeletedArg == null) {\n+           // We lazily remove function arguments from the AST from right to\n+           // left. Therefore we set firstDeletedArg to the current argument\n+           // only if that's the first one we are going to remove. After that\n+           // we only move the pointer to the left.\n+           firstDeletedArg = arg;\n+         }\n+         ++argCount;\n+       } else if (firstDeletedArg != null) {\n+         // We need to remove the arguments.\n+         argList.removeChildren(firstDeletedArg, arg);\n+         compiler.reportCodeChange();\n+         break;\n+       }\n      } else {\n-       break;\n+        // All arguments are referenced.\n       }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..7221f213 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,37 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+-     Node lastArg;\n+-     while ((lastArg = argList.getLastChild()) != null) {\n+-       Var var = fnScope.getVar(lastArg.getString());\n+-       if (!referenced.contains(var)) {\n+-         argList.removeChild(lastArg);\n+-         compiler.reportCodeChange();\n++     Node firstDeletedArg = null;\n++     for (Node arg : argList.children()) {\n++       if (!arg.isName()) {\n++         continue;\n++       }\n++       Var var = fnScope.getVar(arg.getString());\n++       if (!referenced.contains(var)) {\n++         if (firstDeletedArg == null) {\n++           // We lazily remove function arguments from the AST from right to\n++           // left. Therefore we set firstDeletedArg to the current argument\n++           // only if that's the first one we are going to remove. After that\n++           // we only move the pointer to the left.\n++           firstDeletedArg = arg;\n++         }\n++         ++argCount;\n++       } else if (firstDeletedArg != null) {\n++         // We need to remove the arguments.\n++         argList.removeChildren(firstDeletedArg, arg);\n++         compiler.reportCodeChange();\n++         break;\n++       }\n+      } else {\n+-       break;\n++        // All arguments are referenced.\n+       }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}