{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isScript()) {\n        scope = new Scope(scopeCreator, n);\n    }\n\n    switch (n.getToken()) {\n        case VAR:\n            defineVar(n, parent);\n            break;\n        case FUNCTION:\n            defineFunction(n, parent);\n            break;\n        case CATCH:\n            defineCatch(n, parent);\n            break;\n        case LP:\n            // If this LP node is a function argument, add it as a scoped variable.\n            if (isFunctionArg(n)) {\n                declareVar(n.getFirstChild().getString(), n, parent, true);\n            }\n            break;\n        case CALL:\n            // Handle goog.scope calls.\n            if (isGoogScopeCall(n)) {\n                handleGoogScopeCall(n);\n            }\n            break;\n        default:\n            break;\n    }\n\n    attachLiteralTypes(n);\n}\n\n/**\n * Determines if a node represents a function argument.\n */\nprivate boolean isFunctionArg(Node n) {\n    if (n.getParent() == null || n.getParent().getGrandparent() == null) {\n        return false;\n    }\n    Node grandparent = n.getParent().getGrandparent();\n    return grandparent.isFunction() && n.getParent().isParamList() && n == n.getParent().getFirstChild();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..7988f2c0 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,51 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.isScript()) {\n+        scope = new Scope(scopeCreator, n);\n+    }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+    switch (n.getToken()) {\n+        case VAR:\n+            defineVar(n, parent);\n+            break;\n+        case FUNCTION:\n+            defineFunction(n, parent);\n+            break;\n+        case CATCH:\n+            defineCatch(n, parent);\n+            break;\n+        case LP:\n+            // If this LP node is a function argument, add it as a scoped variable.\n+            if (isFunctionArg(n)) {\n+                declareVar(n.getFirstChild().getString(), n, parent, true);\n+            }\n+            break;\n+        case CALL:\n+            // Handle goog.scope calls.\n+            if (isGoogScopeCall(n)) {\n+                handleGoogScopeCall(n);\n+            }\n+            break;\n+        default:\n+            break;\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    attachLiteralTypes(n);\n+}\n+\n+/**\n+ * Determines if a node represents a function argument.\n+ */\n+private boolean isFunctionArg(Node n) {\n+    if (n.getParent() == null || n.getParent().getGrandparent() == null) {\n+        return false;\n     }\n+    Node grandparent = n.getParent().getGrandparent();\n+    return grandparent.isFunction() && n.getParent().isParamList() && n == n.getParent().getFirstChild();\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}