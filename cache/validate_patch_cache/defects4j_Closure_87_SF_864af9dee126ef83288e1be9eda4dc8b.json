{
    "patch": "private static boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node onlyChild = n.getFirstChild();\n\n      // Do not fold EXPR_RESULTs into FOR loops.\n      if (n.getParent() != null && n.getParent().getType() == Token.FOR) {\n        return false;\n      }\n\n      // Do not fold EXPR_RESULTs into EXPR_VOID, IF, FOR, SWITCH, or TRY statements.\n      if (n.getParent() != null && \n          (n.getParent().getType() == Token.EXPR_VOID ||\n           n.getParent().getType() == Token.IF ||\n           n.getParent().getType() == Token.FOR ||\n           n.getParent().getType() == Token.SWITCH ||\n           n.getParent().getType() == Token.TRY)) {\n        return false;\n      }\n\n      // Do not fold blocks containing a single IF statement.\n      if (onlyChild.getType() == Token.IF && !containsMoreThanOneStatement(onlyChild)) {\n        return false;\n      }\n\n      // Do not fold blocks containing a single SWITCH statement.\n      if (onlyChild.getType() == Token.SWITCH && !containsMoreThanOneStatement(onlyChild)) {\n        return false;\n      }\n\n      // Do not fold blocks containing a single TRY statement.\n      if (onlyChild.getType() == Token.TRY && !containsMoreThanOneStatement(onlyChild)) {\n        return false;\n      }\n\n      // Do not fold empty statements.\n      if (onlyChild.isEmpty()) {\n        return false;\n      }\n\n      return NodeUtil.isExpressionNode(n.getFirstChild());\n    } else if (n.getFirstChild().getType() == Token.FUNCTION) {\n      // Do not fold a block containing only a function declaration.\n      return false;\n    }\n  }\n\n  return false;\n}\n\nprivate static boolean containsMoreThanOneStatement(Node n) {\n  Node firstChild = n.getFirstChild();\n  if (firstChild == null) {\n    return false;\n  }\n  return firstChild.getNext() != null; \n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..704ec55e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,63 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private static boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node onlyChild = n.getFirstChild();\n+\n+      // Do not fold EXPR_RESULTs into FOR loops.\n+      if (n.getParent() != null && n.getParent().getType() == Token.FOR) {\n+        return false;\n       }\n+\n+      // Do not fold EXPR_RESULTs into EXPR_VOID, IF, FOR, SWITCH, or TRY statements.\n+      if (n.getParent() != null && \n+          (n.getParent().getType() == Token.EXPR_VOID ||\n+           n.getParent().getType() == Token.IF ||\n+           n.getParent().getType() == Token.FOR ||\n+           n.getParent().getType() == Token.SWITCH ||\n+           n.getParent().getType() == Token.TRY)) {\n+        return false;\n+      }\n+\n+      // Do not fold blocks containing a single IF statement.\n+      if (onlyChild.getType() == Token.IF && !containsMoreThanOneStatement(onlyChild)) {\n+        return false;\n+      }\n+\n+      // Do not fold blocks containing a single SWITCH statement.\n+      if (onlyChild.getType() == Token.SWITCH && !containsMoreThanOneStatement(onlyChild)) {\n+        return false;\n+      }\n+\n+      // Do not fold blocks containing a single TRY statement.\n+      if (onlyChild.getType() == Token.TRY && !containsMoreThanOneStatement(onlyChild)) {\n+        return false;\n+      }\n+\n+      // Do not fold empty statements.\n+      if (onlyChild.isEmpty()) {\n+        return false;\n+      }\n+\n+      return NodeUtil.isExpressionNode(n.getFirstChild());\n+    } else if (n.getFirstChild().getType() == Token.FUNCTION) {\n+      // Do not fold a block containing only a function declaration.\n+      return false;\n     }\n+  }\n+\n+  return false;\n+}\n \n+private static boolean containsMoreThanOneStatement(Node n) {\n+  Node firstChild = n.getFirstChild();\n+  if (firstChild == null) {\n     return false;\n   }\n+  return firstChild.getNext() != null; \n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}