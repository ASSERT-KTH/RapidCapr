{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    Gson gson = new Gson();\n    Map<String, Object> map = gson.fromJson(jsonStr, Map.class);\n    List<Double> values = (List<Double>) map.get(\"values\");\n    double sum = 0;\n    for (Double value : values) {\n        sum += value;\n    }\n    double typedValue = (Double) map.get(\"typed_value\");\n    return (typedValue / sum) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..e4bf8789 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    Gson gson = new Gson();\n+    Map<String, Object> map = gson.fromJson(jsonStr, Map.class);\n+    List<Double> values = (List<Double>) map.get(\"values\");\n+    double sum = 0;\n+    for (Double value : values) {\n+        sum += value;\n+    }\n+    double typedValue = (Double) map.get(\"typed_value\");\n+    return (typedValue / sum) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}