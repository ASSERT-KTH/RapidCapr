{
    "patch": "public static double regularizedBeta(final double a, final double b,\n        final double x, final double epsilon, final int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(b) || Double.isNaN(x) ||\n            !(a > 0.0) || !(b > 0.0) || (x < 0.0) || (x > 1.0)) {\n        return Double.NaN;\n    }\n    final ContinuedFraction fraction = new ContinuedFraction() {\n        @Override\n        protected double getB(final int n, final double x) {\n            final double m = n / 2.0;\n            if (n % 2 == 0) {\n                return m * (b - m) * x /\n                    ((a + (2.0 * m) - 1.0) * (a + (2.0 * m)));\n            }\n            return -((a + m) * (a + b + m) * x) /\n                 ((a + (2.0 * m)) * (a + (2.0 * m) + 1.0));\n        }\n            \n        @Override\n        protected double getA(final int n, final double x) {\n            return 1.0;\n        }\n    };\n    final double ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -\n                Math.log(a) - logBeta(a, b)) * fraction.evaluate(x, epsilon, maxIterations);\n    return (ret > 1.0) ? 1.0 : ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..fd1243b9c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,33 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedBeta(final double a, final double b,\n+        final double x, final double epsilon, final int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(b) || Double.isNaN(x) ||\n+            !(a > 0.0) || !(b > 0.0) || (x < 0.0) || (x > 1.0)) {\n+        return Double.NaN;\n+    }\n+    final ContinuedFraction fraction = new ContinuedFraction() {\n+        @Override\n+        protected double getB(final int n, final double x) {\n+            final double m = n / 2.0;\n+            if (n % 2 == 0) {\n+                return m * (b - m) * x /\n+                    ((a + (2.0 * m) - 1.0) * (a + (2.0 * m)));\n+            }\n+            return -((a + m) * (a + b + m) * x) /\n+                 ((a + (2.0 * m)) * (a + (2.0 * m) + 1.0));\n+        }\n+            \n+        @Override\n+        protected double getA(final int n, final double x) {\n+            return 1.0;\n+        }\n+    };\n+    final double ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -\n+                Math.log(a) - logBeta(a, b)) * fraction.evaluate(x, epsilon, maxIterations);\n+    return (ret > 1.0) ? 1.0 : ret;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}