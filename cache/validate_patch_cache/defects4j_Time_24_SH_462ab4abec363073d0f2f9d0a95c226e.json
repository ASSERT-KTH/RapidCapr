{
    "patch": "            DurationField years = DurationFieldType.years().getField(iChrono);\n            LocalDate localDate = new LocalDate(millis, iChrono);\n            if (!years.isSupported() || localDate.getYear() >= iDefaultYear - e.getIllegalFieldValue() || \n                    localDate.getYear() <= iDefaultYear - 1 - e.getIllegalFieldValue()) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            } else if (getUpperLimit().plusYears(1).isBefore(localDate)) {\n                saveField(DateTimeFieldType.year(), iDefaultYear - 1);\n                return computeMillis(resetFields, text);\n            } else {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..dc5f8fe9 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,18 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            DurationField years = DurationFieldType.years().getField(iChrono);\n+            LocalDate localDate = new LocalDate(millis, iChrono);\n+            if (!years.isSupported() || localDate.getYear() >= iDefaultYear - e.getIllegalFieldValue() || \n+                    localDate.getYear() <= iDefaultYear - 1 - e.getIllegalFieldValue()) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            } else if (getUpperLimit().plusYears(1).isBefore(localDate)) {\n+                saveField(DateTimeFieldType.year(), iDefaultYear - 1);\n+                return computeMillis(resetFields, text);\n+            } else {\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}