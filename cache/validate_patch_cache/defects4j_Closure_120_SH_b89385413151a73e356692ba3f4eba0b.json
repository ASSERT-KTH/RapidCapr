{
    "patch": "  if (ref == null) {\n    return false;\n  }\n  ReferenceUtils.DeclarationKind kind = ref.getFirstDeclaration().getDeclarationKind();\n\n  // Handle the special case of variables declared in externs files or from extern functions calls.\n  if (kind == ReferenceUtils.DeclarationKind.INFERRED_EXTERN_VAR\n      || kind == ReferenceUtils.DeclarationKind.EXTERN\n      || kind == ReferenceUtils.DeclarationKind.FUNCTION_EXPRESSION_NAME) {\n    return true;\n  }\n\n  Collection<Reference> refs = ref.getVariableReferences();\n  int count = 0;\n  for (Reference r : refs) {\n    if (r.isLvalue() && !r.isConst()) {\n      // If there is another write to the variable, then it's written more than once.\n      if (++count > 1) {\n        return false;\n      }\n    }\n  }\n  return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..60b9dd45 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,29 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+  if (ref == null) {\n+    return false;\n+  }\n+  ReferenceUtils.DeclarationKind kind = ref.getFirstDeclaration().getDeclarationKind();\n+\n+  // Handle the special case of variables declared in externs files or from extern functions calls.\n+  if (kind == ReferenceUtils.DeclarationKind.INFERRED_EXTERN_VAR\n+      || kind == ReferenceUtils.DeclarationKind.EXTERN\n+      || kind == ReferenceUtils.DeclarationKind.FUNCTION_EXPRESSION_NAME) {\n+    return true;\n+  }\n+\n+  Collection<Reference> refs = ref.getVariableReferences();\n+  int count = 0;\n+  for (Reference r : refs) {\n+    if (r.isLvalue() && !r.isConst()) {\n+      // If there is another write to the variable, then it's written more than once.\n+      if (++count > 1) {\n+        return false;\n+      }\n+    }\n+  }\n+  return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: package ReferenceUtils does not exist",
    "test_result": "ERROR"
}