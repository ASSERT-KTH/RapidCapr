{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic class RegularizedGammaFunction {\n\n    public static double evaluate(double a, double x) {\n        double epsilon = 10e-15;\n        double gammaA = Gamma.gamma(a);\n        double regularizedGammaP = Gamma.regularizedGammaP(a, x);\n\n        double term = regularizedGammaP * gammaA;\n        double sum = term;\n\n        for(int k=1; Math.abs(term) > epsilon && k < Integer.MAX_VALUE; k++) {\n            epsilon = epsilon * k / (x + k);\n            term = term * x / (a + k);\n            sum += term;\n        }\n\n        return Math.exp(a * Math.log(x) - x - Math.log(sum));\n    }\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bd42489f1 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,28 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class RegularizedGammaFunction {\n+\n+    public static double evaluate(double a, double x) {\n+        double epsilon = 10e-15;\n+        double gammaA = Gamma.gamma(a);\n+        double regularizedGammaP = Gamma.regularizedGammaP(a, x);\n+\n+        double term = regularizedGammaP * gammaA;\n+        double sum = term;\n+\n+        for(int k=1; Math.abs(term) > epsilon && k < Integer.MAX_VALUE; k++) {\n+            epsilon = epsilon * k / (x + k);\n+            term = term * x / (a + k);\n+            sum += term;\n+        }\n+\n+        return Math.exp(a * Math.log(x) - x - Math.log(sum));\n+    }\n+\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}