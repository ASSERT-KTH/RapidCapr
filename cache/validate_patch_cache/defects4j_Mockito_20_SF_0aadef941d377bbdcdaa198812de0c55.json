{
    "patch": "T mockInstance;\ntry {\n    mockInstance = classInstantiator.instantiate(mockedProxyType);\n} catch (Exception | AssertionError e) {\n    throw new MockitoException(join(\n            \"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\",\n            \"\",\n            \"Mockito Hint:\",\n            \"1. Make sure you called the right constructors: the one matching the provided creation strategy (if in doubt, use no-arg)\",\n            \"2. Make sure you passed values that match any of the parameters' type in the constructors\",\n            \"\",\n            \"Underlying exception : \" + e.toString()\n    ), e);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..96a591cc3 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,36 +21,20 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n-        }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n-\n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n-        }\n-    }\n+T mockInstance;\n+try {\n+    mockInstance = classInstantiator.instantiate(mockedProxyType);\n+} catch (Exception | AssertionError e) {\n+    throw new MockitoException(join(\n+            \"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\",\n+            \"\",\n+            \"Mockito Hint:\",\n+            \"1. Make sure you called the right constructors: the one matching the provided creation strategy (if in doubt, use no-arg)\",\n+            \"2. Make sure you passed values that match any of the parameters' type in the constructors\",\n+            \"\",\n+            \"Underlying exception : \" + e.toString()\n+    ), e);\n+}\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}