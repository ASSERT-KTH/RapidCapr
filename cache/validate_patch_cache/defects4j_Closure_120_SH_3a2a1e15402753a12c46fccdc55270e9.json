{
    "patch": "        if (!ref.isSimpleAssignmentToName()) {\n            return false;\n        }\n        if (!ref.getNameNode().matchesQualifiedName(varName)) {\n            return false;\n        }\n        \n        BasicBlock outerBlock = null;\n        // Traverse all the way to the outermost block.\n        for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n            if (block.isFunction) {\n                // Function declarations have their own var scope.\n                return outerBlock == null || outerBlock.equals(block);\n            } else if (block.isLoop) {\n                return false;\n            }\n            outerBlock = block;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..383fa1be 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,24 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (!ref.isSimpleAssignmentToName()) {\n+            return false;\n+        }\n+        if (!ref.getNameNode().matchesQualifiedName(varName)) {\n+            return false;\n+        }\n+        \n+        BasicBlock outerBlock = null;\n+        // Traverse all the way to the outermost block.\n+        for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n+            if (block.isFunction) {\n+                // Function declarations have their own var scope.\n+                return outerBlock == null || outerBlock.equals(block);\n+            } else if (block.isLoop) {\n+                return false;\n+            }\n+            outerBlock = block;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}