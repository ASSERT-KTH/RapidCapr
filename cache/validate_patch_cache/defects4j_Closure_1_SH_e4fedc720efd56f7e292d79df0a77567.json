{
    "patch": "    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      int argIndex = 0;\n      for (Node arg : argList.children()) {\n        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n          // Only remove unreferenced args.\n          argList.removeChildAt(argIndex);\n          compiler.reportCodeChange();\n        } else {\n          argIndex++;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c9b77e97 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      int argIndex = 0;\n+      for (Node arg : argList.children()) {\n+        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+          // Only remove unreferenced args.\n+          argList.removeChildAt(argIndex);\n+          compiler.reportCodeChange();\n+        } else {\n+          argIndex++;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}