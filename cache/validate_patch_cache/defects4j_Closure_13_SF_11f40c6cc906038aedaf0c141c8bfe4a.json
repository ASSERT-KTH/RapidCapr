{
    "patch": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    Node c = node.getFirstChild();\n    while(c != null) {\n      traverse(c);\n      Node next = c.getNext();\n      c = next;\n    }\n\n    do {\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many iterations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..72eaf1e3 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -120,18 +120,18 @@ class PeepholeOptimizationsPass\n     }\n \n     int visits = 0;\n-    do {\n-      Node c = node.getFirstChild();\n-      while(c != null) {\n-        traverse(c);\n-        Node next = c.getNext();\n-        c = next;\n-      }\n+    Node c = node.getFirstChild();\n+    while(c != null) {\n+      traverse(c);\n+      Node next = c.getNext();\n+      c = next;\n+    }\n \n+    do {\n       visit(node);\n       visits++;\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n+      Preconditions.checkState(visits < 10000, \"too many iterations\");\n     } while (shouldRetraverse(node));\n \n     exitNode(node);",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}