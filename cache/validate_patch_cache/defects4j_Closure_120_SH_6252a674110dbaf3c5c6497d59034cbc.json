{
    "patch": "          for (BasicBlock innerBlock : block.getBlocksInThisLoop()) {\n            for (Reference reference : innerBlock.getReferences()) {\n              if (reference.getSymbol().equals(ref.getSymbol())) {\n                return false;\n              }\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..8bbeff67 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          for (BasicBlock innerBlock : block.getBlocksInThisLoop()) {\n+            for (Reference reference : innerBlock.getReferences()) {\n+              if (reference.getSymbol().equals(ref.getSymbol())) {\n+                return false;\n+              }\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}