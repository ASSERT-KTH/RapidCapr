{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.getType() == Token.LABEL) {\n        Node labeledChild = n.getFirstChild().getNext();\n        if (labeledChild.getType() == Token.EMPTY) {\n            labeledChild = labeledChild.getNext();\n        }\n        return isOneExactlyFunctionOrDo(labeledChild);\n    } else if (n.getType() == Token.BLOCK) {\n        int childCount = n.getChildCount();\n        if (childCount == 1) {\n            Node child = n.getFirstChild();\n            if (child.getType() == Token.LABEL) {\n                Node labeledChild = child.getFirstChild().getNext();\n                if (labeledChild.getType() == Token.EMPTY) {\n                    labeledChild = labeledChild.getNext();\n                }\n                return isOneExactlyFunctionOrDo(labeledChild);\n            } else {\n                return isOneExactlyFunctionOrDo(child);\n            }\n        } else {\n            return false;\n        }\n    } else {\n        return n.getType() == Token.FUNCTION || n.getType() == Token.DO;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..d97998cf 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,33 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    if (n.getType() == Token.LABEL) {\n+        Node labeledChild = n.getFirstChild().getNext();\n+        if (labeledChild.getType() == Token.EMPTY) {\n+            labeledChild = labeledChild.getNext();\n+        }\n+        return isOneExactlyFunctionOrDo(labeledChild);\n+    } else if (n.getType() == Token.BLOCK) {\n+        int childCount = n.getChildCount();\n+        if (childCount == 1) {\n+            Node child = n.getFirstChild();\n+            if (child.getType() == Token.LABEL) {\n+                Node labeledChild = child.getFirstChild().getNext();\n+                if (labeledChild.getType() == Token.EMPTY) {\n+                    labeledChild = labeledChild.getNext();\n+                }\n+                return isOneExactlyFunctionOrDo(labeledChild);\n+            } else {\n+                return isOneExactlyFunctionOrDo(child);\n+            }\n+        } else {\n+            return false;\n+        }\n+    } else {\n+        return n.getType() == Token.FUNCTION || n.getType() == Token.DO;\n+    }\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}