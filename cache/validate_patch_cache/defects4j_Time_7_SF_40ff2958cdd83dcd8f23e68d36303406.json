{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    // Get the parser and check the input arguments\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    // Get the instant in millis and the chronology\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n\n    // Compute the instant in the local time zone\n    long instantLocalMillis = instantMillis + chrono.getZone().getOffset(instantMillis);\n\n    // Set the chronology to the parsed value, if any\n    chrono = selectChronology(chrono);\n\n    // Get the default year\n    int defaultYear = chrono.year().get(instantLocalMillis);\n\n    // Initialize the parser bucket and parse the input\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocalMillis, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // If the input is valid, compute the instant in the original time zone\n    if (newPos >= 0) {\n        // If the offset was parsed, set the chronology to the parsed zone\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        }\n        // If the zone was parsed, set the chronology to the parsed zone\n        else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        // If neither the offset nor the zone was parsed, set the chronology to the local zone\n        else {\n            chrono = chrono.withZone(DateTimeZone.getDefault());\n        }\n        // Compute the instant in the original time zone and set it on the input object\n        instant.setChronology(chrono);\n        instant.setMillis(bucket.computeMillis(false, text) - chrono.getZone().getOffset(bucket.computeMillis(false, text)));\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n    }\n\n    // Return the position past the parsed text\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..8211d018 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,59 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    // Get the parser and check the input arguments\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    // Get the instant in millis and the chronology\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+\n+    // Compute the instant in the local time zone\n+    long instantLocalMillis = instantMillis + chrono.getZone().getOffset(instantMillis);\n+\n+    // Set the chronology to the parsed value, if any\n+    chrono = selectChronology(chrono);\n+\n+    // Get the default year\n+    int defaultYear = chrono.year().get(instantLocalMillis);\n+\n+    // Initialize the parser bucket and parse the input\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocalMillis, chrono, iLocale, iPivotYear, defaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    // If the input is valid, compute the instant in the original time zone\n+    if (newPos >= 0) {\n+        // If the offset was parsed, set the chronology to the parsed zone\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n             chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n+        }\n+        // If the zone was parsed, set the chronology to the parsed zone\n+        else if (bucket.getZone() != null) {\n             chrono = chrono.withZone(bucket.getZone());\n         }\n+        // If neither the offset nor the zone was parsed, set the chronology to the local zone\n+        else {\n+            chrono = chrono.withZone(DateTimeZone.getDefault());\n+        }\n+        // Compute the instant in the original time zone and set it on the input object\n         instant.setChronology(chrono);\n+        instant.setMillis(bucket.computeMillis(false, text) - chrono.getZone().getOffset(bucket.computeMillis(false, text)));\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n-        return newPos;\n     }\n \n+    // Return the position past the parsed text\n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}