{
    "patch": "public void captureArgumentsFrom(Invocation i) {\n    if (i == null || i.getArguments() == null) {\n        return;\n    }\n    int k = 0;\n    for (Matcher m : matchers) {\n        if (k < i.getArguments().length && ",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex c72b119dd..da80e8b70 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -100,13 +100,11 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n         return invocation.toString(matchers, printSettings);\n     }\n \n-    public void captureArgumentsFrom(Invocation i) {\n-        int k = 0;\n-        for (Matcher m : matchers) {\n-            if (m instanceof CapturesArguments) {\n-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n-            }\n-            k++;\n-        }\n+public void captureArgumentsFrom(Invocation i) {\n+    if (i == null || i.getArguments() == null) {\n+        return;\n     }\n-}\n\\ No newline at end of file\n+    int k = 0;\n+    for (Matcher m : matchers) {\n+        if (k < i.getArguments().length && \n+}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}