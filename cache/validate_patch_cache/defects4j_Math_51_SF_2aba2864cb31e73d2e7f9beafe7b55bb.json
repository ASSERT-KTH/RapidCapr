{
    "patch": "package org.apache.commons.math3.analysis.solvers;\n\nimport org.apache.commons.math3.analysis.UnivariateFunction;\nimport org.apache.commons.math3.exception.NoBracketingException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n * Implements the secant method for root-finding (approximating a zero of a function).\n * Example usage:\n * <pre>\n * double root = new SecantSolver().solve(100, new Sin(), 0, 1);\n * </pre>\n *\n * @version $Id: SecantSolver.java 1244107 2012-02-14 16:17:55Z erans $\n *\n * @deprecated As of 3.1. To be removed in 4.0. Replaced by {@link IllinoisSolver} or {@link PegasusSolver}.\n */\n@Deprecated\npublic class SecantSolver extends AbstractUnivariateSolver {\n    /**\n     * Default constructor.\n     *\n     * The default absolute accuracy is {@link\n     * org.apache.commons.math3.util.Precision#SAFE_MIN}.\n     *\n     * The default relative accuracy is 1e-6.\n     */\n    public SecantSolver() {\n        this(1e-6);\n    }\n\n    /**\n     * Construct a solver with a given absolute accuracy.\n     *\n     * The default relative accuracy is 1e-6.\n     *\n     * @param absoluteAccuracy Maximum absolute error.\n     */\n    public SecantSolver(double absoluteAccuracy) {\n        super(absoluteAccuracy);\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param relativeAccuracy Maximum relative error.\n     * @param absoluteAccuracy Maximum absolute error.\n     */\n    public SecantSolver(final double relativeAccuracy, final double absoluteAccuracy) {\n        super(relativeAccuracy, absoluteAccuracy);\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param relativeAccuracy Maximum relative error.\n     * @param absoluteAccuracy Maximum absolute error.\n     * @param maxEval Maximum number of evaluations.\n     */\n    public SecantSolver(double relativeAccuracy, double absoluteAccuracy,\n                        int maxEval) {\n        super(relativeAccuracy, absoluteAccuracy, maxEval);\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    protected double doSolve()\n        throws TooManyEvaluationsException, NoBracketingException {\n        double min = getMin();\n        double max = getMax();\n        double x0 = min;\n        double x1 = max;\n        double y0 = computeObjectiveValue(x0);\n        double y1 = computeObjectiveValue(x1);\n\n        while (getEvaluations() < getMaxEvaluations()) {\n            double delta = y1 * (x1 - x0) / (y0 - y1);\n            double x = x1 - delta;\n            double y = computeObjectiveValue(x);\n            if (FastMath.abs(y) <= getFunctionValueAccuracy()) {\n                setResult(x, getEvaluations());\n                return result;\n            }\n            x0 = x1;\n            y0 = y1;\n            x1 = x;\n            y1 = y;\n\n            if (FastMath.abs(y1 - y0) < getAbsoluteAccuracy()) {\n                double tolerance = FastMath.max(getRelativeAccuracy() * FastMath.max(FastMath.abs(x0), FastMath.abs(x1)),\n                                                getAbsoluteAccuracy());\n                if (FastMath.abs(y1) <= tolerance) {\n                    setResult(x1, getEvaluations());\n                    return result;\n                }\n            }\n        }\n\n        throw new TooManyEvaluationsException(getMaxEvaluations());\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..14855b8fc 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,126 +125,108 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+package org.apache.commons.math3.analysis.solvers;\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.exception.NoBracketingException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.util.FastMath;\n \n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+/**\n+ * Implements the secant method for root-finding (approximating a zero of a function).\n+ * Example usage:\n+ * <pre>\n+ * double root = new SecantSolver().solve(100, new Sin(), 0, 1);\n+ * </pre>\n+ *\n+ * @version $Id: SecantSolver.java 1244107 2012-02-14 16:17:55Z erans $\n+ *\n+ * @deprecated As of 3.1. To be removed in 4.0. Replaced by {@link IllinoisSolver} or {@link PegasusSolver}.\n+ */\n+@Deprecated\n+public class SecantSolver extends AbstractUnivariateSolver {\n+    /**\n+     * Default constructor.\n+     *\n+     * The default absolute accuracy is {@link\n+     * org.apache.commons.math3.util.Precision#SAFE_MIN}.\n+     *\n+     * The default relative accuracy is 1e-6.\n+     */\n+    public SecantSolver() {\n+        this(1e-6);\n+    }\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+    /**\n+     * Construct a solver with a given absolute accuracy.\n+     *\n+     * The default relative accuracy is 1e-6.\n+     *\n+     * @param absoluteAccuracy Maximum absolute error.\n+     */\n+    public SecantSolver(double absoluteAccuracy) {\n+        super(absoluteAccuracy);\n+    }\n \n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy Maximum relative error.\n+     * @param absoluteAccuracy Maximum absolute error.\n+     */\n+    public SecantSolver(final double relativeAccuracy, final double absoluteAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy);\n+    }\n \n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n-            }\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy Maximum relative error.\n+     * @param absoluteAccuracy Maximum absolute error.\n+     * @param maxEval Maximum number of evaluations.\n+     */\n+    public SecantSolver(double relativeAccuracy, double absoluteAccuracy,\n+                        int maxEval) {\n+        super(relativeAccuracy, absoluteAccuracy, maxEval);\n+    }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n-            } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n-                }\n+    /** {@inheritDoc} */\n+    @Override\n+    protected double doSolve()\n+        throws TooManyEvaluationsException, NoBracketingException {\n+        double min = getMin();\n+        double max = getMax();\n+        double x0 = min;\n+        double x1 = max;\n+        double y0 = computeObjectiveValue(x0);\n+        double y1 = computeObjectiveValue(x1);\n+\n+        while (getEvaluations() < getMaxEvaluations()) {\n+            double delta = y1 * (x1 - x0) / (y0 - y1);\n+            double x = x1 - delta;\n+            double y = computeObjectiveValue(x);\n+            if (FastMath.abs(y) <= getFunctionValueAccuracy()) {\n+                setResult(x, getEvaluations());\n+                return result;\n             }\n-            // Update from [x0, x1] to [x0, x].\n+            x0 = x1;\n+            y0 = y1;\n             x1 = x;\n-            f1 = fx;\n-\n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n-                }\n-            }\n-\n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n+            y1 = y;\n+\n+            if (FastMath.abs(y1 - y0) < getAbsoluteAccuracy()) {\n+                double tolerance = FastMath.max(getRelativeAccuracy() * FastMath.max(FastMath.abs(x0), FastMath.abs(x1)),\n+                                                getAbsoluteAccuracy());\n+                if (FastMath.abs(y1) <= tolerance) {\n+                    setResult(x1, getEvaluations());\n+                    return result;\n                 }\n             }\n         }\n+\n+        throw new TooManyEvaluationsException(getMaxEvaluations());\n     }\n+}\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}