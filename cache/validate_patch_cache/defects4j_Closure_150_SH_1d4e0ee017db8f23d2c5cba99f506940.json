{
    "patch": "    attachLiteralTypes(n);\n\n    if (NodeUtil.isFunctionExpression(n)) {\n      if (scope.getParent() != null) {\n        // ignore function expressions inside a function.\n        return;\n      }\n      defineFunctionExpression(n);\n      return;\n    }\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (parent != null && parent.getType() == Token.NAME) {\n          return;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      case Token.LP:\n        if (parent == scope.getRootNode()) {\n          handleFunctionInputs(n);\n        }\n        break;\n      default:\n        break;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..0c936b7d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,38 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+    attachLiteralTypes(n);\n+\n+    if (NodeUtil.isFunctionExpression(n)) {\n+      if (scope.getParent() != null) {\n+        // ignore function expressions inside a function.\n+        return;\n       }\n+      defineFunctionExpression(n);\n+      return;\n+    }\n+\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        if (parent != null && parent.getType() == Token.NAME) {\n+          return;\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      case Token.LP:\n+        if (parent == scope.getRootNode()) {\n+          handleFunctionInputs(n);\n+        }\n+        break;\n+      default:\n+        break;\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}