{
    "patch": "public static int largest_divisor(int n) {\n    if (n < 1) {\n        throw new IllegalArgumentException(\"Input must be positive\");\n    }\n    int largest = 1;\n    for (int i = 2; i <= n/2; i++) {\n        if (n % i == 0 && i > largest) {\n            largest = i;\n        }\n    }\n    if (n % largest == 0) {\n        return largest;\n    } else {\n        return n;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java b/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\nindex e93b282..0ae4707 100644\n--- a/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\n+++ b/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\n@@ -1,11 +1,20 @@\n package humaneval.buggy;\n \n public class LARGEST_DIVISOR {\n-    public static int largest_divisor(int n) {\n-        for (int i = n; i >= 0; i -= 1){\n-            if (n % i == 0)\n-                return i;\n+public static int largest_divisor(int n) {\n+    if (n < 1) {\n+        throw new IllegalArgumentException(\"Input must be positive\");\n+    }\n+    int largest = 1;\n+    for (int i = 2; i <= n/2; i++) {\n+        if (n % i == 0 && i > largest) {\n+            largest = i;\n         }\n-        return 1;\n     }\n+    if (n % largest == 0) {\n+        return largest;\n+    } else {\n+        return n;\n+    }\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}