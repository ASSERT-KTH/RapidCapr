{
    "patch": "\n        if (oldMockHandler instanceof MockHandler) {\n            MockHandler<T> oldMockHandlerCast = (MockHandler<T>) oldMockHandler;\n            MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandlerCast);\n            MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl)org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.CALLS_REAL_METHODS));\n\n            if (mock instanceof Factory) {\n                ((Factory) mock).setCallback(0, newFilter);\n            } else {\n                org.mockito.internal.util.MockUtil mockUtil = new org.mockito.internal.util.MockUtil();\n                if (mockUtil.isMock(mock)) {\n                    Mockito.mock((Class<T>) mock.getClass().getSuperclass(), newFilter);\n                } else {\n                    Mockito.mock((Class<T>) mock.getClass(), newFilter);\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..40c10ae86 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,26 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+        if (oldMockHandler instanceof MockHandler) {\n+            MockHandler<T> oldMockHandlerCast = (MockHandler<T>) oldMockHandler;\n+            MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandlerCast);\n+            MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl)org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.CALLS_REAL_METHODS));\n+\n+            if (mock instanceof Factory) {\n+                ((Factory) mock).setCallback(0, newFilter);\n+            } else {\n+                org.mockito.internal.util.MockUtil mockUtil = new org.mockito.internal.util.MockUtil();\n+                if (mockUtil.isMock(mock)) {\n+                    Mockito.mock((Class<T>) mock.getClass().getSuperclass(), newFilter);\n+                } else {\n+                    Mockito.mock((Class<T>) mock.getClass(), newFilter);\n+                }\n+            }\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}