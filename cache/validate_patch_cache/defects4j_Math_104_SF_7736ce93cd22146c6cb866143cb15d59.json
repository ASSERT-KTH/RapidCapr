{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\n\npublic class GammaFunction {\n\n    /**\n     * Regularized gamma function P(a,x)\n     * <p>\n     * This implementation is based on the implementation in Apache Commons Math\n     *\n     * @param a\n     * @param x\n     * @return the regularized gamma function P(a,x)\n     */\n    public static double regularizedGamma(double a, double x) {\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n            return Double.NaN;\n        }\n        if (x == 0.0) {\n            return 0.0;\n        }\n        if (x >= a + Gamma.LOG_MAX_VALUE) {\n            return 1.0;\n        }\n\n        double l = 1.0 / a;\n        double r = (1.0 / x) * ((x / a) - 1.0);\n        double c = 1.0;\n        double p = 1.0 + r / c;\n        double q = 1.0;\n        double s = p;\n\n        while (Math.abs(p / s - 1.0) > MathUtils.EPSILON) {\n            l += 1.0;\n            r = (l / x) * r - (l - a) / (l * (l - 1.0));\n            c *= (l - a) / l;\n            q = q + (r * c);\n            p = 1.0 + (r / q);\n            s = p * s;\n        }\n\n        return FastMath.exp(-x + (a * FastMath.log(x)) - Gamma.logGamma(a)) * s;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..14c2df48c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,51 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+public class GammaFunction {\n+\n+    /**\n+     * Regularized gamma function P(a,x)\n+     * <p>\n+     * This implementation is based on the implementation in Apache Commons Math\n+     *\n+     * @param a\n+     * @param x\n+     * @return the regularized gamma function P(a,x)\n+     */\n+    public static double regularizedGamma(double a, double x) {\n+        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+            return Double.NaN;\n+        }\n+        if (x == 0.0) {\n+            return 0.0;\n+        }\n+        if (x >= a + Gamma.LOG_MAX_VALUE) {\n+            return 1.0;\n+        }\n+\n+        double l = 1.0 / a;\n+        double r = (1.0 / x) * ((x / a) - 1.0);\n+        double c = 1.0;\n+        double p = 1.0 + r / c;\n+        double q = 1.0;\n+        double s = p;\n+\n+        while (Math.abs(p / s - 1.0) > MathUtils.EPSILON) {\n+            l += 1.0;\n+            r = (l / x) * r - (l - a) / (l * (l - 1.0));\n+            c *= (l - a) / l;\n+            q = q + (r * c);\n+            p = 1.0 + (r / q);\n+            s = p * s;\n+        }\n+\n+        return FastMath.exp(-x + (a * FastMath.log(x)) - Gamma.logGamma(a)) * s;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}