{
    "patch": "            boolean retry = false;\n            if (iSavedFieldsCount == count) {\n                for (int i = 0; i < count; i++) {\n                    if (savedFields[i].iField.getType() != iSavedFields[i].iField.getType() ||\n                        savedFields[i].iValue != iSavedFields[i].iValue) {\n                        retry = true;\n                        break;\n                    }\n                }\n            }\n            iSavedFieldsCount = count;\n            iSavedFieldsShared = false;\n            if (retry) {\n                return computeMillis(resetFields, text);\n            } else {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..02f8de4f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,25 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            boolean retry = false;\n+            if (iSavedFieldsCount == count) {\n+                for (int i = 0; i < count; i++) {\n+                    if (savedFields[i].iField.getType() != iSavedFields[i].iField.getType() ||\n+                        savedFields[i].iValue != iSavedFields[i].iValue) {\n+                        retry = true;\n+                        break;\n+                    }\n+                }\n+            }\n+            iSavedFieldsCount = count;\n+            iSavedFieldsShared = false;\n+            if (retry) {\n+                return computeMillis(resetFields, text);\n+            } else {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}