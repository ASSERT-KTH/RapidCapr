{
    "patch": "if (value.isFunction()) {\n  // Don't inline singleton getter methods calls as this confused class removing logic.\n  if (reference.getParent().isGetElem()) {\n    Node parent = reference.getParent().getParent();\n    if (parent.isExprResult() && parent.hasOneChild()) {\n      Node grandparent = parent.getParent();\n      if (grandparent.isCall()) {\n        Node callTarget = grandparent.getFirstChild();\n        if (callTarget.isName()) {\n          String calleeName = callTarget.getString();\n          Scope hoistScope = getHoistScopeNode(initialization).getScope();\n          if (calleeName != null && hoistScope != null) {\n            Node definition = hoistScope.getClosestHoistScope().getOwnSlot(\n                calleeName, hoistScope.getVar(), hoistScope.isFunction()).getNode();\n            if (definition != null && NodeUtil.isFunctionDefinition(definition)) {\n              return false;\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..361bab47 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,29 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+if (value.isFunction()) {\n+  // Don't inline singleton getter methods calls as this confused class removing logic.\n+  if (reference.getParent().isGetElem()) {\n+    Node parent = reference.getParent().getParent();\n+    if (parent.isExprResult() && parent.hasOneChild()) {\n+      Node grandparent = parent.getParent();\n+      if (grandparent.isCall()) {\n+        Node callTarget = grandparent.getFirstChild();\n+        if (callTarget.isName()) {\n+          String calleeName = callTarget.getString();\n+          Scope hoistScope = getHoistScopeNode(initialization).getScope();\n+          if (calleeName != null && hoistScope != null) {\n+            Node definition = hoistScope.getClosestHoistScope().getOwnSlot(\n+                calleeName, hoistScope.getVar(), hoistScope.isFunction()).getNode();\n+            if (definition != null && NodeUtil.isFunctionDefinition(definition)) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n         }\n       }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}