{
    "patch": "                boolean conflict = false;\n                SavedField savedField = savedFields[i];\n                try {\n                    millis = savedField.set(millis, resetFields);\n                } catch (IllegalFieldValueException ex) {\n                    if (text == null) {\n                        throw ex;\n                    }\n                    boolean isDateField = savedField.iField.getType().equals(DateTimeFieldType.dayOfMonth())\n                            || savedField.iField.getType().equals(DateTimeFieldType.monthOfYear())\n                            || savedField.iField.getType().equals(DateTimeFieldType.year());\n                    boolean conflictExists = false;\n                    int j;\n                    for (j = 0; j < i; j++) {\n                        if (savedFields[j].iField.equals(savedField.iField)) {\n                            conflict = true;\n                            conflictExists = true;\n                            break;\n                        }\n                    }\n                    if (isDateField || conflictExists) {\n                        if (resetFields) {\n                            // try to resolve the conflict\n                            DateTimeField field = savedField.iField;\n                            if (savedField.isSaved()) {\n                                // if conflict exists, refer to saved value\n                                field = savedField.getDateTimeField();\n                            }\n\n                            int value = ex.getIllegalFieldValue();\n                            int minValue = field.getMinimumValue();\n                            int maxValue = field.getMaximumValue();\n                            if (value < minValue || value > maxValue) {\n                                // try to resolve the conflict by adjusting the value\n                                if (value < minValue && field.getType().equals(DateTimeFieldType.monthOfYear())) {\n                                    int oldYear = getFieldValue(DateTimeFieldType.year());\n                                    saveField(DateTimeFieldType.year(), oldYear + 1);\n                                    value = savedField.set(value + 12, isSaved());\n                                    if (value < minValue) {\n                                        conflict = true;\n                                    } else {\n                                        conflict = false;\n                                    }\n                                } else if (value > maxValue\n                                        && field.getType().equals(DateTimeFieldType.monthOfYear())) {\n                                    int oldYear = getFieldValue(DateTimeFieldType.year());\n                                    saveField(DateTimeFieldType.year(), oldYear - 1);\n                                    value = savedField.set(value - 12, isSaved());\n                                    if (value > maxValue) {\n                                        conflict = true;\n                                    } else {\n                                        conflict = false;\n                                    }\n                                } else {\n                                    conflict = true;\n                                }\n                            } else {\n                                conflict = true;\n                            }\n                        } else {\n                            conflict = true;\n                        }\n                    } else {\n                        conflict = true;\n                    }\n                    if (conflict) {\n                        if (text == null) {\n                            throw ex;\n                        }\n                        char conflictChar = text.charAt(savedField.getEnd() - 1);\n                        String conflictingPart = conflictChar == 'T' ? \"Time\" : \"Date\";\n                        throw new IllegalArgumentException(\n                                \"Conflict in \" + conflictingPart + \" parsing: \" + ex.getMessage());\n                    }\n                    i = -1;  // restart",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..0850a674 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,81 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                boolean conflict = false;\n+                SavedField savedField = savedFields[i];\n+                try {\n+                    millis = savedField.set(millis, resetFields);\n+                } catch (IllegalFieldValueException ex) {\n+                    if (text == null) {\n+                        throw ex;\n+                    }\n+                    boolean isDateField = savedField.iField.getType().equals(DateTimeFieldType.dayOfMonth())\n+                            || savedField.iField.getType().equals(DateTimeFieldType.monthOfYear())\n+                            || savedField.iField.getType().equals(DateTimeFieldType.year());\n+                    boolean conflictExists = false;\n+                    int j;\n+                    for (j = 0; j < i; j++) {\n+                        if (savedFields[j].iField.equals(savedField.iField)) {\n+                            conflict = true;\n+                            conflictExists = true;\n+                            break;\n+                        }\n+                    }\n+                    if (isDateField || conflictExists) {\n+                        if (resetFields) {\n+                            // try to resolve the conflict\n+                            DateTimeField field = savedField.iField;\n+                            if (savedField.isSaved()) {\n+                                // if conflict exists, refer to saved value\n+                                field = savedField.getDateTimeField();\n+                            }\n+\n+                            int value = ex.getIllegalFieldValue();\n+                            int minValue = field.getMinimumValue();\n+                            int maxValue = field.getMaximumValue();\n+                            if (value < minValue || value > maxValue) {\n+                                // try to resolve the conflict by adjusting the value\n+                                if (value < minValue && field.getType().equals(DateTimeFieldType.monthOfYear())) {\n+                                    int oldYear = getFieldValue(DateTimeFieldType.year());\n+                                    saveField(DateTimeFieldType.year(), oldYear + 1);\n+                                    value = savedField.set(value + 12, isSaved());\n+                                    if (value < minValue) {\n+                                        conflict = true;\n+                                    } else {\n+                                        conflict = false;\n+                                    }\n+                                } else if (value > maxValue\n+                                        && field.getType().equals(DateTimeFieldType.monthOfYear())) {\n+                                    int oldYear = getFieldValue(DateTimeFieldType.year());\n+                                    saveField(DateTimeFieldType.year(), oldYear - 1);\n+                                    value = savedField.set(value - 12, isSaved());\n+                                    if (value > maxValue) {\n+                                        conflict = true;\n+                                    } else {\n+                                        conflict = false;\n+                                    }\n+                                } else {\n+                                    conflict = true;\n+                                }\n+                            } else {\n+                                conflict = true;\n+                            }\n+                        } else {\n+                            conflict = true;\n+                        }\n+                    } else {\n+                        conflict = true;\n+                    }\n+                    if (conflict) {\n+                        if (text == null) {\n+                            throw ex;\n+                        }\n+                        char conflictChar = text.charAt(savedField.getEnd() - 1);\n+                        String conflictingPart = conflictChar == 'T' ? \"Time\" : \"Date\";\n+                        throw new IllegalArgumentException(\n+                                \"Conflict in \" + conflictingPart + \" parsing: \" + ex.getMessage());\n+                    }\n+                    i = -1;  // restart\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'try' without 'catch' or 'finally'",
    "test_result": "ERROR"
}