{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Arguments 'a' and 'x' must be positive.\");\n    }\n    \n    double eps = 10e-9; // use a smaller tolerance\n    double p = 0;\n    double ap = a;\n    double del = 1.0 / a;\n    double sum = del;\n    int i = 1;\n    \n    while (Math.abs(del) > Math.abs(sum) * eps && i <= 1000) {\n        ++i;\n        ap += 1;\n        del *= x / ap;\n        sum += del;\n    }\n    p = Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n    return p;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b4de0f408 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,27 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Arguments 'a' and 'x' must be positive.\");\n+    }\n+    \n+    double eps = 10e-9; // use a smaller tolerance\n+    double p = 0;\n+    double ap = a;\n+    double del = 1.0 / a;\n+    double sum = del;\n+    int i = 1;\n+    \n+    while (Math.abs(del) > Math.abs(sum) * eps && i <= 1000) {\n+        ++i;\n+        ap += 1;\n+        del *= x / ap;\n+        sum += del;\n+    }\n+    p = Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n+    return p;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}