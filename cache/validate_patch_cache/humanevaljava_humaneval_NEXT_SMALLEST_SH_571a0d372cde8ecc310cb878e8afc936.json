{
    "patch": "public static Integer next_smallest(int[] lst) {\n        List<Integer> numbers = new ArrayList<Integer>();\n        for (Integer n : lst)\n            numbers.add(n);\n        Set<Integer> no_duplicate = new HashSet<Integer>(numbers);\n\n        List<Integer> uniqueList = new ArrayList<Integer>(no_duplicate);\n        if (uniqueList.size() < 2) {\n            return null;\n        }\n        Collections.sort(uniqueList);\n        return uniqueList.get(1);\n    }",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/NEXT_SMALLEST.java b/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\nindex 7791efd..a32fb33 100644\n--- a/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\n+++ b/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\n@@ -13,7 +13,19 @@ next_smallest([1, 1]) == None */\n \n public class NEXT_SMALLEST {\n     public static Integer next_smallest(int[] lst) {\n+public static Integer next_smallest(int[] lst) {\n         List<Integer> numbers = new ArrayList<Integer>();\n+        for (Integer n : lst)\n+            numbers.add(n);\n+        Set<Integer> no_duplicate = new HashSet<Integer>(numbers);\n+\n+        List<Integer> uniqueList = new ArrayList<Integer>(no_duplicate);\n+        if (uniqueList.size() < 2) {\n+            return null;\n+        }\n+        Collections.sort(uniqueList);\n+        return uniqueList.get(1);\n+    }\n         for (Integer n : lst)\n             numbers.add(n);\n         Integer[] no_duplicate = numbers.toArray(new Integer[] {});",
    "result_reason": " /tmp/humaneval-NEXT_SMALLEST/src/main/java/humaneval/buggy/NEXT_SMALLEST.java:[16,1] illegal start of expression",
    "test_result": "ERROR"
}