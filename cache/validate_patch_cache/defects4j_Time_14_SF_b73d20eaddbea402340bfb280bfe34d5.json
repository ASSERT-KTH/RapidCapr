{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        // get the year and month\n        int year = 0, month = 0, day = 0;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            int fieldType = partial.getFieldType(i).getDurationType().getFieldType();\n            switch (fieldType) {\n                case DurationFieldType.years():\n                    year = values[i];\n                    break;\n                case DurationFieldType.months():\n                    month = values[i];\n                    break;\n                case DurationFieldType.days():\n                    day = values[i];\n                    break;\n                default:\n                    throw new UnsupportedOperationException(\"Unrecognised duration field\");\n            }\n        }\n        \n        // calculate new month and year values\n        int newMonth = month + valueToAdd;\n        int newYear = year + (newMonth / 12);\n        newMonth = newMonth % 12;\n        \n        // calculate the last day of the new month\n        LocalDate newDate = (newMonth == month) ?\n                            new LocalDate(year, month, day, iChronology) :\n                            new LocalDate(newYear, newMonth + 1, 1, iChronology).minusDays(1);\n        int newDay = Math.min(day, newDate.getDayOfMonth());\n        \n        // calculate the resulting values\n        int[] newValues = newDate.getValues();\n        newValues[0] = newYear;\n        newValues[1] = newMonth + 1;\n        newValues[2] = newDay;\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..a96b40fe 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,54 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        // get the year and month\n+        int year = 0, month = 0, day = 0;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            int fieldType = partial.getFieldType(i).getDurationType().getFieldType();\n+            switch (fieldType) {\n+                case DurationFieldType.years():\n+                    year = values[i];\n+                    break;\n+                case DurationFieldType.months():\n+                    month = values[i];\n+                    break;\n+                case DurationFieldType.days():\n+                    day = values[i];\n+                    break;\n+                default:\n+                    throw new UnsupportedOperationException(\"Unrecognised duration field\");\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        \n+        // calculate new month and year values\n+        int newMonth = month + valueToAdd;\n+        int newYear = year + (newMonth / 12);\n+        newMonth = newMonth % 12;\n+        \n+        // calculate the last day of the new month\n+        LocalDate newDate = (newMonth == month) ?\n+                            new LocalDate(year, month, day, iChronology) :\n+                            new LocalDate(newYear, newMonth + 1, 1, iChronology).minusDays(1);\n+        int newDay = Math.min(day, newDate.getDayOfMonth());\n+        \n+        // calculate the resulting values\n+        int[] newValues = newDate.getValues();\n+        newValues[0] = newYear;\n+        newValues[1] = newMonth + 1;\n+        newValues[2] = newDay;\n+        return newValues;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}