{
    "patch": "import org.mockito.cglib.proxy.Enhancer;\nimport org.mockito.cglib.proxy.Factory;\n\npublic class ResetMockHelper {\n\n    public static <T> void resetMock(T mock) {\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(mock.getClass());\n        enhancer.setCallback(new MockInterceptor<>(getMockHandler(mock)));\n        T newMock = (T) enhancer.create();\n        if (mock instanceof Factory) {\n            ((Factory)mock).setCallback(0, null);\n        }\n        copyMockState(newMock, mock);\n    }\n\n    private static <T> MockHandlerInterface<T> getMockHandler(T mock) {\n        return (MockHandlerInterface<T>) org.mockito.Mockito.mockingDetails(mock).getMockHandler();\n    }\n\n    private static <T> void copyMockState(T newMock, T oldMock) {\n        org.mockito.Mockito.reset(newMock);\n        org.mockito.Mockito.when(newMock.toString()).thenReturn(oldMock.toString());\n        org.mockito.Mockito.when(newMock.hashCode()).thenReturn(oldMock.hashCode());\n        org.mockito.Mockito.when(newMock.equals(oldMock)).thenReturn(true);\n    }\n\n    private static class MockInterceptor<T> implements org.mockito.cglib.proxy.MethodInterceptor {\n\n        private final MockHandlerInterface<T> mockHandler;\n\n        public MockInterceptor(MockHandlerInterface<T> mockHandler) {\n            this.mockHandler = mockHandler;\n        }\n\n        public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args, org.mockito.cglib.proxy.MethodProxy proxy) throws Throwable {\n            Object result;\n            if (mockHandler != null && mockHandler.isMocked(method)) {\n                result = mockHandler.handle(obj, method, args);\n            } else {\n                result = proxy.invokeSuper(obj, args);\n            }\n            return result;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..19468e984 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,53 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.cglib.proxy.Enhancer;\n+import org.mockito.cglib.proxy.Factory;\n+\n+public class ResetMockHelper {\n+\n+    public static <T> void resetMock(T mock) {\n+        Enhancer enhancer = new Enhancer();\n+        enhancer.setSuperclass(mock.getClass());\n+        enhancer.setCallback(new MockInterceptor<>(getMockHandler(mock)));\n+        T newMock = (T) enhancer.create();\n+        if (mock instanceof Factory) {\n+            ((Factory)mock).setCallback(0, null);\n+        }\n+        copyMockState(newMock, mock);\n+    }\n+\n+    private static <T> MockHandlerInterface<T> getMockHandler(T mock) {\n+        return (MockHandlerInterface<T>) org.mockito.Mockito.mockingDetails(mock).getMockHandler();\n+    }\n+\n+    private static <T> void copyMockState(T newMock, T oldMock) {\n+        org.mockito.Mockito.reset(newMock);\n+        org.mockito.Mockito.when(newMock.toString()).thenReturn(oldMock.toString());\n+        org.mockito.Mockito.when(newMock.hashCode()).thenReturn(oldMock.hashCode());\n+        org.mockito.Mockito.when(newMock.equals(oldMock)).thenReturn(true);\n+    }\n+\n+    private static class MockInterceptor<T> implements org.mockito.cglib.proxy.MethodInterceptor {\n+\n+        private final MockHandlerInterface<T> mockHandler;\n+\n+        public MockInterceptor(MockHandlerInterface<T> mockHandler) {\n+            this.mockHandler = mockHandler;\n+        }\n+\n+        public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args, org.mockito.cglib.proxy.MethodProxy proxy) throws Throwable {\n+            Object result;\n+            if (mockHandler != null && mockHandler.isMocked(method)) {\n+                result = mockHandler.handle(obj, method, args);\n+            } else {\n+                result = proxy.invokeSuper(obj, args);\n+            }\n+            return result;\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}