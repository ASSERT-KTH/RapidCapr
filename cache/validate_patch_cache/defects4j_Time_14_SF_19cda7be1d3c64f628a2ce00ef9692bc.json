{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    int length = partial.size();\n    if (length == 0) {\n        return values;\n    }\n    if (length == 1) {\n        int newValue = partial.getFieldType(0).getField(iChronology).addWrapField(values[0], valueToAdd);\n        return new int[] {newValue};\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        boolean changed = false;\n        for( int i=0; i<length; i++) {\n            DurationField field = partial.getFieldType(i).getField(iChronology).getDurationField();\n            if (i > 0 && field.isSupported()) {\n                int prevValue = values[i-1];\n                int currentValue = values[i];\n                int nextValue = (i+1 < length) ? values[i+1] : prevValue;\n                int maximumValue = field.getMaximumValue(prevValue);\n                int minimumValue = field.getMinimumValue(prevValue);\n                if (valueToAdd > 0) {\n                    if (currentValue > maximumValue && nextValue >= minimumValue) {\n                        // Must be a year/month roll over\n                        int add = maximumValue - currentValue + 1;\n                        values[i] = currentValue + add;\n                        valueToAdd -= (add * field.getUnitMillis());\n                        // Update next value\n                        DurationField nextField = partial.getFieldType(i+1).getField(iChronology).getDurationField();\n                        if (nextField.isSupported()) {\n                            int maxNextValue = nextField.getMaximumValue(values[i]);\n                            values[i+1] = Math.min(values[i+1], maxNextValue);\n                        }\n                        changed = true;\n                    }\n                } else {\n                    if (currentValue < minimumValue && nextValue <= maximumValue) {\n                        // Must be a year/month roll over\n                        int add = currentValue - minimumValue + 1;\n                        values[i] = currentValue - add;\n                        valueToAdd += (add * field.getUnitMillis());\n                        // Update next value\n                        DurationField nextField = partial.getFieldType(i+1).getField(iChronology).getDurationField();\n                        if (nextField.isSupported()) {\n                            int minNextValue = nextField.getMinimumValue(values[i]);\n                            values[i+1] = Math.max(values[i+1], minNextValue);\n                        }\n                        changed = true;\n                    }\n                }\n            }\n        }\n        if (changed) {\n            long instant = 0L;\n            for (int i = 0; i < length; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        }\n    }\n\n    return super.add(partial, fieldIndex, values, valueToAdd).getValues();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..644305a7 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,74 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    int length = partial.size();\n+    if (length == 0) {\n+        return values;\n+    }\n+    if (length == 1) {\n+        int newValue = partial.getFieldType(0).getField(iChronology).addWrapField(values[0], valueToAdd);\n+        return new int[] {newValue};\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        boolean changed = false;\n+        for( int i=0; i<length; i++) {\n+            DurationField field = partial.getFieldType(i).getField(iChronology).getDurationField();\n+            if (i > 0 && field.isSupported()) {\n+                int prevValue = values[i-1];\n+                int currentValue = values[i];\n+                int nextValue = (i+1 < length) ? values[i+1] : prevValue;\n+                int maximumValue = field.getMaximumValue(prevValue);\n+                int minimumValue = field.getMinimumValue(prevValue);\n+                if (valueToAdd > 0) {\n+                    if (currentValue > maximumValue && nextValue >= minimumValue) {\n+                        // Must be a year/month roll over\n+                        int add = maximumValue - currentValue + 1;\n+                        values[i] = currentValue + add;\n+                        valueToAdd -= (add * field.getUnitMillis());\n+                        // Update next value\n+                        DurationField nextField = partial.getFieldType(i+1).getField(iChronology).getDurationField();\n+                        if (nextField.isSupported()) {\n+                            int maxNextValue = nextField.getMaximumValue(values[i]);\n+                            values[i+1] = Math.min(values[i+1], maxNextValue);\n+                        }\n+                        changed = true;\n+                    }\n+                } else {\n+                    if (currentValue < minimumValue && nextValue <= maximumValue) {\n+                        // Must be a year/month roll over\n+                        int add = currentValue - minimumValue + 1;\n+                        values[i] = currentValue - add;\n+                        valueToAdd += (add * field.getUnitMillis());\n+                        // Update next value\n+                        DurationField nextField = partial.getFieldType(i+1).getField(iChronology).getDurationField();\n+                        if (nextField.isSupported()) {\n+                            int minNextValue = nextField.getMinimumValue(values[i]);\n+                            values[i+1] = Math.max(values[i+1], minNextValue);\n+                        }\n+                        changed = true;\n+                    }\n+                }\n+            }\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n+        if (changed) {\n             long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            for (int i = 0; i < length; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n     }\n \n+    return super.add(partial, fieldIndex, values, valueToAdd).getValues();\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}