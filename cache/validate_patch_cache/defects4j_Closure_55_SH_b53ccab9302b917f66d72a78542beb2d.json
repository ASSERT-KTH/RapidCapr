{
    "patch": "    if (NodeUtil.isFunctionExpression(n)) {\n      Node parent = n.getParent();\n      if (parent.getType() == Token.ADD) {\n        return false;\n      }\n      return true;\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..08094a5e 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,14 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (NodeUtil.isFunctionExpression(n)) {\n+      Node parent = n.getParent();\n+      if (parent.getType() == Token.ADD) {\n+        return false;\n+      }\n+      return true;\n+    }\n+    return false;\n   }\n \n   /**",
    "result_reason": "java.lang.IllegalStateException: Expected function but was call Reference node CALL 4 [free_call: 1] [source_file: testcode]",
    "test_result": "FAIL"
}