{
    "patch": "public Dfp multiply(final int x) {\n    if (x >= 0 && x < RADIX) {\n        return multiplyFast(x);\n    } \n    Dfp product = newInstance();\n    if (x == 0) {\n        return product;\n    }\n    boolean negative = false;\n    if (x < 0) {\n        negative = true;\n        x = -x;\n    }\n    int factor = RADIX;\n    while (x > 0) {\n        factor >>= 1;\n        if ((x & 1) != 0) {\n            product = product.add(multiplyFast(factor));\n        }\n        x >>= 1;\n    }\n    if (negative) {\n        product = product.negate();\n    }\n    return product;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f84218ebd..433ac94ad 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -593,9 +593,32 @@ public class Fraction\n      *\n      * @return the fraction percentage as a <tt>double</tt>.\n      */\n-    public double percentageValue() {\n-        return multiply(100).doubleValue();\n+public Dfp multiply(final int x) {\n+    if (x >= 0 && x < RADIX) {\n+        return multiplyFast(x);\n+    } \n+    Dfp product = newInstance();\n+    if (x == 0) {\n+        return product;\n     }\n+    boolean negative = false;\n+    if (x < 0) {\n+        negative = true;\n+        x = -x;\n+    }\n+    int factor = RADIX;\n+    while (x > 0) {\n+        factor >>= 1;\n+        if ((x & 1) != 0) {\n+            product = product.add(multiplyFast(factor));\n+        }\n+        x >>= 1;\n+    }\n+    if (negative) {\n+        product = product.negate();\n+    }\n+    return product;\n+}\n \n     /**\n      * <p>Creates a {@code Fraction} instance with the 2 parts",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}