{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    boolean isContiguousField = DateTimeUtils.isContiguous(partial) && (\n            (fieldIndex == 0 && partial.size() == 2) || fieldIndex == 1);\n    if (isContiguousField) {\n        long instant = 0L;\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue();\n        int originalMonthOfYear = iChronology.monthOfYear().get(values[fieldIndex]);\n        int newMonthOfYear = FieldUtils.safeAdd(originalMonthOfYear, valueToAdd);\n        if (newMonthOfYear < iChronology.monthOfYear().getMinimumValue() || \n            newMonthOfYear > iChronology.monthOfYear().getMaximumValue()) {\n            throw new IllegalArgumentException(\"Month value must be between 1 and 12\");\n        }\n\n        instant = partial.getFieldType(fieldIndex).getField(iChronology).set(instant, newMonthOfYear);\n\n        if (iChronology.monthOfYear().getMaximumValue(instant) <= originalMonthOfYear) {\n            // if the new month has fewer days than the original month, set the day of the month to the max allowed day.\n            instant = iChronology.dayOfMonth().set(instant, iChronology.dayOfMonth().getMaximumValue(instant));\n        }\n\n        if (iChronology.monthOfYear().get(instant) == 2 && \n            iChronology.dayOfMonth().get(instant) > 28 && \n            !iChronology.year().isLeap(iChronology.set(partial, instant))) {\n            // if it's not a leap year and we're in february with day of months greater than 28, adjust to february 28th\n            instant = iChronology.dayOfMonth().set(instant, 28);\n        }\n\n        return iChronology.get(partial, instant);\n    } \n    else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..1a20dc2a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,42 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    boolean isContiguousField = DateTimeUtils.isContiguous(partial) && (\n+            (fieldIndex == 0 && partial.size() == 2) || fieldIndex == 1);\n+    if (isContiguousField) {\n+        long instant = 0L;\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue();\n+        int originalMonthOfYear = iChronology.monthOfYear().get(values[fieldIndex]);\n+        int newMonthOfYear = FieldUtils.safeAdd(originalMonthOfYear, valueToAdd);\n+        if (newMonthOfYear < iChronology.monthOfYear().getMinimumValue() || \n+            newMonthOfYear > iChronology.monthOfYear().getMaximumValue()) {\n+            throw new IllegalArgumentException(\"Month value must be between 1 and 12\");\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+\n+        instant = partial.getFieldType(fieldIndex).getField(iChronology).set(instant, newMonthOfYear);\n+\n+        if (iChronology.monthOfYear().getMaximumValue(instant) <= originalMonthOfYear) {\n+            // if the new month has fewer days than the original month, set the day of the month to the max allowed day.\n+            instant = iChronology.dayOfMonth().set(instant, iChronology.dayOfMonth().getMaximumValue(instant));\n         }\n+\n+        if (iChronology.monthOfYear().get(instant) == 2 && \n+            iChronology.dayOfMonth().get(instant) > 28 && \n+            !iChronology.year().isLeap(iChronology.set(partial, instant))) {\n+            // if it's not a leap year and we're in february with day of months greater than 28, adjust to february 28th\n+            instant = iChronology.dayOfMonth().set(instant, 28);\n+        }\n+\n+        return iChronology.get(partial, instant);\n+    } \n+    else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "java.lang.IllegalArgumentException: Month value must be between 1 and 12",
    "test_result": "FAIL"
}