{
    "patch": "Node parentParent = parent.getParent();\nboolean isConstructor = NodeUtil.isCallTo(parentParent, AST_NEW);\nboolean isClassPropOverride = parent.getType() == Token.ASSIGN &&\n      parent.getFirstChild() == getprop;\nboolean isSuperClassPropOverride = NodeUtil.isCallTo(parentParent, AST_SUPER) &&\n      NodeUtil.getEnclosingType(NodeUtil.getEnclosingType(t.getScope())) !=\n      currentNode;\nboolean isOverride = isClassPropOverride || isSuperClassPropOverride ||\n      (isConstructor && objectType != null &&\n          propertyName.equals(objectType.getConstructor().getBaseType().toString()));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..a99a1fb5 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,16 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+Node parentParent = parent.getParent();\n+boolean isConstructor = NodeUtil.isCallTo(parentParent, AST_NEW);\n+boolean isClassPropOverride = parent.getType() == Token.ASSIGN &&\n+      parent.getFirstChild() == getprop;\n+boolean isSuperClassPropOverride = NodeUtil.isCallTo(parentParent, AST_SUPER) &&\n+      NodeUtil.getEnclosingType(NodeUtil.getEnclosingType(t.getScope())) !=\n+      currentNode;\n+boolean isOverride = isClassPropOverride || isSuperClassPropOverride ||\n+      (isConstructor && objectType != null &&\n+          propertyName.equals(objectType.getConstructor().getBaseType().toString()));\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}