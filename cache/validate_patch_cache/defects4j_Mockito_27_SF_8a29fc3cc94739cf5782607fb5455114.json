{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n    if (mock instanceof Proxy && Proxy.isProxyClass(mock.getClass())) {\n        InvocationHandler currentHandler = Proxy.getInvocationHandler(mock);\n        if (currentHandler instanceof MethodInterceptorChain) {\n            MethodInterceptorChain interceptorChain = (MethodInterceptorChain) currentHandler;\n\n            // Remove old filter\n            List<MethodInterceptorFilter> currentFilters = interceptorChain.getFilters();\n            currentFilters.removeIf(filter -> filter.getMockHandler() instanceof MockHandlerInterface.DefaultMockHandler);\n            // Add new filter\n            currentFilters.add(0, newFilter);\n\n            // Create new handler chain\n            InvocationHandler newHandler = new MethodInterceptorChain(mock, currentFilters);\n            ((Proxy) mock).setInvocationHandler(newHandler);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..34c5073db 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,30 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+    if (mock instanceof Proxy && Proxy.isProxyClass(mock.getClass())) {\n+        InvocationHandler currentHandler = Proxy.getInvocationHandler(mock);\n+        if (currentHandler instanceof MethodInterceptorChain) {\n+            MethodInterceptorChain interceptorChain = (MethodInterceptorChain) currentHandler;\n+\n+            // Remove old filter\n+            List<MethodInterceptorFilter> currentFilters = interceptorChain.getFilters();\n+            currentFilters.removeIf(filter -> filter.getMockHandler() instanceof MockHandlerInterface.DefaultMockHandler);\n+            // Add new filter\n+            currentFilters.add(0, newFilter);\n+\n+            // Create new handler chain\n+            InvocationHandler newHandler = new MethodInterceptorChain(mock, currentFilters);\n+            ((Proxy) mock).setInvocationHandler(newHandler);\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}