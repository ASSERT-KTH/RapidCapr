{
    "patch": "public static double getTypedPercent(String jsonString) {\n    try{\n        JSONObject jsonObject = new JSONObject(jsonString);\n        JSONArray jsonArray = jsonObject.getJSONArray(\"results\");\n        int total = 0;\n        int typedCount = 0;\n        for (int i = 0; i < jsonArray.length(); i++) {\n            JSONObject object = jsonArray.getJSONObject(i);\n            int count = object.getInt(\"count\");\n            String type = object.getString(\"type\");\n            if(type.equals(\"typed\")){\n                typedCount += count;\n            }\n            total += count;\n        }\n        return (double) typedCount / total * 100;\n    } catch (JSONException e) {\n        e.printStackTrace();\n        return 0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..84b4324e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonString) {\n+    try{\n+        JSONObject jsonObject = new JSONObject(jsonString);\n+        JSONArray jsonArray = jsonObject.getJSONArray(\"results\");\n+        int total = 0;\n+        int typedCount = 0;\n+        for (int i = 0; i < jsonArray.length(); i++) {\n+            JSONObject object = jsonArray.getJSONObject(i);\n+            int count = object.getInt(\"count\");\n+            String type = object.getString(\"type\");\n+            if(type.equals(\"typed\")){\n+                typedCount += count;\n+            }\n+            total += count;\n+        }\n+        return (double) typedCount / total * 100;\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+        return 0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}