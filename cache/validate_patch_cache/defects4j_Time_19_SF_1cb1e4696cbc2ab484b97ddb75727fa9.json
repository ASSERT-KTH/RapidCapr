{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int[] offsets = getRawOffsets(instantLocal);\n    int originalOffset = offsets[0];\n    int wallOffset = offsets[1];\n\n    // If the zone is fixed, then we return the fixed offset.\n    if (wallOffset == originalOffset) {\n        return originalOffset;\n    }\n\n    // Otherwise, we have a transition in progress.\n    long minMillis = getMinimumDateTime().getMillis();\n    long maxMillis = getMaximumDateTime().getMillis();\n\n    // If the local time is before the zone's minimum time, we need to adjust it.\n    if (instantLocal < minMillis) {\n        return getOffset(minMillis);\n    }\n\n    // If the local time is after the zone's maximum time, we need to adjust it.\n    if (instantLocal >= maxMillis) {\n        return getOffset(maxMillis - 1);\n    }\n\n    // Otherwise, we need to handle the overlap or gap.\n    long prevTransition = previousTransition(instantLocal);\n    long nextTransition = nextTransition(instantLocal);\n\n    // If there is no next transition, we have gone past the last transition,\n    // and we use the current offset.\n    if (nextTransition == instantLocal) {\n        return wallOffset;\n    }\n\n    // If the previous and next transitions are the same, we can use the current offset.\n    if (prevTransition == nextTransition) {\n        return wallOffset;\n    }\n\n    // We are in a gap if the wall offset and original offset are the same at the next transition.\n    boolean isInGap = (getOffset(nextTransition) == originalOffset);\n\n    // We are in an overlap if wallOffset is less than originalOffset, and\n    // if the current time is after the previous transition but before the next transition.\n    boolean isInOverlap = (wallOffset < originalOffset && instantLocal >= prevTransition &&\n                           instantLocal < nextTransition);\n\n    if (isInGap) {\n        return originalOffset;\n    }\n\n    if (isInOverlap) {\n        return wallOffset;\n    }\n\n    // We are in the standard offset period.\n    return originalOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..65663567 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,39 +877,65 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    int[] offsets = getRawOffsets(instantLocal);\n+    int originalOffset = offsets[0];\n+    int wallOffset = offsets[1];\n+\n+    // If the zone is fixed, then we return the fixed offset.\n+    if (wallOffset == originalOffset) {\n+        return originalOffset;\n+    }\n+\n+    // Otherwise, we have a transition in progress.\n+    long minMillis = getMinimumDateTime().getMillis();\n+    long maxMillis = getMaximumDateTime().getMillis();\n+\n+    // If the local time is before the zone's minimum time, we need to adjust it.\n+    if (instantLocal < minMillis) {\n+        return getOffset(minMillis);\n+    }\n+\n+    // If the local time is after the zone's maximum time, we need to adjust it.\n+    if (instantLocal >= maxMillis) {\n+        return getOffset(maxMillis - 1);\n     }\n \n+    // Otherwise, we need to handle the overlap or gap.\n+    long prevTransition = previousTransition(instantLocal);\n+    long nextTransition = nextTransition(instantLocal);\n+\n+    // If there is no next transition, we have gone past the last transition,\n+    // and we use the current offset.\n+    if (nextTransition == instantLocal) {\n+        return wallOffset;\n+    }\n+\n+    // If the previous and next transitions are the same, we can use the current offset.\n+    if (prevTransition == nextTransition) {\n+        return wallOffset;\n+    }\n+\n+    // We are in a gap if the wall offset and original offset are the same at the next transition.\n+    boolean isInGap = (getOffset(nextTransition) == originalOffset);\n+\n+    // We are in an overlap if wallOffset is less than originalOffset, and\n+    // if the current time is after the previous transition but before the next transition.\n+    boolean isInOverlap = (wallOffset < originalOffset && instantLocal >= prevTransition &&\n+                           instantLocal < nextTransition);\n+\n+    if (isInGap) {\n+        return originalOffset;\n+    }\n+\n+    if (isInOverlap) {\n+        return wallOffset;\n+    }\n+\n+    // We are in the standard offset period.\n+    return originalOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}