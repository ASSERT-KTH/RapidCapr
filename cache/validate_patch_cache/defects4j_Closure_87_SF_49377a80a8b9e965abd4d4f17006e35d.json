{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.isBlock()) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // Check if the node is a return statement\n        if (maybeExpr.isReturn()) {\n          return false;\n        }\n        // IE has a bug where event handlers behave differently when\n        // their return value is used vs. when their return value is in\n        // an EXPR_RESULT. It's pretty freaking weird. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        // We try to detect this case, and not fold EXPR_RESULTs\n        // into other expressions.\n        // We only have to worry about methods with an implicit 'this'\n        // param, or this doesn't happen.\n        if (!maybeExpr.isExprResult() || !maybeExpr.getFirstChild().isExpr()) {\n          return false;\n        }\n        for (Node ancestor : maybeExpr.getAncestors()) {\n          int type = ancestor.getType();\n          if (type == Token.ITERATION_STMT\n              || type == Token.FOR\n              || type == Token.WHILE\n              || type == Token.FUNCTION) {\n            return false;\n          }\n          if (type == Token.EXPR_VOID) {\n            return ancestor.getFirstChild() == maybeExpr;\n          }\n          if (type != Token.EXPR_RESULT && !NodeUtil.isStatementBlock(type)) {\n            break;\n          }\n        }\n        if (NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild())) {\n          return false;\n        }\n        return true;\n      }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..e97f83c5 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,48 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.isBlock()) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+        // Check if the node is a return statement\n+        if (maybeExpr.isReturn()) {\n+          return false;\n+        }\n+        // IE has a bug where event handlers behave differently when\n+        // their return value is used vs. when their return value is in\n+        // an EXPR_RESULT. It's pretty freaking weird. See:\n+        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+        // We try to detect this case, and not fold EXPR_RESULTs\n+        // into other expressions.\n+        // We only have to worry about methods with an implicit 'this'\n+        // param, or this doesn't happen.\n+        if (!maybeExpr.isExprResult() || !maybeExpr.getFirstChild().isExpr()) {\n+          return false;\n+        }\n+        for (Node ancestor : maybeExpr.getAncestors()) {\n+          int type = ancestor.getType();\n+          if (type == Token.ITERATION_STMT\n+              || type == Token.FOR\n+              || type == Token.WHILE\n+              || type == Token.FUNCTION) {\n+            return false;\n+          }\n+          if (type == Token.EXPR_VOID) {\n+            return ancestor.getFirstChild() == maybeExpr;\n+          }\n+          if (type != Token.EXPR_RESULT && !NodeUtil.isStatementBlock(type)) {\n+            break;\n+          }\n+        }\n+        if (NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild())) {\n+          return false;\n+        }\n+        return true;\n       }\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}