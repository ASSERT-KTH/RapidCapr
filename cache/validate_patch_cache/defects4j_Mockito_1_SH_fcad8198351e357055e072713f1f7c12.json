{
    "patch": "            Matcher varargMatcher = matchers.get(indexOfVararg);\n            int nonVarargLength = invocation.getRawArguments().length - 1;\n            for (int i = 0; i < nonVarargLength; i++) {\n                Matcher m = matchers.get(i);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(i, Object.class));\n                }\n            }\n            if (varargMatcher instanceof CapturesArguments) {\n                Object[] varargs = (Object[]) invocation.getRawArguments()[indexOfVararg];\n                for (int i = 0; i < varargs.length; i++) {\n                    ((CapturesArguments) varargMatcher).captureFrom(varargs[i]);\n                }\n            } else {\n                throw new UnsupportedOperationException();\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..56e5cf24e 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,22 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Matcher varargMatcher = matchers.get(indexOfVararg);\n+            int nonVarargLength = invocation.getRawArguments().length - 1;\n+            for (int i = 0; i < nonVarargLength; i++) {\n+                Matcher m = matchers.get(i);\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(i, Object.class));\n+                }\n+            }\n+            if (varargMatcher instanceof CapturesArguments) {\n+                Object[] varargs = (Object[]) invocation.getRawArguments()[indexOfVararg];\n+                for (int i = 0; i < varargs.length; i++) {\n+                    ((CapturesArguments) varargMatcher).captureFrom(varargs[i]);\n+                }\n+            } else {\n+                throw new UnsupportedOperationException();\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}