{
    "patch": "    // We only want to match constraints on anonymous types or function types.\n    if (!isNominalType() && !isFunctionType()) {\n      return;\n    }\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (propType == null) {\n          // Unresolved types that occur during inference cannot be matched exactly.\n          continue;\n        }\n        if (!this.hasProperty(prop)) {\n          this.defineInferredProperty(prop, propType, /*jsdoc*/ null);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..970101fc 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,22 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    // We only want to match constraints on anonymous types or function types.\n+    if (!isNominalType() && !isFunctionType()) {\n+      return;\n+    }\n+    if (constraintObj.isRecordType()) {\n+      for (String prop : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        if (propType == null) {\n+          // Unresolved types that occur during inference cannot be matched exactly.\n+          continue;\n+        }\n+        if (!this.hasProperty(prop)) {\n+          this.defineInferredProperty(prop, propType, /*jsdoc*/ null);\n+        }\n+      }\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...arameter",
    "test_result": "FAIL"
}