{
    "patch": "Type[] bounds = typeVariable.getBounds();\nif (bounds.length == 1 && bounds[0] instanceof TypeVariable) {\n    TypeVariable<?> tv = (TypeVariable<?>) bounds[0];\n    registerTypeVariablesOn(getActualTypeArgumentFor(tv));\n} else {\n    for (Type bound : bounds) {\n        registerTypeVariablesOn(bound);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..f1d0ea8ed 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,20 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] bounds = typeVariable.getBounds();\n+if (bounds.length == 1 && bounds[0] instanceof TypeVariable) {\n+    TypeVariable<?> tv = (TypeVariable<?>) bounds[0];\n+    registerTypeVariablesOn(getActualTypeArgumentFor(tv));\n+} else {\n+    for (Type bound : bounds) {\n+        registerTypeVariablesOn(bound);\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}