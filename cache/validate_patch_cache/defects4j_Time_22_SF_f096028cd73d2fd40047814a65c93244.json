{
    "patch": "    private void setPeriodInternal(long duration) {\n        long _duration = duration;  // holds the remaining duration\n        for (int i = 0; i <= YEAR_INDEX; i++) {\n            if (i < MILLI_INDEX) {\n                int value = (int) (_duration / PERIOD_FIELD_UNITS[i]);\n                iValues[i] = value;\n                _duration = _duration - (value * PERIOD_FIELD_UNITS[i]);\n            }\n            else {\n                // Handle special case for millis where rounding occurs and remainder can be negative\n                if (i == MILLI_INDEX  && _duration > 0 && _duration >= PERIOD_FIELD_UNITS[MILLI_INDEX]) {\n                    int value = (int) (_duration / PERIOD_FIELD_UNITS[MILLI_INDEX]);                    \n                    iValues[i] = value;\n                    _duration -= (long)iValues[i] * PERIOD_FIELD_UNITS[MILLI_INDEX];\n                } else {\n                    iValues[i] = 0;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..c103c786 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,25 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+    private void setPeriodInternal(long duration) {\n+        long _duration = duration;  // holds the remaining duration\n+        for (int i = 0; i <= YEAR_INDEX; i++) {\n+            if (i < MILLI_INDEX) {\n+                int value = (int) (_duration / PERIOD_FIELD_UNITS[i]);\n+                iValues[i] = value;\n+                _duration = _duration - (value * PERIOD_FIELD_UNITS[i]);\n+            }\n+            else {\n+                // Handle special case for millis where rounding occurs and remainder can be negative\n+                if (i == MILLI_INDEX  && _duration > 0 && _duration >= PERIOD_FIELD_UNITS[MILLI_INDEX]) {\n+                    int value = (int) (_duration / PERIOD_FIELD_UNITS[MILLI_INDEX]);                    \n+                    iValues[i] = value;\n+                    _duration -= (long)iValues[i] * PERIOD_FIELD_UNITS[MILLI_INDEX];\n+                } else {\n+                    iValues[i] = 0;\n+                }\n+            }\n+        }\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}