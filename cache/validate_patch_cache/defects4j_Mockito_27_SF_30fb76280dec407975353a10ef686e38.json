{
    "patch": "public <T> void resetMock(T mock) {\n    if (mock == null) {\n        return;\n    }\n    if (Proxy.isProxyClass(mock.getClass()) && mock instanceof Factory) {\n        InvocationHandler invocationHandler = Proxy.getInvocationHandler(mock);\n        if (invocationHandler instanceof MethodInterceptorFilter) {\n            MethodInterceptorFilter filter = (MethodInterceptorFilter) invocationHandler;\n            MockHandler<T> oldMockHandler = (MockHandler<T>) filter.getHandler();\n            MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n            MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n            ((Factory) mock).setCallback(0, newFilter);\n        }\n    } else {\n        throw new IllegalArgumentException(\"resetMock can only be called on mock objects\");\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..6c97098b0 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,24 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (mock == null) {\n+        return;\n+    }\n+    if (Proxy.isProxyClass(mock.getClass()) && mock instanceof Factory) {\n+        InvocationHandler invocationHandler = Proxy.getInvocationHandler(mock);\n+        if (invocationHandler instanceof MethodInterceptorFilter) {\n+            MethodInterceptorFilter filter = (MethodInterceptorFilter) invocationHandler;\n+            MockHandler<T> oldMockHandler = (MockHandler<T>) filter.getHandler();\n+            MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n+            MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+            ((Factory) mock).setCallback(0, newFilter);\n+        }\n+    } else {\n+        throw new IllegalArgumentException(\"resetMock can only be called on mock objects\");\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}