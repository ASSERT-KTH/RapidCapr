{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    while (result != null && result.trim().isEmpty() && stream.hasNext()) {\n        stream.consumeJSDocWhitespace();\n        result = stream.getRemainingJSDocLine();\n    }\n    if (result == null) {\n        throw new IllegalStateException(\"Recorded bad position information\");\n    }\n    result = result.replace(\"*/\", \"\");\n    return result.trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..3b8a8857 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,18 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    String result = stream.getRemainingJSDocLine();\n+    while (result != null && result.trim().isEmpty() && stream.hasNext()) {\n+        stream.consumeJSDocWhitespace();\n+        result = stream.getRemainingJSDocLine();\n+    }\n+    if (result == null) {\n+        throw new IllegalStateException(\"Recorded bad position information\");\n+    }\n+    result = result.replace(\"*/\", \"\");\n+    return result.trim();\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}