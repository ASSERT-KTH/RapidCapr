{
    "patch": "private void visitParameterList(\n    NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  int missingArgs = Math.min(Math.max(0, minArgs - numArgs), 1);\n  if (missingArgs > 0) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(minArgs),\n        \" argument\" + (minArgs == 1 ? \".\" : \"s\" +\n        \" and no more than \" + (maxArgs - minArgs) + \" argument\" +\n        ((maxArgs-minArgs) == 1 ? \".\" : \"s.\")));\n  } else if (numArgs > maxArgs && maxArgs != Integer.MAX_VALUE) {\n    int excessArgs = numArgs - maxArgs;\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(maxArgs),\n        \" argument\" + (maxArgs == 1 ? \".\" : \"s\" +\n        \" and \" + excessArgs + \" less argument\" + (excessArgs == 1 ? \".\" : \"s.\")));\n  } else {\n    int ordinal = 0;\n    Node parameter;\n    Node argument;\n    while (parameters.hasNext() && arguments.hasNext()) {\n      parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..0ea61bf8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,44 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n+private void visitParameterList(\n+    NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  int missingArgs = Math.min(Math.max(0, minArgs - numArgs), 1);\n+  if (missingArgs > 0) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), String.valueOf(minArgs),\n+        \" argument\" + (minArgs == 1 ? \".\" : \"s\" +\n+        \" and no more than \" + (maxArgs - minArgs) + \" argument\" +\n+        ((maxArgs-minArgs) == 1 ? \".\" : \"s.\")));\n+  } else if (numArgs > maxArgs && maxArgs != Integer.MAX_VALUE) {\n+    int excessArgs = numArgs - maxArgs;\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), String.valueOf(maxArgs),\n+        \" argument\" + (maxArgs == 1 ? \".\" : \"s\" +\n+        \" and \" + excessArgs + \" less argument\" + (excessArgs == 1 ? \".\" : \"s.\")));\n+  } else {\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+    Node parameter;\n+    Node argument;\n+    while (parameters.hasNext() && arguments.hasNext()) {\n+      parameter = parameters.next();\n       argument = arguments.next();\n       ordinal++;\n \n       validator.expectArgumentMatchesParameter(t, argument,\n           getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n-\n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...east 0 argument(s) a[nd no more than 0 argument(s)].> but was:<...east 0 argument(s) a[rguments and 1 less argument.].>",
    "test_result": "FAIL"
}