{
    "patch": "// Check that the access is not used as an assignment target\nif (NodeUtil.isLValue(n)) {\n  return n;\n} else if (parent != null && parent.getType() == Token.ASSIGN) {\n  Node assignLeft = parent.getFirstChild();\n  if (assignLeft.getType() == Token.GETELEM\n      && assignLeft.getFirstChild().isEquivalentTo(left)\n      && parent.getFirstChild().isEquivalentTo(n)) {\n\n    if (parent.getNext() != null && NodeUtil.isAssignmentOp(parent.getNext())) {\n      return n;\n    }\n    Node gran",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..180cb09c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,19 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check that the access is not used as an assignment target\n+if (NodeUtil.isLValue(n)) {\n+  return n;\n+} else if (parent != null && parent.getType() == Token.ASSIGN) {\n+  Node assignLeft = parent.getFirstChild();\n+  if (assignLeft.getType() == Token.GETELEM\n+      && assignLeft.getFirstChild().isEquivalentTo(left)\n+      && parent.getFirstChild().isEquivalentTo(n)) {\n+\n+    if (parent.getNext() != null && NodeUtil.isAssignmentOp(parent.getNext())) {\n+      return n;\n+    }\n+    Node gran\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}