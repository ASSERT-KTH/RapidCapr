{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    double result = 0.5;\n    if(Double.isInfinite(x)) {\n        result = x < 0 ? 0.0 : 1.0;\n    } else if(Double.isNaN(x)) {\n        result = Double.NaN;\n    } else {\n        double normalizedDeviation = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n        if(normalizedDeviation > 40.0) {\n            result = 1.0;\n        } else if(normalizedDeviation < -40.0) {\n            result = 0.0;\n        } else {\n            result += Erf.erf(normalizedDeviation) / 2.0;\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..3971238cb 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,24 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    double result = 0.5;\n+    if(Double.isInfinite(x)) {\n+        result = x < 0 ? 0.0 : 1.0;\n+    } else if(Double.isNaN(x)) {\n+        result = Double.NaN;\n+    } else {\n+        double normalizedDeviation = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n+        if(normalizedDeviation > 40.0) {\n+            result = 1.0;\n+        } else if(normalizedDeviation < -40.0) {\n+            result = 0.0;\n+        } else {\n+            result += Erf.erf(normalizedDeviation) / 2.0;\n+        }\n     }\n+    return result;\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded",
    "test_result": "FAIL"
}