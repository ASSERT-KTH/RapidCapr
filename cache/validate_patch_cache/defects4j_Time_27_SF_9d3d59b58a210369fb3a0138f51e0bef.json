{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n        return new PeriodFormatter(null, null);\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    }\n    List<Object> sepElements = new ArrayList<>();\n    List<List<Object>> sublists = new ArrayList<>();\n    for (Object elem : elementPairs) {\n        if (elem instanceof Separator) {\n            sepElements.add(elem);\n            sublists.add(new ArrayList<>());\n        } else {\n            sublists.get(sublists.size() - 1).add(elem);\n        }\n    }\n    List<PeriodFormatter> formatters = new ArrayList<>();\n    for (int i = 0; i < sepElements.size(); i++) {\n        Separator sep = (Separator) sepElements.get(i);\n        List<Object> elems = sublists.get(i);\n        PeriodFormatter formatter = toFormatter(elems, false, false);\n        if (formatter.getPrinter() != null && formatter.getParser() != null) {\n            sep = sep.finish(formatter.getPrinter(), formatter.getParser());\n        }\n        formatters.add(new PeriodFormatter(sep, sep));\n    }\n    if (formatters.size() == 1) {\n        return formatters.get(0);\n    }\n    int lastIndex = formatters.size() - 1;\n    List<Object> remainingElements = new ArrayList<>(sublists.get(lastIndex));\n    remainingElements.add(0, sepElements.get(lastIndex));\n    PeriodFormatter remainingFormatter = toFormatter(remainingElements, false, false);\n    List<PeriodFormatter> formatterList = new ArrayList<>();\n    formatterList.add(formatters.get(0));\n    for (int i = 1; i < lastIndex; i++) {\n        formatterList.add(formatters.get(i));\n        formatterList.add(formatters.get(i));\n    }\n    formatterList.add(formatters.get(lastIndex));\n    if (remainingFormatter.getPrinter() != null && remainingFormatter.getParser() != null) {\n        formatterList.add(remainingFormatter);\n    }\n    return new PeriodFormatter(formatterList.toArray(new PeriodFormatter[0]));\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..5f712d66 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,59 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    }\n+    List<Object> sepElements = new ArrayList<>();\n+    List<List<Object>> sublists = new ArrayList<>();\n+    for (Object elem : elementPairs) {\n+        if (elem instanceof Separator) {\n+            sepElements.add(elem);\n+            sublists.add(new ArrayList<>());\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            sublists.get(sublists.size() - 1).add(elem);\n         }\n     }\n+    List<PeriodFormatter> formatters = new ArrayList<>();\n+    for (int i = 0; i < sepElements.size(); i++) {\n+        Separator sep = (Separator) sepElements.get(i);\n+        List<Object> elems = sublists.get(i);\n+        PeriodFormatter formatter = toFormatter(elems, false, false);\n+        if (formatter.getPrinter() != null && formatter.getParser() != null) {\n+            sep = sep.finish(formatter.getPrinter(), formatter.getParser());\n+        }\n+        formatters.add(new PeriodFormatter(sep, sep));\n+    }\n+    if (formatters.size() == 1) {\n+        return formatters.get(0);\n+    }\n+    int lastIndex = formatters.size() - 1;\n+    List<Object> remainingElements = new ArrayList<>(sublists.get(lastIndex));\n+    remainingElements.add(0, sepElements.get(lastIndex));\n+    PeriodFormatter remainingFormatter = toFormatter(remainingElements, false, false);\n+    List<PeriodFormatter> formatterList = new ArrayList<>();\n+    formatterList.add(formatters.get(0));\n+    for (int i = 1; i < lastIndex; i++) {\n+        formatterList.add(formatters.get(i));\n+        formatterList.add(formatters.get(i));\n+    }\n+    formatterList.add(formatters.get(lastIndex));\n+    if (remainingFormatter.getPrinter() != null && remainingFormatter.getParser() != null) {\n+        formatterList.add(remainingFormatter);\n+    }\n+    return new PeriodFormatter(formatterList.toArray(new PeriodFormatter[0]));\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}