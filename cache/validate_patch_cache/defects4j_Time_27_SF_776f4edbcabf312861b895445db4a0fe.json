{
    "patch": "    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n            Separator sep = (Separator) elementPairs.get(0);\n            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            return new PeriodFormatter(sep, sep);\n        }\n        Object[] comp = createComposite(elementPairs);\n\n        // corrected code starts here\n        if (comp[0] instanceof CompositePeriodPrinter) {\n            CompositePeriodPrinter printer = (CompositePeriodPrinter)comp[0];\n            CompositePeriodParser parser = (CompositePeriodParser)comp[1];\n            if (printer.getParsingLength() != parser.getParsingLength()) {\n                PeriodFormatter f = new PeriodFormatter(printer, null, parser, null);\n                return new PeriodFormatter(f.getPrinter(), f.getParser());\n            }\n        }\n        // corrected code ends here\n\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..cf2017e9 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -798,11 +798,23 @@ public class PeriodFormatterBuilder {\n         int size = elementPairs.size();\n         if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n             Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+            return new PeriodFormatter(sep, sep);\n         }\n         Object[] comp = createComposite(elementPairs);\n+\n+        // corrected code starts here\n+        if (comp[0] instanceof CompositePeriodPrinter) {\n+            CompositePeriodPrinter printer = (CompositePeriodPrinter)comp[0];\n+            CompositePeriodParser parser = (CompositePeriodParser)comp[1];\n+            if (printer.getParsingLength() != parser.getParsingLength()) {\n+                PeriodFormatter f = new PeriodFormatter(printer, null, parser, null);\n+                return new PeriodFormatter(f.getPrinter(), f.getParser());\n+            }\n+        }\n+        // corrected code ends here\n+\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n         } else if (notParser) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}