{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  // handle functions\n  if (n.isFunction()) {\n    // Don't traverse functions that are constructors or have the @this or @override annotation.\n    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n    if (jsDoc != null && jsDoc.getScope().isActive() && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n        return false;\n    }\n\n    // Only traverse functions that would normally be able to have a @this annotation associated with them.\n    // e.g., var a = function() {}; // or function a() {} // or a.x = function() {};\n    if (parent.isAssign() && parent.getParent().isExprResult()) {\n        Node gp = parent.getParent().getParent();\n        if (gp == null || !gp.isFunction()) {\n            Node lhs = parent.getFirstChild();\n            return lhs == n;\n        }\n        // if this is part of a prototype assignment, we still have to traverse the RHS.\n    }\n    return NodeUtil.isFunctionBlock(n.getParent());\n  }\n\n  // handle object literals\n  if (n.isObjectLit()) {\n      return parent.isExprResult();\n  }\n\n  // handle all other nodes\n  return NodeUtil.isControlStructure(parent) || NodeUtil.isStatementBlock(parent);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..3bcba9b7 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,60 +81,37 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  // handle functions\n+  if (n.isFunction()) {\n+    // Don't traverse functions that are constructors or have the @this or @override annotation.\n+    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+    if (jsDoc != null && jsDoc.getScope().isActive() && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n         return false;\n-      }\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+    // Only traverse functions that would normally be able to have a @this annotation associated with them.\n+    // e.g., var a = function() {}; // or function a() {} // or a.x = function() {};\n+    if (parent.isAssign() && parent.getParent().isExprResult()) {\n+        Node gp = parent.getParent().getParent();\n+        if (gp == null || !gp.isFunction()) {\n+            Node lhs = parent.getFirstChild();\n+            return lhs == n;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n+        // if this is part of a prototype assignment, we still have to traverse the RHS.\n     }\n+    return NodeUtil.isFunctionBlock(n.getParent());\n+  }\n \n-    return true;\n+  // handle object literals\n+  if (n.isObjectLit()) {\n+      return parent.isExprResult();\n   }\n \n+  // handle all other nodes\n+  return NodeUtil.isControlStructure(parent) || NodeUtil.isStatementBlock(parent);\n+}\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}