{
    "patch": "        int idx = 1;\n        while (count + idx <= index) {\n            count += idx;\n            ++idx;\n        }\n        --idx;\n\n        for(int i = last - 1; i >= 0; i--) {\n            final int offset = uniCounterOffset[i];\n            indices[i] = (count + offset - 1 > index) ? idx : ((index - count) % offset);\n            count -= offset * idx;\n            --idx;\n        }\n        \n        return indices;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..b0d43899e 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -235,12 +235,20 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n         }\n \n         int idx = 1;\n-        while (count < index) {\n+        while (count + idx <= index) {\n             count += idx;\n             ++idx;\n         }\n         --idx;\n-        indices[last] = idx;\n+\n+        for(int i = last - 1; i >= 0; i--) {\n+            final int offset = uniCounterOffset[i];\n+            indices[i] = (count + offset - 1 > index) ? idx : ((index - count) % offset);\n+            count -= offset * idx;\n+            --idx;\n+        }\n+        \n+        return indices;\n \n         return indices;\n     }",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}