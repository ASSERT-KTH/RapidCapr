{
    "patch": "if (!ref.isSimpleAssignmentToName() || !ref.isDeclaration()) {\n  return false;\n}\n\nif (block.isFunction) {\n  // Only allow one assignment to a variable in a function.\n  return true;\n} else if (block.isLoop && !ref.getBasicBlock().equals(block)) {\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..b55d896c 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (!ref.isSimpleAssignmentToName() || !ref.isDeclaration()) {\n+  return false;\n+}\n+\n+if (block.isFunction) {\n+  // Only allow one assignment to a variable in a function.\n+  return true;\n+} else if (block.isLoop && !ref.getBasicBlock().equals(block)) {\n+  return false;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}