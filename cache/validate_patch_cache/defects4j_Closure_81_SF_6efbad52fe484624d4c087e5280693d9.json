{
    "patch": "public class IRFactory extends com.google.javascript.jscomp.CompilerPass {\n  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\"use strict\");\n\n  private final Deque<Node> nodeStack = new ArrayDeque<>();\n  private final Deque<Scope> scopeStack = new ArrayDeque<>();\n  private final Node jsRoot;\n  private final ErrorReporter errorReporter;\n  private final String sourceName;\n  private final ImmutableMap<String, String> renamingMap;\n  private final boolean renameAllFunctionParams;\n  private final boolean preferLineBreakAtEndOfFile;\n\n  public IRFactory(\n      AbstractCompiler compiler,\n      Node jsRoot,\n      ErrorReporter errorReporter,\n      ImmutableMap<String, String> renamingMap,\n      boolean renameAllFunctionParams,\n      boolean preferLineBreakAtEndOfFile) {\n    this.jsRoot = jsRoot;\n    this.errorReporter = errorReporter;\n    this.sourceName = compiler.getInput(jsRoot.getInputId()).getSourceFile().getName();\n    this.renamingMap = renamingMap;\n    this.renameAllFunctionParams = renameAllFunctionParams;\n    this.preferLineBreakAtEndOfFile = preferLineBreakAtEndOfFile;\n  }\n\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(\n        root.getParent(),\n        new NodeTraversal.AbstractPostOrderCallback() {\n          @Override\n          public void visit(NodeTraversal t, Node node, Node parent) {\n            if (node.isScript() || node.isBlock()) {\n              checkDirectives(node);\n            }\n          }\n        });\n\n    PushPullTransformer pushTransformer = new PushPullTransformer();\n    Node result = pushTransformer.transform(\n        new TypedScopeCreator(getCompiler()).createScope(jsRoot, null), jsRoot);\n    NodeTraversal.traverse(\n        result,\n        pushTransformer,\n        new NodeTraversal.ScopedCallback() {\n          @Override\n          public void enterScope(NodeTraversal t) {\n            if (t.inGlobalScope() || t.getScopeRoot().isFunctionBlock()) {\n              nodeStack.push(null);\n              scopeStack.push(t.getScope());\n              return;\n            }\n\n            Node function = findFunctionNode(t.getScopeRoot());\n            if (function == null) {\n              throw new IllegalStateException(\"Could not find function scope\");\n            }\n\n            nodeStack.push(function);\n            scopeStack.push(t.getScope());\n          }\n\n          @Override\n          public void exitScope(NodeTraversal t) {\n            nodeStack.pop();\n            scopeStack.pop();\n          }\n\n          @Override\n          public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n            if (n.isFunction()) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..d1a5404c 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,181 +385,81 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+public class IRFactory extends com.google.javascript.jscomp.CompilerPass {\n+  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n+      ImmutableSet.of(\"use strict\");\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n-\n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n-\n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n+  private final Deque<Node> nodeStack = new ArrayDeque<>();\n+  private final Deque<Scope> scopeStack = new ArrayDeque<>();\n+  private final Node jsRoot;\n+  private final ErrorReporter errorReporter;\n+  private final String sourceName;\n+  private final ImmutableMap<String, String> renamingMap;\n+  private final boolean renameAllFunctionParams;\n+  private final boolean preferLineBreakAtEndOfFile;\n+\n+  public IRFactory(\n+      AbstractCompiler compiler,\n+      Node jsRoot,\n+      ErrorReporter errorReporter,\n+      ImmutableMap<String, String> renamingMap,\n+      boolean renameAllFunctionParams,\n+      boolean preferLineBreakAtEndOfFile) {\n+    this.jsRoot = jsRoot;\n+    this.errorReporter = errorReporter;\n+    this.sourceName = compiler.getInput(jsRoot.getInputId()).getSourceFile().getName();\n+    this.renamingMap = renamingMap;\n+    this.renameAllFunctionParams = renameAllFunctionParams;\n+    this.preferLineBreakAtEndOfFile = preferLineBreakAtEndOfFile;\n+  }\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+  public void process(Node externs, Node root) {\n+    NodeTraversal.traverse(\n+        root.getParent(),\n+        new NodeTraversal.AbstractPostOrderCallback() {\n+          @Override\n+          public void visit(NodeTraversal t, Node node, Node parent) {\n+            if (node.isScript() || node.isBlock()) {\n+              checkDirectives(node);\n+            }\n+          }\n+        });\n+\n+    PushPullTransformer pushTransformer = new PushPullTransformer();\n+    Node result = pushTransformer.transform(\n+        new TypedScopeCreator(getCompiler()).createScope(jsRoot, null), jsRoot);\n+    NodeTraversal.traverse(\n+        result,\n+        pushTransformer,\n+        new NodeTraversal.ScopedCallback() {\n+          @Override\n+          public void enterScope(NodeTraversal t) {\n+            if (t.inGlobalScope() || t.getScopeRoot().isFunctionBlock()) {\n+              nodeStack.push(null);\n+              scopeStack.push(t.getScope());\n+              return;\n+            }\n+\n+            Node function = findFunctionNode(t.getScopeRoot());\n+            if (function == null) {\n+              throw new IllegalStateException(\"Could not find function scope\");\n+            }\n+\n+            nodeStack.push(function);\n+            scopeStack.push(t.getScope());\n+          }\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+          @Override\n+          public void exitScope(NodeTraversal t) {\n+            nodeStack.pop();\n+            scopeStack.pop();\n+          }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n-    }\n+          @Override\n+          public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+            if (n.isFunction()) {\n+              return false;\n+            }\n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}