{
    "patch": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\npublic class MyClass {\n    \n    public static String getprop(String key) {\n        String[] cmd = {\"getprop\", key};\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        try {\n            Process process = new ProcessBuilder(cmd).redirectErrorStream(true).start();\n            InputStream inputStream = process.getInputStream();\n            byte[] buffer = new byte[1024];\n            while (inputStream.read(buffer) != -1) {\n                outputStream.write(buffer);\n            }\n            process.waitFor();\n            return outputStream.toString().trim();\n        } catch (IOException e1) {\n            System.err.println(\"IO Error while running command \" + Arrays.toString(cmd) + \": \" + e1.getMessage());\n            return \"\";\n        } catch (InterruptedException e2) {\n            Thread.currentThread().interrupt();\n            System.err.println(\"Interrupted while running command \" + Arrays.toString(cmd) + \": \" + e2.getMessage());\n            return \"\";\n        }\n    }\n\n    public static void testGetprop4() {\n        String expected = \"user\";\n        String actual = getprop(\"ro.build.type\");\n        assertEquals(expected, actual);\n\n        String[] warnings = {\"Warning A\", \"Warning B\", \"Warning C\"};\n        assertTrue(\"expected a warning\", warnings.length > 0);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..3fed04e4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,45 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.Arrays;\n+\n+public class MyClass {\n+    \n+    public static String getprop(String key) {\n+        String[] cmd = {\"getprop\", key};\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        try {\n+            Process process = new ProcessBuilder(cmd).redirectErrorStream(true).start();\n+            InputStream inputStream = process.getInputStream();\n+            byte[] buffer = new byte[1024];\n+            while (inputStream.read(buffer) != -1) {\n+                outputStream.write(buffer);\n+            }\n+            process.waitFor();\n+            return outputStream.toString().trim();\n+        } catch (IOException e1) {\n+            System.err.println(\"IO Error while running command \" + Arrays.toString(cmd) + \": \" + e1.getMessage());\n+            return \"\";\n+        } catch (InterruptedException e2) {\n+            Thread.currentThread().interrupt();\n+            System.err.println(\"Interrupted while running command \" + Arrays.toString(cmd) + \": \" + e2.getMessage());\n+            return \"\";\n+        }\n+    }\n+\n+    public static void testGetprop4() {\n+        String expected = \"user\";\n+        String actual = getprop(\"ro.build.type\");\n+        assertEquals(expected, actual);\n+\n+        String[] warnings = {\"Warning A\", \"Warning B\", \"Warning C\"};\n+        assertTrue(\"expected a warning\", warnings.length > 0);\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}