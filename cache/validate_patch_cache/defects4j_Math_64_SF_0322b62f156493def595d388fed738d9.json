{
    "patch": "protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    solvedCols  = Math.min(rows, cols);\n    diagR = new double[cols];\n    jacNorm = new double[cols];\n    beta = new double[cols];\n    permutation = new int[cols];\n    lmDir   = new double[cols];\n    double[] diag = new double[cols];\n    double[] oldX = new double[cols];\n    double[] oldRes = new double[rows];\n    double[] work1 = new double[cols];\n    double[] work2 = new double[cols];\n    double[] work3 = new double[cols];\n    double delta = 0;\n    double xNorm = 0;\n   \n\n    updateResidualsAndCost();\n    VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n    double actRed = 0;\n    int iter = 0;\n    boolean firstIteration = true;\n    while (true) {\n        iter++;\n        updateJacobian();\n        qrDecomposition();\n        qTy(residuals);\n        for (int k = 0; k < solvedCols; ++k) {\n            int pk = permutation[k];\n            jacobian[k][pk] = diagR[pk];\n        }\n        if (firstIteration) {\n            xNorm = 0;\n            for (int k = 0; k < cols; ++k) {\n                double dk = jacNorm[k];\n                if (dk == 0) {\n                    dk = 1.0;\n                }\n                double xk = dk * point[k];\n                xNorm += xk * xk;\n                diag[k] = dk;\n            }\n            xNorm = Math.sqrt(xNorm);\n            delta = xNorm == 0 ? initialStepBoundFactor : initialStepBoundFactor * xNorm;\n        }\n        if (checker != null && checker.converged(iter, current, new VectorialPointValuePair(point, objective))) {\n            return current;\n        }\n        for (double ratio = 0; ratio < 1.0e-4; ) {\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                oldX[pj] = point[pj];\n            }\n            double previousCost = cost;\n            double[] tmpVec = residuals;\n            residuals = oldRes;\n            oldRes = tmpVec;\n            determineLMParameter(oldRes, delta, diag, work1, work2, work3);\n            double lmNorm = 0;\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                lmDir[pj] = -lmDir[pj];\n                point[pj] = oldX[pj] + lmDir[pj];\n                double s = diag[pj] * lmDir[pj];\n                lmNorm += s * s;\n            }\n            lmNorm = Math.sqrt(lmNorm);\n            if (firstIteration) {\n                actRed = 0;\n            } else {\n                if (functValues == null) {\n                    throw new MathInternalError();\n                }\n                int nC = cols;\n                double[] tmp = new double[nC];\n                for (int i = 0; i < rows; ++i) {\n                    double resI = oldRes[i];\n                    double[] jacI = jacobian[i];\n                    for (int j = 0; j < nC; ++j) {\n                        tmp[j] += resI * jacI[j];\n                    }\n                }\n                double dxNorm = 0;\n                for (int j = 0; j < nC; ++j) {\n                    double dj = diag[j];\n                    double d1 = tmp[j] / dj;\n                    dxNorm += d1 * d1;\n                }\n                dxNorm = Math.sqrt(dxNorm) / xNorm;\n                double fp = previousCost - cost;\n                actRed = -1.0 * fp / (lmPar * xNorm);\n                if ((actRed > 0 && Double.isNaN(dxNorm)) || (actRed < 0 && (dxNorm > previousDelta)))) {\n                    delta = 0.5 * delta;\n                    lmPar /= 2;\n                } else {\n                    if (Math.abs(actRed) <= 1.0e-4 && dxNorm <= 1.0e-4) {\n                        return new VectorialPointValuePair(point, objective);\n                    }\n                    previousDelta = dxNorm;\n                    firstIteration = false;\n                    break;  \n                }\n            }\n            updateResidualsAndCost();\n            current = new VectorialPointValuePair(point, objective);\n            double ratio = actRed / preRed;\n            if (ratio > 0) {\n                double tmp = 2 * ratio - Math.pow(ratio, 2);\n                preRed = ratio;\n                if (tmp >= 0) {\n                    double parTmp = lmPar * Math.max(1.0 / 3.0, 1.0 - Math.pow((2 * ratio - 1), 3));\n                    lmPar = Math.max(parTmp, lmPar / 10);\n                    double v = 10;\n                    if (actRed >= 0.75) {\n                        v = 3;\n                    }\n                    delta = v * delta;\n                }\n            } else {\n                preRed = ratio;\n                delta = delta / 2;\n                lmPar = 2 * lmPar;\n            }\n            if (checker != null && checker.converged(iter, current, new VectorialPointValuePair(point, objective))) {\n                return current;\n            }\n            if (Math.abs(actRed) <= 1.0e-4 && Math.abs(preRed) <= 1.0e-4) {\n                return current;\n            }\n            if (delta <= 1.0e-7 * xNorm) {\n                throw new OptimizationException(LocalizedFormats.TOO_SMALL_INITIAL_STEP);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\nindex 50914932e..64cd876ef 100644\n--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n@@ -238,230 +238,141 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected VectorialPointValuePair doOptimize()\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        // arrays shared with the other private methods\n-        solvedCols  = Math.min(rows, cols);\n-        diagR       = new double[cols];\n-        jacNorm     = new double[cols];\n-        beta        = new double[cols];\n-        permutation = new int[cols];\n-        lmDir       = new double[cols];\n-\n-        // local point\n-        double   delta   = 0;\n-        double   xNorm   = 0;\n-        double[] diag    = new double[cols];\n-        double[] oldX    = new double[cols];\n-        double[] oldRes  = new double[rows];\n-        double[] work1   = new double[cols];\n-        double[] work2   = new double[cols];\n-        double[] work3   = new double[cols];\n-\n-        // evaluate the function at the starting point and calculate its norm\n-        updateResidualsAndCost();\n-\n-        // outer loop\n-        lmPar = 0;\n-        boolean firstIteration = true;\n-        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n-        while (true) {\n-            incrementIterationsCounter();\n-\n-            // compute the Q.R. decomposition of the jacobian matrix\n-            VectorialPointValuePair previous = current;\n-            updateJacobian();\n-            qrDecomposition();\n-\n-            // compute Qt.res\n-            qTy(residuals);\n-            // now we don't need Q anymore,\n-            // so let jacobian contain the R matrix with its diagonal elements\n-            for (int k = 0; k < solvedCols; ++k) {\n-                int pk = permutation[k];\n-                jacobian[k][pk] = diagR[pk];\n-            }\n-\n-            if (firstIteration) {\n-\n-                // scale the point according to the norms of the columns\n-                // of the initial jacobian\n-                xNorm = 0;\n-                for (int k = 0; k < cols; ++k) {\n-                    double dk = jacNorm[k];\n-                    if (dk == 0) {\n-                        dk = 1.0;\n-                    }\n-                    double xk = dk * point[k];\n-                    xNorm  += xk * xk;\n-                    diag[k] = dk;\n-                }\n-                xNorm = Math.sqrt(xNorm);\n-\n-                // initialize the step bound delta\n-                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);\n-\n-            }\n-\n-            // check orthogonality between function vector and jacobian columns\n-            double maxCosine = 0;\n-            if (cost != 0) {\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int    pj = permutation[j];\n-                    double s  = jacNorm[pj];\n-                    if (s != 0) {\n-                        double sum = 0;\n-                        for (int i = 0; i <= j; ++i) {\n-                            sum += jacobian[i][pj] * residuals[i];\n-                        }\n-                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));\n-                    }\n+protected VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+    solvedCols  = Math.min(rows, cols);\n+    diagR = new double[cols];\n+    jacNorm = new double[cols];\n+    beta = new double[cols];\n+    permutation = new int[cols];\n+    lmDir   = new double[cols];\n+    double[] diag = new double[cols];\n+    double[] oldX = new double[cols];\n+    double[] oldRes = new double[rows];\n+    double[] work1 = new double[cols];\n+    double[] work2 = new double[cols];\n+    double[] work3 = new double[cols];\n+    double delta = 0;\n+    double xNorm = 0;\n+   \n+\n+    updateResidualsAndCost();\n+    VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n+    double actRed = 0;\n+    int iter = 0;\n+    boolean firstIteration = true;\n+    while (true) {\n+        iter++;\n+        updateJacobian();\n+        qrDecomposition();\n+        qTy(residuals);\n+        for (int k = 0; k < solvedCols; ++k) {\n+            int pk = permutation[k];\n+            jacobian[k][pk] = diagR[pk];\n+        }\n+        if (firstIteration) {\n+            xNorm = 0;\n+            for (int k = 0; k < cols; ++k) {\n+                double dk = jacNorm[k];\n+                if (dk == 0) {\n+                    dk = 1.0;\n                 }\n+                double xk = dk * point[k];\n+                xNorm += xk * xk;\n+                diag[k] = dk;\n             }\n-            if (maxCosine <= orthoTolerance) {\n-                // convergence has been reached\n-                return current;\n+            xNorm = Math.sqrt(xNorm);\n+            delta = xNorm == 0 ? initialStepBoundFactor : initialStepBoundFactor * xNorm;\n+        }\n+        if (checker != null && checker.converged(iter, current, new VectorialPointValuePair(point, objective))) {\n+            return current;\n+        }\n+        for (double ratio = 0; ratio < 1.0e-4; ) {\n+            for (int j = 0; j < solvedCols; ++j) {\n+                int pj = permutation[j];\n+                oldX[pj] = point[pj];\n             }\n-\n-            // rescale if necessary\n-            for (int j = 0; j < cols; ++j) {\n-                diag[j] = Math.max(diag[j], jacNorm[j]);\n+            double previousCost = cost;\n+            double[] tmpVec = residuals;\n+            residuals = oldRes;\n+            oldRes = tmpVec;\n+            determineLMParameter(oldRes, delta, diag, work1, work2, work3);\n+            double lmNorm = 0;\n+            for (int j = 0; j < solvedCols; ++j) {\n+                int pj = permutation[j];\n+                lmDir[pj] = -lmDir[pj];\n+                point[pj] = oldX[pj] + lmDir[pj];\n+                double s = diag[pj] * lmDir[pj];\n+                lmNorm += s * s;\n             }\n-\n-            // inner loop\n-            for (double ratio = 0; ratio < 1.0e-4;) {\n-\n-                // save the state\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    oldX[pj] = point[pj];\n-                }\n-                double previousCost = cost;\n-                double[] tmpVec = residuals;\n-                residuals = oldRes;\n-                oldRes    = tmpVec;\n-\n-                // determine the Levenberg-Marquardt parameter\n-                determineLMParameter(oldRes, delta, diag, work1, work2, work3);\n-\n-                // compute the new point and the norm of the evolution direction\n-                double lmNorm = 0;\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    lmDir[pj] = -lmDir[pj];\n-                    point[pj] = oldX[pj] + lmDir[pj];\n-                    double s = diag[pj] * lmDir[pj];\n-                    lmNorm  += s * s;\n-                }\n-                lmNorm = Math.sqrt(lmNorm);\n-                // on the first iteration, adjust the initial step bound.\n-                if (firstIteration) {\n-                    delta = Math.min(delta, lmNorm);\n-                }\n-\n-                // evaluate the function at x + p and calculate its norm\n-                updateResidualsAndCost();\n-                current = new VectorialPointValuePair(point, objective);\n-\n-                // compute the scaled actual reduction\n-                double actRed = -1.0;\n-                if (0.1 * cost < previousCost) {\n-                    double r = cost / previousCost;\n-                    actRed = 1.0 - r * r;\n+            lmNorm = Math.sqrt(lmNorm);\n+            if (firstIteration) {\n+                actRed = 0;\n+            } else {\n+                if (functValues == null) {\n+                    throw new MathInternalError();\n                 }\n-\n-                // compute the scaled predicted reduction\n-                // and the scaled directional derivative\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    double dirJ = lmDir[pj];\n-                    work1[j] = 0;\n-                    for (int i = 0; i <= j; ++i) {\n-                        work1[i] += jacobian[i][pj] * dirJ;\n+                int nC = cols;\n+                double[] tmp = new double[nC];\n+                for (int i = 0; i < rows; ++i) {\n+                    double resI = oldRes[i];\n+                    double[] jacI = jacobian[i];\n+                    for (int j = 0; j < nC; ++j) {\n+                        tmp[j] += resI * jacI[j];\n                     }\n                 }\n-                double coeff1 = 0;\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    coeff1 += work1[j] * work1[j];\n+                double dxNorm = 0;\n+                for (int j = 0; j < nC; ++j) {\n+                    double dj = diag[j];\n+                    double d1 = tmp[j] / dj;\n+                    dxNorm += d1 * d1;\n                 }\n-                double pc2 = previousCost * previousCost;\n-                coeff1 = coeff1 / pc2;\n-                double coeff2 = lmPar * lmNorm * lmNorm / pc2;\n-                double preRed = coeff1 + 2 * coeff2;\n-                double dirDer = -(coeff1 + coeff2);\n-\n-                // ratio of the actual to the predicted reduction\n-                ratio = (preRed == 0) ? 0 : (actRed / preRed);\n-\n-                // update the step bound\n-                if (ratio <= 0.25) {\n-                    double tmp =\n-                        (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;\n-                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {\n-                            tmp = 0.1;\n-                        }\n-                        delta = tmp * Math.min(delta, 10.0 * lmNorm);\n-                        lmPar /= tmp;\n-                } else if ((lmPar == 0) || (ratio >= 0.75)) {\n-                    delta = 2 * lmNorm;\n-                    lmPar *= 0.5;\n-                }\n-\n-                // test for successful iteration.\n-                if (ratio >= 1.0e-4) {\n-                    // successful iteration, update the norm\n-                    firstIteration = false;\n-                    xNorm = 0;\n-                    for (int k = 0; k < cols; ++k) {\n-                        double xK = diag[k] * point[k];\n-                        xNorm    += xK * xK;\n-                    }\n-                    xNorm = Math.sqrt(xNorm);\n-\n-                    // tests for convergence.\n-                    // we use the vectorial convergence checker\n+                dxNorm = Math.sqrt(dxNorm) / xNorm;\n+                double fp = previousCost - cost;\n+                actRed = -1.0 * fp / (lmPar * xNorm);\n+                if ((actRed > 0 && Double.isNaN(dxNorm)) || (actRed < 0 && (dxNorm > previousDelta)))) {\n+                    delta = 0.5 * delta;\n+                    lmPar /= 2;\n                 } else {\n-                    // failed iteration, reset the previous values\n-                    cost = previousCost;\n-                    for (int j = 0; j < solvedCols; ++j) {\n-                        int pj = permutation[j];\n-                        point[pj] = oldX[pj];\n+                    if (Math.abs(actRed) <= 1.0e-4 && dxNorm <= 1.0e-4) {\n+                        return new VectorialPointValuePair(point, objective);\n                     }\n-                    tmpVec    = residuals;\n-                    residuals = oldRes;\n-                    oldRes    = tmpVec;\n+                    previousDelta = dxNorm;\n+                    firstIteration = false;\n+                    break;  \n                 }\n-                if (checker==null) {\n-                \tif (((Math.abs(actRed) <= costRelativeTolerance) &&\n-                        (preRed <= costRelativeTolerance) &&\n-                        (ratio <= 2.0)) ||\n-                       (delta <= parRelativeTolerance * xNorm)) {\n-                       return current;\n-                   }\n-                } else {\n-                    if (checker.converged(getIterations(), previous, current)) {\n-                        return current;\n+            }\n+            updateResidualsAndCost();\n+            current = new VectorialPointValuePair(point, objective);\n+            double ratio = actRed / preRed;\n+            if (ratio > 0) {\n+                double tmp = 2 * ratio - Math.pow(ratio, 2);\n+                preRed = ratio;\n+                if (tmp >= 0) {\n+                    double parTmp = lmPar * Math.max(1.0 / 3.0, 1.0 - Math.pow((2 * ratio - 1), 3));\n+                    lmPar = Math.max(parTmp, lmPar / 10);\n+                    double v = 10;\n+                    if (actRed >= 0.75) {\n+                        v = 3;\n                     }\n+                    delta = v * delta;\n                 }\n-                // tests for termination and stringent tolerances\n-                // (2.2204e-16 is the machine epsilon for IEEE754)\n-                if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,\n-                            costRelativeTolerance);\n-                } else if (delta <= 2.2204e-16 * xNorm) {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,\n-                            parRelativeTolerance);\n-                } else if (maxCosine <= 2.2204e-16)  {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,\n-                            orthoTolerance);\n-                }\n-\n+            } else {\n+                preRed = ratio;\n+                delta = delta / 2;\n+                lmPar = 2 * lmPar;\n+            }\n+            if (checker != null && checker.converged(iter, current, new VectorialPointValuePair(point, objective))) {\n+                return current;\n+            }\n+            if (Math.abs(actRed) <= 1.0e-4 && Math.abs(preRed) <= 1.0e-4) {\n+                return current;\n+            }\n+            if (delta <= 1.0e-7 * xNorm) {\n+                throw new OptimizationException(LocalizedFormats.TOO_SMALL_INITIAL_STEP);\n             }\n-\n         }\n-\n     }\n+}\n \n     /**\n      * Determine the Levenberg-Marquardt parameter.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}