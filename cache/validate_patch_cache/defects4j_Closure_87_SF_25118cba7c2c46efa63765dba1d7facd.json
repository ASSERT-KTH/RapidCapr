{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.EXPR_RESULT) {\n    Node child = n.getFirstChild();\n    if (child.getType() == Token.BLOCK && child.getChildCount() == 1) {\n      Node grandchild = child.getFirstChild();\n      if (grandchild.getType() == Token.EXPR_RESULT) {\n        Node greatGrandchild = grandchild.getFirstChild();\n        if (greatGrandchild.getType() == Token.AND) {\n          return true;\n        } else if (greatGrandchild.getType() == Token.OR) {\n          Node left = greatGrandchild.getFirstChild();\n          Node right = left.getNext();\n          if (left.getType() == Token.NAME &&\n              right.getType() == Token.CALL &&\n              left.getString().equals(right.getFirstChild().getString())) {\n            return true;\n          }\n          return false;\n        } else {\n          return NodeUtil.isExpressionNode(greatGrandchild);\n        }\n      } else if (grandchild.getType() == Token.ASSIGN) {\n        return true;\n      } else if (grandchild.getType() != Token.CALL &&\n                 grandchild.getType() != Token.NEW &&\n                 grandchild.getType() != Token.FUNCTION) {\n        return NodeUtil.isExpressionNode(grandchild);\n      }\n    }\n    return false;\n  } else if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n    Node child = n.getFirstChild();\n    if (child.getType() != Token.EXPR_RESULT && child.getType() != Token.CALL && child.getType() != Token.FUNCTION) {\n      return NodeUtil.isExpressionNode(child);\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..afd5978b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,44 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.EXPR_RESULT) {\n+    Node child = n.getFirstChild();\n+    if (child.getType() == Token.BLOCK && child.getChildCount() == 1) {\n+      Node grandchild = child.getFirstChild();\n+      if (grandchild.getType() == Token.EXPR_RESULT) {\n+        Node greatGrandchild = grandchild.getFirstChild();\n+        if (greatGrandchild.getType() == Token.AND) {\n+          return true;\n+        } else if (greatGrandchild.getType() == Token.OR) {\n+          Node left = greatGrandchild.getFirstChild();\n+          Node right = left.getNext();\n+          if (left.getType() == Token.NAME &&\n+              right.getType() == Token.CALL &&\n+              left.getString().equals(right.getFirstChild().getString())) {\n+            return true;\n+          }\n+          return false;\n+        } else {\n+          return NodeUtil.isExpressionNode(greatGrandchild);\n+        }\n+      } else if (grandchild.getType() == Token.ASSIGN) {\n+        return true;\n+      } else if (grandchild.getType() != Token.CALL &&\n+                 grandchild.getType() != Token.NEW &&\n+                 grandchild.getType() != Token.FUNCTION) {\n+        return NodeUtil.isExpressionNode(grandchild);\n       }\n     }\n-\n     return false;\n+  } else if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n+    Node child = n.getFirstChild();\n+    if (child.getType() != Token.EXPR_RESULT && child.getType() != Token.CALL && child.getType() != Token.FUNCTION) {\n+      return NodeUtil.isExpressionNode(child);\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}