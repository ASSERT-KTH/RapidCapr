{
    "patch": "    while (cArg != null && fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam.isName()) {\n        if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n            return CanInlineResult.NO;\n          }\n        }\n        fnParam = fnParam.getNext();\n      } else {\n        // Unnamed parameters might reference values\n        // inside the function body, we don't inline\n        // unless a function is simple and has less than\n        // three parameters.\n        if (!isSimpleFunction(fnNode, 2)) {\n          return CanInlineResult.NO;\n        }\n        fnParam = fnParam.getNext();\n      }\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n\n      cArg = cArg.getNext();\n    }\n\n    if (cArg != null && fnParam == null\n        && NodeUtil.getFunctionBody(fnNode).hasChildren()) {\n      // Argument count mismatch with a function that has a body\n      return CanInlineResult.NO;\n    }\n\n    if (cArg == null && fnParam != null) {\n      // number of parameters of the function exceeds the number of arguments passed in the function call\n      return CanInlineResult.NO;\n    }\n\n    if (cArg != null && fnParam == null\n        && NodeUtil.getFunctionBody(fnNode).hasChildren()) {\n      // Argument count mismatch with a function that has a body\n      return CanInlineResult.NO;\n    }\n\n    if (cArg != null && cArg.getNext() != null) {\n      // more arguments than formal parameters\n      return CanInlineResult.NO;\n    }\n\n    return CanInlineResult.YES;\n  }\n\n  /**\n   * Returns true if a function has at most maxParameters and\n   * doesn't access any variables from its outer scopes.\n   */\n  private boolean isSimpleFunction(Node function, int maxParameters) {\n    if (!function.isFunction()) {\n      return false;\n    }\n    Node body = NodeUtil.getFunctionBody(function);\n    if (body == null) {\n      return false;\n    }\n    Scope functionScope = SyntacticScopeCreator.makeFunctionScopedContext(compiler, function);\n    CheckVars<RuntimeException> checkVars = new CheckVars<RuntimeException>(compiler);\n    checkVars.process(null, functionScope, body);\n\n    TreeAnalyzer analyzer = new TreeAnalyzer(compiler, checkVars.getLhs());\n    analyzer.addRecursiveFunction(function);\n    analyzer.process(null, body);\n\n    return checkVars.getLhs().getCount() == 0\n        && checkVars.getRhs().getCount() == 0\n        && NodeUtil.getFunctionParameters(function).getChildCount() <= maxParameters\n        && !analyzer.crossesFrameBoundaries();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..d6ad300f 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,84 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n-\n-    Node block = fnNode.getLastChild();\n-\n-\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n+    while (cArg != null && fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+      if (fnParam.isName()) {\n+        if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n+          if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n             return CanInlineResult.NO;\n           }\n         }\n-\n-        // Move to the next name.\n+        fnParam = fnParam.getNext();\n+      } else {\n+        // Unnamed parameters might reference values\n+        // inside the function body, we don't inline\n+        // unless a function is simple and has less than\n+        // three parameters.\n+        if (!isSimpleFunction(fnNode, 2)) {\n+          return CanInlineResult.NO;\n+        }\n         fnParam = fnParam.getNext();\n       }\n-\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        return CanInlineResult.NO;\n       }\n+\n+      cArg = cArg.getNext();\n+    }\n+\n+    if (cArg != null && fnParam == null\n+        && NodeUtil.getFunctionBody(fnNode).hasChildren()) {\n+      // Argument count mismatch with a function that has a body\n+      return CanInlineResult.NO;\n+    }\n+\n+    if (cArg == null && fnParam != null) {\n+      // number of parameters of the function exceeds the number of arguments passed in the function call\n+      return CanInlineResult.NO;\n+    }\n+\n+    if (cArg != null && fnParam == null\n+        && NodeUtil.getFunctionBody(fnNode).hasChildren()) {\n+      // Argument count mismatch with a function that has a body\n+      return CanInlineResult.NO;\n+    }\n+\n+    if (cArg != null && cArg.getNext() != null) {\n+      // more arguments than formal parameters\n+      return CanInlineResult.NO;\n     }\n \n     return CanInlineResult.YES;\n   }\n \n+  /**\n+   * Returns true if a function has at most maxParameters and\n+   * doesn't access any variables from its outer scopes.\n+   */\n+  private boolean isSimpleFunction(Node function, int maxParameters) {\n+    if (!function.isFunction()) {\n+      return false;\n+    }\n+    Node body = NodeUtil.getFunctionBody(function);\n+    if (body == null) {\n+      return false;\n+    }\n+    Scope functionScope = SyntacticScopeCreator.makeFunctionScopedContext(compiler, function);\n+    CheckVars<RuntimeException> checkVars = new CheckVars<RuntimeException>(compiler);\n+    checkVars.process(null, functionScope, body);\n+\n+    TreeAnalyzer analyzer = new TreeAnalyzer(compiler, checkVars.getLhs());\n+    analyzer.addRecursiveFunction(function);\n+    analyzer.process(null, body);\n+\n+    return checkVars.getLhs().getCount() == 0\n+        && checkVars.getRhs().getCount() == 0\n+        && NodeUtil.getFunctionParameters(function).getChildCount() <= maxParameters\n+        && !analyzer.crossesFrameBoundaries();\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}