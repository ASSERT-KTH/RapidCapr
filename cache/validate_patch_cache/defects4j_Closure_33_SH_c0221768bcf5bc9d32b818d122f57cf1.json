{
    "patch": "    if (!constraintObj.isAnonymousObjectType()) {\n      return;\n    }\n    for (String requiredProp : requiredProperties()) {\n      boolean foundMatch = false;\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        if (prop.equals(requiredProp)) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if(declaresGeneric(propType) && !hasGenericType(propType)){\n            addMissingGenericType(propType);\n          }\n          if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = TypePrecedence.getMostPrecedentType(\n                registry, ImmutableList.of(propType, getNativeType(JSTypeNative.VOID_TYPE)));\n            defineInferredProperty(requiredProp, typeToInfer, null);\n          }\n          foundMatch = true;\n          break;\n        }\n      }\n      if (!foundMatch) {\n        defineInferredProperty(requiredProp, getNativeType(JSTypeNative.VOID_TYPE), null);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..b9cadd4a 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,30 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    if (!constraintObj.isAnonymousObjectType()) {\n+      return;\n+    }\n+    for (String requiredProp : requiredProperties()) {\n+      boolean foundMatch = false;\n+      for (String prop : constraintObj.getOwnPropertyNames()) {\n+        if (prop.equals(requiredProp)) {\n+          JSType propType = constraintObj.getPropertyType(prop);\n+          if(declaresGeneric(propType) && !hasGenericType(propType)){\n+            addMissingGenericType(propType);\n+          }\n+          if (!isPropertyTypeDeclared(prop)) {\n+            JSType typeToInfer = TypePrecedence.getMostPrecedentType(\n+                registry, ImmutableList.of(propType, getNativeType(JSTypeNative.VOID_TYPE)));\n+            defineInferredProperty(requiredProp, typeToInfer, null);\n+          }\n+          foundMatch = true;\n+          break;\n+        }\n+      }\n+      if (!foundMatch) {\n+        defineInferredProperty(requiredProp, getNativeType(JSTypeNative.VOID_TYPE), null);\n+      }\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}