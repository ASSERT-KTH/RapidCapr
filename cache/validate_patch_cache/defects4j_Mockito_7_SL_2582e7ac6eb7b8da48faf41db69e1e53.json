{
    "patch": "Type[] bounds = typeVariable.getBounds();\nType boundType = null;\nif (bounds.length > 0) {\n    boundType = bounds[0];\n    for (Type type : bounds) {\n        if (type instanceof Class) {\n            boundType = type;\n            break;\n        }\n    }\n}\nif (boundType instanceof TypeVariable) {\n    registerTypeVariablesOn(typeVariable);\n} else {\n    registerTypeVariablesOn(boundType);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..980e014d6 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,27 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] bounds = typeVariable.getBounds();\n+Type boundType = null;\n+if (bounds.length > 0) {\n+    boundType = bounds[0];\n+    for (Type type : bounds) {\n+        if (type instanceof Class) {\n+            boundType = type;\n+            break;\n+        }\n+    }\n+}\n+if (boundType instanceof TypeVariable) {\n+    registerTypeVariablesOn(typeVariable);\n+} else {\n+    registerTypeVariablesOn(boundType);\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}