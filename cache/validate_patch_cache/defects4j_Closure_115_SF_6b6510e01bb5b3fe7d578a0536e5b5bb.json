{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n  Node block = fnNode.getLastChild();\n  boolean hasSideEffects = NodeUtil.mayHaveSideEffects(block, compiler); // check if function has side-effects after all arguments are checked\n  \n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n  \n  // FUNCTIONS CALLED VIA 'CALL' AND 'APPLY' HAVE A THIS-OBJECT AS\n  // THE FIRST PARAMETER, BUT THIS IS NOT PART OF THE CALLED FUNCTION'S\n  // PARAMETER LIST.\n  if (cArg != null && !callNode.getFirstChild().isName() &&\n      NodeUtil.isFunctionObjectCall(callNode)) {\n    if (!cArg.isThis()) {\n      return CanInlineResult.NO;\n    }\n    cArg = cArg.getNext();\n  }\n  \n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  \n  // to check if all parameters are used at least one\n  Set<String> allParams = new HashSet<>();\n  while (fnParam != null) {\n    allParams.add(fnParam.getString());\n    fnParam = fnParam.getNext();\n  }\n  int numPassedArgs = 0;\n  // check if all arguments have a matching parameter that was defined\n  while (cArg != null) {\n    if (!allParams.contains(NodeUtil.getBestLValueName(cArg))) {\n      return CanInlineResult.NO;\n    }\n    // Check for arguments that are evaluated more than once.\n    if (hasSideEffects && NodeUtil.mayEffectMutableState(cArg, compiler) &&\n        NodeUtil.getNameReferenceCount(block, NodeUtil.getBestLValueName(cArg)) > 1) {\n      return CanInlineResult.NO;\n    }\n    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg = cArg.getNext();\n    numPassedArgs++;\n  }\n  \n  // check if all parameters are used at most once\n  Set<String> foundParams = new HashSet<>();\n  fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (fnParam != null) {\n    if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n    foundParams.add(fnParam.getString());\n    fnParam = fnParam.getNext();\n  }\n  if (allParams.size() > foundParams.size() && numPassedArgs == 0) {\n    // if there are more parameters than arguments and no arguments were passed\n    // then we can't inline directly\n    return CanInlineResult.NO;\n  }\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..b1b0cd9b 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,76 +686,71 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n+  Node block = fnNode.getLastChild();\n+  boolean hasSideEffects = NodeUtil.mayHaveSideEffects(block, compiler); // check if function has side-effects after all arguments are checked\n+  \n+  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+  Node cArg = callNode.getFirstChild().getNext();\n+  \n+  // FUNCTIONS CALLED VIA 'CALL' AND 'APPLY' HAVE A THIS-OBJECT AS\n+  // THE FIRST PARAMETER, BUT THIS IS NOT PART OF THE CALLED FUNCTION'S\n+  // PARAMETER LIST.\n+  if (cArg != null && !callNode.getFirstChild().isName() &&\n+      NodeUtil.isFunctionObjectCall(callNode)) {\n+    if (!cArg.isThis()) {\n       return CanInlineResult.NO;\n     }\n-\n-    Node block = fnNode.getLastChild();\n-\n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n+    cArg = cArg.getNext();\n+  }\n+  \n+  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+  \n+  // to check if all parameters are used at least one\n+  Set<String> allParams = new HashSet<>();\n+  while (fnParam != null) {\n+    allParams.add(fnParam.getString());\n+    fnParam = fnParam.getNext();\n+  }\n+  int numPassedArgs = 0;\n+  // check if all arguments have a matching parameter that was defined\n+  while (cArg != null) {\n+    if (!allParams.contains(NodeUtil.getBestLValueName(cArg))) {\n+      return CanInlineResult.NO;\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+    // Check for arguments that are evaluated more than once.\n+    if (hasSideEffects && NodeUtil.mayEffectMutableState(cArg, compiler) &&\n+        NodeUtil.getNameReferenceCount(block, NodeUtil.getBestLValueName(cArg)) > 1) {\n+      return CanInlineResult.NO;\n     }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+      return CanInlineResult.NO;\n     }\n-\n-    return CanInlineResult.YES;\n+    cArg = cArg.getNext();\n+    numPassedArgs++;\n   }\n+  \n+  // check if all parameters are used at most once\n+  Set<String> foundParams = new HashSet<>();\n+  fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+  while (fnParam != null) {\n+    if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n+      return CanInlineResult.NO;\n+    }\n+    foundParams.add(fnParam.getString());\n+    fnParam = fnParam.getNext();\n+  }\n+  if (allParams.size() > foundParams.size() && numPassedArgs == 0) {\n+    // if there are more parameters than arguments and no arguments were passed\n+    // then we can't inline directly\n+    return CanInlineResult.NO;\n+  }\n+  return CanInlineResult.YES;\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}