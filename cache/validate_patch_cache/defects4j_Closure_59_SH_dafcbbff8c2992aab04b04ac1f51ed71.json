{
    "patch": "if (options.getLanguageIn().compareTo(LanguageMode.ECMASCRIPT5) >= 0) {\n  if (options.checkGlobalThisLevel == CheckLevel.ERROR) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        CheckLevel.ERROR);\n  } else if (options.checkGlobalThisLevel == CheckLevel.WARNING) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        CheckLevel.WARNING);\n  } else if (options.checkGlobalThisLevel == CheckLevel.OFF) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        CheckLevel.OFF);\n  } else {\n    // If the checkGlobalThisLevel is not set to ERROR, WARNING or OFF,\n    // set it to WARNING by default.\n    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);\n  }\n} else {\n  // Disable this warning for language modes earlier than ECMASCRIPT5.\n  options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..30254efc 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,28 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+if (options.getLanguageIn().compareTo(LanguageMode.ECMASCRIPT5) >= 0) {\n+  if (options.checkGlobalThisLevel == CheckLevel.ERROR) {\n+    options.setWarningLevel(\n+        DiagnosticGroups.GLOBAL_THIS,\n+        CheckLevel.ERROR);\n+  } else if (options.checkGlobalThisLevel == CheckLevel.WARNING) {\n+    options.setWarningLevel(\n+        DiagnosticGroups.GLOBAL_THIS,\n+        CheckLevel.WARNING);\n+  } else if (options.checkGlobalThisLevel == CheckLevel.OFF) {\n+    options.setWarningLevel(\n+        DiagnosticGroups.GLOBAL_THIS,\n+        CheckLevel.OFF);\n+  } else {\n+    // If the checkGlobalThisLevel is not set to ERROR, WARNING or OFF,\n+    // set it to WARNING by default.\n+    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);\n+  }\n+} else {\n+  // Disable this warning for language modes earlier than ECMASCRIPT5.\n+  options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);\n+}\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}