{
    "patch": "public double getTypedPercent(List<JournalStudent> journalStudents) {\n    if (journalStudents == null || journalStudents.isEmpty()) {\n        return 0.0;\n    }\n\n    double totalStudents = journalStudents.size();\n    double entries = 0.0;\n\n    for (JournalStudent js : journalStudents) {\n        if (js.getJournalEntry().getTyped()) {\n            entries += 1.0;\n        }\n    }\n\n    return entries * 100.0 / totalStudents;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..984363fa 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(List<JournalStudent> journalStudents) {\n+    if (journalStudents == null || journalStudents.isEmpty()) {\n+        return 0.0;\n+    }\n+\n+    double totalStudents = journalStudents.size();\n+    double entries = 0.0;\n+\n+    for (JournalStudent js : journalStudents) {\n+        if (js.getJournalEntry().getTyped()) {\n+            entries += 1.0;\n+        }\n+    }\n+\n+    return entries * 100.0 / totalStudents;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}