{
    "patch": "public Fraction reduce() {\n    int gcd = 1;\n\n    if (numerator != 0) {\n        int a = Math.abs(numerator);\n        int b = Math.abs(denominator);\n\n        while(b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n\n        gcd = a;\n    }\n\n    if (gcd == 1) {\n        return this;\n    }\n\n    return new Fraction(numerator / gcd, denominator / gcd);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..549769c8 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,14 +462,29 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n+public Fraction reduce() {\n+    int gcd = 1;\n+\n+    if (numerator != 0) {\n+        int a = Math.abs(numerator);\n+        int b = Math.abs(denominator);\n+\n+        while(b != 0) {\n+            int temp = b;\n+            b = a % b;\n+            a = temp;\n         }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+\n+        gcd = a;\n     }\n \n+    if (gcd == 1) {\n+        return this;\n+    }\n+\n+    return new Fraction(numerator / gcd, denominator / gcd);\n+}\n+\n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>\n      * ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1> but was:<100>",
    "test_result": "FAIL"
}