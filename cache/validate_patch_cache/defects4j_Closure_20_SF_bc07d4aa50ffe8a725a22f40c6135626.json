{
    "patch": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n      Node value = callTarget.getNext();\n      if (value != null && !NodeUtil.mayHaveSideEffects(value)) {\n        // Check if the only arg is an immutable string or number.\n        // (We don't fold string concatenation, since the string\n        // constructor is different from the + operator in that it\n        // returns '' for null/undefined)\n        if ((value.isString() || value.isNumber()) &&\n            !value.hasChildren() &&\n            !value.getBooleanProp(Node.IS_TEMPLATE_BLOCK) &&\n            !value.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n          Node addition = IR.add(\n              IR.string(\"\").srcref(callTarget),\n              value.detachFromParent());\n          n.getParent().replaceChild(n, addition);\n          reportCodeChange();\n          return addition;\n        }\n      }\n    }\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..111e7260 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -209,21 +209,24 @@ class PeepholeSubstituteAlternateSyntax\n     Preconditions.checkState(n.isCall());\n     Node callTarget = n.getFirstChild();\n     if (callTarget != null && callTarget.isName() &&\n-          callTarget.getString().equals(\"String\")) {\n-      // Fold String(a) to '' + (a) on immutable literals,\n-      // which allows further optimizations\n-      //\n-      // We can't do this in the general case, because String(a) has\n-      // slightly different semantics than '' + (a). See\n-      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n+        callTarget.getString().equals(\"String\")) {\n       Node value = callTarget.getNext();\n-      if (value != null) {\n-        Node addition = IR.add(\n-            IR.string(\"\").srcref(callTarget),\n-            value.detachFromParent());\n-        n.getParent().replaceChild(n, addition);\n-        reportCodeChange();\n-        return addition;\n+      if (value != null && !NodeUtil.mayHaveSideEffects(value)) {\n+        // Check if the only arg is an immutable string or number.\n+        // (We don't fold string concatenation, since the string\n+        // constructor is different from the + operator in that it\n+        // returns '' for null/undefined)\n+        if ((value.isString() || value.isNumber()) &&\n+            !value.hasChildren() &&\n+            !value.getBooleanProp(Node.IS_TEMPLATE_BLOCK) &&\n+            !value.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n+          Node addition = IR.add(\n+              IR.string(\"\").srcref(callTarget),\n+              value.detachFromParent());\n+          n.getParent().replaceChild(n, addition);\n+          reportCodeChange();\n+          return addition;\n+        }\n       }\n     }\n     return n;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}