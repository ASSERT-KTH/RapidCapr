{
    "patch": "public Fraction reduce() {\n    int n = numerator;\n    int d = denominator;\n    int gcd = greatestCommonDivisor(n, d);\n    if (gcd == 0) {\n        return ZERO;\n    }\n    n /= gcd;\n    d /= gcd;\n    // If the denominator is still negative, make numerator negative instead\n    if (d < 0) {\n        n = -n;\n        d = -d;\n    }\n    return new Fraction(n, d);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..98d4d5fb 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,13 +462,22 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n-    }\n+public Fraction reduce() {\n+    int n = numerator;\n+    int d = denominator;\n+    int gcd = greatestCommonDivisor(n, d);\n+    if (gcd == 0) {\n+        return ZERO;\n+    }\n+    n /= gcd;\n+    d /= gcd;\n+    // If the denominator is still negative, make numerator negative instead\n+    if (d < 0) {\n+        n = -n;\n+        d = -d;\n+    }\n+    return new Fraction(n, d);\n+}\n \n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<-2/3> was not:<-2/3>",
    "test_result": "FAIL"
}