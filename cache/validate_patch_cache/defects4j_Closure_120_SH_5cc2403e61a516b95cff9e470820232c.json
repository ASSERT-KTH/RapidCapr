{
    "patch": ">>> [ INFILL ] <<<\n      return !hasAssignmentBefore(ref);\n    }\n\n    private boolean hasAssignmentBefore(Reference ref) {\n      BasicBlock block = ref.getBasicBlock();\n      int i = ref.getIndexInBlock() - 1;\n      while (block != null && i < 0) {\n        block = block.getPrevious();\n        if (block != null) {\n          i = block.getReferences().size() - 1;\n        }\n      }\n      while (block != null) {\n        for (int j = i; j >= 0; --j) {\n          Reference other = block.getReferences().get(j);\n          if (other.isDeclaration()) {\n            // We can stop because any previous assignment would be to\n            // the declaration.\n            return false;\n          }\n          if (other.isLValue()) {\n            return true;\n          }\n        }\n        block = block.getPrevious();\n        i = block == null ? -1 : block.getReferences().size() - 1;\n      }\n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..f864e6fd 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,35 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+>>> [ INFILL ] <<<\n+      return !hasAssignmentBefore(ref);\n+    }\n+\n+    private boolean hasAssignmentBefore(Reference ref) {\n+      BasicBlock block = ref.getBasicBlock();\n+      int i = ref.getIndexInBlock() - 1;\n+      while (block != null && i < 0) {\n+        block = block.getPrevious();\n+        if (block != null) {\n+          i = block.getReferences().size() - 1;\n+        }\n+      }\n+      while (block != null) {\n+        for (int j = i; j >= 0; --j) {\n+          Reference other = block.getReferences().get(j);\n+          if (other.isDeclaration()) {\n+            // We can stop because any previous assignment would be to\n+            // the declaration.\n+            return false;\n+          }\n+          if (other.isLValue()) {\n+            return true;\n+          }\n+        }\n+        block = block.getPrevious();\n+        i = block == null ? -1 : block.getReferences().size() - 1;\n+      }\n+      return false;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}