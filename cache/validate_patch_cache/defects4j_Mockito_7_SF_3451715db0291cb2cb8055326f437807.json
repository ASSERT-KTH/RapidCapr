{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if(bounds.length == 0) {\n        registerTypeVariablesOn(typeVariable);\n    } else if(bounds.length == 1 && !(bounds[0] instanceof TypeVariable)) {\n        registerTypeVariablesOn(bounds[0]);\n    } else {\n        for(Type bound : bounds) {\n            if(bound instanceof TypeVariable) {\n                TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n                Type actualTypeArg = getActualTypeArgumentFor(typeVar);\n                if(actualTypeArg != null) {\n                    registerTypeVariablesOn(actualTypeArg);\n                } else {\n                    readTypeVariables(bound);\n                }\n            } else if(!(bound instanceof Class)){\n                registerTypeVariablesOn(bound);\n            }\n        }\n        registerTypeVariablesOn(typeVariable);\n    }\n}\n\nprivate void readTypeVariables(Type type) {\n    if(type instanceof TypeVariable) {\n        TypeVariable<?> typeVar = (TypeVariable<?>) type;\n        Type actualTypeArg = getActualTypeArgumentFor(typeVar);\n        if(actualTypeArg != null) {\n            registerTypeVariablesOn(actualTypeArg);\n        } else {\n            readTypeVariables(typeVar.getBounds()[0]);\n        }\n    } else if(type instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) type;\n        Type rawType = parameterizedType.getRawType();\n        for(Type argument : parameterizedType.getActualTypeArguments()) {\n            if(argument instanceof TypeVariable) {\n                TypeVariable<?> typeVar = (TypeVariable<?>) argument;\n                Type actualTypeArg = getActualTypeArgumentFor(typeVar);\n                if(actualTypeArg != null) {\n                    registerTypeVariablesOn(actualTypeArg);\n                } else {\n                    readTypeVariables(argument);\n                }\n            } else if(!(argument instanceof Class)) {\n                registerTypeVariablesOn(argument);\n            }\n        }\n        if(rawType instanceof TypeVariable) {\n            readTypeVariables(rawType);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..55e2578db 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,61 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if(bounds.length == 0) {\n+        registerTypeVariablesOn(typeVariable);\n+    } else if(bounds.length == 1 && !(bounds[0] instanceof TypeVariable)) {\n+        registerTypeVariablesOn(bounds[0]);\n+    } else {\n+        for(Type bound : bounds) {\n+            if(bound instanceof TypeVariable) {\n+                TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n+                Type actualTypeArg = getActualTypeArgumentFor(typeVar);\n+                if(actualTypeArg != null) {\n+                    registerTypeVariablesOn(actualTypeArg);\n+                } else {\n+                    readTypeVariables(bound);\n+                }\n+            } else if(!(bound instanceof Class)){\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+        registerTypeVariablesOn(typeVariable);\n+    }\n+}\n+\n+private void readTypeVariables(Type type) {\n+    if(type instanceof TypeVariable) {\n+        TypeVariable<?> typeVar = (TypeVariable<?>) type;\n+        Type actualTypeArg = getActualTypeArgumentFor(typeVar);\n+        if(actualTypeArg != null) {\n+            registerTypeVariablesOn(actualTypeArg);\n+        } else {\n+            readTypeVariables(typeVar.getBounds()[0]);\n+        }\n+    } else if(type instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) type;\n+        Type rawType = parameterizedType.getRawType();\n+        for(Type argument : parameterizedType.getActualTypeArguments()) {\n+            if(argument instanceof TypeVariable) {\n+                TypeVariable<?> typeVar = (TypeVariable<?>) argument;\n+                Type actualTypeArg = getActualTypeArgumentFor(typeVar);\n+                if(actualTypeArg != null) {\n+                    registerTypeVariablesOn(actualTypeArg);\n+                } else {\n+                    readTypeVariables(argument);\n+                }\n+            } else if(!(argument instanceof Class)) {\n+                registerTypeVariablesOn(argument);\n+            }\n+        }\n+        if(rawType instanceof TypeVariable) {\n+            readTypeVariables(rawType);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}