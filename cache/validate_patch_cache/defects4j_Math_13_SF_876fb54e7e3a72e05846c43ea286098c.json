{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n        // find the singular value decomposition of the matrix\n        final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n        RealMatrix u = dec.getU();\n        RealMatrix s = dec.getS();\n        RealMatrix v = dec.getV();\n\n        // take the square root of the eigenvalues\n        for (int i = 0; i < s.getRowDimension(); i++) {\n            s.setEntry(i, i, FastMath.sqrt(s.getEntry(i, i)));\n        }\n\n        // compute the square root of the matrix\n        RealMatrix sqrt = u.multiply(s).multiply(v.transpose());\n        return sqrt;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..636fcbccf 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+        // find the singular value decomposition of the matrix\n+        final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n+        RealMatrix u = dec.getU();\n+        RealMatrix s = dec.getS();\n+        RealMatrix v = dec.getV();\n+\n+        // take the square root of the eigenvalues\n+        for (int i = 0; i < s.getRowDimension(); i++) {\n+            s.setEntry(i, i, FastMath.sqrt(s.getEntry(i, i)));\n+        }\n+\n+        // compute the square root of the matrix\n+        RealMatrix sqrt = u.multiply(s).multiply(v.transpose());\n+        return sqrt;\n }",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}