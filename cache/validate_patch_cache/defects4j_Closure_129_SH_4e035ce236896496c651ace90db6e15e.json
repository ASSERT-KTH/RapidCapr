{
    "patch": "      Node next = first.getNext();\n      while (next != null) {\n        if (!NodeUtil.isGet(next) && !NodeUtil.isName(next) && !NodeUtil.isString(next)) {\n          break;\n        }\n        if (NodeUtil.isGet(next)) {\n          Node propNode = next.getNext();\n          if (propNode == null || !propNode.isString()) {\n            break;\n          }\n        }\n        first = next;\n        next = first.getNext();\n      }\n      if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..9fb155d4 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,23 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      Node next = first.getNext();\n+      while (next != null) {\n+        if (!NodeUtil.isGet(next) && !NodeUtil.isName(next) && !NodeUtil.isString(next)) {\n+          break;\n+        }\n+        if (NodeUtil.isGet(next)) {\n+          Node propNode = next.getNext();\n+          if (propNode == null || !propNode.isString()) {\n+            break;\n+          }\n+        }\n+        first = next;\n+        next = first.getNext();\n+      }\n+      if (!NodeUtil.isGet(first)) {\n+        n.putBooleanProp(Node.FREE_CALL, true);\n+      }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}