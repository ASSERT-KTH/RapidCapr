{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final int n = m.getColumnDimension();\n        final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n        final RealMatrix u = svd.getU();\n        final RealMatrix s = svd.getS();\n        final RealMatrix v = svd.getV();\n        final RealMatrix sqrtS = MatrixUtils.createRealMatrix(n, n);\n        for (int i = 0; i < n; i++) {\n            sqrtS.setEntry(i, i, FastMath.sqrt(s.getEntry(i, i)));\n        }\n        final RealMatrix sqrtM = u.multiply(sqrtS).multiply(v.transpose());\n        final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n        final RealMatrix x = MatrixUtils.createRealMatrix(n, n);\n        RealMatrix y = sqrtM;\n        int i = 0;\n        final double eps = 1e-15; // tolerance for stopping the iteration\n        while (true) {\n            x.copyInPlace(y.getData());\n            final RealMatrix t = MatrixUtils.inverse(x);\n            y = x.add(sqrtM.multiply(t)).scalarMultiply(0.5);\n            final double err = y.subtract(x).getFrobeniusNorm() / n;\n            if (err < eps || i > 1000) {\n                break;\n            }\n            i++;\n        }\n        return x;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..730258766 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,31 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final int n = m.getColumnDimension();\n+        final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+        final RealMatrix u = svd.getU();\n+        final RealMatrix s = svd.getS();\n+        final RealMatrix v = svd.getV();\n+        final RealMatrix sqrtS = MatrixUtils.createRealMatrix(n, n);\n+        for (int i = 0; i < n; i++) {\n+            sqrtS.setEntry(i, i, FastMath.sqrt(s.getEntry(i, i)));\n+        }\n+        final RealMatrix sqrtM = u.multiply(sqrtS).multiply(v.transpose());\n+        final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n+        final RealMatrix x = MatrixUtils.createRealMatrix(n, n);\n+        RealMatrix y = sqrtM;\n+        int i = 0;\n+        final double eps = 1e-15; // tolerance for stopping the iteration\n+        while (true) {\n+            x.copyInPlace(y.getData());\n+            final RealMatrix t = MatrixUtils.inverse(x);\n+            y = x.add(sqrtM.multiply(t)).scalarMultiply(0.5);\n+            final double err = y.subtract(x).getFrobeniusNorm() / n;\n+            if (err < eps || i > 1000) {\n+                break;\n+            }\n+            i++;\n+        }\n+        return x;\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}