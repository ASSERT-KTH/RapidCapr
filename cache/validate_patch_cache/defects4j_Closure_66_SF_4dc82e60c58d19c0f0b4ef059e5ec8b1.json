{
    "patch": "import com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic static double getTypedPercent(String jsonStr) {\n    double percent = 0.0;\n    try {\n        ObjectMapper mapper = new ObjectMapper();\n        JsonNode rootNode = mapper.readTree(jsonStr);\n        int typedCount = rootNode.get(\"stats\").get(\"typed\").asInt();\n        int totalCount = rootNode.get(\"stats\").get(\"total\").asInt();\n        percent = ((double) typedCount / totalCount) * 100;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return percent;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..5e8b2222 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public static double getTypedPercent(String jsonStr) {\n+    double percent = 0.0;\n+    try {\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode rootNode = mapper.readTree(jsonStr);\n+        int typedCount = rootNode.get(\"stats\").get(\"typed\").asInt();\n+        int totalCount = rootNode.get(\"stats\").get(\"total\").asInt();\n+        percent = ((double) typedCount / totalCount) * 100;\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+    }\n+    return percent;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}