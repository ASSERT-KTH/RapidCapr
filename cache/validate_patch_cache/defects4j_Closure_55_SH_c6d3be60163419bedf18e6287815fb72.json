{
    "patch": "    if (n.getType() == Token.FUNCTION) {\n      return true;\n    }\n    if (NodeUtil.isCall(n)) {\n      for (Node child : n.children()) {\n        if (child.getType() == Token.FUNCTION) {\n          return true;\n        }\n      }\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..6aa1c8c0 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,17 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (n.getType() == Token.FUNCTION) {\n+      return true;\n+    }\n+    if (NodeUtil.isCall(n)) {\n+      for (Node child : n.children()) {\n+        if (child.getType() == Token.FUNCTION) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n   }\n \n   /**",
    "result_reason": "java.lang.IllegalStateException: Expected function but was call Reference node CALL 4 [free_call: 1] [source_file: testcode]",
    "test_result": "FAIL"
}