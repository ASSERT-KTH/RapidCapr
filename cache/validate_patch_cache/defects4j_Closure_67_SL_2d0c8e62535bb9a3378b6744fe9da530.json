{
    "patch": "      && (assign.getNext() == null || assign.getNext().getType() == Token.EXPR_RESULT) && \n      (!NodeUtil.isAssignmentOp(assign.getParent()) || assign.getParent().getType() == Token.FOR || assign.getParent().getType() == Token.EXPR_VOID)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..11fab7b9 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,8 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+      && (assign.getNext() == null || assign.getNext().getType() == Token.EXPR_RESULT) && \n+      (!NodeUtil.isAssignmentOp(assign.getParent()) || assign.getParent().getType() == Token.FOR || assign.getParent().getType() == Token.EXPR_VOID)) {\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}