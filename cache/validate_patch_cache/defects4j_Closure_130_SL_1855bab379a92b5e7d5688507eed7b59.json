{
    "patch": "if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0) {\n    if (name.getDeclaration() == null) {\n        // {@code name} meets condition (b).\n        // Find all of its local aliases and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n                // {@code name} meets condition (c).\n                // Try to inline it.\n                if (inlineAliasIfPossible(ref, namespace)) {\n                    name.removeRef(ref);\n                }\n            }\n        }\n\n        // Check if {@code name} has any aliases left after the\n        // local-alias-inlining above.\n        if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props != null) {\n            // All of {@code name}'s children meet condition (a),\n            // so they can be added to the worklist.\n            workList.addAll(name.props);\n        }\n    } else if (name.getRef().getTwin() == null) {\n        // {@code name} meets condition (a); it has one definition.\n        // Check if it should be converted to a VAR.\n        handleOneDefinition(name, namespace);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..7edf3452 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,34 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0) {\n+    if (name.getDeclaration() == null) {\n+        // {@code name} meets condition (b).\n+        // Find all of its local aliases and try to inline them.\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : refs) {\n+            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+                // {@code name} meets condition (c).\n+                // Try to inline it.\n+                if (inlineAliasIfPossible(ref, namespace)) {\n+                    name.removeRef(ref);\n+                }\n+            }\n+        }\n+\n+        // Check if {@code name} has any aliases left after the\n+        // local-alias-inlining above.\n+        if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props != null) {\n+            // All of {@code name}'s children meet condition (a),\n+            // so they can be added to the worklist.\n+            workList.addAll(name.props);\n+        }\n+    } else if (name.getRef().getTwin() == null) {\n+        // {@code name} meets condition (a); it has one definition.\n+        // Check if it should be converted to a VAR.\n+        handleOneDefinition(name, namespace);\n+    }\n+}\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}