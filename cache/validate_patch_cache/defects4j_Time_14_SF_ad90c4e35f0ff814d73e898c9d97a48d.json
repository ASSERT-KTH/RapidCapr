{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        boolean flip = false;\n        int[] newValues = Arrays.copyOf(values, values.length);\n\n        if (valueToAdd < 0) {\n            valueToAdd = -valueToAdd;\n            flip = true;\n        }\n\n        int monthIndex = Arrays.asList(partial.getFields()).indexOf(DateTimeFieldType.monthOfYear());\n\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n\n        int maxMonthToAdd = Integer.MAX_VALUE - iChronology.monthOfYear().get(instant) + (flip ? 0 : -1);\n        if (valueToAdd > maxMonthToAdd) {\n            // Add the maximum number of months that won't result in an invalid date\n            newValues = iChronology.monthOfYear().add(partial, monthIndex, newValues, maxMonthToAdd);\n            instant = iChronology.set(partial, instant, newValues);\n            valueToAdd -= maxMonthToAdd;\n        }\n\n        if (valueToAdd == 0) {\n            return newValues;\n        }\n\n        while (true) {\n            try {\n                instant = iChronology.monthOfYear().add(instant, valueToAdd * (flip ? -1 : 1));\n                break;\n            } catch (IllegalFieldValueException e) {\n                // Subtract a day until a valid date is reached\n                valueToAdd++;\n                instant = iChronology.dayOfMonth().add(instant, -1);\n            }\n        }\n\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..25090fa9 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,54 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        boolean flip = false;\n+        int[] newValues = Arrays.copyOf(values, values.length);\n+\n+        if (valueToAdd < 0) {\n+            valueToAdd = -valueToAdd;\n+            flip = true;\n+        }\n+\n+        int monthIndex = Arrays.asList(partial.getFields()).indexOf(DateTimeFieldType.monthOfYear());\n+\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        }\n+\n+        int maxMonthToAdd = Integer.MAX_VALUE - iChronology.monthOfYear().get(instant) + (flip ? 0 : -1);\n+        if (valueToAdd > maxMonthToAdd) {\n+            // Add the maximum number of months that won't result in an invalid date\n+            newValues = iChronology.monthOfYear().add(partial, monthIndex, newValues, maxMonthToAdd);\n+            instant = iChronology.set(partial, instant, newValues);\n+            valueToAdd -= maxMonthToAdd;\n+        }\n+\n         if (valueToAdd == 0) {\n-            return values;\n+            return newValues;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+\n+        while (true) {\n+            try {\n+                instant = iChronology.monthOfYear().add(instant, valueToAdd * (flip ? -1 : 1));\n+                break;\n+            } catch (IllegalFieldValueException e) {\n+                // Subtract a day until a valid date is reached\n+                valueToAdd++;\n+                instant = iChronology.dayOfMonth().add(instant, -1);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}