{
    "patch": "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (str == null) {\n        return;\n    }\n    int sz;\n    sz = str.length();\n    for (int i = 0; i < sz; i++) {\n        char ch = str.charAt(i);\n\n        boolean escapeBackslash = false;\n        switch (ch) {\n            // handle backslash\n            case '\\\\':\n                // look ahead to see if the next character is a quote character\n                if (i < sz - 1) {\n                    char nextChar = str.charAt(i + 1);\n                    if (nextChar == '\"' || nextChar == '\\'') {\n                        escapeBackslash = true;\n                    }\n                } else {\n                    escapeBackslash = true;\n                }\n                break;\n            // handle unicode\n            case '\\u0085':\n            case '\\u2028':\n            case '\\u2029':\n                out.write(\"\\\\u\" + hex(ch));\n                break;\n            case '\\u00a0':\n                out.write(\"\\\\u00A0\");\n                break;\n            default:\n                if (ch > 0xfff) {\n                    out.write(\"\\\\u\" + hex(ch));\n                } else if (ch > 0xff) {\n                    out.write(\"\\\\u0\" + hex(ch));\n                } else if (ch > 0x7f) {\n                    out.write(\"\\\\u00\" + hex(ch));\n                } else {\n                    out.write(ch);\n                    continue;\n                }\n                break;\n        }\n\n        if (escapeBackslash) {\n            out.write(\"\\\\\\\\\");\n        } else {\n            switch (ch) {\n                case '\\b':\n                    out.write('\\\\');\n                    out.write('b');\n                    break;\n                case '\\t':\n                    out.write('\\\\');\n                    out.write('t');\n                    break;\n                case '\\n':\n                    out.write('\\\\');\n                    out.write('n');\n                    break;\n                case '\\f':\n                    out.write('\\\\');\n                    out.write('f');\n                    break;\n                case '\\r':\n                    out.write('\\\\');\n                    out.write('r');\n                    break;\n                case '\\\"':\n                    out.write('\\\\');\n                    out.write('\\\"');\n                    break;\n                case '\\'':\n                    if (escapeSingleQuote) {\n                        out.write('\\\\');\n                    }\n                    out.write('\\'');\n                    break;\n                default:\n                    out.write(ch);\n                    break;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/StringEscapeUtils.java b/src/java/org/apache/commons/lang/StringEscapeUtils.java\nindex 4fda091d..3045d550 100644\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -168,78 +168,96 @@ public class StringEscapeUtils {\n      * @param escapeSingleQuote escapes single quotes if <code>true</code>\n      * @throws IOException if an IOException occurs\n      */\n-    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (str == null) {\n-            return;\n-        }\n-        int sz;\n-        sz = str.length();\n-        for (int i = 0; i < sz; i++) {\n-            char ch = str.charAt(i);\n+private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (str == null) {\n+        return;\n+    }\n+    int sz;\n+    sz = str.length();\n+    for (int i = 0; i < sz; i++) {\n+        char ch = str.charAt(i);\n \n+        boolean escapeBackslash = false;\n+        switch (ch) {\n+            // handle backslash\n+            case '\\\\':\n+                // look ahead to see if the next character is a quote character\n+                if (i < sz - 1) {\n+                    char nextChar = str.charAt(i + 1);\n+                    if (nextChar == '\"' || nextChar == '\\'') {\n+                        escapeBackslash = true;\n+                    }\n+                } else {\n+                    escapeBackslash = true;\n+                }\n+                break;\n             // handle unicode\n-            if (ch > 0xfff) {\n+            case '\\u0085':\n+            case '\\u2028':\n+            case '\\u2029':\n                 out.write(\"\\\\u\" + hex(ch));\n-            } else if (ch > 0xff) {\n-                out.write(\"\\\\u0\" + hex(ch));\n-            } else if (ch > 0x7f) {\n-                out.write(\"\\\\u00\" + hex(ch));\n-            } else if (ch < 32) {\n-                switch (ch) {\n-                    case '\\b':\n-                        out.write('\\\\');\n-                        out.write('b');\n-                        break;\n-                    case '\\n':\n-                        out.write('\\\\');\n-                        out.write('n');\n-                        break;\n-                    case '\\t':\n-                        out.write('\\\\');\n-                        out.write('t');\n-                        break;\n-                    case '\\f':\n-                        out.write('\\\\');\n-                        out.write('f');\n-                        break;\n-                    case '\\r':\n-                        out.write('\\\\');\n-                        out.write('r');\n-                        break;\n-                    default :\n-                        if (ch > 0xf) {\n-                            out.write(\"\\\\u00\" + hex(ch));\n-                        } else {\n-                            out.write(\"\\\\u000\" + hex(ch));\n-                        }\n-                        break;\n+                break;\n+            case '\\u00a0':\n+                out.write(\"\\\\u00A0\");\n+                break;\n+            default:\n+                if (ch > 0xfff) {\n+                    out.write(\"\\\\u\" + hex(ch));\n+                } else if (ch > 0xff) {\n+                    out.write(\"\\\\u0\" + hex(ch));\n+                } else if (ch > 0x7f) {\n+                    out.write(\"\\\\u00\" + hex(ch));\n+                } else {\n+                    out.write(ch);\n+                    continue;\n                 }\n-            } else {\n-                switch (ch) {\n-                    case '\\'':\n-                        if (escapeSingleQuote) {\n-                          out.write('\\\\');\n-                        }\n-                        out.write('\\'');\n-                        break;\n-                    case '\"':\n-                        out.write('\\\\');\n-                        out.write('\"');\n-                        break;\n-                    case '\\\\':\n-                        out.write('\\\\');\n+                break;\n+        }\n+\n+        if (escapeBackslash) {\n+            out.write(\"\\\\\\\\\");\n+        } else {\n+            switch (ch) {\n+                case '\\b':\n+                    out.write('\\\\');\n+                    out.write('b');\n+                    break;\n+                case '\\t':\n+                    out.write('\\\\');\n+                    out.write('t');\n+                    break;\n+                case '\\n':\n+                    out.write('\\\\');\n+                    out.write('n');\n+                    break;\n+                case '\\f':\n+                    out.write('\\\\');\n+                    out.write('f');\n+                    break;\n+                case '\\r':\n+                    out.write('\\\\');\n+                    out.write('r');\n+                    break;\n+                case '\\\"':\n+                    out.write('\\\\');\n+                    out.write('\\\"');\n+                    break;\n+                case '\\'':\n+                    if (escapeSingleQuote) {\n                         out.write('\\\\');\n-                        break;\n-                    default :\n-                        out.write(ch);\n-                        break;\n-                }\n+                    }\n+                    out.write('\\'');\n+                    break;\n+                default:\n+                    out.write(ch);\n+                    break;\n             }\n         }\n     }\n+}\n \n     /**\n      * <p>Returns an upper case hexadecimal <code>String</code> for the given",
    "result_reason": "junit.framework.ComparisonFailure: escapeJava(String) failed: tab expected:<[\\t]> but was:<[ ]>",
    "test_result": "FAIL"
}