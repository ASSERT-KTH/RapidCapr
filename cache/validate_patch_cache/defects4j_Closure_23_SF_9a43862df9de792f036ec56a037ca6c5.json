{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n  // If GETPROP/GETELEM is used as assignment target the array literal is\n  // acting as a temporary we can't fold it here:\n  //    \"[][0] += 1\"\n  if (isAssignmentTarget(n)) {\n    return n;\n  }\n\n  if (!right.isNumber() || !NodeUtil.isImmutableValue(left)) {\n    // Sometimes people like to use complex expressions to index into\n    // arrays, or strings to index into array methods.\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex < 0 || intIndex != index) {\n    error(intIndex < 0 ? INDEX_OUT_OF_BOUNDS_ERROR : INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n\n  int numChildren = NodeUtil.getArrayLength(left);\n  if (intIndex >= numChildren) {\n    for (int i = numChildren; i < intIndex; i++) {\n      left.addChildToBack(IR.empty());\n    }\n    Node undefinedNode = NodeUtil.newUndefinedNode(parent);\n    left.addChildToBack(undefinedNode);\n    parent.replaceChild(n, undefinedNode);\n    reportCodeChange();\n    return undefinedNode;\n  }\n\n  Node child = NodeUtil.getArrayElement(left, intIndex);\n\n  if (child.isEmpty()) {\n    child = NodeUtil.newUndefinedNode(parent);\n  } else {\n    left.removeChild(child);\n  }\n\n  parent.replaceChild(n, child);\n  reportCodeChange();\n  return child;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..2c5f4d73 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,58 +1419,53 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n-\n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n-\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  Node parent = n.getParent();\n+  // If GETPROP/GETELEM is used as assignment target the array literal is\n+  // acting as a temporary we can't fold it here:\n+  //    \"[][0] += 1\"\n+  if (isAssignmentTarget(n)) {\n+    return n;\n+  }\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n+  if (!right.isNumber() || !NodeUtil.isImmutableValue(left)) {\n+    // Sometimes people like to use complex expressions to index into\n+    // arrays, or strings to index into array methods.\n+    return n;\n+  }\n \n-      current = current.getNext();\n-    }\n+  double index = right.getDouble();\n+  int intIndex = (int) index;\n+  if (intIndex < 0 || intIndex != index) {\n+    error(intIndex < 0 ? INDEX_OUT_OF_BOUNDS_ERROR : INVALID_GETELEM_INDEX_ERROR, right);\n+    return n;\n+  }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+  int numChildren = NodeUtil.getArrayLength(left);\n+  if (intIndex >= numChildren) {\n+    for (int i = numChildren; i < intIndex; i++) {\n+      left.addChildToBack(IR.empty());\n     }\n+    Node undefinedNode = NodeUtil.newUndefinedNode(parent);\n+    left.addChildToBack(undefinedNode);\n+    parent.replaceChild(n, undefinedNode);\n+    reportCodeChange();\n+    return undefinedNode;\n+  }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n-    }\n+  Node child = NodeUtil.getArrayElement(left, intIndex);\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n+  if (child.isEmpty()) {\n+    child = NodeUtil.newUndefinedNode(parent);\n+  } else {\n+    left.removeChild(child);\n   }\n \n+  parent.replaceChild(n, child);\n+  reportCodeChange();\n+  return child;\n+}\n+\n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}