{
    "patch": "else if (maybeDecl.isBlockScoped() &&\n                   maybeDecl.getNode() == maybeInit.getNode()) {\n        int declIndex = references.indexOf(maybeDecl);\n        int initIndex = references.indexOf(maybeInit);\n        if (declIndex != -1 && initIndex != -1 && initIndex > declIndex) {\n          return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..5c2efd0b 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,12 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+else if (maybeDecl.isBlockScoped() &&\n+                   maybeDecl.getNode() == maybeInit.getNode()) {\n+        int declIndex = references.indexOf(maybeDecl);\n+        int initIndex = references.indexOf(maybeInit);\n+        if (declIndex != -1 && initIndex != -1 && initIndex > declIndex) {\n+          return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}