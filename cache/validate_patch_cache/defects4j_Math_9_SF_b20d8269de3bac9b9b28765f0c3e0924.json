{
    "patch": "public Line revert() {\n    final Line reverted = new Line(zero, direction.negate());\n    final Vector2D revertedDirection = reverted.getDirection();\n    if (Double.isNaN(revertedDirection.getX()) ||\n            Double.isInfinite(revertedDirection.getX()) || \n            Double.isNaN(revertedDirection.getY()) ||\n            Double.isInfinite(revertedDirection.getY())) {\n        throw new RuntimeException(\"Invalid line direction\");\n    }\n    return reverted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..94ee3c961 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,17 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+    final Line reverted = new Line(zero, direction.negate());\n+    final Vector2D revertedDirection = reverted.getDirection();\n+    if (Double.isNaN(revertedDirection.getX()) ||\n+            Double.isInfinite(revertedDirection.getX()) || \n+            Double.isNaN(revertedDirection.getY()) ||\n+            Double.isInfinite(revertedDirection.getY())) {\n+        throw new RuntimeException(\"Invalid line direction\");\n+    }\n+    return reverted;\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}