{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n    return false;\n  }\n\n  Node child = n.getFirstChild();\n\n  // Ignore EXPR_RESULT blocks that are child of a FOR, WHILE or DO loop,\n  // or a LABEL statement.\n  if (n.getParent() != null && (n.getParent().getType() == Token.FOR ||\n                                n.getParent().getType() == Token.WHILE ||\n                                n.getParent().getType() == Token.DO ||\n                                n.getParent().getType() == Token.LABEL)) {\n    return false;\n  }\n\n  // Ignore constant declarations.\n  if (child.getType() == Token.CONST) {\n    return false;\n  }\n\n  // Traverse the block and check if it only contains expressions and/or VAR statements.\n  int count = 0;\n  for (Node cur = child; cur != null; cur = cur.getNext()) {\n    int type = cur.getType();\n    if (NodeUtil.isControlStructure(cur) ||\n        NodeUtil.isStatementBlock(cur) ||\n        type == Token.EMPTY ||\n        type == Token.LABEL ||\n        type == Token.DEBUGGER ||\n        type == Token.CONST &&\n        cur.hasChildren() &&\n        cur.getFirstChild().getNext() == null &&\n        isSingleExpression(cur.getFirstChild())) {\n      return false;\n    }\n    if (type != Token.EXPR_RESULT && type != Token.VAR && !NodeUtil.isExpressionNode(cur)) {\n      return false;\n    }\n    count++;\n  }\n  \n  // This is a foldable block if the block's child is an expression or a VAR statement,\n  // or the count of valid expressions and VAR declarations is 1.\n  return count == 1 || NodeUtil.isExpressionNode(child) || child.getType() == Token.VAR;\n}\n\nprivate boolean isSingleExpression(Node n) {\n  if (n.getType() == Token.EXPR_RESULT) {\n    n = n.getFirstChild();\n  }\n  return NodeUtil.isExpressionNode(n) &&\n      n.getNext() == null &&\n      // Ignore simple constant declarations.\n      n.getType() != Token.CONST &&\n      !NodeUtil.mayHaveSideEffects(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..2e2c047f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,64 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n+    return false;\n+  }\n+\n+  Node child = n.getFirstChild();\n+\n+  // Ignore EXPR_RESULT blocks that are child of a FOR, WHILE or DO loop,\n+  // or a LABEL statement.\n+  if (n.getParent() != null && (n.getParent().getType() == Token.FOR ||\n+                                n.getParent().getType() == Token.WHILE ||\n+                                n.getParent().getType() == Token.DO ||\n+                                n.getParent().getType() == Token.LABEL)) {\n+    return false;\n+  }\n \n+  // Ignore constant declarations.\n+  if (child.getType() == Token.CONST) {\n     return false;\n   }\n \n+  // Traverse the block and check if it only contains expressions and/or VAR statements.\n+  int count = 0;\n+  for (Node cur = child; cur != null; cur = cur.getNext()) {\n+    int type = cur.getType();\n+    if (NodeUtil.isControlStructure(cur) ||\n+        NodeUtil.isStatementBlock(cur) ||\n+        type == Token.EMPTY ||\n+        type == Token.LABEL ||\n+        type == Token.DEBUGGER ||\n+        type == Token.CONST &&\n+        cur.hasChildren() &&\n+        cur.getFirstChild().getNext() == null &&\n+        isSingleExpression(cur.getFirstChild())) {\n+      return false;\n+    }\n+    if (type != Token.EXPR_RESULT && type != Token.VAR && !NodeUtil.isExpressionNode(cur)) {\n+      return false;\n+    }\n+    count++;\n+  }\n+  \n+  // This is a foldable block if the block's child is an expression or a VAR statement,\n+  // or the count of valid expressions and VAR declarations is 1.\n+  return count == 1 || NodeUtil.isExpressionNode(child) || child.getType() == Token.VAR;\n+}\n+\n+private boolean isSingleExpression(Node n) {\n+  if (n.getType() == Token.EXPR_RESULT) {\n+    n = n.getFirstChild();\n+  }\n+  return NodeUtil.isExpressionNode(n) &&\n+      n.getNext() == null &&\n+      // Ignore simple constant declarations.\n+      n.getType() != Token.CONST &&\n+      !NodeUtil.mayHaveSideEffects(n);\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[if(x){if(y)var x}else var z]> but was:<[]>",
    "test_result": "FAIL"
}