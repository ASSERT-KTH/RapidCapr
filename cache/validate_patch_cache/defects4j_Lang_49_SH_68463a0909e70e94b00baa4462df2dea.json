{
    "patch": "    public Fraction reduce() {\n<<<<<<< Updated upstream\n        int gcd = greatestCommonDivisor(numerator, denominator);\n        if (gcd == 1) {\n            return this;\n        }\n        numerator /= gcd;\n        denominator /= gcd;\n        return new Fraction(numerator, denominator);\n=======\n        int n = numerator;\n        int d = denominator;\n        int gcd = greatestCommonDivisor(Math.abs(n), Math.abs(d));\n        while (gcd != 1) {\n            n /= gcd;\n            d /= gcd;\n            gcd = greatestCommonDivisor(Math.abs(n), Math.abs(d));\n        }\n        if (d < 0) {\n            n = -n;\n            d = -d;\n        }\n        return new Fraction(n, d);\n>>>>>>> Stashed changes\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..73768ce1 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,31 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+    public Fraction reduce() {\n+<<<<<<< Updated upstream\n+        int gcd = greatestCommonDivisor(numerator, denominator);\n+        if (gcd == 1) {\n+            return this;\n+        }\n+        numerator /= gcd;\n+        denominator /= gcd;\n+        return new Fraction(numerator, denominator);\n+=======\n+        int n = numerator;\n+        int d = denominator;\n+        int gcd = greatestCommonDivisor(Math.abs(n), Math.abs(d));\n+        while (gcd != 1) {\n+            n /= gcd;\n+            d /= gcd;\n+            gcd = greatestCommonDivisor(Math.abs(n), Math.abs(d));\n+        }\n+        if (d < 0) {\n+            n = -n;\n+            d = -d;\n+        }\n+        return new Fraction(n, d);\n+>>>>>>> Stashed changes\n+    }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}