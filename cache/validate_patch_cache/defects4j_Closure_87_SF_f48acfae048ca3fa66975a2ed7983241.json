{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n == null || n.getType() != Token.BLOCK || !n.hasOneChild()) {\n    return false;\n  }\n\n  Node maybeExpr = n.getFirstChild();\n\n  // Ignore blocks that belong to FOR, WHILE, or DO loops\n  if (n.getParent() != null && (n.getParent().getType() == Token.FOR ||\n                                n.getParent().getType() == Token.WHILE ||\n                                n.getParent().getType() == Token.DO)) {\n    return false;\n  }\n\n  // Ignore block that are:\n  //   - part of an \"if\" statement and the \"if\" statement has more than one child\n  //     or is not a direct child of the original expression\n  //   - part of a \"try\" statement\n  //   - a value that is returned from an event handler ending with an underscore\n  // Otherwise, traverse the block and check if it only contains expressions.\n  Node parent = n.getParent();\n  if (parent != null && parent.getType() == Token.IF && (!parent.hasTwoChildren() || parent.getLastChild() != n)) {\n    return false;\n  }\n  if (parent != null && parent.getType() == Token.TRY) {\n    return false;\n  }\n  if (maybeExpr.getType() == Token.EXPR_RESULT &&\n      maybeExpr.getFirstChild().getType() == Token.CALL &&\n      maybeExpr.getFirstChild().getFirstChild().getType() == Token.NAME &&\n      maybeExpr.getFirstChild().getFirstChild().getString().endsWith(\"_\")) {\n    return false;\n  }\n\n  for (Node child = maybeExpr; child != null; child = child.getNext()) {\n    if (!NodeUtil.isExpressionNode(child)) {\n      return false;\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..d902508e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,48 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n == null || n.getType() != Token.BLOCK || !n.hasOneChild()) {\n+    return false;\n+  }\n+\n+  Node maybeExpr = n.getFirstChild();\n+\n+  // Ignore blocks that belong to FOR, WHILE, or DO loops\n+  if (n.getParent() != null && (n.getParent().getType() == Token.FOR ||\n+                                n.getParent().getType() == Token.WHILE ||\n+                                n.getParent().getType() == Token.DO)) {\n+    return false;\n+  }\n \n+  // Ignore block that are:\n+  //   - part of an \"if\" statement and the \"if\" statement has more than one child\n+  //     or is not a direct child of the original expression\n+  //   - part of a \"try\" statement\n+  //   - a value that is returned from an event handler ending with an underscore\n+  // Otherwise, traverse the block and check if it only contains expressions.\n+  Node parent = n.getParent();\n+  if (parent != null && parent.getType() == Token.IF && (!parent.hasTwoChildren() || parent.getLastChild() != n)) {\n     return false;\n   }\n+  if (parent != null && parent.getType() == Token.TRY) {\n+    return false;\n+  }\n+  if (maybeExpr.getType() == Token.EXPR_RESULT &&\n+      maybeExpr.getFirstChild().getType() == Token.CALL &&\n+      maybeExpr.getFirstChild().getFirstChild().getType() == Token.NAME &&\n+      maybeExpr.getFirstChild().getFirstChild().getString().endsWith(\"_\")) {\n+    return false;\n+  }\n+\n+  for (Node child = maybeExpr; child != null; child = child.getNext()) {\n+    if (!NodeUtil.isExpressionNode(child)) {\n+      return false;\n+    }\n+  }\n+\n+  return true;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}