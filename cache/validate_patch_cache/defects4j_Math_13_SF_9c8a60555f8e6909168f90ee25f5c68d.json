{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix d = dec.getD();\n    final RealMatrix v = dec.getV();\n    final int n = m.getRowDimension();\n\n    double[] eigenvalues = d.getColumn(0);\n    double[] sqrtEigenvalues = new double[n];\n    for (int i = 0; i < n; i++) {\n        if (eigenvalues[i] < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive-semidefinite\");\n        }\n        sqrtEigenvalues[i] = Math.sqrt(eigenvalues[i]);\n    }\n\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenvalues);\n    final RealMatrix sqrtInvD = MatrixUtils.createRealDiagonalMatrix(1 / sqrtEigenvalues);\n\n    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n    final RealMatrix sqrtInvM = v.multiply(sqrtInvD).multiply(v.transpose());\n\n    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n    final RealMatrix diff = m.subtract(sqrtM.multiply(sqrtM));\n    if (diff.getNorm() > 1e-6) {\n        throw new IllegalStateException(\"Square root computation failed (norm of difference between sqrtM * sqrtM and m is too large)\");\n    }\n\n    final RealMatrix inverseDiff = identity.subtract(sqrtInvM.multiply(sqrtInvM).scalarMultiply(2));\n    if (inverseDiff.getNorm() > 1e-6) {\n        throw new IllegalStateException(\"Square root computation failed (norm of difference between inverse of sqrtM * sqrtM and inverse of m is too large)\");\n    }\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..dc2788a9c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,38 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix d = dec.getD();\n+    final RealMatrix v = dec.getV();\n+    final int n = m.getRowDimension();\n+\n+    double[] eigenvalues = d.getColumn(0);\n+    double[] sqrtEigenvalues = new double[n];\n+    for (int i = 0; i < n; i++) {\n+        if (eigenvalues[i] < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive-semidefinite\");\n+        }\n+        sqrtEigenvalues[i] = Math.sqrt(eigenvalues[i]);\n+    }\n+\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenvalues);\n+    final RealMatrix sqrtInvD = MatrixUtils.createRealDiagonalMatrix(1 / sqrtEigenvalues);\n+\n+    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n+    final RealMatrix sqrtInvM = v.multiply(sqrtInvD).multiply(v.transpose());\n+\n+    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n+    final RealMatrix diff = m.subtract(sqrtM.multiply(sqrtM));\n+    if (diff.getNorm() > 1e-6) {\n+        throw new IllegalStateException(\"Square root computation failed (norm of difference between sqrtM * sqrtM and m is too large)\");\n     }\n+\n+    final RealMatrix inverseDiff = identity.subtract(sqrtInvM.multiply(sqrtInvM).scalarMultiply(2));\n+    if (inverseDiff.getNorm() > 1e-6) {\n+        throw new IllegalStateException(\"Square root computation failed (norm of difference between inverse of sqrtM * sqrtM and inverse of m is too large)\");\n+    }\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: bad operand types for binary operator '/'",
    "test_result": "ERROR"
}