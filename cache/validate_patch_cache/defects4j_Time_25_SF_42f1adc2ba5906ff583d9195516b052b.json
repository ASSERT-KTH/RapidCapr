{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int initialOffset = getOffset(instantLocal);\n\n    // Check if instantLocal falls inside a gap in the time zone\n    long prevTransitionLocal = previousTransition(instantLocal + initialOffset);\n    long prevTransitionAdjusted = previousTransition(instantLocal) - initialOffset;\n    if (prevTransitionLocal > prevTransitionAdjusted) {\n        int offsetBeforeGap = getOffset(prevTransitionLocal - 1);\n        int offsetAfterGap = getOffset(prevTransitionAdjusted + 1);\n\n        if (offsetBeforeGap != offsetAfterGap) {\n            if (offsetBeforeGap < offsetAfterGap) {\n                return offsetBeforeGap;\n            } else {\n                long nextTransitionLocal = nextTransition(prevTransitionAdjusted + 1);\n                long nextTransitionAdjusted = nextTransition(prevTransitionLocal - initialOffset);\n                if (nextTransitionLocal != nextTransitionAdjusted) {\n                    int offsetBeforeTransition = getOffset(nextTransitionLocal - 1);\n                    int offsetAfterTransition = getOffset(nextTransitionLocal);\n\n                    if (offsetBeforeTransition == offsetAfterTransition) {\n                        if (initialOffset < 0) {\n                            return offsetAfterTransition;\n                        } else {\n                            return offsetBeforeTransition;\n                        }\n                    } else {\n                        if (initialOffset < 0) {\n                            return offsetBeforeGap;\n                        } else {\n                            if (prevTransitionAdjusted + offsetBeforeGap < nextTransitionLocal - initialOffset) {\n                                return offsetBeforeGap;\n                            } else {\n                                return offsetAfterTransition;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Check if instantLocal falls inside an overlap in the time zone\n    long nextTransitionLocal = nextTransition(instantLocal + initialOffset);\n    long nextTransitionAdjusted = nextTransition(instantLocal) - initialOffset;\n    if (nextTransitionLocal < nextTransitionAdjusted) {\n        int offsetBeforeOverlap = getOffset(nextTransitionLocal - 1);\n        int offsetAfterOverlap = getOffset(nextTransitionAdjusted + 1);\n\n        if (offsetBeforeOverlap != offsetAfterOverlap) {\n            if (offsetBeforeOverlap < offsetAfterOverlap) {\n                long nextTransitionAfterOverlap = nextTransition(nextTransitionLocal);\n                if (nextTransitionAfterOverlap != nextTransitionAdjusted) {\n                    int offsetBeforeTransition = getOffset(nextTransitionLocal - 1);\n                    int offsetAfterTransition = getOffset(nextTransitionLocal);\n\n                    if (offsetBeforeTransition == offsetAfterTransition) {\n                        if (initialOffset < 0) {\n                            return offsetBeforeTransition;\n                        } else {\n                            return offsetAfterOverlap;\n                        }\n                    } else {\n                        if (initialOffset < 0) {\n                            return offsetAfterOverlap;\n                        } else {\n                            if (instantLocal + initialOffset < nextTransitionLocal) {\n                                return offsetBeforeTransition;\n                            } else {\n                                return offsetAfterOverlap;\n                            }\n                        }\n                    }\n                }\n            } else {\n                long nextTransitionAfterOverlap = nextTransition(nextTransitionAdjusted + 1);\n                if (nextTransitionAfterOverlap != nextTransitionLocal) {\n                    int offsetBeforeTransition = getOffset(nextTransitionLocal - 1);\n                    int offsetAfterTransition = getOffset(nextTransitionAdjusted + 1);\n\n                    if (offsetBeforeTransition == offsetAfterTransition) {\n                        if (initialOffset < 0) {\n                            return offsetAfterTransition;\n                        } else {\n                            return offsetBeforeOverlap;\n                        }\n                    } else {\n                        if (initialOffset < 0) {\n                            return offsetBeforeOverlap;\n                        } else {\n                            if (instantLocal + initialOffset >= nextTransitionLocal) {\n                                return offsetBeforeOverlap;\n                            } else {\n                                return offsetAfterTransition;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Return the initial offset if instantLocal falls outside a gap or an overlap in the time zone\n    return initialOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..16b4eaf8 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,112 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+public int getOffsetFromLocal(long instantLocal) {\n+    int initialOffset = getOffset(instantLocal);\n+\n+    // Check if instantLocal falls inside a gap in the time zone\n+    long prevTransitionLocal = previousTransition(instantLocal + initialOffset);\n+    long prevTransitionAdjusted = previousTransition(instantLocal) - initialOffset;\n+    if (prevTransitionLocal > prevTransitionAdjusted) {\n+        int offsetBeforeGap = getOffset(prevTransitionLocal - 1);\n+        int offsetAfterGap = getOffset(prevTransitionAdjusted + 1);\n+\n+        if (offsetBeforeGap != offsetAfterGap) {\n+            if (offsetBeforeGap < offsetAfterGap) {\n+                return offsetBeforeGap;\n+            } else {\n+                long nextTransitionLocal = nextTransition(prevTransitionAdjusted + 1);\n+                long nextTransitionAdjusted = nextTransition(prevTransitionLocal - initialOffset);\n+                if (nextTransitionLocal != nextTransitionAdjusted) {\n+                    int offsetBeforeTransition = getOffset(nextTransitionLocal - 1);\n+                    int offsetAfterTransition = getOffset(nextTransitionLocal);\n+\n+                    if (offsetBeforeTransition == offsetAfterTransition) {\n+                        if (initialOffset < 0) {\n+                            return offsetAfterTransition;\n+                        } else {\n+                            return offsetBeforeTransition;\n+                        }\n+                    } else {\n+                        if (initialOffset < 0) {\n+                            return offsetBeforeGap;\n+                        } else {\n+                            if (prevTransitionAdjusted + offsetBeforeGap < nextTransitionLocal - initialOffset) {\n+                                return offsetBeforeGap;\n+                            } else {\n+                                return offsetAfterTransition;\n+                            }\n+                        }\n+                    }\n                 }\n             }\n         }\n-        return offsetAdjusted;\n     }\n \n+    // Check if instantLocal falls inside an overlap in the time zone\n+    long nextTransitionLocal = nextTransition(instantLocal + initialOffset);\n+    long nextTransitionAdjusted = nextTransition(instantLocal) - initialOffset;\n+    if (nextTransitionLocal < nextTransitionAdjusted) {\n+        int offsetBeforeOverlap = getOffset(nextTransitionLocal - 1);\n+        int offsetAfterOverlap = getOffset(nextTransitionAdjusted + 1);\n+\n+        if (offsetBeforeOverlap != offsetAfterOverlap) {\n+            if (offsetBeforeOverlap < offsetAfterOverlap) {\n+                long nextTransitionAfterOverlap = nextTransition(nextTransitionLocal);\n+                if (nextTransitionAfterOverlap != nextTransitionAdjusted) {\n+                    int offsetBeforeTransition = getOffset(nextTransitionLocal - 1);\n+                    int offsetAfterTransition = getOffset(nextTransitionLocal);\n+\n+                    if (offsetBeforeTransition == offsetAfterTransition) {\n+                        if (initialOffset < 0) {\n+                            return offsetBeforeTransition;\n+                        } else {\n+                            return offsetAfterOverlap;\n+                        }\n+                    } else {\n+                        if (initialOffset < 0) {\n+                            return offsetAfterOverlap;\n+                        } else {\n+                            if (instantLocal + initialOffset < nextTransitionLocal) {\n+                                return offsetBeforeTransition;\n+                            } else {\n+                                return offsetAfterOverlap;\n+                            }\n+                        }\n+                    }\n+                }\n+            } else {\n+                long nextTransitionAfterOverlap = nextTransition(nextTransitionAdjusted + 1);\n+                if (nextTransitionAfterOverlap != nextTransitionLocal) {\n+                    int offsetBeforeTransition = getOffset(nextTransitionLocal - 1);\n+                    int offsetAfterTransition = getOffset(nextTransitionAdjusted + 1);\n+\n+                    if (offsetBeforeTransition == offsetAfterTransition) {\n+                        if (initialOffset < 0) {\n+                            return offsetAfterTransition;\n+                        } else {\n+                            return offsetBeforeOverlap;\n+                        }\n+                    } else {\n+                        if (initialOffset < 0) {\n+                            return offsetBeforeOverlap;\n+                        } else {\n+                            if (instantLocal + initialOffset >= nextTransitionLocal) {\n+                                return offsetBeforeOverlap;\n+                            } else {\n+                                return offsetAfterTransition;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    // Return the initial offset if instantLocal falls outside a gap or an overlap in the time zone\n+    return initialOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2002-06-03T00:00:00.000-00:01:15> but was:<2002-06-02T00:00:00.000-00:01:15>",
    "test_result": "FAIL"
}