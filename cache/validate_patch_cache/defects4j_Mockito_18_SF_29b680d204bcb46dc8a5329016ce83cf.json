{
    "patch": "public static Iterable<Long> fibonacciSequence(long limit) {\n    List<Long> result = new ArrayList<>();\n    if (limit > 0) {\n        result.add(0L);\n    }\n    if (limit > 1) {\n        result.add(1L);\n    }\n\n    for (int i = 2; i < limit; i++) {\n        long fib = result.get(i - 1) + result.get(i - 2);\n        if (fib > limit) {\n            break;\n        }\n        result.add(fib);\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..18adff679 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,25 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Iterable<Long> fibonacciSequence(long limit) {\n+    List<Long> result = new ArrayList<>();\n+    if (limit > 0) {\n+        result.add(0L);\n+    }\n+    if (limit > 1) {\n+        result.add(1L);\n+    }\n+\n+    for (int i = 2; i < limit; i++) {\n+        long fib = result.get(i - 1) + result.get(i - 2);\n+        if (fib > limit) {\n+            break;\n+        }\n+        result.add(fib);\n+    }\n+\n+    return result;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}