{
    "patch": "class TransformDispatcher extends TypeSafeDispatcher<Node> {\n\n  private final ErrorReporter errorReporter;\n\n  private final String sourceName;\n\n  TransformDispatcher(ErrorReporter errorReporter, String sourceName) {\n    this.errorReporter = errorReporter;\n    this.sourceName = sourceName;\n  }\n\n  private boolean isDirective(Node n) {\n    if (n == null) return false;\n\n    int nType = n.getType();\n    return nType == Token.EXPR_RESULT &&\n        n.getFirstChild().isString() &&\n        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n  }\n\n  @Override\n  Node processBlock(Block blockNode) {\n    return processGeneric(blockNode);\n  }\n\n  @Override\n  Node processBreakStatement(BreakStatement statementNode) {\n    Node node = newNode(Token.BREAK);\n    if (statementNode.getBreakLabel() != null) {\n      Node labelName = transform(statementNode.getBreakLabel());\n      // Change the NAME to LABEL_NAME\n      labelName.setType(Token.LABEL_NAME);\n      node.addChildToBack(labelName);\n    }\n    return node;\n  }\n\n  @Override\n  Node processCatchClause(CatchClause clauseNode) {\n    AstNode catchVar = clauseNode.getVarName();\n    Node node = newNode(Token.CATCH, transform(catchVar));\n    if (clauseNode.getCatchCondition() != null) {\n      errorReporter.error(\n          \"Catch clauses are not supported\",\n          sourceName,\n          clauseNode.getCatchCondition().getLineno(), \"\", 0);\n    }\n    node.addChildToBack(transformBlock(clauseNode.getBody()));\n    return node;\n  }\n\n  @Override\n  Node processConditionalExpression(ConditionalExpression exprNode) {\n    return newNode(\n        Token.HOOK,\n        transform(exprNode.getTestExpression()),\n        transform(exprNode.getTrueExpression()),\n        transform(exprNode.getFalseExpression()));\n  }\n\n  @Override\n  Node processContinueStatement(ContinueStatement statementNode) {\n    Node node = newNode(Token.CONTINUE);\n    if (statementNode.getLabel() != null) {\n      Node labelName = transform(statementNode.getLabel());\n      // Change the NAME to LABEL_NAME\n      labelName.setType(Token.LABEL_NAME);\n      node.addChildToBack(labelName);\n    }\n    return node;\n  }\n\n  @Override\n  Node processDoLoop(DoLoop loopNode) {\n    return newNode(\n        Token.DO,\n        transformBlock(loopNode.getBody()),\n        transform(loopNode.getCondition()));\n  }\n\n  @Override\n  Node processElementGet(ElementGet getNode) {\n    return newNode(\n        Token.GETELEM,\n        transform(getNode.getTarget()),\n        transform(getNode.getElement()));\n  }\n\n  @Override\n  Node processEmptyExpression(EmptyExpression exprNode) {\n    Node node = newNode(Token.EMPTY);\n    return node;\n  }\n\n  @Override\n  Node processExpressionStatement(ExpressionStatement statementNode) {\n    return newNode(transformTokenType(statementNode.getType()),\n        transform(statementNode.getExpression()));\n  }\n\n  @Override\n  Node processForInLoop(ForInLoop loopNode) {\n    return newNode(\n        Token.FOR,\n        transform(loopNode.getIterator()),\n        transform(loopNode.getIteratedObject()),\n        transform(loopNode.getBody()));\n  }\n\n  @Override\n  Node processForLoop(ForLoop loopNode) {\n    Node node = newNode(Token.FOR);\n    if (loopNode.getInitializer() != null) {\n      node.addChildToBack(transform(loopNode.getInitializer()));\n    } else {\n      // Need some kind of node to preserve the position\n      node.addChildToBack(newNode(Token.EMPTY).copyInformationFrom(loopNode));\n    }\n    if (loopNode.getCondition() != null) {\n      node.addChildToBack(transform(loopNode.getCondition()));\n    } else {\n      node.addChildToBack(newNode(Token.EMPTY).copyInformationFrom(loopNode));\n    }\n    if (loopNode.getIncrement() != null) {\n      node.addChildToBack(transform(loopNode.getIncrement()));\n    } else {\n      node.addChildToBack(newNode(Token.EMPTY).copyInformationFrom(loopNode));\n    }\n    node.addChildToBack(transformBlock(loopNode.getBody()));\n    return node;\n  }\n\n  @Override\n  Node processFunctionCall(FunctionCall callNode) {\n    return newNode(\n        Token.CALL,\n        transform(callNode.getTarget()),\n        transformExprArguments(callNode),\n        callNode.isNewExpression() ? newNode(Token.NEW) : null);\n  }\n\n  @Override\n  Node processFunctionNode(FunctionNode functionNode) {\n    Node node = newNode(Token.FUNCTION);\n    node.addChildToBack(transform(functionNode.getName()));\n    for (AstNode param : functionNode.getParams()) {\n      node.addChildToBack(transform(param));\n    }\n    node.addChildToBack(transform(functionNode.getBody()));\n    return node;\n  }\n\n  @Override\n  Node processIfStatement(IfStatement statementNode) {\n    Node node = newNode(Token.IF);\n    node.addChildToBack(transform(statementNode.getCondition()));\n    node.addChildToBack(transform(statementNode.getThenPart()));\n    if (statementNode.getElsePart() != null) {\n      node.addChildToBack(transform(statementNode.getElsePart()));\n    }\n    return node;\n  }\n\n  @Override\n  Node processInfixExpression(InfixExpression infixNode) {\n    Node node = newNode(transformTokenType(infixNode.getType()));\n    node.addChildToBack(transform(infixNode.getLeft()));\n    node.addChildToBack(transform(infixNode.getRight()));\n    return node;\n  }\n\n  @Override\n  Node processLabeledStatement(LabeledStatement labeledStatement) {\n    Node node = newNode(Token.LABEL);\n    node.addChildToBack(transform(labeledStatement.getStatement()));\n    node.addChildToBack(transform(labeledStatement.getLabels()));\n    return node;\n  }\n\n  @Override\n  Node processLetNode(LetNode letNode) {\n    Node node = newNode(Token.LET);\n    for (VariableDeclaration decl : letNode.getVariables()) {\n      node.addChildToBack(transform(decl));\n    }\n    node.addChildToBack(transform(letNode.getBody()));\n    return node;\n  }\n\n  @Override\n  Node processName(Name name) {\n    Node node;\n    if (isDirective(name.getParent())) {\n      node = newNode(Token.STRING, name.getIdentifier());\n    } else {\n      node = newNode(Token.NAME, name.getIdentifier());\n    }\n    return node;\n  }\n\n  @Override\n  Node processNewExpression(NewExpression newExprNode) {\n    Node node;\n    if (newExprNode.getTarget() instanceof FunctionNode) {\n      node = newNode(Token.FUNCTION);\n      node.addChildToBack(transform(newExprNode.getTarget()));\n    } else {\n      node = newNode(Token.NEW);\n      node.addChildToBack(transform(newExprNode.getTarget()));\n      for (AstNode arg : newExprNode.getArguments()) {\n        node.addChildToBack(transform(arg));\n      }\n    }\n    return node;\n  }\n\n  @Override\n  Node processNumber(NumberLiteral numberNode) {\n    Node node = newNode(Token.NUMBER, numberNode.getNumber());\n    node.setLineno(numberNode.getLineno());\n    return node;\n  }\n\n  @Override\n  Node processObjectLiteral(ObjectLiteral objNode) {\n    Node node = newNode(Token.OBJECTLIT);\n    for (ObjectProperty prop : objNode.getElements()) {\n      node.addChildToBack(transform(prop));\n    }\n    return node;\n  }\n\n  @Override\n  Node processObjectProperty(ObjectProperty propNode) {\n    Node key = transform(propNode.getLeft());\n    Node value = transform(propNode.getRight());\n    if (propNode.getType() == Token.GET) {\n      Node node = newNode(Token.GETPROP);\n      node.addChildToBack(value);\n      node.addChildToBack(key);\n      return node;\n    } else if (propNode.getType() == Token.SET) {\n      Node node = newNode(Token.SETPROP);\n      node.addChildToBack(value);\n      node.addChildToBack(key);\n      return node;\n    }\n    Node node = newNode(Token.STRING_KEY, key);\n    node.addChildToBack(value);\n    return node;\n  }\n\n  @Override\n  Node processParenthesizedExpression(ParenthesizedExpression parenNode) {\n    return transform(parenNode.getExpression());\n  }\n\n  @Override\n  Node processRegExpLiteral(RegExpLiteral regexpNode) {\n    Node node = newNode(Token.REGEXP);\n    node.addChildToBack(newString(regexpNode.getValue()));\n    if (regexpNode.getFlags() != null) {\n      node.addChildToBack(newString(regexpNode.getFlags()));\n    } else {\n      node.addChildToBack(newString(\"\"));\n    }\n    return node;\n  }\n\n  @Override\n  Node processReturnStatement(ReturnStatement statementNode) {\n    Node node = newNode(Token.RETURN);\n    if (statementNode.getReturnValue() != null) {\n      node.addChildToBack(transform(statementNode.getReturnValue()));\n    }\n    return node;\n  }\n\n  @Override\n  Node processString(StringLiteral stringNode) {\n    Node node = newNode(Token.STRING, stringNode.getValue());\n    node.setLineno(stringNode.getLineno());\n    return node;\n  }\n\n  @Override\n  Node processSwitchCase(SwitchCase switchCase) {\n    Node node;\n    if (switchCase.getExpression() == null) {\n      node = newNode(Token.DEFAULT);\n    } else {\n      node = newNode(Token.CASE);\n      node.addChildToBack(transform(switchCase.getExpression()));\n    }\n    Node statements = transform(switchCase.getStatements());\n    node.addChildToBack(statements);\n    return node;\n  }\n\n  @Override\n  Node processSwitchStatement(SwitchStatement statementNode) {\n    Node node = newNode(Token.SWITCH);\n    node.addChildToBack(transform(statementNode.getExpression()));\n    List<AstNode> cases = statementNode.getCases();\n    for (AstNode caseNode : cases) {\n      node.addChildToBack(transform(caseNode));\n    }\n    return node;\n  }\n\n  @Override\n  Node processThrowStatement(ThrowStatement statementNode) {\n    return newNode(\n        Token.THROW,\n        transform(statementNode.getExpression()));\n  }\n\n  @Override\n  Node processTryStatement(TryStatement statementNode) {\n    Node node = newNode(Token.TRY);\n    node.addChildToBack(transformBlock(statementNode.getTryBlock()));\n    CatchClause catchClause = statementNode.getCatchClause();\n    if (catchClause != null) {\n      node.addChildToBack(transform(catchClause));\n    }\n    Block finallyBlock = statementNode.getFinallyBlock();\n    if (finallyBlock != null) {\n      node.addChildToBack(newNode(Token.FINALLY, transformBlock(finallyBlock)));\n    }\n    return node;\n  }\n\n  @Override\n  Node processUnaryExpression(UnaryExpression unaryNode) {\n    return newNode(\n        transformTokenType(unaryNode.getType()),\n        transform(unaryNode.getOperand()));\n  }\n\n  @Override\n  Node processVariableDeclaration(VariableDeclaration declaration) {\n    Node node = newNode(Token.VAR);\n    for (VariableInitializer initializer : declaration.getVariables()) {\n      node.addChildToBack(transform(initializer));\n    }\n    return node;\n  }\n\n  @Override\n  Node processVariableInitializer(VariableInitializer initializer) {\n    Node node = newNode(Token.NAME, initializer.getTarget().getIdentifier());\n    if (initializer.getInitializer() != null) {\n      node.addChildToBack(transform(initializer.getInitializer()));\n    } else {\n      node.addChildToBack(newNode(Token.EMPTY).copyInformationFrom(initializer));\n    }\n    return node;\n  }\n\n  @Override\n  Node processWhileLoop(WhileLoop loopNode) {\n    return newNode(\n        Token.WHILE,\n        transform(loopNode.getCondition()),\n        transformBlock(loopNode.getBody()));\n  }\n\n  @Override\n  Node processWithStatement(WithStatement statementNode) {\n    return newNode(\n        Token.WITH,\n        transform(statementNode.getExpression()),\n        transformBlock(statementNode.getStatement()));\n  }\n\n  @Override\n  Node processXmlLiteral(XmlLiteral xmlNode) {\n    Node node = newNode(Token.REF_IDENTIFIER, \"XML\");\n    Node call = newNode(Token.CALL);\n    call.addChildToBack(node);\n    NodeArray children = xmlNode.getFragments();\n    for (int i = 0; i < children.getLength(); i++) {\n      AstNode child = children.get(i);\n      if (child.getType() == Token.XML_LIST) {\n        XmlList xmlList = (XmlList)child;\n        for (int j = 0; j < xmlList.getChildCount(); j++) {\n          call.addChildToBack(transform(xmlList.getChildAt(j)));\n        }\n      } else if (child.getType() != Token.EMPTY) {\n        call.addChildToBack(transform(child));\n      }\n    }\n    return call;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..e3742546 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,401 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+class TransformDispatcher extends TypeSafeDispatcher<Node> {\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  private final ErrorReporter errorReporter;\n+\n+  private final String sourceName;\n+\n+  TransformDispatcher(ErrorReporter errorReporter, String sourceName) {\n+    this.errorReporter = errorReporter;\n+    this.sourceName = sourceName;\n+  }\n+\n+  private boolean isDirective(Node n) {\n+    if (n == null) return false;\n+\n+    int nType = n.getType();\n+    return nType == Token.EXPR_RESULT &&\n+        n.getFirstChild().isString() &&\n+        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  }\n+\n+  @Override\n+  Node processBlock(Block blockNode) {\n+    return processGeneric(blockNode);\n+  }\n+\n+  @Override\n+  Node processBreakStatement(BreakStatement statementNode) {\n+    Node node = newNode(Token.BREAK);\n+    if (statementNode.getBreakLabel() != null) {\n+      Node labelName = transform(statementNode.getBreakLabel());\n+      // Change the NAME to LABEL_NAME\n+      labelName.setType(Token.LABEL_NAME);\n+      node.addChildToBack(labelName);\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+  @Override\n+  Node processCatchClause(CatchClause clauseNode) {\n+    AstNode catchVar = clauseNode.getVarName();\n+    Node node = newNode(Token.CATCH, transform(catchVar));\n+    if (clauseNode.getCatchCondition() != null) {\n+      errorReporter.error(\n+          \"Catch clauses are not supported\",\n+          sourceName,\n+          clauseNode.getCatchCondition().getLineno(), \"\", 0);\n     }\n+    node.addChildToBack(transformBlock(clauseNode.getBody()));\n+    return node;\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+  @Override\n+  Node processConditionalExpression(ConditionalExpression exprNode) {\n+    return newNode(\n+        Token.HOOK,\n+        transform(exprNode.getTestExpression()),\n+        transform(exprNode.getTrueExpression()),\n+        transform(exprNode.getFalseExpression()));\n+  }\n+\n+  @Override\n+  Node processContinueStatement(ContinueStatement statementNode) {\n+    Node node = newNode(Token.CONTINUE);\n+    if (statementNode.getLabel() != null) {\n+      Node labelName = transform(statementNode.getLabel());\n+      // Change the NAME to LABEL_NAME\n+      labelName.setType(Token.LABEL_NAME);\n+      node.addChildToBack(labelName);\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+  @Override\n+  Node processDoLoop(DoLoop loopNode) {\n+    return newNode(\n+        Token.DO,\n+        transformBlock(loopNode.getBody()),\n+        transform(loopNode.getCondition()));\n+  }\n+\n+  @Override\n+  Node processElementGet(ElementGet getNode) {\n+    return newNode(\n+        Token.GETELEM,\n+        transform(getNode.getTarget()),\n+        transform(getNode.getElement()));\n+  }\n+\n+  @Override\n+  Node processEmptyExpression(EmptyExpression exprNode) {\n+    Node node = newNode(Token.EMPTY);\n+    return node;\n+  }\n+\n+  @Override\n+  Node processExpressionStatement(ExpressionStatement statementNode) {\n+    return newNode(transformTokenType(statementNode.getType()),\n+        transform(statementNode.getExpression()));\n+  }\n+\n+  @Override\n+  Node processForInLoop(ForInLoop loopNode) {\n+    return newNode(\n+        Token.FOR,\n+        transform(loopNode.getIterator()),\n+        transform(loopNode.getIteratedObject()),\n+        transform(loopNode.getBody()));\n+  }\n+\n+  @Override\n+  Node processForLoop(ForLoop loopNode) {\n+    Node node = newNode(Token.FOR);\n+    if (loopNode.getInitializer() != null) {\n+      node.addChildToBack(transform(loopNode.getInitializer()));\n+    } else {\n+      // Need some kind of node to preserve the position\n+      node.addChildToBack(newNode(Token.EMPTY).copyInformationFrom(loopNode));\n+    }\n+    if (loopNode.getCondition() != null) {\n+      node.addChildToBack(transform(loopNode.getCondition()));\n+    } else {\n+      node.addChildToBack(newNode(Token.EMPTY).copyInformationFrom(loopNode));\n     }\n+    if (loopNode.getIncrement() != null) {\n+      node.addChildToBack(transform(loopNode.getIncrement()));\n+    } else {\n+      node.addChildToBack(newNode(Token.EMPTY).copyInformationFrom(loopNode));\n+    }\n+    node.addChildToBack(transformBlock(loopNode.getBody()));\n+    return node;\n+  }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+  @Override\n+  Node processFunctionCall(FunctionCall callNode) {\n+    return newNode(\n+        Token.CALL,\n+        transform(callNode.getTarget()),\n+        transformExprArguments(callNode),\n+        callNode.isNewExpression() ? newNode(Token.NEW) : null);\n+  }\n+\n+  @Override\n+  Node processFunctionNode(FunctionNode functionNode) {\n+    Node node = newNode(Token.FUNCTION);\n+    node.addChildToBack(transform(functionNode.getName()));\n+    for (AstNode param : functionNode.getParams()) {\n+      node.addChildToBack(transform(param));\n+    }\n+    node.addChildToBack(transform(functionNode.getBody()));\n+    return node;\n+  }\n+\n+  @Override\n+  Node processIfStatement(IfStatement statementNode) {\n+    Node node = newNode(Token.IF);\n+    node.addChildToBack(transform(statementNode.getCondition()));\n+    node.addChildToBack(transform(statementNode.getThenPart()));\n+    if (statementNode.getElsePart() != null) {\n+      node.addChildToBack(transform(statementNode.getElsePart()));\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+  @Override\n+  Node processInfixExpression(InfixExpression infixNode) {\n+    Node node = newNode(transformTokenType(infixNode.getType()));\n+    node.addChildToBack(transform(infixNode.getLeft()));\n+    node.addChildToBack(transform(infixNode.getRight()));\n+    return node;\n+  }\n+\n+  @Override\n+  Node processLabeledStatement(LabeledStatement labeledStatement) {\n+    Node node = newNode(Token.LABEL);\n+    node.addChildToBack(transform(labeledStatement.getStatement()));\n+    node.addChildToBack(transform(labeledStatement.getLabels()));\n+    return node;\n+  }\n+\n+  @Override\n+  Node processLetNode(LetNode letNode) {\n+    Node node = newNode(Token.LET);\n+    for (VariableDeclaration decl : letNode.getVariables()) {\n+      node.addChildToBack(transform(decl));\n+    }\n+    node.addChildToBack(transform(letNode.getBody()));\n+    return node;\n+  }\n+\n+  @Override\n+  Node processName(Name name) {\n+    Node node;\n+    if (isDirective(name.getParent())) {\n+      node = newNode(Token.STRING, name.getIdentifier());\n+    } else {\n+      node = newNode(Token.NAME, name.getIdentifier());\n+    }\n+    return node;\n+  }\n+\n+  @Override\n+  Node processNewExpression(NewExpression newExprNode) {\n+    Node node;\n+    if (newExprNode.getTarget() instanceof FunctionNode) {\n+      node = newNode(Token.FUNCTION);\n+      node.addChildToBack(transform(newExprNode.getTarget()));\n+    } else {\n+      node = newNode(Token.NEW);\n+      node.addChildToBack(transform(newExprNode.getTarget()));\n+      for (AstNode arg : newExprNode.getArguments()) {\n+        node.addChildToBack(transform(arg));\n       }\n+    }\n+    return node;\n+  }\n+\n+  @Override\n+  Node processNumber(NumberLiteral numberNode) {\n+    Node node = newNode(Token.NUMBER, numberNode.getNumber());\n+    node.setLineno(numberNode.getLineno());\n+    return node;\n+  }\n+\n+  @Override\n+  Node processObjectLiteral(ObjectLiteral objNode) {\n+    Node node = newNode(Token.OBJECTLIT);\n+    for (ObjectProperty prop : objNode.getElements()) {\n+      node.addChildToBack(transform(prop));\n+    }\n+    return node;\n+  }\n+\n+  @Override\n+  Node processObjectProperty(ObjectProperty propNode) {\n+    Node key = transform(propNode.getLeft());\n+    Node value = transform(propNode.getRight());\n+    if (propNode.getType() == Token.GET) {\n+      Node node = newNode(Token.GETPROP);\n+      node.addChildToBack(value);\n+      node.addChildToBack(key);\n+      return node;\n+    } else if (propNode.getType() == Token.SET) {\n+      Node node = newNode(Token.SETPROP);\n+      node.addChildToBack(value);\n+      node.addChildToBack(key);\n       return node;\n     }\n+    Node node = newNode(Token.STRING_KEY, key);\n+    node.addChildToBack(value);\n+    return node;\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+  @Override\n+  Node processParenthesizedExpression(ParenthesizedExpression parenNode) {\n+    return transform(parenNode.getExpression());\n+  }\n+\n+  @Override\n+  Node processRegExpLiteral(RegExpLiteral regexpNode) {\n+    Node node = newNode(Token.REGEXP);\n+    node.addChildToBack(newString(regexpNode.getValue()));\n+    if (regexpNode.getFlags() != null) {\n+      node.addChildToBack(newString(regexpNode.getFlags()));\n+    } else {\n+      node.addChildToBack(newString(\"\"));\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+  @Override\n+  Node processReturnStatement(ReturnStatement statementNode) {\n+    Node node = newNode(Token.RETURN);\n+    if (statementNode.getReturnValue() != null) {\n+      node.addChildToBack(transform(statementNode.getReturnValue()));\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+  @Override\n+  Node processString(StringLiteral stringNode) {\n+    Node node = newNode(Token.STRING, stringNode.getValue());\n+    node.setLineno(stringNode.getLineno());\n+    return node;\n+  }\n+\n+  @Override\n+  Node processSwitchCase(SwitchCase switchCase) {\n+    Node node;\n+    if (switchCase.getExpression() == null) {\n+      node = newNode(Token.DEFAULT);\n+    } else {\n+      node = newNode(Token.CASE);\n+      node.addChildToBack(transform(switchCase.getExpression()));\n     }\n+    Node statements = transform(switchCase.getStatements());\n+    node.addChildToBack(statements);\n+    return node;\n+  }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+  @Override\n+  Node processSwitchStatement(SwitchStatement statementNode) {\n+    Node node = newNode(Token.SWITCH);\n+    node.addChildToBack(transform(statementNode.getExpression()));\n+    List<AstNode> cases = statementNode.getCases();\n+    for (AstNode caseNode : cases) {\n+      node.addChildToBack(transform(caseNode));\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+  @Override\n+  Node processThrowStatement(ThrowStatement statementNode) {\n+    return newNode(\n+        Token.THROW,\n+        transform(statementNode.getExpression()));\n+  }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+  @Override\n+  Node processTryStatement(TryStatement statementNode) {\n+    Node node = newNode(Token.TRY);\n+    node.addChildToBack(transformBlock(statementNode.getTryBlock()));\n+    CatchClause catchClause = statementNode.getCatchClause();\n+    if (catchClause != null) {\n+      node.addChildToBack(transform(catchClause));\n     }\n+    Block finallyBlock = statementNode.getFinallyBlock();\n+    if (finallyBlock != null) {\n+      node.addChildToBack(newNode(Token.FINALLY, transformBlock(finallyBlock)));\n+    }\n+    return node;\n+  }\n+\n+  @Override\n+  Node processUnaryExpression(UnaryExpression unaryNode) {\n+    return newNode(\n+        transformTokenType(unaryNode.getType()),\n+        transform(unaryNode.getOperand()));\n+  }\n+\n+  @Override\n+  Node processVariableDeclaration(VariableDeclaration declaration) {\n+    Node node = newNode(Token.VAR);\n+    for (VariableInitializer initializer : declaration.getVariables()) {\n+      node.addChildToBack(transform(initializer));\n+    }\n+    return node;\n+  }\n+\n+  @Override\n+  Node processVariableInitializer(VariableInitializer initializer) {\n+    Node node = newNode(Token.NAME, initializer.getTarget().getIdentifier());\n+    if (initializer.getInitializer() != null) {\n+      node.addChildToBack(transform(initializer.getInitializer()));\n+    } else {\n+      node.addChildToBack(newNode(Token.EMPTY).copyInformationFrom(initializer));\n+    }\n+    return node;\n+  }\n+\n+  @Override\n+  Node processWhileLoop(WhileLoop loopNode) {\n+    return newNode(\n+        Token.WHILE,\n+        transform(loopNode.getCondition()),\n+        transformBlock(loopNode.getBody()));\n+  }\n+\n+  @Override\n+  Node processWithStatement(WithStatement statementNode) {\n+    return newNode(\n+        Token.WITH,\n+        transform(statementNode.getExpression()),\n+        transformBlock(statementNode.getStatement()));\n+  }\n+\n+  @Override\n+  Node processXmlLiteral(XmlLiteral xmlNode) {\n+    Node node = newNode(Token.REF_IDENTIFIER, \"XML\");\n+    Node call = newNode(Token.CALL);\n+    call.addChildToBack(node);\n+    NodeArray children = xmlNode.getFragments();\n+    for (int i = 0; i < children.getLength(); i++) {\n+      AstNode child = children.get(i);\n+      if (child.getType() == Token.XML_LIST) {\n+        XmlList xmlList = (XmlList)child;\n+        for (int j = 0; j < xmlList.getChildCount(); j++) {\n+          call.addChildToBack(transform(xmlList.getChildAt(j)));\n+        }\n+      } else if (child.getType() != Token.EMPTY) {\n+        call.addChildToBack(transform(child));\n+      }\n+    }\n+    return call;\n+  }\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: class IRFactory.TransformDispatcher is already defined in class IRFactory",
    "test_result": "ERROR"
}