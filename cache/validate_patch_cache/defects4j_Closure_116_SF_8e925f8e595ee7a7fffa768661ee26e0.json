{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    int numArguments = callNode.getChildCount() - 1;\n\n    Node paramList = NodeUtil.getFunctionParameters(fnNode);\n    int numParameters = paramList.getChildCount();\n    if (numParameters < numArguments) {\n      return CanInlineResult.NO;\n    }\n\n    Node curParam = paramList.getFirstChild();\n    Node curArg = callNode.getFirstChild().getNext();\n\n    while (curParam != null) {\n      // Handle case where functions are called via 'call' or 'apply',\n      // that have a this-object as the first parameter, which is not part of the\n      // called function's parameters.\n      if (curParam == paramList.getFirstChild() && !callNode.getFirstChild().isName()) {\n        curArg = curArg.getNext();\n      }\n\n      if (!areNodesEquivalent(curArg, curParam)) {\n        if (!NodeUtil.mayHaveSideEffects(curArg, compiler)\n            && (curParam.isName() || !NodeUtil.mayEffectMutableState(curArg, compiler))) {\n          if (curArg.getNext() != null) {\n            // We have an extra argument, make sure it doesn't have side effects.\n            if (numParameters <= numArguments) {\n              return CanInlineResult.NO;\n            }\n            curArg = curArg.getNext();\n            numArguments++;\n          } else {\n            return CanInlineResult.NO;\n          }\n        } else {\n          return CanInlineResult.NO;\n        }\n      } else {\n        curArg = curArg.getNext();\n      }\n\n      curParam = curParam.getNext();\n    }\n\n    // Check for any undeclared parameter references in the function body\n    // that are not matched with call arguments.\n    Node body = NodeUtil.getFunctionBody(fnNode);\n    return NodeUtil.referencesUndeclaredFormals(body, paramList) ? CanInlineResult.NO : CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..4f68d295 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,58 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n+    int numArguments = callNode.getChildCount() - 1;\n \n+    Node paramList = NodeUtil.getFunctionParameters(fnNode);\n+    int numParameters = paramList.getChildCount();\n+    if (numParameters < numArguments) {\n+      return CanInlineResult.NO;\n+    }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+    Node curParam = paramList.getFirstChild();\n+    Node curArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+    while (curParam != null) {\n+      // Handle case where functions are called via 'call' or 'apply',\n+      // that have a this-object as the first parameter, which is not part of the\n+      // called function's parameters.\n+      if (curParam == paramList.getFirstChild() && !callNode.getFirstChild().isName()) {\n+        curArg = curArg.getNext();\n       }\n-    }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+      if (!areNodesEquivalent(curArg, curParam)) {\n+        if (!NodeUtil.mayHaveSideEffects(curArg, compiler)\n+            && (curParam.isName() || !NodeUtil.mayEffectMutableState(curArg, compiler))) {\n+          if (curArg.getNext() != null) {\n+            // We have an extra argument, make sure it doesn't have side effects.\n+            if (numParameters <= numArguments) {\n+              return CanInlineResult.NO;\n+            }\n+            curArg = curArg.getNext();\n+            numArguments++;\n+          } else {\n             return CanInlineResult.NO;\n           }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        } else {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+      } else {\n+        curArg = curArg.getNext();\n       }\n+\n+      curParam = curParam.getNext();\n     }\n \n-    return CanInlineResult.YES;\n-  }\n+    // Check for any undeclared parameter references in the function body\n+    // that are not matched with call arguments.\n+    Node body = NodeUtil.getFunctionBody(fnNode);\n+    return NodeUtil.referencesUndeclaredFormals(body, paramList) ? CanInlineResult.NO : CanInlineResult.YES;\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}