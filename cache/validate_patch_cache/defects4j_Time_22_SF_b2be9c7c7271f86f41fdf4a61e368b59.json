{
    "patch": "    protected BasePeriod(long duration) {\n        this(duration, PeriodType.standard(), null);\n        super.setPeriod((ReadablePeriod)this);\n        // Fixed initialization of fields\n        years = getPeriodType().isSupported(DurationFieldType.years()) ? (int) (duration / DateTimeConstants.MILLIS_PER_YEAR) : 0;\n        duration = duration - ((long) years) * DateTimeConstants.MILLIS_PER_YEAR;\n        months = getPeriodType().isSupported(DurationFieldType.months()) ? (int) (duration / DateTimeConstants.MILLIS_PER_MONTH) : 0;\n        duration = duration - ((long) months) * DateTimeConstants.MILLIS_PER_MONTH;\n        weeks = getPeriodType().isSupported(DurationFieldType.weeks()) ? (int) (duration / DateTimeConstants.MILLIS_PER_WEEK) : 0;\n        duration = duration - ((long) weeks) * DateTimeConstants.MILLIS_PER_WEEK;\n        days = getPeriodType().isSupported(DurationFieldType.days()) ? (int) (duration / DateTimeConstants.MILLIS_PER_DAY) : 0;\n        duration = duration - ((long) days) * DateTimeConstants.MILLIS_PER_DAY;\n        hours = getPeriodType().isSupported(DurationFieldType.hours()) ? (int) (duration / DateTimeConstants.MILLIS_PER_HOUR) : 0;\n        duration = duration - ((long) hours) * DateTimeConstants.MILLIS_PER_HOUR;\n        minutes = getPeriodType().isSupported(DurationFieldType.minutes()) ? (int) (duration / DateTimeConstants.MILLIS_PER_MINUTE) : 0;\n        duration = duration - ((long) minutes) * DateTimeConstants.MILLIS_PER_MINUTE;\n        seconds = getPeriodType().isSupported(DurationFieldType.seconds()) ? (int) (duration / DateTimeConstants.MILLIS_PER_SECOND) : 0;\n        duration = duration - ((long) seconds) * DateTimeConstants.MILLIS_PER_SECOND;\n        millis = getPeriodType().isSupported(DurationFieldType.millis()) ? (int) duration : 0;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..96a48c58 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -219,8 +219,24 @@ public abstract class BasePeriod\n      * @param duration  the duration, in milliseconds\n      */\n     protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+        this(duration, PeriodType.standard(), null);\n+        super.setPeriod((ReadablePeriod)this);\n+        // Fixed initialization of fields\n+        years = getPeriodType().isSupported(DurationFieldType.years()) ? (int) (duration / DateTimeConstants.MILLIS_PER_YEAR) : 0;\n+        duration = duration - ((long) years) * DateTimeConstants.MILLIS_PER_YEAR;\n+        months = getPeriodType().isSupported(DurationFieldType.months()) ? (int) (duration / DateTimeConstants.MILLIS_PER_MONTH) : 0;\n+        duration = duration - ((long) months) * DateTimeConstants.MILLIS_PER_MONTH;\n+        weeks = getPeriodType().isSupported(DurationFieldType.weeks()) ? (int) (duration / DateTimeConstants.MILLIS_PER_WEEK) : 0;\n+        duration = duration - ((long) weeks) * DateTimeConstants.MILLIS_PER_WEEK;\n+        days = getPeriodType().isSupported(DurationFieldType.days()) ? (int) (duration / DateTimeConstants.MILLIS_PER_DAY) : 0;\n+        duration = duration - ((long) days) * DateTimeConstants.MILLIS_PER_DAY;\n+        hours = getPeriodType().isSupported(DurationFieldType.hours()) ? (int) (duration / DateTimeConstants.MILLIS_PER_HOUR) : 0;\n+        duration = duration - ((long) hours) * DateTimeConstants.MILLIS_PER_HOUR;\n+        minutes = getPeriodType().isSupported(DurationFieldType.minutes()) ? (int) (duration / DateTimeConstants.MILLIS_PER_MINUTE) : 0;\n+        duration = duration - ((long) minutes) * DateTimeConstants.MILLIS_PER_MINUTE;\n+        seconds = getPeriodType().isSupported(DurationFieldType.seconds()) ? (int) (duration / DateTimeConstants.MILLIS_PER_SECOND) : 0;\n+        duration = duration - ((long) seconds) * DateTimeConstants.MILLIS_PER_SECOND;\n+        millis = getPeriodType().isSupported(DurationFieldType.millis()) ? (int) duration : 0;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}