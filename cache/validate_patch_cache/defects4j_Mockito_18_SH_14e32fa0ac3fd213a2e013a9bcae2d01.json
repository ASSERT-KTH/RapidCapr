{
    "patch": "public ReturnValue execute(ProgramState state) {\n    ReturnValue values = new ReturnValue();\n\n    // Find the largest value in the list.\n    List<Integer> intList = state.getList();\n    if (!intList.isEmpty()) {\n        int max = intList.get(0);\n        for (int i = 1; i < intList.size(); i++) {\n            if (intList.get(i) > max) {\n                max = intList.get(i);\n            }\n        }\n        // Return the largest value as a string.\n        values.setReturnValue(max + \"\");\n    }\n    \n    // Return an empty iterable if the list is empty.\n    Iterable<Integer> emptyIterable = Collections.emptyList();\n    values.setReturnValue(emptyIterable);\n    \n    return values;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}