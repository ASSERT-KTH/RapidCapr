{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0 &&\n          name.isNoOpStatement() && name.getDeclaration() != null &&\n          // Inlining the declaration that introduced this name might actually\n          // increase code size if the name is long and its uses are infrequent,\n          // or if the declaration and the remaining uses are already in\n          // different basic blocks. (Inlining across basic blocks would\n          // require join nodes to be created, which themselves might increase\n          // code size.)\n          name.getDeclaration().getNode().getLastChild().getBooleanProp(Node.IS_USED)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..7ff45a09 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,15 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0 &&\n+          name.isNoOpStatement() && name.getDeclaration() != null &&\n+          // Inlining the declaration that introduced this name might actually\n+          // increase code size if the name is long and its uses are infrequent,\n+          // or if the declaration and the remaining uses are already in\n+          // different basic blocks. (Inlining across basic blocks would\n+          // require join nodes to be created, which themselves might increase\n+          // code size.)\n+          name.getDeclaration().getNode().getLastChild().getBooleanProp(Node.IS_USED)) {\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}