{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child != null;\n      child = child.getNext()) {\n    // Maybe STRING, GETELEM, GET, SET\n\n    // We should never see a mix of numbers and strings.\n    String name = null;\n    if (child.isGetProp()) {\n      name = child.getLastChild().getString();\n    } else if (child.isGetElem()) {\n      name = child.getLastChild().getQualifiedName();\n    } else {\n      name = child.getString();\n    }\n    T type = typeSystem.getType(getScope(), n, name);\n\n    Property prop = getProperty(name);\n    if (prop == null) {\n      Node prototype = getPrototype(n, name);\n      if (prototype != null) {\n        prop = getProperty(name, prototype.getString());\n      }\n    }\n    if (prop != null && !prop.scheduleRenaming(child,\n                               processProperty(t, prop, type, null))) {\n      // TODO(user): It doesn't look like the user can do much in this\n      // case right now.\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n  }\n}\n\nprivate Node getPrototype(Node n, String name) {\n  while (n != null) {\n    Node proto = getPrototypeObject(n).getFirstChild();\n    if (proto != null && getProperty(name, proto.getString()) != null) {\n      return proto;\n    }\n    n = proto;\n  }\n  return null;\n}\n\nprivate Node getPrototypeObject(Node n) {\n  Node proto = null;\n  JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n  if (info != null && info.getImplementedInterfaceCount() > 0) {\n    String ifaceName = info.getImplementedInterfaceNames().iterator().next();\n    JSType ifaceType = typeSystem.resolveTypeName(ifaceName);\n    if (ifaceType != null) {\n      proto = typeSystem.getPropertyType(ifaceType, \"prototype\").getNode();\n    }\n  } else {\n    Node objLit = NodeUtil.getRValueOfLValue(n);\n    proto = NodeUtil.getFirstPropMatchingKey(objLit, \"prototype\");\n  }\n  return proto;\n}\n\nprivate Property getProperty(String name, String className) {\n  if (className == null) {\n    return getProperty(name);\n  }\n  if (properties.containsKey(name)) {\n    for (Property prop : properties.get(name)) {\n      if (prop.getClassName().equals(className)) {\n        return prop;\n      }\n    }\n  }\n  return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..a9761542 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,30 +487,84 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  for (Node child = n.getFirstChild();\n+      child != null;\n+      child = child.getNext()) {\n+    // Maybe STRING, GETELEM, GET, SET\n+\n+    // We should never see a mix of numbers and strings.\n+    String name = null;\n+    if (child.isGetProp()) {\n+      name = child.getLastChild().getString();\n+    } else if (child.isGetElem()) {\n+      name = child.getLastChild().getQualifiedName();\n+    } else {\n+      name = child.getString();\n+    }\n+    T type = typeSystem.getType(getScope(), n, name);\n+\n+    Property prop = getProperty(name);\n+    if (prop == null) {\n+      Node prototype = getPrototype(n, name);\n+      if (prototype != null) {\n+        prop = getProperty(name, prototype.getString());\n+      }\n+    }\n+    if (prop != null && !prop.scheduleRenaming(child,\n+                               processProperty(t, prop, type, null))) {\n+      // TODO(user): It doesn't look like the user can do much in this\n+      // case right now.\n+      if (propertiesToErrorFor.containsKey(name)) {\n+        compiler.report(JSError.make(\n+            t.getSourceName(), child, propertiesToErrorFor.get(name),\n+            Warnings.INVALIDATION, name,\n+            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n       }\n     }\n+  }\n+}\n+\n+private Node getPrototype(Node n, String name) {\n+  while (n != null) {\n+    Node proto = getPrototypeObject(n).getFirstChild();\n+    if (proto != null && getProperty(name, proto.getString()) != null) {\n+      return proto;\n+    }\n+    n = proto;\n+  }\n+  return null;\n+}\n+\n+private Node getPrototypeObject(Node n) {\n+  Node proto = null;\n+  JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n+  if (info != null && info.getImplementedInterfaceCount() > 0) {\n+    String ifaceName = info.getImplementedInterfaceNames().iterator().next();\n+    JSType ifaceType = typeSystem.resolveTypeName(ifaceName);\n+    if (ifaceType != null) {\n+      proto = typeSystem.getPropertyType(ifaceType, \"prototype\").getNode();\n+    }\n+  } else {\n+    Node objLit = NodeUtil.getRValueOfLValue(n);\n+    proto = NodeUtil.getFirstPropMatchingKey(objLit, \"prototype\");\n+  }\n+  return proto;\n+}\n+\n+private Property getProperty(String name, String className) {\n+  if (className == null) {\n+    return getProperty(name);\n+  }\n+  if (properties.containsKey(name)) {\n+    for (Property prop : properties.get(name)) {\n+      if (prop.getClassName().equals(className)) {\n+        return prop;\n+      }\n+    }\n+  }\n+  return null;\n+}\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {",
    "result_reason": "error: method getProperty in class DisambiguateProperties<T>.FindRenameableProperties cannot be applied to given types;",
    "test_result": "ERROR"
}