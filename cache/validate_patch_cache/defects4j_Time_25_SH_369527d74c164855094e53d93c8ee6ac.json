{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if (offsetLocal > 0 && offsetAdjusted < 0 && instantLocal >= 0) {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n    } else if ((offsetLocal - offsetAdjusted) < 0) {\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n        long prevLocal = previousTransition(instantAdjusted);\n        if (prevAdjusted < instantLocal - offsetLocal && prevLocal < instantLocal) {\n            return offsetLocal;\n        }\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n    } else {\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        long nextLocal = nextTransition(instantAdjusted);\n        if (nextAdjusted > instantLocal - offsetAdjusted && nextLocal > instantLocal) {\n            return offsetAdjusted;\n        }\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n        long prevLocal = previousTransition(instantAdjusted);\n        if (prevLocal == prevAdjusted) {\n            return offsetAdjusted;\n        }\n        if (prevLocal < prevAdjusted && instantLocal - offsetLocal - prevLocal <= DateTimeConstants.MILLIS_PER_HOUR) {\n            return offsetLocal;\n        }\n        return offsetAdjusted;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..aa0288d1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,41 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if (offsetLocal > 0 && offsetAdjusted < 0 && instantLocal >= 0) {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+    } else if ((offsetLocal - offsetAdjusted) < 0) {\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+        long prevLocal = previousTransition(instantAdjusted);\n+        if (prevAdjusted < instantLocal - offsetLocal && prevLocal < instantLocal) {\n+            return offsetLocal;\n+        }\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+    } else {\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        long nextLocal = nextTransition(instantAdjusted);\n+        if (nextAdjusted > instantLocal - offsetAdjusted && nextLocal > instantLocal) {\n+            return offsetAdjusted;\n+        }\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+        long prevLocal = previousTransition(instantAdjusted);\n+        if (prevLocal == prevAdjusted) {\n+            return offsetAdjusted;\n+        }\n+        if (prevLocal < prevAdjusted && instantLocal - offsetLocal - prevLocal <= DateTimeConstants.MILLIS_PER_HOUR) {\n+            return offsetLocal;\n+        }\n+        return offsetAdjusted;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}