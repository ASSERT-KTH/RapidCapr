{
    "patch": "public Fraction reduce() {\n        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n        int absNum = numerator / gcd;\n        int absDenom = denominator / gcd;\n        if (absDenom < 0) {\n            absDenom = -absDenom;\n            absNum = -absNum;\n        }\n        return Fraction.getFraction(absNum, absDenom);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..18ce140e 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,13 +462,16 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n+public Fraction reduce() {\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n+        int absNum = numerator / gcd;\n+        int absDenom = denominator / gcd;\n+        if (absDenom < 0) {\n+            absDenom = -absDenom;\n+            absNum = -absNum;\n         }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n-    }\n+        return Fraction.getFraction(absNum, absDenom);\n+}\n \n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<-2/3> was not:<-2/3>",
    "test_result": "FAIL"
}