{
    "patch": "final double n1n2prod;\ntry{\n    n1n2prod = Math.multiplyExact(n1, n2);\n} catch (ArithmeticException ex) {\n    // In this case, n1*n2 produces an overflow which implies that the result is greater than \n    // 2^31 - 1. Therefore, we use the double type here to prevent the overflow issue.\n    n1n2prod = (double) n1 * (double) n2;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\nindex ce694ce8f..1193689de 100644\n--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n@@ -170,7 +170,14 @@ public class MannWhitneyUTest {\n                                              final int n2)\n         throws ConvergenceException, MaxCountExceededException {\n \n-        final int n1n2prod = n1 * n2;\n+final double n1n2prod;\n+try{\n+    n1n2prod = Math.multiplyExact(n1, n2);\n+} catch (ArithmeticException ex) {\n+    // In this case, n1*n2 produces an overflow which implies that the result is greater than \n+    // 2^31 - 1. Therefore, we use the double type here to prevent the overflow issue.\n+    n1n2prod = (double) n1 * (double) n2;\n+}\n \n         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n         final double EU = n1n2prod / 2.0;",
    "result_reason": "error: variable n1n2prod might already have been assigned",
    "test_result": "ERROR"
}