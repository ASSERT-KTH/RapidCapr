{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = reflectedSimplex;\n            } else {\n                simplex = evaluateNewSimplex(original, rho, comparator);\n            }\n            continue;\n        }\n\n        // check if we need to perform contraction\n        final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            simplex = contracted;\n            continue;\n        }\n\n        // check if we need to perform shrinkage\n        final RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];\n        final RealPointValuePair first = simplex[0];\n        for (int i = 1; i < simplex.length; i++) {\n            newSimplex[i] = new RealPointValuePair(shrink * simplex[i].getPointRef()[i - 1] + (1 - shrink) * first.getPointRef()[i - 1], 0);\n        }\n        simplex = evaluateNewSimplex(newSimplex, 0, comparator);\n        if (comparator.compare(simplex[simplex.length - 1], first) >= 0) {\n            // shrinkage did not help, we need to contract\n            Arrays.sort(original, comparator);\n            simplex = evaluateNewSimplex(original, sigma, comparator);\n        }\n        // check convergence\n        return;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..cbab0d3a2 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,53 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+    while (true) {\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = reflectedSimplex;\n+            } else {\n+                simplex = evaluateNewSimplex(original, rho, comparator);\n             }\n+            continue;\n+        }\n \n+        // check if we need to perform contraction\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            simplex = contracted;\n+            continue;\n         }\n \n+        // check if we need to perform shrinkage\n+        final RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];\n+        final RealPointValuePair first = simplex[0];\n+        for (int i = 1; i < simplex.length; i++) {\n+            newSimplex[i] = new RealPointValuePair(shrink * simplex[i].getPointRef()[i - 1] + (1 - shrink) * first.getPointRef()[i - 1], 0);\n+        }\n+        simplex = evaluateNewSimplex(newSimplex, 0, comparator);\n+        if (comparator.compare(simplex[simplex.length - 1], first) >= 0) {\n+            // shrinkage did not help, we need to contract\n+            Arrays.sort(original, comparator);\n+            simplex = evaluateNewSimplex(original, sigma, comparator);\n+        }\n+        // check convergence\n+        return;\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}