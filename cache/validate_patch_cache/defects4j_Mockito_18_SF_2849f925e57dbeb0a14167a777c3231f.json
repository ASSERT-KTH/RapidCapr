{
    "patch": "public class Values {\n    private int intValue;\n    private long longValue;\n    private String stringValue;\n\n    public Values(int intValue, long longValue, String stringValue) {\n        this.intValue = intValue;\n        this.longValue = longValue;\n        this.stringValue = stringValue;\n    }\n\n    public <T> T returnValueFor(Class<T> clazz) {\n        if (clazz.equals(Integer.class)) {\n            return clazz.cast(Integer.valueOf(intValue));\n        } else if (clazz.equals(Long.class)) {\n            return clazz.cast(Long.valueOf(longValue));\n        } else if (clazz.equals(String.class)) {\n            return clazz.cast(stringValue);\n        } else if (clazz.equals(Iterable.class)) {\n            return clazz.cast(Collections.emptyList());\n        }\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..f58ef95e9 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,30 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class Values {\n+    private int intValue;\n+    private long longValue;\n+    private String stringValue;\n+\n+    public Values(int intValue, long longValue, String stringValue) {\n+        this.intValue = intValue;\n+        this.longValue = longValue;\n+        this.stringValue = stringValue;\n+    }\n+\n+    public <T> T returnValueFor(Class<T> clazz) {\n+        if (clazz.equals(Integer.class)) {\n+            return clazz.cast(Integer.valueOf(intValue));\n+        } else if (clazz.equals(Long.class)) {\n+            return clazz.cast(Long.valueOf(longValue));\n+        } else if (clazz.equals(String.class)) {\n+            return clazz.cast(stringValue);\n+        } else if (clazz.equals(Iterable.class)) {\n+            return clazz.cast(Collections.emptyList());\n+        }\n+        return null;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}