{
    "patch": "public void initOptions(CompilerOptions options) {\n    this.options = options;\n\n    // create error manager if necessary\n    if (errorManager == null) {\n        if (outStream == null) {\n            setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n        } else {\n            PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream);\n            printer.setSummaryDetailLevel(options.summaryDetailLevel);\n            setErrorManager(printer);\n        }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes = false;\n    } else if (!options.checkTypes) {\n        // If DiagnosticGroups did not override the plain checkTypes\n        // option, and checkTypes is enabled, then turn off the\n        // parser type warnings.\n        options.setWarningLevel(\n            DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),\n            CheckLevel.OFF);\n    }\n\n    // Set warning level for use of undefined properties on global this object, if checkGlobalThisLevel is not OFF\n    if (options.checkGlobalThisLevel != CheckLevel.OFF) {\n        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    // Add DiagnosticGroupWarningsGuard for MISSING_PROPERTIES if checkSymbols is OFF\n    if (!options.checkSymbols) {\n        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.ERROR));\n    }\n\n    // Add DiagnosticGroupWarningsGuard for JSC_INEXISTENT_PROPERTY if checkTypes is ON\n    if (options.checkTypes) {\n        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.JSC_INEXISTENT_PROPERTY, CheckLevel.OFF));\n    }\n    \n    // Add DiagnosticGroupWarningsGuard for CHECK_VARIABLES if checkSymbols is OFF and there are no other guards shutting it off\n    if (!options.checkSymbols && !guardsContain(guards, DiagnosticGroups.CHECK_VARIABLES)) {\n        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    // Replace the warningsGuard with a ComposeWarningsGuard of all the guards\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n}\n\n/**\n * Helper method to check if the given list of warnings guards contains a guard for the given diagnostic group.\n */\nprivate boolean guardsContain(List<WarningsGuard> guards, DiagnosticGroup group) {\n    for (WarningsGuard guard : guards) {\n        if (guard instanceof DiagnosticGroupWarningsGuard) {\n            DiagnosticGroupWarningsGuard diagGuard = (DiagnosticGroupWarningsGuard) guard;\n            if (diagGuard.group.equals(group)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 11850211..cf9808a8 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -223,63 +223,77 @@ public class Compiler extends AbstractCompiler {\n    * Initialize the compiler options. Only necessary if you're not doing\n    * a normal compile() job.\n    */\n-  public void initOptions(CompilerOptions options) {\n+public void initOptions(CompilerOptions options) {\n     this.options = options;\n+\n+    // create error manager if necessary\n     if (errorManager == null) {\n-      if (outStream == null) {\n-        setErrorManager(\n-            new LoggerErrorManager(createMessageFormatter(), logger));\n-      } else {\n-        PrintStreamErrorManager printer =\n-            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n-        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n-        setErrorManager(printer);\n-      }\n+        if (outStream == null) {\n+            setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n+        } else {\n+            PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream);\n+            printer.setSummaryDetailLevel(options.summaryDetailLevel);\n+            setErrorManager(printer);\n+        }\n     }\n \n     // DiagnosticGroups override the plain checkTypes option.\n     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n-      options.checkTypes = true;\n+        options.checkTypes = true;\n     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n-      options.checkTypes = false;\n+        options.checkTypes = false;\n     } else if (!options.checkTypes) {\n-      // If DiagnosticGroups did not override the plain checkTypes\n-      // option, and checkTypes is enabled, then turn off the\n-      // parser type warnings.\n-      options.setWarningLevel(\n-          DiagnosticGroup.forType(\n-              RhinoErrorReporter.TYPE_PARSE_ERROR),\n-          CheckLevel.OFF);\n+        // If DiagnosticGroups did not override the plain checkTypes\n+        // option, and checkTypes is enabled, then turn off the\n+        // parser type warnings.\n+        options.setWarningLevel(\n+            DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),\n+            CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.GLOBAL_THIS,\n-          options.checkGlobalThisLevel);\n+    // Set warning level for use of undefined properties on global this object, if checkGlobalThisLevel is not OFF\n+    if (options.checkGlobalThisLevel != CheckLevel.OFF) {\n+        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n     }\n \n     // Initialize the warnings guard.\n     List<WarningsGuard> guards = Lists.newArrayList();\n-    guards.add(\n-        new SuppressDocWarningsGuard(\n-            getDiagnosticGroups().getRegisteredGroups()));\n+    guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n     guards.add(options.getWarningsGuard());\n \n+    // Add DiagnosticGroupWarningsGuard for MISSING_PROPERTIES if checkSymbols is OFF\n+    if (!options.checkSymbols) {\n+        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.ERROR));\n+    }\n \n-    // All passes must run the variable check. This synthesizes\n-    // variables later so that the compiler doesn't crash. It also\n-    // checks the externs file for validity. If you don't want to warn\n-    // about missing variable declarations, we shut that specific\n-    // error off.\n-    if (!options.checkSymbols &&\n-        (warningsGuard == null || !warningsGuard.disables(\n-            DiagnosticGroups.CHECK_VARIABLES))) {\n-      guards.add(new DiagnosticGroupWarningsGuard(\n-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n+    // Add DiagnosticGroupWarningsGuard for JSC_INEXISTENT_PROPERTY if checkTypes is ON\n+    if (options.checkTypes) {\n+        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.JSC_INEXISTENT_PROPERTY, CheckLevel.OFF));\n+    }\n+    \n+    // Add DiagnosticGroupWarningsGuard for CHECK_VARIABLES if checkSymbols is OFF and there are no other guards shutting it off\n+    if (!options.checkSymbols && !guardsContain(guards, DiagnosticGroups.CHECK_VARIABLES)) {\n+        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n     }\n \n+    // Replace the warningsGuard with a ComposeWarningsGuard of all the guards\n     this.warningsGuard = new ComposeWarningsGuard(guards);\n-  }\n+}\n+\n+/**\n+ * Helper method to check if the given list of warnings guards contains a guard for the given diagnostic group.\n+ */\n+private boolean guardsContain(List<WarningsGuard> guards, DiagnosticGroup group) {\n+    for (WarningsGuard guard : guards) {\n+        if (guard instanceof DiagnosticGroupWarningsGuard) {\n+            DiagnosticGroupWarningsGuard diagGuard = (DiagnosticGroupWarningsGuard) guard;\n+            if (diagGuard.group.equals(group)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n \n   /**\n    * Initializes the instance state needed for a compile job.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}