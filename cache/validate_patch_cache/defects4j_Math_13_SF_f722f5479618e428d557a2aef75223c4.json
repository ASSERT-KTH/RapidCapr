{
    "patch": "        final EigenDecomposition dec = new EigenDecomposition(m);\n        double[] realEigenvalues = dec.getRealEigenvalues();\n        double maxValue = Double.MIN_VALUE;\n        for(int i = 0; i<realEigenvalues.length; i++){\n            if(realEigenvalues[i] > maxValue)\n                maxValue = realEigenvalues[i];\n        }\n        if (maxValue > 1e6) {\n            final int size = m.getRowDimension();\n            final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(size);\n            return new CholeskyDecomposition(m.add(identity.scalarMultiply(maxValue))).getSolver().solve(identity).scalarMultiply(FastMath.sqrt(maxValue));\n        }\n        return dec.getSquareRoot();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..aede7e2cf 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,17 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        double[] realEigenvalues = dec.getRealEigenvalues();\n+        double maxValue = Double.MIN_VALUE;\n+        for(int i = 0; i<realEigenvalues.length; i++){\n+            if(realEigenvalues[i] > maxValue)\n+                maxValue = realEigenvalues[i];\n+        }\n+        if (maxValue > 1e6) {\n+            final int size = m.getRowDimension();\n+            final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(size);\n+            return new CholeskyDecomposition(m.add(identity.scalarMultiply(maxValue))).getSolver().solve(identity).scalarMultiply(FastMath.sqrt(maxValue));\n+        }\n+        return dec.getSquareRoot();\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}