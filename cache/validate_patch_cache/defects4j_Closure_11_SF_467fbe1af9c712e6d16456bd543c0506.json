{
    "patch": "public void testGetProperty4() {\n    Config config = new Config();\n    String[] warnings = config.getProperty(\"foo\");\n    assertNotNull(\"expected non-null result\", warnings);\n    assertEquals(\"expected empty array\", 0, warnings.length);\n    config.setProperty(\"foo\", \"bar\");\n    warnings = config.getProperty(\"foo\");\n    assertNotNull(\"expected non-null result\", warnings);\n    assertEquals(\"expected one warning\", 1, warnings.length);\n    assertEquals(\"expected correct value\", \"bar\", warnings[0]);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..87120b2a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetProperty4() {\n+    Config config = new Config();\n+    String[] warnings = config.getProperty(\"foo\");\n+    assertNotNull(\"expected non-null result\", warnings);\n+    assertEquals(\"expected empty array\", 0, warnings.length);\n+    config.setProperty(\"foo\", \"bar\");\n+    warnings = config.getProperty(\"foo\");\n+    assertNotNull(\"expected non-null result\", warnings);\n+    assertEquals(\"expected one warning\", 1, warnings.length);\n+    assertEquals(\"expected correct value\", \"bar\", warnings[0]);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}