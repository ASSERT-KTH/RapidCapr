{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return Arrays.copyOf(values, values.length);\n    }\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        int[] newValues = Arrays.copyOf(values, values.length);\n        newValues[fieldIndex] += valueToAdd;\n        if (partial.getFieldType(fieldIndex).equals(DateTimeFieldType.monthOfYear())) {\n            try {\n                Partial newPartial = partial.withField(DateTimeFieldType.monthOfYear(), newValues[fieldIndex]);\n                newPartial = newPartial.withField(DateTimeFieldType.year(), newValues[partial.indexOf(DateTimeFieldType.year())]);\n                long instant = newPartial.toInstant().getMillis();\n                return iChronology.get(partial, instant);\n            } catch (IllegalArgumentException e) {\n                // Month overflowed, move to next option\n                int[] nextValues = super.add(partial, fieldIndex, values, 1);\n                return this.add(partial, fieldIndex, nextValues, valueToAdd - 1);\n            }\n        } else {\n            return super.add(partial, fieldIndex, newValues, 1);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..05df5c6c 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,32 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return Arrays.copyOf(values, values.length);\n+    }\n+\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int[] newValues = Arrays.copyOf(values, values.length);\n+        newValues[fieldIndex] += valueToAdd;\n+        if (partial.getFieldType(fieldIndex).equals(DateTimeFieldType.monthOfYear())) {\n+            try {\n+                Partial newPartial = partial.withField(DateTimeFieldType.monthOfYear(), newValues[fieldIndex]);\n+                newPartial = newPartial.withField(DateTimeFieldType.year(), newValues[partial.indexOf(DateTimeFieldType.year())]);\n+                long instant = newPartial.toInstant().getMillis();\n+                return iChronology.get(partial, instant);\n+            } catch (IllegalArgumentException e) {\n+                // Month overflowed, move to next option\n+                int[] nextValues = super.add(partial, fieldIndex, values, 1);\n+                return this.add(partial, fieldIndex, nextValues, valueToAdd - 1);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            return super.add(partial, fieldIndex, newValues, 1);\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}