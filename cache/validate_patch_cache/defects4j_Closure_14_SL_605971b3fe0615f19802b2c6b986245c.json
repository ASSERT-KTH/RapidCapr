{
    "patch": "if (cfa != null) {\n  Node nextNode = finallyNode.getNext() != null \n    && !finallyNode.getNext().isFunction() \n    ? finallyNode.getNext() \n    : computeFollowNode(fromNode, finallyNode, cfa);\n  if (nextNode != null) cfa.createEdge(fromNode, Branch.UNCOND, nextNode);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..4a547779 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,13 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  Node nextNode = finallyNode.getNext() != null \n+    && !finallyNode.getNext().isFunction() \n+    ? finallyNode.getNext() \n+    : computeFollowNode(fromNode, finallyNode, cfa);\n+  if (nextNode != null) cfa.createEdge(fromNode, Branch.UNCOND, nextNode);\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}