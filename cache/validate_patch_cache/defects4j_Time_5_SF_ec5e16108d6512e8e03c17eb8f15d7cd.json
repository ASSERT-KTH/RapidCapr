{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        long millis = getMillis();\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        // Split the input period into years, months, and days to handle normalization\n        int inputYears = getYears() + (getMonths() / 12);\n        int inputMonths = getMonths() % 12;\n        int inputDays = getDays();\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC())\n                .withYears(0).withMonths(0).withDays(0);\n\n        // Set the output period's years and months, normalizing as needed\n        result = result.withYears(inputYears).withMonths(inputMonths);\n        if (result.normalizedStandard(type) != result) {\n            int oldYears = result.getYears();\n            int oldMonths = result.getMonths();\n            result = result.normalizedStandard(type);\n            // Adjust the years and months if necessary after normalization\n            int newYears = result.getYears();\n            int newMonths = result.getMonths();\n            newMonths += (oldYears - newYears) * 12;\n            result = result.withYears(newYears).withMonths(newMonths);\n        }\n\n        // Add the input period's days after normalization has been applied\n        result = result.withDays(FieldUtils.safeAdd(result.getDays(), inputDays));\n        return result.normalizedStandard(type);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..b681a529 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1614,27 +1614,36 @@ public final class Period\n      * @since 1.5\n      */\n     public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+        long millis = getMillis();\n         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+\n+        // Split the input period into years, months, and days to handle normalization\n+        int inputYears = getYears() + (getMonths() / 12);\n+        int inputMonths = getMonths() % 12;\n+        int inputDays = getDays();\n+        Period result = new Period(millis, type, ISOChronology.getInstanceUTC())\n+                .withYears(0).withMonths(0).withDays(0);\n+\n+        // Set the output period's years and months, normalizing as needed\n+        result = result.withYears(inputYears).withMonths(inputMonths);\n+        if (result.normalizedStandard(type) != result) {\n+            int oldYears = result.getYears();\n+            int oldMonths = result.getMonths();\n+            result = result.normalizedStandard(type);\n+            // Adjust the years and months if necessary after normalization\n+            int newYears = result.getYears();\n+            int newMonths = result.getMonths();\n+            newMonths += (oldYears - newYears) * 12;\n+            result = result.withYears(newYears).withMonths(newMonths);\n         }\n-        return result;\n+\n+        // Add the input period's days after normalization has been applied\n+        result = result.withDays(FieldUtils.safeAdd(result.getDays(), inputDays));\n+        return result.normalizedStandard(type);\n     }\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}