{
    "patch": "      // Only allow declarations of NAMEs and qualified names.\n      boolean shouldDeclareOnGlobalThis = false;\n      if (n.getType() == Token.NAME) {\n        Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LET ||\n            parent.getType() == Token.CONST ||\n            parent.getType() == Token.CLASS ||\n            parent.getType() == Token.PARAM_LIST ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH ||\n            parent.getType() == Token.FUNCTION_EXPRESSION);\n        shouldDeclareOnGlobalThis = scope.isGlobal()\n              && (parent.getType() == Token.VAR\n                  || parent.getType() == Token.FUNCTION\n                  || parent.getType() == Token.FUNCTION_EXPRESSION);\n      } else {\n        Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));\n      }\n      String variableName = n.getQualifiedName();\n      Preconditions.checkArgument(!variableName.isEmpty());\n\n      // If n is a property, then we should really declare it in the\n      // scope where the root object appears. This helps out people\n      // who declare \"global\" names in an anonymous namespace.\n      Node root = n.getFirstChild();\n      while (root.getType() == Token.GETPROP) {\n        root = root.getFirstChild();\n      }\n      Scope scopeToDeclareIn = scope.getClosestHoistScope(root.getString());\n      if (scopeToDeclareIn == null) { // this happens with some malformed code\n        scopeToDeclareIn = scope;\n      }\n\n\n      // Don't try to declare in the global scope if there's already a symbol there with this name.\n      if (scope.isDeclared(variableName, false)) {\n        Var oldVar = scope.getVar(variableName);\n        validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);\n      } else {\n        if (!inferred) {\n          setDeferredType(n, type);\n        }\n        CompilerInput input = compiler.getInput(sourceName);\n        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n        if (shouldDeclareOnGlobalThis) {\n          ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n          boolean isExtern = input.isExtern();\n          if (inferred) {\n            globalThis.defineInferredProperty(variableName,\n                type == null ?\n                    getNativeType(JSTypeNative.NO_TYPE) :\n                    type,\n                isExtern);\n          } else {\n            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n          }\n        }\n\n        // If we're in the global scope, also declare var.prototype\n        // in the scope chain.\n        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n          FunctionType fnType = (FunctionType) type;\n          if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(JSTypeNative.OBJECT_TYPE)));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..0f43ecac 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,20 +869,23 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n+      // Only allow declarations of NAMEs and qualified names.\n       boolean shouldDeclareOnGlobalThis = false;\n       if (n.getType() == Token.NAME) {\n         Preconditions.checkArgument(\n             parent.getType() == Token.FUNCTION ||\n             parent.getType() == Token.VAR ||\n+            parent.getType() == Token.LET ||\n+            parent.getType() == Token.CONST ||\n+            parent.getType() == Token.CLASS ||\n+            parent.getType() == Token.PARAM_LIST ||\n             parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n+            parent.getType() == Token.CATCH ||\n+            parent.getType() == Token.FUNCTION_EXPRESSION);\n+        shouldDeclareOnGlobalThis = scope.isGlobal()\n+              && (parent.getType() == Token.VAR\n+                  || parent.getType() == Token.FUNCTION\n+                  || parent.getType() == Token.FUNCTION_EXPRESSION);\n       } else {\n         Preconditions.checkArgument(\n             n.getType() == Token.GETPROP &&\n@@ -895,14 +898,19 @@ final class TypedScopeCreator implements ScopeCreator {\n       // If n is a property, then we should really declare it in the\n       // scope where the root object appears. This helps out people\n       // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n+      Node root = n.getFirstChild();\n+      while (root.getType() == Token.GETPROP) {\n+        root = root.getFirstChild();\n+      }\n+      Scope scopeToDeclareIn = scope.getClosestHoistScope(root.getString());\n+      if (scopeToDeclareIn == null) { // this happens with some malformed code\n+        scopeToDeclareIn = scope;\n+      }\n \n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n \n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n+      // Don't try to declare in the global scope if there's already a symbol there with this name.\n+      if (scope.isDeclared(variableName, false)) {\n+        Var oldVar = scope.getVar(variableName);\n         validator.expectUndeclaredVariable(\n             sourceName, n, parent, oldVar, variableName, type);\n       } else {\n@@ -938,11 +946,7 @@ final class TypedScopeCreator implements ScopeCreator {\n                 /* declared iff there's an explicit supertype */\n                 superClassCtor == null ||\n                 superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n-      }\n-    }\n+                    getNativeType(JSTypeNative.OBJECT_TYPE)));\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}