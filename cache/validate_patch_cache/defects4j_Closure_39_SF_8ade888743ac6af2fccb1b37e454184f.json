{
    "patch": "public boolean canBeCalled() {\n  return !isRegexpType();\n}\n\nprivate static final int MAX_PROPERTIES_FOR_PRETTY_PRINT = 10;\nprivate static final String ELLIPSIS = \"...\";\n\n/**\n * Returns a string representation of the object, with support for recursive object types.\n * If this object is a recursive object type, then it will return \"{...}\".\n * Otherwise, it will return a string representing the object's properties.\n */\n@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  }\n\n  // We use a HashSet to efficiently check whether we have already seen an object type.\n  Set<ObjectType> visitedTypes = new HashSet<>();\n  StringBuilder sb = new StringBuilder(\"{\");\n  boolean first = true;\n  for (ObjectType current = this;\n       current != null && !current.isNativeObjectType() && visitedTypes.size() <= MAX_PROPERTIES_FOR_PRETTY_PRINT;\n       current = current.getImplicitPrototype()) {\n    // Get the property names for this object type and add them to the StringBuilder.\n    for (String propertyName : current.getOwnPropertyNames()) {\n      if (!first) {\n        sb.append(\", \");\n      } else {\n        first = false;\n      }\n      sb.append(propertyName).append(\": \");\n      Object propertyType = current.getPropertyType(propertyName);\n      if (propertyType instanceof ObjectType) {\n        ObjectType objectType = (ObjectType) propertyType;\n        if (visitedTypes.contains(objectType) || objectType.equals(this)) {\n          sb.append(ELLIPSIS);\n        } else {\n          visitedTypes.add(objectType);\n          sb.append(objectType.toStringHelper(false));\n          visitedTypes.remove(objectType);\n        }\n      } else {\n        sb.append(propertyType);\n      }\n    }\n  }\n  if (visitedTypes.size() > MAX_PROPERTIES_FOR_PRETTY_PRINT) {\n    sb.append(\", \").append(ELLIPSIS); // Add an ellipsis to indicate omitted properties.\n  }\n  return sb.append(\"}\").toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..75b7c62e 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,59 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n-\n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n-\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n-\n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n+public boolean canBeCalled() {\n+  return !isRegexpType();\n+}\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+private static final int MAX_PROPERTIES_FOR_PRETTY_PRINT = 10;\n+private static final String ELLIPSIS = \"...\";\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+/**\n+ * Returns a string representation of the object, with support for recursive object types.\n+ * If this object is a recursive object type, then it will return \"{...}\".\n+ * Otherwise, it will return a string representing the object's properties.\n+ */\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n+  if (hasReferenceName()) {\n+    return getReferenceName();\n+  }\n+\n+  // We use a HashSet to efficiently check whether we have already seen an object type.\n+  Set<ObjectType> visitedTypes = new HashSet<>();\n+  StringBuilder sb = new StringBuilder(\"{\");\n+  boolean first = true;\n+  for (ObjectType current = this;\n+       current != null && !current.isNativeObjectType() && visitedTypes.size() <= MAX_PROPERTIES_FOR_PRETTY_PRINT;\n+       current = current.getImplicitPrototype()) {\n+    // Get the property names for this object type and add them to the StringBuilder.\n+    for (String propertyName : current.getOwnPropertyNames()) {\n+      if (!first) {\n+        sb.append(\", \");\n+      } else {\n+        first = false;\n+      }\n+      sb.append(propertyName).append(\": \");\n+      Object propertyType = current.getPropertyType(propertyName);\n+      if (propertyType instanceof ObjectType) {\n+        ObjectType objectType = (ObjectType) propertyType;\n+        if (visitedTypes.contains(objectType) || objectType.equals(this)) {\n+          sb.append(ELLIPSIS);\n+        } else {\n+          visitedTypes.add(objectType);\n+          sb.append(objectType.toStringHelper(false));\n+          visitedTypes.remove(objectType);\n         }\n+      } else {\n+        sb.append(propertyType);\n       }\n-\n-      sb.append(\"}\");\n-\n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n     }\n   }\n+  if (visitedTypes.size() > MAX_PROPERTIES_FOR_PRETTY_PRINT) {\n+    sb.append(\", \").append(ELLIPSIS); // Add an ellipsis to indicate omitted properties.\n+  }\n+  return sb.append(\"}\").toString();\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}