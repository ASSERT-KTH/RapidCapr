{
    "patch": "        if (lastArg.isDefaultValue()) {\n          lastArg = lastArg.getFirstChild();\n        }\n        Var var = fnScope.getVar(lastArg.getString());\n        boolean removable = false;\n        if (!referenced.contains(var)) {\n          removable = true;\n          if (callSiteWarnings.isOn()) {\n            if (var.getParentNode().isRest()) {\n              callSiteWarnings.add(Lang.COULD_NOT_REMOVE_REST_PARAMETER);\n            } else {\n              callSiteWarnings.add(Lang.COULD_NOT_REMOVE_PARAMETER);\n            }\n          }\n        } else if (lastArg.getNext() == null) {\n          // Last arg must remain because it maybe referenced in callee\n          break;\n        }\n\n        // Don't remove strongly typed parameter when typechecking is on.\n        JSTypeExpression type = lastArg.getJSType();\n        if (type != null && type.isWellFormed()) {\n          removable = false;\n        }\n\n        if (removable) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..453d9e1e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,32 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        if (lastArg.isDefaultValue()) {\n+          lastArg = lastArg.getFirstChild();\n+        }\n+        Var var = fnScope.getVar(lastArg.getString());\n+        boolean removable = false;\n+        if (!referenced.contains(var)) {\n+          removable = true;\n+          if (callSiteWarnings.isOn()) {\n+            if (var.getParentNode().isRest()) {\n+              callSiteWarnings.add(Lang.COULD_NOT_REMOVE_REST_PARAMETER);\n+            } else {\n+              callSiteWarnings.add(Lang.COULD_NOT_REMOVE_PARAMETER);\n+            }\n+          }\n+        } else if (lastArg.getNext() == null) {\n+          // Last arg must remain because it maybe referenced in callee\n+          break;\n+        }\n+\n+        // Don't remove strongly typed parameter when typechecking is on.\n+        JSTypeExpression type = lastArg.getJSType();\n+        if (type != null && type.isWellFormed()) {\n+          removable = false;\n+        }\n+\n+        if (removable) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}