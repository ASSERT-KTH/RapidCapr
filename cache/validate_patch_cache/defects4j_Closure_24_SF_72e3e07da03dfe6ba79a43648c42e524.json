{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  Set<Node> visitedNodes = new HashSet<>();\n  \n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    int type = n.getType();\n    \n    // Skip already visited nodes\n    if (visitedNodes.contains(n)) {\n      continue;\n    }\n    \n    // Check if the variable declaration is inside a goog.scope block\n    boolean insideGoogScope = NodeUtil.isWithinFunction(n, \"goog.scope\");\n    \n    // The parent node when defined as const or let is actually a destructuring\n    // pattern node and should be skipped\n    Node parent = n.getParent();\n    if (parent != null && (parent.isVar() || parent.isFunction())) {\n      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        aliases.put(name, aliasVar);\n\n        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n        transformation.addAlias(name, qualifiedName);\n      } else if (!insideGoogScope && !v.isBleedingFunction()\n          && !parent.getBooleanProp(Node.IS_NAMESPACE)) {\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      }\n    } else {\n      // Skip processing for complex declarations that use const and let together or when there are multiple declarations inside the same statement.\n      visitedNodes.add(n);\n      while (n != null\n          && (n.isBlock() || n.isScript() || n.getParent() != null\n              && !n.getParent().isExprResult() && !n.getParent().hasChildren())) {\n        n = n.getParent();\n        if (n != null) {\n          visitedNodes.add(n);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..af54ece9 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,51 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  Set<Node> visitedNodes = new HashSet<>();\n+  \n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    int type = n.getType();\n+    \n+    // Skip already visited nodes\n+    if (visitedNodes.contains(n)) {\n+      continue;\n+    }\n+    \n+    // Check if the variable declaration is inside a goog.scope block\n+    boolean insideGoogScope = NodeUtil.isWithinFunction(n, \"goog.scope\");\n+    \n+    // The parent node when defined as const or let is actually a destructuring\n+    // pattern node and should be skipped\n+    Node parent = n.getParent();\n+    if (parent != null && (parent.isVar() || parent.isFunction())) {\n+      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+        String name = n.getString();\n+        Var aliasVar = scope.getVar(name);\n+        aliases.put(name, aliasVar);\n+\n+        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+        transformation.addAlias(name, qualifiedName);\n+      } else if (!insideGoogScope && !v.isBleedingFunction()\n+          && !parent.getBooleanProp(Node.IS_NAMESPACE)) {\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+      }\n+    } else {\n+      // Skip processing for complex declarations that use const and let together or when there are multiple declarations inside the same statement.\n+      visitedNodes.add(n);\n+      while (n != null\n+          && (n.isBlock() || n.isScript() || n.getParent() != null\n+              && !n.getParent().isExprResult() && !n.getParent().hasChildren())) {\n+        n = n.getParent();\n+        if (n != null) {\n+          visitedNodes.add(n);\n         }\n       }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}