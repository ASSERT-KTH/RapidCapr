{
    "patch": "if (n == null) {\n    return false;\n}\n\n// Check if node is a function call, constructor call, or delete operation\nif (NodeUtil.isCallOrNew(n) || n.isDelProp()) {\n    return NodeUtil.mayEffectMutableState(n);\n}\n\n// Recurse on child nodes, checking for non-string property access at the expression result level\nfor (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    if (c.isExprResult() && c.getFirstChild().isGetElem() && !c.getLastChild().isString()) {\n        return true;\n    }\n    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n        return true;\n    }\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..a249360d 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,25 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n == null) {\n+    return false;\n+}\n+\n+// Check if node is a function call, constructor call, or delete operation\n+if (NodeUtil.isCallOrNew(n) || n.isDelProp()) {\n+    return NodeUtil.mayEffectMutableState(n);\n+}\n+\n+// Recurse on child nodes, checking for non-string property access at the expression result level\n+for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+    if (c.isExprResult() && c.getFirstChild().isGetElem() && !c.getLastChild().isString()) {\n+        return true;\n+    }\n+    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+        return true;\n+    }\n+}\n+return false;\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}