{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {\n            objType.defineInferredProperty(prop, propType, null);\n          }\n        }\n      }\n    } else if (constraint.isFunctionType()) {\n      FunctionType functionType = constraint.toMaybeFunctionType();\n      if (type.isFunctionType() && functionType.hasRestFormals()) {\n        FunctionType.Builder builder = FunctionType.builder(constraint.getSource());\n        builder.copyFrom(type.toMaybeFunctionType());\n        builder.clearRestFormals();\n        builder.addFormals(functionType.getFormalTypes());\n        JSType newType = builder.buildAndResolve();\n        typeMismatch(n, type, newType);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..849a3c69 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1123,16 +1123,20 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {\n+            objType.defineInferredProperty(prop, propType, null);\n           }\n         }\n       }\n+    } else if (constraint.isFunctionType()) {\n+      FunctionType functionType = constraint.toMaybeFunctionType();\n+      if (type.isFunctionType() && functionType.hasRestFormals()) {\n+        FunctionType.Builder builder = FunctionType.builder(constraint.getSource());\n+        builder.copyFrom(type.toMaybeFunctionType());\n+        builder.clearRestFormals();\n+        builder.addFormals(functionType.getFormalTypes());\n+        JSType newType = builder.buildAndResolve();\n+        typeMismatch(n, type, newType);\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}