{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(dec.getSquareRoot().getData()[0]);\n    final RealMatrix transposeV = v.transpose();\n    final RealMatrix result = v.multiply(sqrtD).multiply(transposeV);\n    final RealMatrix product = result.multiply(result);\n    final double normDiff = product.subtract(m).getFrobeniusNorm();\n    // Add extra check to handle rounding errors in the square root computation\n    if (normDiff > 1e-2) {\n        throw new IllegalStateException(\"Square root computation failed\");\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..411b54c47 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(dec.getSquareRoot().getData()[0]);\n+    final RealMatrix transposeV = v.transpose();\n+    final RealMatrix result = v.multiply(sqrtD).multiply(transposeV);\n+    final RealMatrix product = result.multiply(result);\n+    final double normDiff = product.subtract(m).getFrobeniusNorm();\n+    // Add extra check to handle rounding errors in the square root computation\n+    if (normDiff > 1e-2) {\n+        throw new IllegalStateException(\"Square root computation failed\");\n     }\n+    return result;\n+}\n }",
    "result_reason": "java.lang.IllegalStateException: Square root computation failed",
    "test_result": "FAIL"
}