{
    "patch": "            SavedField lastField = savedFields[count - 1];\n            DateTimeField field = lastField.iField;\n            long value = field.getDurationField().getType() == DurationFieldType.months() ?\n                    iChrono.months().set(iDefaultYear, lastField.iValue) :\n                    iChrono.days().set(iChrono.weeks().set(iChrono.year().set(iDefaultYear, lastField.iValue), lastField.iValue / 7), lastField.iValue % 7 + 1);\n            saveField(DateTimeFieldType.millisOfSecond(), 0);\n            saveField(field.getType(), (int) value);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e353251a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,13 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            SavedField lastField = savedFields[count - 1];\n+            DateTimeField field = lastField.iField;\n+            long value = field.getDurationField().getType() == DurationFieldType.months() ?\n+                    iChrono.months().set(iDefaultYear, lastField.iValue) :\n+                    iChrono.days().set(iChrono.weeks().set(iChrono.year().set(iDefaultYear, lastField.iValue), lastField.iValue / 7), lastField.iValue % 7 + 1);\n+            saveField(DateTimeFieldType.millisOfSecond(), 0);\n+            saveField(field.getType(), (int) value);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}