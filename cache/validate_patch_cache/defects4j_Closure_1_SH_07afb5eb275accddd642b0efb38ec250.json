{
    "patch": "    Node function = fnScope.getRootNode();\n    boolean isSetter = NodeUtil.isGetOrSetKey(function.getParent());\n    Preconditions.checkState(function.isFunction() || isSetter);\n\n    if (isSetter) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    List<Node> argsToRemove = Lists.newArrayList();\n    Node child = argList.getFirstChild();\n    for (int i = 0, n = argList.getChildCount(); i < n; i++) {\n      Var var = fnScope.getVar(child.getString());\n      if (!referenced.contains(var)) {\n        argsToRemove.add(child);\n      } else if (!argsToRemove.isEmpty()) {\n        compiler.reportCodeChange();\n        for (Node arg : argsToRemove) {\n          argList.removeChild(arg);\n        }\n        argsToRemove.clear();\n      }\n      child = child.getNext();\n    }\n\n    if (!argsToRemove.isEmpty()) {\n      compiler.reportCodeChange();\n      for (Node arg : argsToRemove) {\n        argList.removeChild(arg);\n      }\n      argsToRemove.clear();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e8a80a39 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    boolean isSetter = NodeUtil.isGetOrSetKey(function.getParent());\n+    Preconditions.checkState(function.isFunction() || isSetter);\n+\n+    if (isSetter) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    List<Node> argsToRemove = Lists.newArrayList();\n+    Node child = argList.getFirstChild();\n+    for (int i = 0, n = argList.getChildCount(); i < n; i++) {\n+      Var var = fnScope.getVar(child.getString());\n+      if (!referenced.contains(var)) {\n+        argsToRemove.add(child);\n+      } else if (!argsToRemove.isEmpty()) {\n+        compiler.reportCodeChange();\n+        for (Node arg : argsToRemove) {\n+          argList.removeChild(arg);\n+        }\n+        argsToRemove.clear();\n+      }\n+      child = child.getNext();\n+    }\n+\n+    if (!argsToRemove.isEmpty()) {\n+      compiler.reportCodeChange();\n+      for (Node arg : argsToRemove) {\n+        argList.removeChild(arg);\n+      }\n+      argsToRemove.clear();\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable function is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}