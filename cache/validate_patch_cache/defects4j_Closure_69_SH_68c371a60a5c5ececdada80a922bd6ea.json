{
    "patch": "      if (functionType.getTypeOfThis() != null\n          && !NodeUtil.isGet(functionType.getTypeOfThis().getNode())\n          && !NodeUtil.isGetElem(functionType.getTypeOfThis().getNode())) {\n        report(\n            t,\n            n,\n            MUST_BE_CONSTRUCTED_WITH_NEW,\n            functionType.getTypeOfThis().toString());\n        return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..ffe64d8e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis() != null\n+          && !NodeUtil.isGet(functionType.getTypeOfThis().getNode())\n+          && !NodeUtil.isGetElem(functionType.getTypeOfThis().getNode())) {\n+        report(\n+            t,\n+            n,\n+            MUST_BE_CONSTRUCTED_WITH_NEW,\n+            functionType.getTypeOfThis().toString());\n+        return;\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}