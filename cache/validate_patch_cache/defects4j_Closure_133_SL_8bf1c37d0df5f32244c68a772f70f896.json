{
    "patch": "private String getRemainingJSDocLine() {\n    String result = \"\";\n    String prevResult = null;\n    while ((prevResult == null || stream.hasContents()) && !result.trim().endsWith(\"*/\")) {\n        prevResult = result;\n        result = stream.getRemainingJSDocLine().trim();\n        if (result.startsWith(\"*\") || result.startsWith(\"//\")) {\n            continue;\n        }\n        if (result.contains(\"*/\")) {\n            result = result.substring(result.indexOf(\"*/\") + 2);\n        }\n        WarningDesc warningDesc = JSDocInfoParser.checkTypedef(result, \"\");\n        if (warningDesc != null && warningDesc.getType() == ParseType.JSC_TYPE_PARSE_ERROR) {\n            result = result.substring(result.indexOf(\"T\") + 1);\n        }\n    }\n    if (result == null) {\n        throw new IllegalStateException(\"Recorded bad position information\");\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..100b4e61 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,28 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    String result = \"\";\n+    String prevResult = null;\n+    while ((prevResult == null || stream.hasContents()) && !result.trim().endsWith(\"*/\")) {\n+        prevResult = result;\n+        result = stream.getRemainingJSDocLine().trim();\n+        if (result.startsWith(\"*\") || result.startsWith(\"//\")) {\n+            continue;\n+        }\n+        if (result.contains(\"*/\")) {\n+            result = result.substring(result.indexOf(\"*/\") + 2);\n+        }\n+        WarningDesc warningDesc = JSDocInfoParser.checkTypedef(result, \"\");\n+        if (warningDesc != null && warningDesc.getType() == ParseType.JSC_TYPE_PARSE_ERROR) {\n+            result = result.substring(result.indexOf(\"T\") + 1);\n+        }\n+    }\n+    if (result == null) {\n+        throw new IllegalStateException(\"Recorded bad position information\");\n+    }\n+    return result;\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}