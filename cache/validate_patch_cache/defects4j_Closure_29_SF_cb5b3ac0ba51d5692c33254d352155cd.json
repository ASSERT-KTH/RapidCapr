{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n\n    Map<Node, Boolean> properties = new HashMap<>();\n    Set<Node> definedProperties = new HashSet<>();\n    List<Node> objectLiterals = new ArrayList<>();\n\n    for (Reference ref : refs) {\n      Node name = ref.getNode();\n\n      if (!isVarOrAssignExprLhs(name)) {\n        return false;\n      }\n\n      if (name.getNext() != null && name.getNext().isGetElem()) {\n        // An array access like:\n        // x[0].p or x[y()].p or x[y()][z()].p\n        // TODO: We should probably allow x[y()] if y's return type is known to be an object type.\n        return false;\n      }\n\n      Node val = ref.getAssignedValue();\n      if (val == null) {\n        // A var with no assignment.\n        continue;\n      }\n\n      if (!val.isObjectLit()) {\n        return false;\n      }\n\n      // Collect the properties of this object literal.\n      for (Node prop = val.getFirstChild(); prop != null; prop = prop.getNext()) {\n        if (prop.isGetterDef() || prop.isSetterDef()) {\n          // ES5 get/set not supported\n          return false;\n        }\n        if (prop.isStringKey()) {\n          if (definedProperties.contains(prop)) {\n            // Duplicate keys, huge mess.\n            return false;\n          }\n          definedProperties.add(prop);\n          properties.put(prop.getFirstChild(), false);\n        }\n      }\n      objectLiterals.add(val);\n    }\n\n    // Checks if any of the object literals property contains a self-reference.\n    for (Node val : objectLiterals) {\n      for (Node prop = val.getFirstChild(); prop != null; prop = prop.getNext()) {\n        if (prop.isComputedProp()) {\n          return false;\n        }\n        Node key = prop.getFirstChild();\n        Node value = key.getNext();\n        if (!value.isFunction() && !value.isObjectLit()) {\n          Set<Node> propsDefinedByVal = new HashSet<>();\n          for (Node child = value.getFirstChild(); child != null; child = child.getNext()) {\n            propsDefinedByVal.addAll(getDefinedProperties(child));\n          }\n          for (Node child = value.getFirstChild(); child != null; child = child.getNext()) {\n            for (Node n : child.getAncestors()) {\n              if (n.isBlock() && propsDefinedByVal.contains(n)) {\n                propsDefinedByVal.addAll(getDefinedProperties(child));\n              }\n            }\n          }\n          for (Node child = value.getFirstChild(); child != null; child = child.getNext()) {\n            if ((child.isGetProp() || child.isName() || child.isThis()) && !propsDefinedByVal.contains(child)) {\n              if (!properties.containsKey(child)) {\n                // Bail if the object literal property being referenced isn't defined on\n                // the object literal.\n                return false;\n              }\n              properties.put(child, true);\n            }\n          }\n        }\n      }\n    }\n\n    // Check that all specified properties are defined in the object literal.\n    for (boolean defined : properties.values()) {\n      if (!defined) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private Set<Node> getDefinedProperties(Node n) {\n    Set<Node> defined = new HashSet<>();\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isName() || child.isGetProp() || child.isThis()) {\n        defined.add(child);\n      }\n    }\n    return defined;\n  }\n\n  private boolean isVarOrAssignExprLhs(Node n) {\n    Node parent = n.getParent();\n    if (n.isName()) {\n      return (parent.isVar() || parent.isCatch());\n    } else {\n      return (n.isGetProp() && parent.isAssign());\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..b31c1768 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,116 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+private boolean isInlinableObject(List<Reference> refs) {\n \n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n-        }\n+    Map<Node, Boolean> properties = new HashMap<>();\n+    Set<Node> definedProperties = new HashSet<>();\n+    List<Node> objectLiterals = new ArrayList<>();\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n+    for (Reference ref : refs) {\n+      Node name = ref.getNode();\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n-        }\n+      if (!isVarOrAssignExprLhs(name)) {\n+        return false;\n+      }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n+      if (name.getNext() != null && name.getNext().isGetElem()) {\n+        // An array access like:\n+        // x[0].p or x[y()].p or x[y()][z()].p\n+        // TODO: We should probably allow x[y()] if y's return type is known to be an object type.\n+        return false;\n+      }\n+\n+      Node val = ref.getAssignedValue();\n+      if (val == null) {\n+        // A var with no assignment.\n+        continue;\n+      }\n+\n+      if (!val.isObjectLit()) {\n+        return false;\n+      }\n+\n+      // Collect the properties of this object literal.\n+      for (Node prop = val.getFirstChild(); prop != null; prop = prop.getNext()) {\n+        if (prop.isGetterDef() || prop.isSetterDef()) {\n+          // ES5 get/set not supported\n           return false;\n         }\n-\n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n+        if (prop.isStringKey()) {\n+          if (definedProperties.contains(prop)) {\n+            // Duplicate keys, huge mess.\n             return false;\n           }\n+          definedProperties.add(prop);\n+          properties.put(prop.getFirstChild(), false);\n+        }\n+      }\n+      objectLiterals.add(val);\n+    }\n \n-\n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n+    // Checks if any of the object literals property contains a self-reference.\n+    for (Node val : objectLiterals) {\n+      for (Node prop = val.getFirstChild(); prop != null; prop = prop.getNext()) {\n+        if (prop.isComputedProp()) {\n+          return false;\n+        }\n+        Node key = prop.getFirstChild();\n+        Node value = key.getNext();\n+        if (!value.isFunction() && !value.isObjectLit()) {\n+          Set<Node> propsDefinedByVal = new HashSet<>();\n+          for (Node child = value.getFirstChild(); child != null; child = child.getNext()) {\n+            propsDefinedByVal.addAll(getDefinedProperties(child));\n+          }\n+          for (Node child = value.getFirstChild(); child != null; child = child.getNext()) {\n+            for (Node n : child.getAncestors()) {\n+              if (n.isBlock() && propsDefinedByVal.contains(n)) {\n+                propsDefinedByVal.addAll(getDefinedProperties(child));\n+              }\n+            }\n+          }\n+          for (Node child = value.getFirstChild(); child != null; child = child.getNext()) {\n+            if ((child.isGetProp() || child.isName() || child.isThis()) && !propsDefinedByVal.contains(child)) {\n+              if (!properties.containsKey(child)) {\n+                // Bail if the object literal property being referenced isn't defined on\n+                // the object literal.\n                 return false;\n               }\n-              refNode = refNode.getParent();\n+              properties.put(child, true);\n             }\n           }\n         }\n+      }\n+    }\n \n+    // Check that all specified properties are defined in the object literal.\n+    for (boolean defined : properties.values()) {\n+      if (!defined) {\n+        return false;\n+      }\n+    }\n+\n+    return true;\n+  }\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+  private Set<Node> getDefinedProperties(Node n) {\n+    Set<Node> defined = new HashSet<>();\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+      if (child.isName() || child.isGetProp() || child.isThis()) {\n+        defined.add(child);\n       }\n-      return ret;\n     }\n+    return defined;\n+  }\n+\n+  private boolean isVarOrAssignExprLhs(Node n) {\n+    Node parent = n.getParent();\n+    if (n.isName()) {\n+      return (parent.isVar() || parent.isCatch());\n+    } else {\n+      return (n.isGetProp() && parent.isAssign());\n+    }\n+  }\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}