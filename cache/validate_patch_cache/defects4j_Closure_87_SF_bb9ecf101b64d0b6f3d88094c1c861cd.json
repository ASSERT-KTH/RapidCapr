{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n    return false;\n  }\n\n  Node maybeExpr = n.getFirstChild();\n\n  // Ignore EXPR_RESULT blocks that are child of a FOR, WHILE or DO loop.\n  if (n.getParent() != null && (n.getParent().getType() == Token.FOR ||\n                                n.getParent().getType() == Token.WHILE ||\n                                n.getParent().getType() == Token.DO)) {\n    return false;\n  }\n\n  // Ignore EXPR_RESULT blocks that are return values of event handlers.\n  // IE has a bug where event handlers behave differently when their return value is used\n  // vs. when their return value is in an EXPR_RESULT.\n  // See: http://code.google.com/p/closure-compiler/issues/detail?id=291\n  if (maybeExpr.getType() == Token.EXPR_RESULT && maybeExpr.getFirstChild() != null &&\n      maybeExpr.getFirstChild().getType() == Token.CALL &&\n      maybeExpr.getFirstChild().getFirstChild() != null &&\n      maybeExpr.getFirstChild().getFirstChild().getType() == Token.NAME &&\n      maybeExpr.getFirstChild().getFirstChild().getString().endsWith(\"_\")) {\n    return false;\n  }\n\n  // Traverse the block and check if it only contains expressions and/or VAR statements.\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    int childType = child.getType();\n    if (childType != Token.EXPR_RESULT && childType != Token.VAR &&\n        !NodeUtil.isExpressionNode(child)) {\n      return false;\n    } else if (childType == Token.VAR) {\n      // If the child is a VAR statement, check if it has multiple children.\n      Node nextNode = child.getNext();\n      while (nextNode != null) {\n        if (nextNode.getType() != Token.EMPTY) {\n          return false;\n        }\n        nextNode = nextNode.getNext();\n      }\n    }\n  }\n\n  // This is a foldable block if the block's child is an expression or a VAR statement.\n  return NodeUtil.isExpressionNode(maybeExpr) || maybeExpr.getType() == Token.VAR;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..2520119d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,54 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n+    return false;\n+  }\n+\n+  Node maybeExpr = n.getFirstChild();\n+\n+  // Ignore EXPR_RESULT blocks that are child of a FOR, WHILE or DO loop.\n+  if (n.getParent() != null && (n.getParent().getType() == Token.FOR ||\n+                                n.getParent().getType() == Token.WHILE ||\n+                                n.getParent().getType() == Token.DO)) {\n+    return false;\n+  }\n \n+  // Ignore EXPR_RESULT blocks that are return values of event handlers.\n+  // IE has a bug where event handlers behave differently when their return value is used\n+  // vs. when their return value is in an EXPR_RESULT.\n+  // See: http://code.google.com/p/closure-compiler/issues/detail?id=291\n+  if (maybeExpr.getType() == Token.EXPR_RESULT && maybeExpr.getFirstChild() != null &&\n+      maybeExpr.getFirstChild().getType() == Token.CALL &&\n+      maybeExpr.getFirstChild().getFirstChild() != null &&\n+      maybeExpr.getFirstChild().getFirstChild().getType() == Token.NAME &&\n+      maybeExpr.getFirstChild().getFirstChild().getString().endsWith(\"_\")) {\n     return false;\n   }\n \n+  // Traverse the block and check if it only contains expressions and/or VAR statements.\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    int childType = child.getType();\n+    if (childType != Token.EXPR_RESULT && childType != Token.VAR &&\n+        !NodeUtil.isExpressionNode(child)) {\n+      return false;\n+    } else if (childType == Token.VAR) {\n+      // If the child is a VAR statement, check if it has multiple children.\n+      Node nextNode = child.getNext();\n+      while (nextNode != null) {\n+        if (nextNode.getType() != Token.EMPTY) {\n+          return false;\n+        }\n+        nextNode = nextNode.getNext();\n+      }\n+    }\n+  }\n+\n+  // This is a foldable block if the block's child is an expression or a VAR statement.\n+  return NodeUtil.isExpressionNode(maybeExpr) || maybeExpr.getType() == Token.VAR;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[if(x){if(y)var x}else var z]> but was:<[]>",
    "test_result": "FAIL"
}