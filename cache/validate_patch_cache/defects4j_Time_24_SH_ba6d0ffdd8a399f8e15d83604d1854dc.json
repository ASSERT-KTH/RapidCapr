{
    "patch": "            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                if (e.getDateTimeFieldType() == DateTimeFieldType.year()) {\n                    throw e;\n                }\n                // year was invalid, try parsing with an adjusted year\n                if (e.getDateTimeFieldType() == DateTimeFieldType.dayOfYear() ||\n                        e.getDateTimeFieldType() == DateTimeFieldType.weekOfWeekyear()) {\n                    throw adjustYearForInvalidDate(e, savedFields);\n                }\n                // try parsing again, this time without the year\n                return computeMillis(resetFields, savedFields, count, text);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e7224f7a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,21 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                if (e.getDateTimeFieldType() == DateTimeFieldType.year()) {\n+                    throw e;\n+                }\n+                // year was invalid, try parsing with an adjusted year\n+                if (e.getDateTimeFieldType() == DateTimeFieldType.dayOfYear() ||\n+                        e.getDateTimeFieldType() == DateTimeFieldType.weekOfWeekyear()) {\n+                    throw adjustYearForInvalidDate(e, savedFields);\n+                }\n+                // try parsing again, this time without the year\n+                return computeMillis(resetFields, savedFields, count, text);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}