{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    if (cfgNode != null && cfgNode.hasChildren()) {\n        for (Node child : cfgNode.getChildren()) {\n            if (child.isTry()) {\n                for (Node tryChild : child.getChildren()) {\n                    if (tryChild.isExceptionHandler()) {\n                        return true;\n                    }\n                 }\n             }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..8e645656 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -156,9 +156,20 @@ class MaybeReachingVariableUse extends\n     return output;\n   }\n \n-  private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    if (cfgNode != null && cfgNode.hasChildren()) {\n+        for (Node child : cfgNode.getChildren()) {\n+            if (child.isTry()) {\n+                for (Node tryChild : child.getChildren()) {\n+                    if (tryChild.isExceptionHandler()) {\n+                        return true;\n+                    }\n+                 }\n+             }\n+        }\n+    }\n     return false;\n-  }\n+}\n \n   private void computeMayUse(\n       Node n, Node cfgNode, ReachingUses output, boolean conditional) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}