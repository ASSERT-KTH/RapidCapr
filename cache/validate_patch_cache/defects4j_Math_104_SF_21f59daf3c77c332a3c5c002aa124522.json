{
    "patch": "import org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\n\npublic class Gamma {\n\n    private static final double DEFAULT_EPSILON = 10e-15;\n\n    private Gamma() {}\n\n    public static double regularizedGammaP(double a, double x) {\n        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n    }\n\n    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n        MathUtils.checkPositive(a, \"a\");\n        MathUtils.checkPositive(x, \"x\");\n\n        double ret;\n        if (FastMath.abs(x) <= 1.0 || x <= a) {\n            ret = regularizedGammaPseries(a, x, epsilon, maxIterations);\n        } else {\n            ret = regularizedGammaQcontinuation(a, x, epsilon, maxIterations);\n        }\n        return ret;\n    }\n\n    public static double regularizedGammaPseries(double a, double x, double epsilon, int maxIterations) {\n        double n = 0.0;\n        double an = 1.0 / a;\n        double sum = an;\n        while (FastMath.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n            n += 1.0;\n            an *= (x / (a + n));\n            sum += an;\n        }\n        if (n >= maxIterations) {\n            throw new IllegalArgumentException(\"Maximum number of iterations reached\");\n        } else if (Double.isNaN(sum)) {\n            throw new IllegalArgumentException(\"Sum is NaN\");\n        } else if (Double.isInfinite(sum)) {\n            throw new IllegalArgumentException(\"Sum is infinite\");\n        }\n        return FastMath.exp(-x + (a * FastMath.log(x)) - FastMath.logGamma(a)) * sum;\n    }\n\n    public static double regularizedGammaQcontinuation(double a, double x, double epsilon, int maxIterations) {\n        int i;\n        double b0 = 0.0;\n        double b1 = 1.0 / x;\n        double b2 = (1.0 + a) / x;\n        double a0 = 1.0;\n        double a1 = x;\n        double a2 = 1.0 + (1.0 / x);\n        double fac = b2;\n        for (i = 0; i < maxIterations; i++) {\n            double a3 = ((i + 2.0) * (b1 * a2)) + (a0 * b0);\n            double b3 = ((i + 2.0) * (b1 * b2)) + (b0 * a2);\n            if (FastMath.abs(b3) > Double.MAX_VALUE || FastMath.abs(a3) > Double.MAX_VALUE) {\n                a0 /= Double.MAX_VALUE;\n                a1 /= Double.MAX_VALUE;\n                a2 /= Double.MAX_VALUE;\n                a3 /= Double.MAX_VALUE;\n                b0 /= Double.MAX_VALUE;\n                b1 /= Double.MAX_VALUE;\n                b2 /= Double.MAX_VALUE;\n                b3 /= Double.MAX_VALUE;\n                fac /= Double.MAX_VALUE;\n            }\n            a0 = a1;\n            a1 = a2;\n            a2 = a3;\n            b0 = b1;\n            b1 = b2;\n            b2 = b3;\n            if (FastMath.abs(b3) > 0.0) {\n                a0 *= fac;\n                a1 *= fac;\n                a2 *= fac;\n                b0 *= fac;\n                b1 *= fac;\n                b2 *= fac;\n            }\n            if ((FastMath.abs(b3) + FastMath.abs(b2)) < epsilon) {\n                break;\n            }\n        }\n        if (i >= maxIterations) {\n            throw new IllegalArgumentException(\"Maximum number of iterations reached\");\n        } else if (Double.isNaN(a3) || Double.isNaN(b3)) {\n            throw new IllegalArgumentException(\"a3 or b3 is NaN\");\n        } else if (Double.isInfinite(a3) || Double.isInfinite(b3)) {\n            throw new IllegalArgumentException(\"a3 or b3 is infinite\");\n        }\n        return MathUtils.normalizeExpAndCheck((a3 / b3) * FastMath.exp((-x) + (a * FastMath.log(x)) - FastMath.logGamma(a)));\n    }\n}\n",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..2b91c9346 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,103 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+public class Gamma {\n+\n+    private static final double DEFAULT_EPSILON = 10e-15;\n+\n+    private Gamma() {}\n+\n+    public static double regularizedGammaP(double a, double x) {\n+        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+    }\n+\n+    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+        MathUtils.checkPositive(a, \"a\");\n+        MathUtils.checkPositive(x, \"x\");\n+\n+        double ret;\n+        if (FastMath.abs(x) <= 1.0 || x <= a) {\n+            ret = regularizedGammaPseries(a, x, epsilon, maxIterations);\n+        } else {\n+            ret = regularizedGammaQcontinuation(a, x, epsilon, maxIterations);\n+        }\n+        return ret;\n+    }\n+\n+    public static double regularizedGammaPseries(double a, double x, double epsilon, int maxIterations) {\n+        double n = 0.0;\n+        double an = 1.0 / a;\n+        double sum = an;\n+        while (FastMath.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n+            n += 1.0;\n+            an *= (x / (a + n));\n+            sum += an;\n+        }\n+        if (n >= maxIterations) {\n+            throw new IllegalArgumentException(\"Maximum number of iterations reached\");\n+        } else if (Double.isNaN(sum)) {\n+            throw new IllegalArgumentException(\"Sum is NaN\");\n+        } else if (Double.isInfinite(sum)) {\n+            throw new IllegalArgumentException(\"Sum is infinite\");\n+        }\n+        return FastMath.exp(-x + (a * FastMath.log(x)) - FastMath.logGamma(a)) * sum;\n+    }\n+\n+    public static double regularizedGammaQcontinuation(double a, double x, double epsilon, int maxIterations) {\n+        int i;\n+        double b0 = 0.0;\n+        double b1 = 1.0 / x;\n+        double b2 = (1.0 + a) / x;\n+        double a0 = 1.0;\n+        double a1 = x;\n+        double a2 = 1.0 + (1.0 / x);\n+        double fac = b2;\n+        for (i = 0; i < maxIterations; i++) {\n+            double a3 = ((i + 2.0) * (b1 * a2)) + (a0 * b0);\n+            double b3 = ((i + 2.0) * (b1 * b2)) + (b0 * a2);\n+            if (FastMath.abs(b3) > Double.MAX_VALUE || FastMath.abs(a3) > Double.MAX_VALUE) {\n+                a0 /= Double.MAX_VALUE;\n+                a1 /= Double.MAX_VALUE;\n+                a2 /= Double.MAX_VALUE;\n+                a3 /= Double.MAX_VALUE;\n+                b0 /= Double.MAX_VALUE;\n+                b1 /= Double.MAX_VALUE;\n+                b2 /= Double.MAX_VALUE;\n+                b3 /= Double.MAX_VALUE;\n+                fac /= Double.MAX_VALUE;\n+            }\n+            a0 = a1;\n+            a1 = a2;\n+            a2 = a3;\n+            b0 = b1;\n+            b1 = b2;\n+            b2 = b3;\n+            if (FastMath.abs(b3) > 0.0) {\n+                a0 *= fac;\n+                a1 *= fac;\n+                a2 *= fac;\n+                b0 *= fac;\n+                b1 *= fac;\n+                b2 *= fac;\n+            }\n+            if ((FastMath.abs(b3) + FastMath.abs(b2)) < epsilon) {\n+                break;\n+            }\n+        }\n+        if (i >= maxIterations) {\n+            throw new IllegalArgumentException(\"Maximum number of iterations reached\");\n+        } else if (Double.isNaN(a3) || Double.isNaN(b3)) {\n+            throw new IllegalArgumentException(\"a3 or b3 is NaN\");\n+        } else if (Double.isInfinite(a3) || Double.isInfinite(b3)) {\n+            throw new IllegalArgumentException(\"a3 or b3 is infinite\");\n+        }\n+        return MathUtils.normalizeExpAndCheck((a3 / b3) * FastMath.exp((-x) + (a * FastMath.log(x)) - FastMath.logGamma(a)));\n+    }\n+}\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}