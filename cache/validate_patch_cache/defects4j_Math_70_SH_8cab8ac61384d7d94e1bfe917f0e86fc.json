{
    "patch": "        // Throw an exception if min and max have the same value\n        if (min == max) {\n            return min;\n        }\n\n        // Use initial value as a starting point for the solver if it's within the range\n        if (initial < min || initial > max) {\n            initial = (min + max) / 2.0;\n        }\n\n        // Create a new instance of the solver and set the tolerance and maximum iterations\n        BrentSolver solver = new BrentSolver();\n        solver.setAbsoluteAccuracy(getAbsoluteAccuracy());\n        solver.setMaximalIterationCount(getMaximalIterationCount());\n\n        // Solve the function using the given solver\n        double root = solver.solve(f, min, max, initial);\n\n        // If no root is found, return the initial value\n        if (Double.isNaN(root)) {\n            return initial;\n        }\n\n        return root;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..821109357 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,30 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        // Throw an exception if min and max have the same value\n+        if (min == max) {\n+            return min;\n+        }\n+\n+        // Use initial value as a starting point for the solver if it's within the range\n+        if (initial < min || initial > max) {\n+            initial = (min + max) / 2.0;\n+        }\n+\n+        // Create a new instance of the solver and set the tolerance and maximum iterations\n+        BrentSolver solver = new BrentSolver();\n+        solver.setAbsoluteAccuracy(getAbsoluteAccuracy());\n+        solver.setMaximalIterationCount(getMaximalIterationCount());\n+\n+        // Solve the function using the given solver\n+        double root = solver.solve(f, min, max, initial);\n+\n+        // If no root is found, return the initial value\n+        if (Double.isNaN(root)) {\n+            return initial;\n+        }\n+\n+        return root;\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}