{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int MAX_SIZE = 1000; // Maximum size of matrix to perform square root on\n    final int n = m.getRowDimension();\n    if (n > MAX_SIZE) {\n        // Throw an exception or return null if the matrix is too large to handle\n        throw new IllegalArgumentException(\"Matrix size exceeds maximum allowable size for square root operation.\");\n    }\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    return dec.getSquareRoot();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d859546c8 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int MAX_SIZE = 1000; // Maximum size of matrix to perform square root on\n+    final int n = m.getRowDimension();\n+    if (n > MAX_SIZE) {\n+        // Throw an exception or return null if the matrix is too large to handle\n+        throw new IllegalArgumentException(\"Matrix size exceeds maximum allowable size for square root operation.\");\n     }\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    return dec.getSquareRoot();\n+}\n }",
    "result_reason": "java.lang.IllegalArgumentException: Matrix size exceeds maximum allowable size for square root operation.",
    "test_result": "FAIL"
}