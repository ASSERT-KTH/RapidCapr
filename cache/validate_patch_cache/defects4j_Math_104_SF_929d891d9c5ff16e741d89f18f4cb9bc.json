{
    "patch": "public static double regularizedGamma(double a, double x){\n        if(x < 0 || a <= 0){\n            throw new IllegalArgumentException(\"Invalid argument for the function\");\n        }\n \n        double gamma = Gamma.gamma(a, x);\n \n        double sum = 0;\n        double term = 1 / a;\n        double n = 1;\n \n        while(term != 0){\n            term = term * x / (a + n);\n            sum += term;\n            n++;\n        }\n \n        return sum + Math.pow(Math.E, -x) * gamma;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..1ef841cfd 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,25 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x){\n+        if(x < 0 || a <= 0){\n+            throw new IllegalArgumentException(\"Invalid argument for the function\");\n+        }\n+ \n+        double gamma = Gamma.gamma(a, x);\n+ \n+        double sum = 0;\n+        double term = 1 / a;\n+        double n = 1;\n+ \n+        while(term != 0){\n+            term = term * x / (a + n);\n+            sum += term;\n+            n++;\n+        }\n+ \n+        return sum + Math.pow(Math.E, -x) * gamma;\n+    }\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}