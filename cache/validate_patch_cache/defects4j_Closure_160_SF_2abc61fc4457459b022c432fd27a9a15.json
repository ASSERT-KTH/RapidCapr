{
    "patch": "public void initOptions(CompilerOptions options) {\n    this.options = options;\n\n    if (errorManager == null) {\n        if (outStream == null) {\n            setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n        } else {\n            PrintStreamErrorManager printer =\n                new PrintStreamErrorManager(createMessageFormatter(), outStream);\n            printer.setSummaryDetailLevel(options.summaryDetailLevel);\n            setErrorManager(printer);\n        }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes = false;\n    } else if (!options.checkTypes) {\n        // If DiagnosticGroups did not override the plain checkTypes\n        // option, and checkTypes is enabled, then turn off the\n        // parser type warnings.\n        options.setWarningLevel(\n            DiagnosticGroup.forType(\n                RhinoErrorReporter.TYPE_PARSE_ERROR),\n            CheckLevel.OFF);\n    }\n\n    // Determine whether to check variable symbols.\n    boolean checkSymbols = options.checkSymbols;\n    if (options.shouldVariableNamesBeRenamed()) {\n        checkSymbols = true;\n    }\n\n    // Set warning level for missing properties based on checkSymbols option.\n    if (checkSymbols) {\n        options.setWarningLevel(\n            DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    } else {\n        options.setWarningLevel(\n            DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.OFF);\n    }\n\n    // DiagnosticGroups override the plain checkCaja option.\n    if (options.enables(DiagnosticGroups.CHECK_CAJA)) {\n        options.checkCaja = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_CAJA)) {\n        options.checkCaja = false;\n    }\n\n    if (options.checkGlobalThisLevel.isOn()) {\n        options.setWarningLevel(\n            DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n    }\n\n    if (options.checkSuspiciousCode || options.checkControlStructures) {\n        // Make sure that the warning level is set, even if the pass is not run.\n        options.setWarningLevel(\n            DiagnosticGroups.SUSPICIOUS_CODE, CheckLevel.WARNING);\n    }\n\n    // Experimental warnings.\n    if (options.enables(DiagnosticGroups.EXPERIMENTAL)) {\n        options.setWarningLevel(\n            DiagnosticGroups.EXPERIMENTAL, CheckLevel.WARNING);\n    } else if (options.disables(DiagnosticGroups.EXPERIMENTAL)) {\n        options.setWarningLevel(\n            DiagnosticGroups.EXPERIMENTAL, CheckLevel.OFF);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    // Add a DiagnosticGroupWarningsGuard for CHECK_VARIABLES if checkSymbols is not set.\n    if (!checkSymbols) {\n        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 11850211..63f5edd7 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -223,63 +223,89 @@ public class Compiler extends AbstractCompiler {\n    * Initialize the compiler options. Only necessary if you're not doing\n    * a normal compile() job.\n    */\n-  public void initOptions(CompilerOptions options) {\n+public void initOptions(CompilerOptions options) {\n     this.options = options;\n+\n     if (errorManager == null) {\n-      if (outStream == null) {\n-        setErrorManager(\n-            new LoggerErrorManager(createMessageFormatter(), logger));\n-      } else {\n-        PrintStreamErrorManager printer =\n-            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n-        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n-        setErrorManager(printer);\n-      }\n+        if (outStream == null) {\n+            setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n+        } else {\n+            PrintStreamErrorManager printer =\n+                new PrintStreamErrorManager(createMessageFormatter(), outStream);\n+            printer.setSummaryDetailLevel(options.summaryDetailLevel);\n+            setErrorManager(printer);\n+        }\n     }\n \n     // DiagnosticGroups override the plain checkTypes option.\n     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n-      options.checkTypes = true;\n+        options.checkTypes = true;\n     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n-      options.checkTypes = false;\n+        options.checkTypes = false;\n     } else if (!options.checkTypes) {\n-      // If DiagnosticGroups did not override the plain checkTypes\n-      // option, and checkTypes is enabled, then turn off the\n-      // parser type warnings.\n-      options.setWarningLevel(\n-          DiagnosticGroup.forType(\n-              RhinoErrorReporter.TYPE_PARSE_ERROR),\n-          CheckLevel.OFF);\n+        // If DiagnosticGroups did not override the plain checkTypes\n+        // option, and checkTypes is enabled, then turn off the\n+        // parser type warnings.\n+        options.setWarningLevel(\n+            DiagnosticGroup.forType(\n+                RhinoErrorReporter.TYPE_PARSE_ERROR),\n+            CheckLevel.OFF);\n+    }\n+\n+    // Determine whether to check variable symbols.\n+    boolean checkSymbols = options.checkSymbols;\n+    if (options.shouldVariableNamesBeRenamed()) {\n+        checkSymbols = true;\n+    }\n+\n+    // Set warning level for missing properties based on checkSymbols option.\n+    if (checkSymbols) {\n+        options.setWarningLevel(\n+            DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n+    } else {\n+        options.setWarningLevel(\n+            DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.OFF);\n+    }\n+\n+    // DiagnosticGroups override the plain checkCaja option.\n+    if (options.enables(DiagnosticGroups.CHECK_CAJA)) {\n+        options.checkCaja = true;\n+    } else if (options.disables(DiagnosticGroups.CHECK_CAJA)) {\n+        options.checkCaja = false;\n     }\n \n     if (options.checkGlobalThisLevel.isOn()) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.GLOBAL_THIS,\n-          options.checkGlobalThisLevel);\n+        options.setWarningLevel(\n+            DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n+    }\n+\n+    if (options.checkSuspiciousCode || options.checkControlStructures) {\n+        // Make sure that the warning level is set, even if the pass is not run.\n+        options.setWarningLevel(\n+            DiagnosticGroups.SUSPICIOUS_CODE, CheckLevel.WARNING);\n+    }\n+\n+    // Experimental warnings.\n+    if (options.enables(DiagnosticGroups.EXPERIMENTAL)) {\n+        options.setWarningLevel(\n+            DiagnosticGroups.EXPERIMENTAL, CheckLevel.WARNING);\n+    } else if (options.disables(DiagnosticGroups.EXPERIMENTAL)) {\n+        options.setWarningLevel(\n+            DiagnosticGroups.EXPERIMENTAL, CheckLevel.OFF);\n     }\n \n     // Initialize the warnings guard.\n     List<WarningsGuard> guards = Lists.newArrayList();\n-    guards.add(\n-        new SuppressDocWarningsGuard(\n-            getDiagnosticGroups().getRegisteredGroups()));\n+    guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n     guards.add(options.getWarningsGuard());\n \n-\n-    // All passes must run the variable check. This synthesizes\n-    // variables later so that the compiler doesn't crash. It also\n-    // checks the externs file for validity. If you don't want to warn\n-    // about missing variable declarations, we shut that specific\n-    // error off.\n-    if (!options.checkSymbols &&\n-        (warningsGuard == null || !warningsGuard.disables(\n-            DiagnosticGroups.CHECK_VARIABLES))) {\n-      guards.add(new DiagnosticGroupWarningsGuard(\n-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n+    // Add a DiagnosticGroupWarningsGuard for CHECK_VARIABLES if checkSymbols is not set.\n+    if (!checkSymbols) {\n+        guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n     }\n \n     this.warningsGuard = new ComposeWarningsGuard(guards);\n-  }\n+}\n \n   /**\n    * Initializes the instance state needed for a compile job.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}