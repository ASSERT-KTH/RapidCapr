{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double epsilon = 1e-15;\n    double maxIterations = Double.MAX_VALUE;\n    double g = new Gamma(a).value(x);\n    double ig = new RegularizedGamma.P(a, x).value(g);\n    double previousIg;\n    int iter = 0;\n    do {\n        if (++iter > maxIterations) {\n            throw new RuntimeException(\"Maximum number of iterations exceeded\");\n        }\n        previousIg = ig;\n        g = g + epsilon;\n        ig = new RegularizedGamma.P(a, x).value(g);\n    } while (ig > previousIg);\n    return g;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..da9d0d339 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,23 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double epsilon = 1e-15;\n+    double maxIterations = Double.MAX_VALUE;\n+    double g = new Gamma(a).value(x);\n+    double ig = new RegularizedGamma.P(a, x).value(g);\n+    double previousIg;\n+    int iter = 0;\n+    do {\n+        if (++iter > maxIterations) {\n+            throw new RuntimeException(\"Maximum number of iterations exceeded\");\n+        }\n+        previousIg = ig;\n+        g = g + epsilon;\n+        ig = new RegularizedGamma.P(a, x).value(g);\n+    } while (ig > previousIg);\n+    return g;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}