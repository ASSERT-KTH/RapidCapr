{
    "patch": "if (block.isFunction) {\n  // Functions share a block with their declaration, which can be an\n  // assignment. To avoid thinking that the variable is assigned in these\n  // cases, skip this block and continue checking the parent block, unless\n  // this block ends with a return statement.\n  if (!block.getExit().endsWithReturn()) {\n    continue;\n  }\n  break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..810f36ae 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (block.isFunction) {\n+  // Functions share a block with their declaration, which can be an\n+  // assignment. To avoid thinking that the variable is assigned in these\n+  // cases, skip this block and continue checking the parent block, unless\n+  // this block ends with a return statement.\n+  if (!block.getExit().endsWithReturn()) {\n+    continue;\n+  }\n+  break;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}