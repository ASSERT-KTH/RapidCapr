{
    "patch": "        if (n.isBlock() || n.isFunction()) {\n          Scope hoistScope = null;\n          if (n.isFunction()) {\n            hoistScope = n.getEnclosingScope();\n          } else {\n            hoistScope = scope;\n          }\n          ControlFlowGraph<Node> cfg = ControlFlowGraph.buildTyped(hoistScope.getRootNode(), hoistScope);\n          for (CfgNode<Node> cfgNode : cfg.getNodes()) {\n            if (cfgNode.getJSError() != null) {\n              return true;\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..428da316 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,20 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        if (n.isBlock() || n.isFunction()) {\n+          Scope hoistScope = null;\n+          if (n.isFunction()) {\n+            hoistScope = n.getEnclosingScope();\n+          } else {\n+            hoistScope = scope;\n+          }\n+          ControlFlowGraph<Node> cfg = ControlFlowGraph.buildTyped(hoistScope.getRootNode(), hoistScope);\n+          for (CfgNode<Node> cfgNode : cfg.getNodes()) {\n+            if (cfgNode.getJSError() != null) {\n+              return true;\n+            }\n+          }\n+        }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}