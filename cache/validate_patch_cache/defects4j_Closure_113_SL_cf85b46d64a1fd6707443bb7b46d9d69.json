{
    "patch": ">>> [ INFILL ] <<<\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else if (moduleGraph != null &&\n            module != provided.explicitModule &&\n            !moduleGraph.dependsOn(module, provided.explicitModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  provided.explicitModule.getName(),\n                  module.getName()));\n      }\n      parent.detachFromParent();\n      compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..0097507f 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,20 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+>>> [ INFILL ] <<<\n+      if (provided == null || !provided.isExplicitlyProvided()) {\n+        unrecognizedRequires.add(\n+            new UnrecognizedRequire(n, ns, t.getSourceName()));\n+      } else if (moduleGraph != null &&\n+            module != provided.explicitModule &&\n+            !moduleGraph.dependsOn(module, provided.explicitModule)) {\n+        compiler.report(\n+            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                  provided.explicitModule.getName(),\n+                  module.getName()));\n+      }\n+      parent.detachFromParent();\n+      compiler.reportCodeChange();\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}