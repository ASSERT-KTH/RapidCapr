{
    "patch": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        if (!n.isName()) {\n          continue;\n        }\n        String name = n.getString();\n        Node parent = n.getParent();\n        if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n          Var aliasVar = scope.getVar(name);\n          aliases.put(name, aliasVar);\n\n          String qualifiedName =\n              aliasVar.getInitialValue().getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n          // Bleeding functions already get a BAD_PARAMETERS error, so just\n          // do nothing.\n          // Parameters of the scope function also get a BAD_PARAMETERS\n          // error.\n        } else {\n          // TODO(robbyw): Support using locals for private variables.\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..abe8552f 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -273,11 +273,12 @@ class ScopedAliases implements HotSwapCompilerPass {\n       Scope scope = t.getScope();\n       for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n+        if (!n.isName()) {\n+          continue;\n+        }\n+        String name = n.getString();\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n+        if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n           Var aliasVar = scope.getVar(name);\n           aliases.put(name, aliasVar);\n \n@@ -292,7 +293,6 @@ class ScopedAliases implements HotSwapCompilerPass {\n           // TODO(robbyw): Support using locals for private variables.\n           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n-        }\n       }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. The call to goog.scope must take only a single parameter. It must be an anonymous function that itself takes no parameters.",
    "test_result": "FAIL"
}