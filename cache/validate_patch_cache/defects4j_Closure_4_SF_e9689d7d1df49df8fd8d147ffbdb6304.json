{
    "patch": "    boolean resolvedViaProperties = false;\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    if (!resolved && resolveViaProperties(t, enclosing)) {\n      resolved = true;\n      resolvedViaProperties = true;\n      // Handle property-based resolution side effects, like object literals\n      // or object types in general.\n      finishPropertyContinuations();\n      if (isTopLevel()) {\n        // Finish scoped name resolutions after finishing the property\n        // continuation because there could be a nested property that creates\n        // a sub scope. An example of this is:\n        // {/** @constructor */ function A() {}}\n        fullyQualifiedName = registry.getSymbolTable().getQname(getName());\n      }\n    }\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    super.resolveInternal(t, enclosing);\n    if (resolvedViaProperties) {\n      finishNestedScopes();\n    }\n    return registry.isLastGeneration() ? getReferencedType() : this;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..b46b7b19 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,32 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+    boolean resolvedViaProperties = false;\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n+    if (!resolved && resolveViaProperties(t, enclosing)) {\n+      resolved = true;\n+      resolvedViaProperties = true;\n+      // Handle property-based resolution side effects, like object literals\n+      // or object types in general.\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      if (isTopLevel()) {\n+        // Finish scoped name resolutions after finishing the property\n+        // continuation because there could be a nested property that creates\n+        // a sub scope. An example of this is:\n+        // {/** @constructor */ function A() {}}\n+        fullyQualifiedName = registry.getSymbolTable().getQname(getName());\n+      }\n     }\n-\n-    resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+    if (resolvedViaProperties) {\n+      finishNestedScopes();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}