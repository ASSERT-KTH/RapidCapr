{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    } else if (size == 1) {\n        Object elem = elementPairs.get(0);\n        if (elem instanceof PeriodPrinter && !notPrinter) {\n            return new PeriodFormatter((PeriodPrinter) elem, null);\n        } else if (elem instanceof PeriodParser && !notParser) {\n            return new PeriodFormatter(null, (PeriodParser) elem);\n        } else if (elem instanceof Separator) {\n            Separator sep = (Separator) elem;\n            PeriodFormatter f = toFormatter(Collections.emptyList(), notPrinter, notParser);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            return new PeriodFormatter(sep, sep);\n        } else {\n            throw new IllegalStateException(\"Invalid element: \" + elem.getClass().getSimpleName());\n        }\n    } else {\n        for (int i = 0; i < size; i++) {\n            Object elem = elementPairs.get(i);\n            if (elem instanceof Separator) {\n                Separator sep = (Separator) elem;\n                List<Object> leftPairs = elementPairs.subList(0, i);\n                List<Object> rightPairs = elementPairs.subList(i+1, size);\n                PeriodFormatter leftFormatter = toFormatter(leftPairs, notPrinter, notParser);\n                PeriodFormatter rightFormatter = toFormatter(rightPairs, notPrinter, notParser);\n                if (notPrinter) {\n                    PeriodParser parser = rightFormatter.getParser() == null ? null : sep.finish(null, rightFormatter.getParser());\n                    return new PeriodFormatter(null, parser);\n                } else if (notParser) {\n                    PeriodPrinter printer = leftFormatter.getPrinter() == null ? null : sep.finish(leftFormatter.getPrinter(), null);\n                    return new PeriodFormatter(printer, null);\n                } else {\n                    PeriodPrinter printer = leftFormatter.getPrinter() == null ? null : sep.finish(leftFormatter.getPrinter(), rightFormatter.getPrinter());\n                    PeriodParser parser = rightFormatter.getParser() == null ? null : sep.finish(leftFormatter.getPrinter(), rightFormatter.getParser());\n                    return new PeriodFormatter(printer, parser);\n                }\n            }\n        }\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..7d5c4257 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,16 +791,48 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    } else if (size == 1) {\n+        Object elem = elementPairs.get(0);\n+        if (elem instanceof PeriodPrinter && !notPrinter) {\n+            return new PeriodFormatter((PeriodPrinter) elem, null);\n+        } else if (elem instanceof PeriodParser && !notParser) {\n+            return new PeriodFormatter(null, (PeriodParser) elem);\n+        } else if (elem instanceof Separator) {\n+            Separator sep = (Separator) elem;\n+            PeriodFormatter f = toFormatter(Collections.emptyList(), notPrinter, notParser);\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+            return new PeriodFormatter(sep, sep);\n+        } else {\n+            throw new IllegalStateException(\"Invalid element: \" + elem.getClass().getSimpleName());\n+        }\n+    } else {\n+        for (int i = 0; i < size; i++) {\n+            Object elem = elementPairs.get(i);\n+            if (elem instanceof Separator) {\n+                Separator sep = (Separator) elem;\n+                List<Object> leftPairs = elementPairs.subList(0, i);\n+                List<Object> rightPairs = elementPairs.subList(i+1, size);\n+                PeriodFormatter leftFormatter = toFormatter(leftPairs, notPrinter, notParser);\n+                PeriodFormatter rightFormatter = toFormatter(rightPairs, notPrinter, notParser);\n+                if (notPrinter) {\n+                    PeriodParser parser = rightFormatter.getParser() == null ? null : sep.finish(null, rightFormatter.getParser());\n+                    return new PeriodFormatter(null, parser);\n+                } else if (notParser) {\n+                    PeriodPrinter printer = leftFormatter.getPrinter() == null ? null : sep.finish(leftFormatter.getPrinter(), null);\n+                    return new PeriodFormatter(printer, null);\n+                } else {\n+                    PeriodPrinter printer = leftFormatter.getPrinter() == null ? null : sep.finish(leftFormatter.getPrinter(), rightFormatter.getPrinter());\n+                    PeriodParser parser = rightFormatter.getParser() == null ? null : sep.finish(leftFormatter.getPrinter(), rightFormatter.getParser());\n+                    return new PeriodFormatter(printer, parser);\n+                }\n+            }\n         }\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n@@ -811,6 +843,7 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: method finish in class Separator cannot be applied to given types;",
    "test_result": "ERROR"
}