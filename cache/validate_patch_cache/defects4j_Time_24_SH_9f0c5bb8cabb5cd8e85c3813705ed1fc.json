{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n\n    // remove illegal fields and try again\n    int validCount = count;\n    for (int i = 0; i < count; i++) {\n        try {\n            millis = savedFields[i].set(millis, resetFields);\n        } catch (IllegalFieldValueException ex) {\n            // remove the invalid field\n            System.arraycopy(savedFields, i + 1, savedFields, i, --validCount - i);\n            i--;\n        }\n    }\n\n    if (validCount < 1) {\n        throw e;\n    } else if (validCount != count) {\n        // if we removed illegal fields, trim the array\n        SavedField[] trimmedFields = new SavedField[validCount];\n        System.arraycopy(savedFields, 0, trimmedFields, 0, validCount);\n        savedFields = trimmedFields;\n    }\n\n    count = validCount;\n}\n\nif (count > 0) {\n    DurationField months = DurationFieldType.months().getField(iChrono);\n    DurationField days = DurationFieldType.days().getField(iChrono);\n    DurationField first = savedFields[0].iField.getDurationField();\n    if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n        saveField(DateTimeFieldType.year(), iDefaultYear);\n        return computeMillis(resetFields, text);\n    }\n\n    sort(savedFields, count);\n} ",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..8d70f25a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,50 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+\n+    // remove illegal fields and try again\n+    int validCount = count;\n+    for (int i = 0; i < count; i++) {\n+        try {\n+            millis = savedFields[i].set(millis, resetFields);\n+        } catch (IllegalFieldValueException ex) {\n+            // remove the invalid field\n+            System.arraycopy(savedFields, i + 1, savedFields, i, --validCount - i);\n+            i--;\n+        }\n+    }\n+\n+    if (validCount < 1) {\n+        throw e;\n+    } else if (validCount != count) {\n+        // if we removed illegal fields, trim the array\n+        SavedField[] trimmedFields = new SavedField[validCount];\n+        System.arraycopy(savedFields, 0, trimmedFields, 0, validCount);\n+        savedFields = trimmedFields;\n+    }\n+\n+    count = validCount;\n+}\n+\n+if (count > 0) {\n+    DurationField months = DurationFieldType.months().getField(iChrono);\n+    DurationField days = DurationFieldType.days().getField(iChrono);\n+    DurationField first = savedFields[0].iField.getDurationField();\n+    if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+        saveField(DateTimeFieldType.year(), iDefaultYear);\n+        return computeMillis(resetFields, text);\n+    }\n+\n+    sort(savedFields, count);\n+} \n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}