{
    "patch": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  if (name == null) {\n    name = new Name();\n    name.setIdentifier(\"\");\n  }\n  Node node = newNode(Token.FUNCTION, transform(name));\n  Node lp = newNode(Token.LP);\n  lp.setLineno(functionNode.getLineno());\n  lp.setCharno(position2charno(functionNode.getAbsolutePosition() + functionNode.getLp()));\n  for (int i = 0; i < functionNode.getParamCount(); i++) {\n    AstNode param = functionNode.getParam(i);\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n  return node;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..4e16738e 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,27 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+@Override\n+Node processFunctionNode(FunctionNode functionNode) {\n+  Name name = functionNode.getFunctionName();\n+  if (name == null) {\n+    name = new Name();\n+    name.setIdentifier(\"\");\n+  }\n+  Node node = newNode(Token.FUNCTION, transform(name));\n+  Node lp = newNode(Token.LP);\n+  lp.setLineno(functionNode.getLineno());\n+  lp.setCharno(position2charno(functionNode.getAbsolutePosition() + functionNode.getLp()));\n+  for (int i = 0; i < functionNode.getParamCount(); i++) {\n+    AstNode param = functionNode.getParam(i);\n+    lp.addChildToBack(transform(param));\n+  }\n+  node.addChildToBack(lp);\n+  Node bodyNode = transform(functionNode.getBody());\n+  parseDirectives(bodyNode);\n+  node.addChildToBack(bodyNode);\n+  return node;\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}