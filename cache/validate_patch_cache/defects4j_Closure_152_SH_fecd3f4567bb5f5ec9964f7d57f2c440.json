{
    "patch": "    JSType originalTypeOfThis = typeOfThis;\n    typeOfThis = safeResolve(typeOfThis, t, scope);\n    if (!(typeOfThis instanceof ObjectType || typeOfThis instanceof AllType)) {\n      t.report(JSError.make(this.getSourceFileName(), this.getLineno(),\n          FUNCTION_LITERAL_WITH_NON_OBJECT_PROTO,\n          typeOfThis.toString()));\n      typeOfThis = originalTypeOfThis;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..b7002c21 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,14 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    JSType originalTypeOfThis = typeOfThis;\n+    typeOfThis = safeResolve(typeOfThis, t, scope);\n+    if (!(typeOfThis instanceof ObjectType || typeOfThis instanceof AllType)) {\n+      t.report(JSError.make(this.getSourceFileName(), this.getLineno(),\n+          FUNCTION_LITERAL_WITH_NON_OBJECT_PROTO,\n+          typeOfThis.toString()));\n+      typeOfThis = originalTypeOfThis;\n+    }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}