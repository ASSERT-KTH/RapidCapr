{
    "patch": "char[] charArray = val.toCharArray();\n        boolean hasDecPoint = false;\n        boolean hasExpPoint = false;\n\n        // handle sign\n        int i = 0;\n        int len = charArray.length;\n        int sign = 1;\n        if (charArray[0] == '-') {\n            sign = -1;\n            i++;\n        } else if (charArray[0] == '+') {\n            i++;\n        }\n\n        // handle decimal & exponent\n        StringBuilder mantBuilder = new StringBuilder();\n        StringBuilder expBuilder = null;\n\n        for (; i < len; i++) {\n            char c = charArray[i];\n\n            if (Character.isDigit(c)) {\n                mantBuilder.append(c);\n                if (hasExpPoint) {\n                    expBuilder.append(c);\n                }\n            } else if (c == '.') {\n                if (hasDecPoint || hasExpPoint) {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                mantBuilder.append(c);\n                hasDecPoint = true;\n            } else if (c == 'e' || c == 'E') {\n                if (hasExpPoint) {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                expBuilder = new StringBuilder();\n                mantBuilder.append(c);\n                hasExpPoint = true;\n            } else if (c == '-' || c == '+') {\n                if (!(expBuilder.length() > 0 && expBuilder.charAt(expBuilder.length() - 1) == 'E')) {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                expBuilder.append(c);\n            } else {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n        }\n\n        if (mantBuilder.length() == 0 || (!Character.isDigit(mantBuilder.charAt(0))\n                && !(hasDecPoint && mantBuilder.length() > 1))) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n\n        // handle mantissa and exponent\n        BigInteger mant;\n        int exponent = 0;\n        if (hasExpPoint) {\n            mant = new BigInteger(mantBuilder.toString());\n            exponent = Integer.parseInt(expBuilder.toString());\n        } else {\n            mant = new BigDecimal(mantBuilder.toString()).toBigInteger();\n        }\n\n        BigInteger valBI = mant.multiply(BigInteger.valueOf(sign));\n        if (exponent != 0) {\n            valBI = valBI.multiply(BigInteger.valueOf(10).pow(exponent));\n        }\n\n        // handle int, long, float, double, or big decimal return value\n        String s = valBI.toString();\n        if (s.length() <= 9) {\n            return Integer.parseInt(s);\n        } else if (s.length() <= 18) {\n            return Long.parseLong(s);\n        } else if (hasDecPoint || hasExpPoint) {\n            return Double.parseDouble(val);\n        } else {\n            return new BigDecimal(valBI);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..4c6b4827 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,86 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+char[] charArray = val.toCharArray();\n+        boolean hasDecPoint = false;\n+        boolean hasExpPoint = false;\n+\n+        // handle sign\n+        int i = 0;\n+        int len = charArray.length;\n+        int sign = 1;\n+        if (charArray[0] == '-') {\n+            sign = -1;\n+            i++;\n+        } else if (charArray[0] == '+') {\n+            i++;\n+        }\n+\n+        // handle decimal & exponent\n+        StringBuilder mantBuilder = new StringBuilder();\n+        StringBuilder expBuilder = null;\n+\n+        for (; i < len; i++) {\n+            char c = charArray[i];\n+\n+            if (Character.isDigit(c)) {\n+                mantBuilder.append(c);\n+                if (hasExpPoint) {\n+                    expBuilder.append(c);\n+                }\n+            } else if (c == '.') {\n+                if (hasDecPoint || hasExpPoint) {\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                }\n+                mantBuilder.append(c);\n+                hasDecPoint = true;\n+            } else if (c == 'e' || c == 'E') {\n+                if (hasExpPoint) {\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                }\n+                expBuilder = new StringBuilder();\n+                mantBuilder.append(c);\n+                hasExpPoint = true;\n+            } else if (c == '-' || c == '+') {\n+                if (!(expBuilder.length() > 0 && expBuilder.charAt(expBuilder.length() - 1) == 'E')) {\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                }\n+                expBuilder.append(c);\n+            } else {\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n+            }\n+        }\n+\n+        if (mantBuilder.length() == 0 || (!Character.isDigit(mantBuilder.charAt(0))\n+                && !(hasDecPoint && mantBuilder.length() > 1))) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n+\n+        // handle mantissa and exponent\n+        BigInteger mant;\n+        int exponent = 0;\n+        if (hasExpPoint) {\n+            mant = new BigInteger(mantBuilder.toString());\n+            exponent = Integer.parseInt(expBuilder.toString());\n+        } else {\n+            mant = new BigDecimal(mantBuilder.toString()).toBigInteger();\n+        }\n+\n+        BigInteger valBI = mant.multiply(BigInteger.valueOf(sign));\n+        if (exponent != 0) {\n+            valBI = valBI.multiply(BigInteger.valueOf(10).pow(exponent));\n+        }\n+\n+        // handle int, long, float, double, or big decimal return value\n+        String s = valBI.toString();\n+        if (s.length() <= 9) {\n+            return Integer.parseInt(s);\n+        } else if (s.length() <= 18) {\n+            return Long.parseLong(s);\n+        } else if (hasDecPoint || hasExpPoint) {\n+            return Double.parseDouble(val);\n+        } else {\n+            return new BigDecimal(valBI);\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}