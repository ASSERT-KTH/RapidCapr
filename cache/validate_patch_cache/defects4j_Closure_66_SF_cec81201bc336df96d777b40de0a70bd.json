{
    "patch": "public static double getTypedPercent(String[][] data) {\n    double total = data.length * data[0].length;\n    double typed = 0.0;\n    for (int row = 0; row < data.length; row++) {\n        for (int col = 0; col < data[0].length; col++) {\n            if (data[row][col] != null && !data[row][col].isEmpty()) {\n                typed++;\n            }\n        }\n    }\n    return (typed / total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..8e0ae97e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String[][] data) {\n+    double total = data.length * data[0].length;\n+    double typed = 0.0;\n+    for (int row = 0; row < data.length; row++) {\n+        for (int col = 0; col < data[0].length; col++) {\n+            if (data[row][col] != null && !data[row][col].isEmpty()) {\n+                typed++;\n+            }\n+        }\n+    }\n+    return (typed / total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}