{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    boolean inCharClass = false;\n    boolean charClassRange = false;\n    char lastChar = '\\0';\n    if (value == null)\n        return regex;\n\n    int length = value.length();\n    for (int i = 0; i < length; ++i) {\n        char c = value.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n        wasWhite = false;\n        switch (c) {\n            case '\\'':\n                if (unquote) {\n                    if (++i == value.length()) {\n                        return regex;\n                    }\n                    c = value.charAt(i);\n                    if (value.charAt(i - 2) != '\\'') {\n                        // quotes not paired\n                        return null;\n                    }\n                }\n                break;\n            case '[':\n                if (!inCharClass) {\n                    regex.append(c);\n                    inCharClass = true;\n                    charClassRange = false;\n                    continue;\n                }\n                break;\n            case ']':\n                if (inCharClass && !charClassRange) {\n                    regex.append(c);\n                    inCharClass = false;\n                    continue;\n                }\n                break;\n            case '\\\\':\n                if (inCharClass) {\n                    charClassRange = !charClassRange;\n                    regex.append(c);\n                    continue;\n                }\n                regex.append(c);\n                if (++i < length) {\n                    regex.append(value.charAt(i));\n                }\n                continue;\n            case '?':\n            case '+':\n            case '*':\n                if (!inCharClass) {\n                    if (lastChar == ')' || lastChar == '\\\\') {\n                        regex.append(c);\n                    } else {\n                        regex.append(\"(?:\").append(lastChar).append(c == '*' ? \"*\" : \"+\").append(\")?\");\n                    }\n                    lastChar = '\\0';\n                    continue;\n                }\n                break;\n        }\n        if (inCharClass) {\n            if (c == '-' && !charClassRange) {\n                charClassRange = true;\n                regex.append(c);\n            } else {\n                if (charClassRange) {\n                    regex.append('-');\n                    charClassRange = false;\n                }\n                regex.append(c);\n            }\n        } else {\n            switch (c) {\n                case '(':\n                    regex.append(c);\n                    break;\n                case ')':\n                    regex.append(c);\n                    break;\n                case '|':\n                    regex.append(c);\n                    break;\n                default:\n                    regex.append(c);\n                    break;\n            }\n        }\n        lastChar = c;\n    }\n    if (inCharClass) {\n        regex.append(']');\n    }\n    regex.append(\"\\\\z\");\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..ecd6c15e 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,113 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    boolean inCharClass = false;\n+    boolean charClassRange = false;\n+    char lastChar = '\\0';\n+    if (value == null)\n+        return regex;\n+\n+    int length = value.length();\n+    for (int i = 0; i < length; ++i) {\n+        char c = value.charAt(i);\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n+            continue;\n+        }\n+        wasWhite = false;\n+        switch (c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n+                if (unquote) {\n+                    if (++i == value.length()) {\n                         return regex;\n                     }\n-                    c= value.charAt(i);\n+                    c = value.charAt(i);\n+                    if (value.charAt(i - 2) != '\\'') {\n+                        // quotes not paired\n+                        return null;\n+                    }\n                 }\n                 break;\n-            case '?':\n             case '[':\n+                if (!inCharClass) {\n+                    regex.append(c);\n+                    inCharClass = true;\n+                    charClassRange = false;\n+                    continue;\n+                }\n+                break;\n             case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n+                if (inCharClass && !charClassRange) {\n+                    regex.append(c);\n+                    inCharClass = false;\n+                    continue;\n+                }\n+                break;\n             case '\\\\':\n-            case '|':\n-            case '*':\n+                if (inCharClass) {\n+                    charClassRange = !charClassRange;\n+                    regex.append(c);\n+                    continue;\n+                }\n+                regex.append(c);\n+                if (++i < length) {\n+                    regex.append(value.charAt(i));\n+                }\n+                continue;\n+            case '?':\n             case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+            case '*':\n+                if (!inCharClass) {\n+                    if (lastChar == ')' || lastChar == '\\\\') {\n+                        regex.append(c);\n+                    } else {\n+                        regex.append(\"(?:\").append(lastChar).append(c == '*' ? \"*\" : \"+\").append(\")?\");\n+                    }\n+                    lastChar = '\\0';\n+                    continue;\n+                }\n+                break;\n+        }\n+        if (inCharClass) {\n+            if (c == '-' && !charClassRange) {\n+                charClassRange = true;\n+                regex.append(c);\n+            } else {\n+                if (charClassRange) {\n+                    regex.append('-');\n+                    charClassRange = false;\n+                }\n+                regex.append(c);\n+            }\n+        } else {\n+            switch (c) {\n+                case '(':\n+                    regex.append(c);\n+                    break;\n+                case ')':\n+                    regex.append(c);\n+                    break;\n+                case '|':\n+                    regex.append(c);\n+                    break;\n+                default:\n+                    regex.append(c);\n+                    break;\n             }\n-            regex.append(c);\n         }\n-        return regex;\n+        lastChar = c;\n+    }\n+    if (inCharClass) {\n+        regex.append(']');\n     }\n+    regex.append(\"\\\\z\");\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}