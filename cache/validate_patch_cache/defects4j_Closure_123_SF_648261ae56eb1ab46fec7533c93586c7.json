{
    "patch": "public String fixCode(String code) {\n    String[] lines = code.split(\"\\n\");\n    for (int i = 0; i < lines.length; i++) {\n        String line = lines[i].trim();\n        if (line.startsWith(\"for\")) {\n            int start = line.indexOf('[');\n            int end = line.indexOf(']');\n            if (start != -1 && end != -1 && start < end) {\n                String expr = line.substring(start + 1, end).trim();\n                if (expr.contains(\"in\")) {\n                    String[] parts = expr.split(\"\\\\s+in\\\\s+\");\n                    String fixedExpr = parts[1] + \".contains(\" + parts[0] + \")\";\n                    String fixedLine = line.substring(0, start + 1) +\n                            fixedExpr + line.substring(end);\n                    lines[i] = fixedLine;\n                }\n            }\n        }\n    }\n    return String.join(\"\\n\", lines);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..1f2d3382 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,27 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    String[] lines = code.split(\"\\n\");\n+    for (int i = 0; i < lines.length; i++) {\n+        String line = lines[i].trim();\n+        if (line.startsWith(\"for\")) {\n+            int start = line.indexOf('[');\n+            int end = line.indexOf(']');\n+            if (start != -1 && end != -1 && start < end) {\n+                String expr = line.substring(start + 1, end).trim();\n+                if (expr.contains(\"in\")) {\n+                    String[] parts = expr.split(\"\\\\s+in\\\\s+\");\n+                    String fixedExpr = parts[1] + \".contains(\" + parts[0] + \")\";\n+                    String fixedLine = line.substring(0, start + 1) +\n+                            fixedExpr + line.substring(end);\n+                    lines[i] = fixedLine;\n+                }\n+            }\n+        }\n+    }\n+    return String.join(\"\\n\", lines);\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}