{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n    if (!(oldHandler instanceof MockHandler)) {\n        return;\n    }\n    MockHandler<T> oldMockHandler = (MockHandler<T>) oldHandler;\n    Callback[] callbacks = ((Factory) mock).getCallbacks();\n    if (callbacks.length <= oldMockHandler.getId()) {\n        return;\n    }\n    Callback oldCallback = callbacks[oldMockHandler.getId()];\n    if (!(oldCallback instanceof MethodInterceptorFilter)) {\n        return;\n    }\n    MockHandlerInterface<T> newHandler = ((MethodInterceptorFilter) oldCallback).getHandler();\n    ((Factory) mock).setCallback(oldMockHandler.getId(), (Callback) newHandler);\n    mock.hashCode(); // Issue workaround\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..ecb67e147 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,25 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n+    if (!(oldHandler instanceof MockHandler)) {\n+        return;\n+    }\n+    MockHandler<T> oldMockHandler = (MockHandler<T>) oldHandler;\n+    Callback[] callbacks = ((Factory) mock).getCallbacks();\n+    if (callbacks.length <= oldMockHandler.getId()) {\n+        return;\n+    }\n+    Callback oldCallback = callbacks[oldMockHandler.getId()];\n+    if (!(oldCallback instanceof MethodInterceptorFilter)) {\n+        return;\n+    }\n+    MockHandlerInterface<T> newHandler = ((MethodInterceptorFilter) oldCallback).getHandler();\n+    ((Factory) mock).setCallback(oldMockHandler.getId(), (Callback) newHandler);\n+    mock.hashCode(); // Issue workaround\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}