{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.MathUtils;\n\npublic class GammaFunction {\n\n    public static double gamma(double x) {\n        if (x == 0.5) {\n            return Math.sqrt(Math.PI);\n        } else if (x == 1.0) {\n            return 1.0;\n        } else if (x < 0.5) {\n            return (Math.PI / (Math.sin(Math.PI * x) * gamma(1.0 - x)));\n        } else {\n            return ((x - 1) * gamma(x - 1));\n        }\n    }\n\n    public static double regularizedGamma(double a, double x) {\n        if (a <= 0) {\n            throw new IllegalArgumentException(\"a must be positive.\");\n        }\n        if (x < 0) {\n            throw new IllegalArgumentException(\"x must be non-negative\");\n        }\n        if (x == 0) {\n            return 0;\n        }\n        if (x >= a + 1) {\n            return 1 - regularizedGammaComplement(a, x);\n        }\n        double sum = 0;\n        double term = 1 / a;\n        double n = 1;\n        while (Math.abs(term) > MathUtils.EPSILON) {\n            sum += term;\n            term *= (x / (a + n));\n            n++;\n        }\n        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n    }\n\n    public static double regularizedGammaComplement(double a, double x) {\n        if (a <= 0) {\n            throw new IllegalArgumentException(\"a must be positive.\");\n        }\n        if (x < 0) {\n            throw new IllegalArgumentException(\"x must be non-negative\");\n        }\n        if (x == 0) {\n            return 1;\n        }\n        if (x < a + 1) {\n            return 1 - regularizedGamma(a, x);\n        }\n        double a0 = 1;\n        double a1 = x;\n        double b0 = 0;\n        double b1 = 1;\n        double fac = 1;\n        double n = 1;\n        double an, ana, anf;\n        while (Math.abs((a1 / b1) - fac) > MathUtils.EPSILON) {\n            ana = n - a;\n            a0 = (a1 + a0 * ana) * fac;\n            b0 = (b1 + b0 * ana) * fac;\n            an = n;\n            anf = fac;\n            ana = n + 1 - a;\n            a1 = x * a0 + anf * a1 * ana;\n            b1 = x * b0 + anf * b1 * ana;\n            fac = 1 / b1;\n            n++;\n        }\n        return 1 - Math.exp(-x + a * Math.log(x) - logGamma(a)) * a1 / b1;\n    }\n\n    public static double logGamma(double x) {\n        return Gamma.logGamma(x);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..078848933 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,86 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+public class GammaFunction {\n+\n+    public static double gamma(double x) {\n+        if (x == 0.5) {\n+            return Math.sqrt(Math.PI);\n+        } else if (x == 1.0) {\n+            return 1.0;\n+        } else if (x < 0.5) {\n+            return (Math.PI / (Math.sin(Math.PI * x) * gamma(1.0 - x)));\n+        } else {\n+            return ((x - 1) * gamma(x - 1));\n+        }\n+    }\n+\n+    public static double regularizedGamma(double a, double x) {\n+        if (a <= 0) {\n+            throw new IllegalArgumentException(\"a must be positive.\");\n+        }\n+        if (x < 0) {\n+            throw new IllegalArgumentException(\"x must be non-negative\");\n+        }\n+        if (x == 0) {\n+            return 0;\n+        }\n+        if (x >= a + 1) {\n+            return 1 - regularizedGammaComplement(a, x);\n+        }\n+        double sum = 0;\n+        double term = 1 / a;\n+        double n = 1;\n+        while (Math.abs(term) > MathUtils.EPSILON) {\n+            sum += term;\n+            term *= (x / (a + n));\n+            n++;\n+        }\n+        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+    }\n+\n+    public static double regularizedGammaComplement(double a, double x) {\n+        if (a <= 0) {\n+            throw new IllegalArgumentException(\"a must be positive.\");\n+        }\n+        if (x < 0) {\n+            throw new IllegalArgumentException(\"x must be non-negative\");\n+        }\n+        if (x == 0) {\n+            return 1;\n+        }\n+        if (x < a + 1) {\n+            return 1 - regularizedGamma(a, x);\n+        }\n+        double a0 = 1;\n+        double a1 = x;\n+        double b0 = 0;\n+        double b1 = 1;\n+        double fac = 1;\n+        double n = 1;\n+        double an, ana, anf;\n+        while (Math.abs((a1 / b1) - fac) > MathUtils.EPSILON) {\n+            ana = n - a;\n+            a0 = (a1 + a0 * ana) * fac;\n+            b0 = (b1 + b0 * ana) * fac;\n+            an = n;\n+            anf = fac;\n+            ana = n + 1 - a;\n+            a1 = x * a0 + anf * a1 * ana;\n+            b1 = x * b0 + anf * b1 * ana;\n+            fac = 1 / b1;\n+            n++;\n+        }\n+        return 1 - Math.exp(-x + a * Math.log(x) - logGamma(a)) * a1 / b1;\n+    }\n+\n+    public static double logGamma(double x) {\n+        return Gamma.logGamma(x);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}