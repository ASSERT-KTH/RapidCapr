{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1.0) {\n        // Use the series representation of the complement\n        return 1.0 - regularizedGammaComplementSeries(a, x);\n    }\n\n    // Else x < a + 1.0\n\n    // Compute the incomplete gamma ratio directly by its definition\n    return regularizedGammaPrefix(a, x) * regularizedGammaSeries(a, x);\n}\n\nprivate static double regularizedGammaPrefix(double a, double x) {\n    double prefix = Math.exp(-x + a * Math.log(x) - logGamma(a));\n    return prefix / a;\n}\n\n// Series approximation to the incomplete gamma function\nprivate static double regularizedGammaSeries(double a, double x) {\n    double eps = 10e-15;\n    int maxiter = 1000;\n\n    double sum = 1.0 / a;\n    double incr = sum;\n\n    for (int i = 1; i <= maxiter; i++) {\n        incr *= x / (a + i);\n        sum += incr;\n\n        if (Math.abs(incr) < Math.abs(sum) * eps) {\n            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n        }\n    }\n\n    // Series failed to converge\n    throw new RuntimeException(\"Gamma series failed to converge.\");\n}\n\n// Series approximation to the complement of the incomplete gamma function\nprivate static double regularizedGammaComplementSeries(double a, double x) {\n    double eps = 10e-15;\n    int maxiter = 1000;\n\n    double ap = a;\n    double sum = 1.0 / a;\n    double del = sum;\n\n    for (int i = 1; i <= maxiter; i++) {\n        ap += 1.0;\n        del *= x / ap;\n        sum += del;\n\n        if (Math.abs(del) < Math.abs(sum) * eps) {\n            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n        }\n    }\n\n    // Series failed to converge\n    throw new RuntimeException(\"Gamma series failed to converge.\");\n}\n\n// Natural logarithm of the gamma function\nprivate static double logGamma(double x) {\n    double[] coef = {\n        76.18009172947146,\n        -86.50532032941677,\n        24.01409824083091,\n        -1.231739572450155,\n        0.001208650973866179,\n        -5.395239384953e-6\n    };\n\n    double ser = 1.000000000190015;\n    double tmp = x + 5.5;\n    tmp -= (x + 0.5) * Math.log(tmp);\n    double res = 0.0;\n\n    for (int i = 0; i <= 5; i++) {\n        tmp += 1.0;\n        ser += coef[i] / tmp;\n    }\n\n    res = -1.0 * tmp + Math.log(2.5066282746310005 * ser / x);\n    return res;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..e9517284a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,99 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1.0) {\n+        // Use the series representation of the complement\n+        return 1.0 - regularizedGammaComplementSeries(a, x);\n+    }\n+\n+    // Else x < a + 1.0\n+\n+    // Compute the incomplete gamma ratio directly by its definition\n+    return regularizedGammaPrefix(a, x) * regularizedGammaSeries(a, x);\n+}\n+\n+private static double regularizedGammaPrefix(double a, double x) {\n+    double prefix = Math.exp(-x + a * Math.log(x) - logGamma(a));\n+    return prefix / a;\n+}\n+\n+// Series approximation to the incomplete gamma function\n+private static double regularizedGammaSeries(double a, double x) {\n+    double eps = 10e-15;\n+    int maxiter = 1000;\n+\n+    double sum = 1.0 / a;\n+    double incr = sum;\n+\n+    for (int i = 1; i <= maxiter; i++) {\n+        incr *= x / (a + i);\n+        sum += incr;\n+\n+        if (Math.abs(incr) < Math.abs(sum) * eps) {\n+            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+        }\n+    }\n+\n+    // Series failed to converge\n+    throw new RuntimeException(\"Gamma series failed to converge.\");\n+}\n+\n+// Series approximation to the complement of the incomplete gamma function\n+private static double regularizedGammaComplementSeries(double a, double x) {\n+    double eps = 10e-15;\n+    int maxiter = 1000;\n+\n+    double ap = a;\n+    double sum = 1.0 / a;\n+    double del = sum;\n+\n+    for (int i = 1; i <= maxiter; i++) {\n+        ap += 1.0;\n+        del *= x / ap;\n+        sum += del;\n+\n+        if (Math.abs(del) < Math.abs(sum) * eps) {\n+            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+        }\n+    }\n+\n+    // Series failed to converge\n+    throw new RuntimeException(\"Gamma series failed to converge.\");\n+}\n+\n+// Natural logarithm of the gamma function\n+private static double logGamma(double x) {\n+    double[] coef = {\n+        76.18009172947146,\n+        -86.50532032941677,\n+        24.01409824083091,\n+        -1.231739572450155,\n+        0.001208650973866179,\n+        -5.395239384953e-6\n+    };\n+\n+    double ser = 1.000000000190015;\n+    double tmp = x + 5.5;\n+    tmp -= (x + 0.5) * Math.log(tmp);\n+    double res = 0.0;\n+\n+    for (int i = 0; i <= 5; i++) {\n+        tmp += 1.0;\n+        ser += coef[i] / tmp;\n+    }\n+\n+    res = -1.0 * tmp + Math.log(2.5066282746310005 * ser / x);\n+    return res;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}