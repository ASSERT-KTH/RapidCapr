{
    "patch": "boolean isOverride = false;\nif (t.getScope() != null) {\n  Node scopeRoot = t.getScopeRoot();\n  if (scopeRoot != null && scopeRoot.getLastChild() != null) {\n    Node enclosingFunction = scopeRoot.getParent();\n    if (enclosingFunction != null\n        && enclosingFunction.isFunction()\n        && parent == enclosingFunction.getLastChild()) {\n      isOverride = true;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..4a730937 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,18 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+boolean isOverride = false;\n+if (t.getScope() != null) {\n+  Node scopeRoot = t.getScopeRoot();\n+  if (scopeRoot != null && scopeRoot.getLastChild() != null) {\n+    Node enclosingFunction = scopeRoot.getParent();\n+    if (enclosingFunction != null\n+        && enclosingFunction.isFunction()\n+        && parent == enclosingFunction.getLastChild()) {\n+      isOverride = true;\n+    }\n+  }\n+}\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}