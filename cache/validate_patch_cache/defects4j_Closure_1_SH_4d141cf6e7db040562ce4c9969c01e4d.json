{
    "patch": "    \n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    boolean isSetterInObjectLiteral = NodeUtil.isObjectLitKey(function.getParent()) &&\n        function.getParent().getParent().isSetterDef();\n    if (isSetterInObjectLiteral) {\n      // For setter methods in object literals, don't remove parameters.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers =\n        modifyCallSites && callSiteOptimizer.canModifyCallers(function);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..63aedf40 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    boolean isSetterInObjectLiteral = NodeUtil.isObjectLitKey(function.getParent()) &&\n+        function.getParent().getParent().isSetterDef();\n+    if (isSetterInObjectLiteral) {\n+      // For setter methods in object literals, don't remove parameters.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers =\n+        modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: method isObjectLitKey in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}