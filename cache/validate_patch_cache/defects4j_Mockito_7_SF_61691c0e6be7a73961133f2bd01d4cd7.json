{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds == null || bounds.length == 0) {\n        registerTypeVariablesOn(Object.class);\n        return;\n    }\n    for (Type bound : bounds) {\n        if (bound instanceof TypeVariable) {\n            // If this is a recursive type variable, we register Object as a placeholder\n            TypeVariable<?> boundTv = (TypeVariable<?>) bound;\n            if (typeVariable.equals(boundTv)) {\n                registerTypeVariablesOn(Object.class);\n            } else {\n                readTypeVariablesForTypeVariable(boundTv);\n            }\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}\n\nprivate void readTypeVariablesForTypeVariable(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds == null || bounds.length == 0) {\n        registerTypeVariablesOn(Object.class);\n        return;\n    }\n    for (Type bound : bounds) {\n        if (bound instanceof TypeVariable) {\n            // If this is a recursive type variable, we register Object as a placeholder\n            TypeVariable<?> boundTv = (TypeVariable<?>) bound;\n            if (typeVariable.equals(boundTv)) {\n                registerTypeVariablesOn(Object.class);\n            } else {\n                readTypeVariablesForTypeVariable(boundTv);\n            }\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..1162846f7 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,52 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds == null || bounds.length == 0) {\n+        registerTypeVariablesOn(Object.class);\n+        return;\n+    }\n+    for (Type bound : bounds) {\n+        if (bound instanceof TypeVariable) {\n+            // If this is a recursive type variable, we register Object as a placeholder\n+            TypeVariable<?> boundTv = (TypeVariable<?>) bound;\n+            if (typeVariable.equals(boundTv)) {\n+                registerTypeVariablesOn(Object.class);\n+            } else {\n+                readTypeVariablesForTypeVariable(boundTv);\n+            }\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n+\n+private void readTypeVariablesForTypeVariable(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds == null || bounds.length == 0) {\n+        registerTypeVariablesOn(Object.class);\n+        return;\n+    }\n+    for (Type bound : bounds) {\n+        if (bound instanceof TypeVariable) {\n+            // If this is a recursive type variable, we register Object as a placeholder\n+            TypeVariable<?> boundTv = (TypeVariable<?>) bound;\n+            if (typeVariable.equals(boundTv)) {\n+                registerTypeVariablesOn(Object.class);\n+            } else {\n+                readTypeVariablesForTypeVariable(boundTv);\n+            }\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}