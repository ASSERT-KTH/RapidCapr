{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        List<Object> remainingElements = new ArrayList<>(elementPairs.subList(1, size));\n        PeriodPrinter printer = null;\n        PeriodParser parser = null;\n        while (!remainingElements.isEmpty()) {\n            Object firstElem = remainingElements.get(0);\n            if (firstElem instanceof Separator) {\n                break;\n            } else if (firstElem instanceof PeriodPrinter) {\n                printer = (PeriodPrinter) firstElem;\n            } else if (firstElem instanceof PeriodParser) {\n                parser = (PeriodParser) firstElem;\n            }\n            remainingElements.remove(0);\n        }\n        PeriodFormatter f = toFormatter(remainingElements, notPrinter || printer == null, notParser || parser == null);\n\n        if (printer == null) {\n            printer = f.getPrinter();\n        }\n        if (parser == null) {\n            parser = f.getParser();\n        }\n\n        sep = sep.finish(printer, parser);\n\n        if (notPrinter) {\n            return new PeriodFormatter(null, parser);\n        } else if (notParser) {\n            return new PeriodFormatter(printer, null);\n        } else {\n            return new PeriodFormatter(sep, sep);\n        }\n\n    }\n\n    Object[] comp = createComposite(elementPairs);\n\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..8a283fa2 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,60 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        List<Object> remainingElements = new ArrayList<>(elementPairs.subList(1, size));\n+        PeriodPrinter printer = null;\n+        PeriodParser parser = null;\n+        while (!remainingElements.isEmpty()) {\n+            Object firstElem = remainingElements.get(0);\n+            if (firstElem instanceof Separator) {\n+                break;\n+            } else if (firstElem instanceof PeriodPrinter) {\n+                printer = (PeriodPrinter) firstElem;\n+            } else if (firstElem instanceof PeriodParser) {\n+                parser = (PeriodParser) firstElem;\n+            }\n+            remainingElements.remove(0);\n+        }\n+        PeriodFormatter f = toFormatter(remainingElements, notPrinter || printer == null, notParser || parser == null);\n+\n+        if (printer == null) {\n+            printer = f.getPrinter();\n+        }\n+        if (parser == null) {\n+            parser = f.getParser();\n+        }\n+\n+        sep = sep.finish(printer, parser);\n+\n         if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            return new PeriodFormatter(null, parser);\n         } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            return new PeriodFormatter(printer, null);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            return new PeriodFormatter(sep, sep);\n         }\n+\n     }\n \n+    Object[] comp = createComposite(elementPairs);\n+\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}