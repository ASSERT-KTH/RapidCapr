{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolvedViaRegistry = false;\n    boolean cycleDetected = detectImplicitPrototypeCycle();\n    if (!cycleDetected) {\n      resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n    }\n\n    if (!resolvedViaRegistry) {\n      resolveViaProperties(t, enclosing);\n      if (!cycleDetected) {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n      }\n    }\n\n    if (cycleDetected) {\n      handleTypeCycle(t);\n    }\n\n    return isResolved() ? (registry.isLastGeneration() ? getReferencedType() : this) : null;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..edc221e0 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,33 +182,25 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    boolean resolvedViaRegistry = false;\n+    boolean cycleDetected = detectImplicitPrototypeCycle();\n+    if (!cycleDetected) {\n+      resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n     }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    if (!resolvedViaRegistry) {\n+      resolveViaProperties(t, enclosing);\n+      if (!cycleDetected) {\n+        super.resolveInternal(t, enclosing);\n+        finishPropertyContinuations();\n+      }\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+    if (cycleDetected) {\n       handleTypeCycle(t);\n     }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    return isResolved() ? (registry.isLastGeneration() ? getReferencedType() : this) : null;\n   }\n \n   /**",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}