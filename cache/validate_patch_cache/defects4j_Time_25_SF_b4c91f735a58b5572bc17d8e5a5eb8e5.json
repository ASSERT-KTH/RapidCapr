{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // calculate the next transition from both instants\n        long nextTransitionAdjusted = nextTransition(instantAdjusted);\n        long nextTransitionLocal = nextTransition(instantLocal - offsetLocal);\n\n        if (nextTransitionAdjusted == nextTransitionLocal) {\n            // If next transitions from the two instants are at the same moment,\n            // it means that the original estimate was correct and we should\n            // return it.\n            return offsetAdjusted;\n        } else if (nextTransitionLocal > nextTransitionAdjusted) {\n            // If the next transition from the local time is later than the next\n            // transition from the adjusted time, then it means we moved the\n            // time across a transition that occurred before the original local\n            // time. This means that we need to adjust the offset using the new\n            // next transition from the adjusted time rather than using the\n            // previous transition from the local time.\n            return getOffset(nextTransitionAdjusted);\n        } else {\n            // If none of the above conditions are true, it means that we moved\n            // the time across a transition that occurs after the original local\n            // time, and we can simply return the original offset estimate.\n            return offsetAdjusted;\n        }\n    } else {\n        // If the original estimate is correct, return it.\n        return offsetAdjusted;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..6a230c05 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,43 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int offsetLocal = getOffset(instantLocal);\n+    // adjust instantLocal using the estimate and recalc the offset\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    // if the offsets differ, we must be near a DST boundary\n+    if (offsetLocal != offsetAdjusted) {\n+        // calculate the next transition from both instants\n+        long nextTransitionAdjusted = nextTransition(instantAdjusted);\n+        long nextTransitionLocal = nextTransition(instantLocal - offsetLocal);\n+\n+        if (nextTransitionAdjusted == nextTransitionLocal) {\n+            // If next transitions from the two instants are at the same moment,\n+            // it means that the original estimate was correct and we should\n+            // return it.\n+            return offsetAdjusted;\n+        } else if (nextTransitionLocal > nextTransitionAdjusted) {\n+            // If the next transition from the local time is later than the next\n+            // transition from the adjusted time, then it means we moved the\n+            // time across a transition that occurred before the original local\n+            // time. This means that we need to adjust the offset using the new\n+            // next transition from the adjusted time rather than using the\n+            // previous transition from the local time.\n+            return getOffset(nextTransitionAdjusted);\n+        } else {\n+            // If none of the above conditions are true, it means that we moved\n+            // the time across a transition that occurs after the original local\n+            // time, and we can simply return the original offset estimate.\n+            return offsetAdjusted;\n         }\n+    } else {\n+        // If the original estimate is correct, return it.\n         return offsetAdjusted;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2007-0[4-01T01:00:00.000-04]:00> but was:<2007-0[3-31T23:00:00.000-05]:00>",
    "test_result": "FAIL"
}