{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // Skip the function name.\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  boolean varArgs = false;\n  Node parameter = null;\n  Node argument = null;\n  while (parameters.hasNext()) {\n    parameter = parameters.next();\n    if (!arguments.hasNext()) {\n      if (parameter.isVarArgs()) {\n        // Handle case where parameter list ends with varargs parameter.\n        varArgs = true;\n        break;\n      } else {\n        // Not enough arguments, report an error.\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(ordinal), String.valueOf(parameter.getString()),\n            \" is undefined\");\n        return;\n      }\n    }\n    argument = arguments.next();\n    ordinal++;\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  if (varArgs) {\n    // Handle varargs case where all remaining arguments are grouped into\n    // the final parameter.\n    Node varArgType = parameter.getSecondChild();\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), varArgType, call, ordinal);\n    }\n  } else {\n    // Handle case where parameter list ends but there are still arguments.\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(ordinal), String.format(\"got %s, expected nothing\", argument),\n          \"\");\n    }\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (maxArgs == -1 && numArgs < minArgs) {\n    // Handle case where function has varargs and requires a minimum number\n    // of arguments.\n    return;\n  } else if (numArgs < minArgs || (maxArgs != -1 && numArgs > maxArgs)) {\n    // Handle cases where function does not have varargs and either has too\n    // few or too many arguments.\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs),\n        String.format(\"Function requires between %d and %d argument(s)\",\n            minArgs, maxArgs == -1 ? Integer.MAX_VALUE : maxArgs),\n        \"\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..8e309149 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,39 +1396,79 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+private void visitParameterList(NodeTraversal t, Node call,\n+    FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // Skip the function name.\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  boolean varArgs = false;\n+  Node parameter = null;\n+  Node argument = null;\n+  while (parameters.hasNext()) {\n+    parameter = parameters.next();\n+    if (!arguments.hasNext()) {\n+      if (parameter.isVarArgs()) {\n+        // Handle case where parameter list ends with varargs parameter.\n+        varArgs = true;\n+        break;\n+      } else {\n+        // Not enough arguments, report an error.\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(ordinal), String.valueOf(parameter.getString()),\n+            \" is undefined\");\n+        return;\n+      }\n+    }\n+    argument = arguments.next();\n+    ordinal++;\n+    validator.expectArgumentMatchesParameter(t, argument,\n+        getJSType(argument), getJSType(parameter), call, ordinal);\n+  }\n+\n+  if (varArgs) {\n+    // Handle varargs case where all remaining arguments are grouped into\n+    // the final parameter.\n+    Node varArgType = parameter.getSecondChild();\n+    while (arguments.hasNext()) {\n       argument = arguments.next();\n       ordinal++;\n-\n       validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+          getJSType(argument), varArgType, call, ordinal);\n     }\n-\n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+  } else {\n+    // Handle case where parameter list ends but there are still arguments.\n+    while (arguments.hasNext()) {\n+      argument = arguments.next();\n+      ordinal++;\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(ordinal), String.format(\"got %s, expected nothing\", argument),\n+          \"\");\n     }\n   }\n \n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  if (maxArgs == -1 && numArgs < minArgs) {\n+    // Handle case where function has varargs and requires a minimum number\n+    // of arguments.\n+    return;\n+  } else if (numArgs < minArgs || (maxArgs != -1 && numArgs > maxArgs)) {\n+    // Handle cases where function does not have varargs and either has too\n+    // few or too many arguments.\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs),\n+        String.format(\"Function requires between %d and %d argument(s)\",\n+            minArgs, maxArgs == -1 ? Integer.MAX_VALUE : maxArgs),\n+        \"\");\n+  }\n+}\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}