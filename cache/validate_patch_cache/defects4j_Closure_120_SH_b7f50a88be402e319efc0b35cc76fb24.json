{
    "patch": "```\nboolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n\n  // Make sure this assignment is not in a loop.\n  for (BasicBlock block = ref.getBasicBlock();\n       block != null; block = block.getParent()) {\n    if (block.isFunction) {\n      // Check for other assignments to this variable within the function.\n      Set<BasicBlock> visited = Sets.newHashSet();\n      visited.add(block);\n      int count = countAssignmentsWithin(ref.getSymbol(), block, visited);\n      return count == 1;\n    } else if (block.isLoop) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nprivate int countAssignmentsWithin(Symbol symbol, BasicBlock block,\n                                    Set<BasicBlock> visited) {\n  int count = 0;\n  for (BasicBlock b : block.getCfg().getLinkedBlocks(block)) {\n    if (visited.add(b)) {\n      for (Operation op : b.getOperations()) {\n        List<Reference> assignRefs = op.getAllSymbols().get(symbol);\n        if (assignRefs != null) {\n          for (Reference assignRef : assignRefs) {\n            if (assignRef.isAssignment()) {\n              count++;\n            }\n          }\n        }\n      }\n      count += countAssignmentsWithin(symbol, b, visited);\n    }\n  }\n  return count;\n}\n```",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..cb40d32d 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,51 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+```\n+boolean isAssignedOnceInLifetime() {\n+  Reference ref = getOneAndOnlyAssignment();\n+  if (ref == null) {\n+    return false;\n+  }\n+\n+  // Make sure this assignment is not in a loop.\n+  for (BasicBlock block = ref.getBasicBlock();\n+       block != null; block = block.getParent()) {\n+    if (block.isFunction) {\n+      // Check for other assignments to this variable within the function.\n+      Set<BasicBlock> visited = Sets.newHashSet();\n+      visited.add(block);\n+      int count = countAssignmentsWithin(ref.getSymbol(), block, visited);\n+      return count == 1;\n+    } else if (block.isLoop) {\n+      return false;\n+    }\n+  }\n+\n+  return true;\n+}\n+\n+private int countAssignmentsWithin(Symbol symbol, BasicBlock block,\n+                                    Set<BasicBlock> visited) {\n+  int count = 0;\n+  for (BasicBlock b : block.getCfg().getLinkedBlocks(block)) {\n+    if (visited.add(b)) {\n+      for (Operation op : b.getOperations()) {\n+        List<Reference> assignRefs = op.getAllSymbols().get(symbol);\n+        if (assignRefs != null) {\n+          for (Reference assignRef : assignRefs) {\n+            if (assignRef.isAssignment()) {\n+              count++;\n+            }\n+          }\n+        }\n+      }\n+      count += countAssignmentsWithin(symbol, b, visited);\n+    }\n+  }\n+  return count;\n+}\n+```\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}