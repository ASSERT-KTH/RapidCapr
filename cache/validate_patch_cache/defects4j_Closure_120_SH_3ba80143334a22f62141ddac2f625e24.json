{
    "patch": "        } else if (block.isConditionalBranch()) {\n          // Check each conditional branch for multiple assignments.\n          for (int i = 0; i < block.getOutEdges().size(); i++) {\n            BlockEdge<Node, Branch> outEdge = block.getOutEdges().get(i);\n            BasicBlock targetBlock = outEdge.getEnd();\n            for (Node targetNode : targetBlock.getNodes()) {\n              if (targetNode.isAssign()) {\n                targetRefs.add(Reference.fromNameNode((Name) targetNode.getFirstChild()));\n              }\n            }\n            if (targetRefs.size() > 1 || (targetRefs.size() == 1 && !reference.equals(targetRefs.iterator().next()))) {\n              return false;\n            }\n          }\n          targetRefs.clear();\n        } else if (block.isFunction) {\n          // Don't look for multiple assignments across function boundaries.\n          return true;\n        }\n      }\n      return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..7827c0a8 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,28 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (block.isConditionalBranch()) {\n+          // Check each conditional branch for multiple assignments.\n+          for (int i = 0; i < block.getOutEdges().size(); i++) {\n+            BlockEdge<Node, Branch> outEdge = block.getOutEdges().get(i);\n+            BasicBlock targetBlock = outEdge.getEnd();\n+            for (Node targetNode : targetBlock.getNodes()) {\n+              if (targetNode.isAssign()) {\n+                targetRefs.add(Reference.fromNameNode((Name) targetNode.getFirstChild()));\n+              }\n+            }\n+            if (targetRefs.size() > 1 || (targetRefs.size() == 1 && !reference.equals(targetRefs.iterator().next()))) {\n+              return false;\n+            }\n+          }\n+          targetRefs.clear();\n+        } else if (block.isFunction) {\n+          // Don't look for multiple assignments across function boundaries.\n+          return true;\n+        }\n+      }\n+      return true;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}