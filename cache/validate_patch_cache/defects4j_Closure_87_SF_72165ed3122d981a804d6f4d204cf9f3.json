{
    "patch": "      // Check if the block has only one child.\n      if (n.hasOneChild()) {\n        Node child = n.getFirstChild();\n        // Check if the child is an expression statement.\n        if (child.getType() == Token.EXPR_RESULT) {\n          // Check if the expression is a method call that takes an event object as a parameter.\n          Node call = child.getFirstChild();\n          if (call.getType() == Token.CALL) {\n            Node target = call.getFirstChild();\n            if (target.getType() == Token.GETPROP && target.getLastChild().getString().equals(\"keyCode\")) {\n              Node obj = target.getFirstChild();\n              if (obj.getType() == Token.NAME && obj.getString().equals(\"$event\") && call.getChildCount() == 2) {\n                return false;\n              }\n            }\n          }\n          // Check if the expression has no side effects and its return value is not used.\n          Node expr = child.getFirstChild();\n          if (NodeUtil.isExpressionNode(expr) && !NodeUtil.mayHaveSideEffects(expr) && !NodeUtil.isExpressionResultUsed(child)) {\n            return true;\n          }\n        }\n        // Check if the child is itself a foldable expression block.\n        if (isFoldableExpressBlock(child)) {\n          return true;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..c896cc0e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,32 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n+      // Check if the block has only one child.\n       if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n-\n-    return false;\n-  }\n+        Node child = n.getFirstChild();\n+        // Check if the child is an expression statement.\n+        if (child.getType() == Token.EXPR_RESULT) {\n+          // Check if the expression is a method call that takes an event object as a parameter.\n+          Node call = child.getFirstChild();\n+          if (call.getType() == Token.CALL) {\n+            Node target = call.getFirstChild();\n+            if (target.getType() == Token.GETPROP && target.getLastChild().getString().equals(\"keyCode\")) {\n+              Node obj = target.getFirstChild();\n+              if (obj.getType() == Token.NAME && obj.getString().equals(\"$event\") && call.getChildCount() == 2) {\n+                return false;\n+              }\n+            }\n+          }\n+          // Check if the expression has no side effects and its return value is not used.\n+          Node expr = child.getFirstChild();\n+          if (NodeUtil.isExpressionNode(expr) && !NodeUtil.mayHaveSideEffects(expr) && !NodeUtil.isExpressionResultUsed(child)) {\n+            return true;\n+          }\n+        }\n+        // Check if the child is itself a foldable expression block.\n+        if (isFoldableExpressBlock(child)) {\n+          return true;\n+        }\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}