{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    \n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    long instant = 0L;\n    \n    boolean isLeapYear = false;    \n    \n    int[] newValues = Arrays.copyOf(values, values.length);\n    \n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        if (partial.getFieldType(i) == DateTimeFieldType.year()) {\n            if (iChronology.isLeapYear(values[i])) {\n                isLeapYear = true;\n            }\n        }\n    }\n        \n    if (!isLeapYear) {\n        instant = iChronology.monthOfYear().add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    }\n    \n    int year = iChronology.year().get(instant);\n    int month = iChronology.monthOfYear().get(instant);\n    int day = iChronology.dayOfMonth().get(instant);\n    int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n    \n    int oldMonthLen = iChronology.dayOfMonth().getMaximumValue(year, month);\n    int newMonthLen = iChronology.dayOfMonth().getMaximumValue(year, month + valueToAdd);\n    \n    int diffMonths = newMonthLen - oldMonthLen;\n    \n    if (month == 2 && day == 29) {\n        if (newMonthLen == 28) {\n            day = 28;\n        }\n    }\n    \n    if ((day + diffMonths) > maxDay) {\n        day = maxDay;\n    } else {\n        day += diffMonths;\n    }\n\n    newValues = iChronology.monthOfYear().add(partial, fieldIndex, newValues, valueToAdd);\n\n    newValues = iChronology.dayOfMonth().set(partial, fieldIndex, newValues, day);\n    \n    return newValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..18b44b7c 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,62 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    \n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    \n+    long instant = 0L;\n+    \n+    boolean isLeapYear = false;    \n+    \n+    int[] newValues = Arrays.copyOf(values, values.length);\n+    \n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        if (partial.getFieldType(i) == DateTimeFieldType.year()) {\n+            if (iChronology.isLeapYear(values[i])) {\n+                isLeapYear = true;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n     }\n+        \n+    if (!isLeapYear) {\n+        instant = iChronology.monthOfYear().add(instant, valueToAdd);\n+        return iChronology.get(partial, instant);\n+    }\n+    \n+    int year = iChronology.year().get(instant);\n+    int month = iChronology.monthOfYear().get(instant);\n+    int day = iChronology.dayOfMonth().get(instant);\n+    int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n+    \n+    int oldMonthLen = iChronology.dayOfMonth().getMaximumValue(year, month);\n+    int newMonthLen = iChronology.dayOfMonth().getMaximumValue(year, month + valueToAdd);\n+    \n+    int diffMonths = newMonthLen - oldMonthLen;\n+    \n+    if (month == 2 && day == 29) {\n+        if (newMonthLen == 28) {\n+            day = 28;\n+        }\n+    }\n+    \n+    if ((day + diffMonths) > maxDay) {\n+        day = maxDay;\n+    } else {\n+        day += diffMonths;\n+    }\n+\n+    newValues = iChronology.monthOfYear().add(partial, fieldIndex, newValues, valueToAdd);\n+\n+    newValues = iChronology.dayOfMonth().set(partial, fieldIndex, newValues, day);\n+    \n+    return newValues;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}