{
    "patch": "      // Use a linked hash map so that the properties are sorted and insertion order is preserved\n      Map<String, JSType> properties = new LinkedHashMap<>();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n                   properties.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        properties.putAll(current.getOwnPropertyNames().stream().collect(\n          Collectors.toMap(\n            propertyName -> propertyName,\n            propertyName -> getPropertyType(propertyName)\n          )\n        ));\n      }\n\n      StringBuilder sb = new StringBuilder(\"{\");\n\n      int i = 0;\n      for (Map.Entry<String, JSType> entry : properties.entrySet()) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(entry.getKey());\n        sb.append(\": \");\n        sb.append(entry.getValue().toString());\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..a7f5446d 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,34 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n-\n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n+      // Use a linked hash map so that the properties are sorted and insertion order is preserved\n+      Map<String, JSType> properties = new LinkedHashMap<>();\n       for (ObjectType current = this;\n            current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+                   properties.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n            current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n+        properties.putAll(current.getOwnPropertyNames().stream().collect(\n+          Collectors.toMap(\n+            propertyName -> propertyName,\n+            propertyName -> getPropertyType(propertyName)\n+          )\n+        ));\n       }\n \n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n+      StringBuilder sb = new StringBuilder(\"{\");\n \n       int i = 0;\n-      for (String property : propertyNames) {\n+      for (Map.Entry<String, JSType> entry : properties.entrySet()) {\n         if (i > 0) {\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n+        sb.append(entry.getKey());\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        sb.append(entry.getValue().toString());\n \n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n-      }\n-\n-      sb.append(\"}\");\n-\n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n-    }\n-  }\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}