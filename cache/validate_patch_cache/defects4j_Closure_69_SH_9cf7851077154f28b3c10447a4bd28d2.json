{
    "patch": "      JSType expectedThisType = functionType.getTypeOfThis();\n      boolean isThisKnown = !expectedThisType.isUnknownType()\n          && !expectedThisType.isAllType();\n\n      if (isThisKnown && !(n.getParent().isGetProp() || n.getParent().isGetElem())) {\n        report(t, n, INVALID_THIS_TYPE);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..6ad556a1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,12 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSType expectedThisType = functionType.getTypeOfThis();\n+      boolean isThisKnown = !expectedThisType.isUnknownType()\n+          && !expectedThisType.isAllType();\n+\n+      if (isThisKnown && !(n.getParent().isGetProp() || n.getParent().isGetElem())) {\n+        report(t, n, INVALID_THIS_TYPE);\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}