{
    "patch": "        } else if (n.getParent().isCall()) {\n          // If the parent of the assignment is a call expression, it means that the\n          // assignment is used as a function argument or a parameter to an immediate\n          // function invocation. In this case, we should associate the dependency scope\n          // with the right-hand side of the assignment which represents the function call.\n          recordDepScope(recordNode.getFirstChild().getNext(), ns);\n        } else {\n          // Original logic to determine where to associate the dependency scope.\n          if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n            if (parent.getFirstChild().getNext() != n) {\n              recordDepScope(recordNode, ns);\n            } else {\n              recordDepScope(nameNode, ns);\n            }\n          } else {\n            recordDepScope(recordNode, ns);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..fb33dcc6 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,24 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n+        } else if (n.getParent().isCall()) {\n+          // If the parent of the assignment is a call expression, it means that the\n+          // assignment is used as a function argument or a parameter to an immediate\n+          // function invocation. In this case, we should associate the dependency scope\n+          // with the right-hand side of the assignment which represents the function call.\n+          recordDepScope(recordNode.getFirstChild().getNext(), ns);\n         } else {\n+          // Original logic to determine where to associate the dependency scope.\n+          if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n+            if (parent.getFirstChild().getNext() != n) {\n+              recordDepScope(recordNode, ns);\n+            } else {\n+              recordDepScope(nameNode, ns);\n+            }\n+          } else {\n+            recordDepScope(recordNode, ns);\n+          }\n+        }\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}