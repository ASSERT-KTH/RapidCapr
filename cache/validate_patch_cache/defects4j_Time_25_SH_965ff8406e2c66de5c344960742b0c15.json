{
    "patch": "final int delta = offsetLocal - offsetAdjusted;\nif (delta == 0) {\n    return offsetAdjusted;\n} else if (Math.abs(delta) == 1) {\n    final long nextTransition = nextTransition(instantAdjusted);\n    final long adjNext = nextTransition(instantLocal - offsetAdjusted);\n    if (adjNext != nextTransition) {\n        return offsetLocal;\n    } else {\n        return offsetAdjusted;\n    }\n} else {\n    // Determine range of valid offsets to localize to\n    int minOffset = offsetAdjusted;\n    int maxOffset = offsetLocal;\n    if (offsetAdjusted > offsetLocal) {\n        minOffset = offsetLocal;\n        maxOffset = offsetAdjusted;\n    }\n\n    // Determine if the local time is inside a DST gap\n    long nextTransition = nextTransition(instantAdjusted);\n    long prevTransition = previousTransition(instantAdjusted);\n    long adjNext = nextTransition(instantLocal - offsetAdjusted);\n    long adjPrev = previousTransition(adjNext);\n    if (adjPrev == prevTransition) {\n        prevTransition = previousTransition(prevTransition);\n    }\n    if (adjNext != nextTransition && instantLocal >= adjPrev && instantLocal < adjNext) {\n        return maxOffset;\n    }\n\n    // If not inside a DST gap, determine the appropriate offset to use\n    int candidateOffset = offsetAdjusted;\n    boolean candidateFound = false;\n    long candidateInstant = instantLocal - offsetAdjusted;\n    while (!candidateFound && candidateOffset <= offsetLocal) {\n        candidateOffset++;\n        candidateInstant += DateTimeConstants.MILLIS_PER_HOUR;\n        if (getOffset(candidateInstant) == candidateOffset) {\n            candidateFound = true;\n        }\n    }\n    if (candidateFound) {\n        return candidateOffset;\n    } else {\n        return minOffset;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..90b4d7a6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,55 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+final int delta = offsetLocal - offsetAdjusted;\n+if (delta == 0) {\n+    return offsetAdjusted;\n+} else if (Math.abs(delta) == 1) {\n+    final long nextTransition = nextTransition(instantAdjusted);\n+    final long adjNext = nextTransition(instantLocal - offsetAdjusted);\n+    if (adjNext != nextTransition) {\n+        return offsetLocal;\n+    } else {\n+        return offsetAdjusted;\n+    }\n+} else {\n+    // Determine range of valid offsets to localize to\n+    int minOffset = offsetAdjusted;\n+    int maxOffset = offsetLocal;\n+    if (offsetAdjusted > offsetLocal) {\n+        minOffset = offsetLocal;\n+        maxOffset = offsetAdjusted;\n+    }\n+\n+    // Determine if the local time is inside a DST gap\n+    long nextTransition = nextTransition(instantAdjusted);\n+    long prevTransition = previousTransition(instantAdjusted);\n+    long adjNext = nextTransition(instantLocal - offsetAdjusted);\n+    long adjPrev = previousTransition(adjNext);\n+    if (adjPrev == prevTransition) {\n+        prevTransition = previousTransition(prevTransition);\n+    }\n+    if (adjNext != nextTransition && instantLocal >= adjPrev && instantLocal < adjNext) {\n+        return maxOffset;\n+    }\n+\n+    // If not inside a DST gap, determine the appropriate offset to use\n+    int candidateOffset = offsetAdjusted;\n+    boolean candidateFound = false;\n+    long candidateInstant = instantLocal - offsetAdjusted;\n+    while (!candidateFound && candidateOffset <= offsetLocal) {\n+        candidateOffset++;\n+        candidateInstant += DateTimeConstants.MILLIS_PER_HOUR;\n+        if (getOffset(candidateInstant) == candidateOffset) {\n+            candidateFound = true;\n+        }\n+    }\n+    if (candidateFound) {\n+        return candidateOffset;\n+    } else {\n+        return minOffset;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}