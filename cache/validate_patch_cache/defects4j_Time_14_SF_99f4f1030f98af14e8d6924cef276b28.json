{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n\n        int originalMonth = partial.get(DateTimeFieldType.monthOfYear());\n        int originalYear = partial.get(DateTimeFieldType.year());\n\n        int newMonth = (originalMonth - 1 + valueToAdd) % 12 + 1;\n        int yearDiff = (originalMonth - 1 + valueToAdd) / 12;\n\n        int newYear = originalYear + yearDiff;\n\n        boolean isValid = true;\n\n        try {\n            // Attempt to create new valid date with new year and month\n            instant = iChronology.monthOfYear().set(instant, newMonth);\n            instant = iChronology.year().set(instant, newYear);\n        } catch (IllegalArgumentException e) {\n            // New date is not valid\n            isValid = false;\n        }\n\n        if (!isValid) {\n            // Use last day of previous month as day\n            int lastDayPrevMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(instant, newYear), newMonth - 1), 1));\n            instant = iChronology.dayOfMonth().set(instant, lastDayPrevMonth);\n        }\n\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..9df97df3 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,52 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+\n+        int originalMonth = partial.get(DateTimeFieldType.monthOfYear());\n+        int originalYear = partial.get(DateTimeFieldType.year());\n+\n+        int newMonth = (originalMonth - 1 + valueToAdd) % 12 + 1;\n+        int yearDiff = (originalMonth - 1 + valueToAdd) / 12;\n+\n+        int newYear = originalYear + yearDiff;\n+\n+        boolean isValid = true;\n+\n+        try {\n+            // Attempt to create new valid date with new year and month\n+            instant = iChronology.monthOfYear().set(instant, newMonth);\n+            instant = iChronology.year().set(instant, newYear);\n+        } catch (IllegalArgumentException e) {\n+            // New date is not valid\n+            isValid = false;\n         }\n+\n+        if (!isValid) {\n+            // Use last day of previous month as day\n+            int lastDayPrevMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(instant, newYear), newMonth - 1), 1));\n+            instant = iChronology.dayOfMonth().set(instant, lastDayPrevMonth);\n+        }\n+\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]",
    "test_result": "FAIL"
}