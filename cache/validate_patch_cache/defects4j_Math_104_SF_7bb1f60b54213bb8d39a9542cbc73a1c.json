{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        // Asymptotic expansion for x > a + 1 (regularizedGammaQ):\n        final double lg = Gamma.logGamma(a);\n        final double log1p = Math.log1p(-a / x);\n        final double logsum = lg + log1p;\n        return MathUtils.log1pExp(logsum < Double.MAX_VALUE ? logsum : lg);\n    }\n    return Gamma.regularizedGammaP(a, x);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..cad4ffdaf 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,22 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        // Asymptotic expansion for x > a + 1 (regularizedGammaQ):\n+        final double lg = Gamma.logGamma(a);\n+        final double log1p = Math.log1p(-a / x);\n+        final double logsum = lg + log1p;\n+        return MathUtils.log1pExp(logsum < Double.MAX_VALUE ? logsum : lg);\n+    }\n+    return Gamma.regularizedGammaP(a, x);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}