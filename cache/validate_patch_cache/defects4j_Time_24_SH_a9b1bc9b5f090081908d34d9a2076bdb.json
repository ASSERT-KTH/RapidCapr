{
    "patch": "if (count > 0) {\n        // alter year for parsing if first field is a week-based field\n        DateTimeFieldType firstType = savedFields[0].iField.getType();\n        if (firstType.equals(DateTimeFieldType.weekyear())\n                || firstType.equals(DateTimeFieldType.weekOfWeekyear())) {\n            DurationField years = DurationFieldType.years().getField(iChrono);\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            millis = incrementYears(millis, years, 1);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..157753e2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,16 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+if (count > 0) {\n+        // alter year for parsing if first field is a week-based field\n+        DateTimeFieldType firstType = savedFields[0].iField.getType();\n+        if (firstType.equals(DateTimeFieldType.weekyear())\n+                || firstType.equals(DateTimeFieldType.weekOfWeekyear())) {\n+            DurationField years = DurationFieldType.years().getField(iChrono);\n+            saveField(DateTimeFieldType.year(), iDefaultYear);\n+            millis = incrementYears(millis, years, 1);\n+        }\n+    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}