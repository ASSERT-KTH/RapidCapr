{
    "patch": "import com.google.common.base.Preconditions;\nimport com.google.javascript.jscomp.Compiler;\nimport com.google.javascript.jscomp.CompilerInput;\nimport com.google.javascript.jscomp.JSError;\nimport com.google.javascript.jscomp.Scope;\nimport com.google.javascript.jscomp.Validator;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.FunctionType;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.JSTypeNative;\nimport com.google.javascript.rhino.jstype.ObjectType;\nimport com.google.javascript.rhino.jstype.TypeRegistry;\nimport com.google.javascript.rhino.jstype.Var;\n\npublic class AutomatedProgramRepairTool {\n    \n    private Compiler compiler;\n    private Scope scope;\n    private TypeRegistry typeRegistry;\n    private String sourceName;\n    private JSError[] warnings;\n    private Validator validator;\n\n    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n        Preconditions.checkArgument(inferred || type != null);\n\n        // Only allow declarations of NAMEs and qualified names.\n        boolean shouldDeclareOnGlobalThis = false;\n        if (n.getType() == Token.NAME) {\n            Preconditions.checkArgument(\n                    parent.getType() == Token.FUNCTION ||\n                            parent.getType() == Token.VAR ||\n                            parent.getType() == Token.LP ||\n                            parent.getType() == Token.CATCH);\n            shouldDeclareOnGlobalThis = scope.isGlobal() &&\n                    (parent.getType() == Token.VAR ||\n                            parent.getType() == Token.FUNCTION);\n        } else {\n            Preconditions.checkArgument(\n                    n.getType() == Token.GETPROP &&\n                            (parent.getType() == Token.ASSIGN ||\n                                    parent.getType() == Token.EXPR_RESULT));\n        }\n        String variableName = n.getQualifiedName();\n        Preconditions.checkArgument(!variableName.isEmpty());\n\n        // If n is a property, then we should really declare it in the\n        // scope where the root object appears. This helps out people\n        // who declare \"global\" names in an anonymous namespace.\n        Scope scopeToDeclareIn = scope;\n\n        // Don't try to declare in the global scope if there's\n        // already a symbol there with this name.\n        // Declared in closest scope?\n        if (scopeToDeclareIn.isDeclared(variableName, false)) {\n            Var oldVar = scopeToDeclareIn.getVar(variableName);\n            validator.expectUndeclaredVariable(\n                    sourceName, n, parent, oldVar, variableName, type);\n        } else {\n            if (!inferred) {\n                setDeferredType(n, type);\n            }\n            CompilerInput input = compiler.getInput(sourceName);\n            scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n            if (shouldDeclareOnGlobalThis) {\n                ObjectType globalThis =\n                        typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n                boolean isExtern = input.isExtern();\n                if (inferred) {\n                    globalThis.defineInferredProperty(variableName,\n                            type == null ?\n                                    getNativeType(JSTypeNative.NO_TYPE) :\n                                    type,\n                            isExtern);\n                } else {\n                    globalThis.defineDeclaredProperty(variableName, type, isExtern);\n                }\n            }\n\n            // If we're in the global scope, also declare var.prototype\n            // in the scope chain.\n            if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n                FunctionType fnType = (FunctionType) type;\n                if (fnType.isConstructor() || fnType.isInterface()) {\n                    FunctionType superClassCtor = fnType.getSuperClassConstructor();\n                    scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                            fnType.getPrototype(), compiler.getInput(sourceName),\n                            // Declared iff there's an explicit supertype.\n                            superClassCtor == null ||\n                                    superClassCtor.getInstanceType()\n                                            .equals(\n                                            typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_TYPE)));\n                }\n            }\n        }\n    }\n\n    private void setDeferredType(Node n, JSType type) {}\n    private JSType getNativeType(JSTypeNative type) {\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..96f38a6d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,110 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n+import com.google.common.base.Preconditions;\n+import com.google.javascript.jscomp.Compiler;\n+import com.google.javascript.jscomp.CompilerInput;\n+import com.google.javascript.jscomp.JSError;\n+import com.google.javascript.jscomp.Scope;\n+import com.google.javascript.jscomp.Validator;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.FunctionType;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.JSTypeNative;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+import com.google.javascript.rhino.jstype.TypeRegistry;\n+import com.google.javascript.rhino.jstype.Var;\n+\n+public class AutomatedProgramRepairTool {\n+    \n+    private Compiler compiler;\n+    private Scope scope;\n+    private TypeRegistry typeRegistry;\n+    private String sourceName;\n+    private JSError[] warnings;\n+    private Validator validator;\n+\n     void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n-      }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n+        Preconditions.checkArgument(inferred || type != null);\n+\n+        // Only allow declarations of NAMEs and qualified names.\n+        boolean shouldDeclareOnGlobalThis = false;\n+        if (n.getType() == Token.NAME) {\n+            Preconditions.checkArgument(\n+                    parent.getType() == Token.FUNCTION ||\n+                            parent.getType() == Token.VAR ||\n+                            parent.getType() == Token.LP ||\n+                            parent.getType() == Token.CATCH);\n+            shouldDeclareOnGlobalThis = scope.isGlobal() &&\n+                    (parent.getType() == Token.VAR ||\n+                            parent.getType() == Token.FUNCTION);\n+        } else {\n+            Preconditions.checkArgument(\n+                    n.getType() == Token.GETPROP &&\n+                            (parent.getType() == Token.ASSIGN ||\n+                                    parent.getType() == Token.EXPR_RESULT));\n+        }\n+        String variableName = n.getQualifiedName();\n+        Preconditions.checkArgument(!variableName.isEmpty());\n \n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n+        // If n is a property, then we should really declare it in the\n+        // scope where the root object appears. This helps out people\n+        // who declare \"global\" names in an anonymous namespace.\n+        Scope scopeToDeclareIn = scope;\n \n-        // don't try to declare in the global scope if there's\n+        // Don't try to declare in the global scope if there's\n         // already a symbol there with this name.\n+        // Declared in closest scope?\n+        if (scopeToDeclareIn.isDeclared(variableName, false)) {\n+            Var oldVar = scopeToDeclareIn.getVar(variableName);\n+            validator.expectUndeclaredVariable(\n+                    sourceName, n, parent, oldVar, variableName, type);\n+        } else {\n+            if (!inferred) {\n+                setDeferredType(n, type);\n+            }\n+            CompilerInput input = compiler.getInput(sourceName);\n+            scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+\n+            if (shouldDeclareOnGlobalThis) {\n+                ObjectType globalThis =\n+                        typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+                boolean isExtern = input.isExtern();\n+                if (inferred) {\n+                    globalThis.defineInferredProperty(variableName,\n+                            type == null ?\n+                                    getNativeType(JSTypeNative.NO_TYPE) :\n+                                    type,\n+                            isExtern);\n+                } else {\n+                    globalThis.defineDeclaredProperty(variableName, type, isExtern);\n+                }\n+            }\n \n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n+            // If we're in the global scope, also declare var.prototype\n+            // in the scope chain.\n+            if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n+                FunctionType fnType = (FunctionType) type;\n+                if (fnType.isConstructor() || fnType.isInterface()) {\n+                    FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+                    scopeToDeclareIn.declare(variableName + \".prototype\", n,\n+                            fnType.getPrototype(), compiler.getInput(sourceName),\n+                            // Declared iff there's an explicit supertype.\n+                            superClassCtor == null ||\n+                                    superClassCtor.getInstanceType()\n+                                            .equals(\n+                                            typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_TYPE)));\n+                }\n+            }\n         }\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n-      }\n+    private void setDeferredType(Node n, JSType type) {}\n+    private JSType getNativeType(JSTypeNative type) {\n+        return null;\n     }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}