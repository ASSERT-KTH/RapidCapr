{
    "patch": "      Node curArg = argList.getFirstChild();\n      while (curArg != null) {\n        String name = curArg.getString();\n        if (!referenced.contains(fnScope.getVar(name))) {\n          NodeUtil.removeChild(argList, curArg);\n          compiler.reportCodeChange();\n        } else {\n          // Advanced mode requires all parameters to be present for injection\n          if (options.shouldKeepFunctionArgs()) {\n            curArg.setString(\"\");\n          }\n          curArg = curArg.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e3f5a02e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node curArg = argList.getFirstChild();\n+      while (curArg != null) {\n+        String name = curArg.getString();\n+        if (!referenced.contains(fnScope.getVar(name))) {\n+          NodeUtil.removeChild(argList, curArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          // Advanced mode requires all parameters to be present for injection\n+          if (options.shouldKeepFunctionArgs()) {\n+            curArg.setString(\"\");\n+          }\n+          curArg = curArg.getNext();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}