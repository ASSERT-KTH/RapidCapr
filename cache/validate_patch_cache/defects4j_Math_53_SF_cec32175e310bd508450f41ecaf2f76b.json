{
    "patch": "    public Complex add(Complex rhs) throws NullArgumentException {\n        MathUtils.checkNotNull(rhs);\n        double newReal = this.real + rhs.getReal();\n        double newImaginary = this.imaginary + rhs.getImaginary();\n        Complex result;\n        if (Double.isNaN(newReal) || Double.isNaN(newImaginary)) {\n            result = createComplex(Double.NaN, Double.NaN);\n        } else if (Double.isInfinite(newReal) && Double.isInfinite(newImaginary)) {\n            double sign = (this.real >= 0) ? 1.0 : -1.0;\n            result = createComplex(Double.POSITIVE_INFINITY * sign, Double.POSITIVE_INFINITY * sign);\n        } else if (Double.isInfinite(newReal)) {\n            result = createComplex(newReal, rhs.getImaginary() + this.imaginary);\n        } else if (Double.isInfinite(newImaginary)) {\n            result = createComplex(rhs.getReal() + this.real, newImaginary);\n        } else {\n            result = createComplex(newReal, newImaginary);\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..99e2fed6f 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -147,11 +147,24 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n      * @return the complex number sum\n      * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs)\n-        throws NullArgumentException {\n+    public Complex add(Complex rhs) throws NullArgumentException {\n         MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n+        double newReal = this.real + rhs.getReal();\n+        double newImaginary = this.imaginary + rhs.getImaginary();\n+        Complex result;\n+        if (Double.isNaN(newReal) || Double.isNaN(newImaginary)) {\n+            result = createComplex(Double.NaN, Double.NaN);\n+        } else if (Double.isInfinite(newReal) && Double.isInfinite(newImaginary)) {\n+            double sign = (this.real >= 0) ? 1.0 : -1.0;\n+            result = createComplex(Double.POSITIVE_INFINITY * sign, Double.POSITIVE_INFINITY * sign);\n+        } else if (Double.isInfinite(newReal)) {\n+            result = createComplex(newReal, rhs.getImaginary() + this.imaginary);\n+        } else if (Double.isInfinite(newImaginary)) {\n+            result = createComplex(rhs.getReal() + this.real, newImaginary);\n+        } else {\n+            result = createComplex(newReal, newImaginary);\n+        }\n+        return result;\n     }\n \n     /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}