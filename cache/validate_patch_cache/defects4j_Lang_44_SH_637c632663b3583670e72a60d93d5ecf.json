{
    "patch": "        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear \n            // to be in specification of class. OS X Java parses it to \n            // a wrong value.\n            return null;\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }\n        try {\n            return createBigDecimal(val);\n        } catch (NumberFormatException ex) {\n            // empty catch\n        }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..5063f6af 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -149,6 +149,21 @@ public final class NumberUtils {\n             // a wrong value.\n             return null;\n         }\n+        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+            return createInteger(val);\n+        }\n+        try {\n+            return createBigDecimal(val);\n+        } catch (NumberFormatException ex) {\n+            // empty catch\n+        }\n+        if (val.startsWith(\"--\")) {\n+            // this is protection for poorness in java.lang.BigDecimal.\n+            // it accepts this as a legal value, but it does not appear \n+            // to be in specification of class. OS X Java parses it to \n+            // a wrong value.\n+            return null;\n+        }\n         if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n             return createInteger(val);\n         }   ",
    "result_reason": "junit.framework.AssertionFailedError: createNumber(String) 1 failed expected:<1234.5> but was:<1234.5>",
    "test_result": "FAIL"
}