{
    "patch": "    private DateTimeZone selectTimeZone(Chronology chrono) {\n        if (iZone != null) {\n            return iZone;\n        } else if (chrono instanceof GregorianChronology) {\n            // Defaults to historical GMT+0 until cutover\n            return DateTimeZone.UTC;\n        } else {\n            return chrono.getZone();\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..bd188cb0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,16 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+    private DateTimeZone selectTimeZone(Chronology chrono) {\n+        if (iZone != null) {\n+            return iZone;\n+        } else if (chrono instanceof GregorianChronology) {\n+            // Defaults to historical GMT+0 until cutover\n+            return DateTimeZone.UTC;\n+        } else {\n+            return chrono.getZone();\n+        }\n+    }\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}