{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    int millis = getMillis();\n    int seconds = getSeconds();\n    int minutes = getMinutes();\n    int hours = getHours();\n    int days = getDays();\n    int months = getMonths();\n    int years = getYears();\n\n    // Normalize months first\n    if (type.isSupported(DurationFieldType.months())) {\n        months += years * 12;\n        years = 0;\n    }\n    if (type.isSupported(DurationFieldType.years())) {\n        years += months / 12;\n        months = months % 12;\n    }\n\n    // Normalize weeks and days\n    if (type.isSupported(DurationFieldType.weeks())) {\n        days += (weeks * 7);\n        weeks = 0;\n    }\n    if (type.isSupported(DurationFieldType.days())) {\n        weeks += days / 7;\n        days = days % 7;\n    }\n\n    // Normalize hours, minutes, seconds, millis\n    if (type.isSupported(DurationFieldType.hours())) {\n        int delta = hours + (days * 24);\n        days = delta / 24;\n        hours = delta % 24;\n    }\n    if (type.isSupported(DurationFieldType.minutes())) {\n        int delta = minutes + (hours * 60);\n        hours = delta / 60;\n        minutes = delta % 60;\n    }\n    if (type.isSupported(DurationFieldType.seconds())) {\n        int delta = seconds + (minutes * 60);\n        minutes = delta / 60;\n        seconds = delta % 60;\n    }\n    if (type.isSupported(DurationFieldType.millis())) {\n        int delta = millis + (seconds * 1000);\n        seconds = delta / 60;\n        millis = delta % 1000;\n        int extraSeconds = seconds / 60;\n        if (extraSeconds > 0) {\n            minutes += extraSeconds;\n            seconds = seconds % 60;\n        }\n    }\n\n    // Create and return the normalized Period\n    return new Period(years, months, weeks, days, hours, minutes, seconds, millis, type).normalizedStandard();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..15982854 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,66 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    int millis = getMillis();\n+    int seconds = getSeconds();\n+    int minutes = getMinutes();\n+    int hours = getHours();\n+    int days = getDays();\n+    int months = getMonths();\n+    int years = getYears();\n+\n+    // Normalize months first\n+    if (type.isSupported(DurationFieldType.months())) {\n+        months += years * 12;\n+        years = 0;\n+    }\n+    if (type.isSupported(DurationFieldType.years())) {\n+        years += months / 12;\n+        months = months % 12;\n+    }\n+\n+    // Normalize weeks and days\n+    if (type.isSupported(DurationFieldType.weeks())) {\n+        days += (weeks * 7);\n+        weeks = 0;\n+    }\n+    if (type.isSupported(DurationFieldType.days())) {\n+        weeks += days / 7;\n+        days = days % 7;\n+    }\n+\n+    // Normalize hours, minutes, seconds, millis\n+    if (type.isSupported(DurationFieldType.hours())) {\n+        int delta = hours + (days * 24);\n+        days = delta / 24;\n+        hours = delta % 24;\n+    }\n+    if (type.isSupported(DurationFieldType.minutes())) {\n+        int delta = minutes + (hours * 60);\n+        hours = delta / 60;\n+        minutes = delta % 60;\n+    }\n+    if (type.isSupported(DurationFieldType.seconds())) {\n+        int delta = seconds + (minutes * 60);\n+        minutes = delta / 60;\n+        seconds = delta % 60;\n+    }\n+    if (type.isSupported(DurationFieldType.millis())) {\n+        int delta = millis + (seconds * 1000);\n+        seconds = delta / 60;\n+        millis = delta % 1000;\n+        int extraSeconds = seconds / 60;\n+        if (extraSeconds > 0) {\n+            minutes += extraSeconds;\n+            seconds = seconds % 60;\n         }\n-        return result;\n     }\n \n+    // Create and return the normalized Period\n+    return new Period(years, months, weeks, days, hours, minutes, seconds, millis, type).normalizedStandard();\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}