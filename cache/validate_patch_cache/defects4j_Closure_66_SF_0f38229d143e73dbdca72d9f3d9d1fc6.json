{
    "patch": "import com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport java.io.IOException;\n\npublic class MyProgram {\n\n  /**\n   * Calculates the percentage of typed characters in a JSON string.\n   *\n   * @param jsonStr JSON string with character data.\n   * @return Percentage of typed characters in the JSON string.\n   */\n  public static double getTypedPercent(String jsonStr) {\n    double percent = 0.0;\n    ObjectMapper mapper = new ObjectMapper();\n    try {\n      JsonNode root = mapper.readTree(jsonStr);\n      int typedCount = root.path(\"stats\").path(\"typed\").asInt();\n      int totalCount = root.path(\"stats\").path(\"total\").asInt();\n      percent = ((double) typedCount / totalCount) * 100;\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    return percent;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..eb76ae2a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+\n+public class MyProgram {\n+\n+  /**\n+   * Calculates the percentage of typed characters in a JSON string.\n+   *\n+   * @param jsonStr JSON string with character data.\n+   * @return Percentage of typed characters in the JSON string.\n+   */\n+  public static double getTypedPercent(String jsonStr) {\n+    double percent = 0.0;\n+    ObjectMapper mapper = new ObjectMapper();\n+    try {\n+      JsonNode root = mapper.readTree(jsonStr);\n+      int typedCount = root.path(\"stats\").path(\"typed\").asInt();\n+      int totalCount = root.path(\"stats\").path(\"total\").asInt();\n+      percent = ((double) typedCount / totalCount) * 100;\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+    return percent;\n+  }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}