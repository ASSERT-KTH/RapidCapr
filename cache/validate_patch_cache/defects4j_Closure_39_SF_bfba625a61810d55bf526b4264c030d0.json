{
    "patch": "private boolean canBeCalled(Set<ObjectType> visited) {\n  // Avoid infinite recursion on recursive types.\n  if (visited.contains(this)) {\n    return true;\n  }\n\n  visited.add(this);\n\n  // Check if any properties can be called.\n  for (ObjectType current = this; current != null; current = current.getImplicitPrototype()) {\n    for (String propertyName : current.getOwnPropertyNames()) {\n      JSType propertyType = current.getPropertyType(propertyName);\n      if (propertyType.isFunctionType() &&\n          ((FunctionType) propertyType).canBeCalled(visited)) {\n        return true;\n      } else if (propertyType.isPrototypeObject()) {\n        ObjectType prototypeObjectType = (ObjectType) propertyType;\n        if (prototypeObjectType.canBeCalled(visited)) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\n@Override String toStringHelper(boolean forAnnotations, Set<ObjectType> visited) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else if (prettyPrint) {\n    // Prevent infinite recursion on recursive types.\n    if (visited.contains(this)) {\n      return \"{...}\";\n    }\n    visited.add(this);\n\n    // Use a tree set so that the properties are sorted.\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType() &&\n             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n\n    int i = 0;\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n\n      sb.append(property);\n      sb.append(\": \");\n\n      JSType propertyType = getPropertyType(property);\n      if (propertyType.isObject()) {\n        ObjectType objectType = (ObjectType) propertyType;\n        if (objectType.isRecordType()) {\n          sb.append(objectType.toStringHelper(forAnnotations, visited));\n        } else if (objectType.canBeCalled(visited)) {\n          sb.append(\"function\");\n        } else {\n          sb.append(objectType.toString());\n        }\n      } else {\n        sb.append(propertyType.toString());\n      }\n\n      ++i;\n      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        sb.append(\", ...\");\n        break;\n      }\n    }\n\n    sb.append(\"}\");\n\n    prettyPrint = true;\n\n    visited.remove(this);\n\n    return sb.toString();\n  } else {\n    return \"{...}\";\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..8de7f71c 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,96 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n+private boolean canBeCalled(Set<ObjectType> visited) {\n+  // Avoid infinite recursion on recursive types.\n+  if (visited.contains(this)) {\n+    return true;\n   }\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n+  visited.add(this);\n+\n+  // Check if any properties can be called.\n+  for (ObjectType current = this; current != null; current = current.getImplicitPrototype()) {\n+    for (String propertyName : current.getOwnPropertyNames()) {\n+      JSType propertyType = current.getPropertyType(propertyName);\n+      if (propertyType.isFunctionType() &&\n+          ((FunctionType) propertyType).canBeCalled(visited)) {\n+        return true;\n+      } else if (propertyType.isPrototypeObject()) {\n+        ObjectType prototypeObjectType = (ObjectType) propertyType;\n+        if (prototypeObjectType.canBeCalled(visited)) {\n+          return true;\n+        }\n       }\n+    }\n+  }\n \n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n+  return false;\n+}\n \n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n+@Override String toStringHelper(boolean forAnnotations, Set<ObjectType> visited) {\n+  if (hasReferenceName()) {\n+    return getReferenceName();\n+  } else if (prettyPrint) {\n+    // Prevent infinite recursion on recursive types.\n+    if (visited.contains(this)) {\n+      return \"{...}\";\n+    }\n+    visited.add(this);\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+    // Use a tree set so that the properties are sorted.\n+    Set<String> propertyNames = Sets.newTreeSet();\n+    for (ObjectType current = this;\n+         current != null && !current.isNativeObjectType() &&\n+             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+         current = current.getImplicitPrototype()) {\n+      propertyNames.addAll(current.getOwnPropertyNames());\n+    }\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"{\");\n+\n+    int i = 0;\n+    for (String property : propertyNames) {\n+      if (i > 0) {\n+        sb.append(\", \");\n       }\n \n-      sb.append(\"}\");\n+      sb.append(property);\n+      sb.append(\": \");\n+\n+      JSType propertyType = getPropertyType(property);\n+      if (propertyType.isObject()) {\n+        ObjectType objectType = (ObjectType) propertyType;\n+        if (objectType.isRecordType()) {\n+          sb.append(objectType.toStringHelper(forAnnotations, visited));\n+        } else if (objectType.canBeCalled(visited)) {\n+          sb.append(\"function\");\n+        } else {\n+          sb.append(objectType.toString());\n+        }\n+      } else {\n+        sb.append(propertyType.toString());\n+      }\n \n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n+      ++i;\n+      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+        sb.append(\", ...\");\n+        break;\n+      }\n     }\n+\n+    sb.append(\"}\");\n+\n+    prettyPrint = true;\n+\n+    visited.remove(this);\n+\n+    return sb.toString();\n+  } else {\n+    return \"{...}\";\n   }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: PrototypeObjectType is not abstract and does not override abstract method toStringHelper(boolean) in JSType",
    "test_result": "ERROR"
}