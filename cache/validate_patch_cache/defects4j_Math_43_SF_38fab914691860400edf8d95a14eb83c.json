{
    "patch": "public void addValue(double value) {\n    double valueCount = 1.0;\n\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    // If mean, variance or geomean have been overridden, need to increment these\n    if (meanImpl instanceof StorelessUnivariateStatistic) {\n        ((StorelessUnivariateStatistic) meanImpl).increment(value);\n        valueCount += ((StorelessUnivariateStatistic) meanImpl).getN();\n    } else if (meanImpl instanceof UnivariateStatistic) {\n        ((UnivariateStatistic) meanImpl).increment(value);\n    }\n\n    if (varianceImpl instanceof StorelessUnivariateStatistic) {\n        ((StorelessUnivariateStatistic) varianceImpl).increment(value);\n        valueCount += ((StorelessUnivariateStatistic) varianceImpl).getN();\n    } else if (varianceImpl instanceof UnivariateStatistic) {\n        ((UnivariateStatistic) varianceImpl).increment(value);\n    }\n\n    valueCount += n;\n    double oldMean = meanImpl.getResult();\n    double delta = value - oldMean;\n    double newMean = oldMean + delta / valueCount;\n    sumsqImpl.increment(delta * delta * n / valueCount);\n    n++;\n\n    if (valueCount <= 1.0) {\n        return;\n    }\n\n    // Compute new variance\n    double oldVariance = varianceImpl.getResult();\n    double newVariance = (oldVariance * (n - 1.0) + delta * delta / valueCount + sumsqImpl.getResult() - 2 * delta * sumImpl.getResult() / valueCount) / n;\n\n    if (Double.isNaN(newVariance) || Double.isInfinite(newVariance)) {\n        newVariance = 0.0;\n    }\n\n    // Set new mean and variance\n    if (meanImpl instanceof UnivariateStatistic) {\n        ((UnivariateStatistic) meanImpl).clear();\n        ((UnivariateStatistic) meanImpl).increment(newMean);\n    }\n    if (varianceImpl instanceof UnivariateStatistic) {\n        ((UnivariateStatistic) varianceImpl).clear();\n        ((UnivariateStatistic) varianceImpl).increment(newVariance);\n    }\n    if (geoMeanImpl instanceof StorelessUnivariateStatistic) {\n        ((StorelessUnivariateStatistic) geoMeanImpl).increment(Math.log(value));\n    } else if (geoMeanImpl instanceof UnivariateStatistic) {\n        ((UnivariateStatistic) geoMeanImpl).increment(value);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..92f2a3453 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,66 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n-        }\n-        n++;\n+public void addValue(double value) {\n+    double valueCount = 1.0;\n+\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    // If mean, variance or geomean have been overridden, need to increment these\n+    if (meanImpl instanceof StorelessUnivariateStatistic) {\n+        ((StorelessUnivariateStatistic) meanImpl).increment(value);\n+        valueCount += ((StorelessUnivariateStatistic) meanImpl).getN();\n+    } else if (meanImpl instanceof UnivariateStatistic) {\n+        ((UnivariateStatistic) meanImpl).increment(value);\n+    }\n+\n+    if (varianceImpl instanceof StorelessUnivariateStatistic) {\n+        ((StorelessUnivariateStatistic) varianceImpl).increment(value);\n+        valueCount += ((StorelessUnivariateStatistic) varianceImpl).getN();\n+    } else if (varianceImpl instanceof UnivariateStatistic) {\n+        ((UnivariateStatistic) varianceImpl).increment(value);\n+    }\n+\n+    valueCount += n;\n+    double oldMean = meanImpl.getResult();\n+    double delta = value - oldMean;\n+    double newMean = oldMean + delta / valueCount;\n+    sumsqImpl.increment(delta * delta * n / valueCount);\n+    n++;\n+\n+    if (valueCount <= 1.0) {\n+        return;\n     }\n \n+    // Compute new variance\n+    double oldVariance = varianceImpl.getResult();\n+    double newVariance = (oldVariance * (n - 1.0) + delta * delta / valueCount + sumsqImpl.getResult() - 2 * delta * sumImpl.getResult() / valueCount) / n;\n+\n+    if (Double.isNaN(newVariance) || Double.isInfinite(newVariance)) {\n+        newVariance = 0.0;\n+    }\n+\n+    // Set new mean and variance\n+    if (meanImpl instanceof UnivariateStatistic) {\n+        ((UnivariateStatistic) meanImpl).clear();\n+        ((UnivariateStatistic) meanImpl).increment(newMean);\n+    }\n+    if (varianceImpl instanceof UnivariateStatistic) {\n+        ((UnivariateStatistic) varianceImpl).clear();\n+        ((UnivariateStatistic) varianceImpl).increment(newVariance);\n+    }\n+    if (geoMeanImpl instanceof StorelessUnivariateStatistic) {\n+        ((StorelessUnivariateStatistic) geoMeanImpl).increment(Math.log(value));\n+    } else if (geoMeanImpl instanceof UnivariateStatistic) {\n+        ((UnivariateStatistic) geoMeanImpl).increment(value);\n+    }\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}