{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    if (dec.getRealEigenvalues().length == m.getRowDimension()) {\n        // input matrix is diagonalizable\n        final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n        final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(\n            Arrays.stream(dec.getRealEigenvalues()).map(FastMath::sqrt).toArray());\n        final RealMatrix v = dec.getV();\n        final RealMatrix vInv = new LUDecomposition(v).getSolver().getInverse();\n        return v.multiply(sqrtD).multiply(vInv);\n    } else {\n        // input matrix is not diagonalizable\n        return dec.getSquareRoot();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..e4090f67b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    if (dec.getRealEigenvalues().length == m.getRowDimension()) {\n+        // input matrix is diagonalizable\n+        final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n+        final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(\n+            Arrays.stream(dec.getRealEigenvalues()).map(FastMath::sqrt).toArray());\n+        final RealMatrix v = dec.getV();\n+        final RealMatrix vInv = new LUDecomposition(v).getSolver().getInverse();\n+        return v.multiply(sqrtD).multiply(vInv);\n+    } else {\n+        // input matrix is not diagonalizable\n+        return dec.getSquareRoot();\n     }\n }\n+}",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}