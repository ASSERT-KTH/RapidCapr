{
    "patch": "} else if (n.isGetterDef()) {\n      Node name = n.getFirstChild();\n      if (parent.isAssign()) {\n        warnings.add(JSError.make(n, GETTER_WITH_SETTER, name.getQualifiedName()));\n        return;\n      }\n      Node propVar = Node.newString(Token.GETTER_DEF, name.getString());\n      Node object = NodeUtil.newQName(compiler, compiler.getOptions().getClosurePassModuleExport(), true);\n      Node enclosingFunction = NodeUtil.getEnclosingFunction(n);\n      if (enclosingFunction == null) {\n        objectType.addProperty(propVar);\n      } else {\n        Node block = enclosingFunction.getLastChild().getLastChild();\n        block.addChildToFront(IR.var(propVar, IR.objectlit()).useSourceInfoIfMissingFrom(name));\n      }\n      object.putBooleanProp(Node.MODULE_EXPORT, true);\n      NodeUtil.setRequiresModuleRuntime(compiler, object);\n      n.replaceWith(object);\n    } else if (n.getJSType() != null && parent.isAssign()) {\n      if (n.isFunction()) {\n        return;\n      } else {\n        warnings.add(JSError.make(n, AMBIGUOUS_FUNCTION_DECLARATION, n.getQualifiedName()));\n      }  \n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}