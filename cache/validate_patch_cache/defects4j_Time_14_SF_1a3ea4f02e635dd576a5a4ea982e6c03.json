{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean isLeapDay = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            DateTimeField field = partial.getFieldType(i).getField(iChronology);\n            int value = values[i];\n            if (field.getType() == DateTimeFieldType.monthOfYear() && value == 2 && iChronology.isLeapYear(values[0])) {\n                // Original date is on a leap day in a leap year\n                isLeapDay = true;\n                value = 3; // Move to March 1st to avoid invalid date\n            }\n            instant = field.set(instant, value);\n        }\n        instant = add(instant, valueToAdd);\n        int[] result = iChronology.get(partial, instant);\n        if (isLeapDay && result[1] == 3 && result[2] == 1) { // Result is also a leap day in a leap year\n            result[2] = 29; // Adjust to February 29th\n        }\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..8b93d719 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,36 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean isLeapDay = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            DateTimeField field = partial.getFieldType(i).getField(iChronology);\n+            int value = values[i];\n+            if (field.getType() == DateTimeFieldType.monthOfYear() && value == 2 && iChronology.isLeapYear(values[0])) {\n+                // Original date is on a leap day in a leap year\n+                isLeapDay = true;\n+                value = 3; // Move to March 1st to avoid invalid date\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            instant = field.set(instant, value);\n         }\n+        instant = add(instant, valueToAdd);\n+        int[] result = iChronology.get(partial, instant);\n+        if (isLeapDay && result[1] == 3 && result[2] == 1) { // Result is also a leap day in a leap year\n+            result[2] = 29; // Adjust to February 29th\n+        }\n+        return result;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}