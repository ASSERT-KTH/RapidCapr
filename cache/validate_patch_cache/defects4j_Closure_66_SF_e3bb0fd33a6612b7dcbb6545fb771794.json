{
    "patch": "public static double getTypedPercent(String js) throws JSONException {\n    JSONArray objects = new JSONArray(js);\n    int numTyped = 0;\n    int total = objects.length();\n    for (int i = 0; i < total; i++) {\n        JSONObject obj = objects.getJSONObject(i);\n        if (obj.has(\"type\") && obj.getString(\"type\").equals(\"typed\")) {\n            numTyped++;\n        }\n    }\n    return (double) numTyped / total * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..59d8527b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) throws JSONException {\n+    JSONArray objects = new JSONArray(js);\n+    int numTyped = 0;\n+    int total = objects.length();\n+    for (int i = 0; i < total; i++) {\n+        JSONObject obj = objects.getJSONObject(i);\n+        if (obj.has(\"type\") && obj.getString(\"type\").equals(\"typed\")) {\n+            numTyped++;\n+        }\n+    }\n+    return (double) numTyped / total * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}