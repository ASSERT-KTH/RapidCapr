{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    \n    // Fix: Create a set to store referenced vars\n    Set<Node> referencedVars = Sets.newHashSet();\n    \n    // Fix: Add referenced vars before stripping unused args\n    for (Node referencedNode : referenced) {\n      Var var = fnScope.getVar(referencedNode.getString());\n      if (var.getNameNode().getParent() == argList) {\n        referencedVars.add(var.getNameNode());\n      }\n    }\n    \n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          // Fix: Check the renamed/rementioned vars in referencedVars set.\n          Optional<Node> renamedVar = referencedVars.stream().filter(v -> \n            v.getString().equals(lastArg.getString())).findFirst();\n          Optional<Node> rementionedVar = referencedVars.stream().filter(v ->\n              v.getString().equals(var.getNameNode().getString())).findFirst();\n          if (renamedVar.isPresent()) {\n            NodeFunctionArgsRemover.removeUnusedReferences(\n                var.getNameNode(), renamedVar.get(), compiler, fnScope);\n          } else if (rementionedVar.isPresent()) {\n            NodeFunctionArgsRemover.removeUnusedReferences(\n                var.getNameNode(), rementionedVar.get(), compiler, fnScope);\n          } else {\n            compiler.reportCodeChange();\n          }\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4b287b7a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,57 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    \n+    // Fix: Create a set to store referenced vars\n+    Set<Node> referencedVars = Sets.newHashSet();\n+    \n+    // Fix: Add referenced vars before stripping unused args\n+    for (Node referencedNode : referenced) {\n+      Var var = fnScope.getVar(referencedNode.getString());\n+      if (var.getNameNode().getParent() == argList) {\n+        referencedVars.add(var.getNameNode());\n+      }\n+    }\n+    \n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          // Fix: Check the renamed/rementioned vars in referencedVars set.\n+          Optional<Node> renamedVar = referencedVars.stream().filter(v -> \n+            v.getString().equals(lastArg.getString())).findFirst();\n+          Optional<Node> rementionedVar = referencedVars.stream().filter(v ->\n+              v.getString().equals(var.getNameNode().getString())).findFirst();\n+          if (renamedVar.isPresent()) {\n+            NodeFunctionArgsRemover.removeUnusedReferences(\n+                var.getNameNode(), renamedVar.get(), compiler, fnScope);\n+          } else if (rementionedVar.isPresent()) {\n+            NodeFunctionArgsRemover.removeUnusedReferences(\n+                var.getNameNode(), rementionedVar.get(), compiler, fnScope);\n+          } else {\n+            compiler.reportCodeChange();\n+          }\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}