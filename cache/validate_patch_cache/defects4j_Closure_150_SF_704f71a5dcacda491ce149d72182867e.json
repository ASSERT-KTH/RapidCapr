{
    "patch": "@Override \npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isScript()) {\n        // Set current file to source name metadata.\n        this.currentFile = n.getSourceFileName();\n    }\n\n    if (n.isCall()) {\n        // Handle function calls.\n        handleFunctionCall(n, parent);\n    } else if (n.isFunction() && parent.isScript()) {\n        // Define a declared function.\n        defineDeclaredFunction(n, parent);\n    } else if (n.isFunction() && parent.isAssign()) {\n        // Define a function expression.\n        defineFunctionExpression(n, parent);\n    } else if (n.isCatch()) {\n        // Define a catch variable.\n        defineCatch(n, parent);\n    } else if (n.isVar()) {\n        // Define variables.\n        defineVar(n, parent);\n    } else if (n.isExprResult() && n.getFirstChild().isAssign()) {\n        // Handle object literal typed fields.\n        attachTypeToObjLitValue(n.getFirstChild().getLastChild());\n    }\n    \n    // Attach literal types.\n    attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..c5e668e0 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,36 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+@Override \n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.isScript()) {\n+        // Set current file to source name metadata.\n+        this.currentFile = n.getSourceFileName();\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    if (n.isCall()) {\n+        // Handle function calls.\n+        handleFunctionCall(n, parent);\n+    } else if (n.isFunction() && parent.isScript()) {\n+        // Define a declared function.\n+        defineDeclaredFunction(n, parent);\n+    } else if (n.isFunction() && parent.isAssign()) {\n+        // Define a function expression.\n+        defineFunctionExpression(n, parent);\n+    } else if (n.isCatch()) {\n+        // Define a catch variable.\n+        defineCatch(n, parent);\n+    } else if (n.isVar()) {\n+        // Define variables.\n+        defineVar(n, parent);\n+    } else if (n.isExprResult() && n.getFirstChild().isAssign()) {\n+        // Handle object literal typed fields.\n+        attachTypeToObjLitValue(n.getFirstChild().getLastChild());\n     }\n+    \n+    // Attach literal types.\n+    attachLiteralTypes(n);\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}