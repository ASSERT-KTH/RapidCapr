{
    "patch": "public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n        return false;\n    }\n    final int length = sequence.length();\n    final int searchLength = searchCharacters.length;\n    if (searchLength == 1) {\n        final char searchChar = searchCharacters[0];\n        for (int i = 0; i < length; i++) {\n            if (sequence.charAt(i) == searchChar) {\n                return true;\n            }\n        }\n    } else if (searchLength == 2 && Character.isSurrogatePair(searchCharacters[0], searchCharacters[1])) {\n        final int cp = Character.toCodePoint(searchCharacters[0], searchCharacters[1]);\n        for (int i = 0; i < length; i++) {\n            final int charAt = Character.codePointAt(sequence, i);\n            if (charAt == cp) {\n                return true;\n            }\n            i += Character.charCount(charAt) - 1;\n        }\n    } else {\n        final Set<Integer> set = new HashSet<>(searchLength);\n        for (final char c : searchCharacters) {\n            set.add(Character.toIntExact(c));\n        }\n        final int[] codePoints = toCodePoints(sequence);\n        for (final int codePoint : codePoints) {\n            if (set.contains(codePoint)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean isEmpty(final CharSequence cs) {\n    return cs == null || cs.length() == 0;\n}\n\nprivate static int[] toCodePoints(final CharSequence seq) {\n    final int length = seq.length();\n    final int[] dest = new int[length];\n    int offset = 0;\n    for (int i = 0; i < length; ) {\n        final char ch = seq.charAt(i++);\n        if (Character.isHighSurrogate(ch) && i < length) {\n            final char ch2 = seq.charAt(i);\n            if (Character.isLowSurrogate(ch2)) {\n                dest[offset++] = Character.toCodePoint(ch, ch2);\n                i++;\n                continue;\n            }\n        }\n        dest[offset++] = ch;\n    }\n    if (offset == length) {\n        return dest;\n    }\n    return Arrays.copyOf(dest, offset);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..214bd5d6 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,68 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n+        return false;\n+    }\n+    final int length = sequence.length();\n+    final int searchLength = searchCharacters.length;\n+    if (searchLength == 1) {\n+        final char searchChar = searchCharacters[0];\n+        for (int i = 0; i < length; i++) {\n+            if (sequence.charAt(i) == searchChar) {\n+                return true;\n+            }\n+        }\n+    } else if (searchLength == 2 && Character.isSurrogatePair(searchCharacters[0], searchCharacters[1])) {\n+        final int cp = Character.toCodePoint(searchCharacters[0], searchCharacters[1]);\n+        for (int i = 0; i < length; i++) {\n+            final int charAt = Character.codePointAt(sequence, i);\n+            if (charAt == cp) {\n+                return true;\n+            }\n+            i += Character.charCount(charAt) - 1;\n+        }\n+    } else {\n+        final Set<Integer> set = new HashSet<>(searchLength);\n+        for (final char c : searchCharacters) {\n+            set.add(Character.toIntExact(c));\n+        }\n+        final int[] codePoints = toCodePoints(sequence);\n+        for (final int codePoint : codePoints) {\n+            if (set.contains(codePoint)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean isEmpty(final CharSequence cs) {\n+    return cs == null || cs.length() == 0;\n+}\n+\n+private static int[] toCodePoints(final CharSequence seq) {\n+    final int length = seq.length();\n+    final int[] dest = new int[length];\n+    int offset = 0;\n+    for (int i = 0; i < length; ) {\n+        final char ch = seq.charAt(i++);\n+        if (Character.isHighSurrogate(ch) && i < length) {\n+            final char ch2 = seq.charAt(i);\n+            if (Character.isLowSurrogate(ch2)) {\n+                dest[offset++] = Character.toCodePoint(ch, ch2);\n+                i++;\n+                continue;\n+            }\n+        }\n+        dest[offset++] = ch;\n+    }\n+    if (offset == length) {\n+        return dest;\n+    }\n+    return Arrays.copyOf(dest, offset);\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}