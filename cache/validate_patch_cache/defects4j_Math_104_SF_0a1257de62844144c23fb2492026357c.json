{
    "patch": "public static double regularizedGammaP(double a, double x, double accuracy) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1) {\n        return 1 - regularizedGammaQ(a, x, accuracy);\n    }\n\n    /* Series representation */\n    double series = regularizedGammaPSeries(a, x, accuracy);\n    double factor = Math.pow(x / a, a) * Math.exp(-x) / Gamma.gamma(a);\n\n    return factor * series;\n}\n\npublic static double regularizedGammaQ(double a, double x, double accuracy) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 1.0;\n    }\n\n    if (x < a + 1) {\n        return 1 - regularizedGammaP(a, x, accuracy);\n    }\n\n    /* Continued fraction representation */\n    double cf = regularizedGammaQCF(a, x, accuracy);\n    double factor = Math.pow(x / a, a) * Math.exp(-x) / Gamma.gamma(a);\n\n    return 1 - factor * cf;\n}\n\nprivate static double regularizedGammaPSeries(double a, double x, double accuracy) {\n    double term = a;\n    double sum = term;\n\n    for (int n = 1; sum != 0 && Math.abs(term) > Math.abs(sum) * accuracy; n++) {\n        term *= x / (a + n);\n        sum += term;\n    }\n\n    return sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n}\n\nprivate static double regularizedGammaQCF(double a, double x, double accuracy) {\n    double b0 = 0;\n    double b1 = 1;\n    double b2 = 1;\n    double a1 = x;\n    double a2 = x + 1 - a;\n    double d1 = 1 / (a1 - b1 * a);\n    double d2 = 1 / (a2 - b1 * a);\n    double i = 1;\n    double ai = i * (a - i);\n    double temp = b1 + d1 * b0;\n    double factor = ai / a + (x + a - 1) / a;\n    double b = temp * factor;\n    double error = 1;\n\n    while (Math.abs(b * error) > accuracy && i < MAX_ITERATIONS) {\n        ++i;\n        ai = i * (a - i);\n        double c1 = b2 + (a1 + a - 1) * b1 / a;\n        double c2 = b2 + (a2 + a - 1) * b1 / a;\n        d1 = 1 / (a1 - b1 * a);\n        d2 = 1 / (a2 - b1 * a);\n        b0 = b1;\n        b1 = b2;\n        b2 = temp = c2 * d2 - c1 * d1;\n        if (b2 != 0) {\n            temp = d2;\n            d2 = (c2 / b2) * d2;\n            d1 = (c1 / b2) * d1;\n            temp = factor;\n            factor = ai / a * factor + (x + a - i) / a;\n            b = temp * b2 * factor;\n            temp = error;\n            error = d1 + d2;\n            if (Math.abs(factor) > 1) {\n                temp = error;\n                error = b;\n                b = temp;\n            }\n        }\n    }\n\n    return b;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..db9e76260 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,102 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double accuracy) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1) {\n+        return 1 - regularizedGammaQ(a, x, accuracy);\n+    }\n+\n+    /* Series representation */\n+    double series = regularizedGammaPSeries(a, x, accuracy);\n+    double factor = Math.pow(x / a, a) * Math.exp(-x) / Gamma.gamma(a);\n+\n+    return factor * series;\n+}\n+\n+public static double regularizedGammaQ(double a, double x, double accuracy) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+\n+    if (x < a + 1) {\n+        return 1 - regularizedGammaP(a, x, accuracy);\n+    }\n+\n+    /* Continued fraction representation */\n+    double cf = regularizedGammaQCF(a, x, accuracy);\n+    double factor = Math.pow(x / a, a) * Math.exp(-x) / Gamma.gamma(a);\n+\n+    return 1 - factor * cf;\n+}\n+\n+private static double regularizedGammaPSeries(double a, double x, double accuracy) {\n+    double term = a;\n+    double sum = term;\n+\n+    for (int n = 1; sum != 0 && Math.abs(term) > Math.abs(sum) * accuracy; n++) {\n+        term *= x / (a + n);\n+        sum += term;\n+    }\n+\n+    return sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n+}\n+\n+private static double regularizedGammaQCF(double a, double x, double accuracy) {\n+    double b0 = 0;\n+    double b1 = 1;\n+    double b2 = 1;\n+    double a1 = x;\n+    double a2 = x + 1 - a;\n+    double d1 = 1 / (a1 - b1 * a);\n+    double d2 = 1 / (a2 - b1 * a);\n+    double i = 1;\n+    double ai = i * (a - i);\n+    double temp = b1 + d1 * b0;\n+    double factor = ai / a + (x + a - 1) / a;\n+    double b = temp * factor;\n+    double error = 1;\n+\n+    while (Math.abs(b * error) > accuracy && i < MAX_ITERATIONS) {\n+        ++i;\n+        ai = i * (a - i);\n+        double c1 = b2 + (a1 + a - 1) * b1 / a;\n+        double c2 = b2 + (a2 + a - 1) * b1 / a;\n+        d1 = 1 / (a1 - b1 * a);\n+        d2 = 1 / (a2 - b1 * a);\n+        b0 = b1;\n+        b1 = b2;\n+        b2 = temp = c2 * d2 - c1 * d1;\n+        if (b2 != 0) {\n+            temp = d2;\n+            d2 = (c2 / b2) * d2;\n+            d1 = (c1 / b2) * d1;\n+            temp = factor;\n+            factor = ai / a * factor + (x + a - i) / a;\n+            b = temp * b2 * factor;\n+            temp = error;\n+            error = d1 + d2;\n+            if (Math.abs(factor) > 1) {\n+                temp = error;\n+                error = b;\n+                b = temp;\n+            }\n+        }\n+    }\n+\n+    return b;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}