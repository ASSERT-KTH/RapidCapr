{
    "patch": "@Override\npublic ReturnValue execute(List<ReturnValue> args) {\n    if(args.isEmpty()){\n        return new ReturnValueImpl(Collections.emptyList());\n    }\n    ReturnValue listToFilterReturnValue = args.get(0);\n    List<?> listToFilter = (List<?>) listToFilterReturnValue.getValue();\n    if (listToFilter == null) {\n        return new ReturnValueImpl(Collections.emptyList());\n    }\n    Predicate<?> predicate = (Predicate<?>) args.get(1).getValue();\n    List<?> filteredList = listToFilter.stream().filter(predicate).collect(Collectors.toList());\n    return new ReturnValueImpl(filteredList);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}