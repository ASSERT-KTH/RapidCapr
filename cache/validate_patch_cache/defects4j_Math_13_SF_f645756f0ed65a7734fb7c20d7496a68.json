{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    try {\n        CholeskyDecomposition dec = new CholeskyDecomposition(m);\n        RealMatrix sqrt = dec.getL();\n        return sqrt.multiply(sqrt.transpose()); // L * L^T = (LL^T)^2 = m\n    } catch (Exception e) {\n        // Fall back to Eigen decomposition\n        EigenDecomposition dec = new EigenDecomposition(m);\n        RealMatrix eigenvalues = dec.getD();\n        RealMatrix eigenvectors = dec.getV();\n        RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n        for (int i = 0; i < n; i++) {\n            double d = eigenvalues.getEntry(i, i);\n            if (d < 0) {\n                throw new IllegalArgumentException(\"Matrix is not positive definite\");\n            }\n            sqrtEigenvalues.setEntry(i, i, Math.sqrt(d));\n        }\n        RealMatrix sqrt = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n        return sqrt;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..4a91cb3ee 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    try {\n+        CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+        RealMatrix sqrt = dec.getL();\n+        return sqrt.multiply(sqrt.transpose()); // L * L^T = (LL^T)^2 = m\n+    } catch (Exception e) {\n+        // Fall back to Eigen decomposition\n+        EigenDecomposition dec = new EigenDecomposition(m);\n+        RealMatrix eigenvalues = dec.getD();\n+        RealMatrix eigenvectors = dec.getV();\n+        RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n+        for (int i = 0; i < n; i++) {\n+            double d = eigenvalues.getEntry(i, i);\n+            if (d < 0) {\n+                throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+            }\n+            sqrtEigenvalues.setEntry(i, i, Math.sqrt(d));\n+        }\n+        RealMatrix sqrt = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n+        return sqrt;\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}