{
    "patch": "    if (offsetLocal != offsetAdjusted) {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal == nextAdjusted) {\n            int diff = offsetAdjusted - offsetLocal;\n            if ((instantLocal - nextLocal) >= diff * DateTimeConstants.MILLIS_PER_HOUR &&\n                (nextLocal - instantAdjusted) >= diff * DateTimeConstants.MILLIS_PER_HOUR)\n            {\n                return offsetLocal;\n            }\n        } else if (offsetLocal < offsetAdjusted) {\n            long prevLocal = previousTransition(instantAdjusted);\n            if (prevLocal == instantAdjusted - offsetLocal) {\n                // We are in a gap, return the earlier of the 2 offsets\n                return offsetLocal;\n            } else {\n                int offsetPrev = getOffset(prevLocal);\n                long next2Local = nextTransition(prevLocal);\n                if (next2Local == nextLocal) {\n                    int offsetPrev2 = getOffset(next2Local);\n                    if (offsetPrev2 > offsetPrev) {\n                        offsetPrev = offsetPrev2;\n                    }\n                }\n                if (offsetPrev < offsetLocal) {\n                    offsetPrev = offsetLocal;\n                }\n                if (offsetPrev >= offsetAdjusted) {\n                    return offsetPrev;\n                } else {\n                    return offsetAdjusted;\n                }\n            }\n        } else {\n            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n            int offsetPrev = getOffset(prevAdjusted);\n            long next2Adjusted = nextTransition(prevAdjusted);\n            if (next2Adjusted == nextAdjusted) {\n                int offsetPrev2 = getOffset(next2Adjusted);\n                if (offsetPrev2 < offsetAdjusted) {\n                    offsetPrev = offsetPrev2;\n                }\n            }\n            if (offsetPrev >= offsetLocal) {\n                return offsetPrev;\n            } else if (offsetPrev >= offsetAdjusted) {\n                return offsetLocal;\n            } else if ((nextAdjusted - instantLocal) > DateTimeConstants.MILLIS_PER_HOUR && (nextAdjusted - offsetPrev - instantLocal) > DateTimeConstants.MILLIS_PER_HOUR) {\n                return offsetAdjusted;\n            } else {\n                return offsetLocal;\n             }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..2a980cd1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,60 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+    if (offsetLocal != offsetAdjusted) {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal == nextAdjusted) {\n+            int diff = offsetAdjusted - offsetLocal;\n+            if ((instantLocal - nextLocal) >= diff * DateTimeConstants.MILLIS_PER_HOUR &&\n+                (nextLocal - instantAdjusted) >= diff * DateTimeConstants.MILLIS_PER_HOUR)\n+            {\n+                return offsetLocal;\n+            }\n+        } else if (offsetLocal < offsetAdjusted) {\n+            long prevLocal = previousTransition(instantAdjusted);\n+            if (prevLocal == instantAdjusted - offsetLocal) {\n+                // We are in a gap, return the earlier of the 2 offsets\n+                return offsetLocal;\n+            } else {\n+                int offsetPrev = getOffset(prevLocal);\n+                long next2Local = nextTransition(prevLocal);\n+                if (next2Local == nextLocal) {\n+                    int offsetPrev2 = getOffset(next2Local);\n+                    if (offsetPrev2 > offsetPrev) {\n+                        offsetPrev = offsetPrev2;\n+                    }\n+                }\n+                if (offsetPrev < offsetLocal) {\n+                    offsetPrev = offsetLocal;\n+                }\n+                if (offsetPrev >= offsetAdjusted) {\n+                    return offsetPrev;\n+                } else {\n+                    return offsetAdjusted;\n+                }\n+            }\n+        } else {\n+            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+            int offsetPrev = getOffset(prevAdjusted);\n+            long next2Adjusted = nextTransition(prevAdjusted);\n+            if (next2Adjusted == nextAdjusted) {\n+                int offsetPrev2 = getOffset(next2Adjusted);\n+                if (offsetPrev2 < offsetAdjusted) {\n+                    offsetPrev = offsetPrev2;\n+                }\n+            }\n+            if (offsetPrev >= offsetLocal) {\n+                return offsetPrev;\n+            } else if (offsetPrev >= offsetAdjusted) {\n+                return offsetLocal;\n+            } else if ((nextAdjusted - instantLocal) > DateTimeConstants.MILLIS_PER_HOUR && (nextAdjusted - offsetPrev - instantLocal) > DateTimeConstants.MILLIS_PER_HOUR) {\n+                return offsetAdjusted;\n+            } else {\n+                return offsetLocal;\n+             }\n+        }\n+    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}