{
    "patch": "public static double getTypedPercent(JsonObject obj) {\n    int typedCount = 0;\n    int totalCount = 0;\n    for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n        JsonObject field = entry.getValue().getAsJsonObject();\n        if (field.has(\"type\")) {\n            typedCount++;\n        }\n        totalCount++;\n    }\n    return (double) typedCount / totalCount * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..21a10b4d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonObject obj) {\n+    int typedCount = 0;\n+    int totalCount = 0;\n+    for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n+        JsonObject field = entry.getValue().getAsJsonObject();\n+        if (field.has(\"type\")) {\n+            typedCount++;\n+        }\n+        totalCount++;\n+    }\n+    return (double) typedCount / totalCount * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}