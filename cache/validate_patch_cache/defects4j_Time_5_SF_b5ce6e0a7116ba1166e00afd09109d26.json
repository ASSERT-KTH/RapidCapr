{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    long millis = getMillis() +\n        (((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND) +\n        (((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE) +\n        (((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR);\n\n    Period result;\n    int totalDays = DateTimeUtils\n        .getTotalDaysByField(years, months, weeks, days);\n    long totalMillis = DateTimeUtils\n        .getTotalMillisByField(years, months, weeks, days, millis);\n\n    // Normalize years and months\n    int normalizedYears = totalDays / 365;\n    int normalizedMonths = (totalDays % 365) / 30;\n\n    if (normalizedYears > 0 || normalizedMonths > 0) {\n        result = new Period(totalMillis, type,\n            ISOChronology.getInstanceUTC())\n            .withYears(normalizedYears)\n            .withMonths(normalizedMonths);\n    } else {\n        result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    }\n\n    // Add the normalized weeks and days\n    int normalizedWeeks = (totalDays % 365) % 30 / 7;\n    int normalizedDays = (totalDays % 365) % 30 % 7;\n\n    if (normalizedWeeks > 0) {\n        result = result.withWeeks(normalizedWeeks);\n    }\n\n    if (normalizedDays > 0) {\n        result = result.withDays(normalizedDays);\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..b41439c2 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,49 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+    long millis = getMillis() +\n+        (((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND) +\n+        (((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE) +\n+        (((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR);\n+\n+    Period result;\n+    int totalDays = DateTimeUtils\n+        .getTotalDaysByField(years, months, weeks, days);\n+    long totalMillis = DateTimeUtils\n+        .getTotalMillisByField(years, months, weeks, days, millis);\n+\n+    // Normalize years and months\n+    int normalizedYears = totalDays / 365;\n+    int normalizedMonths = (totalDays % 365) / 30;\n+\n+    if (normalizedYears > 0 || normalizedMonths > 0) {\n+        result = new Period(totalMillis, type,\n+            ISOChronology.getInstanceUTC())\n+            .withYears(normalizedYears)\n+            .withMonths(normalizedMonths);\n+    } else {\n+        result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    }\n+\n+    // Add the normalized weeks and days\n+    int normalizedWeeks = (totalDays % 365) % 30 / 7;\n+    int normalizedDays = (totalDays % 365) % 30 % 7;\n+\n+    if (normalizedWeeks > 0) {\n+        result = result.withWeeks(normalizedWeeks);\n+    }\n+\n+    if (normalizedDays > 0) {\n+        result = result.withDays(normalizedDays);\n     }\n \n+    return result;\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}