{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    int rangeMax = partial.getFieldType(fieldIndex).getField(iChronology).getMaximumValue(partial);\n    int rangeMin = partial.getFieldType(fieldIndex).getField(iChronology).getMinimumValue(partial);\n    long instant = 0L;\n    int curValue = values[fieldIndex];\n    boolean changed = false;\n    if (curValue + valueToAdd > rangeMax) {\n        int newValue = rangeMax;\n        if (fieldIndex > 0) {\n            int[] newValues = add(partial, fieldIndex-1, values, 1);\n            newValue = newValues[fieldIndex];\n            for (int i=fieldIndex+1; i<partial.size(); i++) {\n                newValue = iChronology.getMaximumValue(partial.getFieldType(i).getField(iChronology).add(partial,newValue), newValue);\n            }\n            newValues[fieldIndex] = newValue;\n            return newValues;\n        }\n        values[fieldIndex] = rangeMax;\n        changed = true;\n    } else if (curValue + valueToAdd < rangeMin) {\n        int newValue = rangeMin;\n        if (fieldIndex > 0) {\n            int[] newValues = add(partial, fieldIndex-1, values, -1);\n            newValue = newValues[fieldIndex];\n            for (int i=fieldIndex+1; i<partial.size(); i++) {\n                newValue = iChronology.getMinimumValue(partial.getFieldType(i).getField(iChronology).add(partial,newValue), newValue);\n            }\n            newValues[fieldIndex] = newValue;\n            return newValues;\n        }\n        values[fieldIndex] = rangeMin;\n        changed = true;\n    } else {\n        values[fieldIndex] += valueToAdd;\n        changed = true;\n    }\n    if (changed) {\n        for (int i=0; i<partial.size(); i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = iChronology.set(partial, instant);\n    }\n    return iChronology.get(partial, instant);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..3b535d38 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,55 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    int rangeMax = partial.getFieldType(fieldIndex).getField(iChronology).getMaximumValue(partial);\n+    int rangeMin = partial.getFieldType(fieldIndex).getField(iChronology).getMinimumValue(partial);\n+    long instant = 0L;\n+    int curValue = values[fieldIndex];\n+    boolean changed = false;\n+    if (curValue + valueToAdd > rangeMax) {\n+        int newValue = rangeMax;\n+        if (fieldIndex > 0) {\n+            int[] newValues = add(partial, fieldIndex-1, values, 1);\n+            newValue = newValues[fieldIndex];\n+            for (int i=fieldIndex+1; i<partial.size(); i++) {\n+                newValue = iChronology.getMaximumValue(partial.getFieldType(i).getField(iChronology).add(partial,newValue), newValue);\n+            }\n+            newValues[fieldIndex] = newValue;\n+            return newValues;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        values[fieldIndex] = rangeMax;\n+        changed = true;\n+    } else if (curValue + valueToAdd < rangeMin) {\n+        int newValue = rangeMin;\n+        if (fieldIndex > 0) {\n+            int[] newValues = add(partial, fieldIndex-1, values, -1);\n+            newValue = newValues[fieldIndex];\n+            for (int i=fieldIndex+1; i<partial.size(); i++) {\n+                newValue = iChronology.getMinimumValue(partial.getFieldType(i).getField(iChronology).add(partial,newValue), newValue);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            newValues[fieldIndex] = newValue;\n+            return newValues;\n         }\n+        values[fieldIndex] = rangeMin;\n+        changed = true;\n+    } else {\n+        values[fieldIndex] += valueToAdd;\n+        changed = true;\n     }\n+    if (changed) {\n+        for (int i=0; i<partial.size(); i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        }\n+        instant = iChronology.set(partial, instant);\n+    }\n+    return iChronology.get(partial, instant);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: no suitable method found for add(ReadablePartial,int)",
    "test_result": "ERROR"
}