{
    "patch": "} else if (isInitializingAssignmentAt(0)) {\n  return references.get(0);\n} else if (size > 1 && isInitializingDeclarationAt(1)) {\n  return references.get(1);\n} else if (size > 1 && isInitializingAssignmentAt(1)) {\n  return references.get(1);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..ece73819 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+} else if (isInitializingAssignmentAt(0)) {\n+  return references.get(0);\n+} else if (size > 1 && isInitializingDeclarationAt(1)) {\n+  return references.get(1);\n+} else if (size > 1 && isInitializingAssignmentAt(1)) {\n+  return references.get(1);\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}