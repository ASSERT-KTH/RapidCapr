{
    "patch": "// Strip unreferenced args off the end of the function declaration.\nNode lastArg = null;\nIterator<Node> argIt = argList.children().iterator();\nfor (Var var : Sets.difference(fnScope.getVars(), referenced)) {\n    if (argIt.hasNext()) {\n        Node arg = argIt.next();\n        if (var.getName().equals(arg.getString())) {\n            lastArg = arg;\n            continue;\n        }\n    }\n    // Remove any unused variables from function scope.\n    fnScope.undeclare(var.getName());\n    compiler.reportCodeChange();\n}\nif (lastArg != null) {\n    // Remove any unused args at the tail.\n    for (Node toRemove : XNodes.getNextSiblings(lastArg)) {\n        argList.removeChild(toRemove);\n        compiler.reportCodeChange();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..2d4a6d45 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,28 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Strip unreferenced args off the end of the function declaration.\n+Node lastArg = null;\n+Iterator<Node> argIt = argList.children().iterator();\n+for (Var var : Sets.difference(fnScope.getVars(), referenced)) {\n+    if (argIt.hasNext()) {\n+        Node arg = argIt.next();\n+        if (var.getName().equals(arg.getString())) {\n+            lastArg = arg;\n+            continue;\n+        }\n+    }\n+    // Remove any unused variables from function scope.\n+    fnScope.undeclare(var.getName());\n+    compiler.reportCodeChange();\n+}\n+if (lastArg != null) {\n+    // Remove any unused args at the tail.\n+    for (Node toRemove : XNodes.getNextSiblings(lastArg)) {\n+        argList.removeChild(toRemove);\n+        compiler.reportCodeChange();\n+    }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}