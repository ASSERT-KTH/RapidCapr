{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        throw new MathException(\"Invalid input value: x = NaN\");\n    }\n    final double dev = x - mean;\n    final double nSigma = dev / standardDeviation;\n    final double maxDev = 20.0 * standardDeviation;\n    final double minDev = -maxDev;\n\n    if (nSigma > 40.0) {\n        return 1.0;\n    } else if (nSigma < -40.0) {\n        return 0.0;\n    } else if (dev > maxDev) {\n        return 1.0;\n    } else if (dev < minDev) {\n        return 0.0;\n    } else {\n        try {\n            return 0.5 * (1.0 + Erf.erf(nSigma / FastMath.sqrt(2.0)));\n        } catch (MaxIterationsExceededException ex) {\n            if (dev < 0) {\n                return 0.0;\n            } else {\n                return 1.0;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..72600056d 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -121,21 +121,35 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @return CDF evaluated at {@code x}.\n      * @throws MathException if the algorithm fails to converge\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-        final double dev = x - mean;\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        throw new MathException(\"Invalid input value: x = NaN\");\n+    }\n+    final double dev = x - mean;\n+    final double nSigma = dev / standardDeviation;\n+    final double maxDev = 20.0 * standardDeviation;\n+    final double minDev = -maxDev;\n+\n+    if (nSigma > 40.0) {\n+        return 1.0;\n+    } else if (nSigma < -40.0) {\n+        return 0.0;\n+    } else if (dev > maxDev) {\n+        return 1.0;\n+    } else if (dev < minDev) {\n+        return 0.0;\n+    } else {\n         try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n+            return 0.5 * (1.0 + Erf.erf(nSigma / FastMath.sqrt(2.0)));\n         } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n+            if (dev < 0) {\n+                return 0.0;\n             } else {\n-                throw ex;\n+                return 1.0;\n             }\n         }\n     }\n+}\n \n     /**\n      * Return the absolute accuracy setting of the solver used to estimate",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}