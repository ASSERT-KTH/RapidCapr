{
    "patch": "                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expanded.getPoint() != null ?\n                              expandContract(reflectedSimplex, expanded, sigma, comparator) :\n                              reflectedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n                // perform a contraction\n                final RealPointValuePair contracted = evaluateNewSimplex(original, chi, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = expandContract(original, contracted, psi, comparator);\n                } else {\n                    // perform a shrink\n                    simplex = shrink(comparator);\n                }\n            }\n\n            // check convergence\n            final RealPointValuePair current = simplex[0];\n            boolean converged = true;\n            for (int i = 1; i < simplex.length; i++) {\n                converged &= FastMath.abs(current.getValue() - simplex[i].getValue()) <= functionValueAccuracy;\n            }\n            if (converged) {\n                return;\n            }\n            if (getIterations() >= maxIterations) {\n                throw new OptimizationException(OptimizationErrorMsgs.MAX_ITERATIONS_EXCEEDED,\n                                                maxIterations);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..66bee3447 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,41 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expanded.getPoint() != null ?\n+                              expandContract(reflectedSimplex, expanded, sigma, comparator) :\n+                              reflectedSimplex;\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n-\n+            } else {\n+                // perform a contraction\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, chi, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = expandContract(original, contracted, psi, comparator);\n+                } else {\n+                    // perform a shrink\n+                    simplex = shrink(comparator);\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n+            final RealPointValuePair current = simplex[0];\n+            boolean converged = true;\n+            for (int i = 1; i < simplex.length; i++) {\n+                converged &= FastMath.abs(current.getValue() - simplex[i].getValue()) <= functionValueAccuracy;\n+            }\n+            if (converged) {\n                 return;\n             }\n-\n-        }\n-\n-    }\n+            if (getIterations() >= maxIterations) {\n+                throw new OptimizationException(OptimizationErrorMsgs.MAX_ITERATIONS_EXCEEDED,\n+                                                maxIterations);\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}