{
    "patch": "    // Find the arguments used in the function\n    NodeTraversal.traverse(compiler, function, new NodeTraversal.Callback() {\n      @Override\n      public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n        if (n.isParam()) {\n          String argName = n.getString();\n          Var var = fnScope.getVar(argName);\n          if (referenced.contains(var)) {\n            referencedArguments.add(argName);\n          }\n        }\n        return true;\n      }\n\n      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {}\n    });\n\n    // Rebuild the argument list using the referenced arguments\n    Node argList = getFunctionArgList(function);\n    List<Node> newArgNodes = new ArrayList<>();\n    for (Node argNode : argList.children()) {\n      String argName = argNode.getString();\n      if (referencedArguments.contains(argName)) {\n        newArgNodes.add(argNode.detach());\n      }\n    }\n    argList.removeChildren();\n    argList.addChildrenToFront(newArgNodes);\n    compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..38ef9dc7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,36 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Find the arguments used in the function\n+    NodeTraversal.traverse(compiler, function, new NodeTraversal.Callback() {\n+      @Override\n+      public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+        if (n.isParam()) {\n+          String argName = n.getString();\n+          Var var = fnScope.getVar(argName);\n+          if (referenced.contains(var)) {\n+            referencedArguments.add(argName);\n+          }\n+        }\n+        return true;\n+      }\n+\n+      @Override\n+      public void visit(NodeTraversal t, Node n, Node parent) {}\n+    });\n+\n+    // Rebuild the argument list using the referenced arguments\n+    Node argList = getFunctionArgList(function);\n+    List<Node> newArgNodes = new ArrayList<>();\n+    for (Node argNode : argList.children()) {\n+      String argName = argNode.getString();\n+      if (referencedArguments.contains(argName)) {\n+        newArgNodes.add(argNode.detach());\n+      }\n+    }\n+    argList.removeChildren();\n+    argList.addChildrenToFront(newArgNodes);\n+    compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}