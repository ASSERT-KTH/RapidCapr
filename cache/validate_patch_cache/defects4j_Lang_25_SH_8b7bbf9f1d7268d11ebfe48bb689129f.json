{
    "patch": "StringBuffer buf = new StringBuffer();\nfor (int i = 0; i < string.length(); i++) {\n    char ch = string.charAt(i);\n\n    if (ch < 256) {\n        if (ch == ' ')\n            buf.append('+');\n        else if (ch == '\\r')\n            continue;\n        else if (ch == '\\n')\n            buf.append(\"\\r\\n\");\n        else if (dontNeedEncoding.get(ch))\n            buf.append(ch);\n        else {\n            buf.append('%');\n            buf.append(intToHex(ch >> 4));\n            buf.append(intToHex(ch & 0xF));\n        }\n    } else {\n        // The following line was fixed\n        buf.append(MessageFormat.format(\"%{0}X\", Long.toHexString((long) ch)));\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}