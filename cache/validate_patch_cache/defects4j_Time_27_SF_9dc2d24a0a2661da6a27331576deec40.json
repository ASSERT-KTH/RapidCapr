{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n    List<Object> processedPairs = new ArrayList<>();\n    for (Object pair : elementPairs) {\n        if (pair instanceof Separator) {\n            if (processedPairs.isEmpty()) {\n                processedPairs.add(pair);\n                continue;\n            } else {\n                Object[] comp = createComposite(processedPairs);\n                PeriodFormatter formatter = new PeriodFormatter(\n                        notPrinter ? null : (PeriodPrinter) comp[0],\n                        notParser ? null : (PeriodParser) comp[1]\n                );\n                Separator separator = ((Separator) pair).finish(formatter.getPrinter(), formatter.getParser());\n                return new PeriodFormatter(separator, separator);\n            }\n        } else {\n            processedPairs.add(pair);\n        }\n    }\n    Object[] comp = createComposite(processedPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..1e93c7f0 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,42 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    List<Object> processedPairs = new ArrayList<>();\n+    for (Object pair : elementPairs) {\n+        if (pair instanceof Separator) {\n+            if (processedPairs.isEmpty()) {\n+                processedPairs.add(pair);\n+                continue;\n+            } else {\n+                Object[] comp = createComposite(processedPairs);\n+                PeriodFormatter formatter = new PeriodFormatter(\n+                        notPrinter ? null : (PeriodPrinter) comp[0],\n+                        notParser ? null : (PeriodParser) comp[1]\n+                );\n+                Separator separator = ((Separator) pair).finish(formatter.getPrinter(), formatter.getParser());\n+                return new PeriodFormatter(separator, separator);\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            processedPairs.add(pair);\n         }\n     }\n+    Object[] comp = createComposite(processedPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}