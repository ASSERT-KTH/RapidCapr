{
    "patch": "import org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\n\npublic class MyMath {\n    /**\n     * Computes the regularized gamma function P(a, x) for a > 0 and x >= 0.\n     *\n     * @param a    the shape parameter (must be positive)\n     * @param x    the integration parameter (must be non-negative)\n     * @param eps  the maximum absolute error\n     * @param max  the maximum number of iterations\n     * @return the regularized gamma function P(a, x)\n     */\n    public static double regularizedGamma(double a, double x, double eps, int max) {\n        MathUtils.checkPositive(a);\n        MathUtils.checkNonNegative(x);\n\n        double sum = 1 / a;\n        double term = sum;\n        for (int n = 1; n <= max; n++) {\n            term *= x / (a + n);\n            sum += term;\n            if (FastMath.abs(term / sum) < eps) {\n                return sum * FastMath.exp(-x + a * FastMath.log(x) - logGamma(a));\n            }\n        }\n        throw new IllegalStateException(\"Failed to converge after \" + max + \" iterations\");\n    }\n\n    /**\n     * Computes the logarithm of the gamma function \u0393(x).\n     *\n     * @param x the input value\n     * @return the logarithm of the gamma function \u0393(x)\n     */\n    public static double logGamma(double x) {\n        double tmp = (x - 0.5) * FastMath.log(x + 4.5) - (x + 4.5);\n        double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0)\n                - 1.231739516 / (x + 3.0) + 0.120858003e-2 / (x + 4.0) - 0.536382e-5 / (x + 5.0);\n        return tmp + FastMath.log(ser * FastMath.sqrt(2 * FastMath.PI));\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..759e00d27 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,48 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+public class MyMath {\n+    /**\n+     * Computes the regularized gamma function P(a, x) for a > 0 and x >= 0.\n+     *\n+     * @param a    the shape parameter (must be positive)\n+     * @param x    the integration parameter (must be non-negative)\n+     * @param eps  the maximum absolute error\n+     * @param max  the maximum number of iterations\n+     * @return the regularized gamma function P(a, x)\n+     */\n+    public static double regularizedGamma(double a, double x, double eps, int max) {\n+        MathUtils.checkPositive(a);\n+        MathUtils.checkNonNegative(x);\n+\n+        double sum = 1 / a;\n+        double term = sum;\n+        for (int n = 1; n <= max; n++) {\n+            term *= x / (a + n);\n+            sum += term;\n+            if (FastMath.abs(term / sum) < eps) {\n+                return sum * FastMath.exp(-x + a * FastMath.log(x) - logGamma(a));\n+            }\n+        }\n+        throw new IllegalStateException(\"Failed to converge after \" + max + \" iterations\");\n+    }\n+\n+    /**\n+     * Computes the logarithm of the gamma function \u0393(x).\n+     *\n+     * @param x the input value\n+     * @return the logarithm of the gamma function \u0393(x)\n+     */\n+    public static double logGamma(double x) {\n+        double tmp = (x - 0.5) * FastMath.log(x + 4.5) - (x + 4.5);\n+        double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0)\n+                - 1.231739516 / (x + 3.0) + 0.120858003e-2 / (x + 4.0) - 0.536382e-5 / (x + 5.0);\n+        return tmp + FastMath.log(ser * FastMath.sqrt(2 * FastMath.PI));\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}