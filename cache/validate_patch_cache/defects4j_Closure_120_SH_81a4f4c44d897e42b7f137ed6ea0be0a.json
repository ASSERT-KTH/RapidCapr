{
    "patch": "      // Make sure this assignment is not in a loop.\n      BasicBlock blockToCheck = ref.getBasicBlock();\n      while (blockToCheck != null && !blockToCheck.isFunction()) {\n        if (blockToCheck.isLoop()) {\n          Reference current = blockToCheck.getControlFlow().getInc();\n          while (current != null) {\n            if (current.getDefinition() == ref.getDefinition() && current != ref) {\n              return false;\n            }\n            current = current.getNext();\n          }\n          return true;\n        }\n        blockToCheck = blockToCheck.getParent();\n      }\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..016ac481 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,22 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      // Make sure this assignment is not in a loop.\n+      BasicBlock blockToCheck = ref.getBasicBlock();\n+      while (blockToCheck != null && !blockToCheck.isFunction()) {\n+        if (blockToCheck.isLoop()) {\n+          Reference current = blockToCheck.getControlFlow().getInc();\n+          while (current != null) {\n+            if (current.getDefinition() == ref.getDefinition() && current != ref) {\n+              return false;\n+            }\n+            current = current.getNext();\n+          }\n+          return true;\n+        }\n+        blockToCheck = blockToCheck.getParent();\n+      }\n+      return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}