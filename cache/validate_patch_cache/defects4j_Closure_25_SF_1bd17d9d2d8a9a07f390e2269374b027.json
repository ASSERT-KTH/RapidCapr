{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        // Check if the constructor is a function and has an instance type\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct != null && ct.isConstructor() && ct.getInstanceType() != null) {\n          type = ct.getInstanceType();\n        } else {\n          // Check if the constructor is an object with a constructor and an instance type\n          ObjectType objectType = constructorType.toObjectType();\n          if (objectType.getConstructor() != null && objectType.getConstructor().getInstanceType() != null) {\n            type = objectType.getConstructor().getInstanceType();\n          } else {\n            // The constructor does not have a valid instance type, set the type to unknown\n            type = getNativeType(UNKNOWN_TYPE);\n          }\n        }\n      }\n    } else {\n      // The constructor is null, set the type to unknown\n      type = getNativeType(UNKNOWN_TYPE);\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..cdfcc05f 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,8 +1032,7 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n@@ -1043,24 +1042,31 @@ class TypeInference\n       if (constructorType.isUnknownType()) {\n         type = getNativeType(UNKNOWN_TYPE);\n       } else {\n+        // Check if the constructor is a function and has an instance type\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n+        if (ct != null && ct.isConstructor() && ct.getInstanceType() != null) {\n           type = ct.getInstanceType();\n+        } else {\n+          // Check if the constructor is an object with a constructor and an instance type\n+          ObjectType objectType = constructorType.toObjectType();\n+          if (objectType.getConstructor() != null && objectType.getConstructor().getInstanceType() != null) {\n+            type = objectType.getConstructor().getInstanceType();\n+          } else {\n+            // The constructor does not have a valid instance type, set the type to unknown\n+            type = getNativeType(UNKNOWN_TYPE);\n+          }\n         }\n       }\n+    } else {\n+      // The constructor is null, set the type to unknown\n+      type = getNativeType(UNKNOWN_TYPE);\n     }\n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}