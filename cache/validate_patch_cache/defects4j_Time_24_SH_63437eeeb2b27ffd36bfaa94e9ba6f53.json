{
    "patch": "            int changed;\n            do {\n                changed = 0;\n                for (int i = 1; i < count; i++) {\n                    int compare = savedFields[i - 1].compareTo(savedFields[i]);\n                    if (compare > 0) {\n                        SavedField temp = savedFields[i];\n                        savedFields[i] = savedFields[i - 1];\n                        savedFields[i - 1] = temp;\n                        changed = 1;\n                    } else if (compare == 0) {\n                        if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {\n                            // cannot resolve as only two weekyears\n                            DateTimeField wobblingField = savedFields[i].iField.getDurationField();\n                            if (compareReverse(wobblingField, savedFields[i - 1].iField.getDurationField()) >= 0) {\n                                wobblingField = savedFields[i].iField.withMaximumValue();\n                                savedFields[i] = new SavedField(wobblingField, savedFields[i].iValue);\n                            } else {\n                                wobblingField = savedFields[i - 1].iField.withMinimumValue();\n                                savedFields[i - 1] = new SavedField(wobblingField, savedFields[i - 1].iValue);\n                            }\n                            changed = 1;\n                        } else if (savedFields[i].iValue != savedFields[i - 1].iValue) {\n                            if (savedFields[i].isSaved() || savedFields[i - 1].isSaved()) {\n                                throw new IllegalArgumentException(\"Conflict found: \" + savedFields[i] + \" \" + savedFields[i - 1]);\n                            }\n                            DateTimeField resolveField = selectField(savedFields[i].iField, savedFields[i - 1].iField);\n                            if (resolveField == null) {\n                                throw new IllegalArgumentException(\"Could not resolve conflict: \" + savedFields[i] + \" \" + savedFields[i - 1]);\n                            }\n                            int resolveValue = resolveField.roundFloor(savedFields[i].iValue + savedFields[i - 1].iValue);\n                            savedFields[i] = new SavedField(resolveField, resolveValue);\n                            savedFields[i - 1] = null;\n                            changed = 1;\n                            count--;\n                        }\n                    }\n                }\n            } while (changed != 0);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..59acce26 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,45 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            int changed;\n+            do {\n+                changed = 0;\n+                for (int i = 1; i < count; i++) {\n+                    int compare = savedFields[i - 1].compareTo(savedFields[i]);\n+                    if (compare > 0) {\n+                        SavedField temp = savedFields[i];\n+                        savedFields[i] = savedFields[i - 1];\n+                        savedFields[i - 1] = temp;\n+                        changed = 1;\n+                    } else if (compare == 0) {\n+                        if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {\n+                            // cannot resolve as only two weekyears\n+                            DateTimeField wobblingField = savedFields[i].iField.getDurationField();\n+                            if (compareReverse(wobblingField, savedFields[i - 1].iField.getDurationField()) >= 0) {\n+                                wobblingField = savedFields[i].iField.withMaximumValue();\n+                                savedFields[i] = new SavedField(wobblingField, savedFields[i].iValue);\n+                            } else {\n+                                wobblingField = savedFields[i - 1].iField.withMinimumValue();\n+                                savedFields[i - 1] = new SavedField(wobblingField, savedFields[i - 1].iValue);\n+                            }\n+                            changed = 1;\n+                        } else if (savedFields[i].iValue != savedFields[i - 1].iValue) {\n+                            if (savedFields[i].isSaved() || savedFields[i - 1].isSaved()) {\n+                                throw new IllegalArgumentException(\"Conflict found: \" + savedFields[i] + \" \" + savedFields[i - 1]);\n+                            }\n+                            DateTimeField resolveField = selectField(savedFields[i].iField, savedFields[i - 1].iField);\n+                            if (resolveField == null) {\n+                                throw new IllegalArgumentException(\"Could not resolve conflict: \" + savedFields[i] + \" \" + savedFields[i - 1]);\n+                            }\n+                            int resolveValue = resolveField.roundFloor(savedFields[i].iValue + savedFields[i - 1].iValue);\n+                            savedFields[i] = new SavedField(resolveField, resolveValue);\n+                            savedFields[i - 1] = null;\n+                            changed = 1;\n+                            count--;\n+                        }\n+                    }\n+                }\n+            } while (changed != 0);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}