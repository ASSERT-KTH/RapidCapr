{
    "patch": "private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\"use strict\");\n\n    private static class TransformDispatcher extends IRFactory.TypeSafeDispatcher<Node> {\n\n      private String sourceName;\n      private ErrorReporter errorReporter;\n\n      public TransformDispatcher(String sourceName, ErrorReporter errorReporter) {\n        this.sourceName = sourceName;\n        this.errorReporter = errorReporter;\n      }\n\n      private boolean isDirective(Node n) {\n        if (n == null) return false;\n        int nType = n.getType();\n        return nType == Token.EXPR_RESULT &&\n            n.getFirstChild().isString() &&\n            ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n      }\n\n      @Override\n      public Node visit(AstNode node) {\n        throw new UnsupportedOperationException(\n            \"visit(\" + node.getClass().getName() + \")\");\n      }\n\n      @Override\n      public Node visitArrayComprehension(ArrayComprehension node) {\n        // Array comprehensions are not supported.\n        return null;\n      }\n\n      @Override\n      public Node visitArrayLiteral(ArrayLiteral node) {\n        Node newNode = newNode(Token.ARRAYLIT);\n        for (AstNode child : node.getElements()) {\n          if (child instanceof EmptyExpression) {\n            // Transform EmptyExpression to a hole (null).\n            newNode.addChildToBack(newNode(Token.NULL));\n          } else {\n            newNode.addChildToBack(transform(child));\n          }\n        }\n        return newNode;\n      }\n\n      @Override\n      public Node visitAssignment(Assignment node) {\n        Node target = transform(node.getLeft());\n        Node value = transform(node.getRight());\n        return newNode(node.getType(), target, value);\n      }\n\n      @Override\n      public Node visitAstRoot(AstRoot node) {\n        return transform(node.getFirstChild());\n      }\n\n      @Override\n      public Node visitBlock(Block node) {\n        Node result = newNode(Token.BLOCK);\n        for (Node child : node) {\n          result.addChildToBack(transform(child));\n        }\n        return result;\n      }\n\n      @Override\n      public Node visitBreakStatement(BreakStatement node) {\n        Node result = newNode(Token.BREAK);\n        if (node.getBreakLabel() != null) {\n          Node labelName = transform(node.getBreakLabel());\n          labelName.setType(Token.LABEL_NAME);\n          result.addChildToBack(labelName);\n        }\n        return result;\n      }\n\n      @Override\n      public Node visitConditionalExpression(ConditionalExpression node) {\n        return newNode(\n            Token.HOOK,\n            transform(node.getTestExpression()),\n            transform(node.getTrueExpression()),\n            transform(node.getFalseExpression()));\n      }\n\n      @Override\n      public Node visitContinueStatement(ContinueStatement node) {\n        Node result = newNode(Token.CONTINUE);\n        if (node.getLabel() != null) {\n          Node labelName = transform(node.getLabel());\n          labelName.setType(Token.LABEL_NAME);\n          result.addChildToBack(labelName);\n        }\n        return result;\n      }\n\n      @Override\n      public Node visitDoLoop(DoLoop node) {\n        return newNode(Token.DO, transform(node.getBody()), transform(node.getCondition()));\n      }\n\n      @Override\n      public Node visitElementGet(ElementGet node) {\n        return newNode(Token.GETELEM, transform(node.getTarget()), transform(node.getElement()));\n      }\n\n      @Override\n      public Node visitEmptyExpression(EmptyExpression node) {\n        return newNode(Token.EMPTY);\n      }\n\n      @Override\n      public Node visitExpressionStatement(ExpressionStatement node) {\n        Node result = newNode(Token.EXPR_RESULT);\n        result.addChildToBack(transform(node.getExpression()));\n        return result;\n      }\n\n      @Override\n      public Node visitForInLoop(ForInLoop node) {\n        Node lhsNode = transform(node.getIterator());\n        Node rhsNode = transform(node.getIteratedObject());\n        Node bodyNode = transform(node.getBody());\n        Node result = newNode(Token.FOR_IN, lhsNode, rhsNode, bodyNode);\n        resul",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..680835d3 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,134 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n+      ImmutableSet.of(\"use strict\");\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+    private static class TransformDispatcher extends IRFactory.TypeSafeDispatcher<Node> {\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+      private String sourceName;\n+      private ErrorReporter errorReporter;\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+      public TransformDispatcher(String sourceName, ErrorReporter errorReporter) {\n+        this.sourceName = sourceName;\n+        this.errorReporter = errorReporter;\n       }\n-      return node;\n-    }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+      private boolean isDirective(Node n) {\n+        if (n == null) return false;\n+        int nType = n.getType();\n+        return nType == Token.EXPR_RESULT &&\n+            n.getFirstChild().isString() &&\n+            ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n       }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n+      @Override\n+      public Node visit(AstNode node) {\n+        throw new UnsupportedOperationException(\n+            \"visit(\" + node.getClass().getName() + \")\");\n+      }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+      @Override\n+      public Node visitArrayComprehension(ArrayComprehension node) {\n+        // Array comprehensions are not supported.\n+        return null;\n       }\n-      return node;\n-    }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n+      @Override\n+      public Node visitArrayLiteral(ArrayLiteral node) {\n+        Node newNode = newNode(Token.ARRAYLIT);\n+        for (AstNode child : node.getElements()) {\n+          if (child instanceof EmptyExpression) {\n+            // Transform EmptyExpression to a hole (null).\n+            newNode.addChildToBack(newNode(Token.NULL));\n+          } else {\n+            newNode.addChildToBack(transform(child));\n+          }\n+        }\n+        return newNode;\n+      }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+      @Override\n+      public Node visitAssignment(Assignment node) {\n+        Node target = transform(node.getLeft());\n+        Node value = transform(node.getRight());\n+        return newNode(node.getType(), target, value);\n+      }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+      @Override\n+      public Node visitAstRoot(AstRoot node) {\n+        return transform(node.getFirstChild());\n+      }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+      @Override\n+      public Node visitBlock(Block node) {\n+        Node result = newNode(Token.BLOCK);\n+        for (Node child : node) {\n+          result.addChildToBack(transform(child));\n+        }\n+        return result;\n+      }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+      @Override\n+      public Node visitBreakStatement(BreakStatement node) {\n+        Node result = newNode(Token.BREAK);\n+        if (node.getBreakLabel() != null) {\n+          Node labelName = transform(node.getBreakLabel());\n+          labelName.setType(Token.LABEL_NAME);\n+          result.addChildToBack(labelName);\n+        }\n+        return result;\n+      }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+      @Override\n+      public Node visitConditionalExpression(ConditionalExpression node) {\n+        return newNode(\n+            Token.HOOK,\n+            transform(node.getTestExpression()),\n+            transform(node.getTrueExpression()),\n+            transform(node.getFalseExpression()));\n+      }\n+\n+      @Override\n+      public Node visitContinueStatement(ContinueStatement node) {\n+        Node result = newNode(Token.CONTINUE);\n+        if (node.getLabel() != null) {\n+          Node labelName = transform(node.getLabel());\n+          labelName.setType(Token.LABEL_NAME);\n+          result.addChildToBack(labelName);\n+        }\n+        return result;\n+      }\n+\n+      @Override\n+      public Node visitDoLoop(DoLoop node) {\n+        return newNode(Token.DO, transform(node.getBody()), transform(node.getCondition()));\n+      }\n+\n+      @Override\n+      public Node visitElementGet(ElementGet node) {\n+        return newNode(Token.GETELEM, transform(node.getTarget()), transform(node.getElement()));\n+      }\n+\n+      @Override\n+      public Node visitEmptyExpression(EmptyExpression node) {\n+        return newNode(Token.EMPTY);\n+      }\n+\n+      @Override\n+      public Node visitExpressionStatement(ExpressionStatement node) {\n+        Node result = newNode(Token.EXPR_RESULT);\n+        result.addChildToBack(transform(node.getExpression()));\n+        return result;\n+      }\n+\n+      @Override\n+      public Node visitForInLoop(ForInLoop node) {\n+        Node lhsNode = transform(node.getIterator());\n+        Node rhsNode = transform(node.getIteratedObject());\n+        Node bodyNode = transform(node.getBody());\n+        Node result = newNode(Token.FOR_IN, lhsNode, rhsNode, bodyNode);\n+        resul\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}