{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex = expanded.clone();\n            } else {\n                // accept the reflected simplex\n                simplex = reflectedSimplex.clone();\n            }\n\n        } else {\n\n            // check if it is worth trying a reflection in the opposite direction\n            if (comparator.compare(reflected, original[original.length - 1]) >= 0) {\n                // perform an inside contraction\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted.clone();\n                } else {\n                    // shrink the simplex\n                    shrink(simplex, comparator);\n                }\n            } else {\n                // perform an outside contraction\n                final RealPointValuePair contracted = evaluateNewSimplex(original, -sigma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted.clone();\n                } else {\n                    // shrink the simplex\n                    shrink(simplex, comparator);\n                }\n            }\n        }\n\n        // check convergence\n        if (isConverged(simplex, comparator)) {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..2fe3abfb1 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,65 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex.clone();\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n+            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n \n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // accept the expanded simplex\n+                simplex = expanded.clone();\n+            } else {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex.clone();\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+        } else {\n+\n+            // check if it is worth trying a reflection in the opposite direction\n+            if (comparator.compare(reflected, original[original.length - 1]) >= 0) {\n+                // perform an inside contraction\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted.clone();\n+                } else {\n+                    // shrink the simplex\n+                    shrink(simplex, comparator);\n+                }\n+            } else {\n+                // perform an outside contraction\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, -sigma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted.clone();\n+                } else {\n+                    // shrink the simplex\n+                    shrink(simplex, comparator);\n+                }\n             }\n-\n         }\n \n+        // check convergence\n+        if (isConverged(simplex, comparator)) {\n+            return;\n+        }\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: clone() has protected access in Object",
    "test_result": "ERROR"
}