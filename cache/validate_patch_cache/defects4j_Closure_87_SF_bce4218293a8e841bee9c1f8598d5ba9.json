{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.EXPR_RESULT) {\n    Node child = n.getFirstChild();\n    if (child.getType() == Token.BLOCK && child.getChildCount() == 1) {\n      Node grandChild = child.getFirstChild();\n      if (grandChild.getType() == Token.EXPR_RESULT) {\n        return isFoldableExpressBlock(grandChild);\n      } else if (grandChild.getType() == Token.RETURN) {\n        return NodeUtil.isExpressionNode(grandChild.getFirstChild());\n      } else if (grandChild.getType() == Token.OR || grandChild.getType() == Token.AND) {\n        Node firstChild = grandChild.getFirstChild();\n        Node secondChild = firstChild.getNext();\n        // Check if the nodes are of the form `(x || f())` or `(x && f())`\n        if (firstChild.getType() == Token.NAME && secondChild.getType() == Token.CALL) {\n          return firstChild.getString().equals(secondChild.getFirstChild().getString());\n        }\n      } else if (grandChild.getType() == Token.IF) {\n        // Check if the node is of the form `if (x) { f() } else { y }`\n        Node firstChild = grandChild.getFirstChild();\n        Node elseChild = grandChild.getLastChild();\n        if (firstChild.getType() == Token.NAME && firstChild.getNext().getType() == Token.BLOCK && elseChild.getType() == Token.BLOCK) {\n          Node ifBlock = firstChild.getNext();\n          Node elseBlock = elseChild.getFirstChild();\n          if (ifBlock.getChildCount() == 1 && elseBlock.getChildCount() == 1 && ifBlock.getFirstChild().getType() == Token.EXPR_RESULT && elseBlock.getFirstChild().getType() == Token.EXPR_RESULT) {\n            Node ifExpression = ifBlock.getFirstChild();\n            Node elseExpression = elseBlock.getFirstChild();\n            if (NodeUtil.isExpressionNode(ifExpression.getFirstChild()) && NodeUtil.isExpressionNode(elseExpression.getFirstChild())) {\n              Node ifLastChild = ifExpression.getLastChild();\n              Node elseLastChild = elseExpression.getLastChild();\n              if (ifLastChild.getType() == Token.NAME && elseLastChild.getType() == Token.NAME && ifLastChild.getString().equals(elseLastChild.getString())) {\n                return true;\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n      } else if (grandChild.getType() != Token.CALL) {\n        return NodeUtil.isExpressionNode(grandChild);\n      }\n    }\n    return false;\n  } else if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n    Node child = n.getFirstChild();\n    if (child.getType() != Token.EXPR_RESULT && child.getType() != Token.CALL && child.getType() != Token.FUNCTION) {\n      Node functionChild = NodeUtil.getFunctionBody(child);\n      if (functionChild != null) {\n        return false;\n      }\n      return NodeUtil.isExpressionNode(child);\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..8484f1b1 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,60 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.EXPR_RESULT) {\n+    Node child = n.getFirstChild();\n+    if (child.getType() == Token.BLOCK && child.getChildCount() == 1) {\n+      Node grandChild = child.getFirstChild();\n+      if (grandChild.getType() == Token.EXPR_RESULT) {\n+        return isFoldableExpressBlock(grandChild);\n+      } else if (grandChild.getType() == Token.RETURN) {\n+        return NodeUtil.isExpressionNode(grandChild.getFirstChild());\n+      } else if (grandChild.getType() == Token.OR || grandChild.getType() == Token.AND) {\n+        Node firstChild = grandChild.getFirstChild();\n+        Node secondChild = firstChild.getNext();\n+        // Check if the nodes are of the form `(x || f())` or `(x && f())`\n+        if (firstChild.getType() == Token.NAME && secondChild.getType() == Token.CALL) {\n+          return firstChild.getString().equals(secondChild.getFirstChild().getString());\n+        }\n+      } else if (grandChild.getType() == Token.IF) {\n+        // Check if the node is of the form `if (x) { f() } else { y }`\n+        Node firstChild = grandChild.getFirstChild();\n+        Node elseChild = grandChild.getLastChild();\n+        if (firstChild.getType() == Token.NAME && firstChild.getNext().getType() == Token.BLOCK && elseChild.getType() == Token.BLOCK) {\n+          Node ifBlock = firstChild.getNext();\n+          Node elseBlock = elseChild.getFirstChild();\n+          if (ifBlock.getChildCount() == 1 && elseBlock.getChildCount() == 1 && ifBlock.getFirstChild().getType() == Token.EXPR_RESULT && elseBlock.getFirstChild().getType() == Token.EXPR_RESULT) {\n+            Node ifExpression = ifBlock.getFirstChild();\n+            Node elseExpression = elseBlock.getFirstChild();\n+            if (NodeUtil.isExpressionNode(ifExpression.getFirstChild()) && NodeUtil.isExpressionNode(elseExpression.getFirstChild())) {\n+              Node ifLastChild = ifExpression.getLastChild();\n+              Node elseLastChild = elseExpression.getLastChild();\n+              if (ifLastChild.getType() == Token.NAME && elseLastChild.getType() == Token.NAME && ifLastChild.getString().equals(elseLastChild.getString())) {\n+                return true;\n+              }\n+            }\n+          }\n+        } else {\n+          return false;\n+        }\n+      } else if (grandChild.getType() != Token.CALL) {\n+        return NodeUtil.isExpressionNode(grandChild);\n       }\n     }\n-\n     return false;\n+  } else if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n+    Node child = n.getFirstChild();\n+    if (child.getType() != Token.EXPR_RESULT && child.getType() != Token.CALL && child.getType() != Token.FUNCTION) {\n+      Node functionChild = NodeUtil.getFunctionBody(child);\n+      if (functionChild != null) {\n+        return false;\n+      }\n+      return NodeUtil.isExpressionNode(child);\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}