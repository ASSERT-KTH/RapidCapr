{
    "patch": "parent.detachFromParent();\ncompiler.reportCodeChange();\nif (provided == null || (!provided.isExplicitlyProvided() && !providedNames.containsKey(ns))) {\n  unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n  return;\n}\nJSModule providedModule = provided.explicitModule;\nPreconditions.checkNotNull(providedModule);\nJSModule module = t.getModule();\nif (moduleGraph != null && module != providedModule &&\n    !moduleGraph.dependsOn(module, providedModule)) {\n  compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                   providedModule.getName(), module.getName()));\n}\nmaybeAddToSymbolTable(left);\nmaybeAddStringNodeToSymbolTable(arg);\ncompiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..1c55332e 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,23 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+parent.detachFromParent();\n+compiler.reportCodeChange();\n+if (provided == null || (!provided.isExplicitlyProvided() && !providedNames.containsKey(ns))) {\n+  unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n+  return;\n+}\n+JSModule providedModule = provided.explicitModule;\n+Preconditions.checkNotNull(providedModule);\n+JSModule module = t.getModule();\n+if (moduleGraph != null && module != providedModule &&\n+    !moduleGraph.dependsOn(module, providedModule)) {\n+  compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                   providedModule.getName(), module.getName()));\n+}\n+maybeAddToSymbolTable(left);\n+maybeAddStringNodeToSymbolTable(arg);\n+compiler.reportCodeChange();\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}