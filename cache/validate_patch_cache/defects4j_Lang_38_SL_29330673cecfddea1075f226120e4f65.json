{
    "patch": "if (mTimeZoneForced && !calendar.getTimeZone().equals(mTimeZone)) {\n    TimeZone originalTimeZone = calendar.getTimeZone();\n    originalTimeZone.useDaylightTime();\n    int offsetDiff = originalTimeZone.getRawOffset() - mTimeZone.getRawOffset();\n    if (originalTimeZone.inDaylightTime(calendar.getTime())) {\n        offsetDiff += originalTimeZone.getDSTSavings() - mTimeZone.getDSTSavings();\n    }\n    calendar.add(Calendar.MILLISECOND, offsetDiff);\n    calendar.setTimeZone(mTimeZone);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..81b7526d 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -869,6 +869,16 @@ public class FastDateFormat extends Format {\n      */\n     public StringBuffer format(Calendar calendar, StringBuffer buf) {\n         if (mTimeZoneForced) {\n+if (mTimeZoneForced && !calendar.getTimeZone().equals(mTimeZone)) {\n+    TimeZone originalTimeZone = calendar.getTimeZone();\n+    originalTimeZone.useDaylightTime();\n+    int offsetDiff = originalTimeZone.getRawOffset() - mTimeZone.getRawOffset();\n+    if (originalTimeZone.inDaylightTime(calendar.getTime())) {\n+        offsetDiff += originalTimeZone.getDSTSavings() - mTimeZone.getDSTSavings();\n+    }\n+    calendar.add(Calendar.MILLISECOND, offsetDiff);\n+    calendar.setTimeZone(mTimeZone);\n+}\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }",
    "result_reason": "junit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>",
    "test_result": "FAIL"
}