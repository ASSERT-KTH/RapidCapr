{
    "patch": "      boolean isOverride = false;\n      if (t.inGlobalScope()) {\n        Node maybeAssign = parent.getParent();\n        if (maybeAssign != null && maybeAssign.getType() == Token.ASSIGN) {\n          Node maybeName = maybeAssign.getFirstChild();\n          if (maybeName.getType() == Token.GETPROP &&\n              maybeName.getLastChild().getString().equals(propertyName)) {\n            Node maybeObj = maybeName.getFirstChild();\n            if (NodeUtil.isGetProp(maybeObj)) {\n              ObjectType maybeType = ObjectType.cast(\n                  dereference(maybeObj.getFirstChild().getJSType()));\n              if (maybeType != null &&\n                  maybeType.isEquivalentTo(objectType.getObjectType())) {\n                isOverride = true;\n              }\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..5973c0f6 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,23 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = false;\n+      if (t.inGlobalScope()) {\n+        Node maybeAssign = parent.getParent();\n+        if (maybeAssign != null && maybeAssign.getType() == Token.ASSIGN) {\n+          Node maybeName = maybeAssign.getFirstChild();\n+          if (maybeName.getType() == Token.GETPROP &&\n+              maybeName.getLastChild().getString().equals(propertyName)) {\n+            Node maybeObj = maybeName.getFirstChild();\n+            if (NodeUtil.isGetProp(maybeObj)) {\n+              ObjectType maybeType = ObjectType.cast(\n+                  dereference(maybeObj.getFirstChild().getJSType()));\n+              if (maybeType != null &&\n+                  maybeType.isEquivalentTo(objectType.getObjectType())) {\n+                isOverride = true;\n+              }\n+            }\n+          }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}