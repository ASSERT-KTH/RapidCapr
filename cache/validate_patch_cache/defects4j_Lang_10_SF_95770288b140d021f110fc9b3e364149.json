{
    "patch": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nprivate static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    boolean prevEscapeChar = false;\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*+\");\n            }\n        } else {\n            wasWhite = false;\n            switch (c) {\n                case '\\\\':\n                    if (!prevEscapeChar) {\n                        regex.append('\\\\');\n                    }\n                    prevEscapeChar = !prevEscapeChar;\n                    break;\n                case '[':\n                case ']':\n                case '{':\n                case '}':\n                case '(':\n                case ')':\n                case '|':\n                case '^':\n                case '$':\n                case '*':\n                case '+':\n                case '.':\n                    // escape special characters\n                    regex.append('\\\\');\n                    break;\n                case '?':\n                    // escape ? if it is not preceded by an escape character\n                    if (!prevEscapeChar) {\n                        regex.append('\\\\');\n                    }\n                    break;\n                case '\\'':\n                    if (unquote && i + 1 < value.length() && value.charAt(i + 1) == '\\'') {\n                        regex.append(\"''\");\n                        i++;\n                        break;\n                    } else if (prevEscapeChar) {\n                        // if ' is preceded by an escape character, do not escape it\n                        regex.append(c);\n                        break;\n                    } else if (unquote && isComment(value, i)) {\n                        // if ' is the start of a comment, do not escape it\n                        regex.append(c);\n                        break;\n                    } else {\n                        // escape '\n                        regex.append(\"\\\\'\");\n                    }\n                    break;\n                default:\n                    regex.append(c);\n            }\n            prevEscapeChar = false;\n        }\n    }\n    if (wasWhite) {\n        regex.append(\"\\\\s*+\");\n    }\n    return regex;\n}\n\nprivate static boolean isComment(String value, int pos) {\n    int end = pos;\n    while (end < value.length() && value.charAt(end) != '\\n') {\n        end++;\n    }\n    String comment = value.substring(pos, end);\n    return comment.matches(\"(''|[^'])*--[^\\n]*\");\n}\n\npublic static void main(String[] args) {\n    String test = \"testLANG_831\";\n    StringBuilder sb = new StringBuilder();\n    escapeRegex(sb, test, true);\n    String escaped = sb.toString();\n    Pattern pattern = Pattern.compile(escaped);\n    String date1Str = \"Mar  2 21:00:00 PST 1970\";\n    String date2Str = \"Mar  2 21:00:00 PDT 1970\";\n    Matcher matcher1 = pattern.matcher(date1Str);\n    Matcher matcher2 = pattern.matcher(date2Str);\n    assertTrue(matcher1.matches());\n    assertFalse(matcher2.matches());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..28cc2f94 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,101 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    boolean prevEscapeChar = false;\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+        } else {\n+            wasWhite = false;\n+            switch (c) {\n+                case '\\\\':\n+                    if (!prevEscapeChar) {\n+                        regex.append('\\\\');\n                     }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+                    prevEscapeChar = !prevEscapeChar;\n+                    break;\n+                case '[':\n+                case ']':\n+                case '{':\n+                case '}':\n+                case '(':\n+                case ')':\n+                case '|':\n+                case '^':\n+                case '$':\n+                case '*':\n+                case '+':\n+                case '.':\n+                    // escape special characters\n+                    regex.append('\\\\');\n+                    break;\n+                case '?':\n+                    // escape ? if it is not preceded by an escape character\n+                    if (!prevEscapeChar) {\n+                        regex.append('\\\\');\n+                    }\n+                    break;\n+                case '\\'':\n+                    if (unquote && i + 1 < value.length() && value.charAt(i + 1) == '\\'') {\n+                        regex.append(\"''\");\n+                        i++;\n+                        break;\n+                    } else if (prevEscapeChar) {\n+                        // if ' is preceded by an escape character, do not escape it\n+                        regex.append(c);\n+                        break;\n+                    } else if (unquote && isComment(value, i)) {\n+                        // if ' is the start of a comment, do not escape it\n+                        regex.append(c);\n+                        break;\n+                    } else {\n+                        // escape '\n+                        regex.append(\"\\\\'\");\n+                    }\n+                    break;\n+                default:\n+                    regex.append(c);\n             }\n-            regex.append(c);\n+            prevEscapeChar = false;\n         }\n-        return regex;\n     }\n+    if (wasWhite) {\n+        regex.append(\"\\\\s*+\");\n+    }\n+    return regex;\n+}\n+\n+private static boolean isComment(String value, int pos) {\n+    int end = pos;\n+    while (end < value.length() && value.charAt(end) != '\\n') {\n+        end++;\n+    }\n+    String comment = value.substring(pos, end);\n+    return comment.matches(\"(''|[^'])*--[^\\n]*\");\n+}\n+\n+public static void main(String[] args) {\n+    String test = \"testLANG_831\";\n+    StringBuilder sb = new StringBuilder();\n+    escapeRegex(sb, test, true);\n+    String escaped = sb.toString();\n+    Pattern pattern = Pattern.compile(escaped);\n+    String date1Str = \"Mar  2 21:00:00 PST 1970\";\n+    String date2Str = \"Mar  2 21:00:00 PDT 1970\";\n+    Matcher matcher1 = pattern.matcher(date1Str);\n+    Matcher matcher2 = pattern.matcher(date2Str);\n+    assertTrue(matcher1.matches());\n+    assertFalse(matcher2.matches());\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}