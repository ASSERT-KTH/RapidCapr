{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    \n    Node body = function.getLastChild();\n    Node lastArg = null;\n    for (Node arg : argList.children()) {\n      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n        arg.detach();\n        if (lastArg == null) {\n          lastArg = arg;\n        }\n        compiler.reportCodeChange();\n      } else {\n        lastArg = null;\n      }\n    }\n    // We need an \"arguments\" object if the function references \"arguments\".\n    if (lastArg != null || !body.getFirstChild().isParamList()) {\n      Node argumentsObject = IR.name(\"arguments\").useSourceInfoFrom(function);\n      NodeUtil.addFeatureToScript(compiler, Feature.ARROW_FUNCTIONS);\n      body.addChildToFront(\n          IR.var(IR.name(lastArg == null ? \"arguments\" : \"args\"), IR.call(\n              IR.getprop(IR.name(\"Array\"), IR.string(\"prototype\")),\n              IR.string(\"slice\").srcref(function.getSourceFileName(), function.getLineno(),\n                  function.getCharno()),\n              IR.name(\"arguments\"))\n              .srcref(function.getSourceFileName(), function.getLineno(),\n                  function.getCharno())));\n      if (lastArg == null) {\n        argList.addChildToFront(IR.arg(\"args\").srcref(lastArg));\n      }\n      compiler.reportCodeChange();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f8f503a9 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,44 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    \n+    Node body = function.getLastChild();\n+    Node lastArg = null;\n+    for (Node arg : argList.children()) {\n+      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+        arg.detach();\n+        if (lastArg == null) {\n+          lastArg = arg;\n+        }\n+        compiler.reportCodeChange();\n+      } else {\n+        lastArg = null;\n+      }\n+    }\n+    // We need an \"arguments\" object if the function references \"arguments\".\n+    if (lastArg != null || !body.getFirstChild().isParamList()) {\n+      Node argumentsObject = IR.name(\"arguments\").useSourceInfoFrom(function);\n+      NodeUtil.addFeatureToScript(compiler, Feature.ARROW_FUNCTIONS);\n+      body.addChildToFront(\n+          IR.var(IR.name(lastArg == null ? \"arguments\" : \"args\"), IR.call(\n+              IR.getprop(IR.name(\"Array\"), IR.string(\"prototype\")),\n+              IR.string(\"slice\").srcref(function.getSourceFileName(), function.getLineno(),\n+                  function.getCharno()),\n+              IR.name(\"arguments\"))\n+              .srcref(function.getSourceFileName(), function.getLineno(),\n+                  function.getCharno())));\n+      if (lastArg == null) {\n+        argList.addChildToFront(IR.arg(\"args\").srcref(lastArg));\n+      }\n+      compiler.reportCodeChange();\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}