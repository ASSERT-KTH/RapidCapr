{
    "patch": "    boolean hasDefaultValueInArrayPattern = false;\n    // If no param with default value in destructuring pattern found, remove the unused ones.\n    for (Node arg : argList.children()) {\n      String argName = arg.getString();\n      Var var = fnScope.getVar(argName);\n      if (!referenced.contains(var)) {\n        Node expr = NodeUtil.getDefaultValueForParam(arg);\n        if (expr != null && expr.hasChildren() && expr.getSecondChild().isArrayPattern()) {\n          hasDefaultValueInArrayPattern = true;\n        } else if (!NodeUtil.isRest(arg)) {\n          // removeParam can't remove the rest param of function.\n          argList.removeChild(arg);\n          compiler.reportCodeChange();\n        }\n      }\n    }\n    if (!hasDefaultValueInArrayPattern) {\n      NodeUtil.removeUnreferencedVars(fnScope, compiler, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ce594d53 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean hasDefaultValueInArrayPattern = false;\n+    // If no param with default value in destructuring pattern found, remove the unused ones.\n+    for (Node arg : argList.children()) {\n+      String argName = arg.getString();\n+      Var var = fnScope.getVar(argName);\n+      if (!referenced.contains(var)) {\n+        Node expr = NodeUtil.getDefaultValueForParam(arg);\n+        if (expr != null && expr.hasChildren() && expr.getSecondChild().isArrayPattern()) {\n+          hasDefaultValueInArrayPattern = true;\n+        } else if (!NodeUtil.isRest(arg)) {\n+          // removeParam can't remove the rest param of function.\n+          argList.removeChild(arg);\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    }\n+    if (!hasDefaultValueInArrayPattern) {\n+      NodeUtil.removeUnreferencedVars(fnScope, compiler, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}