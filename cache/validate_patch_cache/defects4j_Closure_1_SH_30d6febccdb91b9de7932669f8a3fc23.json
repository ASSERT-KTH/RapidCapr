{
    "patch": "    // If a function declaration has one or more default parameter values,\n    // do not strip off the unused parameters as their absence will make the\n    // default parameter values to shift backwards affecting the function's\n    // behavior. For example, f(foo, bar=1, baz=2), where foo is unused,\n    // without foo, the default values will shift to bar, baz and the\n    // result will be f(bar=1, baz=2). Whereas, the intended behavior\n    // should be f(undefined, bar=1, baz=2).\n    if (NodeUtil.functionHasAnyNonEmptyDefaultParamValues(function)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..746e09b8 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,14 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // If a function declaration has one or more default parameter values,\n+    // do not strip off the unused parameters as their absence will make the\n+    // default parameter values to shift backwards affecting the function's\n+    // behavior. For example, f(foo, bar=1, baz=2), where foo is unused,\n+    // without foo, the default values will shift to bar, baz and the\n+    // result will be f(bar=1, baz=2). Whereas, the intended behavior\n+    // should be f(undefined, bar=1, baz=2).\n+    if (NodeUtil.functionHasAnyNonEmptyDefaultParamValues(function)) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}