{
    "patch": "public String fixCode(String code) {\n    String result = code.replaceAll(\"for\\\\(([^;]*);([^;]*);([^)]*)\\\\)\",\n            \"for($1;$2; $3.replaceFirst([^\\\\w])((?!\\\\s*\\\\))\\\\S) , false)$4\");\n\n    result = result.replaceAll(\"(?<!(\\n|;))\\\\s*(\\\\S.*)(\\\\[)([^\\\\]]*)(\\\\])(\\\\s*)(in)(\\\\s*)(\\\\S+)\",\n            \"$1$3$4 in ObjectArrays.concat($9)$5$6?new BooleanPredicate(){public boolean apply(boolean x){return $4==(Boolean)x;}}:$4!=null ? Predicates.equalTo($4) : Predicates.isNull()$8\");\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..de30193b 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,15 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    String result = code.replaceAll(\"for\\\\(([^;]*);([^;]*);([^)]*)\\\\)\",\n+            \"for($1;$2; $3.replaceFirst([^\\\\w])((?!\\\\s*\\\\))\\\\S) , false)$4\");\n+\n+    result = result.replaceAll(\"(?<!(\\n|;))\\\\s*(\\\\S.*)(\\\\[)([^\\\\]]*)(\\\\])(\\\\s*)(in)(\\\\s*)(\\\\S+)\",\n+            \"$1$3$4 in ObjectArrays.concat($9)$5$6?new BooleanPredicate(){public boolean apply(boolean x){return $4==(Boolean)x;}}:$4!=null ? Predicates.equalTo($4) : Predicates.isNull()$8\");\n+\n+    return result;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}