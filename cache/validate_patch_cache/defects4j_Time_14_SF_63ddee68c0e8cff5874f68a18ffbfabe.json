{
    "patch": "        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            ISOChronology chrono = ISOChronology.getInstanceUTC();\n            boolean dayOverflow = false;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i == DateTimeFieldType.monthOfYear().getIndex()) {\n                    int monthValue = values[i];\n                    int yearValue = partial.getField(DateTimeFieldType.year()).get(instant);\n                    int monthLen = chrono.getMonthOfYear(yearValue, monthValue);\n                    int newMonthValue = ((monthValue - 1 + valueToAdd) % 12 + 12) % 12 + 1;\n                    int newYearValue = yearValue + ((monthValue - 1 + valueToAdd) / 12);\n                    if (newMonthValue != monthValue) {\n                        int dayValue = partial.getField(DateTimeFieldType.dayOfMonth()).get(instant);\n                        int maxDay = chrono.getDayOfMonth(newYearValue, newMonthValue);\n                        dayValue = Math.min(dayValue, maxDay);\n                        instant = chrono.year().set(instant, newYearValue);\n                        instant = chrono.monthOfYear().set(instant, newMonthValue);\n                        dayOverflow = (dayValue > maxDay);\n                        instant = chrono.dayOfMonth().set(instant, dayValue);\n                    }\n                    else {\n                        instant = chrono.monthOfYear().set(instant, newMonthValue);\n                    }\n                }\n                else if (i == DateTimeFieldType.year().getIndex()) {\n                    if (dayOverflow) {\n                        int dayValue = partial.getField(DateTimeFieldType.dayOfMonth()).get(instant);\n                        int maxDay = chrono.getDayOfMonth(values[i], partial.getField(DateTimeFieldType.monthOfYear()).get(instant));\n                        dayValue = Math.min(dayValue, maxDay);\n                        instant = chrono.year().set(instant, values[i]);\n                        dayOverflow = (dayValue > maxDay);\n                        instant = chrono.dayOfMonth().set(instant, dayValue);\n                    }\n                    else {\n                        instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                    }\n                }\n                else if (i == fieldIndex) {\n                    instant = partial.getFieldType(i).getField(iChronology).add(instant, valueToAdd);\n                    dayOverflow = false;\n                }\n                else {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }\n            }\n            if (dayOverflow) {\n                // scan the fields again, but only day-of-month this time\n                for (int i = 0, isize = partial.size(); i < isize; i++) {\n                    if (i == DateTimeFieldType.dayOfMonth().getIndex()) {\n                        int dayValue = partial.getFieldType(i).getField(iChronology).get(instant);\n                        int maxDay = chrono.getDayOfMonth(partial.getField(DateTimeFieldType.year()).get(instant), partial.getField(DateTimeFieldType.monthOfYear()).get(instant));\n                        instant = DateTimeFieldType.dayOfMonth().getField(iChronology).set(instant, Math.min(dayValue, maxDay));\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..49ef31a8 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,61 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            ISOChronology chrono = ISOChronology.getInstanceUTC();\n+            boolean dayOverflow = false;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                if (i == DateTimeFieldType.monthOfYear().getIndex()) {\n+                    int monthValue = values[i];\n+                    int yearValue = partial.getField(DateTimeFieldType.year()).get(instant);\n+                    int monthLen = chrono.getMonthOfYear(yearValue, monthValue);\n+                    int newMonthValue = ((monthValue - 1 + valueToAdd) % 12 + 12) % 12 + 1;\n+                    int newYearValue = yearValue + ((monthValue - 1 + valueToAdd) / 12);\n+                    if (newMonthValue != monthValue) {\n+                        int dayValue = partial.getField(DateTimeFieldType.dayOfMonth()).get(instant);\n+                        int maxDay = chrono.getDayOfMonth(newYearValue, newMonthValue);\n+                        dayValue = Math.min(dayValue, maxDay);\n+                        instant = chrono.year().set(instant, newYearValue);\n+                        instant = chrono.monthOfYear().set(instant, newMonthValue);\n+                        dayOverflow = (dayValue > maxDay);\n+                        instant = chrono.dayOfMonth().set(instant, dayValue);\n+                    }\n+                    else {\n+                        instant = chrono.monthOfYear().set(instant, newMonthValue);\n+                    }\n+                }\n+                else if (i == DateTimeFieldType.year().getIndex()) {\n+                    if (dayOverflow) {\n+                        int dayValue = partial.getField(DateTimeFieldType.dayOfMonth()).get(instant);\n+                        int maxDay = chrono.getDayOfMonth(values[i], partial.getField(DateTimeFieldType.monthOfYear()).get(instant));\n+                        dayValue = Math.min(dayValue, maxDay);\n+                        instant = chrono.year().set(instant, values[i]);\n+                        dayOverflow = (dayValue > maxDay);\n+                        instant = chrono.dayOfMonth().set(instant, dayValue);\n+                    }\n+                    else {\n+                        instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                    }\n+                }\n+                else if (i == fieldIndex) {\n+                    instant = partial.getFieldType(i).getField(iChronology).add(instant, valueToAdd);\n+                    dayOverflow = false;\n+                }\n+                else {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            if (dayOverflow) {\n+                // scan the fields again, but only day-of-month this time\n+                for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                    if (i == DateTimeFieldType.dayOfMonth().getIndex()) {\n+                        int dayValue = partial.getFieldType(i).getField(iChronology).get(instant);\n+                        int maxDay = chrono.getDayOfMonth(partial.getField(DateTimeFieldType.year()).get(instant), partial.getField(DateTimeFieldType.monthOfYear()).get(instant));\n+                        instant = DateTimeFieldType.dayOfMonth().getField(iChronology).set(instant, Math.min(dayValue, maxDay));\n+                    }\n+                }\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}