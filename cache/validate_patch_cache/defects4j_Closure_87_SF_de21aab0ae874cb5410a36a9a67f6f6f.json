{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // Special case for the bug mentioned in the comment in the original code\n      if (maybeExpr.getType() == Token.RETURN && maybeExpr.hasChildren() &&\n          maybeExpr.getFirstChild().getType() == Token.FALSE) {\n        return false;\n      }\n\n      // IE has a bug where event handlers behave differently when their return value is used vs.\n      // when their return value is in an EXPR_RESULT. It's pretty freaking weird. See:\n      // http://code.google.com/p/closure-compiler/issues/detail?id=291\n      // We try to detect this case, and not fold EXPR_RESULTs into other expressions.\n      if (maybeExpr.getType() == Token.EXPR_RESULT && maybeExpr.hasOneChild() &&\n          maybeExpr.getFirstChild().getType() != Token.FUNCTION) {\n        maybeExpr = maybeExpr.getFirstChild();\n      }\n\n      // We only have to worry about methods with an implicit 'this' param, or this doesn't happen.\n      if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isFunctionDeclaration(maybeExpr)) {\n        // Ensure that if the expression is an if statement, both the if and else blocks are expressions\n        if (maybeExpr.getType() == Token.IF) {\n          Node ifBlock = maybeExpr.getFirstChild().getNext();\n          Node elseBlock = ifBlock.getNext();\n          return NodeUtil.isExpressionBlock(ifBlock) && NodeUtil.isExpressionBlock(elseBlock);\n        }\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..0dcaab5d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -517,23 +517,35 @@ public class PeepholeSubstituteAlternateSyntax\n    *     an expression.\n    */\n   private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // Special case for the bug mentioned in the comment in the original code\n+      if (maybeExpr.getType() == Token.RETURN && maybeExpr.hasChildren() &&\n+          maybeExpr.getFirstChild().getType() == Token.FALSE) {\n+        return false;\n       }\n-    }\n \n+      // IE has a bug where event handlers behave differently when their return value is used vs.\n+      // when their return value is in an EXPR_RESULT. It's pretty freaking weird. See:\n+      // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+      // We try to detect this case, and not fold EXPR_RESULTs into other expressions.\n+      if (maybeExpr.getType() == Token.EXPR_RESULT && maybeExpr.hasOneChild() &&\n+          maybeExpr.getFirstChild().getType() != Token.FUNCTION) {\n+        maybeExpr = maybeExpr.getFirstChild();\n+      }\n+\n+      // We only have to worry about methods with an implicit 'this' param, or this doesn't happen.\n+      if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isFunctionDeclaration(maybeExpr)) {\n+        // Ensure that if the expression is an if statement, both the if and else blocks are expressions\n+        if (maybeExpr.getType() == Token.IF) {\n+          Node ifBlock = maybeExpr.getFirstChild().getNext();\n+          Node elseBlock = ifBlock.getNext();\n+          return NodeUtil.isExpressionBlock(ifBlock) && NodeUtil.isExpressionBlock(elseBlock);\n+        }\n+        return true;\n+      }\n+    }\n     return false;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}