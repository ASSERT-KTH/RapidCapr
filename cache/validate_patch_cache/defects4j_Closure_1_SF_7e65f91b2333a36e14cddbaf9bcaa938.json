{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        if (lastArg.isDefaultValue()) {\n          // Don't strip unused arguments that have default values.\n          // (Workaround for https://github.com/google/closure-compiler/issues/3543)\n          break;\n        }\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n          lastArg = argList.getLastChild();\n        } else {\n          break;\n        }\n      }\n    } else {\n      // Don't strip unreferenced args if we are optimizing calls.\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..77756de6 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,17 +366,6 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n     Node function = fnScope.getRootNode();\n \n     Preconditions.checkState(function.isFunction());\n@@ -390,20 +379,26 @@ class RemoveUnusedVars\n         && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n       // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        if (lastArg.isDefaultValue()) {\n+          // Don't strip unused arguments that have default values.\n+          // (Workaround for https://github.com/google/closure-compiler/issues/3543)\n+          break;\n+        }\n         Var var = fnScope.getVar(lastArg.getString());\n         if (!referenced.contains(var)) {\n           argList.removeChild(lastArg);\n           compiler.reportCodeChange();\n+          lastArg = argList.getLastChild();\n         } else {\n           break;\n         }\n       }\n     } else {\n+      // Don't strip unreferenced args if we are optimizing calls.\n       callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n \n \n   /**",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}