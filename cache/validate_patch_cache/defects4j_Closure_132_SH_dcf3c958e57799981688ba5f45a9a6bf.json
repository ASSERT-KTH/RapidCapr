{
    "patch": "              // if LHS has side effects, don't proceed [since the optimization\n              // evaluates LHS before cond]\n              NodeTraversal.Callback  sideEffectCheck =\n                      new NodeTraversal.AbstractPreOrderCallback() {\n                @Override\n                public void visit(NodeTraversal t, Node n, Node parent) {\n                  if (n == lhs.getFirstChild() && NodeUtil.mayHaveSideEffects(n)) {\n                    throw new RuntimeException(\"LHS of conditional expression may have side effects\");\n                  }\n                }\n              };\n              \n              NodeTraversal.traverseEs6(compiler, lhs.getFirstChild(), sideEffectCheck);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..d654648d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,19 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              // if LHS has side effects, don't proceed [since the optimization\n+              // evaluates LHS before cond]\n+              NodeTraversal.Callback  sideEffectCheck =\n+                      new NodeTraversal.AbstractPreOrderCallback() {\n+                @Override\n+                public void visit(NodeTraversal t, Node n, Node parent) {\n+                  if (n == lhs.getFirstChild() && NodeUtil.mayHaveSideEffects(n)) {\n+                    throw new RuntimeException(\"LHS of conditional expression may have side effects\");\n+                  }\n+                }\n+              };\n+              \n+              NodeTraversal.traverseEs6(compiler, lhs.getFirstChild(), sideEffectCheck);\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}