{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n    final int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    char ch0 = str.charAt(0);\n    char ch1 = str.charAt(1);\n    if (!isAlphaLower(ch0) || !isAlphaLower(ch1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 2) {\n        return new Locale(str);\n    }\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    \n    String language = str.substring(0, 2);\n    String country = \"\";\n    String variant = \"\";\n    \n    int index = 3;\n    \n    // Check if there is a country code\n    if (index + 2 <= len && isAlphaUpper(str.charAt(index)) && isAlphaUpper(str.charAt(index+1))) {\n        country = str.substring(index, index+2);\n        index += 2;\n    }\n    \n    // Check if there is a variant code\n    if (index + 1 < len && str.charAt(index) == '_' && str.charAt(index+1) != '_') {\n        variant = str.substring(index+1);\n    }\n    \n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isAlphaLower(final char ch) {\n    return ch >= 'a' && ch <= 'z';\n}\n\nprivate static boolean isAlphaUpper(final char ch) {\n    return ch >= 'A' && ch <= 'Z';\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..76875663 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,47 +85,53 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n     }\n+    final int len = str.length();\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    char ch0 = str.charAt(0);\n+    char ch1 = str.charAt(1);\n+    if (!isAlphaLower(ch0) || !isAlphaLower(ch1)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (len == 2) {\n+        return new Locale(str);\n+    }\n+    if (str.charAt(2) != '_') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    \n+    String language = str.substring(0, 2);\n+    String country = \"\";\n+    String variant = \"\";\n+    \n+    int index = 3;\n+    \n+    // Check if there is a country code\n+    if (index + 2 <= len && isAlphaUpper(str.charAt(index)) && isAlphaUpper(str.charAt(index+1))) {\n+        country = str.substring(index, index+2);\n+        index += 2;\n+    }\n+    \n+    // Check if there is a variant code\n+    if (index + 1 < len && str.charAt(index) == '_' && str.charAt(index+1) != '_') {\n+        variant = str.substring(index+1);\n+    }\n+    \n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isAlphaLower(final char ch) {\n+    return ch >= 'a' && ch <= 'z';\n+}\n+\n+private static boolean isAlphaUpper(final char ch) {\n+    return ch >= 'A' && ch <= 'Z';\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: _GB",
    "test_result": "FAIL"
}