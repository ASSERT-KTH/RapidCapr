{
    "patch": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    if (str == null || str.length() <= upper) {\n        return str;\n    }\n\n    StringBuilder result = new StringBuilder();\n\n    // find the start and end index to abbreviate\n    int start = (lower >= 0 && lower <= str.length()) ? lower : 0;\n    int end = (upper >= 0 && upper <= str.length()) ? upper : str.length();\n\n    // if the start index is greater than 0, and not at the beginning of a word, include the previous word\n    if (start > 0 && !Character.isWhitespace(str.charAt(start - 1))) {\n        int i = str.lastIndexOf(' ', start - 1);\n        start = (i == -1) ? 0 : i + 1;\n    }\n\n    // if the end index is less than the string length, and not at the end of a word, exclude the next word\n    if (end < str.length() && !Character.isWhitespace(str.charAt(end))) {\n        int i = str.indexOf(' ', end);\n        end = (i == -1) ? str.length() : i;\n    }\n\n    result.append(str.substring(start, end));\n\n    // append the appendToEnd string if the abbreviation isn't the entire string\n    if (end < str.length()) {\n        result.append(StringUtils.defaultString(appendToEnd));\n    }\n\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..979d7430 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -602,43 +602,37 @@ public class WordUtils {\n      * @return the abbreviated String.\n      * @since 2.4\n      */\n-    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n-        // initial parameter checks\n-        if (str == null) {\n-            return null;\n-        }\n-        if (str.length() == 0) {\n-            return StringUtils.EMPTY;\n-        }\n+public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n+    if (str == null || str.length() <= upper) {\n+        return str;\n+    }\n \n-        // if the lower value is greater than the length of the string,\n-        // set to the length of the string\n-        // if the upper value is -1 (i.e. no limit) or is greater\n-        // than the length of the string, set to the length of the string\n-        if (upper == -1 || upper > str.length()) {\n-            upper = str.length();\n-        }\n-        // if upper is less than lower, raise it to lower\n-        if (upper < lower) {\n-            upper = lower;\n-        }\n+    StringBuilder result = new StringBuilder();\n \n-        StringBuffer result = new StringBuffer();\n-        int index = StringUtils.indexOf(str, \" \", lower);\n-        if (index == -1) {\n-            result.append(str.substring(0, upper));\n-            // only if abbreviation has occured do we append the appendToEnd value\n-            if (upper != str.length()) {\n-                result.append(StringUtils.defaultString(appendToEnd));\n-            }\n-        } else if (index > upper) {\n-            result.append(str.substring(0, upper));\n-            result.append(StringUtils.defaultString(appendToEnd));\n-        } else {\n-            result.append(str.substring(0, index));\n-            result.append(StringUtils.defaultString(appendToEnd));\n-        }\n-        return result.toString();\n+    // find the start and end index to abbreviate\n+    int start = (lower >= 0 && lower <= str.length()) ? lower : 0;\n+    int end = (upper >= 0 && upper <= str.length()) ? upper : str.length();\n+\n+    // if the start index is greater than 0, and not at the beginning of a word, include the previous word\n+    if (start > 0 && !Character.isWhitespace(str.charAt(start - 1))) {\n+        int i = str.lastIndexOf(' ', start - 1);\n+        start = (i == -1) ? 0 : i + 1;\n+    }\n+\n+    // if the end index is less than the string length, and not at the end of a word, exclude the next word\n+    if (end < str.length() && !Character.isWhitespace(str.charAt(end))) {\n+        int i = str.indexOf(' ', end);\n+        end = (i == -1) ? str.length() : i;\n+    }\n+\n+    result.append(str.substring(start, end));\n+\n+    // append the appendToEnd string if the abbreviation isn't the entire string\n+    if (end < str.length()) {\n+        result.append(StringUtils.defaultString(appendToEnd));\n     }\n \n+    return result.toString();\n+}\n+\n }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<01234[]> but was:<01234[56789]>",
    "test_result": "FAIL"
}