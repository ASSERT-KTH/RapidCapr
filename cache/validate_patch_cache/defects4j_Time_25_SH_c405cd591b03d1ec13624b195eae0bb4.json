{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // If we have just crossed a DST boundary, we need to select the correct offset\n    if (Math.abs(offsetLocal - offsetAdjusted) > 1) {\n        // Find the closest transition to instantAdjusted\n        long nextLocal = nextTransition(instantAdjusted);\n        long prevLocal = previousTransition(instantAdjusted);\n\n        // Find the closest transition to instantLocal\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n\n        // Check if instantAdjusted is closer to next or prev transition for local time zone\n        boolean isNextLocal = Math.abs(nextLocal - instantAdjusted) <= Math.abs(prevLocal - instantAdjusted);\n\n        // Check if instantLocal is closer to next or prev transition for adjusted time zone\n        boolean isNextAdjusted = Math.abs(nextAdjusted - (instantLocal - offsetAdjusted)) <= Math.abs(prevAdjusted - (instantLocal - offsetAdjusted));\n\n        // If instantAdjusted is closer to next and instantLocal is closer to prev OR\n        // instantAdjusted is closer to prev and instantLocal is closer to next,\n        // return offsetLocal, otherwise return offsetAdjusted\n        if ((isNextLocal && !isNextAdjusted) || (!isNextLocal && isNextAdjusted)) {\n            return offsetLocal;\n        } else {\n            return offsetAdjusted;\n        }\n    } else if (offsetLocal > offsetAdjusted) {\n        // If we are in the \"spring forward\" case, the current time may be invalid\n        // We need to check the next transition for adjusted time\n        // If it is different from the next transition for local time, we should return offsetLocal\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..89ed6390 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,42 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // If we have just crossed a DST boundary, we need to select the correct offset\n+    if (Math.abs(offsetLocal - offsetAdjusted) > 1) {\n+        // Find the closest transition to instantAdjusted\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long prevLocal = previousTransition(instantAdjusted);\n+\n+        // Find the closest transition to instantLocal\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+\n+        // Check if instantAdjusted is closer to next or prev transition for local time zone\n+        boolean isNextLocal = Math.abs(nextLocal - instantAdjusted) <= Math.abs(prevLocal - instantAdjusted);\n+\n+        // Check if instantLocal is closer to next or prev transition for adjusted time zone\n+        boolean isNextAdjusted = Math.abs(nextAdjusted - (instantLocal - offsetAdjusted)) <= Math.abs(prevAdjusted - (instantLocal - offsetAdjusted));\n+\n+        // If instantAdjusted is closer to next and instantLocal is closer to prev OR\n+        // instantAdjusted is closer to prev and instantLocal is closer to next,\n+        // return offsetLocal, otherwise return offsetAdjusted\n+        if ((isNextLocal && !isNextAdjusted) || (!isNextLocal && isNextAdjusted)) {\n+            return offsetLocal;\n+        } else {\n+            return offsetAdjusted;\n+        }\n+    } else if (offsetLocal > offsetAdjusted) {\n+        // If we are in the \"spring forward\" case, the current time may be invalid\n+        // We need to check the next transition for adjusted time\n+        // If it is different from the next transition for local time, we should return offsetLocal\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}