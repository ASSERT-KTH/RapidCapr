{
    "patch": "public Class<?> getGenericType(Field field) {\n    Type genericType = field.getGenericType();\n\n    // If the generic type is not a parameterized type, return Object.class\n    if (!(genericType instanceof ParameterizedType)) {\n        return Object.class;\n    }\n\n    Type actualType = ((ParameterizedType) genericType).getActualTypeArguments()[0];\n\n    // If the actual type is not a Class or a ParameterizedType, return Object.class\n    if (!(actualType instanceof Class) && !(actualType instanceof ParameterizedType)) {\n        return Object.class;\n    }\n\n    // If the actual type is a Class, return it\n    if (actualType instanceof Class) {\n        return (Class<?>) actualType;\n    }\n\n    // If the actual type is a ParameterizedType, recursively get the raw type\n    return getRawType((ParameterizedType) actualType);\n}\n\nprivate Class<?> getRawType(ParameterizedType parameterizedType) {\n    Type rawType = parameterizedType.getRawType();\n\n    // If the raw type is a Class, return it\n    if (rawType instanceof Class) {\n        return (Class<?>) rawType;\n    }\n\n    // If the raw type is not a Class or a ParameterizedType, throw an exception\n    if (!(rawType instanceof ParameterizedType)) {\n        throw new IllegalArgumentException(\"Unexpected raw type: \" + rawType);\n    }\n\n    // If the raw type is a ParameterizedType, recursively get the raw type\n    return getRawType((ParameterizedType) rawType);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..7a7e1f959 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,44 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+public Class<?> getGenericType(Field field) {\n+    Type genericType = field.getGenericType();\n+\n+    // If the generic type is not a parameterized type, return Object.class\n+    if (!(genericType instanceof ParameterizedType)) {\n+        return Object.class;\n+    }\n+\n+    Type actualType = ((ParameterizedType) genericType).getActualTypeArguments()[0];\n+\n+    // If the actual type is not a Class or a ParameterizedType, return Object.class\n+    if (!(actualType instanceof Class) && !(actualType instanceof ParameterizedType)) {\n+        return Object.class;\n+    }\n+\n+    // If the actual type is a Class, return it\n+    if (actualType instanceof Class) {\n+        return (Class<?>) actualType;\n+    }\n+\n+    // If the actual type is a ParameterizedType, recursively get the raw type\n+    return getRawType((ParameterizedType) actualType);\n+}\n+\n+private Class<?> getRawType(ParameterizedType parameterizedType) {\n+    Type rawType = parameterizedType.getRawType();\n+\n+    // If the raw type is a Class, return it\n+    if (rawType instanceof Class) {\n+        return (Class<?>) rawType;\n+    }\n+\n+    // If the raw type is not a Class or a ParameterizedType, throw an exception\n+    if (!(rawType instanceof ParameterizedType)) {\n+        throw new IllegalArgumentException(\"Unexpected raw type: \" + rawType);\n+    }\n+\n+    // If the raw type is a ParameterizedType, recursively get the raw type\n+    return getRawType((ParameterizedType) rawType);\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}