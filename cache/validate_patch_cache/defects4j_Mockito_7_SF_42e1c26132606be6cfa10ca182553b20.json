{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds != null && bounds.length > 0) {\n        for (Type type : bounds) {\n            if (type != null) {\n                if (type instanceof TypeVariable) {\n                    Type actualType = getActualTypeArgumentFor((TypeVariable<?>) type);\n                    if (actualType != null) {\n                        if (actualType instanceof TypeVariable) {\n                            readTypeVariablesForTypeVariable((TypeVariable<?>) actualType);\n                        } else {\n                            registerTypeVariablesOn(actualType);\n                        }\n                    }\n                } else {\n                    registerTypeVariablesOn(type);\n                }\n            }\n        }\n    }\n\n    Type actualType = getActualTypeArgumentFor(typeVariable);\n    if (actualType != null) {\n        if (actualType instanceof TypeVariable) {\n            readTypeVariablesForTypeVariable((TypeVariable<?>) actualType);\n        } else {\n            registerTypeVariablesOn(actualType);\n        }\n    }\n}\n\nprivate void readTypeVariablesForTypeVariable(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds != null && bounds.length > 0) {\n        for (Type type : bounds) {\n            if (type != null) {\n                if (type instanceof TypeVariable) {\n                    Type actualType = getActualTypeArgumentFor((TypeVariable<?>) type);\n                    if (actualType != null) {\n                        if (actualType instanceof TypeVariable) {\n                            readTypeVariablesForTypeVariable((TypeVariable<?>) actualType);\n                        } else {\n                            registerTypeVariablesOn(actualType);\n                        }\n                    }\n                } else {\n                    registerTypeVariablesOn(type);\n                }\n            }\n        }\n    } else {\n        Type actualType = getActualTypeArgumentFor(typeVariable);\n        if (actualType != null) {\n            if (actualType instanceof TypeVariable) {\n                readTypeVariablesForTypeVariable((TypeVariable<?>) actualType);\n            } else {\n                registerTypeVariablesOn(actualType);\n            }\n        } else {\n            registerTypeVariablesOn(typeVariable);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..1ad0d2a22 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,74 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds != null && bounds.length > 0) {\n+        for (Type type : bounds) {\n+            if (type != null) {\n+                if (type instanceof TypeVariable) {\n+                    Type actualType = getActualTypeArgumentFor((TypeVariable<?>) type);\n+                    if (actualType != null) {\n+                        if (actualType instanceof TypeVariable) {\n+                            readTypeVariablesForTypeVariable((TypeVariable<?>) actualType);\n+                        } else {\n+                            registerTypeVariablesOn(actualType);\n+                        }\n+                    }\n+                } else {\n+                    registerTypeVariablesOn(type);\n+                }\n+            }\n+        }\n+    }\n+\n+    Type actualType = getActualTypeArgumentFor(typeVariable);\n+    if (actualType != null) {\n+        if (actualType instanceof TypeVariable) {\n+            readTypeVariablesForTypeVariable((TypeVariable<?>) actualType);\n+        } else {\n+            registerTypeVariablesOn(actualType);\n+        }\n+    }\n+}\n+\n+private void readTypeVariablesForTypeVariable(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds != null && bounds.length > 0) {\n+        for (Type type : bounds) {\n+            if (type != null) {\n+                if (type instanceof TypeVariable) {\n+                    Type actualType = getActualTypeArgumentFor((TypeVariable<?>) type);\n+                    if (actualType != null) {\n+                        if (actualType instanceof TypeVariable) {\n+                            readTypeVariablesForTypeVariable((TypeVariable<?>) actualType);\n+                        } else {\n+                            registerTypeVariablesOn(actualType);\n+                        }\n+                    }\n+                } else {\n+                    registerTypeVariablesOn(type);\n+                }\n+            }\n+        }\n+    } else {\n+        Type actualType = getActualTypeArgumentFor(typeVariable);\n+        if (actualType != null) {\n+            if (actualType instanceof TypeVariable) {\n+                readTypeVariablesForTypeVariable((TypeVariable<?>) actualType);\n+            } else {\n+                registerTypeVariablesOn(actualType);\n+            }\n+        } else {\n+            registerTypeVariablesOn(typeVariable);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}