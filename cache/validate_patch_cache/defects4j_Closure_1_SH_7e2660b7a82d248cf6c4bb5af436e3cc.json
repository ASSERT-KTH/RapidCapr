{
    "patch": "      // remove unreferenced default parameter values\n      for (Node arg : argList.children()) {\n        String argName = arg.getString();\n        if (arg.hasChildren()) { // if it has a default value\n          Node defaultValue = arg.getFirstChild();\n          if (defaultValue!=null) {\n            String defaultValueName = extractNameIfPossible(defaultValue);\n            if (defaultValueName!=null\n                && !referenced.contains(fnScope.getVar(defaultValueName))) {\n              arg.removeChild(defaultValue);\n              compiler.reportCodeChange();\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..beea9477 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,19 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // remove unreferenced default parameter values\n+      for (Node arg : argList.children()) {\n+        String argName = arg.getString();\n+        if (arg.hasChildren()) { // if it has a default value\n+          Node defaultValue = arg.getFirstChild();\n+          if (defaultValue!=null) {\n+            String defaultValueName = extractNameIfPossible(defaultValue);\n+            if (defaultValueName!=null\n+                && !referenced.contains(fnScope.getVar(defaultValueName))) {\n+              arg.removeChild(defaultValue);\n+              compiler.reportCodeChange();\n+            }\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}