{
    "patch": "    List<Node> parameters = new ArrayList<>();\n    NodeUtil.getFunctionParameters(fnScope.getRootNode(), parameters);\n    Node functionNode = fnScope.getRootNode();\n\n    Preconditions.checkState(functionNode.isFunction());\n    if (NodeUtil.isGetOrSetKey(functionNode.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(functionNode);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(functionNode);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        if (!referenced.contains(fnScope.getVar(lastArg.getString()))) {\n          argList.removeChild(lastArg);\n          lastArg = argList.getLastChild();\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n      // Strip unreferenced args off the end of function calls inside this function.\n      NodeUtil.visitPreOrder(fnScope.getRootNode(), new NodeUtil.Visitor() {\n        @Override\n        public void visit(Node node) {\n          if (node.isCall()) {\n            Node callee = node.getFirstChild();\n            if (callee.isName() && callee.getString().equals(functionNode.getFirstChild().getString())) {\n              Node argList = callee.getNext();\n              Node lastArg = argList.getLastChild();\n              while (lastArg != null) {\n                if (!referenced.contains(fnScope.getVar(lastArg.getString()))) {\n                  argList.removeChild(lastArg);\n                  lastArg = argList.getLastChild();\n                  compiler.reportCodeChange();\n                } else {\n                  break;\n                }\n              }\n            }\n          }\n        }\n      });\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e6da560e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,56 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<Node> parameters = new ArrayList<>();\n+    NodeUtil.getFunctionParameters(fnScope.getRootNode(), parameters);\n+    Node functionNode = fnScope.getRootNode();\n+\n+    Preconditions.checkState(functionNode.isFunction());\n+    if (NodeUtil.isGetOrSetKey(functionNode.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(functionNode);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(functionNode);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        if (!referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+          argList.removeChild(lastArg);\n+          lastArg = argList.getLastChild();\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+      // Strip unreferenced args off the end of function calls inside this function.\n+      NodeUtil.visitPreOrder(fnScope.getRootNode(), new NodeUtil.Visitor() {\n+        @Override\n+        public void visit(Node node) {\n+          if (node.isCall()) {\n+            Node callee = node.getFirstChild();\n+            if (callee.isName() && callee.getString().equals(functionNode.getFirstChild().getString())) {\n+              Node argList = callee.getNext();\n+              Node lastArg = argList.getLastChild();\n+              while (lastArg != null) {\n+                if (!referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+                  argList.removeChild(lastArg);\n+                  lastArg = argList.getLastChild();\n+                  compiler.reportCodeChange();\n+                } else {\n+                  break;\n+                }\n+              }\n+            }\n+          }\n+        }\n+      });\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}