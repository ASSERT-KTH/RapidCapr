{
    "patch": "// if the offsets differ, we must be near a DST boundary\nif (offsetLocal != offsetAdjusted) {\n    // we need to ensure that time is always after the DST gap\n    // this happens naturally for positive offsets, but not for negative\n    if ((offsetLocal - offsetAdjusted) < 0) {\n        // if we just return offsetAdjusted then the time is pushed\n        // back before the transition, whereas it should be\n        // on or after the transition\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n        if (nextLocal != nextAdjusted) {\n            if (nextLocal - instantAdjusted < DateTimeConstants.MILLIS_PER_HOUR) {\n                if (getOffset(nextLocal) > offsetLocal) {\n                    return getOffset(nextLocal); // return the offset after the transition\n                }\n            } else {\n                return offsetLocal; // return the original offset\n            }\n        } else {\n            return offsetLocal; // return the original offset\n        }\n    } else {\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n        if (prevLocal != prevAdjusted) {\n            if (instantAdjusted - prevLocal < DateTimeConstants.MILLIS_PER_HOUR) {\n                if (getOffset(prevLocal) < offsetLocal) {\n                    return getOffset(prevLocal); // return the offset before the transition\n                }\n            } else {\n                return offsetLocal; // return the original offset\n            }\n        } else {\n            return offsetLocal; // return the original offset\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4d182e9d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,44 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+// if the offsets differ, we must be near a DST boundary\n+if (offsetLocal != offsetAdjusted) {\n+    // we need to ensure that time is always after the DST gap\n+    // this happens naturally for positive offsets, but not for negative\n+    if ((offsetLocal - offsetAdjusted) < 0) {\n+        // if we just return offsetAdjusted then the time is pushed\n+        // back before the transition, whereas it should be\n+        // on or after the transition\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+        if (nextLocal != nextAdjusted) {\n+            if (nextLocal - instantAdjusted < DateTimeConstants.MILLIS_PER_HOUR) {\n+                if (getOffset(nextLocal) > offsetLocal) {\n+                    return getOffset(nextLocal); // return the offset after the transition\n+                }\n+            } else {\n+                return offsetLocal; // return the original offset\n+            }\n+        } else {\n+            return offsetLocal; // return the original offset\n+        }\n+    } else {\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+        if (prevLocal != prevAdjusted) {\n+            if (instantAdjusted - prevLocal < DateTimeConstants.MILLIS_PER_HOUR) {\n+                if (getOffset(prevLocal) < offsetLocal) {\n+                    return getOffset(prevLocal); // return the offset before the transition\n+                }\n+            } else {\n+                return offsetLocal; // return the original offset\n+            }\n+        } else {\n+            return offsetLocal; // return the original offset\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}