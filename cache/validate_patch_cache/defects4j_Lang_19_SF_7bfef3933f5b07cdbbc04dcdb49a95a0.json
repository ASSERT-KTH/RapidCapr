{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    if (input == null || index < 0) return 0;\n    \n    int seqEnd = input.length();\n    \n    if (index >= seqEnd - 1) return 0;\n    \n    char ch1 = input.charAt(index);\n    \n    if (ch1 != '&') return 0;\n    \n    int idx = index + 1;\n    char ch2 = input.charAt(idx);\n    \n    if (ch2 == '#') {\n        boolean isHex = false;\n        idx++;\n        char ch = input.charAt(idx);\n        \n        if (ch == 'x' || ch == 'X') {\n            isHex = true;\n            idx++;\n            if (idx >= seqEnd) {\n                out.write(ch1);\n                return 1;\n            }\n            ch = input.charAt(idx);\n        }\n        \n        int beg = idx;\n        \n        while (idx < seqEnd) {\n            ch = input.charAt(idx);\n            if (!isHex && (ch == ';' || ch == '&' || ch == '<' || ch == '>')) break;\n            if (isHex && !((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))) break;\n            idx++;\n        }\n        \n        if (idx >= seqEnd || (idx == beg && !isHex)) {\n            out.write(ch1);\n            if (ch2 == 'a' || ch2 == 'A') return 1;\n            if (ch2 == '#' && idx < seqEnd && input.charAt(idx) == 'x') return 2;\n            return 0;\n        }\n        \n        int val;\n        \n        try {\n            if (isHex) {\n                val = Integer.parseInt(input.subSequence(beg, idx).toString(), 16);\n            } else {\n                val = Integer.parseInt(input.subSequence(beg, idx).toString(), 10);\n            }\n        } catch (NumberFormatException ex) {\n            out.write(input.subSequence(index, idx));\n            return idx - index;\n        }\n        \n        if (val < 0 || val > 0x10FFFF || (val >= 0xD800 && val <= 0xDFFF)) {\n            out.write(input.subSequence(index, idx));\n            return idx - index;\n        }\n        \n        if (Character.isHighSurrogate((char) val) || Character.isLowSurrogate((char) val)) {\n            out.write(input.subSequence(index, idx));\n            return idx - index;\n        }\n        \n        out.write((char) val);\n        return idx - index;\n    }\n    \n    if (ch2 == 'a' || ch2 == 'A') {\n        out.write(ch1);\n        return 1;\n    }\n    \n    int end = seqEnd;\n    boolean found = false;\n    \n    for (int i = idx; !found && i < seqEnd; i++) {\n        char ch = input.charAt(i);\n        \n        if (ch == ';') {\n            end = i;\n            found = true;\n        } else if (ch == '<' || ch == '&') {\n            out.write(ch1);\n            return 1;\n        }\n    }\n    \n    if (!found) {\n        out.write(ch1);\n        return 1;\n    }\n    \n    String entName = input.subSequence(idx, end).toString();\n    Character entValue = characterEntities.get(entName);\n    \n    if (entValue == null) {\n        out.write(ch1);\n        out.write(input.subSequence(index + 1, end));\n        out.write(';');\n        return end - index;\n    }\n    \n    out.write(entValue);\n    return end - index + 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..8e3682a1 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,114 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    if (input == null || index < 0) return 0;\n+    \n+    int seqEnd = input.length();\n+    \n+    if (index >= seqEnd - 1) return 0;\n+    \n+    char ch1 = input.charAt(index);\n+    \n+    if (ch1 != '&') return 0;\n+    \n+    int idx = index + 1;\n+    char ch2 = input.charAt(idx);\n+    \n+    if (ch2 == '#') {\n+        boolean isHex = false;\n+        idx++;\n+        char ch = input.charAt(idx);\n+        \n+        if (ch == 'x' || ch == 'X') {\n+            isHex = true;\n+            idx++;\n+            if (idx >= seqEnd) {\n+                out.write(ch1);\n+                return 1;\n             }\n-\n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+            ch = input.charAt(idx);\n+        }\n+        \n+        int beg = idx;\n+        \n+        while (idx < seqEnd) {\n+            ch = input.charAt(idx);\n+            if (!isHex && (ch == ';' || ch == '&' || ch == '<' || ch == '>')) break;\n+            if (isHex && !((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))) break;\n+            idx++;\n+        }\n+        \n+        if (idx >= seqEnd || (idx == beg && !isHex)) {\n+            out.write(ch1);\n+            if (ch2 == 'a' || ch2 == 'A') return 1;\n+            if (ch2 == '#' && idx < seqEnd && input.charAt(idx) == 'x') return 2;\n+            return 0;\n+        }\n+        \n+        int val;\n+        \n+        try {\n+            if (isHex) {\n+                val = Integer.parseInt(input.subSequence(beg, idx).toString(), 16);\n             } else {\n-                out.write(entityValue);\n+                val = Integer.parseInt(input.subSequence(beg, idx).toString(), 10);\n             }\n-\n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        } catch (NumberFormatException ex) {\n+            out.write(input.subSequence(index, idx));\n+            return idx - index;\n+        }\n+        \n+        if (val < 0 || val > 0x10FFFF || (val >= 0xD800 && val <= 0xDFFF)) {\n+            out.write(input.subSequence(index, idx));\n+            return idx - index;\n+        }\n+        \n+        if (Character.isHighSurrogate((char) val) || Character.isLowSurrogate((char) val)) {\n+            out.write(input.subSequence(index, idx));\n+            return idx - index;\n+        }\n+        \n+        out.write((char) val);\n+        return idx - index;\n+    }\n+    \n+    if (ch2 == 'a' || ch2 == 'A') {\n+        out.write(ch1);\n+        return 1;\n+    }\n+    \n+    int end = seqEnd;\n+    boolean found = false;\n+    \n+    for (int i = idx; !found && i < seqEnd; i++) {\n+        char ch = input.charAt(i);\n+        \n+        if (ch == ';') {\n+            end = i;\n+            found = true;\n+        } else if (ch == '<' || ch == '&') {\n+            out.write(ch1);\n+            return 1;\n         }\n-        return 0;\n     }\n+    \n+    if (!found) {\n+        out.write(ch1);\n+        return 1;\n+    }\n+    \n+    String entName = input.subSequence(idx, end).toString();\n+    Character entValue = characterEntities.get(entName);\n+    \n+    if (entValue == null) {\n+        out.write(ch1);\n+        out.write(input.subSequence(index + 1, end));\n+        out.write(';');\n+        return end - index;\n+    }\n+    \n+    out.write(entValue);\n+    return end - index + 1;\n+}\n }",
    "result_reason": "error: no suitable method found for write(CharSequence)",
    "test_result": "ERROR"
}