{
    "patch": "public static Map<String, List<Integer>> groupByCategory(List<Item> items) {\n    if (items == null || items.isEmpty()) {\n        return new HashMap<>();\n    }\n\n    Map<String, List<Integer>> groups = new HashMap<>();\n    for (Item item : items) {\n        if (item == null || item.getCategory() == null) {\n            continue;\n        }\n        String category = item.getCategory();\n        List<Integer> itemIds = groups.getOrDefault(category, new ArrayList<>());\n        itemIds.add(item.getId());\n        groups.put(category, itemIds);\n    }\n    return groups;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..b1e425ad7 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,23 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<String, List<Integer>> groupByCategory(List<Item> items) {\n+    if (items == null || items.isEmpty()) {\n+        return new HashMap<>();\n+    }\n+\n+    Map<String, List<Integer>> groups = new HashMap<>();\n+    for (Item item : items) {\n+        if (item == null || item.getCategory() == null) {\n+            continue;\n+        }\n+        String category = item.getCategory();\n+        List<Integer> itemIds = groups.getOrDefault(category, new ArrayList<>());\n+        itemIds.add(item.getId());\n+        groups.put(category, itemIds);\n+    }\n+    return groups;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}