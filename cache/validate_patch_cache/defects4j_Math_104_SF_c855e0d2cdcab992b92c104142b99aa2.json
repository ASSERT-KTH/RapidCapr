{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    double gamma = gamma(a);\n\n    double term = Math.exp(-x) * Math.pow(x, a);\n    double sum = term;\n\n    for (int i = 1; i < 1000; i++) {\n        term *= x / (a + i);\n        sum += term;\n        if (Math.abs(term) < Math.abs(sum) * 1e-15) {\n            return sum / gamma;\n        }\n    }\n\n    return Double.NaN;\n}\n\npublic static double gamma(double z) {\n    if (z < 0.5) {\n        return Math.PI / (Math.sin(Math.PI * z) * gamma(1 - z));\n    }\n\n    double x = 0.99999999999980993;\n    double[] p = {\n            676.5203681218851,\n            -1259.1392167224028,\n            771.32342877765313,\n            -176.61502916214059,\n            12.507343278686905,\n            -0.13857109526572012,\n            9.9843695780195716e-6,\n            1.5056327351493116e-7\n    };\n\n    for (int i = 0; i < p.length; i++) {\n        x += p[i] / (z + i + 1);\n    }\n\n    double t = z + p.length - 0.5;\n    return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..0cfcfb62c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,47 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    double gamma = gamma(a);\n+\n+    double term = Math.exp(-x) * Math.pow(x, a);\n+    double sum = term;\n+\n+    for (int i = 1; i < 1000; i++) {\n+        term *= x / (a + i);\n+        sum += term;\n+        if (Math.abs(term) < Math.abs(sum) * 1e-15) {\n+            return sum / gamma;\n+        }\n+    }\n+\n+    return Double.NaN;\n+}\n+\n+public static double gamma(double z) {\n+    if (z < 0.5) {\n+        return Math.PI / (Math.sin(Math.PI * z) * gamma(1 - z));\n+    }\n+\n+    double x = 0.99999999999980993;\n+    double[] p = {\n+            676.5203681218851,\n+            -1259.1392167224028,\n+            771.32342877765313,\n+            -176.61502916214059,\n+            12.507343278686905,\n+            -0.13857109526572012,\n+            9.9843695780195716e-6,\n+            1.5056327351493116e-7\n+    };\n+\n+    for (int i = 0; i < p.length; i++) {\n+        x += p[i] / (z + i + 1);\n+    }\n+\n+    double t = z + p.length - 0.5;\n+    return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}