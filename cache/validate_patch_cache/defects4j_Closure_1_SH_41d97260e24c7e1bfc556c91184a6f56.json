{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastParam = null;\n      for (Node param : argList.children()) {\n        lastParam = param;\n      }\n      while (lastParam != null) {\n        if (!referenced.contains(fnScope.getVar(lastParam.getString()))) {\n          Node lastStmt = function.getLastChild();\n          while (lastStmt != null && !lastStmt.isExprResult()) {\n            lastStmt = lastStmt.getLastChild();\n          }\n          Preconditions.checkState(lastStmt != null, \"Unexpected last child\");\n          lastStmt.detach();\n          lastParam.detach();\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n        lastParam = argList.getLastChild();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..26bf0550 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,41 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastParam = null;\n+      for (Node param : argList.children()) {\n+        lastParam = param;\n+      }\n+      while (lastParam != null) {\n+        if (!referenced.contains(fnScope.getVar(lastParam.getString()))) {\n+          Node lastStmt = function.getLastChild();\n+          while (lastStmt != null && !lastStmt.isExprResult()) {\n+            lastStmt = lastStmt.getLastChild();\n+          }\n+          Preconditions.checkState(lastStmt != null, \"Unexpected last child\");\n+          lastStmt.detach();\n+          lastParam.detach();\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+        lastParam = argList.getLastChild();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}