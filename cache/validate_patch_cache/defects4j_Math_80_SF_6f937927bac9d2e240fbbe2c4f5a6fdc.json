{
    "patch": "private boolean flipIfWarranted(final int n, final int step) {\n    final double currentMaxValue = 1.5 * work[pingPong];\n    final double alternateMaxValue = work[4 * (n - 1) + (pingPong + 2) % 4];\n    if (currentMaxValue < alternateMaxValue) {\n        for (int i = 0; i < n; i++) {\n            int start = 4 * i;\n            int end = 4 * n - start - 1;\n            while (start < end) {\n                for (int k = 0; k < step; k++) {\n                    final double tmp = work[start + k];\n                    work[start + k] = work[end - k];\n                    work[end - k] = tmp;\n                }\n                start += step;\n                end -= step;\n            }\n        }\n        pingPong = (pingPong + 1) % 4;\n        return true;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 3fc328d8b..7d22a85da 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1129,22 +1129,28 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n      * only every other element)\n      * @return true if qd array was flipped\n      */\n-    private boolean flipIfWarranted(final int n, final int step) {\n-        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n+private boolean flipIfWarranted(final int n, final int step) {\n+    final double currentMaxValue = 1.5 * work[pingPong];\n+    final double alternateMaxValue = work[4 * (n - 1) + (pingPong + 2) % 4];\n+    if (currentMaxValue < alternateMaxValue) {\n+        for (int i = 0; i < n; i++) {\n+            int start = 4 * i;\n+            int end = 4 * n - start - 1;\n+            while (start < end) {\n+                for (int k = 0; k < step; k++) {\n+                    final double tmp = work[start + k];\n+                    work[start + k] = work[end - k];\n+                    work[end - k] = tmp;\n                 }\n-                j -= 4;\n+                start += step;\n+                end -= step;\n             }\n-            return true;\n         }\n-        return false;\n+        pingPong = (pingPong + 1) % 4;\n+        return true;\n     }\n+    return false;\n+}\n \n     /**\n      * Compute an interval containing all realEigenvalues of a block.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}