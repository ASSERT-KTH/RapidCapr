{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    boolean isFirst = true;\n    for (Node arg : getFunctionArgumentList(function)) {\n        Var var = fnScope.getVar(arg.getString());\n        if (var == null || !referenced.contains(var)) {\n            if (isFirst) {\n                // Strip any leading unused params.\n                while (arg.isName() && !referenced.contains(fnScope.getVar(arg.getString()))) {\n                    Node next = arg.getNext();\n                    function.removeChild(arg);\n                    arg = next;\n                }\n\n                if (arg.isName()) {\n                    Node argList = arg.getParent();\n                    arg.detach();\n                    compiler.reportCodeChange();\n                    argList.removeChild(arg);\n                }\n                isFirst = false;\n            } else {\n                Node argList = arg.getParent();\n                arg.detach();\n                compiler.reportCodeChange();\n                argList.removeChild(arg);\n            }\n        } else {\n            isFirst = false;\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..241f4d5b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,43 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+        // The parameters object literal setters can not be removed.\n+        return;\n+    }\n+\n+    boolean isFirst = true;\n+    for (Node arg : getFunctionArgumentList(function)) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (var == null || !referenced.contains(var)) {\n+            if (isFirst) {\n+                // Strip any leading unused params.\n+                while (arg.isName() && !referenced.contains(fnScope.getVar(arg.getString()))) {\n+                    Node next = arg.getNext();\n+                    function.removeChild(arg);\n+                    arg = next;\n+                }\n+\n+                if (arg.isName()) {\n+                    Node argList = arg.getParent();\n+                    arg.detach();\n+                    compiler.reportCodeChange();\n+                    argList.removeChild(arg);\n+                }\n+                isFirst = false;\n+            } else {\n+                Node argList = arg.getParent();\n+                arg.detach();\n+                compiler.reportCodeChange();\n+                argList.removeChild(arg);\n+            }\n+        } else {\n+            isFirst = false;\n+        }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}