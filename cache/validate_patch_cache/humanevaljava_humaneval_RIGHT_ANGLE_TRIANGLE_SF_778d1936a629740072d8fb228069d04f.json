{
    "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n    if (a <= 0 || b <= 0 || c <= 0) { // Check if any side is less than or equal to zero\n        return false;\n    }\n\n    // Check if sum of any two sides is less than or equal to the third side\n    int max = Math.max(Math.max(a, b), c);\n    int sumOfOtherSides = a + b + c - max;\n    if (sumOfOtherSides <= max) { // Fix: use sum of other sides instead of recalculation of sum\n        return false;\n    }\n\n    // Check if any two sides square sum up to the square of the third side\n    int min1 = Math.min(a, b), min2 = Math.min(b, c), min3 = Math.min(a, c);\n    return (min1 * min1 + min2 * min2 == max * max || min1 * min1 + min3 * min3 == max * max || min2 * min2 + min3 * min3 == max * max);\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/RIGHT_ANGLE_TRIANGLE.java b/src/main/java/humaneval/buggy/RIGHT_ANGLE_TRIANGLE.java\nindex da0fd0a..5a51a1d 100644\n--- a/src/main/java/humaneval/buggy/RIGHT_ANGLE_TRIANGLE.java\n+++ b/src/main/java/humaneval/buggy/RIGHT_ANGLE_TRIANGLE.java\n@@ -9,7 +9,20 @@ package humaneval.buggy;\n // right_angle_triangle(1, 2, 3) == False\n \n public class RIGHT_ANGLE_TRIANGLE {\n-    public static boolean right_angle_triangle(int a, int b, int c) {\n-        return a*a + b*b == c*c;\n+public static boolean right_angle_triangle(int a, int b, int c) {\n+    if (a <= 0 || b <= 0 || c <= 0) { // Check if any side is less than or equal to zero\n+        return false;\n     }\n+\n+    // Check if sum of any two sides is less than or equal to the third side\n+    int max = Math.max(Math.max(a, b), c);\n+    int sumOfOtherSides = a + b + c - max;\n+    if (sumOfOtherSides <= max) { // Fix: use sum of other sides instead of recalculation of sum\n+        return false;\n+    }\n+\n+    // Check if any two sides square sum up to the square of the third side\n+    int min1 = Math.min(a, b), min2 = Math.min(b, c), min3 = Math.min(a, c);\n+    return (min1 * min1 + min2 * min2 == max * max || min1 * min1 + min3 * min3 == max * max || min2 * min2 + min3 * min3 == max * max);\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}