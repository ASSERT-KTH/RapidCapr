{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    Chronology chrono = instant.getChronology();\n    long instantMillis = instant.getMillis();\n    long offsetMillis = chrono.getZone().getOffset(instantMillis);\n    Chronology selectedChrono = selectChronology(chrono);\n    long instantLocal = instantMillis + offsetMillis;\n    int defaultYear = selectedChrono.year().get(instantLocal);\n    if (defaultYear < 1 || defaultYear > 9999) {\n        defaultYear = selectedChrono.year().get(DateTimeUtils.currentTimeMillis());\n    }\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, selectedChrono, iLocale, iPivotYear, defaultYear);\n    bucket.setZone(chrono.getZone());\n    int newPos = parser.parseInto(bucket, text, position);\n\n    if (bucket.getOffsetInteger() != null) {\n        offsetMillis = bucket.getOffsetInteger();\n        selectedChrono = selectedChrono.withZone(DateTimeZone.forOffsetMillis(offsetMillis));\n    } else if (bucket.getZone() != null) {\n        selectedChrono = selectedChrono.withZone(bucket.getZone());\n    }\n\n    instantLocal = bucket.computeMillis(true, text);\n    if (instantLocal == Long.MIN_VALUE) {\n        instant.setMillis(Long.MIN_VALUE);\n        return parser.evaluateParsedOffset(position, bucket.getOffsetInteger(), null);\n    } else if (instantLocal == Long.MAX_VALUE) {\n        instant.setMillis(Long.MAX_VALUE);\n        return parser.evaluateParsedOffset(position, bucket.getOffsetInteger(), null);\n    }\n\n    instantLocal = correctLeapYear(selectedChrono, instantLocal, defaultYear);\n    instant.setMillis(instantLocal - offsetMillis);\n    instant.setChronology(selectedChrono);\n\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n\n    return newPos;\n}\n\nprivate long correctLeapYear(Chronology chrono, long instantLocal, int defaultYear) {\n    try {\n        if (chrono.dayOfYear().get(instantLocal) == 60 && chrono.monthOfYear().get(instantLocal) == 2) {\n            return chrono.monthOfYear().set(instantLocal, 3).withMaximumValue().getMillis();\n        }\n    } catch(IllegalArgumentException e) {\n        // the new month and year is not valid for the provided instant, so we don't adjust it\n    }\n    return instantLocal;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..ca9abc50 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,64 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    \n+    Chronology chrono = instant.getChronology();\n+    long instantMillis = instant.getMillis();\n+    long offsetMillis = chrono.getZone().getOffset(instantMillis);\n+    Chronology selectedChrono = selectChronology(chrono);\n+    long instantLocal = instantMillis + offsetMillis;\n+    int defaultYear = selectedChrono.year().get(instantLocal);\n+    if (defaultYear < 1 || defaultYear > 9999) {\n+        defaultYear = selectedChrono.year().get(DateTimeUtils.currentTimeMillis());\n+    }\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            instantLocal, selectedChrono, iLocale, iPivotYear, defaultYear);\n+    bucket.setZone(chrono.getZone());\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    if (bucket.getOffsetInteger() != null) {\n+        offsetMillis = bucket.getOffsetInteger();\n+        selectedChrono = selectedChrono.withZone(DateTimeZone.forOffsetMillis(offsetMillis));\n+    } else if (bucket.getZone() != null) {\n+        selectedChrono = selectedChrono.withZone(bucket.getZone());\n+    }\n+\n+    instantLocal = bucket.computeMillis(true, text);\n+    if (instantLocal == Long.MIN_VALUE) {\n+        instant.setMillis(Long.MIN_VALUE);\n+        return parser.evaluateParsedOffset(position, bucket.getOffsetInteger(), null);\n+    } else if (instantLocal == Long.MAX_VALUE) {\n+        instant.setMillis(Long.MAX_VALUE);\n+        return parser.evaluateParsedOffset(position, bucket.getOffsetInteger(), null);\n+    }\n+\n+    instantLocal = correctLeapYear(selectedChrono, instantLocal, defaultYear);\n+    instant.setMillis(instantLocal - offsetMillis);\n+    instant.setChronology(selectedChrono);\n+\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+\n+    return newPos;\n+}\n+\n+private long correctLeapYear(Chronology chrono, long instantLocal, int defaultYear) {\n+    try {\n+        if (chrono.dayOfYear().get(instantLocal) == 60 && chrono.monthOfYear().get(instantLocal) == 2) {\n+            return chrono.monthOfYear().set(instantLocal, 3).withMaximumValue().getMillis();\n         }\n-        return newPos;\n+    } catch(IllegalArgumentException e) {\n+        // the new month and year is not valid for the provided instant, so we don't adjust it\n     }\n+    return instantLocal;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: incompatible types: possible lossy conversion from long to int",
    "test_result": "ERROR"
}