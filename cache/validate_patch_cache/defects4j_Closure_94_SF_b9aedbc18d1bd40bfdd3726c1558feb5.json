{
    "patch": "        String name = val.getString();\n        while (val != null && val.getType() != Token.NAME) {\n          val = val.getFirstChild();\n        }\n        if (val != null && val.isQualifiedName() && defines.contains(val.getQualifiedName())) {\n          return true;\n        }\n        return false;\n\n      case Token.GETPROP:\n        String propName = val.getLastChild().getString();\n        while (val != null && val.getType() != Token.NAME) {\n          val = val.getFirstChild();\n        }\n        if (val != null && val.isQualifiedName()) {\n          String baseName = val.getQualifiedName();\n          return defines.contains(baseName + \".\" + propName);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex a31b17a2..e90aa14f 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -317,34 +317,23 @@ public final class NodeUtil {\n    * @param val The value being assigned.\n    * @param defines The list of names of existing defines.\n    */\n-  static boolean isValidDefineValue(Node val, Set<String> defines) {\n-    switch (val.getType()) {\n-      case Token.STRING:\n-      case Token.NUMBER:\n-      case Token.TRUE:\n-      case Token.FALSE:\n-        return true;\n-\n-      // Binary operators are only valid if both children are valid.\n-      case Token.BITAND:\n-      case Token.BITNOT:\n-      case Token.BITOR:\n-      case Token.BITXOR:\n-\n-      // Uniary operators are valid if the child is valid.\n-      case Token.NOT:\n-      case Token.NEG:\n-        return isValidDefineValue(val.getFirstChild(), defines);\n+        String name = val.getString();\n+        while (val != null && val.getType() != Token.NAME) {\n+          val = val.getFirstChild();\n+        }\n+        if (val != null && val.isQualifiedName() && defines.contains(val.getQualifiedName())) {\n+          return true;\n+        }\n+        return false;\n \n-      // Names are valid if and only if they are defines themselves.\n-      case Token.NAME:\n       case Token.GETPROP:\n-        if (val.isQualifiedName()) {\n-          return defines.contains(val.getQualifiedName());\n+        String propName = val.getLastChild().getString();\n+        while (val != null && val.getType() != Token.NAME) {\n+          val = val.getFirstChild();\n         }\n-    }\n-    return false;\n-  }\n+        if (val != null && val.isQualifiedName()) {\n+          String baseName = val.getQualifiedName();\n+          return defines.contains(baseName + \".\" + propName);\n \n   /**\n    * Returns whether this a BLOCK node with no children.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}