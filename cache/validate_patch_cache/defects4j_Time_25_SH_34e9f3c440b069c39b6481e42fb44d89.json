{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) { \n    long nextLocal = nextTransition(instantAdjusted); \n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); \n    if (nextLocal != nextAdjusted) {\n        // we are near a DST boundary.\n        long diff = (nextLocal - instantAdjusted) - (nextAdjusted - instantLocal);\n        if (diff > 0 && offsetAdjusted > offsetLocal) {\n            // next transition will push us ahead\n            return offsetAdjusted;\n        } else if (diff < 0 && offsetLocal > offsetAdjusted) {\n            // next transition will push us back\n            return offsetLocal;\n        } else { \n            // we're in an area where there is no future transition or we can't rely on\n            // what we know about the future transition based on the current one\n            long nextLocalStart = nextTransition(nextLocal);\n            long nextAdjustedStart = nextTransition(nextAdjusted);\n            if (isGap(instantLocal, nextLocalStart) != isGap(instantLocal - offsetAdjusted, nextAdjustedStart)) {\n                // we are switching from gap to overlap or the other way around\n                if (diff > 0) {\n                    return offsetAdjusted;\n                } else if (diff < 0) {\n                    return offsetLocal;\n                } else {\n                    return offsetAdjusted;\n                }\n            } else if (isOverlap(instantLocal, nextLocalStart) && isOverlap(instantLocal - offsetAdjusted, nextAdjustedStart)) {\n                if (diff > 0) {\n                    return offsetAdjusted;\n                } else if (diff < 0) {\n                    return offsetLocal;\n                } else {\n                    return offsetLocal >= offsetAdjusted ? offsetLocal : offsetAdjusted;\n                }\n            } else {\n                if (diff > 0) {\n                    return offsetLocal;\n                } else if (diff < 0) {\n                    return offsetAdjusted;\n                } else {\n                    return offsetAdjusted;\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e34ec5e5 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,52 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) { \n+    long nextLocal = nextTransition(instantAdjusted); \n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); \n+    if (nextLocal != nextAdjusted) {\n+        // we are near a DST boundary.\n+        long diff = (nextLocal - instantAdjusted) - (nextAdjusted - instantLocal);\n+        if (diff > 0 && offsetAdjusted > offsetLocal) {\n+            // next transition will push us ahead\n+            return offsetAdjusted;\n+        } else if (diff < 0 && offsetLocal > offsetAdjusted) {\n+            // next transition will push us back\n+            return offsetLocal;\n+        } else { \n+            // we're in an area where there is no future transition or we can't rely on\n+            // what we know about the future transition based on the current one\n+            long nextLocalStart = nextTransition(nextLocal);\n+            long nextAdjustedStart = nextTransition(nextAdjusted);\n+            if (isGap(instantLocal, nextLocalStart) != isGap(instantLocal - offsetAdjusted, nextAdjustedStart)) {\n+                // we are switching from gap to overlap or the other way around\n+                if (diff > 0) {\n+                    return offsetAdjusted;\n+                } else if (diff < 0) {\n+                    return offsetLocal;\n+                } else {\n+                    return offsetAdjusted;\n+                }\n+            } else if (isOverlap(instantLocal, nextLocalStart) && isOverlap(instantLocal - offsetAdjusted, nextAdjustedStart)) {\n+                if (diff > 0) {\n+                    return offsetAdjusted;\n+                } else if (diff < 0) {\n+                    return offsetLocal;\n+                } else {\n+                    return offsetLocal >= offsetAdjusted ? offsetLocal : offsetAdjusted;\n+                }\n+            } else {\n+                if (diff > 0) {\n+                    return offsetLocal;\n+                } else if (diff < 0) {\n+                    return offsetAdjusted;\n+                } else {\n+                    return offsetAdjusted;\n+                }\n+            }\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}