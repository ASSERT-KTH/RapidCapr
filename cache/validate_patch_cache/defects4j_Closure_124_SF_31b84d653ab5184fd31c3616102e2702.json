{
    "patch": "  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n    node = node.getFirstChild();\n    if (node.isName() && isNameAssignedTo(node.getString(), replacement)) {\n      return false;\n    } else if (node.isGetProp()) {\n      Node replacementNode = replacement;\n      // Recursively check if the children of the `node` and `replacement` nodes\n      // are safe replacements.\n      for (Node child : node.children()) {\n        replacementNode = replacementNode.getFirstChild();\n        if (!isSafeReplacement(child, replacementNode)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..b1498974 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -210,12 +210,20 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n     }\n     Preconditions.checkArgument(node.isGetProp());\n \n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n+    node = node.getFirstChild();\n+    if (node.isName() && isNameAssignedTo(node.getString(), replacement)) {\n       return false;\n+    } else if (node.isGetProp()) {\n+      Node replacementNode = replacement;\n+      // Recursively check if the children of the `node` and `replacement` nodes\n+      // are safe replacements.\n+      for (Node child : node.children()) {\n+        replacementNode = replacementNode.getFirstChild();\n+        if (!isSafeReplacement(child, replacementNode)) {\n+          return false;\n+        }\n+      }\n     }\n-\n     return true;\n   }\n \n@@ -241,4 +249,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}