{
    "patch": "      int numAssignments = 0;\n      for (Reference reference : references) {\n        if (reference.isDeclaration() || reference.isParameter()) {\n          continue;\n        }\n        if (reference.isAssignmentToVariable() && ref.getName().equals(reference.getName())) {\n          numAssignments++;\n          if (numAssignments > 1) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..f48f5eed 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      int numAssignments = 0;\n+      for (Reference reference : references) {\n+        if (reference.isDeclaration() || reference.isParameter()) {\n+          continue;\n+        }\n+        if (reference.isAssignmentToVariable() && ref.getName().equals(reference.getName())) {\n+          numAssignments++;\n+          if (numAssignments > 1) {\n+            return false;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}