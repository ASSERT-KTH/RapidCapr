{
    "patch": "    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n            Separator sep = (Separator) elementPairs.get(0);\n            String[] remaining = new String[size - 2];\n            for (int i = 2; i < size; i++) {\n                Object obj = elementPairs.get(i);\n                if (obj instanceof String) {\n                    remaining[i - 2] = (String) obj;\n                } else {\n                    if (i == size - 1 || elementPairs.get(i + 1) instanceof Separator) {\n                        throw new IllegalArgumentException(\"No valid parser found for pattern '\" + obj + \"'\");\n                    }\n                    remaining[i - 2] = (String) elementPairs.get(i + 1);\n                    i++;\n                }\n            }\n            PeriodFormatter f = toFormatter(Arrays.asList(remaining), notPrinter, notParser);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            return new PeriodFormatter(sep, sep);\n        }\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..04d913a9 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -798,9 +798,22 @@ public class PeriodFormatterBuilder {\n         int size = elementPairs.size();\n         if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n             Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+            String[] remaining = new String[size - 2];\n+            for (int i = 2; i < size; i++) {\n+                Object obj = elementPairs.get(i);\n+                if (obj instanceof String) {\n+                    remaining[i - 2] = (String) obj;\n+                } else {\n+                    if (i == size - 1 || elementPairs.get(i + 1) instanceof Separator) {\n+                        throw new IllegalArgumentException(\"No valid parser found for pattern '\" + obj + \"'\");\n+                    }\n+                    remaining[i - 2] = (String) elementPairs.get(i + 1);\n+                    i++;\n+                }\n+            }\n+            PeriodFormatter f = toFormatter(Arrays.asList(remaining), notPrinter, notParser);\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+            return new PeriodFormatter(sep, sep);\n         }\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}