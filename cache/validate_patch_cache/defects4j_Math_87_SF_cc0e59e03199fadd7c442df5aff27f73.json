{
    "patch": "private Integer getBasicRow(final int col) {\n    Integer row = null;\n    boolean foundNonZero = false;\n    for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n        final double entry = getEntry(i, col);\n        if (!MathUtils.equals(entry, 0.0, epsilon)) {\n            if (MathUtils.equals(entry, 1.0, epsilon)) {\n                if (row == null) {\n                    row = i;\n                } else {\n                    // more than one non-zero coefficient\n                    return null;\n                }\n            } else {\n                // non-zero coefficient is not 1\n                return null;\n            }\n            foundNonZero = true;\n        }\n    }\n    if (!foundNonZero) {\n        return null;\n    }\n    return row;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 0ab790cd6..ee32ee0dc 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -269,19 +269,31 @@ class SimplexTableau implements Serializable {\n      * @param col index of the column to check\n      * @return the row that the variable is basic in.  null if the column is not basic\n      */\n-    private Integer getBasicRow(final int col) {\n-        Integer row = null;\n-        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n+private Integer getBasicRow(final int col) {\n+    Integer row = null;\n+    boolean foundNonZero = false;\n+    for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n+        final double entry = getEntry(i, col);\n+        if (!MathUtils.equals(entry, 0.0, epsilon)) {\n+            if (MathUtils.equals(entry, 1.0, epsilon)) {\n                 if (row == null) {\n-                row = i;\n+                    row = i;\n                 } else {\n-                return null;\n+                    // more than one non-zero coefficient\n+                    return null;\n                 }\n+            } else {\n+                // non-zero coefficient is not 1\n+                return null;\n             }\n+            foundNonZero = true;\n         }\n-        return row;\n     }\n+    if (!foundNonZero) {\n+        return null;\n+    }\n+    return row;\n+}\n \n     /**\n      * Removes the phase 1 objective function and artificial variables from this tableau.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}