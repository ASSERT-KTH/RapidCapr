{
    "patch": "if (currentStrategy != null) {\n    collector.add(currentStrategy);\n    if (currentStrategy.addRegex(this, regex)) {\n        atLeastOneStrategyAdded = true;\n    }\n}\nwhile (nextStrategy != null) {\n    currentFormatField = nextFormatField;\n    currentStrategy = nextStrategy;\n\n    patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n    if (!patternMatcher.lookingAt()) {\n        nextStrategy = null;\n    } else {\n        nextFormatField = patternMatcher.group();\n        nextStrategy = getStrategy(nextFormatField);\n    }\n\n    if (currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n        atLeastOneStrategyAdded = true;\n    }\n}\nif (!atLeastOneStrategyAdded) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\ncurrentFormatField = null;\nstrategies = collector.toArray(new Strategy[collector.size()]);\nparsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..45205619 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,35 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+if (currentStrategy != null) {\n+    collector.add(currentStrategy);\n+    if (currentStrategy.addRegex(this, regex)) {\n+        atLeastOneStrategyAdded = true;\n+    }\n+}\n+while (nextStrategy != null) {\n+    currentFormatField = nextFormatField;\n+    currentStrategy = nextStrategy;\n+\n+    patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+    if (!patternMatcher.lookingAt()) {\n+        nextStrategy = null;\n+    } else {\n+        nextFormatField = patternMatcher.group();\n+        nextStrategy = getStrategy(nextFormatField);\n+    }\n+\n+    if (currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+        atLeastOneStrategyAdded = true;\n+    }\n+}\n+if (!atLeastOneStrategyAdded) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+currentFormatField = null;\n+strategies = collector.toArray(new Strategy[collector.size()]);\n+parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}