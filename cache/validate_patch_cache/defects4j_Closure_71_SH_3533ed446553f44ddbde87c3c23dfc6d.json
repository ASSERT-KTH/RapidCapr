{
    "patch": "      boolean isOverride = false;\n      if (t.getScope().isGlobal()) {\n        Node enclosing = parent;\n        while (enclosing != null && enclosing.getToken() != Token.SCRIPT) {\n          if (enclosing.getToken() == Token.METHOD &&\n              NodeUtil.isGetOrSetKey(parent) &&\n              enclosing.getFirstChild().getLastChild().getString()\n                  .equals(propertyName)) {\n            isOverride = true;\n            break;\n          }\n          enclosing = enclosing.getParent();\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..37521a01 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,20 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = false;\n+      if (t.getScope().isGlobal()) {\n+        Node enclosing = parent;\n+        while (enclosing != null && enclosing.getToken() != Token.SCRIPT) {\n+          if (enclosing.getToken() == Token.METHOD &&\n+              NodeUtil.isGetOrSetKey(parent) &&\n+              enclosing.getFirstChild().getLastChild().getString()\n+                  .equals(propertyName)) {\n+            isOverride = true;\n+            break;\n+          }\n+          enclosing = enclosing.getParent();\n+        }\n+      }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}