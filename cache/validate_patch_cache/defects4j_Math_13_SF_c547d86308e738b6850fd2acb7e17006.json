{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n\n    final int n = m.getRowDimension();\n    final double[] eigenvalues = d.getColumn(0);\n    final double[] sqrtEigenvalues = new double[n];\n\n    for (int i = 0; i < n; i++) {\n        if (eigenvalues[i] < 0.0) {\n            throw new IllegalArgumentException(\"Matrix is not positive-semidefinite\");\n        }\n        sqrtEigenvalues[i] = Math.sqrt(eigenvalues[i]);\n    }\n\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenvalues);\n    final RealMatrix transposeV = v.transpose();\n    final RealMatrix result = v.multiply(sqrtD).multiply(transposeV);\n    final double normDiff = result.multiply(result).subtract(m).getNorm() / m.getNorm();\n    if (normDiff > 1e-8) {\n        throw new IllegalStateException(\"Square root computation failed\");\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..08b5b3a6d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+\n+    final int n = m.getRowDimension();\n+    final double[] eigenvalues = d.getColumn(0);\n+    final double[] sqrtEigenvalues = new double[n];\n+\n+    for (int i = 0; i < n; i++) {\n+        if (eigenvalues[i] < 0.0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive-semidefinite\");\n+        }\n+        sqrtEigenvalues[i] = Math.sqrt(eigenvalues[i]);\n+    }\n+\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenvalues);\n+    final RealMatrix transposeV = v.transpose();\n+    final RealMatrix result = v.multiply(sqrtD).multiply(transposeV);\n+    final double normDiff = result.multiply(result).subtract(m).getNorm() / m.getNorm();\n+    if (normDiff > 1e-8) {\n+        throw new IllegalStateException(\"Square root computation failed\");\n     }\n+    return result;\n+}\n }",
    "result_reason": "org.apache.commons.math3.exception.MathUnsupportedOperationException: unsupported operation",
    "test_result": "FAIL"
}