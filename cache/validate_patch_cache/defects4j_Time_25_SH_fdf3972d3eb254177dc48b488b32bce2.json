{
    "patch": "            } else {\n                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                long transition = previousTransition(instantAdjusted);\n                int offset = getOffset(transition);\n                if (offset < offsetLocal) {\n                    transition = nextTransition(transition);\n                }\n                if (transition > instantLocal - offsetAdjusted) {\n                    transition = previousTransition(transition);\n                }\n                return getOffset(transition);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..7749ee2a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            } else {\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                long transition = previousTransition(instantAdjusted);\n+                int offset = getOffset(transition);\n+                if (offset < offsetLocal) {\n+                    transition = nextTransition(transition);\n+                }\n+                if (transition > instantLocal - offsetAdjusted) {\n+                    transition = previousTransition(transition);\n+                }\n+                return getOffset(transition);\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}