{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n  Set<Name> namesToRemove = new HashSet<>();\n  Set<Ref> refsToRemove = new HashSet<>();\n  for (Name name : namespace.getNameForest()) {\n    // named functions would lose their name if inlined\n    if (name.isFunction()) {\n      continue;\n    }\n    if (name.aliasingGets == 0) {\n      // Add all the children of `name` to the worklist\n      if (name.props != null) {\n        for (Name child : name.props) {\n          if (child.aliasingGets > 0) {\n            namesToRemove.add(child);\n            for (Ref ref : child.getRefs()) {\n              if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n                if (inlineAliasIfPossible(ref, namespace)) {\n                  refsToRemove.add(ref);\n                }\n              }\n            }\n          }\n        }\n      }\n    } else if (name.isVar() || name.isParam()) {\n      for (Ref ref : name.getRefs()) {\n        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n          if (inlineAliasIfPossible(ref, namespace)) {\n            refsToRemove.add(ref);\n            if (--name.aliasingGets == 0) {\n              // Inline all aliases if there are no more aliasing gets\n              // for the variable or parameter.\n              if (name.props != null) {\n                for (Name child : name.props) {\n                  if (child.aliasingGets > 0) {\n                    namesToRemove.add(child);\n                    for (Ref childRef : child.getRefs()) {\n                      if (childRef.type == Type.ALIASING_GET && childRef.scope.isLocal()) {\n                        if (inlineAliasIfPossible(childRef, namespace)) {\n                          refsToRemove.add(childRef);\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // Remove references to inlined aliases, and remove names and empty\n  // objects if there is nothing left in them.\n  for (Ref ref : refsToRemove) {\n    ref.name.removeRef(ref);\n  }\n  for (Name name : namesToRemove) {\n    namespace.getNameIndex().remove(name.getFullName());\n    name.removeTree();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..15c59617 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,44 +158,71 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n-    while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n-      }\n-\n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+private void inlineAliases(GlobalNamespace namespace) {\n+  Set<Name> namesToRemove = new HashSet<>();\n+  Set<Ref> refsToRemove = new HashSet<>();\n+  for (Name name : namespace.getNameForest()) {\n+    // named functions would lose their name if inlined\n+    if (name.isFunction()) {\n+      continue;\n+    }\n+    if (name.aliasingGets == 0) {\n+      // Add all the children of `name` to the worklist\n+      if (name.props != null) {\n+        for (Name child : name.props) {\n+          if (child.aliasingGets > 0) {\n+            namesToRemove.add(child);\n+            for (Ref ref : child.getRefs()) {\n+              if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+                if (inlineAliasIfPossible(ref, namespace)) {\n+                  refsToRemove.add(ref);\n+                }\n+              }\n             }\n           }\n         }\n       }\n-\n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n+    } else if (name.isVar() || name.isParam()) {\n+      for (Ref ref : name.getRefs()) {\n+        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+          if (inlineAliasIfPossible(ref, namespace)) {\n+            refsToRemove.add(ref);\n+            if (--name.aliasingGets == 0) {\n+              // Inline all aliases if there are no more aliasing gets\n+              // for the variable or parameter.\n+              if (name.props != null) {\n+                for (Name child : name.props) {\n+                  if (child.aliasingGets > 0) {\n+                    namesToRemove.add(child);\n+                    for (Ref childRef : child.getRefs()) {\n+                      if (childRef.type == Type.ALIASING_GET && childRef.scope.isLocal()) {\n+                        if (inlineAliasIfPossible(childRef, namespace)) {\n+                          refsToRemove.add(childRef);\n+                        }\n+                      }\n+                    }\n+                  }\n+                }\n+              }\n+              break;\n+            }\n+          }\n+        }\n       }\n     }\n   }\n \n+  // Remove references to inlined aliases, and remove names and empty\n+  // objects if there is nothing left in them.\n+  for (Ref ref : refsToRemove) {\n+    ref.name.removeRef(ref);\n+  }\n+  for (Name name : namesToRemove) {\n+    namespace.getNameIndex().remove(name.getFullName());\n+    name.removeTree();\n+  }\n+}\n+\n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that\n     // variable's declaration. If the alias's parent is a NAME,",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}