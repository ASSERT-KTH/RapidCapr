{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n        return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null && !NodeUtil.isImmutableValue(right)) {\n        return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n    if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n        return n;\n    }\n\n    String joinString = \",\";\n    if (right != null) {\n        joinString = NodeUtil.getStringValue(right);\n        if (joinString == null) {\n            return n;\n        }\n    }\n\n    List<Node> arrayNodes = new ArrayList<>();\n    List<String> stringValues = new ArrayList<>();\n    Node elem = arrayNode.getFirstChild();\n    boolean allString = true;\n\n    while (elem != null) {\n        if (!NodeUtil.isImmutableValue(elem)) {\n            allString = false;\n            break;\n        }\n        if (!NodeUtil.isLiteralValue(elem)) {\n            allString = false;\n            arrayNodes.add(elem);\n            elem = elem.getNext();\n            continue;\n        }\n        String value = null;\n        switch (elem.getType()) {\n            case Token.STRING:\n                value = elem.getString();\n                break;\n            case Token.NULL:\n                value = \"null\";\n                break;\n            case Token.TRUE:\n                value = \"true\";\n                break;\n            case Token.FALSE:\n                value = \"false\";\n                break;\n        }\n        if (value == null) {\n            allString = false;\n            break;\n        }\n        stringValues.add(value);\n        elem = elem.getNext();\n    }\n\n    if (allString) {\n        String joinedString = String.join(joinString, stringValues);\n        Node foldedStringNode = IR.string(joinedString);\n        foldedStringNode.useSourceInfoIfMissingFromForTree(n);\n        replaceAndReport(n, foldedStringNode);\n        return foldedStringNode;\n    } else if (!arrayNodes.isEmpty()) {\n        boolean joinFound = false;\n        // Search if `join` can be resolved in the local scope.\n        Node current = n.getParent();\n        while (current != null && current.isScript()) {\n            if (current.getScope() == null) {\n                current.putBooleanProp(Node.FREE_CALL, true);\n            }\n            Var var = current.getScope().getVar(\"join\");\n            if (var != null && var.isLocal()) {\n                joinFound = true;\n                break;\n            }\n            current = current.getParent();\n        }\n        if (joinFound) {\n            // Replace the original node with a new call that produces the expected result.\n            Node argsNode = new Node(Token.ARRAYLIT);\n            for (Node arrayNode : arrayNodes) {\n                argsNode.addChildToBack(arrayNode.detachFromParent());\n            }\n            Node callNode =\n                    new Node(\n                            Token.CALL,\n                            IR.getprop(IR.name(\"join\"), IR.string(\"apply\")),\n                            new Node(Token.NULL));\n            callNode.putBooleanProp(Node.FREE_CALL, true);\n            callNode.addChildToBack(n.getFirstChild().detachFromParent());\n            callNode.addChildToBack(argsNode);\n            replaceAndReport(n, callNode);\n            return callNode;\n        }\n    }\n\n    return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..857d6a44 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,116 +364,112 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n+private Node tryFoldArrayJoin(Node n) {\n     Node callTarget = n.getFirstChild();\n-\n     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n+        return n;\n     }\n \n     Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n+    if (right != null && !NodeUtil.isImmutableValue(right)) {\n         return n;\n-      }\n     }\n \n     Node arrayNode = callTarget.getFirstChild();\n     Node functionName = arrayNode.getNext();\n-\n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n+    if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n+        return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    String joinString = \",\";\n+    if (right != null) {\n+        joinString = NodeUtil.getStringValue(right);\n+        if (joinString == null) {\n+            return n;\n+        }\n+    }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n+    List<Node> arrayNodes = new ArrayList<>();\n+    List<String> stringValues = new ArrayList<>();\n     Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n+    boolean allString = true;\n+\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n+        if (!NodeUtil.isImmutableValue(elem)) {\n+            allString = false;\n+            break;\n         }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+        if (!NodeUtil.isLiteralValue(elem)) {\n+            allString = false;\n+            arrayNodes.add(elem);\n+            elem = elem.getNext();\n+            continue;\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      prev = elem;\n-      elem = elem.getNext();\n-    }\n-\n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n+        String value = null;\n+        switch (elem.getType()) {\n+            case Token.STRING:\n+                value = elem.getString();\n+                break;\n+            case Token.NULL:\n+                value = \"null\";\n+                break;\n+            case Token.TRUE:\n+                value = \"true\";\n+                break;\n+            case Token.FALSE:\n+                value = \"false\";\n+                break;\n         }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n+        if (value == null) {\n+            allString = false;\n+            break;\n         }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n+        stringValues.add(value);\n+        elem = elem.getNext();\n+    }\n+\n+    if (allString) {\n+        String joinedString = String.join(joinString, stringValues);\n+        Node foldedStringNode = IR.string(joinedString);\n+        foldedStringNode.useSourceInfoIfMissingFromForTree(n);\n+        replaceAndReport(n, foldedStringNode);\n         return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n+    } else if (!arrayNodes.isEmpty()) {\n+        boolean joinFound = false;\n+        // Search if `join` can be resolved in the local scope.\n+        Node current = n.getParent();\n+        while (current != null && current.isScript()) {\n+            if (current.getScope() == null) {\n+                current.putBooleanProp(Node.FREE_CALL, true);\n+            }\n+            Var var = current.getScope().getVar(\"join\");\n+            if (var != null && var.isLocal()) {\n+                joinFound = true;\n+                break;\n+            }\n+            current = current.getParent();\n         }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n+        if (joinFound) {\n+            // Replace the original node with a new call that produces the expected result.\n+            Node argsNode = new Node(Token.ARRAYLIT);\n+            for (Node arrayNode : arrayNodes) {\n+                argsNode.addChildToBack(arrayNode.detachFromParent());\n+            }\n+            Node callNode =\n+                    new Node(\n+                            Token.CALL,\n+                            IR.getprop(IR.name(\"join\"), IR.string(\"apply\")),\n+                            new Node(Token.NULL));\n+            callNode.putBooleanProp(Node.FREE_CALL, true);\n+            callNode.addChildToBack(n.getFirstChild().detachFromParent());\n+            callNode.addChildToBack(argsNode);\n+            replaceAndReport(n, callNode);\n+            return callNode;\n         }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n     }\n \n     return n;\n-  }\n+}\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +638,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}