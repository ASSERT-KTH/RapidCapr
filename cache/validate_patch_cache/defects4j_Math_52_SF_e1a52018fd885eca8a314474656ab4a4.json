{
    "patch": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) throws MathRuntimeException {\n\n    // norms computation\n    double u1u1 = u1.getNormSq();\n    double u2u2 = u2.getNormSq();\n    double v1v1 = v1.getNormSq();\n    double v2v2 = v2.getNormSq();\n    if (u1u1 == 0 || u2u2 == 0 || v1v1 == 0 || v2v2 == 0) {\n        throw new MathRuntimeException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n    }\n\n    // normalize v1 in order to have (v1'|v1') = (u1|u1)\n    Vector3D vv1 = v1.normalize();\n\n    // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n    double dot = u1.dotProduct(u2);\n    Vector3D vv2 = v2.subtract(vv1.scalarMultiply(dot / u1u1)).normalize();\n\n    // preliminary computation\n    Vector3D u1xu2 = u1.crossProduct(u2).normalize();\n    Vector3D uu1 = u1.normalize();\n    Vector3D uv1 = vv1.crossProduct(uu1).normalize();\n    Vector3D uv2 = vv2.crossProduct(uu1).normalize();\n    double cc = uv1.dotProduct(uv2);\n\n    if (cc <= Math.ulp(1d)) {\n        // special cases where the rotation axis is u1 x v1 or u1 x v2\n        Vector3D w = uu1.crossProduct(MathUtils.normalizeVector(MathUtils.crossProduct(uu1, vv1)));\n        if (w.getNormSq() < Precision.SAFE_MIN) {\n            w = uu1.crossProduct(MathUtils.normalizeVector(MathUtils.crossProduct(uu1, vv2)));\n        }\n        q0 = 0;\n        q1 = w.getX();\n        q2 = w.getY();\n        q3 = w.getZ();\n    } else {\n        // general case\n        double uu1norm = uu1.getNorm();\n        double coef = FastMath.sqrt(2 / (1 + cc + uu1norm * uu1norm));\n        Vector3D q = new Vector3D(0.5 / coef, uv1.vectorialMultiply(uv2).scalarMultiply(uu1norm * coef));\n\n        q0 = q.getX();\n        q1 = q.getY();\n        q2 = q.getZ();\n        q3 = q.getW();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b3486..13912d1a7 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -310,69 +310,53 @@ public class Rotation implements Serializable {\n    * @param v2 desired image of u2 by the rotation\n    * @exception IllegalArgumentException if the norm of one of the vectors is zero\n    */\n-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n-\n-  // norms computation\n-  double u1u1 = u1.getNormSq();\n-  double u2u2 = u2.getNormSq();\n-  double v1v1 = v1.getNormSq();\n-  double v2v2 = v2.getNormSq();\n-  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n-    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n-  }\n-\n-  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n-\n-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n-  double u1u2   = u1.dotProduct(u2);\n-  double v1v2   = v1.dotProduct(v2);\n-  double coeffU = u1u2 / u1u1;\n-  double coeffV = v1v2 / u1u1;\n-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n-  double alpha  = coeffU - beta * coeffV;\n-  v2 = new Vector3D(alpha, v1, beta, v2);\n-\n-  // preliminary computation\n-  Vector3D uRef  = u1;\n-  Vector3D vRef  = v1;\n-  Vector3D v1Su1 = v1.subtract(u1);\n-  Vector3D v2Su2 = v2.subtract(u2);\n-  Vector3D k     = v1Su1.crossProduct(v2Su2);\n-  Vector3D u3    = u1.crossProduct(u2);\n-  double c       = k.dotProduct(u3);\n-  if (c == 0) {\n-    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n-    // we try other vectors\n-    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n-    Vector3D v3Su3 = v3.subtract(u3);\n-    k = v1Su1.crossProduct(v3Su3);\n-    Vector3D u2Prime = u1.crossProduct(u3);\n-    c = k.dotProduct(u2Prime);\n-\n-    if (c == 0) {\n-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n-      k = v2Su2.crossProduct(v3Su3);;\n-      c = k.dotProduct(u2.crossProduct(u3));;\n-\n-      if (c == 0) {\n-        // the (q1, q2, q3) vector is aligned with everything\n-        // this is really the identity rotation\n-        q0 = 1.0;\n-        q1 = 0.0;\n-        q2 = 0.0;\n-        q3 = 0.0;\n-        return;\n-      }\n-\n-      // we will have to use u2 and v2 to compute the scalar part\n-      uRef = u2;\n-      vRef = v2;\n-\n+public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) throws MathRuntimeException {\n+\n+    // norms computation\n+    double u1u1 = u1.getNormSq();\n+    double u2u2 = u2.getNormSq();\n+    double v1v1 = v1.getNormSq();\n+    double v2v2 = v2.getNormSq();\n+    if (u1u1 == 0 || u2u2 == 0 || v1v1 == 0 || v2v2 == 0) {\n+        throw new MathRuntimeException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n     }\n \n-  }\n+    // normalize v1 in order to have (v1'|v1') = (u1|u1)\n+    Vector3D vv1 = v1.normalize();\n+\n+    // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n+    double dot = u1.dotProduct(u2);\n+    Vector3D vv2 = v2.subtract(vv1.scalarMultiply(dot / u1u1)).normalize();\n+\n+    // preliminary computation\n+    Vector3D u1xu2 = u1.crossProduct(u2).normalize();\n+    Vector3D uu1 = u1.normalize();\n+    Vector3D uv1 = vv1.crossProduct(uu1).normalize();\n+    Vector3D uv2 = vv2.crossProduct(uu1).normalize();\n+    double cc = uv1.dotProduct(uv2);\n+\n+    if (cc <= Math.ulp(1d)) {\n+        // special cases where the rotation axis is u1 x v1 or u1 x v2\n+        Vector3D w = uu1.crossProduct(MathUtils.normalizeVector(MathUtils.crossProduct(uu1, vv1)));\n+        if (w.getNormSq() < Precision.SAFE_MIN) {\n+            w = uu1.crossProduct(MathUtils.normalizeVector(MathUtils.crossProduct(uu1, vv2)));\n+        }\n+        q0 = 0;\n+        q1 = w.getX();\n+        q2 = w.getY();\n+        q3 = w.getZ();\n+    } else {\n+        // general case\n+        double uu1norm = uu1.getNorm();\n+        double coef = FastMath.sqrt(2 / (1 + cc + uu1norm * uu1norm));\n+        Vector3D q = new Vector3D(0.5 / coef, uv1.vectorialMultiply(uv2).scalarMultiply(uu1norm * coef));\n+\n+        q0 = q.getX();\n+        q1 = q.getY();\n+        q2 = q.getZ();\n+        q3 = q.getW();\n+    }\n+}\n \n   // compute the vectorial part\n   c = FastMath.sqrt(c);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}