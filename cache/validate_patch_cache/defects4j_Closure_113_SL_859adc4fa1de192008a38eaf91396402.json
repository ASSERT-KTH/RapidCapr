{
    "patch": "    boolean isSafeToRemove = true;\n    Node grandparent = parent.getParent();\n    if (grandparent != null) {\n      if (NodeUtil.isAssignmentOp(grandparent) || NodeUtil.isExprCall(grandparent)) {\n        Node sibling = grandparent.getNext();\n        while (sibling != null && !sibling.isScript()) {\n          if (!NodeUtil.isExprCall(sibling)) {\n            isSafeToRemove = false;\n            break;\n          }\n          sibling = sibling.getNext();\n        }\n      } else if (NodeUtil.isBlock(parent.getNext())) {\n        isSafeToRemove = false;\n      }\n      if (isSafeToRemove) {\n        grandparent.removeChild(parent);\n      }\n    }\n    compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..e3dc5334 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,26 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+    boolean isSafeToRemove = true;\n+    Node grandparent = parent.getParent();\n+    if (grandparent != null) {\n+      if (NodeUtil.isAssignmentOp(grandparent) || NodeUtil.isExprCall(grandparent)) {\n+        Node sibling = grandparent.getNext();\n+        while (sibling != null && !sibling.isScript()) {\n+          if (!NodeUtil.isExprCall(sibling)) {\n+            isSafeToRemove = false;\n+            break;\n+          }\n+          sibling = sibling.getNext();\n+        }\n+      } else if (NodeUtil.isBlock(parent.getNext())) {\n+        isSafeToRemove = false;\n+      }\n+      if (isSafeToRemove) {\n+        grandparent.removeChild(parent);\n+      }\n+    }\n+    compiler.reportCodeChange();\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}