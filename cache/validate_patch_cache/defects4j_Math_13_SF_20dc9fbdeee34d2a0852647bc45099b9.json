{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] realEigen = dec.getRealEigenvalues();\n    final int dimension = m.getRowDimension();\n    final RealMatrix X = dec.getV();\n    final RealMatrix D = MatrixUtils.createRealDiagonalMatrix(realEigen);\n\n    // Replace negative eigenvalues with 0\n    for (int i = 0; i < dimension; i++) {\n        if (realEigen[i] < 0.0) {\n            D.setEntry(i, i, 0.0);\n        } else {\n            D.setEntry(i, i, Math.sqrt(realEigen[i]));\n        }\n    }\n\n    final RealMatrix X_T = X.transpose();\n    final RealMatrix sqrt_m = X.multiply(D).multiply(X_T);\n\n    return sqrt_m;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..215c67340 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] realEigen = dec.getRealEigenvalues();\n+    final int dimension = m.getRowDimension();\n+    final RealMatrix X = dec.getV();\n+    final RealMatrix D = MatrixUtils.createRealDiagonalMatrix(realEigen);\n+\n+    // Replace negative eigenvalues with 0\n+    for (int i = 0; i < dimension; i++) {\n+        if (realEigen[i] < 0.0) {\n+            D.setEntry(i, i, 0.0);\n+        } else {\n+            D.setEntry(i, i, Math.sqrt(realEigen[i]));\n+        }\n     }\n+\n+    final RealMatrix X_T = X.transpose();\n+    final RealMatrix sqrt_m = X.multiply(D).multiply(X_T);\n+\n+    return sqrt_m;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}