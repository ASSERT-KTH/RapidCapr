{
    "patch": "protected RealPointValuePair getSolution() {\n    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n    double mostNegative = negativeVarBasicRow == null ? 0.0d : getEntry(negativeVarBasicRow, getRhsOffset());\n    Set<Integer> basicRows = new HashSet<Integer>();\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n\n    boolean isAllEqualToNegative = true;\n    for (int i = 0; i < coefficients.length; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        if (colIndex < 0) {\n            coefficients[i] = 0.0d;\n            continue;\n        }\n        Integer basicRow = getBasicRow(colIndex);\n        if (basicRow == null) {\n            coefficients[i] = 0.0d;\n            continue;\n        }\n        if (basicRows.contains(basicRow)) {\n            coefficients[i] = 0.0d;\n\t\t\tcontinue;\n        }\n        basicRows.add(basicRow);\n        double entry = getEntry(basicRow, colIndex);\n        if (!restrictToNonNegative || entry >= 0) {\n            isAllEqualToNegative = false;\n        }\n        if (negativeVarBasicRow != null && basicRow.equals(negativeVarBasicRow)) {\n            entry = 0.0d;\n        }\n        coefficients[i] = entry - (restrictToNonNegative ? 0.0d : mostNegative);\n    }\n\n    if (negativeVarBasicRow == null) {\n        return new RealPointValuePair(coefficients, 0.0d);\n    }\n\n    if (isAllEqualToNegative) {\n        coefficients[negativeVarColumn] = 0.0d;\n        return new RealPointValuePair(coefficients, Double.NEGATIVE_INFINITY);\n    }\n    \n    double value = 0.0d;\n    if (negativeVarBasicRow != null) {\n        value = getEntry(negativeVarBasicRow, getRhsOffset()) / mostNegative;\n    }\n    for (int i = 0; i < coefficients.length; i++) {\n        value -= (restrictToNonNegative ? 0.0d : mostNegative) * coefficients[i];\n    }\n    return new RealPointValuePair(coefficients, value);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 02c22b59f..15ad33944 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -393,36 +393,58 @@ class SimplexTableau implements Serializable {\n      *\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n-\n-      Set<Integer> basicRows = new HashSet<Integer>();\n-      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-      for (int i = 0; i < coefficients.length; i++) {\n-          int colIndex = columnLabels.indexOf(\"x\" + i);\n-          if (colIndex < 0) {\n-            coefficients[i] = 0;\n+protected RealPointValuePair getSolution() {\n+    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n+    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n+    double mostNegative = negativeVarBasicRow == null ? 0.0d : getEntry(negativeVarBasicRow, getRhsOffset());\n+    Set<Integer> basicRows = new HashSet<Integer>();\n+    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+\n+    boolean isAllEqualToNegative = true;\n+    for (int i = 0; i < coefficients.length; i++) {\n+        int colIndex = columnLabels.indexOf(\"x\" + i);\n+        if (colIndex < 0) {\n+            coefficients[i] = 0.0d;\n             continue;\n-          }\n-          Integer basicRow = getBasicRow(colIndex);\n-              // if the basic row is found to be the objective function row\n-              // set the coefficient to 0 -> this case handles unconstrained \n-              // variables that are still part of the objective function\n-          if (basicRows.contains(basicRow)) {\n-              // if multiple variables can take a given value\n-              // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n-          } else {\n-              basicRows.add(basicRow);\n-              coefficients[i] =\n-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                  (restrictToNonNegative ? 0 : mostNegative);\n-          }\n-      }\n-      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+        }\n+        Integer basicRow = getBasicRow(colIndex);\n+        if (basicRow == null) {\n+            coefficients[i] = 0.0d;\n+            continue;\n+        }\n+        if (basicRows.contains(basicRow)) {\n+            coefficients[i] = 0.0d;\n+\t\t\tcontinue;\n+        }\n+        basicRows.add(basicRow);\n+        double entry = getEntry(basicRow, colIndex);\n+        if (!restrictToNonNegative || entry >= 0) {\n+            isAllEqualToNegative = false;\n+        }\n+        if (negativeVarBasicRow != null && basicRow.equals(negativeVarBasicRow)) {\n+            entry = 0.0d;\n+        }\n+        coefficients[i] = entry - (restrictToNonNegative ? 0.0d : mostNegative);\n+    }\n+\n+    if (negativeVarBasicRow == null) {\n+        return new RealPointValuePair(coefficients, 0.0d);\n+    }\n+\n+    if (isAllEqualToNegative) {\n+        coefficients[negativeVarColumn] = 0.0d;\n+        return new RealPointValuePair(coefficients, Double.NEGATIVE_INFINITY);\n+    }\n+    \n+    double value = 0.0d;\n+    if (negativeVarBasicRow != null) {\n+        value = getEntry(negativeVarBasicRow, getRhsOffset()) / mostNegative;\n     }\n+    for (int i = 0; i < coefficients.length; i++) {\n+        value -= (restrictToNonNegative ? 0.0d : mostNegative) * coefficients[i];\n+    }\n+    return new RealPointValuePair(coefficients, value);\n+}\n \n     /**\n      * Subtracts a multiple of one row from another.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2902.92783505155> but was:<1.0>",
    "test_result": "FAIL"
}