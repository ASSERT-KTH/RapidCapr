{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    int nextLocalOffset = getOffset(nextLocal);\n    int nextAdjustedOffset = getOffset(nextAdjusted);\n    if (nextLocalOffset == offsetLocal && nextAdjustedOffset == offsetAdjusted) {\n        // both next transitions have the same offset\n        return offsetLocal > offsetAdjusted ? offsetLocal : offsetAdjusted;\n    } else if (nextLocalOffset == offsetLocal) {\n        // nextLocal corresponds to the correct offset\n        return offsetLocal;\n    } else if (nextAdjustedOffset == offsetAdjusted) {\n        // nextAdjusted corresponds to the correct offset\n        return offsetAdjusted;\n    } else if (nextLocalOffset < nextAdjustedOffset) {\n        // nextLocal has a smaller offset than nextAdjusted\n        return offsetLocal;\n    } else if (nextAdjustedOffset < nextLocalOffset) {\n        // nextAdjusted has a smaller offset than nextLocal\n        return offsetAdjusted;\n    } else {\n        // both next transitions have the same offset, choose the one that keeps the time closer to local time\n        if (nextLocal - instantAdjusted < nextAdjusted - instantLocal) {\n            return offsetLocal;\n        } else {\n            return offsetAdjusted;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..702f89ac 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,35 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    int nextLocalOffset = getOffset(nextLocal);\n+    int nextAdjustedOffset = getOffset(nextAdjusted);\n+    if (nextLocalOffset == offsetLocal && nextAdjustedOffset == offsetAdjusted) {\n+        // both next transitions have the same offset\n+        return offsetLocal > offsetAdjusted ? offsetLocal : offsetAdjusted;\n+    } else if (nextLocalOffset == offsetLocal) {\n+        // nextLocal corresponds to the correct offset\n+        return offsetLocal;\n+    } else if (nextAdjustedOffset == offsetAdjusted) {\n+        // nextAdjusted corresponds to the correct offset\n+        return offsetAdjusted;\n+    } else if (nextLocalOffset < nextAdjustedOffset) {\n+        // nextLocal has a smaller offset than nextAdjusted\n+        return offsetLocal;\n+    } else if (nextAdjustedOffset < nextLocalOffset) {\n+        // nextAdjusted has a smaller offset than nextLocal\n+        return offsetAdjusted;\n+    } else {\n+        // both next transitions have the same offset, choose the one that keeps the time closer to local time\n+        if (nextLocal - instantAdjusted < nextAdjusted - instantLocal) {\n+            return offsetLocal;\n+        } else {\n+            return offsetAdjusted;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}