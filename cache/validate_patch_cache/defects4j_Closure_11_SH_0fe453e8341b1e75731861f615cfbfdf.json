{
    "patch": "  protected void checkPrototypeProperties(NodeTraversal t, Node n, Node parent) {\n    String propName = n.getLastChild().getString();\n    if (PROTO_MEMBERS.contains(propName)) {\n      Node var = n.getFirstChild();\n      if (var.isGetProp()) {\n        Node initializer = var.getNext();\n        JSType initializingType = initializer == null ? null : initializer.getJSType();\n        if (initializer != null && initializingType != null &&\n            initializingType.isConstructor() && initializingType.isFunctionType()) {\n          warnings.add(JSError.make(n, REASSIGN_CTOR, propName, ctx.getInputName(), 1));\n        } else if (n.getJSType() != null && parent.isAssign()) {\n          if (n.getJSType().isFunctionType()) {\n            warnings.add(JSError.make(n, REASSIGN_FUNCTION_TYPE, propName, ctx.getInputName(), 1));\n          } else {\n            return;\n          }\n        }\n        warnings.add(JSError.make(n, REASSIGN_CONSTANT_PROPERTY, propName, ctx.getInputName(), 1));\n      } else {\n        warnings.add(JSError.make(n, INVALID_DELETE_OPERAND, propName));\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}