{
    "patch": "      if (block.isFunction) {\n        return false;\n      } else if (block.isLoop) {\n        // If there's more than one write to this name, and one of them is inside the\n        // loop, we don't know if this assignment will be the only one.\n        int writeCount = 0;\n        for (int i = 0; i < ref.getBlock().getStatements().size(); i++) {\n          if (ref.getBlock().getStatements().get(i) == ref) {\n            writeCount++;\n          }\n        }\n        return writeCount == 1;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..a21cd7c0 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        return false;\n+      } else if (block.isLoop) {\n+        // If there's more than one write to this name, and one of them is inside the\n+        // loop, we don't know if this assignment will be the only one.\n+        int writeCount = 0;\n+        for (int i = 0; i < ref.getBlock().getStatements().size(); i++) {\n+          if (ref.getBlock().getStatements().get(i) == ref) {\n+            writeCount++;\n+          }\n+        }\n+        return writeCount == 1;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}