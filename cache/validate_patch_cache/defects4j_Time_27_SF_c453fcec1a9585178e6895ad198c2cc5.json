{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    List<Object> flattened = new ArrayList<>(elementPairs.size() + 1);\n    List<Object> workList = new ArrayList<>(elementPairs);\n    while (!workList.isEmpty()) {\n        Object p1 = workList.remove(0);\n        if (p1 instanceof Separator) {\n            if (!workList.isEmpty()) {\n                Object p2 = workList.remove(0);\n                if (p2 instanceof Separator) {\n                    Separator sep1 = (Separator) p1;\n                    Separator sep2 = (Separator) p2;\n                    workList.add(0, sep1.finish(sep2));\n                } else {\n                    flattened.add(p1);\n                    flattened.add(p2);\n                }\n            } else {\n                flattened.add(p1);\n            }\n        } else {\n            flattened.add(p1);\n        }\n    }\n    Object[] comp = createComposite(flattened);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..bf97e2c5 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,41 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    List<Object> flattened = new ArrayList<>(elementPairs.size() + 1);\n+    List<Object> workList = new ArrayList<>(elementPairs);\n+    while (!workList.isEmpty()) {\n+        Object p1 = workList.remove(0);\n+        if (p1 instanceof Separator) {\n+            if (!workList.isEmpty()) {\n+                Object p2 = workList.remove(0);\n+                if (p2 instanceof Separator) {\n+                    Separator sep1 = (Separator) p1;\n+                    Separator sep2 = (Separator) p2;\n+                    workList.add(0, sep1.finish(sep2));\n+                } else {\n+                    flattened.add(p1);\n+                    flattened.add(p2);\n+                }\n+            } else {\n+                flattened.add(p1);\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            flattened.add(p1);\n         }\n     }\n+    Object[] comp = createComposite(flattened);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}