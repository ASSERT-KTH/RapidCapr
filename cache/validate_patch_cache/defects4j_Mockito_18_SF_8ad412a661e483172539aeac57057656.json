{
    "patch": "public List<Double> getEvenNumbers(int[] numbers) {\n    List<Double> result = new ArrayList<>(); // create a new list for the result\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] % 2 == 0) {\n            result.add((double) numbers[i]); // cast int to double and add to result\n        }\n    }\n    return result; // return the list of even numbers\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..e72bae3ca 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,15 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public List<Double> getEvenNumbers(int[] numbers) {\n+    List<Double> result = new ArrayList<>(); // create a new list for the result\n+    for (int i = 0; i < numbers.length; i++) {\n+        if (numbers[i] % 2 == 0) {\n+            result.add((double) numbers[i]); // cast int to double and add to result\n+        }\n+    }\n+    return result; // return the list of even numbers\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}