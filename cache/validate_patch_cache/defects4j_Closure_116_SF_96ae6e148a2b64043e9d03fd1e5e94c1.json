{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!fnNode.isFunction() || !isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = NodeUtil.getFunctionBody(fnNode);\n\n  // Ensure that the first child is a name or a function call.\n  Node calleeNode = callNode.getFirstChild();\n  if (!calleeNode.isName() && !NodeUtil.isFunctionObjectCall(calleeNode)) {\n    return CanInlineResult.NO;\n  }\n\n  int callArity = 0;\n  boolean isCalleeThis = false;\n  if (!calleeNode.isName()) {\n    isCalleeThis = true;\n    callArity++; // account for implicit \"this\" argument\n    if (calleeNode.getNext() == null) {\n      return CanInlineResult.NO;\n    }\n    calleeNode = calleeNode.getNext();\n  }\n  if (!calleeNode.isFunction() && !calleeNode.isQualifiedName() && !calleeNode.isGetProp()) {\n    return CanInlineResult.NO;\n  }\n  if (calleeNode.isGetProp() && !calleeNode.getLastChild().getString().equals(\"call\")) {\n    return CanInlineResult.NO;\n  }\n\n  // Calculate the number of arguments passed to the function.\n  Node argNode = calleeNode.getNext();\n  boolean isVarArgsFunc = false;\n\n  // This flag detects when there are more parameters than argument.\n  boolean notEnoughArgs = false;\n  while (argNode != null) {\n    callArity++; // account for argNode\n    if (notEnoughArgs == true) {\n      return CanInlineResult.NO;\n    }\n    if (NodeUtil.isSpreadOperator(argNode)) {\n      isVarArgsFunc = true;\n      break;\n    }\n    argNode = argNode.getNext();\n    notEnoughArgs = !isCalleeThis && argNode == null;\n  }\n\n  // Ensure that we have the right number of parameters.\n  int paramSize = 0;\n  Node paramNode = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (paramNode != null) {\n    if (NodeUtil.getNameReferenceCount(block, paramNode.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n    paramNode = paramNode.getNext();\n    paramSize++;\n  }\n  if (!isVarArgsFunc && paramSize != callArity) { // named parameters and non-varargs calls\n    return CanInlineResult.NO;\n  }\n  int minParams = 0;\n  int maxParams = 0;\n  if (isVarArgsFunc && paramSize > 0) { // varargs functions\n    if (!NodeUtil.getFunctionParameters(fnNode).getLastChild().isVarArgs()) {\n      return CanInlineResult.NO;\n    }\n    minParams = paramSize - 1;\n    maxParams = Integer.MAX_VALUE;\n  } else {\n    minParams = maxParams = paramSize;\n  }\n\n  // Check for side-effects in any of the arguments.\n  argNode = calleeNode.getNext();\n  boolean varArgs = false;\n  while (argNode != null) {\n    if (NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n      return CanInlineResult.NO;\n    }\n    if (argNode.isSpread()) {\n      if (varArgs) {\n        // There can be only one varargs arg.\n        return CanInlineResult.NO;\n      }\n      varArgs = true;\n    } else if (!NodeUtil.isImmutableValue(argNode)) {\n      varArgs = false;\n    }\n    argNode = argNode.getNext();\n  }\n\n  if (maxParams == 0) {\n    return CanInlineResult.NO;\n  }\n\n  if (callArity < minParams || callArity > maxParams) {\n    return CanInlineResult.NO;\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..0e9da719 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,110 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n-\n-    Node block = fnNode.getLastChild();\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!fnNode.isFunction() || !isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n+  Node block = NodeUtil.getFunctionBody(fnNode);\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  // Ensure that the first child is a name or a function call.\n+  Node calleeNode = callNode.getFirstChild();\n+  if (!calleeNode.isName() && !NodeUtil.isFunctionObjectCall(calleeNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+  int callArity = 0;\n+  boolean isCalleeThis = false;\n+  if (!calleeNode.isName()) {\n+    isCalleeThis = true;\n+    callArity++; // account for implicit \"this\" argument\n+    if (calleeNode.getNext() == null) {\n+      return CanInlineResult.NO;\n     }\n+    calleeNode = calleeNode.getNext();\n+  }\n+  if (!calleeNode.isFunction() && !calleeNode.isQualifiedName() && !calleeNode.isGetProp()) {\n+    return CanInlineResult.NO;\n+  }\n+  if (calleeNode.isGetProp() && !calleeNode.getLastChild().getString().equals(\"call\")) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+  // Calculate the number of arguments passed to the function.\n+  Node argNode = calleeNode.getNext();\n+  boolean isVarArgsFunc = false;\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+  // This flag detects when there are more parameters than argument.\n+  boolean notEnoughArgs = false;\n+  while (argNode != null) {\n+    callArity++; // account for argNode\n+    if (notEnoughArgs == true) {\n+      return CanInlineResult.NO;\n+    }\n+    if (NodeUtil.isSpreadOperator(argNode)) {\n+      isVarArgsFunc = true;\n+      break;\n+    }\n+    argNode = argNode.getNext();\n+    notEnoughArgs = !isCalleeThis && argNode == null;\n+  }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+  // Ensure that we have the right number of parameters.\n+  int paramSize = 0;\n+  Node paramNode = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+  while (paramNode != null) {\n+    if (NodeUtil.getNameReferenceCount(block, paramNode.getString()) > 1) {\n+      return CanInlineResult.NO;\n+    }\n+    paramNode = paramNode.getNext();\n+    paramSize++;\n+  }\n+  if (!isVarArgsFunc && paramSize != callArity) { // named parameters and non-varargs calls\n+    return CanInlineResult.NO;\n+  }\n+  int minParams = 0;\n+  int maxParams = 0;\n+  if (isVarArgsFunc && paramSize > 0) { // varargs functions\n+    if (!NodeUtil.getFunctionParameters(fnNode).getLastChild().isVarArgs()) {\n+      return CanInlineResult.NO;\n+    }\n+    minParams = paramSize - 1;\n+    maxParams = Integer.MAX_VALUE;\n+  } else {\n+    minParams = maxParams = paramSize;\n+  }\n+\n+  // Check for side-effects in any of the arguments.\n+  argNode = calleeNode.getNext();\n+  boolean varArgs = false;\n+  while (argNode != null) {\n+    if (NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n+      return CanInlineResult.NO;\n+    }\n+    if (argNode.isSpread()) {\n+      if (varArgs) {\n+        // There can be only one varargs arg.\n+        return CanInlineResult.NO;\n       }\n+      varArgs = true;\n+    } else if (!NodeUtil.isImmutableValue(argNode)) {\n+      varArgs = false;\n     }\n+    argNode = argNode.getNext();\n+  }\n \n-    return CanInlineResult.YES;\n+  if (maxParams == 0) {\n+    return CanInlineResult.NO;\n   }\n \n+  if (callArity < minParams || callArity > maxParams) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}