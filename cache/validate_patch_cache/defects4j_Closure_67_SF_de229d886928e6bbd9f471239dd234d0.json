{
    "patch": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && (n.getType() == Token.GETPROP || n.getType() == Token.STRING\n              && assign.getNext().getType() == Token.OBJECTLIT)) {\n        // We want to exclude the assignment itself from the usage list\n        if (n.getType() == Token.GETPROP) {\n          boolean isChainedProperty =\n              n.getFirstChild().getType() == Token.GETPROP;\n\n          if (isChainedProperty) {\n            Node child = n.getFirstChild().getFirstChild().getNext();\n\n            if (child.getType() == Token.STRING &&\n                child.getString().equals(\"prototype\")) {\n              return true;\n            }\n          }\n        } else if (assign.getNext().getType() == Token.OBJECTLIT) {\n          Node grandparent = assign.getNext();\n          for (Node key = grandparent.getFirstChild(); key != null; key = key.getNext()) {\n            if (key == n && key.getNext().getType() == Token.STRING\n                && key.getNext().getString().equals(\"prototype\")) {\n              return true;\n            }\n          }\n        }\n      }\n\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..f1d87584 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -314,18 +314,28 @@ class AnalyzePrototypeProperties implements CompilerPass {\n     private boolean isPrototypePropertyAssign(Node assign) {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n+          && (n.getType() == Token.GETPROP || n.getType() == Token.STRING\n+              && assign.getNext().getType() == Token.OBJECTLIT)) {\n         // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n+        if (n.getType() == Token.GETPROP) {\n+          boolean isChainedProperty =\n+              n.getFirstChild().getType() == Token.GETPROP;\n \n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n+          if (isChainedProperty) {\n+            Node child = n.getFirstChild().getFirstChild().getNext();\n \n-          if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n-            return true;\n+            if (child.getType() == Token.STRING &&\n+                child.getString().equals(\"prototype\")) {\n+              return true;\n+            }\n+          }\n+        } else if (assign.getNext().getType() == Token.OBJECTLIT) {\n+          Node grandparent = assign.getNext();\n+          for (Node key = grandparent.getFirstChild(); key != null; key = key.getNext()) {\n+            if (key == n && key.getNext().getType() == Token.STRING\n+                && key.getNext().getString().equals(\"prototype\")) {\n+              return true;\n+            }\n           }\n         }\n       }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}