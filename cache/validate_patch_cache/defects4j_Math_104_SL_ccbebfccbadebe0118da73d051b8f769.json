{
    "patch": "package com.example;\n\nimport org.apache.commons.math3.util.MathUtils;\n\npublic class MyClass {\n    private static final double DEFAULT_EPSILON = 1e-15;\n    \n    public static double regularizedGammaP(double a, double x) {\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n            return Double.NaN;\n        }\n\n        if (x == 0.0) {\n            return 0.0;\n        }\n\n        if (x >= a + 1.0) {\n            // use regularizedGammaQ because it should converge faster in this case.\n            return 1.0 - regularizedGammaQ(a, x);\n        }\n\n        double n = 0.0;\n        double an = 1.0 / a;\n        double sum = an;\n\n        while (Math.abs(an / sum) > DEFAULT_EPSILON && n < MathUtils.MAX_EXPONENT) {\n            n += 1.0;\n            an *= x / (a + n);\n            sum += an;\n        }\n        if (n >= MathUtils.MAX_EXPONENT) {\n            throw new ArithmeticException(\"Maximal count of iterations reached\");\n        }\n\n        return Math.exp(-x + a * Math.log(x) - LogGamma.value(a)) * sum;\n    }\n\n    public static double regularizedGammaQ(double a, double x) {\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n            return Double.NaN;\n        }\n\n        if (x == 0.0) {\n            return 1.0;\n        }\n\n        if (x < a + 1.0) {\n            // use regularizedGammaP because it should converge faster in this case.\n            return 1.0 - regularizedGammaP(a, x);\n        }\n\n        continuedFraction(a, x);\n\n        double factor = Math.exp(-x + a * Math.log(x) - LogGamma.value(a));\n        return factor / cf[0];\n    }\n    \n    private static void continuedFraction(double a, double x) {\n        int maxIterations = 1000;\n        cf[0] = 0.0; // Q_{-1} = 0\n        double d = 1.0 / (1.0 - a / x);\n        cf[1] = d;\n        for (int i = 1; i < maxIterations; i++) {\n            double c = i*(a-i);\n            double am = (i*2.0)+1.0-a+x;\n            double bm = c*d+x;\n            d = 1.0 / bm;\n            double cm = am* d;\n            cf[i+1] = cf[i] * cm;\n            cf[i] *= (am/bm);\n            if (Math.abs(cf[i+1]) > 1e10) {\n                // Rescale fraction if it is too large, this can help avoid spurious overflow.\n                int n = 0;\n                while (cf[n] != 0.0) {\n                    cf[n++] *= 1e-10;\n                }\n            }\n            if (Math.abs(cf[i+1] - cf[i]) < DEFAULT_EPSILON * cf[i+1]) {\n                return;\n            }\n        }\n        throw new ArithmeticException(\"Maximal count of iterations reached\");\n    }\n\n    static double[] cf = new double[1010];\n}\n",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}