{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m, 1e-10);\n    final RealMatrix sqrt = dec.getSolver().getSquareRoot();\n    final RealMatrix sqrtM = sqrt.scalarMultiply(FastMath.sqrt(m.getRowDimension()));\n\n    // check if the resulting matrix is symmetric within tolerance\n    if (!isSymmetric(sqrtM, 1e-10)) {\n        throw new IllegalArgumentException(\"Square root matrix is not symmetric\");\n    }\n\n    return sqrtM;\n}\n\n// helper function to check if a matrix is symmetric within tolerance\nprivate boolean isSymmetric(RealMatrix m, double tolerance) {\n    final int n = m.getRowDimension();\n    for (int i = 0; i < n; i++) {\n        for (int j = i+1; j < n; j++) {\n            final double diff = m.getEntry(i, j) - m.getEntry(j, i);\n            if (FastMath.abs(diff) > tolerance) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f28dee28d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,30 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m, 1e-10);\n+    final RealMatrix sqrt = dec.getSolver().getSquareRoot();\n+    final RealMatrix sqrtM = sqrt.scalarMultiply(FastMath.sqrt(m.getRowDimension()));\n+\n+    // check if the resulting matrix is symmetric within tolerance\n+    if (!isSymmetric(sqrtM, 1e-10)) {\n+        throw new IllegalArgumentException(\"Square root matrix is not symmetric\");\n     }\n+\n+    return sqrtM;\n+}\n+\n+// helper function to check if a matrix is symmetric within tolerance\n+private boolean isSymmetric(RealMatrix m, double tolerance) {\n+    final int n = m.getRowDimension();\n+    for (int i = 0; i < n; i++) {\n+        for (int j = i+1; j < n; j++) {\n+            final double diff = m.getEntry(i, j) - m.getEntry(j, i);\n+            if (FastMath.abs(diff) > tolerance) {\n+                return false;\n+            }\n+        }\n+    }\n+    return true;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}