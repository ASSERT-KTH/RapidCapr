{
    "patch": "        \n        clearResult();\n        verifySequence(min, initial, max);\n\n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        double yInitial = f.value(initial);\n\n        // check if any endpoint is a root\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0);\n            return result;\n        }\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0);\n            return result;\n        }\n\n        // Initialize variables\n        double d = Double.NaN;\n        double e = Double.NaN;\n        double y = Double.NaN;\n        double x = initial;\n        double fx = yInitial;\n        double tol = functionValueAccuracy;\n        double m = Double.NaN;\n        double p = Double.NaN;\n        double q = Double.NaN;\n        double r = Double.NaN;\n        double s = Double.NaN;\n\n        // check that the initial guess is not a root\n        if (Math.abs(fx) <= tol) {\n            setResult(x, 0);\n            return result;\n        }\n\n        // set maximum iterations\n        int maxIter = 100;\n\n        // Iteration loop\n        while (maxIter-- > 0) {\n            if ((fx > 0 && yMax > 0) || (fx <= 0 && yMax <= 0)) {\n                y = yMin;\n                x = min;\n                d = max - min;\n                e = d;\n            } else {\n                y = yMax;\n                x = max;\n                d = min - max;\n                e = d;\n            }\n\n            if (Math.abs(y) <= tol) {\n                setResult(x, 0);\n                return result;\n            }\n\n            // set tolerance and midpoint\n            m = 0.5 * (max + min);\n            tol = 2.0 * functionValueAccuracy * Math.max(Math.abs(x), 1.0);\n\n            if (Math.abs(e) > tol) {\n                // Construct a trial parabolic fit\n                r = (x - w) * (fx - y);\n                q = (x - v) * (fx - z);\n                p = (x - v) * q - (x - w) * r;\n                q = 2.0 * (q - r);\n                if (q > 0) {\n                    p = -p;\n                }\n                q = Math.abs(q);\n\n                double etemp = e;\n                e = d;\n\n                if (Math.abs(p) >= Math.abs(0.5 * q * etemp) || p <= q * (min - x) || p >= q * (max - x)) {\n                    // A golden-section step\n                    if (x >= m) {\n                        e = min - x;\n                    } else {\n                        e = max - x;\n                    }\n                    d = c * e;\n                } else {\n                    // A parabolic-interpolation step\n                    d = p / q;\n                    u = x + d;\n                    if ((u - min) < tol * 2 || (max - u) < tol * 2) {\n                        d = Math.signum(m - x) * tol;\n                    }\n                }\n            } else {\n                // A golden-section step\n                if (x >= m) {\n                    e = min - x;\n                } else {\n                    e = max - x;\n                }\n                d = c * e;\n            }\n\n            // update current optimal root estimate\n            if (Math.abs(d) > tol) {\n                u = x + d;\n                y = f.value(u);\n            } else {\n                if (d > 0) {\n                    u = x + tol;\n                    y = f.value(u);\n                } else {\n                    u = x - tol;\n                    y = f.value(u);\n                }\n            }\n\n            // check if the current estimate is better\n            if (Math.abs(y) < Math.abs(fx)) {\n                v = w;\n                w = x;\n                x = u;\n                z = yMax;\n                yMax = yMin;\n                yMin = y;\n                fx = Math.abs(y);\n            }\n        }\n\n        throw new MaxIterationsExceededException(maxIter);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..1e77667c6 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,53 +95,136 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n-        throws MaxIterationsExceededException, FunctionEvaluationException {\n-\n+        \n         clearResult();\n         verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n+        double yMin = f.value(min);\n+        double yMax = f.value(max);\n         double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n+        // check if any endpoint is a root\n         if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n+            setResult(min, 0);\n             return result;\n         }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n+            setResult(max, 0);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+        // Initialize variables\n+        double d = Double.NaN;\n+        double e = Double.NaN;\n+        double y = Double.NaN;\n+        double x = initial;\n+        double fx = yInitial;\n+        double tol = functionValueAccuracy;\n+        double m = Double.NaN;\n+        double p = Double.NaN;\n+        double q = Double.NaN;\n+        double r = Double.NaN;\n+        double s = Double.NaN;\n \n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+        // check that the initial guess is not a root\n+        if (Math.abs(fx) <= tol) {\n+            setResult(x, 0);\n+            return result;\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        // set maximum iterations\n+        int maxIter = 100;\n \n-    }\n+        // Iteration loop\n+        while (maxIter-- > 0) {\n+            if ((fx > 0 && yMax > 0) || (fx <= 0 && yMax <= 0)) {\n+                y = yMin;\n+                x = min;\n+                d = max - min;\n+                e = d;\n+            } else {\n+                y = yMax;\n+                x = max;\n+                d = min - max;\n+                e = d;\n+            }\n+\n+            if (Math.abs(y) <= tol) {\n+                setResult(x, 0);\n+                return result;\n+            }\n+\n+            // set tolerance and midpoint\n+            m = 0.5 * (max + min);\n+            tol = 2.0 * functionValueAccuracy * Math.max(Math.abs(x), 1.0);\n+\n+            if (Math.abs(e) > tol) {\n+                // Construct a trial parabolic fit\n+                r = (x - w) * (fx - y);\n+                q = (x - v) * (fx - z);\n+                p = (x - v) * q - (x - w) * r;\n+                q = 2.0 * (q - r);\n+                if (q > 0) {\n+                    p = -p;\n+                }\n+                q = Math.abs(q);\n+\n+                double etemp = e;\n+                e = d;\n+\n+                if (Math.abs(p) >= Math.abs(0.5 * q * etemp) || p <= q * (min - x) || p >= q * (max - x)) {\n+                    // A golden-section step\n+                    if (x >= m) {\n+                        e = min - x;\n+                    } else {\n+                        e = max - x;\n+                    }\n+                    d = c * e;\n+                } else {\n+                    // A parabolic-interpolation step\n+                    d = p / q;\n+                    u = x + d;\n+                    if ((u - min) < tol * 2 || (max - u) < tol * 2) {\n+                        d = Math.signum(m - x) * tol;\n+                    }\n+                }\n+            } else {\n+                // A golden-section step\n+                if (x >= m) {\n+                    e = min - x;\n+                } else {\n+                    e = max - x;\n+                }\n+                d = c * e;\n+            }\n+\n+            // update current optimal root estimate\n+            if (Math.abs(d) > tol) {\n+                u = x + d;\n+                y = f.value(u);\n+            } else {\n+                if (d > 0) {\n+                    u = x + tol;\n+                    y = f.value(u);\n+                } else {\n+                    u = x - tol;\n+                    y = f.value(u);\n+                }\n+            }\n+\n+            // check if the current estimate is better\n+            if (Math.abs(y) < Math.abs(fx)) {\n+                v = w;\n+                w = x;\n+                x = u;\n+                z = yMax;\n+                yMax = yMin;\n+                yMin = y;\n+                fx = Math.abs(y);\n+            }\n+        }\n+\n+        throw new MaxIterationsExceededException(maxIter);\n \n     /**\n      * Find a zero in the given interval.",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}