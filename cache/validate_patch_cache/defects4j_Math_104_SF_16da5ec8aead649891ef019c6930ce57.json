{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.MathArrays;\nimport org.apache.commons.math3.util.Precision;\n\npublic class MyClass {\n    public static double regularizedGamma(double a, double x) {\n        // Check for valid input\n        if (a <= 0 || x < 0) {\n            throw new IllegalArgumentException(\"Invalid input arguments a = \" + a + \", x = \" + x);\n        }\n        // Special cases\n        if (x == 0.0) {\n            return 0.0;\n        }\n        if (x == Double.POSITIVE_INFINITY) {\n            return 1.0;\n        }\n\n        double result;\n        double igamma = Gamma.regularizedGammaP(a, x);\n        if (Precision.equals(igamma, 0.0, 10)) {\n            result = 0.0;\n        } else if (Precision.equals(igamma, 1.0, 10)) {\n            result = 1.0;\n        } else {\n            final double logGamma = Gamma.logGamma(a);\n            final double logXpowA = a * Math.log(x) - x - logGamma;\n            if (logXpowA > -Double.MAX_VALUE) {\n                result = MathArrays.normalizeExp(logXpowA)*igamma;\n            } else {\n                result = 0.0;\n            }\n        }\n        return result;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..10956b81d 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,42 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.MathArrays;\n+import org.apache.commons.math3.util.Precision;\n+\n+public class MyClass {\n+    public static double regularizedGamma(double a, double x) {\n+        // Check for valid input\n+        if (a <= 0 || x < 0) {\n+            throw new IllegalArgumentException(\"Invalid input arguments a = \" + a + \", x = \" + x);\n+        }\n+        // Special cases\n+        if (x == 0.0) {\n+            return 0.0;\n+        }\n+        if (x == Double.POSITIVE_INFINITY) {\n+            return 1.0;\n+        }\n+\n+        double result;\n+        double igamma = Gamma.regularizedGammaP(a, x);\n+        if (Precision.equals(igamma, 0.0, 10)) {\n+            result = 0.0;\n+        } else if (Precision.equals(igamma, 1.0, 10)) {\n+            result = 1.0;\n+        } else {\n+            final double logGamma = Gamma.logGamma(a);\n+            final double logXpowA = a * Math.log(x) - x - logGamma;\n+            if (logXpowA > -Double.MAX_VALUE) {\n+                result = MathArrays.normalizeExp(logXpowA)*igamma;\n+            } else {\n+                result = 0.0;\n+            }\n+        }\n+        return result;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}