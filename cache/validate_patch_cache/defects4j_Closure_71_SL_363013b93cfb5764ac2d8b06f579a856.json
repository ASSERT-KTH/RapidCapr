{
    "patch": " boolean isOverride = (parent != null &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() != null &&\n          parent.getFirstChild().getType() == Token.GETPROP &&\n          t.inGlobalScope() &&\n          ObjectType.cast(\n              dereference(parent.getFirstChild().getFirstChild().getJSType()))\n              .getImplicitPrototype() != null &&\n          parent.getFirstChild().getLastChild().getString()\n              .equals(getprop.getLastChild().getString())\n      );",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..fb17c459 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,17 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+ boolean isOverride = (parent != null &&\n+          parent.getType() == Token.ASSIGN &&\n+          parent.getFirstChild() != null &&\n+          parent.getFirstChild().getType() == Token.GETPROP &&\n+          t.inGlobalScope() &&\n+          ObjectType.cast(\n+              dereference(parent.getFirstChild().getFirstChild().getJSType()))\n+              .getImplicitPrototype() != null &&\n+          parent.getFirstChild().getLastChild().getString()\n+              .equals(getprop.getLastChild().getString())\n+      );\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}