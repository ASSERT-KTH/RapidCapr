{
    "patch": "private static final String PROP_NAME = \"mypropname\";\nprivate static final String PROP_VALUE = \"mypropvalue\";\n\n@Test\npublic void testGetprop4() {\n    Properties props = new Properties();\n    props.setProperty(PROP_NAME, PROP_VALUE);\n\n    MyConfig config = new MyConfig(props);\n    String propVal = config.getPropValue(PROP_NAME);\n\n    assertEquals(PROP_VALUE, propVal);\n\n    // Check for a warning message\n    String[] warnings = config.getWarnings();\n    assertTrue(\"Expected a warning message\", warnings.length > 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..99a7b2a0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+private static final String PROP_NAME = \"mypropname\";\n+private static final String PROP_VALUE = \"mypropvalue\";\n+\n+@Test\n+public void testGetprop4() {\n+    Properties props = new Properties();\n+    props.setProperty(PROP_NAME, PROP_VALUE);\n+\n+    MyConfig config = new MyConfig(props);\n+    String propVal = config.getPropValue(PROP_NAME);\n+\n+    assertEquals(PROP_VALUE, propVal);\n+\n+    // Check for a warning message\n+    String[] warnings = config.getWarnings();\n+    assertTrue(\"Expected a warning message\", warnings.length > 0);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}