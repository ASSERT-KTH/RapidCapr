{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n    int numArgs = 0;\n    while (cArg != null) {\n      numArgs++;\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    int numParams = 0;\n    while (fnParam != null) {\n      numParams++;\n      fnParam = fnParam.getNext();\n    }\n\n    // Check if the number of named parameters matches the number of call arguments.\n    if (numParams != numArgs) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    cArg = callNode.getFirstChild().getNext();\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    while (fnParam != null) {\n      // For each named parameter, check if a mutable argument is used more than once.\n      if (NodeUtil.mayEffectMutableState(cArg, compiler)\n          && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n      fnParam = fnParam.getNext();\n      cArg = cArg.getNext();\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..9830a0fe 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,63 +686,49 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+  private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n-\n-\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+    int numArgs = 0;\n+    while (cArg != null) {\n+      numArgs++;\n+      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        return CanInlineResult.NO;\n       }\n+      cArg = cArg.getNext();\n     }\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    int numParams = 0;\n+    while (fnParam != null) {\n+      numParams++;\n+      fnParam = fnParam.getNext();\n+    }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+    // Check if the number of named parameters matches the number of call arguments.\n+    if (numParams != numArgs) {\n+      return CanInlineResult.NO;\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+    Node block = fnNode.getLastChild();\n+    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+    cArg = callNode.getFirstChild().getNext();\n+    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+    fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+\n+    while (fnParam != null) {\n+      // For each named parameter, check if a mutable argument is used more than once.\n+      if (NodeUtil.mayEffectMutableState(cArg, compiler)\n+          && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n+        return CanInlineResult.NO;\n       }\n+      fnParam = fnParam.getNext();\n+      cArg = cArg.getNext();\n     }\n \n     return CanInlineResult.YES;",
    "result_reason": "junit.framework.AssertionFailedError: expected:<YES> but was:<NO>",
    "test_result": "FAIL"
}