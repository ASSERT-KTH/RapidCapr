{
    "patch": "import java.util.*;\n\npublic class MyClass {\n    public static <T> ReturnValues<T> makeReturnValues(T value) {\n        Iterable<T> iterable = Collections.singleton(value);\n        return new ReturnValues<T>() {\n            @SuppressWarnings(\"unchecked\")\n            public <V> V returnValueFor(Class<V> clazz) {\n                if (clazz == Iterable.class) {\n                    return (V)iterable;\n                } else if (clazz == Iterator.class) {\n                    return (V)iterable.iterator();\n                } else {\n                    return null;\n                }\n            }\n        };\n    }\n}\n\ninterface ReturnValues<T> {\n    <V> V returnValueFor(Class<V> clazz);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..084c6a32c 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,29 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.*;\n+\n+public class MyClass {\n+    public static <T> ReturnValues<T> makeReturnValues(T value) {\n+        Iterable<T> iterable = Collections.singleton(value);\n+        return new ReturnValues<T>() {\n+            @SuppressWarnings(\"unchecked\")\n+            public <V> V returnValueFor(Class<V> clazz) {\n+                if (clazz == Iterable.class) {\n+                    return (V)iterable;\n+                } else if (clazz == Iterator.class) {\n+                    return (V)iterable.iterator();\n+                } else {\n+                    return null;\n+                }\n+            }\n+        };\n+    }\n+}\n+\n+interface ReturnValues<T> {\n+    <V> V returnValueFor(Class<V> clazz);\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}