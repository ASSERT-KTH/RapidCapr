{
    "patch": "// where the function returns (possibly without a return statement)\nif (n == null) {\n  return false;\n}\n\n// We care about calls to functions and function expressions that potentially modify\n// dependent variables.\nif (NodeUtil.isCallOrNew(n)) {\n  return NodeUtil.mayEffectMutableState(n);\n}\n\n// Handle the 'delete' and 'typeof' operations\nif (n.isDelProp() || n.isTypeOf()) {\n  return true;\n}\n\n// Handle property access, checking for non-constant keys\nif (n.isGetProp()) {\n  Node lastChild = n.getLastChild();\n  if (!lastChild.isString() || !TokenStream.isJSIdentifier(lastChild.getString())) {\n    return true;\n  }\n}\n\n// Recurse on child nodes",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..0f95d5be 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,31 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+// where the function returns (possibly without a return statement)\n+if (n == null) {\n+  return false;\n+}\n+\n+// We care about calls to functions and function expressions that potentially modify\n+// dependent variables.\n+if (NodeUtil.isCallOrNew(n)) {\n+  return NodeUtil.mayEffectMutableState(n);\n+}\n+\n+// Handle the 'delete' and 'typeof' operations\n+if (n.isDelProp() || n.isTypeOf()) {\n+  return true;\n+}\n+\n+// Handle property access, checking for non-constant keys\n+if (n.isGetProp()) {\n+  Node lastChild = n.getLastChild();\n+  if (!lastChild.isString() || !TokenStream.isJSIdentifier(lastChild.getString())) {\n+    return true;\n+  }\n+}\n+\n+// Recurse on child nodes\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}