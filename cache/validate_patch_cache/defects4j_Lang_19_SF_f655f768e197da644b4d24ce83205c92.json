{
    "patch": "    private int readEntity(CharSequence input, int index) {\n        int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#\n        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check there's more than just an x after the &#\n                if (start == seqEnd) {\n                    return 0;\n                }\n            }\n\n            int end = start;\n            // Note that this supports character codes without a ; on the end\n            while (end < seqEnd && input.charAt(end) != ';') {\n                end++;\n            }\n\n            if (end == seqEnd) {\n                return 0;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                try {\n                    out.write(chrs[0]);\n                    out.write(chrs[1]);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            } else {\n                try {\n                    out.write(entityValue);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        } else {\n            return 0;\n        }\n    }\n\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int entityEnd = readEntity(input, index + 1);\n        if (entityEnd > 0) {\n            // Advance past the entity we just wrote\n            return entityEnd;\n        } else {\n            char ch = input.charAt(index);\n            out.write(ch);\n            return 1;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..bb932d97 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,7 +34,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    private int readEntity(CharSequence input, int index) {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n@@ -47,15 +47,21 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 isHex = true;\n \n                 // Check there's more than just an x after the &#\n+                if (start == seqEnd) {\n+                    return 0;\n+                }\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n+            while (end < seqEnd && input.charAt(end) != ';') {\n                 end++;\n             }\n \n+            if (end == seqEnd) {\n+                return 0;\n+            }\n+\n             int entityValue;\n             try {\n                 if(isHex) {\n@@ -64,21 +70,39 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                 }\n             } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                 return 0;\n             }\n \n             if(entityValue > 0xFFFF) {\n                 char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+                try {\n+                    out.write(chrs[0]);\n+                    out.write(chrs[1]);\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n             } else {\n-                out.write(entityValue);\n+                try {\n+                    out.write(entityValue);\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n             }\n \n-\n             return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        } else {\n+            return 0;\n         }\n-        return 0;\n     }\n+\n+    public int translate(CharSequence input, int index, Writer out) throws IOException {\n+        int entityEnd = readEntity(input, index + 1);\n+        if (entityEnd > 0) {\n+            // Advance past the entity we just wrote\n+            return entityEnd;\n+        } else {\n+            char ch = input.charAt(index);\n+            out.write(ch);\n+            return 1;\n }",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}