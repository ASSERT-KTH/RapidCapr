{
    "patch": "      ObjectType objectType = ObjectType.cast(\n          dereference(getprop.getFirstChild().getJSType()));\n      String propertyName = getprop.getLastChild().getString();\n      \n      boolean isOverride =\n          t.inGlobalScope() && parent.getType() == Token.ASSIGN &&",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..67770704 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,12 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      ObjectType objectType = ObjectType.cast(\n+          dereference(getprop.getFirstChild().getJSType()));\n+      String propertyName = getprop.getLastChild().getString();\n+      \n+      boolean isOverride =\n+          t.inGlobalScope() && parent.getType() == Token.ASSIGN &&\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: variable objectType is already defined in method checkPropertyVisibility(NodeTraversal,Node,Node)",
    "test_result": "ERROR"
}