{
    "patch": "BUG DESCRIPTION:\nThe code assumes that every character in the input `CharSequence` is a single code point. However, some characters may actually represent a surrogate pair, which are two consecutive code points. When the `translate` method encounters a surrogate pair, it attempts to process the first character as a standalone code point, leading to the `StringIndexOutOfBoundsException`.\n\nCODE FIX:\nThe fix is to use the `codePointAt` method instead of indexing directly into the input string in order to correctly handle surrogate pairs. Replace the following line:\n```\nchar[] c = Character.toChars(Character.codePointAt(input, pos));\n```\nwith the following code:\n```\nint c = Character.codePointAt(input, pos);\nint charCount = Character.charCount(c);\nout.write(Character.toChars(c));\npos += charCount;\n```\nThis will correctly handle surrogate pairs and allow the `translate` method to function properly.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..c4c2bcd4 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,22 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-            }\n-        }\n-    }\n+BUG DESCRIPTION:\n+The code assumes that every character in the input `CharSequence` is a single code point. However, some characters may actually represent a surrogate pair, which are two consecutive code points. When the `translate` method encounters a surrogate pair, it attempts to process the first character as a standalone code point, leading to the `StringIndexOutOfBoundsException`.\n+\n+CODE FIX:\n+The fix is to use the `codePointAt` method instead of indexing directly into the input string in order to correctly handle surrogate pairs. Replace the following line:\n+```\n+char[] c = Character.toChars(Character.codePointAt(input, pos));\n+```\n+with the following code:\n+```\n+int c = Character.codePointAt(input, pos);\n+int charCount = Character.charCount(c);\n+out.write(Character.toChars(c));\n+pos += charCount;\n+```\n+This will correctly handle surrogate pairs and allow the `translate` method to function properly.\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}