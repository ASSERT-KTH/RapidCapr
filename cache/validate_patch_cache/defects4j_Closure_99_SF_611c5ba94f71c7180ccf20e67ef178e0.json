{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n   if(parent != null && parent.isScript()) {\n      return true;\n   }\n\n   if (n.isFunction()) {\n      // Don't traverse functions that are constructors, have the @this, or @override annotation.\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n         return false;\n      }\n\n      if (n.getParent().isAssign()) {\n         // Only traverse the function if it is assigned to an object.\n         Node lhs = n.getParent().getFirstChild();\n         if (!NodeUtil.isObjectLiteralKey(lhs) && lhs.getType() != Token.GETPROP) {\n            return false;\n         }\n      } else if (n.getParent().isClassMembers()) {\n         // Only traverse class member functions that are not static.\n         Node classNode = n.getParent().getParent();\n         if (NodeUtil.isClassStaticMethod(classNode.getFirstChild(), n)\n               || NodeUtil.isClassStaticField(classNode.getFirstChild(), n)) {\n            return false;\n         }\n      } else {\n         // Don't traverse nested functions or functions not defined on an object.\n         Node functionParent = n.getParent();\n         while (!functionParent.isScript() && functionParent.getParent().isFunction()) {\n            functionParent = functionParent.getParent();\n         }\n         if (!NodeUtil.isObjectLiteralKey(functionParent.getParent().getFirstChild())) {\n            return false;\n         }\n      }\n   } else if (n.isGetProp()) {\n      // Don't traverse object properties that are not defined on the global scope.\n      if (!t.getScope().isGlobal()) {\n         return false;\n      }\n   } else if (n.isCall()) {\n      // Don't traverse function calls that are not defined on the global scope.\n      if (!t.getScope().isGlobal()) {\n         return false;\n      }\n   }\n\n   return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..b94eecf9 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,55 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+   if(parent != null && parent.isScript()) {\n+      return true;\n+   }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n+   if (n.isFunction()) {\n+      // Don't traverse functions that are constructors, have the @this, or @override annotation.\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+         return false;\n       }\n-    }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+      if (n.getParent().isAssign()) {\n+         // Only traverse the function if it is assigned to an object.\n+         Node lhs = n.getParent().getFirstChild();\n+         if (!NodeUtil.isObjectLiteralKey(lhs) && lhs.getType() != Token.GETPROP) {\n             return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+         }\n+      } else if (n.getParent().isClassMembers()) {\n+         // Only traverse class member functions that are not static.\n+         Node classNode = n.getParent().getParent();\n+         if (NodeUtil.isClassStaticMethod(classNode.getFirstChild(), n)\n+               || NodeUtil.isClassStaticField(classNode.getFirstChild(), n)) {\n             return false;\n-          }\n+         }\n+      } else {\n+         // Don't traverse nested functions or functions not defined on an object.\n+         Node functionParent = n.getParent();\n+         while (!functionParent.isScript() && functionParent.getParent().isFunction()) {\n+            functionParent = functionParent.getParent();\n+         }\n+         if (!NodeUtil.isObjectLiteralKey(functionParent.getParent().getFirstChild())) {\n+            return false;\n+         }\n       }\n-    }\n+   } else if (n.isGetProp()) {\n+      // Don't traverse object properties that are not defined on the global scope.\n+      if (!t.getScope().isGlobal()) {\n+         return false;\n+      }\n+   } else if (n.isCall()) {\n+      // Don't traverse function calls that are not defined on the global scope.\n+      if (!t.getScope().isGlobal()) {\n+         return false;\n+      }\n+   }\n \n-    return true;\n-  }\n+   return true;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}