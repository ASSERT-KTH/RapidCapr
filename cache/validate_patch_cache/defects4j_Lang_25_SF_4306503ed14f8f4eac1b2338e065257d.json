{
    "patch": "public static String unescape(String str) {\n    StringBuilder buf = new StringBuilder(str.length());\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        if (ch == '\\\\') {\n            if (++i >= str.length()) {\n                throw new IllegalArgumentException(\"Invalid escape sequence: \\\\\" + ch);\n            }\n            ch = str.charAt(i);\n            if (ch == 'n') {\n                ch = '\\n';\n            } else if (ch == 'r') {\n                ch = '\\r';\n            } else if (ch == 't') {\n                ch = '\\t';\n            } else if (ch == 'f') {\n                ch = '\\f';\n            } else if (ch == 'b') {\n                ch = '\\b';\n            } else if (ch == '\\\"') {\n                ch = '\\\"';\n            } else if (ch == '\\'') {\n                ch = '\\'';\n            } else if (ch == '\\\\') {\n                ch = '\\\\';\n            } else if (ch >= '0' && ch <= '7') {\n                // Octal escape\n                int start = i - 1;\n                ch = 0;\n                for (int j = 0; j < 3 && i < str.length(); j++, i++) {\n                    ch *= 8;\n                    ch += str.charAt(i) - '0';\n                }\n                i--;\n                buf.setCharAt(start, ch);\n                buf.setLength(buf.length() - 1);\n            } else if (ch == 'u') {\n                // Unicode escape\n                if (i + 4 >= str.length()) {\n                    throw new IllegalArgumentException(\"Invalid unicode escape: \\\\\" + ch);\n                }\n                ch = 0;\n                for (int j = 0; j < 4; j++, i++) {\n                    if (str.charAt(i + 1) == '{' || str.charAt(i + 1) == 'x') {\n                        // Extended unicode escape\n                        int start = i + 2;\n                        i++;\n                        while (i < str.length() && str.charAt(i) != '}') {\n                            i++;\n                        }\n                        try {\n                            ch = (char) Integer.parseInt(str.substring(start, i), str.charAt(i + 1) == 'x' ? 16 : 10);\n                        } catch (NumberFormatException e) {\n                            throw new IllegalArgumentException(\"Invalid extended unicode escape: \\\\\" + ch, e);\n                        }\n                    } else {\n                        // Basic unicode escape\n                        ch *= 16;\n                        ch += Character.digit(str.charAt(i + 1), 16);\n                    }\n                }\n                i--;\n            } else {\n                throw new IllegalArgumentException(\"Invalid escape sequence: \\\\\" + ch);\n            }\n        }\n        buf.append(ch);\n    }\n    return buf.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..cb414e53 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,76 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String str) {\n+    StringBuilder buf = new StringBuilder(str.length());\n+    for (int i = 0; i < str.length(); i++) {\n+        char ch = str.charAt(i);\n+        if (ch == '\\\\') {\n+            if (++i >= str.length()) {\n+                throw new IllegalArgumentException(\"Invalid escape sequence: \\\\\" + ch);\n+            }\n+            ch = str.charAt(i);\n+            if (ch == 'n') {\n+                ch = '\\n';\n+            } else if (ch == 'r') {\n+                ch = '\\r';\n+            } else if (ch == 't') {\n+                ch = '\\t';\n+            } else if (ch == 'f') {\n+                ch = '\\f';\n+            } else if (ch == 'b') {\n+                ch = '\\b';\n+            } else if (ch == '\\\"') {\n+                ch = '\\\"';\n+            } else if (ch == '\\'') {\n+                ch = '\\'';\n+            } else if (ch == '\\\\') {\n+                ch = '\\\\';\n+            } else if (ch >= '0' && ch <= '7') {\n+                // Octal escape\n+                int start = i - 1;\n+                ch = 0;\n+                for (int j = 0; j < 3 && i < str.length(); j++, i++) {\n+                    ch *= 8;\n+                    ch += str.charAt(i) - '0';\n+                }\n+                i--;\n+                buf.setCharAt(start, ch);\n+                buf.setLength(buf.length() - 1);\n+            } else if (ch == 'u') {\n+                // Unicode escape\n+                if (i + 4 >= str.length()) {\n+                    throw new IllegalArgumentException(\"Invalid unicode escape: \\\\\" + ch);\n+                }\n+                ch = 0;\n+                for (int j = 0; j < 4; j++, i++) {\n+                    if (str.charAt(i + 1) == '{' || str.charAt(i + 1) == 'x') {\n+                        // Extended unicode escape\n+                        int start = i + 2;\n+                        i++;\n+                        while (i < str.length() && str.charAt(i) != '}') {\n+                            i++;\n+                        }\n+                        try {\n+                            ch = (char) Integer.parseInt(str.substring(start, i), str.charAt(i + 1) == 'x' ? 16 : 10);\n+                        } catch (NumberFormatException e) {\n+                            throw new IllegalArgumentException(\"Invalid extended unicode escape: \\\\\" + ch, e);\n+                        }\n+                    } else {\n+                        // Basic unicode escape\n+                        ch *= 16;\n+                        ch += Character.digit(str.charAt(i + 1), 16);\n+                    }\n+                }\n+                i--;\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid escape sequence: \\\\\" + ch);\n+            }\n+        }\n+        buf.append(ch);\n+    }\n+    return buf.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}