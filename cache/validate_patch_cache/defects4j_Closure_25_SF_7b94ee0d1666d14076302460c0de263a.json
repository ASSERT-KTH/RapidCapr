{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        } else if (constructorType.isFunctionType()) {\n          ObjectType objectType = constructorType.toObjectType();\n          if (objectType.getConstructor() != null && objectType.getConstructor().isConstructor()) {\n            ct = objectType.getConstructor().toMaybeFunctionType();\n            if (ct != null) {\n              type = ct.getInstanceType();\n            }\n          }\n        }\n      }\n    }\n    if (type == null) {\n      type = getNativeType(UNKNOWN_TYPE);\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..1e6b49b4 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,8 +1032,7 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n@@ -1044,17 +1043,22 @@ class TypeInference\n         type = getNativeType(UNKNOWN_TYPE);\n       } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n+        } else if (constructorType.isFunctionType()) {\n+          ObjectType objectType = constructorType.toObjectType();\n+          if (objectType.getConstructor() != null && objectType.getConstructor().isConstructor()) {\n+            ct = objectType.getConstructor().toMaybeFunctionType();\n+            if (ct != null) {\n+              type = ct.getInstanceType();\n+            }\n+          }\n         }\n       }\n     }\n+    if (type == null) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    }\n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[foo: (number|undefined)]}> but was:<{[]}>",
    "test_result": "FAIL"
}