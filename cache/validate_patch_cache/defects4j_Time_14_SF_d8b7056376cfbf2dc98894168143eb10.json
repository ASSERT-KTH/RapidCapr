{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        // convert partial to instant\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        \n        // get original month and year\n        int prevMonth = iChronology.monthOfYear().get(instant);\n        int prevYear = iChronology.year().get(instant);\n        \n        // add/subtract months to/from month field, handling overflow\n        int newMonth = iChronology.monthOfYear().add(prevMonth, valueToAdd);\n        int newYear = prevYear;\n        if (newMonth < prevMonth) {\n            newYear = iChronology.year().add(prevYear, 1);\n        } else if (newMonth > prevMonth) {\n            newYear = iChronology.year().add(prevYear, -1);\n        }\n        \n        // set new year and month, clamp dayOfMonth to prevent overflow\n        instant = iChronology.year().set(instant, newYear);\n        instant = iChronology.monthOfYear().set(instant, newMonth);\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n        int newDayOfMonth = (values[iChronology.dayOfMonth().getFieldIndex()] <= maxDayOfMonth ? \n                                values[iChronology.dayOfMonth().getFieldIndex()] : maxDayOfMonth);\n        instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n        \n        // convert instant back to fields\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..335b2b72 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,47 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        // convert partial to instant\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        \n+        // get original month and year\n+        int prevMonth = iChronology.monthOfYear().get(instant);\n+        int prevYear = iChronology.year().get(instant);\n+        \n+        // add/subtract months to/from month field, handling overflow\n+        int newMonth = iChronology.monthOfYear().add(prevMonth, valueToAdd);\n+        int newYear = prevYear;\n+        if (newMonth < prevMonth) {\n+            newYear = iChronology.year().add(prevYear, 1);\n+        } else if (newMonth > prevMonth) {\n+            newYear = iChronology.year().add(prevYear, -1);\n         }\n+        \n+        // set new year and month, clamp dayOfMonth to prevent overflow\n+        instant = iChronology.year().set(instant, newYear);\n+        instant = iChronology.monthOfYear().set(instant, newMonth);\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+        int newDayOfMonth = (values[iChronology.dayOfMonth().getFieldIndex()] <= maxDayOfMonth ? \n+                                values[iChronology.dayOfMonth().getFieldIndex()] : maxDayOfMonth);\n+        instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n+        \n+        // convert instant back to fields\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}