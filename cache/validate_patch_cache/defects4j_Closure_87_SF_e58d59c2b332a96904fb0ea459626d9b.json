{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      if (NodeUtil.isExpressionNode(maybeExpr)) {\n        // Check if the parent of maybeExpr is not EXPR_RESULT\n        if (maybeExpr.getParent() == null || maybeExpr.getParent().getType() != Token.EXPR_RESULT) {\n          Node parent = maybeExpr.getParent();\n          if (parent != null && NodeUtil.isFunctionExpression(parent)) {\n            // Check if any child of the parent is an EXPR_RESULT\n            for (Node child = parent.getFirstChild(); child != null; child = child.getNext()) {\n              if (child.getType() == Token.EXPR_RESULT) {\n                return false;\n              }\n            }\n            return true;\n          } else {\n            // This is a normal expression node, we can fold it\n            return true;\n          }\n        }\n      } else if (maybeExpr.getType() == Token.IF) {\n        // This is a special case where the node is an IF statement\n        // in the form: \"if (!cond) expr;\"\n        Node cond = maybeExpr.getFirstChild();\n        Node ifTrue = cond.getNext();\n        if (ifTrue != null && NodeUtil.isExpressionNode(ifTrue)) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..b18626cb 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,43 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      if (NodeUtil.isExpressionNode(maybeExpr)) {\n+        // Check if the parent of maybeExpr is not EXPR_RESULT\n+        if (maybeExpr.getParent() == null || maybeExpr.getParent().getType() != Token.EXPR_RESULT) {\n+          Node parent = maybeExpr.getParent();\n+          if (parent != null && NodeUtil.isFunctionExpression(parent)) {\n+            // Check if any child of the parent is an EXPR_RESULT\n+            for (Node child = parent.getFirstChild(); child != null; child = child.getNext()) {\n+              if (child.getType() == Token.EXPR_RESULT) {\n+                return false;\n+              }\n+            }\n+            return true;\n+          } else {\n+            // This is a normal expression node, we can fold it\n+            return true;\n+          }\n+        }\n+      } else if (maybeExpr.getType() == Token.IF) {\n+        // This is a special case where the node is an IF statement\n+        // in the form: \"if (!cond) expr;\"\n+        Node cond = maybeExpr.getFirstChild();\n+        Node ifTrue = cond.getNext();\n+        if (ifTrue != null && NodeUtil.isExpressionNode(ifTrue)) {\n+          return true;\n+        }\n       }\n     }\n-\n-    return false;\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}