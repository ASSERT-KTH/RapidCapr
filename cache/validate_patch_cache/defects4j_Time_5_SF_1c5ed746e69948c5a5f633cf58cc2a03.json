{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    ISOChronology chrono = ISOChronology.getInstanceUTC();\n    long millis = getMillis();  \n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    long weeksMillis = ((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK);\n    millis += weeksMillis;\n    Period result = new Period(millis, type, chrono);\n    \n    boolean hasYearsOrMonths = type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months());\n    \n    if (hasYearsOrMonths && weeksMillis > 0) {\n      ReadOnlyDurationField weeksField = chrono.weeks();\n      \n      if(type.isSupported(DurationFieldType.months())) {\n          int totalMonths = getYears() * 12 + getMonths();\n          totalMonths += (int) Math.round(weeksMillis / ((double) DurationFieldType.months().getField(chrono).getUnitMillis()));\n          int years = totalMonths / 12;\n  \n          if (years != getYears()) {\n              result = result.withYears(years);\n          }\n  \n          int months = totalMonths % 12;\n          if (months != getMonths()) {\n              result = result.withMonths(months);\n          }\n      }\n  \n      if(type.isSupported(DurationFieldType.weeks()) || type.isSupported(DurationFieldType.days())) {\n          int days = getDays() + weeksField.getDifferenceAsInt(DateTimeUtils.getDurationField(millis, weeksMillis), weeksField.getDurationField());\n  \n          int weeks = 0;\n          if (type.isSupported(DurationFieldType.weeks())) {\n              weeks = days / 7;\n              if (weeks != getWeeks()) {\n                  result = result.withWeeks(weeks);\n              }\n          }\n  \n          if (type.isSupported(DurationFieldType.days())) {\n              days = days % 7;\n              if (days != getDays()) {\n                  result = result.withDays(days);\n              }\n          }\n      }\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..c93151ea 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,59 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    ISOChronology chrono = ISOChronology.getInstanceUTC();\n+    long millis = getMillis();  \n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    long weeksMillis = ((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK);\n+    millis += weeksMillis;\n+    Period result = new Period(millis, type, chrono);\n+    \n+    boolean hasYearsOrMonths = type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months());\n+    \n+    if (hasYearsOrMonths && weeksMillis > 0) {\n+      ReadOnlyDurationField weeksField = chrono.weeks();\n+      \n+      if(type.isSupported(DurationFieldType.months())) {\n+          int totalMonths = getYears() * 12 + getMonths();\n+          totalMonths += (int) Math.round(weeksMillis / ((double) DurationFieldType.months().getField(chrono).getUnitMillis()));\n+          int years = totalMonths / 12;\n+  \n+          if (years != getYears()) {\n+              result = result.withYears(years);\n+          }\n+  \n+          int months = totalMonths % 12;\n+          if (months != getMonths()) {\n+              result = result.withMonths(months);\n+          }\n+      }\n+  \n+      if(type.isSupported(DurationFieldType.weeks()) || type.isSupported(DurationFieldType.days())) {\n+          int days = getDays() + weeksField.getDifferenceAsInt(DateTimeUtils.getDurationField(millis, weeksMillis), weeksField.getDurationField());\n+  \n+          int weeks = 0;\n+          if (type.isSupported(DurationFieldType.weeks())) {\n+              weeks = days / 7;\n+              if (weeks != getWeeks()) {\n+                  result = result.withWeeks(weeks);\n+              }\n+          }\n+  \n+          if (type.isSupported(DurationFieldType.days())) {\n+              days = days % 7;\n+              if (days != getDays()) {\n+                  result = result.withDays(days);\n+              }\n+          }\n+      }\n+    }\n+\n+    return result;\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}