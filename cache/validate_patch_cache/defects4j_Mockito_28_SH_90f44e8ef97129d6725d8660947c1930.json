{
    "patch": "            Optional<MockCandidateFilter.MockCandidate> mockCandidate =\n                    mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (mockCandidate.isPresent()) {\n                mockCandidate.get().thenInject();\n            } else {\n                Injector.getInstance().injectTo(fieldInstance, mocks.stream().findFirst().orElse(null), null);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..167a3eea7 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,16 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Optional<MockCandidateFilter.MockCandidate> mockCandidate =\n+                    mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (mockCandidate.isPresent()) {\n+                mockCandidate.get().thenInject();\n+            } else {\n+                Injector.getInstance().injectTo(fieldInstance, mocks.stream().findFirst().orElse(null), null);\n+            }\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}