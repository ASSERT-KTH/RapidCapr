{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    Field[] fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n    for (Field field : fields) {\n        Object mock = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        if (mock != null) {\n            if (field.getType().isAssignableFrom(mock.getClass())) {\n                field.setAccessible(true);\n                try {\n                    field.set(fieldInstance, mock);\n                    mocks.remove(mock);\n                    break; // exit the loop after injecting a compatible mock\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..e668d0599 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,25 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    Field[] fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n+    for (Field field : fields) {\n+        Object mock = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+        if (mock != null) {\n+            if (field.getType().isAssignableFrom(mock.getClass())) {\n+                field.setAccessible(true);\n+                try {\n+                    field.set(fieldInstance, mock);\n+                    mocks.remove(mock);\n+                    break; // exit the loop after injecting a compatible mock\n+                } catch (IllegalAccessException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        }\n+    }\n+}\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}