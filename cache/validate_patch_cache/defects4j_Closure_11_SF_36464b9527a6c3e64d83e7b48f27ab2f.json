{
    "patch": "public boolean getProp4(Properties props, String prop) {\n    String value = props.getProperty(prop);\n    if (value == null) {\n        return false;\n    } else {\n        String trimmedValue = value.trim();\n        if (trimmedValue.length() == 0) {\n            return false;\n        } else {\n            for (int i = 0; i < trimmedValue.length(); i++) {\n                if (trimmedValue.charAt(i) == 'false') {\n                    return false;\n                } else if (trimmedValue.charAt(i) == 'true') {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..7b9dea08 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public boolean getProp4(Properties props, String prop) {\n+    String value = props.getProperty(prop);\n+    if (value == null) {\n+        return false;\n+    } else {\n+        String trimmedValue = value.trim();\n+        if (trimmedValue.length() == 0) {\n+            return false;\n+        } else {\n+            for (int i = 0; i < trimmedValue.length(); i++) {\n+                if (trimmedValue.charAt(i) == 'false') {\n+                    return false;\n+                } else if (trimmedValue.charAt(i) == 'true') {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: unclosed character literal",
    "test_result": "ERROR"
}