{
    "patch": "      String fnName = NodeUtil.getNearestFunctionName(n);\n      if (fnName == null) {\n        fnName = \"<anonymous>\";\n      }\n\n      JSType thisType = functionType.getTypeOfThis();\n      if (thisType != null && !NodeUtil.isGetOrSetKey(n.getParent())) {\n        report(t, n, THIS_IS_TYPED, thisType.toString(), fnName);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..6dc5b1fb 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,14 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      String fnName = NodeUtil.getNearestFunctionName(n);\n+      if (fnName == null) {\n+        fnName = \"<anonymous>\";\n+      }\n+\n+      JSType thisType = functionType.getTypeOfThis();\n+      if (thisType != null && !NodeUtil.isGetOrSetKey(n.getParent())) {\n+        report(t, n, THIS_IS_TYPED, thisType.toString(), fnName);\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}