{
    "patch": "      Node fnNameNode = null;\n      if (n.getFirstChild() != null && n.getFirstChild().isName()) {\n        fnNameNode = n.getFirstChild();\n      }\n      Node fnPropsNode = NodeUtil.getFunctionBody(n).getFirstChild();\n\n      if (fnPropsNode != null && fnPropsNode.isBlock() &&\n          fnPropsNode.hasChildren() && fnPropsNode.getFirstChild().isString()) {\n        // This is a shorthand object method, like:\n        //   {method() { ... }}\n        return false;\n      }\n\n      if (fnPropsNode == null || !fnPropsNode.hasChildren()) {\n        // This function has no properties to analyze.\n        return true;\n      }\n\n      Node firstPropNode = fnPropsNode.getFirstChild();\n      if (!firstPropNode.isAssign() || firstPropNode.getNext() != null ||\n          firstPropNode.getFirstChild().getToken() != Token.THIS) {\n        // This function's first property is not a `this.name = value` assignment,\n        // so it can't be an object literal getter or setter.\n        return true;\n      }\n\n      if (fnPropsNode.getChildCount() == 1) {\n        // This function has exactly one property. It must be a getter, because\n        // a setter would require a second assignment to `this`.\n        return false;\n      }\n\n      // This function has at least two properties. If the first property is a\n      // getter and the second property is a setter, then this is a getter/setter\n      // pair.\n      Node secondPropNode = firstPropNode.getNext();\n      return secondPropNode.isAssign() && secondPropNode.getNext() == null &&\n          secondPropNode.getFirstChild().getToken() == Token.THIS &&\n          secondPropNode.isForcedInGetterOrSetter();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..c3ab02f8 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,45 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node fnNameNode = null;\n+      if (n.getFirstChild() != null && n.getFirstChild().isName()) {\n+        fnNameNode = n.getFirstChild();\n+      }\n+      Node fnPropsNode = NodeUtil.getFunctionBody(n).getFirstChild();\n+\n+      if (fnPropsNode != null && fnPropsNode.isBlock() &&\n+          fnPropsNode.hasChildren() && fnPropsNode.getFirstChild().isString()) {\n+        // This is a shorthand object method, like:\n+        //   {method() { ... }}\n+        return false;\n+      }\n+\n+      if (fnPropsNode == null || !fnPropsNode.hasChildren()) {\n+        // This function has no properties to analyze.\n+        return true;\n+      }\n+\n+      Node firstPropNode = fnPropsNode.getFirstChild();\n+      if (!firstPropNode.isAssign() || firstPropNode.getNext() != null ||\n+          firstPropNode.getFirstChild().getToken() != Token.THIS) {\n+        // This function's first property is not a `this.name = value` assignment,\n+        // so it can't be an object literal getter or setter.\n+        return true;\n+      }\n+\n+      if (fnPropsNode.getChildCount() == 1) {\n+        // This function has exactly one property. It must be a getter, because\n+        // a setter would require a second assignment to `this`.\n+        return false;\n+      }\n+\n+      // This function has at least two properties. If the first property is a\n+      // getter and the second property is a setter, then this is a getter/setter\n+      // pair.\n+      Node secondPropNode = firstPropNode.getNext();\n+      return secondPropNode.isAssign() && secondPropNode.getNext() == null &&\n+          secondPropNode.getFirstChild().getToken() == Token.THIS &&\n+          secondPropNode.isForcedInGetterOrSetter();\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}