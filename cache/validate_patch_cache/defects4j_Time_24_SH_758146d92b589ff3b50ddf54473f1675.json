{
    "patch": "        } catch (IllegalFieldValueException e) {\n            if (resetFields)\n                throw e;\n            IllegalFieldValueException ne = new IllegalFieldValueException(\n                    e.getFieldName(), e.getIllegalValue(), e.getMessage());\n            for (int i=iSavedFieldsCount; --i>=0;) {\n                SavedField savedField = iSavedFields[i];\n                DateTimeField field = savedField.iField;\n                if (field != null && field.getType() == e.getFieldType()) {\n                    ne.initCause(e);\n                    e = ne;\n                    break;\n                }\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..b13f0194 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,22 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            if (resetFields)\n+                throw e;\n+            IllegalFieldValueException ne = new IllegalFieldValueException(\n+                    e.getFieldName(), e.getIllegalValue(), e.getMessage());\n+            for (int i=iSavedFieldsCount; --i>=0;) {\n+                SavedField savedField = iSavedFields[i];\n+                DateTimeField field = savedField.iField;\n+                if (field != null && field.getType() == e.getFieldType()) {\n+                    ne.initCause(e);\n+                    e = ne;\n+                    break;\n+                }\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}