{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n        Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // FUNCTIONS WHICH TAKE VARIABLE ARGUMENTS HAVE A SIGNATURE LIKE f(a, b, c, [d, e, f]).\n    // Arguments appearing in square brackets means that they are optional.\n    // In such a case the jsdoc annotation specifies a default value\n    // So we need to check if there is indeed such a parameter.\n    if (fnNode.getBooleanProp(Node.FUNCTION_VARARGS)) {\n        Node lastParam = NodeUtil.getFunctionParameters(fnNode).getLastChild();\n        if (lastParam != null && lastParam.isRest()) {\n            if (cArg == null || cArg.isSpread()) {\n                // No arguments were passed to the vararg part.\n                // Also this means all remaining named arguments are covered by the vararg.\n                return CanInlineResult.YES;\n            }\n        }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n        // If there are too few arguments, we cannot inline\n        if (cArg == null) {\n            return CanInlineResult.NO;\n        }\n\n        // If any remaining arg is not a named param, we cannot inline\n        if (!fnParam.isName()) {\n            return CanInlineResult.NO;\n        }\n\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)\n                || (NodeUtil.mayEffectMutableState(cArg, compiler)\n                && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1)) {\n            // If any arg has side effects or any mutable arg is evaluated more than once, we cannot inline\n            return CanInlineResult.NO;\n        }\n\n        // Otherwise, move to the next arg/param\n        cArg = cArg.getNext();\n        fnParam = fnParam.getNext();\n    }\n\n    // Otherwise, inlining can proceed\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..fe320353 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,60 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(\n+        Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+        return CanInlineResult.NO;\n     }\n \n     Node block = fnNode.getLastChild();\n \n-\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n+    // FUNCTIONS WHICH TAKE VARIABLE ARGUMENTS HAVE A SIGNATURE LIKE f(a, b, c, [d, e, f]).\n+    // Arguments appearing in square brackets means that they are optional.\n+    // In such a case the jsdoc annotation specifies a default value\n+    // So we need to check if there is indeed such a parameter.\n+    if (fnNode.getBooleanProp(Node.FUNCTION_VARARGS)) {\n+        Node lastParam = NodeUtil.getFunctionParameters(fnNode).getLastChild();\n+        if (lastParam != null && lastParam.isRest()) {\n+            if (cArg == null || cArg.isSpread()) {\n+                // No arguments were passed to the vararg part.\n+                // Also this means all remaining named arguments are covered by the vararg.\n+                return CanInlineResult.YES;\n+            }\n         }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n     }\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+        // If there are too few arguments, we cannot inline\n+        if (cArg == null) {\n             return CanInlineResult.NO;\n-          }\n         }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+        // If any remaining arg is not a named param, we cannot inline\n+        if (!fnParam.isName()) {\n+            return CanInlineResult.NO;\n+        }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+        if (NodeUtil.mayHaveSideEffects(cArg, compiler)\n+                || (NodeUtil.mayEffectMutableState(cArg, compiler)\n+                && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1)) {\n+            // If any arg has side effects or any mutable arg is evaluated more than once, we cannot inline\n+            return CanInlineResult.NO;\n         }\n+\n+        // Otherwise, move to the next arg/param\n         cArg = cArg.getNext();\n-      }\n+        fnParam = fnParam.getNext();\n     }\n \n+    // Otherwise, inlining can proceed\n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}