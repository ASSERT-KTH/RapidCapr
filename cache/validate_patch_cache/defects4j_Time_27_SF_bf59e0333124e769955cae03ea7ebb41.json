{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    \n    int size = elementPairs.size();\n    \n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n    \n    if (size == 1) {\n        if (elementPairs.get(0) instanceof PeriodPrinter && !notPrinter) {\n            return new PeriodFormatter((PeriodPrinter) elementPairs.get(0), null);\n        } else if (elementPairs.get(0) instanceof PeriodParser && !notParser) {\n            return new PeriodFormatter(null, (PeriodParser) elementPairs.get(0));\n        } else if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n    }\n    \n    Separator lastSeparator = null;\n    int lastIndex = -1;\n    \n    for (int i = size - 1; i >= 0; i--) {\n        if (elementPairs.get(i) instanceof Separator) {\n            lastSeparator = (Separator) elementPairs.get(i);\n            lastIndex = i;\n            break;\n        }\n    }\n    \n    if (lastSeparator == null) {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    } else {\n        List<Object> beforeSeparatorList = elementPairs.subList(0, lastIndex);\n        List<Object> afterSeparatorList = elementPairs.subList(lastIndex + 1, size);\n        \n        boolean notPrinterBefore = notPrinter;\n        boolean notParserAfter = notParser;\n        \n        // If the last separator splits a field that both parser \n        // and printer need, we cannot skip anything\n        if (lastIndex + 1 < size && elementPairs.get(lastIndex + 1) instanceof DecimalPoint) {\n            notPrinterBefore = false;\n            notParserAfter = false;\n        }\n        \n        PeriodFormatter beforeFormatter = toFormatter(beforeSeparatorList, notPrinterBefore, false);\n        PeriodFormatter afterFormatter = toFormatter(afterSeparatorList, false, notParserAfter);\n        Separator sep = lastSeparator.finish(beforeFormatter.getPrinter(), afterFormatter.getParser());\n        \n        if (notPrinter && notParser) {\n            return new PeriodFormatter(null, null);\n        } else if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) sep);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) sep, null);\n        } else {\n            return new PeriodFormatter(sep, sep);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..87618d2c 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,39 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    \n+    int size = elementPairs.size();\n+    \n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    \n+    if (size == 1) {\n+        if (elementPairs.get(0) instanceof PeriodPrinter && !notPrinter) {\n+            return new PeriodFormatter((PeriodPrinter) elementPairs.get(0), null);\n+        } else if (elementPairs.get(0) instanceof PeriodParser && !notParser) {\n+            return new PeriodFormatter(null, (PeriodParser) elementPairs.get(0));\n+        } else if (notPrinter && notParser) {\n             throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n         }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+    }\n+    \n+    Separator lastSeparator = null;\n+    int lastIndex = -1;\n+    \n+    for (int i = size - 1; i >= 0; i--) {\n+        if (elementPairs.get(i) instanceof Separator) {\n+            lastSeparator = (Separator) elementPairs.get(i);\n+            lastIndex = i;\n+            break;\n         }\n+    }\n+    \n+    if (lastSeparator == null) {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -810,7 +832,35 @@ public class PeriodFormatterBuilder {\n         } else {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n+    } else {\n+        List<Object> beforeSeparatorList = elementPairs.subList(0, lastIndex);\n+        List<Object> afterSeparatorList = elementPairs.subList(lastIndex + 1, size);\n+        \n+        boolean notPrinterBefore = notPrinter;\n+        boolean notParserAfter = notParser;\n+        \n+        // If the last separator splits a field that both parser \n+        // and printer need, we cannot skip anything\n+        if (lastIndex + 1 < size && elementPairs.get(lastIndex + 1) instanceof DecimalPoint) {\n+            notPrinterBefore = false;\n+            notParserAfter = false;\n+        }\n+        \n+        PeriodFormatter beforeFormatter = toFormatter(beforeSeparatorList, notPrinterBefore, false);\n+        PeriodFormatter afterFormatter = toFormatter(afterSeparatorList, false, notParserAfter);\n+        Separator sep = lastSeparator.finish(beforeFormatter.getPrinter(), afterFormatter.getParser());\n+        \n+        if (notPrinter && notParser) {\n+            return new PeriodFormatter(null, null);\n+        } else if (notPrinter) {\n+            return new PeriodFormatter(null, (PeriodParser) sep);\n+        } else if (notParser) {\n+            return new PeriodFormatter((PeriodPrinter) sep, null);\n+        } else {\n+            return new PeriodFormatter(sep, sep);\n+        }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}