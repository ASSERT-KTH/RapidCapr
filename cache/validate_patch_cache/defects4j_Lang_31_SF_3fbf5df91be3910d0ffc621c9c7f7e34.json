{
    "patch": "import java.util.Arrays;\n\npublic class StringUtils {\n\t\n\tpublic static boolean containsAny(final CharSequence cs, final char[] searchChars) {\n        final int csLength = cs.length();\n        final int searchCharsLength = searchChars.length;\n        final int csLast = csLength - 1;\n        final int searchLast = searchCharsLength - 1;\n\n        for (int i = 0; i < csLength; i++) {\n            final char ch = cs.charAt(i);\n            for (int j = 0; j < searchCharsLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (Character.isHighSurrogate(ch)) {\n                        if (j == searchLast) {\n                            // missing low surrogate, fine, like indexOf()\n                            return true;\n                        }\n                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n\tpublic static void main(String[] args) {\n\t\tchar[] CharU20000 = Character.toChars(0x20000);\n\t\tchar[] CharU20001 = Character.toChars(0x20001);\n\t\t\n\t\tassertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));\n\t}\n\t\n    public static void assertEquals(boolean expected, boolean actual) {\n        if (expected != actual) {\n            throw new RuntimeException(\"Expected \" + expected + \", but got \" + actual);\n        }\n        System.out.println(\"Test passed!\");\n    }\n\t\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..b8c46833 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,53 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.Arrays;\n+\n+public class StringUtils {\n+\t\n+\tpublic static boolean containsAny(final CharSequence cs, final char[] searchChars) {\n+        final int csLength = cs.length();\n+        final int searchCharsLength = searchChars.length;\n+        final int csLast = csLength - 1;\n+        final int searchLast = searchCharsLength - 1;\n+\n+        for (int i = 0; i < csLength; i++) {\n+            final char ch = cs.charAt(i);\n+            for (int j = 0; j < searchCharsLength; j++) {\n+                if (searchChars[j] == ch) {\n+                    if (Character.isHighSurrogate(ch)) {\n+                        if (j == searchLast) {\n+                            // missing low surrogate, fine, like indexOf()\n+                            return true;\n+                        }\n+                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n+                            return true;\n+                        }\n+                    } else {\n+                        // ch is in the Basic Multilingual Plane\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+\tpublic static void main(String[] args) {\n+\t\tchar[] CharU20000 = Character.toChars(0x20000);\n+\t\tchar[] CharU20001 = Character.toChars(0x20001);\n+\t\t\n+\t\tassertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));\n+\t}\n+\t\n+    public static void assertEquals(boolean expected, boolean actual) {\n+        if (expected != actual) {\n+            throw new RuntimeException(\"Expected \" + expected + \", but got \" + actual);\n+        }\n+        System.out.println(\"Test passed!\");\n+    }\n+\t\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}