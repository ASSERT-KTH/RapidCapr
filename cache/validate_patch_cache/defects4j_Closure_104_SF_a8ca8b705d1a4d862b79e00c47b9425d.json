{
    "patch": "  private JSType greatestSubtypeHelper(List<JSType> types) {\n    checkState(!types.isEmpty());\n    for (JSType t : types) {\n      checkNotNull(t);\n    }\n    if (types.size() == 1) {\n      return types.get(0);\n    }\n    Builder builder = new Builder();\n    for (int i = 0; i < types.size(); ++i) {\n      if (!(types.get(i) instanceof ObjectType)) {\n        builder.addAlternate(types.get(i));\n        continue;\n      }\n      Set<String> props = ((ObjectType) types.get(i)).getOwnPropertyNames();\n      if (props.isEmpty()) {\n        builder.addAlternate(NO_OBJECT_TYPE);\n        continue;\n      }\n      List<JSType> propsWithSameName = new ArrayList<>();\n      for (String prop : props) {\n        if (i == 0) {\n          propsWithSameName.add(((ObjectType) types.get(i)).getPropertyType(prop));\n          continue;\n        }\n        JSType propType = ((ObjectType) types.get(i)).getPropertyType(prop);\n        for (String otherProp : ((ObjectType) types.get(0)).getOwnPropertyNames()) {\n          if (!otherProp.equals(prop)) {\n            continue;\n          }\n          JSType otherPropType = ((ObjectType) types.get(0)).getPropertyType(otherProp);\n          JSType lubType = propType.getGreatestSubtype(otherPropType);\n          propsWithSameName.add(lubType);\n        }\n      }\n      builder.addAlternate(OBJECT_TYPE.withProperty(prop, getLeastSupertype(propsWithSameName)));\n    }\n    JSType result = builder.build();\n    if (result != null) {\n      return result;\n    } else if (types.get(0).isObject()) {\n      return NO_OBJECT_TYPE;\n    } else {\n      return NO_TYPE;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..5f4bc025 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,54 +279,52 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n+  private JSType greatestSubtypeHelper(List<JSType> types) {\n+    checkState(!types.isEmpty());\n+    for (JSType t : types) {\n+      checkNotNull(t);\n+    }\n+    if (types.size() == 1) {\n+      return types.get(0);\n+    }\n+    Builder builder = new Builder();\n+    for (int i = 0; i < types.size(); ++i) {\n+      if (!(types.get(i) instanceof ObjectType)) {\n+        builder.addAlternate(types.get(i));\n+        continue;\n+      }\n+      Set<String> props = ((ObjectType) types.get(i)).getOwnPropertyNames();\n+      if (props.isEmpty()) {\n+        builder.addAlternate(NO_OBJECT_TYPE);\n+        continue;\n+      }\n+      List<JSType> propsWithSameName = new ArrayList<>();\n+      for (String prop : props) {\n+        if (i == 0) {\n+          propsWithSameName.add(((ObjectType) types.get(i)).getPropertyType(prop));\n+          continue;\n+        }\n+        JSType propType = ((ObjectType) types.get(i)).getPropertyType(prop);\n+        for (String otherProp : ((ObjectType) types.get(0)).getOwnPropertyNames()) {\n+          if (!otherProp.equals(prop)) {\n+            continue;\n+          }\n+          JSType otherPropType = ((ObjectType) types.get(0)).getPropertyType(otherProp);\n+          JSType lubType = propType.getGreatestSubtype(otherPropType);\n+          propsWithSameName.add(lubType);\n         }\n       }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n+      builder.addAlternate(OBJECT_TYPE.withProperty(prop, getLeastSupertype(propsWithSameName)));\n     }\n     JSType result = builder.build();\n     if (result != null) {\n       return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n-    }\n-  }\n-\n-  /**\n-   * Two union types are equal if they have the same number of alternates\n-   * and all alternates are equal.\n-   */\n-  @Override\n-  public boolean equals(Object object) {\n-    if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n+    } else if (types.get(0).isObject()) {\n+      return NO_OBJECT_TYPE;\n     } else {\n-      return false;\n+      return NO_TYPE;\n     }\n   }\n-\n-  @Override\n-  public int hashCode() {\n-    return alternates.hashCode();\n-  }\n-\n-  @Override\n-  public boolean isUnionType() {\n-    return true;\n-  }\n-\n-  @Override\n-  public boolean isObject() {\n-    for (JSType alternate : alternates) {\n-      if (!alternate.isObject()) {\n-        return false;\n-      }\n     }\n     return true;\n   }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}