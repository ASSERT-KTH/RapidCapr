{
    "patch": "public void testGetprop4() {\n    final String PROP_NAME = \"non_existing_property\";\n    final String PROP_VALUE = \"default_value\";\n    final String COMMAND = \"getprop \" + PROP_NAME;\n\n    try {\n        Process p = Runtime.getRuntime().exec(COMMAND);\n        BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));\n        String line = input.readLine();\n\n        input.close();\n        p.destroy();\n\n        if (line == null) {\n            final String[] commands = {\"setprop \" + PROP_NAME + \" \" + PROP_VALUE};\n            Process setP = Runtime.getRuntime().exec(commands);\n            setP.waitFor();\n        }\n\n        String[] warnings = mDevice.executeShellCommand(COMMAND).split(\"\\n\");\n\n        assertTrue(\"expected a warning\", warnings.length > 0);\n        assertTrue(\"wrong warning value\", warnings[0].equals(\"[\"+PROP_NAME+\"]:\" + PROP_VALUE));\n    } catch (Exception e) {\n        fail(\"exception thrown: \" + e.getMessage());\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..5887f745 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+    final String PROP_NAME = \"non_existing_property\";\n+    final String PROP_VALUE = \"default_value\";\n+    final String COMMAND = \"getprop \" + PROP_NAME;\n+\n+    try {\n+        Process p = Runtime.getRuntime().exec(COMMAND);\n+        BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));\n+        String line = input.readLine();\n+\n+        input.close();\n+        p.destroy();\n+\n+        if (line == null) {\n+            final String[] commands = {\"setprop \" + PROP_NAME + \" \" + PROP_VALUE};\n+            Process setP = Runtime.getRuntime().exec(commands);\n+            setP.waitFor();\n+        }\n+\n+        String[] warnings = mDevice.executeShellCommand(COMMAND).split(\"\\n\");\n+\n+        assertTrue(\"expected a warning\", warnings.length > 0);\n+        assertTrue(\"wrong warning value\", warnings[0].equals(\"[\"+PROP_NAME+\"]:\" + PROP_VALUE));\n+    } catch (Exception e) {\n+        fail(\"exception thrown: \" + e.getMessage());\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}