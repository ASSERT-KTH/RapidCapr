{
    "patch": "// Maybe STRING_KEY, STRING, GETPROP, GETELEM, SET\nif (!NodeUtil.isGetOrSetKey(child)) {\n  String name = null;\n  if (child.isStringKey() || child.isString()) {\n    name = child.getString();\n  } else if (child.isGetProp()) {\n    Node firstChild = child.getFirstChild();\n    Node secondChild = firstChild.getNext();\n    // Handle GETPROP case\n    if (firstChild.isString() && secondChild.isString()) {\n      name = firstChild.getString() + \".\" + secondChild.getString();\n    }\n  } else if (child.isGetElem()) {\n    Node firstChild = child.getFirstChild();\n    Node secondChild = firstChild.getNext();\n    // Handle GETELEM case\n    if (firstChild != null && secondChild != null &&\n        firstChild.isString() && secondChild.isString()) {\n      name = firstChild.getString() + \"[\" + secondChild.getString() + \"]\";\n    }\n  }\n  if (name == null) {\n    continue;\n  }\n  // We should never see a mix of numbers and strings.\n  T type = typeSystem.getType(getScope(), n, name);\n\n  Property prop = getProperty(name);\n  if (!prop.scheduleRenaming(child,\n                              processProperty(t, prop, type, null))) {\n    // TODO(user): It doesn't look like the user can do much in this\n    // case right now.\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(\n          t.getSourceName(), child, propertiesToErrorFor.get(name),\n          Warnings.INVALIDATION, name,\n          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..a513e708 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,46 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+// Maybe STRING_KEY, STRING, GETPROP, GETELEM, SET\n+if (!NodeUtil.isGetOrSetKey(child)) {\n+  String name = null;\n+  if (child.isStringKey() || child.isString()) {\n+    name = child.getString();\n+  } else if (child.isGetProp()) {\n+    Node firstChild = child.getFirstChild();\n+    Node secondChild = firstChild.getNext();\n+    // Handle GETPROP case\n+    if (firstChild.isString() && secondChild.isString()) {\n+      name = firstChild.getString() + \".\" + secondChild.getString();\n+    }\n+  } else if (child.isGetElem()) {\n+    Node firstChild = child.getFirstChild();\n+    Node secondChild = firstChild.getNext();\n+    // Handle GETELEM case\n+    if (firstChild != null && secondChild != null &&\n+        firstChild.isString() && secondChild.isString()) {\n+      name = firstChild.getString() + \"[\" + secondChild.getString() + \"]\";\n+    }\n+  }\n+  if (name == null) {\n+    continue;\n+  }\n+  // We should never see a mix of numbers and strings.\n+  T type = typeSystem.getType(getScope(), n, name);\n+\n+  Property prop = getProperty(name);\n+  if (!prop.scheduleRenaming(child,\n+                              processProperty(t, prop, type, null))) {\n+    // TODO(user): It doesn't look like the user can do much in this\n+    // case right now.\n+    if (propertiesToErrorFor.containsKey(name)) {\n+      compiler.report(JSError.make(\n+          t.getSourceName(), child, propertiesToErrorFor.get(name),\n+          Warnings.INVALIDATION, name,\n+          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+    }\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[]}> but was:<{[a=[[Foo.prototype]]]}>",
    "test_result": "FAIL"
}