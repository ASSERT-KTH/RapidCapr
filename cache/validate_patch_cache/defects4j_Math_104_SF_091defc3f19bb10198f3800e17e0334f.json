{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.MathUtils;\n\npublic class GammaFunction {\n   public static double regularizedGamma(double a, double x) {\n      if (a <= 0.0 || x < 0.0) {\n         throw new IllegalArgumentException(\"Invalid arguments for the Gamma function.\");\n      }\n      return Gamma.regularizedGammaP(a, x);\n   }\n\n   public static void main(String[] args) {\n      double a = 1.0;\n      double x = 1.0;\n      double expected = 0.632120558828558;\n      double actualP = MathUtils.round(regularizedGamma(a, x), 15);\n      TestUtils.assertEquals(expected, actualP, 10e-15);\n   }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c906c0594 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,25 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+public class GammaFunction {\n+   public static double regularizedGamma(double a, double x) {\n+      if (a <= 0.0 || x < 0.0) {\n+         throw new IllegalArgumentException(\"Invalid arguments for the Gamma function.\");\n+      }\n+      return Gamma.regularizedGammaP(a, x);\n+   }\n+\n+   public static void main(String[] args) {\n+      double a = 1.0;\n+      double x = 1.0;\n+      double expected = 0.632120558828558;\n+      double actualP = MathUtils.round(regularizedGamma(a, x), 15);\n+      TestUtils.assertEquals(expected, actualP, 10e-15);\n+   }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}