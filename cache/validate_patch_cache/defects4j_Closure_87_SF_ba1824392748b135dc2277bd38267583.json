{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n\n          if (NodeUtil.mayHaveSideEffects(maybeExpr)) {\n            return false;\n          }\n\n          // We only have to worry about methods with an implicit 'this'\n          // param, or this doesn't happen.\n          if (NodeUtil.isExpressionNode(maybeExpr)) {\n            return true;\n          }\n\n          // a BLOCK might only contain an IF, or only a FOR, etc.\n          Node child = maybeExpr.getFirstChild();\n          if (child != null && NodeUtil.isStatementBlock(child)) {\n            return isFoldableExpressBlock(child);\n          }\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..83c7849a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,7 +516,7 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n+private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n@@ -527,10 +527,21 @@ public class PeepholeSubstituteAlternateSyntax\n           // We try to detect this case, and not fold EXPR_RESULTs\n           // into other expressions.\n \n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n+          if (NodeUtil.mayHaveSideEffects(maybeExpr)) {\n+            return false;\n+          }\n \n-          return NodeUtil.isExpressionNode(maybeExpr);\n+          // We only have to worry about methods with an implicit 'this'\n+          // param, or this doesn't happen.\n+          if (NodeUtil.isExpressionNode(maybeExpr)) {\n+            return true;\n+          }\n+\n+          // a BLOCK might only contain an IF, or only a FOR, etc.\n+          Node child = maybeExpr.getFirstChild();\n+          if (child != null && NodeUtil.isStatementBlock(child)) {\n+            return isFoldableExpressBlock(child);\n+          }\n       }\n     }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}