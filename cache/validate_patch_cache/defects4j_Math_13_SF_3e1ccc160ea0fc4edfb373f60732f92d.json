{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final double[][] a = m.getData();\n\n    // Start with the identity matrix as an initial guess\n    double[][] x = MatrixUtils.createRealIdentityMatrix(n);\n\n    // Set the maximum number of iterations and the tolerance\n    final int maxIter = 100;\n    final double tol = 1e-8;\n\n    // Apply the truncated Newton method\n    for (int k = 0; k < maxIter; k++) {\n        double[][] y = new double[n][n];\n        double c = 1;\n        for (int j = 0; j < n; j++) {\n            for (int i = 0; i <= j; i++) {\n                double s = a[i][j];\n                for (int r = 0; r < i; r++) {\n                    s -= y[r][i] * y[r][j];\n                }\n                if (i == j) {\n                    double d = 0;\n                    for (int r = 0; r < i; r++) {\n                        d += y[r][i] * y[r][i];\n                    }\n                    s -= d;\n                    if (s <= 0) {\n                        c = 0;\n                        break;\n                    }\n                    double q = Math.sqrt(s);\n                    y[i][i] = q;\n                    c *= q;\n                } else {\n                    y[i][j] = s / y[i][i];\n                }\n            }\n            if (c == 0) {\n                break;\n            }\n        }\n        if (c == 0) {\n            throw new NonPositiveDefiniteMatrixException();\n        }\n        double[][] err = new double[n][n];\n        for (int j = 0; j < n; j++) {\n            for (int i = 0; i < n; i++) {\n                double s = y[i][j];\n                for (int r = 0; r < n; r++) {\n                    s -= x[i][r] * y[j][r];\n                }\n                err[i][j] = s;\n            }\n        }\n        double norm = MatrixUtils.createRealMatrix(err).getFrobeniusNorm();\n        if (norm < tol) {\n            break;\n        }\n        x = MatrixUtils.add(y, MatrixUtils.scale(err, 1 + tol / norm));\n    }\n\n    return MatrixUtils.createRealMatrix(x);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..426b0fa21 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,68 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final double[][] a = m.getData();\n+\n+    // Start with the identity matrix as an initial guess\n+    double[][] x = MatrixUtils.createRealIdentityMatrix(n);\n+\n+    // Set the maximum number of iterations and the tolerance\n+    final int maxIter = 100;\n+    final double tol = 1e-8;\n+\n+    // Apply the truncated Newton method\n+    for (int k = 0; k < maxIter; k++) {\n+        double[][] y = new double[n][n];\n+        double c = 1;\n+        for (int j = 0; j < n; j++) {\n+            for (int i = 0; i <= j; i++) {\n+                double s = a[i][j];\n+                for (int r = 0; r < i; r++) {\n+                    s -= y[r][i] * y[r][j];\n+                }\n+                if (i == j) {\n+                    double d = 0;\n+                    for (int r = 0; r < i; r++) {\n+                        d += y[r][i] * y[r][i];\n+                    }\n+                    s -= d;\n+                    if (s <= 0) {\n+                        c = 0;\n+                        break;\n+                    }\n+                    double q = Math.sqrt(s);\n+                    y[i][i] = q;\n+                    c *= q;\n+                } else {\n+                    y[i][j] = s / y[i][i];\n+                }\n+            }\n+            if (c == 0) {\n+                break;\n+            }\n+        }\n+        if (c == 0) {\n+            throw new NonPositiveDefiniteMatrixException();\n+        }\n+        double[][] err = new double[n][n];\n+        for (int j = 0; j < n; j++) {\n+            for (int i = 0; i < n; i++) {\n+                double s = y[i][j];\n+                for (int r = 0; r < n; r++) {\n+                    s -= x[i][r] * y[j][r];\n+                }\n+                err[i][j] = s;\n+            }\n+        }\n+        double norm = MatrixUtils.createRealMatrix(err).getFrobeniusNorm();\n+        if (norm < tol) {\n+            break;\n+        }\n+        x = MatrixUtils.add(y, MatrixUtils.scale(err, 1 + tol / norm));\n     }\n+\n+    return MatrixUtils.createRealMatrix(x);\n+}\n }",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}