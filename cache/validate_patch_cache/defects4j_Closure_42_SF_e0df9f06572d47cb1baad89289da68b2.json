{
    "patch": "@Override\nNode processForInLoop(ForInLoop loopNode) {\n    AstNode iteratedObject = loopNode.getIteratedObject();\n    if (isDirective(iteratedObject)) {\n        errorReporter.error(\n            \"For-in statement may not have an initializer\",\n            sourceName,\n            iteratedObject.getLineno(), \"\", 0);\n    }\n\n    Node object = transform(iteratedObject);\n    Node lhs;\n    if (loopNode.isForEach()) {\n        // lhs is the VarDecl\n        lhs = newNode(Token.VAR);\n        lhs.addChildToBack(transform(loopNode.getIterator()));\n        // For each, don't add TARGETs.\n    } else {\n        // lhs is the target\n        lhs = transform(loopNode.getIterator());\n    }\n\n    Node body = transformBlock(loopNode.getBody());\n    // The FOR node has up to four children:\n    // 1) The label (if present)\n    // 2) The initializer statement\n    // 3) The condition expression\n    // 4) The body statement\n    Node forNode = newNode(Token.FOR);\n    if (loopNode.getLabel() != null) {\n        forNode.addChildToBack(transform(loopNode.getLabel()));\n    }\n    forNode.addChildToBack(lhs);\n    forNode.addChildToBack(object);\n    forNode.addChildToBack(body);\n\n    return forNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..9c6e3b7d 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,44 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n+@Override\n+Node processForInLoop(ForInLoop loopNode) {\n+    AstNode iteratedObject = loopNode.getIteratedObject();\n+    if (isDirective(iteratedObject)) {\n         errorReporter.error(\n-            \"Catch clauses are not supported\",\n+            \"For-in statement may not have an initializer\",\n             sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+            iteratedObject.getLineno(), \"\", 0);\n     }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+    Node object = transform(iteratedObject);\n+    Node lhs;\n+    if (loopNode.isForEach()) {\n+        // lhs is the VarDecl\n+        lhs = newNode(Token.VAR);\n+        lhs.addChildToBack(transform(loopNode.getIterator()));\n+        // For each, don't add TARGETs.\n+    } else {\n+        // lhs is the target\n+        lhs = transform(loopNode.getIterator());\n     }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+    Node body = transformBlock(loopNode.getBody());\n+    // The FOR node has up to four children:\n+    // 1) The label (if present)\n+    // 2) The initializer statement\n+    // 3) The condition expression\n+    // 4) The body statement\n+    Node forNode = newNode(Token.FOR);\n+    if (loopNode.getLabel() != null) {\n+        forNode.addChildToBack(transform(loopNode.getLabel()));\n     }\n+    forNode.addChildToBack(lhs);\n+    forNode.addChildToBack(object);\n+    forNode.addChildToBack(body);\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+    return forNode;\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: IRFactory.TransformDispatcher is not abstract and does not override abstract method processExpressionStatement(ExpressionStatement) in TypeSafeDispatcher",
    "test_result": "ERROR"
}