{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = resolveViaRegistry(t, enclosing); // try to resolve via registry\n    if (!resolved) { // if registry resolution fails, try to resolve via properties\n      resolveViaProperties(t, enclosing);\n\n      if (isResolved()) {\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ?\n                getReferencedType() : this;\n      }\n    } else { // if registry resolution succeeds, check for cycle and fully resolve\n      if (detectImplicitPrototypeCycle()) { \n        handleTypeCycle(t);\n      }\n      super.resolveInternal(t, enclosing);\n      if (isResolved()) {\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ?\n                getReferencedType() : this;\n      }\n    }\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n            getReferencedType() : this;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..12d1ea97 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,26 +181,26 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    boolean resolved = resolveViaRegistry(t, enclosing); // try to resolve via registry\n+    if (!resolved) { // if registry resolution fails, try to resolve via properties\n+      resolveViaProperties(t, enclosing);\n+\n+      if (isResolved()) {\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration() ?\n+                getReferencedType() : this;\n+      }\n+    } else { // if registry resolution succeeds, check for cycle and fully resolve\n+      if (detectImplicitPrototypeCycle()) { \n+        handleTypeCycle(t);\n+      }\n       super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+      if (isResolved()) {\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration() ?\n+                getReferencedType() : this;\n+      }\n     }\n \n     super.resolveInternal(t, enclosing);\n@@ -208,8 +208,7 @@ class NamedType extends ProxyObjectType {\n       finishPropertyContinuations();\n     }\n     return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+            getReferencedType() : this;\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}