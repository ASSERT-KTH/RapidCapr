{
    "patch": "        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n            && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node lastArg;\n        while ((lastArg = argList.getLastChild()) != null) {\n            Var var = fnScope.getVar(lastArg.getString());\n            boolean shouldBeDeleted = false;\n            if (!referenced.contains(var)) {\n                if (lastArg.getJSDocInfo() == null || !lastArg.getJSDocInfo().hasType()) {\n                    shouldBeDeleted = true;\n                } else {\n                    // for functions with types on the last arguments, we can remove them\n                    // and still preserve the function signature.\n                    JSTypeExpression lastArgType = lastArg.getJSDocInfo().getParameterType(lastArg.getString());\n                    if (lastArgType == null || lastArgType.getRoot().isEmpty()) {\n                        shouldBeDeleted = true;\n                    }\n                }\n            }\n\n            if (shouldBeDeleted) {\n                argList.removeChild(lastArg);\n                compiler.reportCodeChange();\n            } else {\n                break;\n            }\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5f917cdd 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,41 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        // The parameters object literal setters can not be removed.\n+        return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+            && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        Node lastArg;\n+        while ((lastArg = argList.getLastChild()) != null) {\n+            Var var = fnScope.getVar(lastArg.getString());\n+            boolean shouldBeDeleted = false;\n+            if (!referenced.contains(var)) {\n+                if (lastArg.getJSDocInfo() == null || !lastArg.getJSDocInfo().hasType()) {\n+                    shouldBeDeleted = true;\n+                } else {\n+                    // for functions with types on the last arguments, we can remove them\n+                    // and still preserve the function signature.\n+                    JSTypeExpression lastArgType = lastArg.getJSDocInfo().getParameterType(lastArg.getString());\n+                    if (lastArgType == null || lastArgType.getRoot().isEmpty()) {\n+                        shouldBeDeleted = true;\n+                    }\n+                }\n+            }\n+\n+            if (shouldBeDeleted) {\n+                argList.removeChild(lastArg);\n+                compiler.reportCodeChange();\n+            } else {\n+                break;\n+            }\n+        }\n+    } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}