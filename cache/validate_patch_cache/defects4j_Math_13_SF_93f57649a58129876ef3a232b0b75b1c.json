{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int maxMatrixSize = 1000000; // maximum size of the matrix\n    final int matrixSize = m.getRowDimension() * m.getColumnDimension();\n\n    if (matrixSize > maxMatrixSize) {\n        System.out.println(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n        return null;\n    } else if (!m.isSquare() || !isPositiveDefinite(m)) {\n        System.out.println(\"Matrix is not square or positive definite.\");\n        return null;\n    } else {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}\n\nprivate boolean isPositiveDefinite(RealMatrix m) {\n    final int size = m.getRowDimension();\n    final double[] ev = new double[size];\n    final EigenDecomposition decomposition = new EigenDecomposition(m);\n    final RealMatrix d = decomposition.getD();\n\n    for (int i = 0; i < size; i++) {\n        final double eigenvalue = d.getEntry(i, i);\n        if (eigenvalue < 0.0) {\n            return false;\n        }\n        ev[i] = eigenvalue;\n    }\n\n    Arrays.sort(ev);\n    return (ev[0] > FastMath.sqrt(Precision.EPSILON));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..436cd3544 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,37 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int maxMatrixSize = 1000000; // maximum size of the matrix\n+    final int matrixSize = m.getRowDimension() * m.getColumnDimension();\n+\n+    if (matrixSize > maxMatrixSize) {\n+        System.out.println(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n+        return null;\n+    } else if (!m.isSquare() || !isPositiveDefinite(m)) {\n+        System.out.println(\"Matrix is not square or positive definite.\");\n+        return null;\n+    } else {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n }\n+\n+private boolean isPositiveDefinite(RealMatrix m) {\n+    final int size = m.getRowDimension();\n+    final double[] ev = new double[size];\n+    final EigenDecomposition decomposition = new EigenDecomposition(m);\n+    final RealMatrix d = decomposition.getD();\n+\n+    for (int i = 0; i < size; i++) {\n+        final double eigenvalue = d.getEntry(i, i);\n+        if (eigenvalue < 0.0) {\n+            return false;\n+        }\n+        ev[i] = eigenvalue;\n+    }\n+\n+    Arrays.sort(ev);\n+    return (ev[0] > FastMath.sqrt(Precision.EPSILON));\n+}\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}