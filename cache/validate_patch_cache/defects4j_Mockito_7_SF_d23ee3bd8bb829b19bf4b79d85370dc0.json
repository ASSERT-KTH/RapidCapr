{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable, Map<TypeVariable<?>, Type> typeArguments) {\n    Type resolvedType = typeArguments.get(typeVariable);\n    if (resolvedType != null) {\n        return resolvedType;\n    }\n    TypeVariable<?> declaredTypeVariable =\n            Arrays.stream(typeVariable.getGenericDeclaration().getTypeParameters())\n                    .filter(tv -> tv.getName().equals(typeVariable.getName()))\n                    .findFirst()\n                    .orElse(null);\n    if (declaredTypeVariable == null) {\n        return null;\n    }\n    Type[] bounds = declaredTypeVariable.getBounds();\n    if (bounds.length != 1 || !(bounds[0] instanceof Class)) {\n        return null;\n    }\n    Class<?> declaringClass = (Class<?>) declaredTypeVariable.getGenericDeclaration();\n    TypeVariable<?>[] declaredTypeVariables = declaringClass.getTypeParameters();\n    int index = -1;\n    for (int i = 0; i < declaredTypeVariables.length; i++) {\n        if (declaredTypeVariables[i].getName().equals(declaredTypeVariable.getName())) {\n            index = i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return null;\n    }\n    Type[] actualTypeArguments =\n            getTypeArguments(((Class<?>) typeVariable.getGenericDeclaration()).asSubclass(declaringClass), typeArguments);\n    if (actualTypeArguments == null || actualTypeArguments.length <= index) {\n        return null;\n    }\n    Type actualTypeArgument = actualTypeArguments[index];\n    if (actualTypeArgument instanceof TypeVariable) {\n        actualTypeArgument = getActualTypeArgumentFor((TypeVariable<?>) actualTypeArgument, typeArguments);\n    }\n    return actualTypeArgument;\n}\n\nprivate Type[] getTypeArguments(Class<?> clazz, Map<TypeVariable<?>, Type> typeArguments) {\n    Type type = clazz;\n    while (type != null && !(type instanceof Class)) {\n        if (type instanceof ParameterizedType) {\n            Type[] typeArguments = ((ParameterizedType) type).getActualTypeArguments();\n            TypeVariable<?>[] typeParameters = ((Class<?>) ((ParameterizedType) type).getRawType()).getTypeParameters();\n            for (int i = 0; i < typeArguments.length; i++) {\n                typeArguments[i] = resolveType(typeArguments[i], typeArguments, typeParameters);\n            }\n            return typeArguments;\n        }\n        type = ((Class<?>) type).getGenericSuperclass();\n    }\n    return null;\n}\n\nprivate Type resolveType(Type type, Map<TypeVariable<?>, Type> typeArguments, TypeVariable<?>[] typeParameters) {\n    if (type instanceof TypeVariable) {\n        TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n        Type resolvedType = typeArguments.get(typeVariable);\n        if (resolvedType == null) {\n            for (int i = 0; i < typeParameters.length; i++) {\n                if (typeParameters[i].getName().equals(typeVariable.getName())) {\n                    resolvedType = typeArguments.get(typeParameters[i]);\n                    break;\n                }\n            }\n        }\n        if (resolvedType == null) {\n            resolvedType = resolveType(typeVariable.getBounds()[0], typeArguments, typeParameters);\n        }\n        return resolvedType;\n    } else {\n        return type;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..b749cc66e 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,84 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable, Map<TypeVariable<?>, Type> typeArguments) {\n+    Type resolvedType = typeArguments.get(typeVariable);\n+    if (resolvedType != null) {\n+        return resolvedType;\n+    }\n+    TypeVariable<?> declaredTypeVariable =\n+            Arrays.stream(typeVariable.getGenericDeclaration().getTypeParameters())\n+                    .filter(tv -> tv.getName().equals(typeVariable.getName()))\n+                    .findFirst()\n+                    .orElse(null);\n+    if (declaredTypeVariable == null) {\n+        return null;\n+    }\n+    Type[] bounds = declaredTypeVariable.getBounds();\n+    if (bounds.length != 1 || !(bounds[0] instanceof Class)) {\n+        return null;\n+    }\n+    Class<?> declaringClass = (Class<?>) declaredTypeVariable.getGenericDeclaration();\n+    TypeVariable<?>[] declaredTypeVariables = declaringClass.getTypeParameters();\n+    int index = -1;\n+    for (int i = 0; i < declaredTypeVariables.length; i++) {\n+        if (declaredTypeVariables[i].getName().equals(declaredTypeVariable.getName())) {\n+            index = i;\n+            break;\n+        }\n+    }\n+    if (index == -1) {\n+        return null;\n+    }\n+    Type[] actualTypeArguments =\n+            getTypeArguments(((Class<?>) typeVariable.getGenericDeclaration()).asSubclass(declaringClass), typeArguments);\n+    if (actualTypeArguments == null || actualTypeArguments.length <= index) {\n+        return null;\n+    }\n+    Type actualTypeArgument = actualTypeArguments[index];\n+    if (actualTypeArgument instanceof TypeVariable) {\n+        actualTypeArgument = getActualTypeArgumentFor((TypeVariable<?>) actualTypeArgument, typeArguments);\n+    }\n+    return actualTypeArgument;\n+}\n+\n+private Type[] getTypeArguments(Class<?> clazz, Map<TypeVariable<?>, Type> typeArguments) {\n+    Type type = clazz;\n+    while (type != null && !(type instanceof Class)) {\n+        if (type instanceof ParameterizedType) {\n+            Type[] typeArguments = ((ParameterizedType) type).getActualTypeArguments();\n+            TypeVariable<?>[] typeParameters = ((Class<?>) ((ParameterizedType) type).getRawType()).getTypeParameters();\n+            for (int i = 0; i < typeArguments.length; i++) {\n+                typeArguments[i] = resolveType(typeArguments[i], typeArguments, typeParameters);\n+            }\n+            return typeArguments;\n+        }\n+        type = ((Class<?>) type).getGenericSuperclass();\n+    }\n+    return null;\n+}\n+\n+private Type resolveType(Type type, Map<TypeVariable<?>, Type> typeArguments, TypeVariable<?>[] typeParameters) {\n+    if (type instanceof TypeVariable) {\n+        TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n+        Type resolvedType = typeArguments.get(typeVariable);\n+        if (resolvedType == null) {\n+            for (int i = 0; i < typeParameters.length; i++) {\n+                if (typeParameters[i].getName().equals(typeVariable.getName())) {\n+                    resolvedType = typeArguments.get(typeParameters[i]);\n+                    break;\n+                }\n+            }\n+        }\n+        if (resolvedType == null) {\n+            resolvedType = resolveType(typeVariable.getBounds()[0], typeArguments, typeParameters);\n+        }\n+        return resolvedType;\n+    } else {\n+        return type;\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}