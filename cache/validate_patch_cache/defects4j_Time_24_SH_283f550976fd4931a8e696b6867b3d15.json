{
    "patch": "        } catch (IllegalFieldValueException e) {\n            DurationField field = e.getFieldType().getField(iChrono);\n            if (field == null) {\n                // year is abnormal, month or day might be missing, try again\n                Integer year = null;\n                DurationField months = DurationFieldType.months().getField(iChrono);\n                DurationField days = DurationFieldType.days().getField(iChrono);\n                for (SavedField sf : savedFields) {\n                    if (sf.iField.getType() == DateTimeFieldType.year()) {\n                        year = sf.iValue;\n                    }\n                    if (year != null && compareReverse(sf.iField.getDurationField(), days) <= 0) {\n                        // year with month or day, reset field values parsed so far\n                        resetFields = true;\n                        break;\n                    } else if (year == null && compareReverse(sf.iField.getDurationField(), months) >= 0) {\n                        // month without year, add current year as a saved field\n                        saveField(DateTimeFieldType.year(), iDefaultYear);\n                        savedFields[count++] = new SavedField(DateTimeFieldType.year(), iDefaultYear);\n                        break;\n                    }\n                }\n                if (resetFields || year == null) {\n                    saveField(DateTimeFieldType.year(), iDefaultYear);\n                    return computeMillis(true, text);\n                }\n            }\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5dfa549f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,38 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            DurationField field = e.getFieldType().getField(iChrono);\n+            if (field == null) {\n+                // year is abnormal, month or day might be missing, try again\n+                Integer year = null;\n+                DurationField months = DurationFieldType.months().getField(iChrono);\n+                DurationField days = DurationFieldType.days().getField(iChrono);\n+                for (SavedField sf : savedFields) {\n+                    if (sf.iField.getType() == DateTimeFieldType.year()) {\n+                        year = sf.iValue;\n+                    }\n+                    if (year != null && compareReverse(sf.iField.getDurationField(), days) <= 0) {\n+                        // year with month or day, reset field values parsed so far\n+                        resetFields = true;\n+                        break;\n+                    } else if (year == null && compareReverse(sf.iField.getDurationField(), months) >= 0) {\n+                        // month without year, add current year as a saved field\n+                        saveField(DateTimeFieldType.year(), iDefaultYear);\n+                        savedFields[count++] = new SavedField(DateTimeFieldType.year(), iDefaultYear);\n+                        break;\n+                    }\n+                }\n+                if (resetFields || year == null) {\n+                    saveField(DateTimeFieldType.year(), iDefaultYear);\n+                    return computeMillis(true, text);\n+                }\n+            }\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}