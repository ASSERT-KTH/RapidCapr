{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean monthChanged = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex) {\n                // calculate new value for the field\n                int oldValue = values[i];\n                int newValue = oldValue + valueToAdd;\n                // check if month will change\n                int monthOfYear = iChronology.monthOfYear().get(instant);\n                if (newValue > oldValue) {\n                    int max = iChronology.getMaximumValue(partial.getFieldType(i));\n                    if (newValue > max) {\n                        newValue = newValue % max;\n                        // if the month rolls over, flag it\n                        if (newValue < oldValue) {\n                            monthChanged = true;\n                        }\n                    }\n                } else {\n                    int min = iChronology.getMinimumValue(partial.getFieldType(i));\n                    if (newValue < min) {\n                        newValue = newValue % min;\n                        // if the month rolls over, flag it\n                        if (newValue > oldValue) {\n                            monthChanged = true;\n                        }\n                    }\n                }\n                // set the field to the new value\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n                // fix leap year if month and dayOfMonth is the date of February 29th\n                if (monthOfYear == 2 && iChronology.dayOfMonth().get(instant) == 29 && !iChronology.isLeapYear(iChronology.year().get(instant))) {\n                    instant = iChronology.dayOfMonth().set(instant, 28);\n                }\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        // if month rolled over and dayOfMonth is not set, set it to minimum value\n        if (monthChanged && iChronology.dayOfMonth().get(instant) == iChronology.dayOfMonth().getMinimumValue(instant)) {\n            instant = iChronology.dayOfMonth().set(instant, 1);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..5012a3fb 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,61 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean monthChanged = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex) {\n+                // calculate new value for the field\n+                int oldValue = values[i];\n+                int newValue = oldValue + valueToAdd;\n+                // check if month will change\n+                int monthOfYear = iChronology.monthOfYear().get(instant);\n+                if (newValue > oldValue) {\n+                    int max = iChronology.getMaximumValue(partial.getFieldType(i));\n+                    if (newValue > max) {\n+                        newValue = newValue % max;\n+                        // if the month rolls over, flag it\n+                        if (newValue < oldValue) {\n+                            monthChanged = true;\n+                        }\n+                    }\n+                } else {\n+                    int min = iChronology.getMinimumValue(partial.getFieldType(i));\n+                    if (newValue < min) {\n+                        newValue = newValue % min;\n+                        // if the month rolls over, flag it\n+                        if (newValue > oldValue) {\n+                            monthChanged = true;\n+                        }\n+                    }\n+                }\n+                // set the field to the new value\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n+                // fix leap year if month and dayOfMonth is the date of February 29th\n+                if (monthOfYear == 2 && iChronology.dayOfMonth().get(instant) == 29 && !iChronology.isLeapYear(iChronology.year().get(instant))) {\n+                    instant = iChronology.dayOfMonth().set(instant, 28);\n+                }\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        // if month rolled over and dayOfMonth is not set, set it to minimum value\n+        if (monthChanged && iChronology.dayOfMonth().get(instant) == iChronology.dayOfMonth().getMinimumValue(instant)) {\n+            instant = iChronology.dayOfMonth().set(instant, 1);\n+        }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}