{
    "patch": "        } catch (IllegalFieldValueException e) {\n            if (e.getIllegalFieldValueFailureType() != IllegalFieldValueException.FailureType.TRANSIENT) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n            // restore state to try next highest value\n            millis = e.getIllegalInstant(); // updated this value\n            if (count == 0) {\n                throw e;\n            }\n            // remove failed field and try again\n            count--;\n            for (int i = e.getIllegalFieldIndex(); i < count; i++) {\n                savedFields[i] = savedFields[i + 1];\n            }\n            savedFields[count] = null;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..4353f1f2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,25 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            if (e.getIllegalFieldValueFailureType() != IllegalFieldValueException.FailureType.TRANSIENT) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n+            // restore state to try next highest value\n+            millis = e.getIllegalInstant(); // updated this value\n+            if (count == 0) {\n+                throw e;\n+            }\n+            // remove failed field and try again\n+            count--;\n+            for (int i = e.getIllegalFieldIndex(); i < count; i++) {\n+                savedFields[i] = savedFields[i + 1];\n+            }\n+            savedFields[count] = null;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}