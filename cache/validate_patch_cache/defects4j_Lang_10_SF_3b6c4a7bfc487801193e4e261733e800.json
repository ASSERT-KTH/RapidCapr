{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    if (regex == null) {\n        regex = new StringBuilder(value.length() * 2);\n    } else {\n        regex.setLength(0);\n    }\n    regex.append('^'); // add start of line anchor\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n        if(Character.isWhitespace(c)) {\n            if(!wasWhite) {\n                wasWhite= true;\n                regex.append(\"\\\\s*\");\n            }\n            continue;\n        } else {\n            wasWhite= false;\n        }\n        switch(c) {\n            case '\\'':\n                if(unquote) {\n                    ++i;\n                    if(i == value.length()) {\n                        return regex;\n                    }\n                    c= value.charAt(i);\n                }\n                regex.append(c); \n                break;\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '*':\n            case '+':\n            case '.':\n            case '^':\n            case '$':\n                regex.append('\\\\');\n                regex.append(c);\n                break;\n            default:\n                regex.append(c);\n                break;\n        }\n    }\n    regex.append('$'); // add end of line anchor\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..d2fc8d93 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,26 +300,35 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    if (regex == null) {\n+        regex = new StringBuilder(value.length() * 2);\n+    } else {\n+        regex.setLength(0);\n+    }\n+    regex.append('^'); // add start of line anchor\n+    boolean wasWhite= false;\n+    for(int i= 0; i<value.length(); ++i) {\n+        char c= value.charAt(i);\n+        if(Character.isWhitespace(c)) {\n+            if(!wasWhite) {\n+                wasWhite= true;\n+                regex.append(\"\\\\s*\");\n             }\n+            continue;\n+        } else {\n             wasWhite= false;\n-            switch(c) {\n+        }\n+        switch(c) {\n             case '\\'':\n                 if(unquote) {\n-                    if(++i==value.length()) {\n+                    ++i;\n+                    if(i == value.length()) {\n                         return regex;\n                     }\n                     c= value.charAt(i);\n                 }\n+                regex.append(c); \n                 break;\n             case '?':\n             case '[':\n@@ -332,15 +341,20 @@ public class FastDateParser implements DateParser, Serializable {\n             case '|':\n             case '*':\n             case '+':\n+            case '.':\n             case '^':\n             case '$':\n-            case '.':\n                 regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                regex.append(c);\n+                break;\n+            default:\n+                regex.append(c);\n+                break;\n         }\n-        return regex;\n     }\n+    regex.append('$'); // add end of line anchor\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}