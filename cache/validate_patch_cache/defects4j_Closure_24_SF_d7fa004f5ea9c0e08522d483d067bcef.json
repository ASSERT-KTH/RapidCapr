{
    "patch": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        int type = n.getType();\n        Node parent = n.getParent();\n        if (parent.isVar() || parent.isFunction()) {\n          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n            String name = n.getString();\n            Var aliasVar = scope.getVar(name);\n            aliases.put(name, aliasVar);\n\n            if (aliasVar.getInitialValue() != null) {\n              // If there is an initial value, it is an alias.\n              String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n              transformation.addAlias(name, qualifiedName);\n            }\n          } else {\n            // TODO(robbyw): Support using locals for private variables.\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n          }\n        }\n      }\n\n      if (googScopeFunction != null) {\n        // Make sure the goog.scope function takes only a single\n        // parameter and that parameter is a function.\n        Node param = googScopeFunction.getParam();\n        if (param == null || param.getNext() != null) {\n          report(t, googScope, GOOG_SCOPE_MULTI_PARAM);\n        } else if (!param.getFirstChild().isFunction()) {\n          report(t, param, GOOG_SCOPE_MALFORMED_PARAM);\n        } else {\n          Node function = param.getFirstChild();\n          if (function.getChildCount() != 0 && function.getFirstChild().getString().length() != 0) {\n            report(t, function, GOOG_SCOPE_NON_EMPTY_FUNCTION);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..34b02031 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -275,23 +275,37 @@ class ScopedAliases implements HotSwapCompilerPass {\n         Node n = v.getNode();\n         int type = n.getType();\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n+        if (parent.isVar() || parent.isFunction()) {\n           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+            String name = n.getString();\n+            Var aliasVar = scope.getVar(name);\n+            aliases.put(name, aliasVar);\n+\n+            if (aliasVar.getInitialValue() != null) {\n+              // If there is an initial value, it is an alias.\n+              String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+              transformation.addAlias(name, qualifiedName);\n+            }\n+          } else {\n+            // TODO(robbyw): Support using locals for private variables.\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+          }\n         }\n+      }\n+\n+      if (googScopeFunction != null) {\n+        // Make sure the goog.scope function takes only a single\n+        // parameter and that parameter is a function.\n+        Node param = googScopeFunction.getParam();\n+        if (param == null || param.getNext() != null) {\n+          report(t, googScope, GOOG_SCOPE_MULTI_PARAM);\n+        } else if (!param.getFirstChild().isFunction()) {\n+          report(t, param, GOOG_SCOPE_MALFORMED_PARAM);\n+        } else {\n+          Node function = param.getFirstChild();\n+          if (function.getChildCount() != 0 && function.getFirstChild().getString().length() != 0) {\n+            report(t, function, GOOG_SCOPE_NON_EMPTY_FUNCTION);\n+          }\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}