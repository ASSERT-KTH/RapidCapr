{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n        return;\n    }\n\n    // Handle function inputs\n    if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {\n        handleFunctionInputs(parent);\n        return;\n    }\n\n    attachLiteralTypes(n);\n\n    switch (n.getType()) {\n        // Handle declarations of named and anonymous functions\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionExpression(n)) {\n                if (!NodeUtil.isStatementOrExpressionOfStatement(parent)) {\n                    // If function is not in a statement or not an expression of a statement\n                    // then it must be a variable declaration\n                    defineVar(n, parent);\n                } else {\n                    // Otherwise, it is a function declaration\n                    defineDeclaredFunction(n, parent);\n                }\n            } else if (parent.getType() == Token.EXPR_RESULT && !parent.getBooleanProp(Node.EXPR_VOID)) {\n                // Bind the function expression to a variable\n                defineVar(n, parent);\n            }\n            break;\n\n        // Handle variable declarations and assignments\n        case Token.NAME:\n            if (parent.getType() == Token.ASSIGN || parent.getType() == Token.VAR || parent.getType() == Token.LET || parent.getType() == Token.CONST) {\n                // Variable assignment or declaration\n                defineVar(n, parent);\n            }\n            break;\n\n        // Handle catch clauses\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..283a3e50 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,52 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n+        return;\n+    }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+    // Handle function inputs\n+    if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {\n         handleFunctionInputs(parent);\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+    attachLiteralTypes(n);\n+\n+    switch (n.getType()) {\n+        // Handle declarations of named and anonymous functions\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            if (NodeUtil.isFunctionExpression(n)) {\n+                if (!NodeUtil.isStatementOrExpressionOfStatement(parent)) {\n+                    // If function is not in a statement or not an expression of a statement\n+                    // then it must be a variable declaration\n+                    defineVar(n, parent);\n+                } else {\n+                    // Otherwise, it is a function declaration\n+                    defineDeclaredFunction(n, parent);\n+                }\n+            } else if (parent.getType() == Token.EXPR_RESULT && !parent.getBooleanProp(Node.EXPR_VOID)) {\n+                // Bind the function expression to a variable\n+                defineVar(n, parent);\n+            }\n+            break;\n+\n+        // Handle variable declarations and assignments\n+        case Token.NAME:\n+            if (parent.getType() == Token.ASSIGN || parent.getType() == Token.VAR || parent.getType() == Token.LET || parent.getType() == Token.CONST) {\n+                // Variable assignment or declaration\n+                defineVar(n, parent);\n+            }\n+            break;\n+\n+        // Handle catch clauses\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineCatch(n, parent);\n+            break;\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}