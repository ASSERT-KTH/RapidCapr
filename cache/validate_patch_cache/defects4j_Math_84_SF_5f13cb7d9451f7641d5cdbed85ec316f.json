{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    final int n = simplex.length;\n    final double[] xSmallest = simplex[0].getPoint();\n\n    // compute the reflection point\n    final double[] xR = new double[n];\n    for (int i = 0; i < n; i++) {\n        xR[i] = (1 + rho) * xSmallest[i] - rho * simplex[n - 1].getPoint()[i];\n    }\n    final RealPointValuePair reflected = new RealPointValuePair(\n            xR, computeObjectiveValue(xR), false);\n\n    if (comparator.compare(reflected, simplex[n - 1]) < 0) {\n        // Compute the expansion point\n        final double[] xE = new double[n];\n        for (int i = 0; i < n; i++) {\n            xE[i] = (1 + rho * chi) * xSmallest[i] - rho * chi * simplex[n - 1].getPoint()[i];\n        }\n        final RealPointValuePair expanded = new RealPointValuePair(\n                xE, computeObjectiveValue(xE), false);\n\n        if (comparator.compare(expanded, reflected) < 0) {\n            simplex[n - 1] = expanded;\n        } else {\n            simplex[n - 1] = reflected;\n        }\n    } else {\n        if (comparator.compare(reflected, simplex[n - 1]) >= 0) {\n            // perform an outside contraction\n            final double[] xO = new double[n];\n            for (int i = 0; i < n; i++) {\n                xO[i] = (1 + psi * rho) * xSmallest[i] - psi * rho * simplex[n - 1].getPoint()[i];\n            }\n            final RealPointValuePair contractedOut = new RealPointValuePair(\n                    xO, computeObjectiveValue(xO), false);\n\n            if (comparator.compare(contractedOut, reflected) <= 0) {\n                simplex[n - 1] = contractedOut;\n            } else {\n                shrink(comparator);\n            }\n        } else {\n            // perform an inside contraction\n            final double[] xI = new double[n];\n            for (int i = 0; i < n; i++) {\n                xI[i] = (1 - psi) * xSmallest[i] + psi * simplex[n - 1].getPoint()[i];\n            }\n            final RealPointValuePair contractedIn = new RealPointValuePair(\n                    xI, computeObjectiveValue(xI), false);\n\n            if (comparator.compare(contractedIn, simplex[n - 1]) < 0) {\n                simplex[n - 1] = contractedIn;\n            } else {\n                shrink(comparator);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..78d113863 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,65 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+    final int n = simplex.length;\n+    final double[] xSmallest = simplex[0].getPoint();\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+    // compute the reflection point\n+    final double[] xR = new double[n];\n+    for (int i = 0; i < n; i++) {\n+        xR[i] = (1 + rho) * xSmallest[i] - rho * simplex[n - 1].getPoint()[i];\n+    }\n+    final RealPointValuePair reflected = new RealPointValuePair(\n+            xR, computeObjectiveValue(xR), false);\n+\n+    if (comparator.compare(reflected, simplex[n - 1]) < 0) {\n+        // Compute the expansion point\n+        final double[] xE = new double[n];\n+        for (int i = 0; i < n; i++) {\n+            xE[i] = (1 + rho * chi) * xSmallest[i] - rho * chi * simplex[n - 1].getPoint()[i];\n+        }\n+        final RealPointValuePair expanded = new RealPointValuePair(\n+                xE, computeObjectiveValue(xE), false);\n \n+        if (comparator.compare(expanded, reflected) < 0) {\n+            simplex[n - 1] = expanded;\n+        } else {\n+            simplex[n - 1] = reflected;\n+        }\n+    } else {\n+        if (comparator.compare(reflected, simplex[n - 1]) >= 0) {\n+            // perform an outside contraction\n+            final double[] xO = new double[n];\n+            for (int i = 0; i < n; i++) {\n+                xO[i] = (1 + psi * rho) * xSmallest[i] - psi * rho * simplex[n - 1].getPoint()[i];\n             }\n+            final RealPointValuePair contractedOut = new RealPointValuePair(\n+                    xO, computeObjectiveValue(xO), false);\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+            if (comparator.compare(contractedOut, reflected) <= 0) {\n+                simplex[n - 1] = contractedOut;\n+            } else {\n+                shrink(comparator);\n+            }\n+        } else {\n+            // perform an inside contraction\n+            final double[] xI = new double[n];\n+            for (int i = 0; i < n; i++) {\n+                xI[i] = (1 - psi) * xSmallest[i] + psi * simplex[n - 1].getPoint()[i];\n             }\n+            final RealPointValuePair contractedIn = new RealPointValuePair(\n+                    xI, computeObjectiveValue(xI), false);\n \n+            if (comparator.compare(contractedIn, simplex[n - 1]) < 0) {\n+                simplex[n - 1] = contractedIn;\n+            } else {\n+                shrink(comparator);\n+            }\n         }\n-\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}