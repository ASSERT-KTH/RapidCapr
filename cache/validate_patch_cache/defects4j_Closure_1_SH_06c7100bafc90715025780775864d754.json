{
    "patch": "    ReferenceMap refMap = Scope.getReferenceVars(fnScope).getMap();\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        if (lastArg.isDefaultValue()) {\n          lastArg = lastArg.getFirstChild();\n        }\n        if (lastArg.isName()) {\n          Var var = fnScope.getVar(lastArg.getString());\n          if (var != null\n              // Must be undefined, null, or a stand-in value.\n              // For optional arguments, default values offer both.\n              && var.isParam()\n              && (var.getParentNode().hasChildren()\n                  || refMap.get(var) == null\n                  || NodeUtil.mayHaveSideEffects(var.getParentNode().getLastChild(), compiler))) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n          } else {\n            break;\n          }\n        } else {\n          break;\n        }\n        lastArg = argList.getLastChild();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9bc05b23 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,47 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    ReferenceMap refMap = Scope.getReferenceVars(fnScope).getMap();\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        if (lastArg.isDefaultValue()) {\n+          lastArg = lastArg.getFirstChild();\n+        }\n+        if (lastArg.isName()) {\n+          Var var = fnScope.getVar(lastArg.getString());\n+          if (var != null\n+              // Must be undefined, null, or a stand-in value.\n+              // For optional arguments, default values offer both.\n+              && var.isParam()\n+              && (var.getParentNode().hasChildren()\n+                  || refMap.get(var) == null\n+                  || NodeUtil.mayHaveSideEffects(var.getParentNode().getLastChild(), compiler))) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+          } else {\n+            break;\n+          }\n+        } else {\n+          break;\n+        }\n+        lastArg = argList.getLastChild();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}