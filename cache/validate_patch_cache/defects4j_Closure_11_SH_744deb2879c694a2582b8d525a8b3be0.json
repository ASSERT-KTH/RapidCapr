{
    "patch": "if (nameNode.isGetProp() && nameNode.getParent().isAssign() && nameNode.getParent().getParent().isExprResult()) {\n  String nodeName = nameNode.getOriginalQualifiedName();\n  JSType jsType = nameNode.getJSType();\n  if (jsType.isConstructor()) {\n    warnings.add(JSError.make(n, UNEXPECTED_TOKEN_ERROR, ASSIGN_RESERVED_ERROR_MESSAGE));\n  } else if (jsType.isFunctionType()) {\n    warnings.add(JSError.make(n, REASSIGN_FUNCTION_TYPE, nodeName));\n  } else if (jsType.isUnionType()) {\n    JSType simpleType = jsType.toMaybeUnionType().getAlternates().stream()\n        .filter(t -> t.isSimpleType() || t.isEnumType() || t.isRecordType() || t.isTypeVariable())\n        .findAny().orElse(null);\n    if (simpleType != null) {\n      if (!simpleType.isMutable()) {\n        warnings.add(JSError.make(n, REASSIGN_CONSTANT_VALUE, nodeName));\n      } else if (simpleType.isRecordType()) {\n        maybeAddPropertyWarningForRecordType(warnings, nodeName, simpleType, n);\n      }\n    }\n  } else if (jsType.isSimpleType() || jsType.isEnumType() || jsType.isRecordType() || jsType.isTypeVariable()) {\n    if (!jsType.isMutable()) {\n      warnings.add(JSError.make(n, REASSIGN_CONSTANT_VALUE, nodeName));\n    } else if (jsType.isRecordType()) {\n      maybeAddPropertyWarningForRecordType(warnings, nodeName, jsType, n);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}