{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isInfinite(x)) {\n        return (x < 0) ? 0.0 : 1.0;\n    } else if (Double.isNaN(x)) {\n      throw new MathException(\"Invalid input value: x = NaN\");\n    }\n\n    final double dev = x - mean;\n    final double nSigma = dev / standardDeviation;\n    final double threshold = 5.0;\n\n    if (nSigma > threshold) {\n        return 1.0 - Erf.erfc(nSigma / FastMath.sqrt(2.0)) / 2.0;\n    } else if (nSigma < -threshold) {\n        return Erf.erfc(-nSigma / FastMath.sqrt(2.0)) / 2.0;\n    } else {\n        try {\n            return 0.5 * (1.0 + Erf.erf(nSigma / FastMath.sqrt(2.0)));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) { \n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..801279fc9 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -121,13 +121,26 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @return CDF evaluated at {@code x}.\n      * @throws MathException if the algorithm fails to converge\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-        final double dev = x - mean;\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isInfinite(x)) {\n+        return (x < 0) ? 0.0 : 1.0;\n+    } else if (Double.isNaN(x)) {\n+      throw new MathException(\"Invalid input value: x = NaN\");\n+    }\n+\n+    final double dev = x - mean;\n+    final double nSigma = dev / standardDeviation;\n+    final double threshold = 5.0;\n+\n+    if (nSigma > threshold) {\n+        return 1.0 - Erf.erfc(nSigma / FastMath.sqrt(2.0)) / 2.0;\n+    } else if (nSigma < -threshold) {\n+        return Erf.erfc(-nSigma / FastMath.sqrt(2.0)) / 2.0;\n+    } else {\n         try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n+            return 0.5 * (1.0 + Erf.erf(nSigma / FastMath.sqrt(2.0)));\n         } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n+            if (x < (mean - 20 * standardDeviation)) { \n                 return 0;\n             } else if (x > (mean + 20 * standardDeviation)) {\n                 return 1;\n@@ -136,6 +149,7 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n             }\n         }\n     }\n+}\n \n     /**\n      * Return the absolute accuracy setting of the solver used to estimate",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}