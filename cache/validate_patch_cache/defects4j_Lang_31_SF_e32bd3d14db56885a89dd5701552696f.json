{
    "patch": "import java.util.Arrays;\nimport java.util.stream.IntStream;\n\npublic class StringUtils {\n\n    public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n            return false;\n        }\n        final int length = sequence.length();\n        final int searchLength = searchCharacters.length;\n        if (searchLength == 1) {\n            final char searchChar = searchCharacters[0];\n            for (int i = 0; i < length; i++) {\n                if (sequence.charAt(i) == searchChar) {\n                    return true;\n                }\n            }\n        } else {\n            final int[] searchChars = IntStream.range(0, searchLength)\n                    .map(i -> Character.codePointAt(searchCharacters, i))\n                    .toArray();\n            final int[] strChars = IntStream.range(0, length)\n                    .map(i -> Character.codePointAt(sequence, i))\n                    .toArray();\n            outer:\n            for (int i = 0; i < searchLength; i++) {\n              final int searchChar = searchChars[i];\n              for (int j = 0; j < strChars.length; j++) {\n                final int strChar = strChars[j];\n                if (strChar == searchChar || Character.charCount(strChar) > 1 && searchChar == strChar >> 16 && searchChars[i+1] == strChar % (1 << 16)) {\n                  return true;\n                }\n              }\n            }\n        }\n      return false;\n    }\n\n    public static boolean isEmpty(CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n}\n\nclass ArrayUtils {\n    public static boolean isEmpty(Object[] array) {\n        return array == null || array.length == 0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..a3d477a9 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,55 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.Arrays;\n+import java.util.stream.IntStream;\n+\n+public class StringUtils {\n+\n+    public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n+        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n+            return false;\n+        }\n+        final int length = sequence.length();\n+        final int searchLength = searchCharacters.length;\n+        if (searchLength == 1) {\n+            final char searchChar = searchCharacters[0];\n+            for (int i = 0; i < length; i++) {\n+                if (sequence.charAt(i) == searchChar) {\n+                    return true;\n+                }\n+            }\n+        } else {\n+            final int[] searchChars = IntStream.range(0, searchLength)\n+                    .map(i -> Character.codePointAt(searchCharacters, i))\n+                    .toArray();\n+            final int[] strChars = IntStream.range(0, length)\n+                    .map(i -> Character.codePointAt(sequence, i))\n+                    .toArray();\n+            outer:\n+            for (int i = 0; i < searchLength; i++) {\n+              final int searchChar = searchChars[i];\n+              for (int j = 0; j < strChars.length; j++) {\n+                final int strChar = strChars[j];\n+                if (strChar == searchChar || Character.charCount(strChar) > 1 && searchChar == strChar >> 16 && searchChars[i+1] == strChar % (1 << 16)) {\n+                  return true;\n+                }\n+              }\n+            }\n+        }\n+      return false;\n+    }\n+\n+    public static boolean isEmpty(CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+}\n+\n+class ArrayUtils {\n+    public static boolean isEmpty(Object[] array) {\n+        return array == null || array.length == 0;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}