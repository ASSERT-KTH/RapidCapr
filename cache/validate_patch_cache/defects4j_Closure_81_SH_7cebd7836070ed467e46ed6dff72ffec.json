{
    "patch": "name = new Name();\nif (functionNode.getFunctionType() == FunctionNode.FUNCTION_EXPRESSION) {\n  name.setIdentifier(ParseTreeToStringVisitor.FUNCTION_EXPRESSION_NAME);\n} else {\n  name.setIdentifier(\"\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..0e303429 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,12 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+name = new Name();\n+if (functionNode.getFunctionType() == FunctionNode.FUNCTION_EXPRESSION) {\n+  name.setIdentifier(ParseTreeToStringVisitor.FUNCTION_EXPRESSION_NAME);\n+} else {\n+  name.setIdentifier(\"\");\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}