{
    "patch": "    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n      Preconditions.checkArgument(inferred || type != null);\n\n      // Only allow declarations of NAMEs and qualified names.\n      boolean shouldDeclareOnGlobalThis = false;\n      if (n.getType() == Token.NAME) {\n        Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n                parent.getType() == Token.VAR ||\n                parent.getType() == Token.LET ||\n                parent.getType() == Token.CONST ||\n                parent.getType() == Token.CATCH);\n        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n                parent.getType() == Token.FUNCTION ||\n                parent.getType() == Token.LET ||\n                parent.getType() == Token.CONST);\n      } else {\n        Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n                (parent.getType() == Token.ASSIGN ||\n                    parent.getType() == Token.EXPR_RESULT));\n      }\n      String variableName = n.getQualifiedName();\n      Preconditions.checkArgument(!variableName.isEmpty());\n\n      // If n is a property, then we should really declare it in the\n      // scope where the root object appears. This helps out people\n      // who declare \"global\" names in an anonymous namespace.\n      Scope scopeToDeclareIn = scope;\n\n      // declared in closest scope?\n      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar = scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);\n      } else {\n        if (!inferred) {\n          // Store the type in a deferred map for late resolution of types.\n          setDeferredType(n, type);\n        }\n        CompilerInput input = compiler.getInput(sourceName);\n        boolean declareSuccess = scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (!declareSuccess && n.getFirstChild().isFunction()) {\n          // A function was declared with the same name as a variable.\n          compiler.report(JSError.make(\n              n, VarCheck.VAR_MULTIPLY_DECLARED_ERROR, variableName));\n          return;\n        }\n        InputId inputId = input.getInputId();\n        // Store the type and inferred-ness in the type registry if it's not an extern.\n        if (!input.isExtern()) {\n          typeRegistry.setDeclaredType(\n              variableName, type, inputId, sourceName, null);\n          if (inferred) {\n            typeRegistry.setInferredType(\n                variableName, type, inputId, sourceName);\n          }\n        }\n\n        if (shouldDeclareOnGlobalThis) {\n          ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n          boolean isExtern = input.isExtern();\n          if (inferred) {\n            globalThis.defineInferredProperty(variableName,\n                type == null ?\n                    getNativeType(JSTypeNative.NO_TYPE) :\n                    type,\n                isExtern);\n          } else {\n            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n          }\n        }\n\n        // If we're in the global scope, also declare var.prototype\n        // in the scope chain.\n        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n          FunctionType fnType = (FunctionType) type;\n          if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                    superClassCtor.getInstanceType().equals(\n                        getNativeType(OBJECT_TYPE)));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..3917b3d8 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -872,22 +872,25 @@ final class TypedScopeCreator implements ScopeCreator {\n     void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n       Preconditions.checkArgument(inferred || type != null);\n \n-      // Only allow declarations of NAMEs and qualfied names.\n+      // Only allow declarations of NAMEs and qualified names.\n       boolean shouldDeclareOnGlobalThis = false;\n       if (n.getType() == Token.NAME) {\n         Preconditions.checkArgument(\n             parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n+                parent.getType() == Token.VAR ||\n+                parent.getType() == Token.LET ||\n+                parent.getType() == Token.CONST ||\n+                parent.getType() == Token.CATCH);\n         shouldDeclareOnGlobalThis = scope.isGlobal() &&\n             (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n+                parent.getType() == Token.FUNCTION ||\n+                parent.getType() == Token.LET ||\n+                parent.getType() == Token.CONST);\n       } else {\n         Preconditions.checkArgument(\n             n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+                (parent.getType() == Token.ASSIGN ||\n+                    parent.getType() == Token.EXPR_RESULT));\n       }\n       String variableName = n.getQualifiedName();\n       Preconditions.checkArgument(!variableName.isEmpty());\n@@ -897,9 +900,6 @@ final class TypedScopeCreator implements ScopeCreator {\n       // who declare \"global\" names in an anonymous namespace.\n       Scope scopeToDeclareIn = scope;\n \n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n       // declared in closest scope?\n       if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar = scopeToDeclareIn.getVar(variableName);\n@@ -907,10 +907,27 @@ final class TypedScopeCreator implements ScopeCreator {\n             sourceName, n, parent, oldVar, variableName, type);\n       } else {\n         if (!inferred) {\n+          // Store the type in a deferred map for late resolution of types.\n           setDeferredType(n, type);\n         }\n         CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+        boolean declareSuccess = scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+        if (!declareSuccess && n.getFirstChild().isFunction()) {\n+          // A function was declared with the same name as a variable.\n+          compiler.report(JSError.make(\n+              n, VarCheck.VAR_MULTIPLY_DECLARED_ERROR, variableName));\n+          return;\n+        }\n+        InputId inputId = input.getInputId();\n+        // Store the type and inferred-ness in the type registry if it's not an extern.\n+        if (!input.isExtern()) {\n+          typeRegistry.setDeclaredType(\n+              variableName, type, inputId, sourceName, null);\n+          if (inferred) {\n+            typeRegistry.setInferredType(\n+                variableName, type, inputId, sourceName);\n+          }\n+        }\n \n         if (shouldDeclareOnGlobalThis) {\n           ObjectType globalThis =\n@@ -937,8 +954,8 @@ final class TypedScopeCreator implements ScopeCreator {\n                 fnType.getPrototype(), compiler.getInput(sourceName),\n                 /* declared iff there's an explicit supertype */\n                 superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n+                    superClassCtor.getInstanceType().equals(\n+                        getNativeType(OBJECT_TYPE)));\n           }\n         }\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}