{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n\n    Separator lastSeparator = null;\n    int lastIndex = -1;\n\n    for (int i = size - 1; i >= 0; i--) {\n        if (elementPairs.get(i) instanceof Separator) {\n            lastSeparator = (Separator) elementPairs.get(i);\n            lastIndex = i;\n            break;\n        }\n    }\n\n    if (lastSeparator == null) {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } \n        if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } \n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n\n    List<Object> beforeSeparatorList = elementPairs.subList(0, lastIndex);\n    List<Object> afterSeparatorList = elementPairs.subList(lastIndex + 1, size);\n\n    PeriodFormatter beforeFormatter = toFormatter(beforeSeparatorList, notPrinter, notParser);\n    PeriodFormatter afterFormatter = toFormatter(afterSeparatorList, notPrinter, notParser);\n    Separator sep = lastSeparator.finish(beforeFormatter.getPrinter(), afterFormatter.getParser());\n\n    if (notPrinter && notParser) {\n        return new PeriodFormatter(null, null);\n    }\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) sep);\n    }\n    if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) sep, null);\n    }\n    return new PeriodFormatter(sep, sep);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..0c333a84 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,56 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+\n+    Separator lastSeparator = null;\n+    int lastIndex = -1;\n+\n+    for (int i = size - 1; i >= 0; i--) {\n+        if (elementPairs.get(i) instanceof Separator) {\n+            lastSeparator = (Separator) elementPairs.get(i);\n+            lastIndex = i;\n+            break;\n         }\n+    }\n+\n+    if (lastSeparator == null) {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n+        } \n+        if (notParser) {\n             return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n+        } \n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+\n+    List<Object> beforeSeparatorList = elementPairs.subList(0, lastIndex);\n+    List<Object> afterSeparatorList = elementPairs.subList(lastIndex + 1, size);\n+\n+    PeriodFormatter beforeFormatter = toFormatter(beforeSeparatorList, notPrinter, notParser);\n+    PeriodFormatter afterFormatter = toFormatter(afterSeparatorList, notPrinter, notParser);\n+    Separator sep = lastSeparator.finish(beforeFormatter.getPrinter(), afterFormatter.getParser());\n+\n+    if (notPrinter && notParser) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) sep);\n     }\n+    if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) sep, null);\n+    }\n+    return new PeriodFormatter(sep, sep);\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}