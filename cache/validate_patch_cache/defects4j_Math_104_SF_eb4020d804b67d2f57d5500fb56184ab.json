{
    "patch": "import org.apache.commons.math3.util.FastMath;\n\npublic static double regularizedGamma(double a, double x) {\n    final double epsilon = 10e-15;\n    final double big = Double.MAX_VALUE * epsilon;\n    final double bigInv = 1.0 / big;\n    final double p = a;\n    final double g = p - 0.5;\n    final double absXg = FastMath.abs(x - g);\n    final double sg = FastMath.sqrt(p * 0.25);\n    final double z = ((2.0 * absXg - p + 1.0) * sg);\n    final double zInv = 1.0 / z;\n    if (absXg > sg) {\n        double r, c;\n        double a1 = g * FastMath.log(absXg);\n        double a2 = absXg - g * FastMath.log(absXg / (p - 1.0));\n        if (x < g) {\n            a2 += FastMath.log(FastMath.exp(-absXg));\n            r = FastMath.exp(a1) - FastMath.exp(a2);\n        } else {\n            c = 0.5 + bigInv * FastMath.exp(-absXg);\n            r = c * FastMath.exp(a2) - FastMath.exp(a1);\n        }\n        return Math.min(1.0, r);\n    }\n    double sum = 1.0;\n    double term = 1.0 / p;\n    double incr = term;\n    while (FastMath.abs(incr) > epsilon * FastMath.abs(sum)) {\n        ++p;\n        term *= x / p;\n        incr = term / (p - g);\n        sum += incr;\n    }\n    return sum * FastMath.exp(-x + g * FastMath.log(x) - logGamma(g));\n}\n\nprivate static double logGamma(final double x) {\n    return org.apache.commons.math3.special.Gamma.logGamma(x);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..d429e420c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,46 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.util.FastMath;\n+\n+public static double regularizedGamma(double a, double x) {\n+    final double epsilon = 10e-15;\n+    final double big = Double.MAX_VALUE * epsilon;\n+    final double bigInv = 1.0 / big;\n+    final double p = a;\n+    final double g = p - 0.5;\n+    final double absXg = FastMath.abs(x - g);\n+    final double sg = FastMath.sqrt(p * 0.25);\n+    final double z = ((2.0 * absXg - p + 1.0) * sg);\n+    final double zInv = 1.0 / z;\n+    if (absXg > sg) {\n+        double r, c;\n+        double a1 = g * FastMath.log(absXg);\n+        double a2 = absXg - g * FastMath.log(absXg / (p - 1.0));\n+        if (x < g) {\n+            a2 += FastMath.log(FastMath.exp(-absXg));\n+            r = FastMath.exp(a1) - FastMath.exp(a2);\n+        } else {\n+            c = 0.5 + bigInv * FastMath.exp(-absXg);\n+            r = c * FastMath.exp(a2) - FastMath.exp(a1);\n+        }\n+        return Math.min(1.0, r);\n+    }\n+    double sum = 1.0;\n+    double term = 1.0 / p;\n+    double incr = term;\n+    while (FastMath.abs(incr) > epsilon * FastMath.abs(sum)) {\n+        ++p;\n+        term *= x / p;\n+        incr = term / (p - g);\n+        sum += incr;\n+    }\n+    return sum * FastMath.exp(-x + g * FastMath.log(x) - logGamma(g));\n+}\n+\n+private static double logGamma(final double x) {\n+    return org.apache.commons.math3.special.Gamma.logGamma(x);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}