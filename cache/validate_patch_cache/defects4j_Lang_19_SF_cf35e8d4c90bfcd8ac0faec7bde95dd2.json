{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n        if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n            start++;\n            isHex = true;\n        }\n\n        int end = start;\n        while (end < seqEnd && ((input.charAt(end) >= '0' && input.charAt(end) <= '9') || (isHex && ((input.charAt(end) >= 'a' && input.charAt(end) <= 'f') || (input.charAt(end) >= 'A' && input.charAt(end) <= 'F'))))) {\n            end++;\n        }\n\n        // Check if an incomplete or ill-formed entity was found\n        if ((end == start) || (end == seqEnd && input.charAt(end - 1) != ';') || (input.charAt(end - 1) == '\"' && input.charAt(start - 1) != '&')) {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String valueString = input.subSequence(start, end).toString();\n            if (isHex) {\n                entityValue = Integer.parseInt(valueString, 16);\n            } else {\n                entityValue = Integer.parseInt(valueString, 10);\n            }\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        if (entityValue > 0xFFFF) {\n            if (Character.isDefined(entityValue)) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n                return end - index + 1 + (isHex ? 1 : 0);\n            } else {\n                return 0;\n            }\n        } else if (Character.isSurrogate((char) entityValue)) {\n            return 0;\n        } else {\n            out.write(entityValue);\n            return end - index + 1 + (isHex ? 1 : 0);\n        }\n    }\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..1074c20c 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,54 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if (index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+        int start = index + 2;\n+        boolean isHex = false;\n+        if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n+            start++;\n+            isHex = true;\n+        }\n \n-                // Check there's more than just an x after the &#\n-            }\n+        int end = start;\n+        while (end < seqEnd && ((input.charAt(end) >= '0' && input.charAt(end) <= '9') || (isHex && ((input.charAt(end) >= 'a' && input.charAt(end) <= 'f') || (input.charAt(end) >= 'A' && input.charAt(end) <= 'F'))))) {\n+            end++;\n+        }\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n+        // Check if an incomplete or ill-formed entity was found\n+        if ((end == start) || (end == seqEnd && input.charAt(end - 1) != ';') || (input.charAt(end - 1) == '\"' && input.charAt(start - 1) != '&')) {\n+            return 0;\n+        }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n+        int entityValue;\n+        try {\n+            String valueString = input.subSequence(start, end).toString();\n+            if (isHex) {\n+                entityValue = Integer.parseInt(valueString, 16);\n+            } else {\n+                entityValue = Integer.parseInt(valueString, 10);\n             }\n+        } catch (NumberFormatException nfe) {\n+            return 0;\n+        }\n \n-            if(entityValue > 0xFFFF) {\n+        if (entityValue > 0xFFFF) {\n+            if (Character.isDefined(entityValue)) {\n                 char[] chrs = Character.toChars(entityValue);\n                 out.write(chrs[0]);\n                 out.write(chrs[1]);\n+                return end - index + 1 + (isHex ? 1 : 0);\n             } else {\n-                out.write(entityValue);\n+                return 0;\n             }\n-\n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        } else if (Character.isSurrogate((char) entityValue)) {\n+            return 0;\n+        } else {\n+            out.write(entityValue);\n+            return end - index + 1 + (isHex ? 1 : 0);\n         }\n-        return 0;\n     }\n+    return 0;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape expected:<\u0080[\u009f]> but was:<\u0080[#x9F;]>",
    "test_result": "FAIL"
}