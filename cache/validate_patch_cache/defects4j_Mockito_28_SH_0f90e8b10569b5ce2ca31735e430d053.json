{
    "patch": "import org.mockito.internal.stubbing.answers.ThrowsException;\nimport org.mockito.stubbing.Answer;\n>>> [ INFILL ] <<<\n            CandidateFilter filter = new CandidateFilter();\n            CandidateFilter.Result result = filter.filterCandidate(mocks, field, fieldInstance);\n            if(result.isFound() && result.getBestCandidate().getMock() != null){\n                result.thenInject();\n                break;\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..903e4b993 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,18 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+import org.mockito.internal.stubbing.answers.ThrowsException;\n+import org.mockito.stubbing.Answer;\n+>>> [ INFILL ] <<<\n+            CandidateFilter filter = new CandidateFilter();\n+            CandidateFilter.Result result = filter.filterCandidate(mocks, field, fieldInstance);\n+            if(result.isFound() && result.getBestCandidate().getMock() != null){\n+                result.thenInject();\n+                break;\n+            }\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}