{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetLocal = getOffset(instantLocal);\n    long instantAfter = instantLocal + offsetLocal;\n    int offsetAfter = getOffset(instantAfter);\n\n    // check if time is in a gap\n    if (offsetLocal != offsetAfter) {\n\n        // check if time is at the start of the gap\n        long nextTransitionFromInstantAfter = nextTransition(instantAfter);\n        if (nextTransitionFromInstantAfter == instantAfter + offsetAfter) {\n            return offsetLocal;\n        }\n\n        // check if time is at the end of the gap\n        long nextTransitionFromInstantLocal = nextTransition(instantLocal);\n        if (nextTransitionFromInstantLocal == instantLocal + offsetLocal) {\n            return offsetAfter;\n        }\n\n        // illegal instant\n        throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + new DateTime(instantLocal));\n    }\n\n    // find the nearest transition time before and after the local time\n    long nextTransition = nextTransition(instantLocal);\n    long previousTransition = previousTransition(instantLocal);\n\n    if (previousTransition == instantLocal - offsetLocal) {\n        return getOffset(previousTransition);\n    }\n\n    if (nextTransition == instantLocal - offsetLocal + DateTimeConstants.MILLIS_PER_SECOND) {\n        return getOffset(nextTransition);\n    }\n\n    // if local time is not in a gap or overlap period, interpolate the offset\n    long nextTransitionOffset = getOffset(nextTransition - 1);\n    long previousTransitionOffset = getOffset(previousTransition + DateTimeConstants.MILLIS_PER_SECOND);\n\n    double weight = ((double) (instantLocal - previousTransition)) / (nextTransition - previousTransition);\n    int offset = (int) Math.round(weight * nextTransitionOffset + (1 - weight) * previousTransitionOffset);\n    return offset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..7d6df71f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,51 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offsetLocal = getOffset(instantLocal);\n+    long instantAfter = instantLocal + offsetLocal;\n+    int offsetAfter = getOffset(instantAfter);\n+\n+    // check if time is in a gap\n+    if (offsetLocal != offsetAfter) {\n+\n+        // check if time is at the start of the gap\n+        long nextTransitionFromInstantAfter = nextTransition(instantAfter);\n+        if (nextTransitionFromInstantAfter == instantAfter + offsetAfter) {\n+            return offsetLocal;\n+        }\n+\n+        // check if time is at the end of the gap\n+        long nextTransitionFromInstantLocal = nextTransition(instantLocal);\n+        if (nextTransitionFromInstantLocal == instantLocal + offsetLocal) {\n+            return offsetAfter;\n         }\n-        return offsetAdjusted;\n+\n+        // illegal instant\n+        throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + new DateTime(instantLocal));\n     }\n \n+    // find the nearest transition time before and after the local time\n+    long nextTransition = nextTransition(instantLocal);\n+    long previousTransition = previousTransition(instantLocal);\n+\n+    if (previousTransition == instantLocal - offsetLocal) {\n+        return getOffset(previousTransition);\n+    }\n+\n+    if (nextTransition == instantLocal - offsetLocal + DateTimeConstants.MILLIS_PER_SECOND) {\n+        return getOffset(nextTransition);\n+    }\n+\n+    // if local time is not in a gap or overlap period, interpolate the offset\n+    long nextTransitionOffset = getOffset(nextTransition - 1);\n+    long previousTransitionOffset = getOffset(previousTransition + DateTimeConstants.MILLIS_PER_SECOND);\n+\n+    double weight = ((double) (instantLocal - previousTransition)) / (nextTransition - previousTransition);\n+    int offset = (int) Math.round(weight * nextTransitionOffset + (1 - weight) * previousTransitionOffset);\n+    return offset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}