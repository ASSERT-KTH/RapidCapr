{
    "patch": "  protected RealPointValuePair getSolution() {\n      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n      Set<Integer> basicRows = new HashSet<>();\n\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      double objectiveValue = -mostNegative;\n\n      boolean allCoefficientsZero = true;\n\n      if (negativeVarBasicRow == null) {\n          // No negative variables and objective value is 0.0\n          return new RealPointValuePair(coefficients, 0.0d);\n      }\n\n      // Get non-basic variables first\n      for (int i = 0; i < getNumVariables(); i++) {\n          if (!isBasicVar(i)) {\n              coefficients[i] = 0.0d;\n              allCoefficientsZero = false;\n          }\n      }\n\n      // Get basic variables and objective value\n      for (int i = 0; i < coefficients.length; i++) {\n          if (isBasicVar(i)) {\n              Integer basicRow = getBasicRow(getVarColumnIndex(i));\n              if (basicRows.contains(basicRow)) {\n                  coefficients[i] = 0.0d;\n              } else {\n                  basicRows.add(basicRow);\n                  double entry = basicRow == null ? 0.0d : getEntry(basicRow, getRhsOffset());\n                  if (entry != 0.0d) { // only add non-zero coefficients\n                      coefficients[i] = entry;\n                      allCoefficientsZero = false;\n                  }\n              }\n          }\n      }\n\n      if (allCoefficientsZero) {\n          // Special case when all coefficients are 0\n          // This will only occur if all coefficients in the objective function are 0\n          coefficients[getOriginalNumDecisionVariables() - 1] = 1.0d;\n      } else {\n          objectiveValue += f.getValue(coefficients);\n      }\n\n      return new RealPointValuePair(coefficients, objectiveValue);\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 02c22b59f..8e24fccfa 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -393,36 +393,57 @@ class SimplexTableau implements Serializable {\n      *\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n+  protected RealPointValuePair getSolution() {\n       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n       Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n+      Set<Integer> basicRows = new HashSet<>();\n \n-      Set<Integer> basicRows = new HashSet<Integer>();\n       double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-      for (int i = 0; i < coefficients.length; i++) {\n-          int colIndex = columnLabels.indexOf(\"x\" + i);\n-          if (colIndex < 0) {\n-            coefficients[i] = 0;\n-            continue;\n+      double objectiveValue = -mostNegative;\n+\n+      boolean allCoefficientsZero = true;\n+\n+      if (negativeVarBasicRow == null) {\n+          // No negative variables and objective value is 0.0\n+          return new RealPointValuePair(coefficients, 0.0d);\n+      }\n+\n+      // Get non-basic variables first\n+      for (int i = 0; i < getNumVariables(); i++) {\n+          if (!isBasicVar(i)) {\n+              coefficients[i] = 0.0d;\n+              allCoefficientsZero = false;\n           }\n-          Integer basicRow = getBasicRow(colIndex);\n-              // if the basic row is found to be the objective function row\n-              // set the coefficient to 0 -> this case handles unconstrained \n-              // variables that are still part of the objective function\n-          if (basicRows.contains(basicRow)) {\n-              // if multiple variables can take a given value\n-              // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n-          } else {\n-              basicRows.add(basicRow);\n-              coefficients[i] =\n-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                  (restrictToNonNegative ? 0 : mostNegative);\n+      }\n+\n+      // Get basic variables and objective value\n+      for (int i = 0; i < coefficients.length; i++) {\n+          if (isBasicVar(i)) {\n+              Integer basicRow = getBasicRow(getVarColumnIndex(i));\n+              if (basicRows.contains(basicRow)) {\n+                  coefficients[i] = 0.0d;\n+              } else {\n+                  basicRows.add(basicRow);\n+                  double entry = basicRow == null ? 0.0d : getEntry(basicRow, getRhsOffset());\n+                  if (entry != 0.0d) { // only add non-zero coefficients\n+                      coefficients[i] = entry;\n+                      allCoefficientsZero = false;\n+                  }\n+              }\n           }\n       }\n-      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n-    }\n+\n+      if (allCoefficientsZero) {\n+          // Special case when all coefficients are 0\n+          // This will only occur if all coefficients in the objective function are 0\n+          coefficients[getOriginalNumDecisionVariables() - 1] = 1.0d;\n+      } else {\n+          objectiveValue += f.getValue(coefficients);\n+      }\n+\n+      return new RealPointValuePair(coefficients, objectiveValue);\n+  }\n \n     /**\n      * Subtracts a multiple of one row from another.",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}