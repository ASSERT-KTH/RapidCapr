{
    "patch": "import org.apache.commons.math3.special.Beta;\n\npublic class GammaRegularized {\n    public static void main(String[] args) {\n        double result = gammaRegularized(1.0, 1.0);\n        System.out.println(\"Result: \" + result);\n    }\n\n    public static double gammaRegularized(double a, double x) {\n        double epsilon = 1E-15;\n        double maxIterations = 1000;\n        double regularized;\n\n        double incomplete = incompleteGamma(a, x, epsilon, maxIterations);\n        double gamma = Gamma(a);\n\n        regularized = incomplete / gamma;\n        return regularized;\n    }\n\n    public static double incompleteGamma(double a, double x, double epsilon, double maxIterations) {\n        double value = 0.0;\n        double term = x / a;\n        double temp = term;\n        \n        for (long i = 1; i <= maxIterations; i++) {\n            value += temp;\n            \n            if (temp < epsilon) {\n              break;\n            }\n            \n            term *= x / (a + i);\n            temp = term / (a + i);\n        }\n        \n        return Math.exp(-x + a * Math.log(x) - LogGamma(a)) * value;\n    }\n    \n    private static double Gamma(double x) {\n        double z = 1/Math.exp(Beta.logBeta(x, 1-x));\n        return z;\n    }\n    \n    private static double LogGamma(double x) {\n        double z = Beta.logBeta(x, 1-x)-Math.log(x);\n        return z;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..2a6263763 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,55 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Beta;\n+\n+public class GammaRegularized {\n+    public static void main(String[] args) {\n+        double result = gammaRegularized(1.0, 1.0);\n+        System.out.println(\"Result: \" + result);\n+    }\n+\n+    public static double gammaRegularized(double a, double x) {\n+        double epsilon = 1E-15;\n+        double maxIterations = 1000;\n+        double regularized;\n+\n+        double incomplete = incompleteGamma(a, x, epsilon, maxIterations);\n+        double gamma = Gamma(a);\n+\n+        regularized = incomplete / gamma;\n+        return regularized;\n+    }\n+\n+    public static double incompleteGamma(double a, double x, double epsilon, double maxIterations) {\n+        double value = 0.0;\n+        double term = x / a;\n+        double temp = term;\n+        \n+        for (long i = 1; i <= maxIterations; i++) {\n+            value += temp;\n+            \n+            if (temp < epsilon) {\n+              break;\n+            }\n+            \n+            term *= x / (a + i);\n+            temp = term / (a + i);\n+        }\n+        \n+        return Math.exp(-x + a * Math.log(x) - LogGamma(a)) * value;\n+    }\n+    \n+    private static double Gamma(double x) {\n+        double z = 1/Math.exp(Beta.logBeta(x, 1-x));\n+        return z;\n+    }\n+    \n+    private static double LogGamma(double x) {\n+        double z = Beta.logBeta(x, 1-x)-Math.log(x);\n+        return z;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}