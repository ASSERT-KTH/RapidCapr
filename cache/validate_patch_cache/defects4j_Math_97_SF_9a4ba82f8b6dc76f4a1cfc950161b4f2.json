{
    "patch": "        if (yMin == 0.0) {\n            setResult(min, 0.0, 0, 1);\n            return min;\n        }\n        \n        if (yMax == 0.0) {\n            setResult(max, 0.0, 0, 1);\n            return max;\n        }\n        \n        // Verify bracketing\n        double sign = yMin * yMax;\n        if (sign >= 0) {\n            // check if either value is close to a zero\n                // neither value is close to zero and min and max do not bracket root.\n                throw new IllegalArgumentException\n                (\"Function values at endpoints do not have different signs.\" +\n                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        } else {",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..77fd30c6a 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,16 +122,15 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n+        if (yMin == 0.0) {\n+            setResult(min, 0.0, 0, 1);\n+            return min;\n+        }\n         \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n+        if (yMax == 0.0) {\n+            setResult(max, 0.0, 0, 1);\n+            return max;\n+        }\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n@@ -143,13 +142,6 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n         } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n-        }\n-\n-        return ret;\n-    }\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}