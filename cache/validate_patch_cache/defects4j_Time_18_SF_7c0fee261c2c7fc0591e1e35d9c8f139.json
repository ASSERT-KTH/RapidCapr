{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n            throws IllegalArgumentException {\n\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        if (year < 1582) { // Julian calendar\n            if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {\n                throw new IllegalArgumentException(\"Invalid leap year day\");\n            }\n            long instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            return instant;\n        } else { // Gregorian calendar\n            long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant < iCutoverMillis) {\n                // Maybe it's Julian.\n                try {\n                    long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                    if (julianInstant >= iCutoverMillis) {\n                        // Okay, it's in the illegal cutover gap.\n                        throw new IllegalArgumentException(\"Specified date does not exist\");\n                    }\n                    // return the Gregorian instant\n                    return instant;\n                } catch (IllegalArgumentException e) {\n                    // Date does not exist in Julian calendar\n                    if (monthOfYear == 2 && dayOfMonth == 29 && !iGregorianChronology.isLeapYear(year)) {\n                        throw new IllegalArgumentException(\"Invalid leap year day\");\n                    }\n                    if (instant >= iCutoverMillis) {\n                        throw new IllegalArgumentException(\"Specified date does not exist\");\n                    }\n                    // return the Gregorian instant\n                    return instant;\n                }\n            } else {\n                // return the Gregorian instant\n                return instant;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..ca27d2db 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,35 +347,56 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                   int hourOfDay, int minuteOfHour,\n                                   int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n+            throws IllegalArgumentException {\n+\n         Chronology base;\n         if ((base = getBase()) != null) {\n             return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+                    (year, monthOfYear, dayOfMonth,\n+                            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n         }\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        if (year < 1582) { // Julian calendar\n+            if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {\n+                throw new IllegalArgumentException(\"Invalid leap year day\");\n+            }\n+            long instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n             if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n                 throw new IllegalArgumentException(\"Specified date does not exist\");\n             }\n-        }\n-        return instant;\n-    }\n+            return instant;\n+        } else { // Gregorian calendar\n+            long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            if (instant < iCutoverMillis) {\n+                // Maybe it's Julian.\n+                try {\n+                    long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+                    if (julianInstant >= iCutoverMillis) {\n+                        // Okay, it's in the illegal cutover gap.\n+                        throw new IllegalArgumentException(\"Specified date does not exist\");\n+                    }\n+                    // return the Gregorian instant\n+                    return instant;\n+                } catch (IllegalArgumentException e) {\n+                    // Date does not exist in Julian calendar\n+                    if (monthOfYear == 2 && dayOfMonth == 29 && !iGregorianChronology.isLeapYear(year)) {\n+                        throw new IllegalArgumentException(\"Invalid leap year day\");\n+                    }\n+                    if (instant >= iCutoverMillis) {\n+                        throw new IllegalArgumentException(\"Specified date does not exist\");\n+                    }\n+                    // return the Gregorian instant\n+                    return instant;\n+                }\n+            } else {\n+                // return the Gregorian instant\n+                return instant;\n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}