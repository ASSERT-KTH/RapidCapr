{
    "patch": "public boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n  ArrowType that = (ArrowType) other;\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  // Count the number of params of that are not var_args or optional.\n  int numRequiredParamsOfThat = 0;\n  while (thatParam != null) {\n    if (!thatParam.isOptionalArg() && !thatParam.isVarArgs()) {\n      numRequiredParamsOfThat++;\n    }\n    thatParam = thatParam.getNext();\n  }\n\n  int numRequiredParamsOfThis = 0;\n  boolean isLastParamVariableInThis = false;\n\n  // Check that each of the parameters in this is a subtype of the corresponding parameter in that.\n  while (thisParam != null && numRequiredParamsOfThis < numRequiredParamsOfThat) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = null;\n    if (thatParam != null) {\n      thatParamType = thatParam.getJSType();\n    }\n\n    if (thatParamType == null) {\n      // There aren't enough params in that to match the params in this.\n      // If the last parameter was variable, then we can return, since we can pad all the parameters\n      // from this with undefined. If the last parameter was required and this parameter is optional,\n      // we can still return, since we can pad all the remaining requiredParamsOfThat with undefined.\n      if (isLastParamVariableInThis || thisParam.isOptionalArg()) {\n        return true;\n      }\n      return false;\n    }\n\n    // Improve the error message to give more information about the parameter which caused the subtype check to fail.\n    String context = \"Formal parameter for function \" + this.getRoot().getQualifiedName();\n    if (thisParam.getLineno() != -1) {\n      context += \" at line \" + thisParam.getLineno();\n    }\n    if (!thisParamType.isSubtype(g, thatParamType, context)) {\n      return false;\n    }\n\n    if (!thatParam.isOptionalArg()) {\n      numRequiredParamsOfThis++;\n    }\n\n    boolean isThisParamVariable = thisParam.isVarArgs() || thisParam.getNext() == null && thatParam.getNext() != null && thatParam.getNext().isVarArgs();\n    isLastParamVariableInThis = isThisParamVariable;\n\n    thisParam = thisParam.getNext();\n\n    // Advance thatParam to the next non-vararg parameter.\n    while (thatParam != null && thatParam.isVarArgs()) {\n      thatParam = thatParam.getNext();\n    }\n    if (thatParam != null) {\n      thatParam = thatParam.getNext();\n    }\n  }\n\n  // All parameters in this have been matched to a corresponding parameter in that.\n  // If there are any remaining params in that that are required, then we return false.\n  while (thatParam != null) {\n    if (!thatParam.isOptionalArg()) {\n      return false;\n    }\n    thatParam = thatParam.getNext();\n  }\n\n  // If the last parameter of this is variable, then this function is a subtype,\n  // since we can pad the remaining parameters of this with undefined.\n  if (isLastParamVariableInThis) {\n    return true;\n  }\n  // If there are any remaining params in that that are optional, then this function is a subtype,\n  // since we can pad those parameters of that with undefined.\n  while (thatParam != null) {\n    if (thatParam.isOptionalArg()) {\n      return true;\n    }\n    thatParam = thatParam.getNext();\n  }\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..4ffe0353 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,81 +77,99 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n-    if (!(other instanceof ArrowType)) {\n-      return false;\n+public boolean isSubtype(JSType other) {\n+  if (!(other instanceof ArrowType)) {\n+    return false;\n+  }\n+  ArrowType that = (ArrowType) other;\n+  if (!this.returnType.isSubtype(that.returnType)) {\n+    return false;\n+  }\n+  Node thisParam = parameters.getFirstChild();\n+  Node thatParam = that.parameters.getFirstChild();\n+\n+  // Count the number of params of that are not var_args or optional.\n+  int numRequiredParamsOfThat = 0;\n+  while (thatParam != null) {\n+    if (!thatParam.isOptionalArg() && !thatParam.isVarArgs()) {\n+      numRequiredParamsOfThat++;\n     }\n+    thatParam = thatParam.getNext();\n+  }\n \n-    ArrowType that = (ArrowType) other;\n+  int numRequiredParamsOfThis = 0;\n+  boolean isLastParamVariableInThis = false;\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+  // Check that each of the parameters in this is a subtype of the corresponding parameter in that.\n+  while (thisParam != null && numRequiredParamsOfThis < numRequiredParamsOfThat) {\n+    JSType thisParamType = thisParam.getJSType();\n+    JSType thatParamType = null;\n+    if (thatParam != null) {\n+      thatParamType = thatParam.getJSType();\n+    }\n \n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n+    if (thatParamType == null) {\n+      // There aren't enough params in that to match the params in this.\n+      // If the last parameter was variable, then we can return, since we can pad all the parameters\n+      // from this with undefined. If the last parameter was required and this parameter is optional,\n+      // we can still return, since we can pad all the remaining requiredParamsOfThat with undefined.\n+      if (isLastParamVariableInThis || thisParam.isOptionalArg()) {\n+        return true;\n+      }\n       return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n-    Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n-      }\n+    // Improve the error message to give more information about the parameter which caused the subtype check to fail.\n+    String context = \"Formal parameter for function \" + this.getRoot().getQualifiedName();\n+    if (thisParam.getLineno() != -1) {\n+      context += \" at line \" + thisParam.getLineno();\n+    }\n+    if (!thisParamType.isSubtype(g, thatParamType, context)) {\n+      return false;\n+    }\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+    if (!thatParam.isOptionalArg()) {\n+      numRequiredParamsOfThis++;\n+    }\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+    boolean isThisParamVariable = thisParam.isVarArgs() || thisParam.getNext() == null && thatParam.getNext() != null && thatParam.getNext().isVarArgs();\n+    isLastParamVariableInThis = isThisParamVariable;\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n-      }\n+    thisParam = thisParam.getNext();\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n+    // Advance thatParam to the next non-vararg parameter.\n+    while (thatParam != null && thatParam.isVarArgs()) {\n+      thatParam = thatParam.getNext();\n+    }\n+    if (thatParam != null) {\n+      thatParam = thatParam.getNext();\n     }\n+  }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+  // All parameters in this have been matched to a corresponding parameter in that.\n+  // If there are any remaining params in that that are required, then we return false.\n+  while (thatParam != null) {\n+    if (!thatParam.isOptionalArg()) {\n+      return false;\n+    }\n+    thatParam = thatParam.getNext();\n+  }\n \n+  // If the last parameter of this is variable, then this function is a subtype,\n+  // since we can pad the remaining parameters of this with undefined.\n+  if (isLastParamVariableInThis) {\n     return true;\n   }\n+  // If there are any remaining params in that that are optional, then this function is a subtype,\n+  // since we can pad those parameters of that with undefined.\n+  while (thatParam != null) {\n+    if (thatParam.isOptionalArg()) {\n+      return true;\n+    }\n+    thatParam = thatParam.getNext();\n+  }\n+  return true;\n+}\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}