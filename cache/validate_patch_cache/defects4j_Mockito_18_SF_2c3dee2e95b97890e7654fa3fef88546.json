{
    "patch": "@Parameters\npublic static Collection<Object[]> testCaseValues() {\n    return Arrays.asList(new Object[][]{{\"apple\", \"red\", 100},\n                                         {\"banana\", \"yellow\", 50},\n                                         {\"orange\", \"orange\", 75},\n                                         {\"kiwi\", \"green\", 90},\n                                         {\"grapefruit\", \"pink\", 120},\n                                         {\"lemon\", \"yellow\", 25},\n                                         {\"lime\", \"green\", 35},\n                                         {\"grape\", \"purple\", 30},\n                                         {\"cherry\", \"red\", 5},\n                                         {\"blueberry\", \"blue\", 10},\n                                         {\"raspberry\", \"red\", 15},\n                                         {\"blackberry\", \"black\", 20},\n                                         {\"peach\", \"orange\", 60},\n                                         {\"pear\", \"green\", 70},\n                                         {\"plum\", \"purple\", 40},\n                                         {\"watermelon\", \"green\", 200}});\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..1d48b1fdf 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,25 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+@Parameters\n+public static Collection<Object[]> testCaseValues() {\n+    return Arrays.asList(new Object[][]{{\"apple\", \"red\", 100},\n+                                         {\"banana\", \"yellow\", 50},\n+                                         {\"orange\", \"orange\", 75},\n+                                         {\"kiwi\", \"green\", 90},\n+                                         {\"grapefruit\", \"pink\", 120},\n+                                         {\"lemon\", \"yellow\", 25},\n+                                         {\"lime\", \"green\", 35},\n+                                         {\"grape\", \"purple\", 30},\n+                                         {\"cherry\", \"red\", 5},\n+                                         {\"blueberry\", \"blue\", 10},\n+                                         {\"raspberry\", \"red\", 15},\n+                                         {\"blackberry\", \"black\", 20},\n+                                         {\"peach\", \"orange\", 60},\n+                                         {\"pear\", \"green\", 70},\n+                                         {\"plum\", \"purple\", 40},\n+                                         {\"watermelon\", \"green\", 200}});\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}