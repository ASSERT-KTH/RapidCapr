{
    "patch": "import org.json.JSONObject;\nimport java.util.*;\n\npublic class CalculatePercentage {\n\n    public static double getTypedPercent(JSONObject object) {\n        double count = 0.0;\n        double typed = 0.0;\n        Iterator<?> keys = object.keys();\n        while (keys.hasNext()) {\n            String key = (String) keys.next();\n            count++;\n            if (object.get(key) instanceof String) {\n                typed++;\n            }\n        }\n        return (typed / count) * 100.0;\n    }\n\n    public static void main(String args[]) {\n        JSONObject js = new JSONObject();\n        js.put(\"key1\", \"value1\");\n        js.put(\"key2\", 2);\n        double percent = getTypedPercent(js);\n        System.out.println(percent);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..6453836c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import org.json.JSONObject;\n+import java.util.*;\n+\n+public class CalculatePercentage {\n+\n+    public static double getTypedPercent(JSONObject object) {\n+        double count = 0.0;\n+        double typed = 0.0;\n+        Iterator<?> keys = object.keys();\n+        while (keys.hasNext()) {\n+            String key = (String) keys.next();\n+            count++;\n+            if (object.get(key) instanceof String) {\n+                typed++;\n+            }\n+        }\n+        return (typed / count) * 100.0;\n+    }\n+\n+    public static void main(String args[]) {\n+        JSONObject js = new JSONObject();\n+        js.put(\"key1\", \"value1\");\n+        js.put(\"key2\", 2);\n+        double percent = getTypedPercent(js);\n+        System.out.println(percent);\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}