{
    "patch": "public static Object returnValueFor(Class<?> clazz) {\n    if (clazz.equals(String.class)) {\n        return \"\";\n    } else if (clazz.equals(Integer.class) || clazz.equals(int.class)) {\n        return 0;\n    } else if (clazz.equals(Boolean.class) || clazz.equals(boolean.class)) {\n        return false;\n    } else if (clazz.equals(List.class) || clazz.equals(Iterable.class)) {\n        return Collections.EMPTY_LIST;\n    } else {\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..c29a15454 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Object returnValueFor(Class<?> clazz) {\n+    if (clazz.equals(String.class)) {\n+        return \"\";\n+    } else if (clazz.equals(Integer.class) || clazz.equals(int.class)) {\n+        return 0;\n+    } else if (clazz.equals(Boolean.class) || clazz.equals(boolean.class)) {\n+        return false;\n+    } else if (clazz.equals(List.class) || clazz.equals(Iterable.class)) {\n+        return Collections.EMPTY_LIST;\n+    } else {\n+        return null;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}