{
    "patch": "                int codePoint = Character.codePointAt(input, pos);\n                int charCount = Character.charCount(codePoint);\n                pos += charCount;\n                CharBuffer outputBuffer = CharBuffer.allocate(Character.maxCharsPerChar(1));\n                CoderResult coderResult = this.decode(toSurr(pair, outputBuffer));\n                if (coderResult.isError()) {\n                    throw new IOException(coderResult.toString());\n                }\n                CharSequence translated = translate(outputBuffer.array(), 0, outputBuffer.position());\n                if (translated == null) {\n                    out.write(outputBuffer.array(), 0, outputBuffer.position());\n                } else {\n                    out.append(translated);\n                }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..6655d72d 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,20 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                int codePoint = Character.codePointAt(input, pos);\n+                int charCount = Character.charCount(codePoint);\n+                pos += charCount;\n+                CharBuffer outputBuffer = CharBuffer.allocate(Character.maxCharsPerChar(1));\n+                CoderResult coderResult = this.decode(toSurr(pair, outputBuffer));\n+                if (coderResult.isError()) {\n+                    throw new IOException(coderResult.toString());\n+                }\n+                CharSequence translated = translate(outputBuffer.array(), 0, outputBuffer.position());\n+                if (translated == null) {\n+                    out.write(outputBuffer.array(), 0, outputBuffer.position());\n+                } else {\n+                    out.append(translated);\n+                }\n             }\n         }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}