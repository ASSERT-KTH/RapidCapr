{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n            (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n    if (mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        Callback[] callbacks = factory.getCallbacks();\n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof MethodInterceptorFilter) {\n                callbacks[i] = newFilter;\n                factory.setCallbacks(callbacks);\n                return;\n            }\n        }\n\n        // If no MethodInterceptorFilter has been found, add one to the callbacks\n        Callback[] newCallbacks = Arrays.copyOf(callbacks, callbacks.length + 1);\n        newCallbacks[0] = newFilter;\n        factory.setCallbacks(newCallbacks);\n    } else if (mock instanceof MockitoSpy) {\n        MockitoSpy<T> spy = (MockitoSpy<T>) mock;\n        try {\n            Object oldDelegate = getMockDelegate(spy);\n            MockHandlerInterface<T> newMockHandlerSpied = new MockHandler<T>(oldMockHandler, () -> {\n                pushMock(spy);\n                try {\n                    return oldDelegate;\n                } finally {\n                    popMock();\n                }\n            });\n            MockUtil.setMockHandler(spy, newMockHandlerSpied);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    } else {\n        throw new IllegalArgumentException(\"Mock object is not a factory nor a spy\");\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..8a9e555c1 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,49 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n+            (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+    if (mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        Callback[] callbacks = factory.getCallbacks();\n+        for (int i = 0; i < callbacks.length; i++) {\n+            if (callbacks[i] instanceof MethodInterceptorFilter) {\n+                callbacks[i] = newFilter;\n+                factory.setCallbacks(callbacks);\n+                return;\n+            }\n+        }\n+\n+        // If no MethodInterceptorFilter has been found, add one to the callbacks\n+        Callback[] newCallbacks = Arrays.copyOf(callbacks, callbacks.length + 1);\n+        newCallbacks[0] = newFilter;\n+        factory.setCallbacks(newCallbacks);\n+    } else if (mock instanceof MockitoSpy) {\n+        MockitoSpy<T> spy = (MockitoSpy<T>) mock;\n+        try {\n+            Object oldDelegate = getMockDelegate(spy);\n+            MockHandlerInterface<T> newMockHandlerSpied = new MockHandler<T>(oldMockHandler, () -> {\n+                pushMock(spy);\n+                try {\n+                    return oldDelegate;\n+                } finally {\n+                    popMock();\n+                }\n+            });\n+            MockUtil.setMockHandler(spy, newMockHandlerSpied);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    } else {\n+        throw new IllegalArgumentException(\"Mock object is not a factory nor a spy\");\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}