{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    for (Type bound : bounds) {\n        if (bound instanceof ParameterizedType) {\n            Type[] typeArgs = ((ParameterizedType) bound).getActualTypeArguments();\n            if (typeArgs.length > 0) {\n                Type actualTypeArg = typeArgs[0];\n                if (actualTypeArg instanceof TypeVariable) {\n                    actualTypeArg = getActualTypeArgumentFor((TypeVariable<?>) actualTypeArg);\n                }\n                return actualTypeArg;\n            }\n        } else if (bound instanceof TypeVariable) {\n            Type actualTypeArg = getActualTypeArgumentFor((TypeVariable<?>) bound);\n            if (actualTypeArg != null) {\n                return actualTypeArg;\n            }\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..a11e1d861 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,28 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    for (Type bound : bounds) {\n+        if (bound instanceof ParameterizedType) {\n+            Type[] typeArgs = ((ParameterizedType) bound).getActualTypeArguments();\n+            if (typeArgs.length > 0) {\n+                Type actualTypeArg = typeArgs[0];\n+                if (actualTypeArg instanceof TypeVariable) {\n+                    actualTypeArg = getActualTypeArgumentFor((TypeVariable<?>) actualTypeArg);\n+                }\n+                return actualTypeArg;\n+            }\n+        } else if (bound instanceof TypeVariable) {\n+            Type actualTypeArg = getActualTypeArgumentFor((TypeVariable<?>) bound);\n+            if (actualTypeArg != null) {\n+                return actualTypeArg;\n+            }\n+        }\n+    }\n+    return null;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}