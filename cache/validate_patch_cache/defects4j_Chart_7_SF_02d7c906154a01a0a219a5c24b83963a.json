{
    "patch": "private void updateBounds(TimePeriod period, int index) {\n    long start = period.getStart().getTime();\n    long end = period.getEnd().getTime();\n    long middle = start + ((end - start) / 2);\n\n    if (this.minStartIndex < 0 || start < getDataItem(this.minStartIndex).getPeriod().getStart().getTime()) {\n        this.minStartIndex = index;\n    }\n\n    if (this.maxStartIndex < 0 || start > getDataItem(this.maxStartIndex).getPeriod().getStart().getTime()) {\n        this.maxStartIndex = index;\n    }\n\n    if (this.minMiddleIndex < 0 || middle < (getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime() + getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()) / 2) {\n        this.minMiddleIndex = index;\n    }\n\n    if (this.maxMiddleIndex < 0 || middle > (getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime() + getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime()) / 2) {\n        this.maxMiddleIndex = index;\n    }\n\n    if (this.minEndIndex < 0 || end < getDataItem(this.minEndIndex).getPeriod().getEnd().getTime()) {\n        this.minEndIndex = index;\n    }\n\n    if (this.maxEndIndex < 0 || end > getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime()) {\n        this.maxEndIndex = index;\n    }\n    \n    if (index == 0) {\n        return;\n    }\n    \n    if (this.minStartIndex == index - 1 && getDataItem(this.minStartIndex).getPeriod().getEnd().getTime() > start) {\n        this.minStartIndex = index;\n    }\n    \n    if (this.maxStartIndex == index - 1 && getDataItem(this.maxStartIndex).getPeriod().getEnd().getTime() < start) {\n        this.maxStartIndex = index;\n    }\n    \n    if (this.minMiddleIndex == index - 1 && (getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime() + getDataItem(index).getPeriod().getStart().getTime()) / 2 > middle) {\n        this.minMiddleIndex = index;\n    }\n    \n    if (this.maxMiddleIndex == index - 1 && (getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime() + getDataItem(index).getPeriod().getStart().getTime()) / 2 < middle) {\n        this.maxMiddleIndex = index;\n    }\n    \n    if (this.minEndIndex == index - 1 && getDataItem(this.minEndIndex).getPeriod().getEnd().getTime() > end) {\n        this.minEndIndex = index;\n    }\n    \n    if (this.maxEndIndex == index - 1 && getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime() < end) {\n        this.maxEndIndex = index;\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimePeriodValues.java b/source/org/jfree/data/time/TimePeriodValues.java\nindex 0a3e7a1..62a415d 100644\n--- a/source/org/jfree/data/time/TimePeriodValues.java\n+++ b/source/org/jfree/data/time/TimePeriodValues.java\n@@ -254,85 +254,63 @@ public class TimePeriodValues extends Series implements Serializable {\n      * @param period  the time period.\n      * @param index  the index of the time period.\n      */\n-    private void updateBounds(TimePeriod period, int index) {\n-        \n-        long start = period.getStart().getTime();\n-        long end = period.getEnd().getTime();\n-        long middle = start + ((end - start) / 2);\n-\n-        if (this.minStartIndex >= 0) {\n-            long minStart = getDataItem(this.minStartIndex).getPeriod()\n-                .getStart().getTime();\n-            if (start < minStart) {\n-                this.minStartIndex = index;           \n-            }\n-        }\n-        else {\n-            this.minStartIndex = index;\n-        }\n-        \n-        if (this.maxStartIndex >= 0) {\n-            long maxStart = getDataItem(this.maxStartIndex).getPeriod()\n-                .getStart().getTime();\n-            if (start > maxStart) {\n-                this.maxStartIndex = index;           \n-            }\n-        }\n-        else {\n-            this.maxStartIndex = index;\n-        }\n-        \n-        if (this.minMiddleIndex >= 0) {\n-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n-                .getTime();\n-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n-                .getTime();\n-            long minMiddle = s + (e - s) / 2;\n-            if (middle < minMiddle) {\n-                this.minMiddleIndex = index;           \n-            }\n-        }\n-        else {\n-            this.minMiddleIndex = index;\n-        }\n-        \n-        if (this.maxMiddleIndex >= 0) {\n-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n-                .getTime();\n-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n-                .getTime();\n-            long maxMiddle = s + (e - s) / 2;\n-            if (middle > maxMiddle) {\n-                this.maxMiddleIndex = index;           \n-            }\n-        }\n-        else {\n-            this.maxMiddleIndex = index;\n-        }\n-        \n-        if (this.minEndIndex >= 0) {\n-            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n-                .getTime();\n-            if (end < minEnd) {\n-                this.minEndIndex = index;           \n-            }\n-        }\n-        else {\n-            this.minEndIndex = index;\n-        }\n-       \n-        if (this.maxEndIndex >= 0) {\n-            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()\n-                .getTime();\n-            if (end > maxEnd) {\n-                this.maxEndIndex = index;           \n-            }\n-        }\n-        else {\n-            this.maxEndIndex = index;\n-        }\n-        \n-    }\n+private void updateBounds(TimePeriod period, int index) {\n+    long start = period.getStart().getTime();\n+    long end = period.getEnd().getTime();\n+    long middle = start + ((end - start) / 2);\n+\n+    if (this.minStartIndex < 0 || start < getDataItem(this.minStartIndex).getPeriod().getStart().getTime()) {\n+        this.minStartIndex = index;\n+    }\n+\n+    if (this.maxStartIndex < 0 || start > getDataItem(this.maxStartIndex).getPeriod().getStart().getTime()) {\n+        this.maxStartIndex = index;\n+    }\n+\n+    if (this.minMiddleIndex < 0 || middle < (getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime() + getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()) / 2) {\n+        this.minMiddleIndex = index;\n+    }\n+\n+    if (this.maxMiddleIndex < 0 || middle > (getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime() + getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime()) / 2) {\n+        this.maxMiddleIndex = index;\n+    }\n+\n+    if (this.minEndIndex < 0 || end < getDataItem(this.minEndIndex).getPeriod().getEnd().getTime()) {\n+        this.minEndIndex = index;\n+    }\n+\n+    if (this.maxEndIndex < 0 || end > getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime()) {\n+        this.maxEndIndex = index;\n+    }\n+    \n+    if (index == 0) {\n+        return;\n+    }\n+    \n+    if (this.minStartIndex == index - 1 && getDataItem(this.minStartIndex).getPeriod().getEnd().getTime() > start) {\n+        this.minStartIndex = index;\n+    }\n+    \n+    if (this.maxStartIndex == index - 1 && getDataItem(this.maxStartIndex).getPeriod().getEnd().getTime() < start) {\n+        this.maxStartIndex = index;\n+    }\n+    \n+    if (this.minMiddleIndex == index - 1 && (getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime() + getDataItem(index).getPeriod().getStart().getTime()) / 2 > middle) {\n+        this.minMiddleIndex = index;\n+    }\n+    \n+    if (this.maxMiddleIndex == index - 1 && (getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime() + getDataItem(index).getPeriod().getStart().getTime()) / 2 < middle) {\n+        this.maxMiddleIndex = index;\n+    }\n+    \n+    if (this.minEndIndex == index - 1 && getDataItem(this.minEndIndex).getPeriod().getEnd().getTime() > end) {\n+        this.minEndIndex = index;\n+    }\n+    \n+    if (this.maxEndIndex == index - 1 && getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime() < end) {\n+        this.maxEndIndex = index;\n+    }\n+}\n     \n     /**\n      * Recalculates the bounds for the collection of items.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1000.0> but was:<1500.0>",
    "test_result": "FAIL"
}