{
    "patch": "The correct hunk for this location can be:\n``` java\n      if (NodeUtil.hasFinally(n)) {\n        Node finallyBlock = n.getLastChild();\n        tryMinimizeExits(finallyBlock, exitType, labelName);\n      } else { // Otherwise, call into tryMinimizeExits on the last child\n        Node lastChild = n.getLastChild();\n        tryMinimizeExits(lastChild, exitType, labelName);\n      }\n```\nThis adds an else branch to check if the node has a finally block. If it does, we call tryMinimizeExits on it. Otherwise, we call the function on the last child of n. This should fix the failing test.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..b4d7e530 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,17 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n+The correct hunk for this location can be:\n+``` java\n       if (NodeUtil.hasFinally(n)) {\n         Node finallyBlock = n.getLastChild();\n         tryMinimizeExits(finallyBlock, exitType, labelName);\n+      } else { // Otherwise, call into tryMinimizeExits on the last child\n+        Node lastChild = n.getLastChild();\n+        tryMinimizeExits(lastChild, exitType, labelName);\n       }\n+```\n+This adds an else branch to check if the node has a finally block. If it does, we call tryMinimizeExits on it. Otherwise, we call the function on the last child of n. This should fix the failing test.\n     }\n \n     // Just a 'label'.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}