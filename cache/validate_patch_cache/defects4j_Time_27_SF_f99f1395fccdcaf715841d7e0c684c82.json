{
    "patch": "            Composite c = (Composite) createComposite(elementPairs.subList(1, size - 1))[0];\n            PeriodFormatter f = toFormatter((List<Object>) c.iElementPairs, notPrinter, notParser);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            return new PeriodFormatter(sep, sep);\n        } else {\n            Composite c = (Composite) createComposite(elementPairs)[0];\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) c);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) c, null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) c, (PeriodParser) c);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..c17b5e64 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,19 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            Composite c = (Composite) createComposite(elementPairs.subList(1, size - 1))[0];\n+            PeriodFormatter f = toFormatter((List<Object>) c.iElementPairs, notPrinter, notParser);\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+            return new PeriodFormatter(sep, sep);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n-    }\n+            Composite c = (Composite) createComposite(elementPairs)[0];\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) c);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) c, null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) c, (PeriodParser) c);\n+            }\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}