{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      // FIXME: This inlineAliases fails the testIssue931 test case.\n      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {\n        // {@code name} meets condition (b).\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        boolean inlined = false;\n        for (Ref ref : refs) {\n          if (ref.type != Type.ALIASING_GET || !ref.scope.isLocal()) {\n            continue;\n          }\n\n          // {@code name} meets condition (c).\n          if (inlineAliasIfPossible(ref, namespace)) {\n            name.removeRef(ref);\n            inlined = true;\n          }\n        }\n\n        // If any aliases were inlined, we need to re-add `name` and its children\n        // to the worklist in case they also need to be inlined.\n        if (inlined) {\n          workList.add(name);\n        }\n      } else if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n          && name.aliasingGets == 0 && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..4bf1c079 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,7 +158,7 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n+private void inlineAliases(GlobalNamespace namespace) {\n     // Invariant: All the names in the worklist meet condition (a).\n     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n     while (!workList.isEmpty()) {\n@@ -169,28 +169,31 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n+      // FIXME: This inlineAliases fails the testIssue931 test case.\n+      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {\n+        // {@code name} meets condition (b).\n         List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        boolean inlined = false;\n         for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n-            }\n+          if (ref.type != Type.ALIASING_GET || !ref.scope.isLocal()) {\n+            continue;\n+          }\n+\n+          // {@code name} meets condition (c).\n+          if (inlineAliasIfPossible(ref, namespace)) {\n+            name.removeRef(ref);\n+            inlined = true;\n           }\n         }\n-      }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n+        // If any aliases were inlined, we need to re-add `name` and its children\n+        // to the worklist in case they also need to be inlined.\n+        if (inlined) {\n+          workList.add(name);\n+        }\n+      } else if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n+          && name.aliasingGets == 0 && name.props != null) {\n+        // All of {@code name}'s children meet condition (a), so they can be added to the worklist.\n         workList.addAll(name.props);\n       }\n     }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}