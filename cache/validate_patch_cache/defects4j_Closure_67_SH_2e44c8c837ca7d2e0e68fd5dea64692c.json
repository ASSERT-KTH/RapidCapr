{
    "patch": "          if (isChainedProperty &&\n              n.getFirstChild().getFirstChild().getNext() != null &&\n              n.getFirstChild().getFirstChild().getNext().getType() == Token.STRING &&\n              \"prototype\".equals(n.getFirstChild().getFirstChild().getNext().getString())) {\n            return true;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..f7a2f996 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,12 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+          if (isChainedProperty &&\n+              n.getFirstChild().getFirstChild().getNext() != null &&\n+              n.getFirstChild().getFirstChild().getNext().getType() == Token.STRING &&\n+              \"prototype\".equals(n.getFirstChild().getFirstChild().getNext().getString())) {\n+            return true;\n+          }\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}