{
    "patch": "if (c == '+') {\n    out.append('%');\n    out.append(\"2B\");\n} else if (c == '/') {\n    out.append('%');\n    out.append(\"2F\");\n} else if (c == '\\r') {\n    out.append('%');\n    out.append(\"0D\");\n} else if (c == '\\n') {\n    out.append('%');\n    out.append(\"0A\");\n} else if (dontNeedEncoding.get(c)) {\n    out.append((char)c);\n} else {\n    out.append('%');\n    out.append(Character.forDigit((c >> 4) & 0xF, 16));\n    out.append(Character.forDigit((c & 0xF), 16));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}