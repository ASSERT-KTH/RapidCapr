{
    "patch": "// check if values is null or not\nif (values != null) {\n    // check if iterable class is assignable from the return type of values\n    if (Iterable.class.isAssignableFrom(values.getReturnType())) {\n        // check if the iterable object is not null\n        Iterable<?> iterable = (Iterable<?>) values.returnValueFor(Iterable.class);\n        if (iterable != null) {\n            assertFalse(iterable.iterator().hasNext());\n        } else {\n            fail(\"Iterable object is null\");\n        }\n    } else {\n        fail(\"Return type not iterable\");\n    }\n} else {\n    fail(\"Values is null\");\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}