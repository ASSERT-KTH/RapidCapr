{
    "patch": "public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n    int maxPopCount = Integer.bitCount(M-1);\n    double[][] dp = new double[maxPopCount+1][M];\n    dp[0][0] = 1;\n\n    for (int i = 1; i <= D; i++) {\n        for (int j = 0; j < M; j++) {\n            int popCount = Integer.bitCount(j);\n            int prev = popCount - 1;\n            double sum = 0;\n\n            for (int k = 0; k < M; k++) {\n                int dominant = getDominant(j, k, M);\n                int popCountK = Integer.bitCount(k);\n\n                if (popCountK == prev) {\n                    sum += dp[prev][k] * genotypeProbabilities[dominant];\n                }\n            }\n\n            dp[popCount][j] = sum;\n        }\n    }\n\n    double[] result = new double[N + 1];\n\n    for (int i = 0; i < M; i++) {\n        int popCount = Integer.bitCount(i);\n        result[popCount] += dp[popCount][i];\n    }\n\n    for (int i = 0; i <= N; i++) {\n        result[i] /= Math.pow(M, D);\n    }\n\n    return result;\n}\n\nprivate int getDominant(int i, int j, int M) {\n    if (j > i) {\n        return getDominant(j, i, M);\n    }\n\n    int count = 0;\n\n    for (int k = 0; k < i; k++) {\n        count += M - k;\n    }\n\n    return count + j;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}