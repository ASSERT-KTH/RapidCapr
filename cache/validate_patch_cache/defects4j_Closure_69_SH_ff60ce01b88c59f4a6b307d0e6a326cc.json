{
    "patch": "      if (!child.isGetProp() && !child.isGetElem() &&\n          !(n.getParent() != null && n.getParent().isExprResult())) {\n        // Either child is an identifier in which case a warning has already been issued, OR\n        // child is an expression in which case a warning cannot be issued.\n        if (!child.isName() && !(child.isCast() && child.getFirstChild().isName())) {\n          report(t, n, FUNCTION_ARGUMENT_THIS, childType.toString());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..d981612b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (!child.isGetProp() && !child.isGetElem() &&\n+          !(n.getParent() != null && n.getParent().isExprResult())) {\n+        // Either child is an identifier in which case a warning has already been issued, OR\n+        // child is an expression in which case a warning cannot be issued.\n+        if (!child.isName() && !(child.isCast() && child.getFirstChild().isName())) {\n+          report(t, n, FUNCTION_ARGUMENT_THIS, childType.toString());\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}