{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    List<Node> arguments = call.children().stream().skip(1).collect(Collectors.toList());\n    List<Node> parameters = new ArrayList<>(functionType.getParameters());\n    int ordinal = 0;\n    while (!arguments.isEmpty() && !parameters.isEmpty()) {\n      Node argument = arguments.remove(0);\n      Node parameter = parameters.remove(0);\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..3427e566 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1398,19 +1398,12 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    */\n   private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n+    List<Node> arguments = call.children().stream().skip(1).collect(Collectors.toList());\n+    List<Node> parameters = new ArrayList<>(functionType.getParameters());\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n+    while (!arguments.isEmpty() && !parameters.isEmpty()) {\n+      Node argument = arguments.remove(0);\n+      Node parameter = parameters.remove(0);\n       ordinal++;\n \n       validator.expectArgumentMatchesParameter(t, argument,",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}