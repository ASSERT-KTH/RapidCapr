{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    if (result != null && result.contains(\"@type\")) {\n        while (!result.contains(\"*/\")) {\n            String nextLine = stream.getRemainingJSDocLine();\n            if (nextLine == null) {\n                return result; // if end-of-stream, return what we have accumulated so far\n            }\n            result = result.concat(\"\\n\").concat(nextLine);\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..1b1d2f41 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,19 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n+private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+    if (result != null && result.contains(\"@type\")) {\n+        while (!result.contains(\"*/\")) {\n+            String nextLine = stream.getRemainingJSDocLine();\n+            if (nextLine == null) {\n+                return result; // if end-of-stream, return what we have accumulated so far\n+            }\n+            result = result.concat(\"\\n\").concat(nextLine);\n+        }\n+    }\n     return result;\n-  }\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "java.lang.IllegalStateException: Recorded bad position information",
    "test_result": "FAIL"
}