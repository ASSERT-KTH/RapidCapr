{
    "patch": "// Remove unreferenced parameters from function declarations.\n// NOTE: This option should not be enabled without removing\n// unreferenced variables.\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n  // Removing unreferenced function arguments breaks\n  // Function.prototype.length. In advanced mode, we don't really care\n  // about this: we consider \"length\" the equivalent of reflecting on\n  // the function's lexical source.\n  //\n  // Rather than create a new option for this, we assume that if the user\n  // is removing globals, then it's OK to remove unused function args.\n  // This is safe because the only occurences of functions that count are\n  // those that are indirectly referenced via eval or some other name that\n  // is known to be influenced by global scope\n  //\n  // Additionally, we don't remove args from functions that have rest parameter,\n  // because we can't be sure if rest parameter is used.\n  //\n  // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n  // and http://code.google.com/p/closure-compiler/issues/detail?id=1017\n\n  Node function = fnScope.getRootNode();\n  checkState(function.isFunction());\n\n  if (isFunctionWithRestArgs(function)) {\n    return;\n  }\n\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can't be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers =\n      modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n  if (!modifyCallers) {\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      String argName = lastArg.getString();\n      Var var = fnScope.getVar(argName);\n      boolean argHasUniqueName = isFunctionWithUniqueParamName(fnScope, var);\n      if (!argHasUniqueName && !referencedVars.contains(var)) {\n        // Check and remove any default values from arguments being removed.\n        Node defaultValue = lastArg.getFirstChild();\n        if (defaultValue != null) {\n          argList.removeChild(defaultValue);\n        }\n\n        argList.removeChild(lastArg);\n        NodeUtil.markFunctionsDeleted(lastArg, compiler);\n\n        // Remove arg name from function scope.\n        fnScope.undeclare(var);\n        // Remove arg name from arguments object.\n        if (argName != null) {\n          Node argumentsObject = NodeUtil.getArgumentsObject(function);\n          Preconditions.checkNotNull(argumentsObject);\n          Node paramToDelete = NodeUtil.findLhsArgumentByString(argumentsObject, argName);\n          if (paramToDelete != null) {\n            NodeUtil.markFunctionsDeleted(paramToDelete, compiler);\n            argumentsObject.removeChild(paramToDelete);\n          }\n        }\n        // Report any change that was made.\n        compiler.reportChangeToEnclosingScope(argList.getParent());\n\n      } else {\n        break;\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referencedVars);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9f7a24da 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,83 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+// Remove unreferenced parameters from function declarations.\n+// NOTE: This option should not be enabled without removing\n+// unreferenced variables.\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  // Removing unreferenced function arguments breaks\n+  // Function.prototype.length. In advanced mode, we don't really care\n+  // about this: we consider \"length\" the equivalent of reflecting on\n+  // the function's lexical source.\n+  //\n+  // Rather than create a new option for this, we assume that if the user\n+  // is removing globals, then it's OK to remove unused function args.\n+  // This is safe because the only occurences of functions that count are\n+  // those that are indirectly referenced via eval or some other name that\n+  // is known to be influenced by global scope\n+  //\n+  // Additionally, we don't remove args from functions that have rest parameter,\n+  // because we can't be sure if rest parameter is used.\n+  //\n+  // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  // and http://code.google.com/p/closure-compiler/issues/detail?id=1017\n+\n+  Node function = fnScope.getRootNode();\n+  checkState(function.isFunction());\n+\n+  if (isFunctionWithRestArgs(function)) {\n+    return;\n+  }\n+\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can't be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers =\n+      modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+  if (!modifyCallers) {\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      String argName = lastArg.getString();\n+      Var var = fnScope.getVar(argName);\n+      boolean argHasUniqueName = isFunctionWithUniqueParamName(fnScope, var);\n+      if (!argHasUniqueName && !referencedVars.contains(var)) {\n+        // Check and remove any default values from arguments being removed.\n+        Node defaultValue = lastArg.getFirstChild();\n+        if (defaultValue != null) {\n+          argList.removeChild(defaultValue);\n         }\n+\n+        argList.removeChild(lastArg);\n+        NodeUtil.markFunctionsDeleted(lastArg, compiler);\n+\n+        // Remove arg name from function scope.\n+        fnScope.undeclare(var);\n+        // Remove arg name from arguments object.\n+        if (argName != null) {\n+          Node argumentsObject = NodeUtil.getArgumentsObject(function);\n+          Preconditions.checkNotNull(argumentsObject);\n+          Node paramToDelete = NodeUtil.findLhsArgumentByString(argumentsObject, argName);\n+          if (paramToDelete != null) {\n+            NodeUtil.markFunctionsDeleted(paramToDelete, compiler);\n+            argumentsObject.removeChild(paramToDelete);\n+          }\n+        }\n+        // Report any change that was made.\n+        compiler.reportChangeToEnclosingScope(argList.getParent());\n+\n+      } else {\n+        break;\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referencedVars);\n   }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}