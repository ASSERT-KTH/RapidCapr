{
    "patch": "        if (offsetLocal != offsetAdjusted) {\n            boolean nearDstBoundary = Math.abs(offsetLocal - offsetAdjusted) == 1;\n            if (offsetLocal >= 0 && offsetLocal > offsetAdjusted) {\n                if (nearDstBoundary) {\n                    long prevTransition = previousTransition(instantAdjusted);\n                    int offsetPrev = getOffset(prevTransition);\n                    long prev = previousTransition(instantLocal);\n                    int offsetPrev2 = getOffset(prev);\n                    if (prevTransition == prev && (offsetPrev2 - offsetPrev) >= 0) {\n                        return offsetPrev;\n                    }\n                }\n                return offsetLocal;\n            } else if (offsetAdjusted >= 0) {\n                if (nearDstBoundary) {\n                    long nextTransition = nextTransition(instantAdjusted);\n                    int offsetNext = getOffset(nextTransition);\n                    long next = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextTransition == next && offsetAdjusted == offsetNext) {\n                        return offsetAdjusted;\n                    }\n                }\n                return offsetAdjusted;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..e9b4cbc8 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,31 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        if (offsetLocal != offsetAdjusted) {\n+            boolean nearDstBoundary = Math.abs(offsetLocal - offsetAdjusted) == 1;\n+            if (offsetLocal >= 0 && offsetLocal > offsetAdjusted) {\n+                if (nearDstBoundary) {\n+                    long prevTransition = previousTransition(instantAdjusted);\n+                    int offsetPrev = getOffset(prevTransition);\n+                    long prev = previousTransition(instantLocal);\n+                    int offsetPrev2 = getOffset(prev);\n+                    if (prevTransition == prev && (offsetPrev2 - offsetPrev) >= 0) {\n+                        return offsetPrev;\n+                    }\n+                }\n+                return offsetLocal;\n+            } else if (offsetAdjusted >= 0) {\n+                if (nearDstBoundary) {\n+                    long nextTransition = nextTransition(instantAdjusted);\n+                    int offsetNext = getOffset(nextTransition);\n+                    long next = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextTransition == next && offsetAdjusted == offsetNext) {\n+                        return offsetAdjusted;\n+                    }\n+                }\n+                return offsetAdjusted;\n+            }\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}