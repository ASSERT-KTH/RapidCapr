{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // if instantLocal is in a gap, use the previous valid offset\n        if (offsetLocal < 0) {\n            long nextLocal = nextTransition(instantLocal);\n            if (nextLocal == instantLocal) {\n                nextLocal = Long.MAX_VALUE;\n            }\n            long prevLocal = previousTransition(instantLocal - 1);\n            if (prevLocal == instantLocal - 1) {\n                prevLocal = Long.MIN_VALUE;\n            }\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n            if (nextAdjusted == instantLocal - offsetLocal) {\n                nextAdjusted = Long.MAX_VALUE;\n            }\n            long prevAdjusted = previousTransition(instantLocal - offsetLocal - 1);\n            if (prevAdjusted == instantLocal - offsetLocal - 1) {\n                prevAdjusted = Long.MIN_VALUE;\n            }\n            long candidateLocal = (nextLocal > nextAdjusted ? nextLocal : nextAdjusted);\n            candidateLocal = (prevLocal < prevAdjusted ? prevLocal : prevAdjusted);\n            if (candidateLocal > Long.MIN_VALUE) {\n                return getOffset(candidateLocal);\n            }\n            return offsetLocal;\n        }\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..79214d1a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -879,6 +879,31 @@ public abstract class DateTimeZone implements Serializable {\n     public int getOffsetFromLocal(long instantLocal) {\n         // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n+        // if instantLocal is in a gap, use the previous valid offset\n+        if (offsetLocal < 0) {\n+            long nextLocal = nextTransition(instantLocal);\n+            if (nextLocal == instantLocal) {\n+                nextLocal = Long.MAX_VALUE;\n+            }\n+            long prevLocal = previousTransition(instantLocal - 1);\n+            if (prevLocal == instantLocal - 1) {\n+                prevLocal = Long.MIN_VALUE;\n+            }\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+            if (nextAdjusted == instantLocal - offsetLocal) {\n+                nextAdjusted = Long.MAX_VALUE;\n+            }\n+            long prevAdjusted = previousTransition(instantLocal - offsetLocal - 1);\n+            if (prevAdjusted == instantLocal - offsetLocal - 1) {\n+                prevAdjusted = Long.MIN_VALUE;\n+            }\n+            long candidateLocal = (nextLocal > nextAdjusted ? nextLocal : nextAdjusted);\n+            candidateLocal = (prevLocal < prevAdjusted ? prevLocal : prevAdjusted);\n+            if (candidateLocal > Long.MIN_VALUE) {\n+                return getOffset(candidateLocal);\n+            }\n+            return offsetLocal;\n+        }\n         // adjust instantLocal using the estimate and recalc the offset\n         final long instantAdjusted = instantLocal - offsetLocal;\n         final int offsetAdjusted = getOffset(instantAdjusted);\n@@ -891,7 +916,7 @@ public abstract class DateTimeZone implements Serializable {\n                 // back before the transition, whereas it should be\n                 // on or after the transition\n                 long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                 if (nextLocal != nextAdjusted) {\n                     return offsetLocal;\n                 }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}