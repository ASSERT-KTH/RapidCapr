{
    "patch": "            int i = e.getIllegalFieldValue();\n            if (e.getDateTimeFieldType() == DateTimeFieldType.year() && i >0 && i < 100){\n                i = SelectChronology.getDateTimeMillis(iDefaultYear, i, 1, 0, 0, 0, 0, iChrono);\n                try{\n                    e = new IllegalFieldValueException(DateTimeFieldType.year(), Integer.valueOf(i), e.getDurationType());\n                }catch(Exception ex){ \n                    e.setErrorMessage(\"Cannot parse \\\"\" + text + '\"');\n                } ",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..8f603a23 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,14 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            int i = e.getIllegalFieldValue();\n+            if (e.getDateTimeFieldType() == DateTimeFieldType.year() && i >0 && i < 100){\n+                i = SelectChronology.getDateTimeMillis(iDefaultYear, i, 1, 0, 0, 0, 0, iChrono);\n+                try{\n+                    e = new IllegalFieldValueException(DateTimeFieldType.year(), Integer.valueOf(i), e.getDurationType());\n+                }catch(Exception ex){ \n+                    e.setErrorMessage(\"Cannot parse \\\"\" + text + '\"');\n+                } \n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}