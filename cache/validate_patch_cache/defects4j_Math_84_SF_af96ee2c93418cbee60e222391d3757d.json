{
    "patch": "            if (comparator.compare(reflected, original[getWorst()]) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    final RealPointValuePair[] expandedSimplex = getSimplex(original, reflected, expanded);\n                    simplex = expandedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    final RealPointValuePair[] reflectedSimplex = getSimplex(original, reflected);\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, original[getWorst()]) < 0) {\n                    // accept the contracted simplex\n                    final RealPointValuePair[] contractedSimplex = getSimplex(original, contracted);\n                    simplex = contractedSimplex;\n                } else {\n\n                    // shrink the simplex around the best vertex\n                    final RealPointValuePair[] shrinkedSimplex = getShrinkedSimplex(original, best, comparator);\n                    simplex = shrinkedSimplex;\n\n                }\n\n            }\n\n            // check convergence\n            if (isConverged(simplex, comparator)) {\n                return;\n            }\n        }\n    }\n\n    private RealPointValuePair[] getSimplex(RealPointValuePair[] original,\n                                             RealPointValuePair... vertices) {\n        final RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];\n\n        // find the best vertex\n        RealPointValuePair best = vertices[0];\n        for (int i = 1; i < vertices.length; i++) {\n            if (compare(vertices[i], best, new MinimizationDirection()) < 0) {\n                best = vertices[i];\n            }\n        }\n        newSimplex[0] = best;\n\n        // fill up the simplex with other vertices\n        int i = 1;\n        for (RealPointValuePair vertex : vertices) {\n            if (!vertex.equals(best)) {\n                newSimplex[i++] = vertex;\n            }\n        }\n        for (RealPointValuePair vertex : original) {\n            if (!contains(vertices, vertex)) {\n                newSimplex[i++] = vertex;\n            }\n        }\n\n        return newSimplex;\n    }\n\n    private RealPointValuePair[] getShrinkedSimplex(RealPointValuePair[] original,\n                                                     RealPointValuePair best,\n                                                     Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];\n        newSimplex[0] = best;\n\n        for (int i = 1; i < original.length; i++) {\n            final RealPointValuePair vertex = original[i];\n            final RealPointValuePair newVertex =\n                    new RealPointValuePair(best.getPoint().add(vertex.getPoint().subtract(best.getPoint())\n                            .mapMultiply(0.5)),\n                            Double.NaN,\n                            false);\n            newSimplex[i] = newVertex;\n        }\n\n        evaluateSimplex(newSimplex, comparator);\n        return newSimplex;\n    }\n\n    private boolean contains(RealPointValuePair[] vertices, RealPointValuePair vertex) {\n        for (RealPointValuePair v : vertices) {\n            if (vertex.equals(v)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private double compare(final RealPointValuePair a,\n                            final RealPointValuePair b,\n                            final OptimizationData... optData) {\n        final PointValuePairComparator comparator = new PointValuePairComparator();\n        comparator.setOptimizationData(optData);\n        return comparator.compare(a, b);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..261c6a563 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,110 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+            if (comparator.compare(reflected, original[getWorst()]) < 0) {\n \n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    final RealPointValuePair[] expandedSimplex = getSimplex(original, reflected, expanded);\n+                    simplex = expandedSimplex;\n+                } else {\n                     // accept the reflected simplex\n+                    final RealPointValuePair[] reflectedSimplex = getSimplex(original, reflected);\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n+            } else {\n \n-            }\n+                // compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, original[getWorst()]) < 0) {\n+                    // accept the contracted simplex\n+                    final RealPointValuePair[] contractedSimplex = getSimplex(original, contracted);\n+                    simplex = contractedSimplex;\n+                } else {\n+\n+                    // shrink the simplex around the best vertex\n+                    final RealPointValuePair[] shrinkedSimplex = getShrinkedSimplex(original, best, comparator);\n+                    simplex = shrinkedSimplex;\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                }\n+\n+            }\n \n             // check convergence\n+            if (isConverged(simplex, comparator)) {\n                 return;\n             }\n+        }\n+    }\n+\n+    private RealPointValuePair[] getSimplex(RealPointValuePair[] original,\n+                                             RealPointValuePair... vertices) {\n+        final RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];\n+\n+        // find the best vertex\n+        RealPointValuePair best = vertices[0];\n+        for (int i = 1; i < vertices.length; i++) {\n+            if (compare(vertices[i], best, new MinimizationDirection()) < 0) {\n+                best = vertices[i];\n+            }\n+        }\n+        newSimplex[0] = best;\n+\n+        // fill up the simplex with other vertices\n+        int i = 1;\n+        for (RealPointValuePair vertex : vertices) {\n+            if (!vertex.equals(best)) {\n+                newSimplex[i++] = vertex;\n+            }\n+        }\n+        for (RealPointValuePair vertex : original) {\n+            if (!contains(vertices, vertex)) {\n+                newSimplex[i++] = vertex;\n+            }\n+        }\n \n+        return newSimplex;\n+    }\n+\n+    private RealPointValuePair[] getShrinkedSimplex(RealPointValuePair[] original,\n+                                                     RealPointValuePair best,\n+                                                     Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];\n+        newSimplex[0] = best;\n+\n+        for (int i = 1; i < original.length; i++) {\n+            final RealPointValuePair vertex = original[i];\n+            final RealPointValuePair newVertex =\n+                    new RealPointValuePair(best.getPoint().add(vertex.getPoint().subtract(best.getPoint())\n+                            .mapMultiply(0.5)),\n+                            Double.NaN,\n+                            false);\n+            newSimplex[i] = newVertex;\n         }\n \n+        evaluateSimplex(newSimplex, comparator);\n+        return newSimplex;\n     }\n \n+    private boolean contains(RealPointValuePair[] vertices, RealPointValuePair vertex) {\n+        for (RealPointValuePair v : vertices) {\n+            if (vertex.equals(v)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private double compare(final RealPointValuePair a,\n+                            final RealPointValuePair b,\n+                            final OptimizationData... optData) {\n+        final PointValuePairComparator comparator = new PointValuePairComparator();\n+        comparator.setOptimizationData(optData);\n+        return comparator.compare(a, b);\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}