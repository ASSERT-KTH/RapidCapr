{
    "patch": "if (finallyNode == null) {\n  return computeFollowNode(fromNode, parent, cfa);\n} else {\n  Node firstChild = finallyNode.getFirstChild();\n  if (firstChild == null) {\n    return computeFollowNode(fromNode, finallyNode.getNext(), cfa);\n  } else {\n    if (cfa != null) {\n      cfa.createEdge(fromNode, Branch.UNCOND, firstChild);\n    }\n    return computeFollowNode(firstChild, firstChild, cfa);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..a5b433ad 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,19 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (finallyNode == null) {\n+  return computeFollowNode(fromNode, parent, cfa);\n+} else {\n+  Node firstChild = finallyNode.getFirstChild();\n+  if (firstChild == null) {\n+    return computeFollowNode(fromNode, finallyNode.getNext(), cfa);\n+  } else {\n+    if (cfa != null) {\n+      cfa.createEdge(fromNode, Branch.UNCOND, firstChild);\n+    }\n+    return computeFollowNode(firstChild, firstChild, cfa);\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "junit.framework.AssertionFailedError: No cross edges found",
    "test_result": "FAIL"
}