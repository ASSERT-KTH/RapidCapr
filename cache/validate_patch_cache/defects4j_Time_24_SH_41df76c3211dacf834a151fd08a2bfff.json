{
    "patch": "            boolean retry = false;\n            for (int i = 0; i < count; i++) {\n                try {\n                    millis = savedFields[i].set(millis, resetFields);\n                } catch (IllegalFieldValueException e) {\n                    if (retry) {\n                        throw e;\n                    }\n                    retry = true;\n                    i--;\n                    count--;\n                    SavedField removed = savedFields[i];\n                    for (int j = i; j < count; j++) {\n                        savedFields[j] = savedFields[j + 1];\n                    }\n                    savedFields[count] = removed;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..97fc00c3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,22 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            boolean retry = false;\n+            for (int i = 0; i < count; i++) {\n+                try {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } catch (IllegalFieldValueException e) {\n+                    if (retry) {\n+                        throw e;\n+                    }\n+                    retry = true;\n+                    i--;\n+                    count--;\n+                    SavedField removed = savedFields[i];\n+                    for (int j = i; j < count; j++) {\n+                        savedFields[j] = savedFields[j + 1];\n+                    }\n+                    savedFields[count] = removed;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}