{
    "patch": "```\n// Deleting a property has different semantics from deleting\n// a variable, so deleted properties should not be inlined.\nif (parent.isGetProp() && parent.getParent().isDelProp() && parent.getParent().getFirstChild() == parent) {\n  return false;\n} else if (parent.getParent().isDelProp() && !NodeUtil.isAssignmentOp(parent.getParent())) {\n  return false;\n}\n\n// NOTE(nicksantos): This pass's object-splitting algorithm has\n// a blind spot. It assumes that if a property isn't defined on an\n// object, then the value is undefined. This is not true, because\n// Object.prototype can have arbitrary properties on it.\n//\n// We short-circuit this problem by bailing out if we see a reference\n// to a property that isn't defined on the object literal. This\n// isn't a perfect algorithm, but it should catch most cases.\nif (parent.isGetProp()) {\n  String propName = parent.getLastChild().getString();\n  if (!validProperties.contains(propName)) {\n    if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n      validProperties.add(propName);\n    } else {\n      return false;\n    }\n  }\n}\n```\nThis hunk handles the following cases:\n- If a property is being deleted, the method returns false except when it is a child of a parent assignment operator.\n- If a property is not contained in `validProperties`, we check if it is either on the left-hand side of a variable declaration or an assignment expression. If it is not, we return false.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..343ae425 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,37 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+```\n+// Deleting a property has different semantics from deleting\n+// a variable, so deleted properties should not be inlined.\n+if (parent.isGetProp() && parent.getParent().isDelProp() && parent.getParent().getFirstChild() == parent) {\n+  return false;\n+} else if (parent.getParent().isDelProp() && !NodeUtil.isAssignmentOp(parent.getParent())) {\n+  return false;\n+}\n+\n+// NOTE(nicksantos): This pass's object-splitting algorithm has\n+// a blind spot. It assumes that if a property isn't defined on an\n+// object, then the value is undefined. This is not true, because\n+// Object.prototype can have arbitrary properties on it.\n+//\n+// We short-circuit this problem by bailing out if we see a reference\n+// to a property that isn't defined on the object literal. This\n+// isn't a perfect algorithm, but it should catch most cases.\n+if (parent.isGetProp()) {\n+  String propName = parent.getLastChild().getString();\n+  if (!validProperties.contains(propName)) {\n+    if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n+      validProperties.add(propName);\n+    } else {\n+      return false;\n+    }\n+  }\n+}\n+```\n+This hunk handles the following cases:\n+- If a property is being deleted, the method returns false except when it is a child of a parent assignment operator.\n+- If a property is not contained in `validProperties`, we check if it is either on the left-hand side of a variable declaration or an assignment expression. If it is not, we return false.\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}