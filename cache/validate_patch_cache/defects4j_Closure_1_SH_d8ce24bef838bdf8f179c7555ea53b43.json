{
    "patch": "      // Remove unused parameters from the function arg list.\n      Node firstArg = argList.getFirstChild();\n      Node currentNode = firstArg;\n      int argPosition = 0;\n      while (currentNode != null) {\n        Node next = currentNode.getNext();\n        Var var = fnScope.getVar(currentNode.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(currentNode);\n          compiler.reportCodeChange();\n        } else {\n          if (argPosition > 0) {\n            Token argToken = currentNode.getToken();\n            argToken.setType(Token.LP);\n            argToken.setLineno(function.getLineno());\n            argToken.setCharno(function.getCharno() + 1);\n            argToken = newNode(Token.NAME, currentNode);\n            argToken.setLineno(function.getLineno());  // First line\n            argToken.setCharno(function.getCharno() + 1);  // First char\n            argList.addChildBefore(argToken, currentNode);\n            Node commaToken = newNode(Token.COMMA);\n            commaToken.setLineno(function.getLineno());\n            commaToken.setCharno(function.getCharno() + 1);\n            argList.addChildBefore(commaToken, currentNode);\n          }\n          argPosition++;\n        }\n        currentNode = next;\n      }\n      // Remove the trailing comma if there is one.\n      Node last = argList.getLastChild();\n      if (TokenUtil.isComma(last)) {\n        argList.removeChild(last);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3b3e303e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // Remove unused parameters from the function arg list.\n+      Node firstArg = argList.getFirstChild();\n+      Node currentNode = firstArg;\n+      int argPosition = 0;\n+      while (currentNode != null) {\n+        Node next = currentNode.getNext();\n+        Var var = fnScope.getVar(currentNode.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(currentNode);\n+          compiler.reportCodeChange();\n+        } else {\n+          if (argPosition > 0) {\n+            Token argToken = currentNode.getToken();\n+            argToken.setType(Token.LP);\n+            argToken.setLineno(function.getLineno());\n+            argToken.setCharno(function.getCharno() + 1);\n+            argToken = newNode(Token.NAME, currentNode);\n+            argToken.setLineno(function.getLineno());  // First line\n+            argToken.setCharno(function.getCharno() + 1);  // First char\n+            argList.addChildBefore(argToken, currentNode);\n+            Node commaToken = newNode(Token.COMMA);\n+            commaToken.setLineno(function.getLineno());\n+            commaToken.setCharno(function.getCharno() + 1);\n+            argList.addChildBefore(commaToken, currentNode);\n+          }\n+          argPosition++;\n+        }\n+        currentNode = next;\n+      }\n+      // Remove the trailing comma if there is one.\n+      Node last = argList.getLastChild();\n+      if (TokenUtil.isComma(last)) {\n+        argList.removeChild(last);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}