{
    "patch": "@SuppressWarnings(\"unchecked\")\npublic <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n            (MockSettingsImpl) org.mockito.Mockito.withSettings().spiedInstance(mock).defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    if (mock instanceof Factory) {\n        ((Factory) mock).setCallback(0, newFilter);\n    } else {\n        MockMaker mockMaker = new MockMakerImpl();\n        Class<?>[] interfaces = mock.getClass().getInterfaces();\n        T newMock = (T) mockMaker.createMock(org.mockito.mock.MockCreationSettings.classInit(mock.getClass(), interfaces, (MockSettingsImpl) org.mockito.Mockito.withSettings().spiedInstance(mock)));\n        ((MockAccess) newMock).setMockitoInterceptor(newFilter);\n        setMockHandler(newMock, newMockHandler);\n        mock = newMock;\n    }\n    setMockHandler(mock, newMockHandler);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..d4f1f0614 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,25 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+@SuppressWarnings(\"unchecked\")\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n+            (MockSettingsImpl) org.mockito.Mockito.withSettings().spiedInstance(mock).defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    if (mock instanceof Factory) {\n+        ((Factory) mock).setCallback(0, newFilter);\n+    } else {\n+        MockMaker mockMaker = new MockMakerImpl();\n+        Class<?>[] interfaces = mock.getClass().getInterfaces();\n+        T newMock = (T) mockMaker.createMock(org.mockito.mock.MockCreationSettings.classInit(mock.getClass(), interfaces, (MockSettingsImpl) org.mockito.Mockito.withSettings().spiedInstance(mock)));\n+        ((MockAccess) newMock).setMockitoInterceptor(newFilter);\n+        setMockHandler(newMock, newMockHandler);\n+        mock = newMock;\n+    }\n+    setMockHandler(mock, newMockHandler);\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}