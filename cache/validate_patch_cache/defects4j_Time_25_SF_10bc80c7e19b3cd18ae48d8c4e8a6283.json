{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the initial estimate of the offset\n    int initialOffset = getOffset(instantLocal);\n    // find the adjusted time using the initial estimate\n    long instantAdjusted = instantLocal - initialOffset;\n    // get the adjusted estimate of the offset\n    int adjustedOffset = getOffset(instantAdjusted);\n    // if the estimates are the same, return that estimate\n    if (initialOffset == adjustedOffset) {\n        return initialOffset;\n    }\n    \n    // if the estimates are different, we are near a DST transition\n    // find the transitions from both the original and adjusted times\n    long nextLocal = nextTransition(instantLocal);\n    long nextAdjusted = nextTransition(instantAdjusted);\n    // if the transitions are the same, return the initial estimate\n    if (nextLocal == nextAdjusted) {\n        return initialOffset;\n    }\n    \n    // determine which offset is used in the future and which in the past\n    int futureOffset, pastOffset;\n    long transitionTime;\n    if (nextLocal > instantLocal) {\n        futureOffset = getOffset(nextLocal);\n        pastOffset = adjustedOffset;\n        transitionTime = nextLocal;\n    } else {\n        futureOffset = adjustedOffset;\n        pastOffset = getOffset(nextLocal - 1);\n        transitionTime = nextAdjusted;\n    }\n    \n    // if the future and past offsets are the same, use them\n    if (futureOffset == pastOffset) {\n        return futureOffset;\n    }\n    \n    // determine which offset to use by comparing the times to the transition\n    long diffLocal = nextLocal - instantLocal;\n    long diffAdjusted = nextAdjusted - instantAdjusted;\n    if (diffLocal <= diffAdjusted) {\n        return initialOffset;\n    } else {\n        return adjustedOffset;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..c4df81de 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,54 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the initial estimate of the offset\n+    int initialOffset = getOffset(instantLocal);\n+    // find the adjusted time using the initial estimate\n+    long instantAdjusted = instantLocal - initialOffset;\n+    // get the adjusted estimate of the offset\n+    int adjustedOffset = getOffset(instantAdjusted);\n+    // if the estimates are the same, return that estimate\n+    if (initialOffset == adjustedOffset) {\n+        return initialOffset;\n+    }\n+    \n+    // if the estimates are different, we are near a DST transition\n+    // find the transitions from both the original and adjusted times\n+    long nextLocal = nextTransition(instantLocal);\n+    long nextAdjusted = nextTransition(instantAdjusted);\n+    // if the transitions are the same, return the initial estimate\n+    if (nextLocal == nextAdjusted) {\n+        return initialOffset;\n+    }\n+    \n+    // determine which offset is used in the future and which in the past\n+    int futureOffset, pastOffset;\n+    long transitionTime;\n+    if (nextLocal > instantLocal) {\n+        futureOffset = getOffset(nextLocal);\n+        pastOffset = adjustedOffset;\n+        transitionTime = nextLocal;\n+    } else {\n+        futureOffset = adjustedOffset;\n+        pastOffset = getOffset(nextLocal - 1);\n+        transitionTime = nextAdjusted;\n+    }\n+    \n+    // if the future and past offsets are the same, use them\n+    if (futureOffset == pastOffset) {\n+        return futureOffset;\n+    }\n+    \n+    // determine which offset to use by comparing the times to the transition\n+    long diffLocal = nextLocal - instantLocal;\n+    long diffAdjusted = nextAdjusted - instantAdjusted;\n+    if (diffLocal <= diffAdjusted) {\n+        return initialOffset;\n+    } else {\n+        return adjustedOffset;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2007-0[4-01T01:00:00.000-04]:00> but was:<2007-0[3-31T23:00:00.000-05]:00>",
    "test_result": "FAIL"
}