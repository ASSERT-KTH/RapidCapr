{
    "patch": "attachLiteralTypes(n);\nswitch (n.getType()) {\n  case Token.SCRIPT:\n  case Token.BLOCK:\n    switch (parent != null ? parent.getType() : -1) {\n      case Token.SCRIPT:\n        defineGlobalVar(n);\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        if (n.getFirstChild() != null && n.getFirstChild().getType() != Token.ARRAY_PATTERN && n.getFirstChild().getType() != Token.OBJECT_PATTERN) {\n          defineVars(n);\n        }\n        break;\n      default:\n        break;\n    }\n    break;\n  case Token.TRY:\n    if (parent.getType() == Token.BLOCK) {\n      Node child = n.getFirstChild();\n      while (child != null && child.getType() != Token.CATCH) {\n        child = child.getNext();\n      }\n      if (child != null) {\n        defineCatch(child, n);\n      }\n    }\n    break;\n  case Token.CATCH:\n    defineCatch(n, parent);\n    break;\n  case Token.FUNCTION:\n    if (NodeUtil.isFunctionExpression(n)) {\n      defineDeclaredFunction(n, parent);\n    } else {\n      defineVars(n);\n    }\n    break;\n  case Token.NAME:\n    Node value = NodeUtil.getRValueOfLValue(n);\n    if (value != null) {\n      attachLiteralTypes(value);\n    }\n    break;\n  case Token.LET:\n  case Token.CONST:\n    defineVars(n);\n    break;\n  default:\n    break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..1071044d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,60 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+attachLiteralTypes(n);\n+switch (n.getType()) {\n+  case Token.SCRIPT:\n+  case Token.BLOCK:\n+    switch (parent != null ? parent.getType() : -1) {\n+      case Token.SCRIPT:\n+        defineGlobalVar(n);\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        if (n.getFirstChild() != null && n.getFirstChild().getType() != Token.ARRAY_PATTERN && n.getFirstChild().getType() != Token.OBJECT_PATTERN) {\n+          defineVars(n);\n+        }\n+        break;\n+      default:\n+        break;\n+    }\n+    break;\n+  case Token.TRY:\n+    if (parent.getType() == Token.BLOCK) {\n+      Node child = n.getFirstChild();\n+      while (child != null && child.getType() != Token.CATCH) {\n+        child = child.getNext();\n       }\n+      if (child != null) {\n+        defineCatch(child, n);\n+      }\n+    }\n+    break;\n+  case Token.CATCH:\n+    defineCatch(n, parent);\n+    break;\n+  case Token.FUNCTION:\n+    if (NodeUtil.isFunctionExpression(n)) {\n+      defineDeclaredFunction(n, parent);\n+    } else {\n+      defineVars(n);\n+    }\n+    break;\n+  case Token.NAME:\n+    Node value = NodeUtil.getRValueOfLValue(n);\n+    if (value != null) {\n+      attachLiteralTypes(value);\n+    }\n+    break;\n+  case Token.LET:\n+  case Token.CONST:\n+    defineVars(n);\n+    break;\n+  default:\n+    break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}