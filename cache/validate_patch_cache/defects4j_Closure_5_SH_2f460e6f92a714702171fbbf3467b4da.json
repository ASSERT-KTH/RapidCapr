{
    "patch": "          if (parent.isDelProp()) {\n            return false;\n          }\n          \n          // GetProp nodes must have exactly one child; a STRING node.\n          Preconditions.checkState(parent.getChildCount() == 2);\n          Node propNameNode = parent.getLastChild();\n          Preconditions.checkState(propNameNode.isString());\n          \n          // NOTE(nicksantos): This pass's object-splitting algorithm has\n          // a blind spot. It assumes that if a property isn't defined on an\n          // object, then the value is undefined. This is not true, because\n          // Object.prototype can have arbitrary properties on it.\n          //\n          // We short-circuit this problem by bailing out if we see a reference\n          // to a property that isn't defined on the object literal. This\n          // isn't a perfect algorithm, but it should catch most cases.\n          String propName = propNameNode.getString();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..d837821e 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,24 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+          if (parent.isDelProp()) {\n+            return false;\n+          }\n+          \n+          // GetProp nodes must have exactly one child; a STRING node.\n+          Preconditions.checkState(parent.getChildCount() == 2);\n+          Node propNameNode = parent.getLastChild();\n+          Preconditions.checkState(propNameNode.isString());\n+          \n+          // NOTE(nicksantos): This pass's object-splitting algorithm has\n+          // a blind spot. It assumes that if a property isn't defined on an\n+          // object, then the value is undefined. This is not true, because\n+          // Object.prototype can have arbitrary properties on it.\n+          //\n+          // We short-circuit this problem by bailing out if we see a reference\n+          // to a property that isn't defined on the object literal. This\n+          // isn't a perfect algorithm, but it should catch most cases.\n+          String propName = propNameNode.getString();\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: variable propName is already defined in method isInlinableObject(List<Reference>)",
    "test_result": "ERROR"
}