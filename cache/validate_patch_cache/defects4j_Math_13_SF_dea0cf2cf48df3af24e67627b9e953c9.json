{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    try {\n        EigenDecomposition dec = new EigenDecomposition(m);\n\n        RealMatrix v = dec.getV();\n        RealMatrix dv = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n\n        for (int i = 0; i < m.getRowDimension(); i++) {\n            double lambda = dec.getRealEigenvalue(i);\n            if (lambda > 0) {\n                dv.setEntry(i, i, Math.sqrt(lambda));\n            }\n        }\n\n        RealMatrix vt = v.transpose();\n        return v.multiply(dv).multiply(vt);\n    } catch (OutOfMemoryError e) {\n        final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n        throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..af2e9a44b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    try {\n+        EigenDecomposition dec = new EigenDecomposition(m);\n+\n+        RealMatrix v = dec.getV();\n+        RealMatrix dv = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+\n+        for (int i = 0; i < m.getRowDimension(); i++) {\n+            double lambda = dec.getRealEigenvalue(i);\n+            if (lambda > 0) {\n+                dv.setEntry(i, i, Math.sqrt(lambda));\n+            }\n+        }\n+\n+        RealMatrix vt = v.transpose();\n+        return v.multiply(dv).multiply(vt);\n+    } catch (OutOfMemoryError e) {\n+        final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n+        throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n     }\n }\n+}",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space limit reached (14564 MB)",
    "test_result": "FAIL"
}