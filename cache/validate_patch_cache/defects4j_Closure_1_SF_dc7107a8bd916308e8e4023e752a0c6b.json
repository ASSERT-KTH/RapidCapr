{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n            && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node lastArg = argList.getLastChild();\n        while (lastArg != null && lastArg.isName()) {\n            Var var = fnScope.getVar(lastArg.getString());\n            if (var == null) {\n                // Param must have been added by a parent scope,\n                // so must simply be skipped\n                break;\n            }\n            if (!referenced.contains(var)) {\n                argList.removeChild(lastArg);\n                compiler.reportCodeChange();\n                lastArg = argList.getLastChild();\n            } else {\n                // Found the first referenced arg - all those after are also referenced, so we're done.\n                break;\n            }\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..fb85939e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,41 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     Node function = fnScope.getRootNode();\n \n     Preconditions.checkState(function.isFunction());\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n+        // The parameters object literal setters can not be removed.\n+        return;\n     }\n \n     Node argList = getFunctionArgList(function);\n     boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n+            && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+        // Strip unreferenced args off the end of the function declaration.\n+        Node lastArg = argList.getLastChild();\n+        while (lastArg != null && lastArg.isName()) {\n+            Var var = fnScope.getVar(lastArg.getString());\n+            if (var == null) {\n+                // Param must have been added by a parent scope,\n+                // so must simply be skipped\n+                break;\n+            }\n+            if (!referenced.contains(var)) {\n+                argList.removeChild(lastArg);\n+                compiler.reportCodeChange();\n+                lastArg = argList.getLastChild();\n+            } else {\n+                // Found the first referenced arg - all those after are also referenced, so we're done.\n+                break;\n+            }\n         }\n-      }\n     } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+        callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+}\n \n \n   /**",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}