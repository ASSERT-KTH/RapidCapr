{
    "patch": "public boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n    // NOTE(nicksantos): In our type system, we use {function(...?)} and\n    // {function(...NoType)} to to indicate that arity should not be\n    // checked. Strictly speaking, this is not a correct formulation,\n    // because now a sub-function can required arguments that are var_args\n    // in the super-function. So we special-case this.\n  if (this.parameters == null\n      || that.parameters == null) {\n    return this.parameters == that.parameters\n        && this.parameters.isVarArgs() == that.parameters.isVarArgs();\n  }\n\n  Node thisParam = this.parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (thisParam != null && thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    if (thisIsVarArgs) {\n      if (thatIsVarArgs) {\n        // If both function parameters are vararg, there is nothing left to compare.\n        if (!thisParamType.isUnknownType() && !thatParamType.isUnknownType()\n            && !thisParamType.isSubtypeWithoutStructuralTyping(thatParamType)) {\n          return false;\n        }\n        return true;\n      }\n      // that can't be a supertype, because it's missing a rest parameter\n      while ((thatParam = thatParam.getNext()) != null) {\n        JSType thatParamType2 = thatParam.getJSType();\n        if (thatParamType2 == null || thatParamType2.isUnknownType()) {\n          continue;\n        }\n        if (!thatParamType2.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    // this can't be a supertype, because it's missing a required argument.\n    if (thatIsVarArgs) {\n      if (thatParam.getNext() != null) {\n        return false;\n      }\n      if (!thatParamType.isUnknownType()\n          && !thatParamType.isSubtypeWithoutStructuralTyping(thisParamType)) {\n        return false;\n      }\n      // All other parameters in the called function should match\n      // the required arguments for this function.\n      Node thisParam2 = thisParam.getNext();\n      while (thisParam2 != null) {\n        JSType thisParamType2 = thisParam2.getJSType();\n        if (thisParamType2 == null || thisParamType2.isUnknownType()) {\n          thisParam2 = thisParam2.getNext();\n          continue;\n        }\n        if (!thatParamType.isSubtype(thisParamType2)) {\n          return false;\n        }\n        thatParamType = thisParamType2;\n        thisParam2 = thisParam2.getNext();\n      }\n      return true;\n    }\n\n    if (thisParamType == null) {\n      return false;\n    } else if (thatParamType != null\n        && !thatParamType.isSubtypeWithoutStructuralTyping(thisParamType)) {\n      return false;\n    }\n\n    thisParam = thisParam.getNext();\n    thatParam = thatParam.getNext();\n  }\n\n  // that can't be a supertype, because it's missing a required arguement.\n  return thatParam == null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..e7fd802c 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,82 +77,102 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n-    if (!(other instanceof ArrowType)) {\n-      return false;\n-    }\n+public boolean isSubtype(JSType other) {\n+  if (!(other instanceof ArrowType)) {\n+    return false;\n+  }\n \n-    ArrowType that = (ArrowType) other;\n+  ArrowType that = (ArrowType) other;\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+  // this.returnType <: that.returnType (covariant)\n+  if (!this.returnType.isSubtype(that.returnType)) {\n+    return false;\n+  }\n \n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n-    }\n+    // NOTE(nicksantos): In our type system, we use {function(...?)} and\n+    // {function(...NoType)} to to indicate that arity should not be\n+    // checked. Strictly speaking, this is not a correct formulation,\n+    // because now a sub-function can required arguments that are var_args\n+    // in the super-function. So we special-case this.\n+  if (this.parameters == null\n+      || that.parameters == null) {\n+    return this.parameters == that.parameters\n+        && this.parameters.isVarArgs() == that.parameters.isVarArgs();\n+  }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n-    Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n+  Node thisParam = this.parameters.getFirstChild();\n+  Node thatParam = that.parameters.getFirstChild();\n+  while (thisParam != null && thatParam != null) {\n+    JSType thisParamType = thisParam.getJSType();\n+    JSType thatParamType = thatParam.getJSType();\n+\n+    boolean thisIsVarArgs = thisParam.isVarArgs();\n+    boolean thatIsVarArgs = thatParam.isVarArgs();\n+\n+    if (thisIsVarArgs) {\n+      if (thatIsVarArgs) {\n+        // If both function parameters are vararg, there is nothing left to compare.\n+        if (!thisParamType.isUnknownType() && !thatParamType.isUnknownType()\n+            && !thisParamType.isSubtypeWithoutStructuralTyping(thatParamType)) {\n           return false;\n         }\n+        return true;\n       }\n+      // that can't be a supertype, because it's missing a rest parameter\n+      while ((thatParam = thatParam.getNext()) != null) {\n+        JSType thatParamType2 = thatParam.getJSType();\n+        if (thatParamType2 == null || thatParamType2.isUnknownType()) {\n+          continue;\n+        }\n+        if (!thatParamType2.isSubtype(thisParamType)) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    }\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n-\n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n-\n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n+    // this can't be a supertype, because it's missing a required argument.\n+    if (thatIsVarArgs) {\n+      if (thatParam.getNext() != null) {\n+        return false;\n       }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n+      if (!thatParamType.isUnknownType()\n+          && !thatParamType.isSubtypeWithoutStructuralTyping(thisParamType)) {\n+        return false;\n       }\n-\n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n+      // All other parameters in the called function should match\n+      // the required arguments for this function.\n+      Node thisParam2 = thisParam.getNext();\n+      while (thisParam2 != null) {\n+        JSType thisParamType2 = thisParam2.getJSType();\n+        if (thisParamType2 == null || thisParamType2.isUnknownType()) {\n+          thisParam2 = thisParam2.getNext();\n+          continue;\n+        }\n+        if (!thatParamType.isSubtype(thisParamType2)) {\n+          return false;\n+        }\n+        thatParamType = thisParamType2;\n+        thisParam2 = thisParam2.getNext();\n       }\n+      return true;\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+    if (thisParamType == null) {\n+      return false;\n+    } else if (thatParamType != null\n+        && !thatParamType.isSubtypeWithoutStructuralTyping(thisParamType)) {\n+      return false;\n+    }\n \n-    return true;\n+    thisParam = thisParam.getNext();\n+    thatParam = thatParam.getNext();\n   }\n \n+  // that can't be a supertype, because it's missing a required arguement.\n+  return thatParam == null;\n+}\n+\n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter\n    *     spec.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}