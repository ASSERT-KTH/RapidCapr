{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    \n    boolean monthAltered = false;\n    \n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n            \n            DateTimeField field = savedFields[i].iField;\n            if (field != null) {\n                DurationFieldType fieldType = field.getDurationType();\n                if (fieldType == DurationFieldType.months() && field.get(millis) == 2) {\n                    // Day exceeds month length on a non-leap year, throw exception\n                    int year = DateTimeUtils.getYear(LocalDate.fromDateFields(new DateTime(millis, iChrono)));\n                    if (!iChrono.isLeapYear(year) && savedFields[i + 1].iField != null &&\n                            savedFields[i + 1].iField.getType().equals(DateTimeFieldType.dayOfMonth())) {\n                        int dayOfMonth = savedFields[i + 1].getParsedValue();\n                        if (dayOfMonth > 28) {\n                            String message = \"Value \" + dayOfMonth +\n                                    \" for \" + savedFields[i + 1].iField.getName() +\n                                    \" must be in the range [1,28]\";\n                            if (text != null) {\n                                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                            }\n                            throw new IllegalFieldValueException(message, DateTimeFieldType.dayOfMonth(), dayOfMonth, null, null);\n                        }\n                    }\n                    \n                    if (!monthAltered) {\n                        // Alter month field if exceeds February\n                        saveField(DateTimeFieldType.monthOfYear(), 3);\n                        monthAltered = true;\n                    }\n                }\n            }\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone != null) {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    } else if (iOffset != 0) {\n        millis -= iOffset;\n    }\n    \n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..79a65c6f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,55 +328,75 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    \n+    boolean monthAltered = false;\n+    \n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+            \n+            DateTimeField field = savedFields[i].iField;\n+            if (field != null) {\n+                DurationFieldType fieldType = field.getDurationType();\n+                if (fieldType == DurationFieldType.months() && field.get(millis) == 2) {\n+                    // Day exceeds month length on a non-leap year, throw exception\n+                    int year = DateTimeUtils.getYear(LocalDate.fromDateFields(new DateTime(millis, iChrono)));\n+                    if (!iChrono.isLeapYear(year) && savedFields[i + 1].iField != null &&\n+                            savedFields[i + 1].iField.getType().equals(DateTimeFieldType.dayOfMonth())) {\n+                        int dayOfMonth = savedFields[i + 1].getParsedValue();\n+                        if (dayOfMonth > 28) {\n+                            String message = \"Value \" + dayOfMonth +\n+                                    \" for \" + savedFields[i + 1].iField.getName() +\n+                                    \" must be in the range [1,28]\";\n+                            if (text != null) {\n+                                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                            }\n+                            throw new IllegalFieldValueException(message, DateTimeFieldType.dayOfMonth(), dayOfMonth, null, null);\n+                        }\n+                    }\n+                    \n+                    if (!monthAltered) {\n+                        // Alter month field if exceeds February\n+                        saveField(DateTimeFieldType.monthOfYear(), 3);\n+                        monthAltered = true;\n+                    }\n+                }\n             }\n         }\n-\n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n+        throw e;\n+    }\n+    \n+    if (iZone != null) {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n                     \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n+    } else if (iOffset != 0) {\n+        millis -= iOffset;\n     }\n     \n+    return millis;\n+}\n+    \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right\n      * choice since it always creates an internal copy of the array, even if it",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}