{
    "patch": "  public class MinimizeExitPoints\n      implements CompilerPass {\n    AbstractCompiler compiler;\n\n    public MinimizeExitPoints(AbstractCompiler compiler) {\n      this.compiler = compiler;\n    }\n\n    public void process(Node externs, Node js) {\n      runOnFunctionBody(js);\n    }\n    \n    private static final boolean MINIMIZE_EXIT_POINTS =\n        System.getProperty(\"minimize_exit_points\") != null;\n\n    /** Determines whether a function is eligible for rewrite. */\n    static boolean canRewriteFunction(NodeTraversal t, Node fn) {\n      if (!fn.isFunction()) {\n        return false;\n      }\n\n      if (!NodeUtil.isFunctionExpression(fn)) {\n        return false;\n      }\n\n      if (fn.isArrowFunction()) {\n        // Arrow functions cannot be rewritten because they have no \"this\".\n        return false;\n      }\n\n      // Disallow destructuring, varargs, and inner functions.\n      Node params = fn.getSecondChild();\n      for (Node param = params.getFirstChild(); param != null; param = param.getNext()) {\n        if (param.isDestructuringPattern()) {\n          return false;\n        }\n        if (param.isDefaultValue() || param.isRest()) {\n          return false;\n        }\n        if (param.hasChildren() && param.getFirstChild().isFunction()) {\n          return false;\n        }\n        if (param.isName() && t.getScope().getVar(param.getString()) != null) {\n          return false;\n        }\n      }\n\n      return NodeUtil.getDeclaredVars(fn.getParent()).length == 0;\n    }\n\n    static void runOnFunctionBody(Node root) {\n      // Walk over all the function bodies, keeping track of the UCETs\n      // and rewriting where possible.\n      new NodeTraversal(new MinimizeExitPointsCallback())\n          .traverseWithScope(root, root.getEnclosingScope());\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..6775336e 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,63 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+  public class MinimizeExitPoints\n+      implements CompilerPass {\n+    AbstractCompiler compiler;\n+\n+    public MinimizeExitPoints(AbstractCompiler compiler) {\n+      this.compiler = compiler;\n+    }\n+\n+    public void process(Node externs, Node js) {\n+      runOnFunctionBody(js);\n+    }\n+    \n+    private static final boolean MINIMIZE_EXIT_POINTS =\n+        System.getProperty(\"minimize_exit_points\") != null;\n+\n+    /** Determines whether a function is eligible for rewrite. */\n+    static boolean canRewriteFunction(NodeTraversal t, Node fn) {\n+      if (!fn.isFunction()) {\n+        return false;\n+      }\n+\n+      if (!NodeUtil.isFunctionExpression(fn)) {\n+        return false;\n+      }\n+\n+      if (fn.isArrowFunction()) {\n+        // Arrow functions cannot be rewritten because they have no \"this\".\n+        return false;\n+      }\n+\n+      // Disallow destructuring, varargs, and inner functions.\n+      Node params = fn.getSecondChild();\n+      for (Node param = params.getFirstChild(); param != null; param = param.getNext()) {\n+        if (param.isDestructuringPattern()) {\n+          return false;\n+        }\n+        if (param.isDefaultValue() || param.isRest()) {\n+          return false;\n+        }\n+        if (param.hasChildren() && param.getFirstChild().isFunction()) {\n+          return false;\n+        }\n+        if (param.isName() && t.getScope().getVar(param.getString()) != null) {\n+          return false;\n+        }\n+      }\n+\n+      return NodeUtil.getDeclaredVars(fn.getParent()).length == 0;\n+    }\n+\n+    static void runOnFunctionBody(Node root) {\n+      // Walk over all the function bodies, keeping track of the UCETs\n+      // and rewriting where possible.\n+      new NodeTraversal(new MinimizeExitPointsCallback())\n+          .traverseWithScope(root, root.getEnclosingScope());\n+    }\n+  }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}