{
    "patch": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n  boolean isOverride = parent != null &&\n      NodeUtil.isAssignmentOp(parent) &&\n      NodeUtil.isLValue(getprop);\n\n  ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n \n  if (objectType != null) {\n    JSDocInfo docInfo = null;\n    JSType ownerType = normalizeClassType(objectType);\n    boolean sameInput = false;\n    Visibility visibility = null;\n    // Is this a normal property access, or are we trying to override\n    // an existing property?\n    if (isOverride) {\n      // Check an ASSIGN statement that's trying to override a property\n      // on a superclass.\n      JSType rValueType = parent.getLastChild().getJSType();\n      if (rValueType != null) {\n        ObjectType rType =\n            ObjectType.cast(dereference(parent.getLastChild().getJSType()));\n        if (rType != null) {\n          JSDocInfo overridingJsDoc = parent.getJSDocInfo();\n          Visibility overridingVisibility = overridingJsDoc == null ?\n              Visibility.INHERITED : overridingJsDoc.getVisibility();\n          for (; rType != null; rType = rType.getImplicitPrototype()) {\n            docInfo = rType.getOwnPropertyJSDocInfo(propertyName);\n            if (docInfo != null && \n                docInfo.getVisibility() != Visibility.INHERITED) {\n              visibility = docInfo.getVisibility();\n              sameInput = \n                  t.getInput().getName().equals(docInfo.getSourceName());\n              break;\n            } else {\n              docInfo = null;\n            }\n          }\n          if (docInfo == null) {\n            compiler.report(t.makeError(getprop, UNKNOWN_OVERRIDE,\n                propertyName, rValueType.toString()));\n            return;\n          }\n          if (visibility == Visibility.PRIVATE) {\n            if (!sameInput) {\n              compiler.report(\n                  t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n            }\n          } else if (overridingVisibility != Visibility.INHERITED &&\n              overridingVisibility != visibility) {\n            compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH,\n                visibility.name(), rType.toString(),\n                overridingVisibility.name()));\n          }\n          return;\n        }\n      }\n    }\n\n    // Find the lowest property defined on a class with visibility\n    // information.\n    for (; objectType != null;\n         objectType = objectType.getImplicitPrototype()) {\n      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null && \n          docInfo.getVisibility() != Visibility.INHERITED) {\n        visibility = docInfo.getVisibility();\n        sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n        break;\n      } else {\n        docInfo = null;\n      }\n    }\n\n    if (docInfo == null) {\n      // We couldn't find a visibility modifier; assume it's public.\n      return;\n    }\n\n    if (sameInput) {\n      // private access is always allowed in the same file.\n      return;\n    } else if (visibility == Visibility.PRIVATE && \n        (currentClass == null || ownerType.differsFrom(currentClass))) {\n      if (docInfo.isConstructor() &&\n          isValidPrivateConstructorAccess(parent)) {\n        return;\n      }\n\n      // private access is not allowed outside the file from a different\n      // enclosing class.\n      compiler.report(\n          t.makeError(getprop,\n              BAD_PRIVATE_PROPERTY_ACCESS,\n              propertyName,\n              validator.getReadableJSTypeName(\n                  getprop.getFirstChild(), true)));\n    } else if (visibility == Visibility.PROTECTED) {\n      // There are 3 types of legal accesses of a protected property:\n      // 1) Accesses in the same file\n      // 2) Overriding the property in a subclass\n      // 3) Accessing the property from inside a subclass\n      // The first two have already been checked for.\n      if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n        compiler.report(\n            t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n                propertyName,\n                validator.getReadableJSTypeName(\n                    getprop.getFirstChild(), true)));\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..e37d4755 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -404,100 +404,119 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n    * @param t The current traversal.\n    * @param getprop The getprop node.\n    */\n-  private void checkPropertyVisibility(NodeTraversal t,\n-      Node getprop, Node parent) {\n-    ObjectType objectType =\n-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n-    String propertyName = getprop.getLastChild().getString();\n-\n-    if (objectType != null) {\n-      // Is this a normal property access, or are we trying to override\n-      // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n-          parent.getType() == Token.ASSIGN &&\n-          parent.getFirstChild() == getprop;\n-\n-      // Find the lowest property defined on a class with visibility\n-      // information.\n-      if (isOverride) {\n-        objectType = objectType.getImplicitPrototype();\n-      }\n-      JSDocInfo docInfo = null;\n-      for (; objectType != null;\n-           objectType = objectType.getImplicitPrototype()) {\n-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (docInfo != null &&\n-            docInfo.getVisibility() != Visibility.INHERITED) {\n-          break;\n+private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n+  boolean isOverride = parent != null &&\n+      NodeUtil.isAssignmentOp(parent) &&\n+      NodeUtil.isLValue(getprop);\n+\n+  ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n+  String propertyName = getprop.getLastChild().getString();\n+ \n+  if (objectType != null) {\n+    JSDocInfo docInfo = null;\n+    JSType ownerType = normalizeClassType(objectType);\n+    boolean sameInput = false;\n+    Visibility visibility = null;\n+    // Is this a normal property access, or are we trying to override\n+    // an existing property?\n+    if (isOverride) {\n+      // Check an ASSIGN statement that's trying to override a property\n+      // on a superclass.\n+      JSType rValueType = parent.getLastChild().getJSType();\n+      if (rValueType != null) {\n+        ObjectType rType =\n+            ObjectType.cast(dereference(parent.getLastChild().getJSType()));\n+        if (rType != null) {\n+          JSDocInfo overridingJsDoc = parent.getJSDocInfo();\n+          Visibility overridingVisibility = overridingJsDoc == null ?\n+              Visibility.INHERITED : overridingJsDoc.getVisibility();\n+          for (; rType != null; rType = rType.getImplicitPrototype()) {\n+            docInfo = rType.getOwnPropertyJSDocInfo(propertyName);\n+            if (docInfo != null && \n+                docInfo.getVisibility() != Visibility.INHERITED) {\n+              visibility = docInfo.getVisibility();\n+              sameInput = \n+                  t.getInput().getName().equals(docInfo.getSourceName());\n+              break;\n+            } else {\n+              docInfo = null;\n+            }\n+          }\n+          if (docInfo == null) {\n+            compiler.report(t.makeError(getprop, UNKNOWN_OVERRIDE,\n+                propertyName, rValueType.toString()));\n+            return;\n+          }\n+          if (visibility == Visibility.PRIVATE) {\n+            if (!sameInput) {\n+              compiler.report(\n+                  t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n+            }\n+          } else if (overridingVisibility != Visibility.INHERITED &&\n+              overridingVisibility != visibility) {\n+            compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH,\n+                visibility.name(), rType.toString(),\n+                overridingVisibility.name()));\n+          }\n+          return;\n         }\n       }\n+    }\n \n-      if (objectType == null) {\n-        // We couldn't find a visibility modifier; assume it's public.\n-        return;\n+    // Find the lowest property defined on a class with visibility\n+    // information.\n+    for (; objectType != null;\n+         objectType = objectType.getImplicitPrototype()) {\n+      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n+      if (docInfo != null && \n+          docInfo.getVisibility() != Visibility.INHERITED) {\n+        visibility = docInfo.getVisibility();\n+        sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n+        break;\n+      } else {\n+        docInfo = null;\n       }\n+    }\n \n-      boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n-      Visibility visibility = docInfo.getVisibility();\n-      JSType ownerType = normalizeClassType(objectType);\n-      if (isOverride) {\n-        // Check an ASSIGN statement that's trying to override a property\n-        // on a superclass.\n-        JSDocInfo overridingInfo = parent.getJSDocInfo();\n-        Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n-\n-        // Check that (a) the property *can* be overridden, and\n-        // (b) that the visibility of the override is the same as the\n-        // visibility of the original property.\n-        if (visibility == Visibility.PRIVATE && !sameInput) {\n-          compiler.report(\n-              t.makeError(getprop, PRIVATE_OVERRIDE,\n-                  objectType.toString()));\n-        } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n-          compiler.report(\n-              t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n-                  overridingVisibility.name()));\n-        }\n-      } else {\n-        if (sameInput) {\n-          // private access is always allowed in the same file.\n-          return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n-          if (docInfo.isConstructor() &&\n-              isValidPrivateConstructorAccess(parent)) {\n-            return;\n-          }\n+    if (docInfo == null) {\n+      // We couldn't find a visibility modifier; assume it's public.\n+      return;\n+    }\n \n-          // private access is not allowed outside the file from a different\n-          // enclosing class.\n-          compiler.report(\n-              t.makeError(getprop,\n-                  BAD_PRIVATE_PROPERTY_ACCESS,\n-                  propertyName,\n-                  validator.getReadableJSTypeName(\n-                      getprop.getFirstChild(), true)));\n-        } else if (visibility == Visibility.PROTECTED) {\n-          // There are 3 types of legal accesses of a protected property:\n-          // 1) Accesses in the same file\n-          // 2) Overriding the property in a subclass\n-          // 3) Accessing the property from inside a subclass\n-          // The first two have already been checked for.\n-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n-            compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n-                    propertyName,\n-                    validator.getReadableJSTypeName(\n-                        getprop.getFirstChild(), true)));\n-          }\n-        }\n+    if (sameInput) {\n+      // private access is always allowed in the same file.\n+      return;\n+    } else if (visibility == Visibility.PRIVATE && \n+        (currentClass == null || ownerType.differsFrom(currentClass))) {\n+      if (docInfo.isConstructor() &&\n+          isValidPrivateConstructorAccess(parent)) {\n+        return;\n+      }\n+\n+      // private access is not allowed outside the file from a different\n+      // enclosing class.\n+      compiler.report(\n+          t.makeError(getprop,\n+              BAD_PRIVATE_PROPERTY_ACCESS,\n+              propertyName,\n+              validator.getReadableJSTypeName(\n+                  getprop.getFirstChild(), true)));\n+    } else if (visibility == Visibility.PROTECTED) {\n+      // There are 3 types of legal accesses of a protected property:\n+      // 1) Accesses in the same file\n+      // 2) Overriding the property in a subclass\n+      // 3) Accessing the property from inside a subclass\n+      // The first two have already been checked for.\n+      if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n+        compiler.report(\n+            t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n+                propertyName,\n+                validator.getReadableJSTypeName(\n+                    getprop.getFirstChild(), true)));\n       }\n     }\n   }\n+}\n \n   /**\n    * Whether the given access of a private constructor is legal.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}