{
    "patch": "if (options.checkGlobalThisLevel.isOn()) {\n  options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n} else {\n  // If checkGlobalThisLevel is not enabled, check for uses of `this` in global scope should not\n  // result in warnings.\n  CheckLevel globalThisCheckLevel = CheckLevel.OFF;\n  if (options.checkVars || options.checkSuspiciousCode ||\n      options.checkMissingReturn || options.checkMissingGetCssNameLevel.isOn()) {\n    // If any of the above checks are enabled, report GlobalThis as error.\n    globalThisCheckLevel = CheckLevel.ERROR;\n  }\n  options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, globalThisCheckLevel);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..e486a767 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,19 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+if (options.checkGlobalThisLevel.isOn()) {\n+  options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n+} else {\n+  // If checkGlobalThisLevel is not enabled, check for uses of `this` in global scope should not\n+  // result in warnings.\n+  CheckLevel globalThisCheckLevel = CheckLevel.OFF;\n+  if (options.checkVars || options.checkSuspiciousCode ||\n+      options.checkMissingReturn || options.checkMissingGetCssNameLevel.isOn()) {\n+    // If any of the above checks are enabled, report GlobalThis as error.\n+    globalThisCheckLevel = CheckLevel.ERROR;\n+  }\n+  options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, globalThisCheckLevel);\n+}\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}