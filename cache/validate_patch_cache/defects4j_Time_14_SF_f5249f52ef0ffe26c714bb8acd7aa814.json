{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        int maxDay = 0;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex) {\n                maxDay = partial.getFieldType(i).getField(iChronology).getMaximumValue(instant);\n            }\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        if (maxDay == 0) {\n            maxDay = partial.getFieldType(fieldIndex).getField(iChronology).getMaximumValue(instant);\n        }\n        instant = add(instant, valueToAdd);\n\n        int[] result = iChronology.get(partial, instant);\n        int resultDay = result[fieldIndex];\n\n        while (resultDay > maxDay) {\n            try {\n                // Attempt to resolve the result day overflow\n                instant = partial.getFieldType(fieldIndex).getField(iChronology).add(instant, -1);\n                result = iChronology.get(partial, instant);\n                resultDay = result[fieldIndex];\n                break;\n            } catch (org.joda.time.IllegalFieldValueException e) {\n                // Overflow occurred again, try next day\n                resultDay--;\n            }\n        }\n\n        result[fieldIndex] = resultDay;\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..9eae8002 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,49 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        int maxDay = 0;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex) {\n+                maxDay = partial.getFieldType(i).getField(iChronology).getMaximumValue(instant);\n+            }\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        }\n+        if (maxDay == 0) {\n+            maxDay = partial.getFieldType(fieldIndex).getField(iChronology).getMaximumValue(instant);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        instant = add(instant, valueToAdd);\n+\n+        int[] result = iChronology.get(partial, instant);\n+        int resultDay = result[fieldIndex];\n+\n+        while (resultDay > maxDay) {\n+            try {\n+                // Attempt to resolve the result day overflow\n+                instant = partial.getFieldType(fieldIndex).getField(iChronology).add(instant, -1);\n+                result = iChronology.get(partial, instant);\n+                resultDay = result[fieldIndex];\n+                break;\n+            } catch (org.joda.time.IllegalFieldValueException e) {\n+                // Overflow occurred again, try next day\n+                resultDay--;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        result[fieldIndex] = resultDay;\n+        return result;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]",
    "test_result": "FAIL"
}