{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (n.isAssign() && NodeUtil.getLValueName(n.getFirstChild()).isEmpty()) {\n      // We can't optimize this.  It is safe to fold, but we don't\n      // want to mess with it and generate different code.\n      // This also means there is never a side-effect to folding this,\n      // as we know the assignmentTarget isn't used elsewhere.\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || intIndex < 0) {\n      String errorMsg = intIndex != index ?\n          INVALID_GETELEM_INDEX_ERROR :\n          \"Array index out of bounds: \" + prettyPrint(right) +\n          \" should be a non-negative integer\";\n      error(errorMsg, right);\n      return n;\n    }\n\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n      elem = current;\n      current = current.getNext();\n    }\n\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Handle effect-less GETELEM specially, since we can fold them all.\n    if (NodeUtil.isEffectivelyEmptyStatement(parent)) {\n      // Fold [] to undefined, or the last constant element as the array is immutable.\n      if (left.getType() != Token.ARRAYLIT) {\n        n.getParent().replaceChild(n, elem);\n        reportCodeChange();\n        return elem;\n      }\n      current = left.getFirstChild();\n      Node lastConst = null;\n      while (current != null) {\n        Node elementToTest = current;\n        current = current.getNext();\n\n        if (elementToTest.isEmpty()) {\n          elem = NodeUtil.newUndefinedNode(elem);\n          n.getParent().replaceChild(n, elem);\n          reportCodeChange();\n          return elem;\n        } else if (!NodeUtil.mayHaveSideEffects(elementToTest)) {\n          lastConst = elementToTest;\n        } else {\n          lastConst = null;\n        }\n        elem = elementToTest;\n      }\n      if (lastConst != null) {\n        left.removeChild(lastConst);\n        n.getParent().replaceChild(n, lastConst);\n        reportCodeChange();\n        return lastConst;\n      }\n    }\n\n    // Replace the entire GETELEM with the value.\n    parent.replaceChild(n, elem);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..51ebb843 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,12 +1419,16 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n+    if (n.isAssign() && NodeUtil.getLValueName(n.getFirstChild()).isEmpty()) {\n+      // We can't optimize this.  It is safe to fold, but we don't\n+      // want to mess with it and generate different code.\n+      // This also means there is never a side-effect to folding this,\n+      // as we know the assignmentTarget isn't used elsewhere.\n       return n;\n     }\n \n@@ -1436,21 +1440,19 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n \n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    if (intIndex != index || intIndex < 0) {\n+      String errorMsg = intIndex != index ?\n+          INVALID_GETELEM_INDEX_ERROR :\n+          \"Array index out of bounds: \" + prettyPrint(right) +\n+          \" should be a non-negative integer\";\n+      error(errorMsg, right);\n       return n;\n     }\n \n     Node current = left.getFirstChild();\n     Node elem = null;\n     for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n+      elem = current;\n       current = current.getNext();\n     }\n \n@@ -1458,18 +1460,48 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n-\n     if (elem.isEmpty()) {\n       elem = NodeUtil.newUndefinedNode(elem);\n     } else {\n       left.removeChild(elem);\n     }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n-  }\n+    // Handle effect-less GETELEM specially, since we can fold them all.\n+    if (NodeUtil.isEffectivelyEmptyStatement(parent)) {\n+      // Fold [] to undefined, or the last constant element as the array is immutable.\n+      if (left.getType() != Token.ARRAYLIT) {\n+        n.getParent().replaceChild(n, elem);\n+        reportCodeChange();\n+        return elem;\n+      }\n+      current = left.getFirstChild();\n+      Node lastConst = null;\n+      while (current != null) {\n+        Node elementToTest = current;\n+        current = current.getNext();\n+\n+        if (elementToTest.isEmpty()) {\n+          elem = NodeUtil.newUndefinedNode(elem);\n+          n.getParent().replaceChild(n, elem);\n+          reportCodeChange();\n+          return elem;\n+        } else if (!NodeUtil.mayHaveSideEffects(elementToTest)) {\n+          lastConst = elementToTest;\n+        } else {\n+          lastConst = null;\n+        }\n+        elem = elementToTest;\n+      }\n+      if (lastConst != null) {\n+        left.removeChild(lastConst);\n+        n.getParent().replaceChild(n, lastConst);\n+        reportCodeChange();\n+        return lastConst;\n+      }\n+    }\n+\n+    // Replace the entire GETELEM with the value.\n+    parent.replaceChild(n, elem);\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}