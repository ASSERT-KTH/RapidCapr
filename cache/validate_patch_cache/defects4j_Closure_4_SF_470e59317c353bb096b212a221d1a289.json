{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  boolean shouldResolveViaRegistry = false;\n  boolean shouldHandleImplicitCycle = false;\n\n  while (true) {\n    // Try to resolve via the registry or properties\n    boolean isResolved = resolveViaRegistry(t, enclosing);\n    if (!isResolved) {\n      resolveViaProperties(t, enclosing);\n      isResolved = isResolved();\n    }\n\n    // Check if we need to handle an implicit prototype cycle\n    if (!isResolved) {\n      shouldHandleImplicitCycle = detectImplicitPrototypeCycle();\n      if (shouldHandleImplicitCycle) {\n        handleTypeCycle(t);\n        shouldResolveViaRegistry = true;\n        continue;\n      }\n    }\n\n    // Resolve any pending registry resolutions\n    if (shouldResolveViaRegistry) {\n      shouldResolveViaRegistry = false;\n      if (resolveViaRegistry(t, enclosing)) {\n        isResolved = true;\n      }\n    }\n\n    // If resolved, call super, finish property continuations, and return the type\n    if (isResolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // If we get here, resolution is not possible, so call super and return the type\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..f6a4c198 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,49 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  boolean shouldResolveViaRegistry = false;\n+  boolean shouldHandleImplicitCycle = false;\n+\n+  while (true) {\n+    // Try to resolve via the registry or properties\n+    boolean isResolved = resolveViaRegistry(t, enclosing);\n+    if (!isResolved) {\n+      resolveViaProperties(t, enclosing);\n+      isResolved = isResolved();\n     }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    // Check if we need to handle an implicit prototype cycle\n+    if (!isResolved) {\n+      shouldHandleImplicitCycle = detectImplicitPrototypeCycle();\n+      if (shouldHandleImplicitCycle) {\n+        handleTypeCycle(t);\n+        shouldResolveViaRegistry = true;\n+        continue;\n+      }\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    // Resolve any pending registry resolutions\n+    if (shouldResolveViaRegistry) {\n+      shouldResolveViaRegistry = false;\n+      if (resolveViaRegistry(t, enclosing)) {\n+        isResolved = true;\n+      }\n     }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n+    // If resolved, call super, finish property continuations, and return the type\n+    if (isResolved) {\n+      super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+\n+    // If we get here, resolution is not possible, so call super and return the type\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n   }\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}