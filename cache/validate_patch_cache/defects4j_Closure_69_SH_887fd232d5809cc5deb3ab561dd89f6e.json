{
    "patch": "if (functionType instanceof FunctionType) {\n  FunctionType functionType = (FunctionType) childType;\n\n  // Check if the function has a \"this\" type and if it is called with a GETPROP or GETELEM\n  JSType typeOfThis = functionType.getTypeOfThis();\n  if (typeOfThis != null && !NodeUtil.isImmutableResultType(typeOfThis)) {\n    report(t, n, UNSAFE_THIS, childType.toString());\n    return;\n  }\n\n  boolean isExtern = false;\n  JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n  if(functionJSDocInfo != null) {\n    String sourceName = functionJSDocInfo.getSourceName();\n    CompilerInput functionSource = compiler.getInput(sourceName);\n    isExtern = functionSource.isExtern();\n  }\n\n  // Non-native constructors should not be called directly\n  // unless they specify a return type and are defined\n  // in an extern.\n  if (functionType.isConstructor() &&\n      !functionType.isNativeObjectType() &&\n      (functionType.getReturnType().isUnknownType() ||\n       functionType.getReturnType().isVoidType() ||\n       !isExtern)) {\n    report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n  }\n\n  visitParameterList(t, n, functionType);\n  ensureTyped(t, n, functionType.getReturnType());\n} else {\n  ensureTyped(t, n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..dd1437dd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,40 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType instanceof FunctionType) {\n+  FunctionType functionType = (FunctionType) childType;\n+\n+  // Check if the function has a \"this\" type and if it is called with a GETPROP or GETELEM\n+  JSType typeOfThis = functionType.getTypeOfThis();\n+  if (typeOfThis != null && !NodeUtil.isImmutableResultType(typeOfThis)) {\n+    report(t, n, UNSAFE_THIS, childType.toString());\n+    return;\n+  }\n+\n+  boolean isExtern = false;\n+  JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+  if(functionJSDocInfo != null) {\n+    String sourceName = functionJSDocInfo.getSourceName();\n+    CompilerInput functionSource = compiler.getInput(sourceName);\n+    isExtern = functionSource.isExtern();\n+  }\n+\n+  // Non-native constructors should not be called directly\n+  // unless they specify a return type and are defined\n+  // in an extern.\n+  if (functionType.isConstructor() &&\n+      !functionType.isNativeObjectType() &&\n+      (functionType.getReturnType().isUnknownType() ||\n+       functionType.getReturnType().isVoidType() ||\n+       !isExtern)) {\n+    report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+  }\n+\n+  visitParameterList(t, n, functionType);\n+  ensureTyped(t, n, functionType.getReturnType());\n+} else {\n+  ensureTyped(t, n);\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: variable functionType is already defined in method visitCall(NodeTraversal,Node)",
    "test_result": "ERROR"
}