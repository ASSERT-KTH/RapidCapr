{
    "patch": "        } catch (ArithmeticException ex) {\n            if (text != null) {\n                throw new IllegalFieldValueException(\n                        \"Cannot parse \\\"\" + text + \"\\\": Value \"+ ex.getMessage() + \" is invalid for field\",\n                        ex);\n            }\n            throw new IllegalFieldValueException(\n                    \"Value \"+ ex.getMessage() + \" is invalid for field\",\n                    ex);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e3066993 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,15 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (ArithmeticException ex) {\n+            if (text != null) {\n+                throw new IllegalFieldValueException(\n+                        \"Cannot parse \\\"\" + text + \"\\\": Value \"+ ex.getMessage() + \" is invalid for field\",\n+                        ex);\n+            }\n+            throw new IllegalFieldValueException(\n+                    \"Value \"+ ex.getMessage() + \" is invalid for field\",\n+                    ex);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: no suitable constructor found for IllegalFieldValueException(String,ArithmeticException)",
    "test_result": "ERROR"
}