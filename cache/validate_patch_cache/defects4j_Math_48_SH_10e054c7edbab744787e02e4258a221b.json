{
    "patch": "if (fx == 0.0) {\n    return x;\n} else if (f1 * fx < 0) {\n    x0 = x1;\n    f0 = f1;\n    inverted = !inverted;\n} else {\n    double delta = FastMath.abs(x1 - x0);\n    double rlimit = rtol * (inverted ? FastMath.abs(x0) : FastMath.abs(x1));\n    if (delta <= rlimit || delta <= atol) {\n        return x;\n    }\n    switch (method) {\n    case ILLINOIS:\n        f0 *= 0.5;\n        break;\n    case PEGASUS:\n        f0 *= f1 / (f1 + fx);\n        break;\n    case REGULA_FALSI:\n        if(f0 == f1){\n            throw new ConvergenceException(LocalizedFormats.REGULA_FALSI_SAME_ABSCISSAS);\n        }\n        break;\n    default:\n        throw new MathInternalError();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..eba376e8d 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,34 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+if (fx == 0.0) {\n+    return x;\n+} else if (f1 * fx < 0) {\n+    x0 = x1;\n+    f0 = f1;\n+    inverted = !inverted;\n+} else {\n+    double delta = FastMath.abs(x1 - x0);\n+    double rlimit = rtol * (inverted ? FastMath.abs(x0) : FastMath.abs(x1));\n+    if (delta <= rlimit || delta <= atol) {\n+        return x;\n+    }\n+    switch (method) {\n+    case ILLINOIS:\n+        f0 *= 0.5;\n+        break;\n+    case PEGASUS:\n+        f0 *= f1 / (f1 + fx);\n+        break;\n+    case REGULA_FALSI:\n+        if(f0 == f1){\n+            throw new ConvergenceException(LocalizedFormats.REGULA_FALSI_SAME_ABSCISSAS);\n+        }\n+        break;\n+    default:\n+        throw new MathInternalError();\n+    }\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}