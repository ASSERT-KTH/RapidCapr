{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    // Record global variable and function declarations\n    if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n                if (child.isName()) {\n                    NameInformation ns = createNameInformation(t, child, parent);\n                    if (ns != null) {\n                        JsName nameInfo = getName(ns.name, true);\n                        if (nameInfo != null) {\n                            recordSet(nameInfo.name, child);\n                        }\n                    }\n                } else if (child.isDestructuringLhs()) {\n                    for (Node ancestor = child.getParent(); ancestor != null && ancestor != n; ancestor = ancestor.getParent()) {\n                        if (ancestor.isObjectPattern()) {\n                            for (Node objectPatternChild = ancestor.getFirstChild(); objectPatternChild != null; objectPatternChild = objectPatternChild.getNext()) {\n                                if (objectPatternChild.isStringKey() && objectPatternChild.getString() != null) {\n                                    NameInformation ns = createNameInformation(t, objectPatternChild, parent);\n                                    if (ns != null) {\n                                        JsName nameInfo = getName(ns.name, true);\n                                        if (nameInfo != null) {\n                                            recordSet(nameInfo.name, objectPatternChild);\n                                        }\n                                    }\n                                }\n                            }\n                        } else if (ancestor.isArrayPattern()) {\n                            Node arrayPatternChild = ancestor.getFirstChild();\n                            int i = 0;\n                            while (arrayPatternChild != null && i < child.getIntProp(Node.DESTRUCTURING_LENGTH)) {\n                                NameInformation ns = createNameInformation(t, arrayPatternChild, parent);\n                                if (ns != null) {\n                                    JsName nameInfo = getName(ns.name, true);\n                                    if (nameInfo != null) {\n                                        recordSet(nameInfo.name, arrayPatternChild);\n                                    }\n                                }\n                                arrayPatternChild = arrayPatternChild.getNext();\n                                i++;\n                            }\n                        }\n                    }\n                }\n            }\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n            Node nameNode = n.getFirstChild();\n            NameInformation ns = createNameInformation(t, nameNode, n);\n            if (ns != null) {\n                JsName nameInfo = getName(ns.name, true);\n                if (nameInfo != null) {\n                    recordSet(nameInfo.name, nameNode);\n                }\n            }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n            NameInformation ns = createNameInformation(t, n, parent);\n            if (ns != null) {\n                JsName nameInfo = getName(ns.name, true);\n                if (nameInfo != null) {\n                    recordSet(nameInfo.name, n);\n                }\n            }\n        }\n    }\n\n    // Record assignments and call sites\n    if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, parent);\n        if (ns != null) {\n            if (ns.isPrototype) {\n                recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n            } else {\n                JsName nameInfo = getName(ns.name, false);\n                if (nameInfo != null) {\n                    recordSet(nameInfo.name, nameNode);\n                }\n            }\n        }\n    } else if (n.isCall()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, parent);\n        if (ns != null && ns.onlyAffectsClassDef) {\n            JsName name = getName(ns.name, true);\n            if (name != null) {\n                refNodes.add(new ClassDefiningFunctionNode(\n                        name, n, parent, parent.getParent()));\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..bf3b86ed 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,97 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    // Record global variable and function declarations\n+    if (t.inGlobalScope()) {\n         if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n+            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+                if (child.isName()) {\n+                    NameInformation ns = createNameInformation(t, child, parent);\n+                    if (ns != null) {\n+                        JsName nameInfo = getName(ns.name, true);\n+                        if (nameInfo != null) {\n+                            recordSet(nameInfo.name, child);\n+                        }\n+                    }\n+                } else if (child.isDestructuringLhs()) {\n+                    for (Node ancestor = child.getParent(); ancestor != null && ancestor != n; ancestor = ancestor.getParent()) {\n+                        if (ancestor.isObjectPattern()) {\n+                            for (Node objectPatternChild = ancestor.getFirstChild(); objectPatternChild != null; objectPatternChild = objectPatternChild.getNext()) {\n+                                if (objectPatternChild.isStringKey() && objectPatternChild.getString() != null) {\n+                                    NameInformation ns = createNameInformation(t, objectPatternChild, parent);\n+                                    if (ns != null) {\n+                                        JsName nameInfo = getName(ns.name, true);\n+                                        if (nameInfo != null) {\n+                                            recordSet(nameInfo.name, objectPatternChild);\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        } else if (ancestor.isArrayPattern()) {\n+                            Node arrayPatternChild = ancestor.getFirstChild();\n+                            int i = 0;\n+                            while (arrayPatternChild != null && i < child.getIntProp(Node.DESTRUCTURING_LENGTH)) {\n+                                NameInformation ns = createNameInformation(t, arrayPatternChild, parent);\n+                                if (ns != null) {\n+                                    JsName nameInfo = getName(ns.name, true);\n+                                    if (nameInfo != null) {\n+                                        recordSet(nameInfo.name, arrayPatternChild);\n+                                    }\n+                                }\n+                                arrayPatternChild = arrayPatternChild.getNext();\n+                                i++;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n         } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n+            Node nameNode = n.getFirstChild();\n+            NameInformation ns = createNameInformation(t, nameNode, n);\n+            if (ns != null) {\n+                JsName nameInfo = getName(ns.name, true);\n+                if (nameInfo != null) {\n+                    recordSet(nameInfo.name, nameNode);\n+                }\n+            }\n         } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n+            NameInformation ns = createNameInformation(t, n, parent);\n+            if (ns != null) {\n+                JsName nameInfo = getName(ns.name, true);\n+                if (nameInfo != null) {\n+                    recordSet(nameInfo.name, n);\n+                }\n+            }\n         }\n-      }\n+    }\n \n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n+    // Record assignments and call sites\n+    if (n.isAssign()) {\n         Node nameNode = n.getFirstChild();\n-\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n+        NameInformation ns = createNameInformation(t, nameNode, parent);\n         if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n+            if (ns.isPrototype) {\n+                recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n+            } else {\n+                JsName nameInfo = getName(ns.name, false);\n+                if (nameInfo != null) {\n+                    recordSet(nameInfo.name, nameNode);\n+                }\n+            }\n         }\n-      } else if (n.isCall()) {\n+    } else if (n.isCall()) {\n         Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n+        NameInformation ns = createNameInformation(t, nameNode, parent);\n         if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n-          }\n+            JsName name = getName(ns.name, true);\n+            if (name != null) {\n+                refNodes.add(new ClassDefiningFunctionNode(\n+                        name, n, parent, parent.getParent()));\n+            }\n         }\n-      }\n     }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}