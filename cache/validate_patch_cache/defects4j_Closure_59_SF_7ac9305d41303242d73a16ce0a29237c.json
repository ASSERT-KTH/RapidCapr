{
    "patch": "public void initOptions(CompilerOptions options) {\n    this.options = options;\n\n    // First, create the error manager\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // Then apply the diagnostic groups, which may override checkTypes\n    boolean maybeCheckTypes =\n        options.enables(DiagnosticGroups.CHECK_TYPES) ||\n        options.disables(DiagnosticGroups.CHECK_TYPES);\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    }\n\n    // If diagnostic groups didn't override checkTypes, then turn off\n    // the parser type warnings if checkTypes is disabled.\n    if (!maybeCheckTypes && !options.checkTypes) {\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    // Check the globals.\n    CheckGlobalThis checkGlobalThis = new CheckGlobalThis(this);\n    EnumSet<CheckLevel> levels = options.checkGlobalThisLevel.getCheckLevels();\n    for (DiagnosticGroup group :\n         DiagnosticGroups.forType(DiagnosticGroup.Type.CHECK_GLOBAL_THIS)) {\n      options.setWarningLevel(group, levels.contains(CheckLevel.WARNING) ?\n          CheckLevel.WARNING : CheckLevel.OFF);\n      options.setErrorLevel(group, levels.contains(CheckLevel.ERROR) ?\n          CheckLevel.ERROR : CheckLevel.OFF);\n      group.reportDeprecatedOption(errorManager);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = new ArrayList<>();\n    guards.add(options.getWarningsGuard());\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n\n    // Check all variables have been declared\n    if (options.checkSymbols) {\n      composedGuards.addGuard(CheckMissingProperties.MISSING_PROPERTIES);\n    } else if (!composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..740b2499 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -223,8 +223,10 @@ public class Compiler extends AbstractCompiler {\n    * Initialize the compiler options. Only necessary if you're not doing\n    * a normal compile() job.\n    */\n-  public void initOptions(CompilerOptions options) {\n+public void initOptions(CompilerOptions options) {\n     this.options = options;\n+\n+    // First, create the error manager\n     if (errorManager == null) {\n       if (outStream == null) {\n         setErrorManager(\n@@ -237,55 +239,49 @@ public class Compiler extends AbstractCompiler {\n       }\n     }\n \n-    // DiagnosticGroups override the plain checkTypes option.\n+    // Then apply the diagnostic groups, which may override checkTypes\n+    boolean maybeCheckTypes =\n+        options.enables(DiagnosticGroups.CHECK_TYPES) ||\n+        options.disables(DiagnosticGroups.CHECK_TYPES);\n     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n       options.checkTypes = true;\n     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n       options.checkTypes = false;\n-    } else if (!options.checkTypes) {\n-      // If DiagnosticGroups did not override the plain checkTypes\n-      // option, and checkTypes is enabled, then turn off the\n-      // parser type warnings.\n+    }\n+\n+    // If diagnostic groups didn't override checkTypes, then turn off\n+    // the parser type warnings if checkTypes is disabled.\n+    if (!maybeCheckTypes && !options.checkTypes) {\n       options.setWarningLevel(\n           DiagnosticGroup.forType(\n               RhinoErrorReporter.TYPE_PARSE_ERROR),\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.GLOBAL_THIS,\n-          options.checkGlobalThisLevel);\n-    }\n-\n-    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.ES5_STRICT,\n-          CheckLevel.ERROR);\n+    // Check the globals.\n+    CheckGlobalThis checkGlobalThis = new CheckGlobalThis(this);\n+    EnumSet<CheckLevel> levels = options.checkGlobalThisLevel.getCheckLevels();\n+    for (DiagnosticGroup group :\n+         DiagnosticGroups.forType(DiagnosticGroup.Type.CHECK_GLOBAL_THIS)) {\n+      options.setWarningLevel(group, levels.contains(CheckLevel.WARNING) ?\n+          CheckLevel.WARNING : CheckLevel.OFF);\n+      options.setErrorLevel(group, levels.contains(CheckLevel.ERROR) ?\n+          CheckLevel.ERROR : CheckLevel.OFF);\n+      group.reportDeprecatedOption(errorManager);\n     }\n \n     // Initialize the warnings guard.\n-    List<WarningsGuard> guards = Lists.newArrayList();\n+    List<WarningsGuard> guards = new ArrayList<>();\n+    guards.add(options.getWarningsGuard());\n     guards.add(\n         new SuppressDocWarningsGuard(\n             getDiagnosticGroups().getRegisteredGroups()));\n-    guards.add(options.getWarningsGuard());\n-\n     ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n \n-    // All passes must run the variable check. This synthesizes\n-    // variables later so that the compiler doesn't crash. It also\n-    // checks the externs file for validity. If you don't want to warn\n-    // about missing variable declarations, we shut that specific\n-    // error off.\n-    if (!options.checkSymbols &&\n-        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n-      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n-    }\n-\n-    this.warningsGuard = composedGuards;\n-  }\n+    // Check all variables have been declared\n+    if (options.checkSymbols) {\n+      composedGuards.addGuard(CheckMissingProperties.MISSING_PROPERTIES);\n+    } else if (!composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n \n   /**\n    * Initializes the instance state needed for a compile job.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}