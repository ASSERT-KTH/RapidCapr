{
    "patch": "public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            double y0 = tmp2[0];\n            if (y0 > 0) {\n                result[resultOffset] = (tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI;\n                result[resultOffset] = result[resultOffset] - 2 * tmp2[0];\n                for (int i = 1; i < tmp2.length; ++i) {\n                    result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n                }\n            } else {\n                for (int i = 0; i < tmp2.length; ++i) {\n                    result[resultOffset + i] = fixResult((result[resultOffset + i] - 2 * tmp2[i]));\n                }\n            }\n        }\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n        fixSpecialCases(y, yOffset, x, xOffset, result, resultOffset);\n    }\n\n    private double fixResult(double result) {\n        if (result > 0.0) {\n            return result - FastMath.PI;\n        } else {\n            return result + FastMath.PI;\n        }\n    }\n\n    private void fixSpecialCases(final double[] y, final int yOffset,\n                         final double[] x, final int xOffset,\n                         final double[] results, final int resultOffset) {\n        // handle infinite values\n        boolean infiniteOccurred = false;\n        for (int i = 0; i < y.length; ++i) {\n            if (Double.isInfinite(y[i]) || Double.isInfinite(x[i])) {\n                infiniteOccurred = true;\n                if (Double.isNaN(results[resultOffset + i])) {\n                    if (y[i] > 0) {\n                        results[resultOffset + i] = FastMath.PI / 2;\n                    } else if (y[i] < 0) {\n                        results[resultOffset + i] = -FastMath.PI / 2;\n                    } else { // y == 0\n                        if (x[i] > 0) {\n                            results[resultOffset + i] = 0;\n                        } else if (x[i] < 0) {\n                            results[resultOffset + i] = FastMath.PI;\n                        } else {\n                            results[resultOffset + i] = Double.NaN;\n                        }\n                    }\n                }\n            }\n        }\n        if (!infiniteOccurred) {\n            for (int i = 0; i < y.length; ++i) {\n                if (Double.isNaN(y[i]) || Double.isNaN(x[i])) {\n                    results[resultOffset + i] = Double.NaN;\n                } else if (y[i] == 0) {\n                    if (Double.doubleToLongBits(x[i]) == Double.doubleToLongBits(0.0)) {\n                        results[resultOffset + i] = Double.NaN;\n                    } else if (x[i] > 0) {\n                        results[resultOffset + i] = 0;\n                    } else {\n                        results[resultOffset + i] = FastMath.PI;\n                    }\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..1347e8c65 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1379,7 +1379,7 @@ public class DSCompiler {\n      * be the input array)\n      * @param resultOffset offset of the result in its array\n      */\n-    public void atan2(final double[] y, final int yOffset,\n+public void atan2(final double[] y, final int yOffset,\n                       final double[] x, final int xOffset,\n                       final double[] result, final int resultOffset) {\n \n@@ -1407,16 +1407,71 @@ public class DSCompiler {\n             subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+            double y0 = tmp2[0];\n+            if (y0 > 0) {\n+                result[resultOffset] = (tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI;\n+                result[resultOffset] = result[resultOffset] - 2 * tmp2[0];\n+                for (int i = 1; i < tmp2.length; ++i) {\n+                    result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+                }\n+            } else {\n+                for (int i = 0; i < tmp2.length; ++i) {\n+                    result[resultOffset + i] = fixResult((result[resultOffset + i] - 2 * tmp2[i]));\n+                }\n             }\n-\n         }\n-\n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        fixSpecialCases(y, yOffset, x, xOffset, result, resultOffset);\n+    }\n+\n+    private double fixResult(double result) {\n+        if (result > 0.0) {\n+            return result - FastMath.PI;\n+        } else {\n+            return result + FastMath.PI;\n+        }\n+    }\n \n+    private void fixSpecialCases(final double[] y, final int yOffset,\n+                         final double[] x, final int xOffset,\n+                         final double[] results, final int resultOffset) {\n+        // handle infinite values\n+        boolean infiniteOccurred = false;\n+        for (int i = 0; i < y.length; ++i) {\n+            if (Double.isInfinite(y[i]) || Double.isInfinite(x[i])) {\n+                infiniteOccurred = true;\n+                if (Double.isNaN(results[resultOffset + i])) {\n+                    if (y[i] > 0) {\n+                        results[resultOffset + i] = FastMath.PI / 2;\n+                    } else if (y[i] < 0) {\n+                        results[resultOffset + i] = -FastMath.PI / 2;\n+                    } else { // y == 0\n+                        if (x[i] > 0) {\n+                            results[resultOffset + i] = 0;\n+                        } else if (x[i] < 0) {\n+                            results[resultOffset + i] = FastMath.PI;\n+                        } else {\n+                            results[resultOffset + i] = Double.NaN;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        if (!infiniteOccurred) {\n+            for (int i = 0; i < y.length; ++i) {\n+                if (Double.isNaN(y[i]) || Double.isNaN(x[i])) {\n+                    results[resultOffset + i] = Double.NaN;\n+                } else if (y[i] == 0) {\n+                    if (Double.doubleToLongBits(x[i]) == Double.doubleToLongBits(0.0)) {\n+                        results[resultOffset + i] = Double.NaN;\n+                    } else if (x[i] > 0) {\n+                        results[resultOffset + i] = 0;\n+                    } else {\n+                        results[resultOffset + i] = FastMath.PI;\n+                    }\n+                }\n+            }\n+        }\n     }\n \n     /** Compute hyperbolic cosine of a derivative structure.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}