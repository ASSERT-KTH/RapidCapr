{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    int n = m.getRowDimension();\n    double maxNonzero = 0.0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            maxNonzero = FastMath.max(maxNonzero, FastMath.abs(m.getEntry(i, j)));\n        }\n    }\n    double epsilon = FastMath.sqrt(n) * Precision.EPSILON * maxNonzero;\n    if (epsilon >= 1.0) {\n        throw new IllegalArgumentException(\"Matrix is too large\");\n    }\n    LanczosSolver solver = new LanczosSolver();\n    RealMatrix reducedMatrix = solver.reduce(m, epsilon, n / 2);\n    final EigenDecomposition dec = new EigenDecomposition(reducedMatrix);\n    RealMatrix eigenvectors = dec.getV();\n    RealMatrix eigenvalues = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n    RealMatrix sqrtEigenvalues = MatrixUtils.createRealDiagonalMatrix(\n            ArrayUtils.toObject(FastMath.sqrt(ArrayUtils.toPrimitive(eigenvalues.getColumn(0)))));\n    RealMatrix sqrtMatrix = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n    return sqrtMatrix;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a3c5097c9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,26 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    int n = m.getRowDimension();\n+    double maxNonzero = 0.0;\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            maxNonzero = FastMath.max(maxNonzero, FastMath.abs(m.getEntry(i, j)));\n+        }\n+    }\n+    double epsilon = FastMath.sqrt(n) * Precision.EPSILON * maxNonzero;\n+    if (epsilon >= 1.0) {\n+        throw new IllegalArgumentException(\"Matrix is too large\");\n     }\n+    LanczosSolver solver = new LanczosSolver();\n+    RealMatrix reducedMatrix = solver.reduce(m, epsilon, n / 2);\n+    final EigenDecomposition dec = new EigenDecomposition(reducedMatrix);\n+    RealMatrix eigenvectors = dec.getV();\n+    RealMatrix eigenvalues = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n+    RealMatrix sqrtEigenvalues = MatrixUtils.createRealDiagonalMatrix(\n+            ArrayUtils.toObject(FastMath.sqrt(ArrayUtils.toPrimitive(eigenvalues.getColumn(0)))));\n+    RealMatrix sqrtMatrix = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n+    return sqrtMatrix;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}