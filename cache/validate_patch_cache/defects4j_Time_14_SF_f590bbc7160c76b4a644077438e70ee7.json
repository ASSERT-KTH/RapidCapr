{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        int[] newValues = new int[partial.size()];\n        // Compute the new values for the fields except for the month.\n        for (int i = 0; i < partial.size(); i++) {\n            if (i != fieldIndex) {\n                newValues[i] = partial.getFieldType(i).getField(iChronology).get(instant);\n            }\n        }\n        // Add valueToAdd to the month field by using a YearMonth instance.\n        YearMonth yearMonth = new YearMonth(iChronology, instant);\n        yearMonth = yearMonth.plusMonths(valueToAdd);\n        // Compute the new value for the month field.\n        int newMonthValue = yearMonth.getMonthOfYear();\n        // Check if the dayOfMonth field is valid for the new month.\n        Partial updatedPartial = partial.with(DateTimeFieldType.monthOfYear(), newMonthValue);\n        if (!updatedPartial.isMatched(values)) {\n            // If not, discard the new month value and throw an exception.\n            throw new IllegalFieldValueException(DateTimeFieldType.dayOfMonth(), values[fieldIndex], \"Value \" + values[fieldIndex]\n                    + \" for \" + updatedPartial.getFieldType(fieldIndex).getName() + \" must be in the range [\" + updatedPartial.getField(fieldIndex).getMinimumValue() + \",\"\n                    + updatedPartial.getField(fieldIndex).getMaximumValue() + \"]\");\n        } else {\n            // If it is valid, update the month field of newValues with the new month value.\n            newValues[fieldIndex] = newMonthValue;\n            return newValues;\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..aa92edc4 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,46 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        int[] newValues = new int[partial.size()];\n+        // Compute the new values for the fields except for the month.\n+        for (int i = 0; i < partial.size(); i++) {\n+            if (i != fieldIndex) {\n+                newValues[i] = partial.getFieldType(i).getField(iChronology).get(instant);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+        }\n+        // Add valueToAdd to the month field by using a YearMonth instance.\n+        YearMonth yearMonth = new YearMonth(iChronology, instant);\n+        yearMonth = yearMonth.plusMonths(valueToAdd);\n+        // Compute the new value for the month field.\n+        int newMonthValue = yearMonth.getMonthOfYear();\n+        // Check if the dayOfMonth field is valid for the new month.\n+        Partial updatedPartial = partial.with(DateTimeFieldType.monthOfYear(), newMonthValue);\n+        if (!updatedPartial.isMatched(values)) {\n+            // If not, discard the new month value and throw an exception.\n+            throw new IllegalFieldValueException(DateTimeFieldType.dayOfMonth(), values[fieldIndex], \"Value \" + values[fieldIndex]\n+                    + \" for \" + updatedPartial.getFieldType(fieldIndex).getName() + \" must be in the range [\" + updatedPartial.getField(fieldIndex).getMinimumValue() + \",\"\n+                    + updatedPartial.getField(fieldIndex).getMaximumValue() + \"]\");\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            // If it is valid, update the month field of newValues with the new month value.\n+            newValues[fieldIndex] = newMonthValue;\n+            return newValues;\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}