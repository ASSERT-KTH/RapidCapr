{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if(Double.isInfinite(x)) {\n        if(x > 0) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    \n    double dev = Math.abs(x - mean);\n    double s = standardDeviation * Math.sqrt(2.0);\n    if(dev > s * 40) {\n        return x < mean ? 0.0 : 1.0;\n    }\n    \n    double ret;\n    if(x <= mean - dev) {\n        ret = 0.0;\n    }\n    else if(x >= mean + dev) {\n        ret = 1.0;\n    }\n    else {\n        ret = Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0)));\n        ret = 0.5d * (1d + ret);\n    }\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..18f50e642 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,11 +105,36 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    if(Double.isInfinite(x)) {\n+        if(x > 0) {\n+            return 1;\n+        }\n+        else {\n+            return 0;\n+        }\n     }\n     \n+    double dev = Math.abs(x - mean);\n+    double s = standardDeviation * Math.sqrt(2.0);\n+    if(dev > s * 40) {\n+        return x < mean ? 0.0 : 1.0;\n+    }\n+    \n+    double ret;\n+    if(x <= mean - dev) {\n+        ret = 0.0;\n+    }\n+    else if(x >= mean + dev) {\n+        ret = 1.0;\n+    }\n+    else {\n+        ret = Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0)));\n+        ret = 0.5d * (1d + ret);\n+    }\n+    return ret;\n+}\n+    \n     /**\n      * For this distribution, X, this method returns the critical point x, such\n      * that P(X &lt; x) = <code>p</code>.",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}