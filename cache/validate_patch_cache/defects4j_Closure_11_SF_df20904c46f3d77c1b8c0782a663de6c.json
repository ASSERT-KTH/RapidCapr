{
    "patch": "public void testGetprop4() {\n    Properties props = new Properties();\n    props.setProperty(\"my.property\", \"value\");\n    props.setProperty(\"my.otherproperty\", \"othervalue\");\n    String[] args = { \"-Dmy.property=value\", \"-Dmy.otherproperty=notdefaultvalue\" };\n    ProcessProperties.getprops(args, props);\n    String[] warnings = ProcessProperties.getWarnings();\n    assertTrue(\"expected a warning\", warnings.length > 0);\n    assertTrue(props.getProperty(\"my.property\").equals(\"value\"));\n    assertTrue(props.getProperty(\"my.otherproperty\").equals(\"notdefaultvalue\"));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..26d77cff 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+    Properties props = new Properties();\n+    props.setProperty(\"my.property\", \"value\");\n+    props.setProperty(\"my.otherproperty\", \"othervalue\");\n+    String[] args = { \"-Dmy.property=value\", \"-Dmy.otherproperty=notdefaultvalue\" };\n+    ProcessProperties.getprops(args, props);\n+    String[] warnings = ProcessProperties.getWarnings();\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+    assertTrue(props.getProperty(\"my.property\").equals(\"value\"));\n+    assertTrue(props.getProperty(\"my.otherproperty\").equals(\"notdefaultvalue\"));\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}