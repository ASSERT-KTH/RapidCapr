{
    "patch": "\n        Chronology chrono = instant.getChronology();\n        DateTimeZone zone = chrono.getZone();\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instant.getMillis(), chrono, iLocale, iPivotYear);\n\n        int newPos = parser.parseInto(bucket, text, position);\n        long millis = bucket.computeMillis(true, text);\n\n        // Check if year is set by parser, and is a leap year. If so, check if leap day is valid\n        if (bucket.getOffsetInteger() != null) {\n            int year = bucket.getOffsetInteger().intValue();\n            if (chrono instanceof GregorianChronology && leapYear(year)) {\n                LocalDate date = new LocalDate(year, 2, 29, chrono);\n                int parsedDay = bucket.getDayOfMonth();\n                if (date.getDayOfMonth() != parsedDay) {\n                   return ~position; // Return negative to indicate parsing failed\n                }\n            }\n        }\n\n        // set zone offset for parsed date\n        int offset = bucket.getOffsetInteger() != null ? \n               bucket.getOffsetInteger().intValue() :\n               zone.getOffset(millis);\n        zone = DateTimeZone.forOffsetMillis(offset);\n\n        // set pivot year before resolving chronology\n        int defaultYear = chrono.year().get(millis);\n        int pivotYear = iPivotYear != null ? iPivotYear.intValue() : defaultYear;\n        chrono = selectChronology(chrono, pivotYear);\n\n        instant.setMillis(millis - offset);\n        instant.setZone(zone);\n        instant.setChronology(chrono);\n\n        return newPos;\n    }\n    \n    private boolean leapYear(int year) {\n        return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..a39b71b3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,48 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n+\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n+        DateTimeZone zone = chrono.getZone();\n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+            instant.getMillis(), chrono, iLocale, iPivotYear);\n+\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        long millis = bucket.computeMillis(true, text);\n+\n+        // Check if year is set by parser, and is a leap year. If so, check if leap day is valid\n+        if (bucket.getOffsetInteger() != null) {\n+            int year = bucket.getOffsetInteger().intValue();\n+            if (chrono instanceof GregorianChronology && leapYear(year)) {\n+                LocalDate date = new LocalDate(year, 2, 29, chrono);\n+                int parsedDay = bucket.getDayOfMonth();\n+                if (date.getDayOfMonth() != parsedDay) {\n+                   return ~position; // Return negative to indicate parsing failed\n+                }\n+            }\n         }\n+\n+        // set zone offset for parsed date\n+        int offset = bucket.getOffsetInteger() != null ? \n+               bucket.getOffsetInteger().intValue() :\n+               zone.getOffset(millis);\n+        zone = DateTimeZone.forOffsetMillis(offset);\n+\n+        // set pivot year before resolving chronology\n+        int defaultYear = chrono.year().get(millis);\n+        int pivotYear = iPivotYear != null ? iPivotYear.intValue() : defaultYear;\n+        chrono = selectChronology(chrono, pivotYear);\n+\n+        instant.setMillis(millis - offset);\n+        instant.setZone(zone);\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n+\n         return newPos;\n     }\n+    \n+    private boolean leapYear(int year) {\n+        return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}