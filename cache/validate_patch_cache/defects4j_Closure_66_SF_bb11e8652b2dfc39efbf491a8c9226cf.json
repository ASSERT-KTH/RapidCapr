{
    "patch": "public static double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, Object>>() {}.getType();\n    Map<String, Object> map = gson.fromJson(json, type);\n\n    double count = 0.0;\n    double total = 0.0;\n\n    for (Object value : map.values()) {\n        if (value instanceof Integer) {\n            count++;\n            total++;\n        } else if (value instanceof Double) {\n            count++;\n            total++;\n        } else if (value instanceof String) {\n            try {\n                Double.parseDouble((String) value);\n                count++;\n                total++;\n            } catch (NumberFormatException e) {\n                // Ignore any non-parsable string values\n            }\n        }\n    }\n\n    if (total == 0) {\n        return 0.0;\n    } else {\n        return (count / total) * 100;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..31c7add0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,38 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, Object>>() {}.getType();\n+    Map<String, Object> map = gson.fromJson(json, type);\n+\n+    double count = 0.0;\n+    double total = 0.0;\n+\n+    for (Object value : map.values()) {\n+        if (value instanceof Integer) {\n+            count++;\n+            total++;\n+        } else if (value instanceof Double) {\n+            count++;\n+            total++;\n+        } else if (value instanceof String) {\n+            try {\n+                Double.parseDouble((String) value);\n+                count++;\n+                total++;\n+            } catch (NumberFormatException e) {\n+                // Ignore any non-parsable string values\n+            }\n+        }\n+    }\n+\n+    if (total == 0) {\n+        return 0.0;\n+    } else {\n+        return (count / total) * 100;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}