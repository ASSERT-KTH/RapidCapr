{
    "patch": "// if the offsets differ, we must be near a DST boundary\nif (offsetLocal != offsetAdjusted) {\n    if (offsetLocal < offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n        if (nextLocal != nextAdjusted) {\n            // If the transition happened before our instant\n            if (nextAdjusted < instantAdjusted) {\n                // We must iterate to find the right transition\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                while (prevLocal != prevAdjusted) {\n                    prevLocal = previousTransition(prevLocal);\n                    prevAdjusted = previousTransition(prevAdjusted);\n                }\n                return getOffset(prevAdjusted);\n            }\n            // Otherwise, we just return the offset adjustment\n            return offsetAdjusted;\n        }\n    } else {\n        // we need to ensure that time is always before the DST overlap\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n        if (prevLocal != prevAdjusted) {\n            // If the transition happened after our instant\n            if (prevAdjusted > instantAdjusted) {\n                // We must iterate to find the right transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                while (nextLocal != nextAdjusted) {\n                    nextLocal = nextTransition(nextLocal);\n                    nextAdjusted = nextTransition(nextAdjusted);\n                }\n                return getOffset(nextAdjusted);\n            }\n            // Otherwise, we just return the offset adjustment\n            return offsetAdjusted;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5859c2e3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,49 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+// if the offsets differ, we must be near a DST boundary\n+if (offsetLocal != offsetAdjusted) {\n+    if (offsetLocal < offsetAdjusted) {\n+        // we need to ensure that time is always after the DST gap\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+        if (nextLocal != nextAdjusted) {\n+            // If the transition happened before our instant\n+            if (nextAdjusted < instantAdjusted) {\n+                // We must iterate to find the right transition\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                while (prevLocal != prevAdjusted) {\n+                    prevLocal = previousTransition(prevLocal);\n+                    prevAdjusted = previousTransition(prevAdjusted);\n+                }\n+                return getOffset(prevAdjusted);\n+            }\n+            // Otherwise, we just return the offset adjustment\n+            return offsetAdjusted;\n+        }\n+    } else {\n+        // we need to ensure that time is always before the DST overlap\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+        if (prevLocal != prevAdjusted) {\n+            // If the transition happened after our instant\n+            if (prevAdjusted > instantAdjusted) {\n+                // We must iterate to find the right transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+                while (nextLocal != nextAdjusted) {\n+                    nextLocal = nextTransition(nextLocal);\n+                    nextAdjusted = nextTransition(nextAdjusted);\n+                }\n+                return getOffset(nextAdjusted);\n+            }\n+            // Otherwise, we just return the offset adjustment\n+            return offsetAdjusted;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}