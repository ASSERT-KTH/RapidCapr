{
    "patch": "Node maybeName2 = elseAssign.getFirstChild();\nif (name1.hasChildren()\n    && maybeName2 != null && maybeName2.isName()\n    && name1.getString().equals(maybeName2.getString())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..36c56cf2 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,10 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+Node maybeName2 = elseAssign.getFirstChild();\n+if (name1.hasChildren()\n+    && maybeName2 != null && maybeName2.isName()\n+    && name1.getString().equals(maybeName2.getString())) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}