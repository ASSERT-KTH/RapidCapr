{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    // Process empty or single-element pairs\n    if (size == 0) {\n        throw new IllegalStateException(\"Invalid elementPairs: \" + elementPairs);\n    } else if (size == 1) {\n        Object obj = elementPairs.get(0);\n        if (obj instanceof Separator) {\n            Separator sep = (Separator) obj;\n            return new PeriodFormatter(sep, sep);\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    }\n\n    // Process two or more elements\n    Object first = elementPairs.get(0);\n    if (first instanceof Separator) {\n        Separator sep = (Separator) first;\n        List<Object> remaining = elementPairs.subList(1, size);\n        int separatorCount = 1;\n        while (!remaining.isEmpty() && remaining.get(0) instanceof Separator) {\n            sep = sep.finish(null, null);\n            remaining = remaining.subList(1, remaining.size());\n            separatorCount++;\n        }\n        if (remaining.isEmpty()) {\n            if (separatorCount == 1) {\n                return new PeriodFormatter(sep, sep);\n            } else {\n                return new PeriodFormatter(sep, null);\n            }\n        } else {\n            PeriodFormatter formatter = toFormatter(remaining, notPrinter, notParser);\n            sep = sep.finish(formatter.getPrinter(), formatter.getParser());\n            return new PeriodFormatter(sep, formatter.getParser());\n        }\n    } else {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..d7f59474 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,56 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    // Process empty or single-element pairs\n+    if (size == 0) {\n+        throw new IllegalStateException(\"Invalid elementPairs: \" + elementPairs);\n+    } else if (size == 1) {\n+        Object obj = elementPairs.get(0);\n+        if (obj instanceof Separator) {\n+            Separator sep = (Separator) obj;\n+            return new PeriodFormatter(sep, sep);\n+        } else {\n+            Object[] comp = createComposite(elementPairs);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n+        }\n+    }\n+\n+    // Process two or more elements\n+    Object first = elementPairs.get(0);\n+    if (first instanceof Separator) {\n+        Separator sep = (Separator) first;\n+        List<Object> remaining = elementPairs.subList(1, size);\n+        int separatorCount = 1;\n+        while (!remaining.isEmpty() && remaining.get(0) instanceof Separator) {\n+            sep = sep.finish(null, null);\n+            remaining = remaining.subList(1, remaining.size());\n+            separatorCount++;\n+        }\n+        if (remaining.isEmpty()) {\n+            if (separatorCount == 1) {\n                 return new PeriodFormatter(sep, sep);\n+            } else {\n+                return new PeriodFormatter(sep, null);\n+            }\n+        } else {\n+            PeriodFormatter formatter = toFormatter(remaining, notPrinter, notParser);\n+            sep = sep.finish(formatter.getPrinter(), formatter.getParser());\n+            return new PeriodFormatter(sep, formatter.getParser());\n         }\n+    } else {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -811,6 +850,7 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.IllegalArgumentException: Invalid format: \"P0D\"",
    "test_result": "FAIL"
}