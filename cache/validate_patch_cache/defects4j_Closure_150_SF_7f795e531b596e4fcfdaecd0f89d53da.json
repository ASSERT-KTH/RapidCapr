{
    "patch": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) return;\n    if (parent == null) return;\n\n    switch (n.getToken()) {\n      case FUNCTION:\n        if (parent.getToken() == Token.NAME) return;\n        defineDeclaredFunction(n, scope.getVarParent(), parent);\n        break;\n      case CATCH:\n        defineCatch(n);\n        break;\n      case VAR:\n      case CONST:\n      case LET:\n        defineVars(n);\n        break;\n      case CLASS:\n        defineClass(n);\n        break;\n      case STRING_KEY:\n      case GETPROP:\n        attachLiteralTypes(n);\n        break;\n      case CALL:\n        if (parent.isExprResult()) {\n          handleFunctionCall(n);\n        }\n        break;\n      case NEW:\n        if (parent.isExprResult()) {\n          handleNewCall(n);\n        }\n        break;\n      case DEFAULT_CASE:\n        checkDefaultCase(n);\n        break;\n      default: break;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..a445076e 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,47 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) return;\n+    if (parent == null) return;\n+\n+    switch (n.getToken()) {\n+      case FUNCTION:\n+        if (parent.getToken() == Token.NAME) return;\n+        defineDeclaredFunction(n, scope.getVarParent(), parent);\n+        break;\n+      case CATCH:\n+        defineCatch(n);\n+        break;\n+      case VAR:\n+      case CONST:\n+      case LET:\n+        defineVars(n);\n+        break;\n+      case CLASS:\n+        defineClass(n);\n+        break;\n+      case STRING_KEY:\n+      case GETPROP:\n+        attachLiteralTypes(n);\n+        break;\n+      case CALL:\n+        if (parent.isExprResult()) {\n+          handleFunctionCall(n);\n+        }\n+        break;\n+      case NEW:\n+        if (parent.isExprResult()) {\n+          handleNewCall(n);\n+        }\n+        break;\n+      case DEFAULT_CASE:\n+        checkDefaultCase(n);\n+        break;\n+      default: break;\n     }\n+  }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}