{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    double epsilon = 1e-15;\n    double maxIterations = 1000;\n    double sum = 0.0;\n    double term = 1.0 / a;\n    while (Math.abs(term) > epsilon && maxIterations > 0) {\n        sum += term;\n        term *= x / (a + maxIterations - 1.0);\n        maxIterations--;\n    }\n    return Math.exp(-x + a * Math.log(x) - org.apache.commons.math3.special.Gamma.logGamma(a)) * sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..1186c4253 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,18 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    double epsilon = 1e-15;\n+    double maxIterations = 1000;\n+    double sum = 0.0;\n+    double term = 1.0 / a;\n+    while (Math.abs(term) > epsilon && maxIterations > 0) {\n+        sum += term;\n+        term *= x / (a + maxIterations - 1.0);\n+        maxIterations--;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - org.apache.commons.math3.special.Gamma.logGamma(a)) * sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}