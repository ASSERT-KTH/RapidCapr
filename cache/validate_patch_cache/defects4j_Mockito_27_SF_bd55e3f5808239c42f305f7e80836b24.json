{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n        (MockSettingsImpl) Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS));\n\n    if(mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        Callback[] oldCallbacks = factory.getCallbacks();\n        Callback[] newCallbacks = new Callback[oldCallbacks.length];\n        int filterIndex = -1;\n        for(int i = 0; i < oldCallbacks.length; i++) {\n            if(oldCallbacks[i] instanceof MethodInterceptorFilter) {\n                filterIndex = i;\n                break;\n            }\n            newCallbacks[i] = oldCallbacks[i];\n        }\n        if(filterIndex != -1) {\n            newCallbacks[filterIndex] = newFilter;\n            System.arraycopy(oldCallbacks, filterIndex + 1, newCallbacks, filterIndex + 1, oldCallbacks.length - filterIndex - 1);\n        } else {\n            newCallbacks[0] = newFilter;\n            System.arraycopy(oldCallbacks, 0, newCallbacks, 1, oldCallbacks.length);\n        }\n        factory.setCallbacks(newCallbacks);\n    } else if(mock instanceof MockAccess) {\n        ((MockAccess) mock).setMockitoInterceptor(newFilter);\n    } else {\n        // Handle other scenarios if applicable\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..5eca0e40f 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,39 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n+        (MockSettingsImpl) Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS));\n+\n+    if(mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        Callback[] oldCallbacks = factory.getCallbacks();\n+        Callback[] newCallbacks = new Callback[oldCallbacks.length];\n+        int filterIndex = -1;\n+        for(int i = 0; i < oldCallbacks.length; i++) {\n+            if(oldCallbacks[i] instanceof MethodInterceptorFilter) {\n+                filterIndex = i;\n+                break;\n+            }\n+            newCallbacks[i] = oldCallbacks[i];\n+        }\n+        if(filterIndex != -1) {\n+            newCallbacks[filterIndex] = newFilter;\n+            System.arraycopy(oldCallbacks, filterIndex + 1, newCallbacks, filterIndex + 1, oldCallbacks.length - filterIndex - 1);\n+        } else {\n+            newCallbacks[0] = newFilter;\n+            System.arraycopy(oldCallbacks, 0, newCallbacks, 1, oldCallbacks.length);\n+        }\n+        factory.setCallbacks(newCallbacks);\n+    } else if(mock instanceof MockAccess) {\n+        ((MockAccess) mock).setMockitoInterceptor(newFilter);\n+    } else {\n+        // Handle other scenarios if applicable\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}