{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      boolean containsNumbers = false;\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n\n        if (child.isString()) {\n          String name = child.getString();\n          T type = typeSystem.getType(getScope(), n, name);\n\n          Property prop = getProperty(name);\n          if (!prop.scheduleRenaming(child,\n                                     processProperty(t, prop, type, null))) {\n            // TODO(user): It doesn't look like the user can do much in this\n            // case right now.\n            if (propertiesToErrorFor.containsKey(name)) {\n              compiler.report(JSError.make(\n                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n                  Warnings.INVALIDATION, name,\n                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }\n          }\n        } else {\n          containsNumbers = true;\n        }\n      }\n      \n      if (containsNumbers) {\n        NodeUtil.deleteChildren(n, compiler);\n        n.addChildToFront(IR.objectlit().srcref(n).build());\n        compiler.report(JSError.make(\n            t.getSourceName(), n, \"Object literal keys can't be numeric\",\n            Warnings.INVALIDATION, \"\"));\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..d98c0019 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,41 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+    private void handleObjectLit(NodeTraversal t, Node n) {\n+      boolean containsNumbers = false;\n+      for (Node child = n.getFirstChild();\n+          child != null;\n+          child = child.getNext()) {\n+\n+        if (child.isString()) {\n+          String name = child.getString();\n+          T type = typeSystem.getType(getScope(), n, name);\n+\n+          Property prop = getProperty(name);\n+          if (!prop.scheduleRenaming(child,\n+                                     processProperty(t, prop, type, null))) {\n+            // TODO(user): It doesn't look like the user can do much in this\n+            // case right now.\n+            if (propertiesToErrorFor.containsKey(name)) {\n+              compiler.report(JSError.make(\n+                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                  Warnings.INVALIDATION, name,\n+                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+            }\n+          }\n+        } else {\n+          containsNumbers = true;\n+        }\n+      }\n+      \n+      if (containsNumbers) {\n+        NodeUtil.deleteChildren(n, compiler);\n+        n.addChildToFront(IR.objectlit().srcref(n).build());\n+        compiler.report(JSError.make(\n+            t.getSourceName(), n, \"Object literal keys can't be numeric\",\n+            Warnings.INVALIDATION, \"\"));\n+      }\n+    }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}