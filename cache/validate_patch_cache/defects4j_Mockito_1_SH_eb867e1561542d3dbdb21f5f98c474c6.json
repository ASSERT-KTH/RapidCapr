{
    "patch": "    Object[] args = invocation.getRawArguments();\n    for (int position = 0; position < matchers.size() && position < args.length; position++) {\n        Matcher m = matchers.get(position);\n        if (m instanceof CapturesArguments) {\n            if (m instanceof VarargMatcher) {\n                Object varargArray = args[args.length - 1];\n                if (varargArray != null && varargArray.getClass().isArray()) {\n                    for (int i = 0; i < Array.getLength(varargArray); i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));\n                    }\n                }\n            } else {\n                ((CapturesArguments) m).captureFrom(args[position]);\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..b8a817241 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,22 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    Object[] args = invocation.getRawArguments();\n+    for (int position = 0; position < matchers.size() && position < args.length; position++) {\n+        Matcher m = matchers.get(position);\n+        if (m instanceof CapturesArguments) {\n+            if (m instanceof VarargMatcher) {\n+                Object varargArray = args[args.length - 1];\n+                if (varargArray != null && varargArray.getClass().isArray()) {\n+                    for (int i = 0; i < Array.getLength(varargArray); i++) {\n+                        ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));\n+                    }\n+                }\n+            } else {\n+                ((CapturesArguments) m).captureFrom(args[position]);\n+            }\n+        }\n+    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}