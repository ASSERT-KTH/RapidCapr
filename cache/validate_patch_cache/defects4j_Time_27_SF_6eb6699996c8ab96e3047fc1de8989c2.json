{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    return toFormatterInternal(elementPairs, null, notPrinter, true, null, notParser, true);\n}\n\nprivate static PeriodFormatter toFormatterInternal(List<Object> elementPairs, PeriodPrinter parentPrinter, boolean parentPrinterAllowed,\n                                                    boolean expectPrinter, PeriodParser parentParser, boolean parentParserAllowed, boolean expectParser) {\n    if (!parentPrinterAllowed && !parentParserAllowed) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 0) {\n        return new PeriodFormatter(parentPrinter, parentParser);\n    } else if (elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        if (size >= 2) {\n            List<Object> subList = elementPairs.subList(1, size);\n            if (subList.get(0) instanceof Separator) {\n                boolean childPrinterAllowed = parentPrinterAllowed && expectPrinter;\n                boolean childParserAllowed = parentParserAllowed && expectParser;\n                PeriodFormatter f = toFormatterInternal(subList, parentPrinter, childPrinterAllowed, expectPrinter,\n                                                         parentParser, childParserAllowed, expectParser);\n                sep = sep.finish(f.getPrinter(), f.getParser());\n            } else {\n                Object[] comp = createComposite(subList);\n                if (parentPrinterAllowed && expectPrinter) {\n                    parentPrinter = (PeriodPrinter) comp[0];\n                }\n                if (parentParserAllowed && expectParser) {\n                    parentParser = (PeriodParser) comp[1];\n                }\n                expectPrinter = false;\n                expectParser = false;\n            }\n        }\n        return toFormatterInternal(elementPairs.subList(1, size), parentPrinter, parentPrinterAllowed && expectPrinter, \n                                   expectPrinter, parentParser, parentParserAllowed && expectParser, expectParser)\n               .withSeparators(sep, sep);\n    } else {\n        Object[] comp = createComposite(elementPairs);\n        if (parentPrinterAllowed && expectPrinter) {\n            parentPrinter = (PeriodPrinter) comp[0];\n        }\n        if (parentParserAllowed && expectParser) {\n            parentParser = (PeriodParser) comp[1];\n        }\n        return new PeriodFormatter(parentPrinter, parentParser);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..1f57f280 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,54 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    return toFormatterInternal(elementPairs, null, notPrinter, true, null, notParser, true);\n+}\n+\n+private static PeriodFormatter toFormatterInternal(List<Object> elementPairs, PeriodPrinter parentPrinter, boolean parentPrinterAllowed,\n+                                                    boolean expectPrinter, PeriodParser parentParser, boolean parentParserAllowed, boolean expectParser) {\n+    if (!parentPrinterAllowed && !parentParserAllowed) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        return new PeriodFormatter(parentPrinter, parentParser);\n+    } else if (elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        if (size >= 2) {\n+            List<Object> subList = elementPairs.subList(1, size);\n+            if (subList.get(0) instanceof Separator) {\n+                boolean childPrinterAllowed = parentPrinterAllowed && expectPrinter;\n+                boolean childParserAllowed = parentParserAllowed && expectParser;\n+                PeriodFormatter f = toFormatterInternal(subList, parentPrinter, childPrinterAllowed, expectPrinter,\n+                                                         parentParser, childParserAllowed, expectParser);\n                 sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+            } else {\n+                Object[] comp = createComposite(subList);\n+                if (parentPrinterAllowed && expectPrinter) {\n+                    parentPrinter = (PeriodPrinter) comp[0];\n+                }\n+                if (parentParserAllowed && expectParser) {\n+                    parentParser = (PeriodParser) comp[1];\n+                }\n+                expectPrinter = false;\n+                expectParser = false;\n+            }\n         }\n+        return toFormatterInternal(elementPairs.subList(1, size), parentPrinter, parentPrinterAllowed && expectPrinter, \n+                                   expectPrinter, parentParser, parentParserAllowed && expectParser, expectParser)\n+               .withSeparators(sep, sep);\n+    } else {\n         Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+        if (parentPrinterAllowed && expectPrinter) {\n+            parentPrinter = (PeriodPrinter) comp[0];\n         }\n+        if (parentParserAllowed && expectParser) {\n+            parentParser = (PeriodParser) comp[1];\n+        }\n+        return new PeriodFormatter(parentPrinter, parentParser);\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}