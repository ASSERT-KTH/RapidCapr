{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        if (fieldIndex == 0) {\n            // get the current year and month\n            int year = partial.get(DateTimeFieldType.year());\n            int month = partial.get(DateTimeFieldType.monthOfYear());\n            // Find the last day of the month, taking leap years into consideration\n            int lastDayOfMonth = iChronology.dayOfMonth().getMaximumValue(inChronology.isLeapYear(year), month);\n            // Adjust the day of the month if necessary\n            int day = Math.min(values[0], lastDayOfMonth);\n            // Compute the new instant\n            instant = iChronology.yearMonthDay().set(instant, year, month, day);\n            // Add the number of months to the current month\n            instant = iChronology.monthOfYear().add(instant, valueToAdd);\n            // Find the last day of the new month\n            lastDayOfMonth = iChronology.dayOfMonth().getMaximumValue(inChronology.isLeapYear(year), iChronology.monthOfYear().get(instant));\n            // Adjust the day of the month if necessary\n            day = Math.min(values[0], lastDayOfMonth);\n            // Compute the new instant again with the new day\n            instant = iChronology.yearMonthDay().set(instant, year, iChronology.monthOfYear().get(instant), day);\n        } else {\n            instant = partial.getFieldType(fieldIndex).getField(iChronology).add(instant, valueToAdd);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..e66935b1 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,41 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+        if (fieldIndex == 0) {\n+            // get the current year and month\n+            int year = partial.get(DateTimeFieldType.year());\n+            int month = partial.get(DateTimeFieldType.monthOfYear());\n+            // Find the last day of the month, taking leap years into consideration\n+            int lastDayOfMonth = iChronology.dayOfMonth().getMaximumValue(inChronology.isLeapYear(year), month);\n+            // Adjust the day of the month if necessary\n+            int day = Math.min(values[0], lastDayOfMonth);\n+            // Compute the new instant\n+            instant = iChronology.yearMonthDay().set(instant, year, month, day);\n+            // Add the number of months to the current month\n+            instant = iChronology.monthOfYear().add(instant, valueToAdd);\n+            // Find the last day of the new month\n+            lastDayOfMonth = iChronology.dayOfMonth().getMaximumValue(inChronology.isLeapYear(year), iChronology.monthOfYear().get(instant));\n+            // Adjust the day of the month if necessary\n+            day = Math.min(values[0], lastDayOfMonth);\n+            // Compute the new instant again with the new day\n+            instant = iChronology.yearMonthDay().set(instant, year, iChronology.monthOfYear().get(instant), day);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            instant = partial.getFieldType(fieldIndex).getField(iChronology).add(instant, valueToAdd);\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}