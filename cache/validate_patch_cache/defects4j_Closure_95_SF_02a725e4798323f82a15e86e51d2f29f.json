{
    "patch": "    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n      Preconditions.checkArgument(inferred || type != null);\n\n      // Only allow declarations of NAMEs and qualfied names.\n      boolean shouldDeclareOnGlobalThis = false;\n      if (n.getType() == Token.NAME) {\n        Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);\n        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);\n      } else {\n        Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));\n      }\n      String variableName = n.getQualifiedName();\n      Preconditions.checkArgument(!variableName.isEmpty());\n\n      // If n is a property, then we should really declare it in the\n      // scope where the root object appears. This helps out people\n      // who declare \"global\" names in an anonymous namespace.\n      Scope scopeToDeclareIn = scope;\n\n      // Update this condition: only declare in global scope when the var is not already declared there.\n      if(shouldDeclareOnGlobalThis) {\n      boolean declaredInGlobalScope = globalScope.isDeclared(variableName, false);\n\n      // if declared, we expect an error.\n        if(declaredInGlobalScope){\n          validateShadowing(parent, variableName, true, globalScope.getVar(variableName));\n          return;\n        } else{\n          scopeToDeclareIn = globalScope;\n        }\n      }\n\n      // declared in closest scope?\n      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar = scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);\n      } else {\n        if (!inferred) {\n          setDeferredType(n, type);\n        }\n        CompilerInput input = compiler.getInput(sourceName);\n        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n      // Comment out the original block of code for declaring on globalThis in the original scope\n      // as it has been handled in the beginning of the updated function.\n\n        // If we're in the global scope, also declare var.prototype\n        // in the scope chain.\n        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n          FunctionType fnType = (FunctionType) type;\n          if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(OBJECT_TYPE)));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..4a1d6f62 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -897,8 +897,18 @@ final class TypedScopeCreator implements ScopeCreator {\n       // who declare \"global\" names in an anonymous namespace.\n       Scope scopeToDeclareIn = scope;\n \n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n+      // Update this condition: only declare in global scope when the var is not already declared there.\n+      if(shouldDeclareOnGlobalThis) {\n+      boolean declaredInGlobalScope = globalScope.isDeclared(variableName, false);\n+\n+      // if declared, we expect an error.\n+        if(declaredInGlobalScope){\n+          validateShadowing(parent, variableName, true, globalScope.getVar(variableName));\n+          return;\n+        } else{\n+          scopeToDeclareIn = globalScope;\n+        }\n+      }\n \n       // declared in closest scope?\n       if (scopeToDeclareIn.isDeclared(variableName, false)) {\n@@ -912,20 +922,8 @@ final class TypedScopeCreator implements ScopeCreator {\n         CompilerInput input = compiler.getInput(sourceName);\n         scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n \n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n+      // Comment out the original block of code for declaring on globalThis in the original scope\n+      // as it has been handled in the beginning of the updated function.\n \n         // If we're in the global scope, also declare var.prototype\n         // in the scope chain.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}