{
    "patch": "public Fraction reduce() {\n    int gcd = Math.abs(greatestCommonDivisor(numerator, denominator));\n    if (gcd == 0) {\n        // if numerator is 0 then return a fraction with denominator 1\n        return new Fraction(0, 1);\n    }\n    return new Fraction(numerator / gcd, denominator / gcd);\n}\n\nprivate int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..7c468c9e 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,13 +462,22 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    int gcd = Math.abs(greatestCommonDivisor(numerator, denominator));\n+    if (gcd == 0) {\n+        // if numerator is 0 then return a fraction with denominator 1\n+        return new Fraction(0, 1);\n+    }\n+    return new Fraction(numerator / gcd, denominator / gcd);\n+}\n+\n+private int greatestCommonDivisor(int a, int b) {\n+    if (b == 0) {\n+        return a;\n+    } else {\n+        return greatestCommonDivisor(b, a % b);\n     }\n+}\n \n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>",
    "result_reason": "error: method greatestCommonDivisor(int,int) is already defined in class Fraction",
    "test_result": "ERROR"
}