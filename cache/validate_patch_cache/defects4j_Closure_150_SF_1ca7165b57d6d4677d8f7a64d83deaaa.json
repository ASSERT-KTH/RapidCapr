{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (NodeUtil.isFunctionExpression(n)) {\n            if (NodeUtil.isStatement(parent)) {\n              defineVar(n, parent);\n            } else {\n              defineDeclaredFunction(n, parent);\n            }\n          } else if (parent.getType() != Token.NAME) {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.NAME:\n          if (parent.getType() != Token.FUNCTION) {\n            defineVar(n, parent);\n          }\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..ea9170fa 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1451,17 +1451,29 @@ final class TypedScopeCreator implements ScopeCreator {\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          if (NodeUtil.isFunctionExpression(n)) {\n+            if (NodeUtil.isStatement(parent)) {\n+              defineVar(n, parent);\n+            } else {\n+              defineDeclaredFunction(n, parent);\n+            }\n+          } else if (parent.getType() != Token.NAME) {\n+            defineDeclaredFunction(n, parent);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n+        case Token.NAME:\n+          if (parent.getType() != Token.FUNCTION) {\n+            defineVar(n, parent);\n+          }\n+          break;\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        default:\n+          break;\n       }\n     }\n ",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}