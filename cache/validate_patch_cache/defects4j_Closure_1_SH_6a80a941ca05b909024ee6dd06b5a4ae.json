{
    "patch": "    Scope hoistScope = fnScope.getParent();\n    CheckUnreachableCode checkUnreachableCode =\n        new CheckUnreachableCode(compiler, true);\n    checkUnreachableCode.enterScope(fnScope);\n\n    Node current = NodeUtil.getEnclosingStatement(function);\n    Node last = current.getLastChild();\n    for (Node arg : argList.children()) {\n      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n        NodeUtil.removeChild(current, arg);\n        compiler.reportCodeChange();\n        if (last == arg) {\n          last = current.getLastChild();\n        }\n        if (NodeUtil.isStatement(last.getParent())) {\n          checkUnreachableCode.exitScope(last.getParent());\n          try {\n            checkUnreachableCode.visit(last.getParent(), null);\n          } finally {\n            checkUnreachableCode.enterScope(fnScope);\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (current.getParent() != null) {\n      Node parentBlock = current.getParent();\n      if (NodeUtil.tryMergeBlockNodesAdjacentToIf(parentBlock, compiler)) {\n        Node newLast = parentBlock.getLastChild();\n        if (NodeUtil.isStatement(newLast)) {\n          checkUnreachableCode.exitScope(parentBlock);\n          try {\n            checkUnreachableCode.visit(newLast, null);\n          } finally {\n            checkUnreachableCode.enterScope(fnScope);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..aa9e177c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,47 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Scope hoistScope = fnScope.getParent();\n+    CheckUnreachableCode checkUnreachableCode =\n+        new CheckUnreachableCode(compiler, true);\n+    checkUnreachableCode.enterScope(fnScope);\n+\n+    Node current = NodeUtil.getEnclosingStatement(function);\n+    Node last = current.getLastChild();\n+    for (Node arg : argList.children()) {\n+      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+        NodeUtil.removeChild(current, arg);\n+        compiler.reportCodeChange();\n+        if (last == arg) {\n+          last = current.getLastChild();\n+        }\n+        if (NodeUtil.isStatement(last.getParent())) {\n+          checkUnreachableCode.exitScope(last.getParent());\n+          try {\n+            checkUnreachableCode.visit(last.getParent(), null);\n+          } finally {\n+            checkUnreachableCode.enterScope(fnScope);\n+          }\n+        }\n+      } else {\n+        break;\n+      }\n+    }\n+\n+    if (current.getParent() != null) {\n+      Node parentBlock = current.getParent();\n+      if (NodeUtil.tryMergeBlockNodesAdjacentToIf(parentBlock, compiler)) {\n+        Node newLast = parentBlock.getLastChild();\n+        if (NodeUtil.isStatement(newLast)) {\n+          checkUnreachableCode.exitScope(parentBlock);\n+          try {\n+            checkUnreachableCode.visit(newLast, null);\n+          } finally {\n+            checkUnreachableCode.enterScope(fnScope);\n+          }\n+        }\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: constructor CheckUnreachableCode in class CheckUnreachableCode cannot be applied to given types;",
    "test_result": "ERROR"
}