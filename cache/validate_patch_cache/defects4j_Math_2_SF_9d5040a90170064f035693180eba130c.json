{
    "patch": "public double getNumericalMean() {\n\n    int sampleSize = getSampleSize();\n    int numSuccesses = getNumberOfSuccesses();\n    int populationSize = getPopulationSize();\n    \n    if (sampleSize < 0 || numSuccesses < 0 || populationSize <= 0 ||\n        numSuccesses > populationSize || sampleSize > populationSize) {\n            return Double.NaN;\n    }\n\n    return ((double) sampleSize * numSuccesses) / populationSize;\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\nindex 27691272f..ace546767 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n@@ -264,10 +264,21 @@ public class HypergeometricDistribution extends AbstractIntegerDistribution {\n      * For population size {@code N}, number of successes {@code m}, and sample\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n-    public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+public double getNumericalMean() {\n+\n+    int sampleSize = getSampleSize();\n+    int numSuccesses = getNumberOfSuccesses();\n+    int populationSize = getPopulationSize();\n+    \n+    if (sampleSize < 0 || numSuccesses < 0 || populationSize <= 0 ||\n+        numSuccesses > populationSize || sampleSize > populationSize) {\n+            return Double.NaN;\n     }\n \n+    return ((double) sampleSize * numSuccesses) / populationSize;\n+\n+}\n+\n     /**\n      * {@inheritDoc}\n      *",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}