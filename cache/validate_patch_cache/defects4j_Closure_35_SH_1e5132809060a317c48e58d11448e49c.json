{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type);\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.hasProperty(prop)) {\n            JSType typeToInfer = propType.getLeastSupertype(getNativeType(UNKNOWN_TYPE));\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    } else {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : objType.getOwnPropertyNames()) {\n          JSType propType = objType.getPropertyType(prop);\n          if (!propType.isUnknownType()) {\n            if (propType.isRecordType() || propType.isUnionType()) {\n              warnings.add(JSError.make(n.getSourceFileName(), n.getLineno(),\n                  TypeValidator.TYPE_MISMATCH_WARNING,\n                  \"Can't infer the type of the property \" + prop + \" of \" + type));\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..9fe0c309 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1119,20 +1119,31 @@ class TypeInference\n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+      ObjectType objType = ObjectType.cast(type);\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n+          if (!objType.hasProperty(prop)) {\n+            JSType typeToInfer = propType.getLeastSupertype(getNativeType(UNKNOWN_TYPE));\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n       }\n+    } else {\n+      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+      if (objType != null) {\n+        for (String prop : objType.getOwnPropertyNames()) {\n+          JSType propType = objType.getPropertyType(prop);\n+          if (!propType.isUnknownType()) {\n+            if (propType.isRecordType() || propType.isUnionType()) {\n+              warnings.add(JSError.make(n.getSourceFileName(), n.getLineno(),\n+                  TypeValidator.TYPE_MISMATCH_WARNING,\n+                  \"Can't infer the type of the property \" + prop + \" of \" + type));\n+            }\n+          }\n+        }\n+      }\n+    }\n     }\n   }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}