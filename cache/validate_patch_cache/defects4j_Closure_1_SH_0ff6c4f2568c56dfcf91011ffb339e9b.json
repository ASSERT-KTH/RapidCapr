{
    "patch": "          List<Node> toRemove = Lists.newArrayList(lastArg);\n          // Also remove the default value for J2CL due its parameter\n          // mangling. E.g.\n          // function foo($x$$jscomp$1 = 1) {}\n          // would disable mangling of $x$$jscomp$1 because we'd be\n          // supplying a default value for it.\n          if (lastArg.hasChildren()) {\n            toRemove.add(lastArg.getLastChild());\n          }\n          for (Node n : toRemove) {\n            argList.removeChild(n);\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..97124bdc 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+          List<Node> toRemove = Lists.newArrayList(lastArg);\n+          // Also remove the default value for J2CL due its parameter\n+          // mangling. E.g.\n+          // function foo($x$$jscomp$1 = 1) {}\n+          // would disable mangling of $x$$jscomp$1 because we'd be\n+          // supplying a default value for it.\n+          if (lastArg.hasChildren()) {\n+            toRemove.add(lastArg.getLastChild());\n+          }\n+          for (Node n : toRemove) {\n+            argList.removeChild(n);\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}