{
    "patch": "    // Check for unreferenced parameters.\n    if (!modifyCallers) {\n      Node lastArg = null;\n      Node arg = argList.getFirstChild();\n      boolean usesArgumentsObject = false;\n      while (arg != null) {\n        Node nextArg = arg.getNext();\n        boolean unusedArg = true;\n        if (arg.isName()) {\n          Var var = fnScope.getVar(arg.getString());\n          unusedArg = !referenced.contains(var);\n        } else if (arg.isRest()) {\n          unusedArg = !referencedRestParams.contains(arg);\n          if (unusedArg && !arg.hasChildren()) {\n            arg.detachFromParent();\n            compiler.reportCodeChange();\n            continue;\n          }\n        }\n        if (unusedArg) {\n          arg.detachFromParent();\n          if (lastArg == null) {\n            argList.removeChild(arg);\n          } else {\n            argList.removeChild(lastArg.getNext());\n          }\n          compiler.reportCodeChange();\n        } else {\n          if (arg.isName() && arg.getString().equals(\"arguments\")) {\n            usesArgumentsObject = true;\n          }\n          lastArg = arg;\n        }\n        arg = nextArg;\n      }\n\n      if (!usesArgumentsObject) {\n        function.removeFirstChild();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced, referencedRestParams);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..373aca3a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,48 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Check for unreferenced parameters.\n+    if (!modifyCallers) {\n+      Node lastArg = null;\n+      Node arg = argList.getFirstChild();\n+      boolean usesArgumentsObject = false;\n+      while (arg != null) {\n+        Node nextArg = arg.getNext();\n+        boolean unusedArg = true;\n+        if (arg.isName()) {\n+          Var var = fnScope.getVar(arg.getString());\n+          unusedArg = !referenced.contains(var);\n+        } else if (arg.isRest()) {\n+          unusedArg = !referencedRestParams.contains(arg);\n+          if (unusedArg && !arg.hasChildren()) {\n+            arg.detachFromParent();\n+            compiler.reportCodeChange();\n+            continue;\n+          }\n+        }\n+        if (unusedArg) {\n+          arg.detachFromParent();\n+          if (lastArg == null) {\n+            argList.removeChild(arg);\n+          } else {\n+            argList.removeChild(lastArg.getNext());\n+          }\n+          compiler.reportCodeChange();\n+        } else {\n+          if (arg.isName() && arg.getString().equals(\"arguments\")) {\n+            usesArgumentsObject = true;\n+          }\n+          lastArg = arg;\n+        }\n+        arg = nextArg;\n+      }\n+\n+      if (!usesArgumentsObject) {\n+        function.removeFirstChild();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced, referencedRestParams);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}