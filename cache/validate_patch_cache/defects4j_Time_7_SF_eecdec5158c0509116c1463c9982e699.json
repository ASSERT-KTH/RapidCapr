{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        \n        int month = bucket.getMonthOfYear();\n        int year = bucket.getYear();\n        int day = bucket.getDayOfMonth();\n        \n        // adjust day of month for leap years\n        if (month == 2 && day == 29 && (year & 3) != 0) {\n            day = 28;\n        }\n        \n        instantLocal = bucket.computeMillis(false, text, newPos);\n        int[] parsedValues = chrono.get(\n            DateTimeUtils.getInstantMillis(instantLocal, instant.getChronology()), bucket);\n        if (year != parsedValues[0] || month != parsedValues[1] || day != parsedValues[2]) {\n            throw new IllegalFieldValueException(DateTimeFieldType.year(), year, null, null);\n        }\n        instant.setMillis(instantLocal);\n        \n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..63e996a1 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -712,7 +712,24 @@ public class DateTimeFormatter {\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n+        \n+        int month = bucket.getMonthOfYear();\n+        int year = bucket.getYear();\n+        int day = bucket.getDayOfMonth();\n+        \n+        // adjust day of month for leap years\n+        if (month == 2 && day == 29 && (year & 3) != 0) {\n+            day = 28;\n+        }\n+        \n+        instantLocal = bucket.computeMillis(false, text, newPos);\n+        int[] parsedValues = chrono.get(\n+            DateTimeUtils.getInstantMillis(instantLocal, instant.getChronology()), bucket);\n+        if (year != parsedValues[0] || month != parsedValues[1] || day != parsedValues[2]) {\n+            throw new IllegalFieldValueException(DateTimeFieldType.year(), year, null, null);\n+        }\n+        instant.setMillis(instantLocal);\n+        \n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}