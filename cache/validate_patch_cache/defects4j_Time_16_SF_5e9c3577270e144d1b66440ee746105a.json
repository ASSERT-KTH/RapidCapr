{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    Locale locale = iLocale;\n    if (locale == null) {\n        locale = Locale.getDefault();\n    }\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis, chrono, locale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos >= 0) {\n        // The parsing was successful\n        if (iOffsetParsed) {\n            // Append timezone offset if parsed\n            DateFormatUtils.appendTimeZone(bucket.getOffset(), text, newPos);\n        }\n        instant.setMillis(bucket.computeMillis(false, text));\n        instant.setChronology(bucket.getChronology());\n        if (bucket.getZone() != null) {\n            instant.setZone(bucket.getZone());\n        }\n    } else {\n        // The parsing failed\n        newPos = ~newPos;\n        if (newPos > 0) {\n            newPos = prepareNegativeNumber(text, position, newPos);\n        }\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..bb0120db 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -694,35 +694,44 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    Locale locale = iLocale;\n+    if (locale == null) {\n+        locale = Locale.getDefault();\n+    }\n+    chrono = selectChronology(chrono);\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            instantMillis, chrono, locale, iPivotYear, iDefaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos >= 0) {\n+        // The parsing was successful\n+        if (iOffsetParsed) {\n+            // Append timezone offset if parsed\n+            DateFormatUtils.appendTimeZone(bucket.getOffset(), text, newPos);\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        instant.setChronology(bucket.getChronology());\n+        if (bucket.getZone() != null) {\n+            instant.setZone(bucket.getZone());\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+    } else {\n+        // The parsing failed\n+        newPos = ~newPos;\n+        if (newPos > 0) {\n+            newPos = prepareNegativeNumber(text, position, newPos);\n         }\n-        return newPos;\n     }\n \n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}