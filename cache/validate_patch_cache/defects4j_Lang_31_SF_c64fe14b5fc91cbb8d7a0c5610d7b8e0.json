{
    "patch": "Apologies for the incorrect response previously. Without the given code, I will provide a sample implementation of the `containsAny` method in `StringUtils` class which should pass the failing test with supplementary characters.\n\n```\npublic class StringUtils {\n  \n  public static boolean containsAny(String str, char[] searchChars) {\n    if (str == null || str.length() == 0 ||\n        searchChars == null || searchChars.length == 0) {\n        return false;\n    }\n\n    int strLength = str.length();\n    int searchLength = searchChars.length;\n    int min = Integer.MAX_VALUE;\n    int max = Integer.MIN_VALUE;\n\n    for (int i = 0; i < searchLength; i++) {\n      char searchChar = searchChars[i];\n      if (Character.isLowSurrogate(searchChar) || Character.isHighSurrogate(searchChar)) {\n        continue;\n      }\n      min = Math.min(min, searchChar);\n      max = Math.max(max, searchChar);\n    }\n\n    if (max == Integer.MIN_VALUE) {\n      return false;\n    }\n\n    if (max > Character.MAX_VALUE) {\n      return false;\n    }\n\n    for (int i = 0; i < strLength; i++) {\n      char ch = str.charAt(i);\n      if (ch >= min && ch <= max) {\n        if (!Character.isSurrogate(ch)) {\n          return true;\n        } else if (i < strLength - 1) {\n          char ch2 = str.charAt(i + 1);\n          if (Character.isSurrogatePair(ch, ch2)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n}\n```",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..073c3d0d 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,57 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+Apologies for the incorrect response previously. Without the given code, I will provide a sample implementation of the `containsAny` method in `StringUtils` class which should pass the failing test with supplementary characters.\n+\n+```\n+public class StringUtils {\n+  \n+  public static boolean containsAny(String str, char[] searchChars) {\n+    if (str == null || str.length() == 0 ||\n+        searchChars == null || searchChars.length == 0) {\n+        return false;\n+    }\n+\n+    int strLength = str.length();\n+    int searchLength = searchChars.length;\n+    int min = Integer.MAX_VALUE;\n+    int max = Integer.MIN_VALUE;\n+\n+    for (int i = 0; i < searchLength; i++) {\n+      char searchChar = searchChars[i];\n+      if (Character.isLowSurrogate(searchChar) || Character.isHighSurrogate(searchChar)) {\n+        continue;\n+      }\n+      min = Math.min(min, searchChar);\n+      max = Math.max(max, searchChar);\n+    }\n+\n+    if (max == Integer.MIN_VALUE) {\n+      return false;\n+    }\n+\n+    if (max > Character.MAX_VALUE) {\n+      return false;\n+    }\n+\n+    for (int i = 0; i < strLength; i++) {\n+      char ch = str.charAt(i);\n+      if (ch >= min && ch <= max) {\n+        if (!Character.isSurrogate(ch)) {\n+          return true;\n+        } else if (i < strLength - 1) {\n+          char ch2 = str.charAt(i + 1);\n+          if (Character.isSurrogatePair(ch, ch2)) {\n+            return true;\n+          }\n+        }\n+      }\n+    }\n+\n+    return false;\n+  }\n+}\n+```\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}