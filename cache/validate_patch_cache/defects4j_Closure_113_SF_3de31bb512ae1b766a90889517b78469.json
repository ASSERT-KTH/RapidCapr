{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    String ns;\n    if (arg != null && arg.isString()) {\n      ns = arg.getString();\n    } else {\n      // The argument is not a string literal, which is a syntax error.\n      compiler.report(t.makeError(n, INVALID_REQUIRE_ARGUMENT_ERROR));\n      return; // Stop processing this node.\n    }\n\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null) {\n      // If the namespace was not provided, we add it to an \"unrecognized requires\" list\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else if (!provided.isExplicitlyProvided()) {\n      // If the namespace was provided implicitly, we add an error message\n      compiler.report(t.makeError(n, MISSING_PROVIDE_ERROR, ns));\n    } else {\n      // If the namespace was provided explicitly, we check if it is in the correct module\n      JSModule providedModule = provided.explicitModule;\n\n      // This must be non-null, because there was an explicit provide.\n      Preconditions.checkNotNull(providedModule);\n\n      JSModule module = t.getModule();\n      if (moduleGraph != null &&\n          module != providedModule &&\n          !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n\n    // We remove the require from the AST\n    if (parent != null) {\n      parent.removeChild(n);\n    } else {\n      Node replacement = NodeUtil.newUndefinedNode(n);\n      replacement.copyInformationFrom(n);\n      n.replaceWith(replacement);\n      // This is a top-level require, so we need to add a warning message.\n      compiler.report(t.makeError(n, TOP_LEVEL_REQUIRE_WARNING));\n    }\n    compiler.reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..06f71c76 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,46 +292,59 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n     Node arg = left.getNext();\n-    if (verifyLastArgumentIsString(t, left, arg)) {\n-      String ns = arg.getString();\n-      ProvidedName provided = providedNames.get(ns);\n-      if (provided == null || !provided.isExplicitlyProvided()) {\n-        unrecognizedRequires.add(\n-            new UnrecognizedRequire(n, ns, t.getSourceName()));\n-      } else {\n-        JSModule providedModule = provided.explicitModule;\n+    String ns;\n+    if (arg != null && arg.isString()) {\n+      ns = arg.getString();\n+    } else {\n+      // The argument is not a string literal, which is a syntax error.\n+      compiler.report(t.makeError(n, INVALID_REQUIRE_ARGUMENT_ERROR));\n+      return; // Stop processing this node.\n+    }\n+\n+    ProvidedName provided = providedNames.get(ns);\n+    if (provided == null) {\n+      // If the namespace was not provided, we add it to an \"unrecognized requires\" list\n+      unrecognizedRequires.add(\n+          new UnrecognizedRequire(n, ns, t.getSourceName()));\n+    } else if (!provided.isExplicitlyProvided()) {\n+      // If the namespace was provided implicitly, we add an error message\n+      compiler.report(t.makeError(n, MISSING_PROVIDE_ERROR, ns));\n+    } else {\n+      // If the namespace was provided explicitly, we check if it is in the correct module\n+      JSModule providedModule = provided.explicitModule;\n \n-        // This must be non-null, because there was an explicit provide.\n-        Preconditions.checkNotNull(providedModule);\n+      // This must be non-null, because there was an explicit provide.\n+      Preconditions.checkNotNull(providedModule);\n \n-        JSModule module = t.getModule();\n-        if (moduleGraph != null &&\n-            module != providedModule &&\n-            !moduleGraph.dependsOn(module, providedModule)) {\n-          compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n-                  providedModule.getName(),\n-                  module.getName()));\n-        }\n+      JSModule module = t.getModule();\n+      if (moduleGraph != null &&\n+          module != providedModule &&\n+          !moduleGraph.dependsOn(module, providedModule)) {\n+        compiler.report(\n+            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                providedModule.getName(),\n+                module.getName()));\n       }\n+    }\n \n-      maybeAddToSymbolTable(left);\n-      maybeAddStringNodeToSymbolTable(arg);\n+    maybeAddToSymbolTable(left);\n+    maybeAddStringNodeToSymbolTable(arg);\n \n-      // Requires should be removed before further processing.\n-      // Some clients run closure pass multiple times, first with\n-      // the checks for broken requires turned off. In these cases, we\n-      // allow broken requires to be preserved by the first run to\n-      // let them be caught in the subsequent run.\n-      if (provided != null) {\n-        parent.detachFromParent();\n-        compiler.reportCodeChange();\n-      }\n+    // We remove the require from the AST\n+    if (parent != null) {\n+      parent.removeChild(n);\n+    } else {\n+      Node replacement = NodeUtil.newUndefinedNode(n);\n+      replacement.copyInformationFrom(n);\n+      n.replaceWith(replacement);\n+      // This is a top-level require, so we need to add a warning message.\n+      compiler.report(t.makeError(n, TOP_LEVEL_REQUIRE_WARNING));\n     }\n-  }\n+    compiler.reportCodeChange();\n+}\n \n   /**\n    * Handles a goog.provide call.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}