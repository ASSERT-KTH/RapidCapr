{
    "patch": "import org.apache.commons.math3.analysis.UnivariateFunction;\nimport org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;\nimport org.apache.commons.math3.exception.MathInternalError;\nimport org.apache.commons.math3.exception.MathIllegalStateException;\nimport org.apache.commons.math3.exception.NoBracketingException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\n\npublic class BisectionSolver extends BaseAbstractUnivariateSolver {\n    \n    /**\n     * Construct a solver with default accuracy.\n     */\n    public BisectionSolver() {\n        super(DEFAULT_ABSOLUTE_ACCURACY);\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param absoluteAccuracy Maximum absolute error.\n     */\n    public BisectionSolver(final double absoluteAccuracy) {\n        super(absoluteAccuracy);\n    }\n\n    /**\n     * Solve for a zero in the given interval, starting at {@code maxIterations} iterations if it is positive.\n     *\n     * @param maxIterations Maximum number of iterations to perform, or -1 for no maximum.\n     * @param f Function to find the zero of.\n     * @param min Lower bound of the search interval.\n     * @param max Upper bound of the search interval.\n     * @return A value where {@code f(x) == 0}.\n     * @throws MathIllegalStateException if an interval is invalid or {@code f(min)} or {@code f(max)} has the same sign.\n     * @throws TooManyEvaluationsException if {@code maxIterations} is exceeded.\n     */\n    public double solve(int maxIterations, final UnivariateFunction f, final double min, final double max) throws TooManyEvaluationsException {\n        clearResult();\n        verifyInterval(min, max);\n        double midpoint, lVal, rVal, mVal;\n        lVal = f.value(min);\n        rVal = f.value(max);\n        if (lVal * rVal > 0) {\n            throw new MathIllegalStateException(\n                    \"Function values at endpoints do not have different signs.  \" +\n                    \"Endpoints: [\" + min + \",\" + max + \"], Values: [\" + lVal + \",\" + rVal + \"]\");\n        }\n        mVal = Double.POSITIVE_INFINITY;\n        while (maxIterations-- > 0) {\n            midpoint = (min + max) * 0.5;\n            if (((midpoint == 0.0) || (max - min < absoluteAccuracy)) ||\n                    (mVal == 0 && FastMath.abs(rVal) < FastMath.abs(lVal))) {\n                setResult(midpoint, iterations);\n                return getResult();\n            }\n            mVal = f.value(midpoint);\n            if (mVal * lVal <= 0) {\n                max = midpoint;\n                rVal = mVal;\n            } else {\n                min = midpoint;\n                lVal = mVal;\n            }\n            incrementIterationsCounter();\n        }\n        throw new TooManyEvaluationsException(maxIterations + 1);\n    }\n    \n    /**\n     * {@inheritDoc}\n     *\n     * @throws MathIllegalStateException if the function cannot be evaluated\n     *         at the initial search points.\n     * @throws NoBracketingException if the initial search interval does not bracket a root\n     *         and the solver requires bracketing.\n     * @throws TooManyEvaluationsException if an iterative solver exceeds the permitted number\n     *         of evaluations.\n     * @throws MathInternalError if the results of multiple function evaluations\n     *         lead to the detection of the same root at the same endpoint of\n     *         the search interval.\n     */\n    @Override\n    protected final double doSolve()\n        throws MathIllegalStateException, NoBracketingException,\n               TooManyEvaluationsException, MathInternalError {\n        final double min = getMin();\n        final double max = getMax();\n        final double functionValueAccuracy = getFunctionValueAccuracy();\n\n        verifyInterval(min, max);\n        verifyBracketing(min, max);\n        \n        double a = min;\n        double fa = computeObjectiveValue(a);\n\n        double b = max;\n        double fb = computeObjectiveValue(b);\n\n        double c;\n        double fc;\n        while (true) {\n            c = (a + b) / 2.0;\n            fc = computeObjectiveValue(c);\n\n            if (fc == 0.0) { // bingo\n                setResult(c, iterations);\n                return c;\n            }\n\n            double interval = b - a;\n            // Stop criterion.\n            if (interval < functionValueAccuracy) {\n                setResult(c, iterations);\n                return c;\n            }\n\n            // Narrow the interval.\n            if (fa * fc < 0) { // [a, c]\n                b = c;\n                fb = fc;\n            } else { // [c, b]\n                a = c;\n                fa = fc;\n            }\n\n            ++iterations;\n\n            if (maximumIterations != -1 && iterations >= maximumIterations) {\n                throw new TooManyEvaluationsException(maximumIterations);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..05c6766e7 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,126 +125,139 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;\n+import org.apache.commons.math3.exception.MathInternalError;\n+import org.apache.commons.math3.exception.MathIllegalStateException;\n+import org.apache.commons.math3.exception.NoBracketingException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n+public class BisectionSolver extends BaseAbstractUnivariateSolver {\n+    \n+    /**\n+     * Construct a solver with default accuracy.\n+     */\n+    public BisectionSolver() {\n+        super(DEFAULT_ABSOLUTE_ACCURACY);\n+    }\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param absoluteAccuracy Maximum absolute error.\n+     */\n+    public BisectionSolver(final double absoluteAccuracy) {\n+        super(absoluteAccuracy);\n+    }\n+\n+    /**\n+     * Solve for a zero in the given interval, starting at {@code maxIterations} iterations if it is positive.\n+     *\n+     * @param maxIterations Maximum number of iterations to perform, or -1 for no maximum.\n+     * @param f Function to find the zero of.\n+     * @param min Lower bound of the search interval.\n+     * @param max Upper bound of the search interval.\n+     * @return A value where {@code f(x) == 0}.\n+     * @throws MathIllegalStateException if an interval is invalid or {@code f(min)} or {@code f(max)} has the same sign.\n+     * @throws TooManyEvaluationsException if {@code maxIterations} is exceeded.\n+     */\n+    public double solve(int maxIterations, final UnivariateFunction f, final double min, final double max) throws TooManyEvaluationsException {\n+        clearResult();\n+        verifyInterval(min, max);\n+        double midpoint, lVal, rVal, mVal;\n+        lVal = f.value(min);\n+        rVal = f.value(max);\n+        if (lVal * rVal > 0) {\n+            throw new MathIllegalStateException(\n+                    \"Function values at endpoints do not have different signs.  \" +\n+                    \"Endpoints: [\" + min + \",\" + max + \"], Values: [\" + lVal + \",\" + rVal + \"]\");\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n+        mVal = Double.POSITIVE_INFINITY;\n+        while (maxIterations-- > 0) {\n+            midpoint = (min + max) * 0.5;\n+            if (((midpoint == 0.0) || (max - min < absoluteAccuracy)) ||\n+                    (mVal == 0 && FastMath.abs(rVal) < FastMath.abs(lVal))) {\n+                setResult(midpoint, iterations);\n+                return getResult();\n+            }\n+            mVal = f.value(midpoint);\n+            if (mVal * lVal <= 0) {\n+                max = midpoint;\n+                rVal = mVal;\n+            } else {\n+                min = midpoint;\n+                lVal = mVal;\n+            }\n+            incrementIterationsCounter();\n         }\n+        throw new TooManyEvaluationsException(maxIterations + 1);\n+    }\n+    \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws MathIllegalStateException if the function cannot be evaluated\n+     *         at the initial search points.\n+     * @throws NoBracketingException if the initial search interval does not bracket a root\n+     *         and the solver requires bracketing.\n+     * @throws TooManyEvaluationsException if an iterative solver exceeds the permitted number\n+     *         of evaluations.\n+     * @throws MathInternalError if the results of multiple function evaluations\n+     *         lead to the detection of the same root at the same endpoint of\n+     *         the search interval.\n+     */\n+    @Override\n+    protected final double doSolve()\n+        throws MathIllegalStateException, NoBracketingException,\n+               TooManyEvaluationsException, MathInternalError {\n+        final double min = getMin();\n+        final double max = getMax();\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n-\n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        verifyInterval(min, max);\n+        verifyBracketing(min, max);\n+        \n+        double a = min;\n+        double fa = computeObjectiveValue(a);\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+        double b = max;\n+        double fb = computeObjectiveValue(b);\n \n-        // Keep finding better approximations.\n+        double c;\n+        double fc;\n         while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            c = (a + b) / 2.0;\n+            fc = computeObjectiveValue(c);\n \n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n+            if (fc == 0.0) { // bingo\n+                setResult(c, iterations);\n+                return c;\n             }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n-            } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n-                }\n+            double interval = b - a;\n+            // Stop criterion.\n+            if (interval < functionValueAccuracy) {\n+                setResult(c, iterations);\n+                return c;\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n \n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+            // Narrow the interval.\n+            if (fa * fc < 0) { // [a, c]\n+                b = c;\n+                fb = fc;\n+            } else { // [c, b]\n+                a = c;\n+                fa = fc;\n             }\n \n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+            ++iterations;\n+\n+            if (maximumIterations != -1 && iterations >= maximumIterations) {\n+                throw new TooManyEvaluationsException(maximumIterations);\n             }\n         }\n     }\n+}\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}