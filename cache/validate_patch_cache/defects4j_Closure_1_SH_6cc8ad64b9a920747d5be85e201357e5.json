{
    "patch": "Node function = fnScope.getRootNode();\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\n\nNode argList = getFunctionArgList(function);\nint argIndex = 0;\nwhile (argIndex < argList.getChildCount()) {\n  Node arg = argList.getChildAtIndex(argIndex);\n  Var var = fnScope.getVar(arg.getString());\n  if (!referenced.contains(var)) {\n    argList.removeChild(arg);\n    compiler.reportCodeChange();\n  } else {\n    argIndex++;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e9a029fc 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+int argIndex = 0;\n+while (argIndex < argList.getChildCount()) {\n+  Node arg = argList.getChildAtIndex(argIndex);\n+  Var var = fnScope.getVar(arg.getString());\n+  if (!referenced.contains(var)) {\n+    argList.removeChild(arg);\n+    compiler.reportCodeChange();\n+  } else {\n+    argIndex++;\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable function is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}