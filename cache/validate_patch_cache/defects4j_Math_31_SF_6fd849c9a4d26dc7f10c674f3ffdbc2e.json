{
    "patch": "    public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50;\n        double hPrev = getA(0, x);\n\n        // use the value of small as epsilon criteria for zero checks\n        if (Precision.equals(hPrev, 0.0, small)) {\n            hPrev = small;\n        }\n\n        int n = 1;\n        double dPrev = 0.0;\n        double p0 = 1.0;\n        double q1 = 1.0;\n        double cPrev = hPrev;\n        double hN = hPrev;\n\n        while (n < maxIterations) {\n            final double a = getA(n, x);\n            final double b = getB(n, x);\n\n            double cN, q2;\n\n            if (FastMath.abs(b) < 1e-300 || FastMath.abs(a) < 1e-300) {\n                // handle the specific case where a or b is very small\n                cN = a * hPrev;\n                q2 = 1.0;\n            } else {\n                // compute cN and q2 normally\n                cN = a * hPrev + b * p0;\n                q2 = a * q1 + b * dPrev;\n            }\n\n            if (FastMath.abs(q2) < 1e-300) {\n                // handle the specific case where q2 is very small\n                q2 = 1.0 / 1e-300;\n            }\n\n            if (Double.isInfinite(cN) || Double.isInfinite(q2) || Double.isNaN(cN) || Double.isNaN(q2)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n\n            final double deltaN = cN / q2 / cPrev;\n            hN = cPrev * deltaN;\n\n            if (Double.isInfinite(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                        x);\n            }\n            if (Double.isNaN(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                        x);\n            }\n\n            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n                break;\n            }\n\n            dPrev = q1;\n            cPrev = cN / q2;\n            p0 = hPrev;\n            hPrev = cN;\n            q1 = q2;\n            n++;\n        }\n\n        if (n >= maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                    maxIterations, x);\n        }\n\n        return hN;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..4fcaa9573 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -140,30 +140,25 @@ public abstract class ContinuedFraction {\n             final double a = getA(n, x);\n             final double b = getB(n, x);\n \n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n-                }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n-                    }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n-                        break;\n-                    }\n-                }\n+            double cN, q2;\n+\n+            if (FastMath.abs(b) < 1e-300 || FastMath.abs(a) < 1e-300) {\n+                // handle the specific case where a or b is very small\n+                cN = a * hPrev;\n+                q2 = 1.0;\n+            } else {\n+                // compute cN and q2 normally\n+                cN = a * hPrev + b * p0;\n+                q2 = a * q1 + b * dPrev;\n+            }\n+\n+            if (FastMath.abs(q2) < 1e-300) {\n+                // handle the specific case where q2 is very small\n+                q2 = 1.0 / 1e-300;\n+            }\n+\n+            if (Double.isInfinite(cN) || Double.isInfinite(q2) || Double.isNaN(cN) || Double.isNaN(q2)) {\n+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n             }\n \n             final double deltaN = cN / q2 / cPrev;\n@@ -171,11 +166,11 @@ public abstract class ContinuedFraction {\n \n             if (Double.isInfinite(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                               x);\n+                        x);\n             }\n             if (Double.isNaN(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n+                        x);\n             }\n \n             if (FastMath.abs(deltaN - 1.0) < epsilon) {\n@@ -192,7 +187,7 @@ public abstract class ContinuedFraction {\n \n         if (n >= maxIterations) {\n             throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n+                    maxIterations, x);\n         }\n \n         return hN;",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.8658177758> but was:<0.8741057810913545>",
    "test_result": "FAIL"
}