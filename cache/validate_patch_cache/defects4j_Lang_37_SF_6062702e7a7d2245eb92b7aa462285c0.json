{
    "patch": "public static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n    T[] joinedArray;\n\n    if (type1.isAssignableFrom(type2) || type2.isAssignableFrom(type1)) {\n        // Both types are compatible, so we can create the joined array\n        joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    } else {\n        // The types are not compatible, so we need to check if they are primitive or not\n        if (type1.isPrimitive() || type2.isPrimitive()) {\n            // At least one type is primitive, so we can't create the joined array\n            throw new IllegalArgumentException(\"Cannot add arrays of different primitive types\");\n        } else {\n            // Both types are non-primitive, so we can still create the joined array\n            joinedArray = (T[]) Array.newInstance(Object.class, array1.length + array2.length);\n            System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        }\n    }\n\n    return joinedArray;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..b6113862 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,20 +2950,37 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n-        }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+public static <T> T[] addAll(T[] array1, T... array2) {\n+    if (array1 == null) {\n+        return clone(array2);\n+    } else if (array2 == null) {\n+        return clone(array1);\n+    }\n+    final Class<?> type1 = array1.getClass().getComponentType();\n+    final Class<?> type2 = array2.getClass().getComponentType();\n+    T[] joinedArray;\n+\n+    if (type1.isAssignableFrom(type2) || type2.isAssignableFrom(type1)) {\n+        // Both types are compatible, so we can create the joined array\n+        joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+    } else {\n+        // The types are not compatible, so we need to check if they are primitive or not\n+        if (type1.isPrimitive() || type2.isPrimitive()) {\n+            // At least one type is primitive, so we can't create the joined array\n+            throw new IllegalArgumentException(\"Cannot add arrays of different primitive types\");\n+        } else {\n+            // Both types are non-primitive, so we can still create the joined array\n+            joinedArray = (T[]) Array.newInstance(Object.class, array1.length + array2.length);\n+            System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n-        return joinedArray;\n+        }\n     }\n \n+    return joinedArray;\n+}\n+\n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n      * <p>The new array contains all of the element of <code>array1</code> followed",
    "result_reason": "java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Ljava.lang.Number;",
    "test_result": "FAIL"
}