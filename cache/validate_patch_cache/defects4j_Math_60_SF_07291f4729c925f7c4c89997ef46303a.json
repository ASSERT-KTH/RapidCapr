{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        throw new MathException(\"Input argument is NaN\");\n    }\n    if (x == Double.POSITIVE_INFINITY) {\n        return 1.0;\n    }\n    if (x == Double.NEGATIVE_INFINITY) {\n        return 0.0;\n    }\n    final double res;\n    if (x < mean - 40.0 * standardDeviation) {\n        res = 0;\n    } else if (x > mean + 40.0 * standardDeviation) {\n        res = 1;\n    } else {\n        try {\n            final double dev = x - mean;\n            res = 0.5 * Erf.erfc(-dev / (standardDeviation * FastMath.sqrt(2.0)));\n        } catch (MaxIterationsExceededException ex) {\n            throw new MathException(\"Max iterations exceeded\", ex);\n        }\n    }\n    if (Double.isNaN(res)) {\n        throw new MathException(\"Cumulative probability returned NaN\");\n    }\n    return res;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..4218ea7b5 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -121,21 +121,34 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @return CDF evaluated at {@code x}.\n      * @throws MathException if the algorithm fails to converge\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-        final double dev = x - mean;\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        throw new MathException(\"Input argument is NaN\");\n+    }\n+    if (x == Double.POSITIVE_INFINITY) {\n+        return 1.0;\n+    }\n+    if (x == Double.NEGATIVE_INFINITY) {\n+        return 0.0;\n+    }\n+    final double res;\n+    if (x < mean - 40.0 * standardDeviation) {\n+        res = 0;\n+    } else if (x > mean + 40.0 * standardDeviation) {\n+        res = 1;\n+    } else {\n         try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n+            final double dev = x - mean;\n+            res = 0.5 * Erf.erfc(-dev / (standardDeviation * FastMath.sqrt(2.0)));\n         } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n-            } else {\n-                throw ex;\n-            }\n+            throw new MathException(\"Max iterations exceeded\", ex);\n         }\n     }\n+    if (Double.isNaN(res)) {\n+        throw new MathException(\"Cumulative probability returned NaN\");\n+    }\n+    return res;\n+}\n \n     /**\n      * Return the absolute accuracy setting of the solver used to estimate",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}