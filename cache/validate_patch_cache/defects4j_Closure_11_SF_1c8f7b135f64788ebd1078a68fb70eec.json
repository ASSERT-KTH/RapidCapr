{
    "patch": "public static void setSystemProp(String propName, String propValue) {\n    // Save the current value so we can restore it later\n    String oldPropValue = System.getProperty(propName);\n    try {\n        // Set the new property value\n        System.setProperty(propName, propValue);\n    } catch (Exception ex) {\n        // Log the exception\n        ex.printStackTrace();\n        return;\n    }\n    //  Get the new property value\n    String newPropValue = System.getProperty(propName);\n    // Verify that the new property value is correct\n    if (!propValue.equals(newPropValue)) {\n        // Log an error if the new property value is incorrect\n        System.err.println(\"Error setting system property \" + propName\n                                   + \" to value \" + propValue);\n        // Restore the old property value\n        System.setProperty(propName, oldPropValue);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2fada14c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static void setSystemProp(String propName, String propValue) {\n+    // Save the current value so we can restore it later\n+    String oldPropValue = System.getProperty(propName);\n+    try {\n+        // Set the new property value\n+        System.setProperty(propName, propValue);\n+    } catch (Exception ex) {\n+        // Log the exception\n+        ex.printStackTrace();\n+        return;\n+    }\n+    //  Get the new property value\n+    String newPropValue = System.getProperty(propName);\n+    // Verify that the new property value is correct\n+    if (!propValue.equals(newPropValue)) {\n+        // Log an error if the new property value is incorrect\n+        System.err.println(\"Error setting system property \" + propName\n+                                   + \" to value \" + propValue);\n+        // Restore the old property value\n+        System.setProperty(propName, oldPropValue);\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}