{
    "patch": "String decodedString = \"\";\nfor(int i=0; i<bytes.length; i++) {\n  if (bytes[i] == ESCAPE_CHARACTER) {\n    if (bytes.length > i+2 && bytes[i+1] == 'u') {\n      char decodedChar = (char) Integer.parseInt(new String(bytes, i+2, 4), 16);\n      decodedString += decodedChar;\n      i += 5;\n    } else if (bytes.length > i+1) {\n      byte decodedByte = (byte) (bytes[i+1] - 64);\n      decodedString += decodedByte;\n      i++;\n    } else {\n      // handle the error\n    }\n  } else {\n    decodedString += (char) bytes[i];\n  }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}