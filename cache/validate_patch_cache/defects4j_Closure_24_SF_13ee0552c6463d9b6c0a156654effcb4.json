{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    Node root = t.getCompiler().getRoot();\n    if (root.hasChildren() && root.getFirstChild().isCall() && root.getFirstChild().getFirstChild().getQualifiedName().equals(\"goog.scope\")) {\n        Node callNode = root.getFirstChild();\n        if (callNode.getChildCount() != 2 || !callNode.getLastChild().isFunction() || callNode.getLastChild().getFirstChild().getChildCount() != 0) {\n            report(t, callNode, GOOG_SCOPE_INVALID_CALL);\n            return;\n        }\n\n        Node functionNode = callNode.getLastChild();\n        Scope functionScope = functionNode.getScope();\n        for (Var v : scope.getVarIterable()) {\n            Node n = v.getNode();\n            if (n.getParent() == null || n.getParent().getScope() != functionScope) {\n                continue;\n            }\n\n            if (n.getParent().isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n                String name = n.getString();\n                Var aliasVar = functionScope.getVar(name);\n                if (aliasVar != null && aliasVar.getInitialValue() != null) {\n                    aliases.put(name, aliasVar);\n                    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                    transformation.addAlias(name, qualifiedName);\n                } else {\n                    report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n                }\n            } else {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n        }\n    } else {\n        report(t, root, GOOG_SCOPE_NOT_DEFINED_CALL);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..9157fdf2 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,42 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    Node root = t.getCompiler().getRoot();\n+    if (root.hasChildren() && root.getFirstChild().isCall() && root.getFirstChild().getFirstChild().getQualifiedName().equals(\"goog.scope\")) {\n+        Node callNode = root.getFirstChild();\n+        if (callNode.getChildCount() != 2 || !callNode.getLastChild().isFunction() || callNode.getLastChild().getFirstChild().getChildCount() != 0) {\n+            report(t, callNode, GOOG_SCOPE_INVALID_CALL);\n+            return;\n         }\n+\n+        Node functionNode = callNode.getLastChild();\n+        Scope functionScope = functionNode.getScope();\n+        for (Var v : scope.getVarIterable()) {\n+            Node n = v.getNode();\n+            if (n.getParent() == null || n.getParent().getScope() != functionScope) {\n+                continue;\n+            }\n+\n+            if (n.getParent().isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+                String name = n.getString();\n+                Var aliasVar = functionScope.getVar(name);\n+                if (aliasVar != null && aliasVar.getInitialValue() != null) {\n+                    aliases.put(name, aliasVar);\n+                    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                    transformation.addAlias(name, qualifiedName);\n+                } else {\n+                    report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+                }\n+            } else {\n+                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+            }\n         }\n-      }\n+    } else {\n+        report(t, root, GOOG_SCOPE_NOT_DEFINED_CALL);\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}