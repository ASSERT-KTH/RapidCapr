{
    "patch": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (n.isString()) {\n      return true;\n    }\n    if (n.isTemplateLitString()) {\n      return true;\n    }\n    if (n.isAdd()) {\n      return mayBeString(n.getFirstChild(), recurse) || mayBeString(n.getLastChild(), recurse);\n    }\n    if (n.isCall()) {\n      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    }\n    if (n.isName()) {\n      Var var = n.getJSDocInfo().getLendsNameNode();\n      return var != null && var.getNameNode() != null\n          ? mayBeString(var.getNameNode(), recurse)\n          : false;\n    }\n    if (recurse && n.hasChildren()) {\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (mayBeString(child, recurse)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..15c1243c 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1413,11 +1413,32 @@ public final class NodeUtil {\n   }\n \n   static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n+    if (n.isString()) {\n+      return true;\n+    }\n+    if (n.isTemplateLitString()) {\n+      return true;\n+    }\n+    if (n.isAdd()) {\n+      return mayBeString(n.getFirstChild(), recurse) || mayBeString(n.getLastChild(), recurse);\n+    }\n+    if (n.isCall()) {\n       return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n-      return mayBeStringHelper(n);\n     }\n+    if (n.isName()) {\n+      Var var = n.getJSDocInfo().getLendsNameNode();\n+      return var != null && var.getNameNode() != null\n+          ? mayBeString(var.getNameNode(), recurse)\n+          : false;\n+    }\n+    if (recurse && n.hasChildren()) {\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        if (mayBeString(child, recurse)) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n   }\n \n   static boolean mayBeStringHelper(Node n) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}