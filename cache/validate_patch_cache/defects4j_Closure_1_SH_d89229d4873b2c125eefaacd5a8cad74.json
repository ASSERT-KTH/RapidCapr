{
    "patch": "Node function = fnScope.getRootNode();\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\nSet<String> referencedParams = Sets.newHashSet();\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\nif (modifyCallers) {\n  callSiteOptimizer.optimize(fnScope, referenced);\n} else {\n  // Strip unreferenced args off the end of the function declaration.\n  Node nextChild = argList.getFirstChild();\n  for (int i = 0; i < argList.getChildCount(); i++) {\n    Node currentArg = nextChild;\n    nextChild = currentArg.getNext();\n    Var var = fnScope.getVar(currentArg.getString());\n    if (referenced.contains(var)) {\n      referencedParams.add(var.getName());\n    } else {\n      argList.removeChild(currentArg);\n      compiler.reportCodeChange();\n    }\n  }\n}\nfor (Node fn : NodeUtil.getAllFunctionDeclarations(function)) {\n  if (fn.hasChildren() && fn.getFirstChild().isParamList()) {\n    Node params = fn.getFirstChild();\n    for (int i = 0; i < params.getChildCount(); i++) {\n      Var var = fnScope.getVar(params.getChildAtIndex(i).getString());\n      if (!referencedParams.contains(var.getName())) {\n        fnScope.undeclare(var);\n        params.removeChildAt(i);\n        i--;\n        compiler.reportCodeChange();\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4f4289ad 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,46 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+Set<String> referencedParams = Sets.newHashSet();\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+if (modifyCallers) {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+} else {\n+  // Strip unreferenced args off the end of the function declaration.\n+  Node nextChild = argList.getFirstChild();\n+  for (int i = 0; i < argList.getChildCount(); i++) {\n+    Node currentArg = nextChild;\n+    nextChild = currentArg.getNext();\n+    Var var = fnScope.getVar(currentArg.getString());\n+    if (referenced.contains(var)) {\n+      referencedParams.add(var.getName());\n+    } else {\n+      argList.removeChild(currentArg);\n+      compiler.reportCodeChange();\n+    }\n+  }\n+}\n+for (Node fn : NodeUtil.getAllFunctionDeclarations(function)) {\n+  if (fn.hasChildren() && fn.getFirstChild().isParamList()) {\n+    Node params = fn.getFirstChild();\n+    for (int i = 0; i < params.getChildCount(); i++) {\n+      Var var = fnScope.getVar(params.getChildAtIndex(i).getString());\n+      if (!referencedParams.contains(var.getName())) {\n+        fnScope.undeclare(var);\n+        params.removeChildAt(i);\n+        i--;\n+        compiler.reportCodeChange();\n+      }\n+    }\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}