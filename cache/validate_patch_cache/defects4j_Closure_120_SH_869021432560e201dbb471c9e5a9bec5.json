{
    "patch": "      if (block.isFunction) {\n        // Only check the current function, assignments within nested functions\n        // don't count.\n        int assignments = 0;\n        for (int i = 0; i < size(); i++) {\n          Node node = getNode(i);\n          if (node.getLocation() == ref.getLocation()) {\n            switch (node.getToken()) {\n              case Token.ASSIGN:\n                assignments++;\n                break;\n              case Token.GETPROP:\n              case Token.GETELEM:\n                // Other nodes may not kill this variable, including deletes.\n                break;\n              default:\n                return false;\n            }\n          }\n        }\n        return assignments == 1;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..048b1618 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,28 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        // Only check the current function, assignments within nested functions\n+        // don't count.\n+        int assignments = 0;\n+        for (int i = 0; i < size(); i++) {\n+          Node node = getNode(i);\n+          if (node.getLocation() == ref.getLocation()) {\n+            switch (node.getToken()) {\n+              case Token.ASSIGN:\n+                assignments++;\n+                break;\n+              case Token.GETPROP:\n+              case Token.GETELEM:\n+                // Other nodes may not kill this variable, including deletes.\n+                break;\n+              default:\n+                return false;\n+            }\n+          }\n+        }\n+        return assignments == 1;\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}