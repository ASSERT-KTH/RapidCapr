{
    "patch": "Matcher matcher = parsePattern.matcher(source);\nif (!matcher.matches()) {\n    throw new ParseException(\"Unable to parse the date: \" + source, 0);\n}\nfor (int i = 0; i < strategies.length; i++) {\n    strategies[i].setCalendar(this, matcher.group(i + 1));\n}\nint year = getCalendar().get(Calendar.YEAR);\nreturn (year - thisYear) + Integer.parseInt(matcher.group(1));",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..015c9968 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,15 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+Matcher matcher = parsePattern.matcher(source);\n+if (!matcher.matches()) {\n+    throw new ParseException(\"Unable to parse the date: \" + source, 0);\n+}\n+for (int i = 0; i < strategies.length; i++) {\n+    strategies[i].setCalendar(this, matcher.group(i + 1));\n+}\n+int year = getCalendar().get(Calendar.YEAR);\n+return (year - thisYear) + Integer.parseInt(matcher.group(1));\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}