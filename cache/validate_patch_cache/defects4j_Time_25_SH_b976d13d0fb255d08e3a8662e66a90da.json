{
    "patch": "else {\n    // we need to ensure that time is always after the DST gap\n    // this happens naturally for positive offsets, but not for negative\n    long prevAdjusted = previousTransition(instantAdjusted);\n    if (prevAdjusted == instantAdjusted) {\n        // No previous transition, so we cannot infer anything about gaps vs. overlaps\n        return offsetAdjusted;\n    }\n    long prevLocal = prevAdjusted + getOffset(prevAdjusted);\n    if (instantLocal - prevLocal >= MAX_MILLIS_IN_ONE_DAY) {\n        // Too much time has elapsed since the previous transition (more than one day),\n        // so we must be in a gap. Return offsetLocal so that the time is pushed forward\n        // to after the gap, rather than back to the last instant before the gap.\n        return offsetLocal;\n    }\n    // We must be in an overlap between prevLocal and instantLocal\n    long nextLocal = nextTransition(instantLocal);\n    long overlapTime = prevLocal + (offsetLocal - offsetAdjusted);\n    if (nextLocal < overlapTime) {\n        // There's a new transition in the overlap period, so we cannot infer anything\n        // about gaps vs. overlaps. Return offsetAdjusted.\n        return offsetAdjusted;\n    }\n    // We know that there is an overlap period (prevLocal, nextLocal), so we need\n    // to determine whether it is a gap or overlap. If the duration of the overlap\n    // period is shorter than the duration of the winter offset (offsetAdjusted),\n    // then we must be in a gap. Otherwise we are in an overlap.\n    int overlapOffset = getOffset(overlapTime);\n    int winterOffset = StandardChronology.INSTANCE.getZone().getOffsetFromLocal(overlapTime);\n    if (overlapOffset == winterOffset) {\n        // the overlap sees clocks moving back, which is always valid\n        return winterOffset;\n    }\n    // the overlap sees clocks moving forward, so we must be in a gap\n    return offsetLocal;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..7f187cec 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,42 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+else {\n+    // we need to ensure that time is always after the DST gap\n+    // this happens naturally for positive offsets, but not for negative\n+    long prevAdjusted = previousTransition(instantAdjusted);\n+    if (prevAdjusted == instantAdjusted) {\n+        // No previous transition, so we cannot infer anything about gaps vs. overlaps\n+        return offsetAdjusted;\n+    }\n+    long prevLocal = prevAdjusted + getOffset(prevAdjusted);\n+    if (instantLocal - prevLocal >= MAX_MILLIS_IN_ONE_DAY) {\n+        // Too much time has elapsed since the previous transition (more than one day),\n+        // so we must be in a gap. Return offsetLocal so that the time is pushed forward\n+        // to after the gap, rather than back to the last instant before the gap.\n+        return offsetLocal;\n+    }\n+    // We must be in an overlap between prevLocal and instantLocal\n+    long nextLocal = nextTransition(instantLocal);\n+    long overlapTime = prevLocal + (offsetLocal - offsetAdjusted);\n+    if (nextLocal < overlapTime) {\n+        // There's a new transition in the overlap period, so we cannot infer anything\n+        // about gaps vs. overlaps. Return offsetAdjusted.\n+        return offsetAdjusted;\n+    }\n+    // We know that there is an overlap period (prevLocal, nextLocal), so we need\n+    // to determine whether it is a gap or overlap. If the duration of the overlap\n+    // period is shorter than the duration of the winter offset (offsetAdjusted),\n+    // then we must be in a gap. Otherwise we are in an overlap.\n+    int overlapOffset = getOffset(overlapTime);\n+    int winterOffset = StandardChronology.INSTANCE.getZone().getOffsetFromLocal(overlapTime);\n+    if (overlapOffset == winterOffset) {\n+        // the overlap sees clocks moving back, which is always valid\n+        return winterOffset;\n+    }\n+    // the overlap sees clocks moving forward, so we must be in a gap\n+    return offsetLocal;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}