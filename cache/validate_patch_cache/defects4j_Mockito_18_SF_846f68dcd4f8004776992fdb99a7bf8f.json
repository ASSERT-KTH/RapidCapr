{
    "patch": "public class MyClass {\n  \n  public static String replaceChar(String input, char oldChar, char newChar) {\n    if (input == null || input.length() == 0) {\n      return input;\n    }\n    char[] charArray = input.toCharArray();\n    for (int i = 0; i < charArray.length; i++) {\n      if (charArray[i] == oldChar) {\n        charArray[i] = newChar;\n      }\n    }\n    return new String(charArray);\n  }\n  \n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..423205134 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,22 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyClass {\n+  \n+  public static String replaceChar(String input, char oldChar, char newChar) {\n+    if (input == null || input.length() == 0) {\n+      return input;\n+    }\n+    char[] charArray = input.toCharArray();\n+    for (int i = 0; i < charArray.length; i++) {\n+      if (charArray[i] == oldChar) {\n+        charArray[i] = newChar;\n+      }\n+    }\n+    return new String(charArray);\n+  }\n+  \n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}