{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      ObjectType thisType = functionType.getTypeOfThis();\n      Node parent = n.getParent();\n      if (thisType != null && parent != null &&\n          parent.isGetProp() && parent.getFirstChild() == n) {\n        ensureTyped(t, parent, thisType);\n      } else if (thisType != null && !NodeUtil.isGet(parent)) {\n        report(t, n, INVALID_THIS_TYPE, thisType.toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..9f531a46 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      ObjectType thisType = functionType.getTypeOfThis();\n+      Node parent = n.getParent();\n+      if (thisType != null && parent != null &&\n+          parent.isGetProp() && parent.getFirstChild() == n) {\n+        ensureTyped(t, parent, thisType);\n+      } else if (thisType != null && !NodeUtil.isGet(parent)) {\n+        report(t, n, INVALID_THIS_TYPE, thisType.toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}