{
    "patch": "private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n        if (childState == VariableLiveness.KILL) {\n          state = VariableLiveness.KILL;\n          break;  // If the variable is written in a child node, it is no longer live.\n        } else if (childState == VariableLiveness.READ) {\n          state = VariableLiveness.READ;\n        }\n      } else {\n        // Entering a new function complicates control flow. The variable is potentially live.\n        if (state != VariableLiveness.KILL) {\n          state = VariableLiveness.MAYBE_LIVE;\n        }\n      }\n\n      if (NodeUtil.isName(child) && variable.equals(child.getString())) {\n        if (NodeUtil.isLhs(child, n)) {\n          state = VariableLiveness.KILL;  // Variable is being written.\n          break;\n        } else if (state != VariableLiveness.KILL) {\n          state = VariableLiveness.READ;  // Variable is being read.\n        }\n      }\n    }\n    return state;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..8fcae0fb 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,35 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n+private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n-      } else {\n-        return VariableLiveness.READ;\n-      }\n-    }\n-\n+    VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n     // Expressions are evaluated left-right, depth first.\n     for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n+        VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n+        if (childState == VariableLiveness.KILL) {\n+          state = VariableLiveness.KILL;\n+          break;  // If the variable is written in a child node, it is no longer live.\n+        } else if (childState == VariableLiveness.READ) {\n+          state = VariableLiveness.READ;\n+        }\n+      } else {\n+        // Entering a new function complicates control flow. The variable is potentially live.\n+        if (state != VariableLiveness.KILL) {\n+          state = VariableLiveness.MAYBE_LIVE;\n+        }\n+      }\n+\n+      if (NodeUtil.isName(child) && variable.equals(child.getString())) {\n+        if (NodeUtil.isLhs(child, n)) {\n+          state = VariableLiveness.KILL;  // Variable is being written.\n+          break;\n+        } else if (state != VariableLiveness.KILL) {\n+          state = VariableLiveness.READ;  // Variable is being read.\n         }\n       }\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n-  }\n+    return state;\n }",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}