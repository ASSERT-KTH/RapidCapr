{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n\n    if(size == 1) {\n        Object obj = elementPairs.get(0);\n        if (obj instanceof Separator) {\n            Separator sep = (Separator) obj;\n            return new PeriodFormatter(sep, sep);\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    }\n\n    int index = getSeparatorIndex(elementPairs);\n    if(index != -1) {\n        Separator sep = (Separator) elementPairs.get(index);\n        if(index == size-1) {\n            return new PeriodFormatter(sep, sep);\n        }\n        else {\n            List<Object> prefixList = elementPairs.subList(0, index);\n            List<Object> suffixList = elementPairs.subList(index+1, size);\n            PeriodFormatter f = toFormatter(suffixList, notPrinter, notParser);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            List<Object> newElementPairs = new ArrayList<>(prefixList);\n            newElementPairs.add(sep);\n            return toFormatter(newElementPairs, notPrinter, notParser);\n        }\n    } else {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}    \n\nprivate static int getSeparatorIndex(List<Object> elementPairs) {\n    int size = elementPairs.size();\n    for(int i=0; i<size; i++) {\n        if(elementPairs.get(i) instanceof Separator) {\n            return i;\n        }\n    }\n    return -1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..96052320 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,45 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+\n+    if(size == 1) {\n+        Object obj = elementPairs.get(0);\n+        if (obj instanceof Separator) {\n+            Separator sep = (Separator) obj;\n+            return new PeriodFormatter(sep, sep);\n+        } else {\n+            Object[] comp = createComposite(elementPairs);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n         }\n+    }\n+\n+    int index = getSeparatorIndex(elementPairs);\n+    if(index != -1) {\n+        Separator sep = (Separator) elementPairs.get(index);\n+        if(index == size-1) {\n+            return new PeriodFormatter(sep, sep);\n+        }\n+        else {\n+            List<Object> prefixList = elementPairs.subList(0, index);\n+            List<Object> suffixList = elementPairs.subList(index+1, size);\n+            PeriodFormatter f = toFormatter(suffixList, notPrinter, notParser);\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+            List<Object> newElementPairs = new ArrayList<>(prefixList);\n+            newElementPairs.add(sep);\n+            return toFormatter(newElementPairs, notPrinter, notParser);\n+        }\n+    } else {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -811,6 +839,17 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}    \n+\n+private static int getSeparatorIndex(List<Object> elementPairs) {\n+    int size = elementPairs.size();\n+    for(int i=0; i<size; i++) {\n+        if(elementPairs.get(i) instanceof Separator) {\n+            return i;\n+        }\n+    }\n+    return -1;\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}