{
    "patch": "        // Trim potential whitespace off the ends.\n        val = val.trim();\n        if (val.length() == 0) {\n            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n        }\n        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // in specification for BigDecimal. OS X Java parses it to a\n            // wrong value.\n\n            return null;\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }\n        char lastChar = val.charAt(val.length() - 1);\n        int decPos = val.indexOf('.');\n        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n        if (decPos > -1) {\n            if (expPos > -1) {\n                if (expPos < decPos) {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                return createBigDecimal(val);\n            }\n            return createBigDecimal(val);\n        }\n        if (expPos > -1) {\n            return createBigDecimal(val);\n        }\n        // a special case (cf. BigDecimal.StringConstructor):\n        if (lastChar == 'f' || lastChar == 'F') {\n            return createFloat(val);\n        }\n        if (lastChar == 'l' || lastChar == 'L') {\n            return createLong(val.substring(0, val.length() - 1));\n        }\n        /*\n         * When all else fails... Alt #1: if it's big, go big or go home (parse as a BigDecimal). Alt #2: if it has a\n         * floating point or an exponent, go floating point (parse as a Double). Alt #3: if the last character\n         * is an 'a' or 'A', attempt to parse as a BigDecimal. We have to disambiguate this case from hex strings so\n         * we check to see that the string is of the form '-?[\\d,]+(\\.\\d+)?([eE][-+](\\d)+)?[aAcCdD]'.\n         * If the number cannot be represented as a BigDecimal or Double, a NumberFormatException will be thrown.\n         */\n        if (isAllZeros(val)) { // Safeguard against accidentially treating hex as octal.\n            return createInteger(val);\n        }\n        if (Character.isDigit(lastChar) || lastChar == '.') {\n            return createDouble(val); // everything else goes to Double per Java spec\n        }\n        if (lastChar == 'a' || lastChar == 'A') {\n            if (val.indexOf(':') >= 0 || val.indexOf('e') >= 0 || val.indexOf('E') >= 0) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n            val = val.substring(0, val.length() - 1);\n            return createBigDecimal(val);\n        }\n        throw new NumberFormatException(val + \" is not a valid number.\");",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..52d9e358 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,65 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        // Trim potential whitespace off the ends.\n+        val = val.trim();\n+        if (val.length() == 0) {\n+            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n+        }\n+        if (val.startsWith(\"--\")) {\n+            // this is protection for poorness in java.lang.BigDecimal.\n+            // it accepts this as a legal value, but it does not appear\n+            // in specification for BigDecimal. OS X Java parses it to a\n+            // wrong value.\n+\n+            return null;\n+        }\n+        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+            return createInteger(val);\n+        }\n+        char lastChar = val.charAt(val.length() - 1);\n+        int decPos = val.indexOf('.');\n+        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n+        if (decPos > -1) {\n+            if (expPos > -1) {\n+                if (expPos < decPos) {\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                }\n+                return createBigDecimal(val);\n+            }\n+            return createBigDecimal(val);\n+        }\n+        if (expPos > -1) {\n+            return createBigDecimal(val);\n+        }\n+        // a special case (cf. BigDecimal.StringConstructor):\n+        if (lastChar == 'f' || lastChar == 'F') {\n+            return createFloat(val);\n+        }\n+        if (lastChar == 'l' || lastChar == 'L') {\n+            return createLong(val.substring(0, val.length() - 1));\n+        }\n+        /*\n+         * When all else fails... Alt #1: if it's big, go big or go home (parse as a BigDecimal). Alt #2: if it has a\n+         * floating point or an exponent, go floating point (parse as a Double). Alt #3: if the last character\n+         * is an 'a' or 'A', attempt to parse as a BigDecimal. We have to disambiguate this case from hex strings so\n+         * we check to see that the string is of the form '-?[\\d,]+(\\.\\d+)?([eE][-+](\\d)+)?[aAcCdD]'.\n+         * If the number cannot be represented as a BigDecimal or Double, a NumberFormatException will be thrown.\n+         */\n+        if (isAllZeros(val)) { // Safeguard against accidentially treating hex as octal.\n+            return createInteger(val);\n+        }\n+        if (Character.isDigit(lastChar) || lastChar == '.') {\n+            return createDouble(val); // everything else goes to Double per Java spec\n+        }\n+        if (lastChar == 'a' || lastChar == 'A') {\n+            if (val.indexOf(':') >= 0 || val.indexOf('e') >= 0 || val.indexOf('E') >= 0) {\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n+            }\n+            val = val.substring(0, val.length() - 1);\n+            return createBigDecimal(val);\n+        }\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: variable lastChar is already defined in method createNumber(String)",
    "test_result": "ERROR"
}