{
    "patch": "        double x0 = min;\n        double y0 = yMin;\n        double x2 = max;\n        double y2 = yMax;\n        double x1 = initial;\n        double y1 = yInitial;\n        double yDiff = y2 - y0;\n        double xDiff = x2 - x0;\n        double delta = functionValueAccuracy;\n        double xMid;\n\n        for (int i = 0; i < maximalIterationCount; ++i) {\n            if (Math.abs(yDiff) < 2 * delta && Math.abs(xDiff) < 2 * delta) {\n                setResult(x1, i);\n                return result;\n            }\n            if (Math.abs(yDiff) > delta && Math.abs(xDiff) > delta\n                    && Math.abs(y1) > delta) {\n                xMid = x1 - y1 * (x1 - x0) / (y1 - y0);\n                if (xMid - x0 < 0.5 * xDiff &&\n                        x2 - xMid < 0.5 * xDiff) {\n                    xMid = x0 + 0.5 * xDiff;\n                }\n            } else {\n                xMid = 0.5 * (x0 + x2);\n            }\n            double yMid = f.value(xMid);\n            if (Math.abs(yMid) < delta) {\n                setResult(xMid, i);\n                return result;\n            }\n            if (yMid * y0 < 0) {\n                x2 = x1;\n                y2 = y1;\n            } else {\n                yDiff = yMid - y2;\n                xDiff = xMid - x2;\n                x0 = x1;\n                y0 = y1;\n            }\n            x1 = xMid;\n            y1 = yMid;\n        }\n        throw new MaxIterationsExceededException(maximalIterationCount);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..3bb833655 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,50 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        double x0 = min;\n+        double y0 = yMin;\n+        double x2 = max;\n+        double y2 = yMax;\n+        double x1 = initial;\n+        double y1 = yInitial;\n+        double yDiff = y2 - y0;\n+        double xDiff = x2 - x0;\n+        double delta = functionValueAccuracy;\n+        double xMid;\n+\n+        for (int i = 0; i < maximalIterationCount; ++i) {\n+            if (Math.abs(yDiff) < 2 * delta && Math.abs(xDiff) < 2 * delta) {\n+                setResult(x1, i);\n+                return result;\n+            }\n+            if (Math.abs(yDiff) > delta && Math.abs(xDiff) > delta\n+                    && Math.abs(y1) > delta) {\n+                xMid = x1 - y1 * (x1 - x0) / (y1 - y0);\n+                if (xMid - x0 < 0.5 * xDiff &&\n+                        x2 - xMid < 0.5 * xDiff) {\n+                    xMid = x0 + 0.5 * xDiff;\n+                }\n+            } else {\n+                xMid = 0.5 * (x0 + x2);\n+            }\n+            double yMid = f.value(xMid);\n+            if (Math.abs(yMid) < delta) {\n+                setResult(xMid, i);\n+                return result;\n+            }\n+            if (yMid * y0 < 0) {\n+                x2 = x1;\n+                y2 = y1;\n+            } else {\n+                yDiff = yMid - y2;\n+                xDiff = xMid - x2;\n+                x0 = x1;\n+                y0 = y1;\n+            }\n+            x1 = xMid;\n+            y1 = yMid;\n+        }\n+        throw new MaxIterationsExceededException(maximalIterationCount);\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}