{
    "patch": "            } catch (IllegalFieldValueException e) {\n                // Try to save the exception and error index as the parse may be lenient and continue\n                if (savedFields == null) {\n                    savedFields = new SavedField[count];\n                    for (int i = 0; i < count; i++) {\n                        savedFields[i] = new SavedField(iSavedFields[i]);\n                    }\n                }\n                e.setErrorIndex(savedFields[i].iStart);\n                if (iParseStrict) {\n                    throw e;\n                }\n                iSavedFields[i] = null;  // remove the current field\n                if (iFailures == null) {\n                    iFailures = new ArrayList<>();\n                }\n                iFailures.add(e);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..577ffbc1 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,23 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } catch (IllegalFieldValueException e) {\n+                // Try to save the exception and error index as the parse may be lenient and continue\n+                if (savedFields == null) {\n+                    savedFields = new SavedField[count];\n+                    for (int i = 0; i < count; i++) {\n+                        savedFields[i] = new SavedField(iSavedFields[i]);\n+                    }\n+                }\n+                e.setErrorIndex(savedFields[i].iStart);\n+                if (iParseStrict) {\n+                    throw e;\n+                }\n+                iSavedFields[i] = null;  // remove the current field\n+                if (iFailures == null) {\n+                    iFailures = new ArrayList<>();\n+                }\n+                iFailures.add(e);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}