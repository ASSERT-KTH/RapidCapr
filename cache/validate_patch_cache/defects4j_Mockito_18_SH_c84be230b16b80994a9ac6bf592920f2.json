{
    "patch": "public ReturnValues execute(String input) {\n   if (!isValidInput(input)) {\n      return ReturnValues.create(Exception.class, new IllegalArgumentException(\"Invalid input\"));\n   }\n\n   List<String> splitInput = Arrays.asList(input.split(delimiter));\n   List<Integer> integers = new ArrayList<>();\n   try {\n      integers = splitInput.stream().map(Integer::parseInt).collect(Collectors.toList());\n   } catch (NumberFormatException e) {\n      return ReturnValues.create(Exception.class, e);\n   }\n\n  return ReturnValues.create(Iterable.class, integers);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}