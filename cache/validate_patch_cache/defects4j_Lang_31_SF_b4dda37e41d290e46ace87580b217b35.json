{
    "patch": "public static boolean containsAny(final char[] string, final char... searchChars) {\n    if (StringUtils.isEmpty(string) || StringUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    for (int i = 0; i < string.length; i++) {\n        final char ch = string[i];\n        for (int j = 0; j < searchChars.length; j++) {\n            final char searchChar = searchChars[j];\n            if (searchChar == ch) {\n                if (!Character.isLowSurrogate(ch)) {\n                    // If the character is not a low surrogate,\n                    // it means that there are no high surrogates coming before it,\n                    // therefore we can safely return true\n                    return true;\n                } else if (i > 0 && Character.isHighSurrogate(string[i - 1])) {\n                    // If the character is a low surrogate and there was a high \n                    // surrogate before it, then we found a Supplementary Character\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..660f724f 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,30 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final char[] string, final char... searchChars) {\n+    if (StringUtils.isEmpty(string) || StringUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    for (int i = 0; i < string.length; i++) {\n+        final char ch = string[i];\n+        for (int j = 0; j < searchChars.length; j++) {\n+            final char searchChar = searchChars[j];\n+            if (searchChar == ch) {\n+                if (!Character.isLowSurrogate(ch)) {\n+                    // If the character is not a low surrogate,\n+                    // it means that there are no high surrogates coming before it,\n+                    // therefore we can safely return true\n+                    return true;\n+                } else if (i > 0 && Character.isHighSurrogate(string[i - 1])) {\n+                    // If the character is a low surrogate and there was a high \n+                    // surrogate before it, then we found a Supplementary Character\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}