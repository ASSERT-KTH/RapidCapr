{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic class GammaFunction {\n    public static double regularizedGamma(double a, double x, double epsilon, int maxIterations) {\n        double sum = 0;\n        \n        for (int n = 0; n < maxIterations; n++) {\n            double term = (Math.pow(x, n) * Math.exp(-x)) / Gamma.gamma(a + n);\n            sum += term;\n            if (term < epsilon) {\n                break;\n            }\n        }\n        \n        return sum;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..5d1d6f20b 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,23 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class GammaFunction {\n+    public static double regularizedGamma(double a, double x, double epsilon, int maxIterations) {\n+        double sum = 0;\n+        \n+        for (int n = 0; n < maxIterations; n++) {\n+            double term = (Math.pow(x, n) * Math.exp(-x)) / Gamma.gamma(a + n);\n+            sum += term;\n+            if (term < epsilon) {\n+                break;\n+            }\n+        }\n+        \n+        return sum;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}