{
    "patch": "public String unescape(String input) {\n   StringBuilder output = new StringBuilder(input.length());\n   Matcher matcher = pattern.matcher(input);\n   int end = 0;\n   while (matcher.find()) {\n      output.append(input.substring(end, matcher.start()));\n      end = matcher.end();\n      switch (matcher.group().charAt(1)) {\n         case 't':\n            output.append('\\t');\n            break;\n         case 'r':\n            output.append('\\r');\n            break;\n         case 'n':\n            output.append('\\n');\n            break;\n         case 'f':\n            output.append('\\f');\n            break;\n         case '\\\\':\n            output.append('\\\\');\n            break;\n         default:\n            // Octal escape\n            try {\n               output.append((char) Integer.parseInt(matcher.group().substring(1), 8));\n            }\n            catch (NumberFormatException nfe) {\n               // Just append original characters\n               output.append(matcher.group());\n            }\n            break;\n      }\n   }\n   output.append(input.substring(end));\n   return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..cc1ea865 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,44 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public String unescape(String input) {\n+   StringBuilder output = new StringBuilder(input.length());\n+   Matcher matcher = pattern.matcher(input);\n+   int end = 0;\n+   while (matcher.find()) {\n+      output.append(input.substring(end, matcher.start()));\n+      end = matcher.end();\n+      switch (matcher.group().charAt(1)) {\n+         case 't':\n+            output.append('\\t');\n+            break;\n+         case 'r':\n+            output.append('\\r');\n+            break;\n+         case 'n':\n+            output.append('\\n');\n+            break;\n+         case 'f':\n+            output.append('\\f');\n+            break;\n+         case '\\\\':\n+            output.append('\\\\');\n+            break;\n+         default:\n+            // Octal escape\n+            try {\n+               output.append((char) Integer.parseInt(matcher.group().substring(1), 8));\n+            }\n+            catch (NumberFormatException nfe) {\n+               // Just append original characters\n+               output.append(matcher.group());\n+            }\n+            break;\n+      }\n+   }\n+   output.append(input.substring(end));\n+   return output.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}