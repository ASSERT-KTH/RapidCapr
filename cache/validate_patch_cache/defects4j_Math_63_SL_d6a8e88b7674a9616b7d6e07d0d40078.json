{
    "patch": "2. ```\n    if (Double.isNaN(x) || Double.isNaN(y)) {\n        return Double.isNaN(x) && Double.isNaN(y);\n    }\n    return Math.abs(x - y) < Math.ulp(Math.max(Math.abs(x), Math.abs(y)));\n```\nAnother possible fix line is to first check if either of the values is NaN. If either of them is NaN, then return that both are NaN only if both inputs are NaN. If neither input is NaN, then check if they are equal within a small delta using `Math.abs` and Math.ulp`(unit in the last place)`.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 136184990..94d03fd3f 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -414,7 +414,13 @@ public final class MathUtils {\n      * @return {@code true} if the values are equal.\n      */\n     public static boolean equals(double x, double y) {\n-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n+2. ```\n+    if (Double.isNaN(x) || Double.isNaN(y)) {\n+        return Double.isNaN(x) && Double.isNaN(y);\n+    }\n+    return Math.abs(x - y) < Math.ulp(Math.max(Math.abs(x), Math.abs(y)));\n+```\n+Another possible fix line is to first check if either of the values is NaN. If either of them is NaN, then return that both are NaN only if both inputs are NaN. If neither input is NaN, then check if they are equal within a small delta using `Math.abs` and Math.ulp`(unit in the last place)`.\n     }\n \n     /**",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}