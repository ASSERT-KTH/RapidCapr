{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double epsilon = 1e-15;\n    double maxIterations = 1000;\n    double lngamma = Gamma.logGamma(a);\n    double factor = Math.exp(a * Math.log(x) - x - lngamma) / a;\n    double sum = 1;\n    double delta = sum;\n    int n = 1;\n    while (Math.abs(delta) > epsilon && n < maxIterations) {\n        delta *= x / (a + n);\n        sum += delta;\n        n++;\n    }\n    if (n == maxIterations) {\n        throw new RuntimeException(\"Failed to converge within \" + maxIterations + \" iterations\");\n    }\n    return sum * factor;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..0013cc976 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,24 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double epsilon = 1e-15;\n+    double maxIterations = 1000;\n+    double lngamma = Gamma.logGamma(a);\n+    double factor = Math.exp(a * Math.log(x) - x - lngamma) / a;\n+    double sum = 1;\n+    double delta = sum;\n+    int n = 1;\n+    while (Math.abs(delta) > epsilon && n < maxIterations) {\n+        delta *= x / (a + n);\n+        sum += delta;\n+        n++;\n+    }\n+    if (n == maxIterations) {\n+        throw new RuntimeException(\"Failed to converge within \" + maxIterations + \" iterations\");\n+    }\n+    return sum * factor;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}