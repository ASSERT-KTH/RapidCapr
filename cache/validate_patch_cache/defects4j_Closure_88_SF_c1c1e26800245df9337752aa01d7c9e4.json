{
    "patch": "  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      Node parent = n.getParent();\n      if (NodeUtil.isLhs(n, parent)) {\n        if (NodeUtil.isAssign(parent)) {\n          // The expression to which the assignment is made is evaluated before\n          // the RHS is evaluated (normal left to right evaluation) but the KILL\n          // occurs after the RHS is evaluated.\n          return VariableLiveness.KILL;\n        }\n        // The variable in question is not being assigned here, so if it's a\n        // read at this point it must be a nested assignment.\n        return VariableLiveness.READ;\n      }\n      if (NodeUtil.isIncDecOp(parent)) {\n        // Only apply this logic to lvalues. Otherwise an expression\n        // like `delete obj[x++]` would be a variable write (\"delete\")\n        // followed by read (\"++\").\n        return VariableLiveness.KILL;\n        // Post-increment/decrement will occur after any other expressions.\n      }\n      return VariableLiveness.READ;\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..e8ac37cc 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -323,14 +323,26 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n   private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n-      } else {\n+      Node parent = n.getParent();\n+      if (NodeUtil.isLhs(n, parent)) {\n+        if (NodeUtil.isAssign(parent)) {\n+          // The expression to which the assignment is made is evaluated before\n+          // the RHS is evaluated (normal left to right evaluation) but the KILL\n+          // occurs after the RHS is evaluated.\n+          return VariableLiveness.KILL;\n+        }\n+        // The variable in question is not being assigned here, so if it's a\n+        // read at this point it must be a nested assignment.\n         return VariableLiveness.READ;\n       }\n+      if (NodeUtil.isIncDecOp(parent)) {\n+        // Only apply this logic to lvalues. Otherwise an expression\n+        // like `delete obj[x++]` would be a variable write (\"delete\")\n+        // followed by read (\"++\").\n+        return VariableLiveness.KILL;\n+        // Post-increment/decrement will occur after any other expressions.\n+      }\n+      return VariableLiveness.READ;\n     }\n \n     // Expressions are evaluated left-right, depth first.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}