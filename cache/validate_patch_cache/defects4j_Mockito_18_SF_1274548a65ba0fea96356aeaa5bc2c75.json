{
    "patch": "public static <T> ReturnValues getEmptyReturnValues(Class<T> returnType) {\n    if (Iterable.class.isAssignableFrom(returnType)) {\n        return new ReturnValues(Collections.emptyList());\n    } else if (Collection.class.isAssignableFrom(returnType)) {\n        return new ReturnValues(Collections.emptyList());\n    } else if (returnType.equals(Map.class)) {\n        return new ReturnValues(Collections.emptyMap());\n    } else if (returnType.equals(Double.class) || returnType.equals(double.class)) {\n        return new ReturnValues(0.0);\n    } else if (returnType.equals(Float.class) || returnType.equals(float.class)) {\n        return new ReturnValues(0.0f);\n    } else if (returnType.equals(Long.class) || returnType.equals(long.class)) {\n        return new ReturnValues(0L);\n    } else if (returnType.equals(Integer.class) || returnType.equals(int.class)) {\n        return new ReturnValues(0);\n    } else if (returnType.equals(Short.class) || returnType.equals(short.class)) {\n        return new ReturnValues((short) 0);\n    } else if (returnType.equals(Byte.class) || returnType.equals(byte.class)) {\n        return new ReturnValues((byte) 0);\n    } else if (returnType.equals(Character.class) || returnType.equals(char.class)) {\n        return new ReturnValues((char) 0);\n    } else if (returnType.equals(Boolean.class) || returnType.equals(boolean.class)) {\n        return new ReturnValues(false);\n    }\n    return new ReturnValues(null);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..6b017231d 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,32 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> ReturnValues getEmptyReturnValues(Class<T> returnType) {\n+    if (Iterable.class.isAssignableFrom(returnType)) {\n+        return new ReturnValues(Collections.emptyList());\n+    } else if (Collection.class.isAssignableFrom(returnType)) {\n+        return new ReturnValues(Collections.emptyList());\n+    } else if (returnType.equals(Map.class)) {\n+        return new ReturnValues(Collections.emptyMap());\n+    } else if (returnType.equals(Double.class) || returnType.equals(double.class)) {\n+        return new ReturnValues(0.0);\n+    } else if (returnType.equals(Float.class) || returnType.equals(float.class)) {\n+        return new ReturnValues(0.0f);\n+    } else if (returnType.equals(Long.class) || returnType.equals(long.class)) {\n+        return new ReturnValues(0L);\n+    } else if (returnType.equals(Integer.class) || returnType.equals(int.class)) {\n+        return new ReturnValues(0);\n+    } else if (returnType.equals(Short.class) || returnType.equals(short.class)) {\n+        return new ReturnValues((short) 0);\n+    } else if (returnType.equals(Byte.class) || returnType.equals(byte.class)) {\n+        return new ReturnValues((byte) 0);\n+    } else if (returnType.equals(Character.class) || returnType.equals(char.class)) {\n+        return new ReturnValues((char) 0);\n+    } else if (returnType.equals(Boolean.class) || returnType.equals(boolean.class)) {\n+        return new ReturnValues(false);\n+    }\n+    return new ReturnValues(null);\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}