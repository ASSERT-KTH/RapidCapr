{
    "patch": "public boolean canBeCalled() {\n    return isRegexpType() || isFunctionType() || isConstructor() || isInterface();\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n\n      // Check if the object type can be called\n      boolean isCallable = canBeCalled();\n\n      // If pretty-printing and the object type can be called, print with parentheses\n      if (!forAnnotations && isCallable) {\n        sb.append(\"(\");\n        if (isConstructor()) {\n          sb.append(\"new \");\n        }\n        sb.append(\"{\");\n\n        int i = 0;\n        for (String property : propertyNames) {\n          if (i > 0) {\n            sb.append(\", \");\n          }\n\n          sb.append(property);\n          sb.append(\": \");\n\n          JSType propertyType = getPropertyType(property);\n          if (propertyType == null) {\n            sb.append(forAnnotations ? \"?\" : \"[?]\");\n          } else {\n            sb.append(propertyType.toString());\n          }\n\n          ++i;\n          if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n            sb.append(\", ...\");\n            break;\n          }\n        }\n\n        sb.append(\"})\");\n      } else {\n        // If not pretty-printing or not callable, print with braces\n        sb.append(\"{\");\n\n        int i = 0;\n        for (String property : propertyNames) {\n          if (i > 0) {\n            sb.append(\", \");\n          }\n\n          sb.append(property);\n          sb.append(\": \");\n\n          JSType propertyType = getPropertyType(property);\n          if (propertyType == null) {\n            sb.append(forAnnotations ? \"?\" : \"[?]\");\n          } else {\n            sb.append(propertyType.toString());\n          }\n\n          ++i;\n          if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n            sb.append(\", ...\");\n            break;\n          }\n        }\n\n        sb.append(\"}\");\n      }\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..7d95b9cd 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,12 +345,12 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+public boolean canBeCalled() {\n+    return isRegexpType() || isFunctionType() || isConstructor() || isInterface();\n+}\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n     if (hasReferenceName()) {\n       return getReferenceName();\n     } else if (prettyPrint) {\n@@ -367,26 +367,71 @@ class PrototypeObjectType extends ObjectType {\n       }\n \n       StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n \n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n+      // Check if the object type can be called\n+      boolean isCallable = canBeCalled();\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+      // If pretty-printing and the object type can be called, print with parentheses\n+      if (!forAnnotations && isCallable) {\n+        sb.append(\"(\");\n+        if (isConstructor()) {\n+          sb.append(\"new \");\n+        }\n+        sb.append(\"{\");\n+\n+        int i = 0;\n+        for (String property : propertyNames) {\n+          if (i > 0) {\n+            sb.append(\", \");\n+          }\n+\n+          sb.append(property);\n+          sb.append(\": \");\n+\n+          JSType propertyType = getPropertyType(property);\n+          if (propertyType == null) {\n+            sb.append(forAnnotations ? \"?\" : \"[?]\");\n+          } else {\n+            sb.append(propertyType.toString());\n+          }\n+\n+          ++i;\n+          if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+            sb.append(\", ...\");\n+            break;\n+          }\n+        }\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+        sb.append(\"})\");\n+      } else {\n+        // If not pretty-printing or not callable, print with braces\n+        sb.append(\"{\");\n+\n+        int i = 0;\n+        for (String property : propertyNames) {\n+          if (i > 0) {\n+            sb.append(\", \");\n+          }\n+\n+          sb.append(property);\n+          sb.append(\": \");\n+\n+          JSType propertyType = getPropertyType(property);\n+          if (propertyType == null) {\n+            sb.append(forAnnotations ? \"?\" : \"[?]\");\n+          } else {\n+            sb.append(propertyType.toString());\n+          }\n+\n+          ++i;\n+          if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+            sb.append(\", ...\");\n+            break;\n+          }\n         }\n-      }\n \n-      sb.append(\"}\");\n+        sb.append(\"}\");\n+      }\n \n       prettyPrint = true;\n       return sb.toString();",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{loop: [?], number: number, st...> but was:<{loop: [{...}], number: number, st...>",
    "test_result": "FAIL"
}