{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  // check if function is not anonymous and has no getter or setter properties and is Constant\n  // as we can inline only such functions\n  if (NodeUtil.isName(fnNode.getParent()) && !NodeUtil.isGetOrSetKey(fnNode) && NodeUtil.isConstant(fnNode)) {\n  \n    // check if the function has only 1 child (no more, no less)\n    int fnChildrenCount = fnNode.getChildCount();\n    if (fnChildrenCount == 1) {\n\n      // check if the child of the function is a BLOCK node\n      Node fnChild = fnNode.getFirstChild();\n      if (fnChild.isBlock()) {\n\n        // check if the block of the function has only 1 child (no more, no less)\n        int blockChildrenCount = fnChild.getChildCount();\n        if (blockChildrenCount == 1) {\n\n          // check if the child of the block of the function is a RETURN node\n          Node returnNode = fnChild.getFirstChild();\n          if (returnNode.isReturn()) {\n\n            // check if the node has exactly one argument\n            int returnChildrenCount = returnNode.getChildCount();\n            if (returnChildrenCount == 1) {\n\n              // check if the argument of the return node has no side effects\n              Node returnValue = returnNode.getFirstChild();\n              if (!NodeUtil.mayHaveSideEffects(returnValue, compiler)) {\n\n                // at this point, we know that the function is eligible for inlining\n                // we can now iterate over its parameters and check if all their arguments\n                // have no side-effects and no multiple references\n\n                Node functionParams = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n                Node callArgs = callNode.getFirstChild().getNext();\n\n                while (functionParams != null && callArgs != null) {\n                  if (functionParams.isName()) {\n\n                    // check for side-effects\n                    if (NodeUtil.mayHaveSideEffects(callArgs, compiler)) {\n                      return CanInlineResult.NO;\n                    }\n\n                    // check for multiple references with possible side-effects\n                    if (NodeUtil.mayEffectMutableState(callArgs, compiler)\n                        && NodeUtil.getNameReferenceCount(fnNode, functionParams.getString()) > 1) {\n                      return CanInlineResult.NO;\n                    }\n\n                    // move on to the next parameter and argument\n                    functionParams = functionParams.getNext();\n                    callArgs = callArgs.getNext();\n\n                  } else {\n\n                    // skip the \"this\" argument of function object calls\n                    if (NodeUtil.isFunctionObjectCall(callNode)) {\n                      callArgs = callArgs.getNext();\n                    }\n                    // skip the arguments of other types of calls\n                    else {\n                      return CanInlineResult.NO;\n                    }\n\n                  }\n                }\n\n                // if all the parameters have been processed, the function can be inlined\n                return CanInlineResult.YES;\n\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // if any of the above checks has failed, the function is not eligible for inlining\n  return CanInlineResult.NO;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..4de44fd1 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,77 +686,89 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n-\n-    Node block = fnNode.getLastChild();\n-\n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n-    }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  // check if function is not anonymous and has no getter or setter properties and is Constant\n+  // as we can inline only such functions\n+  if (NodeUtil.isName(fnNode.getParent()) && !NodeUtil.isGetOrSetKey(fnNode) && NodeUtil.isConstant(fnNode)) {\n+  \n+    // check if the function has only 1 child (no more, no less)\n+    int fnChildrenCount = fnNode.getChildCount();\n+    if (fnChildrenCount == 1) {\n+\n+      // check if the child of the function is a BLOCK node\n+      Node fnChild = fnNode.getFirstChild();\n+      if (fnChild.isBlock()) {\n+\n+        // check if the block of the function has only 1 child (no more, no less)\n+        int blockChildrenCount = fnChild.getChildCount();\n+        if (blockChildrenCount == 1) {\n+\n+          // check if the child of the block of the function is a RETURN node\n+          Node returnNode = fnChild.getFirstChild();\n+          if (returnNode.isReturn()) {\n+\n+            // check if the node has exactly one argument\n+            int returnChildrenCount = returnNode.getChildCount();\n+            if (returnChildrenCount == 1) {\n+\n+              // check if the argument of the return node has no side effects\n+              Node returnValue = returnNode.getFirstChild();\n+              if (!NodeUtil.mayHaveSideEffects(returnValue, compiler)) {\n+\n+                // at this point, we know that the function is eligible for inlining\n+                // we can now iterate over its parameters and check if all their arguments\n+                // have no side-effects and no multiple references\n+\n+                Node functionParams = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+                Node callArgs = callNode.getFirstChild().getNext();\n+\n+                while (functionParams != null && callArgs != null) {\n+                  if (functionParams.isName()) {\n+\n+                    // check for side-effects\n+                    if (NodeUtil.mayHaveSideEffects(callArgs, compiler)) {\n+                      return CanInlineResult.NO;\n+                    }\n+\n+                    // check for multiple references with possible side-effects\n+                    if (NodeUtil.mayEffectMutableState(callArgs, compiler)\n+                        && NodeUtil.getNameReferenceCount(fnNode, functionParams.getString()) > 1) {\n+                      return CanInlineResult.NO;\n+                    }\n+\n+                    // move on to the next parameter and argument\n+                    functionParams = functionParams.getNext();\n+                    callArgs = callArgs.getNext();\n+\n+                  } else {\n+\n+                    // skip the \"this\" argument of function object calls\n+                    if (NodeUtil.isFunctionObjectCall(callNode)) {\n+                      callArgs = callArgs.getNext();\n+                    }\n+                    // skip the arguments of other types of calls\n+                    else {\n+                      return CanInlineResult.NO;\n+                    }\n+\n+                  }\n+                }\n+\n+                // if all the parameters have been processed, the function can be inlined\n+                return CanInlineResult.YES;\n+\n+              }\n+            }\n           }\n         }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n       }\n     }\n-\n-    return CanInlineResult.YES;\n   }\n \n+  // if any of the above checks has failed, the function is not eligible for inlining\n+  return CanInlineResult.NO;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}