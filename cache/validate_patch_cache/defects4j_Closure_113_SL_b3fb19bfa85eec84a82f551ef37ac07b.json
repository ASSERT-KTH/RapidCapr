{
    "patch": "private static class ProvidedName {\n    private final JSModule explicitModule;\n    private final boolean isExplicitlyProvided;\n\n    private ProvidedName(JSModule explicitModule,\n                         boolean isExplicitlyProvided) {\n      this.explicitModule = explicitModule;\n      this.isExplicitlyProvided = isExplicitlyProvided;\n    }\n\n    private static final ProvidedName DUMMY_PROVIDED_NAME =\n        new ProvidedName(null, false);\n\n    public static ProvidedName create(JSModule explicitModule) {\n      return explicitModule != null\n          ? new ProvidedName(explicitModule, true)\n          : DUMMY_PROVIDED_NAME;\n    }\n\n    public boolean isExplicitlyProvided() {\n      return isExplicitlyProvided;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..a8961592 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,29 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+private static class ProvidedName {\n+    private final JSModule explicitModule;\n+    private final boolean isExplicitlyProvided;\n+\n+    private ProvidedName(JSModule explicitModule,\n+                         boolean isExplicitlyProvided) {\n+      this.explicitModule = explicitModule;\n+      this.isExplicitlyProvided = isExplicitlyProvided;\n+    }\n+\n+    private static final ProvidedName DUMMY_PROVIDED_NAME =\n+        new ProvidedName(null, false);\n+\n+    public static ProvidedName create(JSModule explicitModule) {\n+      return explicitModule != null\n+          ? new ProvidedName(explicitModule, true)\n+          : DUMMY_PROVIDED_NAME;\n+    }\n+\n+    public boolean isExplicitlyProvided() {\n+      return isExplicitlyProvided;\n+    }\n+}\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}