{
    "patch": "        Collector<Strategy> collector = new ArrayList<>();\n        boolean currentStrategyAdded = false;\n\n        Matcher patternMatcher = formatPattern.matcher(pattern);\n        while (patternMatcher.find()) {\n            String formatField = patternMatcher.group();\n            Strategy strategy = this.getStrategy(formatField);\n            if (strategy == null) {\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + formatField);\n            }\n            if (!currentStrategyAdded && currentStrategy != null) {\n                if (currentStrategy.addRegex(this, regex)) {\n                    collector.add(currentStrategy);\n                    currentStrategyAdded = true;\n                }\n            }\n            // nextStrategy may not be null because pattern ends with format specifier\n            if (strategy.equals(nextStrategy)) {\n                currentStrategy = strategy;\n                currentFormatField = formatField;\n                currentStrategyAdded = false;\n            } else if (nextStrategy == null) {\n                if (strategy.addRegex(this, regex)) {\n                    collector.add(strategy);\n                }\n            } else {\n                if (currentStrategyAdded) {\n                    collector.remove(collector.size() - 1);\n                    currentStrategyAdded = false;\n                }\n                if (strategy.addRegex(this, regex)) {\n                    collector.add(strategy);\n                }\n                currentStrategy = nextStrategy;\n                currentFormatField = nextFormatField;\n                nextStrategy = null;\n                currentStrategyAdded = false;\n            }\n        }\n\n        if (!currentStrategyAdded && currentStrategy != null) {\n            if (currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n        }\n        if (collector.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n        strategies = collector.toArray(new Strategy[0]);\n        parsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..c47ddd43 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,56 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        Collector<Strategy> collector = new ArrayList<>();\n+        boolean currentStrategyAdded = false;\n+\n+        Matcher patternMatcher = formatPattern.matcher(pattern);\n+        while (patternMatcher.find()) {\n+            String formatField = patternMatcher.group();\n+            Strategy strategy = this.getStrategy(formatField);\n+            if (strategy == null) {\n+                throw new IllegalArgumentException(\"Illegal pattern component: \" + formatField);\n+            }\n+            if (!currentStrategyAdded && currentStrategy != null) {\n+                if (currentStrategy.addRegex(this, regex)) {\n+                    collector.add(currentStrategy);\n+                    currentStrategyAdded = true;\n+                }\n+            }\n+            // nextStrategy may not be null because pattern ends with format specifier\n+            if (strategy.equals(nextStrategy)) {\n+                currentStrategy = strategy;\n+                currentFormatField = formatField;\n+                currentStrategyAdded = false;\n+            } else if (nextStrategy == null) {\n+                if (strategy.addRegex(this, regex)) {\n+                    collector.add(strategy);\n+                }\n+            } else {\n+                if (currentStrategyAdded) {\n+                    collector.remove(collector.size() - 1);\n+                    currentStrategyAdded = false;\n+                }\n+                if (strategy.addRegex(this, regex)) {\n+                    collector.add(strategy);\n+                }\n+                currentStrategy = nextStrategy;\n+                currentFormatField = nextFormatField;\n+                nextStrategy = null;\n+                currentStrategyAdded = false;\n+            }\n+        }\n+\n+        if (!currentStrategyAdded && currentStrategy != null) {\n+            if (currentStrategy.addRegex(this, regex)) {\n+                collector.add(currentStrategy);\n+            }\n+        }\n+        if (collector.isEmpty()) {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+        strategies = collector.toArray(new Strategy[0]);\n+        parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}