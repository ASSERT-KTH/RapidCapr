{
    "patch": "private String getRemainingJSDocLine() {\n    String result = null;\n    try {\n        while ((result = stream.getRemainingJSDocLine()) != null) {\n            result = result.trim();\n            if (!result.isEmpty()) {\n                return result;\n            }\n        }\n    } catch (NullPointerException e) {\n        // do nothing\n    }\n    throw new IllegalStateException(\"Recorded bad position information\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..ed548dd8 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,20 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n-    String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+private String getRemainingJSDocLine() {\n+    String result = null;\n+    try {\n+        while ((result = stream.getRemainingJSDocLine()) != null) {\n+            result = result.trim();\n+            if (!result.isEmpty()) {\n+                return result;\n+            }\n+        }\n+    } catch (NullPointerException e) {\n+        // do nothing\n+    }\n+    throw new IllegalStateException(\"Recorded bad position information\");\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}