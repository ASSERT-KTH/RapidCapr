{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        // extract the value of the original field and add the new value\n        int originalFieldValue = values[fieldIndex];\n        int newFieldValue = originalFieldValue + valueToAdd;\n        // compute the maximum value allowed for the original field based on the new value\n        int maxAllowedValue = partial.getFieldType(fieldIndex)\n                                     .getField(iChronology)\n                                     .getMaximumValue(instant);\n        // if the new value is greater than the maximum value allowed for the original field, then adjust the date accordingly\n        if(newFieldValue > maxAllowedValue) {\n            instant = iChronology.add(partial, fieldIndex, instant, maxAllowedValue - originalFieldValue);\n            newFieldValue = newFieldValue - maxAllowedValue;\n        }\n        // if the new value is smaller than the minimum value allowed for the original field, then adjust the date accordingly\n        else if(newFieldValue < 1) {\n            int minAllowedValue = partial.getFieldType(fieldIndex)\n                                         .getField(iChronology)\n                                         .getMinimumValue(instant);\n            instant = iChronology.add(partial, fieldIndex, instant, minAllowedValue - originalFieldValue);\n            newFieldValue = newFieldValue - minAllowedValue;\n        }\n        // set the new value of the original field and compute the new instant\n        instant = partial.getFieldType(fieldIndex).getField(iChronology).set(instant, newFieldValue);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..685ee80a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,45 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        // extract the value of the original field and add the new value\n+        int originalFieldValue = values[fieldIndex];\n+        int newFieldValue = originalFieldValue + valueToAdd;\n+        // compute the maximum value allowed for the original field based on the new value\n+        int maxAllowedValue = partial.getFieldType(fieldIndex)\n+                                     .getField(iChronology)\n+                                     .getMaximumValue(instant);\n+        // if the new value is greater than the maximum value allowed for the original field, then adjust the date accordingly\n+        if(newFieldValue > maxAllowedValue) {\n+            instant = iChronology.add(partial, fieldIndex, instant, maxAllowedValue - originalFieldValue);\n+            newFieldValue = newFieldValue - maxAllowedValue;\n         }\n+        // if the new value is smaller than the minimum value allowed for the original field, then adjust the date accordingly\n+        else if(newFieldValue < 1) {\n+            int minAllowedValue = partial.getFieldType(fieldIndex)\n+                                         .getField(iChronology)\n+                                         .getMinimumValue(instant);\n+            instant = iChronology.add(partial, fieldIndex, instant, minAllowedValue - originalFieldValue);\n+            newFieldValue = newFieldValue - minAllowedValue;\n+        }\n+        // set the new value of the original field and compute the new instant\n+        instant = partial.getFieldType(fieldIndex).getField(iChronology).set(instant, newFieldValue);\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: no suitable method found for add(ReadablePartial,int,long,int)",
    "test_result": "ERROR"
}