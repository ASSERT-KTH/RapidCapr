{
    "patch": "import java.io.UnsupportedEncodingException;\n\npublic class EncodingHelper {\n      \n    public static String escape(String input, String encoding) throws UnsupportedEncodingException {\n        if (input == null) {\n            return null;\n        }\n        byte[] bytes = input.getBytes(encoding);\n        StringBuilder result = new StringBuilder(bytes.length * 2);\n        for (byte b : bytes) {\n            if (b >= 0x20 && b <= 0x7E) {   //ASCII range\n                if (b == '\\\"' || b == '\\'' || b == '\\\\') {\n                    result.append('\\\\').append((char)b);\n                } else {\n                    result.append((char)b);\n                }\n            } else if (b < 0) {\n                result.append('\\\\');\n                result.append(Integer.toOctalString(b & 0xff));\n            } else { // additional encoding\n                result.append(String.format(\"\\\\x%02X\", b));\n            }\n        }\n        return result.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..b5c244c6 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,33 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.io.UnsupportedEncodingException;\n+\n+public class EncodingHelper {\n+      \n+    public static String escape(String input, String encoding) throws UnsupportedEncodingException {\n+        if (input == null) {\n+            return null;\n+        }\n+        byte[] bytes = input.getBytes(encoding);\n+        StringBuilder result = new StringBuilder(bytes.length * 2);\n+        for (byte b : bytes) {\n+            if (b >= 0x20 && b <= 0x7E) {   //ASCII range\n+                if (b == '\\\"' || b == '\\'' || b == '\\\\') {\n+                    result.append('\\\\').append((char)b);\n+                } else {\n+                    result.append((char)b);\n+                }\n+            } else if (b < 0) {\n+                result.append('\\\\');\n+                result.append(Integer.toOctalString(b & 0xff));\n+            } else { // additional encoding\n+                result.append(String.format(\"\\\\x%02X\", b));\n+            }\n+        }\n+        return result.toString();\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}