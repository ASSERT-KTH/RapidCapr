{
    "patch": "public static double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, List<Map<String, Object>>>>(){}.getType();\n    Map<String, List<Map<String, Object>>> map = gson.fromJson(json, type);\n    List<Map<String, Object>> results = map.get(\"results\");\n    List<Map<String, Object>> bindings = results.get(0).get(\"bindings\");\n    int typed = 0;\n    int total = bindings.size();\n    for (int i = 0; i < total; i++) {\n        Map<String, Object> binding = bindings.get(i);\n        if(binding.containsKey(\"type\") && !binding.get(\"type\").equals(null)) {\n            typed++;\n        }\n    }\n    return (typed * 100.0) / total;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..12454cea 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, List<Map<String, Object>>>>(){}.getType();\n+    Map<String, List<Map<String, Object>>> map = gson.fromJson(json, type);\n+    List<Map<String, Object>> results = map.get(\"results\");\n+    List<Map<String, Object>> bindings = results.get(0).get(\"bindings\");\n+    int typed = 0;\n+    int total = bindings.size();\n+    for (int i = 0; i < total; i++) {\n+        Map<String, Object> binding = bindings.get(i);\n+        if(binding.containsKey(\"type\") && !binding.get(\"type\").equals(null)) {\n+            typed++;\n+        }\n+    }\n+    return (typed * 100.0) / total;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}