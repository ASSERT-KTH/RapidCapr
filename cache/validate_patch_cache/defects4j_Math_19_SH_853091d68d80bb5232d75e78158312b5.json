{
    "patch": "            if (Double.isFinite(normalization)) {\n                // Convert the constraints to internal format.\n                boundaries = new double[2][];\n                double[] lo = new double[lB.length];\n                double[] hi = new double[uB.length];\n                for (int i = 0; i < init.length; i++) {\n                    lo[i] = (lB[i] - init[i]) / normalization;\n                    hi[i] = (uB[i] - init[i]) / normalization;\n                }\n                boundaries[0] = lo;\n                boundaries[1] = hi;\n            } else {\n                throw new NumberIsTooLargeException(normalization, Double.MAX_VALUE, false);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..56d29d0dd 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,20 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+            if (Double.isFinite(normalization)) {\n+                // Convert the constraints to internal format.\n+                boundaries = new double[2][];\n+                double[] lo = new double[lB.length];\n+                double[] hi = new double[uB.length];\n+                for (int i = 0; i < init.length; i++) {\n+                    lo[i] = (lB[i] - init[i]) / normalization;\n+                    hi[i] = (uB[i] - init[i]) / normalization;\n+                }\n+                boundaries[0] = lo;\n+                boundaries[1] = hi;\n+            } else {\n+                throw new NumberIsTooLargeException(normalization, Double.MAX_VALUE, false);\n+            }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}