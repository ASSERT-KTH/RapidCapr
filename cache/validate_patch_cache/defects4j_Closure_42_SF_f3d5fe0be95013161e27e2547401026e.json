{
    "patch": "public class IRFactory extends Parser {\n  // ...\n\n  abstract static class TransformDispatcher implements NodeTransform {\n    @Override\n    public Node transform(Node node) {\n      switch(node.getType()) {\n        case Token.ARRAYLIT: return this.processArrayLiteral(node);\n        case Token.ASSIGN: return this.processAssign(node);\n        case Token.BLOCK: return this.processBlock(node);\n        case Token.BREAK: return this.processBreak(node);\n        case Token.CALL: return this.processCall(node);\n        case Token.CASE: return this.processCase(node);\n        case Token.CATCH: return this.processCatch(node);\n        case Token.CONST: return this.processConst(node);\n        case Token.CONTINUE: return this.processContinue(node);\n        case Token.DEFAULT: return this.processDefault(node);\n        case Token.DO: return this.processDo(node);\n        case Token.ELSE: return this.processElse(node);\n        case Token.EMPTY: return this.processEmpty(node);\n        case Token.EXPR_RESULT: return this.processExpressionStatement(node);\n        case Token.FALSE: return this.processLiteral(node);\n        case Token.FOR: return this.processFor(node);\n        case Token.FOR_IN:\n        case Token.FOR_OF: return this.processForIn(node);\n        case Token.FUNCTION: return this.processFunction(node);\n        case Token.GETELEM: return this.processGetElem(node);\n        case Token.GETPROP: return this.processGetProperty(node);\n        case Token.HOOK: return this.processHook(node);\n        case Token.IF: return this.processIf(node);\n        case Token.LABEL: return this.processLabel(node);\n        case Token.LET: return this.processLet(node);\n        case Token.NAME: return this.processName(node);\n        case Token.NEW: return this.processNew(node);\n        case Token.NULL: return this.processLiteral(node);\n        case Token.NUMBER: return this.processLiteral(node);\n        case Token.OBJECTLIT: return this.processObjectLiteral(node);\n        case Token.REGEXP: return this.processLiteral(node);\n        case Token.RETURN: return this.processReturn(node);\n        case Token.SCRIPT: return this.processScript(node);\n        case Token.STRING: return this.processLiteral(node);\n        case Token.SWITCH: return this.processSwitch(node);\n        case Token.THIS: return this.processThis(node);\n        case Token.THROW: return this.processThrow(node);\n        case Token.TRUE: return this.processLiteral(node);\n        case Token.TRY: return this.processTry(node);\n        case Token.VAR: return this.processVar(node);\n        case Token.WHILE: return this.processWhile(node);\n        case Token.WITH: return this.processWith(node);\n        case Token.EMPTY:\n          return transformLiteral(\n              Token.EMPTY,\n              Node.newNumber(0));\n        default:\n          throw new RuntimeException(\"Unexpected node type: \"\n              + Token.name(node.getType()));\n      }\n    }\n\n    protected abstract Node processArrayLiteral(Node node);\n    protected abstract Node processAssign(Node node);\n    protected abstract Node processBlock(Node node);\n    protected abstract Node processBreak(Node node);\n    protected abstract Node processCall(Node node);\n    protected abstract Node processCase(Node node);\n    protected abstract Node processCatch(Node node);\n    protected abstract Node processConst(Node node);\n    protected abstract Node processContinue(Node node);\n    protected abstract Node processDefault(Node node);\n    protected abstract Node processDo(Node node);\n    protected abstract Node processElse(Node node);\n    protected abstract Node processEmpty(Node node);\n    protected abstract Node processExpressionStatement(Node node);\n    protected abstract Node processFor(Node node);\n    protected abstract Node processForIn(Node node);\n    protected abstract Node processFunction(Node node);\n    protected abstract Node processGetElem(Node node);\n    protected abstract Node processGetProperty(Node node);\n    protected abstract Node processHook(Node node);\n    protected abstract Node processIf(Node node);\n    protected abstract Node processLabel(Node node);\n    protected abstract Node processLet(Node node);\n    protected abstract Node processLiteral(Node node);\n    protected abstract Node processName(Node node);\n    protected abstract Node processNew(Node node);\n    protected abstract Node processObjectLiteral(Node node);\n    protected abstract Node processReturn(Node node);\n    protected abstract Node processScript(Node node);\n    protected abstract Node processSwitch(Node node);\n    protected abstract Node processThis(Node node);\n    protected abstract Node processThrow(Node node);\n    protected abstract Node processTry(Node node);\n    protected abstract Node processVar(Node node);\n    protected abstract Node processWhile(Node node);\n    protected abstract Node processWith(Node node);\n  }\n\n  abstract static class TypedDispatcher extends TransformDispatcher\n      implements TypeSafeDispatcher {\n\n    @Override\n    public boolean canDispatch(Node node) {\n      return getType() == node.getType();\n    }\n\n    @Override\n    public void dispatch(NodeTransform outputGuard, Node node) {\n      Preconditions.checkState(canDispatch(node));\n      transform(outputGuard, node);\n    }\n\n    @Override\n    public final void transform(final Node node) {\n      transform(new NodeTransform() {\n        @Override\n        public void transform(Node node) {\n          TypedDispatcher.this.transform(node);\n        }\n      }, node);\n    }\n  }\n\n  // ...\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..f1273169 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,130 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+public class IRFactory extends Parser {\n+  // ...\n \n+  abstract static class TransformDispatcher implements NodeTransform {\n     @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+    public Node transform(Node node) {\n+      switch(node.getType()) {\n+        case Token.ARRAYLIT: return this.processArrayLiteral(node);\n+        case Token.ASSIGN: return this.processAssign(node);\n+        case Token.BLOCK: return this.processBlock(node);\n+        case Token.BREAK: return this.processBreak(node);\n+        case Token.CALL: return this.processCall(node);\n+        case Token.CASE: return this.processCase(node);\n+        case Token.CATCH: return this.processCatch(node);\n+        case Token.CONST: return this.processConst(node);\n+        case Token.CONTINUE: return this.processContinue(node);\n+        case Token.DEFAULT: return this.processDefault(node);\n+        case Token.DO: return this.processDo(node);\n+        case Token.ELSE: return this.processElse(node);\n+        case Token.EMPTY: return this.processEmpty(node);\n+        case Token.EXPR_RESULT: return this.processExpressionStatement(node);\n+        case Token.FALSE: return this.processLiteral(node);\n+        case Token.FOR: return this.processFor(node);\n+        case Token.FOR_IN:\n+        case Token.FOR_OF: return this.processForIn(node);\n+        case Token.FUNCTION: return this.processFunction(node);\n+        case Token.GETELEM: return this.processGetElem(node);\n+        case Token.GETPROP: return this.processGetProperty(node);\n+        case Token.HOOK: return this.processHook(node);\n+        case Token.IF: return this.processIf(node);\n+        case Token.LABEL: return this.processLabel(node);\n+        case Token.LET: return this.processLet(node);\n+        case Token.NAME: return this.processName(node);\n+        case Token.NEW: return this.processNew(node);\n+        case Token.NULL: return this.processLiteral(node);\n+        case Token.NUMBER: return this.processLiteral(node);\n+        case Token.OBJECTLIT: return this.processObjectLiteral(node);\n+        case Token.REGEXP: return this.processLiteral(node);\n+        case Token.RETURN: return this.processReturn(node);\n+        case Token.SCRIPT: return this.processScript(node);\n+        case Token.STRING: return this.processLiteral(node);\n+        case Token.SWITCH: return this.processSwitch(node);\n+        case Token.THIS: return this.processThis(node);\n+        case Token.THROW: return this.processThrow(node);\n+        case Token.TRUE: return this.processLiteral(node);\n+        case Token.TRY: return this.processTry(node);\n+        case Token.VAR: return this.processVar(node);\n+        case Token.WHILE: return this.processWhile(node);\n+        case Token.WITH: return this.processWith(node);\n+        case Token.EMPTY:\n+          return transformLiteral(\n+              Token.EMPTY,\n+              Node.newNumber(0));\n+        default:\n+          throw new RuntimeException(\"Unexpected node type: \"\n+              + Token.name(node.getType()));\n       }\n-      return node;\n     }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+    protected abstract Node processArrayLiteral(Node node);\n+    protected abstract Node processAssign(Node node);\n+    protected abstract Node processBlock(Node node);\n+    protected abstract Node processBreak(Node node);\n+    protected abstract Node processCall(Node node);\n+    protected abstract Node processCase(Node node);\n+    protected abstract Node processCatch(Node node);\n+    protected abstract Node processConst(Node node);\n+    protected abstract Node processContinue(Node node);\n+    protected abstract Node processDefault(Node node);\n+    protected abstract Node processDo(Node node);\n+    protected abstract Node processElse(Node node);\n+    protected abstract Node processEmpty(Node node);\n+    protected abstract Node processExpressionStatement(Node node);\n+    protected abstract Node processFor(Node node);\n+    protected abstract Node processForIn(Node node);\n+    protected abstract Node processFunction(Node node);\n+    protected abstract Node processGetElem(Node node);\n+    protected abstract Node processGetProperty(Node node);\n+    protected abstract Node processHook(Node node);\n+    protected abstract Node processIf(Node node);\n+    protected abstract Node processLabel(Node node);\n+    protected abstract Node processLet(Node node);\n+    protected abstract Node processLiteral(Node node);\n+    protected abstract Node processName(Node node);\n+    protected abstract Node processNew(Node node);\n+    protected abstract Node processObjectLiteral(Node node);\n+    protected abstract Node processReturn(Node node);\n+    protected abstract Node processScript(Node node);\n+    protected abstract Node processSwitch(Node node);\n+    protected abstract Node processThis(Node node);\n+    protected abstract Node processThrow(Node node);\n+    protected abstract Node processTry(Node node);\n+    protected abstract Node processVar(Node node);\n+    protected abstract Node processWhile(Node node);\n+    protected abstract Node processWith(Node node);\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n+  abstract static class TypedDispatcher extends TransformDispatcher\n+      implements TypeSafeDispatcher {\n \n     @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+    public boolean canDispatch(Node node) {\n+      return getType() == node.getType();\n     }\n \n     @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+    public void dispatch(NodeTransform outputGuard, Node node) {\n+      Preconditions.checkState(canDispatch(node));\n+      transform(outputGuard, node);\n     }\n \n     @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+    public final void transform(final Node node) {\n+      transform(new NodeTransform() {\n+        @Override\n+        public void transform(Node node) {\n+          TypedDispatcher.this.transform(node);\n+        }\n+      }, node);\n     }\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+  // ...\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: class IRFactory is already defined in package com.google.javascript.jscomp.parsing",
    "test_result": "ERROR"
}