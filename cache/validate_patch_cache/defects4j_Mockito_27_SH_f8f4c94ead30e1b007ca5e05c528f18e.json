{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MockCreationSettings<T> settings = Mockito.withSettings()\n                .spiedInstance(mock)\n                .defaultAnswer(Mockito.RETURNS_DEFAULTS)\n                .withoutAnnotations();\n        Factory factory = new ByteBuddy()\n                .subclass(Factory.class)\n                .implement(settings.getTypeToMock().getInterfaces())\n                .method(isDeclaredBy(settings.getTypeToMock()))\n                .intercept(MethodDelegation.to(newMockHandler, \"handle\"))\n                .make()\n                .load(settings.getTypeToMock().getClassLoader(), ClassLoadingStrategy.Default.CHILD_FIRST)\n                .getLoaded()\n                .newInstance();\n        factory.setCallback(0, new DispatcherDefaultAnswer());\n        ((Spy) mock).setInterceptableFactory(factory);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..686a06b65 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,25 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MockCreationSettings<T> settings = Mockito.withSettings()\n+                .spiedInstance(mock)\n+                .defaultAnswer(Mockito.RETURNS_DEFAULTS)\n+                .withoutAnnotations();\n+        Factory factory = new ByteBuddy()\n+                .subclass(Factory.class)\n+                .implement(settings.getTypeToMock().getInterfaces())\n+                .method(isDeclaredBy(settings.getTypeToMock()))\n+                .intercept(MethodDelegation.to(newMockHandler, \"handle\"))\n+                .make()\n+                .load(settings.getTypeToMock().getClassLoader(), ClassLoadingStrategy.Default.CHILD_FIRST)\n+                .getLoaded()\n+                .newInstance();\n+        factory.setCallback(0, new DispatcherDefaultAnswer());\n+        ((Spy) mock).setInterceptableFactory(factory);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}