{
    "patch": "public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // Subtyping is contravariant in the parameter types.\n    // For each parameter of this, there must exist a corresponding parameter in that\n    // such that the JSType of that is a subtype of the JSType of this.\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n        JSType thisParamType = thisParam.getJSType();\n        JSType thatParamType = thatParam.getJSType();\n\n        if (thisParamType != null && thatParamType != null && !thatParamType.isSubtype(thisParamType)) {\n            // The types don't match, so return false.\n            return false;\n        }\n\n        boolean thisIsVarArgs = thisParam.isVarArgs();\n        boolean thatIsVarArgs = thatParam.isVarArgs();\n\n        if (!thisIsVarArgs) {\n            thisParam = thisParam.getNext();\n        }\n        if (!thatIsVarArgs) {\n            thatParam = thatParam.getNext();\n        }\n\n        // Unless this function has variable arguments, keep going until we have\n        // checked all required parameters.\n        if (!thisIsVarArgs && thisParam != null && thisParam.getJSType() != null && !thisParam.isOptional()) {\n            continue;\n        }\n\n        // At this point, we have dealt with all required parameters. If there are no more\n        // parameters of any kind (either required or optional), then we are done.\n        if (thisParam == null && thatParam == null) {\n            return true;\n        }\n\n        // If we still have parameters in this function, and they are optional,\n        // skip them and keep going.\n        if (thisParam != null && thisParam.isOptional()) {\n            thisParam = thisParam.getNext();\n        }\n\n        // If we still have parameters in that function, and they are optional,\n        // skip them and keep going.\n        if (thatParam != null && thatParam.isOptional()) {\n            thatParam = thatParam.getNext();\n        }\n\n        // Unless both functions have variable arguments, we require a 1-to-1 match between\n        // the arguments from this and the arguments from that. If the two functions have\n        // different parameter lengths, we have already failed the subtyping check by this point.\n        if (!thisIsVarArgs && !thatIsVarArgs) {\n            continue;\n        }\n\n        // At this point, both functions have variable arguments, so we are done checking\n        // subtyping rules for the required arguments. However, we still need to check\n        // that the remaining optional arguments in the this function are subtypes of the\n        // remaining optional arguments in the that function, if any.\n\n        Node thisVarArg = (thisParam != null && thisParam.isVarArgs()) ? thisParam : null;\n        Node thatVarArg = (thatParam != null && thatParam.isVarArgs()) ? thatParam : null;\n        while (thisVarArg != null && thatVarArg != null) {\n            JSType thisArgType = thisVarArg.getJSType();\n            JSType thatArgType = thatVarArg.getJSType();\n\n            if (thisArgType != null && thatArgType != null && !thatArgType.isSubtype(thisArgType)) {\n                // The types don't match, so return false.\n                return false;\n            }\n\n            thisVarArg = thisVarArg.getNext();\n            thatVarArg = thatVarArg.getNext();\n        }\n\n        return true;\n    }\n\n    // If we ran out of parameters in the this function, then we are a subtype of that only\n    // if there are no more parameters in that function either.\n    return (thisParam == null && thatParam == null);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..45dd6147 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,9 +77,9 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n+public boolean isSubtype(JSType other) {\n     if (!(other instanceof ArrowType)) {\n-      return false;\n+        return false;\n     }\n \n     ArrowType that = (ArrowType) other;\n@@ -89,69 +89,91 @@ final class ArrowType extends JSType {\n \n     // this.returnType <: that.returnType (covariant)\n     if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n+        return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n+    // Subtyping is contravariant in the parameter types.\n+    // For each parameter of this, there must exist a corresponding parameter in that\n+    // such that the JSType of that is a subtype of the JSType of this.\n     Node thisParam = parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n     while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n+        JSType thisParamType = thisParam.getJSType();\n+        JSType thatParamType = thatParam.getJSType();\n+\n+        if (thisParamType != null && thatParamType != null && !thatParamType.isSubtype(thisParamType)) {\n+            // The types don't match, so return false.\n+            return false;\n         }\n-      }\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+        boolean thisIsVarArgs = thisParam.isVarArgs();\n+        boolean thatIsVarArgs = thatParam.isVarArgs();\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+        if (!thisIsVarArgs) {\n+            thisParam = thisParam.getNext();\n+        }\n+        if (!thatIsVarArgs) {\n+            thatParam = thatParam.getNext();\n+        }\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n-      }\n+        // Unless this function has variable arguments, keep going until we have\n+        // checked all required parameters.\n+        if (!thisIsVarArgs && thisParam != null && thisParam.getJSType() != null && !thisParam.isOptional()) {\n+            continue;\n+        }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n-    }\n+        // At this point, we have dealt with all required parameters. If there are no more\n+        // parameters of any kind (either required or optional), then we are done.\n+        if (thisParam == null && thatParam == null) {\n+            return true;\n+        }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+        // If we still have parameters in this function, and they are optional,\n+        // skip them and keep going.\n+        if (thisParam != null && thisParam.isOptional()) {\n+            thisParam = thisParam.getNext();\n+        }\n \n-    return true;\n-  }\n+        // If we still have parameters in that function, and they are optional,\n+        // skip them and keep going.\n+        if (thatParam != null && thatParam.isOptional()) {\n+            thatParam = thatParam.getNext();\n+        }\n+\n+        // Unless both functions have variable arguments, we require a 1-to-1 match between\n+        // the arguments from this and the arguments from that. If the two functions have\n+        // different parameter lengths, we have already failed the subtyping check by this point.\n+        if (!thisIsVarArgs && !thatIsVarArgs) {\n+            continue;\n+        }\n+\n+        // At this point, both functions have variable arguments, so we are done checking\n+        // subtyping rules for the required arguments. However, we still need to check\n+        // that the remaining optional arguments in the this function are subtypes of the\n+        // remaining optional arguments in the that function, if any.\n+\n+        Node thisVarArg = (thisParam != null && thisParam.isVarArgs()) ? thisParam : null;\n+        Node thatVarArg = (thatParam != null && thatParam.isVarArgs()) ? thatParam : null;\n+        while (thisVarArg != null && thatVarArg != null) {\n+            JSType thisArgType = thisVarArg.getJSType();\n+            JSType thatArgType = thatVarArg.getJSType();\n+\n+            if (thisArgType != null && thatArgType != null && !thatArgType.isSubtype(thisArgType)) {\n+                // The types don't match, so return false.\n+                return false;\n+            }\n+\n+            thisVarArg = thisVarArg.getNext();\n+            thatVarArg = thatVarArg.getNext();\n+        }\n+\n+        return true;\n+    }\n+\n+    // If we ran out of parameters in the this function, then we are a subtype of that only\n+    // if there are no more parameters in that function either.\n+    return (thisParam == null && thatParam == null);\n+}\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}