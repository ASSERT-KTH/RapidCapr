{
    "patch": "          int assignments = countAssignments(ref, block.getEnd().getIndex() - 1);\n\n          if (assignments != 1) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    /**\n     * Counts the number of times the variable is assigned a value in a given\n     * range of basic blocks, which is terminated by an index.\n     */\n    private int countAssignments(Reference ref, int endIndex) {\n      int count = 0;\n      for (int i = ref.getIndex() + 1; i <= endIndex && i < references.size(); i++) {\n        if (references.get(i).isAssignmentTo(ref.node)) {\n          count++;\n        }\n      }\n      return count;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..cf56db98 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,29 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          int assignments = countAssignments(ref, block.getEnd().getIndex() - 1);\n+\n+          if (assignments != 1) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      return true;\n+    }\n+\n+    /**\n+     * Counts the number of times the variable is assigned a value in a given\n+     * range of basic blocks, which is terminated by an index.\n+     */\n+    private int countAssignments(Reference ref, int endIndex) {\n+      int count = 0;\n+      for (int i = ref.getIndex() + 1; i <= endIndex && i < references.size(); i++) {\n+        if (references.get(i).isAssignmentTo(ref.node)) {\n+          count++;\n+        }\n+      }\n+      return count;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}