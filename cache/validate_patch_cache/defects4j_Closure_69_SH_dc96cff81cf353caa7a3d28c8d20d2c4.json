{
    "patch": "      Node parent = n.getParent();\n      if (parent.isGetProp() || parent.isGetElem()) {\n        JSType parentType = getJSType(parent.getFirstChild()).restrictByNotNullOrUndefined();\n        ObjectType thisObj = ObjectType.cast(\n            parentType.dereference().restrictByNotNullOrUndefined());\n        if (thisObj != null) {\n          ObjectType expectedThisObj =\n              ObjectType.cast(functionType.getTypeOfThis().restrictByNotNullOrUndefined());\n          if (expectedThisObj != null && !thisObj.isEquivalentTo(expectedThisObj)) {\n            report(t, n, FUNCTION_CALL_BAD_THIS, thisObj.toString(), expectedThisObj.toString());\n          }\n        }\n      } else if (functionType.getTypeOfThis() != null) {\n        report(t, n, FUNCTION_CONSTRUCTOR_CALL_WITHOUT_NEW, childType.toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..0998aa94 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      Node parent = n.getParent();\n+      if (parent.isGetProp() || parent.isGetElem()) {\n+        JSType parentType = getJSType(parent.getFirstChild()).restrictByNotNullOrUndefined();\n+        ObjectType thisObj = ObjectType.cast(\n+            parentType.dereference().restrictByNotNullOrUndefined());\n+        if (thisObj != null) {\n+          ObjectType expectedThisObj =\n+              ObjectType.cast(functionType.getTypeOfThis().restrictByNotNullOrUndefined());\n+          if (expectedThisObj != null && !thisObj.isEquivalentTo(expectedThisObj)) {\n+            report(t, n, FUNCTION_CALL_BAD_THIS, thisObj.toString(), expectedThisObj.toString());\n+          }\n+        }\n+      } else if (functionType.getTypeOfThis() != null) {\n+        report(t, n, FUNCTION_CONSTRUCTOR_CALL_WITHOUT_NEW, childType.toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}