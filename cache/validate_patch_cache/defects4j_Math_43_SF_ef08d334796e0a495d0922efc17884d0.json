{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(Math.log(value));\n    secondMoment.increment(value);\n\n    // If mean, variance or geomean have been overridden,\n    // need to increment these\n    if (meanImpl instanceof Mean) {\n        ((Mean) meanImpl).increment(value);\n    }\n    if (varianceImpl instanceof Variance) {\n        ((Variance) varianceImpl).increment(value);\n    }\n    if (geoMeanImpl instanceof GeometricMean) {\n        ((GeometricMean) geoMeanImpl).increment(value);\n    }\n\n    // Use online algorithm to compute variance if it is not an instance of Variance\n    if (!(varianceImpl instanceof Variance)) {\n        double delta;\n        double oldMean = meanImpl.getResult();\n        if (n == 0) {\n            delta = 0;\n            varianceImpl.increment(0.0);\n        } else {\n            delta = value - oldMean;\n            double oldVar = varianceImpl.getResult();\n            double newVar = oldVar + (((n * delta * delta) / (n + 1)) - (oldVar / (n + 1)));\n            varianceImpl.clear();\n            varianceImpl.increment(newVar);\n        }\n    }\n\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..02507d71c 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,45 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(Math.log(value));\n+    secondMoment.increment(value);\n+\n+    // If mean, variance or geomean have been overridden,\n+    // need to increment these\n+    if (meanImpl instanceof Mean) {\n+        ((Mean) meanImpl).increment(value);\n+    }\n+    if (varianceImpl instanceof Variance) {\n+        ((Variance) varianceImpl).increment(value);\n+    }\n+    if (geoMeanImpl instanceof GeometricMean) {\n+        ((GeometricMean) geoMeanImpl).increment(value);\n+    }\n+\n+    // Use online algorithm to compute variance if it is not an instance of Variance\n+    if (!(varianceImpl instanceof Variance)) {\n+        double delta;\n+        double oldMean = meanImpl.getResult();\n+        if (n == 0) {\n+            delta = 0;\n+            varianceImpl.increment(0.0);\n+        } else {\n+            delta = value - oldMean;\n+            double oldVar = varianceImpl.getResult();\n+            double newVar = oldVar + (((n * delta * delta) / (n + 1)) - (oldVar / (n + 1)));\n+            varianceImpl.clear();\n+            varianceImpl.increment(newVar);\n         }\n-        n++;\n     }\n \n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}