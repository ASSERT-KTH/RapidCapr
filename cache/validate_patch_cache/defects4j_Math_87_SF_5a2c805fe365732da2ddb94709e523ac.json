{
    "patch": "private Integer getBasicRow(final int col) {\n    Integer row = null;\n    double maxValue = epsilon; // start with epsilon instead of 0.0\n    for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n        double absValue = Math.abs(getEntry(i, col));\n        if (absValue > maxValue && !MathUtils.equals(absValue, 0.0, epsilon)) {\n            row = i;\n            maxValue = absValue;\n        } else if (absValue > 0 && absValue == maxValue) {\n            row = null;\n        }\n    }\n    return row;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 0ab790cd6..7f035ece7 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -269,19 +269,20 @@ class SimplexTableau implements Serializable {\n      * @param col index of the column to check\n      * @return the row that the variable is basic in.  null if the column is not basic\n      */\n-    private Integer getBasicRow(final int col) {\n-        Integer row = null;\n-        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n-                if (row == null) {\n-                row = i;\n-                } else {\n-                return null;\n-                }\n-            }\n+private Integer getBasicRow(final int col) {\n+    Integer row = null;\n+    double maxValue = epsilon; // start with epsilon instead of 0.0\n+    for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n+        double absValue = Math.abs(getEntry(i, col));\n+        if (absValue > maxValue && !MathUtils.equals(absValue, 0.0, epsilon)) {\n+            row = i;\n+            maxValue = absValue;\n+        } else if (absValue > 0 && absValue == maxValue) {\n+            row = null;\n         }\n-        return row;\n     }\n+    return row;\n+}\n \n     /**\n      * Removes the phase 1 objective function and artificial variables from this tableau.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<3.694872120962248E7>",
    "test_result": "FAIL"
}