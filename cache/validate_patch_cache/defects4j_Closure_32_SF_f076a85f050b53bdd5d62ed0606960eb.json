{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, \n                                                    WhitespaceOption option) {\n  StringBuilder multilineTextBuilder = new StringBuilder();\n  JsDocToken prevToken = null;\n\n  // Read the content from the first line.\n  String line = stream.getRemainingJSDocLine();\n  if (option != WhitespaceOption.PRESERVE) {\n    line = line.trim();\n  }\n\n  // Add it to the multiline text.\n  multilineTextBuilder.append(line);\n\n  // Keep track of the position of the first line.\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno();\n\n  token = next();\n\n  while (true) {\n    switch (token) {\n      case EOL:\n        // Add it to the multiline text.\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          multilineTextBuilder.append('\\n');\n        }\n\n        // Check if the previous token was a STAR.\n        if (prevToken == JsDocToken.STAR) {\n          // Mark the STAR as JsDoc.\n          int lineno = stream.getLineno();\n          int charno = stream.getCharno();\n          jsdocBuilder.markText(\"*\", lineno, charno, lineno, charno + 1);\n        }\n\n        // Read the next line.\n        line = stream.getRemainingJSDocLine();\n        if (line != null && !line.isEmpty()) {\n          if (option != WhitespaceOption.PRESERVE) {\n            line = line.trim();\n          }\n          if (!line.isEmpty()) {\n            multilineTextBuilder.append(line);\n          }\n        }\n\n        // Move to the next token.\n        prevToken = token;\n        token = next();\n        break;\n\n      case STAR:\n        // Add the STAR to the multiline text.\n        if (prevToken != JsDocToken.STAR) {\n          multilineTextBuilder.append('*');\n        }\n\n        // Mark the STAR as JsDoc.\n        int lineno = stream.getLineno();\n        int charno = stream.getCharno();\n        jsdocBuilder.markText(\"*\", lineno, charno, lineno, charno + 1);\n\n        // Move to the next token.\n        prevToken = token;\n        token = next();\n        break;\n\n      case EOF:\n      case EOC:\n        // Reached the end of the JsDoc.\n        String multilineText = multilineTextBuilder.toString();\n        if (option != WhitespaceOption.PRESERVE) {\n          multilineText = multilineText.trim();\n        }\n\n        // Keep track of the position of the last line.\n        int endLineno = stream.getLineno();\n        int endCharno = stream.getCharno();\n\n        // Mark the multiline text as JsDoc.\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n\n        return new ExtractionInfo(multilineText, token);\n\n      default:\n        // All other tokens.\n        if (prevToken == JsDocToken.STAR) {\n          // Add a whitespace.\n          multilineTextBuilder.append(' ');\n        }\n\n        // Add the token to the multiline text.\n        multilineTextBuilder.append(toString(token));\n\n        // Move to the next token.\n        prevToken = token;\n        token = next();\n        break;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..d54bdb70 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,107 +1326,108 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, \n+                                                    WhitespaceOption option) {\n+  StringBuilder multilineTextBuilder = new StringBuilder();\n+  JsDocToken prevToken = null;\n \n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n-    }\n-\n-    stream.update();\n-    int startLineno = stream.getLineno();\n-    int startCharno = stream.getCharno() + 1;\n+  // Read the content from the first line.\n+  String line = stream.getRemainingJSDocLine();\n+  if (option != WhitespaceOption.PRESERVE) {\n+    line = line.trim();\n+  }\n \n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n-    if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n-    }\n+  // Add it to the multiline text.\n+  multilineTextBuilder.append(line);\n \n-    StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n+  // Keep track of the position of the first line.\n+  int startLineno = stream.getLineno();\n+  int startCharno = stream.getCharno();\n \n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n+  token = next();\n \n-    boolean ignoreStar = false;\n-\n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n+  while (true) {\n+    switch (token) {\n+      case EOL:\n+        // Add it to the multiline text.\n+        if (option != WhitespaceOption.SINGLE_LINE) {\n+          multilineTextBuilder.append('\\n');\n+        }\n \n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n+        // Check if the previous token was a STAR.\n+        if (prevToken == JsDocToken.STAR) {\n+          // Mark the STAR as JsDoc.\n+          int lineno = stream.getLineno();\n+          int charno = stream.getCharno();\n+          jsdocBuilder.markText(\"*\", lineno, charno, lineno, charno + 1);\n+        }\n \n-            builder.append('*');\n+        // Read the next line.\n+        line = stream.getRemainingJSDocLine();\n+        if (line != null && !line.isEmpty()) {\n+          if (option != WhitespaceOption.PRESERVE) {\n+            line = line.trim();\n           }\n-\n-          token = next();\n-          continue;\n-\n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n+          if (!line.isEmpty()) {\n+            multilineTextBuilder.append(line);\n           }\n+        }\n \n-          ignoreStar = true;\n-          token = next();\n-          continue;\n-\n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n+        // Move to the next token.\n+        prevToken = token;\n+        token = next();\n+        break;\n \n-              // All tokens must be separated by a space.\n+      case STAR:\n+        // Add the STAR to the multiline text.\n+        if (prevToken != JsDocToken.STAR) {\n+          multilineTextBuilder.append('*');\n+        }\n \n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n+        // Mark the STAR as JsDoc.\n+        int lineno = stream.getLineno();\n+        int charno = stream.getCharno();\n+        jsdocBuilder.markText(\"*\", lineno, charno, lineno, charno + 1);\n \n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n+        // Move to the next token.\n+        prevToken = token;\n+        token = next();\n+        break;\n \n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+      case EOF:\n+      case EOC:\n+        // Reached the end of the JsDoc.\n+        String multilineText = multilineTextBuilder.toString();\n+        if (option != WhitespaceOption.PRESERVE) {\n+          multilineText = multilineText.trim();\n+        }\n \n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n+        // Keep track of the position of the last line.\n+        int endLineno = stream.getLineno();\n+        int endCharno = stream.getCharno();\n \n-            return new ExtractionInfo(multilineText, token);\n-          }\n+        // Mark the multiline text as JsDoc.\n+        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n \n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n+        return new ExtractionInfo(multilineText, token);\n \n-          line = stream.getRemainingJSDocLine();\n+      default:\n+        // All other tokens.\n+        if (prevToken == JsDocToken.STAR) {\n+          // Add a whitespace.\n+          multilineTextBuilder.append(' ');\n+        }\n \n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n+        // Add the token to the multiline text.\n+        multilineTextBuilder.append(toString(token));\n \n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n+        // Move to the next token.\n+        prevToken = token;\n+        token = next();\n+        break;\n+    }\n   }\n+}\n \n \n   /**",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_HIDDEN_SUPERCLASS_PROPERTY. property bar already defined on superclass Foo; use @override to override it at testcode line 3 : 16 expected:<0> but was:<1>",
    "test_result": "FAIL"
}