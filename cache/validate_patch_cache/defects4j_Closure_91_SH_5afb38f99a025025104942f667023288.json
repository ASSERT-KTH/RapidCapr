{
    "patch": "      Node gp = n.getParent();\n      if (gp != null &&\n          gp.getType() == Token.ASSIGN &&\n          NodeUtil.isGet(gp.getFirstChild()) &&\n          gp.getFirstChild().getType() == Token.GETPROP &&\n          gp.getFirstChild().getLastChild().getString().equals(\"prototype\")) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..f0b6fa08 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,12 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node gp = n.getParent();\n+      if (gp != null &&\n+          gp.getType() == Token.ASSIGN &&\n+          NodeUtil.isGet(gp.getFirstChild()) &&\n+          gp.getFirstChild().getType() == Token.GETPROP &&\n+          gp.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}