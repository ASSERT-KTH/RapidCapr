{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        Partial result = iChronology.get(partial, instant).toPartial();\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (result.getFieldType(i) == DateTimeFieldType.monthOfYear())\n                    && result.getValues()[i] != values[i]) {\n                // Adjust day of month to a valid value for the new month\n                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n                int dayOfMonth = iChronology.dayOfMonth().get(instant);\n                if (dayOfMonth > maxDayOfMonth) {\n                    instant = iChronology.dayOfMonth().set(instant, maxDayOfMonth);\n                    result = iChronology.get(partial, instant).toPartial();\n                }\n                break;\n            }\n        }\n        return result.getValues();\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..2ddd3def 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,35 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        instant = add(instant, valueToAdd);\n+        Partial result = iChronology.get(partial, instant).toPartial();\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (result.getFieldType(i) == DateTimeFieldType.monthOfYear())\n+                    && result.getValues()[i] != values[i]) {\n+                // Adjust day of month to a valid value for the new month\n+                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+                int dayOfMonth = iChronology.dayOfMonth().get(instant);\n+                if (dayOfMonth > maxDayOfMonth) {\n+                    instant = iChronology.dayOfMonth().set(instant, maxDayOfMonth);\n+                    result = iChronology.get(partial, instant).toPartial();\n+                }\n+                break;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return result.getValues();\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}