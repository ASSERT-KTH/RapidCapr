{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean leap = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex && partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n                int year = iChronology.year().get(instant);\n                int month = values[i] + valueToAdd;\n                if (year < 0) {\n                    month = month - 1;\n                }\n                int newYear = year + month / 12;\n                int newMonth = month % 12 + 1;\n                int maxDay = iChronology.dayOfMonth().getMaximumValue(newYear, newMonth);\n                int day = iChronology.dayOfMonth().get(instant);\n                if (day > maxDay) {\n                    day = maxDay;\n                }\n                leap = iChronology.isLeapYear(newYear);\n                instant = iChronology.monthOfYear().set(iChronology.year().set(0L, newYear), newMonth);\n                instant = iChronology.dayOfMonth().set(instant, day);\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        if (leap && iChronology.dayOfMonth().get(instant) == 29) {\n            instant = iChronology.dayOfMonth().set(instant, 28);\n        }\n        instant = add(instant, valueToAdd);\n        int[] result = iChronology.get(partial, instant);\n        if (leap && result[fieldIndex] == 3) {\n            result[fieldIndex] = 2;\n        }\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..b2b997ec 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,50 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean leap = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex && partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n+                int year = iChronology.year().get(instant);\n+                int month = values[i] + valueToAdd;\n+                if (year < 0) {\n+                    month = month - 1;\n+                }\n+                int newYear = year + month / 12;\n+                int newMonth = month % 12 + 1;\n+                int maxDay = iChronology.dayOfMonth().getMaximumValue(newYear, newMonth);\n+                int day = iChronology.dayOfMonth().get(instant);\n+                if (day > maxDay) {\n+                    day = maxDay;\n+                }\n+                leap = iChronology.isLeapYear(newYear);\n+                instant = iChronology.monthOfYear().set(iChronology.year().set(0L, newYear), newMonth);\n+                instant = iChronology.dayOfMonth().set(instant, day);\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        if (leap && iChronology.dayOfMonth().get(instant) == 29) {\n+            instant = iChronology.dayOfMonth().set(instant, 28);\n+        }\n+        instant = add(instant, valueToAdd);\n+        int[] result = iChronology.get(partial, instant);\n+        if (leap && result[fieldIndex] == 3) {\n+            result[fieldIndex] = 2;\n+        }\n+        return result;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: no suitable method found for getMaximumValue(int,int)",
    "test_result": "ERROR"
}