{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    try {\n        JSONObject obj = new JSONObject(jsonStr);\n        JSONArray arr = obj.getJSONArray(\"types\");\n        int total = 0;\n        int typed = 0;\n        for (int i = 0; i < arr.length(); i++) {\n            total += arr.getJSONObject(i).getInt(\"total\");\n            typed += arr.getJSONObject(i).getInt(\"typed\");\n        }\n        if (total == 0) {\n            return 0.0;\n        }\n        return (double) typed / total * 100;\n    } catch (JSONException e) {\n        e.printStackTrace();\n        return 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..c930d11a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    try {\n+        JSONObject obj = new JSONObject(jsonStr);\n+        JSONArray arr = obj.getJSONArray(\"types\");\n+        int total = 0;\n+        int typed = 0;\n+        for (int i = 0; i < arr.length(); i++) {\n+            total += arr.getJSONObject(i).getInt(\"total\");\n+            typed += arr.getJSONObject(i).getInt(\"typed\");\n+        }\n+        if (total == 0) {\n+            return 0.0;\n+        }\n+        return (double) typed / total * 100;\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+        return 0.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}