{
    "patch": "        double dev = standardDeviation * Math.sqrt(2.0);\n        if (dev == 0.0) {\n            if (x < mean) {\n                return 0.0;\n            } else {\n                return 1.0;\n            }\n        }\n        return 0.5 * Erf.erfc(-(x - mean) / dev);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..a0682bc32 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,15 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n-    }\n+        double dev = standardDeviation * Math.sqrt(2.0);\n+        if (dev == 0.0) {\n+            if (x < mean) {\n+                return 0.0;\n+            } else {\n+                return 1.0;\n+            }\n+        }\n+        return 0.5 * Erf.erfc(-(x - mean) / dev);\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}