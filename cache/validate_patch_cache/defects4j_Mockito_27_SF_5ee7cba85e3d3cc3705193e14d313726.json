{
    "patch": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        \n        if (mock instanceof MockAccess) {\n            MockAccess mockAccess = (MockAccess) mock;\n            Object oldInterceptor = mockAccess.getInterceptor();\n            Object newInterceptor = newFilter;\n            mockAccess$setMockitoInterceptor(oldInterceptor, newInterceptor);\n        } else if (mock instanceof Factory) {\n            Factory factory = (Factory) mock;\n            Callback[] callbacks = factory.getCallbacks();\n\n            // Find the index of the current interceptor in the callbacks array\n            int interceptorIndex = -1;\n            for (int i = 0; i < callbacks.length; i++) {\n                if (callbacks[i] instanceof MethodInterceptorFilter) {\n                    interceptorIndex = i;\n                    break;\n                }\n            }\n\n            Callback[] newCallbacks;\n            if (interceptorIndex >= 0) { // Replace the current interceptor with the new one\n                newCallbacks = callbacks.clone();\n                newCallbacks[interceptorIndex] = newFilter;\n            } else { // Add the new interceptor to the callbacks array\n                newCallbacks = Arrays.copyOf(callbacks, callbacks.length + 1);\n                newCallbacks[newCallbacks.length - 1] = newFilter;\n            }\n\n            factory.setCallbacks(newCallbacks);\n        } else {\n            throw new IllegalArgumentException(\"Unsupported mock object type: \" + mock.getClass().getName());\n        }\n    }\n\n    // Helper method to access the setMockitoInterceptor method on the mockito-core MockAccess class using reflection, since it's not public\n    private void mockAccess$setMockitoInterceptor(Object mock, Object interceptor) {\n        try {\n            Method setMockitoInterceptor = mock.getClass().getDeclaredMethod(\"setMockitoInterceptor\", Object.class);\n            setMockitoInterceptor.setAccessible(true);\n            setMockitoInterceptor.invoke(mock, interceptor);\n        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n            throw new RuntimeException(\"Unable to access setMockitoInterceptor method on MockAccess class\", e);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..948ef2d50 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,55 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        \n+        if (mock instanceof MockAccess) {\n+            MockAccess mockAccess = (MockAccess) mock;\n+            Object oldInterceptor = mockAccess.getInterceptor();\n+            Object newInterceptor = newFilter;\n+            mockAccess$setMockitoInterceptor(oldInterceptor, newInterceptor);\n+        } else if (mock instanceof Factory) {\n+            Factory factory = (Factory) mock;\n+            Callback[] callbacks = factory.getCallbacks();\n+\n+            // Find the index of the current interceptor in the callbacks array\n+            int interceptorIndex = -1;\n+            for (int i = 0; i < callbacks.length; i++) {\n+                if (callbacks[i] instanceof MethodInterceptorFilter) {\n+                    interceptorIndex = i;\n+                    break;\n+                }\n+            }\n+\n+            Callback[] newCallbacks;\n+            if (interceptorIndex >= 0) { // Replace the current interceptor with the new one\n+                newCallbacks = callbacks.clone();\n+                newCallbacks[interceptorIndex] = newFilter;\n+            } else { // Add the new interceptor to the callbacks array\n+                newCallbacks = Arrays.copyOf(callbacks, callbacks.length + 1);\n+                newCallbacks[newCallbacks.length - 1] = newFilter;\n+            }\n+\n+            factory.setCallbacks(newCallbacks);\n+        } else {\n+            throw new IllegalArgumentException(\"Unsupported mock object type: \" + mock.getClass().getName());\n+        }\n+    }\n+\n+    // Helper method to access the setMockitoInterceptor method on the mockito-core MockAccess class using reflection, since it's not public\n+    private void mockAccess$setMockitoInterceptor(Object mock, Object interceptor) {\n+        try {\n+            Method setMockitoInterceptor = mock.getClass().getDeclaredMethod(\"setMockitoInterceptor\", Object.class);\n+            setMockitoInterceptor.setAccessible(true);\n+            setMockitoInterceptor.invoke(mock, interceptor);\n+        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+            throw new RuntimeException(\"Unable to access setMockitoInterceptor method on MockAccess class\", e);\n+        }\n+    }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}