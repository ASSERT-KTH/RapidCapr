{
    "patch": "public static double getTypedPercent(String js) {\n    double totalNum = 0;\n    double typedNum = 0;\n    String pattern = \"\\\"type\\\":\\\"([A-Z])\\\"\";\n    Pattern r = Pattern.compile(pattern);\n    Matcher m = r.matcher(js);\n    while (m.find()) {\n        totalNum++;\n        if (m.group(1).equals(\"T\")) {\n            typedNum++;\n        }\n    }\n    return (typedNum / totalNum) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..5877e1bd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    double totalNum = 0;\n+    double typedNum = 0;\n+    String pattern = \"\\\"type\\\":\\\"([A-Z])\\\"\";\n+    Pattern r = Pattern.compile(pattern);\n+    Matcher m = r.matcher(js);\n+    while (m.find()) {\n+        totalNum++;\n+        if (m.group(1).equals(\"T\")) {\n+            typedNum++;\n+        }\n+    }\n+    return (typedNum / totalNum) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}