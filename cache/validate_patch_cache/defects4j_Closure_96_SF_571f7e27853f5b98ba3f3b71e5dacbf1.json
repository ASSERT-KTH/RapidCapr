{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  List<Node> arguments = call.children().stream().skip(1).collect(Collectors.toList());\n  int numArguments = arguments.size();\n  int minArguments = functionType.getMinArguments();\n  int maxArguments = functionType.getMaxArguments();\n  int numParameters = functionType.getParameters().size();\n  \n  if (numArguments < minArguments) {\n    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArguments), String.valueOf(minArguments),\n        maxArguments != Integer.MAX_VALUE ? \" and \" + (maxArguments - minArguments) + \" argument(s) beyond the minimum\" : \"\");\n    throw new RuntimeException(\"Expected at least \" + minArguments + \" arguments, but got \" + numArguments + \" in call to \" + call);\n  } else if (numArguments > maxArguments) {\n    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArguments), String.valueOf(minArguments),\n        maxArguments != Integer.MAX_VALUE ? \" and \" + (maxArguments - minArguments) + \" argument(s) beyond the minimum\" : \"\");\n    throw new RuntimeException(\"Expected at most \" + maxArguments + \" arguments, but got \" + numArguments + \" in call to \" + call);\n  } else if (numParameters == numArguments) {\n    for (int i = 0; i < numArguments; i++) {\n      Node argument = arguments.get(i);\n      Node parameter = functionType.getParameters().get(i);\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, i);\n    }\n  } else if (numParameters > numArguments) {\n    for (int i = 0; i < numArguments; i++) {\n      Node argument = arguments.get(i);\n      Node parameter = functionType.getParameters().get(i);\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, i);\n    }\n    for (int i = numArguments; i < numParameters; i++) {\n      Node parameter = functionType.getParameters().get(i);\n      if (parameter.isOptional()) {\n        break;\n      } else if (parameter.isVarArgs()) {\n        break;\n      }\n      validator.expectArgumentMatchesParameter(t, null, null, getJSType(parameter), call, i);\n    }\n  } else {\n    boolean varargs = functionType.getParameters().get(numParameters - 1).isVarArgs();\n    for (int i = 0; i < numParameters - 1; i++) {\n      Node argument = arguments.get(i);\n      Node parameter = functionType.getParameters().get(i);\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, i);\n    }\n    Node varargsArray = varargs && numArguments > numParameters - 1 ? arguments.get(numParameters - 1).detach() : null;\n    if (varargsArray != null) {\n      varargsArray.setType(Token.ARRAYLIT);\n      varargsArray.setJSType(new ArrayType(getNativeType(ARRAY_TYPE)));\n    }\n    int argIndex = numParameters - 1;\n    while (argIndex < numArguments) {\n      Node argument = arguments.get(argIndex);\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), varargs ? varargsArray.getJSType() : null, call, argIndex);\n      argIndex++;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..505a28e6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,64 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  List<Node> arguments = call.children().stream().skip(1).collect(Collectors.toList());\n+  int numArguments = arguments.size();\n+  int minArguments = functionType.getMinArguments();\n+  int maxArguments = functionType.getMaxArguments();\n+  int numParameters = functionType.getParameters().size();\n+  \n+  if (numArguments < minArguments) {\n+    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArguments), String.valueOf(minArguments),\n+        maxArguments != Integer.MAX_VALUE ? \" and \" + (maxArguments - minArguments) + \" argument(s) beyond the minimum\" : \"\");\n+    throw new RuntimeException(\"Expected at least \" + minArguments + \" arguments, but got \" + numArguments + \" in call to \" + call);\n+  } else if (numArguments > maxArguments) {\n+    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArguments), String.valueOf(minArguments),\n+        maxArguments != Integer.MAX_VALUE ? \" and \" + (maxArguments - minArguments) + \" argument(s) beyond the minimum\" : \"\");\n+    throw new RuntimeException(\"Expected at most \" + maxArguments + \" arguments, but got \" + numArguments + \" in call to \" + call);\n+  } else if (numParameters == numArguments) {\n+    for (int i = 0; i < numArguments; i++) {\n+      Node argument = arguments.get(i);\n+      Node parameter = functionType.getParameters().get(i);\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, i);\n     }\n-\n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  } else if (numParameters > numArguments) {\n+    for (int i = 0; i < numArguments; i++) {\n+      Node argument = arguments.get(i);\n+      Node parameter = functionType.getParameters().get(i);\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, i);\n+    }\n+    for (int i = numArguments; i < numParameters; i++) {\n+      Node parameter = functionType.getParameters().get(i);\n+      if (parameter.isOptional()) {\n+        break;\n+      } else if (parameter.isVarArgs()) {\n+        break;\n+      }\n+      validator.expectArgumentMatchesParameter(t, null, null, getJSType(parameter), call, i);\n+    }\n+  } else {\n+    boolean varargs = functionType.getParameters().get(numParameters - 1).isVarArgs();\n+    for (int i = 0; i < numParameters - 1; i++) {\n+      Node argument = arguments.get(i);\n+      Node parameter = functionType.getParameters().get(i);\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, i);\n+    }\n+    Node varargsArray = varargs && numArguments > numParameters - 1 ? arguments.get(numParameters - 1).detach() : null;\n+    if (varargsArray != null) {\n+      varargsArray.setType(Token.ARRAYLIT);\n+      varargsArray.setJSType(new ArrayType(getNativeType(ARRAY_TYPE)));\n+    }\n+    int argIndex = numParameters - 1;\n+    while (argIndex < numArguments) {\n+      Node argument = arguments.get(argIndex);\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), varargs ? varargsArray.getJSType() : null, call, argIndex);\n+      argIndex++;\n     }\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}