{
    "patch": "  static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n      case Token.NAME:\n        return defines.contains(val.getString());\n\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n        break;\n\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.NOT:\n      case Token.NEG:\n        return isValidDefineValue(val.getFirstChild(), defines);\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex a31b17a2..a129046d 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -319,29 +319,28 @@ public final class NodeUtil {\n    */\n   static boolean isValidDefineValue(Node val, Set<String> defines) {\n     switch (val.getType()) {\n+      case Token.NAME:\n+        return defines.contains(val.getString());\n+\n+      case Token.GETPROP:\n+        if (val.isQualifiedName()) {\n+          return defines.contains(val.getQualifiedName());\n+        }\n+        break;\n+\n       case Token.STRING:\n       case Token.NUMBER:\n       case Token.TRUE:\n       case Token.FALSE:\n         return true;\n \n-      // Binary operators are only valid if both children are valid.\n       case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n-\n-      // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n         return isValidDefineValue(val.getFirstChild(), defines);\n-\n-      // Names are valid if and only if they are defines themselves.\n-      case Token.NAME:\n-      case Token.GETPROP:\n-        if (val.isQualifiedName()) {\n-          return defines.contains(val.getQualifiedName());\n-        }\n     }\n     return false;\n   }",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}