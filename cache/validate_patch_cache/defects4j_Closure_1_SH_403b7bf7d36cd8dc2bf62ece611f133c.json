{
    "patch": "    // Determine which arguments are actually referenced.\n    BitSet unused = new BitSet(argList.getChildCount());\n    int count = 0;\n    for (Node current = argList.getFirstChild(); current != null;\n         current = current.getNext()) {\n      if (fnScope.getVar(current.getString()).isReferenced()) {\n        count += 1;\n      } else {\n        unused.set(count);\n      }\n    }\n\n    if (!modifyCallers) {\n      // Remove unreferenced args.\n      for (int i = unused.cardinality() - 1; i >= 0 ; i--) {\n        int argIndex = unused.previousSetBit(i);\n        Preconditions.checkState(argIndex >= 0);\n        Node lastArg = argList.getChildAtIndex(argIndex);\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced, unused);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..edccb610 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Determine which arguments are actually referenced.\n+    BitSet unused = new BitSet(argList.getChildCount());\n+    int count = 0;\n+    for (Node current = argList.getFirstChild(); current != null;\n+         current = current.getNext()) {\n+      if (fnScope.getVar(current.getString()).isReferenced()) {\n+        count += 1;\n+      } else {\n+        unused.set(count);\n+      }\n+    }\n+\n+    if (!modifyCallers) {\n+      // Remove unreferenced args.\n+      for (int i = unused.cardinality() - 1; i >= 0 ; i--) {\n+        int argIndex = unused.previousSetBit(i);\n+        Preconditions.checkState(argIndex >= 0);\n+        Node lastArg = argList.getChildAtIndex(argIndex);\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced, unused);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}