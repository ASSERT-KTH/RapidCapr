{
    "patch": "JSType resolvedTypeOfThis = null;\ntry {\n  resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n  if (!(resolvedTypeOfThis instanceof ObjectType)) {\n    // HANDLE ERROR: typeOfThis does not resolve to an ObjectType\n  } else {\n    typeOfThis = (ObjectType) resolvedTypeOfThis;\n  }\n} catch (ClassCastException e) {\n  // HANDLE ERROR: typeOfThis cannot be cast to an ObjectType\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..5b152344 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,17 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+JSType resolvedTypeOfThis = null;\n+try {\n+  resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n+  if (!(resolvedTypeOfThis instanceof ObjectType)) {\n+    // HANDLE ERROR: typeOfThis does not resolve to an ObjectType\n+  } else {\n+    typeOfThis = (ObjectType) resolvedTypeOfThis;\n+  }\n+} catch (ClassCastException e) {\n+  // HANDLE ERROR: typeOfThis cannot be cast to an ObjectType\n+}\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}