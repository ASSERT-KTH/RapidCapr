{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        SavedField savedField = savedFields[i];\n        if (savedField != null) {\n            DateTimeFieldType fieldType = savedField.iField.getType();\n            if (fieldType == null || fieldType.isSupported(iChrono)) {\n                try {\n                    millis = savedField.set(millis, resetFields);\n                } catch (IllegalFieldValueException e) {\n                    // Save the exception as this may be the last chronological piece\n                    // we parse even though an error happened, and the savedFields\n                    // array will then be most helpful for calculation.\n                    iSavedFields = savedFields;\n                    iSavedFieldsCount = count;\n                    iSavedFieldsShared = false;\n\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                    }\n                    throw e;\n                }\n            }\n        }\n    }\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n    }\n    // Roll back the saved fields to the state before the parsing started.\n    iSavedFields = savedFields;\n    iSavedFieldsCount = count;\n    iSavedFieldsShared = false;\n    throw e;\n} finally {\n    // Write back the fields so as to have the correct values for printing/selecting\n    iSavedFields = savedFields;\n    iSavedFieldsCount = count;\n    iSavedFieldsShared = false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..27d2b2ee 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,45 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        SavedField savedField = savedFields[i];\n+        if (savedField != null) {\n+            DateTimeFieldType fieldType = savedField.iField.getType();\n+            if (fieldType == null || fieldType.isSupported(iChrono)) {\n+                try {\n+                    millis = savedField.set(millis, resetFields);\n+                } catch (IllegalFieldValueException e) {\n+                    // Save the exception as this may be the last chronological piece\n+                    // we parse even though an error happened, and the savedFields\n+                    // array will then be most helpful for calculation.\n+                    iSavedFields = savedFields;\n+                    iSavedFieldsCount = count;\n+                    iSavedFieldsShared = false;\n+\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                    }\n+                    throw e;\n+                }\n+            }\n+        }\n+    }\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+    }\n+    // Roll back the saved fields to the state before the parsing started.\n+    iSavedFields = savedFields;\n+    iSavedFieldsCount = count;\n+    iSavedFieldsShared = false;\n+    throw e;\n+} finally {\n+    // Write back the fields so as to have the correct values for printing/selecting\n+    iSavedFields = savedFields;\n+    iSavedFieldsCount = count;\n+    iSavedFieldsShared = false;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}