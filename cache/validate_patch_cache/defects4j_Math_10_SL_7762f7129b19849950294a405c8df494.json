{
    "patch": "if (Double.isNaN(result[resultOffset])) {\n    result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);   \n} else if (Double.isNaN(result[resultOffset+1])) {\n    result[resultOffset+1] = FastMath.atan2(y[yOffset+1], x[xOffset+1]);   \n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..78333e5a4 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,11 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+if (Double.isNaN(result[resultOffset])) {\n+    result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);   \n+} else if (Double.isNaN(result[resultOffset+1])) {\n+    result[resultOffset+1] = FastMath.atan2(y[yOffset+1], x[xOffset+1]);   \n+}\n \n     }\n ",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 1",
    "test_result": "FAIL"
}