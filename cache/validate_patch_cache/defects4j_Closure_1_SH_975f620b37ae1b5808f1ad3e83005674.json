{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      Node prevArg = null;\n      while (lastArg != null) {\n        String paramName = lastArg.getString();\n        Var var = fnScope.getVar(paramName);\n        lastArg = lastArg.getPrevious();\n        if (referenced.contains(var)) {\n          prevArg = lastArg;\n        } else {\n          if (prevArg == null) {\n            argList.removeChild(lastArg.getNext());\n          } else {\n            argList.removeChild(prevArg.getNext(), lastArg.getNext());\n          }\n          compiler.reportCodeChange();\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..cbb980fc 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      Node prevArg = null;\n+      while (lastArg != null) {\n+        String paramName = lastArg.getString();\n+        Var var = fnScope.getVar(paramName);\n+        lastArg = lastArg.getPrevious();\n+        if (referenced.contains(var)) {\n+          prevArg = lastArg;\n+        } else {\n+          if (prevArg == null) {\n+            argList.removeChild(lastArg.getNext());\n+          } else {\n+            argList.removeChild(prevArg.getNext(), lastArg.getNext());\n+          }\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}