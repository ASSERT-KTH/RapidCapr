{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n        if (child.isString()) {\n          String name = child.getString();\n          T type = typeSystem.getType(getScope(), n, name);\n\n          Property prop = getProperty(name);\n          if (!prop.scheduleRenaming(child,\n                                       processProperty(t, prop, type, null))) {\n            if (propertiesToErrorFor.containsKey(name)) {\n                  compiler.report(\n                      JSError.make(\n                          n.getSourceFileName(),\n                          child,\n                          propertiesToErrorFor.get(name),\n                          Warnings.INVALIDATION,\n                          name,\n                          (type == null ? \"null\" : type.toString()),\n                          n.toString(),\n                          \"\"));\n                }\n          }\n        } else if (child.isGetterDef() || child.isSetterDef() || child.isMemberFunctionDef()) {\n          String name = null;\n          if (child.isGetterDef()) {\n            Node key = child.getFirstChild();\n            name = key.isString() ? key.getString() : null;\n          } else if (child.isSetterDef()) {\n            Node key = child.getSecondChild();\n            name = key.isString() ? key.getString() : null;\n          } else if (child.isMemberFunctionDef()) {\n            Node key = child.getLastChild();\n            name = key.isString() ? key.getString() : null;\n          }\n          Property prop = getProperty(name);\n          if (!prop.scheduleRenaming(child, processProperty(t, prop, null, null))) {\n            // nothing to process\n          }\n        } else if (child.isComputedProp()) {\n          Node key = child.getFirstChild();\n          Property prop = getProperty(null);\n          if (!prop.scheduleRenaming(\n                  key, processProperty(t, prop, null, key.getFirstChild()))) {\n            // nothing to process\n          }\n          visitGetOrSetDefinition(child.getLastChild());\n        } else {\n          Preconditions.checkState(child.isSpread(), child);\n          visitGetOrSetDefinition(child.getFirstChild());\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..70766318 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,61 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+    private void handleObjectLit(NodeTraversal t, Node n) {\n+      for (Node child = n.getFirstChild();\n+          child != null;\n+          child = child.getNext()) {\n+        // Maybe STRING, GET, SET\n+        if (child.isString()) {\n+          String name = child.getString();\n+          T type = typeSystem.getType(getScope(), n, name);\n+\n+          Property prop = getProperty(name);\n+          if (!prop.scheduleRenaming(child,\n+                                       processProperty(t, prop, type, null))) {\n+            if (propertiesToErrorFor.containsKey(name)) {\n+                  compiler.report(\n+                      JSError.make(\n+                          n.getSourceFileName(),\n+                          child,\n+                          propertiesToErrorFor.get(name),\n+                          Warnings.INVALIDATION,\n+                          name,\n+                          (type == null ? \"null\" : type.toString()),\n+                          n.toString(),\n+                          \"\"));\n+                }\n+          }\n+        } else if (child.isGetterDef() || child.isSetterDef() || child.isMemberFunctionDef()) {\n+          String name = null;\n+          if (child.isGetterDef()) {\n+            Node key = child.getFirstChild();\n+            name = key.isString() ? key.getString() : null;\n+          } else if (child.isSetterDef()) {\n+            Node key = child.getSecondChild();\n+            name = key.isString() ? key.getString() : null;\n+          } else if (child.isMemberFunctionDef()) {\n+            Node key = child.getLastChild();\n+            name = key.isString() ? key.getString() : null;\n+          }\n+          Property prop = getProperty(name);\n+          if (!prop.scheduleRenaming(child, processProperty(t, prop, null, null))) {\n+            // nothing to process\n+          }\n+        } else if (child.isComputedProp()) {\n+          Node key = child.getFirstChild();\n+          Property prop = getProperty(null);\n+          if (!prop.scheduleRenaming(\n+                  key, processProperty(t, prop, null, key.getFirstChild()))) {\n+            // nothing to process\n+          }\n+          visitGetOrSetDefinition(child.getLastChild());\n+        } else {\n+          Preconditions.checkState(child.isSpread(), child);\n+          visitGetOrSetDefinition(child.getFirstChild());\n+        }\n+      }\n+    }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}