{
    "patch": "import java.util.Arrays;\n\npublic class Genotyping {\n    public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n        int size = 1;\n        for (int i = 0; i < D; i++) {\n            size *= M;\n        }\n\n        double[][][] dp = new double[2][M][size];\n\n        int curr = 1;\n        int prev = 0;\n        for (int i = 0; i < M; i++) {\n            dp[prev][i][getIndex(i)] = 1.0 / M;\n        }\n\n        for (int i = 1; i < D; i++) {\n            curr = prev ^ 1;\n            for (int j = 0; j < M; j++) {\n                Arrays.fill(dp[curr][j], 0.0);\n            }\n\n            for (int j = 0; j < size; j++) {\n                int[] genotype = toGenotype(j, M, D);\n                int count = countDominant(genotype);\n\n                for (int k = 0; k < M; k++) {\n                    int[] newGenotype = Arrays.copyOf(genotype, genotype.length);\n                    newGenotype[i] = k;\n                    int newIndex = getIndex(newGenotype, M);\n                    dp[curr][k][newIndex] += genotypeProbabilities[count] * dp[prev][j % M][j];\n                }\n            }\n\n            prev = curr;\n        }\n\n        double[] res = new double[N + 1];\n        for (int i = 0; i < size; i++) {\n            if (countDominant(toGenotype(i, M, D)) <= N) {\n                for (int j = 0; j < M; j++) {\n                    res[countDominant(toGenotype(i, M, D))] += dp[curr][j][i];\n                }\n            }\n        }\n\n        for (int i = 0; i <= N; i++) {\n            res[i] /= Math.pow(M, D);\n        }\n\n        return res;\n    }\n\n    private int countDominant(int[] genotype) {\n        int count = 0;\n        for (int i = 0; i < genotype.length; i++) {\n            count += genotype[i] == 0 ? 0 : 1;\n        }\n        return count;\n    }\n\n    private int getIndex(int[] genotype, int M) {\n        int index = 0;\n        int count = 1;\n        for (int i = genotype.length - 1; i >= 0; i--) {\n            index += genotype[i] * count;\n            count *= M;\n        }\n        return index;\n    }\n\n    private int getIndex(int i) {\n        return i;\n    }\n\n    private int[] toGenotype(int index, int M, int D) {\n        int[] genotype = new int[D];\n        for (int i = 0; i < D; i++) {\n            genotype[i] = index % M;\n            index /= M;\n        }\n        return genotype;\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}