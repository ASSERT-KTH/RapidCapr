{
    "patch": "            if (offsetAdjusted >= 0) {\n                return offsetAdjusted;\n            }\n            long prevLocal = previousTransition(instantAdjusted);\n            if (prevLocal < instantAdjusted - MAX_GAP) {\n                // the previous transition was further back than the worst case scenario\n                if (offsetLocal < 0) {\n                    return offsetLocal;\n                }\n            } else {\n                int offsetPrev = getOffset(prevLocal);\n                if (offsetPrev < 0) {\n                    // there is a DST gap to account for\n                    return offsetPrev;\n                }\n                // there was no gap, so fall through\n            }\n            // handle the overlap case analytically\n            return nextValidOffset(instantAdjusted - 1);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0d33243e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetAdjusted >= 0) {\n+                return offsetAdjusted;\n+            }\n+            long prevLocal = previousTransition(instantAdjusted);\n+            if (prevLocal < instantAdjusted - MAX_GAP) {\n+                // the previous transition was further back than the worst case scenario\n+                if (offsetLocal < 0) {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                int offsetPrev = getOffset(prevLocal);\n+                if (offsetPrev < 0) {\n+                    // there is a DST gap to account for\n+                    return offsetPrev;\n+                }\n+                // there was no gap, so fall through\n+            }\n+            // handle the overlap case analytically\n+            return nextValidOffset(instantAdjusted - 1);\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}