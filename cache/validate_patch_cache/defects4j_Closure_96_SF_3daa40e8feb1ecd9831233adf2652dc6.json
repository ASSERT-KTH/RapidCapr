{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean hasVarArgs = false;\n    while (arguments.hasNext()) {\n      if (!parameters.hasNext()) {\n        // If there are no parameters left in the list, then this must be\n        // a var_args function.\n        parameter = null;  // last parameter before var_args\n        while (parameters.hasNext()) {\n          parameter = parameters.next();\n          if (parameter.isVarArgs()) {\n            hasVarArgs = true;\n            break;\n          }\n          ordinal++;\n          reportMissingArgument(t, call, argument, parameter, ordinal);\n        }\n        if (parameter == null) {\n          // there are no parameters specified in the function signature.\n          // report all remaining arguments as unexpected\n          while (arguments.hasNext()) {\n            argument = arguments.next();\n            reportUnexpectedArgument(t, call, argument);\n          }\n          return;\n        }\n        break;\n      } else {\n        parameter = parameters.next();\n      }\n      ordinal++;\n      argument = arguments.next();\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    if (!hasVarArgs && parameters.hasNext()) {\n      parameter = parameters.next();\n      if (parameter.isVarArgs())  {\n        hasVarArgs = true;\n      } else {\n        reportMissingArgument(t, call, argument, parameter, ordinal+1);\n      }\n    }\n\n    if (hasVarArgs) {\n      // For a var_args function, any number of additional arguments\n      // are allowed.\n      Node lastParameter = parameter;\n      while (arguments.hasNext()) {\n        argument = arguments.next();\n        validator.expectArgumentMatchesParameter(t, argument,\n                getJSType(argument), getJSType(lastParameter), call, ordinal);\n        ordinal++;\n      }\n    } else {\n      // For a non-var_args function, the number of arguments must\n      // match the number of parameters.\n      if (arguments.hasNext()) {\n        argument = arguments.next();\n        reportUnexpectedArgument(t, call, argument);\n        return;\n      }\n      int maxParams = functionType.getMaxArguments();\n      if (maxParams >= 0 && ordinal < maxParams) {\n        reportMissingArgument(t, call, argument, parameter, ordinal+1);\n      }\n    }\n  }\n\n  private void reportMissingArgument(NodeTraversal t, Node call,\n      Node argument, Node parameter, int ordinal) {\n    report(t, call, MISSING_PARAMETER,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        validator.formatOrdinal(ordinal), validator.getFunctionName(parameter));\n  }\n\n  private void reportUnexpectedArgument(NodeTraversal t, Node call, Node argument) {\n    report(t, call, UNEXPECTED_ARGUMENT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        validator.getFunctionName(argument));\n  }\n\n  private void report(NodeTraversal t, Node call, DiagnosticType diagnosticType,\n      String... arguments) {\n    t.report(call, diagnosticType, MessageFormat.format(DIAGNOSTIC_SOURCE, (Object[]) arguments));\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..b2b12257 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1405,28 +1405,90 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    boolean hasVarArgs = false;\n+    while (arguments.hasNext()) {\n+      if (!parameters.hasNext()) {\n+        // If there are no parameters left in the list, then this must be\n+        // a var_args function.\n+        parameter = null;  // last parameter before var_args\n+        while (parameters.hasNext()) {\n+          parameter = parameters.next();\n+          if (parameter.isVarArgs()) {\n+            hasVarArgs = true;\n+            break;\n+          }\n+          ordinal++;\n+          reportMissingArgument(t, call, argument, parameter, ordinal);\n+        }\n+        if (parameter == null) {\n+          // there are no parameters specified in the function signature.\n+          // report all remaining arguments as unexpected\n+          while (arguments.hasNext()) {\n+            argument = arguments.next();\n+            reportUnexpectedArgument(t, call, argument);\n+          }\n+          return;\n+        }\n+        break;\n+      } else {\n         parameter = parameters.next();\n-      argument = arguments.next();\n+      }\n       ordinal++;\n-\n+      argument = arguments.next();\n       validator.expectArgumentMatchesParameter(t, argument,\n           getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (!hasVarArgs && parameters.hasNext()) {\n+      parameter = parameters.next();\n+      if (parameter.isVarArgs())  {\n+        hasVarArgs = true;\n+      } else {\n+        reportMissingArgument(t, call, argument, parameter, ordinal+1);\n+      }\n     }\n+\n+    if (hasVarArgs) {\n+      // For a var_args function, any number of additional arguments\n+      // are allowed.\n+      Node lastParameter = parameter;\n+      while (arguments.hasNext()) {\n+        argument = arguments.next();\n+        validator.expectArgumentMatchesParameter(t, argument,\n+                getJSType(argument), getJSType(lastParameter), call, ordinal);\n+        ordinal++;\n+      }\n+    } else {\n+      // For a non-var_args function, the number of arguments must\n+      // match the number of parameters.\n+      if (arguments.hasNext()) {\n+        argument = arguments.next();\n+        reportUnexpectedArgument(t, call, argument);\n+        return;\n+      }\n+      int maxParams = functionType.getMaxArguments();\n+      if (maxParams >= 0 && ordinal < maxParams) {\n+        reportMissingArgument(t, call, argument, parameter, ordinal+1);\n+      }\n+    }\n+  }\n+\n+  private void reportMissingArgument(NodeTraversal t, Node call,\n+      Node argument, Node parameter, int ordinal) {\n+    report(t, call, MISSING_PARAMETER,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        validator.formatOrdinal(ordinal), validator.getFunctionName(parameter));\n+  }\n+\n+  private void reportUnexpectedArgument(NodeTraversal t, Node call, Node argument) {\n+    report(t, call, UNEXPECTED_ARGUMENT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        validator.getFunctionName(argument));\n+  }\n+\n+  private void report(NodeTraversal t, Node call, DiagnosticType diagnosticType,\n+      String... arguments) {\n+    t.report(call, diagnosticType, MessageFormat.format(DIAGNOSTIC_SOURCE, (Object[]) arguments));\n   }\n \n   /**",
    "result_reason": "error: method report(NodeTraversal,Node,DiagnosticType,String...) is already defined in class TypeCheck",
    "test_result": "ERROR"
}