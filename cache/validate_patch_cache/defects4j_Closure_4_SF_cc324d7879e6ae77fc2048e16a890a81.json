{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // First resolve via properties\n    resolveViaProperties(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    if (resolved) {\n      if (isResolved()) {\n        finishPropertyContinuations();\n      }\n      super.resolveInternal(t, enclosing);\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    // If not resolved via registry, try resolving via properties again\n    resolveViaProperties(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    super.resolveInternal(t, enclosing);\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..c3609e46 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,31 +182,32 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+    // First resolve via properties\n+    resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n+    boolean resolved = resolveViaRegistry(t, enclosing);\n     if (resolved) {\n+      if (isResolved()) {\n+        finishPropertyContinuations();\n+      }\n       super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n       return registry.isLastGeneration() ?\n           getReferencedType() : this;\n     }\n \n+    // If not resolved via registry, try resolving via properties again\n     resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n-    super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n+    super.resolveInternal(t, enclosing);\n     return registry.isLastGeneration() ?\n         getReferencedType() : this;\n   }",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_TYPE_PARSE_ERROR. Bad type annotation. Unknown type g.Late at testcode line 2 : 10 expected:<0> but was:<1>",
    "test_result": "FAIL"
}