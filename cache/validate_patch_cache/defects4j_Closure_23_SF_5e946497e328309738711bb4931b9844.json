{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n\n    if (!right.isNumber() || Double.isNaN(right.getDouble()) || Double.isInfinite(right.getDouble()) || left.isObjectLit()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n\n    if (intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    Node current = left.getFirstChild();\n    Node elem = null;\n    int i = 0;\n    for (; current != null && i < intIndex; i++) {\n        // Check if the child node is an array spread node\n        if (current.isSpread()) {\n            // If so, we need to expand the spread node and add its children\n            // to the array, and skip over the spread node itself\n            Node spreadExpr = current.removeFirstChild();\n            if (spreadExpr.isArrayLit() || spreadExpr.isObjectLit()) {\n                for (Node child = spreadExpr.getFirstChild(); child != null; child = child.getNext()) {\n                    left.addChildBefore(child.detach(), current);\n                }\n            } else {\n                left.addChildBefore(spreadExpr.detach(), current);\n            }\n            // Move the cursor back to the spread node's position\n            current = spreadExpr;\n        } else {\n            elem = current;\n        }\n        current = current.getNext();\n    }\n\n    if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..7a8c0850 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,73 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n     if (isAssignmentTarget(n)) {\n-      return n;\n+        return n;\n     }\n \n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+    if (!right.isNumber() || Double.isNaN(right.getDouble()) || Double.isInfinite(right.getDouble()) || left.isObjectLit()) {\n+        // Sometimes people like to use complex expressions to index into\n+        // arrays, or strings to index into array methods.\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n     }\n \n     double index = right.getDouble();\n     int intIndex = (int) index;\n     if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n     }\n \n     if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n     Node current = left.getFirstChild();\n     Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n+    int i = 0;\n+    for (; current != null && i < intIndex; i++) {\n+        // Check if the child node is an array spread node\n+        if (current.isSpread()) {\n+            // If so, we need to expand the spread node and add its children\n+            // to the array, and skip over the spread node itself\n+            Node spreadExpr = current.removeFirstChild();\n+            if (spreadExpr.isArrayLit() || spreadExpr.isObjectLit()) {\n+                for (Node child = spreadExpr.getFirstChild(); child != null; child = child.getNext()) {\n+                    left.addChildBefore(child.detach(), current);\n+                }\n+            } else {\n+                left.addChildBefore(spreadExpr.detach(), current);\n+            }\n+            // Move the cursor back to the spread node's position\n+            current = spreadExpr;\n+        } else {\n+            elem = current;\n+        }\n+        current = current.getNext();\n     }\n \n     if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n     if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+        elem = NodeUtil.newUndefinedNode(elem);\n     } else {\n-      left.removeChild(elem);\n+        left.removeChild(elem);\n     }\n \n     // Replace the entire GETELEM with the value\n     n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n-  }\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}