{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    if (size == 1) {\n        Object last = elementPairs.get(0);\n        if (last instanceof Separator) {\n            Separator sep = (Separator) last;\n            return new PeriodFormatter(sep, sep);\n        } else {\n            Object comp = elementPairs.get(0);\n            return createFormatter(comp, notPrinter, notParser);\n        }\n    } else if (size >= 2) {\n        Object first = elementPairs.get(0);\n        if (first instanceof Separator) {\n            Separator sep = (Separator) first;\n            PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            return new PeriodFormatter(sep, sep);\n        } else {\n            List<Object> pairs = new ArrayList<>();\n            int i = 0;\n            while (i < size) {\n                Object cur = elementPairs.get(i);\n                if (i == size - 1) {\n                    pairs.add(cur);\n                    i++;\n                } else {\n                    Object next = elementPairs.get(i + 1);\n                    if (cur instanceof PeriodPrinter && next instanceof PeriodParser) {\n                        pairs.add(createComposite(Arrays.asList(cur, next)));\n                        i += 2;\n                    } else if (cur instanceof PeriodParser && next instanceof PeriodPrinter) {\n                        pairs.add(createComposite(Arrays.asList(next, cur)));\n                        i += 2;\n                    } else {\n                        pairs.add(cur);\n                        i++;\n                    }\n                }\n            }\n            return toFormatter(pairs, notPrinter, notParser);\n        }\n    }\n\n    throw new IllegalStateException(\"Invalid elementPairs: \" + elementPairs);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..8bfb3f7d 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,57 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    if (size == 1) {\n+        Object last = elementPairs.get(0);\n+        if (last instanceof Separator) {\n+            Separator sep = (Separator) last;\n+            return new PeriodFormatter(sep, sep);\n+        } else {\n+            Object comp = elementPairs.get(0);\n+            return createFormatter(comp, notPrinter, notParser);\n+        }\n+    } else if (size >= 2) {\n+        Object first = elementPairs.get(0);\n+        if (first instanceof Separator) {\n+            Separator sep = (Separator) first;\n+            PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+            return new PeriodFormatter(sep, sep);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            List<Object> pairs = new ArrayList<>();\n+            int i = 0;\n+            while (i < size) {\n+                Object cur = elementPairs.get(i);\n+                if (i == size - 1) {\n+                    pairs.add(cur);\n+                    i++;\n+                } else {\n+                    Object next = elementPairs.get(i + 1);\n+                    if (cur instanceof PeriodPrinter && next instanceof PeriodParser) {\n+                        pairs.add(createComposite(Arrays.asList(cur, next)));\n+                        i += 2;\n+                    } else if (cur instanceof PeriodParser && next instanceof PeriodPrinter) {\n+                        pairs.add(createComposite(Arrays.asList(next, cur)));\n+                        i += 2;\n+                    } else {\n+                        pairs.add(cur);\n+                        i++;\n+                    }\n+                }\n+            }\n+            return toFormatter(pairs, notPrinter, notParser);\n         }\n     }\n \n+    throw new IllegalStateException(\"Invalid elementPairs: \" + elementPairs);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}