{
    "patch": "    attachLiteralTypes(n);\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (parent.getType() == Token.NAME) {\n          return;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      case Token.LP:\n        Node grandParent = parent.getParent();\n        if (grandParent == null) {\n            return;\n        }\n        switch (grandParent.getType()) {\n            case Token.CALL:\n                handleFunctionInputs(grandParent);\n                break;\n            case Token.ASSIGN:\n            case Token.VAR:\n            case Token.EXPR_RESULT:\n                if (grandParent.getParent().getType() == Token.SCRIPT) {\n                    handleFunctionInputs(parent);\n                }\n                break;\n            default:\n                break;\n        }\n        break;\n      default:\n        break;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e8d5f7d9 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,43 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        if (parent.getType() == Token.NAME) {\n+          return;\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      case Token.LP:\n+        Node grandParent = parent.getParent();\n+        if (grandParent == null) {\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        switch (grandParent.getType()) {\n+            case Token.CALL:\n+                handleFunctionInputs(grandParent);\n+                break;\n+            case Token.ASSIGN:\n+            case Token.VAR:\n+            case Token.EXPR_RESULT:\n+                if (grandParent.getParent().getType() == Token.SCRIPT) {\n+                    handleFunctionInputs(parent);\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+        break;\n+      default:\n+        break;\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}