{
    "patch": "    private static Map<Integer, Integer> memo = new HashMap<>(); // memoization map\n    \n    public static int fib(int n) {\n        if (memo.containsKey(n)) {\n            return memo.get(n);\n        }\n        int result;\n        if (n <= 1) {\n            result = n;\n        } else {\n            result = fib(n - 1) + fib(n - 2);\n        }\n        memo.put(n, result);\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/FIB.java b/src/main/java/humaneval/buggy/FIB.java\nindex fdc9c32..3cd6c57 100644\n--- a/src/main/java/humaneval/buggy/FIB.java\n+++ b/src/main/java/humaneval/buggy/FIB.java\n@@ -10,6 +10,21 @@ package humaneval.buggy;\n \n public class FIB {\n     public static int fib(int n) {\n+    private static Map<Integer, Integer> memo = new HashMap<>(); // memoization map\n+    \n+    public static int fib(int n) {\n+        if (memo.containsKey(n)) {\n+            return memo.get(n);\n+        }\n+        int result;\n+        if (n <= 1) {\n+            result = n;\n+        } else {\n+            result = fib(n - 1) + fib(n - 2);\n+        }\n+        memo.put(n, result);\n+        return result;\n+    }\n         return fib(n - 1) + fib(n - 2);\n     }\n }",
    "result_reason": " /tmp/humaneval-FIB/src/main/java/humaneval/buggy/FIB.java:[13,5] illegal start of expression",
    "test_result": "ERROR"
}