{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // calculate total duration in milliseconds\n    long millis = getMillis() + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR)\n            + (getDays() * DateTimeConstants.MILLIS_PER_DAY)\n            + (getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n\n    // calculate total number of months\n    int totalMonths = getYears() * 12 + getMonths();\n\n    // calculate number of years from months\n    int years = totalMonths / 12;\n    int months = totalMonths % 12;\n\n    // remove years and months from total duration\n    long remainingMillis = new Period(0, 0, 0, years, months, 0, 0, 0, type, ISOChronology.getInstanceUTC())\n            .toDurationFrom(null).getMillis();\n\n    // calculate number of days\n    int daysInRemainingMillis = (int) (remainingMillis / DateTimeConstants.MILLIS_PER_DAY);\n    int days = getDays() + daysInRemainingMillis;\n\n    // remove days from remaining duration\n    remainingMillis -= daysInRemainingMillis * DateTimeConstants.MILLIS_PER_DAY;\n\n    // calculate number of weeks\n    int weeksInRemainingMillis = daysInRemainingMillis / 7;\n    int weeks = getWeeks() + weeksInRemainingMillis;\n\n    // remove weeks from remaining duration\n    remainingMillis -= weeksInRemainingMillis * DateTimeConstants.MILLIS_PER_WEEK;\n\n    // create a new period with the normalized duration\n    return new Period(remainingMillis, type, ISOChronology.getInstanceUTC())\n            .withYears(years)\n            .withMonths(months)\n            .withWeeks(weeks)\n            .withDays(days)\n            .normalizedStandard(type);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..41d64890 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,48 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    // calculate total duration in milliseconds\n+    long millis = getMillis() + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n+            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n+            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR)\n+            + (getDays() * DateTimeConstants.MILLIS_PER_DAY)\n+            + (getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n+\n+    // calculate total number of months\n+    int totalMonths = getYears() * 12 + getMonths();\n+\n+    // calculate number of years from months\n+    int years = totalMonths / 12;\n+    int months = totalMonths % 12;\n+\n+    // remove years and months from total duration\n+    long remainingMillis = new Period(0, 0, 0, years, months, 0, 0, 0, type, ISOChronology.getInstanceUTC())\n+            .toDurationFrom(null).getMillis();\n+\n+    // calculate number of days\n+    int daysInRemainingMillis = (int) (remainingMillis / DateTimeConstants.MILLIS_PER_DAY);\n+    int days = getDays() + daysInRemainingMillis;\n+\n+    // remove days from remaining duration\n+    remainingMillis -= daysInRemainingMillis * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    // calculate number of weeks\n+    int weeksInRemainingMillis = daysInRemainingMillis / 7;\n+    int weeks = getWeeks() + weeksInRemainingMillis;\n+\n+    // remove weeks from remaining duration\n+    remainingMillis -= weeksInRemainingMillis * DateTimeConstants.MILLIS_PER_WEEK;\n+\n+    // create a new period with the normalized duration\n+    return new Period(remainingMillis, type, ISOChronology.getInstanceUTC())\n+            .withYears(years)\n+            .withMonths(months)\n+            .withWeeks(weeks)\n+            .withDays(days)\n+            .normalizedStandard(type);\n+}\n \n }",
    "result_reason": "error: no suitable constructor found for Period(int,int,int,int,int,int,int,int,PeriodType,ISOChronology)",
    "test_result": "ERROR"
}