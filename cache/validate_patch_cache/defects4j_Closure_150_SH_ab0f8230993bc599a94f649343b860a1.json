{
    "patch": "attachLiteralTypes(n);\nswitch (n.getType()) {\n    case Token.FUNCTION:\n        boolean isDeclaration = parent.getType() == Token.EXPR_RESULT ||\n                (!NodeUtil.isFunctionExpression(parent) && parent.getType() != Token.NAME);\n        if (isDeclaration) {\n            defineDeclaredFunction(n, parent);\n        } else {\n            defineVar(n.getFirstChild(), parent);\n        }\n        break;\n    case Token.LP:\n        Node grandParent = parent.getParent();\n        boolean isFunctionCall = grandParent != null && grandParent.getType() == Token.CALL;\n        boolean isTopLevel = parent == scope.getRootNode();\n        if (isFunctionCall || isTopLevel) {\n            handleFunctionInputs(grandParent != null ? grandParent : parent);\n            return;\n        }\n        break;\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    case Token.VAR:\n    case Token.NAME:\n        defineVar(n, parent);\n        break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..507a5790 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,34 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+attachLiteralTypes(n);\n+switch (n.getType()) {\n+    case Token.FUNCTION:\n+        boolean isDeclaration = parent.getType() == Token.EXPR_RESULT ||\n+                (!NodeUtil.isFunctionExpression(parent) && parent.getType() != Token.NAME);\n+        if (isDeclaration) {\n+            defineDeclaredFunction(n, parent);\n+        } else {\n+            defineVar(n.getFirstChild(), parent);\n+        }\n+        break;\n+    case Token.LP:\n+        Node grandParent = parent.getParent();\n+        boolean isFunctionCall = grandParent != null && grandParent.getType() == Token.CALL;\n+        boolean isTopLevel = parent == scope.getRootNode();\n+        if (isFunctionCall || isTopLevel) {\n+            handleFunctionInputs(grandParent != null ? grandParent : parent);\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        break;\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    case Token.VAR:\n+    case Token.NAME:\n+        defineVar(n, parent);\n+        break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}