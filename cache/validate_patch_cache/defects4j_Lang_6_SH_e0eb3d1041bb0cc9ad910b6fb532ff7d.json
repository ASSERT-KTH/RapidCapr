{
    "patch": "                int codePoint = Character.codePointAt(input, pos);\n                int charCount = Character.charCount(codePoint);\n                pos += charCount;\n                if (charCount == 2) {\n                    out.write(\"\\\\u\" + Integer.toHexString(codePoint).toUpperCase(Locale.ENGLISH));\n                } else {\n                    String translated = translate(Character.toString((char) codePoint));\n                    if (translated == null) {\n                        char[] c = Character.toChars(codePoint);\n                        out.write(c);\n                    } else {\n                        if (translated.length() > 1) {\n                            translate(translated, out);\n                        } else {\n                            out.write(translated.charAt(0));\n                        }\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..e000f1fa 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,24 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                int codePoint = Character.codePointAt(input, pos);\n+                int charCount = Character.charCount(codePoint);\n+                pos += charCount;\n+                if (charCount == 2) {\n+                    out.write(\"\\\\u\" + Integer.toHexString(codePoint).toUpperCase(Locale.ENGLISH));\n+                } else {\n+                    String translated = translate(Character.toString((char) codePoint));\n+                    if (translated == null) {\n+                        char[] c = Character.toChars(codePoint);\n+                        out.write(c);\n+                    } else {\n+                        if (translated.length() > 1) {\n+                            translate(translated, out);\n+                        } else {\n+                            out.write(translated.charAt(0));\n+                        }\n+                    }\n+                }\n             }\n         }\n     }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}