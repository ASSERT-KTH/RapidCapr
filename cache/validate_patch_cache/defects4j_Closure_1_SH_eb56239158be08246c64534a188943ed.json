{
    "patch": "    // Collect all referenced parameters in a set.\n    Set<Var> referencedParams = new HashSet<>();\n    NodeUtil.visitPreOrder(function.getBody(), new NodeVisitor() {\n      @Override\n      public void visit(Node n) {\n        if (n.isName() && n.getParent().isParamList()) {\n          Var var = fnScope.getVar(n.getString());\n          referencedParams.add(var);\n        }\n      }\n    });\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referencedParams.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referencedParams);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b63193b8 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,32 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Collect all referenced parameters in a set.\n+    Set<Var> referencedParams = new HashSet<>();\n+    NodeUtil.visitPreOrder(function.getBody(), new NodeVisitor() {\n+      @Override\n+      public void visit(Node n) {\n+        if (n.isName() && n.getParent().isParamList()) {\n+          Var var = fnScope.getVar(n.getString());\n+          referencedParams.add(var);\n+        }\n+      }\n+    });\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referencedParams.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referencedParams);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}