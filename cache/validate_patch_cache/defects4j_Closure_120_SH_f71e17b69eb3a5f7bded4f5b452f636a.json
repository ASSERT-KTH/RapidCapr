{
    "patch": "// Functions share a block with their declaration, which can be an assignment. To avoid thinking that\n// the variable is assigned in these cases, skip this block and continue checking the parent block.\nif (block.getFirstChild() instanceof Function) {\n  continue;\n} else if (block.isExceptionHandler()) {\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..02ce9641 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+// Functions share a block with their declaration, which can be an assignment. To avoid thinking that\n+// the variable is assigned in these cases, skip this block and continue checking the parent block.\n+if (block.getFirstChild() instanceof Function) {\n+  continue;\n+} else if (block.isExceptionHandler()) {\n+  return false;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}