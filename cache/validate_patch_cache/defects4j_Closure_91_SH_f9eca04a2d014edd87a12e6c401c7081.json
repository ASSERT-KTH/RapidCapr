{
    "patch": "      if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP) {\n        Node objectRef = lhs.getFirstChild();\n        String objectName = objectRef.getQualifiedName();\n        if (objectName != null && objectName.equals(\"prototype\")) {\n          return false;\n        }\n        while (objectRef.getType() == Token.GETPROP) {\n          objectRef = objectRef.getFirstChild();\n        }\n        if (objectRef.getType() == Token.NAME &&\n            NodeUtil.getDeclaredTypeExpression(objectRef.getQualifiedName(), n) == null) {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..a504caae 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,20 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP) {\n+        Node objectRef = lhs.getFirstChild();\n+        String objectName = objectRef.getQualifiedName();\n+        if (objectName != null && objectName.equals(\"prototype\")) {\n+          return false;\n+        }\n+        while (objectRef.getType() == Token.GETPROP) {\n+          objectRef = objectRef.getFirstChild();\n+        }\n+        if (objectRef.getType() == Token.NAME &&\n+            NodeUtil.getDeclaredTypeExpression(objectRef.getQualifiedName(), n) == null) {\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}