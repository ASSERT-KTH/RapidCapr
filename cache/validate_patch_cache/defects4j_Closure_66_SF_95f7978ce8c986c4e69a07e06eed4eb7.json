{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    double totalCount = 0.0;\n    double typedCount = 0.0;\n\n    try {\n        JSONObject jsonObj = new JSONObject(jsonStr);\n        JSONArray arr = jsonObj.getJSONArray(\"items\");\n\n        for (int i = 0; i < arr.length(); i++) {\n            JSONObject obj = arr.getJSONObject(i);\n\n            if (obj.has(\"is_typing\")) {\n                boolean isTyping = obj.getBoolean(\"is_typing\");\n\n                if (isTyping) {\n                    typedCount++;\n                }\n            }\n\n            totalCount++;\n        }\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n\n    if (totalCount > 0.0) {\n        return typedCount/totalCount * 100.0;\n    }\n\n    return 0.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..2977be8c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,37 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    double totalCount = 0.0;\n+    double typedCount = 0.0;\n+\n+    try {\n+        JSONObject jsonObj = new JSONObject(jsonStr);\n+        JSONArray arr = jsonObj.getJSONArray(\"items\");\n+\n+        for (int i = 0; i < arr.length(); i++) {\n+            JSONObject obj = arr.getJSONObject(i);\n+\n+            if (obj.has(\"is_typing\")) {\n+                boolean isTyping = obj.getBoolean(\"is_typing\");\n+\n+                if (isTyping) {\n+                    typedCount++;\n+                }\n+            }\n+\n+            totalCount++;\n+        }\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+\n+    if (totalCount > 0.0) {\n+        return typedCount/totalCount * 100.0;\n+    }\n+\n+    return 0.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}