{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    try {\n        jsdocParser.parseTypeExpression();\n    } catch (TypeParseError e) {\n        // Handling type parse errors\n        if (e.getTypeName().equals(\"T\")) {\n            return \"\";\n        }\n    }\n    return result.trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..e3c27d46 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,18 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    String result = stream.getRemainingJSDocLine();\n+    try {\n+        jsdocParser.parseTypeExpression();\n+    } catch (TypeParseError e) {\n+        // Handling type parse errors\n+        if (e.getTypeName().equals(\"T\")) {\n+            return \"\";\n+        }\n+    }\n+    return result.trim();\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}