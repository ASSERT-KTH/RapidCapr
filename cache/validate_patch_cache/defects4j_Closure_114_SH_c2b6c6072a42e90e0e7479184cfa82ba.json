{
    "patch": "        } else if (parent.isCall()) {\n          // The rhs of the assignment is used by the context (caller), so it's not\n          // associated with the lhs of the assignment.\n          // FYI: this fixes only the specific case where the assignment is not nested\n          // within another subexpression of the caller, but it should handle most cases.\n          // For example, given the code \"var f = function() { return function() { x = 1; } }();\",\n          // letting the \"x = 1\" node associate with the RHS would be correct because it is getting\n          // returned to the variable 'f' and is not explicitly used as part of the calling context.\n          recordDepScope(recordNode, ns);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..ff19733f 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,16 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+        } else if (parent.isCall()) {\n+          // The rhs of the assignment is used by the context (caller), so it's not\n+          // associated with the lhs of the assignment.\n+          // FYI: this fixes only the specific case where the assignment is not nested\n+          // within another subexpression of the caller, but it should handle most cases.\n+          // For example, given the code \"var f = function() { return function() { x = 1; } }();\",\n+          // letting the \"x = 1\" node associate with the RHS would be correct because it is getting\n+          // returned to the variable 'f' and is not explicitly used as part of the calling context.\n+          recordDepScope(recordNode, ns);\n+        }\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}