{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n\n    final String[] parts = str.split(\"_\");\n    final int len = parts.length;\n\n    if (len > 3 || !isValidCode(parts[0])) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    final String language = parts[0];\n    final String country = len > 1 && isValidCode(parts[1]) ? parts[1] : \"\";\n    final String variant = len > 2 && isValidVariant(parts) ? parts[2] : \"\";\n\n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isValidCode(final String code) {\n    final int len = code.length();\n\n    if (len != 2 && len != 3) {\n        return false;\n    }\n\n    for (int i = 0; i < len; i++) {\n        final char ch = code.charAt(i);\n\n        if (!Character.isLetter(ch)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nprivate static boolean isValidVariant(String[] parts) {\n    if (parts.length == 3 && !parts[2].isEmpty()) {\n        final int len = parts[2].length();\n\n        if (len == 1) {\n            return Character.isDigit(parts[2].charAt(0));\n        }\n\n        for (int i = 0; i < len; i++) {\n            final char ch = parts[2].charAt(i);\n\n            if (!(Character.isLetterOrDigit(ch) || ch == '-' || ch == '_')) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..5c1cf8a0 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,65 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+\n+    final String[] parts = str.split(\"_\");\n+    final int len = parts.length;\n+\n+    if (len > 3 || !isValidCode(parts[0])) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    final String language = parts[0];\n+    final String country = len > 1 && isValidCode(parts[1]) ? parts[1] : \"\";\n+    final String variant = len > 2 && isValidVariant(parts) ? parts[2] : \"\";\n+\n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isValidCode(final String code) {\n+    final int len = code.length();\n+\n+    if (len != 2 && len != 3) {\n+        return false;\n+    }\n+\n+    for (int i = 0; i < len; i++) {\n+        final char ch = code.charAt(i);\n+\n+        if (!Character.isLetter(ch)) {\n+            return false;\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    return true;\n+}\n+\n+private static boolean isValidVariant(String[] parts) {\n+    if (parts.length == 3 && !parts[2].isEmpty()) {\n+        final int len = parts[2].length();\n+\n+        if (len == 1) {\n+            return Character.isDigit(parts[2].charAt(0));\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+\n+        for (int i = 0; i < len; i++) {\n+            final char ch = parts[2].charAt(i);\n+\n+            if (!(Character.isLetterOrDigit(ch) || ch == '-' || ch == '_')) {\n+                return false;\n             }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        }\n+\n+        return true;\n     }\n \n+    return false;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "junit.framework.AssertionFailedError: expected:<[P]> but was:<[]>",
    "test_result": "FAIL"
}