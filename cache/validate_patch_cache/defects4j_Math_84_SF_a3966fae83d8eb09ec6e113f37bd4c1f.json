{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n                final RealPointValuePair[] expandedSimplex = simplex;\n                if (comparator.compare(expanded, reflected) < 0) {\n                    simplex = expandedSimplex;\n                } else {\n                    simplex = copy(original);\n                    simplex[0] = reflected;\n                }\n\n                return;\n            }\n\n            final int worst = getWorst(original);\n\n            final RealPointValuePair contracted;\n            final RealPointValuePair[] contractedSimplex;\n            if (comparator.compare(reflected, original[worst]) > 0) {\n                contracted = evaluateNewSimplex(original, -gamma, comparator);\n                contractedSimplex = simplex;\n                if (comparator.compare(contracted, original[worst]) < 0) {\n                    simplex = contractedSimplex != null && contracted.getPoint() != null ? contractedSimplex : original;\n                    return;\n                }\n            } else {\n                contracted = evaluateNewSimplex(original, sigma, comparator);\n                contractedSimplex = simplex;\n                if (comparator.compare(contracted, reflected) < 0) {\n                    simplex = contractedSimplex != null && contracted.getPoint() != null ? contractedSimplex : original;\n                    return;\n                }\n            }\n\n            simplex = copy(original);\n            for (int i = 1; i < simplex.length; i++) {\n                final RealPointValuePair pair = simplex[i];\n                final RealPointValuePair updated = new RealPointValuePair(\n                        best.getPoint().add(pair.getPoint().subtract(best.getPoint()).mapMultiply(sigma)),\n                        Double.NaN,\n                        false);\n                simplex[i] = updated;\n            }\n            evaluateSimplex(simplex, comparator);\n        }\n    }\n\n    protected RealPointValuePair[] copy(final RealPointValuePair[] simplexB) {\n        final int n = simplexB.length;\n        final RealPointValuePair[] simplexCopy = new RealPointValuePair[n];\n        for (int i = 0; i < n; ++i) {\n            simplexCopy[i] = simplexB[i].copy();\n        }\n        return simplexCopy;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..010d8bcce 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -65,37 +65,64 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n             incrementIterationsCounter();\n \n-            // save the original vertex\n             final RealPointValuePair[] original = simplex;\n             final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n+                final RealPointValuePair[] expandedSimplex = simplex;\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    simplex = expandedSimplex;\n+                } else {\n+                    simplex = copy(original);\n+                    simplex[0] = reflected;\n                 }\n \n                 return;\n-\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            final int worst = getWorst(original);\n \n-            // check convergence\n-                return;\n+            final RealPointValuePair contracted;\n+            final RealPointValuePair[] contractedSimplex;\n+            if (comparator.compare(reflected, original[worst]) > 0) {\n+                contracted = evaluateNewSimplex(original, -gamma, comparator);\n+                contractedSimplex = simplex;\n+                if (comparator.compare(contracted, original[worst]) < 0) {\n+                    simplex = contractedSimplex != null && contracted.getPoint() != null ? contractedSimplex : original;\n+                    return;\n+                }\n+            } else {\n+                contracted = evaluateNewSimplex(original, sigma, comparator);\n+                contractedSimplex = simplex;\n+                if (comparator.compare(contracted, reflected) < 0) {\n+                    simplex = contractedSimplex != null && contracted.getPoint() != null ? contractedSimplex : original;\n+                    return;\n+                }\n             }\n \n+            simplex = copy(original);\n+            for (int i = 1; i < simplex.length; i++) {\n+                final RealPointValuePair pair = simplex[i];\n+                final RealPointValuePair updated = new RealPointValuePair(\n+                        best.getPoint().add(pair.getPoint().subtract(best.getPoint()).mapMultiply(sigma)),\n+                        Double.NaN,\n+                        false);\n+                simplex[i] = updated;\n+            }\n+            evaluateSimplex(simplex, comparator);\n         }\n+    }\n \n+    protected RealPointValuePair[] copy(final RealPointValuePair[] simplexB) {\n+        final int n = simplexB.length;\n+        final RealPointValuePair[] simplexCopy = new RealPointValuePair[n];\n+        for (int i = 0; i < n; ++i) {\n+            simplexCopy[i] = simplexB[i].copy();\n+        }\n+        return simplexCopy;\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}