{
    "patch": "public String getprop(String key) {\n    try {\n        ProcessBuilder builder = new ProcessBuilder(\"/system/bin/getprop\", key);\n        builder.redirectErrorStream(true);\n        Process process = builder.start();\n        InputStream input = process.getInputStream();\n        byte[] buffer = new byte[4096];\n        int len = input.read(buffer);\n        input.close();\n        process.destroy();\n        if (len > 0) {\n            return new String(buffer, 0, len, \"UTF-8\").replace(\"\\n\", \"\");\n        } else {\n            return null;\n        }\n    } catch (IOException e) {\n        return null;\n    }\n}\n\npublic void testGetprop4() {\n    String key = \"ro.build.version.sdk\";\n    String value = getprop(key);\n    assertEquals(Integer.decode(value).intValue(), android.os.Build.VERSION.SDK_INT);\n    assertNotNull(\"expected a value\", value);\n\n    // Check for warnings in system log\n    String[] buffer = new String[4096];\n    try {\n        Process process = Runtime.getRuntime().exec(\"logcat -d\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n\n        int i = 0;\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(\"W/\" + key)) {\n                buffer[i++] = line;\n            }\n        }\n        reader.close();\n        process.destroy();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    String[] warnings = Arrays.copyOf(buffer, buffer.length);\n    Arrays.sort(warnings);\n\n    assertTrue(\"expected a warning\", warnings.length > 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..671d29bd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,56 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String key) {\n+    try {\n+        ProcessBuilder builder = new ProcessBuilder(\"/system/bin/getprop\", key);\n+        builder.redirectErrorStream(true);\n+        Process process = builder.start();\n+        InputStream input = process.getInputStream();\n+        byte[] buffer = new byte[4096];\n+        int len = input.read(buffer);\n+        input.close();\n+        process.destroy();\n+        if (len > 0) {\n+            return new String(buffer, 0, len, \"UTF-8\").replace(\"\\n\", \"\");\n+        } else {\n+            return null;\n+        }\n+    } catch (IOException e) {\n+        return null;\n+    }\n+}\n+\n+public void testGetprop4() {\n+    String key = \"ro.build.version.sdk\";\n+    String value = getprop(key);\n+    assertEquals(Integer.decode(value).intValue(), android.os.Build.VERSION.SDK_INT);\n+    assertNotNull(\"expected a value\", value);\n+\n+    // Check for warnings in system log\n+    String[] buffer = new String[4096];\n+    try {\n+        Process process = Runtime.getRuntime().exec(\"logcat -d\");\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+\n+        int i = 0;\n+        String line = null;\n+        while ((line = reader.readLine()) != null) {\n+            if (line.contains(\"W/\" + key)) {\n+                buffer[i++] = line;\n+            }\n+        }\n+        reader.close();\n+        process.destroy();\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+\n+    String[] warnings = Arrays.copyOf(buffer, buffer.length);\n+    Arrays.sort(warnings);\n+\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}