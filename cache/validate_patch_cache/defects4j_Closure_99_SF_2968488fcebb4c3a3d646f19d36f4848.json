{
    "patch": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.isFunction()) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them.\n      // e.g., var a = function() {}; // or function a() {} // or a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.isAssign()) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      if (n == lhs) { // Always traverse the left side of the assignment.\n        if (TraversalUtil.isAssignmentLhs(lhs)) {\n          t.reportCodeChange();\n          NodeTraversal.traverse(t, rhs, parent);\n          t.reportCodeChange();\n        }\n        return false;\n      } else { // Only traverse the right side if it's not an assignment to a prototype property or subproperty.\n        if (TraversalUtil.mayHaveSideEffects(lhs)) {\n          return false;\n        } else if (TraversalUtil.isPrototypeProperty(lhs)\n            || TraversalUtil.isPrototypeSubproperty(lhs, n)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..f74dedbf 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -83,10 +83,10 @@ final class CheckGlobalThis implements Callback {\n    */\n   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n \n-    if (n.getType() == Token.FUNCTION) {\n+    if (n.isFunction()) {\n       // Don't traverse functions that are constructors or have the @this\n       // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n       if (jsDoc != null &&\n           (jsDoc.isConstructor() ||\n            jsDoc.hasThisType() ||\n@@ -95,10 +95,8 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n+      // be able to have a @this annotation associated with them.\n+      // e.g., var a = function() {}; // or function a() {} // or a.x = function() {};\n       int pType = parent.getType();\n       if (!(pType == Token.BLOCK ||\n             pType == Token.SCRIPT ||\n@@ -108,27 +106,23 @@ final class CheckGlobalThis implements Callback {\n       }\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n+    if (parent != null && parent.isAssign()) {\n       Node lhs = parent.getFirstChild();\n       Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+      if (n == lhs) { // Always traverse the left side of the assignment.\n+        if (TraversalUtil.isAssignmentLhs(lhs)) {\n+          t.reportCodeChange();\n+          NodeTraversal.traverse(t, rhs, parent);\n+          t.reportCodeChange();\n+        }\n+        return false;\n+      } else { // Only traverse the right side if it's not an assignment to a prototype property or subproperty.\n+        if (TraversalUtil.mayHaveSideEffects(lhs)) {\n+          return false;\n+        } else if (TraversalUtil.isPrototypeProperty(lhs)\n+            || TraversalUtil.isPrototypeSubproperty(lhs, n)) {\n+          return false;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}