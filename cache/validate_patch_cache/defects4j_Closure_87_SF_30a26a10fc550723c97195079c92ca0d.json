{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n        boolean hasValidChild = false;\n        for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n            if (canBeFolded(child)) {\n                if (NodeUtil.isExpressionNode(child)) {\n                    return true;\n                } else {\n                    hasValidChild = true;\n                }\n            }\n        }\n\n        // If there is only one child in the block, and that child is an EXPR_VOID node\n        if (!hasValidChild && n.hasOneChild() && n.getFirstChild().getType() == Token.EXPR_VOID) {\n            Node grandChild = n.getFirstChild().getFirstChild();\n            return NodeUtil.isExpressionNode(grandChild);\n        }\n    }\n    return false;\n}\n\nprivate boolean canBeFolded(Node n) {\n    return n.getType() != Token.BLOCK &&\n           n.getType() != Token.LABEL &&\n           n.getType() != Token.CASE &&\n           n.getType() != Token.DEFAULT_CASE &&\n           n.getType() != Token.TRY &&\n           n.getType() != Token.CATCH &&\n           n.getType() != Token.FINALLY &&\n           n.getType() != Token.REGEXP &&\n           n.getType() != Token.EXPR_VOID; // prevent folder from folding void functions\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..25a77919 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,39 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n+private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n+        boolean hasValidChild = false;\n+        for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+            if (canBeFolded(child)) {\n+                if (NodeUtil.isExpressionNode(child)) {\n+                    return true;\n+                } else {\n+                    hasValidChild = true;\n+                }\n+            }\n+        }\n \n+        // If there is only one child in the block, and that child is an EXPR_VOID node\n+        if (!hasValidChild && n.hasOneChild() && n.getFirstChild().getType() == Token.EXPR_VOID) {\n+            Node grandChild = n.getFirstChild().getFirstChild();\n+            return NodeUtil.isExpressionNode(grandChild);\n+        }\n+    }\n     return false;\n-  }\n+}\n+\n+private boolean canBeFolded(Node n) {\n+    return n.getType() != Token.BLOCK &&\n+           n.getType() != Token.LABEL &&\n+           n.getType() != Token.CASE &&\n+           n.getType() != Token.DEFAULT_CASE &&\n+           n.getType() != Token.TRY &&\n+           n.getType() != Token.CATCH &&\n+           n.getType() != Token.FINALLY &&\n+           n.getType() != Token.REGEXP &&\n+           n.getType() != Token.EXPR_VOID; // prevent folder from folding void functions\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}