{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final double epsilon = 1e-10;\n\n    if (n > 1000) { // large matrix size, use specialized algorithm\n        return specializedSquareRoot(m, epsilon);\n    } else { // smaller matrix size, use EigenDecomposition\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}\n\nprivate RealMatrix specializedSquareRoot(RealMatrix m, double epsilon) {\n    final int n = m.getRowDimension();\n    RealMatrix d = MatrixUtils.createRealMatrix(n, n);\n    RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n    RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n    RealMatrix sqrtInv = MatrixUtils.createRealMatrix(n, n);\n\n    // initialize diagonal and super-diagonal matrices\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i == j) {\n                d.setEntry(i, j, m.getEntry(i, j));\n                s.setEntry(i, j, 0);\n            } else {\n                s.setEntry(i, j, m.getEntry(i, j));\n            }\n        }\n    }\n\n    // compute square root of diagonal matrix\n    for (int i = 0; i < n; i++) {\n        double dd = d.getEntry(i, i);\n        if (dd < -epsilon) {\n            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n        } else if (dd < epsilon) {\n            d.setEntry(i, i, epsilon);\n        }\n        sqrt.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n        sqrtInv.setEntry(i, i, 1.0 / sqrt.getEntry(i, i));\n    }\n\n    // compute square root of matrix\n    for (int k = 0; k < n; k++) {\n        sqrtInv.setEntry(k, k, 0.0);\n        for (int i = k + 1; i < n; i++) {\n            double factor = s.getEntry(i, k) / sqrt.getEntry(k, k);\n            d.setEntry(i, i, d.getEntry(i, i) - factor * factor);\n            for (int j = k + 1; j < n; j++) {\n                s.setEntry(i, j, s.getEntry(i, j) - factor * s.getEntry(k, j));\n            }\n        }\n        sqrt.setEntry(k, k, Math.sqrt(d.getEntry(k, k)));\n        sqrtInv.setEntry(k, k, 1.0 / sqrt.getEntry(k, k));\n        for (int i = k + 1; i < n; i++) {\n            sqrt.setEntry(i, k, 0.0);\n            sqrtInv.setEntry(i, k, 0.0);\n        }\n    }\n\n    // compute final square root\n    RealMatrix result = sqrt.multiply(sqrtInv);\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..cb4fe627c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,69 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final double epsilon = 1e-10;\n+\n+    if (n > 1000) { // large matrix size, use specialized algorithm\n+        return specializedSquareRoot(m, epsilon);\n+    } else { // smaller matrix size, use EigenDecomposition\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n }\n+\n+private RealMatrix specializedSquareRoot(RealMatrix m, double epsilon) {\n+    final int n = m.getRowDimension();\n+    RealMatrix d = MatrixUtils.createRealMatrix(n, n);\n+    RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n+    RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n+    RealMatrix sqrtInv = MatrixUtils.createRealMatrix(n, n);\n+\n+    // initialize diagonal and super-diagonal matrices\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            if (i == j) {\n+                d.setEntry(i, j, m.getEntry(i, j));\n+                s.setEntry(i, j, 0);\n+            } else {\n+                s.setEntry(i, j, m.getEntry(i, j));\n+            }\n+        }\n+    }\n+\n+    // compute square root of diagonal matrix\n+    for (int i = 0; i < n; i++) {\n+        double dd = d.getEntry(i, i);\n+        if (dd < -epsilon) {\n+            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n+        } else if (dd < epsilon) {\n+            d.setEntry(i, i, epsilon);\n+        }\n+        sqrt.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n+        sqrtInv.setEntry(i, i, 1.0 / sqrt.getEntry(i, i));\n+    }\n+\n+    // compute square root of matrix\n+    for (int k = 0; k < n; k++) {\n+        sqrtInv.setEntry(k, k, 0.0);\n+        for (int i = k + 1; i < n; i++) {\n+            double factor = s.getEntry(i, k) / sqrt.getEntry(k, k);\n+            d.setEntry(i, i, d.getEntry(i, i) - factor * factor);\n+            for (int j = k + 1; j < n; j++) {\n+                s.setEntry(i, j, s.getEntry(i, j) - factor * s.getEntry(k, j));\n+            }\n+        }\n+        sqrt.setEntry(k, k, Math.sqrt(d.getEntry(k, k)));\n+        sqrtInv.setEntry(k, k, 1.0 / sqrt.getEntry(k, k));\n+        for (int i = k + 1; i < n; i++) {\n+            sqrt.setEntry(i, k, 0.0);\n+            sqrtInv.setEntry(i, k, 0.0);\n+        }\n+    }\n+\n+    // compute final square root\n+    RealMatrix result = sqrt.multiply(sqrtInv);\n+    return result;\n+}\n+}",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}