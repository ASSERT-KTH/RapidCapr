{
    "patch": "            // if LHS has side effects, don't proceed [since the optimization\n            // evaluates LHS before cond]\n            // NOTE - there are some circumstances where we can\n            // proceed even if there are side effects...\n            if (!NodeUtil.mayEffectMutableState(lhs)) { // This line was missing",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..50b34853 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,11 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+            // if LHS has side effects, don't proceed [since the optimization\n+            // evaluates LHS before cond]\n+            // NOTE - there are some circumstances where we can\n+            // proceed even if there are side effects...\n+            if (!NodeUtil.mayEffectMutableState(lhs)) { // This line was missing\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}