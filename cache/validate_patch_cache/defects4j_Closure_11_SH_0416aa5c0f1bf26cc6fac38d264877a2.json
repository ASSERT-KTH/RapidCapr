{
    "patch": "if (nameNode.isName()) {\n    String nodeName = nameNode.getString();\n    if (n.getJSType() != null && parent.isAssign()) {\n        if (n.getJSType().isFunctionType()) {\n            warnings.add(JSError.make(n, REASSIGN_FUNCTION_TYPE, nodeName));\n        } else if (n.getJSType().isEnumType()) {\n            warnings.add(JSError.make(n, TypeValidator.INVALID_REASSIGN_ENUM_TYPE, nodeName));\n        } else if (n.getJSType().isStructuralInterface() || n.getJSType().isNominalConstructor()) {\n            warnings.add(JSError.make(n, INVALID_REASSIGN_TYPE, nodeName, n.getJSType().toString()));\n        } else if (n.getJSType().isObjectLiteral()) {\n            if (!argIsObjectLiteralValue(n.getFirstChild().getNext(), n.getJSType(), registry)) {\n                warnings.add(JSError.make(n, INVALID_REASSIGN_TYPE, nodeName, n.getJSType().toString()));\n            }\n        } else {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}