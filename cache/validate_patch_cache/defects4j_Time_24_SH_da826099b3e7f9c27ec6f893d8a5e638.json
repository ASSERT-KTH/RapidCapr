{
    "patch": "        for (int i = 0; i < count; i++) {\n            SavedField save = savedFields[i];\n            DurationFieldType fieldType = save.iField.getType();\n            try {\n                if (resetFields || !save.isSaved()) {\n                    millis = save.set(millis, resetFields);\n                    if (i <= 0 || fieldType != DurationFieldType.weekyears() || iChrono.weekyear().get(millis) == save.iValue) {\n                        save.setSaved(true);\n                    }\n                    continue;\n                }\n                boolean continueLoop = true;\n                while (continueLoop) {\n                    long candidateMillis;\n                    try {\n                        candidateMillis = save.set(millis, resetFields);\n                    } catch (IllegalFieldValueException e) {\n                        if (i == 0) {\n                            throw e;\n                        }\n                        while (--i >= 0) {\n                            SavedField prevSave = savedFields[i];\n                            if (prevSave.isSaved()) {\n                                prevSave.restore();\n                                millis = iChrono.set(prevSave.getField(), millis, prevSave.iValue);\n                            } else {\n                                i++;\n                                break;\n                            }\n                        }\n                        continueLoop = false;\n                        continue;\n                    }\n                    continueLoop = false;\n                    if (i <= 0 || fieldType != DurationFieldType.weekyears() || iChrono.weekyear().get(candidateMillis) == save.iValue) {\n                        save.setSaved(true);\n                        millis = candidateMillis;\n                    }\n                }\n            } catch (RuntimeException e) {\n                if (text != null) {\n                    throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\"\", e);\n                }\n                throw e;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..7c114f86 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,52 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            SavedField save = savedFields[i];\n+            DurationFieldType fieldType = save.iField.getType();\n+            try {\n+                if (resetFields || !save.isSaved()) {\n+                    millis = save.set(millis, resetFields);\n+                    if (i <= 0 || fieldType != DurationFieldType.weekyears() || iChrono.weekyear().get(millis) == save.iValue) {\n+                        save.setSaved(true);\n+                    }\n+                    continue;\n+                }\n+                boolean continueLoop = true;\n+                while (continueLoop) {\n+                    long candidateMillis;\n+                    try {\n+                        candidateMillis = save.set(millis, resetFields);\n+                    } catch (IllegalFieldValueException e) {\n+                        if (i == 0) {\n+                            throw e;\n+                        }\n+                        while (--i >= 0) {\n+                            SavedField prevSave = savedFields[i];\n+                            if (prevSave.isSaved()) {\n+                                prevSave.restore();\n+                                millis = iChrono.set(prevSave.getField(), millis, prevSave.iValue);\n+                            } else {\n+                                i++;\n+                                break;\n+                            }\n+                        }\n+                        continueLoop = false;\n+                        continue;\n+                    }\n+                    continueLoop = false;\n+                    if (i <= 0 || fieldType != DurationFieldType.weekyears() || iChrono.weekyear().get(candidateMillis) == save.iValue) {\n+                        save.setSaved(true);\n+                        millis = candidateMillis;\n+                    }\n+                }\n+            } catch (RuntimeException e) {\n+                if (text != null) {\n+                    throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\"\", e);\n+                }\n+                throw e;\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}