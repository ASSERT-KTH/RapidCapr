{
    "patch": "import com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.jscomp.Scope;\nimport com.google.javascript.jscomp.Var;\nimport com.google.javascript.rhino.Node;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n...\n\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Strip unreferenced args off the end of the function declaration.\n    if(fnScope.getRootNode().isFunction()) {\n        Node function = fnScope.getRootNode();\n\n        if(NodeUtil.isGetOrSetKey(function.getParent())) {\n            // The parameters object literal setters can not be removed.\n            return;\n        }\n\n        Node argList = function.getFirstChild().getNext();\n        boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n        if(!modifyCallers) {\n            Node lastArg;\n            while((lastArg = argList.getLastChild()) != null) {\n                if(!lastArg.isDefaultValue()) {\n                    Var var = fnScope.getVar(lastArg.getString());\n\n                    if(var == null || referenced.contains(var)) {\n                        break;\n                    }\n\n                    argList.removeChild(lastArg);\n\n                    reportCodeChange();\n                } else {\n                    break;\n                }\n            }\n        } else {\n            callSiteOptimizer.optimize(fnScope, referenced);\n        }\n    }\n}\n\n// Run in callSiteMotion mode. If false, remove declarations for unreferenced variables.\n// We don't remove declarations in callSiteMotion mode because the variables might still be referenced\n// in the caller, but we know that in callSiteMotion mode, arguments might be unreferenced in the function but\n// referenced in the callers so those cannot be removed.\npublic static void removeUnusedFunctionArgs(\n        AbstractCompiler compiler, Node externsRoot, Node jsRoot, boolean modifyCallSites) {\n    Set<Var> referenced = new HashSet<>();\n\n    // Determine which variables are referenced.\n    SimpleDefinitionFinder.DefinitionCallback refCallback =\n            def -> {\n                if(def.getNode() != null) {\n                    referenced.add(def.getVar());\n                }\n            };\n    SimpleDefinitionFinder fnDefsFinder = new SimpleDefinitionFinder(refCallback, true);\n\n    NodeTraversal.traverse(compiler, jsRoot, fnDefsFinder);\n\n    RemoveUnusedFunctionArgs remover = new RemoveUnusedFunctionArgs(compiler, referenced, modifyCallSites);\n    NodeTraversal.traverse(compiler, jsRoot, remover);\n\n    remover.removeUnreferencedFunctionArgs(compiler.getTopScope());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a47bc334 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,76 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n+import com.google.javascript.jscomp.NodeUtil;\n+import com.google.javascript.jscomp.Scope;\n+import com.google.javascript.jscomp.Var;\n+import com.google.javascript.rhino.Node;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+...\n+\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    // Strip unreferenced args off the end of the function declaration.\n+    if(fnScope.getRootNode().isFunction()) {\n+        Node function = fnScope.getRootNode();\n+\n+        if(NodeUtil.isGetOrSetKey(function.getParent())) {\n+            // The parameters object literal setters can not be removed.\n+            return;\n+        }\n+\n+        Node argList = function.getFirstChild().getNext();\n+        boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+        if(!modifyCallers) {\n+            Node lastArg;\n+            while((lastArg = argList.getLastChild()) != null) {\n+                if(!lastArg.isDefaultValue()) {\n+                    Var var = fnScope.getVar(lastArg.getString());\n+\n+                    if(var == null || referenced.contains(var)) {\n+                        break;\n+                    }\n+\n+                    argList.removeChild(lastArg);\n+\n+                    reportCodeChange();\n+                } else {\n+                    break;\n+                }\n+            }\n         } else {\n-          break;\n+            callSiteOptimizer.optimize(fnScope, referenced);\n         }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+}\n+\n+// Run in callSiteMotion mode. If false, remove declarations for unreferenced variables.\n+// We don't remove declarations in callSiteMotion mode because the variables might still be referenced\n+// in the caller, but we know that in callSiteMotion mode, arguments might be unreferenced in the function but\n+// referenced in the callers so those cannot be removed.\n+public static void removeUnusedFunctionArgs(\n+        AbstractCompiler compiler, Node externsRoot, Node jsRoot, boolean modifyCallSites) {\n+    Set<Var> referenced = new HashSet<>();\n+\n+    // Determine which variables are referenced.\n+    SimpleDefinitionFinder.DefinitionCallback refCallback =\n+            def -> {\n+                if(def.getNode() != null) {\n+                    referenced.add(def.getVar());\n+                }\n+            };\n+    SimpleDefinitionFinder fnDefsFinder = new SimpleDefinitionFinder(refCallback, true);\n+\n+    NodeTraversal.traverse(compiler, jsRoot, fnDefsFinder);\n+\n+    RemoveUnusedFunctionArgs remover = new RemoveUnusedFunctionArgs(compiler, referenced, modifyCallSites);\n+    NodeTraversal.traverse(compiler, jsRoot, remover);\n+\n+    remover.removeUnreferencedFunctionArgs(compiler.getTopScope());\n+}\n \n \n   /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}