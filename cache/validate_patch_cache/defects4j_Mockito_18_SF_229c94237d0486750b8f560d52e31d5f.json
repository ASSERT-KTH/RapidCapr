{
    "patch": "public static Map<Integer, Integer> findPairs(Integer[] arr, Integer n) {\n    Map<Integer, Integer> pairs = new HashMap<>();\n    Set<Integer> set = new HashSet<>(Arrays.asList(arr));\n    for (int i = 0; i < arr.length; i++) {\n        int complement = n - arr[i];\n        if (set.contains(complement) && !pairs.containsKey(complement) && !pairs.containsValue(complement)) {\n            pairs.put(arr[i], complement);\n        }\n    }\n    return pairs;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..23f83d8df 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,17 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<Integer, Integer> findPairs(Integer[] arr, Integer n) {\n+    Map<Integer, Integer> pairs = new HashMap<>();\n+    Set<Integer> set = new HashSet<>(Arrays.asList(arr));\n+    for (int i = 0; i < arr.length; i++) {\n+        int complement = n - arr[i];\n+        if (set.contains(complement) && !pairs.containsKey(complement) && !pairs.containsValue(complement)) {\n+            pairs.put(arr[i], complement);\n+        }\n+    }\n+    return pairs;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}