{
    "patch": "import java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.Properties;\n\npublic class Config {\n\n    /**\n     * Singleton instance holds the Properties object\n     */\n    private static Config instance = null;\n    private static Properties props       = null;\n    private static String     CONFIG_FILE = \"config.properties\";\n\n    /**\n     * Constructor loads properties from disk\n     */\n    private Config() throws IOException {\n\n        // Load properties from disk\n        props = new Properties();\n        try {\n            props.load(new FileInputStream(CONFIG_FILE));\n        } catch (FileNotFoundException e) {\n            System.err.println(\"Error: Config file was not found: \" + e.getMessage());\n        } catch (IOException e) {\n            System.err.println(\"Error: Unable to read config file: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Loads the Configuration singleton instance\n     *\n     * @return Configuration instance\n     */\n    public static synchronized Config getInstance() {\n\n        if (instance == null) {\n            try {\n                instance = new Config();\n            } catch (IOException e) {\n                System.err.println(\"Error: Unable to load Configuration: \" + e.getMessage());\n            }\n        }\n        return instance;\n    }\n\n    /**\n     * Returns the value of the property with the given key\n     *\n     * @param key String key of the property value to return\n     * @return Value of the property with the given key\n     */\n    public String getProperty(String key) {\n        return props.getProperty(key);\n    }\n\n    public static void main(String[] args) {\n        Config config = Config.getInstance();\n        System.out.println(\"User is \" + config.getProperty(\"user\"));\n        System.out.println(\"Password is \" + config.getProperty(\"password\"));\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..741cadfb 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,69 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+public class Config {\n+\n+    /**\n+     * Singleton instance holds the Properties object\n+     */\n+    private static Config instance = null;\n+    private static Properties props       = null;\n+    private static String     CONFIG_FILE = \"config.properties\";\n+\n+    /**\n+     * Constructor loads properties from disk\n+     */\n+    private Config() throws IOException {\n+\n+        // Load properties from disk\n+        props = new Properties();\n+        try {\n+            props.load(new FileInputStream(CONFIG_FILE));\n+        } catch (FileNotFoundException e) {\n+            System.err.println(\"Error: Config file was not found: \" + e.getMessage());\n+        } catch (IOException e) {\n+            System.err.println(\"Error: Unable to read config file: \" + e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Loads the Configuration singleton instance\n+     *\n+     * @return Configuration instance\n+     */\n+    public static synchronized Config getInstance() {\n+\n+        if (instance == null) {\n+            try {\n+                instance = new Config();\n+            } catch (IOException e) {\n+                System.err.println(\"Error: Unable to load Configuration: \" + e.getMessage());\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    /**\n+     * Returns the value of the property with the given key\n+     *\n+     * @param key String key of the property value to return\n+     * @return Value of the property with the given key\n+     */\n+    public String getProperty(String key) {\n+        return props.getProperty(key);\n+    }\n+\n+    public static void main(String[] args) {\n+        Config config = Config.getInstance();\n+        System.out.println(\"User is \" + config.getProperty(\"user\"));\n+        System.out.println(\"Password is \" + config.getProperty(\"password\"));\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}