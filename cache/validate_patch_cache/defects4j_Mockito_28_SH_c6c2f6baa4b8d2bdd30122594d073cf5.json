{
    "patch": "        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        if(candidate != null) {\n            if(!field.getType().isAssignableFrom(candidate.getClass())) {\n                throw new RuntimeException(\"Mock candidate is not compatible with field type\");\n            }\n            field.setAccessible(true);\n            try {\n                field.set(fieldInstance, field.getType().cast(candidate));\n                mocks.remove(candidate);\n            } catch(IllegalAccessException e) {\n                throw new RuntimeException(\"Unable to inject mock candidate\", e);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..a4a5155e2 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,21 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        if(candidate != null) {\n+            if(!field.getType().isAssignableFrom(candidate.getClass())) {\n+                throw new RuntimeException(\"Mock candidate is not compatible with field type\");\n+            }\n+            field.setAccessible(true);\n+            try {\n+                field.set(fieldInstance, field.getType().cast(candidate));\n+                mocks.remove(candidate);\n+            } catch(IllegalAccessException e) {\n+                throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+            }\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}