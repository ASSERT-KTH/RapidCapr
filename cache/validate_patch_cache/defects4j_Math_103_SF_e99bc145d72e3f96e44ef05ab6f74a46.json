{
    "patch": "    public double cumulativeProbability(double x) throws MathException {\n        if (Double.isInfinite(x)) {\n            return x < 0 ? 0.0 : 1.0;\n        } else if (Double.isNaN(x)) {\n            throw new MathException(\"Input is NaN\");\n        } else {\n            return 0.5 * (1.0 + Erf.erf((x - mean) /\n                    (standardDeviation * Math.sqrt(2.0))));\n        }\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..f5227d0db 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -106,8 +106,14 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n+        if (Double.isInfinite(x)) {\n+            return x < 0 ? 0.0 : 1.0;\n+        } else if (Double.isNaN(x)) {\n+            throw new MathException(\"Input is NaN\");\n+        } else {\n             return 0.5 * (1.0 + Erf.erf((x - mean) /\n                     (standardDeviation * Math.sqrt(2.0))));\n+        }\n     }\n     \n     /**",
    "result_reason": "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded",
    "test_result": "FAIL"
}