{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    Type actualTypeArgument = null;\n\n    if (typeVariable instanceof ParameterizedType) {\n        actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    }\n\n    if (actualTypeArgument == null) {\n        for (Type bound : bounds) {\n            if (!(bound instanceof WildcardType)) {\n                actualTypeArgument = bound;\n                break;\n            }\n        }\n    }\n\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    } else {\n        registerTypeVariablesOn(Object.class);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..8dea6e0cd 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,34 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    Type actualTypeArgument = null;\n+\n+    if (typeVariable instanceof ParameterizedType) {\n+        actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    }\n+\n+    if (actualTypeArgument == null) {\n+        for (Type bound : bounds) {\n+            if (!(bound instanceof WildcardType)) {\n+                actualTypeArgument = bound;\n+                break;\n+            }\n+        }\n+    }\n+\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    } else {\n+        registerTypeVariablesOn(Object.class);\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}