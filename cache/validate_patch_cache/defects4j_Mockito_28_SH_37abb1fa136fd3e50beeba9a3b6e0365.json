{
    "patch": "            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (candidate != null) {\n                if (field.getType().isInstance(candidate) || field.getType().isAssignableFrom(candidate.getClass())) {\n                    field.setAccessible(true);\n                    try {\n                        field.set(fieldInstance, field.getType().cast(candidate));\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..4b98a298a 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,20 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (candidate != null) {\n+                if (field.getType().isInstance(candidate) || field.getType().isAssignableFrom(candidate.getClass())) {\n+                    field.setAccessible(true);\n+                    try {\n+                        field.set(fieldInstance, field.getType().cast(candidate));\n+                    } catch (IllegalAccessException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}