{
    "patch": "    @Override\n    public final boolean visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return true;\n\n      if (n.getType() == Token.LP && parent.getType() == Token.CALL) {\n        handleFunctionInputs(parent);\n        return false;\n      }\n\n      if (n.getType() == Token.LP && NodeUtil.isFunctionExpression(parent)) {\n        handleFunctionInputs(parent);\n        return false;\n      }\n\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (NodeUtil.isFunctionExpression(n)) {\n            return false;\n          }\n          if (parent.getType() == Token.NAME) {\n            return false;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.NAME:\n          defineVar(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return false;\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..a22b540e 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,22 +1440,33 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+    @Override\n+    public final boolean visit(NodeTraversal t, Node n, Node parent) {\n+      if (n == scope.getRootNode()) return true;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+      if (n.getType() == Token.LP && parent.getType() == Token.CALL) {\n         handleFunctionInputs(parent);\n-        return;\n+        return false;\n+      }\n+\n+      if (n.getType() == Token.LP && NodeUtil.isFunctionExpression(parent)) {\n+        handleFunctionInputs(parent);\n+        return false;\n       }\n \n-      attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n+          if (NodeUtil.isFunctionExpression(n)) {\n+            return false;\n+          }\n           if (parent.getType() == Token.NAME) {\n-            return;\n+            return false;\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n+        case Token.NAME:\n+          defineVar(n, parent);\n+          break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n@@ -1463,7 +1474,13 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n-    }\n+\n+      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+        handleFunctionInputs(parent);\n+        return false;\n+      }\n+\n+      return true;\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}