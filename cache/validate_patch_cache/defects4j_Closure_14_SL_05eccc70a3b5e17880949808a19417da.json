{
    "patch": "if (cfa != null && parent.getNext() != null) {\n  Node followNode = computeFollowNode(fromNode, parent.getNext(), cfa);\n  if (followNode != null) {\n    // If `followNode` is not null, create an unconditional edge from `fromNode`\n    // to `followNode`.\n    cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n  } else if (NodeUtil.isLoopStructure(parent.getNext())) {\n    // If `followNode` is null, `parent.getNext()` is a loop structure.\n    Node child = parent.getNext().getFirstChild();\n    if (child == null) {\n      // If the loop structure has no children, that means the body is empty,\n      // and the loop condition should be used instead.\n      child = NodeUtil.getConditionExpression(parent.getNext());\n    }\n    // Now create an unconditional edge from `fromNode` to `child`.\n    cfa.createEdge(fromNode, Branch.UNCOND, child);\n  } else {\n    // If `followNode` is null and `parent.getNext()` is not a loop structure,\n    // create an unconditional edge from `fromNode` to `parent.getNext()`.\n    cfa.createEdge(fromNode, Branch.UNCOND, parent.getNext());\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..466ecbb4 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,28 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null && parent.getNext() != null) {\n+  Node followNode = computeFollowNode(fromNode, parent.getNext(), cfa);\n+  if (followNode != null) {\n+    // If `followNode` is not null, create an unconditional edge from `fromNode`\n+    // to `followNode`.\n+    cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n+  } else if (NodeUtil.isLoopStructure(parent.getNext())) {\n+    // If `followNode` is null, `parent.getNext()` is a loop structure.\n+    Node child = parent.getNext().getFirstChild();\n+    if (child == null) {\n+      // If the loop structure has no children, that means the body is empty,\n+      // and the loop condition should be used instead.\n+      child = NodeUtil.getConditionExpression(parent.getNext());\n+    }\n+    // Now create an unconditional edge from `fromNode` to `child`.\n+    cfa.createEdge(fromNode, Branch.UNCOND, child);\n+  } else {\n+    // If `followNode` is null and `parent.getNext()` is not a loop structure,\n+    // create an unconditional edge from `fromNode` to `parent.getNext()`.\n+    cfa.createEdge(fromNode, Branch.UNCOND, parent.getNext());\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "junit.framework.AssertionFailedError: No cross edges found",
    "test_result": "FAIL"
}