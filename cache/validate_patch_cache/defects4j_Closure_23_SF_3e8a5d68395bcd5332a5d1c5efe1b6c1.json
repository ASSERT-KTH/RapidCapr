{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n\n    if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n\n    if (intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    Node elem;\n    if (left.isArrayLit()) {\n        if (intIndex >= left.getChildCount()) {\n            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n            return n;\n        }\n        elem = left.removeFirstChild();\n        for (int i = 0; i < intIndex; i++) {\n            if (elem.getNext() != null && !elem.getNext().isEmpty()) {\n                elem = elem.getNext();\n            } else {\n                error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n                return n;\n            }\n        }\n    } else {\n        Node indexNode = Node.newNumber(intIndex);\n        Node call = NodeUtil.newCallNode(GET_ELEM, left.cloneNode(), indexNode);\n        replaceNode(n, call);\n        return call;\n    }\n\n    if (elem.isEmpty() || elem.isNull()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}\n\nprivate void replaceNode(Node oldNode, Node newNode) {\n    oldNode.getParent().replaceChild(oldNode, newNode);\n    reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..796e98e5 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,69 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n     if (isAssignmentTarget(n)) {\n-      return n;\n+        return n;\n     }\n \n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+        // Sometimes people like to use complex expressions to index into\n+        // arrays, or strings to index into array methods.\n+        return n;\n     }\n \n     double index = right.getDouble();\n     int intIndex = (int) index;\n+\n     if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n     }\n \n     if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    Node elem;\n+    if (left.isArrayLit()) {\n+        if (intIndex >= left.getChildCount()) {\n+            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+            return n;\n+        }\n+        elem = left.removeFirstChild();\n+        for (int i = 0; i < intIndex; i++) {\n+            if (elem.getNext() != null && !elem.getNext().isEmpty()) {\n+                elem = elem.getNext();\n+            } else {\n+                error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+                return n;\n+            }\n+        }\n+    } else {\n+        Node indexNode = Node.newNumber(intIndex);\n+        Node call = NodeUtil.newCallNode(GET_ELEM, left.cloneNode(), indexNode);\n+        replaceNode(n, call);\n+        return call;\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+    if (elem.isEmpty() || elem.isNull()) {\n+        elem = NodeUtil.newUndefinedNode(elem);\n     }\n \n     // Replace the entire GETELEM with the value\n     n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n-  }\n+}\n+\n+private void replaceNode(Node oldNode, Node newNode) {\n+    oldNode.getParent().replaceChild(oldNode, newNode);\n+    reportCodeChange();\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}