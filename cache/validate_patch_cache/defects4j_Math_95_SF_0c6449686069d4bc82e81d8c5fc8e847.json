{
    "patch": "protected double getInitialDomain(double p) {\n    double ret;\n    double d = getDenominatorDegreesOfFreedom();\n    \n    if (Double.isNaN(d) || d <= 2.0) {\n        // set the initial domain to zero when degrees of freedom is less than or equal to 2 or is NaN\n        ret = 0.0;\n    } \n    else {\n        try {\n            // use mean to compute the initial domain\n            ret = d / (d - 2.0);\n            // check if the result is a finite number\n            if(!Double.isFinite(ret)) {\n                // if the result is infinite or NaN, set the initial domain to a large value\n                ret = Double.MAX_VALUE;\n            }\n        } catch (ArithmeticException ex) {\n            // handle division by zero exception\n            ret = Double.MAX_VALUE;\n        }\n    }\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97aef..957544299 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -140,13 +140,30 @@ public class FDistributionImpl\n      * @param p the desired probability for the critical value\n      * @return initial domain value\n      */\n-    protected double getInitialDomain(double p) {\n-        double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+protected double getInitialDomain(double p) {\n+    double ret;\n+    double d = getDenominatorDegreesOfFreedom();\n+    \n+    if (Double.isNaN(d) || d <= 2.0) {\n+        // set the initial domain to zero when degrees of freedom is less than or equal to 2 or is NaN\n+        ret = 0.0;\n+    } \n+    else {\n+        try {\n+            // use mean to compute the initial domain\n             ret = d / (d - 2.0);\n-        return ret;\n+            // check if the result is a finite number\n+            if(!Double.isFinite(ret)) {\n+                // if the result is infinite or NaN, set the initial domain to a large value\n+                ret = Double.MAX_VALUE;\n+            }\n+        } catch (ArithmeticException ex) {\n+            // handle division by zero exception\n+            ret = Double.MAX_VALUE;\n+        }\n     }\n+    return ret;\n+}\n     \n     /**\n      * Modify the numerator degrees of freedom.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}