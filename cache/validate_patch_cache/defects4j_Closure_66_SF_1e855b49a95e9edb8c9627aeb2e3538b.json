{
    "patch": "public double getTypedPercent(String json) {\n    try {\n        ObjectMapper mapper = new ObjectMapper();\n        JsonNode node = mapper.readTree(json);\n        JsonNode typedNodes = node.get(\"nodes\").get(\"typed\");\n        int totalNodes = node.get(\"stats\").get(\"nodes\").asInt();\n        int typedCount = typedNodes.size();\n        return (double) typedCount / totalNodes * 100;\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return -1;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..e3bcfde5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+    try {\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode node = mapper.readTree(json);\n+        JsonNode typedNodes = node.get(\"nodes\").get(\"typed\");\n+        int totalNodes = node.get(\"stats\").get(\"nodes\").asInt();\n+        int typedCount = typedNodes.size();\n+        return (double) typedCount / totalNodes * 100;\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+    return -1;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}