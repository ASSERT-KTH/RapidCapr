{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] realEigen = dec.getRealEigenvalues();\n\n    for (int i = 0; i < realEigen.length; i++) {\n        if (realEigen[i] < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        realEigen[i] = Math.sqrt(realEigen[i]);\n    }\n\n    final RealMatrix V = dec.getV();\n    final RealMatrix D = MatrixUtils.createRealDiagonalMatrix(realEigen);\n    final RealMatrix D_1 = MatrixUtils.createRealDiagonalMatrix(1.0 / realEigen);\n    final RealMatrix sqrtM = V.multiply(D).multiply(V.transpose());\n    final RealMatrix invSqrtM = V.multiply(D_1).multiply(V.transpose());\n    return sqrtM.multiply(invSqrtM);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..aa01d8913 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] realEigen = dec.getRealEigenvalues();\n+\n+    for (int i = 0; i < realEigen.length; i++) {\n+        if (realEigen[i] < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        realEigen[i] = Math.sqrt(realEigen[i]);\n     }\n+\n+    final RealMatrix V = dec.getV();\n+    final RealMatrix D = MatrixUtils.createRealDiagonalMatrix(realEigen);\n+    final RealMatrix D_1 = MatrixUtils.createRealDiagonalMatrix(1.0 / realEigen);\n+    final RealMatrix sqrtM = V.multiply(D).multiply(V.transpose());\n+    final RealMatrix invSqrtM = V.multiply(D_1).multiply(V.transpose());\n+    return sqrtM.multiply(invSqrtM);\n+}\n }",
    "result_reason": "error: bad operand types for binary operator '/'",
    "test_result": "ERROR"
}