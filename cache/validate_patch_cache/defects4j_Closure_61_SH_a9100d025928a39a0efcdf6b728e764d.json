{
    "patch": "```\n// Functions in the \"Math\" namespace have no side effects.\nif (nameNode.getFirstChild().isQualifiedName()\n    && nameNode.getFirstChild().matchesQualifiedName(\"Math.*\")) {\n  return false;\n}\n```\n\n\nThis hunk checks if the `nameNode` is a qualified name starting with `Math` namespace. If so, it returns `false` as `Math` namespace is known to not have any side effects. This approach is more robust as it will work even if the `nameNode` contains more than just the `Math` namespace.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..f6a09beb 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -955,6 +955,16 @@ public final class NodeUtil {\n       }\n \n       // Functions in the \"Math\" namespace have no side effects.\n+```\n+// Functions in the \"Math\" namespace have no side effects.\n+if (nameNode.getFirstChild().isQualifiedName()\n+    && nameNode.getFirstChild().matchesQualifiedName(\"Math.*\")) {\n+  return false;\n+}\n+```\n+\n+\n+This hunk checks if the `nameNode` is a qualified name starting with `Math` namespace. If so, it returns `false` as `Math` namespace is known to not have any side effects. This approach is more robust as it will work even if the `nameNode` contains more than just the `Math` namespace.\n \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n         if (nameNode.getFirstChild().getType() == Token.REGEXP",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}