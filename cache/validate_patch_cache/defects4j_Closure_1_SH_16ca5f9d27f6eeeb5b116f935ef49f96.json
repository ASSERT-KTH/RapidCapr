{
    "patch": "      int i = 0;\n      int paramCount = argList.getChildCount();\n      while (i < paramCount) {\n        Node param = argList.getChildAtIndex(i);\n        Var var = fnScope.getVar(param.getString());\n        if (!referenced.contains(var)) {\n          paramCount--;\n          argList.removeChild(param);\n          compiler.reportCodeChange();\n        } else {\n          i++;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..fa048b48 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,17 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      int i = 0;\n+      int paramCount = argList.getChildCount();\n+      while (i < paramCount) {\n+        Node param = argList.getChildAtIndex(i);\n+        Var var = fnScope.getVar(param.getString());\n+        if (!referenced.contains(var)) {\n+          paramCount--;\n+          argList.removeChild(param);\n+          compiler.reportCodeChange();\n+        } else {\n+          i++;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}