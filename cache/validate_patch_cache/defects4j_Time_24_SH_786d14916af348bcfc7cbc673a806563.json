{
    "patch": "try {\n    int successfulFields = 0;\n    for (int i = 0; i < count; i++) {\n        try {\n            millis = savedFields[i].set(millis, resetFields);\n            successfulFields++;\n        } catch (IllegalArgumentException e) {\n            if (text != null) {\n                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n            }\n            throw e;\n        }\n    }\n    if (resetFields && successfulFields != count) {\n        boolean resetUntil = false;\n        for (int j = count - 1; j >= successfulFields; j--) {\n            try {\n                if (!resetUntil) {\n                    millis = savedFields[j].set(millis, true);\n                } else {\n                    millis = savedFields[j].set(millis, false);\n                }\n            } catch (IllegalArgumentException e) {\n                if (text != null) {\n                    e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n                }\n                throw e;\n            }\n            resetUntil |= !savedFields[j].iField.isSupported();\n        }\n    }\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..9c7e0d9e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,43 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    int successfulFields = 0;\n+    for (int i = 0; i < count; i++) {\n+        try {\n+            millis = savedFields[i].set(millis, resetFields);\n+            successfulFields++;\n+        } catch (IllegalArgumentException e) {\n+            if (text != null) {\n+                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+            }\n+            throw e;\n+        }\n+    }\n+    if (resetFields && successfulFields != count) {\n+        boolean resetUntil = false;\n+        for (int j = count - 1; j >= successfulFields; j--) {\n+            try {\n+                if (!resetUntil) {\n+                    millis = savedFields[j].set(millis, true);\n+                } else {\n+                    millis = savedFields[j].set(millis, false);\n+                }\n+            } catch (IllegalArgumentException e) {\n+                if (text != null) {\n+                    e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+                }\n+                throw e;\n+            }\n+            resetUntil |= !savedFields[j].iField.isSupported();\n+        }\n+    }\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}