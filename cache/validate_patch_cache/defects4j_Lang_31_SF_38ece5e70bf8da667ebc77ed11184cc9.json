{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int strLength = str.length();\n    int searchLength = searchChars.length;\n    boolean[] hits = new boolean[Character.MAX_VALUE + 1];\n\n    // set up hit table\n    for (int i = 0; i < searchLength; i++) {\n        hits[searchChars[i]] = true;\n    }\n\n    // check through string for hit\n    for (int i = 0; i < strLength; i++) {\n        char ch = str.charAt(i);\n        if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n            if (i < strLength - 1) {\n                char surrogatePair = str.charAt(i + 1);\n                if (surrogatePair >= Character.MIN_LOW_SURROGATE && surrogatePair <= Character.MAX_LOW_SURROGATE) {\n                    int codePoint = Character.toCodePoint(ch, surrogatePair);\n                    if (hits[codePoint]) {\n                        return true;\n                    }\n                }\n            }\n            i++;\n        } else {\n            if (hits[ch]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..d6088750 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,41 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int strLength = str.length();\n+    int searchLength = searchChars.length;\n+    boolean[] hits = new boolean[Character.MAX_VALUE + 1];\n+\n+    // set up hit table\n+    for (int i = 0; i < searchLength; i++) {\n+        hits[searchChars[i]] = true;\n+    }\n+\n+    // check through string for hit\n+    for (int i = 0; i < strLength; i++) {\n+        char ch = str.charAt(i);\n+        if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n+            if (i < strLength - 1) {\n+                char surrogatePair = str.charAt(i + 1);\n+                if (surrogatePair >= Character.MIN_LOW_SURROGATE && surrogatePair <= Character.MAX_LOW_SURROGATE) {\n+                    int codePoint = Character.toCodePoint(ch, surrogatePair);\n+                    if (hits[codePoint]) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            i++;\n+        } else {\n+            if (hits[ch]) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}