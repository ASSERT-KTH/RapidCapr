{
    "patch": "      // In strict mode, can't use arguments in functions with an explicit parameter of the same name.\n      // e.g. function(a) { \"use strict\"; var a; } should throw an error.\n      if (compiler.getOptions().getLanguageIn() == LanguageMode.ECMASCRIPT5 && NodeUtil.isFunctionExpression(function.getParent())) {\n        List<Node> children = argList.children();\n        Set<String> previousArgNames = Sets.newHashSetWithExpectedSize(children.size());\n        for (Node child : children) {\n          String name = child.getString();\n          if (previousArgNames.contains(name)) {\n            // The arg has already been seen, so it is a duplicate, which is an error in strict mode.\n            compiler.report(codeChangeWarn,\n                IR.arraylit(IR.string(\"Duplicate argument: '\" + name + \"' is disallowed in strict mode\")));\n            break;\n          }\n          previousArgNames.add(name);\n        }\n        Node body = function.getLastChild();\n        for (Node stmt : body.children()) {\n          if (stmt.isExprResult() && isUseStrictExpression(stmt.getFirstChild())) {\n            previousArgNames.addAll(Sets.newHashSet(Arrays.asList(IR.arguments(), IR.this().getString())));\n            for (Node child : children) {\n              if (previousArgNames.contains(child.getString())) {\n                // The arg has been declared in the function and \"use strict\" is being used.\n                // This is disallowed under strict mode.\n                compiler.report(codeChangeWarn,\n                  IR.arraylit(IR.string(\"Argument declared \"\n                      + \"with the name '\"\n                      + child.getString()\n                      + \"' is disallowed by strict mode.\"))\n                );\n              }\n            }\n            break; // strict mode error, don't continue to check for more errors in this function.\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ef2d39a7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // In strict mode, can't use arguments in functions with an explicit parameter of the same name.\n+      // e.g. function(a) { \"use strict\"; var a; } should throw an error.\n+      if (compiler.getOptions().getLanguageIn() == LanguageMode.ECMASCRIPT5 && NodeUtil.isFunctionExpression(function.getParent())) {\n+        List<Node> children = argList.children();\n+        Set<String> previousArgNames = Sets.newHashSetWithExpectedSize(children.size());\n+        for (Node child : children) {\n+          String name = child.getString();\n+          if (previousArgNames.contains(name)) {\n+            // The arg has already been seen, so it is a duplicate, which is an error in strict mode.\n+            compiler.report(codeChangeWarn,\n+                IR.arraylit(IR.string(\"Duplicate argument: '\" + name + \"' is disallowed in strict mode\")));\n+            break;\n+          }\n+          previousArgNames.add(name);\n+        }\n+        Node body = function.getLastChild();\n+        for (Node stmt : body.children()) {\n+          if (stmt.isExprResult() && isUseStrictExpression(stmt.getFirstChild())) {\n+            previousArgNames.addAll(Sets.newHashSet(Arrays.asList(IR.arguments(), IR.this().getString())));\n+            for (Node child : children) {\n+              if (previousArgNames.contains(child.getString())) {\n+                // The arg has been declared in the function and \"use strict\" is being used.\n+                // This is disallowed under strict mode.\n+                compiler.report(codeChangeWarn,\n+                  IR.arraylit(IR.string(\"Argument declared \"\n+                      + \"with the name '\"\n+                      + child.getString()\n+                      + \"' is disallowed by strict mode.\"))\n+                );\n+              }\n+            }\n+            break; // strict mode error, don't continue to check for more errors in this function.\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}