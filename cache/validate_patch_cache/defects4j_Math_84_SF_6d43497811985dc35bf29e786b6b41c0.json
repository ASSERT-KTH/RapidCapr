{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    double[] xSmallest = simplex[0].getPoint();\n    double[] xNext    = simplex[simplex.length - 1].getPoint();\n    double[] xHighest = simplex[simplex.length - 2].getPoint();\n    double[] xMiddle  = centroidOfBestNMinusOne(xHighest);\n    double fxSmallest = simplex[0].getValue();\n    double fxNext     = simplex[simplex.length - 1].getValue();\n    double fxHighest  = simplex[simplex.length - 2].getValue();\n    double fxMiddle   = evaluate(pointToVector(xMiddle));\n    int numEval = 1;\n\n    while (evaluateStopCriterion(xSmallest, fxSmallest, xNext, fxNext, xMiddle, fxMiddle, xHighest, fxHighest, numEval)) {\n        incrementIterationsCounter();\n        final boolean isNextBetter = comparator.compare(\n                new RealPointValuePair(pointToVector(xNext), fxNext),\n                new RealPointValuePair(pointToVector(xHighest), fxHighest)) < 0;\n        if (isNextBetter) {\n            // Calculate the reflection point\n            final double[] xReflection = reflect(xMiddle, xHighest, 1.0);\n            final double fxReflection = evaluate(pointToVector(xReflection));\n            numEval++;\n\n            if (comparator.compare(new RealPointValuePair(pointToVector(xSmallest), fxSmallest),\n                                    new RealPointValuePair(pointToVector(xReflection), fxReflection)) <= 0 &&\n                comparator.compare(new RealPointValuePair(pointToVector(xReflection), fxReflection),\n                                    new RealPointValuePair(pointToVector(xNext), fxNext)) < 0) {\n                // Replace the highest point with the reflection point\n                simplex[simplex.length - 1] = new RealPointValuePair(pointToVector(xReflection), fxReflection);\n                xHighest  = xReflection;\n                fxHighest = fxReflection;\n            } else if (comparator.compare(new RealPointValuePair(pointToVector(xReflection), fxReflection),\n                                           new RealPointValuePair(pointToVector(xSmallest), fxSmallest)) < 0) {\n                // Calculate the expanded point\n                final double[] xExpanded = reflect(xMiddle, xHighest, 2.0);\n                final double fxExpanded = evaluate(pointToVector(xExpanded));\n                numEval++;\n\n                if (comparator.compare(new RealPointValuePair(pointToVector(xExpanded), fxExpanded),\n                                        new RealPointValuePair(pointToVector(xReflection), fxReflection)) < 0) {\n                    // Replace the highest point with the expanded point\n                    simplex[simplex.length - 1] = new RealPointValuePair(pointToVector(xExpanded), fxExpanded);\n                    xHighest  = xExpanded;\n                    fxHighest = fxExpanded;\n                } else {\n                    // Replace the highest point with the reflection point\n                    simplex[simplex.length - 1] = new RealPointValuePair(pointToVector(xReflection), fxReflection);\n                    xHighest  = xReflection;\n                    fxHighest = fxReflection;\n                }\n            } else {\n                // Calculate the contracted point\n                final double[] xContracted = reflect(xMiddle, xHighest, 0.5);\n                final double fxContracted = evaluate(pointToVector(xContracted));\n                numEval++;\n\n                if (comparator.compare(new RealPointValuePair(pointToVector(xContracted), fxContracted),\n                                        new RealPointValuePair(pointToVector(xHighest), fxHighest)) < 0) {\n                    // Replace the highest point with the contracted point\n                    simplex[simplex.length - 1] = new RealPointValuePair(pointToVector(xContracted), fxContracted);\n                    xHighest  = xContracted;\n                    fxHighest = fxContracted;\n                } else {\n                    // Shrink the simplex toward the smallest point\n                    shrink(comparator);\n                    xSmallest = simplex[0].getPoint();\n                    xNext     = simplex[simplex.length - 1].getPoint();\n                    xHighest  = simplex[simplex.length - 2].getPoint();\n                    xMiddle   = centroidOfBestNMinusOne(xHighest);\n                    fxSmallest = simplex[0].getValue();\n                    fxNext     = simplex[simplex.length - 1].getValue();\n                    fxHighest  = simplex[simplex.length - 2].getValue();\n                    fxMiddle   = evaluate(pointToVector(xMiddle));\n                    numEval += simplex.length - 1;\n                }\n            }\n        } else {\n            // Calculate the contracted point\n            final double[] xContracted = reflect(xMiddle, xHighest, 0.5);\n            final double fxContracted = evaluate(pointToVector(xContracted));\n            numEval++;\n\n            if (comparator.compare(new RealPointValuePair(pointToVector(xContracted), fxContracted),\n                                    new RealPointValuePair(pointToVector(xHighest), fxHighest)) < 0) {\n                // Replace the highest point with the contracted point\n                simplex[simplex.length - 1] = new RealPointValuePair(pointToVector(xContracted), fxContracted);\n                xHighest  = xContracted;\n                fxHighest = fxContracted;\n            } else {\n                // Shrink the simplex toward the smallest point\n                shrink(comparator);\n                xSmallest = simplex[0].getPoint();\n                xNext     = simplex[simplex.length - 1].getPoint();\n                xHighest  = simplex[simplex.length - 2].getPoint();\n                xMiddle   = centroidOfBestNMinusOne(xHighest);\n                fxSmallest = simplex[0].getValue();\n                fxNext     = simplex[simplex.length - 1].getValue();\n                fxHighest  = simplex[simplex.length - 2].getValue();\n                fxMiddle   = evaluate(pointToVector(xMiddle));\n                numEval += simplex.length - 1;\n            }\n        }\n    }\n    setConvergenceCheckerIter(getIterations());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..c588f78bb 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,111 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+    double[] xSmallest = simplex[0].getPoint();\n+    double[] xNext    = simplex[simplex.length - 1].getPoint();\n+    double[] xHighest = simplex[simplex.length - 2].getPoint();\n+    double[] xMiddle  = centroidOfBestNMinusOne(xHighest);\n+    double fxSmallest = simplex[0].getValue();\n+    double fxNext     = simplex[simplex.length - 1].getValue();\n+    double fxHighest  = simplex[simplex.length - 2].getValue();\n+    double fxMiddle   = evaluate(pointToVector(xMiddle));\n+    int numEval = 1;\n+\n+    while (evaluateStopCriterion(xSmallest, fxSmallest, xNext, fxNext, xMiddle, fxMiddle, xHighest, fxHighest, numEval)) {\n+        incrementIterationsCounter();\n+        final boolean isNextBetter = comparator.compare(\n+                new RealPointValuePair(pointToVector(xNext), fxNext),\n+                new RealPointValuePair(pointToVector(xHighest), fxHighest)) < 0;\n+        if (isNextBetter) {\n+            // Calculate the reflection point\n+            final double[] xReflection = reflect(xMiddle, xHighest, 1.0);\n+            final double fxReflection = evaluate(pointToVector(xReflection));\n+            numEval++;\n+\n+            if (comparator.compare(new RealPointValuePair(pointToVector(xSmallest), fxSmallest),\n+                                    new RealPointValuePair(pointToVector(xReflection), fxReflection)) <= 0 &&\n+                comparator.compare(new RealPointValuePair(pointToVector(xReflection), fxReflection),\n+                                    new RealPointValuePair(pointToVector(xNext), fxNext)) < 0) {\n+                // Replace the highest point with the reflection point\n+                simplex[simplex.length - 1] = new RealPointValuePair(pointToVector(xReflection), fxReflection);\n+                xHighest  = xReflection;\n+                fxHighest = fxReflection;\n+            } else if (comparator.compare(new RealPointValuePair(pointToVector(xReflection), fxReflection),\n+                                           new RealPointValuePair(pointToVector(xSmallest), fxSmallest)) < 0) {\n+                // Calculate the expanded point\n+                final double[] xExpanded = reflect(xMiddle, xHighest, 2.0);\n+                final double fxExpanded = evaluate(pointToVector(xExpanded));\n+                numEval++;\n+\n+                if (comparator.compare(new RealPointValuePair(pointToVector(xExpanded), fxExpanded),\n+                                        new RealPointValuePair(pointToVector(xReflection), fxReflection)) < 0) {\n+                    // Replace the highest point with the expanded point\n+                    simplex[simplex.length - 1] = new RealPointValuePair(pointToVector(xExpanded), fxExpanded);\n+                    xHighest  = xExpanded;\n+                    fxHighest = fxExpanded;\n+                } else {\n+                    // Replace the highest point with the reflection point\n+                    simplex[simplex.length - 1] = new RealPointValuePair(pointToVector(xReflection), fxReflection);\n+                    xHighest  = xReflection;\n+                    fxHighest = fxReflection;\n+                }\n+            } else {\n+                // Calculate the contracted point\n+                final double[] xContracted = reflect(xMiddle, xHighest, 0.5);\n+                final double fxContracted = evaluate(pointToVector(xContracted));\n+                numEval++;\n+\n+                if (comparator.compare(new RealPointValuePair(pointToVector(xContracted), fxContracted),\n+                                        new RealPointValuePair(pointToVector(xHighest), fxHighest)) < 0) {\n+                    // Replace the highest point with the contracted point\n+                    simplex[simplex.length - 1] = new RealPointValuePair(pointToVector(xContracted), fxContracted);\n+                    xHighest  = xContracted;\n+                    fxHighest = fxContracted;\n+                } else {\n+                    // Shrink the simplex toward the smallest point\n+                    shrink(comparator);\n+                    xSmallest = simplex[0].getPoint();\n+                    xNext     = simplex[simplex.length - 1].getPoint();\n+                    xHighest  = simplex[simplex.length - 2].getPoint();\n+                    xMiddle   = centroidOfBestNMinusOne(xHighest);\n+                    fxSmallest = simplex[0].getValue();\n+                    fxNext     = simplex[simplex.length - 1].getValue();\n+                    fxHighest  = simplex[simplex.length - 2].getValue();\n+                    fxMiddle   = evaluate(pointToVector(xMiddle));\n+                    numEval += simplex.length - 1;\n                 }\n-\n-                return;\n-\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+        } else {\n+            // Calculate the contracted point\n+            final double[] xContracted = reflect(xMiddle, xHighest, 0.5);\n+            final double fxContracted = evaluate(pointToVector(xContracted));\n+            numEval++;\n+\n+            if (comparator.compare(new RealPointValuePair(pointToVector(xContracted), fxContracted),\n+                                    new RealPointValuePair(pointToVector(xHighest), fxHighest)) < 0) {\n+                // Replace the highest point with the contracted point\n+                simplex[simplex.length - 1] = new RealPointValuePair(pointToVector(xContracted), fxContracted);\n+                xHighest  = xContracted;\n+                fxHighest = fxContracted;\n+            } else {\n+                // Shrink the simplex toward the smallest point\n+                shrink(comparator);\n+                xSmallest = simplex[0].getPoint();\n+                xNext     = simplex[simplex.length - 1].getPoint();\n+                xHighest  = simplex[simplex.length - 2].getPoint();\n+                xMiddle   = centroidOfBestNMinusOne(xHighest);\n+                fxSmallest = simplex[0].getValue();\n+                fxNext     = simplex[simplex.length - 1].getValue();\n+                fxHighest  = simplex[simplex.length - 2].getValue();\n+                fxMiddle   = evaluate(pointToVector(xMiddle));\n+                numEval += simplex.length - 1;\n             }\n-\n         }\n-\n     }\n+    setConvergenceCheckerIter(getIterations());\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}