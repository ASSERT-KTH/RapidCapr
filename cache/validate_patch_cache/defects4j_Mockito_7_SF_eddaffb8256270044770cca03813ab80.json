{
    "patch": "    private void readTypeVariables() {\n        for (Type bound : typeVariable.getBounds()) {\n            registerTypeVariablesOn(bound);\n        }\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) actualTypeArgument;\n            for (Type typeArgument : parameterizedType.getActualTypeArguments()) {\n                if (typeArgument instanceof TypeVariable) {\n                    readTypeVariables((TypeVariable<?>) typeArgument);\n                }\n            }\n        } else if (actualTypeArgument instanceof TypeVariable) {\n            readTypeVariables((TypeVariable<?>) actualTypeArgument);\n        } else if (actualTypeArgument != null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n\n    private void readTypeVariables(TypeVariable<?> typeVariable) {\n        for (Type bound : typeVariable.getBounds()) {\n            registerTypeVariablesOn(bound);\n        }\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument != null) {\n            readTypeVariables(actualTypeArgument);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..b912f0da5 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,35 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+    private void readTypeVariables() {\n+        for (Type bound : typeVariable.getBounds()) {\n+            registerTypeVariablesOn(bound);\n+        }\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) actualTypeArgument;\n+            for (Type typeArgument : parameterizedType.getActualTypeArguments()) {\n+                if (typeArgument instanceof TypeVariable) {\n+                    readTypeVariables((TypeVariable<?>) typeArgument);\n+                }\n+            }\n+        } else if (actualTypeArgument instanceof TypeVariable) {\n+            readTypeVariables((TypeVariable<?>) actualTypeArgument);\n+        } else if (actualTypeArgument != null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+\n+    private void readTypeVariables(TypeVariable<?> typeVariable) {\n+        for (Type bound : typeVariable.getBounds()) {\n+            registerTypeVariablesOn(bound);\n+        }\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument != null) {\n+            readTypeVariables(actualTypeArgument);\n+        }\n+    }\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: incompatible types: Type cannot be converted to TypeVariable<?>",
    "test_result": "ERROR"
}