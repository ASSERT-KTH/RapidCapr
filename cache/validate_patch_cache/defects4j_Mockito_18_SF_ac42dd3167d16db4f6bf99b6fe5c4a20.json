{
    "patch": "public static ReturnValues createEmpty(String returnType) {\n    ReturnValues values = new ReturnValues();\n    try {\n        switch (returnType) {\n            case \"java.lang.Iterable\":\n                values.setReturnValue(Collections.emptyList());\n                break;\n            case \"java.lang.Object\":\n            case \"java.util.Optional\":\n            case \"java.util.OptionalDouble\":\n            case \"java.util.OptionalInt\":\n            case \"java.util.OptionalLong\":\n                values.setReturnValue(Optional.empty());\n                break;\n            default:\n                values.setReturnValue(null);\n                break;\n        }\n    } catch (Throwable throwable) {\n        values.setException(throwable);\n    }\n    return values;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..8e5eba089 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,29 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static ReturnValues createEmpty(String returnType) {\n+    ReturnValues values = new ReturnValues();\n+    try {\n+        switch (returnType) {\n+            case \"java.lang.Iterable\":\n+                values.setReturnValue(Collections.emptyList());\n+                break;\n+            case \"java.lang.Object\":\n+            case \"java.util.Optional\":\n+            case \"java.util.OptionalDouble\":\n+            case \"java.util.OptionalInt\":\n+            case \"java.util.OptionalLong\":\n+                values.setReturnValue(Optional.empty());\n+                break;\n+            default:\n+                values.setReturnValue(null);\n+                break;\n+        }\n+    } catch (Throwable throwable) {\n+        values.setException(throwable);\n+    }\n+    return values;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}