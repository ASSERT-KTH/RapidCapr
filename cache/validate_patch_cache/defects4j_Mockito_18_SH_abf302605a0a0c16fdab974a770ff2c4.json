{
    "patch": "public ReturnValue execute(ExecutionEvent event) {\n    ISelection selection = HandlerUtil.getCurrentSelection(event);\n    if (selection instanceof IStructuredSelection) {\n        IStructuredSelection structuredSelection = (IStructuredSelection) selection;\n        if (!structuredSelection.isEmpty()) {\n            List<String> selectedNames = new ArrayList<String>();\n            for (Iterator iterator = structuredSelection.iterator(); iterator.hasNext();) {\n                Object element = iterator.next();\n                if (element instanceof ICompilationUnit) {\n                    ICompilationUnit unit = (ICompilationUnit) element;\n                    IType[] allTypes;\n                    try {\n                        allTypes = unit.getAllTypes();\n                        for (IType type : allTypes) {\n                            selectedNames.add(type.getFullyQualifiedName());\n                        }\n                    } catch (JavaModelException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n            return new ReturnValue(Collections.unmodifiableList(selectedNames));\n        }\n    }\n    //if nothing is selected, return an empty list\n    return new ReturnValue(Collections.emptyList());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}