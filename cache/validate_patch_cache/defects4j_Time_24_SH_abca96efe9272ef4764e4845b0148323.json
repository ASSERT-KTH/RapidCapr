{
    "patch": "    private void checkSavedField(SavedField savedField, String text) throws IllegalFieldValueException {\n        DateTimeField field = savedField.iField;\n        if (field == null) {\n            return;\n        }\n        int value = savedField.iValue;\n        try {\n            int range = field.getMaximumValue();\n            if (value >= range) {\n                throw new IllegalFieldValueException(field.getType(), value, null, null);\n            }\n        } catch (RuntimeException e) {\n            // Ignore the exception, as not all date fields may be supported\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..a0669a1a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,21 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+    private void checkSavedField(SavedField savedField, String text) throws IllegalFieldValueException {\n+        DateTimeField field = savedField.iField;\n+        if (field == null) {\n+            return;\n+        }\n+        int value = savedField.iValue;\n+        try {\n+            int range = field.getMaximumValue();\n+            if (value >= range) {\n+                throw new IllegalFieldValueException(field.getType(), value, null, null);\n+            }\n+        } catch (RuntimeException e) {\n+            // Ignore the exception, as not all date fields may be supported\n+        }\n+    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}