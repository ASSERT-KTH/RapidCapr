{
    "patch": "    public double cumulativeProbability(double x) throws MathException {\n        if (Double.isNaN(x)) {\n            throw new MathException(\"NaN argument passed to cumulativeProbability\");\n        }\n\n        if (Double.isInfinite(x)) {\n            if (x < 0) {\n                return 0;\n            } else {\n                return 1;\n            }\n        }\n\n        double dev = (x - mean) / standardDeviation;\n        if (Math.abs(dev) > 40) {\n            // Using Erf.erf() will result in overflow exception or max iterations exceeded\n            if (dev < 0) {\n                return 0;\n            } else {\n                return 1;\n            }\n        }\n\n        return 0.5 * (1.0 + Erf.erf(dev/ Math.sqrt(2.0)));\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..c2acd3bda 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -106,8 +106,29 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+        if (Double.isNaN(x)) {\n+            throw new MathException(\"NaN argument passed to cumulativeProbability\");\n+        }\n+\n+        if (Double.isInfinite(x)) {\n+            if (x < 0) {\n+                return 0;\n+            } else {\n+                return 1;\n+            }\n+        }\n+\n+        double dev = (x - mean) / standardDeviation;\n+        if (Math.abs(dev) > 40) {\n+            // Using Erf.erf() will result in overflow exception or max iterations exceeded\n+            if (dev < 0) {\n+                return 0;\n+            } else {\n+                return 1;\n+            }\n+        }\n+\n+        return 0.5 * (1.0 + Erf.erf(dev/ Math.sqrt(2.0)));\n     }\n     \n     /**",
    "result_reason": "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded",
    "test_result": "FAIL"
}