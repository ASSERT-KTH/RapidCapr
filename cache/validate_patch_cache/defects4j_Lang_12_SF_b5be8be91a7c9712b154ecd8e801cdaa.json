{
    "patch": "public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                            char[] chars, Random random) {\n    if (count <= 0) {\n        return \"\";\n    }\n    if (start < 0) {\n        start = 0;\n    }\n    if (end <= 0) {\n        end = Integer.MAX_VALUE;\n    }\n    if (start >= end) {\n        throw new IllegalArgumentException(\"Invalid range specified: \" + (end - start));\n    }\n    if (chars != null && chars.length == 0) {\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\n    }\n    if (!letters && !numbers && chars == null) {\n        throw new IllegalArgumentException(\"At least one of letters, numbers, or chars must be true\");\n    }\n\n    char[] buffer = new char[count];\n    int gap = end - start;\n    if (chars != null) {\n        gap += chars.length;\n    }\n    int bufferIndex = 0;\n\n    while (bufferIndex < count) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else if (chars.length == 1) {\n            ch = chars[0];\n        } else {\n            ch = chars[random.nextInt(chars.length)];\n        }\n        if ((letters && Character.isLetter(ch))\n                || (numbers && Character.isDigit(ch))\n                || (!letters && !numbers)) {\n            if (ch >= 56320 && ch <= 57343) {\n                if (bufferIndex == count - 1) {\n                    // We don't have space for the low surrogate, so skip it\n                    break;\n                }\n                // low surrogate, insert high surrogate after putting it in\n                buffer[bufferIndex++] = ch;\n                buffer[bufferIndex++] = (char) (55296 + random.nextInt(128));\n            } else if (ch >= 55296 && ch <= 56191) {\n                if (bufferIndex == count - 1) {\n                    // We don't have space for the high surrogate, so skip it\n                    break;\n                }\n                // high surrogate, insert low surrogate before putting it in\n                buffer[bufferIndex++] = (char) (56320 + random.nextInt(128));\n                buffer[bufferIndex++] = ch;\n            } else if (ch >= 56192 && ch <= 56319) {\n                // private high surrogate, no effing clue, so skip it\n                continue;\n            } else {\n                buffer[bufferIndex++] = ch;\n            }\n        }\n    }\n    return new String(buffer, 0, bufferIndex);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\nindex b200223d..458308e1 100644\n--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n@@ -220,66 +220,72 @@ public class RandomStringUtils {\n      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n      * @since 2.0\n      */\n-    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n-                                char[] chars, Random random) {\n-        if (count == 0) {\n-            return \"\";\n-        } else if (count < 0) {\n-            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n-        }\n-\n-        if (start == 0 && end == 0) {\n-                if (!letters && !numbers) {\n-                    end = Integer.MAX_VALUE;\n-                } else {\n-                    end = 'z' + 1;\n-                    start = ' ';                \n-                }\n-        }\n+public static String random(int count, int start, int end, boolean letters, boolean numbers,\n+                            char[] chars, Random random) {\n+    if (count <= 0) {\n+        return \"\";\n+    }\n+    if (start < 0) {\n+        start = 0;\n+    }\n+    if (end <= 0) {\n+        end = Integer.MAX_VALUE;\n+    }\n+    if (start >= end) {\n+        throw new IllegalArgumentException(\"Invalid range specified: \" + (end - start));\n+    }\n+    if (chars != null && chars.length == 0) {\n+        throw new IllegalArgumentException(\"The chars array must not be empty\");\n+    }\n+    if (!letters && !numbers && chars == null) {\n+        throw new IllegalArgumentException(\"At least one of letters, numbers, or chars must be true\");\n+    }\n \n-        char[] buffer = new char[count];\n-        int gap = end - start;\n+    char[] buffer = new char[count];\n+    int gap = end - start;\n+    if (chars != null) {\n+        gap += chars.length;\n+    }\n+    int bufferIndex = 0;\n \n-        while (count-- != 0) {\n-            char ch;\n-            if (chars == null) {\n-                ch = (char) (random.nextInt(gap) + start);\n-            } else {\n-                ch = chars[random.nextInt(gap) + start];\n-            }\n-            if (letters && Character.isLetter(ch)\n-                    || numbers && Character.isDigit(ch)\n-                    || !letters && !numbers) {\n-                if(ch >= 56320 && ch <= 57343) {\n-                    if(count == 0) {\n-                        count++;\n-                    } else {\n-                        // low surrogate, insert high surrogate after putting it in\n-                        buffer[count] = ch;\n-                        count--;\n-                        buffer[count] = (char) (55296 + random.nextInt(128));\n-                    }\n-                } else if(ch >= 55296 && ch <= 56191) {\n-                    if(count == 0) {\n-                        count++;\n-                    } else {\n-                        // high surrogate, insert low surrogate before putting it in\n-                        buffer[count] = (char) (56320 + random.nextInt(128));\n-                        count--;\n-                        buffer[count] = ch;\n-                    }\n-                } else if(ch >= 56192 && ch <= 56319) {\n-                    // private high surrogate, no effing clue, so skip it\n-                    count++;\n-                } else {\n-                    buffer[count] = ch;\n+    while (bufferIndex < count) {\n+        char ch;\n+        if (chars == null) {\n+            ch = (char) (random.nextInt(gap) + start);\n+        } else if (chars.length == 1) {\n+            ch = chars[0];\n+        } else {\n+            ch = chars[random.nextInt(chars.length)];\n+        }\n+        if ((letters && Character.isLetter(ch))\n+                || (numbers && Character.isDigit(ch))\n+                || (!letters && !numbers)) {\n+            if (ch >= 56320 && ch <= 57343) {\n+                if (bufferIndex == count - 1) {\n+                    // We don't have space for the low surrogate, so skip it\n+                    break;\n                 }\n+                // low surrogate, insert high surrogate after putting it in\n+                buffer[bufferIndex++] = ch;\n+                buffer[bufferIndex++] = (char) (55296 + random.nextInt(128));\n+            } else if (ch >= 55296 && ch <= 56191) {\n+                if (bufferIndex == count - 1) {\n+                    // We don't have space for the high surrogate, so skip it\n+                    break;\n+                }\n+                // high surrogate, insert low surrogate before putting it in\n+                buffer[bufferIndex++] = (char) (56320 + random.nextInt(128));\n+                buffer[bufferIndex++] = ch;\n+            } else if (ch >= 56192 && ch <= 56319) {\n+                // private high surrogate, no effing clue, so skip it\n+                continue;\n             } else {\n-                count++;\n+                buffer[bufferIndex++] = ch;\n             }\n         }\n-        return new String(buffer);\n     }\n+    return new String(buffer, 0, bufferIndex);\n+}\n \n     /**\n      * <p>Creates a random string whose length is the number of characters",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}