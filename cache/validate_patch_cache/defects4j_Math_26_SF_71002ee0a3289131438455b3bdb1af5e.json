{
    "patch": "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException {\n    final double sign = FastMath.sign(value);\n    value = FastMath.abs(value);\n    if (Double.isNaN(value)) {\n        this.numerator = 0;\n        this.denominator = 0;\n        if (sign < 0) {\n            this.numerator = -this.numerator;\n        }\n        return;\n    }\n    if (value == 0) {\n        this.numerator = 0;\n        this.denominator = 1;\n        return;\n    }\n\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    long integerPart = (long) value;\n    if (FastMath.abs(integerPart - value) < epsilon) {\n        this.numerator = (int) (sign * integerPart);\n        this.denominator = 1;\n        return;\n    }\n\n    double fraction = value - integerPart;\n    double delta = Double.MAX_VALUE;\n    int i = 0;\n    long p0 = 0;\n    long q0 = 1;\n    long p1 = 1;\n    long q1 = 0;\n    long p2 = 0;\n    long q2 = 0;\n    while (delta > epsilon && q1 < maxDenominator && i++ < maxIterations) {\n        final double a = FastMath.floor(fraction);\n        p2 = a * p1 + p0;\n        q2 = a * q1 + q0;\n        if (p2 > Integer.MAX_VALUE || q2 > Integer.MAX_VALUE) {\n            throw new FractionConversionException(value, p2, q2);\n        }\n        final double fraction2 = 1d / (fraction - a);\n        delta = FastMath.abs(q1 * fraction2 - q2);\n        p0 = p1;\n        p1 = p2;\n        q0 = q1;\n        q1 = q2;\n        fraction = fraction2;\n    }\n\n    if (i >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n\n    if (q2 < maxDenominator) {\n        this.numerator = (int) (sign * p2);\n        this.denominator = (int) q2;\n    } else {\n        this.numerator = (int) (sign * p1);\n        this.denominator = (int) q1;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..bc216521f 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -172,70 +172,70 @@ public class Fraction\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge.\n      */\n-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n-        throws FractionConversionException\n-    {\n-        long overflow = Integer.MAX_VALUE;\n-        double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n-            throw new FractionConversionException(value, a0, 1l);\n-        }\n-\n-        // check for (almost) integer arguments, which should not go\n-        // to iterations.\n-        if (FastMath.abs(a0 - value) < epsilon) {\n-            this.numerator = (int) a0;\n-            this.denominator = 1;\n-            return;\n+private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n+        throws FractionConversionException {\n+    final double sign = FastMath.sign(value);\n+    value = FastMath.abs(value);\n+    if (Double.isNaN(value)) {\n+        this.numerator = 0;\n+        this.denominator = 0;\n+        if (sign < 0) {\n+            this.numerator = -this.numerator;\n         }\n+        return;\n+    }\n+    if (value == 0) {\n+        this.numerator = 0;\n+        this.denominator = 1;\n+        return;\n+    }\n \n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n-\n-        long p2 = 0;\n-        long q2 = 1;\n-\n-        int n = 0;\n-        boolean stop = false;\n-        do {\n-            ++n;\n-            double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n-            }\n-\n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n-                p0 = p1;\n-                p1 = p2;\n-                q0 = q1;\n-                q1 = q2;\n-                a0 = a1;\n-                r0 = r1;\n-            } else {\n-                stop = true;\n-            }\n-        } while (!stop);\n+    // check for (almost) integer arguments, which should not go\n+    // to iterations.\n+    long integerPart = (long) value;\n+    if (FastMath.abs(integerPart - value) < epsilon) {\n+        this.numerator = (int) (sign * integerPart);\n+        this.denominator = 1;\n+        return;\n+    }\n \n-        if (n >= maxIterations) {\n-            throw new FractionConversionException(value, maxIterations);\n+    double fraction = value - integerPart;\n+    double delta = Double.MAX_VALUE;\n+    int i = 0;\n+    long p0 = 0;\n+    long q0 = 1;\n+    long p1 = 1;\n+    long q1 = 0;\n+    long p2 = 0;\n+    long q2 = 0;\n+    while (delta > epsilon && q1 < maxDenominator && i++ < maxIterations) {\n+        final double a = FastMath.floor(fraction);\n+        p2 = a * p1 + p0;\n+        q2 = a * q1 + q0;\n+        if (p2 > Integer.MAX_VALUE || q2 > Integer.MAX_VALUE) {\n+            throw new FractionConversionException(value, p2, q2);\n         }\n+        final double fraction2 = 1d / (fraction - a);\n+        delta = FastMath.abs(q1 * fraction2 - q2);\n+        p0 = p1;\n+        p1 = p2;\n+        q0 = q1;\n+        q1 = q2;\n+        fraction = fraction2;\n+    }\n \n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n-        } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n-        }\n+    if (i >= maxIterations) {\n+        throw new FractionConversionException(value, maxIterations);\n+    }\n \n+    if (q2 < maxDenominator) {\n+        this.numerator = (int) (sign * p2);\n+        this.denominator = (int) q2;\n+    } else {\n+        this.numerator = (int) (sign * p1);\n+        this.denominator = (int) q1;\n     }\n+}\n \n     /**\n      * Create a fraction from an int.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}