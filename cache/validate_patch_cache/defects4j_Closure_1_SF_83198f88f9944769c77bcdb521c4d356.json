{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node function = fnScope.getRootNode();\n\n  Preconditions.checkState(function.isFunction(), \"Expected a function node\");\n\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n  Set<String> referencedParams = new HashSet<>();\n  // Collect the names of referenced parameters.\n  NodeTraversal.traverse(compiler, function, new NodeTraversal.AbstractPostOrderCallback() {\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (!n.isName() || !NodeUtil.isNameDeclaration(parent)) {\n        return;\n      }\n      // Collect names of all declared variables and their property names.\n      String varName = n.getString();\n      boolean isReferenced = NodeUtil.getLValueUses(n).stream()\n          .anyMatch(match -> NodeUtil.isLhsOfAssign(match.node) || match.isCallArgument);\n      if (isReferenced) {\n        referencedParams.add(varName);\n      }\n    }\n  });\n\n  Node arg = argList.getFirstChild();\n  while (arg != null && !referencedParams.isEmpty()) {\n    Node nextArg = arg.getNext();\n    String argName = arg.getString();\n    if (!referencedParams.contains(argName)) {\n      arg.detachFromParent();\n      compiler.reportCodeChange();\n    } else {\n      referencedParams.remove(argName);\n    }\n    arg = nextArg;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..49f8a232 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,50 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  Node function = fnScope.getRootNode();\n+\n+  Preconditions.checkState(function.isFunction(), \"Expected a function node\");\n+\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+  Set<String> referencedParams = new HashSet<>();\n+  // Collect the names of referenced parameters.\n+  NodeTraversal.traverse(compiler, function, new NodeTraversal.AbstractPostOrderCallback() {\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (!n.isName() || !NodeUtil.isNameDeclaration(parent)) {\n+        return;\n       }\n+      // Collect names of all declared variables and their property names.\n+      String varName = n.getString();\n+      boolean isReferenced = NodeUtil.getLValueUses(n).stream()\n+          .anyMatch(match -> NodeUtil.isLhsOfAssign(match.node) || match.isCallArgument);\n+      if (isReferenced) {\n+        referencedParams.add(varName);\n+      }\n+    }\n+  });\n+\n+  Node arg = argList.getFirstChild();\n+  while (arg != null && !referencedParams.isEmpty()) {\n+    Node nextArg = arg.getNext();\n+    String argName = arg.getString();\n+    if (!referencedParams.contains(argName)) {\n+      arg.detachFromParent();\n+      compiler.reportCodeChange();\n     } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+      referencedParams.remove(argName);\n     }\n+    arg = nextArg;\n   }\n+}\n \n \n   /**",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}