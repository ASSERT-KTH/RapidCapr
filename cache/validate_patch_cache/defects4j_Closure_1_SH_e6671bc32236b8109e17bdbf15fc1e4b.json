{
    "patch": "    Preconditions.checkState(function.isFunction() || function.isArrowFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    // Initialize the iterator\n    Node param = argList.getFirstChild();\n    while (param != null && !param.isDefaultValue() && !param.isRest()) {\n      if (!referenced.contains(fnScope.getVar(param.getString()))) {\n        Node next = param.getNext();\n        argList.removeChild(param);\n        param = next;\n        compiler.reportCodeChange();\n      } else {\n        // Keep the param and iterate to the next param\n        param = param.getNext();\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bbebef1e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Preconditions.checkState(function.isFunction() || function.isArrowFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    // Initialize the iterator\n+    Node param = argList.getFirstChild();\n+    while (param != null && !param.isDefaultValue() && !param.isRest()) {\n+      if (!referenced.contains(fnScope.getVar(param.getString()))) {\n+        Node next = param.getNext();\n+        argList.removeChild(param);\n+        param = next;\n+        compiler.reportCodeChange();\n+      } else {\n+        // Keep the param and iterate to the next param\n+        param = param.getNext();\n+      }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}