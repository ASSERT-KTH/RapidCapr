{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    int years = getYears();\n    int months = getMonths();\n\n    if (years != 0 || months != 0) {\n        int totalMonths = years * 12 + months;\n        int normalizedYears = totalMonths / 12;\n        int normalizedMonths = totalMonths % 12;\n\n        if (normalizedYears != 0 && type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(normalizedYears);\n        }\n\n        if (normalizedMonths != 0 && type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(normalizedMonths);\n        }\n    }\n\n    // Add remaining weeks and days\n    if (type.isSupported(DurationFieldType.weeks())) {\n        int weeks = getWeeks();\n        int days = getDays() % 7;\n        weeks += days / 7;\n\n        if (weeks != 0) {\n            result = result.withWeeks(weeks);\n        }\n\n        if (days % 7 != 0 && type.isSupported(DurationFieldType.days())) {\n            result = result.withDays(days % 7);\n        }\n    } else if (type.isSupported(DurationFieldType.days())) {\n        int days = getWeeks() * 7 + getDays();\n        if (days != 0) {\n            result = result.withDays(days);\n        }\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..367ce7dc 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,54 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+\n+    int years = getYears();\n+    int months = getMonths();\n+\n+    if (years != 0 || months != 0) {\n+        int totalMonths = years * 12 + months;\n+        int normalizedYears = totalMonths / 12;\n+        int normalizedMonths = totalMonths % 12;\n+\n+        if (normalizedYears != 0 && type.isSupported(DurationFieldType.years())) {\n+            result = result.withYears(normalizedYears);\n+        }\n+\n+        if (normalizedMonths != 0 && type.isSupported(DurationFieldType.months())) {\n+            result = result.withMonths(normalizedMonths);\n+        }\n+    }\n+\n+    // Add remaining weeks and days\n+    if (type.isSupported(DurationFieldType.weeks())) {\n+        int weeks = getWeeks();\n+        int days = getDays() % 7;\n+        weeks += days / 7;\n+\n+        if (weeks != 0) {\n+            result = result.withWeeks(weeks);\n+        }\n+\n+        if (days % 7 != 0 && type.isSupported(DurationFieldType.days())) {\n+            result = result.withDays(days % 7);\n+        }\n+    } else if (type.isSupported(DurationFieldType.days())) {\n+        int days = getWeeks() * 7 + getDays();\n+        if (days != 0) {\n+            result = result.withDays(days);\n         }\n-        return result;\n     }\n \n+    return result;\n+}\n+\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P2W5D> but was:<P1W5D>",
    "test_result": "FAIL"
}