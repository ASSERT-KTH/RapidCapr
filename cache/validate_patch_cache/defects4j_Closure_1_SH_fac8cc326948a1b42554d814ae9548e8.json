{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    Set<String> unusedParams = new HashSet<>();\n    if (!modifyCallers) {\n        // Collect unreferenced args on the function declaration.\n        Node param = argList.getFirstChild();\n        while (param != null) {\n          Var var = fnScope.getVar(param.getString());\n          if (!referenced.contains(var)) {\n            unusedParams.add(param.getString());\n          }\n          param = param.getNext();\n        }\n    } else {\n        // Collect unreferenced args on each call site.\n        unusedParams = callSiteOptimizer.collectUnusedParams(fnScope, referenced);\n    }\n\n    // Remove all unused args from the function.\n    for (String paramName : unusedParams) {\n      Node param = argList.getFirstChild();\n      while (param != null) {\n        if (param.getString().equals(paramName)) {\n          argList.removeChild(param);\n          compiler.reportCodeChange();\n          break;\n        }\n        param = param.getNext();\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c406f259 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,46 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    Set<String> unusedParams = new HashSet<>();\n+    if (!modifyCallers) {\n+        // Collect unreferenced args on the function declaration.\n+        Node param = argList.getFirstChild();\n+        while (param != null) {\n+          Var var = fnScope.getVar(param.getString());\n+          if (!referenced.contains(var)) {\n+            unusedParams.add(param.getString());\n+          }\n+          param = param.getNext();\n+        }\n+    } else {\n+        // Collect unreferenced args on each call site.\n+        unusedParams = callSiteOptimizer.collectUnusedParams(fnScope, referenced);\n+    }\n+\n+    // Remove all unused args from the function.\n+    for (String paramName : unusedParams) {\n+      Node param = argList.getFirstChild();\n+      while (param != null) {\n+        if (param.getString().equals(paramName)) {\n+          argList.removeChild(param);\n+          compiler.reportCodeChange();\n+          break;\n+        }\n+        param = param.getNext();\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}