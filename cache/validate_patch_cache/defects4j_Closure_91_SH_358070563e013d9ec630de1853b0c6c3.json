{
    "patch": "        // property or subproperty, and not a function getting lent to a prototype.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n        if (NodeUtil.isFunctionExpression(n)) {\n          Node fnNameNode = n.getFirstChild();\n          Node testNameNode = lhs;\n          while (testNameNode.getType() == Token.GETPROP) {\n            testNameNode = testNameNode.getFirstChild();\n          }\n          if (testNameNode.getType() == Token.NAME &&\n              fnNameNode != null &&\n              !fnNameNode.getString().equals(testNameNode.getString())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..5a631172 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,27 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+        // property or subproperty, and not a function getting lent to a prototype.\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+        if (NodeUtil.isFunctionExpression(n)) {\n+          Node fnNameNode = n.getFirstChild();\n+          Node testNameNode = lhs;\n+          while (testNameNode.getType() == Token.GETPROP) {\n+            testNameNode = testNameNode.getFirstChild();\n+          }\n+          if (testNameNode.getType() == Token.NAME &&\n+              fnNameNode != null &&\n+              !fnNameNode.getString().equals(testNameNode.getString())) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}