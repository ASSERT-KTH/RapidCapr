{
    "patch": "    @Override\n    public RealVector doOptimize() throws OptimizationException {\n        final double[] targetValues = getTarget();\n        final int nR = targetValues.length;\n        final int nC = start.getDimension();\n        final double[] residualsWeights = getWeight() == null ? new double[nR] : getWeight().getWeights();\n        final double[] sortedResidualsWeights = residualsWeights.clone();\n        Arrays.sort(sortedResidualsWeights);\n\n        final double[] sortedResiduals = new double[nR];\n        final int[] index = new int[nR];\n        final double[] weights = new double[nR];\n        final double[] currentPoint = start.toArray();\n        final double[] lowerBound = getLowerBound();\n        final double[] upperBound = getUpperBound();\n        final RealMatrix jacobian = createJacobianMatrix();\n        final double[] residuals = new double[nR];\n        final double[] oldResiduals = new double[nR];\n\n        // Initialize the Jacobian matrix, residuals vector, and indexes.\n        evaluateJacobian(currentPoint, targetValues, jacobian);\n        computeResiduals(currentPoint, targetValues, residuals);\n\n        // Set the indices.\n        for (int i = 0; i < nR; ++i) {\n            index[i] = i;\n        }\n\n        // Set lambda1.\n        double lambda1 = 0.01 * sortedResidualsWeights[nR - 1] / sortedResidualsWeights[0];\n        lambda1 = lambda1 * lambda1;\n\n        // Set the square root of the machine precision.\n        final double eps = FastMath.sqrt(Precision.EPSILON);\n\n        // Compute the norm of the weighted Jacobian matrix.\n        double weightedNorm = 0.0;\n        for (int i = 0; i < nR; ++i) {\n            for (int j = 0; j < nC; ++j) {\n                weightedNorm += FastMath.pow(residualsWeights[i] * jacobian.getEntry(i, j), 2.0);\n            }\n        }\n        weightedNorm = FastMath.sqrt(weightedNorm);\n\n        // Set the initial step bound.\n        double s = 0.1 * weightedNorm;\n        if (s == 0.0) {\n            s = 0.1;\n        }\n\n        // Set the tolerance.\n        final double tolerance = getRelativeThreshold() * weightedNorm;\n\n        // Compute the initial residual sum of squares.\n        double rss = 0.0;\n        for (int i = 0; i < nR; ++i) {\n            final double r = residuals[index[i]] * residualsWeights[index[i]];\n            rss += r * r;\n        }\n\n        // Set the checks to the maximum number of checks.\n        int count = getMaxEvaluations();\n\n        while (rss > tolerance * tolerance && count-- > 0) {\n            // Save a copy of the residuals.\n            System.arraycopy(residuals, 0, oldResiduals, 0, nR);\n\n            // Compute the QR factorization of the weighted Jacobian matrix.\n            for (int j = 0; j < nC; ++j) {\n                for (int i = j; i < nR; ++i) {\n                    weights[i] = residualsWeights[index[i]];\n                }\n\n                // Make a copy of the column to avoid working on the original column.\n                final double[] colJ = jacobian.getColumn(index, j);\n\n                // Householder transformation to compute the norms and the new column.\n                MatrixUtils.householderUpperTriangular(colJ, weights, j, currentPoint[j], eps);\n                jacobian.setColumn(index, j, colJ);\n            }\n\n            // Compute the rank of the weighted Jacobian matrix.\n            int rank = 0;\n            for (int j = 0; j < nC; ++j) {\n                if (MatrixUtils.isColumZero(jacobian, j, j, nR)) {\n                    break;\n                }\n                ++rank;\n            }\n\n            if (rank == 0) {\n                throw new OptimizationException(\"rank = 0\");\n            }\n\n            // Compute the weighted residuals.\n            computeResiduals(currentPoint, targetValues, residuals);\n\n            // Permute the original order of the residual values.\n            Arrays.sort(index, 0, nR, new ResidualIndexComparator(residuals));\n\n            // Update the Q matrix.\n            for (int i = 0; i < nR; ++i) {\n                jacobian.setEntry(index[i], nC - 1, i % 2 == 0 ? s : -s);\n            }\n\n            // Compute the L-M parameter.\n            final double[] diag = new double[nC];\n            for (int i = 0; i < nC; ++i) {\n                diag[i] = jacobian.getEntry(i, i);\n                if (diag[i] != 0.0) {\n                    diag[i] = FastMath.sqrt(diag[i]);\n                }\n            }\n\n            final double[] beta = new double[nC];\n            for (int i = 0; i < nR; ++i) {\n                beta[i] = 0.0;\n            }\n\n            computeAugmentedDiagonalSystem(jacobian, beta, diag, currentPoint, index, residualsWeights, nR, nC);\n\n            for (int i = 0; i < nC; ++i) {\n                if (diag[i] != 0.0) {\n                    beta[i] /= diag[i];\n                }\n            }\n\n            // Compute the new function value.\n            double newSsq = 0.0;\n            computeResiduals(currentPoint, targetValues, residuals);\n\n            for (int i = 0; i < nR; ++i) {\n                final double ri = residuals[index[i]] * residualsWeights[index[i]];\n                newSsq += ri * ri;\n            }\n\n            // Compute the actual rediction.\n            final double actualReduction = rss - newSsq;\n\n            // Compute the predicted reduction.\n            double[] leftHandSide = new double[nC];\n            computeUJSVDecomposition(jacobian, beta, nR, nC);\n\n            for (int i = 0; i < nC; ++i) {\n                double rhsI = 0.0;\n                for (int j = 0; j < nR; ++j) {\n                    rhsI += jacobian.getEntry(j, i) * residuals[index[j]] * residualsWeights[index[j]];\n                }\n                leftHandSide[i] = rhsI / diag[i];\n            }\n\n            final double[] rightHandSide = new double[nC];\n            for (int i = 0; i < nC; ++i) {\n                rightHandSide[i] = beta[i] * lambda1;\n            }\n\n            final double[] solution = solveUJSVSystem(leftHandSide, diag, beta, rightHandSide);\n\n            double predictedReduction = 0.0;\n            for (int i = 0; i < nC; ++i) {\n                predictedReduction += solution[i] * (leftHandSide[i] - rightHandSide[i]);\n            }\n\n            // Compute the ratio of the actual to predicted reduction.\n            double ratio = predictedReduction != 0.0 ? actualReduction / predictedReduction : 2.0;\n\n            // Update the lambda1 value.\n            if (ratio < 0.25) {\n                final double tmp = actualReduction < 0.0 ? (0.5 * (predictedReduction / (predictedReduction - actualReduction))) : 0.5;\n                if (tmp < 0.1) {\n                    tmp = 0.1;\n                }\n                lambda1 *= tmp;\n                s *= tmp;\n            } else if (ratio > 0.75) {\n                lambda1 *= 2.0;\n                s *= 0.5;\n            }\n\n            // Check if the new solution is the minimum.\n            if (ratio > 0.0001) {\n                double[] newPoint = new double[nC];\n                for (int i = 0; i < nC; ++i) {\n                    newPoint[index[i]] = currentPoint[index[i]] + solution[i];\n                    if (lowerBound != null) {\n                        newPoint[index[i]] = FastMath.max(lowerBound[index[i]], newPoint[index[i]]);\n                    }\n                    if (upperBound != null) {\n                        newPoint[index[i]] = FastMath.mi",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\nindex 50914932e..29eb16efc 100644\n--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n@@ -238,230 +238,195 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected VectorialPointValuePair doOptimize()\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        // arrays shared with the other private methods\n-        solvedCols  = Math.min(rows, cols);\n-        diagR       = new double[cols];\n-        jacNorm     = new double[cols];\n-        beta        = new double[cols];\n-        permutation = new int[cols];\n-        lmDir       = new double[cols];\n-\n-        // local point\n-        double   delta   = 0;\n-        double   xNorm   = 0;\n-        double[] diag    = new double[cols];\n-        double[] oldX    = new double[cols];\n-        double[] oldRes  = new double[rows];\n-        double[] work1   = new double[cols];\n-        double[] work2   = new double[cols];\n-        double[] work3   = new double[cols];\n-\n-        // evaluate the function at the starting point and calculate its norm\n-        updateResidualsAndCost();\n-\n-        // outer loop\n-        lmPar = 0;\n-        boolean firstIteration = true;\n-        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n-        while (true) {\n-            incrementIterationsCounter();\n-\n-            // compute the Q.R. decomposition of the jacobian matrix\n-            VectorialPointValuePair previous = current;\n-            updateJacobian();\n-            qrDecomposition();\n-\n-            // compute Qt.res\n-            qTy(residuals);\n-            // now we don't need Q anymore,\n-            // so let jacobian contain the R matrix with its diagonal elements\n-            for (int k = 0; k < solvedCols; ++k) {\n-                int pk = permutation[k];\n-                jacobian[k][pk] = diagR[pk];\n+    @Override\n+    public RealVector doOptimize() throws OptimizationException {\n+        final double[] targetValues = getTarget();\n+        final int nR = targetValues.length;\n+        final int nC = start.getDimension();\n+        final double[] residualsWeights = getWeight() == null ? new double[nR] : getWeight().getWeights();\n+        final double[] sortedResidualsWeights = residualsWeights.clone();\n+        Arrays.sort(sortedResidualsWeights);\n+\n+        final double[] sortedResiduals = new double[nR];\n+        final int[] index = new int[nR];\n+        final double[] weights = new double[nR];\n+        final double[] currentPoint = start.toArray();\n+        final double[] lowerBound = getLowerBound();\n+        final double[] upperBound = getUpperBound();\n+        final RealMatrix jacobian = createJacobianMatrix();\n+        final double[] residuals = new double[nR];\n+        final double[] oldResiduals = new double[nR];\n+\n+        // Initialize the Jacobian matrix, residuals vector, and indexes.\n+        evaluateJacobian(currentPoint, targetValues, jacobian);\n+        computeResiduals(currentPoint, targetValues, residuals);\n+\n+        // Set the indices.\n+        for (int i = 0; i < nR; ++i) {\n+            index[i] = i;\n+        }\n+\n+        // Set lambda1.\n+        double lambda1 = 0.01 * sortedResidualsWeights[nR - 1] / sortedResidualsWeights[0];\n+        lambda1 = lambda1 * lambda1;\n+\n+        // Set the square root of the machine precision.\n+        final double eps = FastMath.sqrt(Precision.EPSILON);\n+\n+        // Compute the norm of the weighted Jacobian matrix.\n+        double weightedNorm = 0.0;\n+        for (int i = 0; i < nR; ++i) {\n+            for (int j = 0; j < nC; ++j) {\n+                weightedNorm += FastMath.pow(residualsWeights[i] * jacobian.getEntry(i, j), 2.0);\n             }\n+        }\n+        weightedNorm = FastMath.sqrt(weightedNorm);\n \n-            if (firstIteration) {\n+        // Set the initial step bound.\n+        double s = 0.1 * weightedNorm;\n+        if (s == 0.0) {\n+            s = 0.1;\n+        }\n \n-                // scale the point according to the norms of the columns\n-                // of the initial jacobian\n-                xNorm = 0;\n-                for (int k = 0; k < cols; ++k) {\n-                    double dk = jacNorm[k];\n-                    if (dk == 0) {\n-                        dk = 1.0;\n-                    }\n-                    double xk = dk * point[k];\n-                    xNorm  += xk * xk;\n-                    diag[k] = dk;\n+        // Set the tolerance.\n+        final double tolerance = getRelativeThreshold() * weightedNorm;\n+\n+        // Compute the initial residual sum of squares.\n+        double rss = 0.0;\n+        for (int i = 0; i < nR; ++i) {\n+            final double r = residuals[index[i]] * residualsWeights[index[i]];\n+            rss += r * r;\n+        }\n+\n+        // Set the checks to the maximum number of checks.\n+        int count = getMaxEvaluations();\n+\n+        while (rss > tolerance * tolerance && count-- > 0) {\n+            // Save a copy of the residuals.\n+            System.arraycopy(residuals, 0, oldResiduals, 0, nR);\n+\n+            // Compute the QR factorization of the weighted Jacobian matrix.\n+            for (int j = 0; j < nC; ++j) {\n+                for (int i = j; i < nR; ++i) {\n+                    weights[i] = residualsWeights[index[i]];\n                 }\n-                xNorm = Math.sqrt(xNorm);\n \n-                // initialize the step bound delta\n-                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);\n+                // Make a copy of the column to avoid working on the original column.\n+                final double[] colJ = jacobian.getColumn(index, j);\n \n+                // Householder transformation to compute the norms and the new column.\n+                MatrixUtils.householderUpperTriangular(colJ, weights, j, currentPoint[j], eps);\n+                jacobian.setColumn(index, j, colJ);\n             }\n \n-            // check orthogonality between function vector and jacobian columns\n-            double maxCosine = 0;\n-            if (cost != 0) {\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int    pj = permutation[j];\n-                    double s  = jacNorm[pj];\n-                    if (s != 0) {\n-                        double sum = 0;\n-                        for (int i = 0; i <= j; ++i) {\n-                            sum += jacobian[i][pj] * residuals[i];\n-                        }\n-                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));\n-                    }\n+            // Compute the rank of the weighted Jacobian matrix.\n+            int rank = 0;\n+            for (int j = 0; j < nC; ++j) {\n+                if (MatrixUtils.isColumZero(jacobian, j, j, nR)) {\n+                    break;\n                 }\n-            }\n-            if (maxCosine <= orthoTolerance) {\n-                // convergence has been reached\n-                return current;\n+                ++rank;\n             }\n \n-            // rescale if necessary\n-            for (int j = 0; j < cols; ++j) {\n-                diag[j] = Math.max(diag[j], jacNorm[j]);\n+            if (rank == 0) {\n+                throw new OptimizationException(\"rank = 0\");\n             }\n \n-            // inner loop\n-            for (double ratio = 0; ratio < 1.0e-4;) {\n+            // Compute the weighted residuals.\n+            computeResiduals(currentPoint, targetValues, residuals);\n \n-                // save the state\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    oldX[pj] = point[pj];\n-                }\n-                double previousCost = cost;\n-                double[] tmpVec = residuals;\n-                residuals = oldRes;\n-                oldRes    = tmpVec;\n-\n-                // determine the Levenberg-Marquardt parameter\n-                determineLMParameter(oldRes, delta, diag, work1, work2, work3);\n-\n-                // compute the new point and the norm of the evolution direction\n-                double lmNorm = 0;\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    lmDir[pj] = -lmDir[pj];\n-                    point[pj] = oldX[pj] + lmDir[pj];\n-                    double s = diag[pj] * lmDir[pj];\n-                    lmNorm  += s * s;\n-                }\n-                lmNorm = Math.sqrt(lmNorm);\n-                // on the first iteration, adjust the initial step bound.\n-                if (firstIteration) {\n-                    delta = Math.min(delta, lmNorm);\n-                }\n+            // Permute the original order of the residual values.\n+            Arrays.sort(index, 0, nR, new ResidualIndexComparator(residuals));\n \n-                // evaluate the function at x + p and calculate its norm\n-                updateResidualsAndCost();\n-                current = new VectorialPointValuePair(point, objective);\n+            // Update the Q matrix.\n+            for (int i = 0; i < nR; ++i) {\n+                jacobian.setEntry(index[i], nC - 1, i % 2 == 0 ? s : -s);\n+            }\n \n-                // compute the scaled actual reduction\n-                double actRed = -1.0;\n-                if (0.1 * cost < previousCost) {\n-                    double r = cost / previousCost;\n-                    actRed = 1.0 - r * r;\n+            // Compute the L-M parameter.\n+            final double[] diag = new double[nC];\n+            for (int i = 0; i < nC; ++i) {\n+                diag[i] = jacobian.getEntry(i, i);\n+                if (diag[i] != 0.0) {\n+                    diag[i] = FastMath.sqrt(diag[i]);\n                 }\n+            }\n \n-                // compute the scaled predicted reduction\n-                // and the scaled directional derivative\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    double dirJ = lmDir[pj];\n-                    work1[j] = 0;\n-                    for (int i = 0; i <= j; ++i) {\n-                        work1[i] += jacobian[i][pj] * dirJ;\n-                    }\n-                }\n-                double coeff1 = 0;\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    coeff1 += work1[j] * work1[j];\n-                }\n-                double pc2 = previousCost * previousCost;\n-                coeff1 = coeff1 / pc2;\n-                double coeff2 = lmPar * lmNorm * lmNorm / pc2;\n-                double preRed = coeff1 + 2 * coeff2;\n-                double dirDer = -(coeff1 + coeff2);\n-\n-                // ratio of the actual to the predicted reduction\n-                ratio = (preRed == 0) ? 0 : (actRed / preRed);\n-\n-                // update the step bound\n-                if (ratio <= 0.25) {\n-                    double tmp =\n-                        (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;\n-                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {\n-                            tmp = 0.1;\n-                        }\n-                        delta = tmp * Math.min(delta, 10.0 * lmNorm);\n-                        lmPar /= tmp;\n-                } else if ((lmPar == 0) || (ratio >= 0.75)) {\n-                    delta = 2 * lmNorm;\n-                    lmPar *= 0.5;\n-                }\n+            final double[] beta = new double[nC];\n+            for (int i = 0; i < nR; ++i) {\n+                beta[i] = 0.0;\n+            }\n \n-                // test for successful iteration.\n-                if (ratio >= 1.0e-4) {\n-                    // successful iteration, update the norm\n-                    firstIteration = false;\n-                    xNorm = 0;\n-                    for (int k = 0; k < cols; ++k) {\n-                        double xK = diag[k] * point[k];\n-                        xNorm    += xK * xK;\n-                    }\n-                    xNorm = Math.sqrt(xNorm);\n-\n-                    // tests for convergence.\n-                    // we use the vectorial convergence checker\n-                } else {\n-                    // failed iteration, reset the previous values\n-                    cost = previousCost;\n-                    for (int j = 0; j < solvedCols; ++j) {\n-                        int pj = permutation[j];\n-                        point[pj] = oldX[pj];\n-                    }\n-                    tmpVec    = residuals;\n-                    residuals = oldRes;\n-                    oldRes    = tmpVec;\n-                }\n-                if (checker==null) {\n-                \tif (((Math.abs(actRed) <= costRelativeTolerance) &&\n-                        (preRed <= costRelativeTolerance) &&\n-                        (ratio <= 2.0)) ||\n-                       (delta <= parRelativeTolerance * xNorm)) {\n-                       return current;\n-                   }\n-                } else {\n-                    if (checker.converged(getIterations(), previous, current)) {\n-                        return current;\n-                    }\n+            computeAugmentedDiagonalSystem(jacobian, beta, diag, currentPoint, index, residualsWeights, nR, nC);\n+\n+            for (int i = 0; i < nC; ++i) {\n+                if (diag[i] != 0.0) {\n+                    beta[i] /= diag[i];\n                 }\n-                // tests for termination and stringent tolerances\n-                // (2.2204e-16 is the machine epsilon for IEEE754)\n-                if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,\n-                            costRelativeTolerance);\n-                } else if (delta <= 2.2204e-16 * xNorm) {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,\n-                            parRelativeTolerance);\n-                } else if (maxCosine <= 2.2204e-16)  {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,\n-                            orthoTolerance);\n+            }\n+\n+            // Compute the new function value.\n+            double newSsq = 0.0;\n+            computeResiduals(currentPoint, targetValues, residuals);\n+\n+            for (int i = 0; i < nR; ++i) {\n+                final double ri = residuals[index[i]] * residualsWeights[index[i]];\n+                newSsq += ri * ri;\n+            }\n+\n+            // Compute the actual rediction.\n+            final double actualReduction = rss - newSsq;\n+\n+            // Compute the predicted reduction.\n+            double[] leftHandSide = new double[nC];\n+            computeUJSVDecomposition(jacobian, beta, nR, nC);\n+\n+            for (int i = 0; i < nC; ++i) {\n+                double rhsI = 0.0;\n+                for (int j = 0; j < nR; ++j) {\n+                    rhsI += jacobian.getEntry(j, i) * residuals[index[j]] * residualsWeights[index[j]];\n                 }\n+                leftHandSide[i] = rhsI / diag[i];\n+            }\n \n+            final double[] rightHandSide = new double[nC];\n+            for (int i = 0; i < nC; ++i) {\n+                rightHandSide[i] = beta[i] * lambda1;\n             }\n \n-        }\n+            final double[] solution = solveUJSVSystem(leftHandSide, diag, beta, rightHandSide);\n \n-    }\n+            double predictedReduction = 0.0;\n+            for (int i = 0; i < nC; ++i) {\n+                predictedReduction += solution[i] * (leftHandSide[i] - rightHandSide[i]);\n+            }\n+\n+            // Compute the ratio of the actual to predicted reduction.\n+            double ratio = predictedReduction != 0.0 ? actualReduction / predictedReduction : 2.0;\n+\n+            // Update the lambda1 value.\n+            if (ratio < 0.25) {\n+                final double tmp = actualReduction < 0.0 ? (0.5 * (predictedReduction / (predictedReduction - actualReduction))) : 0.5;\n+                if (tmp < 0.1) {\n+                    tmp = 0.1;\n+                }\n+                lambda1 *= tmp;\n+                s *= tmp;\n+            } else if (ratio > 0.75) {\n+                lambda1 *= 2.0;\n+                s *= 0.5;\n+            }\n+\n+            // Check if the new solution is the minimum.\n+            if (ratio > 0.0001) {\n+                double[] newPoint = new double[nC];\n+                for (int i = 0; i < nC; ++i) {\n+                    newPoint[index[i]] = currentPoint[index[i]] + solution[i];\n+                    if (lowerBound != null) {\n+                        newPoint[index[i]] = FastMath.max(lowerBound[index[i]], newPoint[index[i]]);\n+                    }\n+                    if (upperBound != null) {\n+                        newPoint[index[i]] = FastMath.mi\n \n     /**\n      * Determine the Levenberg-Marquardt parameter.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}