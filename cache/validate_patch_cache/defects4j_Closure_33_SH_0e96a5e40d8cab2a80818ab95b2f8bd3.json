{
    "patch": "if (constraintObj.isAnonymousObjectType()) {\n  // Handle the case where the constraint object is an anonymous object type.\n  //\n  // We want to modify the object literal to match the constraint, by taking each\n  // property that exists on the record and trying to match properties on this\n  // object.\n  ObjectType recordType = constraintObj.getAnonymousObjectType();\n  for (String prop : recordType.getOwnPropertyNames()) {\n    JSType propType = recordType.getPropertyType(prop);\n    if (!isPropertyTypeDeclared(prop)) {\n      JSType typeToInfer = propType;\n      if (!hasProperty(prop)) {\n        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                    .getLeastSupertype(propType);\n      }\n      defineInferredProperty(prop, typeToInfer, null);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..95047418 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,25 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (constraintObj.isAnonymousObjectType()) {\n+  // Handle the case where the constraint object is an anonymous object type.\n+  //\n+  // We want to modify the object literal to match the constraint, by taking each\n+  // property that exists on the record and trying to match properties on this\n+  // object.\n+  ObjectType recordType = constraintObj.getAnonymousObjectType();\n+  for (String prop : recordType.getOwnPropertyNames()) {\n+    JSType propType = recordType.getPropertyType(prop);\n+    if (!isPropertyTypeDeclared(prop)) {\n+      JSType typeToInfer = propType;\n+      if (!hasProperty(prop)) {\n+        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                    .getLeastSupertype(propType);\n+      }\n+      defineInferredProperty(prop, typeToInfer, null);\n+    }\n+  }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}