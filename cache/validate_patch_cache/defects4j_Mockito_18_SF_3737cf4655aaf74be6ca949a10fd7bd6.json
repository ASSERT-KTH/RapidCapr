{
    "patch": "public static Map<String, Object> fromJson(String json) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, Object>>() {}.getType();\n    if (json == null || json.trim().isEmpty()) {\n        return Collections.emptyMap(); \n    } else {\n        return gson.fromJson(json, type);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..8cb02fdd2 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,15 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<String, Object> fromJson(String json) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, Object>>() {}.getType();\n+    if (json == null || json.trim().isEmpty()) {\n+        return Collections.emptyMap(); \n+    } else {\n+        return gson.fromJson(json, type);\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}