{
    "patch": "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n\n    // positive cost non-artificial variables\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n\n    // non-basic artificial variables\n    for (int i = getNumObjectiveFunctions(); i < getWidth(); i++) {\n        Integer row = getBasicRow(i);\n        if (row != null) {\n            double entry = tableau.getEntry(row, i);\n            if (Precision.compareTo(entry, 0d, maxUlps) != 0) {\n                // we have found a basic variable with non-zero coefficient\n                // it must be replaced with something else via pivot\n                columnsToDrop.add(i);\n            }\n        } else if (Precision.compareTo(tableau.getEntry(0, i), 0d, maxUlps) == 0) {\n            // non-basic slack with zero cost\n            columnsToDrop.add(i);\n        }\n    }\n\n    int height = getHeight() - 1;\n    int width = getWidth() - columnsToDrop.size();\n    if (width <= 0) {\n        throw new MathIllegalStateException(LocalizedCoreFormats.NO_CONVERGENCE_WITH_ANY_START_POINT);\n    }\n\n    double[][] matrix = new double[height][width];\n    int col = 0;\n    for (int j = 0; j < getWidth(); j++) {\n        if (!columnsToDrop.contains(j)) {\n            int row = 0;\n            for (int i = 1; i < getHeight(); i++) {\n                matrix[row++][col] = tableau.getEntry(i, j);\n            }\n            getColumnLabels().set(col, getOriginalColumnLabels()[j - 1]);\n            col++;\n        }\n    }\n\n    this.tableau = new Array2DRowRealMatrix(matrix);\n    this.numArtificialVariables = 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..8b756d761 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -324,48 +324,61 @@ class SimplexTableau implements Serializable {\n      * Removes the phase 1 objective function, positive cost non-artificial variables,\n      * and the non-basic artificial variables from this tableau.\n      */\n-    protected void dropPhase1Objective() {\n-        if (getNumObjectiveFunctions() == 1) {\n-            return;\n-        }\n+protected void dropPhase1Objective() {\n+    if (getNumObjectiveFunctions() == 1) {\n+        return;\n+    }\n \n-        List<Integer> columnsToDrop = new ArrayList<Integer>();\n-        columnsToDrop.add(0);\n+    List<Integer> columnsToDrop = new ArrayList<Integer>();\n+    columnsToDrop.add(0);\n \n-        // positive cost non-artificial variables\n-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n-            final double entry = tableau.getEntry(0, i);\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+    // positive cost non-artificial variables\n+    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n+        final double entry = tableau.getEntry(0, i);\n+        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+            columnsToDrop.add(i);\n+        }\n+    }\n+\n+    // non-basic artificial variables\n+    for (int i = getNumObjectiveFunctions(); i < getWidth(); i++) {\n+        Integer row = getBasicRow(i);\n+        if (row != null) {\n+            double entry = tableau.getEntry(row, i);\n+            if (Precision.compareTo(entry, 0d, maxUlps) != 0) {\n+                // we have found a basic variable with non-zero coefficient\n+                // it must be replaced with something else via pivot\n                 columnsToDrop.add(i);\n             }\n+        } else if (Precision.compareTo(tableau.getEntry(0, i), 0d, maxUlps) == 0) {\n+            // non-basic slack with zero cost\n+            columnsToDrop.add(i);\n         }\n+    }\n \n-        // non-basic artificial variables\n-        for (int i = 0; i < getNumArtificialVariables(); i++) {\n-          int col = i + getArtificialVariableOffset();\n-          if (getBasicRow(col) == null) {\n-            columnsToDrop.add(col);\n-          }\n-        }\n+    int height = getHeight() - 1;\n+    int width = getWidth() - columnsToDrop.size();\n+    if (width <= 0) {\n+        throw new MathIllegalStateException(LocalizedCoreFormats.NO_CONVERGENCE_WITH_ANY_START_POINT);\n+    }\n \n-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n-        for (int i = 1; i < getHeight(); i++) {\n-          int col = 0;\n-          for (int j = 0; j < getWidth(); j++) {\n-            if (!columnsToDrop.contains(j)) {\n-              matrix[i - 1][col++] = tableau.getEntry(i, j);\n+    double[][] matrix = new double[height][width];\n+    int col = 0;\n+    for (int j = 0; j < getWidth(); j++) {\n+        if (!columnsToDrop.contains(j)) {\n+            int row = 0;\n+            for (int i = 1; i < getHeight(); i++) {\n+                matrix[row++][col] = tableau.getEntry(i, j);\n             }\n-          }\n-        }\n-\n-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n-          columnLabels.remove((int) columnsToDrop.get(i));\n+            getColumnLabels().set(col, getOriginalColumnLabels()[j - 1]);\n+            col++;\n         }\n-\n-        this.tableau = new Array2DRowRealMatrix(matrix);\n-        this.numArtificialVariables = 0;\n     }\n \n+    this.tableau = new Array2DRowRealMatrix(matrix);\n+    this.numArtificialVariables = 0;\n+}\n+\n     /**\n      * @param src the source array\n      * @param dest the destination array",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}