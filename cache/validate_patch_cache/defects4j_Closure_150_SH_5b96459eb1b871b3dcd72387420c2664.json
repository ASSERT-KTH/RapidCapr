{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n              if (parent.getFirstChild() == n) { // Fix for handling function declarations\n                  defineDeclaredFunction(n, parent);\n              }\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.LP:\n          if (NodeUtil.isFunctionExpression(n.getFirstChild())) {\n            defineDeclaredFunction(n.getFirstChild(), parent);\n          }\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..77999418 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1452,6 +1452,9 @@ final class TypedScopeCreator implements ScopeCreator {\n       switch (n.getType()) {\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n+              if (parent.getFirstChild() == n) { // Fix for handling function declarations\n+                  defineDeclaredFunction(n, parent);\n+              }\n             return;\n           }\n           defineDeclaredFunction(n, parent);\n@@ -1462,7 +1465,11 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n-      }\n+        case Token.LP:\n+          if (NodeUtil.isFunctionExpression(n.getFirstChild())) {\n+            defineDeclaredFunction(n.getFirstChild(), parent);\n+          }\n+          break;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}