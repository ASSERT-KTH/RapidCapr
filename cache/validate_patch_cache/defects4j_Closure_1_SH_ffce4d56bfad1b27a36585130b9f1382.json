{
    "patch": "  private void removeUnreferencedFunctionParameters(Scope scope, Set<Var> referenced) {\n    Node fn = scope.getRootNode();\n    Preconditions.checkState(fn.isFunction());\n    if (NodeUtil.isGetOrSetKey(fn.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(fn);\n\n    // Strip unreferenced args from the beginning of the parameter list.\n    for (Node arg : argList.children()) {\n      Var var = scope.getVar(arg.getString());\n      if (!referenced.contains(var) && (arg.getJSDocInfo() == null || !arg.getJSDocInfo().isOptional())) {\n        argList.removeChild(arg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n\n    // Strip unreferenced args off the end of the parameter list.\n    for (Node arg : Lists.reverse(argList.children())) {\n      Var var = scope.getVar(arg.getString());\n      if (!referenced.contains(var) && (arg.getJSDocInfo() == null || !arg.getJSDocInfo().isOptional())) {\n        argList.removeChild(arg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0865c254 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,38 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  private void removeUnreferencedFunctionParameters(Scope scope, Set<Var> referenced) {\n+    Node fn = scope.getRootNode();\n+    Preconditions.checkState(fn.isFunction());\n+    if (NodeUtil.isGetOrSetKey(fn.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(fn);\n+\n+    // Strip unreferenced args from the beginning of the parameter list.\n+    for (Node arg : argList.children()) {\n+      Var var = scope.getVar(arg.getString());\n+      if (!referenced.contains(var) && (arg.getJSDocInfo() == null || !arg.getJSDocInfo().isOptional())) {\n+        argList.removeChild(arg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+    }\n+\n+    // Strip unreferenced args off the end of the parameter list.\n+    for (Node arg : Lists.reverse(argList.children())) {\n+      Var var = scope.getVar(arg.getString());\n+      if (!referenced.contains(var) && (arg.getJSDocInfo() == null || !arg.getJSDocInfo().isOptional())) {\n+        argList.removeChild(arg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}