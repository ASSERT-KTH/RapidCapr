{
    "patch": "attachLiteralTypes(n);\nswitch (n.getType()) {\n  case Token.FUNCTION:\n    if ((parent == null || !NodeUtil.isFunctionDeclaration(parent)) &&\n        (parent != null && parent.getType() != Token.NAME)) {\n      defineDeclaredFunction(n, parent);\n    }\n    break;\n  case Token.CATCH:\n    defineCatch(n, parent);\n    break;\n  case Token.VAR:\n    defineVar(n, parent);\n    break;\n  case Token.LP:\n    if (parent != null && (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.ASSIGN)) {\n      handleFunctionInputs(n);\n    } else if (parent == scope.getRootNode()) {\n      if (NodeUtil.isFunctionExpression(parent)) {\n        handleFunctionInputs(parent);\n      } else if (parent.getParent() != null && parent.getParent().getType() == Token.ASSIGN) {\n        handleFunctionInputs(parent.getParent());\n      }\n    }\n    break;\n  default:\n    break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..77689852 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,22 +1448,35 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+attachLiteralTypes(n);\n+switch (n.getType()) {\n+  case Token.FUNCTION:\n+    if ((parent == null || !NodeUtil.isFunctionDeclaration(parent)) &&\n+        (parent != null && parent.getType() != Token.NAME)) {\n+      defineDeclaredFunction(n, parent);\n+    }\n+    break;\n+  case Token.CATCH:\n+    defineCatch(n, parent);\n+    break;\n+  case Token.VAR:\n+    defineVar(n, parent);\n+    break;\n+  case Token.LP:\n+    if (parent != null && (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.ASSIGN)) {\n+      handleFunctionInputs(n);\n+    } else if (parent == scope.getRootNode()) {\n+      if (NodeUtil.isFunctionExpression(parent)) {\n+        handleFunctionInputs(parent);\n+      } else if (parent.getParent() != null && parent.getParent().getType() == Token.ASSIGN) {\n+        handleFunctionInputs(parent.getParent());\n       }\n     }\n+    break;\n+  default:\n+    break;\n+}\n+    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}