{
    "patch": "import com.google.common.base.Joiner;\nimport com.google.javascript.jscomp.AbstractCompiler;\nimport com.google.javascript.jscomp.CheckLevel;\nimport com.google.javascript.jscomp.Compiler;\nimport com.google.javascript.jscomp.CompilerOptions;\nimport com.google.javascript.jscomp.DiagnosticType;\nimport com.google.javascript.jscomp.JSCompiler;\nimport com.google.javascript.jscomp.JSError;\nimport com.google.javascript.jscomp.SourceFile;\nimport com.google.javascript.jscomp.testing.FlowScopeSubject;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.ObjectType;\nimport com.google.javascript.rhino.jstype.TernaryValue;\nimport com.google.javascript.rhino.jstype.UnionType;\n\nimport junit.framework.TestCase;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Test case for {@link InferTypes}\n */\npublic final class InferTypesTest extends TestCase {\n\n  public static final String INVALID_INFERRED_TYPE = \"JSC_INFERRED_TYPE_INVALID\";\n\n  /**\n   * Function that contains the bug. This function is corrected in the subsequent tests.\n   */\n  private static void inferRecordType(\n      List<JSError> warnings, Node n, JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n              warnings.add(JSError.make(\n                  n, INVALID_INFERRED_TYPE, prop, typeToInfer.toString()));\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n    }\n    return scope;\n  }\n\n  /** Returns a raw type from its string representation. */\n  private static JSType parseType(String js) {\n    Node root = new Node(Token.SCRIPT);\n    root.addChildToFront(\n        new Node(Token.BLOCK, new Node(Token.SCRIPT, new Node(Token.EMPTY))));\n    root.getFirstChild().putProp(Node.SOURCENAME_PROP, \"testcode\");\n    root.getFirstChild().putProp(Node.FROM_SOURCE, \"\");\n    Compiler compiler = new Compiler();\n    CompilerOptions options = new CompilerOptions();\n    compiler.init(\n        ImmutableList.<SourceFile>of(),\n        ImmutableList.of(SourceFile.fromCode(\"testcode\", js)),\n        options);\n    Node script = compiler.parseInputs();\n    Scope scope = new Es6SyntacticScopeCreator(compiler).createScope(script, null);\n    GlobalTypeInfo info = new GlobalTypeInfo(compiler, new SyntacticScopeCreator(compiler));\n    info.collectTranspilationDependencies(script);\n    new TypeCheck(compiler, info, options).processForTesting(null, script);\n    Node expr = NodeUtil.getOnlyExpressionInFunctionBlock(script.getFirstChild().getFirstChild());\n    return expr.getJSType();\n  }\n\n  /** Infers a type for an expression and a constraint. */\n  private static JSType infer(String jsExpr, String jsConstraint) {\n    JSType exprType = parseType(jsExpr);\n    JSType constraintType = parseType(jsConstraint);\n    List<JSError> warnings = new ArrayList<>();\n    inferRecordType(warnings, new Node(Token.SCRIPT), exprType, constraintType);\n    return exprType;\n  }\n\n  public void testIssue669() {\n    String jsSource =\n        \"/** @typedef{{a:number,b:(string|undefined)}}*/\\n\" + // line 1\n            \"var T;\" + // line 2\n            \"/** @return {T} */function f(){}\" + // line 3\n            \"f().c;\"; // line 4\n\n    AbstractCompiler compiler = new Compiler();\n\n    CompilerOptions options = new CompilerOptions();\n    options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT_2020);\n    options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5);\n    options.setCheckTypes(true); // has to be true to trigger the issue\n\n    JSError[] errors =\n        compiler\n            .compile(\n                ImmutableList.of(SourceFile.fromCode(\"testcode\", jsSource)), ImmutableList.of())\n            .errors;\n\n    String[] warningMessages = new String[errors.length];\n    for (int i = 0; i < errors.length; i++) {\n      warningMessages[i] = errors[i].toString();\n    }\n\n    for (String warningMessage : warningMessages) {\n      System.err.println(warningMessage);\n    }\n\n    assertEquals(errors.length, 1);\n    assertEquals(errors[0].getType(), JSError.TYPE_CHECK_OTHER);\n    assertTrue(errors[0].getDescription().contains(\"Property c never defined on\"));\n  }\n\n  public void testInferPropertyType_simple() {\n    String jsExpr = \"({x: 3})\";\n    String jsConstraint = \"({x: number})\";\n    JSType inferred = infer(jsExpr, jsConstraint);\n    ObjectType objType = ObjectType.cast(inferred.restrictByNotNullOrUndefined());\n    assertEquals(\n        \"number\",\n        objType.getPropertyType(\"x\").toString());\n  }\n\n  public void testInferPropertyType_union() {\n    String jsExpr = \"({x: 3})\";\n    String jsConstraint = \"({x: (number|null)})\";\n    JSType inferred = infer(jsExpr, jsConstraint);\n    ObjectType objType = ObjectType.cast(inferred.restrictByNotNullOrUndefined());\n    assertTrue(\n        UnionType.of(\n                getNativeType(NUMBER_TYPE),\n                getNativeType(NULL_TYPE))\n            .equals(objType.getPropertyType(\"x\")));\n  }\n\n  public void testInferParameterizedType() {\n    String jsExpr = \"({x: 3})\";\n    String jsConstraint = \"({x: Array<number>})\";\n    JSType inferred = infer(jsExpr, jsConstraint);\n    ObjectType objType = ObjectType.cast(inferred.restrictByNotNullOrUndefined());\n    String arrayTypeString =\n        \"Array<number>|IArrayLike<number>|null|undefined\";\n    assertTrue(objType.getPropertyType(\"x\").toString().contains(arrayTypeString));\n  }\n\n  public void testInferRecordType_missingProperty() {\n    String jsExpr = \"({x: 3})\";\n    String jsConstraint = \"({y: number})\";\n    JSType inferred = infer(jsExpr, jsConstraint);\n    ObjectType objType = ObjectType.cast(inferred.restrictByNotNullOrUndefined());\n    assertFalse(objType.getOwnPropertyNames().contains(\"y\"));\n  }\n\n  public void testInferRecordType_optionalProperty() {\n    String jsExpr = \"({x: 3})\";\n    String jsConstraint = \"({y: (number|undefined)})\";\n    JSType inferred = infer(jsExpr, jsConstraint);\n    ObjectType objType = ObjectType.cast(inferred.restrictByNotNullOrUndefined());\n    assertTrue(\n        UnionType.of(getNativeType(NUMBER_TYPE), getNativeType(NULL_TYPE))\n            .equals(objType.getPropertyType(\"y\")));\n  }\n\n  public void testInferRecordType_inferFromCallSignature() {\n    String jsExpr = \"({x: 'foo'})\";\n    String jsConstraint = \"(function (): {x: number})\";\n    JSType inferred = infer(jsExpr, jsConstraint);\n    ObjectType objType = ObjectType.cast(inferred.restrictByNotNullOrUndefined());\n    assertEquals(\n        \"number\", objType.getPropertyType(\"x\").toString());\n  }\n\n  public void testInferRecordType_complexInference() {\n    String jsExpr = \"({w: 3, x: 'foo', y: 4})\";\n    String jsConstraint =\n        \"({w: (string|undefined), x: number, z: Array<(number|string)>, \"\n            + \"w:(number|null|undefined)})\";\n    JSType inferred = infer(jsExpr, jsConstraint);\n    ObjectType objType = ObjectType.cast(inferred.restrictByNotNullOrUndefined());\n    assertEquals(\n        \"string\", objType.getPropertyType(\"w\").toString());\n    assertEquals(\n        \"number\", objType.getPropertyType(\"x\").toString());\n    assertTrue(\n        UnionType.of(\n                getNativeType(NUMBER_TYPE),\n                getNativeType(NULL_TYPE),\n                getNativeType(VOID_TYPE))\n            .equals(objType.getPropertyType(\"w\")));\n    assertTrue(\n        ObjectType.cast(getNativeType(ARRAY_TYPE))\n            .getIndexedType()\n            .equals(objType.getPropertyType(\"z\")));\n  }\n\n  /** Test that we can handle nested object types */\n  public void testInferRecordType_nestedObjects() {\n    String jsExpr = \"({x: 3})\";\n    String jsConstraint = \"({x: {y: number}})\";\n    JSType inferred = infer(jsExpr, jsConstraint);\n    ObjectType objType = ObjectType.cast(inferred.restrictByNotNullOrUndefined());\n    ObjectType nestedObjType = ObjectType.cast(\n        objType.getPropertyType(\"x\").restrictByNotNullOrUndefined());\n    assertEquals(\n        \"number\", nestedObjType.getPropertyType(\"y\").toString());\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..5f5456d3 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,7 +1111,40 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n+import com.google.common.base.Joiner;\n+import com.google.javascript.jscomp.AbstractCompiler;\n+import com.google.javascript.jscomp.CheckLevel;\n+import com.google.javascript.jscomp.Compiler;\n+import com.google.javascript.jscomp.CompilerOptions;\n+import com.google.javascript.jscomp.DiagnosticType;\n+import com.google.javascript.jscomp.JSCompiler;\n+import com.google.javascript.jscomp.JSError;\n+import com.google.javascript.jscomp.SourceFile;\n+import com.google.javascript.jscomp.testing.FlowScopeSubject;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+import com.google.javascript.rhino.jstype.TernaryValue;\n+import com.google.javascript.rhino.jstype.UnionType;\n+\n+import junit.framework.TestCase;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Test case for {@link InferTypes}\n+ */\n+public final class InferTypesTest extends TestCase {\n+\n+  public static final String INVALID_INFERRED_TYPE = \"JSC_INFERRED_TYPE_INVALID\";\n+\n+  /**\n+   * Function that contains the bug. This function is corrected in the subsequent tests.\n+   */\n+  private static void inferRecordType(\n+      List<JSError> warnings, Node n, JSType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n     }\n@@ -1128,6 +1161,8 @@ class TypeInference\n             if (!objType.hasProperty(prop)) {\n               typeToInfer =\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+              warnings.add(JSError.make(\n+                  n, INVALID_INFERRED_TYPE, prop, typeToInfer.toString()));\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n@@ -1151,6 +1186,169 @@ class TypeInference\n     return scope;\n   }\n \n+  /** Returns a raw type from its string representation. */\n+  private static JSType parseType(String js) {\n+    Node root = new Node(Token.SCRIPT);\n+    root.addChildToFront(\n+        new Node(Token.BLOCK, new Node(Token.SCRIPT, new Node(Token.EMPTY))));\n+    root.getFirstChild().putProp(Node.SOURCENAME_PROP, \"testcode\");\n+    root.getFirstChild().putProp(Node.FROM_SOURCE, \"\");\n+    Compiler compiler = new Compiler();\n+    CompilerOptions options = new CompilerOptions();\n+    compiler.init(\n+        ImmutableList.<SourceFile>of(),\n+        ImmutableList.of(SourceFile.fromCode(\"testcode\", js)),\n+        options);\n+    Node script = compiler.parseInputs();\n+    Scope scope = new Es6SyntacticScopeCreator(compiler).createScope(script, null);\n+    GlobalTypeInfo info = new GlobalTypeInfo(compiler, new SyntacticScopeCreator(compiler));\n+    info.collectTranspilationDependencies(script);\n+    new TypeCheck(compiler, info, options).processForTesting(null, script);\n+    Node expr = NodeUtil.getOnlyExpressionInFunctionBlock(script.getFirstChild().getFirstChild());\n+    return expr.getJSType();\n+  }\n+\n+  /** Infers a type for an expression and a constraint. */\n+  private static JSType infer(String jsExpr, String jsConstraint) {\n+    JSType exprType = parseType(jsExpr);\n+    JSType constraintType = parseType(jsConstraint);\n+    List<JSError> warnings = new ArrayList<>();\n+    inferRecordType(warnings, new Node(Token.SCRIPT), exprType, constraintType);\n+    return exprType;\n+  }\n+\n+  public void testIssue669() {\n+    String jsSource =\n+        \"/** @typedef{{a:number,b:(string|undefined)}}*/\\n\" + // line 1\n+            \"var T;\" + // line 2\n+            \"/** @return {T} */function f(){}\" + // line 3\n+            \"f().c;\"; // line 4\n+\n+    AbstractCompiler compiler = new Compiler();\n+\n+    CompilerOptions options = new CompilerOptions();\n+    options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT_2020);\n+    options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+    options.setCheckTypes(true); // has to be true to trigger the issue\n+\n+    JSError[] errors =\n+        compiler\n+            .compile(\n+                ImmutableList.of(SourceFile.fromCode(\"testcode\", jsSource)), ImmutableList.of())\n+            .errors;\n+\n+    String[] warningMessages = new String[errors.length];\n+    for (int i = 0; i < errors.length; i++) {\n+      warningMessages[i] = errors[i].toString();\n+    }\n+\n+    for (String warningMessage : warningMessages) {\n+      System.err.println(warningMessage);\n+    }\n+\n+    assertEquals(errors.length, 1);\n+    assertEquals(errors[0].getType(), JSError.TYPE_CHECK_OTHER);\n+    assertTrue(errors[0].getDescription().contains(\"Property c never defined on\"));\n+  }\n+\n+  public void testInferPropertyType_simple() {\n+    String jsExpr = \"({x: 3})\";\n+    String jsConstraint = \"({x: number})\";\n+    JSType inferred = infer(jsExpr, jsConstraint);\n+    ObjectType objType = ObjectType.cast(inferred.restrictByNotNullOrUndefined());\n+    assertEquals(\n+        \"number\",\n+        objType.getPropertyType(\"x\").toString());\n+  }\n+\n+  public void testInferPropertyType_union() {\n+    String jsExpr = \"({x: 3})\";\n+    String jsConstraint = \"({x: (number|null)})\";\n+    JSType inferred = infer(jsExpr, jsConstraint);\n+    ObjectType objType = ObjectType.cast(inferred.restrictByNotNullOrUndefined());\n+    assertTrue(\n+        UnionType.of(\n+                getNativeType(NUMBER_TYPE),\n+                getNativeType(NULL_TYPE))\n+            .equals(objType.getPropertyType(\"x\")));\n+  }\n+\n+  public void testInferParameterizedType() {\n+    String jsExpr = \"({x: 3})\";\n+    String jsConstraint = \"({x: Array<number>})\";\n+    JSType inferred = infer(jsExpr, jsConstraint);\n+    ObjectType objType = ObjectType.cast(inferred.restrictByNotNullOrUndefined());\n+    String arrayTypeString =\n+        \"Array<number>|IArrayLike<number>|null|undefined\";\n+    assertTrue(objType.getPropertyType(\"x\").toString().contains(arrayTypeString));\n+  }\n+\n+  public void testInferRecordType_missingProperty() {\n+    String jsExpr = \"({x: 3})\";\n+    String jsConstraint = \"({y: number})\";\n+    JSType inferred = infer(jsExpr, jsConstraint);\n+    ObjectType objType = ObjectType.cast(inferred.restrictByNotNullOrUndefined());\n+    assertFalse(objType.getOwnPropertyNames().contains(\"y\"));\n+  }\n+\n+  public void testInferRecordType_optionalProperty() {\n+    String jsExpr = \"({x: 3})\";\n+    String jsConstraint = \"({y: (number|undefined)})\";\n+    JSType inferred = infer(jsExpr, jsConstraint);\n+    ObjectType objType = ObjectType.cast(inferred.restrictByNotNullOrUndefined());\n+    assertTrue(\n+        UnionType.of(getNativeType(NUMBER_TYPE), getNativeType(NULL_TYPE))\n+            .equals(objType.getPropertyType(\"y\")));\n+  }\n+\n+  public void testInferRecordType_inferFromCallSignature() {\n+    String jsExpr = \"({x: 'foo'})\";\n+    String jsConstraint = \"(function (): {x: number})\";\n+    JSType inferred = infer(jsExpr, jsConstraint);\n+    ObjectType objType = ObjectType.cast(inferred.restrictByNotNullOrUndefined());\n+    assertEquals(\n+        \"number\", objType.getPropertyType(\"x\").toString());\n+  }\n+\n+  public void testInferRecordType_complexInference() {\n+    String jsExpr = \"({w: 3, x: 'foo', y: 4})\";\n+    String jsConstraint =\n+        \"({w: (string|undefined), x: number, z: Array<(number|string)>, \"\n+            + \"w:(number|null|undefined)})\";\n+    JSType inferred = infer(jsExpr, jsConstraint);\n+    ObjectType objType = ObjectType.cast(inferred.restrictByNotNullOrUndefined());\n+    assertEquals(\n+        \"string\", objType.getPropertyType(\"w\").toString());\n+    assertEquals(\n+        \"number\", objType.getPropertyType(\"x\").toString());\n+    assertTrue(\n+        UnionType.of(\n+                getNativeType(NUMBER_TYPE),\n+                getNativeType(NULL_TYPE),\n+                getNativeType(VOID_TYPE))\n+            .equals(objType.getPropertyType(\"w\")));\n+    assertTrue(\n+        ObjectType.cast(getNativeType(ARRAY_TYPE))\n+            .getIndexedType()\n+            .equals(objType.getPropertyType(\"z\")));\n+  }\n+\n+  /** Test that we can handle nested object types */\n+  public void testInferRecordType_nestedObjects() {\n+    String jsExpr = \"({x: 3})\";\n+    String jsConstraint = \"({x: {y: number}})\";\n+    JSType inferred = infer(jsExpr, jsConstraint);\n+    ObjectType objType = ObjectType.cast(inferred.restrictByNotNullOrUndefined());\n+    ObjectType nestedObjType = ObjectType.cast(\n+        objType.getPropertyType(\"x\").restrictByNotNullOrUndefined());\n+    assertEquals(\n+        \"number\", nestedObjType.getPropertyType(\"y\").toString());\n+  }\n+}\n+    }\n+    return scope;\n+  }\n+\n   private JSType getPropertyType(JSType objType, String propName,\n       Node n, FlowScope scope) {\n     // Scopes sometimes contain inferred type info about qualified names.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}