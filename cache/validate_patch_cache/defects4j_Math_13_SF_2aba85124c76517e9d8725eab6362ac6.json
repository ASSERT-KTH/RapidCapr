{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n        EigDecomposition eigenDeco = new EigDecomposition(m);\n        RealMatrix diag = eigenDeco.getD();\n        int n = diag.getColumnDimension();\n        for(int i = 0; i < n; i++) {\n            diag.setEntry(i,i, FastMath.sqrt(diag.getEntry(i,i)));\n        }\n        RealMatrix sqrtM = eigenDeco.getV().multiply(diag).multiply(eigenDeco.getV().transpose());\n        return sqrtM;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..cb40c455b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,13 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+        EigDecomposition eigenDeco = new EigDecomposition(m);\n+        RealMatrix diag = eigenDeco.getD();\n+        int n = diag.getColumnDimension();\n+        for(int i = 0; i < n; i++) {\n+            diag.setEntry(i,i, FastMath.sqrt(diag.getEntry(i,i)));\n+        }\n+        RealMatrix sqrtM = eigenDeco.getV().multiply(diag).multiply(eigenDeco.getV().transpose());\n+        return sqrtM;\n }",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}