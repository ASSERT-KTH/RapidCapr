{
    "patch": "public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50;\n        double hPrev = getA(0, x);\n\n        // use the value of small as epsilon criteria for zero checks\n        if (Precision.equals(hPrev, 0.0, small)) {\n            hPrev = small;\n        }\n\n        int n = 1;\n        double dPrev = 0.0;\n        double p0 = 1.0;\n        double q1 = 1.0;\n        double cPrev = hPrev;\n        double hN = hPrev;\n\n        while (n < maxIterations) {\n            final double a = getA(n, x);\n            final double b = getB(n, x);\n\n            double cN = a * hPrev + b * p0;\n            double q2 = a * q1 + b * dPrev;\n\n            if (Double.isNaN(cN) || Double.isNaN(q2) || Double.isInfinite(cN) || Double.isInfinite(q2)) {\n                // check if both cN and q2 are infinities and have same sign. \n            \t// if yes, then the continued fraction has a true limit that can be calculated manually.\n            \t// else, the continued fraction diverges to NaN if one of the term or both terms are NaN.\n            \t\n                if ((Double.isInfinite(cN) && Double.isInfinite(q2))\n                        && ((cN > 0 && q2 > 0) || (cN < 0 && q2 < 0))) {\n                    hN = cN / q2;\n                    break;\n                } else {\n                    for (int i = 0; i < n; i++) {\n                        double q = getB(i,x) * q1 + getA(i, x) * q2;\n                        double hTemp = getB(i,x) * p0 + getA(i, x) * hPrev;\n                        if (Double.isNaN(q) || Double.isNaN(hTemp) || Double.isInfinite(q) || Double.isInfinite(hTemp)) {\n                            // check to see if the new terms are of the form 0 / 0.\n                        \tif (getB(i,x) == 0.0 && getA(i,x) == 0.0) {\n                                hN = 1.0 / 0.0; // infinity\n                                break;\n                            }\n                        \telse {\n                                throw new ConvergenceException(\n                                \t\tLocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                            }\n                        } else {\n                            hPrev = p0;\n                            p0 = hTemp;\n                            dPrev = q1;\n                            q1 = q;\n                            q2 = dPrev + q * epsilon;\n                            if (i == n - 1) {\n                                hN = p0 / q2;\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n\n            final double deltaN = cN / q2 / cPrev;\n            hN = cPrev * deltaN;\n\n            if (Double.isInfinite(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n\n            if (Double.isNaN(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n            }\n\n            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n                break;\n            }\n\n            dPrev = q1;\n            cPrev = cN / q2;\n            p0 = hPrev;\n            hPrev = cN;\n            q1 = q2;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..7506ae8f8 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -120,7 +120,7 @@ public abstract class ContinuedFraction {\n      * @return the value of the continued fraction evaluated at x.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n-    public double evaluate(double x, double epsilon, int maxIterations) {\n+public double evaluate(double x, double epsilon, int maxIterations) {\n         final double small = 1e-50;\n         double hPrev = getA(0, x);\n \n@@ -142,27 +142,42 @@ public abstract class ContinuedFraction {\n \n             double cN = a * hPrev + b * p0;\n             double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n-                }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n-                    }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n-                        break;\n+\n+            if (Double.isNaN(cN) || Double.isNaN(q2) || Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                // check if both cN and q2 are infinities and have same sign. \n+            \t// if yes, then the continued fraction has a true limit that can be calculated manually.\n+            \t// else, the continued fraction diverges to NaN if one of the term or both terms are NaN.\n+            \t\n+                if ((Double.isInfinite(cN) && Double.isInfinite(q2))\n+                        && ((cN > 0 && q2 > 0) || (cN < 0 && q2 < 0))) {\n+                    hN = cN / q2;\n+                    break;\n+                } else {\n+                    for (int i = 0; i < n; i++) {\n+                        double q = getB(i,x) * q1 + getA(i, x) * q2;\n+                        double hTemp = getB(i,x) * p0 + getA(i, x) * hPrev;\n+                        if (Double.isNaN(q) || Double.isNaN(hTemp) || Double.isInfinite(q) || Double.isInfinite(hTemp)) {\n+                            // check to see if the new terms are of the form 0 / 0.\n+                        \tif (getB(i,x) == 0.0 && getA(i,x) == 0.0) {\n+                                hN = 1.0 / 0.0; // infinity\n+                                break;\n+                            }\n+                        \telse {\n+                                throw new ConvergenceException(\n+                                \t\tLocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                            }\n+                        } else {\n+                            hPrev = p0;\n+                            p0 = hTemp;\n+                            dPrev = q1;\n+                            q1 = q;\n+                            q2 = dPrev + q * epsilon;\n+                            if (i == n - 1) {\n+                                hN = p0 / q2;\n+                            }\n+                        }\n                     }\n+                    break;\n                 }\n             }\n \n@@ -170,12 +185,11 @@ public abstract class ContinuedFraction {\n             hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                               x);\n+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n             }\n+\n             if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n             }\n \n             if (FastMath.abs(deltaN - 1.0) < epsilon) {\n@@ -187,15 +201,5 @@ public abstract class ContinuedFraction {\n             p0 = hPrev;\n             hPrev = cN;\n             q1 = q2;\n-            n++;\n-        }\n-\n-        if (n >= maxIterations) {\n-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n-        }\n-\n-        return hN;\n-    }\n \n }",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}