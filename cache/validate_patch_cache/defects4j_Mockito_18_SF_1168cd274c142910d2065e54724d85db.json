{
    "patch": "public static Map<String, Integer> countWords(String text) {\n    Map<String, Integer> wordCount = new HashMap<>();\n    \n    // Split text into words\n    String[] words = text.split(\"\\\\s+\");\n    \n    // Count occurrences of each word\n    for (String word : words) {\n        // Remove punctuation\n        word = word.replaceAll(\"[^a-zA-Z ]\", \"\");\n        // Convert to lowercase\n        word = word.toLowerCase();\n        \n        // Update word count\n        if (!word.isEmpty()) {\n            if (wordCount.containsKey(word)) {\n                wordCount.put(word, wordCount.get(word) + 1);\n            } else {\n                wordCount.put(word, 1);\n            }\n        }\n    }\n    \n    return wordCount;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..c41807f9f 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,31 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<String, Integer> countWords(String text) {\n+    Map<String, Integer> wordCount = new HashMap<>();\n+    \n+    // Split text into words\n+    String[] words = text.split(\"\\\\s+\");\n+    \n+    // Count occurrences of each word\n+    for (String word : words) {\n+        // Remove punctuation\n+        word = word.replaceAll(\"[^a-zA-Z ]\", \"\");\n+        // Convert to lowercase\n+        word = word.toLowerCase();\n+        \n+        // Update word count\n+        if (!word.isEmpty()) {\n+            if (wordCount.containsKey(word)) {\n+                wordCount.put(word, wordCount.get(word) + 1);\n+            } else {\n+                wordCount.put(word, 1);\n+            }\n+        }\n+    }\n+    \n+    return wordCount;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}