{
    "patch": "private RealMatrix squareRoot(RealMatrix matrix) {\n    CholeskyDecomposition cholesky = new CholeskyDecomposition(matrix);\n    RealMatrix L = cholesky.getL();\n    int n = L.getRowDimension();\n    RealMatrix result = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < (i + 1); j++) {\n            double sum = 0;\n            for (int k = 0; k < j; k++) {\n                sum += result.getEntry(i, k) * result.getEntry(j, k);\n            }\n            if (i == j) {\n                result.setEntry(i, i, Math.sqrt(L.getEntry(i, i) - sum));\n            } else {\n                result.setEntry(i, j, (1.0 / result.getEntry(j, j) * (L.getEntry(i, j) - sum)));\n            }\n        }\n    }\n    return result.multiply(result.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c48524c50 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix matrix) {\n+    CholeskyDecomposition cholesky = new CholeskyDecomposition(matrix);\n+    RealMatrix L = cholesky.getL();\n+    int n = L.getRowDimension();\n+    RealMatrix result = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < (i + 1); j++) {\n+            double sum = 0;\n+            for (int k = 0; k < j; k++) {\n+                sum += result.getEntry(i, k) * result.getEntry(j, k);\n+            }\n+            if (i == j) {\n+                result.setEntry(i, i, Math.sqrt(L.getEntry(i, i) - sum));\n+            } else {\n+                result.setEntry(i, j, (1.0 / result.getEntry(j, j) * (L.getEntry(i, j) - sum)));\n+            }\n+        }\n     }\n+    return result.multiply(result.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}