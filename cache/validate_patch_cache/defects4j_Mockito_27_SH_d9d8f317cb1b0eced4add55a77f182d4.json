{
    "patch": "        MockHandler<T> newMockHandler;\n        try {\n            newMockHandler = new MockHandler<T>((MockHandlerInterface<T>)oldMockHandler);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to initiate newMockHandler.\", e);\n        }\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito\n        \t\t\t.withSettings()\n        \t\t\t.defaultAnswer(Mockito.CALLS_REAL_METHODS)\n        \t\t\t.spiedInstance(mock)\n        \t\t\t.lenient());\n        ((Factory) mock).setCallbacks(new Callback[] { newFilter });",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..cc6de2533 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,21 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler;\n+        try {\n+            newMockHandler = new MockHandler<T>((MockHandlerInterface<T>)oldMockHandler);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to initiate newMockHandler.\", e);\n+        }\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito\n+        \t\t\t.withSettings()\n+        \t\t\t.defaultAnswer(Mockito.CALLS_REAL_METHODS)\n+        \t\t\t.spiedInstance(mock)\n+        \t\t\t.lenient());\n+        ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}