{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    final int seqEnd = input.length();\n    int result = 0;\n    while (index < seqEnd) {\n        if (input.charAt(index) == '&') {\n            int start = index + 1;\n            int end = start;\n            boolean isNamedEntity = false;\n            if (start < seqEnd && input.charAt(start) == '#') {\n                start++;\n                end = start;\n                while (end < seqEnd && Character.isDigit(input.charAt(end))) {\n                    end++;\n                }\n            } else {\n                isNamedEntity = true;\n                while (end < seqEnd && !Character.isWhitespace(input.charAt(end)) && input.charAt(end) != ';') {\n                    end++;\n                }\n            }\n            if (end == seqEnd || input.charAt(end) != ';') {\n                return result; // entity is not yet complete, wait for more data\n            }\n            String entityName = input.subSequence(start, end).toString();\n            int entityValue = 0;\n            if (isNamedEntity) {\n                if (\"lt\".equals(entityName)) {\n                    entityValue = '<';\n                } else if (\"gt\".equals(entityName)) {\n                    entityValue = '>';\n                } else if (\"amp\".equals(entityName)) {\n                    entityValue = '&';\n                } else if (\"apos\".equals(entityName)) { \n                    entityValue = '\\''; \n                } else if (\"quot\".equals(entityName)) { \n                    entityValue = '\"'; \n                } else {\n                    // other named entities must start with a letter and not be followed by any other character\n                    if (!Character.isLetter(entityName.charAt(0))\n                            || (entityName.length() > 1 && !Character.isWhitespace(entityName.charAt(1)) && entityName.charAt(1) != ';')) {\n                        System.err.println(\"FAIL: \" + input.subSequence(start - 1, end) + \"[\" + (start - 1) + \"][\" + end + \"]\");\n                        out.write(\"&\");\n                        result++;\n                        index++;\n                        continue;\n                    }\n                }\n                // add more named entities here\n            } else {\n                try {\n                    if (entityName.charAt(0) == '0') {\n                        entityValue = Integer.parseInt(entityName, 8);\n                    } else if (entityName.startsWith(\"x\")) {\n                        entityValue = Integer.parseInt(entityName.substring(1), 16);\n                    } else {\n                        entityValue = Integer.parseInt(entityName, 10);\n                    }\n                } catch (NumberFormatException nfe) {\n                    System.err.println(\"FAIL: \" + input.subSequence(start - 1, end) + \"[\" + (start - 1) + \"][\" + end + \"]\");\n                    out.write(\"&\");\n                    result++;\n                    index++;\n                    continue;\n                }\n            }\n            if (entityValue == '>' || entityValue == '<' || entityValue == '&') { // write the escaped character\n                out.write(\"&\" + entityName + \";\");\n                result += entityName.length() + 2;\n            } else if (entityValue > 0xFFFF) { // write the surrogate pair\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n                result += 2;\n            } else {\n                out.write(entityValue);\n                result++;\n            }\n            index = end + 1;\n        } else if (input.charAt(index) == '<') { // escape '<' character\n            out.write(\"&lt;\");\n            result += 4;\n            index++;\n        } else if (input.charAt(index) == '>') { // escape '>' character\n            out.write(\"&gt;\");\n            result += 4;\n            index++;\n        } else if (input.charAt(index) == '&') { // escape '&' character\n            out.write(\"&amp;\");\n            result += 5;\n            index++;\n        } else {\n            out.write(input.charAt(index));\n            result++;\n            index++;\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..b470091e 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,102 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    final int seqEnd = input.length();\n+    int result = 0;\n+    while (index < seqEnd) {\n+        if (input.charAt(index) == '&') {\n+            int start = index + 1;\n+            int end = start;\n+            boolean isNamedEntity = false;\n+            if (start < seqEnd && input.charAt(start) == '#') {\n                 start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n+                end = start;\n+                while (end < seqEnd && Character.isDigit(input.charAt(end))) {\n+                    end++;\n+                }\n+            } else {\n+                isNamedEntity = true;\n+                while (end < seqEnd && !Character.isWhitespace(input.charAt(end)) && input.charAt(end) != ';') {\n+                    end++;\n+                }\n             }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n+            if (end == seqEnd || input.charAt(end) != ';') {\n+                return result; // entity is not yet complete, wait for more data\n             }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n+            String entityName = input.subSequence(start, end).toString();\n+            int entityValue = 0;\n+            if (isNamedEntity) {\n+                if (\"lt\".equals(entityName)) {\n+                    entityValue = '<';\n+                } else if (\"gt\".equals(entityName)) {\n+                    entityValue = '>';\n+                } else if (\"amp\".equals(entityName)) {\n+                    entityValue = '&';\n+                } else if (\"apos\".equals(entityName)) { \n+                    entityValue = '\\''; \n+                } else if (\"quot\".equals(entityName)) { \n+                    entityValue = '\"'; \n                 } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n+                    // other named entities must start with a letter and not be followed by any other character\n+                    if (!Character.isLetter(entityName.charAt(0))\n+                            || (entityName.length() > 1 && !Character.isWhitespace(entityName.charAt(1)) && entityName.charAt(1) != ';')) {\n+                        System.err.println(\"FAIL: \" + input.subSequence(start - 1, end) + \"[\" + (start - 1) + \"][\" + end + \"]\");\n+                        out.write(\"&\");\n+                        result++;\n+                        index++;\n+                        continue;\n+                    }\n+                }\n+                // add more named entities here\n+            } else {\n+                try {\n+                    if (entityName.charAt(0) == '0') {\n+                        entityValue = Integer.parseInt(entityName, 8);\n+                    } else if (entityName.startsWith(\"x\")) {\n+                        entityValue = Integer.parseInt(entityName.substring(1), 16);\n+                    } else {\n+                        entityValue = Integer.parseInt(entityName, 10);\n+                    }\n+                } catch (NumberFormatException nfe) {\n+                    System.err.println(\"FAIL: \" + input.subSequence(start - 1, end) + \"[\" + (start - 1) + \"][\" + end + \"]\");\n+                    out.write(\"&\");\n+                    result++;\n+                    index++;\n+                    continue;\n                 }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n             }\n-\n-            if(entityValue > 0xFFFF) {\n+            if (entityValue == '>' || entityValue == '<' || entityValue == '&') { // write the escaped character\n+                out.write(\"&\" + entityName + \";\");\n+                result += entityName.length() + 2;\n+            } else if (entityValue > 0xFFFF) { // write the surrogate pair\n                 char[] chrs = Character.toChars(entityValue);\n                 out.write(chrs[0]);\n                 out.write(chrs[1]);\n+                result += 2;\n             } else {\n                 out.write(entityValue);\n+                result++;\n             }\n-\n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            index = end + 1;\n+        } else if (input.charAt(index) == '<') { // escape '<' character\n+            out.write(\"&lt;\");\n+            result += 4;\n+            index++;\n+        } else if (input.charAt(index) == '>') { // escape '>' character\n+            out.write(\"&gt;\");\n+            result += 4;\n+            index++;\n+        } else if (input.charAt(index) == '&') { // escape '&' character\n+            out.write(\"&amp;\");\n+            result += 5;\n+            index++;\n+        } else {\n+            out.write(input.charAt(index));\n+            result++;\n+            index++;\n         }\n-        return 0;\n     }\n+    return result;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<<P&O[>]> but was:<<P&O[&gt;]>",
    "test_result": "FAIL"
}