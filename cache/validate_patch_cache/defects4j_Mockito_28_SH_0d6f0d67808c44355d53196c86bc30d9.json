{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\nif (fieldInstance == null && candidate == null) {\n   throw new RuntimeException(String.format(\"Could not find mock candidate for field [%s] in class [%s].\", field.getName(), awaitingInjectionClazz.getSimpleName()));\n} else if (candidate != null) {\n   field.setAccessible(true);\n   try {\n       field.set(fieldInstance, candidate);\n   } catch (IllegalAccessException e) {\n       throw new RuntimeException(String.format(\"Failed to inject mock candidate for field [%s] in class [%s].\", field.getName(), awaitingInjectionClazz.getSimpleName()), e);\n   }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..0468e28ac 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,20 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+if (fieldInstance == null && candidate == null) {\n+   throw new RuntimeException(String.format(\"Could not find mock candidate for field [%s] in class [%s].\", field.getName(), awaitingInjectionClazz.getSimpleName()));\n+} else if (candidate != null) {\n+   field.setAccessible(true);\n+   try {\n+       field.set(fieldInstance, candidate);\n+   } catch (IllegalAccessException e) {\n+       throw new RuntimeException(String.format(\"Failed to inject mock candidate for field [%s] in class [%s].\", field.getName(), awaitingInjectionClazz.getSimpleName()), e);\n+   }\n+}\n         }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<java.lang.Object@619bb99d> was not:<mockedBean>",
    "test_result": "FAIL"
}