{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n\n    int months = getMonths();\n    int years = getYears();\n\n    // Take the weeks from the total number of days\n    int totalDays = getDays() + (getWeeks() * 7);\n\n    if (months != 0 || years != 0) {\n        int totalMonths = (years * 12) + months;\n        totalMonths = type.getFieldIndex(PeriodType.MONTH_INDEX) >= 0 ?\n                FieldUtils.safeAdd(totalMonths, type.getIndexedField(PeriodType.MONTH_INDEX, 0)) : totalMonths;\n        int calcMonths = totalMonths % 12;\n        int calcYears = FieldUtils.safeToInt(totalMonths / 12);\n\n        // Adjust for negative years\n        if (calcYears < 0 && totalMonths > 0) {\n            calcYears += 1;\n            calcMonths -= 12;\n        }\n\n        // Adjust for negative months\n        if (calcMonths < 0) {\n            calcMonths += 12;\n            calcYears -= 1;\n        }\n\n        years = calcYears;\n        months = calcMonths;\n    }\n\n    Period result = new Period(millis + ((long) totalDays) * ((long) DateTimeConstants.MILLIS_PER_DAY), type, ISOChronology.getInstanceUTC());\n\n    if (years != 0) {\n        result = result.withYears(years);\n    }\n\n    if (months != 0) {\n        result = result.withMonths(months);\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..1de7d275 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,54 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+\n+    int months = getMonths();\n+    int years = getYears();\n+\n+    // Take the weeks from the total number of days\n+    int totalDays = getDays() + (getWeeks() * 7);\n+\n+    if (months != 0 || years != 0) {\n+        int totalMonths = (years * 12) + months;\n+        totalMonths = type.getFieldIndex(PeriodType.MONTH_INDEX) >= 0 ?\n+                FieldUtils.safeAdd(totalMonths, type.getIndexedField(PeriodType.MONTH_INDEX, 0)) : totalMonths;\n+        int calcMonths = totalMonths % 12;\n+        int calcYears = FieldUtils.safeToInt(totalMonths / 12);\n+\n+        // Adjust for negative years\n+        if (calcYears < 0 && totalMonths > 0) {\n+            calcYears += 1;\n+            calcMonths -= 12;\n         }\n-        return result;\n+\n+        // Adjust for negative months\n+        if (calcMonths < 0) {\n+            calcMonths += 12;\n+            calcYears -= 1;\n+        }\n+\n+        years = calcYears;\n+        months = calcMonths;\n+    }\n+\n+    Period result = new Period(millis + ((long) totalDays) * ((long) DateTimeConstants.MILLIS_PER_DAY), type, ISOChronology.getInstanceUTC());\n+\n+    if (years != 0) {\n+        result = result.withYears(years);\n     }\n \n+    if (months != 0) {\n+        result = result.withMonths(months);\n+    }\n+\n+    return result;\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}