{
    "patch": "                        if (numeric.endsWith(\"L\") || numeric.endsWith(\"l\")) {\n                            if (dec == null && exp == null) {\n                                String k = numeric.substring(0, numeric.length() - 1);\n                                if (isDigits(k.substring(1))\n                                        && (k.charAt(0) == '-' || Character.isDigit(k.charAt(0)))) {\n                                    try {\n                                        return createLong(k);\n                                    } catch (NumberFormatException nfe) {\n                                        //Too big for a long\n                                    }\n                                    return createBigInteger(k);\n                                }\n                            }\n                            throw new NumberFormatException(str + \" is not a valid number.\");\n                        }\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number format",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..799c5793 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,23 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+                        if (numeric.endsWith(\"L\") || numeric.endsWith(\"l\")) {\n+                            if (dec == null && exp == null) {\n+                                String k = numeric.substring(0, numeric.length() - 1);\n+                                if (isDigits(k.substring(1))\n+                                        && (k.charAt(0) == '-' || Character.isDigit(k.charAt(0)))) {\n+                                    try {\n+                                        return createLong(k);\n+                                    } catch (NumberFormatException nfe) {\n+                                        //Too big for a long\n+                                    }\n+                                    return createBigInteger(k);\n+                                }\n+                            }\n+                            throw new NumberFormatException(str + \" is not a valid number.\");\n+                        }\n+                    } catch (NumberFormatException e) {\n+                        // ignore the bad number format\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}