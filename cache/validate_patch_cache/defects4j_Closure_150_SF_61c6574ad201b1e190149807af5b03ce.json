{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.LP:\n          if (parent == scope.getRootNode()) {\n            handleFunctionInputs(parent);\n            return;\n          }\n          break;\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..9f04a3c0 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,16 +1440,14 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n+        case Token.LP:\n+          if (parent == scope.getRootNode()) {\n+            handleFunctionInputs(parent);\n+            return;\n+          }\n+          break;\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n             return;\n@@ -1463,7 +1461,6 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n-    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}