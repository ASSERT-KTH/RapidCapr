{
    "patch": "      if (NodeUtil.isFunctionExpression(function)) {\n        // Strip unreferenced args off the end of the function expression.\n        Node lastParam;\n        while ((lastParam = function.getLastChild()) != null && lastParam.next != argList) {\n          if (!referenced.contains(fnScope.getVar(lastParam.getString()))) {\n            function.removeChild(lastParam);\n            compiler.reportCodeChange();\n          } else {\n            break;\n          }\n        }\n      } ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..2805aeb0 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      if (NodeUtil.isFunctionExpression(function)) {\n+        // Strip unreferenced args off the end of the function expression.\n+        Node lastParam;\n+        while ((lastParam = function.getLastChild()) != null && lastParam.next != argList) {\n+          if (!referenced.contains(fnScope.getVar(lastParam.getString()))) {\n+            function.removeChild(lastParam);\n+            compiler.reportCodeChange();\n+          } else {\n+            break;\n+          }\n+        }\n+      } \n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}