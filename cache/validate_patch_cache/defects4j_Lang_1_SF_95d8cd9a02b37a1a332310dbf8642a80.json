{
    "patch": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    boolean isHex = false;\n    int pfxLen = 0;\n\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")\n            || str.startsWith(\"#\") || str.startsWith(\"-#\")) {\n        pfxLen += 1;\n        isHex = true;\n        for (int i = 2; i < str.length(); i++) {\n            final char ch = str.charAt(i);\n            if ((ch < '0' || ch > '9') && (ch < 'a' || ch > 'f') && (ch < 'A' || ch > 'F')) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        }\n    }\n    if (lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D' || lastChar == 'l' || lastChar == 'L') {\n        if (str.length() == 1) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        exp = null;\n        if (str.length() == 2 && str.charAt(0) == '-') {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (isHex) {\n                    if (str.length() - pfxLen > 16) {\n                        return createBigInteger(str);\n                    } else {\n                        return createLong(str);\n                    }\n                } else {\n                    final String s = str.substring(0, str.length() - 1);\n                    final boolean allZeros = isAllZeros(s.substring(1));\n                    try {\n                        if (s.charAt(0) == '-') {\n                            if (s.length() > 18 || (s.length() == 18 && s.compareTo(\"-9223372036854775808\") > 0)) {\n                                return createBigInteger(s);\n                            } else {\n                                return createLong(s);\n                            }\n                        } else {\n                            if (s.length() > 18 || (s.length() == 18 && s.compareTo(\"9223372036854775807\") > 0)) {\n                                return createBigInteger(s);\n                            } else {\n                                return createLong(s);\n                            }\n                        }\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    return createBigInteger(s);\n                }\n            case 'f':\n            case 'F':\n                try {\n                    final Float f = Float.valueOf(str);\n                    if (!f.isInfinite() && (f.floatValue() != 0.0F || isAllZeros(mantissa(f)))) {\n                        return f;\n                    }\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n\n            case 'd':\n            case 'D':\n                try {\n                    final Double d = Double.valueOf(str);\n                    if (!d.isInfinite() && (d.doubleValue() != 0.0D || isAllZeros(mantissa(d)))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    return createBigDecimal(str);\n                } catch (final NumberFormatException e) { // NOPMD\n                    // ignore the bad number\n                }\n\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n    int decPos = str.indexOf('.');\n    int expPos = StringUtils.indexOfIgnoreCase(str, \"e\") + StringUtils.indexOfIgnoreCase(str, \"E\") + 1;\n\n    if (isHex) {\n        if (expPos > 0) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        dec = null;\n        if (decPos == -1) {\n            decPos = str.length();\n        }\n        mant = str.substring(pfxLen, decPos);\n        final BigInteger val = new BigInteger(mant, 16);\n        if (val.bitLength() <= 31) {\n            return Integer.valueOf(val.intValue());\n        }\n        if (val.bitLength() <= 63) {\n            return Long.valueOf(val.longValue());\n        }\n        return val;\n    }\n    if (expPos > 0) {\n        if (decPos > 0 && expPos > decPos) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        dec = str.substring(decPos + 1, expPos);\n        mant = getMantissa(str, decPos, expPos);\n        exp = str.substring(expPos + 1);\n    } else {\n        if (decPos > 0) {\n            dec = str.substring(decPos + 1);\n            mant = getMantissa(str, decPos, str.length());\n        } else {\n            dec = null;\n            mant = getMantissa(str, 0, str.length());\n        }\n        exp = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    if (exp != null) {\n        // Need to re-parse mantissa to determine if it is a\n        // valid number (may be zero if disallowed by format)\n        final int e = parseInt(exp);\n        if (e == 0) {\n            if (mant.length() > 0) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            return zeroValueOf(str);\n        }\n        final int delta = exp.length() - e;\n        if (delta > 0) {\n            // Must adjust mantissa\n            mant = getMantissa(str, decPos, decPos + e);\n            if (round(mant, delta)) {\n                mant = stripZeros(mant);\n            }\n        } else if (delta < 0) {\n            // Insert zeros into mantissa as needed\n            final StringBuilder sb = new StringBuilder(mant);\n            for (int i = 0; i < -delta; i++) {\n                sb.append('0');\n            }\n            mant = sb.toString();\n        }\n    }\n    if (dec == null && exp == null) {\n        // Cannot have hex prefix and no mantissa\n        if (isHex && mant.length() == 0) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        // Integer.valueOf(String) will not handle \"+\" prefix\n        if (mant.charAt(0) == '+' || mant.charAt(0) == '-') {\n            if (mant.charAt(0) == '-') {\n                return createInteger(mant);\n            }\n            int val = Integer.parseInt(mant.substring(1));\n            return Integer.valueOf(val);\n        }\n        i",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 1e6ccdc0..16178c02 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -447,171 +447,182 @@ public class NumberUtils {\n      * @return Number created from the string (or null if the input is null)\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(final String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }\n-        // Need to deal with all possible hex prefixes here\n-        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n-        int pfxLen = 0;\n-        for(final String pfx : hex_prefixes) {\n-            if (str.startsWith(pfx)) {\n-                pfxLen += pfx.length();\n-                break;\n+public static Number createNumber(final String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+    final char lastChar = str.charAt(str.length() - 1);\n+    String mant;\n+    String dec;\n+    String exp;\n+    boolean isHex = false;\n+    int pfxLen = 0;\n+\n+    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")\n+            || str.startsWith(\"#\") || str.startsWith(\"-#\")) {\n+        pfxLen += 1;\n+        isHex = true;\n+        for (int i = 2; i < str.length(); i++) {\n+            final char ch = str.charAt(i);\n+            if ((ch < '0' || ch > '9') && (ch < 'a' || ch > 'f') && (ch < 'A' || ch > 'F')) {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n         }\n-        if (pfxLen > 0) { // we have a hex number\n-            final int hexDigits = str.length() - pfxLen;\n-            if (hexDigits > 16) { // too many for Long\n-                return createBigInteger(str);\n-            }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n-            }\n-            return createInteger(str);\n-        }\n-        final char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        final int decPos = str.indexOf('.');\n-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n-\n-        int numDecimals = 0; // Check required precision (LANG-693)\n-        if (decPos > -1) { // there is a decimal point\n-\n-            if (expPos > -1) { // there is an exponent\n-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n-        } else {\n-            if (expPos > -1) {\n-                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n+    }\n+    if (lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D' || lastChar == 'l' || lastChar == 'L') {\n+        if (str.length() == 1) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            final String numeric = str.substring(0, str.length() - 1);\n-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (final NumberFormatException nfe) { // NOPMD\n-                            // Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n+        exp = null;\n+        if (str.length() == 2 && str.charAt(0) == '-') {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+        switch (lastChar) {\n+            case 'l':\n+            case 'L':\n+                if (isHex) {\n+                    if (str.length() - pfxLen > 16) {\n+                        return createBigInteger(str);\n+                    } else {\n+                        return createLong(str);\n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n+                } else {\n+                    final String s = str.substring(0, str.length() - 1);\n+                    final boolean allZeros = isAllZeros(s.substring(1));\n                     try {\n-                        final Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n+                        if (s.charAt(0) == '-') {\n+                            if (s.length() > 18 || (s.length() == 18 && s.compareTo(\"-9223372036854775808\") > 0)) {\n+                                return createBigInteger(s);\n+                            } else {\n+                                return createLong(s);\n+                            }\n+                        } else {\n+                            if (s.length() > 18 || (s.length() == 18 && s.compareTo(\"9223372036854775807\") > 0)) {\n+                                return createBigInteger(s);\n+                            } else {\n+                                return createLong(s);\n+                            }\n                         }\n-\n                     } catch (final NumberFormatException nfe) { // NOPMD\n                         // ignore the bad number\n                     }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        final Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n+                    return createBigInteger(s);\n+                }\n+            case 'f':\n+            case 'F':\n+                try {\n+                    final Float f = Float.valueOf(str);\n+                    if (!f.isInfinite() && (f.floatValue() != 0.0F || isAllZeros(mantissa(f)))) {\n+                        return f;\n                     }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (final NumberFormatException e) { // NOPMD\n-                        // ignore the bad number\n+                } catch (final NumberFormatException nfe) { // NOPMD\n+                    // ignore the bad number\n+                }\n+\n+            case 'd':\n+            case 'D':\n+                try {\n+                    final Double d = Double.valueOf(str);\n+                    if (!d.isInfinite() && (d.doubleValue() != 0.0D || isAllZeros(mantissa(d)))) {\n+                        return d;\n                     }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                } catch (final NumberFormatException nfe) { // NOPMD\n+                    // ignore the bad number\n+                }\n+                try {\n+                    return createBigDecimal(str);\n+                } catch (final NumberFormatException e) { // NOPMD\n+                    // ignore the bad number\n+                }\n \n-            }\n+            default:\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n         }\n-        //User doesn't have a preference on the return type, so let's start\n-        //small and go from there...\n-        if (expPos > -1 && expPos < str.length() - 1) {\n-            exp = str.substring(expPos + 1, str.length());\n+    }\n+    int decPos = str.indexOf('.');\n+    int expPos = StringUtils.indexOfIgnoreCase(str, \"e\") + StringUtils.indexOfIgnoreCase(str, \"E\") + 1;\n+\n+    if (isHex) {\n+        if (expPos > 0) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+        dec = null;\n+        if (decPos == -1) {\n+            decPos = str.length();\n+        }\n+        mant = str.substring(pfxLen, decPos);\n+        final BigInteger val = new BigInteger(mant, 16);\n+        if (val.bitLength() <= 31) {\n+            return Integer.valueOf(val.intValue());\n+        }\n+        if (val.bitLength() <= 63) {\n+            return Long.valueOf(val.longValue());\n+        }\n+        return val;\n+    }\n+    if (expPos > 0) {\n+        if (decPos > 0 && expPos > decPos) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+        dec = str.substring(decPos + 1, expPos);\n+        mant = getMantissa(str, decPos, expPos);\n+        exp = str.substring(expPos + 1);\n+    } else {\n+        if (decPos > 0) {\n+            dec = str.substring(decPos + 1);\n+            mant = getMantissa(str, decPos, str.length());\n         } else {\n-            exp = null;\n-        }\n-        if (dec == null && exp == null) { // no decimal point and no exponent\n-            //Must be an Integer, Long, Biginteger\n-            try {\n-                return createInteger(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n+            dec = null;\n+            mant = getMantissa(str, 0, str.length());\n+        }\n+        exp = null;\n+    }\n+    if (!Character.isDigit(lastChar) && lastChar != '.') {\n+        throw new NumberFormatException(str + \" is not a valid number.\");\n+    }\n+    if (exp != null) {\n+        // Need to re-parse mantissa to determine if it is a\n+        // valid number (may be zero if disallowed by format)\n+        final int e = parseInt(exp);\n+        if (e == 0) {\n+            if (mant.length() > 0) {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n-            try {\n-                return createLong(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n+            return zeroValueOf(str);\n+        }\n+        final int delta = exp.length() - e;\n+        if (delta > 0) {\n+            // Must adjust mantissa\n+            mant = getMantissa(str, decPos, decPos + e);\n+            if (round(mant, delta)) {\n+                mant = stripZeros(mant);\n             }\n-            return createBigInteger(str);\n-        }\n-\n-        //Must be a Float, Double, BigDecimal\n-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-        try {\n-            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n-                final Float f = createFloat(str);\n-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                    return f;\n-                }\n+        } else if (delta < 0) {\n+            // Insert zeros into mantissa as needed\n+            final StringBuilder sb = new StringBuilder(mant);\n+            for (int i = 0; i < -delta; i++) {\n+                sb.append('0');\n             }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n+            mant = sb.toString();\n         }\n-        try {\n-            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n-                final Double d = createDouble(str);\n-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                    return d;\n-                }\n+    }\n+    if (dec == null && exp == null) {\n+        // Cannot have hex prefix and no mantissa\n+        if (isHex && mant.length() == 0) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+        // Integer.valueOf(String) will not handle \"+\" prefix\n+        if (mant.charAt(0) == '+' || mant.charAt(0) == '-') {\n+            if (mant.charAt(0) == '-') {\n+                return createInteger(mant);\n             }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n+            int val = Integer.parseInt(mant.substring(1));\n+            return Integer.valueOf(val);\n         }\n-\n-        return createBigDecimal(str);\n-    }\n+        i\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}