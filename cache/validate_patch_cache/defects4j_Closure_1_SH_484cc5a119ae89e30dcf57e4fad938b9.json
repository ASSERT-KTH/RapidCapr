{
    "patch": "    // NOTICE: Removing unreferenced function args may break Function.prototype.length.\n    // In advanced mode, if the user is removing globals, then removing unused function args is considered acceptable.\n    //\n    // However, if the \"assume function wrappers\" option is enabled, unused function args cannot be removed.\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // Skip parameters object literal setters, since they can't be removed.\n      return;\n    }\n\n    Node arguments = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Node lastArg = arguments.getLastChild();\n      while (lastArg != null) {\n        Node prevArg = lastArg.getPrevious();\n        Var var = fnScope.getVar(lastArg.getString());\n        if (var == null || !referenced.contains(var)) {\n          arguments.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else if (!var.isParam() || var.getParentNode() != arguments) {\n          // Stop once we see the first parameter that has a reference beyond\n          // the current function declaration (i.e. it's a forwarded parameter)\n          break;\n        }\n        lastArg = prevArg;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..21221e66 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,36 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // NOTICE: Removing unreferenced function args may break Function.prototype.length.\n+    // In advanced mode, if the user is removing globals, then removing unused function args is considered acceptable.\n+    //\n+    // However, if the \"assume function wrappers\" option is enabled, unused function args cannot be removed.\n+\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // Skip parameters object literal setters, since they can't be removed.\n+      return;\n+    }\n+\n+    Node arguments = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      Node lastArg = arguments.getLastChild();\n+      while (lastArg != null) {\n+        Node prevArg = lastArg.getPrevious();\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (var == null || !referenced.contains(var)) {\n+          arguments.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else if (!var.isParam() || var.getParentNode() != arguments) {\n+          // Stop once we see the first parameter that has a reference beyond\n+          // the current function declaration (i.e. it's a forwarded parameter)\n+          break;\n+        }\n+        lastArg = prevArg;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}