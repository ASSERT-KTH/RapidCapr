{
    "patch": "private static RealMatrix squareRoot(RealMatrix matrix) {\n    final EigenDecomposition decomposition = new EigenDecomposition(matrix);\n    final RealMatrix V = decomposition.getV();\n    final RealMatrix D = decomposition.getD();\n    final int n = matrix.getRowDimension();\n    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n\n    for (int i = 0; i < n; i++) {\n        final double eigenvalue = D.getEntry(i, i);\n        if (eigenvalue < 0) {\n            throw new IllegalArgumentException(\"Matrix must be positive semi-definite.\");\n        } else {\n            sqrtD.setEntry(i, i, Math.sqrt(eigenvalue));\n        }\n    }\n\n    return V.multiply(sqrtD).multiply(V.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a04e64ef4 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private static RealMatrix squareRoot(RealMatrix matrix) {\n+    final EigenDecomposition decomposition = new EigenDecomposition(matrix);\n+    final RealMatrix V = decomposition.getV();\n+    final RealMatrix D = decomposition.getD();\n+    final int n = matrix.getRowDimension();\n+    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n+\n+    for (int i = 0; i < n; i++) {\n+        final double eigenvalue = D.getEntry(i, i);\n+        if (eigenvalue < 0) {\n+            throw new IllegalArgumentException(\"Matrix must be positive semi-definite.\");\n+        } else {\n+            sqrtD.setEntry(i, i, Math.sqrt(eigenvalue));\n+        }\n     }\n+\n+    return V.multiply(sqrtD).multiply(V.transpose());\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}