{
    "patch": "package com.google.javascript.jscomp.parsing;\n\npublic class IRFactory {\n    // ...\n\n    public interface TypeSafeDispatcher {\n        Node process(ArrayComprehension node);\n        Node process(AssignmentOperation node);\n        Node process(BinaryOperator node);\n        Node process(Block node);\n        Node process(BooleanLiteral node);\n        Node process(BreakStatement node);\n        Node process(Call node);\n        Node process(CaseClause node);\n        Node process(CatchClause node);\n        Node process(ConditionalExpression node);\n        Node process(ContinueStatement node);\n        Node process(DebuggerStatement node);\n        Node process(DefaultClause node);\n        Node process(DoLoop node);\n        Node process(ElementGet node);\n        Node process(EmptyStatement node);\n        Node process(ExpressionStatement node);\n        Node process(ForInLoop node);\n        Node process(ForOfLoop node);\n        Node process(ForLoop node);\n        Node process(FunctionDeclaration node);\n        Node process(FunctionExpression node);\n        Node process(GetterSetter node);\n        Node process(IfStatement node);\n        Node process(InOperator node);\n        Node process(InstanceofOperator node);\n        Node process(JsDocComment node);\n        Node process(KeywordLiteral node);\n        Node process(LabeledStatement node);\n        Node process(LetNode node);\n        Node process(Name node);\n        Node process(NewExpression node);\n        Node process(NumberLiteral node);\n        Node process(ObjectLiteral node);\n        Node process(OptChainCall node);\n        Node process(OptChainGetProp node);\n        Node process(ParenthesizedExpression node);\n        Node process(RegExpLiteral node);\n        Node process(ReturnStatement node);\n        Node process(ScopedDefinition node);\n        Node process(SetterExpression node);\n        Node process(StringLiteral node);\n        Node process(Super node);\n        Node process(SwitchStatement node);\n        Node process(TaggedTemplateLit node);\n        Node process(TemplateLiteral node);\n        Node process(ThisExpression node);\n        Node process(ThrowStatement node);\n        Node process(TryStatement node);\n        Node process(TypeDeclaration node);\n        Node process(UnaryExpression node);\n        Node process(VariableDeclaration node);\n        Node process(VariableDeclarationList node);\n        Node process(WhileStatement node);\n        Node process(WithStatement node);\n        Node process(XmlDotQuery node);\n        Node process(Yield node);\n        Node process(YieldAll node);\n        Node process(DefaultValueAssignment node);\n    }\n\n    public class TransformDispatcher implements TypeSafeDispatcher {\n        // ...\n    }\n\n    // ...\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..111e8d76 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,79 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+package com.google.javascript.jscomp.parsing;\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+public class IRFactory {\n+    // ...\n+\n+    public interface TypeSafeDispatcher {\n+        Node process(ArrayComprehension node);\n+        Node process(AssignmentOperation node);\n+        Node process(BinaryOperator node);\n+        Node process(Block node);\n+        Node process(BooleanLiteral node);\n+        Node process(BreakStatement node);\n+        Node process(Call node);\n+        Node process(CaseClause node);\n+        Node process(CatchClause node);\n+        Node process(ConditionalExpression node);\n+        Node process(ContinueStatement node);\n+        Node process(DebuggerStatement node);\n+        Node process(DefaultClause node);\n+        Node process(DoLoop node);\n+        Node process(ElementGet node);\n+        Node process(EmptyStatement node);\n+        Node process(ExpressionStatement node);\n+        Node process(ForInLoop node);\n+        Node process(ForOfLoop node);\n+        Node process(ForLoop node);\n+        Node process(FunctionDeclaration node);\n+        Node process(FunctionExpression node);\n+        Node process(GetterSetter node);\n+        Node process(IfStatement node);\n+        Node process(InOperator node);\n+        Node process(InstanceofOperator node);\n+        Node process(JsDocComment node);\n+        Node process(KeywordLiteral node);\n+        Node process(LabeledStatement node);\n+        Node process(LetNode node);\n+        Node process(Name node);\n+        Node process(NewExpression node);\n+        Node process(NumberLiteral node);\n+        Node process(ObjectLiteral node);\n+        Node process(OptChainCall node);\n+        Node process(OptChainGetProp node);\n+        Node process(ParenthesizedExpression node);\n+        Node process(RegExpLiteral node);\n+        Node process(ReturnStatement node);\n+        Node process(ScopedDefinition node);\n+        Node process(SetterExpression node);\n+        Node process(StringLiteral node);\n+        Node process(Super node);\n+        Node process(SwitchStatement node);\n+        Node process(TaggedTemplateLit node);\n+        Node process(TemplateLiteral node);\n+        Node process(ThisExpression node);\n+        Node process(ThrowStatement node);\n+        Node process(TryStatement node);\n+        Node process(TypeDeclaration node);\n+        Node process(UnaryExpression node);\n+        Node process(VariableDeclaration node);\n+        Node process(VariableDeclarationList node);\n+        Node process(WhileStatement node);\n+        Node process(WithStatement node);\n+        Node process(XmlDotQuery node);\n+        Node process(Yield node);\n+        Node process(YieldAll node);\n+        Node process(DefaultValueAssignment node);\n+    }\n+\n+    public class TransformDispatcher implements TypeSafeDispatcher {\n+        // ...\n+    }\n+\n+    // ...\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}