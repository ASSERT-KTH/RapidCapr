{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n\n    if (dec.getRealEigenvalues() == null) {\n        // If there are no real eigenvalues, return null\n        return null;\n    } else {\n        // Find the square root of the eigenvalues\n        final RealMatrix eigenvaluesSqrt = dec.getD().scalarMap(d -> d >= 0 ? FastMath.sqrt(d) : 0.0);\n\n        // Rebuild square root matrix from the square root of eigenvalues and eigenvectors\n        final RealMatrix sqrtMatrix = dec.getV().multiply(eigenvaluesSqrt).multiply(dec.getV().transpose());\n\n        // Round small values to zero to reduce memory usage\n        for (int i = 0; i < sqrtMatrix.getRowDimension(); i++) {\n            for (int j = 0; j < sqrtMatrix.getColumnDimension(); j++) {\n                if (FastMath.abs(sqrtMatrix.getEntry(i, j)) < 1e-16) {\n                    sqrtMatrix.setEntry(i, j, 0.0);\n                }\n            }\n        }\n\n        return sqrtMatrix;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..71e0109b4 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+\n+    if (dec.getRealEigenvalues() == null) {\n+        // If there are no real eigenvalues, return null\n+        return null;\n+    } else {\n+        // Find the square root of the eigenvalues\n+        final RealMatrix eigenvaluesSqrt = dec.getD().scalarMap(d -> d >= 0 ? FastMath.sqrt(d) : 0.0);\n+\n+        // Rebuild square root matrix from the square root of eigenvalues and eigenvectors\n+        final RealMatrix sqrtMatrix = dec.getV().multiply(eigenvaluesSqrt).multiply(dec.getV().transpose());\n+\n+        // Round small values to zero to reduce memory usage\n+        for (int i = 0; i < sqrtMatrix.getRowDimension(); i++) {\n+            for (int j = 0; j < sqrtMatrix.getColumnDimension(); j++) {\n+                if (FastMath.abs(sqrtMatrix.getEntry(i, j)) < 1e-16) {\n+                    sqrtMatrix.setEntry(i, j, 0.0);\n+                }\n+            }\n+        }\n+\n+        return sqrtMatrix;\n     }\n }\n+}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}