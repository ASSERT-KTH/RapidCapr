{
    "patch": "public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            return createInteger(str);\n        }\n\n        // remove any underscore characters\n        str = str.replace(\"_\", \"\");\n\n        char lastChar = str.charAt(str.length() - 1);\n        int decPos = str.indexOf('.');\n        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n\n        // handle exponential notation\n        if (expPos > -1) {\n            // for large numbers with many decimal places, use BigDecimal\n            if (str.substring(expPos + 1).length() > 7) {\n                return new BigDecimal(str);\n            } else {\n                return Double.parseDouble(str);\n            }\n        } else if (decPos > -1) {\n            // handle numbers with decimal points\n            if (str.length() - decPos - 1 <= 7) {\n                // check if there are trailing zeros\n                int i = str.length() - 1;\n                while (i > decPos && str.charAt(i) == '0') {\n                    i--;\n                }\n                if (i == decPos) {\n                    return Integer.parseInt(str.substring(0, decPos));\n                } else {\n                    return Double.parseDouble(str);\n                }\n            } else {\n                return new BigDecimal(str);\n            }\n        }\n\n        BigInteger bigint = new BigInteger(str);\n        if (bigint.bitLength() <= 31) {\n            return Integer.parseInt(str);\n        } else if (bigint.bitLength() <= 63) {\n            return Long.parseLong(str);\n        }\n        return new BigDecimal(str);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex fd03ab8f..5c40aad0 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,153 +449,60 @@ public class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String str) throws NumberFormatException {\n+public static Number createNumber(String str) throws NumberFormatException {\n         if (str == null) {\n             return null;\n         }\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }  \n+        }\n         if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n             return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n-        }   \n-        char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n-\n-        if (decPos > -1) {\n-\n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n-        } else {\n-            if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            String numeric = str.substring(0, str.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n \n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n+        // remove any underscore characters\n+        str = str.replace(\"_\", \"\");\n \n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+        char lastChar = str.charAt(str.length() - 1);\n+        int decPos = str.indexOf('.');\n+        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n-            }\n-        } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n+        // handle exponential notation\n+        if (expPos > -1) {\n+            // for large numbers with many decimal places, use BigDecimal\n+            if (str.substring(expPos + 1).length() > 7) {\n+                return new BigDecimal(str);\n             } else {\n-                exp = null;\n+                return Double.parseDouble(str);\n             }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+        } else if (decPos > -1) {\n+            // handle numbers with decimal points\n+            if (str.length() - decPos - 1 <= 7) {\n+                // check if there are trailing zeros\n+                int i = str.length() - 1;\n+                while (i > decPos && str.charAt(i) == '0') {\n+                    i--;\n                 }\n-                try {\n-                    return createLong(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+                if (i == decPos) {\n+                    return Integer.parseInt(str.substring(0, decPos));\n+                } else {\n+                    return Double.parseDouble(str);\n                 }\n-                return createBigInteger(str);\n-\n             } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-                try {\n-                    Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                try {\n-                    Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-\n-                return createBigDecimal(str);\n-\n+                return new BigDecimal(str);\n             }\n         }\n+\n+        BigInteger bigint = new BigInteger(str);\n+        if (bigint.bitLength() <= 31) {\n+            return Integer.parseInt(str);\n+        } else if (bigint.bitLength() <= 63) {\n+            return Long.parseLong(str);\n+        }\n+        return new BigDecimal(str);\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: createNumber(String) 1 failed expected:<1234.5> but was:<1234.5>",
    "test_result": "FAIL"
}