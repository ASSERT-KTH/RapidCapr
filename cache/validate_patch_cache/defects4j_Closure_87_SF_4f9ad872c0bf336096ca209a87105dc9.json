{
    "patch": "private static boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n\n    // Do not fold if parent is EXPR_RESULT\n    if (maybeExpr.getType() == Token.EXPR_RESULT) {\n      return false;\n    }\n\n    // Do not fold if parent is CALL or NEW\n    Node parent = n.getParent();\n    if (parent.getType() == Token.CALL || parent.getType() == Token.NEW) {\n      return false;\n    }\n\n    // When parent is a throw statement, do not fold.\n    if (parent.getType() == Token.THROW) {\n      return false;\n    }\n\n    // When parent is an if statement with a known constant conditional, do not fold.\n    if (parent.getType() == Token.IF && NodeUtil.isImmutableValue(parent.getFirstChild())) {\n      return false;\n    }\n\n    // When parent is a FOR-IN statement, do not fold.\n    if (parent.getType() == Token.FOR && parent.hasTwoChildren() && parent.getChildAtIndex(0).getType() == Token.VAR) {\n      Node variableDeclarationList = parent.getFirstChild();\n      if (variableDeclarationList.hasOneChild()) {\n        Node variableDeclaration = variableDeclarationList.getFirstChild();\n        if (variableDeclaration.hasOneChild()) {\n          Node singleVariable = variableDeclaration.getFirstChild();\n          if (singleVariable.getType() == Token.NAME) {\n            String variableName = singleVariable.getString();\n            Node collection = parent.getChildAtIndex(1);\n            if (collection.getType() == Token.NAME) {\n              if (collection.getString().equals(variableName)) {\n                return false;\n              }\n            } else if (collection.getType() == Token.GETPROP) {\n              Node collectionNode = collection.getFirstChild();\n              if (collectionNode.getType() == Token.NAME && collectionNode.getString().equals(\"Object\")) {\n                Node propName = collection.getChildAtIndex(1);\n                if (propName.getType() == Token.STRING && propName.getString().equals(\"prototype\")) {\n                  return false;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return NodeUtil.isExpressionNode(maybeExpr);\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..03f20546 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,63 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private static boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+\n+    // Do not fold if parent is EXPR_RESULT\n+    if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+      return false;\n+    }\n+\n+    // Do not fold if parent is CALL or NEW\n+    Node parent = n.getParent();\n+    if (parent.getType() == Token.CALL || parent.getType() == Token.NEW) {\n+      return false;\n+    }\n+\n+    // When parent is a throw statement, do not fold.\n+    if (parent.getType() == Token.THROW) {\n+      return false;\n+    }\n+\n+    // When parent is an if statement with a known constant conditional, do not fold.\n+    if (parent.getType() == Token.IF && NodeUtil.isImmutableValue(parent.getFirstChild())) {\n+      return false;\n+    }\n+\n+    // When parent is a FOR-IN statement, do not fold.\n+    if (parent.getType() == Token.FOR && parent.hasTwoChildren() && parent.getChildAtIndex(0).getType() == Token.VAR) {\n+      Node variableDeclarationList = parent.getFirstChild();\n+      if (variableDeclarationList.hasOneChild()) {\n+        Node variableDeclaration = variableDeclarationList.getFirstChild();\n+        if (variableDeclaration.hasOneChild()) {\n+          Node singleVariable = variableDeclaration.getFirstChild();\n+          if (singleVariable.getType() == Token.NAME) {\n+            String variableName = singleVariable.getString();\n+            Node collection = parent.getChildAtIndex(1);\n+            if (collection.getType() == Token.NAME) {\n+              if (collection.getString().equals(variableName)) {\n+                return false;\n+              }\n+            } else if (collection.getType() == Token.GETPROP) {\n+              Node collectionNode = collection.getFirstChild();\n+              if (collectionNode.getType() == Token.NAME && collectionNode.getString().equals(\"Object\")) {\n+                Node propName = collection.getChildAtIndex(1);\n+                if (propName.getType() == Token.STRING && propName.getString().equals(\"prototype\")) {\n+                  return false;\n+                }\n+              }\n+            }\n+          }\n+        }\n       }\n     }\n \n-    return false;\n+    return NodeUtil.isExpressionNode(maybeExpr);\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}