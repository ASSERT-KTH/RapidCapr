{
    "patch": "public static double getTypedPercent(String typed, String correct) {\n    String[] typedWords = typed.split(\"\\\\s\");\n    String[] correctWords = correct.split(\"\\\\s\");\n\n    int numCorrect = 0;\n    for (int i = 0; i < typedWords.length; i++) {\n        if (i < correctWords.length && typedWords[i].equals(correctWords[i])) {\n            numCorrect++;\n        }\n    }\n\n    return (double) numCorrect / (double) correctWords.length * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..f52be654 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String typed, String correct) {\n+    String[] typedWords = typed.split(\"\\\\s\");\n+    String[] correctWords = correct.split(\"\\\\s\");\n+\n+    int numCorrect = 0;\n+    for (int i = 0; i < typedWords.length; i++) {\n+        if (i < correctWords.length && typedWords[i].equals(correctWords[i])) {\n+            numCorrect++;\n+        }\n+    }\n+\n+    return (double) numCorrect / (double) correctWords.length * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}