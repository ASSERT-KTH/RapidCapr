{
    "patch": "                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = new RealPointValuePair[] {best, expanded, original[1], original[2]};\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, original[1]) < 0) {\n                // perform an inside contraction\n                final RealPointValuePair contractedInside = evaluateNewSimplex(original, beta, comparator);\n                if (comparator.compare(contractedInside, contracted) < 0) {\n                    // accept the contracted inside simplex\n                    simplex = new RealPointValuePair[] {best, contractedInside, original[1], original[2]};\n                } else {\n                    // accept the contracted simplex\n                    simplex = new RealPointValuePair[] {best, contracted, original[1], original[2]};\n                }\n            } else if (comparator.compare(contracted, original[2]) < 0) {\n                // accept the contracted simplex\n                simplex = new RealPointValuePair[] {best, contracted, original[1], original[2]};\n            } else {\n                // perform an outside contraction\n                final RealPointValuePair contractedOutside = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contractedOutside, best) < 0) {\n                    // accept the contracted outside simplex\n                    simplex = new RealPointValuePair[] {best, contractedOutside, original[1], original[2]};\n                } else {\n                    // perform a shrink\n                    simplex = new RealPointValuePair[] {best};\n                    for (int i = 1; i < simplex.length; i++) {\n                        simplex[i] = new RealPointValuePair(\n                            ArrayMath.add(best.getPoint(), ArrayMath.scale(ArrayMath.subtract(original[i].getPoint(), best.getPoint()), sigma)),\n                            Double.NaN,\n                            false\n                        );\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..63469bfe0 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,27 +58,12 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    // accept the reflected simplex\n+                    simplex = new RealPointValuePair[] {best, expanded, original[1], original[2]};\n                 }\n \n                 return;\n@@ -87,16 +72,35 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n+            if (comparator.compare(contracted, original[1]) < 0) {\n+                // perform an inside contraction\n+                final RealPointValuePair contractedInside = evaluateNewSimplex(original, beta, comparator);\n+                if (comparator.compare(contractedInside, contracted) < 0) {\n+                    // accept the contracted inside simplex\n+                    simplex = new RealPointValuePair[] {best, contractedInside, original[1], original[2]};\n+                } else {\n+                    // accept the contracted simplex\n+                    simplex = new RealPointValuePair[] {best, contracted, original[1], original[2]};\n+                }\n+            } else if (comparator.compare(contracted, original[2]) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n-\n-        }\n-\n-    }\n+                simplex = new RealPointValuePair[] {best, contracted, original[1], original[2]};\n+            } else {\n+                // perform an outside contraction\n+                final RealPointValuePair contractedOutside = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contractedOutside, best) < 0) {\n+                    // accept the contracted outside simplex\n+                    simplex = new RealPointValuePair[] {best, contractedOutside, original[1], original[2]};\n+                } else {\n+                    // perform a shrink\n+                    simplex = new RealPointValuePair[] {best};\n+                    for (int i = 1; i < simplex.length; i++) {\n+                        simplex[i] = new RealPointValuePair(\n+                            ArrayMath.add(best.getPoint(), ArrayMath.scale(ArrayMath.subtract(original[i].getPoint(), best.getPoint()), sigma)),\n+                            Double.NaN,\n+                            false\n+                        );\n+                    }\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}