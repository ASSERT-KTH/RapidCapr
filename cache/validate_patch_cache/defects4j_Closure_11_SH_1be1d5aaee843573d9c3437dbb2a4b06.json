{
    "patch": "} else if (n.getJSType() != null) {\n  if (parent != null && parent.isAssign()) {\n    return;\n  } else {\n    String propertyName = n.getLastChild().getString();\n    // Check if the property is a mutable variable declaration\n    if (NodeUtil.isNameDeclaration(parent)) {\n      warnings.add(JSError.make(n, UNSAFE_PROP_ASSIGN));\n      return;\n    }\n    // Check if the property is a parameter in a function declaration\n    if (NodeUtil.isParamName(n, parent)) {\n      warnings.add(JSError.make(n, UNSAFE_PROP_ASSIGN));\n      return;\n    }\n    // Check if the property is a catch parameter\n    if (parent.isCatch()) {\n      warnings.add(JSError.make(n, UNSAFE_PROP_ASSIGN));\n      return;\n    }\n    // Check if the property is a prototype method\n    if (propertyName.equals(\"prototype\")) {\n      warnings.add(JSError.make(n, UNSAFE_THIS));\n      return;\n    }\n    // Check if the property is a constructor\n    if (propertyName.equals(\"constructor\")) {\n      warnings.add(JSError.make(n, UNSAFE_CTOR_ALIASING));\n      return;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}