{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final double memoryFactor = 0.8; // fraction of available memory to use\n    final double usableMemory = Runtime.getRuntime().maxMemory() * memoryFactor; // total usable memory\n    final double maxMatrixSize = Math.sqrt(usableMemory / 16); // maximum number of rows or columns for a matrix that uses the available memory\n\n    final long numRows = m.getRowDimension();\n    final long numCols = m.getColumnDimension();\n\n    // check for overflow in matrix size\n    if (numRows <= 0 || numCols <= 0 || numRows > maxMatrixSize || numCols > maxMatrixSize) {\n        System.out.println(\"Invalid matrix size. Please use a smaller matrix.\");\n        return null;\n    }\n\n    final double requiredMemory = numRows * numCols * 16; // total memory required for matrix\n\n    // check if the matrix size exceeds the memory limit\n    if (requiredMemory > usableMemory) {\n        System.out.println(\"Matrix size exceeds available memory. Please use a smaller matrix.\");\n        return null;\n    } else {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..533869b8c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final double memoryFactor = 0.8; // fraction of available memory to use\n+    final double usableMemory = Runtime.getRuntime().maxMemory() * memoryFactor; // total usable memory\n+    final double maxMatrixSize = Math.sqrt(usableMemory / 16); // maximum number of rows or columns for a matrix that uses the available memory\n+\n+    final long numRows = m.getRowDimension();\n+    final long numCols = m.getColumnDimension();\n+\n+    // check for overflow in matrix size\n+    if (numRows <= 0 || numCols <= 0 || numRows > maxMatrixSize || numCols > maxMatrixSize) {\n+        System.out.println(\"Invalid matrix size. Please use a smaller matrix.\");\n+        return null;\n     }\n+\n+    final double requiredMemory = numRows * numCols * 16; // total memory required for matrix\n+\n+    // check if the matrix size exceeds the memory limit\n+    if (requiredMemory > usableMemory) {\n+        System.out.println(\"Matrix size exceeds available memory. Please use a smaller matrix.\");\n+        return null;\n+    } else {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n+    }\n+}\n }",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}