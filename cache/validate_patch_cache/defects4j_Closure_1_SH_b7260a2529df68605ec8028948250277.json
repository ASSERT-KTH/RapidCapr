{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Collect unreferenced args so we can remove them.\n      List<Node> toRemove = new ArrayList<>();\n      for (Node arg : argList.children()) {\n        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n          toRemove.add(arg);\n        }\n      }\n\n      // There are no unreferenced parameters.\n      if (toRemove.isEmpty()) {\n        return;\n      }\n\n      // Remove the unreferenced parameters.\n      for (Node arg : toRemove) {\n        argList.removeChild(arg);\n        compiler.reportCodeChange();\n      }\n\n      // Trim trailing commas.\n      trimEmptyParamOnSimpleArrowFunction(argList);\n\n      // Trim any empty var args param.\n      trimEmptyRestOnSimpleArrowFunction(argList);\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..cf9fb3aa 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,45 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Collect unreferenced args so we can remove them.\n+      List<Node> toRemove = new ArrayList<>();\n+      for (Node arg : argList.children()) {\n+        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+          toRemove.add(arg);\n+        }\n+      }\n+\n+      // There are no unreferenced parameters.\n+      if (toRemove.isEmpty()) {\n+        return;\n+      }\n+\n+      // Remove the unreferenced parameters.\n+      for (Node arg : toRemove) {\n+        argList.removeChild(arg);\n+        compiler.reportCodeChange();\n+      }\n+\n+      // Trim trailing commas.\n+      trimEmptyParamOnSimpleArrowFunction(argList);\n+\n+      // Trim any empty var args param.\n+      trimEmptyRestOnSimpleArrowFunction(argList);\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}