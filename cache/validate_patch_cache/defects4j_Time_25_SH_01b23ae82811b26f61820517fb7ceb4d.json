{
    "patch": "            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n            if (nextLocal == nextAdjusted) {\n                int diff = offsetAdjusted - offsetLocal;\n                int nextOffset = getOffset(nextLocal - (diff < 0 ? 1 : 0));\n                int diffNext = nextOffset - offsetAdjusted;\n\n                if ((instantLocal - nextLocal) < diff * DateTimeConstants.MILLIS_PER_HOUR ||\n                    (nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n\n                    // Less than boundaries for both sides, choose smallest offset\n                    if (offsetLocal < nextOffset) {\n                        return offsetLocal;\n                    } else if (offsetLocal > nextOffset) {\n                        return nextOffset;\n                    } else {\n                        // Offset is same, return original one\n                        return offsetLocal;\n                    }\n\n                } else if (diff < 0 && ((nextLocal - instantAdjusted) < diffNext * DateTimeConstants.MILLIS_PER_HOUR)) {\n                    // Inside DST gap for negative diff, return oldOffset\n                    return offsetLocal;\n                } else if (diff > 0 && ((nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR)) {\n                    // Inside DST overlap for positive diff, return oldOffset\n                    return offsetLocal;\n                }\n\n            } else {\n                int offsetNext = getOffset(nextLocal);\n                int diff = offsetNext - offsetLocal;\n                int diffNext = offsetAdjusted - offsetNext;\n\n                if ((nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n\n                    // Inside boundary for the next timeZone\n                    if (offsetLocal < offsetNext) {\n                        return offsetLocal;\n                    } else if (offsetLocal > offsetNext) {\n                        return offsetNext;\n                    } else {\n                        return offsetLocal;\n                    }\n\n                } else if (diff > 0 && ((nextLocal - instantAdjusted) < diffNext * DateTimeConstants.MILLIS_PER_HOUR)) {\n                    // Inside DST overlap, return oldOffset\n                    return offsetLocal;\n                } else if (diff < 0) {\n                    // Negative diff means DST gap\n                    int offsetGap = getOffset(nextLocal - 1);\n                    if (offsetLocal > offsetGap && offsetAdjusted < offsetGap) {\n                        // Inside DST gap, return oldOffset\n                        return offsetLocal;\n                    } else if (offsetLocal < offsetAdjusted) {\n                        // We already were in DST from oldOffset to now\n                        return offsetLocal;\n                    } else if (offsetAdjusted < offsetGap) {\n                        // We're still in DST, return oldOffset\n                        return offsetLocal;\n                    } else {\n                        // We exited DST, use the next offset\n                        return offsetNext;\n                    }\n                }\n\n                if ((nextAdjusted - instantLocal) < diffNext * DateTimeConstants.MILLIS_PER_HOUR) {\n\n                    // Inside boundary for the next timeZone\n                    if (offsetAdjusted < offsetNext) {\n                        return offsetAdjusted;\n                    } else if (offsetAdjusted > offsetNext) {\n                        return offsetNext;\n                    } else {\n                        return offsetAdjusted;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..31f285be 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,82 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+            if (nextLocal == nextAdjusted) {\n+                int diff = offsetAdjusted - offsetLocal;\n+                int nextOffset = getOffset(nextLocal - (diff < 0 ? 1 : 0));\n+                int diffNext = nextOffset - offsetAdjusted;\n+\n+                if ((instantLocal - nextLocal) < diff * DateTimeConstants.MILLIS_PER_HOUR ||\n+                    (nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+\n+                    // Less than boundaries for both sides, choose smallest offset\n+                    if (offsetLocal < nextOffset) {\n+                        return offsetLocal;\n+                    } else if (offsetLocal > nextOffset) {\n+                        return nextOffset;\n+                    } else {\n+                        // Offset is same, return original one\n+                        return offsetLocal;\n+                    }\n+\n+                } else if (diff < 0 && ((nextLocal - instantAdjusted) < diffNext * DateTimeConstants.MILLIS_PER_HOUR)) {\n+                    // Inside DST gap for negative diff, return oldOffset\n+                    return offsetLocal;\n+                } else if (diff > 0 && ((nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR)) {\n+                    // Inside DST overlap for positive diff, return oldOffset\n+                    return offsetLocal;\n+                }\n+\n+            } else {\n+                int offsetNext = getOffset(nextLocal);\n+                int diff = offsetNext - offsetLocal;\n+                int diffNext = offsetAdjusted - offsetNext;\n+\n+                if ((nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+\n+                    // Inside boundary for the next timeZone\n+                    if (offsetLocal < offsetNext) {\n+                        return offsetLocal;\n+                    } else if (offsetLocal > offsetNext) {\n+                        return offsetNext;\n+                    } else {\n+                        return offsetLocal;\n+                    }\n+\n+                } else if (diff > 0 && ((nextLocal - instantAdjusted) < diffNext * DateTimeConstants.MILLIS_PER_HOUR)) {\n+                    // Inside DST overlap, return oldOffset\n+                    return offsetLocal;\n+                } else if (diff < 0) {\n+                    // Negative diff means DST gap\n+                    int offsetGap = getOffset(nextLocal - 1);\n+                    if (offsetLocal > offsetGap && offsetAdjusted < offsetGap) {\n+                        // Inside DST gap, return oldOffset\n+                        return offsetLocal;\n+                    } else if (offsetLocal < offsetAdjusted) {\n+                        // We already were in DST from oldOffset to now\n+                        return offsetLocal;\n+                    } else if (offsetAdjusted < offsetGap) {\n+                        // We're still in DST, return oldOffset\n+                        return offsetLocal;\n+                    } else {\n+                        // We exited DST, use the next offset\n+                        return offsetNext;\n+                    }\n+                }\n+\n+                if ((nextAdjusted - instantLocal) < diffNext * DateTimeConstants.MILLIS_PER_HOUR) {\n+\n+                    // Inside boundary for the next timeZone\n+                    if (offsetAdjusted < offsetNext) {\n+                        return offsetAdjusted;\n+                    } else if (offsetAdjusted > offsetNext) {\n+                        return offsetNext;\n+                    } else {\n+                        return offsetAdjusted;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}