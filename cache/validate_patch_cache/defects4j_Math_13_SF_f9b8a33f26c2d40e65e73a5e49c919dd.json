{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final RealMatrix dSqrt = MatrixUtils.createRealMatrix(d.getRowDimension(), d.getColumnDimension());\n    final double epsilon = Math.pow(2.0, -52);\n\n    // Compute the square root of the diagonal matrix\n    for (int i = 0; i < d.getRowDimension(); i++) {\n        double eigval = d.getEntry(i, i);\n\n        if (eigval < -epsilon) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        } else if (eigval < 0.0 || Math.abs(eigval) < epsilon) {\n            dSqrt.setEntry(i, i, 0.0);\n        } else {\n            dSqrt.setEntry(i, i, Math.sqrt(eigval));\n        }\n    }\n\n    // Return the square root of the matrix\n    return v.multiply(dSqrt).multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..34692bbe6 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final RealMatrix dSqrt = MatrixUtils.createRealMatrix(d.getRowDimension(), d.getColumnDimension());\n+    final double epsilon = Math.pow(2.0, -52);\n+\n+    // Compute the square root of the diagonal matrix\n+    for (int i = 0; i < d.getRowDimension(); i++) {\n+        double eigval = d.getEntry(i, i);\n+\n+        if (eigval < -epsilon) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        } else if (eigval < 0.0 || Math.abs(eigval) < epsilon) {\n+            dSqrt.setEntry(i, i, 0.0);\n+        } else {\n+            dSqrt.setEntry(i, i, Math.sqrt(eigval));\n+        }\n     }\n+\n+    // Return the square root of the matrix\n+    return v.multiply(dSqrt).multiply(v.transpose());\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}