{
    "patch": "public static String getprop(String propName) {\n   String value = null;\n   InputStream inputStream = null;\n   try {\n      Process process = Runtime.getRuntime().exec(\"getprop \" + propName);\n      process.waitFor();\n      inputStream = process.getInputStream();\n      if (inputStream != null) {\n         BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));\n         value = reader.readLine();\n         reader.close();\n      }\n   } catch (Exception e) {\n      // handle exception\n   } finally {\n      if (inputStream != null) {\n         try {\n            inputStream.close();\n         } catch (IOException e) {\n            // handle exception\n         }\n      }\n   }\n   return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..505087f4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,31 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String propName) {\n+   String value = null;\n+   InputStream inputStream = null;\n+   try {\n+      Process process = Runtime.getRuntime().exec(\"getprop \" + propName);\n+      process.waitFor();\n+      inputStream = process.getInputStream();\n+      if (inputStream != null) {\n+         BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));\n+         value = reader.readLine();\n+         reader.close();\n+      }\n+   } catch (Exception e) {\n+      // handle exception\n+   } finally {\n+      if (inputStream != null) {\n+         try {\n+            inputStream.close();\n+         } catch (IOException e) {\n+            // handle exception\n+         }\n+      }\n+   }\n+   return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}