{
    "patch": "Type[] bounds = typeVariable.getBounds();\nif (bounds.length == 0) {\n    registerTypeVariablesOn(typeVariable.getGenericDeclaration());\n} else {\n    boolean hasClassBound = false;\n    for (Type bound : bounds) {\n        if (bound instanceof Class) {\n            registerTypeVariablesOn(bound);\n            hasClassBound = true;\n            break;\n        }\n    }\n    if (!hasClassBound) {\n        registerTypeVariablesOn(typeVariable.getGenericDeclaration());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..459471ac2 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,27 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] bounds = typeVariable.getBounds();\n+if (bounds.length == 0) {\n+    registerTypeVariablesOn(typeVariable.getGenericDeclaration());\n+} else {\n+    boolean hasClassBound = false;\n+    for (Type bound : bounds) {\n+        if (bound instanceof Class) {\n+            registerTypeVariablesOn(bound);\n+            hasClassBound = true;\n+            break;\n+        }\n+    }\n+    if (!hasClassBound) {\n+        registerTypeVariablesOn(typeVariable.getGenericDeclaration());\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: incompatible types: GenericDeclaration cannot be converted to Type",
    "test_result": "ERROR"
}