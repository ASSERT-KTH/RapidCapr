{
    "patch": "public String[] getProp(String propName) {\n    String value = null;\n    try {\n        final String command = \"getprop \" + propName;\n        final Process process = Runtime.getRuntime().exec(command);\n        final InputStream inputStream = process.getInputStream();\n        value = Utils.readFully(inputStream);\n    } catch (IOException e) { \n        // Do nothing \n    }\n    if (value == null || value.isEmpty()) {\n        return new String[0];\n    }\n    String[] values = value.trim().split(\"\\\\n\");\n    for (int i = 0 ; i < values.length ; i++) {\n        values[i] = values[i].trim();\n    }\n    return values;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..952cc7d0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String[] getProp(String propName) {\n+    String value = null;\n+    try {\n+        final String command = \"getprop \" + propName;\n+        final Process process = Runtime.getRuntime().exec(command);\n+        final InputStream inputStream = process.getInputStream();\n+        value = Utils.readFully(inputStream);\n+    } catch (IOException e) { \n+        // Do nothing \n+    }\n+    if (value == null || value.isEmpty()) {\n+        return new String[0];\n+    }\n+    String[] values = value.trim().split(\"\\\\n\");\n+    for (int i = 0 ; i < values.length ; i++) {\n+        values[i] = values[i].trim();\n+    }\n+    return values;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}