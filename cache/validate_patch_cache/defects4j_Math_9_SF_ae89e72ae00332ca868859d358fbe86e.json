{
    "patch": "    public Line revert() {\n        final Vector3D zero = Vector3D.ZERO;\n        final Vector3D negatedDirection = direction.negate();\n        final double newDirectionX = Math.round(negatedDirection.getX() * 1e15) / 1e15;\n        final double newDirectionY = Math.round(negatedDirection.getY() * 1e15) / 1e15;\n        final double newDirectionZ = Math.round(negatedDirection.getZ() * 1e15) / 1e15;\n        final Vector3D newDirection = new Vector3D(newDirectionX, newDirectionY, newDirectionZ);\n        return new Line(zero, newDirection);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..661c1d04e 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,8 +84,13 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+        final Vector3D zero = Vector3D.ZERO;\n+        final Vector3D negatedDirection = direction.negate();\n+        final double newDirectionX = Math.round(negatedDirection.getX() * 1e15) / 1e15;\n+        final double newDirectionY = Math.round(negatedDirection.getY() * 1e15) / 1e15;\n+        final double newDirectionZ = Math.round(negatedDirection.getZ() * 1e15) / 1e15;\n+        final Vector3D newDirection = new Vector3D(newDirectionX, newDirectionY, newDirectionZ);\n+        return new Line(zero, newDirection);\n     }\n \n     /** Get the normalized direction vector.",
    "result_reason": "junit.framework.AssertionFailedError: arrays first differed at element [0]; expected:<0.028581782127907646> but was:<0.028581782127908014>",
    "test_result": "FAIL"
}