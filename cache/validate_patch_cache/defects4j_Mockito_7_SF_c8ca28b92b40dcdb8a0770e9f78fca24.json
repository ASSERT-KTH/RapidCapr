{
    "patch": "private void readTypeVariables() {\n    if (typeVariable.getGenericDeclaration() instanceof Class) {\n        Class<?> typeVariableOwnerClass = (Class) typeVariable.getGenericDeclaration();\n        TypeVariable<?>[] typeParameters = typeVariableOwnerClass.getTypeParameters();\n        for (TypeParameter<?> typeParameter : typeParameters) {\n            if (typeParameter.getName().equals(typeVariable.getName())) {\n                Type[] bounds = typeParameter.getBounds();\n                if (bounds.length == 0) {\n                    registerTypeVariablesOn(Object.class);\n                } else {\n                    for (Type type : bounds) {\n                        registerTypeVariablesOn(type);\n                    }\n                }\n                break;\n            }\n        }\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument != null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    } else {\n        for (Type type : typeVariable.getBounds()) {\n            registerTypeVariablesOn(type);\n        }\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument != null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..65bd8160d 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,38 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable.getGenericDeclaration() instanceof Class) {\n+        Class<?> typeVariableOwnerClass = (Class) typeVariable.getGenericDeclaration();\n+        TypeVariable<?>[] typeParameters = typeVariableOwnerClass.getTypeParameters();\n+        for (TypeParameter<?> typeParameter : typeParameters) {\n+            if (typeParameter.getName().equals(typeVariable.getName())) {\n+                Type[] bounds = typeParameter.getBounds();\n+                if (bounds.length == 0) {\n+                    registerTypeVariablesOn(Object.class);\n+                } else {\n+                    for (Type type : bounds) {\n+                        registerTypeVariablesOn(type);\n+                    }\n+                }\n+                break;\n+            }\n+        }\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument != null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    } else {\n+        for (Type type : typeVariable.getBounds()) {\n+            registerTypeVariablesOn(type);\n+        }\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument != null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}