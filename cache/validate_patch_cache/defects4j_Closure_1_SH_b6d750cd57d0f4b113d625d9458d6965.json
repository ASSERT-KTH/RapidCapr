{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction() || function.isArrowFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        Node prev = lastArg.getPrevious();\n        String argName = lastArg.getString();\n        Var var = fnScope.getVar(argName);\n        if (var == null || !referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          if (var.getNameNode() == null) {\n            // Variable is declared without var/let/const.\n            Set<Node> nameNodes = var.getNameNodes();\n            Node init = null;\n            for (Node nameNode : nameNodes) {\n              if (nameNode.getParent() == lastArg.getParent() || nameNode == lastArg) {\n                continue;\n              }\n              // We store this in a separate variable so that we don't modify it during the loop.\n              Node tempInit = NodeUtil.getRValueOfLValue(nameNode);\n              if (tempInit != null) {\n                if (init == null) {\n                  init = tempInit;\n                } else {\n                  init = new Node(Token.COMMA, init, tempInit);\n                }\n              }\n              argList.removeChild(lastArg);\n              Node nameNodeParent = nameNode.getParent();\n              if (init != null && nameNodeParent.isAssign()) {\n                // If there is an initialization value, drop the original name node\n                // and replace the entire assignment with a simple var declaration.\n                Node newVar = IR.var(IR.name(argName), init)\n                    .setJSDocInfo(NodeUtil.getBestJSDocInfo(nameNodeParent));\n                nameNodeParent.replaceWith(newVar);\n                compiler.reportCodeChange();\n              } else if (nameNodeParent.isDestructuringLhs()) {\n                Preconditions.checkState(nameNodeParent.getParent().isAssign());\n                // If this is a destructuring pattern, just remove it altogether.\n                // The value will still be assigned, but the destructuring lhs node\n                // will no longer refer to any symbol.\n                nameNodeParent.detach();\n                compiler.reportCodeChange();\n              } else if (nameNode != lastArg) {\n                // Other references to the parameter still exist in the function,\n                // so we can't remove it.\n                break;\n              }\n            }\n          }\n          break;\n        }\n        lastArg = prev;\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..693d7a7c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,74 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction() || function.isArrowFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        Node prev = lastArg.getPrevious();\n+        String argName = lastArg.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (var == null || !referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          if (var.getNameNode() == null) {\n+            // Variable is declared without var/let/const.\n+            Set<Node> nameNodes = var.getNameNodes();\n+            Node init = null;\n+            for (Node nameNode : nameNodes) {\n+              if (nameNode.getParent() == lastArg.getParent() || nameNode == lastArg) {\n+                continue;\n+              }\n+              // We store this in a separate variable so that we don't modify it during the loop.\n+              Node tempInit = NodeUtil.getRValueOfLValue(nameNode);\n+              if (tempInit != null) {\n+                if (init == null) {\n+                  init = tempInit;\n+                } else {\n+                  init = new Node(Token.COMMA, init, tempInit);\n+                }\n+              }\n+              argList.removeChild(lastArg);\n+              Node nameNodeParent = nameNode.getParent();\n+              if (init != null && nameNodeParent.isAssign()) {\n+                // If there is an initialization value, drop the original name node\n+                // and replace the entire assignment with a simple var declaration.\n+                Node newVar = IR.var(IR.name(argName), init)\n+                    .setJSDocInfo(NodeUtil.getBestJSDocInfo(nameNodeParent));\n+                nameNodeParent.replaceWith(newVar);\n+                compiler.reportCodeChange();\n+              } else if (nameNodeParent.isDestructuringLhs()) {\n+                Preconditions.checkState(nameNodeParent.getParent().isAssign());\n+                // If this is a destructuring pattern, just remove it altogether.\n+                // The value will still be assigned, but the destructuring lhs node\n+                // will no longer refer to any symbol.\n+                nameNodeParent.detach();\n+                compiler.reportCodeChange();\n+              } else if (nameNode != lastArg) {\n+                // Other references to the parameter still exist in the function,\n+                // so we can't remove it.\n+                break;\n+              }\n+            }\n+          }\n+          break;\n+        }\n+        lastArg = prev;\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}