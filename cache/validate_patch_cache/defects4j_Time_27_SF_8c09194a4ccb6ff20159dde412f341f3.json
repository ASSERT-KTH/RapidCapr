{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        List<Object> sublist = elementPairs.subList(1, size);\n        if (sublist.size() == 1) {\n            Object next = sublist.get(0);\n            PeriodFormatter formatter = null;\n            if (next instanceof PeriodPrinter) {\n                formatter = new PeriodFormatter((PeriodPrinter) next, null);\n            } else if (next instanceof PeriodParser) {\n                formatter = new PeriodFormatter(null, (PeriodParser) next);\n            }\n            if (formatter != null) {\n                // Since we are returning a new formatter here, we must apply the separator finishing method\n                return sep == null ? formatter : new PeriodFormatter(sep.finish(formatter.getPrinter(), formatter.getParser()), sep);\n            }\n        }\n        PeriodFormatter embeddedFormatter = toFormatter(sublist, notPrinter, notParser);\n        PeriodPrinter printer = embeddedFormatter.getPrinter();\n        PeriodParser parser = embeddedFormatter.getParser();\n        sep = sep.finish(printer, parser);\n        if (notPrinter && !notParser) {\n            return new PeriodFormatter(null, parser);\n        } else if (notParser && !notPrinter) {\n            return new PeriodFormatter(printer, null);\n        } else {\n            return new PeriodFormatter(printer, parser);\n        }\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..486b1e59 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,48 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        List<Object> sublist = elementPairs.subList(1, size);\n+        if (sublist.size() == 1) {\n+            Object next = sublist.get(0);\n+            PeriodFormatter formatter = null;\n+            if (next instanceof PeriodPrinter) {\n+                formatter = new PeriodFormatter((PeriodPrinter) next, null);\n+            } else if (next instanceof PeriodParser) {\n+                formatter = new PeriodFormatter(null, (PeriodParser) next);\n+            }\n+            if (formatter != null) {\n+                // Since we are returning a new formatter here, we must apply the separator finishing method\n+                return sep == null ? formatter : new PeriodFormatter(sep.finish(formatter.getPrinter(), formatter.getParser()), sep);\n+            }\n+        }\n+        PeriodFormatter embeddedFormatter = toFormatter(sublist, notPrinter, notParser);\n+        PeriodPrinter printer = embeddedFormatter.getPrinter();\n+        PeriodParser parser = embeddedFormatter.getParser();\n+        sep = sep.finish(printer, parser);\n+        if (notPrinter && !notParser) {\n+            return new PeriodFormatter(null, parser);\n+        } else if (notParser && !notPrinter) {\n+            return new PeriodFormatter(printer, null);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            return new PeriodFormatter(printer, parser);\n         }\n     }\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.IllegalArgumentException: Invalid format: \"P0D\"",
    "test_result": "FAIL"
}