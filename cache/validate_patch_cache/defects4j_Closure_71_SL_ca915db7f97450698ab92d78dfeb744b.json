{
    "patch": "boolean isOverride = t.getScope().isGlobal() &&\n    parent.isAssign() &&\n    parent.getFirstChild() == getprop;\nif (!isOverride) {\n    ObjectType objectType = ObjectType.cast(dereference(\n          getprop.getFirstChild().getJSType()));\n      if (objectType != null) {\n        objectType = objectType.getImplicitPrototype();\n        isOverride = objectType != null &&\n            objectType.getOwnPropertyJSDocInfo(\n                getprop.getLastChild().getString()) != null;\n      }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..bb760c65 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,19 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+boolean isOverride = t.getScope().isGlobal() &&\n+    parent.isAssign() &&\n+    parent.getFirstChild() == getprop;\n+if (!isOverride) {\n+    ObjectType objectType = ObjectType.cast(dereference(\n+          getprop.getFirstChild().getJSType()));\n+      if (objectType != null) {\n+        objectType = objectType.getImplicitPrototype();\n+        isOverride = objectType != null &&\n+            objectType.getOwnPropertyJSDocInfo(\n+                getprop.getLastChild().getString()) != null;\n+      }\n+}\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}