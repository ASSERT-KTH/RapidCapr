{
    "patch": "      if (functionType.getThisType() != null && n.getParent().isGetProp()) {\n        // OK, as expected.\n      } else if (functionType.getThisType() != null &&\n          (n.getParent().isCall() || n.getParent().isNew())) {\n        report(t, n, EXPECTED_THIS_TYPE);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..5b5b7071 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,11 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getThisType() != null && n.getParent().isGetProp()) {\n+        // OK, as expected.\n+      } else if (functionType.getThisType() != null &&\n+          (n.getParent().isCall() || n.getParent().isNew())) {\n+        report(t, n, EXPECTED_THIS_TYPE);\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}