{
    "patch": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    boolean isInnerClass = settings.getTypeToMock().isMemberClass() && !Modifier.isStatic(settings.getTypeToMock().getModifiers());\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        if (isInnerClass) {\n            Constructor<?>[] declaredConstructors = mockedProxyType.getDeclaredConstructors();\n            Constructor<?> constructorToUse = null;\n            for (Constructor<?> declaredConstructor : declaredConstructors) {\n                if (declaredConstructor.getParameterCount() == 2 &&\n                        declaredConstructor.getParameterTypes()[1] == settings.getTypeToMock().getDeclaringClass()) {\n                    constructorToUse = declaredConstructor;\n                    break;\n                }\n            }\n            if (constructorToUse == null) {\n                throw new MockitoException(join(\n                        \"Unable to find a valid constructor to instantiate an inner mock\",\n                        \"  class to mock : \" + describeClass(mockedProxyType),\n                        \"  created class : \" + describeClass(settings.getTypeToMock()),\n                        \"\",\n                        \"Please report this to the mockito mailing-list.\",\n                        \"\"\n                ));\n            }\n            mockInstance = (T)constructorToUse.newInstance(asInternalMockHandler(handler), outerInstance);\n        } else {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n            final MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(\n                    asInternalMockHandler(handler),\n                    settings));\n        }\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ),cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n    } catch (IllegalAccessException | InstantiationException | InvocationTargetException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'\", e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..253846741 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,36 +21,64 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n-        }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n+public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n+        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+    }\n+    boolean isInnerClass = settings.getTypeToMock().isMemberClass() && !Modifier.isStatic(settings.getTypeToMock().getModifiers());\n+    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n+            settings.getTypeToMock(),\n+            settings.getExtraInterfaces()\n+    );\n+    T mockInstance = null;\n+    try {\n+        if (isInnerClass) {\n+            Constructor<?>[] declaredConstructors = mockedProxyType.getDeclaredConstructors();\n+            Constructor<?> constructorToUse = null;\n+            for (Constructor<?> declaredConstructor : declaredConstructors) {\n+                if (declaredConstructor.getParameterCount() == 2 &&\n+                        declaredConstructor.getParameterTypes()[1] == settings.getTypeToMock().getDeclaringClass()) {\n+                    constructorToUse = declaredConstructor;\n+                    break;\n+                }\n+            }\n+            if (constructorToUse == null) {\n+                throw new MockitoException(join(\n+                        \"Unable to find a valid constructor to instantiate an inner mock\",\n+                        \"  class to mock : \" + describeClass(mockedProxyType),\n+                        \"  created class : \" + describeClass(settings.getTypeToMock()),\n+                        \"\",\n+                        \"Please report this to the mockito mailing-list.\",\n+                        \"\"\n+                ));\n+            }\n+            mockInstance = (T)constructorToUse.newInstance(asInternalMockHandler(handler), outerInstance);\n+        } else {\n             mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n-\n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+            final MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n+            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(\n+                    asInternalMockHandler(handler),\n+                    settings));\n         }\n+\n+        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n+    } catch (ClassCastException cce) {\n+        throw new MockitoException(join(\n+                \"ClassCastException occurred while creating the mockito mock :\",\n+                \"  class to mock : \" + describeClass(mockedProxyType),\n+                \"  created class : \" + describeClass(settings.getTypeToMock()),\n+                \"  proxy instance class : \" + describeClass(mockInstance),\n+                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n+                \"\",\n+                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n+                \"\"\n+        ),cce);\n+    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n+        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+    } catch (IllegalAccessException | InstantiationException | InvocationTargetException e) {\n+        throw new MockitoException(\"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'\", e);\n     }\n+}\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}