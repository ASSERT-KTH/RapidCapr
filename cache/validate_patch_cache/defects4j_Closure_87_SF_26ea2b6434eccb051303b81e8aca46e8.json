{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n          return false;\n        }\n        // IE has a bug where event handlers behave differently when\n        // their return value is used vs. when their return value is in\n        // an EXPR_RESULT. It's pretty freaking weird. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        // We try to detect this case, and not fold EXPR_RESULTs\n        // into other expressions.\n        Node grandParent = n.getParent();\n        if (maybeExpr.isFunction() && grandParent != null &&\n            grandParent.isExprResult()) {\n          Node greatGrandParent = grandParent.getParent();\n          if (greatGrandParent != null &&\n              (greatGrandParent.isReturn() ||\n               (greatGrandParent.isAssign() &&\n                greatGrandParent.getParent() == n.getParent()))) {\n            return false;\n          }\n        }\n        // We only have to worry about methods with an implicit 'this'\n        // param, or this doesn't happen.\n        return !maybeExpr.isQualifiedName() || !maybeExpr.hasChildren();\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..1bea45fe 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -520,20 +520,31 @@ public class PeepholeSubstituteAlternateSyntax\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+          return false;\n+        }\n+        // IE has a bug where event handlers behave differently when\n+        // their return value is used vs. when their return value is in\n+        // an EXPR_RESULT. It's pretty freaking weird. See:\n+        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+        // We try to detect this case, and not fold EXPR_RESULTs\n+        // into other expressions.\n+        Node grandParent = n.getParent();\n+        if (maybeExpr.isFunction() && grandParent != null &&\n+            grandParent.isExprResult()) {\n+          Node greatGrandParent = grandParent.getParent();\n+          if (greatGrandParent != null &&\n+              (greatGrandParent.isReturn() ||\n+               (greatGrandParent.isAssign() &&\n+                greatGrandParent.getParent() == n.getParent()))) {\n+            return false;\n+          }\n+        }\n+        // We only have to worry about methods with an implicit 'this'\n+        // param, or this doesn't happen.\n+        return !maybeExpr.isQualifiedName() || !maybeExpr.hasChildren();\n       }\n     }\n-\n     return false;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}