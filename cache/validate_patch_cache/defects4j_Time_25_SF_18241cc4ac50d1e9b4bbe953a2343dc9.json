{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get the offset at instantLocal with the first estimate.\n    final int initialOffset = getOffset(instantLocal);\n    // Adjust instantLocal using the initial offset estimate and recalculate the offset.\n    final long instantAdjusted = instantLocal - initialOffset;\n    final int adjustedOffset = getOffset(instantAdjusted);\n    \n    // If the initial and adjusted offsets are different, we may be in a DST gap or overlap.\n    if (initialOffset != adjustedOffset) {\n        // Determine if we are in a DST gap or overlap.\n        boolean isGap = initialOffset > adjustedOffset;\n        // Calculate the transition points before and after the instant.\n        long transitionBefore = isGap ? previousTransition(instantAdjusted) : nextTransition(instantAdjusted - 1);\n        long transitionAfter = isGap ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted - 1);\n        // Calculate the offsets before and after the transitions.\n        int offsetBefore = getOffset(transitionBefore);\n        int offsetAfter = getOffset(transitionAfter);\n        \n        // Check whether the transition spans only one hour (which may happen with rounding).\n        boolean isOneHourTransition = (transitionAfter - transitionBefore) == DateTimeConstants.MILLIS_PER_HOUR;\n        \n        // Handle the case where the transition spans only one hour.\n        if (isOneHourTransition && offsetBefore == offsetAfter) {\n            if (initialOffset > offsetBefore) {\n                return initialOffset;\n            } else {\n                return offsetAfter;\n            }\n        }\n        \n        // Determine if the instant is in the early or late part of the transition.\n        boolean isEarly = instantLocal < ((transitionBefore + transitionAfter) / 2);\n        // Return the appropriate offset.\n        if (isGap) {\n            if (isEarly) {\n                return offsetBefore;\n            } else {\n                return offsetAfter;\n            }\n        } else {\n            if (isEarly) {\n                return offsetAfter;\n            } else {\n                return offsetBefore;\n            }\n        }\n    }\n    \n    // If the initial and adjusted offsets are the same, return the adjusted offset.\n    return adjustedOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..235b0164 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,57 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get the offset at instantLocal with the first estimate.\n+    final int initialOffset = getOffset(instantLocal);\n+    // Adjust instantLocal using the initial offset estimate and recalculate the offset.\n+    final long instantAdjusted = instantLocal - initialOffset;\n+    final int adjustedOffset = getOffset(instantAdjusted);\n+    \n+    // If the initial and adjusted offsets are different, we may be in a DST gap or overlap.\n+    if (initialOffset != adjustedOffset) {\n+        // Determine if we are in a DST gap or overlap.\n+        boolean isGap = initialOffset > adjustedOffset;\n+        // Calculate the transition points before and after the instant.\n+        long transitionBefore = isGap ? previousTransition(instantAdjusted) : nextTransition(instantAdjusted - 1);\n+        long transitionAfter = isGap ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted - 1);\n+        // Calculate the offsets before and after the transitions.\n+        int offsetBefore = getOffset(transitionBefore);\n+        int offsetAfter = getOffset(transitionAfter);\n+        \n+        // Check whether the transition spans only one hour (which may happen with rounding).\n+        boolean isOneHourTransition = (transitionAfter - transitionBefore) == DateTimeConstants.MILLIS_PER_HOUR;\n+        \n+        // Handle the case where the transition spans only one hour.\n+        if (isOneHourTransition && offsetBefore == offsetAfter) {\n+            if (initialOffset > offsetBefore) {\n+                return initialOffset;\n+            } else {\n+                return offsetAfter;\n+            }\n+        }\n+        \n+        // Determine if the instant is in the early or late part of the transition.\n+        boolean isEarly = instantLocal < ((transitionBefore + transitionAfter) / 2);\n+        // Return the appropriate offset.\n+        if (isGap) {\n+            if (isEarly) {\n+                return offsetBefore;\n+            } else {\n+                return offsetAfter;\n+            }\n+        } else {\n+            if (isEarly) {\n+                return offsetAfter;\n+            } else {\n+                return offsetBefore;\n             }\n         }\n-        return offsetAdjusted;\n     }\n+    \n+    // If the initial and adjusted offsets are the same, return the adjusted offset.\n+    return adjustedOffset;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}