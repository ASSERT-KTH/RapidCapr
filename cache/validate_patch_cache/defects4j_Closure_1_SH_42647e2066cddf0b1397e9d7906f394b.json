{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Record the number of original arguments, then the number of new\n    // arguments after removing the unreferenced args - if the number has\n    // changed then we need to update the Function.prototype.length property\n    int originalLength = argList.getChildCount();\n    int newLength = originalLength;\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n          newLength--;\n        } else {\n          break;\n        }\n      }\n\n      if (originalLength != newLength) {\n        Node lengthPropNode = IR.getprop(\n            IR.name(function.getFirstChild().getString()), \"length\");\n        Node updateLength = IR.exprResult(\n            IR.assign(lengthPropNode, IR.number(newLength)));\n        updateLength.useSourceInfoFrom(function.getParent());\n        function.getParent().addChildToBack(updateLength);\n        compiler.reportCodeChange();\n      }\n\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8dceb175 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,51 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Record the number of original arguments, then the number of new\n+    // arguments after removing the unreferenced args - if the number has\n+    // changed then we need to update the Function.prototype.length property\n+    int originalLength = argList.getChildCount();\n+    int newLength = originalLength;\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+          newLength--;\n+        } else {\n+          break;\n+        }\n+      }\n+\n+      if (originalLength != newLength) {\n+        Node lengthPropNode = IR.getprop(\n+            IR.name(function.getFirstChild().getString()), \"length\");\n+        Node updateLength = IR.exprResult(\n+            IR.assign(lengthPropNode, IR.number(newLength)));\n+        updateLength.useSourceInfoFrom(function.getParent());\n+        function.getParent().addChildToBack(updateLength);\n+        compiler.reportCodeChange();\n+      }\n+\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: method getprop in class IR cannot be applied to given types;",
    "test_result": "ERROR"
}