{
    "patch": "            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex.clone();\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n                if (comparator.compare(reflected, best) < 0) {\n\n                    // compute the expanded simplex\n                    final RealPointValuePair[] expandedSimplex = simplex.clone();\n                    final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                    if (comparator.compare(expanded, reflected) < 0) {\n                        // accept the expanded simplex\n\n                    } else {\n                        // accept the reflected simplex\n\n                    }\n                } else {\n                    final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                    if (comparator.compare(contracted, best) < 0) {\n                        // accept the contracted simplex\n                    } else {\n                        final RealPointValuePair[] contractedSimplex = simplex.clone();\n                        final RealPointValuePair[] shrunkSimplex = shrink(original, comparator);\n                        simplex = shrunkSimplex;\n                        if (comparator.compare(shrunkSimplex[0], original[0]) >= 0) {\n                            // perform a simplex reduction\n                            simplex = reduce(original, comparator);\n                        } else if (comparator.compare(contracted, simplex[n]) >= 0) {\n                            // perform a contraction with respect to the best point\n                            simplex = contract(best, rho, comparator);\n                        } else {\n                            simplex = contractedSimplex;\n                        }\n                    }\n                }\n               ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..ba98b4d7c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,51 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n             incrementIterationsCounter();\n \n             // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n+            final RealPointValuePair[] original = simplex.clone();\n             final RealPointValuePair best = original[0];\n \n             // perform a reflection step\n+\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                if (comparator.compare(reflected, best) < 0) {\n+\n+                    // compute the expanded simplex\n+                    final RealPointValuePair[] expandedSimplex = simplex.clone();\n+                    final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+                    if (comparator.compare(expanded, reflected) < 0) {\n+                        // accept the expanded simplex\n+\n+                    } else {\n+                        // accept the reflected simplex\n+\n+                    }\n+                } else {\n+                    final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                    if (comparator.compare(contracted, best) < 0) {\n+                        // accept the contracted simplex\n+                    } else {\n+                        final RealPointValuePair[] contractedSimplex = simplex.clone();\n+                        final RealPointValuePair[] shrunkSimplex = shrink(original, comparator);\n+                        simplex = shrunkSimplex;\n+                        if (comparator.compare(shrunkSimplex[0], original[0]) >= 0) {\n+                            // perform a simplex reduction\n+                            simplex = reduce(original, comparator);\n+                        } else if (comparator.compare(contracted, simplex[n]) >= 0) {\n+                            // perform a contraction with respect to the best point\n+                            simplex = contract(best, rho, comparator);\n+                        } else {\n+                            simplex = contractedSimplex;\n+                        }\n+                    }\n                 }\n-\n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n-\n-        }\n-\n-    }\n+               \n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}