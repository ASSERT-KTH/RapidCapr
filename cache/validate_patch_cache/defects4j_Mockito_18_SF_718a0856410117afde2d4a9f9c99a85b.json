{
    "patch": " public static Iterable<Integer> fibonacciSequence(int n) {\n        ArrayList<Integer> sequence = new ArrayList<>();\n        if (n > 0) {\n            sequence.add(0);\n        }\n        if (n > 1) {\n            sequence.add(1);\n        }\n        for (int i = 2; i < n; i++) {\n            sequence.add(sequence.get(i - 2) + sequence.get(i - 1));\n        }\n        return sequence;\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..03c714c94 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+ public static Iterable<Integer> fibonacciSequence(int n) {\n+        ArrayList<Integer> sequence = new ArrayList<>();\n+        if (n > 0) {\n+            sequence.add(0);\n+        }\n+        if (n > 1) {\n+            sequence.add(1);\n+        }\n+        for (int i = 2; i < n; i++) {\n+            sequence.add(sequence.get(i - 2) + sequence.get(i - 1));\n+        }\n+        return sequence;\n+    }\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}