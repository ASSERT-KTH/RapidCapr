{
    "patch": "private static RealMatrix squareRoot(RealMatrix m) throws Exception {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    if (dec.getRealEigenvalues()[0] < 0) {\n        throw new Exception(\"Matrix contains a negative eigenvalue.\");\n    }\n    RealMatrix D = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n    for (int i = 0; i < m.getRowDimension(); i++) {\n        if (dec.getRealEigenvalues()[i] < 0) {\n            D.setEntry(i, i, 0);\n        } else {\n            D.setEntry(i, i, Math.sqrt(dec.getRealEigenvalues()[i]));\n        }\n    }\n    RealMatrix V = dec.getV();\n    RealMatrix Vt = V.transpose();\n    return V.multiply(D).multiply(Vt);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..8457d74fa 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private static RealMatrix squareRoot(RealMatrix m) throws Exception {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    if (dec.getRealEigenvalues()[0] < 0) {\n+        throw new Exception(\"Matrix contains a negative eigenvalue.\");\n     }\n+    RealMatrix D = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+    for (int i = 0; i < m.getRowDimension(); i++) {\n+        if (dec.getRealEigenvalues()[i] < 0) {\n+            D.setEntry(i, i, 0);\n+        } else {\n+            D.setEntry(i, i, Math.sqrt(dec.getRealEigenvalues()[i]));\n+        }\n+    }\n+    RealMatrix V = dec.getV();\n+    RealMatrix Vt = V.transpose();\n+    return V.multiply(D).multiply(Vt);\n+}\n }",
    "result_reason": "error: unreported exception Exception; must be caught or declared to be thrown",
    "test_result": "ERROR"
}