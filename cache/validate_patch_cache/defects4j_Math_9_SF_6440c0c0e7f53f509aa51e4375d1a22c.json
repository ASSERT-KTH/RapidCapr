{
    "patch": "public Line revert() {\n    final Line reverted = new Line(this.lastPoint(), this.firstPoint());\n    return reverted;\n}\n\n// Helper method to return the ending point of the current line\nprivate Point lastPoint() {\n    double x = zero.getX() + direction.getX();\n    double y = zero.getY() + direction.getY();\n    return new Point(x, y);\n}\n\n// Helper method to return the starting point of the current line\nprivate Point firstPoint() {\n    return new Point(zero.getX(), zero.getY());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..01c6a031a 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,22 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+    final Line reverted = new Line(this.lastPoint(), this.firstPoint());\n+    return reverted;\n+}\n+\n+// Helper method to return the ending point of the current line\n+private Point lastPoint() {\n+    double x = zero.getX() + direction.getX();\n+    double y = zero.getY() + direction.getY();\n+    return new Point(x, y);\n+}\n+\n+// Helper method to return the starting point of the current line\n+private Point firstPoint() {\n+    return new Point(zero.getX(), zero.getY());\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}