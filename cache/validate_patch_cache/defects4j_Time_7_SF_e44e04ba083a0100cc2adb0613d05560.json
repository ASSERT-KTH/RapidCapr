{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    if (newPos < 0) {\n        int dayOfMonth = bucket.get(DateTimeFieldType.dayOfMonth());\n        if (dayOfMonth == 29 && \n            bucket.get(DateTimeFieldType.monthOfYear()) == 2 &&\n            leapYear(chrono.year().get(instantLocal))) {\n            instant.setMillis(bucket.computeMillis(true, text));\n        } else {\n            newPosition(newPos);\n        }\n    }\n    Chronology parsedChrono = bucket.getChronology();\n    if (parsedChrono != null) {\n        if (chrono != parsedChrono) {\n            chrono = parsedChrono;\n            instant.setChronology(chrono);\n        }\n    } else if (bucket.restoreDateTime(instant)) {\n        if (chrono != instant.getChronology()) {\n            chrono = instant.getChronology();\n            instantLocal = instant.getMillis() + chrono.getZone().getOffset(instant.getMillis());\n            bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n            parser.parseInto(bucket, text, newPos);\n            instant.setMillis(bucket.computeMillis(false, text));\n        }\n    }\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n        instant.setChronology(chrono);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n        instant.setChronology(chrono);\n    }\n    return newPos;\n}\n\nprivate boolean leapYear(int year) {\n    return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..10143fa4 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,63 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+    int newPos = parser.parseInto(bucket, text, position);\n+    instant.setMillis(bucket.computeMillis(false, text));\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    if (newPos < 0) {\n+        int dayOfMonth = bucket.get(DateTimeFieldType.dayOfMonth());\n+        if (dayOfMonth == 29 && \n+            bucket.get(DateTimeFieldType.monthOfYear()) == 2 &&\n+            leapYear(chrono.year().get(instantLocal))) {\n+            instant.setMillis(bucket.computeMillis(true, text));\n+        } else {\n+            newPosition(newPos);\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+    }\n+    Chronology parsedChrono = bucket.getChronology();\n+    if (parsedChrono != null) {\n+        if (chrono != parsedChrono) {\n+            chrono = parsedChrono;\n+            instant.setChronology(chrono);\n+        }\n+    } else if (bucket.restoreDateTime(instant)) {\n+        if (chrono != instant.getChronology()) {\n+            chrono = instant.getChronology();\n+            instantLocal = instant.getMillis() + chrono.getZone().getOffset(instant.getMillis());\n+            bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+            parser.parseInto(bucket, text, newPos);\n+            instant.setMillis(bucket.computeMillis(false, text));\n         }\n-        return newPos;\n     }\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        chrono = chrono.withZone(parsedZone);\n+        instant.setChronology(chrono);\n+    } else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+        instant.setChronology(chrono);\n+    }\n+    return newPos;\n+}\n+\n+private boolean leapYear(int year) {\n+    return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}