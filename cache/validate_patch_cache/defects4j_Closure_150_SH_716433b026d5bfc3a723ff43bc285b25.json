{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break;\n      }\n>>> [ INFILL ] <<<\n      if (parent.getType() == Token.FUNCTION && parent.getChildCount() == 3) {\n        // function expression\n        defineDeclaredFunction(parent.getLastChild(), parent.getParent());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..bc24f455 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1462,6 +1462,13 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        default:\n+          break;\n+      }\n+>>> [ INFILL ] <<<\n+      if (parent.getType() == Token.FUNCTION && parent.getChildCount() == 3) {\n+        // function expression\n+        defineDeclaredFunction(parent.getLastChild(), parent.getParent());\n       }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}