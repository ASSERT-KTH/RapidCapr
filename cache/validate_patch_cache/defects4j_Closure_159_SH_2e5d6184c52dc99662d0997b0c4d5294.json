{
    "patch": "    if (node.getType() == Token.CALL && node.getFirstChild().getType() == Token.NAME) {\n        String functionName = node.getFirstChild().getString();\n        if (functionName != null && !functionName.startsWith(\"goog.\") && !functionName.startsWith(\"$\")) {\n          changed.add(functionName);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..32d09485 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,11 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+    if (node.getType() == Token.CALL && node.getFirstChild().getType() == Token.NAME) {\n+        String functionName = node.getFirstChild().getString();\n+        if (functionName != null && !functionName.startsWith(\"goog.\") && !functionName.startsWith(\"$\")) {\n+          changed.add(functionName);\n+        }\n       }\n     }\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}