{
    "patch": "    Deque<Node> stack = new LinkedList<>();\n    stack.push(node.getFirstChild());\n\n    while (!stack.isEmpty()) {\n      Node current = stack.pop();\n\n      if (current.isName() && isNameAssignedTo(current.getString(), replacement)) {\n        return false;\n      } else if (current.isGetProp()) {\n        stack.push(current.getFirstChild());\n      }\n\n      if (current.getNext() != null) {\n        stack.push(current.getNext());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..e9cc8c18 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,21 +203,21 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n-    if (node.isName()) {\n-      return true;\n-    }\n-    Preconditions.checkArgument(node.isGetProp());\n+    Deque<Node> stack = new LinkedList<>();\n+    stack.push(node.getFirstChild());\n \n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n-      return false;\n-    }\n+    while (!stack.isEmpty()) {\n+      Node current = stack.pop();\n \n-    return true;\n-  }\n+      if (current.isName() && isNameAssignedTo(current.getString(), replacement)) {\n+        return false;\n+      } else if (current.isGetProp()) {\n+        stack.push(current.getFirstChild());\n+      }\n+\n+      if (current.getNext() != null) {\n+        stack.push(current.getNext());\n+      }\n \n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n@@ -241,4 +241,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}