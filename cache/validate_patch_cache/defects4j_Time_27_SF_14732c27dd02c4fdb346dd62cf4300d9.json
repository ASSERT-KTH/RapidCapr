{
    "patch": "            boolean alreadyCopied = false;\n            for (int i = 2; i < size; i++) {\n                if (elementPairs.get(i) instanceof Separator) {\n                    if (alreadyCopied) {\n                        sep = sep.finish(null, null);\n                    }\n                    sep = sep.finish(((PeriodPrinter)toFormatter(elementPairs.subList(2, i), true, false)).getPrinter(), ((PeriodParser)toFormatter(elementPairs.subList(i+1, size), false, true)).getParser());\n                    alreadyCopied = true;\n                    i++;\n                }\n            }\n            if (!alreadyCopied) {\n                return new PeriodFormatter(null, null);\n            }\n            return new PeriodFormatter(sep, sep);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..77f33f5b 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,21 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n-    }\n+            boolean alreadyCopied = false;\n+            for (int i = 2; i < size; i++) {\n+                if (elementPairs.get(i) instanceof Separator) {\n+                    if (alreadyCopied) {\n+                        sep = sep.finish(null, null);\n+                    }\n+                    sep = sep.finish(((PeriodPrinter)toFormatter(elementPairs.subList(2, i), true, false)).getPrinter(), ((PeriodParser)toFormatter(elementPairs.subList(i+1, size), false, true)).getParser());\n+                    alreadyCopied = true;\n+                    i++;\n+                }\n+            }\n+            if (!alreadyCopied) {\n+                return new PeriodFormatter(null, null);\n+            }\n+            return new PeriodFormatter(sep, sep);\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}