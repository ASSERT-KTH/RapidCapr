{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    long millis = instant.getMillis();\n    long savedMillis = millis;\n    if (iZone != null) {\n        zone = iZone;\n    }\n    int offset = zone.getOffset(millis);\n    millis -= offset;\n\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(savedMillis, chrono, iLocale, iPivotYear, null, zone);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger().intValue();\n        millis = savedMillis - parsedOffset;\n        zone = DateTimeZone.forOffsetMillis(parsedOffset);\n    } else if (bucket.getZone() != null) {\n        if (iZone == null) {\n            zone = bucket.getZone();\n            offset = zone.getOffset(savedMillis);\n            millis = savedMillis - offset;\n        }\n    } else {\n        millis = bucket.computeMillis(false, text);\n    }\n\n    instant.setMillis(millis);\n    instant.setZone(zone);\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..a5ced94c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,45 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+    long millis = instant.getMillis();\n+    long savedMillis = millis;\n+    if (iZone != null) {\n+        zone = iZone;\n+    }\n+    int offset = zone.getOffset(millis);\n+    millis -= offset;\n+\n+    chrono = selectChronology(chrono);\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(savedMillis, chrono, iLocale, iPivotYear, null, zone);\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger().intValue();\n+        millis = savedMillis - parsedOffset;\n+        zone = DateTimeZone.forOffsetMillis(parsedOffset);\n+    } else if (bucket.getZone() != null) {\n+        if (iZone == null) {\n+            zone = bucket.getZone();\n+            offset = zone.getOffset(savedMillis);\n+            millis = savedMillis - offset;\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+    } else {\n+        millis = bucket.computeMillis(false, text);\n     }\n \n+    instant.setMillis(millis);\n+    instant.setZone(zone);\n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: no suitable constructor found for DateTimeParserBucket(long,Chronology,Locale,Integer,<null>,DateTimeZone)",
    "test_result": "ERROR"
}