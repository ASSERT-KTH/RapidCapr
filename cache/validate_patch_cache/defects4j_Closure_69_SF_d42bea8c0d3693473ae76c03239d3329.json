{
    "patch": "              functionType.getReturnType().isVoidType() ||\n              !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Check \"this\" type.\n      if (functionType.getTypeOfThis() != null && !isValidThisNode(n)) {\n        report(t, n, EXPECTED_THIS_TYPE, functionType.getTypeOfThis().toString());\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }\n\n  private boolean isValidThisNode(Node n) {\n    if (NodeUtil.isFunctionObjectCall(n.getParent())) {\n      // If calling the function object itself (i.e. \"Bar()\"), then \"this\"\n      // should not be required.\n      return true;\n    }\n    Node maybeGetPropOrGetElem = n.getParent();\n    if (NodeUtil.isGetOrSetKey(maybeGetPropOrGetElem)) {\n      // If calling a method on an object (i.e. \"obj.Bar()\"), then \"this\"\n      // is used implicitly and valid.\n      return true;\n    }\n    Node maybeExprAssign = maybeGetPropOrGetElem.getParent();\n    if (NodeUtil.isExprAssign(maybeExprAssign) &&\n        NodeUtil.isGetOrSetKey(maybeGetPropOrGetElem)) {\n      // If assigning a method to a variable before calling it\n      // (i.e. \"var b = obj.Bar; b();\"), then \"this\" is used\n      // implicitly and valid.\n      return true;\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..3a4ab8de 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1541,42 +1541,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * scope chain to use in name lookups as well as error reporting.\n    * @param n The node being visited.\n    */\n-  private void visitCall(NodeTraversal t, Node n) {\n-    Node child = n.getFirstChild();\n-    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-\n-    if (!childType.canBeCalled()) {\n-      report(t, n, NOT_CALLABLE, childType.toString());\n-      ensureTyped(t, n);\n-      return;\n-    }\n-\n-    // A couple of types can be called as if they were functions.\n-    // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-      FunctionType functionType = (FunctionType) childType;\n-\n-      boolean isExtern = false;\n-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n-        CompilerInput functionSource = compiler.getInput(sourceName);\n-        isExtern = functionSource.isExtern();\n-      }\n-\n-      // Non-native constructors should not be called directly\n-      // unless they specify a return type and are defined\n-      // in an extern.\n-      if (functionType.isConstructor() &&\n-          !functionType.isNativeObjectType() &&\n-          (functionType.getReturnType().isUnknownType() ||\n-           functionType.getReturnType().isVoidType() ||\n-           !isExtern)) {\n+              functionType.getReturnType().isVoidType() ||\n+              !isExtern)) {\n         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n       }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n-      // or GETELEM.\n+      // Check \"this\" type.\n+      if (functionType.getTypeOfThis() != null && !isValidThisNode(n)) {\n+        report(t, n, EXPECTED_THIS_TYPE, functionType.getTypeOfThis().toString());\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n@@ -1589,6 +1562,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     // about the non-portability of the call or both.\n   }\n \n+  private boolean isValidThisNode(Node n) {\n+    if (NodeUtil.isFunctionObjectCall(n.getParent())) {\n+      // If calling the function object itself (i.e. \"Bar()\"), then \"this\"\n+      // should not be required.\n+      return true;\n+    }\n+    Node maybeGetPropOrGetElem = n.getParent();\n+    if (NodeUtil.isGetOrSetKey(maybeGetPropOrGetElem)) {\n+      // If calling a method on an object (i.e. \"obj.Bar()\"), then \"this\"\n+      // is used implicitly and valid.\n+      return true;\n+    }\n+    Node maybeExprAssign = maybeGetPropOrGetElem.getParent();\n+    if (NodeUtil.isExprAssign(maybeExprAssign) &&\n+        NodeUtil.isGetOrSetKey(maybeGetPropOrGetElem)) {\n+      // If assigning a method to a variable before calling it\n+      // (i.e. \"var b = obj.Bar; b();\"), then \"this\" is used\n+      // implicitly and valid.\n+      return true;\n+    }\n+    return false;\n+\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}