{
    "patch": "    if (!constraintObj.isNominalConstructor()) {\n      return;\n    }\n\n    FunctionType nominalType = constraintObj.getNominalConstructor();\n\n    if (nominalType.getParameterNames().isEmpty()) {\n      return;\n    }\n\n    JSType instanceType = nominalType.getInstanceType();\n    // Every constraint type gets matched against the current\n    // object type, but union types need to have their constituents\n    // checked individually.\n    if (instanceType.isUnionType() || instanceType.isIntersectionType()) {\n      Set<ObjectType> allConstituentTypes = instanceType.isUnionType() ?\n          instanceType.getUnionMembers() :\n          instanceType.getIntersectionMembers();\n      for (ObjectType o : allConstituentTypes) {\n        ObjectType newConstraintObj = objectTypeOti.castAsObjectType(o);\n        matchConstraintHelper(newConstraintObj);\n      }\n    } else {\n      ObjectType newConstraintObj = objectTypeOti.castAsObjectType(instanceType);\n      matchConstraintHelper(newConstraintObj);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..16caa674 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,32 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    if (!constraintObj.isNominalConstructor()) {\n+      return;\n+    }\n+\n+    FunctionType nominalType = constraintObj.getNominalConstructor();\n+\n+    if (nominalType.getParameterNames().isEmpty()) {\n+      return;\n+    }\n+\n+    JSType instanceType = nominalType.getInstanceType();\n+    // Every constraint type gets matched against the current\n+    // object type, but union types need to have their constituents\n+    // checked individually.\n+    if (instanceType.isUnionType() || instanceType.isIntersectionType()) {\n+      Set<ObjectType> allConstituentTypes = instanceType.isUnionType() ?\n+          instanceType.getUnionMembers() :\n+          instanceType.getIntersectionMembers();\n+      for (ObjectType o : allConstituentTypes) {\n+        ObjectType newConstraintObj = objectTypeOti.castAsObjectType(o);\n+        matchConstraintHelper(newConstraintObj);\n+      }\n+    } else {\n+      ObjectType newConstraintObj = objectTypeOti.castAsObjectType(instanceType);\n+      matchConstraintHelper(newConstraintObj);\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}