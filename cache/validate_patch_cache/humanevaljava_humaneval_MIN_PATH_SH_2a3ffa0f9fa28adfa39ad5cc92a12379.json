{
    "patch": "if (i > 0) val = Math.min(val, grid[i - 1][j]);\nif (j > 0) val = Math.min(val, grid[i][j - 1]);\nif (i < n - 1) val = Math.min(val, grid[i + 1][j]);\nif (j < n - 1) val = Math.min(val, grid[i][j + 1]);\nif (grid[i][j] != val) { // skip cells that already have val as their value\n    grid[i][j] = val;\n} else if (grid[i][j] != 1) { // if cell is not a hole, reset val\n    val = n * n + 1;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/MIN_PATH.java b/src/main/java/humaneval/buggy/MIN_PATH.java\nindex c19fee5..1db3912 100644\n--- a/src/main/java/humaneval/buggy/MIN_PATH.java\n+++ b/src/main/java/humaneval/buggy/MIN_PATH.java\n@@ -38,10 +38,15 @@ public class MIN_PATH {\n         for(int i = 0; i < n; i++) {\n             for(int j = 0; j < n; j++) {\n                 if(grid[i][j] == 1) {\n-                    if(i != 0) val = Math.max(val, grid[i][j + 1]);\n-                    if(j != 0) val = Math.min(val, grid[i - 1][j]);\n-                    if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n-                    if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n+if (i > 0) val = Math.min(val, grid[i - 1][j]);\n+if (j > 0) val = Math.min(val, grid[i][j - 1]);\n+if (i < n - 1) val = Math.min(val, grid[i + 1][j]);\n+if (j < n - 1) val = Math.min(val, grid[i][j + 1]);\n+if (grid[i][j] != val) { // skip cells that already have val as their value\n+    grid[i][j] = val;\n+} else if (grid[i][j] != 1) { // if cell is not a hole, reset val\n+    val = n * n + 1;\n+}\n                 }\n             }\n         }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}