{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int initialOffset = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - initialOffset;\n    final int adjustedOffset = getOffset(instantAdjusted);\n    if (initialOffset == adjustedOffset) {\n        return adjustedOffset;\n    }\n\n    // calculate the next transition time from both local times\n    long nextLocal = nextTransition(instantLocal);\n    long nextAdjusted = nextTransition(instantAdjusted);\n\n    if (nextLocal == instantLocal || nextAdjusted == instantAdjusted) {\n        // local time is exactly on a transition, return the offset for that transition\n        return getOffset(instantLocal + Math.max(initialOffset, adjustedOffset));\n    }\n\n    if (nextLocal > instantLocal) { //gap starts from now on to infinity\n        if ((nextLocal <= (instantLocal + initialOffset)) && (nextLocal > (instantLocal + adjustedOffset))) {\n            // gap is in between the local time and the adjusted time, resolve by returning the initial offset\n            return initialOffset;\n        }\n\n        if ((nextAdjusted <= (instantLocal + initialOffset)) && (nextAdjusted > (instantLocal + adjustedOffset))) {\n            // gap is in between the local time and the adjusted time, resolve by returning the adjusted offset\n            return adjustedOffset;\n        }\n    } else { //gap started in the past and ended sometime before the local time\n        if (((nextLocal + initialOffset) > instantLocal) && ((nextLocal + adjustedOffset) <= instantLocal)) {\n            // gap is in between the local time and the adjusted time, resolve by returning the initial offset\n            return initialOffset;\n        }\n\n        if (((nextAdjusted + initialOffset) > instantLocal) && ((nextAdjusted + adjustedOffset) <= instantLocal)) {\n            // gap is in between the local time and the adjusted time, resolve by returning the adjusted offset\n            return adjustedOffset;\n        }\n    }\n\n    // if we reach here it means we need to pick an offset but the gap is too far, so we return the\n    // offset that has the smallest difference\n    return (initialOffset < adjustedOffset) ? initialOffset : adjustedOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..dec09103 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,52 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int initialOffset = getOffset(instantLocal);\n+    // adjust instantLocal using the estimate and recalc the offset\n+    final long instantAdjusted = instantLocal - initialOffset;\n+    final int adjustedOffset = getOffset(instantAdjusted);\n+    if (initialOffset == adjustedOffset) {\n+        return adjustedOffset;\n+    }\n+\n+    // calculate the next transition time from both local times\n+    long nextLocal = nextTransition(instantLocal);\n+    long nextAdjusted = nextTransition(instantAdjusted);\n+\n+    if (nextLocal == instantLocal || nextAdjusted == instantAdjusted) {\n+        // local time is exactly on a transition, return the offset for that transition\n+        return getOffset(instantLocal + Math.max(initialOffset, adjustedOffset));\n+    }\n+\n+    if (nextLocal > instantLocal) { //gap starts from now on to infinity\n+        if ((nextLocal <= (instantLocal + initialOffset)) && (nextLocal > (instantLocal + adjustedOffset))) {\n+            // gap is in between the local time and the adjusted time, resolve by returning the initial offset\n+            return initialOffset;\n+        }\n+\n+        if ((nextAdjusted <= (instantLocal + initialOffset)) && (nextAdjusted > (instantLocal + adjustedOffset))) {\n+            // gap is in between the local time and the adjusted time, resolve by returning the adjusted offset\n+            return adjustedOffset;\n+        }\n+    } else { //gap started in the past and ended sometime before the local time\n+        if (((nextLocal + initialOffset) > instantLocal) && ((nextLocal + adjustedOffset) <= instantLocal)) {\n+            // gap is in between the local time and the adjusted time, resolve by returning the initial offset\n+            return initialOffset;\n+        }\n+\n+        if (((nextAdjusted + initialOffset) > instantLocal) && ((nextAdjusted + adjustedOffset) <= instantLocal)) {\n+            // gap is in between the local time and the adjusted time, resolve by returning the adjusted offset\n+            return adjustedOffset;\n         }\n-        return offsetAdjusted;\n     }\n \n+    // if we reach here it means we need to pick an offset but the gap is too far, so we return the\n+    // offset that has the smallest difference\n+    return (initialOffset < adjustedOffset) ? initialOffset : adjustedOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}