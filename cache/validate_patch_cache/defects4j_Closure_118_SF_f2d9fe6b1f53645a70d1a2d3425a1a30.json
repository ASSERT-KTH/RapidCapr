{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        T type = null;\n        String name = null;\n        \n        if (NodeUtil.isGet(child)) {\n            // Handle getprop/getelem\n            Node nameNode = child.getLastChild();\n            if (nameNode.isString()) {\n                name = nameNode.getString();\n            }\n            else if (nameNode.isNumber()) {\n                name = \"[\" + nameNode.getString() + \"]\";\n            }\n            else {\n                // Only string or number literals are allowed as property names\n                continue;\n            }\n\n            Node objectNode = child.getFirstChild();\n            if (objectNode.isName()) {\n                if (!typeSystem.getScope().isDeclared(objectNode.getString(), false)){\n                    // Special case for global variables\n                    type = typeSystem.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);\n                } else {\n                    type = typeSystem.getType(getScope(), objectNode.getString(), null);\n                }\n            }\n            else {\n                // Types for object literals and expressions are not supported\n                continue;\n            }\n\n        }\n        else if (NodeUtil.isStringKey(child)) {\n            // Handle string key\n            name = child.getString();\n            type = typeSystem.getType(getScope(), n, name);\n        }\n        else if (NodeUtil.isNumberKey(child)) {\n            // Handle number key\n            if (!n.isArrayLit()) {\n                // Only arrays can have number keys\n                continue;\n            }\n            name = \"[\" + child.getString() + \"]\";\n            type = typeSystem.getType(getScope(), n, name);\n        }\n\n        if (type == null) {\n            continue;\n        }\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n            if (propertiesToErrorFor.containsKey(name)) {\n                compiler.report(JSError.make(\n                    t.getSourceName(), child, propertiesToErrorFor.get(name),\n                    Warnings.INVALIDATION, name,\n                    (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..f7b4fa7d 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,30 +487,70 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        T type = null;\n+        String name = null;\n+        \n+        if (NodeUtil.isGet(child)) {\n+            // Handle getprop/getelem\n+            Node nameNode = child.getLastChild();\n+            if (nameNode.isString()) {\n+                name = nameNode.getString();\n+            }\n+            else if (nameNode.isNumber()) {\n+                name = \"[\" + nameNode.getString() + \"]\";\n+            }\n+            else {\n+                // Only string or number literals are allowed as property names\n+                continue;\n+            }\n+\n+            Node objectNode = child.getFirstChild();\n+            if (objectNode.isName()) {\n+                if (!typeSystem.getScope().isDeclared(objectNode.getString(), false)){\n+                    // Special case for global variables\n+                    type = typeSystem.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+                } else {\n+                    type = typeSystem.getType(getScope(), objectNode.getString(), null);\n+                }\n+            }\n+            else {\n+                // Types for object literals and expressions are not supported\n+                continue;\n+            }\n+\n+        }\n+        else if (NodeUtil.isStringKey(child)) {\n+            // Handle string key\n+            name = child.getString();\n+            type = typeSystem.getType(getScope(), n, name);\n+        }\n+        else if (NodeUtil.isNumberKey(child)) {\n+            // Handle number key\n+            if (!n.isArrayLit()) {\n+                // Only arrays can have number keys\n+                continue;\n+            }\n+            name = \"[\" + child.getString() + \"]\";\n+            type = typeSystem.getType(getScope(), n, name);\n+        }\n \n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n+        if (type == null) {\n+            continue;\n+        }\n \n         Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n+        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+            if (propertiesToErrorFor.containsKey(name)) {\n+                compiler.report(JSError.make(\n+                    t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                    Warnings.INVALIDATION, name,\n+                    (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+            }\n         }\n-      }\n     }\n+}\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}