{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    if (offsetLocal == offsetAdjusted) {\n                        // We stepped into a gap, need to try the next instant after this one.\n                        nextLocal = nextTransition(nextLocal + 1);\n                        nextAdjusted = nextTransition(nextLocal + millisPerHour - 1) - millisPerHour;\n                    } else {\n                        return offsetLocal;\n                    }\n                }\n                offsetAdjusted = getOffset(nextAdjusted);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..034f9fb7 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,23 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    if (offsetLocal == offsetAdjusted) {\n+                        // We stepped into a gap, need to try the next instant after this one.\n+                        nextLocal = nextTransition(nextLocal + 1);\n+                        nextAdjusted = nextTransition(nextLocal + millisPerHour - 1) - millisPerHour;\n+                    } else {\n+                        return offsetLocal;\n+                    }\n+                }\n+                offsetAdjusted = getOffset(nextAdjusted);\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}