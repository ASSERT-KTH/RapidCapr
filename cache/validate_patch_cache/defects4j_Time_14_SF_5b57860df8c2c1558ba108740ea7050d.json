{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    int[] newValues = Arrays.copyOf(values, values.length);\n    DateTimeFieldType fieldType = partial.getFieldType(fieldIndex);\n    Chronology chronology = partial.getChronology();\n\n    if (fieldType.getName() == \"monthOfYear\" && isLeapYear(values[0], chronology)) {\n        // If it's a leap year, we can use the standard method\n        newValues[fieldIndex] = chronology.monthOfYear().add(newValues[fieldIndex], valueToAdd);\n    } else if (fieldType.getName() == \"dayOfMonth\" && values[fieldType.getFieldIndex()] >= 29 &&\n            values[DateTimeFieldType.monthOfYear().getFieldIndex()] == 2 && !isLeapYear(values[0], chronology)) {\n        // If it's February 29th in a non-leap year, set dayOfMonth to 28 and add remaining months\n        newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = 28;\n        newValues[fieldIndex] = chronology.monthOfYear().add(newValues[fieldIndex], valueToAdd);\n\n        // Adjust the dayOfMonth if needed\n        int maxDay = chronology.dayOfMonth().getMaximumValue(new LocalDate(newValues[0], newValues[1], 1));\n        if (newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] > maxDay) {\n            newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = maxDay;\n        }\n    } else {\n        // For all other cases, use the standard method\n        newValues[fieldIndex] = chronology.monthOfYear().add(newValues[fieldIndex], valueToAdd);\n    }\n\n    return newValues;\n}\n\npublic boolean isLeapYear(int year, Chronology chronology) {\n    return chronology.year().isLeap(year);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..49af3173 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,41 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    int[] newValues = Arrays.copyOf(values, values.length);\n+    DateTimeFieldType fieldType = partial.getFieldType(fieldIndex);\n+    Chronology chronology = partial.getChronology();\n+\n+    if (fieldType.getName() == \"monthOfYear\" && isLeapYear(values[0], chronology)) {\n+        // If it's a leap year, we can use the standard method\n+        newValues[fieldIndex] = chronology.monthOfYear().add(newValues[fieldIndex], valueToAdd);\n+    } else if (fieldType.getName() == \"dayOfMonth\" && values[fieldType.getFieldIndex()] >= 29 &&\n+            values[DateTimeFieldType.monthOfYear().getFieldIndex()] == 2 && !isLeapYear(values[0], chronology)) {\n+        // If it's February 29th in a non-leap year, set dayOfMonth to 28 and add remaining months\n+        newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = 28;\n+        newValues[fieldIndex] = chronology.monthOfYear().add(newValues[fieldIndex], valueToAdd);\n+\n+        // Adjust the dayOfMonth if needed\n+        int maxDay = chronology.dayOfMonth().getMaximumValue(new LocalDate(newValues[0], newValues[1], 1));\n+        if (newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] > maxDay) {\n+            newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = maxDay;\n         }\n+    } else {\n+        // For all other cases, use the standard method\n+        newValues[fieldIndex] = chronology.monthOfYear().add(newValues[fieldIndex], valueToAdd);\n     }\n \n+    return newValues;\n+}\n+\n+public boolean isLeapYear(int year, Chronology chronology) {\n+    return chronology.year().isLeap(year);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}