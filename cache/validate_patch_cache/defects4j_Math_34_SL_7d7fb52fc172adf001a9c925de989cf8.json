{
    "patch": "        return new Iterator<Chromosome>() {\n            int index = 0;\n\n            @Override\n            public boolean hasNext() {\n                return index < chromosomes.size();\n            }\n\n            @Override\n            public Chromosome next() {\n                if (!hasNext()) {\n                    throw new NoSuchElementException();\n                }\n                return chromosomes.get(index++);\n            }\n        };",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\nindex 1eb005316..da8584b43 100644\n--- a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n@@ -206,6 +206,21 @@ public abstract class ListPopulation implements Population {\n      * @return chromosome iterator\n      */\n     public Iterator<Chromosome> iterator() {\n-        return chromosomes.iterator();\n+        return new Iterator<Chromosome>() {\n+            int index = 0;\n+\n+            @Override\n+            public boolean hasNext() {\n+                return index < chromosomes.size();\n+            }\n+\n+            @Override\n+            public Chromosome next() {\n+                if (!hasNext()) {\n+                    throw new NoSuchElementException();\n+                }\n+                return chromosomes.get(index++);\n+            }\n+        };\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}