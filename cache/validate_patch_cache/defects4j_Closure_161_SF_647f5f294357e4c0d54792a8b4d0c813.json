{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    // Check if the array is empty and the index is 0\n    if (left.getType() == Token.ARRAYLIT && right.getDouble() == 0) {\n      Node firstChild = left.getFirstChild();\n      if (firstChild == null) {\n        Node undefinedNode = NodeUtil.newUndefinedNode(n);\n        n.getParent().replaceChild(n, undefinedNode);\n        reportCodeChange();\n        return undefinedNode;\n      }\n      Node firstValue = firstChild.getFirstChild();\n      if (firstValue == null || firstValue.getType() == Token.EMPTY) {\n        Node undefinedNode = NodeUtil.newUndefinedNode(n);\n        n.getParent().replaceChild(n, undefinedNode);\n        reportCodeChange();\n        return undefinedNode;\n      } else {\n        n.getParent().replaceChild(n, firstValue.detachFromParent());\n        reportCodeChange();\n        return firstValue;\n      }\n    }\n\n    Node parent = n.getParent();\n    // Check if the number can be converted to an integer\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; i < intIndex; i++) {\n      // Stop if we reach the end of the list\n      if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n      elem = elem.getNext();\n    }\n\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..a2206003 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1276,17 +1276,30 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n   }\n \n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-\n-    if (right.getType() != Token.NUMBER) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+    // Check if the array is empty and the index is 0\n+    if (left.getType() == Token.ARRAYLIT && right.getDouble() == 0) {\n+      Node firstChild = left.getFirstChild();\n+      if (firstChild == null) {\n+        Node undefinedNode = NodeUtil.newUndefinedNode(n);\n+        n.getParent().replaceChild(n, undefinedNode);\n+        reportCodeChange();\n+        return undefinedNode;\n+      }\n+      Node firstValue = firstChild.getFirstChild();\n+      if (firstValue == null || firstValue.getType() == Token.EMPTY) {\n+        Node undefinedNode = NodeUtil.newUndefinedNode(n);\n+        n.getParent().replaceChild(n, undefinedNode);\n+        reportCodeChange();\n+        return undefinedNode;\n+      } else {\n+        n.getParent().replaceChild(n, firstValue.detachFromParent());\n+        reportCodeChange();\n+        return firstValue;\n+      }\n     }\n \n+    Node parent = n.getParent();\n+    // Check if the number can be converted to an integer\n     double index = right.getDouble();\n     int intIndex = (int) index;\n     if (intIndex != index) {\n@@ -1300,7 +1313,12 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n \n     Node elem = left.getFirstChild();\n-    for (int i = 0; elem != null && i < intIndex; i++) {\n+    for (int i = 0; i < intIndex; i++) {\n+      // Stop if we reach the end of the list\n+      if (elem == null) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n       elem = elem.getNext();\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}