{
    "patch": "case MONTH_OF_YEAR: {\n    int value = parseInt(buf, position, 2);\n    if (strict && (value <= 0 || value > 12)) {\n        throw new IllegalFieldValueException(\n            DateTimeFieldType.monthOfYear(), Integer.valueOf(value), null, null);\n    }\n    // negative months are supported by using monthOfYear with value of 13-24, following ISO8601\n    int parsedMonths = value > 0 ? value : 13 - value;\n    savedFields[count++] = new SavedField(DateTimeFieldType.monthOfYear(), parsedMonths);\n    break;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..8f57e760 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,17 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+case MONTH_OF_YEAR: {\n+    int value = parseInt(buf, position, 2);\n+    if (strict && (value <= 0 || value > 12)) {\n+        throw new IllegalFieldValueException(\n+            DateTimeFieldType.monthOfYear(), Integer.valueOf(value), null, null);\n+    }\n+    // negative months are supported by using monthOfYear with value of 13-24, following ISO8601\n+    int parsedMonths = value > 0 ? value : 13 - value;\n+    savedFields[count++] = new SavedField(DateTimeFieldType.monthOfYear(), parsedMonths);\n+    break;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: orphaned case",
    "test_result": "ERROR"
}