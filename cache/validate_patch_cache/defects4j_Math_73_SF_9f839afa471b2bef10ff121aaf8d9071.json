{
    "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    if ((yMin < 0 && yMax < 0) || (yMin > 0 && yMax > 0)) {\n        throw new IllegalArgumentException(\"Interval does not bracket root\");\n    }\n\n    double yInitial = f.value(initial);\n    setResult(initial, 0);\n\n    if (yInitial == 0.0) {\n        return result;\n    }\n\n    double x = initial;\n    double y = yInitial;\n    double xMin = min;\n    double yMin2 = yMin;\n    double xMax = max;\n    double yMax2 = yMax;\n    double xMid = Double.NaN;\n    double yMid = Double.NaN;\n\n    for (int i = 0; i < maximalIterationCount; ++i) {\n        if (Math.abs(y) < functionValueAccuracy) {\n            setResult(x, i);\n            return result;\n        }\n        if (Math.abs(yMin2) <= Math.abs(yMax2)) {\n            if (Math.abs(yMin2) < Math.abs(y) && xMid != Double.NaN) {\n                double r = yMin2 / y;\n                double tmp1 = x * r;\n                double tmp2 = xMid * (1 - r);\n                xMid = tmp1 + tmp2;\n            } else {\n                xMid = 0.5 * (x + xMin);\n            }\n            yMid = f.value(xMid);\n            if (yMid == 0.0) {\n                setResult(xMid, i);\n                return result;\n            }\n            if (yMid < 0.0) {\n                yMin2 = yMid;\n                xMin = xMid;\n            } else {\n                yMax2 = yMid;\n                xMax = xMid;\n            }\n        } else {\n            if (Math.abs(yMax2) < Math.abs(y) && xMid != Double.NaN) {\n                double r = yMax2 / y;\n                double tmp1 = x * r;\n                double tmp2 = xMid * (1 - r);\n                xMid = tmp1 + tmp2;\n            } else {\n                xMid = 0.5 * (x + xMax);\n            }\n            yMid = f.value(xMid);\n            if (yMid == 0.0) {\n                setResult(xMid, i);\n                return result;\n            }\n            if (yMid < 0.0) {\n                yMax2 = yMid;\n                xMax = xMid;\n            } else {\n                yMin2 = yMid;\n                xMin = xMid;\n            }\n        }\n        if (Math.abs(yMid) <= Math.abs(y)) {\n            y = yMid;\n            x = xMid;\n        } else {\n            double r = y / yMid;\n            double tmp1 = r * xMid;\n            double tmp2 = (1 - r) * x;\n            double tmp3 = (1 - r) * xMid;\n            x = tmp1 + tmp2;\n            y = yMid;\n            xMin = xMin - tmp3;\n            yMin2 = f.value(xMin);\n            xMax -= tmp3;\n            yMax2 = f.value(xMax);\n        }\n    }\n    throw new MaxIterationsExceededException(maximalIterationCount);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..f3c20ef14 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,49 +95,100 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    if ((yMin < 0 && yMax < 0) || (yMin > 0 && yMax > 0)) {\n+        throw new IllegalArgumentException(\"Interval does not bracket root\");\n+    }\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+    double yInitial = f.value(initial);\n+    setResult(initial, 0);\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+    if (yInitial == 0.0) {\n+        return result;\n+    }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n+    double x = initial;\n+    double y = yInitial;\n+    double xMin = min;\n+    double yMin2 = yMin;\n+    double xMax = max;\n+    double yMax2 = yMax;\n+    double xMid = Double.NaN;\n+    double yMid = Double.NaN;\n+\n+    for (int i = 0; i < maximalIterationCount; ++i) {\n+        if (Math.abs(y) < functionValueAccuracy) {\n+            setResult(x, i);\n             return result;\n         }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n+        if (Math.abs(yMin2) <= Math.abs(yMax2)) {\n+            if (Math.abs(yMin2) < Math.abs(y) && xMid != Double.NaN) {\n+                double r = yMin2 / y;\n+                double tmp1 = x * r;\n+                double tmp2 = xMid * (1 - r);\n+                xMid = tmp1 + tmp2;\n+            } else {\n+                xMid = 0.5 * (x + xMin);\n+            }\n+            yMid = f.value(xMid);\n+            if (yMid == 0.0) {\n+                setResult(xMid, i);\n+                return result;\n+            }\n+            if (yMid < 0.0) {\n+                yMin2 = yMid;\n+                xMin = xMid;\n+            } else {\n+                yMax2 = yMid;\n+                xMax = xMid;\n+            }\n+        } else {\n+            if (Math.abs(yMax2) < Math.abs(y) && xMid != Double.NaN) {\n+                double r = yMax2 / y;\n+                double tmp1 = x * r;\n+                double tmp2 = xMid * (1 - r);\n+                xMid = tmp1 + tmp2;\n+            } else {\n+                xMid = 0.5 * (x + xMax);\n+            }\n+            yMid = f.value(xMid);\n+            if (yMid == 0.0) {\n+                setResult(xMid, i);\n+                return result;\n+            }\n+            if (yMid < 0.0) {\n+                yMax2 = yMid;\n+                xMax = xMid;\n+            } else {\n+                yMin2 = yMid;\n+                xMin = xMid;\n+            }\n+        }\n+        if (Math.abs(yMid) <= Math.abs(y)) {\n+            y = yMid;\n+            x = xMid;\n+        } else {\n+            double r = y / yMid;\n+            double tmp1 = r * xMid;\n+            double tmp2 = (1 - r) * x;\n+            double tmp3 = (1 - r) * xMid;\n+            x = tmp1 + tmp2;\n+            y = yMid;\n+            xMin = xMin - tmp3;\n+            yMin2 = f.value(xMin);\n+            xMax -= tmp3;\n+            yMax2 = f.value(xMax);\n         }\n-\n-\n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n-\n     }\n+    throw new MaxIterationsExceededException(maximalIterationCount);\n+}\n \n     /**\n      * Find a zero in the given interval.",
    "result_reason": "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (100) exceeded",
    "test_result": "FAIL"
}