{
    "patch": "        double begin = -1.;\n        double end = 1.;\n\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2.;\n            end *= 2.;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2.;\n            double resCenter = poly(xs, center);\n            if (Math.abs(resCenter) < 1e-10) {\n                return center;\n            } else if (poly(xs, begin) * resCenter < 0) {\n                end = center;\n            } else {\n                begin = center;\n            }\n        }\n        return begin;",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/FIND_ZERO.java b/src/main/java/humaneval/buggy/FIND_ZERO.java\nindex 9e2c137..da00334 100644\n--- a/src/main/java/humaneval/buggy/FIND_ZERO.java\n+++ b/src/main/java/humaneval/buggy/FIND_ZERO.java\n@@ -22,7 +22,25 @@ public class FIND_ZERO {\n         while (end - begin > 1e-10) {\n             double center = (begin + end) / 2.;\n             \n-            if (poly(xs, begin) * poly(xs, end) < 0) {\n+        double begin = -1.;\n+        double end = 1.;\n+\n+        while (poly(xs, begin) * poly(xs, end) > 0) {\n+            begin *= 2.;\n+            end *= 2.;\n+        }\n+        while (end - begin > 1e-10) {\n+            double center = (begin + end) / 2.;\n+            double resCenter = poly(xs, center);\n+            if (Math.abs(resCenter) < 1e-10) {\n+                return center;\n+            } else if (poly(xs, begin) * resCenter < 0) {\n+                end = center;\n+            } else {\n+                begin = center;\n+            }\n+        }\n+        return begin;\n                 begin = center;\n             } else {\n                 end = center;",
    "result_reason": " /tmp/humaneval-FIND_ZERO/src/main/java/humaneval/buggy/FIND_ZERO.java:[45,15] 'else' without 'if'",
    "test_result": "ERROR"
}