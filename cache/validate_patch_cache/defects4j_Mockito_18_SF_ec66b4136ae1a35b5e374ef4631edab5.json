{
    "patch": "public static Map<Integer, String> parseIntoMap(String input) {\n    Map<Integer, String> map = new HashMap<>();\n    if (input != null && !input.trim().isEmpty()) {\n        String[] array = input.split(\",\");\n        for (String str : array) {\n            if (str != null && !str.trim().isEmpty()) {\n                String[] parts = str.split(\":\");\n                if (parts.length == 2 && !parts[0].trim().isEmpty() && !parts[1].trim().isEmpty()) {\n                    try {\n                        Integer key = Integer.parseInt(parts[0].trim());\n                        String value = parts[1].trim();\n                        map.put(key, value );\n                    } catch (NumberFormatException e) {\n                        // ignore value if key is not an integer\n                    }\n                }\n            }\n        }\n    }\n    return map;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..a54ea84d8 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,27 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<Integer, String> parseIntoMap(String input) {\n+    Map<Integer, String> map = new HashMap<>();\n+    if (input != null && !input.trim().isEmpty()) {\n+        String[] array = input.split(\",\");\n+        for (String str : array) {\n+            if (str != null && !str.trim().isEmpty()) {\n+                String[] parts = str.split(\":\");\n+                if (parts.length == 2 && !parts[0].trim().isEmpty() && !parts[1].trim().isEmpty()) {\n+                    try {\n+                        Integer key = Integer.parseInt(parts[0].trim());\n+                        String value = parts[1].trim();\n+                        map.put(key, value );\n+                    } catch (NumberFormatException e) {\n+                        // ignore value if key is not an integer\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return map;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}