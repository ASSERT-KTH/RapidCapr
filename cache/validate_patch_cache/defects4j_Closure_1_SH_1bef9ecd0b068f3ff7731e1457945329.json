{
    "patch": "//    Check if there are no parameters inside the argList\n    if (!argList.hasChildren()){\n      return;\n    }\n\n//    Keep track of the last referenced parameter\n    Node lastReferencedParameter = null;\n\n    for (Node arg : argList.children()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (referenced.contains(var)) {\n          lastReferencedParameter = arg;\n      } else if (lastReferencedParameter != null){\n          argList.removeChild(arg);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..75a1e063 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+//    Check if there are no parameters inside the argList\n+    if (!argList.hasChildren()){\n+      return;\n+    }\n+\n+//    Keep track of the last referenced parameter\n+    Node lastReferencedParameter = null;\n+\n+    for (Node arg : argList.children()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (referenced.contains(var)) {\n+          lastReferencedParameter = arg;\n+      } else if (lastReferencedParameter != null){\n+          argList.removeChild(arg);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}