{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        if (candidate != null) {\n            Class<?> fieldType = field.getType();\n            while (fieldType != null) {\n                if (fieldType.isInstance(candidate)) {\n                    try {\n                        field.setAccessible(true);\n                        if (Modifier.isFinal(field.getModifiers())) {\n                            // Try to remove the final modifier using reflection\n                            Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n                            modifiersField.setAccessible(true);\n                            modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n                        }\n                        field.set(fieldInstance, candidate);\n                        if (!field.getType().equals(candidate.getClass())) {\n                            injectMockCandidate(candidate.getClass(), mocks, candidate);\n                        }\n                        return;\n                    } catch (IllegalAccessException | NoSuchFieldException e) {\n                        throw new IllegalStateException(\"Could not set field value\", e);\n                    }\n                }\n                fieldType = fieldType.getSuperclass();\n            }\n\n            injectMockCandidate(candidate.getClass(), mocks, candidate);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..7f581dbfe 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,40 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+        if (candidate != null) {\n+            Class<?> fieldType = field.getType();\n+            while (fieldType != null) {\n+                if (fieldType.isInstance(candidate)) {\n+                    try {\n+                        field.setAccessible(true);\n+                        if (Modifier.isFinal(field.getModifiers())) {\n+                            // Try to remove the final modifier using reflection\n+                            Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+                            modifiersField.setAccessible(true);\n+                            modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n+                        }\n+                        field.set(fieldInstance, candidate);\n+                        if (!field.getType().equals(candidate.getClass())) {\n+                            injectMockCandidate(candidate.getClass(), mocks, candidate);\n+                        }\n+                        return;\n+                    } catch (IllegalAccessException | NoSuchFieldException e) {\n+                        throw new IllegalStateException(\"Could not set field value\", e);\n+                    }\n+                }\n+                fieldType = fieldType.getSuperclass();\n+            }\n+\n+            injectMockCandidate(candidate.getClass(), mocks, candidate);\n+        }\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}