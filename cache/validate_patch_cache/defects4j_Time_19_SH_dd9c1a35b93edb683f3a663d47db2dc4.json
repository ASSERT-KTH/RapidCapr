{
    "patch": "        } else {\n            if (offsetAdjusted >= 0) {\n                long prev = previousTransition(instantAdjusted);\n                if (prev < instantAdjusted) {\n                    int offsetPrev = getOffset(prev);\n                    if (offsetPrev >= 0 && (instantAdjusted - prev <= offsetLocal - offsetPrev)) {\n                        return offsetPrev;\n                    }\n                }\n            } else {\n                long next = nextTransition(instantAdjusted);\n                int offsetNext = getOffset(next);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextAdjusted != next) {\n                    int diff = offsetNext - offsetLocal;\n                    if (diff > 0) {\n                        long prev = previousTransition(nextAdjusted - diff);\n                        if (prev < instantAdjusted) {\n                            int offsetPrev = getOffset(prev);\n                            if (offsetPrev >= 0 && (instantAdjusted - prev <= offsetLocal - offsetPrev)) {\n                                return offsetPrev;\n                            }\n                        }\n                        return offsetNext;\n                    }\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..d449aacc 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,34 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else {\n+            if (offsetAdjusted >= 0) {\n+                long prev = previousTransition(instantAdjusted);\n+                if (prev < instantAdjusted) {\n+                    int offsetPrev = getOffset(prev);\n+                    if (offsetPrev >= 0 && (instantAdjusted - prev <= offsetLocal - offsetPrev)) {\n+                        return offsetPrev;\n+                    }\n+                }\n+            } else {\n+                long next = nextTransition(instantAdjusted);\n+                int offsetNext = getOffset(next);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextAdjusted != next) {\n+                    int diff = offsetNext - offsetLocal;\n+                    if (diff > 0) {\n+                        long prev = previousTransition(nextAdjusted - diff);\n+                        if (prev < instantAdjusted) {\n+                            int offsetPrev = getOffset(prev);\n+                            if (offsetPrev >= 0 && (instantAdjusted - prev <= offsetLocal - offsetPrev)) {\n+                                return offsetPrev;\n+                            }\n+                        }\n+                        return offsetNext;\n+                    }\n+                }\n+            }\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}