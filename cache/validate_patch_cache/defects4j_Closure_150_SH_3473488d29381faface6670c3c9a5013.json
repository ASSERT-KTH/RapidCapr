{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            // Breaking to prevent falling through to `attachFunctionNameHooks`\n            return;\n          }\n          // Breaking to prevent falling through to `attachFunctionNameHooks`\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break; //add this line",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..414b988e 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1452,8 +1452,10 @@ final class TypedScopeCreator implements ScopeCreator {\n       switch (n.getType()) {\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n+            // Breaking to prevent falling through to `attachFunctionNameHooks`\n             return;\n           }\n+          // Breaking to prevent falling through to `attachFunctionNameHooks`\n           defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n@@ -1462,7 +1464,8 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n-      }\n+        default:\n+          break; //add this line\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}