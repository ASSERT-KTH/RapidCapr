{
    "patch": "StringBuilder result = new StringBuilder();\nfor (int i = 0; i < str.length(); i++) {\n    char c = str.charAt(i);\n    if (c == '\\\\') {\n        char nextChar = (i == str.length() - 1) ? '\\\\' : str.charAt(i + 1);\n        // Octal escape\n        if (nextChar >= '0' && nextChar <= '7') {\n            String code = \"\" + nextChar;\n            i++;\n            if ((i < str.length() - 1) && (str.charAt(i + 1) >= '0' && str.charAt(i + 1) <= '7')) {\n                code += str.charAt(i + 1);\n                i++;\n                if ((i < str.length() - 1) && (str.charAt(i + 1) >= '0' && str.charAt(i + 1) <= '7')) {\n                    code += str.charAt(i + 1);\n                    i++;\n                }\n            }\n        int octalCode = Integer.parseInt(code, 8);\n        result.append((char) octalCode); // fix this line\n        continue;\n        }\n        // Hexadecimal escape\n        if (nextChar == 'x') {\n            if (i == str.length() - 2) {\n                break;\n            }\n            String hexCode = \"\" + str.charAt(i + 2);\n            if ((i < str.length() - 3) && (str.charAt(i + 3) == ';')) {\n                hexCode += str.charAt(i + 3);\n                i++;\n            }\n            int decimalCode = Integer.parseInt(hexCode, 16);\n            result.append((char) decimalCode); // fix this line\n            i += 2;\n            continue;\n        }\n    }\n    result.append(c);\n}\nString output = result.toString();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}