{
    "patch": "public void testLANG_831() throws Exception {\n    final SimpleDateFormat format = (SimpleDateFormat) DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG);\n    final String pattern = format.toPattern();\n    final String inputDate = \"Feb 18, 2010 12:00:00 AM\";\n    final SimpleDateFormat parser = new SimpleDateFormat(pattern, Locale.US);\n    final Date dfdp = parser.parse(inputDate);\n    final String print = format.format(dfdp).toString();\n    final Date dsdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\", Locale.US).parse(print);\n    assertNotNull(dsdf);\n    assertEquals(\"Parsed dates should be equal\", dfdp, dsdf);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..ffa39a7a 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,17 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n-        }\n-        return regex;\n-    }\n+public void testLANG_831() throws Exception {\n+    final SimpleDateFormat format = (SimpleDateFormat) DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG);\n+    final String pattern = format.toPattern();\n+    final String inputDate = \"Feb 18, 2010 12:00:00 AM\";\n+    final SimpleDateFormat parser = new SimpleDateFormat(pattern, Locale.US);\n+    final Date dfdp = parser.parse(inputDate);\n+    final String print = format.format(dfdp).toString();\n+    final Date dsdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\", Locale.US).parse(print);\n+    assertNotNull(dsdf);\n+    assertEquals(\"Parsed dates should be equal\", dfdp, dsdf);\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}