{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    for (Node child = left.getFirstChild(), prev = null; child != null; prev = child, child = child.getNext()) {\n        if (intIndex == 0 && !child.isDefaultValue()) {\n            break;\n        } else if (intIndex < 0 || !child.isStringKey() && !child.isNumberKey()) {\n            error(INVALID_GETELEM_INDEX_ERROR, right);\n            return n;\n        } else if (prev != null && intIndex > prev.getIntProp(Node.LENGTH_PROP) && !prev.isDefaultValue()) {\n            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n            return n;\n        } else if (intIndex == child.getIntProp(Node.LENGTH_PROP)) {\n            if (child.isEmpty()) {\n                parent.replaceChild(n, NodeUtil.newUndefinedNode(n));\n                reportCodeChange();\n                return NodeUtil.newUndefinedNode(n);\n            } else {\n                Node replacement = child.getFirstChild().cloneTree();\n                parent.replaceChild(n, replacement);\n                reportCodeChange();\n                return replacement;\n            }\n        } else if (intIndex < child.getIntProp(Node.LENGTH_PROP)) {\n            Node replacement = null;\n            if (child.isObjectLit()) {\n                Node keyNode = null;\n                for (Node key = child.getFirstChild(); key != null; key = key.getNext()) {\n                    if (!key.isString()) {\n                        continue;\n                    } else if (key.getString().equals(Integer.toString(intIndex))) {\n                        keyNode = key;\n                        break;\n                    }\n                }\n                if (keyNode != null) {\n                    replacement = keyNode.getNext().cloneTree();\n                }\n            } else if (child.isArrayLit()) {\n                replacement = child.getChildAtIndex(intIndex).cloneTree();\n            }\n            if (replacement != null) {\n                parent.replaceChild(n, replacement);\n                reportCodeChange();\n                return replacement;\n            }\n        }\n    }\n\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..4ff77f3c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,76 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n     if (isAssignmentTarget(n)) {\n-      return n;\n+        return n;\n     }\n \n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+        // Sometimes people like to use complex expressions to index into\n+        // arrays, or strings to index into array methods.\n+        return n;\n     }\n \n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    if (intIndex != index || intIndex < 0) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+    for (Node child = left.getFirstChild(), prev = null; child != null; prev = child, child = child.getNext()) {\n+        if (intIndex == 0 && !child.isDefaultValue()) {\n+            break;\n+        } else if (intIndex < 0 || !child.isStringKey() && !child.isNumberKey()) {\n+            error(INVALID_GETELEM_INDEX_ERROR, right);\n+            return n;\n+        } else if (prev != null && intIndex > prev.getIntProp(Node.LENGTH_PROP) && !prev.isDefaultValue()) {\n+            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+            return n;\n+        } else if (intIndex == child.getIntProp(Node.LENGTH_PROP)) {\n+            if (child.isEmpty()) {\n+                parent.replaceChild(n, NodeUtil.newUndefinedNode(n));\n+                reportCodeChange();\n+                return NodeUtil.newUndefinedNode(n);\n+            } else {\n+                Node replacement = child.getFirstChild().cloneTree();\n+                parent.replaceChild(n, replacement);\n+                reportCodeChange();\n+                return replacement;\n+            }\n+        } else if (intIndex < child.getIntProp(Node.LENGTH_PROP)) {\n+            Node replacement = null;\n+            if (child.isObjectLit()) {\n+                Node keyNode = null;\n+                for (Node key = child.getFirstChild(); key != null; key = key.getNext()) {\n+                    if (!key.isString()) {\n+                        continue;\n+                    } else if (key.getString().equals(Integer.toString(intIndex))) {\n+                        keyNode = key;\n+                        break;\n+                    }\n+                }\n+                if (keyNode != null) {\n+                    replacement = keyNode.getNext().cloneTree();\n+                }\n+            } else if (child.isArrayLit()) {\n+                replacement = child.getChildAtIndex(intIndex).cloneTree();\n+            }\n+            if (replacement != null) {\n+                parent.replaceChild(n, replacement);\n+                reportCodeChange();\n+                return replacement;\n+            }\n+        }\n     }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n-  }\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}