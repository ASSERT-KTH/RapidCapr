{
    "patch": "      Node parent = n.getParent();\n\n      // 'this' function calls that are not GETPROP or GETELEM are invalid.\n      if (parent != null &&\n          parent.isGetProp() &&\n          parent.getParent() != null &&\n          parent.getParent().isCall() &&\n          n == parent.getLastChild()) {\n        JSType receiverType = getJSType(parent.getFirstChild()).dereference();\n        if (!receiverType.isUnknownType() &&\n            !receiverType.isNullType() &&\n            !receiverType.isAllType() &&\n            !receiverType.isObjectType()) {\n          report(t, n, THIS_TYPE_INVALID, receiverType.toString());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..aefcfcb0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      Node parent = n.getParent();\n+\n+      // 'this' function calls that are not GETPROP or GETELEM are invalid.\n+      if (parent != null &&\n+          parent.isGetProp() &&\n+          parent.getParent() != null &&\n+          parent.getParent().isCall() &&\n+          n == parent.getLastChild()) {\n+        JSType receiverType = getJSType(parent.getFirstChild()).dereference();\n+        if (!receiverType.isUnknownType() &&\n+            !receiverType.isNullType() &&\n+            !receiverType.isAllType() &&\n+            !receiverType.isObjectType()) {\n+          report(t, n, THIS_TYPE_INVALID, receiverType.toString());\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}