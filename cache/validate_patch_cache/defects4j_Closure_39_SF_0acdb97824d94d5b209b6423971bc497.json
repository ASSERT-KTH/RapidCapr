{
    "patch": "public boolean canBeCalled() {\n  return isFunctionType() || isRegexpType();\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else if (prettyPrint) {\n    // Don't pretty print recursively.\n    prettyPrint = false;\n\n    // Use a tree set so that the properties are sorted.\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType() &&\n             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n\n    int i = 0;\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n\n      sb.append(property);\n      sb.append(\": \");\n\n      JSType type = getPropertyType(property);\n\n      // If the property is an object type, recursively call toStringHelper\n      if (type instanceof ObjectType) {\n        sb.append(((ObjectType) type).toStringHelper(forAnnotations));\n      } else if (type instanceof UnionType) {\n        Set<JSType> alternatives = ((UnionType) type).getAlternates();\n\n        sb.append(\"(\");\n        Iterator<JSType> it = alternatives.iterator();\n        while (it.hasNext()) {\n          JSType alternate = it.next();\n          sb.append(alternate.toString());\n\n          if (it.hasNext()) {\n            sb.append(\"|\");\n          }\n        }\n        sb.append(\")\");\n      } else if (type instanceof EnumType) {\n        sb.append(type.toAnnotationString());\n      } else {\n        sb.append(type.toString());\n      }\n\n      ++i;\n      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        sb.append(\", ...\");\n        break;\n      }\n    }\n\n    sb.append(\"}\");\n\n    prettyPrint = true;\n    return sb.toString();\n  } else {\n    return \"{...}\";\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..d05e8c12 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,79 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+public boolean canBeCalled() {\n+  return isFunctionType() || isRegexpType();\n+}\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n+  if (hasReferenceName()) {\n+    return getReferenceName();\n+  } else if (prettyPrint) {\n+    // Don't pretty print recursively.\n+    prettyPrint = false;\n+\n+    // Use a tree set so that the properties are sorted.\n+    Set<String> propertyNames = Sets.newTreeSet();\n+    for (ObjectType current = this;\n+         current != null && !current.isNativeObjectType() &&\n+             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+         current = current.getImplicitPrototype()) {\n+      propertyNames.addAll(current.getOwnPropertyNames());\n+    }\n+\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"{\");\n+\n+    int i = 0;\n+    for (String property : propertyNames) {\n+      if (i > 0) {\n+        sb.append(\", \");\n       }\n \n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n+      sb.append(property);\n+      sb.append(\": \");\n \n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n+      JSType type = getPropertyType(property);\n+\n+      // If the property is an object type, recursively call toStringHelper\n+      if (type instanceof ObjectType) {\n+        sb.append(((ObjectType) type).toStringHelper(forAnnotations));\n+      } else if (type instanceof UnionType) {\n+        Set<JSType> alternatives = ((UnionType) type).getAlternates();\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        sb.append(\"(\");\n+        Iterator<JSType> it = alternatives.iterator();\n+        while (it.hasNext()) {\n+          JSType alternate = it.next();\n+          sb.append(alternate.toString());\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+          if (it.hasNext()) {\n+            sb.append(\"|\");\n+          }\n         }\n+        sb.append(\")\");\n+      } else if (type instanceof EnumType) {\n+        sb.append(type.toAnnotationString());\n+      } else {\n+        sb.append(type.toString());\n       }\n \n-      sb.append(\"}\");\n-\n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n+      ++i;\n+      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+        sb.append(\", ...\");\n+        break;\n+      }\n     }\n+\n+    sb.append(\"}\");\n+\n+    prettyPrint = true;\n+    return sb.toString();\n+  } else {\n+    return \"{...}\";\n   }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}