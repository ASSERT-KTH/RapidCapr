{
    "patch": "public static double getTypedPercent(JsonElement jsonElement) {\n    if (!jsonElement.isJsonObject()) {\n        return 0.0;\n    }\n    JsonObject jsonObject = jsonElement.getAsJsonObject();\n    if (!jsonObject.has(\"typedCount\") || !jsonObject.has(\"totalCount\")) {\n        return 0.0;\n    }\n    int typedCount = jsonObject.get(\"typedCount\").getAsInt();\n    int totalCount = jsonObject.get(\"totalCount\").getAsInt();\n    if (totalCount == 0) {\n        return 0.0;\n    }\n    return (double) typedCount * 100 / totalCount;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..18e7f14c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonElement jsonElement) {\n+    if (!jsonElement.isJsonObject()) {\n+        return 0.0;\n+    }\n+    JsonObject jsonObject = jsonElement.getAsJsonObject();\n+    if (!jsonObject.has(\"typedCount\") || !jsonObject.has(\"totalCount\")) {\n+        return 0.0;\n+    }\n+    int typedCount = jsonObject.get(\"typedCount\").getAsInt();\n+    int totalCount = jsonObject.get(\"totalCount\").getAsInt();\n+    if (totalCount == 0) {\n+        return 0.0;\n+    }\n+    return (double) typedCount * 100 / totalCount;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}