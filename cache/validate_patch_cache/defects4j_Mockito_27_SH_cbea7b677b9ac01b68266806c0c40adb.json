{
    "patch": "        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        if (mock instanceof Factory) {\n            try {\n                Class<? extends T> mockClass = mock.getClass();\n                Enhancer enhancer = new Enhancer();\n                enhancer.setSuperclass(mockClass);\n                enhancer.setInterfaces(new Class[] {Factory.class});\n                Factory newMock = (Factory) enhancer.create(new Class[] {Type.class}, new Object[] {mockClass.getGenericInterfaces()[0]});\n                MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n                MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n                newMock.setCallback(0, newFilter);\n                mock = newMock;\n            } catch (Throwable t) {\n                throw new MockitoException(\"Unable to create the mock object \" + mock.getClass() + \". \" +\n                                           \"Make sure that the provided mock class is an interface and\" +\n                                           \"that it's not a primitive or a final class.\", t);\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..80bb81081 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,27 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        if (mock instanceof Factory) {\n+            try {\n+                Class<? extends T> mockClass = mock.getClass();\n+                Enhancer enhancer = new Enhancer();\n+                enhancer.setSuperclass(mockClass);\n+                enhancer.setInterfaces(new Class[] {Factory.class});\n+                Factory newMock = (Factory) enhancer.create(new Class[] {Type.class}, new Object[] {mockClass.getGenericInterfaces()[0]});\n+                MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+                MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+                newMock.setCallback(0, newFilter);\n+                mock = newMock;\n+            } catch (Throwable t) {\n+                throw new MockitoException(\"Unable to create the mock object \" + mock.getClass() + \". \" +\n+                                           \"Make sure that the provided mock class is an interface and\" +\n+                                           \"that it's not a primitive or a final class.\", t);\n+            }\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: variable oldMockHandler is already defined in method <T>resetMock(T)",
    "test_result": "ERROR"
}