{
    "patch": "public static Locale toLocale(String str) {\n    if (str == null || str.trim().isEmpty()) {\n        return null;\n    }\n\n    str = str.trim();\n    final int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    final char ch0 = str.charAt(0);\n    final char ch1 = str.charAt(1);\n    if (!Character.isLowercase(ch0) || !Character.isLowercase(ch1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    if (len == 2) {\n        return new Locale(str);\n    } else if (str.charAt(2) != '_' && str.charAt(2) != '-') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    int separator1 = str.indexOf('_', 3);\n    int separator2 = str.indexOf('-', 3);\n\n    if (separator1 == -1) {\n        separator1 = len;\n    }\n    if (separator2 == -1) {\n        separator2 = len;\n    }\n\n    int separator = Math.min(separator1, separator2);\n\n    if (separator == 3) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    final String language = str.substring(0, 2);\n\n    final String country;\n    final String variant;\n    if (separator == len) {\n        country = str.substring(3);\n        variant = \"\";\n    } else {\n        country = str.substring(3, separator);\n        variant = str.substring(separator + 1);\n    }\n\n    return new Locale(language, country, variant);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..319eef69 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,60 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+public static Locale toLocale(String str) {\n+    if (str == null || str.trim().isEmpty()) {\n+        return null;\n+    }\n+\n+    str = str.trim();\n+    final int len = str.length();\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    final char ch0 = str.charAt(0);\n+    final char ch1 = str.charAt(1);\n+    if (!Character.isLowercase(ch0) || !Character.isLowercase(ch1)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n     }\n \n+    if (len == 2) {\n+        return new Locale(str);\n+    } else if (str.charAt(2) != '_' && str.charAt(2) != '-') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    int separator1 = str.indexOf('_', 3);\n+    int separator2 = str.indexOf('-', 3);\n+\n+    if (separator1 == -1) {\n+        separator1 = len;\n+    }\n+    if (separator2 == -1) {\n+        separator2 = len;\n+    }\n+\n+    int separator = Math.min(separator1, separator2);\n+\n+    if (separator == 3) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    final String language = str.substring(0, 2);\n+\n+    final String country;\n+    final String variant;\n+    if (separator == len) {\n+        country = str.substring(3);\n+        variant = \"\";\n+    } else {\n+        country = str.substring(3, separator);\n+        variant = str.substring(separator + 1);\n+    }\n+\n+    return new Locale(language, country, variant);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}