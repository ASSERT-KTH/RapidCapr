{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean changedDayOfMonth = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == DateTimeFieldType.monthOfYear().getField(partial.getChronology()).getBucketIndex()) {\n                int curMonth = values[i];\n                int newMonth = (curMonth + valueToAdd) % 12;\n                if (newMonth < 0) {\n                    newMonth += 12;\n                }\n                values[i] = newMonth + 1; // adjust value directly, not via field\n                int maxDayOfMonth = partial.getChronology().dayOfMonth().getMaximumValue(instant);\n                int curDom = values[DateTimeFieldType.dayOfMonth().getField(partial.getChronology()).getBucketIndex()];\n                if (curDom > maxDayOfMonth) {\n                    values[DateTimeFieldType.dayOfMonth().getField(partial.getChronology()).getBucketIndex()] = maxDayOfMonth;\n                    changedDayOfMonth = true;\n                }\n            } else {\n                instant = partial.getFieldType(i).getField(partial.getChronology()).set(instant, values[i]);\n            }\n        }\n        if (changedDayOfMonth) {\n            instant = partial.getChronology().set(partial, instant, values[0], values[1], values[2], values[3]);\n        } else {\n            instant = add(instant, valueToAdd);\n        }\n        return partial.getChronology().get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..c91eaca0 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,44 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean changedDayOfMonth = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == DateTimeFieldType.monthOfYear().getField(partial.getChronology()).getBucketIndex()) {\n+                int curMonth = values[i];\n+                int newMonth = (curMonth + valueToAdd) % 12;\n+                if (newMonth < 0) {\n+                    newMonth += 12;\n+                }\n+                values[i] = newMonth + 1; // adjust value directly, not via field\n+                int maxDayOfMonth = partial.getChronology().dayOfMonth().getMaximumValue(instant);\n+                int curDom = values[DateTimeFieldType.dayOfMonth().getField(partial.getChronology()).getBucketIndex()];\n+                if (curDom > maxDayOfMonth) {\n+                    values[DateTimeFieldType.dayOfMonth().getField(partial.getChronology()).getBucketIndex()] = maxDayOfMonth;\n+                    changedDayOfMonth = true;\n+                }\n+            } else {\n+                instant = partial.getFieldType(i).getField(partial.getChronology()).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+        }\n+        if (changedDayOfMonth) {\n+            instant = partial.getChronology().set(partial, instant, values[0], values[1], values[2], values[3]);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            instant = add(instant, valueToAdd);\n         }\n+        return partial.getChronology().get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}