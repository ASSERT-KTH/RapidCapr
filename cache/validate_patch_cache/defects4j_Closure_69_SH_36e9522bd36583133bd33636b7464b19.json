{
    "patch": "import com.google.javascript.rhino.jstype.ObjectType;\n\n// ...\n\nif (childType instanceof FunctionType) {\n  FunctionType functionType = (FunctionType) childType;\n\n  boolean isExtern = false;\n  JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n  if (functionJSDocInfo != null) {\n      String sourceName = functionJSDocInfo.getSourceName();\n      CompilerInput functionSource = compiler.getInput(sourceName);\n      isExtern = functionSource.isExtern();\n  }\n\n  ObjectType thisType = null;\n  if (functionType.getTypeOfThis() != null && functionType.getTypeOfThis() instanceof ObjectType) {\n      thisType = (ObjectType) functionType.getTypeOfThis();\n  }\n  if (thisType != null) {\n      if (child.isGetProp()) {\n          Node getPropFirstChild = child.getFirstChild();\n          JSType getPropFirstChildType = getJSType(getPropFirstChild);\n          if (!getPropFirstChildType.isSubtypeOf(thisType)) {\n              // Only warn if the actual type being provided for 'this' is a proper supertype of the declared type, since a subtype would be acceptable here.\n              if (JSType.compare(getPropFirstChildType, thisType, compiler.getCommonTypes()) > 0) {\n                  warnings.add(JSError.make(THIS_TYPE_MISMATCH, t.getSourceName(), t.getLineNumber(n), t.getCharno(n)));\n              }\n          }\n      } else if (child.isGetElem()) {\n          Node getElemFirstChild = child.getFirstChild();\n          JSType getElemFirstChildType = getJSType(getElemFirstChild);\n          if (!getElemFirstChildType.isSubtypeOf(thisType)) {\n              // Only warn if the actual type being provided for 'this' is a proper supertype of the declared type, since a subtype would be acceptable here.\n              if (JSType.compare(getElemFirstChildType, thisType, compiler.getCommonTypes()) > 0) {\n                  warnings.add(JSError.make(THIS_TYPE_MISMATCH, t.getSourceName(), t.getLineNumber(n), t.getCharno(n)));\n              }\n          }\n      } else {\n          report(t, child, MUST_BE_GET_OR_SET, \"'this' before calling a function with @this\");\n      }\n  }\n\n  if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType()\n              || functionType.getReturnType().isVoidType() || !isExtern)) {\n      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n  }\n\n  visitParameterList(t, n, functionType);\n  ensureTyped(t, n, functionType.getReturnType());\n} else {\n  ensureTyped(t, n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..7f023617 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,59 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+import com.google.javascript.rhino.jstype.ObjectType;\n+\n+// ...\n+\n+if (childType instanceof FunctionType) {\n+  FunctionType functionType = (FunctionType) childType;\n+\n+  boolean isExtern = false;\n+  JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+  if (functionJSDocInfo != null) {\n+      String sourceName = functionJSDocInfo.getSourceName();\n+      CompilerInput functionSource = compiler.getInput(sourceName);\n+      isExtern = functionSource.isExtern();\n+  }\n+\n+  ObjectType thisType = null;\n+  if (functionType.getTypeOfThis() != null && functionType.getTypeOfThis() instanceof ObjectType) {\n+      thisType = (ObjectType) functionType.getTypeOfThis();\n+  }\n+  if (thisType != null) {\n+      if (child.isGetProp()) {\n+          Node getPropFirstChild = child.getFirstChild();\n+          JSType getPropFirstChildType = getJSType(getPropFirstChild);\n+          if (!getPropFirstChildType.isSubtypeOf(thisType)) {\n+              // Only warn if the actual type being provided for 'this' is a proper supertype of the declared type, since a subtype would be acceptable here.\n+              if (JSType.compare(getPropFirstChildType, thisType, compiler.getCommonTypes()) > 0) {\n+                  warnings.add(JSError.make(THIS_TYPE_MISMATCH, t.getSourceName(), t.getLineNumber(n), t.getCharno(n)));\n+              }\n+          }\n+      } else if (child.isGetElem()) {\n+          Node getElemFirstChild = child.getFirstChild();\n+          JSType getElemFirstChildType = getJSType(getElemFirstChild);\n+          if (!getElemFirstChildType.isSubtypeOf(thisType)) {\n+              // Only warn if the actual type being provided for 'this' is a proper supertype of the declared type, since a subtype would be acceptable here.\n+              if (JSType.compare(getElemFirstChildType, thisType, compiler.getCommonTypes()) > 0) {\n+                  warnings.add(JSError.make(THIS_TYPE_MISMATCH, t.getSourceName(), t.getLineNumber(n), t.getCharno(n)));\n+              }\n+          }\n+      } else {\n+          report(t, child, MUST_BE_GET_OR_SET, \"'this' before calling a function with @this\");\n+      }\n+  }\n+\n+  if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType()\n+              || functionType.getReturnType().isVoidType() || !isExtern)) {\n+      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+  }\n+\n+  visitParameterList(t, n, functionType);\n+  ensureTyped(t, n, functionType.getReturnType());\n+} else {\n+  ensureTyped(t, n);\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}