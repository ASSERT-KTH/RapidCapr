{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        boolean removeLastArg = true;\n        if (lastArg.isDefaultValue()) {\n          lastArg = lastArg.removeFirstChild();\n        }\n        Var var = fnScope.getVar(lastArg.getString());\n\n        // If you want to remove 'optional' -- anything with a declared default value --\n        // you would un-comment this line,  removeLastArg would remain true, and we keep looping.\n        // if (!lastArg.getBooleanProp(Node.DESTRUCTURING_VAR)) {\n\n        if (!referenced.contains(var)) {\n          Node name = lastArg.isDefaultValue() ? lastArg.getFirstChild() : lastArg;\n          // Remove the name of the extraneous parameter from any JSDOC.\n          JSDocInfoBuilder builder = JSDocInfoBuilder.maybeCopyFrom(name.getJSDocInfo());\n          builder.recordParameterAsRemoved();\n          name.setJSDocInfo(builder.build());\n          // FINALLY remove the node.\n          argList.removeChild(lastArg);\n          // Because one of the parameter nodes has all the JSDoc attached to it,\n          // if we don't preserve comments here, they can be lost.\n          NodeUtil.markFunctionsDeleted(lastArg, compiler);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0d46af4b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,50 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        boolean removeLastArg = true;\n+        if (lastArg.isDefaultValue()) {\n+          lastArg = lastArg.removeFirstChild();\n+        }\n+        Var var = fnScope.getVar(lastArg.getString());\n+\n+        // If you want to remove 'optional' -- anything with a declared default value --\n+        // you would un-comment this line,  removeLastArg would remain true, and we keep looping.\n+        // if (!lastArg.getBooleanProp(Node.DESTRUCTURING_VAR)) {\n+\n+        if (!referenced.contains(var)) {\n+          Node name = lastArg.isDefaultValue() ? lastArg.getFirstChild() : lastArg;\n+          // Remove the name of the extraneous parameter from any JSDOC.\n+          JSDocInfoBuilder builder = JSDocInfoBuilder.maybeCopyFrom(name.getJSDocInfo());\n+          builder.recordParameterAsRemoved();\n+          name.setJSDocInfo(builder.build());\n+          // FINALLY remove the node.\n+          argList.removeChild(lastArg);\n+          // Because one of the parameter nodes has all the JSDoc attached to it,\n+          // if we don't preserve comments here, they can be lost.\n+          NodeUtil.markFunctionsDeleted(lastArg, compiler);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}