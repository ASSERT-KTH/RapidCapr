{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    double lgam = Gamma.logGamma(a);\n    if (x < a + 1.0) {\n        return regularizedGammaPSeries(a, x, lgam);\n    } else {\n        return 1.0 - regularizedGammaQContinuedFraction(a, x, lgam);\n    }\n}\n\nprivate static double regularizedGammaPSeries(double a, double x, double lgam) {\n    double gln = lgam;\n    double ap = a;\n    double sum = 1.0 / a;\n    double del = sum;\n\n    final double EPSILON = 10e-15;\n    final int MAX_ITERATIONS = 1000;\n\n    for (int i = 1; i <= MAX_ITERATIONS; i++) {\n        ap += 1.0;\n        del *= x / ap;\n        sum += del;\n        if (Math.abs(del) < Math.abs(sum) * EPSILON) {\n            return sum * Math.exp(-x + a * Math.log(x) - gln);\n        }\n    }\n\n    throw new RuntimeException(\"Maximum number of iterations exceeded in regularizedGammaP\");\n}\n\nprivate static double regularizedGammaQContinuedFraction(double a, double x, double lgam) {\n    double gln = lgam;\n    double b = x + 1.0 - a;\n    double c = 1.0 / EPSILON;\n    double d = 1.0 / b;\n    double h = d;\n\n    final double EPSILON = 10e-15;\n    final int MAX_ITERATIONS = 1000;\n\n    for (int i = 1; i <= MAX_ITERATIONS; i++) {\n        double an = -i * (i - a);\n        b += 2.0;\n        d = an * d + b;\n        if (Math.abs(d) < EPSILON) {\n            d = EPSILON;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < EPSILON) {\n            c = EPSILON;\n        }\n        d = 1.0 / d;\n        double del = d * c;\n        h *= del;\n        if (Math.abs(del - 1.0) < EPSILON) {\n            return h * Math.exp(-x + a * Math.log(x) - gln);\n        }\n    }\n\n    throw new RuntimeException(\"Maximum number of iterations exceeded in regularizedGammaQ\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b89ee3711 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,75 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    double lgam = Gamma.logGamma(a);\n+    if (x < a + 1.0) {\n+        return regularizedGammaPSeries(a, x, lgam);\n+    } else {\n+        return 1.0 - regularizedGammaQContinuedFraction(a, x, lgam);\n+    }\n+}\n+\n+private static double regularizedGammaPSeries(double a, double x, double lgam) {\n+    double gln = lgam;\n+    double ap = a;\n+    double sum = 1.0 / a;\n+    double del = sum;\n+\n+    final double EPSILON = 10e-15;\n+    final int MAX_ITERATIONS = 1000;\n+\n+    for (int i = 1; i <= MAX_ITERATIONS; i++) {\n+        ap += 1.0;\n+        del *= x / ap;\n+        sum += del;\n+        if (Math.abs(del) < Math.abs(sum) * EPSILON) {\n+            return sum * Math.exp(-x + a * Math.log(x) - gln);\n+        }\n+    }\n+\n+    throw new RuntimeException(\"Maximum number of iterations exceeded in regularizedGammaP\");\n+}\n+\n+private static double regularizedGammaQContinuedFraction(double a, double x, double lgam) {\n+    double gln = lgam;\n+    double b = x + 1.0 - a;\n+    double c = 1.0 / EPSILON;\n+    double d = 1.0 / b;\n+    double h = d;\n+\n+    final double EPSILON = 10e-15;\n+    final int MAX_ITERATIONS = 1000;\n+\n+    for (int i = 1; i <= MAX_ITERATIONS; i++) {\n+        double an = -i * (i - a);\n+        b += 2.0;\n+        d = an * d + b;\n+        if (Math.abs(d) < EPSILON) {\n+            d = EPSILON;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < EPSILON) {\n+            c = EPSILON;\n+        }\n+        d = 1.0 / d;\n+        double del = d * c;\n+        h *= del;\n+        if (Math.abs(del - 1.0) < EPSILON) {\n+            return h * Math.exp(-x + a * Math.log(x) - gln);\n+        }\n+    }\n+\n+    throw new RuntimeException(\"Maximum number of iterations exceeded in regularizedGammaQ\");\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}