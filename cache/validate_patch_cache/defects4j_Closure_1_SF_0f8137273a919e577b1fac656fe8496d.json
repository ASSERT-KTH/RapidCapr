{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters cannot be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers) {\n    Node lastArg;\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        NodeUtil.deleteNode(arg, compiler);\n        compiler.reportCodeChange();\n      } else {\n        lastArg = arg;\n      }\n    }\n\n    // Preserve the 'arguments' parameter if it's used in the function body.\n    boolean preserveArguments = false;\n    NodeTraversal.traverseEs6(compiler, function.getLastChild(), new NodeVisitor() {\n      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n.isName() && \"arguments\".equals(n.getString())) {\n          Node functionNode = parent.getParent();\n          if (functionNode != null && functionNode.isFunction()) {\n            preserveArguments = true;\n          }\n        }\n      }\n    });\n    if (!preserveArguments && argList.hasChildren() && \"arguments\".equals(argList.getChildAtIndex(0).getString())) {\n      NodeUtil.deleteNode(argList.getFirstChild(), compiler);\n      compiler.reportCodeChange();\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4b50c6ce 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,49 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  Node function = fnScope.getRootNode();\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters cannot be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+  if (!modifyCallers) {\n+    Node lastArg;\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        NodeUtil.deleteNode(arg, compiler);\n+        compiler.reportCodeChange();\n+      } else {\n+        lastArg = arg;\n+      }\n+    }\n+\n+    // Preserve the 'arguments' parameter if it's used in the function body.\n+    boolean preserveArguments = false;\n+    NodeTraversal.traverseEs6(compiler, function.getLastChild(), new NodeVisitor() {\n+      @Override\n+      public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n.isName() && \"arguments\".equals(n.getString())) {\n+          Node functionNode = parent.getParent();\n+          if (functionNode != null && functionNode.isFunction()) {\n+            preserveArguments = true;\n+          }\n         }\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+    });\n+    if (!preserveArguments && argList.hasChildren() && \"arguments\".equals(argList.getChildAtIndex(0).getString())) {\n+      NodeUtil.deleteNode(argList.getFirstChild(), compiler);\n+      compiler.reportCodeChange();\n     }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n   }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}