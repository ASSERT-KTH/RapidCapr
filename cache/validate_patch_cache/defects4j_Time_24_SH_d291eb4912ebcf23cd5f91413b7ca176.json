{
    "patch": "for (int i = 0; i < count; i++) {\n    SavedField savedField = savedFields[i];\n    DateTimeField field = savedField.iField;\n    int currentValue = savedField.iValue;\n    int parsedValue = field.remainder(millis);\n    int newValue = field.set(parsedValue, currentValue);\n\n    if (newValue < currentValue) {\n        if (i == 0 && savedFields[1].iField.getDurationField().getType() == DurationFieldType.weekyears()) {\n            int diff = currentValue - newValue;\n            int baseYears = iDefaultYear;\n            int targetYear = baseYears - diff;\n            if (targetYear <= getMinYear() || targetYear >= getMaxYear()) {\n                throw new IllegalFieldValueException(field.getType(), Integer.valueOf(targetYear), getMinYear(), getMaxYear());\n            }\n            // Take care of leap years in the new year.\n            int leapGap = getLeapYearCount(baseYears, targetYear) - diff;\n            if (leapGap != 0) {\n                long gapMillis = leapGap * (long)DateTimeConstants.MILLIS_PER_DAY;\n                millis = millis + gapMillis;\n            }\n            millis = setYear(millis, targetYear);\n        } else {\n            // If the new value was less than the old value, then\n            // the field is allowed to be discontinuous. Make sure\n            // the gap is filled.\n            if (i == 0 && savedFields[i + 1].iField.getDurationField().getType() == DurationFieldType.weekyears()) {\n                int minValue = field.getMinimumValue(currentValue - 1);\n                if (newValue < minValue) {\n                    if (currentValue == field.getMaximumValue()) {\n                        minValue = savedFields[i + 1].iField.getMinimumValue();\n                        if (newValue < minValue) {\n                            throw new IllegalFieldValueException(field.getType(), Integer.valueOf(newValue), null, null);\n                        }\n                        DateTimeField nextField = savedFields[i + 1].iField;\n                        millis = nextField.add(millis, 1);\n                        millis = field.set(millis, minValue);\n                        i++;\n                        continue;\n                    }\n                    throw new IllegalFieldValueException(field.getType(), Integer.valueOf(newValue), null, null);\n                }\n            } else {\n                int maxDifference = field.getMaximumValue() - currentValue + newValue;\n                if (i < count - 1) {\n                    int nextMin = savedFields[i + 1].iField.getMinimumValue();\n                    if (maxDifference > 1 && (nextMin > maxValue || nextMin <= newValue)) {\n                        throw new IllegalFieldValueException(field.getType(), Integer.valueOf(newValue), Integer.valueOf(currentValue - 1), Integer.valueOf(field.getMaximumValue()));\n                    }\n                }\n                millis = field.set(millis, field.getMinimumValue(currentValue - 1));\n                continue;\n            }\n        }\n    } else {\n        if (i > 0) {\n            DateTimeField prev = savedFields[i - 1].iField;\n            int prevValue = savedFields[i - 1].iValue;\n            if (prev.getDurationField().getType() == DurationFieldType.weekyears() && prev.getMaximumValue() < prevValue) {\n                try {\n                    millis = prev.add(millis, 1);\n                    millis = set(millis, prev, prevValue);\n                } catch (IllegalFieldValueException e) {\n                    if (field.getDurationField().getType() != DurationFieldType.weekyears() || i == 1 || savedFields[i - 2].iField.getDurationField().getType() != DurationFieldType.weekyears()) {\n                        throw e;\n                    }\n                    DateTimeField prevPrev = savedFields[i - 2].iField;\n                    int prevPrevValue = savedFields[i - 2].iValue;\n                    int currentYear = prev.get(millis);\n                    int newValue2 = currentYear - 1;\n                    if (prevPrev.get(newValue2) <= 0) {\n                        newValue2++;\n                    }\n                    millis = prevPrev.set(millis, prevPrevValue);\n                    millis = prev.set(millis, newValue2);\n                    millis = set(millis, field, currentValue);\n                    i--; // reparse previous field\n                }\n                continue;\n            }\n        }\n    }\n    millis = set(millis, field, newValue);\n    maxValue = field.getMaximumValue();\n    continue;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..9997e53e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,92 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    SavedField savedField = savedFields[i];\n+    DateTimeField field = savedField.iField;\n+    int currentValue = savedField.iValue;\n+    int parsedValue = field.remainder(millis);\n+    int newValue = field.set(parsedValue, currentValue);\n+\n+    if (newValue < currentValue) {\n+        if (i == 0 && savedFields[1].iField.getDurationField().getType() == DurationFieldType.weekyears()) {\n+            int diff = currentValue - newValue;\n+            int baseYears = iDefaultYear;\n+            int targetYear = baseYears - diff;\n+            if (targetYear <= getMinYear() || targetYear >= getMaxYear()) {\n+                throw new IllegalFieldValueException(field.getType(), Integer.valueOf(targetYear), getMinYear(), getMaxYear());\n+            }\n+            // Take care of leap years in the new year.\n+            int leapGap = getLeapYearCount(baseYears, targetYear) - diff;\n+            if (leapGap != 0) {\n+                long gapMillis = leapGap * (long)DateTimeConstants.MILLIS_PER_DAY;\n+                millis = millis + gapMillis;\n+            }\n+            millis = setYear(millis, targetYear);\n+        } else {\n+            // If the new value was less than the old value, then\n+            // the field is allowed to be discontinuous. Make sure\n+            // the gap is filled.\n+            if (i == 0 && savedFields[i + 1].iField.getDurationField().getType() == DurationFieldType.weekyears()) {\n+                int minValue = field.getMinimumValue(currentValue - 1);\n+                if (newValue < minValue) {\n+                    if (currentValue == field.getMaximumValue()) {\n+                        minValue = savedFields[i + 1].iField.getMinimumValue();\n+                        if (newValue < minValue) {\n+                            throw new IllegalFieldValueException(field.getType(), Integer.valueOf(newValue), null, null);\n+                        }\n+                        DateTimeField nextField = savedFields[i + 1].iField;\n+                        millis = nextField.add(millis, 1);\n+                        millis = field.set(millis, minValue);\n+                        i++;\n+                        continue;\n+                    }\n+                    throw new IllegalFieldValueException(field.getType(), Integer.valueOf(newValue), null, null);\n+                }\n+            } else {\n+                int maxDifference = field.getMaximumValue() - currentValue + newValue;\n+                if (i < count - 1) {\n+                    int nextMin = savedFields[i + 1].iField.getMinimumValue();\n+                    if (maxDifference > 1 && (nextMin > maxValue || nextMin <= newValue)) {\n+                        throw new IllegalFieldValueException(field.getType(), Integer.valueOf(newValue), Integer.valueOf(currentValue - 1), Integer.valueOf(field.getMaximumValue()));\n+                    }\n+                }\n+                millis = field.set(millis, field.getMinimumValue(currentValue - 1));\n+                continue;\n+            }\n+        }\n+    } else {\n+        if (i > 0) {\n+            DateTimeField prev = savedFields[i - 1].iField;\n+            int prevValue = savedFields[i - 1].iValue;\n+            if (prev.getDurationField().getType() == DurationFieldType.weekyears() && prev.getMaximumValue() < prevValue) {\n+                try {\n+                    millis = prev.add(millis, 1);\n+                    millis = set(millis, prev, prevValue);\n+                } catch (IllegalFieldValueException e) {\n+                    if (field.getDurationField().getType() != DurationFieldType.weekyears() || i == 1 || savedFields[i - 2].iField.getDurationField().getType() != DurationFieldType.weekyears()) {\n+                        throw e;\n+                    }\n+                    DateTimeField prevPrev = savedFields[i - 2].iField;\n+                    int prevPrevValue = savedFields[i - 2].iValue;\n+                    int currentYear = prev.get(millis);\n+                    int newValue2 = currentYear - 1;\n+                    if (prevPrev.get(newValue2) <= 0) {\n+                        newValue2++;\n+                    }\n+                    millis = prevPrev.set(millis, prevPrevValue);\n+                    millis = prev.set(millis, newValue2);\n+                    millis = set(millis, field, currentValue);\n+                    i--; // reparse previous field\n+                }\n+                continue;\n+            }\n+        }\n+    }\n+    millis = set(millis, field, newValue);\n+    maxValue = field.getMaximumValue();\n+    continue;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}