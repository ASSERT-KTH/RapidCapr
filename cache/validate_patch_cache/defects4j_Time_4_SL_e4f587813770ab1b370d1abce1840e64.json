{
    "patch": "Chronology chronology = iChronology != null ? iChronology : DateTimeUtils.getChronology(null);\nPartial newPartial = new Partial(chronology, newTypes == null || newTypes.length == 0 ? new DateTimeFieldType[]{fieldType} : newTypes, new int[newTypes == null ? iTypes.length : newTypes.length]);\nSystem.arraycopy(iValues, 0, newPartial.iValues, 0, Math.min(iValues.length, newPartial.iValues.length));\nnewPartial = newPartial.with(fieldType, value); // update newPartial's value for the fieldType\nchronology.validate(newPartial, newPartial.getValues());\nreturn newPartial;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..273807d9 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,12 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+Chronology chronology = iChronology != null ? iChronology : DateTimeUtils.getChronology(null);\n+Partial newPartial = new Partial(chronology, newTypes == null || newTypes.length == 0 ? new DateTimeFieldType[]{fieldType} : newTypes, new int[newTypes == null ? iTypes.length : newTypes.length]);\n+System.arraycopy(iValues, 0, newPartial.iValues, 0, Math.min(iValues.length, newPartial.iValues.length));\n+newPartial = newPartial.with(fieldType, value); // update newPartial's value for the fieldType\n+chronology.validate(newPartial, newPartial.getValues());\n+return newPartial;\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}