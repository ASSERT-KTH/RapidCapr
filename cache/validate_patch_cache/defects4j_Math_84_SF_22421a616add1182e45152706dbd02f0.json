{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    final RealPointValuePair[] original = simplex;\n    final RealPointValuePair best = original[0];\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n        // Perform an expansion to get better results\n        final RealPointValuePair[] expandedSimplex = simplex;\n        final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(expanded, reflected) < 0) {\n            simplex = expandedSimplex;\n        } else {\n            simplex = reflected.getPoint() == best.getPoint() ? expandedSimplex : simplex;\n        }\n        return;\n    }\n    final RealPointValuePair contracted = evaluateNewSimplex(original, beta, comparator);\n    if (comparator.compare(contracted, best) < 0) {\n        simplex = comparator.compare(contracted, original[original.length - 1]) <= 0 ? \n                simplex = contracted.getPoint() == best.getPoint() ? evaluateNewSimplex(original, gamma, comparator) : simplex : contracted;\n        return;\n    }\n    final RealPointValuePair shrinked = shrink(original, comparator);\n    if (comparator.compare(shrinked, best) < 0) {\n        simplex = shrinked;\n    } else {\n        contractInside(original, comparator);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..efe94e85b 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,35 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n-\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+    final RealPointValuePair[] original = simplex;\n+    final RealPointValuePair best = original[0];\n+    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+    if (comparator.compare(reflected, best) < 0) {\n+        // Perform an expansion to get better results\n+        final RealPointValuePair[] expandedSimplex = simplex;\n+        final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(expanded, reflected) < 0) {\n+            simplex = expandedSimplex;\n+        } else {\n+            simplex = reflected.getPoint() == best.getPoint() ? expandedSimplex : simplex;\n         }\n-\n+        return;\n+    }\n+    final RealPointValuePair contracted = evaluateNewSimplex(original, beta, comparator);\n+    if (comparator.compare(contracted, best) < 0) {\n+        simplex = comparator.compare(contracted, original[original.length - 1]) <= 0 ? \n+                simplex = contracted.getPoint() == best.getPoint() ? evaluateNewSimplex(original, gamma, comparator) : simplex : contracted;\n+        return;\n     }\n+    final RealPointValuePair shrinked = shrink(original, comparator);\n+    if (comparator.compare(shrinked, best) < 0) {\n+        simplex = shrinked;\n+    } else {\n+        contractInside(original, comparator);\n+    }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}