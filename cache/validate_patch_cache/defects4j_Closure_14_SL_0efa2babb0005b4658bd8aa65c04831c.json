{
    "patch": "if (cfa != null) {\n  Node finallyParent = finallyNode.getParent();\n  if (finallyParent.isBlock() && finallyParent.getNext() == null) {\n    // The finally node is the last node of a block.\n    Node enclosingNode = finallyParent;\n    while (enclosingNode.getParent() != null && enclosingNode.getParent().getNext() == enclosingNode) {\n      enclosingNode = enclosingNode.getParent();\n    }\n    if (enclosingNode.getParent() == null) {\n      // The finally node is the last node of the function.\n      cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, finallyNode.getParent(), cfa));\n    } else {\n      // The finally node is not the last node of the function.\n      for (Node succ : cfa.getCfg().getSuccNodes(finallyNode)) {\n        cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(succ));\n      }\n    }\n  } else if (finallyParent.isCatch()) {\n    // The finally node is part of a catch block.\n    if (cfa.finallyMap.containsKey(finallyParent)) {\n      for (Node succ : cfa.getCfg().getSuccNodes(finallyNode)) {\n        cfa.createEdge(fromNode, Branch.UNCOND, succ);\n      }\n    } else {\n      Node catchBody = NodeUtil.getTwoChildCloned(finallyParent);\n      cfa.finallyMap.put(finallyParent, new ArrayList<Node>());\n      cfa.traverse(catchBody, finallyParent, finallyParent, null, cfa.finallyMap.get(finallyParent));\n      for (Node succ : cfa.getCfg().getSuccNodes(finallyNode)) {\n        cfa.createEdge(fromNode, Branch.UNCOND, succ);\n      }\n    }\n  } else {\n    // The finally node is not part of a catch block and is not the last node of a block.\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(finallyNode.getNext()));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..9c4affa0 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,42 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  Node finallyParent = finallyNode.getParent();\n+  if (finallyParent.isBlock() && finallyParent.getNext() == null) {\n+    // The finally node is the last node of a block.\n+    Node enclosingNode = finallyParent;\n+    while (enclosingNode.getParent() != null && enclosingNode.getParent().getNext() == enclosingNode) {\n+      enclosingNode = enclosingNode.getParent();\n+    }\n+    if (enclosingNode.getParent() == null) {\n+      // The finally node is the last node of the function.\n+      cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, finallyNode.getParent(), cfa));\n+    } else {\n+      // The finally node is not the last node of the function.\n+      for (Node succ : cfa.getCfg().getSuccNodes(finallyNode)) {\n+        cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(succ));\n+      }\n+    }\n+  } else if (finallyParent.isCatch()) {\n+    // The finally node is part of a catch block.\n+    if (cfa.finallyMap.containsKey(finallyParent)) {\n+      for (Node succ : cfa.getCfg().getSuccNodes(finallyNode)) {\n+        cfa.createEdge(fromNode, Branch.UNCOND, succ);\n+      }\n+    } else {\n+      Node catchBody = NodeUtil.getTwoChildCloned(finallyParent);\n+      cfa.finallyMap.put(finallyParent, new ArrayList<Node>());\n+      cfa.traverse(catchBody, finallyParent, finallyParent, null, cfa.finallyMap.get(finallyParent));\n+      for (Node succ : cfa.getCfg().getSuccNodes(finallyNode)) {\n+        cfa.createEdge(fromNode, Branch.UNCOND, succ);\n+      }\n+    }\n+  } else {\n+    // The finally node is not part of a catch block and is not the last node of a block.\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(finallyNode.getNext()));\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}