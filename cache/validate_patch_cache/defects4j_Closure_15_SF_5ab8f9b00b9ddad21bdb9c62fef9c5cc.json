{
    "patch": "  public boolean apply(Node n) {\n    if (n == null) {\n      return false;\n    }\n\n    if (n.isCall()) {\n      Node callee = n.getFirstChild();\n      if (ControlFlowGraph.isEnteringNewCfgNode(callee)) {\n        return true;\n      }\n      if (callee.isName() || callee.isGetProp()) {\n        Var var = getScope().getVar(callee.getString());\n        if (var != null && var.isArguments()) {\n          for (Node c = callee.getNext(); c != null; c = c.getNext()) {\n            if (apply(c)) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n      return true;\n    }\n\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child) && apply(child)) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..2d5bc69d 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -81,32 +81,40 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n     new Predicate<Node>() {\n       @Override\n-      public boolean apply(Node n) {\n-        // When the node is null it means, we reached the implicit return\n-        // where the function returns (possibly without an return statement)\n-        if (n == null) {\n-          return false;\n-        }\n-\n-        // TODO(user): We only care about calls to functions that\n-        // passes one of the dependent variable to a non-side-effect free\n-        // function.\n-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n-          return true;\n-        }\n+  public boolean apply(Node n) {\n+    if (n == null) {\n+      return false;\n+    }\n \n-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n-          return true;\n+    if (n.isCall()) {\n+      Node callee = n.getFirstChild();\n+      if (ControlFlowGraph.isEnteringNewCfgNode(callee)) {\n+        return true;\n+      }\n+      if (callee.isName() || callee.isGetProp()) {\n+        Var var = getScope().getVar(callee.getString());\n+        if (var != null && var.isArguments()) {\n+          for (Node c = callee.getNext(); c != null; c = c.getNext()) {\n+            if (apply(c)) {\n+              return true;\n+            }\n+          }\n         }\n+      }\n+    }\n \n+    if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+      return true;\n+    }\n \n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n-            return true;\n-          }\n-        }\n-        return false;\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(child) && apply(child)) {\n+        return true;\n       }\n+    }\n+\n+    return false;\n+  }\n   };\n \n   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}