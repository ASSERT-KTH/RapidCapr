{
    "patch": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Determine if the input is hexadecimal\n    boolean isHexadecimal = false;\n    int startIndex = 0;\n    if (StringUtils.startsWithIgnoreCase(str, \"0x\") || StringUtils.startsWithIgnoreCase(str, \"-0x\")) {\n        isHexadecimal = true;\n        startIndex = str.charAt(0) == '-' ? 3 : 2;\n    } else if (StringUtils.startsWithIgnoreCase(str, \"#\") || StringUtils.startsWithIgnoreCase(str, \"-#\")) {\n        isHexadecimal = true;\n        startIndex = str.charAt(0) == '-' ? 2 : 1;\n    }\n    if (isHexadecimal) {\n        String numeric = str.substring(startIndex);\n        if (StringUtils.containsAny(numeric, \"lL\")) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        if (numeric.length() > 16) {\n            return new BigInteger(numeric, 16);\n        } else {\n            return createLong(numeric);\n        }\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPos = StringUtils.indexOfAny(str, \"eE\");\n    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n    // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n\n    int numDecimals = 0; // Check required precision (LANG-693)\n    if (decPos > -1) { // there is a decimal point\n\n        if (expPos > -1) { // there is an exponent\n            if (expPos < decPos || expPos > str.length() - 1) { // prevents problems caused by using the wrong offset\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n    } else {\n        if (expPos > -1) {\n            if (expPos == 0 || expPos == str.length() - 1) { // prevents problems caused by using the wrong offset\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        //Requesting a specific type..\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                if (dec == null && exp == null) {\n                    String intStr = StringUtils.substring(numeric, 0, numeric.length() - 1);\n                    if (StringUtils.startsWith(intStr, \"-\")) {\n                        if (intStr.length() > 1 && StringUtils.isNumeric(intStr.substring(1))) {\n                            return createLong(numeric);\n                        }\n                    } else if (StringUtils.isNumeric(intStr)) {\n                        return createLong(numeric);\n                    }\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f' :\n            case 'F' :\n                try {\n                    final Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        //If i",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 1e6ccdc0..b78c8e0c 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -447,171 +447,96 @@ public class NumberUtils {\n      * @return Number created from the string (or null if the input is null)\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(final String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }\n-        // Need to deal with all possible hex prefixes here\n-        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n-        int pfxLen = 0;\n-        for(final String pfx : hex_prefixes) {\n-            if (str.startsWith(pfx)) {\n-                pfxLen += pfx.length();\n-                break;\n-            }\n-        }\n-        if (pfxLen > 0) { // we have a hex number\n-            final int hexDigits = str.length() - pfxLen;\n-            if (hexDigits > 16) { // too many for Long\n-                return createBigInteger(str);\n-            }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n-            }\n-            return createInteger(str);\n+public static Number createNumber(final String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+    // Determine if the input is hexadecimal\n+    boolean isHexadecimal = false;\n+    int startIndex = 0;\n+    if (StringUtils.startsWithIgnoreCase(str, \"0x\") || StringUtils.startsWithIgnoreCase(str, \"-0x\")) {\n+        isHexadecimal = true;\n+        startIndex = str.charAt(0) == '-' ? 3 : 2;\n+    } else if (StringUtils.startsWithIgnoreCase(str, \"#\") || StringUtils.startsWithIgnoreCase(str, \"-#\")) {\n+        isHexadecimal = true;\n+        startIndex = str.charAt(0) == '-' ? 2 : 1;\n+    }\n+    if (isHexadecimal) {\n+        String numeric = str.substring(startIndex);\n+        if (StringUtils.containsAny(numeric, \"lL\")) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n         }\n-        final char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        final int decPos = str.indexOf('.');\n-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n-\n-        int numDecimals = 0; // Check required precision (LANG-693)\n-        if (decPos > -1) { // there is a decimal point\n-\n-            if (expPos > -1) { // there is an exponent\n-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n+        if (numeric.length() > 16) {\n+            return new BigInteger(numeric, 16);\n         } else {\n-            if (expPos > -1) {\n-                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n+            return createLong(numeric);\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n+    }\n+    final char lastChar = str.charAt(str.length() - 1);\n+    String mant;\n+    String dec;\n+    String exp;\n+    final int decPos = str.indexOf('.');\n+    final int expPos = StringUtils.indexOfAny(str, \"eE\");\n+    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n+    // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n+\n+    int numDecimals = 0; // Check required precision (LANG-693)\n+    if (decPos > -1) { // there is a decimal point\n+\n+        if (expPos > -1) { // there is an exponent\n+            if (expPos < decPos || expPos > str.length() - 1) { // prevents problems caused by using the wrong offset\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n-            //Requesting a specific type..\n-            final String numeric = str.substring(0, str.length() - 1);\n-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (final NumberFormatException nfe) { // NOPMD\n-                            // Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        final Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        final Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (final NumberFormatException e) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-\n+            dec = str.substring(decPos + 1, expPos);\n+        } else {\n+            dec = str.substring(decPos + 1);\n+        }\n+        mant = str.substring(0, decPos);\n+        numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n+    } else {\n+        if (expPos > -1) {\n+            if (expPos == 0 || expPos == str.length() - 1) { // prevents problems caused by using the wrong offset\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n+            mant = str.substring(0, expPos);\n+        } else {\n+            mant = str;\n         }\n-        //User doesn't have a preference on the return type, so let's start\n-        //small and go from there...\n+        dec = null;\n+    }\n+    if (!Character.isDigit(lastChar) && lastChar != '.') {\n         if (expPos > -1 && expPos < str.length() - 1) {\n-            exp = str.substring(expPos + 1, str.length());\n+            exp = str.substring(expPos + 1, str.length() - 1);\n         } else {\n             exp = null;\n         }\n-        if (dec == null && exp == null) { // no decimal point and no exponent\n-            //Must be an Integer, Long, Biginteger\n-            try {\n-                return createInteger(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            try {\n-                return createLong(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            return createBigInteger(str);\n-        }\n-\n-        //Must be a Float, Double, BigDecimal\n+        //Requesting a specific type..\n+        final String numeric = str.substring(0, str.length() - 1);\n         final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-        try {\n-            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n-                final Float f = createFloat(str);\n-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                    return f;\n-                }\n-            }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n-        }\n-        try {\n-            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n-                final Double d = createDouble(str);\n-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                    return d;\n+        switch (lastChar) {\n+            case 'l' :\n+            case 'L' :\n+                if (dec == null && exp == null) {\n+                    String intStr = StringUtils.substring(numeric, 0, numeric.length() - 1);\n+                    if (StringUtils.startsWith(intStr, \"-\")) {\n+                        if (intStr.length() > 1 && StringUtils.isNumeric(intStr.substring(1))) {\n+                            return createLong(numeric);\n+                        }\n+                    } else if (StringUtils.isNumeric(intStr)) {\n+                        return createLong(numeric);\n+                    }\n                 }\n-            }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n-        }\n-\n-        return createBigDecimal(str);\n-    }\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+            case 'f' :\n+            case 'F' :\n+                try {\n+                    final Float f = NumberUtils.createFloat(numeric);\n+                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                        //If i\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}