{
    "patch": "        if (child.isGetProp() || child.isSetProp()) {\n          continue; // ignore GET and SET properties\n        }\n\n        if (!child.isString()) {\n          // We should only process string nodes in an OBJECTLIT.\n          compiler.report(JSError.make(t.getSourceName(), child, Warnings.INVALIDATION,\n                  \"Invalid node type in OBJECTLIT, expected STRING but found \" + child.getToken()));\n          continue;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..38356df5 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,16 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        if (child.isGetProp() || child.isSetProp()) {\n+          continue; // ignore GET and SET properties\n+        }\n+\n+        if (!child.isString()) {\n+          // We should only process string nodes in an OBJECTLIT.\n+          compiler.report(JSError.make(t.getSourceName(), child, Warnings.INVALIDATION,\n+                  \"Invalid node type in OBJECTLIT, expected STRING but found \" + child.getToken()));\n+          continue;\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}