{
    "patch": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        int type = n.getType();\n\n        if(type == Token.LAMBDA){\n          continue;\n        }\n\n        if (v.isParam() || type == Token.FUNCTION) {\n          continue;\n        }\n\n        if(type == Token.VAR){\n          Node parent = n.getParent();\n\n          if (parent.isVar()) {\n            if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n              String name = n.getString();\n              Var aliasVar = scope.getVar(name);\n              if(aliasVar.getInitialValue()!=null){\n                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                aliases.put(name, aliasVar);\n                transformation.addAlias(name, qualifiedName);\n              }\n\n            } else {\n              // if its a var but not a namespace var\n              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..6e95ab8b 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -274,24 +274,33 @@ class ScopedAliases implements HotSwapCompilerPass {\n       for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n         int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+\n+        if(type == Token.LAMBDA){\n+          continue;\n+        }\n+\n+        if (v.isParam() || type == Token.FUNCTION) {\n+          continue;\n         }\n+\n+        if(type == Token.VAR){\n+          Node parent = n.getParent();\n+\n+          if (parent.isVar()) {\n+            if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+              String name = n.getString();\n+              Var aliasVar = scope.getVar(name);\n+              if(aliasVar.getInitialValue()!=null){\n+                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                aliases.put(name, aliasVar);\n+                transformation.addAlias(name, qualifiedName);\n+              }\n+\n+            } else {\n+              // if its a var but not a namespace var\n+              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+            }\n+          }\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}