{
    "patch": "private String getRemainingJSDocLine() {\n    StringBuilder resultBuilder = new StringBuilder();\n    char currentChar = stream.peek();\n    while (currentChar != '\\n' && Character.isWhitespace(currentChar)) {\n        resultBuilder.append(currentChar);\n        stream.next();\n        currentChar = stream.peek();\n    }\n\n    String result = stream.getRemainingJSDocLine();\n    if (result == null){\n        throw new IllegalStateException(\"Error while parsing JSDoc\");\n    }\n    resultBuilder.append(result.trim());\n\n    return resultBuilder.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..45e18a26 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,23 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n+private String getRemainingJSDocLine() {\n+    StringBuilder resultBuilder = new StringBuilder();\n+    char currentChar = stream.peek();\n+    while (currentChar != '\\n' && Character.isWhitespace(currentChar)) {\n+        resultBuilder.append(currentChar);\n+        stream.next();\n+        currentChar = stream.peek();\n+    }\n+\n     String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+    if (result == null){\n+        throw new IllegalStateException(\"Error while parsing JSDoc\");\n+    }\n+    resultBuilder.append(result.trim());\n+\n+    return resultBuilder.toString();\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}