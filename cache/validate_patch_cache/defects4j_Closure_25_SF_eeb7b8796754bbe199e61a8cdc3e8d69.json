{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n\n  if (constructorType != null) {\n    // Get the type of the constructor function\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      // Set the type of the new expression to UNKNOWN_TYPE\n      n.setJSType(getNativeType(UNKNOWN_TYPE));\n      return scope;\n    }\n\n    // Try to get the instance type from constructor function's JSDoc annotation\n    JSType instanceType = getJSTypeFromNodeJsdoc(constructor).map(this::normalizeAndEnsureRecordType).orElse(null);\n    if (instanceType != null) {\n      n.setJSType(instanceType);\n      // Traverse the arguments\n      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n      }\n      return scope;\n    }\n\n    FunctionType ct = constructorType.toMaybeFunctionType();\n    if (ct != null && ct.isConstructor() && ct.getInstanceType() != null) {\n      // Set the type of the new expression to the instance type of the constructor\n      n.setJSType(ct.getInstanceType());\n\n      // Traverse the arguments\n      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n      }\n\n      return scope;\n    }\n  }\n\n  // Set the type of the new expression to UNKNOWN_TYPE\n  n.setJSType(getNativeType(UNKNOWN_TYPE));\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..c48bf736 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,36 +1032,50 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+  JSType constructorType = constructor.getJSType();\n+\n+  if (constructorType != null) {\n+    // Get the type of the constructor function\n+    constructorType = constructorType.restrictByNotNullOrUndefined();\n+    if (constructorType.isUnknownType()) {\n+      // Set the type of the new expression to UNKNOWN_TYPE\n+      n.setJSType(getNativeType(UNKNOWN_TYPE));\n+      return scope;\n+    }\n+\n+    // Try to get the instance type from constructor function's JSDoc annotation\n+    JSType instanceType = getJSTypeFromNodeJsdoc(constructor).map(this::normalizeAndEnsureRecordType).orElse(null);\n+    if (instanceType != null) {\n+      n.setJSType(instanceType);\n+      // Traverse the arguments\n+      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+        scope = traverse(arg, scope);\n       }\n+      return scope;\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+\n+    FunctionType ct = constructorType.toMaybeFunctionType();\n+    if (ct != null && ct.isConstructor() && ct.getInstanceType() != null) {\n+      // Set the type of the new expression to the instance type of the constructor\n+      n.setJSType(ct.getInstanceType());\n+\n+      // Traverse the arguments\n+      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+        scope = traverse(arg, scope);\n+      }\n+\n+      return scope;\n     }\n-    return scope;\n   }\n \n+  // Set the type of the new expression to UNKNOWN_TYPE\n+  n.setJSType(getNativeType(UNKNOWN_TYPE));\n+  return scope;\n+}\n+\n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);\n   }",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}