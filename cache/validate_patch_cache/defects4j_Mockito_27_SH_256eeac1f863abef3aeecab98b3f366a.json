{
    "patch": "MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\nProxyFactory proxyFactory = new ProxyFactory();\nproxyFactory.setSuperclass(mock.getClass());\nproxyFactory.setInterfaces(mock.getClass().getInterfaces());\nT newMock = (T) proxyFactory.createMethodInterceptor(newFilter);\nif (mock instanceof Factory) {\n    ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n} else {\n    reset(mock);\n    ReflectionUtils.copyState(newMock, mock);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..2a5de86ac 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,20 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+ProxyFactory proxyFactory = new ProxyFactory();\n+proxyFactory.setSuperclass(mock.getClass());\n+proxyFactory.setInterfaces(mock.getClass().getInterfaces());\n+T newMock = (T) proxyFactory.createMethodInterceptor(newFilter);\n+if (mock instanceof Factory) {\n+    ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n+} else {\n+    reset(mock);\n+    ReflectionUtils.copyState(newMock, mock);\n+}\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}