{
    "patch": "      if (functionType.getTypeOfThis() != null) {\n        Node parent = n.getParent();\n        boolean isIllegalThis = parent == null ||\n            (parent.isGetProp() || (parent.isGetElem() && parent.getFirstChild() == n));\n        // check if this is a method call\n        if (!isIllegalThis && parent.isCall() && parent.getFirstChild() == n) {\n          Node grandParent = parent.getParent();\n          isIllegalThis = grandParent == null ||\n              (!grandParent.isNew() && !grandParent.isExprResult());\n        }\n        if (isIllegalThis) {\n          report(t, n, ILLEGAL_THIS);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..03501e05 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis() != null) {\n+        Node parent = n.getParent();\n+        boolean isIllegalThis = parent == null ||\n+            (parent.isGetProp() || (parent.isGetElem() && parent.getFirstChild() == n));\n+        // check if this is a method call\n+        if (!isIllegalThis && parent.isCall() && parent.getFirstChild() == n) {\n+          Node grandParent = parent.getParent();\n+          isIllegalThis = grandParent == null ||\n+              (!grandParent.isNew() && !grandParent.isExprResult());\n+        }\n+        if (isIllegalThis) {\n+          report(t, n, ILLEGAL_THIS);\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}