{
    "patch": "// We only want to match constraints on anonymous types.\nif (constraintObj.isNominalConstructor() || constraintObj.isFunctionType()) {\n  return;\n}\n\nif (constraintObj.isRecordType()) {\n  ObjectType thisObj = getThisType().autobox();\n  for (String prop : constraintObj.getOwnPropertyNames()) {\n    JSType propType = constraintObj.getPropertyType(prop);\n    if (!thisObj.hasProperty(prop)) {\n      JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n      defineInferredProperty(prop, typeToInfer, null);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..9b11e838 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,21 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+// We only want to match constraints on anonymous types.\n+if (constraintObj.isNominalConstructor() || constraintObj.isFunctionType()) {\n+  return;\n+}\n+\n+if (constraintObj.isRecordType()) {\n+  ObjectType thisObj = getThisType().autobox();\n+  for (String prop : constraintObj.getOwnPropertyNames()) {\n+    JSType propType = constraintObj.getPropertyType(prop);\n+    if (!thisObj.hasProperty(prop)) {\n+      JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n+      defineInferredProperty(prop, typeToInfer, null);\n+    }\n+  }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}