{
    "patch": "public static double getTypedPercent(String json) {\n    Gson gson = new GsonBuilder()\n            .registerTypeAdapter(Double.class, (JsonDeserializer<Double>) (jsonElement, type, jsonDeserializationContext) -> {\n                try {\n                    return Double.parseDouble(jsonElement.getAsString());\n                } catch (NumberFormatException e) {\n                    return 0.0;\n                }\n            }).create();\n    Map<String, Double> map = gson.fromJson(json, new TypeToken<Map<String, Double>>(){}.getType());\n    double sum = 0.0;\n    double total = 0.0;\n    for (double value : map.values()) {\n        sum += value;\n        total += 1.0;\n    }\n    return (sum / total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..553642a7 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(Double.class, (JsonDeserializer<Double>) (jsonElement, type, jsonDeserializationContext) -> {\n+                try {\n+                    return Double.parseDouble(jsonElement.getAsString());\n+                } catch (NumberFormatException e) {\n+                    return 0.0;\n+                }\n+            }).create();\n+    Map<String, Double> map = gson.fromJson(json, new TypeToken<Map<String, Double>>(){}.getType());\n+    double sum = 0.0;\n+    double total = 0.0;\n+    for (double value : map.values()) {\n+        sum += value;\n+        total += 1.0;\n+    }\n+    return (sum / total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}