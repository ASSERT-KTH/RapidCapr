{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.Precision;\nimport org.apache.commons.math3.stat.inference.TestUtils;\n\npublic class GammaFunction {\n  public static double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException();\n    }\n    double result;\n    if (x < a + 1) {\n        double ap = a;\n        double sum = 1.0 / a;\n        double del = sum;\n        while (Math.abs(del) > Math.abs(sum)*10e-15) {\n            ap++;\n            del *= x/ap;\n            sum += del;\n        }\n        result = sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n    } else {\n        double b = x + 1 - a;\n        double c = 1/10e-15;\n        double d = 1/b;\n        double h = d;\n        double n = 1;\n        while (Math.abs(d - n) > c*d) {\n            n++;\n            double a1 = 2*n - 1 - a;\n            double aa = n*(a-b);\n            double d1 = aa*d + a1*h;\n            double d2 = aa*(d + d1/(2*n)) + a1;\n            h = d1/d2;\n            d = d2;\n        }\n        result = 1 - h*Math.exp(-x + a*Math.log(x) - Gamma.logGamma(a));\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    double expected = 0.632120558828558;\n    double actualP = GammaFunction.regularizedGammaP(0.5, 1.0);\n    TestUtils.assertEquals(expected, actualP, 10e-15);\n    System.out.println(\"Test passed successfully.\");\n}\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..ec51d4f4e 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,54 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.MathUtils;\n+import org.apache.commons.math3.util.Precision;\n+import org.apache.commons.math3.stat.inference.TestUtils;\n+\n+public class GammaFunction {\n+  public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException();\n+    }\n+    double result;\n+    if (x < a + 1) {\n+        double ap = a;\n+        double sum = 1.0 / a;\n+        double del = sum;\n+        while (Math.abs(del) > Math.abs(sum)*10e-15) {\n+            ap++;\n+            del *= x/ap;\n+            sum += del;\n+        }\n+        result = sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n+    } else {\n+        double b = x + 1 - a;\n+        double c = 1/10e-15;\n+        double d = 1/b;\n+        double h = d;\n+        double n = 1;\n+        while (Math.abs(d - n) > c*d) {\n+            n++;\n+            double a1 = 2*n - 1 - a;\n+            double aa = n*(a-b);\n+            double d1 = aa*d + a1*h;\n+            double d2 = aa*(d + d1/(2*n)) + a1;\n+            h = d1/d2;\n+            d = d2;\n+        }\n+        result = 1 - h*Math.exp(-x + a*Math.log(x) - Gamma.logGamma(a));\n+    }\n+    return result;\n+}\n+\n+public static void main(String[] args) {\n+    double expected = 0.632120558828558;\n+    double actualP = GammaFunction.regularizedGammaP(0.5, 1.0);\n+    TestUtils.assertEquals(expected, actualP, 10e-15);\n+    System.out.println(\"Test passed successfully.\");\n+}\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}