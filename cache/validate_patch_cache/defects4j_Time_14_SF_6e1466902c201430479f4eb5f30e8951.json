{
    "patch": "        if (FieldUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology)\n                        .set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n\n            if (partial.isSupported(DateTimeFieldType.monthOfYear())) {\n                int year = iChronology.year().get(instant);\n                int month = iChronology.monthOfYear().get(instant);\n                int day = iChronology.dayOfMonth().get(instant);\n                int maxDays = iChronology.dayOfMonth().getMaximumValue(year, month);\n                if (day > maxDays) {\n                    day = maxDays;\n                }\n                return iChronology.get(partial, iChronology.year().set(instant, year),\n                        iChronology.monthOfYear().set(instant, month),\n                        iChronology.dayOfMonth().set(instant, day));",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..13fc3be8 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,25 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n+        if (FieldUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                instant = partial.getFieldType(i).getField(iChronology)\n+                        .set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+\n+            if (partial.isSupported(DateTimeFieldType.monthOfYear())) {\n+                int year = iChronology.year().get(instant);\n+                int month = iChronology.monthOfYear().get(instant);\n+                int day = iChronology.dayOfMonth().get(instant);\n+                int maxDays = iChronology.dayOfMonth().getMaximumValue(year, month);\n+                if (day > maxDays) {\n+                    day = maxDays;\n+                }\n+                return iChronology.get(partial, iChronology.year().set(instant, year),\n+                        iChronology.monthOfYear().set(instant, month),\n+                        iChronology.dayOfMonth().set(instant, day));\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}