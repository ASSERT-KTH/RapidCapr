{
    "patch": "public static Locale toLocale(String str) {\n    if (str == null) {\n        return null;\n    }\n    int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    char ch0 = str.charAt(0);\n    char ch1 = str.charAt(1);\n    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 2) {\n        return new Locale(str, \"\");\n    } else if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    } else {\n        if (len == 3) {\n            return new Locale(str.substring(0, 2));\n        } else {\n            int i = 3;\n            char ch3 = str.charAt(3);\n            if (ch3 == '_') {\n                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n            }\n            i++;\n            while (i < len) {\n                char ch = str.charAt(i);\n                if (ch == '_') {\n                    if (i - 3 == 2) {\n                        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(i + 1));\n                    } else if (i - 3 == 3) {\n                        return new Locale(str.substring(0, 2), str.substring(3, 4), str.substring(i + 1));\n                    } else {\n                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                    }\n                }\n                if (ch < 'A' || ch > 'Z') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                i++;\n            }\n            if (len - 3 == 2) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            } else if (len - 3 == 3) {\n                return new Locale(str.substring(0, 2), str.substring(3, 4), str.substring(5));\n            } else {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..98fe8f40 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -91,40 +91,59 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int len = str.length();\n-        if (len != 2 && len != 5 && len < 7) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        char ch0 = str.charAt(0);\n-        char ch1 = str.charAt(1);\n-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        if (len == 2) {\n-            return new Locale(str, \"\");\n+public static Locale toLocale(String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    int len = str.length();\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    char ch0 = str.charAt(0);\n+    char ch1 = str.charAt(1);\n+    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (len == 2) {\n+        return new Locale(str, \"\");\n+    } else if (str.charAt(2) != '_') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    } else {\n+        if (len == 3) {\n+            return new Locale(str.substring(0, 2));\n         } else {\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n+            int i = 3;\n             char ch3 = str.charAt(3);\n-            char ch4 = str.charAt(4);\n-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            if (ch3 == '_') {\n+                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n             }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            } else {\n-                if (str.charAt(5) != '_') {\n+            i++;\n+            while (i < len) {\n+                char ch = str.charAt(i);\n+                if (ch == '_') {\n+                    if (i - 3 == 2) {\n+                        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(i + 1));\n+                    } else if (i - 3 == 3) {\n+                        return new Locale(str.substring(0, 2), str.substring(3, 4), str.substring(i + 1));\n+                    } else {\n+                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+                    }\n+                }\n+                if (ch < 'A' || ch > 'Z') {\n                     throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                 }\n-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+                i++;\n+            }\n+            if (len - 3 == 2) {\n+                return new Locale(str.substring(0, 2), str.substring(3, 5));\n+            } else if (len - 3 == 3) {\n+                return new Locale(str.substring(0, 2), str.substring(3, 4), str.substring(5));\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n         }\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "junit.framework.AssertionFailedError: Should fail second part not uppercase",
    "test_result": "FAIL"
}