{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n\n    if (!right.isNumber() || Math.floor(right.getDouble()) != right.getDouble()) {\n        // check if index is non-integer\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex >= left.getChildCount() || intIndex < 0) {\n        // check if index is out-of-bounds\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    Node elem = left.removeFirstChild();\n    for (int i = 0; i < intIndex; i++) {\n        elem = left.removeFirstChild();\n\n        if (elem == null || elem.isEmpty()) {\n            // insert default element if index references a nonexistent index\n            elem = NodeUtil.newUndefinedNode();\n        }\n    }\n\n    if (elem == null || elem.isEmpty()) {\n        return n;\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..d9d6f6be 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,48 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n     if (isAssignmentTarget(n)) {\n-      return n;\n+        return n;\n     }\n \n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+    if (!right.isNumber() || Math.floor(right.getDouble()) != right.getDouble()) {\n+        // check if index is non-integer\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n     }\n \n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    if (intIndex >= left.getChildCount() || intIndex < 0) {\n+        // check if index is out-of-bounds\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n+    Node elem = left.removeFirstChild();\n+    for (int i = 0; i < intIndex; i++) {\n+        elem = left.removeFirstChild();\n \n-      current = current.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+        if (elem == null || elem.isEmpty()) {\n+            // insert default element if index references a nonexistent index\n+            elem = NodeUtil.newUndefinedNode();\n+        }\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+    if (elem == null || elem.isEmpty()) {\n+        return n;\n     }\n \n     // Replace the entire GETELEM with the value\n     n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n-  }\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: method newUndefinedNode in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}