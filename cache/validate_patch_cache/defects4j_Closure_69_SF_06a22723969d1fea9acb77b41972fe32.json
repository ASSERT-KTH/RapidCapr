{
    "patch": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTypedWithUnknown(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceFileName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n      if (functionType.isConstructor() || functionType.hasThisType()) {\n        Node parent = n.getParent();\n        if (!NodeUtil.isGet(parent)) {\n          report(t, n, EXPECTED_THIS_TYPE, childType.toString());\n          ensureTypedWithUnknown(t, n);\n          return;\n        }\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTypedWithUnknown(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }\n\n  private void ensureTypedWithUnknown(NodeTraversal t, Node n) {\n    ensureTyped(t, n, JSTypeRegistry.get().getNativeType(JSTypeNative.UNKNOWN_TYPE));\n  }\n\n  private void ensureTyped(NodeTraversal t, Node n, JSType type) {\n    JSType currentType = getJSType(n);\n    if (!type.equals(currentType)) {\n      // create a TypeMismatch warning, which is not an error.\n      t.report(n, TypeValidator.TYPE_MISMATCH_WARNING,\n          \"expected type: \" + type + \", but found: \" + currentType);\n      setDeferredType(n, JSTypeRegistry.get().getNativeType(JSTypeNative.UNKNOWN_TYPE));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..e413a20e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1541,13 +1541,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * scope chain to use in name lookups as well as error reporting.\n    * @param n The node being visited.\n    */\n-  private void visitCall(NodeTraversal t, Node n) {\n+private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n \n     if (!childType.canBeCalled()) {\n       report(t, n, NOT_CALLABLE, childType.toString());\n-      ensureTyped(t, n);\n+      ensureTypedWithUnknown(t, n);\n       return;\n     }\n \n@@ -1559,7 +1559,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n       boolean isExtern = false;\n       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n       if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n+        String sourceName = functionJSDocInfo.getSourceFileName();\n         CompilerInput functionSource = compiler.getInput(sourceName);\n         isExtern = functionSource.isExtern();\n       }\n@@ -1575,13 +1575,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n       }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n-      // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n+      if (functionType.isConstructor() || functionType.hasThisType()) {\n+        Node parent = n.getParent();\n+        if (!NodeUtil.isGet(parent)) {\n+          report(t, n, EXPECTED_THIS_TYPE, childType.toString());\n+          ensureTypedWithUnknown(t, n);\n+          return;\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n     } else {\n-      ensureTyped(t, n);\n+      ensureTypedWithUnknown(t, n);\n     }\n \n     // TODO: Add something to check for calls of RegExp objects, which is not\n@@ -1589,6 +1596,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     // about the non-portability of the call or both.\n   }\n \n+  private void ensureTypedWithUnknown(NodeTraversal t, Node n) {\n+    ensureTyped(t, n, JSTypeRegistry.get().getNativeType(JSTypeNative.UNKNOWN_TYPE));\n+  }\n+\n+  private void ensureTyped(NodeTraversal t, Node n, JSType type) {\n+    JSType currentType = getJSType(n);\n+    if (!type.equals(currentType)) {\n+      // create a TypeMismatch warning, which is not an error.\n+      t.report(n, TypeValidator.TYPE_MISMATCH_WARNING,\n+          \"expected type: \" + type + \", but found: \" + currentType);\n+      setDeferredType(n, JSTypeRegistry.get().getNativeType(JSTypeNative.UNKNOWN_TYPE));\n+\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}