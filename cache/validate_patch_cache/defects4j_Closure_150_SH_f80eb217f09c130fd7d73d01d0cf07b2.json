{
    "patch": "      if (parent != null && parent.getType() == Token.LP) return;\n\n>>> [ INFILL ] <<<\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e1dee41f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,6 +1448,10 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n+      if (parent != null && parent.getType() == Token.LP) return;\n+\n+>>> [ INFILL ] <<<\n+\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}