{
    "patch": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      checkNotNull(scope, \"scope cannot be null\");\n\n      // Skip over the root node, which will always be a SCRIPT node.\n      if (n == scope.getRootNode()) {\n        return;\n      }\n\n      // Handle function call inputs in the argument list in the INDEX scoping phase.\n      if (n.getType() == Token.LP && parent.getType() == Token.CALL) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      // Handle function expression inputs in the argument list in the INDEX scoping phase.\n      if (n.getType() == Token.LP && NodeUtil.isFunctionExpression(parent)) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      // Continue with the actual scoping.\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          // Skip over function expressions for now.\n          if (NodeUtil.isFunctionExpression(n)) {\n            return;\n          }\n          // Skip over named function expressions inside VAR statements.\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          // Define declared functions.\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.NAME:\n          // Define variables.\n          defineVar(n, parent);\n          break;\n        case Token.CATCH:\n          // Define the catch variable.\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          // Define variable declarations.\n          defineVar(n, parent);\n          break;\n      }\n\n      // Handle function declaration inputs in the parameter list once arguments have been\n      // initialized in the BLOCK scoping phase in order to support functions like:\n      // function g(x, y = f(x)) {}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..49c10902 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,58 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      checkNotNull(scope, \"scope cannot be null\");\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+      // Skip over the root node, which will always be a SCRIPT node.\n+      if (n == scope.getRootNode()) {\n+        return;\n+      }\n+\n+      // Handle function call inputs in the argument list in the INDEX scoping phase.\n+      if (n.getType() == Token.LP && parent.getType() == Token.CALL) {\n         handleFunctionInputs(parent);\n         return;\n       }\n \n-      attachLiteralTypes(n);\n+      // Handle function expression inputs in the argument list in the INDEX scoping phase.\n+      if (n.getType() == Token.LP && NodeUtil.isFunctionExpression(parent)) {\n+        handleFunctionInputs(parent);\n+        return;\n+      }\n+\n+      // Continue with the actual scoping.\n       switch (n.getType()) {\n         case Token.FUNCTION:\n+          // Skip over function expressions for now.\n+          if (NodeUtil.isFunctionExpression(n)) {\n+            return;\n+          }\n+          // Skip over named function expressions inside VAR statements.\n           if (parent.getType() == Token.NAME) {\n             return;\n           }\n+          // Define declared functions.\n           defineDeclaredFunction(n, parent);\n           break;\n+        case Token.NAME:\n+          // Define variables.\n+          defineVar(n, parent);\n+          break;\n         case Token.CATCH:\n+          // Define the catch variable.\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n+          // Define variable declarations.\n           defineVar(n, parent);\n           break;\n       }\n-    }\n+\n+      // Handle function declaration inputs in the parameter list once arguments have been\n+      // initialized in the BLOCK scoping phase in order to support functions like:\n+      // function g(x, y = f(x)) {}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}