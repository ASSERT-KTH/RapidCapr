{
    "patch": "public String fixForLoop(String input) {\n    String patternString = \"for\\\\s*\\\\(([^;]*);([^;]*);([^)]*)\\\\)\";\n    Pattern pattern = Pattern.compile(patternString);\n    Matcher matcher = pattern.matcher(input);\n    StringBuffer sb = new StringBuffer();\n    while (matcher.find()) {\n        String newForStatement = \"for(\";\n        String[] loopParams = {matcher.group(1), matcher.group(2), matcher.group(3)};\n        for (int i = 0; i < loopParams.length; i++) {\n            if (!loopParams[i].contains(\"in\")) {\n                newForStatement += loopParams[i] + \";\";\n            } else {\n                String[] inParams = loopParams[i].split(\"\\\\s+in\\\\s+\");\n                if (inParams[1].charAt(0) != '[') {\n                    newForStatement += loopParams[i] + \";\";\n                } else {\n                    newForStatement += inParams[0] + \".length==0?false:\";\n                    newForStatement += inParams[1] + \".indexOf(\" + inParams[0] + \")!=-1;\";\n                }\n            }\n        }\n        newForStatement += \")\";\n\n        matcher.appendReplacement(sb, newForStatement);\n    }\n    matcher.appendTail(sb);\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..b1660acb 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,34 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixForLoop(String input) {\n+    String patternString = \"for\\\\s*\\\\(([^;]*);([^;]*);([^)]*)\\\\)\";\n+    Pattern pattern = Pattern.compile(patternString);\n+    Matcher matcher = pattern.matcher(input);\n+    StringBuffer sb = new StringBuffer();\n+    while (matcher.find()) {\n+        String newForStatement = \"for(\";\n+        String[] loopParams = {matcher.group(1), matcher.group(2), matcher.group(3)};\n+        for (int i = 0; i < loopParams.length; i++) {\n+            if (!loopParams[i].contains(\"in\")) {\n+                newForStatement += loopParams[i] + \";\";\n+            } else {\n+                String[] inParams = loopParams[i].split(\"\\\\s+in\\\\s+\");\n+                if (inParams[1].charAt(0) != '[') {\n+                    newForStatement += loopParams[i] + \";\";\n+                } else {\n+                    newForStatement += inParams[0] + \".length==0?false:\";\n+                    newForStatement += inParams[1] + \".indexOf(\" + inParams[0] + \")!=-1;\";\n+                }\n+            }\n+        }\n+        newForStatement += \")\";\n+\n+        matcher.appendReplacement(sb, newForStatement);\n+    }\n+    matcher.appendTail(sb);\n+    return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}