{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (parent.getLastChild().getType() == Token.OBJECTLIT) {\n        Node obj = parent.getLastChild();\n        if (parent.getFirstChild().getType() == Token.GETPROP &&\n            parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        for (Node key = obj.getFirstChild(); key != null; key = key.getNext()) {\n          if (key.getType() == Token.STRING &&\n              key.getString().equals(\"constructor\")) {\n            Node value = key.getFirstChild();\n            if (value != null && value.isFunction()) {\n              return false;\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..12b23ff6 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,23 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getLastChild().getType() == Token.OBJECTLIT) {\n+        Node obj = parent.getLastChild();\n+        if (parent.getFirstChild().getType() == Token.GETPROP &&\n+            parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        for (Node key = obj.getFirstChild(); key != null; key = key.getNext()) {\n+          if (key.getType() == Token.STRING &&\n+              key.getString().equals(\"constructor\")) {\n+            Node value = key.getFirstChild();\n+            if (value != null && value.isFunction()) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}