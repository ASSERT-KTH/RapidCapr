{
    "patch": "public boolean getprop(String key) {\n    boolean result = false;\n    String[] commands = {\"getprop\", key};\n    try {\n        Process process = new ProcessBuilder()\n                .command(commands)\n                .redirectErrorStream(true)\n                .start();\n        BufferedReader reader = new BufferedReader(\n                new InputStreamReader(process.getInputStream()));\n        String line;\n        StringBuilder builder = new StringBuilder();\n        while ((line = reader.readLine()) != null) {\n            builder.append(line);\n        }\n        String prop = builder.toString();\n        if (!prop.isEmpty()) {\n            result = true;\n        }\n        reader.close();\n        process.destroy();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2f64f27d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public boolean getprop(String key) {\n+    boolean result = false;\n+    String[] commands = {\"getprop\", key};\n+    try {\n+        Process process = new ProcessBuilder()\n+                .command(commands)\n+                .redirectErrorStream(true)\n+                .start();\n+        BufferedReader reader = new BufferedReader(\n+                new InputStreamReader(process.getInputStream()));\n+        String line;\n+        StringBuilder builder = new StringBuilder();\n+        while ((line = reader.readLine()) != null) {\n+            builder.append(line);\n+        }\n+        String prop = builder.toString();\n+        if (!prop.isEmpty()) {\n+            result = true;\n+        }\n+        reader.close();\n+        process.destroy();\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+    return result;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}