{
    "patch": " private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType instanceType = null;\n\n    // Check if constructor type is non-null and constructor function\n    if (constructorType != null && constructorType.isFunctionType()) {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct != null && ct.isConstructor()) {\n        instanceType = ct.getInstanceType();\n      } else {\n        // Else set to unknown type\n        instanceType = getNativeType(UNKNOWN_TYPE);\n      }\n    } else {\n      // the constructor type is either null, not a constructor function, or an unknown type\n      instanceType = getNativeType(UNKNOWN_TYPE);\n    }\n    n.setJSType(instanceType);\n\n    // Check if the constructor has arguments and traverse them\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..3ef7a548 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,30 +1032,28 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+ private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n+    JSType instanceType = null;\n+\n+    // Check if constructor type is non-null and constructor function\n+    if (constructorType != null && constructorType.isFunctionType()) {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct != null && ct.isConstructor()) {\n+        instanceType = ct.getInstanceType();\n       } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+        // Else set to unknown type\n+        instanceType = getNativeType(UNKNOWN_TYPE);\n       }\n+    } else {\n+      // the constructor type is either null, not a constructor function, or an unknown type\n+      instanceType = getNativeType(UNKNOWN_TYPE);\n     }\n-    n.setJSType(type);\n+    n.setJSType(instanceType);\n+\n+    // Check if the constructor has arguments and traverse them\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[foo: (number|undefined)]}> but was:<{[]}>",
    "test_result": "FAIL"
}