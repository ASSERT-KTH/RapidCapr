{
    "patch": "CodingConvention convention = compiler.getCodingConvention();\nNode callNode = reference.getParent();\nNode callTarget = callNode.getFirstChild();\nString className = convention.getSingletonGetterClassName(callTarget);\nif (className != null) {\n  return false;\n} else if (value.isFunction()) {\n  className = convention.getSingletonGetterClassName(callNode);\n  if (className != null) {\n    return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..811a1bca 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,18 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+CodingConvention convention = compiler.getCodingConvention();\n+Node callNode = reference.getParent();\n+Node callTarget = callNode.getFirstChild();\n+String className = convention.getSingletonGetterClassName(callTarget);\n+if (className != null) {\n+  return false;\n+} else if (value.isFunction()) {\n+  className = convention.getSingletonGetterClassName(callNode);\n+  if (className != null) {\n+    return false;\n+  }\n+}\n         }\n       }\n ",
    "result_reason": "error: variable convention is already defined in method canInline(Reference,Reference,Reference)",
    "test_result": "ERROR"
}