{
    "patch": "public String getprop(String propName) {\n    String result = null;\n\n    try {\n        Properties props = new Properties();\n        InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"config.properties\");\n\n        if (inputStream == null) {\n            fail(\"could not load config.properties\");\n        }\n\n        props.load(inputStream);\n        result = props.getProperty(propName);\n        if (result == null)\n            throw new Exception(String.format(\"%s not found in configuration file\", propName));\n        inputStream.close();\n    } catch (Exception e) {\n        fail(e.getMessage());\n    }\n  \n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..19965058 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String propName) {\n+    String result = null;\n+\n+    try {\n+        Properties props = new Properties();\n+        InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"config.properties\");\n+\n+        if (inputStream == null) {\n+            fail(\"could not load config.properties\");\n+        }\n+\n+        props.load(inputStream);\n+        result = props.getProperty(propName);\n+        if (result == null)\n+            throw new Exception(String.format(\"%s not found in configuration file\", propName));\n+        inputStream.close();\n+    } catch (Exception e) {\n+        fail(e.getMessage());\n+    }\n+  \n+    return result;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}