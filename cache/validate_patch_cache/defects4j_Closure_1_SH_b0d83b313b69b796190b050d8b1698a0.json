{
    "patch": "    Node function = fnScope.getRootNode();\n    \n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    Set<Var> referencedVars = new HashSet<>(referenced);\n    for (Node paramNode : argList.children()) {\n      Var var = fnScope.getVar(paramNode.getString());\n      if (!referencedVars.contains(var)) {\n        NodeUtil.removeChild(argList, paramNode);\n        compiler.reportCodeChange();\n      } else {\n        referencedVars.remove(var);\n      }\n    }\n\n    if (modifyCallSites && callSiteOptimizer.canModifyCallers(fnScope.getRootNode())) {\n      callSiteOptimizer.optimize(fnScope, referencedVars);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bc27bdae 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    \n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    Set<Var> referencedVars = new HashSet<>(referenced);\n+    for (Node paramNode : argList.children()) {\n+      Var var = fnScope.getVar(paramNode.getString());\n+      if (!referencedVars.contains(var)) {\n+        NodeUtil.removeChild(argList, paramNode);\n+        compiler.reportCodeChange();\n+      } else {\n+        referencedVars.remove(var);\n+      }\n+    }\n+\n+    if (modifyCallSites && callSiteOptimizer.canModifyCallers(fnScope.getRootNode())) {\n+      callSiteOptimizer.optimize(fnScope, referencedVars);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}