{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // check if we're near a DST boundary\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    boolean isDstBoundary = (nextLocal <= instantAdjusted || nextAdjusted <= instantLocal - offsetAdjusted);\n    if (isDstBoundary) {\n        // we're near a DST boundary (gap or overlap)\n        int offsetBeforeNextLocal = getOffset(nextLocal - 1);\n        int offsetBeforeNextAdjusted = getOffset(nextAdjusted - 1);\n        if (offsetAdjusted == offsetBeforeNextAdjusted) {\n            // we're in a gap, return the offset just before the transition in the adjusted timezone\n            return offsetBeforeNextAdjusted;\n        } else if (offsetLocal == offsetBeforeNextLocal) {\n            // we're in an overlap, return the bigger of the two offsets\n            return Math.max(offsetLocal, offsetAdjusted);\n        } else if (Math.abs(nextLocal - instantLocal) <= DateTimeConstants.MILLIS_PER_DAY) {\n            // when the difference between the local time and next local transition is within a day\n            if (nextLocal > instantAdjusted && offsetLocal > offsetAdjusted) {\n                // we're in a gap, return the offset just before the local transition\n                return getOffset(nextLocal - 1);\n            } else if (nextAdjusted > instantLocal && offsetLocal < offsetAdjusted) {\n                // we're in an overlap, return the adjusted offset\n                return offsetAdjusted;\n            }\n        }\n    }\n    // we're not near a DST boundary, return the adjusted offset\n    return offsetAdjusted;\n}\n// no DST boundary, return the adjusted offset\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b3fe2fb1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,37 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // check if we're near a DST boundary\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    boolean isDstBoundary = (nextLocal <= instantAdjusted || nextAdjusted <= instantLocal - offsetAdjusted);\n+    if (isDstBoundary) {\n+        // we're near a DST boundary (gap or overlap)\n+        int offsetBeforeNextLocal = getOffset(nextLocal - 1);\n+        int offsetBeforeNextAdjusted = getOffset(nextAdjusted - 1);\n+        if (offsetAdjusted == offsetBeforeNextAdjusted) {\n+            // we're in a gap, return the offset just before the transition in the adjusted timezone\n+            return offsetBeforeNextAdjusted;\n+        } else if (offsetLocal == offsetBeforeNextLocal) {\n+            // we're in an overlap, return the bigger of the two offsets\n+            return Math.max(offsetLocal, offsetAdjusted);\n+        } else if (Math.abs(nextLocal - instantLocal) <= DateTimeConstants.MILLIS_PER_DAY) {\n+            // when the difference between the local time and next local transition is within a day\n+            if (nextLocal > instantAdjusted && offsetLocal > offsetAdjusted) {\n+                // we're in a gap, return the offset just before the local transition\n+                return getOffset(nextLocal - 1);\n+            } else if (nextAdjusted > instantLocal && offsetLocal < offsetAdjusted) {\n+                // we're in an overlap, return the adjusted offset\n+                return offsetAdjusted;\n+            }\n+        }\n+    }\n+    // we're not near a DST boundary, return the adjusted offset\n+    return offsetAdjusted;\n+}\n+// no DST boundary, return the adjusted offset\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}