{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    \n    int nextLocalOffset = getOffset(nextLocal);\n    int nextAdjustedOffset = getOffset(nextAdjusted);\n    \n    if (nextLocalOffset == nextAdjustedOffset) {\n        return offsetAdjusted;\n    } else if (nextLocalOffset > nextAdjustedOffset) {\n        return offsetLocal;\n    } else if (nextLocal == instantAdjusted && nextAdjusted == instantLocal - nextLocalOffset) {\n        return offsetAdjusted;\n    } else if (nextLocal == instantAdjusted - offsetLocal && nextAdjusted == instantLocal) {\n        return offsetLocal;\n    } else {\n        return offsetAdjusted;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..663afa10 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    \n+    int nextLocalOffset = getOffset(nextLocal);\n+    int nextAdjustedOffset = getOffset(nextAdjusted);\n+    \n+    if (nextLocalOffset == nextAdjustedOffset) {\n+        return offsetAdjusted;\n+    } else if (nextLocalOffset > nextAdjustedOffset) {\n+        return offsetLocal;\n+    } else if (nextLocal == instantAdjusted && nextAdjusted == instantLocal - nextLocalOffset) {\n+        return offsetAdjusted;\n+    } else if (nextLocal == instantAdjusted - offsetLocal && nextAdjusted == instantLocal) {\n+        return offsetLocal;\n+    } else {\n+        return offsetAdjusted;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}