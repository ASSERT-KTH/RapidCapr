{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n        final int maxIter = m.getColumnDimension() * 100;\n        final double relTol = 1e-10;\n        final double absTol = 1e-10;\n\n        final LanczosTransformer transformer = new LanczosTransformer();\n        transformer.setMaximumIterationCount(maxIter);\n        transformer.setRelativeEigenvalueTolerance(relTol);\n        transformer.setAbsoluteEigenvalueTolerance(absTol);\n\n        final RealMatrix eigenVectors = transformer.transform(m);\n        final RealMatrix eigenValues = transformer.getRealEigenvalues();\n        final RealMatrix sqrtEigenValues = MatrixUtils.createRealDiagonalMatrix(eigenValues.getColumn(0).stream()\n                .map(d -> d >= 0 ? Math.sqrt(d) : 0).collect(Collectors.toList()).stream().mapToDouble(d -> d).toArray());\n\n        return eigenVectors.multiply(sqrtEigenValues).multiply(eigenVectors.transpose());\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c51350d8b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+        final int maxIter = m.getColumnDimension() * 100;\n+        final double relTol = 1e-10;\n+        final double absTol = 1e-10;\n+\n+        final LanczosTransformer transformer = new LanczosTransformer();\n+        transformer.setMaximumIterationCount(maxIter);\n+        transformer.setRelativeEigenvalueTolerance(relTol);\n+        transformer.setAbsoluteEigenvalueTolerance(absTol);\n+\n+        final RealMatrix eigenVectors = transformer.transform(m);\n+        final RealMatrix eigenValues = transformer.getRealEigenvalues();\n+        final RealMatrix sqrtEigenValues = MatrixUtils.createRealDiagonalMatrix(eigenValues.getColumn(0).stream()\n+                .map(d -> d >= 0 ? Math.sqrt(d) : 0).collect(Collectors.toList()).stream().mapToDouble(d -> d).toArray());\n+\n+        return eigenVectors.multiply(sqrtEigenValues).multiply(eigenVectors.transpose());\n+\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}