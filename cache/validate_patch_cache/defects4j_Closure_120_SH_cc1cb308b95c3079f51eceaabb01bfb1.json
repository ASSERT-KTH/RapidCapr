{
    "patch": "hasFunctionTryBlock();\n\n...\n\n/**\n * @return Whether the function body contains a try-catch block\n */\nprivate boolean hasFunctionTryBlock() {\n  // Depth first search\n  Deque<BasicBlock> stack = new LinkedList<>();\n  stack.push(controlFlowGraph.getEntry());\n\n  while (!stack.isEmpty()) {\n    BasicBlock block = stack.pop();\n    Node end = block.end().getLastChild();\n    if (end instanceof JsTry) {\n      return true;\n    }\n    stack.addAll(controlFlowGraph.getSuccessors(block));\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..a9718b50 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,29 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+hasFunctionTryBlock();\n+\n+...\n+\n+/**\n+ * @return Whether the function body contains a try-catch block\n+ */\n+private boolean hasFunctionTryBlock() {\n+  // Depth first search\n+  Deque<BasicBlock> stack = new LinkedList<>();\n+  stack.push(controlFlowGraph.getEntry());\n+\n+  while (!stack.isEmpty()) {\n+    BasicBlock block = stack.pop();\n+    Node end = block.end().getLastChild();\n+    if (end instanceof JsTry) {\n+      return true;\n+    }\n+    stack.addAll(controlFlowGraph.getSuccessors(block));\n+  }\n+\n+  return false;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}