{
    "patch": "private static boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node child = n.getFirstChild();\n    if (child.getType() == Token.EXPR_RESULT) {\n      Node grandchild = child.getFirstChild();\n      if (grandchild.getType() == Token.IF) {\n        Node condition = grandchild.getFirstChild();\n        if (condition.getType() == Token.NOT) {\n          Node condExpr = condition.getFirstChild();\n          if (condExpr.getType() == Token.NAME) {\n            Node ifStmt = condition.getNext();\n            if (ifStmt.getType() == Token.BLOCK && ifStmt.getChildCount() == 1) {\n              Node ifChild = ifStmt.getFirstChild();\n              if (ifChild.getType() == Token.EXPR_RESULT) {\n                Node expr = ifChild.getFirstChild();\n                if (expr.getType() == Token.OR) {\n                  Node lhs = expr.getFirstChild();\n                  Node rhs = expr.getLastChild();\n                  if (lhs.getType() == Token.NAME && rhs.getType() == Token.CALL) {\n                    Node functionName = rhs.getFirstChild();\n                    if (functionName.getType() == Token.NAME && !functionName.getString().startsWith(\"on\")) {\n                      if (rhs.getChildCount() == 1) {\n                        return true;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } else {\n        return NodeUtil.isExpressionNode(grandchild);\n      }\n    } else if (child.getType() == Token.IF) {\n      Node condition = child.getFirstChild();\n      if (condition.getType() == Token.NOT) {\n        Node condExpr = condition.getFirstChild();\n        if (condExpr.getType() == Token.NAME) {\n          Node ifStmt = condition.getNext();\n          if (ifStmt.getType() == Token.EXPR_RESULT) {\n            Node expr = ifStmt.getFirstChild();\n            if (expr.getType() == Token.OR) {\n              Node lhs = expr.getFirstChild();\n              Node rhs = expr.getLastChild();\n              if (lhs.getType() == Token.NAME && rhs.getType() == Token.CALL) {\n                Node functionName = rhs.getFirstChild();\n                if (functionName.getType() == Token.NAME && !functionName.getString().startsWith(\"on\")) {\n                  if (rhs.getChildCount() == 1) {\n                    return true;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } else {\n      return NodeUtil.isExpressionNode(child);\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..04f5eab1 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,69 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private static boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node child = n.getFirstChild();\n+    if (child.getType() == Token.EXPR_RESULT) {\n+      Node grandchild = child.getFirstChild();\n+      if (grandchild.getType() == Token.IF) {\n+        Node condition = grandchild.getFirstChild();\n+        if (condition.getType() == Token.NOT) {\n+          Node condExpr = condition.getFirstChild();\n+          if (condExpr.getType() == Token.NAME) {\n+            Node ifStmt = condition.getNext();\n+            if (ifStmt.getType() == Token.BLOCK && ifStmt.getChildCount() == 1) {\n+              Node ifChild = ifStmt.getFirstChild();\n+              if (ifChild.getType() == Token.EXPR_RESULT) {\n+                Node expr = ifChild.getFirstChild();\n+                if (expr.getType() == Token.OR) {\n+                  Node lhs = expr.getFirstChild();\n+                  Node rhs = expr.getLastChild();\n+                  if (lhs.getType() == Token.NAME && rhs.getType() == Token.CALL) {\n+                    Node functionName = rhs.getFirstChild();\n+                    if (functionName.getType() == Token.NAME && !functionName.getString().startsWith(\"on\")) {\n+                      if (rhs.getChildCount() == 1) {\n+                        return true;\n+                      }\n+                    }\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        }\n+      } else {\n+        return NodeUtil.isExpressionNode(grandchild);\n+      }\n+    } else if (child.getType() == Token.IF) {\n+      Node condition = child.getFirstChild();\n+      if (condition.getType() == Token.NOT) {\n+        Node condExpr = condition.getFirstChild();\n+        if (condExpr.getType() == Token.NAME) {\n+          Node ifStmt = condition.getNext();\n+          if (ifStmt.getType() == Token.EXPR_RESULT) {\n+            Node expr = ifStmt.getFirstChild();\n+            if (expr.getType() == Token.OR) {\n+              Node lhs = expr.getFirstChild();\n+              Node rhs = expr.getLastChild();\n+              if (lhs.getType() == Token.NAME && rhs.getType() == Token.CALL) {\n+                Node functionName = rhs.getFirstChild();\n+                if (functionName.getType() == Token.NAME && !functionName.getString().startsWith(\"on\")) {\n+                  if (rhs.getChildCount() == 1) {\n+                    return true;\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        }\n       }\n+    } else {\n+      return NodeUtil.isExpressionNode(child);\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}