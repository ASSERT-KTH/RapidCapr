{
    "patch": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        if (mTimeZoneForced) {\n            calendar = (Calendar) calendar.clone();\n            calendar.setTimeZone(mTimeZone);\n        }\n        buf.setLength(0);\n        applyRules(calendar, buf);\n        if (mTimeZoneForced) {\n            formatTimeZone(calendar, buf);\n        } else {\n            TimeZone tz = calendar.getTimeZone();\n            if (tz.getRawOffset() == 0) {\n                buf.append('Z');\n            } else {\n                formatTimeZone(calendar, buf);\n            }\n        }\n        return buf;\n    }\n    \n    private void formatTimeZone(Calendar calendar, StringBuffer buffer) {\n        int offsetInMillis = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);\n        int offsetInMinutes = offsetInMillis / (60 * 1000);\n        int hours = offsetInMinutes / 60;\n        int minutes = offsetInMinutes % 60;\n        if (hours == 0 && minutes == 0) {\n            buffer.append('Z');\n            return;\n        }\n        if (offsetInMillis >= 0) {\n            buffer.append('+');\n        } else {\n            buffer.append('-');\n            hours = -hours;\n            minutes = -minutes;\n        }\n        if (hours < 10) {\n            buffer.append('0');\n        }\n        buffer.append(hours);\n        buffer.append(':');\n        if (minutes < 10) {\n            buffer.append('0');\n        }\n        buffer.append(minutes);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..3a1819b9 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -872,7 +872,46 @@ public class FastDateFormat extends Format {\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }\n-        return applyRules(calendar, buf);\n+        buf.setLength(0);\n+        applyRules(calendar, buf);\n+        if (mTimeZoneForced) {\n+            formatTimeZone(calendar, buf);\n+        } else {\n+            TimeZone tz = calendar.getTimeZone();\n+            if (tz.getRawOffset() == 0) {\n+                buf.append('Z');\n+            } else {\n+                formatTimeZone(calendar, buf);\n+            }\n+        }\n+        return buf;\n+    }\n+    \n+    private void formatTimeZone(Calendar calendar, StringBuffer buffer) {\n+        int offsetInMillis = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);\n+        int offsetInMinutes = offsetInMillis / (60 * 1000);\n+        int hours = offsetInMinutes / 60;\n+        int minutes = offsetInMinutes % 60;\n+        if (hours == 0 && minutes == 0) {\n+            buffer.append('Z');\n+            return;\n+        }\n+        if (offsetInMillis >= 0) {\n+            buffer.append('+');\n+        } else {\n+            buffer.append('-');\n+            hours = -hours;\n+            minutes = -minutes;\n+        }\n+        if (hours < 10) {\n+            buffer.append('0');\n+        }\n+        buffer.append(hours);\n+        buffer.append(':');\n+        if (minutes < 10) {\n+            buffer.append('0');\n+        }\n+        buffer.append(minutes);\n     }\n \n     /**",
    "result_reason": "junit.framework.ComparisonFailure: expected:<T10:11:12[]> but was:<T10:11:12[-03:00]>",
    "test_result": "FAIL"
}