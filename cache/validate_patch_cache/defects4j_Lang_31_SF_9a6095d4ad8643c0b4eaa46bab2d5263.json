{
    "patch": "public static boolean containsAny(char[] str, char[] searchChars) {\n    if (str == null || searchChars == null) {\n        return false;\n    }\n    \n    int strLength = str.length;\n    int searchCharsLength = searchChars.length;\n    \n    // Loop through every character in the str array\n    for (int i = 0; i < strLength; i++) {\n        char ch = str[i];\n        // Check whether the character is a high surrogate\n        if (Character.isHighSurrogate(ch)) {\n            // If it is, check whether it has a matching low surrogate\n            if (i < strLength - 1 && Character.isLowSurrogate(str[i + 1])) {\n                // Combine the two surrogates into a supplementary character\n                ch = Character.toCodePoint(ch, str[i + 1]);\n                i++;\n            } else {\n                // If there is no matching low surrogate, skip the high surrogate\n                continue;\n            }\n        }\n        // Loop through every character in the searchChars array\n        for (int j = 0; j < searchCharsLength; j++) {\n            char searchChar = searchChars[j];\n            // Check whether the search character is a high surrogate\n            if (Character.isHighSurrogate(searchChar)) {\n                // If it is, check whether it has a matching low surrogate\n                if (j < searchCharsLength - 1 && Character.isLowSurrogate(searchChars[j + 1])) {\n                    // Combine the two surrogates into a supplementary character\n                    searchChar = Character.toCodePoint(searchChar, searchChars[j + 1]);\n                    j++;\n                } else {\n                    // If there is no matching low surrogate, skip the high surrogate\n                    continue;\n                }\n            }\n            // Check whether the character and search character match\n            if (ch == searchChar) {\n                return true;\n            }\n        }\n    }\n    \n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..20c0203b 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,53 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(char[] str, char[] searchChars) {\n+    if (str == null || searchChars == null) {\n+        return false;\n+    }\n+    \n+    int strLength = str.length;\n+    int searchCharsLength = searchChars.length;\n+    \n+    // Loop through every character in the str array\n+    for (int i = 0; i < strLength; i++) {\n+        char ch = str[i];\n+        // Check whether the character is a high surrogate\n+        if (Character.isHighSurrogate(ch)) {\n+            // If it is, check whether it has a matching low surrogate\n+            if (i < strLength - 1 && Character.isLowSurrogate(str[i + 1])) {\n+                // Combine the two surrogates into a supplementary character\n+                ch = Character.toCodePoint(ch, str[i + 1]);\n+                i++;\n+            } else {\n+                // If there is no matching low surrogate, skip the high surrogate\n+                continue;\n+            }\n+        }\n+        // Loop through every character in the searchChars array\n+        for (int j = 0; j < searchCharsLength; j++) {\n+            char searchChar = searchChars[j];\n+            // Check whether the search character is a high surrogate\n+            if (Character.isHighSurrogate(searchChar)) {\n+                // If it is, check whether it has a matching low surrogate\n+                if (j < searchCharsLength - 1 && Character.isLowSurrogate(searchChars[j + 1])) {\n+                    // Combine the two surrogates into a supplementary character\n+                    searchChar = Character.toCodePoint(searchChar, searchChars[j + 1]);\n+                    j++;\n+                } else {\n+                    // If there is no matching low surrogate, skip the high surrogate\n+                    continue;\n+                }\n+            }\n+            // Check whether the character and search character match\n+            if (ch == searchChar) {\n+                return true;\n+            }\n+        }\n+    }\n+    \n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}