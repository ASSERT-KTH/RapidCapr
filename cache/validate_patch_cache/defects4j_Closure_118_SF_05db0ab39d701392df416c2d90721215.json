{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n    for (Node child = n.getFirstChild();\n         child != null;\n         child = child.getNext()) {\n        // Maybe STRING, GET, SET\n        >>> T type = getJSType(child); //get the JSType of the child Node <<<\n        >>> String name = child.getString(); // get the property name <<<\n        >>> ObjectType objectOwnProps = type.toMaybeObjectType(); //convert T type to ObjectType <<<\n        >>> if (objectOwnProps == null) continue; <<<\n        >>> Property prop = objectOwnProps.getOwnProp(name); //get the own property with name <<<\n    \n        // We should never see a mix of numbers and strings.\n        //String name = child.getString();\n        //T type = typeSystem.getType(getScope(), n, name);\n\n        //Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n            if (propertiesToErrorFor.containsKey(name)) {\n                compiler.report(JSError.make(\n                        t.getSourceName(), child, propertiesToErrorFor.get(name),\n                        Warnings.INVALIDATION, name,\n                        (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..70333f09 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,30 +487,33 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+    for (Node child = n.getFirstChild();\n+         child != null;\n+         child = child.getNext()) {\n         // Maybe STRING, GET, SET\n-\n+        >>> T type = getJSType(child); //get the JSType of the child Node <<<\n+        >>> String name = child.getString(); // get the property name <<<\n+        >>> ObjectType objectOwnProps = type.toMaybeObjectType(); //convert T type to ObjectType <<<\n+        >>> if (objectOwnProps == null) continue; <<<\n+        >>> Property prop = objectOwnProps.getOwnProp(name); //get the own property with name <<<\n+    \n         // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n+        //String name = child.getString();\n+        //T type = typeSystem.getType(getScope(), n, name);\n \n-        Property prop = getProperty(name);\n+        //Property prop = getProperty(name);\n         if (!prop.scheduleRenaming(child,\n                                    processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n+            if (propertiesToErrorFor.containsKey(name)) {\n+                compiler.report(JSError.make(\n+                        t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                        Warnings.INVALIDATION, name,\n+                        (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+            }\n         }\n-      }\n     }\n+}\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}