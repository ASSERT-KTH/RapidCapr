{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        boolean isLeapYear = iChronology.year().isLeap(values[0]);\n        int year = iChronology.year().get(instant);\n        int month = iChronology.monthOfYear().get(instant);\n        int day = iChronology.dayOfMonth().get(instant);\n        int hours = iChronology.hourOfDay().get(instant);\n        int minutes = iChronology.minuteOfHour().get(instant);\n        int seconds = iChronology.secondOfMinute().get(instant);\n        int millis = iChronology.millisOfSecond().get(instant);\n        int currentMonthMax = iChronology.dayOfMonth().getMaximumValue(iChronology.getDateTimeMillis(year, month, 1, hours, minutes, seconds, millis));\n        int totalMonths = year * 12 + month + valueToAdd; // Calculate total months to avoid wrapping issues\n        year = totalMonths / 12;\n        month = totalMonths % 12;\n        if (month < 0) {\n            month += 12;\n            year--;\n        }\n        month++;\n        if (isLeapYear && month == 2 && day == 29 && currentMonthMax == 29) {\n            // Special case for February 29 in leap years\n            return new int[]{year, month, day, hours, minutes, seconds, millis};\n        } else {\n            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.getDateTimeMillis(year, month, 1, hours, minutes, seconds, millis));\n            if (day > maxDayOfMonth) {\n                day = maxDayOfMonth;\n            }\n            return new int[]{year, month, day, hours, minutes, seconds, millis};\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..342d32dc 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,46 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+        boolean isLeapYear = iChronology.year().isLeap(values[0]);\n+        int year = iChronology.year().get(instant);\n+        int month = iChronology.monthOfYear().get(instant);\n+        int day = iChronology.dayOfMonth().get(instant);\n+        int hours = iChronology.hourOfDay().get(instant);\n+        int minutes = iChronology.minuteOfHour().get(instant);\n+        int seconds = iChronology.secondOfMinute().get(instant);\n+        int millis = iChronology.millisOfSecond().get(instant);\n+        int currentMonthMax = iChronology.dayOfMonth().getMaximumValue(iChronology.getDateTimeMillis(year, month, 1, hours, minutes, seconds, millis));\n+        int totalMonths = year * 12 + month + valueToAdd; // Calculate total months to avoid wrapping issues\n+        year = totalMonths / 12;\n+        month = totalMonths % 12;\n+        if (month < 0) {\n+            month += 12;\n+            year--;\n+        }\n+        month++;\n+        if (isLeapYear && month == 2 && day == 29 && currentMonthMax == 29) {\n+            // Special case for February 29 in leap years\n+            return new int[]{year, month, day, hours, minutes, seconds, millis};\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.getDateTimeMillis(year, month, 1, hours, minutes, seconds, millis));\n+            if (day > maxDayOfMonth) {\n+                day = maxDayOfMonth;\n+            }\n+            return new int[]{year, month, day, hours, minutes, seconds, millis};\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]",
    "test_result": "FAIL"
}