{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  if (!right.isNumber()) {\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index || intIndex < 0) {\n    Node errorNode = intIndex != index ? right : left;\n    error(INVALID_GETELEM_INDEX_ERROR, errorNode);\n    return n;\n  }\n\n  Node elem = null;\n  if (left.isArrayLit()) {\n    // Get the indexed element from array literal\n    if (intIndex < left.getChildCount()) {\n      elem = left.getChildAtIndex(intIndex).detachFromParent();\n    } else {\n      // Out of bounds error\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n  } else if (NodeUtil.isImmutableValue(left) && intIndex == 0) {\n    // Strings and certain constant expressions can be indexed directly.\n    // This should be safe when index == 0, because it won't change the string.\n    if (left.isString()) {\n      elem = Node.newString(left.getString().substring(intIndex, intIndex+1));\n    } else if (left.isNumber()) {\n      elem = left.cloneTree();\n    } else if (left.isBoolean()) {\n      elem = left.cloneTree();\n    } else if (left.isNull()) {\n      // We should never get here since null is not immutable.\n      throw new IllegalStateException(\"Unexpected null node found\");\n    } else if (left.isTemplateLit()) {\n      elem = Node.newString(Character.toString(0));\n    }\n  }\n\n  if (elem == null) {\n    return n;\n  }\n\n  Node parent = n.getParent();\n  parent.replaceChild(n, elem);\n  reportCodeChange();\n  return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..130f7090 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,58 +1419,56 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n-\n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n-\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  if (!right.isNumber()) {\n+    return n;\n+  }\n \n-      current = current.getNext();\n-    }\n+  double index = right.getDouble();\n+  int intIndex = (int) index;\n+  if (intIndex != index || intIndex < 0) {\n+    Node errorNode = intIndex != index ? right : left;\n+    error(INVALID_GETELEM_INDEX_ERROR, errorNode);\n+    return n;\n+  }\n \n-    if (elem == null) {\n+  Node elem = null;\n+  if (left.isArrayLit()) {\n+    // Get the indexed element from array literal\n+    if (intIndex < left.getChildCount()) {\n+      elem = left.getChildAtIndex(intIndex).detachFromParent();\n+    } else {\n+      // Out of bounds error\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n-\n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+  } else if (NodeUtil.isImmutableValue(left) && intIndex == 0) {\n+    // Strings and certain constant expressions can be indexed directly.\n+    // This should be safe when index == 0, because it won't change the string.\n+    if (left.isString()) {\n+      elem = Node.newString(left.getString().substring(intIndex, intIndex+1));\n+    } else if (left.isNumber()) {\n+      elem = left.cloneTree();\n+    } else if (left.isBoolean()) {\n+      elem = left.cloneTree();\n+    } else if (left.isNull()) {\n+      // We should never get here since null is not immutable.\n+      throw new IllegalStateException(\"Unexpected null node found\");\n+    } else if (left.isTemplateLit()) {\n+      elem = Node.newString(Character.toString(0));\n     }\n+  }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n+  if (elem == null) {\n+    return n;\n   }\n \n+  Node parent = n.getParent();\n+  parent.replaceChild(n, elem);\n+  reportCodeChange();\n+  return elem;\n+}\n+\n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}