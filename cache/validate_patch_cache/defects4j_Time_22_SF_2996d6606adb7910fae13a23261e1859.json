{
    "patch": "        super();\n        iPeriod = new int[8];\n        setPeriodInternal(duration);\n    }\n\n    private void setPeriodInternal(long duration) {\n        iPeriodType = PeriodType.standard();\n        long previousDivisor = DurationFieldType.getYears().getField(getPeriodType()).isPrecise() ? JodaConstants.MILLIS_PER_YEAR : JodaConstants.MILLIS_PER_DAY;\n        int years = 0;\n        while (duration >= previousDivisor && (years == 0 || !DurationFieldType.getYears().getField(getPeriodType()).isPrecise())) {\n            long value = duration / previousDivisor;\n            duration = duration - (value * previousDivisor);\n            years = FieldUtils.safeToInt(value);\n            previousDivisor = DurationFieldType.getMonths().getField(getPeriodType()).getUnitMillis();\n        }\n        iPeriod[0] = years;\n        previousDivisor = DurationFieldType.getMonths().getField(getPeriodType()).getUnitMillis();\n        int months = 0;\n        while (duration >= previousDivisor && (months == 0 || !DurationFieldType.getMonths().getField(getPeriodType()).isPrecise())) {\n            long value = duration / previousDivisor;\n            duration = duration - (value * previousDivisor);\n            months = FieldUtils.safeToInt(value);\n            previousDivisor = DurationFieldType.getWeeks().getField(getPeriodType()).getUnitMillis();\n        }\n        iPeriod[1] = months;\n        previousDivisor = DurationFieldType.getWeeks().getField(getPeriodType()).getUnitMillis();\n        int weeks = 0;\n        while (duration >= previousDivisor && (weeks == 0 || !DurationFieldType.getWeeks().getField(getPeriodType()).isPrecise())) {\n            long value = duration / previousDivisor;\n            duration = duration - (value * previousDivisor);\n            weeks = FieldUtils.safeToInt(value);\n            previousDivisor = DurationFieldType.getDays().getField(getPeriodType()).getUnitMillis();\n        }\n        iPeriod[2] = weeks;\n        previousDivisor = DurationFieldType.getDays().getField(getPeriodType()).getUnitMillis();\n        int days = 0;\n        while (duration >= previousDivisor && (days == 0 || !DurationFieldType.getDays().getField(getPeriodType()).isPrecise())) {\n            long value = duration / previousDivisor;\n            duration = duration - (value * previousDivisor);\n            days = FieldUtils.safeToInt(value);\n            previousDivisor = DurationFieldType.getHours().getField(getPeriodType()).getUnitMillis();\n        }\n        iPeriod[3] = days;\n        previousDivisor = DurationFieldType.getHours().getField(getPeriodType()).getUnitMillis();\n        int hours = 0;\n        while (duration >= previousDivisor && (hours == 0 || !DurationFieldType.getHours().getField(getPeriodType()).isPrecise())) {\n            long value = duration / previousDivisor;\n            duration = duration - (value * previousDivisor);\n            hours = FieldUtils.safeToInt(value);\n            previousDivisor = DurationFieldType.getMinutes().getField(getPeriodType()).getUnitMillis();\n        }\n        iPeriod[4] = hours;\n        previousDivisor = DurationFieldType.getMinutes().getField(getPeriodType()).getUnitMillis();\n        int minutes = 0;\n        while (duration >= previousDivisor && (minutes == 0 || !DurationFieldType.getMinutes().getField(getPeriodType()).isPrecise())) {\n            long value = duration / previousDivisor;\n            duration = duration - (value * previousDivisor);\n            minutes = FieldUtils.safeToInt(value);\n            previousDivisor = DurationFieldType.getSeconds().getField(getPeriodType()).getUnitMillis();\n        }\n        iPeriod[5] = minutes;\n        previousDivisor = DurationFieldType.getSeconds().getField(getPeriodType()).getUnitMillis();\n        int seconds = 0;\n        while (duration >= previousDivisor && (seconds == 0 || !DurationFieldType.getSeconds().getField(getPeriodType()).isPrecise())) {\n            long value = duration / previousDivisor;\n            duration = duration - (value * previousDivisor);\n            seconds = FieldUtils.safeToInt(value);\n            previousDivisor = DurationFieldType.getMillis().getField(getPeriodType()).getUnitMillis();\n        }\n        iPeriod[6] = seconds;\n        iPeriod[7] = FieldUtils.safeToInt(duration);\n        super.setValues(iPeriod);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..29f0e1f0 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,78 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+        super();\n+        iPeriod = new int[8];\n+        setPeriodInternal(duration);\n+    }\n+\n+    private void setPeriodInternal(long duration) {\n+        iPeriodType = PeriodType.standard();\n+        long previousDivisor = DurationFieldType.getYears().getField(getPeriodType()).isPrecise() ? JodaConstants.MILLIS_PER_YEAR : JodaConstants.MILLIS_PER_DAY;\n+        int years = 0;\n+        while (duration >= previousDivisor && (years == 0 || !DurationFieldType.getYears().getField(getPeriodType()).isPrecise())) {\n+            long value = duration / previousDivisor;\n+            duration = duration - (value * previousDivisor);\n+            years = FieldUtils.safeToInt(value);\n+            previousDivisor = DurationFieldType.getMonths().getField(getPeriodType()).getUnitMillis();\n+        }\n+        iPeriod[0] = years;\n+        previousDivisor = DurationFieldType.getMonths().getField(getPeriodType()).getUnitMillis();\n+        int months = 0;\n+        while (duration >= previousDivisor && (months == 0 || !DurationFieldType.getMonths().getField(getPeriodType()).isPrecise())) {\n+            long value = duration / previousDivisor;\n+            duration = duration - (value * previousDivisor);\n+            months = FieldUtils.safeToInt(value);\n+            previousDivisor = DurationFieldType.getWeeks().getField(getPeriodType()).getUnitMillis();\n+        }\n+        iPeriod[1] = months;\n+        previousDivisor = DurationFieldType.getWeeks().getField(getPeriodType()).getUnitMillis();\n+        int weeks = 0;\n+        while (duration >= previousDivisor && (weeks == 0 || !DurationFieldType.getWeeks().getField(getPeriodType()).isPrecise())) {\n+            long value = duration / previousDivisor;\n+            duration = duration - (value * previousDivisor);\n+            weeks = FieldUtils.safeToInt(value);\n+            previousDivisor = DurationFieldType.getDays().getField(getPeriodType()).getUnitMillis();\n+        }\n+        iPeriod[2] = weeks;\n+        previousDivisor = DurationFieldType.getDays().getField(getPeriodType()).getUnitMillis();\n+        int days = 0;\n+        while (duration >= previousDivisor && (days == 0 || !DurationFieldType.getDays().getField(getPeriodType()).isPrecise())) {\n+            long value = duration / previousDivisor;\n+            duration = duration - (value * previousDivisor);\n+            days = FieldUtils.safeToInt(value);\n+            previousDivisor = DurationFieldType.getHours().getField(getPeriodType()).getUnitMillis();\n+        }\n+        iPeriod[3] = days;\n+        previousDivisor = DurationFieldType.getHours().getField(getPeriodType()).getUnitMillis();\n+        int hours = 0;\n+        while (duration >= previousDivisor && (hours == 0 || !DurationFieldType.getHours().getField(getPeriodType()).isPrecise())) {\n+            long value = duration / previousDivisor;\n+            duration = duration - (value * previousDivisor);\n+            hours = FieldUtils.safeToInt(value);\n+            previousDivisor = DurationFieldType.getMinutes().getField(getPeriodType()).getUnitMillis();\n+        }\n+        iPeriod[4] = hours;\n+        previousDivisor = DurationFieldType.getMinutes().getField(getPeriodType()).getUnitMillis();\n+        int minutes = 0;\n+        while (duration >= previousDivisor && (minutes == 0 || !DurationFieldType.getMinutes().getField(getPeriodType()).isPrecise())) {\n+            long value = duration / previousDivisor;\n+            duration = duration - (value * previousDivisor);\n+            minutes = FieldUtils.safeToInt(value);\n+            previousDivisor = DurationFieldType.getSeconds().getField(getPeriodType()).getUnitMillis();\n+        }\n+        iPeriod[5] = minutes;\n+        previousDivisor = DurationFieldType.getSeconds().getField(getPeriodType()).getUnitMillis();\n+        int seconds = 0;\n+        while (duration >= previousDivisor && (seconds == 0 || !DurationFieldType.getSeconds().getField(getPeriodType()).isPrecise())) {\n+            long value = duration / previousDivisor;\n+            duration = duration - (value * previousDivisor);\n+            seconds = FieldUtils.safeToInt(value);\n+            previousDivisor = DurationFieldType.getMillis().getField(getPeriodType()).getUnitMillis();\n+        }\n+        iPeriod[6] = seconds;\n+        iPeriod[7] = FieldUtils.safeToInt(duration);\n+        super.setValues(iPeriod);\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}