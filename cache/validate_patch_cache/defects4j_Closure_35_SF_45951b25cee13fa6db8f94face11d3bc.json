{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n        if (this.currentScope != null) {\n          // Report warnings for inferred properties.\n          JSErrorReporter warningReporter = this.currentScope.getErrorReporter().getTyped();\n          for (String inferredProp : objType.getInferredPropertyNames()) {\n            JSType inferredType =\n                objType.getOwnPropertyJSType(inferredProp).withLocation(null);\n            warningReporter.warning(\n                JSError.make(\n                    INFERRED_PROPERTY,\n                    inferredProp,\n                    objType.getSourceForInferredProperty(inferredProp)),\n                null,\n                inferredType);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..e31e4044 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,13 +1111,6 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n-    if (type == null || constraint == null) {\n-      return;\n-    }\n-\n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n@@ -1132,21 +1125,23 @@ class TypeInference\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n+        if (this.currentScope != null) {\n+          // Report warnings for inferred properties.\n+          JSErrorReporter warningReporter = this.currentScope.getErrorReporter().getTyped();\n+          for (String inferredProp : objType.getInferredPropertyNames()) {\n+            JSType inferredType =\n+                objType.getOwnPropertyJSType(inferredProp).withLocation(null);\n+            warningReporter.warning(\n+                JSError.make(\n+                    INFERRED_PROPERTY,\n+                    inferredProp,\n+                    objType.getSourceForInferredProperty(inferredProp)),\n+                null,\n+                inferredType);\n+          }\n+        }\n       }\n     }\n-  }\n-\n-  /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n-   */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n-      }\n     }\n     return scope;\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}