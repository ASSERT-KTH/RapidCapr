{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        if (valueToAdd == 0) {\n            return values;\n        }\n\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n\n            // Add the months first, then adjust the day of the month.\n            instant = iChronology.months().add(instant, valueToAdd);\n            int dayOfMonth = iChronology.getDayOfMonth(instant);\n            if (dayOfMonth != values[DateTimeFieldType.dayOfMonth().getFieldIndex()]) {\n                // Adjust day of month to last valid value for the given month.\n                instant = iChronology.dayOfMonth().getMaximumValue(instant);\n            }\n\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..17e917da 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -201,18 +201,24 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n \n     //-----------------------------------------------------------------------\n     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n+\n+            // Add the months first, then adjust the day of the month.\n+            instant = iChronology.months().add(instant, valueToAdd);\n+            int dayOfMonth = iChronology.getDayOfMonth(instant);\n+            if (dayOfMonth != values[DateTimeFieldType.dayOfMonth().getFieldIndex()]) {\n+                // Adjust day of month to last valid value for the given month.\n+                instant = iChronology.dayOfMonth().getMaximumValue(instant);\n+            }\n+\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}