{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node fnNode = fnScope.getRootNode();\n    Preconditions.checkState(fnNode.isFunction(), \"Expected function node\");\n\n    // If this is the parameters object for an object literal's getter\n    // or setter, then don't remove any parameters.\n    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n        return;\n    }\n\n    Node argList = getFunctionArgList(fnNode);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(fnNode);\n\n    if (!modifyCallers && !NodeUtil.isGeneratorFunction(fnNode)) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node lastArg;\n        while ((lastArg = argList.getLastChild()) != null) {\n            String paramName = lastArg.getString();\n            Var var = fnScope.getVar(paramName);\n            // If there is no Var that corresponds to the parameter,\n            // it is a constant parameter that has become effectively unused.\n            // Eg.    function f(x, 1, 2, 3) {...}   -->   function f(x) {...}\n            boolean isConstant = !fnScope.isDeclared(var) && !fnScope.isFunctionBlockScoped(paramName);\n            if (!referenced.contains(var) && !isConstant) {\n                argList.removeChild(lastArg);\n                compiler.reportCodeChange();\n            } else {\n                break;\n            }\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..2391a805 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,40 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    Node fnNode = fnScope.getRootNode();\n+    Preconditions.checkState(fnNode.isFunction(), \"Expected function node\");\n+\n+    // If this is the parameters object for an object literal's getter\n+    // or setter, then don't remove any parameters.\n+    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n+        return;\n+    }\n+\n+    Node argList = getFunctionArgList(fnNode);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(fnNode);\n+\n+    if (!modifyCallers && !NodeUtil.isGeneratorFunction(fnNode)) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        Node lastArg;\n+        while ((lastArg = argList.getLastChild()) != null) {\n+            String paramName = lastArg.getString();\n+            Var var = fnScope.getVar(paramName);\n+            // If there is no Var that corresponds to the parameter,\n+            // it is a constant parameter that has become effectively unused.\n+            // Eg.    function f(x, 1, 2, 3) {...}   -->   function f(x) {...}\n+            boolean isConstant = !fnScope.isDeclared(var) && !fnScope.isFunctionBlockScoped(paramName);\n+            if (!referenced.contains(var) && !isConstant) {\n+                argList.removeChild(lastArg);\n+                compiler.reportCodeChange();\n+            } else {\n+                break;\n+            }\n         }\n-      }\n     } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+        callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}