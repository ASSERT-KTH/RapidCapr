{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // check if instantLocal is within a gap between the two offsets\n            if (offsetLocal > offsetAdjusted) {\n                long prevTransition = previousTransition(instantAdjusted);\n                // check if the previous transition is during overlap and adjust instantAdjusted accordingly\n                if (getOffset(prevTransition - 1) != offsetLocal) {\n                    instantAdjusted = prevTransition - 1;\n                    offsetAdjusted = getOffset(instantAdjusted);\n                } else {\n                    prevTransition = previousTransition(instantLocal - offsetAdjusted);\n                }\n                // return the old offset if instantLocal is before the previous transition\n                if (instantLocal <= prevTransition + offsetLocal) {\n                    return offsetLocal;\n                }\n            } else {\n                long nextTransition = nextTransition(instantAdjusted);\n                // check if the next transition is during overlap and adjust instantAdjusted accordingly\n                if (getOffset(nextTransition - 1) != offsetLocal) {\n                    instantAdjusted = nextTransition - 1;\n                    offsetAdjusted = getOffset(instantAdjusted);\n                } else {\n                    nextTransition = nextTransition(instantLocal - offsetAdjusted);\n                }\n                // return the old offset if instantLocal is after or at the same time as the next transition\n                if (instantLocal >= nextTransition + offsetLocal) {\n                    return offsetLocal;\n                }\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..a71a6e30 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -884,15 +884,31 @@ public abstract class DateTimeZone implements Serializable {\n         final int offsetAdjusted = getOffset(instantAdjusted);\n         // if the offsets differ, we must be near a DST boundary\n         if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n+            // check if instantLocal is within a gap between the two offsets\n+            if (offsetLocal > offsetAdjusted) {\n+                long prevTransition = previousTransition(instantAdjusted);\n+                // check if the previous transition is during overlap and adjust instantAdjusted accordingly\n+                if (getOffset(prevTransition - 1) != offsetLocal) {\n+                    instantAdjusted = prevTransition - 1;\n+                    offsetAdjusted = getOffset(instantAdjusted);\n+                } else {\n+                    prevTransition = previousTransition(instantLocal - offsetAdjusted);\n+                }\n+                // return the old offset if instantLocal is before the previous transition\n+                if (instantLocal <= prevTransition + offsetLocal) {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                long nextTransition = nextTransition(instantAdjusted);\n+                // check if the next transition is during overlap and adjust instantAdjusted accordingly\n+                if (getOffset(nextTransition - 1) != offsetLocal) {\n+                    instantAdjusted = nextTransition - 1;\n+                    offsetAdjusted = getOffset(instantAdjusted);\n+                } else {\n+                    nextTransition = nextTransition(instantLocal - offsetAdjusted);\n+                }\n+                // return the old offset if instantLocal is after or at the same time as the next transition\n+                if (instantLocal >= nextTransition + offsetLocal) {\n                     return offsetLocal;\n                 }\n             }",
    "result_reason": "error: cannot assign a value to final variable instantAdjusted",
    "test_result": "ERROR"
}