{
    "patch": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        mockInstance = classInstantiator.instantiate(mockedProxyType);\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n    }\n\n    return ensureMockIsAssignableToMockedType(settings, mockInstance);\n}\n\n@SuppressWarnings(\"unchecked\")\nprivate <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mockInstance) {\n    Class<?> typeToMock = settings.getTypeToMock();\n    if (typeToMock.isMemberClass() && !Modifier.isStatic(typeToMock.getModifiers())) {\n        // Handle inner classes by verifying that the mock instance is assignable to the correct enclosing object's class.\n        Object outerInstance = settings.getOuterClassInstance();\n        if (outerInstance == null) {\n            throw new MockitoException(\"Failed to mock inner class \" + typeToMock + \" - no outer class instance provided\");\n        }\n        Class<?> enclosingClass = typeToMock.getEnclosingClass();\n        if (!enclosingClass.isAssignableFrom(outerInstance.getClass())) {\n            throw new MockitoException(\"Failed to mock inner class \" + typeToMock + \" - the provided outer class instance has incorrect type \" + outerInstance.getClass());\n        }\n        try {\n            Field outerReference = typeToMock.getDeclaredField(\"this$\" + typeToMock.getEnclosingClass().getSimpleName());\n            outerReference.setAccessible(true);\n            outerReference.set(mockInstance, outerInstance);\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            throw new MockitoException(\"Failed to mock inner class \" + typeToMock + \" - unable to set outer class instance\", e);\n        }\n    }\n    return (T) mockInstance;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..16023e30a 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,36 +21,60 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n+        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+    }\n+    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n+            settings.getTypeToMock(),\n+            settings.getExtraInterfaces()\n+    );\n+    T mockInstance = null;\n+    try {\n+        mockInstance = classInstantiator.instantiate(mockedProxyType);\n+        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n+        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+    } catch (ClassCastException cce) {\n+        throw new MockitoException(join(\n+                \"ClassCastException occurred while creating the mockito mock :\",\n+                \"  class to mock : \" + describeClass(mockedProxyType),\n+                \"  created class : \" + describeClass(settings.getTypeToMock()),\n+                \"  proxy instance class : \" + describeClass(mockInstance),\n+                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n+                \"\",\n+                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n+                \"\"\n+        ), cce);\n+    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n+        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+    }\n+\n+    return ensureMockIsAssignableToMockedType(settings, mockInstance);\n+}\n+\n+@SuppressWarnings(\"unchecked\")\n+private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mockInstance) {\n+    Class<?> typeToMock = settings.getTypeToMock();\n+    if (typeToMock.isMemberClass() && !Modifier.isStatic(typeToMock.getModifiers())) {\n+        // Handle inner classes by verifying that the mock instance is assignable to the correct enclosing object's class.\n+        Object outerInstance = settings.getOuterClassInstance();\n+        if (outerInstance == null) {\n+            throw new MockitoException(\"Failed to mock inner class \" + typeToMock + \" - no outer class instance provided\");\n+        }\n+        Class<?> enclosingClass = typeToMock.getEnclosingClass();\n+        if (!enclosingClass.isAssignableFrom(outerInstance.getClass())) {\n+            throw new MockitoException(\"Failed to mock inner class \" + typeToMock + \" - the provided outer class instance has incorrect type \" + outerInstance.getClass());\n         }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n         try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n-\n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+            Field outerReference = typeToMock.getDeclaredField(\"this$\" + typeToMock.getEnclosingClass().getSimpleName());\n+            outerReference.setAccessible(true);\n+            outerReference.set(mockInstance, outerInstance);\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            throw new MockitoException(\"Failed to mock inner class \" + typeToMock + \" - unable to set outer class instance\", e);\n         }\n     }\n+    return (T) mockInstance;\n+}\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}