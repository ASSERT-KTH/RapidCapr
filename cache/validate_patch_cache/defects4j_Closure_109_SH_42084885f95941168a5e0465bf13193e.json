{
    "patch": "+        if (token.isTypeToken() || token.isPrimitiveTypeToken()) {\n+            return new TypeNode(token.getValue());\n+        } else if(token.isString()) {\n+            return new StringNode(token.getValue());\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid type expression: \" + token.getValue());\n+        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..ce5dc2f9 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,14 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n++        if (token.isTypeToken() || token.isPrimitiveTypeToken()) {\n++            return new TypeNode(token.getValue());\n++        } else if(token.isString()) {\n++            return new StringNode(token.getValue());\n++        } else {\n++            throw new IllegalArgumentException(\"Invalid type expression: \" + token.getValue());\n++        }\n+    }\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}