{
    "patch": "    // Build a list of arguments that were referenced, and overwrite the\n    // argument list with a subset of itself in which unreferenced arguments\n    // have been stripped off the end.  Currently called only by varargs\n    // functions, as spraying the arguments object makes it an effective\n    // leak, but this might change.\n    //  function foo(x){...y...}\n    //  foo(1,2,3); // x is argument 0, y is arguments[1] through arguments[N-1]\n    if (!modifyCallers) {\n      List<Node> referencedList = new ArrayList<>(argList.getChildCount());\n      Map<String, Var> argNames = new HashMap<>();\n      for (Var v : fnScope.getArguments()) {\n        argNames.put(v.getName(), v);\n      }\n\n      // Iterate in reverse order, so that we strip off trailing unused\n      // parameters.\n      Node arg = argList.getLastChild();\n      while (arg != null) {\n        if (arg.isRest()) {\n          // Rest arguments aren't lexicographically in the function body itself.\n          break;\n        }\n\n        getVarsDeclaredInExpression(arg).stream()\n            .map(Var::getName)\n            .filter(argNames::containsKey)\n            .map(argNames::get)\n            .forEach(referencedList::add);\n        if (!referencedList.isEmpty()) {\n          Collections.reverse(referencedList);\n          argList.removeChildren();\n          for (Node n : referencedList) {\n            argList.addChildToBack(n.cloneTree());\n          }\n          break;\n        } else {\n          arg.detach();\n          compiler.reportCodeChange();\n          arg = argList.getLastChild();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1457c8a4 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,45 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Build a list of arguments that were referenced, and overwrite the\n+    // argument list with a subset of itself in which unreferenced arguments\n+    // have been stripped off the end.  Currently called only by varargs\n+    // functions, as spraying the arguments object makes it an effective\n+    // leak, but this might change.\n+    //  function foo(x){...y...}\n+    //  foo(1,2,3); // x is argument 0, y is arguments[1] through arguments[N-1]\n+    if (!modifyCallers) {\n+      List<Node> referencedList = new ArrayList<>(argList.getChildCount());\n+      Map<String, Var> argNames = new HashMap<>();\n+      for (Var v : fnScope.getArguments()) {\n+        argNames.put(v.getName(), v);\n+      }\n+\n+      // Iterate in reverse order, so that we strip off trailing unused\n+      // parameters.\n+      Node arg = argList.getLastChild();\n+      while (arg != null) {\n+        if (arg.isRest()) {\n+          // Rest arguments aren't lexicographically in the function body itself.\n+          break;\n+        }\n+\n+        getVarsDeclaredInExpression(arg).stream()\n+            .map(Var::getName)\n+            .filter(argNames::containsKey)\n+            .map(argNames::get)\n+            .forEach(referencedList::add);\n+        if (!referencedList.isEmpty()) {\n+          Collections.reverse(referencedList);\n+          argList.removeChildren();\n+          for (Node n : referencedList) {\n+            argList.addChildToBack(n.cloneTree());\n+          }\n+          break;\n+        } else {\n+          arg.detach();\n+          compiler.reportCodeChange();\n+          arg = argList.getLastChild();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}