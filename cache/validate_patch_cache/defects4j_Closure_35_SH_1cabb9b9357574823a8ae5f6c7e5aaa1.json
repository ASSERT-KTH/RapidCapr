{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType != null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeInferred(prop) && !objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {\n                        if (propType.isUnionType() && \n                            propType.getRestrictedUnion(propType.getNativeType(VOID_TYPE)).isTruthy()) {\n                            typeToInfer = propType;\n                        } else {\n                            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n                        }\n                    }\n                    objType.defineInferredProperty(prop, typeToInfer, null);\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..54c901cb 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1119,20 +1119,24 @@ class TypeInference\n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+        if (objType != null) {\n+            for (String prop : constraintObj.getOwnPropertyNames()) {\n+                JSType propType = constraintObj.getPropertyType(prop);\n+                if (!objType.isPropertyTypeInferred(prop) && !objType.isPropertyTypeDeclared(prop)) {\n+                    JSType typeToInfer = propType;\n+                    if (!objType.hasProperty(prop)) {\n+                        if (propType.isUnionType() && \n+                            propType.getRestrictedUnion(propType.getNativeType(VOID_TYPE)).isTruthy()) {\n+                            typeToInfer = propType;\n+                        } else {\n+                            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+                        }\n+                    }\n+                    objType.defineInferredProperty(prop, typeToInfer, null);\n+                }\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: getNativeType(JSTypeNative) is not public in JSType; cannot be accessed from outside package",
    "test_result": "ERROR"
}