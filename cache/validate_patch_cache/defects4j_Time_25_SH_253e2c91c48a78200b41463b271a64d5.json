{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if (offsetLocal > offsetAdjusted) {\n        long prevAdjust = previousTransition(instantLocal - offsetAdjusted);\n        long prevActual = previousTransition(instantLocal - offsetLocal);\n        if (prevAdjust != prevActual) {\n            // There is a gap in the local time, need to go back to the previous offset\n            return offsetLocal;\n        }\n    } else {\n        long nextAdjust = nextTransition(instantLocal - offsetAdjusted);\n        long nextActual = nextTransition(instantLocal - offsetLocal);\n        if (nextAdjust != nextActual) {\n            // There is an overlap in the local time, need to switch to the next offset\n            return offsetAdjusted;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f4e71f41 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,23 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if (offsetLocal > offsetAdjusted) {\n+        long prevAdjust = previousTransition(instantLocal - offsetAdjusted);\n+        long prevActual = previousTransition(instantLocal - offsetLocal);\n+        if (prevAdjust != prevActual) {\n+            // There is a gap in the local time, need to go back to the previous offset\n+            return offsetLocal;\n+        }\n+    } else {\n+        long nextAdjust = nextTransition(instantLocal - offsetAdjusted);\n+        long nextActual = nextTransition(instantLocal - offsetLocal);\n+        if (nextAdjust != nextActual) {\n+            // There is an overlap in the local time, need to switch to the next offset\n+            return offsetAdjusted;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}