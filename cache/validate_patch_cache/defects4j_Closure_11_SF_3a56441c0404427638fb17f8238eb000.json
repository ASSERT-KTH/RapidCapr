{
    "patch": "public static String getprop(String name) {\n    String result = null;\n    InputStream inputStream = null;\n    try {\n        Process process = Runtime.getRuntime().exec(\"getprop \" + name);\n        inputStream = process.getInputStream();\n\n        byte[] buffer = new byte[1024];\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n\n        while (inputStream.read(buffer) != -1) {\n            byteArrayOutputStream.write(buffer);\n        }\n\n        result = byteArrayOutputStream.toString().trim();\n    } catch (IOException e) {\n        System.err.println(\"Exception while trying to get property \" + name + \": \" + e);\n    } finally {\n        if (inputStream != null) {\n            try {\n                inputStream.close();\n            } catch (IOException e) {\n                System.err.println(\"Exception while trying to close input stream: \" + e);\n            }\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..108f9a36 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,34 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String name) {\n+    String result = null;\n+    InputStream inputStream = null;\n+    try {\n+        Process process = Runtime.getRuntime().exec(\"getprop \" + name);\n+        inputStream = process.getInputStream();\n+\n+        byte[] buffer = new byte[1024];\n+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+\n+        while (inputStream.read(buffer) != -1) {\n+            byteArrayOutputStream.write(buffer);\n+        }\n+\n+        result = byteArrayOutputStream.toString().trim();\n+    } catch (IOException e) {\n+        System.err.println(\"Exception while trying to get property \" + name + \": \" + e);\n+    } finally {\n+        if (inputStream != null) {\n+            try {\n+                inputStream.close();\n+            } catch (IOException e) {\n+                System.err.println(\"Exception while trying to close input stream: \" + e);\n+            }\n+        }\n+    }\n+    return result;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}