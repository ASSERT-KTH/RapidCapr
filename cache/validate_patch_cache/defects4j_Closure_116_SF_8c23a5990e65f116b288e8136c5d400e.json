{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    Node callArgs = callNode.getLastChild().detachFromParent();\n    Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n\n    // Check for more call arguments than function parameters\n    for (Node callArg = callArgs.getFirstChild(); callArg != null; callArg = callArg.getNext()) {\n        if (fnParams == null || !fnParams.getFirstChild().isName()) {\n            return CanInlineResult.NO;\n        }\n        fnParams = fnParams.getFirstChild().getNext();\n    }\n\n    // Check all named parameters have a corresponding argument\n    for (Node fnParam = fnParams; fnParam != null; fnParam = fnParam.getNext()) {\n        if (!fnParam.isName()) {\n            return CanInlineResult.NO;\n        }\n    }\n\n    // Check for side-effects in call arguments and that named parameters\n    // are evaluated at most once\n    Node fnBlock = fnNode.getLastChild();\n    for (Node fnParam = fnParams.getFirstChild(), callArg = callArgs.getFirstChild(); fnParam != null; fnParam = fnParam.getNext(), callArg = callArg.getNext()) {\n        if (callArg == null) {\n            break;\n        }\n        String paramName = fnParam.getString();\n        if (NodeUtil.getNameReferenceCount(fnBlock, paramName) > 1 &&\n                NodeUtil.mayEffectMutableState(callArg, compiler)) {\n            return CanInlineResult.NO;\n        }\n        if (NodeUtil.mayHaveSideEffects(callArg, compiler)) {\n            return CanInlineResult.NO;\n        }\n    }\n\n    // Check if there are any undeclared variables in the function block\n    // that are declared in the call scope\n    Scope enclosingScope = SyntacticScopeCreator.makeEnclosingScope(fnNode, compiler);\n    Node enclosingBlock = NodeUtil.getEnclosingBlock(fnNode);\n    if (enclosingBlock != null) {\n        NodeTraversal.traverse(compiler, enclosingBlock, new FindUndeclaredVarsCallback(enclosingScope));\n    }\n    for (Node fnParam = fnParams.getFirstChild(); fnParam != null; fnParam = fnParam.getNext()) {\n        Var var = enclosingScope.getVar(fnParam.getString());\n        if (var != null) {\n            return CanInlineResult.NO;\n        }\n    }\n\n    // All checks passed, can inline\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..2f0e43ab 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,63 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+        return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n-\n-\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+    Node callArgs = callNode.getLastChild().detachFromParent();\n+    Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n+    // Check for more call arguments than function parameters\n+    for (Node callArg = callArgs.getFirstChild(); callArg != null; callArg = callArg.getNext()) {\n+        if (fnParams == null || !fnParams.getFirstChild().isName()) {\n+            return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+        fnParams = fnParams.getFirstChild().getNext();\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+    // Check all named parameters have a corresponding argument\n+    for (Node fnParam = fnParams; fnParam != null; fnParam = fnParam.getNext()) {\n+        if (!fnParam.isName()) {\n             return CanInlineResult.NO;\n-          }\n         }\n+    }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+    // Check for side-effects in call arguments and that named parameters\n+    // are evaluated at most once\n+    Node fnBlock = fnNode.getLastChild();\n+    for (Node fnParam = fnParams.getFirstChild(), callArg = callArgs.getFirstChild(); fnParam != null; fnParam = fnParam.getNext(), callArg = callArg.getNext()) {\n+        if (callArg == null) {\n+            break;\n+        }\n+        String paramName = fnParam.getString();\n+        if (NodeUtil.getNameReferenceCount(fnBlock, paramName) > 1 &&\n+                NodeUtil.mayEffectMutableState(callArg, compiler)) {\n+            return CanInlineResult.NO;\n+        }\n+        if (NodeUtil.mayHaveSideEffects(callArg, compiler)) {\n+            return CanInlineResult.NO;\n+        }\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+    // Check if there are any undeclared variables in the function block\n+    // that are declared in the call scope\n+    Scope enclosingScope = SyntacticScopeCreator.makeEnclosingScope(fnNode, compiler);\n+    Node enclosingBlock = NodeUtil.getEnclosingBlock(fnNode);\n+    if (enclosingBlock != null) {\n+        NodeTraversal.traverse(compiler, enclosingBlock, new FindUndeclaredVarsCallback(enclosingScope));\n+    }\n+    for (Node fnParam = fnParams.getFirstChild(); fnParam != null; fnParam = fnParam.getNext()) {\n+        Var var = enclosingScope.getVar(fnParam.getString());\n+        if (var != null) {\n+            return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n-      }\n     }\n \n+    // All checks passed, can inline\n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}