{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // IE has a bug where event handlers behave differently when\n      // their return value is used vs. when their return value is in\n      // an EXPR_RESULT. It's pretty freaking weird. See:\n      // http://code.google.com/p/closure-compiler/issues/detail?id=291\n      // We try to detect this case, and not fold EXPR_RESULTs\n      // into other expressions.\n\n      // We only have to worry about methods with an implicit 'this'\n      // param, or this doesn't happen.\n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        Node grandChild = maybeExpr.getFirstChild();\n        if (grandChild.getType() == Token.CALL) {\n          Node target = grandChild.getFirstChild();\n          if (target.getType() == Token.GETPROP) {\n            Node obj = target.getFirstChild();\n            if (obj.getType() == Token.THIS) {\n              return false;\n            }\n          }\n        }\n      }\n\n      // Make sure that the expression is not part of a for loop or a\n      // with statement.\n      Node parent = n.getParent();\n      return NodeUtil.isExpressionNode(maybeExpr) &&\n          (parent == null || !NodeUtil.isLoopStructure(parent)) &&\n          !NodeUtil.isWithStatement(parent);\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..a48ff9c1 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,45 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // IE has a bug where event handlers behave differently when\n+      // their return value is used vs. when their return value is in\n+      // an EXPR_RESULT. It's pretty freaking weird. See:\n+      // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+      // We try to detect this case, and not fold EXPR_RESULTs\n+      // into other expressions.\n+\n+      // We only have to worry about methods with an implicit 'this'\n+      // param, or this doesn't happen.\n+      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+        Node grandChild = maybeExpr.getFirstChild();\n+        if (grandChild.getType() == Token.CALL) {\n+          Node target = grandChild.getFirstChild();\n+          if (target.getType() == Token.GETPROP) {\n+            Node obj = target.getFirstChild();\n+            if (obj.getType() == Token.THIS) {\n+              return false;\n+            }\n+          }\n+        }\n       }\n-    }\n \n-    return false;\n+      // Make sure that the expression is not part of a for loop or a\n+      // with statement.\n+      Node parent = n.getParent();\n+      return NodeUtil.isExpressionNode(maybeExpr) &&\n+          (parent == null || !NodeUtil.isLoopStructure(parent)) &&\n+          !NodeUtil.isWithStatement(parent);\n+    }\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}