{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        for (int j = 0; j < searchChars.length; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch)) {\n                    // Found a high surrogate, need to look ahead\n                    if (j == searchChars.length - 1) {\n                        // This is the last char in the search array,\n                        // which means we cannot match a supplementary\n                        // char, so return false\n                        return false;\n                    }\n                    if (i < str.length() - 1) {\n                        // Look ahead at the next char to see if\n                        // it matches the low surrogate\n                        char nextCh = str.charAt(i + 1);\n                        if (Character.isLowSurrogate(nextCh)) {\n                            int codePoint = Character.toCodePoint(ch, nextCh);\n                            if (searchChars[j + 1] == codePoint) {\n                                // Found a match for the supplementary\n                                // char, so return true\n                                return true;\n                            }\n                        }\n                    }\n                } else {\n                    // Found a non-surrogate char that matches, so return true\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..73cec2e3 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,44 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    for (int i = 0; i < str.length(); i++) {\n+        char ch = str.charAt(i);\n+        for (int j = 0; j < searchChars.length; j++) {\n+            if (searchChars[j] == ch) {\n+                if (Character.isHighSurrogate(ch)) {\n+                    // Found a high surrogate, need to look ahead\n+                    if (j == searchChars.length - 1) {\n+                        // This is the last char in the search array,\n+                        // which means we cannot match a supplementary\n+                        // char, so return false\n+                        return false;\n+                    }\n+                    if (i < str.length() - 1) {\n+                        // Look ahead at the next char to see if\n+                        // it matches the low surrogate\n+                        char nextCh = str.charAt(i + 1);\n+                        if (Character.isLowSurrogate(nextCh)) {\n+                            int codePoint = Character.toCodePoint(ch, nextCh);\n+                            if (searchChars[j + 1] == codePoint) {\n+                                // Found a match for the supplementary\n+                                // char, so return true\n+                                return true;\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // Found a non-surrogate char that matches, so return true\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}