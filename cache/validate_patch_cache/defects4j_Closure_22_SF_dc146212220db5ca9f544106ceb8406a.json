{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n.isEmpty() || n.isComma()) {\n    return;\n  }\n\n  int type = n.getType();\n  \n  // Skip over certain types of nodes that we know can be side-effect free.\n  if (type == Token.THIS\n      || type == Token.SUPER\n      || type == Token.STRING_KEY\n      || type == Token.MEMBER_FUNCTION_DEF\n      || type == Token.OBJECT_PATTERN) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  int parentType = parent.getType();\n  \n  // Skip certain parent nodes that we know have side-effects even if their children do not.\n  if (parentType == Token.EXPR_RESULT\n      || parentType == Token.IF\n      || parentType == Token.LET\n      || parentType == Token.CONST\n      || parentType == Token.VAR\n      || parentType == Token.RETURN\n      || parentType == Token.CASE\n      || parentType == Token.WHILE\n      || parentType == Token.DO\n      || parentType == Token.FOR\n      || parentType == Token.FOR_IN\n      || parentType == Token.SWITCH\n      || parentType == Token.NEW\n      || parentType == Token.TEMPLATELIT_SUB\n      || parentType == Token.ARRAY_PATTERN\n      || NodeUtil.isFunctionDeclaration(parent)) {\n    return;\n  }\n\n  // Skip over function calls that are part of an expression.\n  if (parentType == Token.FUNCTION || parentType == Token.CALL) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  \n  // Check for missing side-effects and report it as a warning.\n  if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase()\n          + \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n\n    // Mark the node as problematic if it is not already a statement.\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..66e790a4 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,78 +81,74 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n.isEmpty() || n.isComma()) {\n+    return;\n+  }\n \n-    if (parent == null) {\n-      return;\n-    }\n+  int type = n.getType();\n+  \n+  // Skip over certain types of nodes that we know can be side-effect free.\n+  if (type == Token.THIS\n+      || type == Token.SUPER\n+      || type == Token.STRING_KEY\n+      || type == Token.MEMBER_FUNCTION_DEF\n+      || type == Token.OBJECT_PATTERN) {\n+    return;\n+  }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (parent.getType() == Token.COMMA) {\n-      Node gramps = parent.getParent();\n-      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n-      return;\n-        }\n-    }\n+  if (parent == null) {\n+    return;\n+  }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n-        }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n-      } else {\n-      return;\n-      }\n+  int parentType = parent.getType();\n+  \n+  // Skip certain parent nodes that we know have side-effects even if their children do not.\n+  if (parentType == Token.EXPR_RESULT\n+      || parentType == Token.IF\n+      || parentType == Token.LET\n+      || parentType == Token.CONST\n+      || parentType == Token.VAR\n+      || parentType == Token.RETURN\n+      || parentType == Token.CASE\n+      || parentType == Token.WHILE\n+      || parentType == Token.DO\n+      || parentType == Token.FOR\n+      || parentType == Token.FOR_IN\n+      || parentType == Token.SWITCH\n+      || parentType == Token.NEW\n+      || parentType == Token.TEMPLATELIT_SUB\n+      || parentType == Token.ARRAY_PATTERN\n+      || NodeUtil.isFunctionDeclaration(parent)) {\n+    return;\n+  }\n+\n+  // Skip over function calls that are part of an expression.\n+  if (parentType == Token.FUNCTION || parentType == Token.CALL) {\n+    return;\n+  }\n+\n+  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n+  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n+  \n+  // Check for missing side-effects and report it as a warning.\n+  if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+    String msg = \"This code lacks side-effects. Is there a bug?\";\n+    if (n.isString()) {\n+      msg = \"Is there a missing '+' on the previous line?\";\n+    } else if (isSimpleOp) {\n+      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase()\n+          + \"' operator is not being used.\";\n     }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-        return;\n-      } else if (n.isExprResult()) {\n-        return;\n-      }\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n+    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n+    // Mark the node as problematic if it is not already a statement.\n+    if (!NodeUtil.isStatement(n)) {\n+      problemNodes.add(n);\n     }\n   }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}