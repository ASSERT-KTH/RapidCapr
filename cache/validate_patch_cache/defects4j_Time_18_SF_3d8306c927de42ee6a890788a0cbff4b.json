{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour,\n            int secondOfMinute, int millisOfSecond) throws IllegalArgumentException {\n        Chronology base = getBase();\n        if (base != null) {\n            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute,\n                    millisOfSecond);\n        }\n        // Check if the input date is invalid due to missing dates during the switch from Julian to Gregorian calendar\n        if (year == 1582 && monthOfYear == 10 && dayOfMonth >= 5 && dayOfMonth <= 14) {\n            throw new IllegalArgumentException(\"Invalid input date\");\n        }\n        // Convert input date to epoch milliseconds according to the appropriate calendar\n        long epochMillis;\n        if (year < 1582 || (year == 1582 && monthOfYear < 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth < 5)) {\n            // Calculate epoch milliseconds using Julian calendar\n            epochMillis = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour,\n                    secondOfMinute, millisOfSecond);\n        } else {\n            // Calculate epoch milliseconds using Gregorian calendar\n            epochMillis = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour,\n                    secondOfMinute, millisOfSecond);\n        }\n        return epochMillis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..8e5088ea 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,34 +347,29 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        }\n-\n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n-            }\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour,\n+            int secondOfMinute, int millisOfSecond) throws IllegalArgumentException {\n+        Chronology base = getBase();\n+        if (base != null) {\n+            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute,\n+                    millisOfSecond);\n+        }\n+        // Check if the input date is invalid due to missing dates during the switch from Julian to Gregorian calendar\n+        if (year == 1582 && monthOfYear == 10 && dayOfMonth >= 5 && dayOfMonth <= 14) {\n+            throw new IllegalArgumentException(\"Invalid input date\");\n+        }\n+        // Convert input date to epoch milliseconds according to the appropriate calendar\n+        long epochMillis;\n+        if (year < 1582 || (year == 1582 && monthOfYear < 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth < 5)) {\n+            // Calculate epoch milliseconds using Julian calendar\n+            epochMillis = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour,\n+                    secondOfMinute, millisOfSecond);\n+        } else {\n+            // Calculate epoch milliseconds using Gregorian calendar\n+            epochMillis = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour,\n+                    secondOfMinute, millisOfSecond);\n         }\n-        return instant;\n+        return epochMillis;\n     }\n \n     /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}