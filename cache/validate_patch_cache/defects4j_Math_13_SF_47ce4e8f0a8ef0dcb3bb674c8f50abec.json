{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    int n = m.getRowDimension();\n\n    // Create the upper triangular matrix R\n    RealMatrix R = m.copy();\n    for (int k = 0; k < n; k++) {\n        double alpha = R.getEntry(k, k);\n        R.setEntry(k, k, FastMath.sqrt(alpha));\n        for (int j = k + 1; j < n; j++) {\n            double beta = R.getEntry(k, j) / R.getEntry(k, k);\n            for (int i = k + 1; i <= j; i++) {\n                R.addToEntry(i, j, - beta * R.getEntry(k, i));\n            }\n        }\n    }\n\n    // Compute the square root of the matrix using R\n    RealMatrix Rt = MatrixUtils.inverse(R);\n    return Rt.multiply(m).multiply(Rt.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..998949640 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    int n = m.getRowDimension();\n+\n+    // Create the upper triangular matrix R\n+    RealMatrix R = m.copy();\n+    for (int k = 0; k < n; k++) {\n+        double alpha = R.getEntry(k, k);\n+        R.setEntry(k, k, FastMath.sqrt(alpha));\n+        for (int j = k + 1; j < n; j++) {\n+            double beta = R.getEntry(k, j) / R.getEntry(k, k);\n+            for (int i = k + 1; i <= j; i++) {\n+                R.addToEntry(i, j, - beta * R.getEntry(k, i));\n+            }\n+        }\n     }\n+\n+    // Compute the square root of the matrix using R\n+    RealMatrix Rt = MatrixUtils.inverse(R);\n+    return Rt.multiply(m).multiply(Rt.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}