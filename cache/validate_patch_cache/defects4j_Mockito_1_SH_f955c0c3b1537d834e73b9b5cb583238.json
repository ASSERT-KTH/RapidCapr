{
    "patch": "            List<Object> varArgsList = new ArrayList<>();\n            Object[] rawArguments = invocation.getRawArguments();\n            for (int i = indexOfVararg; i < rawArguments.length; i++) {\n                varArgsList.add(rawArguments[i]);\n            }\n            Object[] varArgs = varArgsList.toArray();\n            matchers.add(new VarargMatcher(Arrays.asList(varArgs)));",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..f92434839 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,13 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            List<Object> varArgsList = new ArrayList<>();\n+            Object[] rawArguments = invocation.getRawArguments();\n+            for (int i = indexOfVararg; i < rawArguments.length; i++) {\n+                varArgsList.add(rawArguments[i]);\n+            }\n+            Object[] varArgs = varArgsList.toArray();\n+            matchers.add(new VarargMatcher(Arrays.asList(varArgs)));\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}