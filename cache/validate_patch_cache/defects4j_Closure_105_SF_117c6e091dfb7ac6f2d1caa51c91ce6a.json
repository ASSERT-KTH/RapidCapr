{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String and TemplateLit nodes.\n    while (elem != null) {\n      if (elem.getType() == Token.TEMPLATELIT_STRING ||\n          NodeUtil.isImmutableValue(elem)) {\n        String currentValue = NodeUtil.getNormalStringValue(elem);\n        if (sb.length() == 0) {\n          sb.append(currentValue);\n        } else if (!joinString.isEmpty()) {\n          sb.append(joinString + currentValue);\n        } else {\n          sb.append(currentValue);\n        }\n      } else {\n        if (sb.length() > 0) {\n          arrayFoldedChildren.add(NodeUtil.newStringNode(\n              t.getCompiler(), sb.toString()));\n          foldedSize += sb.toString().length() + 2;\n          sb = new StringBuilder();\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      arrayFoldedChildren.add(\n          NodeUtil.newStringNode(t.getCompiler(), sb.toString()));\n      foldedSize += sb.toString().length() + 2;\n    }\n\n    // Add the length of the join string and separators between values.\n    foldedSize += (arrayFoldedChildren.size() - 1) * joinString.length();\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = NodeUtil.newStringNode(t.getCompiler(), \"\");\n        parent.replaceChild(n, emptyStringNode);\n        break;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          Node replacement = new Node(Token.ADD, NodeUtil.newStringNode(\n              t.getCompiler(), \"\"), foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        parent.replaceChild(n, foldedStringNode);\n        break;\n      default:\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        break;\n    }\n    t.getCompiler().reportCodeChange();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..edad9bd5 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,7 +1458,7 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                          Node parent) {\n     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n       return;\n@@ -1477,18 +1477,23 @@ class FoldConstants extends AbstractPostOrderCallback\n     StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n     Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n+    // Merges adjacent String and TemplateLit nodes.\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n+      if (elem.getType() == Token.TEMPLATELIT_STRING ||\n+          NodeUtil.isImmutableValue(elem)) {\n+        String currentValue = NodeUtil.getNormalStringValue(elem);\n+        if (sb.length() == 0) {\n+          sb.append(currentValue);\n+        } else if (!joinString.isEmpty()) {\n+          sb.append(joinString + currentValue);\n+        } else {\n+          sb.append(currentValue);\n         }\n-        sb.append(NodeUtil.getStringValue(elem));\n       } else {\n         if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n+          arrayFoldedChildren.add(NodeUtil.newStringNode(\n+              t.getCompiler(), sb.toString()));\n+          foldedSize += sb.toString().length() + 2;\n           sb = new StringBuilder();\n         }\n         foldedSize += InlineCostEstimator.getCost(elem);\n@@ -1498,20 +1503,20 @@ class FoldConstants extends AbstractPostOrderCallback\n     }\n \n     if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+      arrayFoldedChildren.add(\n+          NodeUtil.newStringNode(t.getCompiler(), sb.toString()));\n+      foldedSize += sb.toString().length() + 2;\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+\n+    // Add the length of the join string and separators between values.\n+    foldedSize += (arrayFoldedChildren.size() - 1) * joinString.length();\n \n     int originalSize = InlineCostEstimator.getCost(n);\n     switch (arrayFoldedChildren.size()) {\n       case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n+        Node emptyStringNode = NodeUtil.newStringNode(t.getCompiler(), \"\");\n         parent.replaceChild(n, emptyStringNode);\n         break;\n-\n       case 1:\n         Node foldedStringNode = arrayFoldedChildren.remove(0);\n         if (foldedSize > originalSize) {\n@@ -1519,17 +1524,13 @@ class FoldConstants extends AbstractPostOrderCallback\n         }\n         arrayNode.detachChildren();\n         if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n+          Node replacement = new Node(Token.ADD, NodeUtil.newStringNode(\n+              t.getCompiler(), \"\"), foldedStringNode);\n           foldedStringNode = replacement;\n         }\n         parent.replaceChild(n, foldedStringNode);\n         break;\n-\n       default:\n-        // No folding could actually be performed.\n         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n           return;\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}