{
    "patch": "        Matcher patternMatcher= formatPattern.matcher(pattern);\n        if(!patternMatcher.lookingAt()) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n\n        currentFormatField= patternMatcher.group();\n        Strategy currentStrategy= getStrategy(currentFormatField);\n        while (currentStrategy == null) {\n            if(!patternMatcher.find()) {\n                throw new IllegalArgumentException(\"Invalid pattern\");\n            }\n            currentFormatField = patternMatcher.group();\n            currentStrategy = getStrategy(currentFormatField);\n        }\n\n        StringBuilder regex= new StringBuilder();\n        List<Strategy> collector= new ArrayList<Strategy>();\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        for(;;) {\n            int fieldStart = patternMatcher.end();\n            if(!patternMatcher.find()) {\n                break;\n            }\n            int fieldEnd = patternMatcher.start();\n            String nextFormatField= patternMatcher.group();\n            nextStrategy = getStrategy(nextFormatField);\n            if(nextStrategy != null) {\n                if (!currentStrategy.isCompatibleWith(nextStrategy)) {\n                    if (currentStrategy.addRegex(this, regex)) {\n                        collector.add(currentStrategy);\n                    }\n                    currentFormatField = nextFormatField;\n                    currentStrategy = nextStrategy;\n                } else {\n                    // merge currentStrategy and nextStrategy\n                    currentFormatField = currentFormatField.concat(nextFormatField);\n                    currentStrategy = currentStrategy.merge(nextStrategy);\n                }\n            } else {\n                if (currentStrategy.addRegex(this, regex)) {\n                    collector.add(currentStrategy);\n                }\n                currentFormatField = nextFormatField;\n                currentStrategy = null;\n            }\n            // add text between format fields\n            String text = pattern.substring(fieldEnd, patternMatcher.start());\n            if(!text.isEmpty()) {\n                collector.add(new CopyQuotedStrategy(text));\n            }\n        }\n        if (currentStrategy != null) {\n            if (currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n        }\n        currentFormatField = null;\n        strategies = collector.toArray(new Strategy[collector.size()]);\n        parsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..d59d3f77 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,67 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        Matcher patternMatcher= formatPattern.matcher(pattern);\n+        if(!patternMatcher.lookingAt()) {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+\n+        currentFormatField= patternMatcher.group();\n+        Strategy currentStrategy= getStrategy(currentFormatField);\n+        while (currentStrategy == null) {\n+            if(!patternMatcher.find()) {\n+                throw new IllegalArgumentException(\"Invalid pattern\");\n+            }\n+            currentFormatField = patternMatcher.group();\n+            currentStrategy = getStrategy(currentFormatField);\n+        }\n+\n+        StringBuilder regex= new StringBuilder();\n+        List<Strategy> collector= new ArrayList<Strategy>();\n+        if(currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+        for(;;) {\n+            int fieldStart = patternMatcher.end();\n+            if(!patternMatcher.find()) {\n+                break;\n+            }\n+            int fieldEnd = patternMatcher.start();\n+            String nextFormatField= patternMatcher.group();\n+            nextStrategy = getStrategy(nextFormatField);\n+            if(nextStrategy != null) {\n+                if (!currentStrategy.isCompatibleWith(nextStrategy)) {\n+                    if (currentStrategy.addRegex(this, regex)) {\n+                        collector.add(currentStrategy);\n+                    }\n+                    currentFormatField = nextFormatField;\n+                    currentStrategy = nextStrategy;\n+                } else {\n+                    // merge currentStrategy and nextStrategy\n+                    currentFormatField = currentFormatField.concat(nextFormatField);\n+                    currentStrategy = currentStrategy.merge(nextStrategy);\n+                }\n+            } else {\n+                if (currentStrategy.addRegex(this, regex)) {\n+                    collector.add(currentStrategy);\n+                }\n+                currentFormatField = nextFormatField;\n+                currentStrategy = null;\n+            }\n+            // add text between format fields\n+            String text = pattern.substring(fieldEnd, patternMatcher.start());\n+            if(!text.isEmpty()) {\n+                collector.add(new CopyQuotedStrategy(text));\n+            }\n+        }\n+        if (currentStrategy != null) {\n+            if (currentStrategy.addRegex(this, regex)) {\n+                collector.add(currentStrategy);\n+            }\n+        }\n+        currentFormatField = null;\n+        strategies = collector.toArray(new Strategy[collector.size()]);\n+        parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: variable patternMatcher is already defined in method init()",
    "test_result": "ERROR"
}