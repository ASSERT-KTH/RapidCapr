{
    "patch": "@Override \npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) return;\n\n    if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n    }\n\n    if (parent.getType() == Token.EQ && parent.getFirstChild().getType() == Token.GETPROP) {\n        // Special case for goog.module\n        defineNamespace(n, parent);\n        return;\n    }\n\n    if (NodeUtil.isFunctionBlock(n) || n.getType() == Token.BLOCK) {\n        defineFunctionBlock(n, parent);\n    }\n\n    if (NodeUtil.isStatementBlock(n)) {\n        defineBlock(n, parent);\n    }\n\n    if (NodeUtil.isFunctionDeclaration(n)) {\n        defineDeclaredFunction(n, parent);\n    }\n\n    // If it's a catch or var block, define the variables.\n    if (NodeUtil.isNameDeclaration(n) || n.getType() == Token.CATCH) {\n        attachLiteralTypes(n);\n        switch (n.getType()) {\n            case Token.VAR:\n                defineVar(n, parent);\n                break;\n            case Token.CATCH:\n                defineCatch(n, parent);\n                break;\n            default:\n                break; // added for completeness\n        }\n    }\n\n    // Also function calls 'define' and object literal keys.\n    if (n.getType() == Token.CALL && \"define\".equals(n.getFirstChild().getQualifiedName())) {\n        defineCall(n, parent);\n    }\n\n    if (n.isComputedProp()) {\n        handleComputedProp(n, parent);\n    }\n\n    // Also function calls 'require' and 'provide'.\n    if (n.getType() == Token.CALL && (\"require\".equals(n.getFirstChild().getQualifiedName()) || \"provide\".equals(n.getFirstChild().getQualifiedName()))) {\n        handleCall(n, parent);\n    }\n\n    // Expression that has an assignment as parent.\n    if (parent.isAssign()) {\n        handleAssign(n, parent);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..8b5cb558 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,67 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+@Override \n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) return;\n+\n+    if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+        handleFunctionInputs(parent);\n+        return;\n+    }\n+\n+    if (parent.getType() == Token.EQ && parent.getFirstChild().getType() == Token.GETPROP) {\n+        // Special case for goog.module\n+        defineNamespace(n, parent);\n+        return;\n+    }\n+\n+    if (NodeUtil.isFunctionBlock(n) || n.getType() == Token.BLOCK) {\n+        defineFunctionBlock(n, parent);\n+    }\n+\n+    if (NodeUtil.isStatementBlock(n)) {\n+        defineBlock(n, parent);\n+    }\n+\n+    if (NodeUtil.isFunctionDeclaration(n)) {\n+        defineDeclaredFunction(n, parent);\n+    }\n+\n+    // If it's a catch or var block, define the variables.\n+    if (NodeUtil.isNameDeclaration(n) || n.getType() == Token.CATCH) {\n+        attachLiteralTypes(n);\n+        switch (n.getType()) {\n+            case Token.VAR:\n+                defineVar(n, parent);\n+                break;\n+            case Token.CATCH:\n+                defineCatch(n, parent);\n+                break;\n+            default:\n+                break; // added for completeness\n+        }\n+    }\n+\n+    // Also function calls 'define' and object literal keys.\n+    if (n.getType() == Token.CALL && \"define\".equals(n.getFirstChild().getQualifiedName())) {\n+        defineCall(n, parent);\n+    }\n+\n+    if (n.isComputedProp()) {\n+        handleComputedProp(n, parent);\n+    }\n+\n+    // Also function calls 'require' and 'provide'.\n+    if (n.getType() == Token.CALL && (\"require\".equals(n.getFirstChild().getQualifiedName()) || \"provide\".equals(n.getFirstChild().getQualifiedName()))) {\n+        handleCall(n, parent);\n+    }\n+\n+    // Expression that has an assignment as parent.\n+    if (parent.isAssign()) {\n+        handleAssign(n, parent);\n+    }\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}