{
    "patch": "public class Example {\n\n    public static String getprop4(Properties props) {\n        return props.getProperty(\"prop4\", \"default value\");\n    }\n\n    // test function to check the implementation\n    public static void testGetprop4() {\n        Properties props = new Properties();\n        props.setProperty(\"prop1\", \"value1\");\n        props.setProperty(\"prop2\", \"value2\");\n        props.setProperty(\"prop3\", \"value3\");\n\n        // This property is not set, so getprop4 should return \"default value\"\n        String val = getprop4(props);\n        assertEquals(\"default value\", val);\n\n        // Set the property and try again\n        props.setProperty(\"prop4\", \"value4\");\n        val = getprop4(props);\n        assertEquals(\"value4\", val);\n\n        // Check that a warning is issued if the property value is empty\n        props.setProperty(\"prop4\", \"\");\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        PrintStream ps = new PrintStream(baos);\n        System.setErr(ps);\n\n        val = getprop4(props);\n        String[] warnings = baos.toString().split(\"\\\\n\");\n        assertTrue(\"expected a warning\", warnings.length > 0);\n        assertTrue(\"warning should contain 'empty value'\", warnings[0].contains(\"empty value\"));\n    }\n\n    public static void main(String[] args) {\n        testGetprop4();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..b3ddf0d8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,44 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public class Example {\n+\n+    public static String getprop4(Properties props) {\n+        return props.getProperty(\"prop4\", \"default value\");\n+    }\n+\n+    // test function to check the implementation\n+    public static void testGetprop4() {\n+        Properties props = new Properties();\n+        props.setProperty(\"prop1\", \"value1\");\n+        props.setProperty(\"prop2\", \"value2\");\n+        props.setProperty(\"prop3\", \"value3\");\n+\n+        // This property is not set, so getprop4 should return \"default value\"\n+        String val = getprop4(props);\n+        assertEquals(\"default value\", val);\n+\n+        // Set the property and try again\n+        props.setProperty(\"prop4\", \"value4\");\n+        val = getprop4(props);\n+        assertEquals(\"value4\", val);\n+\n+        // Check that a warning is issued if the property value is empty\n+        props.setProperty(\"prop4\", \"\");\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        PrintStream ps = new PrintStream(baos);\n+        System.setErr(ps);\n+\n+        val = getprop4(props);\n+        String[] warnings = baos.toString().split(\"\\\\n\");\n+        assertTrue(\"expected a warning\", warnings.length > 0);\n+        assertTrue(\"warning should contain 'empty value'\", warnings[0].contains(\"empty value\"));\n+    }\n+\n+    public static void main(String[] args) {\n+        testGetprop4();\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}