{
    "patch": "      // Handle the case where the constraint object is a union type.\n      // Unpack the union and match each constraint.\n      //\n      // param constraintObj {(string|number|{prop: (number|undefined)})}\n      // function f(constraintObj) {}\n      // f(\"\");\n      //\n      // We want to unpack the union and try to match each constraint type separately.\n      if (constraintObj.isUnionType()) {\n        for (JSType alt : constraintObj.getUnionMembers()) {\n          matchConstraint(alt.getObjectType());\n        }\n        return;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..7b9f32de 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,20 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+      // Handle the case where the constraint object is a union type.\n+      // Unpack the union and match each constraint.\n+      //\n+      // param constraintObj {(string|number|{prop: (number|undefined)})}\n+      // function f(constraintObj) {}\n+      // f(\"\");\n+      //\n+      // We want to unpack the union and try to match each constraint type separately.\n+      if (constraintObj.isUnionType()) {\n+        for (JSType alt : constraintObj.getUnionMembers()) {\n+          matchConstraint(alt.getObjectType());\n+        }\n+        return;\n+      }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}