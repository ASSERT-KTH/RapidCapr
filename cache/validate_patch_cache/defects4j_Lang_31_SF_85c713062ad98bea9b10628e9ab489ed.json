{
    "patch": "public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int len = sequence.length();\n    final int searchLen = searchChars.length;\n    final int stop = len - 1;\n\n    for (int i = 0; i < len; i++) {\n        final int c = (int) sequence.charAt(i);\n        if (c < Character.MAX_VALUE && ArrayUtils.contains(searchChars, (char) c))\n            return true;\n        if (c >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            for (int j = 0; j < searchLen; j++) {\n                if (j + 1 < searchLen) {\n                    final int cp = Character.codePointAt(searchChars, j);\n                    if (cp == c)\n                        return true;\n                    j++;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..d17b8c1c 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,31 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int len = sequence.length();\n+    final int searchLen = searchChars.length;\n+    final int stop = len - 1;\n+\n+    for (int i = 0; i < len; i++) {\n+        final int c = (int) sequence.charAt(i);\n+        if (c < Character.MAX_VALUE && ArrayUtils.contains(searchChars, (char) c))\n+            return true;\n+        if (c >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n+            for (int j = 0; j < searchLen; j++) {\n+                if (j + 1 < searchLen) {\n+                    final int cp = Character.codePointAt(searchChars, j);\n+                    if (cp == c)\n+                        return true;\n+                    j++;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}