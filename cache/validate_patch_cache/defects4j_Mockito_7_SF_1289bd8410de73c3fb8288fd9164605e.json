{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] actualTypeArguments = typeVariable.getActualTypeArguments();\n    if (actualTypeArguments.length == 0) {\n        // No actual type argument available\n        return null;\n    } else if (actualTypeArguments.length == 1) {\n        // Single actual type argument\n        return actualTypeArguments[0];\n    } else {\n        // Multiple actual type arguments\n        for (Type actualTypeArgument : actualTypeArguments) {\n            if (!actualTypeArgument.equals(typeVariable)) {\n                return actualTypeArgument;\n            }\n        }\n        // Unable to determine actual type argument\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..39e28709f 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,26 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] actualTypeArguments = typeVariable.getActualTypeArguments();\n+    if (actualTypeArguments.length == 0) {\n+        // No actual type argument available\n+        return null;\n+    } else if (actualTypeArguments.length == 1) {\n+        // Single actual type argument\n+        return actualTypeArguments[0];\n+    } else {\n+        // Multiple actual type arguments\n+        for (Type actualTypeArgument : actualTypeArguments) {\n+            if (!actualTypeArgument.equals(typeVariable)) {\n+                return actualTypeArgument;\n+            }\n+        }\n+        // Unable to determine actual type argument\n+        return null;\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}