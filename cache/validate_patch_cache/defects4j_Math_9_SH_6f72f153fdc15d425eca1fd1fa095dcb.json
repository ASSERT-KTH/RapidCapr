{
    "patch": "public Line(Vector3D p, Vector3D q) {\n    direction = q.subtract(p);\n    if (direction.getNormSq() == 0) {\n        throw new ZeroException();\n    }\n    // Round off to 10 decimal places\n    p = new Vector3D(\n        FastMath.round(p.getX() * 1e10) / 1e10, \n        FastMath.round(p.getY() * 1e10) / 1e10, \n        FastMath.round(p.getZ() * 1e10) / 1e10);\n\n    direction = new Vector3D(\n        FastMath.round(direction.getX() * 1e10) / 1e10, \n        FastMath.round(direction.getY() * 1e10) / 1e10, \n        FastMath.round(direction.getZ() * 1e10) / 1e10);\n    LineUtils.checkPointsDistance(p, q, direction);\n    origin = p;\n    abscissa = new Line(origin, direction.normalize());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..732d23376 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,7 +84,25 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n+public Line(Vector3D p, Vector3D q) {\n+    direction = q.subtract(p);\n+    if (direction.getNormSq() == 0) {\n+        throw new ZeroException();\n+    }\n+    // Round off to 10 decimal places\n+    p = new Vector3D(\n+        FastMath.round(p.getX() * 1e10) / 1e10, \n+        FastMath.round(p.getY() * 1e10) / 1e10, \n+        FastMath.round(p.getZ() * 1e10) / 1e10);\n+\n+    direction = new Vector3D(\n+        FastMath.round(direction.getX() * 1e10) / 1e10, \n+        FastMath.round(direction.getY() * 1e10) / 1e10, \n+        FastMath.round(direction.getZ() * 1e10) / 1e10);\n+    LineUtils.checkPointsDistance(p, q, direction);\n+    origin = p;\n+    abscissa = new Line(origin, direction.normalize());\n+}\n         return reverted;\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}