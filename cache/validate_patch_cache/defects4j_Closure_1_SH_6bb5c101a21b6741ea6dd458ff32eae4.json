{
    "patch": "      int numArgs = argList.getChildCount();\n      for (int i = numArgs - 1; i >= 0; --i) {\n        Node arg = argList.getChildAtIndex(i);\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChildAtIndex(i);\n          compiler.reportCodeChange();\n        }\n      }\n    } else {\n      // Don't strip unreferenced args if we are optimizing calls.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4f21cc18 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,17 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      int numArgs = argList.getChildCount();\n+      for (int i = numArgs - 1; i >= 0; --i) {\n+        Node arg = argList.getChildAtIndex(i);\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChildAtIndex(i);\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    } else {\n+      // Don't strip unreferenced args if we are optimizing calls.\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}