{
    "patch": "public static double getTypedPercent(String js) {\n    int count = 0;\n    int typed = 0;\n    int startIndex = 0;\n    while ((startIndex = js.indexOf(\"status\", startIndex)) != -1) {\n        count++;\n        if (js.indexOf(\"\\\"type\\\": \\\"typing\\\"\", startIndex) != -1) {\n            typed++;\n        }\n        startIndex += 6;\n    }\n    if (count == 0) {\n        return 0.0;\n    }\n    return (double) typed / count * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..01874c30 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    int count = 0;\n+    int typed = 0;\n+    int startIndex = 0;\n+    while ((startIndex = js.indexOf(\"status\", startIndex)) != -1) {\n+        count++;\n+        if (js.indexOf(\"\\\"type\\\": \\\"typing\\\"\", startIndex) != -1) {\n+            typed++;\n+        }\n+        startIndex += 6;\n+    }\n+    if (count == 0) {\n+        return 0.0;\n+    }\n+    return (double) typed / count * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}