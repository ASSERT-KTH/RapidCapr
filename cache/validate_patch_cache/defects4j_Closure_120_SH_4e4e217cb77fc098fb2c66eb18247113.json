{
    "patch": "  // Make sure this assignment is not in a loop.\n  for (BasicBlock block = ref.getBasicBlock();\n       block != null; block = block.getParent()) {\n    if (block.isFunction) {\n      break;\n    } else if (block.isLoop) {\n      // We need to check if the only exit from the loop is via a continue.\n      BasicBlock onlyExit = null;\n      List<BasicBlock> exits = block.getExits();\n      for (BasicBlock exit : exits) {\n        if (exit.getEntry().type == Token.CONTINUE) {\n          continue;\n        }\n        if (onlyExit != null) {\n          return false;\n        }\n        onlyExit = exit;\n      }\n      if (onlyExit == null) {\n        break;\n      }\n      // Recursively check the blocks that are only reachable via continue.\n      List<BasicBlock> continueBlocks = onlyExit.getReachableContinueBlocks();\n      for (BasicBlock continueBlock : continueBlocks) {\n        if (!continueBlock.getLastStatement().canThrowExceptions()) {\n          continue;\n        }\n        for (CfgBlock cb : continueBlock.getSuccessors()) {\n          if (!cb.getEntry().canThrowExceptions()) {\n            continue;\n          }\n          if (!cb.isUnreachable()) {\n            return false;\n          }\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..4ad26b78 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,44 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+  // Make sure this assignment is not in a loop.\n+  for (BasicBlock block = ref.getBasicBlock();\n+       block != null; block = block.getParent()) {\n+    if (block.isFunction) {\n+      break;\n+    } else if (block.isLoop) {\n+      // We need to check if the only exit from the loop is via a continue.\n+      BasicBlock onlyExit = null;\n+      List<BasicBlock> exits = block.getExits();\n+      for (BasicBlock exit : exits) {\n+        if (exit.getEntry().type == Token.CONTINUE) {\n+          continue;\n+        }\n+        if (onlyExit != null) {\n+          return false;\n+        }\n+        onlyExit = exit;\n+      }\n+      if (onlyExit == null) {\n+        break;\n+      }\n+      // Recursively check the blocks that are only reachable via continue.\n+      List<BasicBlock> continueBlocks = onlyExit.getReachableContinueBlocks();\n+      for (BasicBlock continueBlock : continueBlocks) {\n+        if (!continueBlock.getLastStatement().canThrowExceptions()) {\n+          continue;\n+        }\n+        for (CfgBlock cb : continueBlock.getSuccessors()) {\n+          if (!cb.getEntry().canThrowExceptions()) {\n+            continue;\n+          }\n+          if (!cb.isUnreachable()) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n+  }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}