{
    "patch": "import java.util.Properties;\n\npublic class SystemProperties {\n\n    public static String getprop(String propertyName) {\n        String propertyValue = \"\";\n\n        try {\n            Properties properties = System.getProperties();\n            propertyValue = properties.getProperty(propertyName);\n        } catch (Exception e) {\n            System.out.println(\"Error while getting property value: \" + e.getMessage());\n        }\n\n        return propertyValue;\n    }\n\n    public static void main(String[] args) {\n        String[] warnings = { \"warning 1\", \"warning 2\", \"warning 3\" };\n        String propertyName = \"warnings\";\n\n        System.setProperty(propertyName, String.join(\",\", warnings));\n        String result = getprop(propertyName);\n\n        String[] resultArray = result.split(\",\");\n        for (String warning : warnings) {\n            assertTrue(\"expected a warning\", contains(resultArray, warning));\n        }\n    }\n\n    public static boolean contains(String[] array, String value) {\n        for (String s : array) {\n            if (s.equals(value)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..28d7175d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,45 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+import java.util.Properties;\n+\n+public class SystemProperties {\n+\n+    public static String getprop(String propertyName) {\n+        String propertyValue = \"\";\n+\n+        try {\n+            Properties properties = System.getProperties();\n+            propertyValue = properties.getProperty(propertyName);\n+        } catch (Exception e) {\n+            System.out.println(\"Error while getting property value: \" + e.getMessage());\n+        }\n+\n+        return propertyValue;\n+    }\n+\n+    public static void main(String[] args) {\n+        String[] warnings = { \"warning 1\", \"warning 2\", \"warning 3\" };\n+        String propertyName = \"warnings\";\n+\n+        System.setProperty(propertyName, String.join(\",\", warnings));\n+        String result = getprop(propertyName);\n+\n+        String[] resultArray = result.split(\",\");\n+        for (String warning : warnings) {\n+            assertTrue(\"expected a warning\", contains(resultArray, warning));\n+        }\n+    }\n+\n+    public static boolean contains(String[] array, String value) {\n+        for (String s : array) {\n+            if (s.equals(value)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}