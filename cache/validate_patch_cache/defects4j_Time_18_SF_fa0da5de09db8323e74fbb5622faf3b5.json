{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException {\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    boolean inCutoverRange = year == 1582 && monthOfYear == 10 && 5 <= dayOfMonth && dayOfMonth <= 14;\n\n    // Check if date is in Gregorian calendar\n    boolean isGregorianAfterCutover = year > 1582 || (year == 1582 && monthOfYear > 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth >= 15);\n    boolean isGregorianBeforeCutover = year < 1582 || (year == 1582 && monthOfYear < 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth < 15);\n\n    if (isGregorianAfterCutover) {\n        // Gregorian\n        return iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } else if (isGregorianBeforeCutover) {\n        // Julian\n        if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {\n            throw new IllegalArgumentException(\"Invalid leap year day\");\n        }\n        return iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } else if (inCutoverRange) {\n        throw new IllegalArgumentException(\"Date '1582-10-05' to '1582-10-14' does not exist in calendar\");\n    } else {\n        // Date is in the cutover period\n        long gregorianInstant, julianInstant;\n        try {\n            gregorianInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException e) {\n            // Date does not exist in Gregorian calendar\n            julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (!isLeapYear(1582) || monthOfYear == 10) {\n                throw e;\n            }\n            LocalDate julian = new LocalDate(julianInstant, iJulianChronology);\n            LocalDate gregorian = new LocalDate(year, monthOfYear, Math.min(dayOfMonth, 4), iGregorianChronology);\n            return gregorian.toDateTimeAtStartOfDay().getMillis();\n        }\n\n        // Date exists in Gregorian calendar\n        julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (!isLeapYear(year)) {\n            return gregorianInstant;\n        }\n\n        // Check if date is ambiguous (exists in both calendars)\n        LocalDate gregorian = new LocalDate(gregorianInstant, iGregorianChronology);\n        LocalDate julian = new LocalDate(julianInstant, iJulianChronology);\n        if (isBeforeCutover(julian) || isAfterCutover(gregorian) || gregorian.getDayOfMonth() <= 4) {\n            return gregorianInstant;\n        } else if (isAfterCutover(julian) || isBeforeCutover(gregorian) || julian.getDayOfMonth() >= 15) {\n            return julianInstant;\n        } else {\n            throw new IllegalArgumentException(\"Specified date is ambiguous\");\n        }\n    }\n}\n\nprivate boolean isBeforeCutover(LocalDate date) {\n    return date.getYear() < 1582 || (date.getYear() == 1582 && (date.getMonthOfYear() < 10 ||\n            (date.getMonthOfYear() == 10 && date.getDayOfMonth() < 15)));\n}\n\nprivate boolean isAfterCutover(LocalDate date) {\n    return date.getYear() > 1582 || (date.getYear() == 1582 && (date.getMonthOfYear() > 10 ||\n            (date.getMonthOfYear() == 10 && date.getDayOfMonth() >= 5)));\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..72c2d763 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,35 +347,82 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                   int hourOfDay, int minuteOfHour,\n                                   int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        }\n+        throws IllegalArgumentException {\n+    Chronology base;\n+    if ((base = getBase()) != null) {\n+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    }\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n+    boolean inCutoverRange = year == 1582 && monthOfYear == 10 && 5 <= dayOfMonth && dayOfMonth <= 14;\n+\n+    // Check if date is in Gregorian calendar\n+    boolean isGregorianAfterCutover = year > 1582 || (year == 1582 && monthOfYear > 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth >= 15);\n+    boolean isGregorianBeforeCutover = year < 1582 || (year == 1582 && monthOfYear < 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth < 15);\n+\n+    if (isGregorianAfterCutover) {\n+        // Gregorian\n+        return iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    } else if (isGregorianBeforeCutover) {\n+        // Julian\n+        if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {\n+            throw new IllegalArgumentException(\"Invalid leap year day\");\n+        }\n+        return iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    } else if (inCutoverRange) {\n+        throw new IllegalArgumentException(\"Date '1582-10-05' to '1582-10-14' does not exist in calendar\");\n+    } else {\n+        // Date is in the cutover period\n+        long gregorianInstant, julianInstant;\n+        try {\n+            gregorianInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        } catch (IllegalArgumentException e) {\n+            // Date does not exist in Gregorian calendar\n+            julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            if (!isLeapYear(1582) || monthOfYear == 10) {\n+                throw e;\n             }\n+            LocalDate julian = new LocalDate(julianInstant, iJulianChronology);\n+            LocalDate gregorian = new LocalDate(year, monthOfYear, Math.min(dayOfMonth, 4), iGregorianChronology);\n+            return gregorian.toDateTimeAtStartOfDay().getMillis();\n+        }\n+\n+        // Date exists in Gregorian calendar\n+        julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        if (!isLeapYear(year)) {\n+            return gregorianInstant;\n+        }\n+\n+        // Check if date is ambiguous (exists in both calendars)\n+        LocalDate gregorian = new LocalDate(gregorianInstant, iGregorianChronology);\n+        LocalDate julian = new LocalDate(julianInstant, iJulianChronology);\n+        if (isBeforeCutover(julian) || isAfterCutover(gregorian) || gregorian.getDayOfMonth() <= 4) {\n+            return gregorianInstant;\n+        } else if (isAfterCutover(julian) || isBeforeCutover(gregorian) || julian.getDayOfMonth() >= 15) {\n+            return julianInstant;\n+        } else {\n+            throw new IllegalArgumentException(\"Specified date is ambiguous\");\n         }\n-        return instant;\n     }\n+}\n+\n+private boolean isBeforeCutover(LocalDate date) {\n+    return date.getYear() < 1582 || (date.getYear() == 1582 && (date.getMonthOfYear() < 10 ||\n+            (date.getMonthOfYear() == 10 && date.getDayOfMonth() < 15)));\n+}\n+\n+private boolean isAfterCutover(LocalDate date) {\n+    return date.getYear() > 1582 || (date.getYear() == 1582 && (date.getMonthOfYear() > 10 ||\n+            (date.getMonthOfYear() == 10 && date.getDayOfMonth() >= 5)));\n+}\n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}