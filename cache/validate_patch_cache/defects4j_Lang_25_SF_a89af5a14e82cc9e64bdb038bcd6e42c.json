{
    "patch": "import java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\n\npublic class CharsetUtil {\n\n    public static final Charset ISO_8859_1 = StandardCharsets.ISO_8859_1;\n    \n    public static String escape(String input, Charset charset) {\n        StringBuilder resultBuilder = new StringBuilder(input.length());\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n            if (c > 127) {\n                byte[] bytes = Character.toString(c).getBytes(charset);\n                for (byte b : bytes) {\n                    resultBuilder.append(String.format(\"=%02X\", b));\n                }\n            } else {\n                resultBuilder.append(c);\n            }\n        }\n        return resultBuilder.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..625d05c1 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,29 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+public class CharsetUtil {\n+\n+    public static final Charset ISO_8859_1 = StandardCharsets.ISO_8859_1;\n+    \n+    public static String escape(String input, Charset charset) {\n+        StringBuilder resultBuilder = new StringBuilder(input.length());\n+        for (int i = 0; i < input.length(); i++) {\n+            char c = input.charAt(i);\n+            if (c > 127) {\n+                byte[] bytes = Character.toString(c).getBytes(charset);\n+                for (byte b : bytes) {\n+                    resultBuilder.append(String.format(\"=%02X\", b));\n+                }\n+            } else {\n+                resultBuilder.append(c);\n+            }\n+        }\n+        return resultBuilder.toString();\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}