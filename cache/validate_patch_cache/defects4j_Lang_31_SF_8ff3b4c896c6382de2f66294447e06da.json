{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int strLength = str.length();\n    int searchLength = searchChars.length;\n    boolean[] hits = new boolean[Character.MAX_VALUE + 1];\n    for (int i = 0; i < searchLength; i++) {\n        hits[searchChars[i]] = true;\n    }\n    for (int i = 0; i < strLength; i++) {\n        char ch = str.charAt(i);\n        if (Character.isHighSurrogate(ch) && i < strLength - 1) {\n            int codePoint = Character.codePointAt(str, i);\n            i++;\n            if (containsCodePoint(searchChars, codePoint)) {\n                return true;\n            }\n        } else {\n            if (hits[ch]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean containsCodePoint(char[] searchChars, int codePoint) {\n    for (int i = 0; i < searchChars.length;) {\n        if (Character.isHighSurrogate(searchChars[i])) {\n            if (i + 1 < searchChars.length && Character.codePointAt(searchChars, i) == codePoint) {\n                return true;\n            }\n            i += 2;\n        } else {\n            if (searchChars[i] == codePoint) {\n                return true;\n            }\n            i++;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..84619ed9 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,49 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int strLength = str.length();\n+    int searchLength = searchChars.length;\n+    boolean[] hits = new boolean[Character.MAX_VALUE + 1];\n+    for (int i = 0; i < searchLength; i++) {\n+        hits[searchChars[i]] = true;\n+    }\n+    for (int i = 0; i < strLength; i++) {\n+        char ch = str.charAt(i);\n+        if (Character.isHighSurrogate(ch) && i < strLength - 1) {\n+            int codePoint = Character.codePointAt(str, i);\n+            i++;\n+            if (containsCodePoint(searchChars, codePoint)) {\n+                return true;\n+            }\n+        } else {\n+            if (hits[ch]) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean containsCodePoint(char[] searchChars, int codePoint) {\n+    for (int i = 0; i < searchChars.length;) {\n+        if (Character.isHighSurrogate(searchChars[i])) {\n+            if (i + 1 < searchChars.length && Character.codePointAt(searchChars, i) == codePoint) {\n+                return true;\n+            }\n+            i += 2;\n+        } else {\n+            if (searchChars[i] == codePoint) {\n+                return true;\n+            }\n+            i++;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}