{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    if (n * n > 250000) {\n        throw new IllegalArgumentException(\"Matrix is too large to compute square root.\");\n    }\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix sqrt = dec.getSquareRoot();\n    if (sqrt == null) {\n        for (int i = 0; i < n; i++) {\n            double val = FastMath.sqrt(FastMath.abs(dec.getRealEigenvalue(i)));\n            if (Double.isNaN(val) || Double.isInfinite(val)) {\n                throw new IllegalArgumentException(\"Matrix cannot be square rooted.\");\n            }\n            RealVector vec = dec.getEigenvector(i);\n            for (int j = 0; j < n; j++) {\n                vec.setEntry(j, vec.getEntry(j) * val);\n            }\n            if (sqrt == null) {\n                sqrt = new Array2DRowRealMatrix(n, n);\n            }\n            sqrt.setColumnVector(i, vec);\n        }\n    }\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c86dae7c5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    if (n * n > 250000) {\n+        throw new IllegalArgumentException(\"Matrix is too large to compute square root.\");\n     }\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix sqrt = dec.getSquareRoot();\n+    if (sqrt == null) {\n+        for (int i = 0; i < n; i++) {\n+            double val = FastMath.sqrt(FastMath.abs(dec.getRealEigenvalue(i)));\n+            if (Double.isNaN(val) || Double.isInfinite(val)) {\n+                throw new IllegalArgumentException(\"Matrix cannot be square rooted.\");\n+            }\n+            RealVector vec = dec.getEigenvector(i);\n+            for (int j = 0; j < n; j++) {\n+                vec.setEntry(j, vec.getEntry(j) * val);\n+            }\n+            if (sqrt == null) {\n+                sqrt = new Array2DRowRealMatrix(n, n);\n+            }\n+            sqrt.setColumnVector(i, vec);\n+        }\n+    }\n+    return sqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}