{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n            Separator sep = (Separator) elementPairs.get(0);\n            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            return new PeriodFormatter(sep, sep);\n        }\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, new PeriodParser() {\n                @Override\n                public void parseInto(ReadWritablePeriod period, String periodStr, Locale locale) {\n                    PeriodParser p = ((PeriodFormatter) comp[1]).getParser();\n                    p.parseInto(period, periodStr, locale);\n                    truncateSeconds(period);\n                }\n            });\n        } else if (notParser) {\n            return new PeriodFormatter(new PeriodPrinter() {\n                @Override\n                public int estimatePrintedLength() {\n                    return ((PeriodFormatter) comp[0]).estimatePrintedLength() + 2;\n                }\n\n                @Override\n                public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n                    ((PeriodFormatter) comp[0]).getPrinter().printTo(buf, period, locale);\n                    printSecondsWithOptionalFractional(buf, period);\n                }\n\n                @Override\n                public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {\n                    ((PeriodFormatter) comp[0]).getPrinter().printTo(out, period, locale);\n                    printSecondsWithOptionalFractional(out, period);\n                }\n\n                private void printSecondsWithOptionalFractional(Appendable appendable, ReadablePeriod period) throws IOException {\n                    int seconds = period.get(org.joda.time.DurationFieldType.seconds());\n                    if (seconds != 0) {\n                        DecimalPoint dp = new DecimalPoint();\n                        dp.printTo(appendable);\n                        int millis = period.get(org.joda.time.DurationFieldType.millis());\n                        if (millis == 0) {\n                            appendable.append(ZERO_PADDING + Math.abs(seconds));\n                        } else {\n                            String str = \"\" + Math.abs(seconds) + DecimalPoint.MILLISECONDS_PATTERN.print(millis);\n                            appendable.append(str);\n                        }\n                    }\n                }\n            }, null);\n        } else {\n            return new PeriodFormatter(((PeriodFormatter) comp[0]).getPrinter(), new PeriodParser() {\n                @Override\n                public void parseInto(ReadWritablePeriod period, String periodStr, Locale locale) {\n                    PeriodParser p = ((PeriodFormatter) comp[1]).getParser();\n                    p.parseInto(period, periodStr, locale);\n                    truncateSeconds(period);\n                }\n            });\n        }\n    }\n\n    private static void truncateSeconds(ReadWritablePeriod period) {\n        if (period.get(org.joda.time.DurationFieldType.seconds()) >= 1_000_000) {\n            period.set(org.joda.time.DurationFieldType.seconds(), 999_999);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..c489d592 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,24 +791,76 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n         if (notPrinter && notParser) {\n             throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n         }\n         int size = elementPairs.size();\n         if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n             Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+            return new PeriodFormatter(sep, sep);\n         }\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            return new PeriodFormatter(null, new PeriodParser() {\n+                @Override\n+                public void parseInto(ReadWritablePeriod period, String periodStr, Locale locale) {\n+                    PeriodParser p = ((PeriodFormatter) comp[1]).getParser();\n+                    p.parseInto(period, periodStr, locale);\n+                    truncateSeconds(period);\n+                }\n+            });\n         } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            return new PeriodFormatter(new PeriodPrinter() {\n+                @Override\n+                public int estimatePrintedLength() {\n+                    return ((PeriodFormatter) comp[0]).estimatePrintedLength() + 2;\n+                }\n+\n+                @Override\n+                public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n+                    ((PeriodFormatter) comp[0]).getPrinter().printTo(buf, period, locale);\n+                    printSecondsWithOptionalFractional(buf, period);\n+                }\n+\n+                @Override\n+                public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {\n+                    ((PeriodFormatter) comp[0]).getPrinter().printTo(out, period, locale);\n+                    printSecondsWithOptionalFractional(out, period);\n+                }\n+\n+                private void printSecondsWithOptionalFractional(Appendable appendable, ReadablePeriod period) throws IOException {\n+                    int seconds = period.get(org.joda.time.DurationFieldType.seconds());\n+                    if (seconds != 0) {\n+                        DecimalPoint dp = new DecimalPoint();\n+                        dp.printTo(appendable);\n+                        int millis = period.get(org.joda.time.DurationFieldType.millis());\n+                        if (millis == 0) {\n+                            appendable.append(ZERO_PADDING + Math.abs(seconds));\n+                        } else {\n+                            String str = \"\" + Math.abs(seconds) + DecimalPoint.MILLISECONDS_PATTERN.print(millis);\n+                            appendable.append(str);\n+                        }\n+                    }\n+                }\n+            }, null);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            return new PeriodFormatter(((PeriodFormatter) comp[0]).getPrinter(), new PeriodParser() {\n+                @Override\n+                public void parseInto(ReadWritablePeriod period, String periodStr, Locale locale) {\n+                    PeriodParser p = ((PeriodFormatter) comp[1]).getParser();\n+                    p.parseInto(period, periodStr, locale);\n+                    truncateSeconds(period);\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void truncateSeconds(ReadWritablePeriod period) {\n+        if (period.get(org.joda.time.DurationFieldType.seconds()) >= 1_000_000) {\n+            period.set(org.joda.time.DurationFieldType.seconds(), 999_999);\n         }\n     }\n ",
    "result_reason": "error: underscores in literals are not supported in -source 1.5",
    "test_result": "ERROR"
}