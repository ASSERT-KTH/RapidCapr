{
    "patch": "        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            int[] newValues = values.clone();\n            newValues[fieldIndex] += valueToAdd;\n            int month = newValues[DateTimeFieldType.monthOfYear()];\n            int year = newValues[DateTimeFieldType.year()];\n            int day = newValues[DateTimeFieldType.dayOfMonth()];\n            if (month > 12) {\n                newValues[DateTimeFieldType.monthOfYear()] = month % 12;\n                year += month / 12;\n                newValues[DateTimeFieldType.year()] = year;\n            } else if (month < 1) {\n                newValues[DateTimeFieldType.monthOfYear()] = 12 - (-month % 12);\n                year -= (-month + 11) / 12;\n                newValues[DateTimeFieldType.year()] = year;\n            }\n            int maxDay = new GJChronology(iChronology.getChronology()).dayOfMonth().getMaximumValue(year, newValues[DateTimeFieldType.monthOfYear()]);\n            if (day > maxDay) {\n                newValues[DateTimeFieldType.dayOfMonth()] = maxDay;\n            }\n            return newValues;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..022b4385 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,27 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            int[] newValues = values.clone();\n+            newValues[fieldIndex] += valueToAdd;\n+            int month = newValues[DateTimeFieldType.monthOfYear()];\n+            int year = newValues[DateTimeFieldType.year()];\n+            int day = newValues[DateTimeFieldType.dayOfMonth()];\n+            if (month > 12) {\n+                newValues[DateTimeFieldType.monthOfYear()] = month % 12;\n+                year += month / 12;\n+                newValues[DateTimeFieldType.year()] = year;\n+            } else if (month < 1) {\n+                newValues[DateTimeFieldType.monthOfYear()] = 12 - (-month % 12);\n+                year -= (-month + 11) / 12;\n+                newValues[DateTimeFieldType.year()] = year;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            int maxDay = new GJChronology(iChronology.getChronology()).dayOfMonth().getMaximumValue(year, newValues[DateTimeFieldType.monthOfYear()]);\n+            if (day > maxDay) {\n+                newValues[DateTimeFieldType.dayOfMonth()] = maxDay;\n+            }\n+            return newValues;\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}