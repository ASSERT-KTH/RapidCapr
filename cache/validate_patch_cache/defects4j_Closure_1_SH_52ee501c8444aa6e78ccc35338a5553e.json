{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    Node argList = getFunctionArgList(function);\n\n    boolean hasSideEffectInArgs = false;\n    Node currentArg = argList.getFirstChild();\n    Set<String> seenParams = new HashSet<>();\n    while (currentArg != null) {\n      String argName = currentArg.getString();\n      if (seenParams.contains(argName)) {\n        // Duplicate arg, remove it.\n        argList.removeChild(currentArg);\n        compiler.reportCodeChange();\n      } else if (!referenced.contains(fnScope.getVar(argName))) {\n        // Unreferenced arg, remove it.\n        argList.removeChild(currentArg);\n        compiler.reportCodeChange();\n      } else if (NodeUtil.hasSideEffect(currentArg)) {\n        // Arg has side effect, we can't remove it.\n        hasSideEffectInArgs = true;\n      } else {\n        seenParams.add(argName);\n      }\n      currentArg = currentArg.getNext();\n    }\n\n    if (hasSideEffectInArgs) {\n      // If there are other side-effecting arguments, don't remove leading unreferenced arguments.\n      return;\n    }\n    while (argList.hasChildren()) {\n      Node firstArg = argList.getFirstChild();\n      if (referenced.contains(fnScope.getVar(firstArg.getString()))) {\n        break;\n      }\n      argList.removeChild(firstArg);\n      compiler.reportCodeChange();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0edfd966 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,48 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    Node argList = getFunctionArgList(function);\n+\n+    boolean hasSideEffectInArgs = false;\n+    Node currentArg = argList.getFirstChild();\n+    Set<String> seenParams = new HashSet<>();\n+    while (currentArg != null) {\n+      String argName = currentArg.getString();\n+      if (seenParams.contains(argName)) {\n+        // Duplicate arg, remove it.\n+        argList.removeChild(currentArg);\n+        compiler.reportCodeChange();\n+      } else if (!referenced.contains(fnScope.getVar(argName))) {\n+        // Unreferenced arg, remove it.\n+        argList.removeChild(currentArg);\n+        compiler.reportCodeChange();\n+      } else if (NodeUtil.hasSideEffect(currentArg)) {\n+        // Arg has side effect, we can't remove it.\n+        hasSideEffectInArgs = true;\n+      } else {\n+        seenParams.add(argName);\n+      }\n+      currentArg = currentArg.getNext();\n+    }\n+\n+    if (hasSideEffectInArgs) {\n+      // If there are other side-effecting arguments, don't remove leading unreferenced arguments.\n+      return;\n+    }\n+    while (argList.hasChildren()) {\n+      Node firstArg = argList.getFirstChild();\n+      if (referenced.contains(fnScope.getVar(firstArg.getString()))) {\n+        break;\n+      }\n+      argList.removeChild(firstArg);\n+      compiler.reportCodeChange();\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}